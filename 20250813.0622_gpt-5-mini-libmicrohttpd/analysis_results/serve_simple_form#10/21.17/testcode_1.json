{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(form) where form is set from the incoming parameter cls (const void *). If cls does not point to a NUL-terminated char array (for example a buffer with a known length but no terminating '\\0') or is NULL, strlen(form) will read past the bounds of the object (or dereference NULL), causing out-of-bounds access. Thus the call can violate MISRA C 2023 Rule 21.17 unless the caller can guarantee cls always points to a valid NUL-terminated string (e.g. a string literal or explicitly terminated buffer).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified serve_simple_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/87.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of serve_simple_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of serve_simple_form:\n```c\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form), form);\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_TYPE,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content type header!\\n\");\n    /* return response without content type anyway ... */\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified serve_simple_form code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe logging function: append control-flow and state info to /tmp/logs/87.txt */\nstatic void\nprobe_log_state(const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection,\n                const char *stage)\n{\n  FILE *fp = fopen(\"/tmp/logs/87.txt\", \"a\");\n  if (fp == NULL)\n  {\n    return;\n  }\n  /* Log pointer values and a stage tag so a reproducer can see the control path */\n  fprintf(fp, \"[probe] stage=%s cls=%p mime=%p session=%p connection=%p\\n\",\n          stage, cls, (void *) mime, (void *) session, (void *) connection);\n  /* If cls is NULL, explicitly note that. Do not dereference cls here to avoid\n     introducing additional out-of-bounds access beyond what the original code does. */\n  if (cls == NULL)\n  {\n    fprintf(fp, \"[probe] cls is NULL\\n\");\n  }\n  fclose(fp);\n}\n\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* Log entry and state before calling strlen to capture potential violation inputs */\n  probe_log_state(cls, mime, session, connection, \"entry_before_strlen\");\n\n  /* Log intention to call strlen (records pointer value) */\n  {\n    FILE *fp = fopen(\"/tmp/logs/87.txt\", \"a\");\n    if (fp)\n    {\n      fprintf(fp, \"[probe] about to call strlen on form=%p\\n\", (void *) form);\n      fclose(fp);\n    }\n  }\n\n  /* return static form (preserve original logic: call strlen exactly as before) */\n  size_t form_len = strlen(form);\n\n  /* Log result of strlen so reproducer sees the length (if strlen returned) */\n  {\n    FILE *fp = fopen(\"/tmp/logs/87.txt\", \"a\");\n    if (fp)\n    {\n      fprintf(fp, \"[probe] strlen(form) returned %zu for form=%p\\n\", form_len, (void *) form);\n      fclose(fp);\n    }\n  }\n\n  response = MHD_create_response_from_buffer_static (form_len, form);\n\n  /* Log response pointer returned by MHD_create_response_from_buffer_static */\n  {\n    FILE *fp = fopen(\"/tmp/logs/87.txt\", \"a\");\n    if (fp)\n    {\n      fprintf(fp, \"[probe] MHD_create_response_from_buffer_static returned response=%p\\n\", (void *) response);\n      fclose(fp);\n    }\n  }\n\n  add_session_cookie (session, response);\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_TYPE,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content type header!\\n\");\n    /* return response without content type anyway ... */\n\n    /* Log that header addition failed */\n    {\n      FILE *fp = fopen(\"/tmp/logs/87.txt\", \"a\");\n      if (fp)\n      {\n        fprintf(fp, \"[probe] MHD_add_response_header failed for response=%p mime=%p\\n\", (void *) response, (void *) mime);\n        fclose(fp);\n      }\n    }\n  }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n\n  /* Log queue result */\n  {\n    FILE *fp = fopen(\"/tmp/logs/87.txt\", \"a\");\n    if (fp)\n    {\n      fprintf(fp, \"[probe] MHD_queue_response returned %d for connection=%p response=%p\\n\", (int) ret, (void *) connection, (void *) response);\n      fclose(fp);\n    }\n  }\n\n  MHD_destroy_response (response);\n\n  /* Log exit */\n  probe_log_state(cls, mime, session, connection, \"exit\");\n\n  return ret;\n}\n"
}