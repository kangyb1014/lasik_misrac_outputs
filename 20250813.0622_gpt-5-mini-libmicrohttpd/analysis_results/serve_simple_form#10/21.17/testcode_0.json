{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts the const void *cls to const char * (const char *form = cls;) and then uses strlen(form). If cls does not point to a NUL-terminated character array (for example it points to a binary buffer of known length without a terminating '\\0', a struct, or is NULL), strlen will read past the bounds of the referenced object and cause an out-of-bounds access. Example: caller passes a 10-byte buffer without a terminating '\\0' \u2014 strlen(form) can read beyond the buffer, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified serve_simple_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/87.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of serve_simple_form as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of serve_simple_form:\n```c\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form), form);\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_TYPE,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content type header!\\n\");\n    /* return response without content type anyway ... */\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease provide the modified serve_simple_form code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* Probe log: record entry and pointer state before calling strlen */\n  {\n    FILE *log = fopen(\"/tmp/logs/87.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"serve_simple_form: entry\\n\");\n      fprintf(log, \"  cls pointer: %p\\n\", cls);\n      fprintf(log, \"  form pointer: %p\\n\", (const void *)form);\n      /* Do not attempt to dereference or inspect the memory at 'form' here ---\n         that could introduce additional out-of-bounds accesses. We will call\n         strlen exactly as the original code does to reproduce the same behavior. */\n      fclose(log);\n    }\n  }\n\n  /* return static form (preserve original logic: call strlen on form) */\n  size_t form_len = strlen (form);\n\n  /* Log the length observed by strlen (this may already reflect the violation) */\n  {\n    FILE *log = fopen(\"/tmp/logs/87.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"  strlen(form) returned: %zu\\n\", form_len);\n      fclose(log);\n    }\n  }\n\n  response = MHD_create_response_from_buffer_static (form_len, form);\n  add_session_cookie (session, response);\n\n  /* Log result of adding the content-type header */\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_TYPE,\n                               mime))\n  {\n    FILE *log = fopen(\"/tmp/logs/87.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"  Failed to set content type header!\\n\");\n      fclose(log);\n    }\n\n    fprintf (stderr,\n             \"Failed to set content type header!\\n\");\n    /* return response without content type anyway ... */\n  }\n  else\n  {\n    FILE *log = fopen(\"/tmp/logs/87.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"  Content-Type header set to: %s\\n\", mime);\n      fclose(log);\n    }\n  }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n\n  /* Log the result of queuing the response */\n  {\n    FILE *log = fopen(\"/tmp/logs/87.txt\", \"a\");\n    if (log)\n    {\n      fprintf(log, \"  MHD_queue_response returned: %d\\n\", (int)ret);\n      fprintf(log, \"serve_simple_form: exit\\n\\n\");\n      fclose(log);\n    }\n  }\n\n  MHD_destroy_response (response);\n  return ret;\n}\n"
}