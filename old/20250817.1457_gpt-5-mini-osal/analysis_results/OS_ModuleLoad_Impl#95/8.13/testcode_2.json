{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'module' is declared as OS_module_internal_record_t * and is assigned from OS_OBJECT_TABLE_GET(OS_module_table, *token), which yields the address of an entry in the global OS_module_table. In this function only a read of module->flags is performed, so 'module' could (and should) be declared as pointer-to-const (const OS_module_internal_record_t *module). Declaring it non-const when it is only used for reading violates the intent of MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/763.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Impl:\n```c\nint32 OS_ModuleLoad_Impl(const OS_object_token_t *token, const char *translated_path)\n{\n    int32                             status = OS_ERROR;\n    int                               dl_mode;\n    OS_impl_module_internal_record_t *impl;\n    OS_module_internal_record_t *     module;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n    module = OS_OBJECT_TABLE_GET(OS_module_table, *token);\n\n    /*\n     * RTLD_NOW should instruct dlopen() to resolve all the symbols in the\n     * module immediately, as opposed to waiting until they are used.\n     * The latter (lazy mode) is non-deterministic - a resolution error on\n     * a rarely-used symbol could cause a random failure far in the future.\n     */\n    dl_mode = RTLD_NOW;\n\n    if ((module->flags & OS_MODULE_FLAG_LOCAL_SYMBOLS) != 0)\n    {\n        /*\n         * Do not add the symbols in this module to the global symbol table.\n         * This mode helps prevent any unanticipated references into this\n         * module, which can in turn prevent unloading via dlclose().\n         */\n        dl_mode |= RTLD_LOCAL;\n    }\n    else\n    {\n        /*\n         * Default mode - add symbols to the global symbol table, so they\n         * will be available to resolve symbols in future module loads.\n         * However, any such references will prevent unloading of this\n         * module via dlclose().\n         */\n        dl_mode |= RTLD_GLOBAL;\n    }\n\n    dlerror();\n    impl->dl_handle = dlopen(translated_path, dl_mode);\n    if (impl->dl_handle != NULL)\n    {\n        status = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"Error loading shared library: %s\\n\", dlerror());\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <dlfcn.h>\n\n/* Probe helper - writes control flow and state to /tmp/logs/763.txt.\n * Parameters are const where only read access is required to avoid\n * introducing additional writable pointers.\n */\nstatic void OS_ModuleLoad_Probe(const OS_object_token_t *token,\n                                const OS_module_internal_record_t *module,\n                                const OS_impl_module_internal_record_t *impl,\n                                int dl_mode,\n                                int stage,\n                                int32 status)\n{\n    FILE *f = fopen(\"/tmp/logs/763.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* token, impl, module addresses; module flags (if available); dl_mode; status */\n    fprintf(f, \"OS_ModuleLoad_Impl probe stage=%d token=%p impl=%p module=%p \",\n            stage, (const void *)token, (const void *)impl, (const void *)module);\n\n    if (module != NULL)\n    {\n        /* Read module->flags to capture the state that is relevant to the violation scenario. */\n        fprintf(f, \"module->flags=0x%08x \", (unsigned int)module->flags);\n    }\n    else\n    {\n        fprintf(f, \"module->flags=(null) \");\n    }\n\n    fprintf(f, \"dl_mode=0x%08x status=%d\\n\", (unsigned int)dl_mode, (int)status);\n\n    /* If there is a dlerror available, append it at an appropriate stage. */\n    if ((stage >= 3) && (impl != NULL))\n    {\n        const char *err = dlerror();\n        if (err != NULL)\n        {\n            fprintf(f, \"OS_ModuleLoad_Impl probe stage=%d dlerror=%s\\n\", stage, err);\n        }\n    }\n\n    fclose(f);\n}\n\nint32 OS_ModuleLoad_Impl(const OS_object_token_t *token, const char *translated_path)\n{\n    int32                             status = OS_ERROR;\n    int                               dl_mode;\n    OS_impl_module_internal_record_t *impl;\n    OS_module_internal_record_t *     module;\n\n    /* Entry probe */\n    OS_ModuleLoad_Probe(token, NULL, NULL, 0, 0, status);\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n    module = OS_OBJECT_TABLE_GET(OS_module_table, *token);\n\n    /* Log after obtaining table entries and capture module->flags for evidence */\n    OS_ModuleLoad_Probe(token, module, impl, 0, 1, status);\n\n    /*\n     * RTLD_NOW should instruct dlopen() to resolve all the symbols in the\n     * module immediately, as opposed to waiting until they are used.\n     * The latter (lazy mode) is non-deterministic - a resolution error on\n     * a rarely-used symbol could cause a random failure far in the future.\n     */\n    dl_mode = RTLD_NOW;\n\n    if ((module->flags & OS_MODULE_FLAG_LOCAL_SYMBOLS) != 0)\n    {\n        /*\n         * Do not add the symbols in this module to the global symbol table.\n         * This mode helps prevent any unanticipated references into this\n         * module, which can in turn prevent unloading via dlclose().\n         */\n        dl_mode |= RTLD_LOCAL;\n\n        /* Log the decision path (local symbols) */\n        OS_ModuleLoad_Probe(token, module, impl, dl_mode, 2, status);\n    }\n    else\n    {\n        /*\n         * Default mode - add symbols to the global symbol table, so they\n         * will be available to resolve symbols in future module loads.\n         * However, any such references will prevent unloading of this\n         * module via dlclose().\n         */\n        dl_mode |= RTLD_GLOBAL;\n\n        /* Log the decision path (global symbols) */\n        OS_ModuleLoad_Probe(token, module, impl, dl_mode, 2, status);\n    }\n\n    dlerror();\n\n    /* Log just before calling dlopen */\n    OS_ModuleLoad_Probe(token, module, impl, dl_mode, 3, status);\n\n    impl->dl_handle = dlopen(translated_path, dl_mode);\n    if (impl->dl_handle != NULL)\n    {\n        status = OS_SUCCESS;\n\n        /* Log success and handle value */\n        OS_ModuleLoad_Probe(token, module, impl, dl_mode, 4, status);\n    }\n    else\n    {\n        OS_DEBUG(\"Error loading shared library: %s\\n\", dlerror());\n\n        /* Log failure and the dlerror() message */\n        OS_ModuleLoad_Probe(token, module, impl, dl_mode, 5, status);\n    }\n\n    return status;\n}\n"
}