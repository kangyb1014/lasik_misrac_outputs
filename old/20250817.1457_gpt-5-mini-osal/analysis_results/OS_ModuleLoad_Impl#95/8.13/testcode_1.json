{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'module' is only used for read-only access (e.g. checking module->flags) and therefore should be declared to point to a const-qualified type. Change to: const OS_module_internal_record_t *module; Assigning the address of the mutable table element to a const-qualified pointer is allowed, so the current non-const declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/763.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Impl:\n```c\nint32 OS_ModuleLoad_Impl(const OS_object_token_t *token, const char *translated_path)\n{\n    int32                             status = OS_ERROR;\n    int                               dl_mode;\n    OS_impl_module_internal_record_t *impl;\n    OS_module_internal_record_t *     module;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n    module = OS_OBJECT_TABLE_GET(OS_module_table, *token);\n\n    /*\n     * RTLD_NOW should instruct dlopen() to resolve all the symbols in the\n     * module immediately, as opposed to waiting until they are used.\n     * The latter (lazy mode) is non-deterministic - a resolution error on\n     * a rarely-used symbol could cause a random failure far in the future.\n     */\n    dl_mode = RTLD_NOW;\n\n    if ((module->flags & OS_MODULE_FLAG_LOCAL_SYMBOLS) != 0)\n    {\n        /*\n         * Do not add the symbols in this module to the global symbol table.\n         * This mode helps prevent any unanticipated references into this\n         * module, which can in turn prevent unloading via dlclose().\n         */\n        dl_mode |= RTLD_LOCAL;\n    }\n    else\n    {\n        /*\n         * Default mode - add symbols to the global symbol table, so they\n         * will be available to resolve symbols in future module loads.\n         * However, any such references will prevent unloading of this\n         * module via dlclose().\n         */\n        dl_mode |= RTLD_GLOBAL;\n    }\n\n    dlerror();\n    impl->dl_handle = dlopen(translated_path, dl_mode);\n    if (impl->dl_handle != NULL)\n    {\n        status = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"Error loading shared library: %s\\n\", dlerror());\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <dlfcn.h>\n\nint32 OS_ModuleLoad_Impl(const OS_object_token_t *token, const char *translated_path)\n{\n    int32                             status = OS_ERROR;\n    int                               dl_mode;\n    OS_impl_module_internal_record_t *impl;\n    OS_module_internal_record_t *     module;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n    module = OS_OBJECT_TABLE_GET(OS_module_table, *token);\n\n    /*\n     * Probe logging: capture control flow and state for analysis of pointer constness usage\n     * Logs are appended to /tmp/logs/763.txt so other agents can reproduce the scenario.\n     */\n    {\n        FILE *log = fopen(\"/tmp/logs/763.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER OS_ModuleLoad_Impl\\n\");\n            fprintf(log, \"  token addr: %p\\n\", (void *)token);\n            fprintf(log, \"  translated_path: %s\\n\", translated_path ? translated_path : \"(null)\");\n            fprintf(log, \"  impl addr: %p\\n\", (void *)impl);\n            fprintf(log, \"  module addr: %p\\n\", (void *)module);\n            if (module != NULL)\n            {\n                /* Log the flags field which is the read-only usage the other agent reported */\n                fprintf(log, \"  module->flags: 0x%08x\\n\", (unsigned)module->flags);\n            }\n            else\n            {\n                fprintf(log, \"  module is NULL\\n\");\n            }\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /*\n     * RTLD_NOW should instruct dlopen() to resolve all the symbols in the\n     * module immediately, as opposed to waiting until they are used.\n     * The latter (lazy mode) is non-deterministic - a resolution error on\n     * a rarely-used symbol could cause a random failure far in the future.\n     */\n    dl_mode = RTLD_NOW;\n\n    if ((module->flags & OS_MODULE_FLAG_LOCAL_SYMBOLS) != 0)\n    {\n        /*\n         * Do not add the symbols in this module to the global symbol table.\n         * This mode helps prevent any unanticipated references into this\n         * module, which can in turn prevent unloading via dlclose().\n         */\n        dl_mode |= RTLD_LOCAL;\n\n        {\n            FILE *log = fopen(\"/tmp/logs/763.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"  branch: LOCAL_SYMBOLS set -> use RTLD_LOCAL\\n\");\n                fprintf(log, \"  dl_mode after branch: 0x%08x\\n\", (unsigned)dl_mode);\n                fflush(log);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        /*\n         * Default mode - add symbols to the global symbol table, so they\n         * will be available to resolve symbols in future module loads.\n         * However, any such references will prevent unloading of this\n         * module via dlclose().\n         */\n        dl_mode |= RTLD_GLOBAL;\n\n        {\n            FILE *log = fopen(\"/tmp/logs/763.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"  branch: LOCAL_SYMBOLS not set -> use RTLD_GLOBAL\\n\");\n                fprintf(log, \"  dl_mode after branch: 0x%08x\\n\", (unsigned)dl_mode);\n                fflush(log);\n                fclose(log);\n            }\n        }\n    }\n\n    /* Clear any existing dlerror state before dlopen, preserving original logic */\n    {\n        char *pre_err = dlerror();\n        FILE *log = fopen(\"/tmp/logs/763.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"  dlerror() before dlopen returned: %s\\n\", pre_err ? pre_err : \"(null)\");\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    impl->dl_handle = dlopen(translated_path, dl_mode);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/763.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"  dlopen called with path: %s\\n\", translated_path ? translated_path : \"(null)\");\n            fprintf(log, \"  dlopen returned handle: %p\\n\", (void *)impl->dl_handle);\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    if (impl->dl_handle != NULL)\n    {\n        status = OS_SUCCESS;\n\n        {\n            FILE *log = fopen(\"/tmp/logs/763.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"  status: OS_SUCCESS\\n\");\n                fprintf(log, \"EXIT OS_ModuleLoad_Impl status=%d\\n\", (int)status);\n                fflush(log);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        OS_DEBUG(\"Error loading shared library: %s\\n\", dlerror());\n\n        {\n            FILE *log = fopen(\"/tmp/logs/763.txt\", \"a\");\n            if (log != NULL)\n            {\n                char *err = dlerror();\n                fprintf(log, \"  dlopen failed, dlerror(): %s\\n\", err ? err : \"(null)\");\n                fprintf(log, \"  status: OS_ERROR\\n\");\n                fprintf(log, \"EXIT OS_ModuleLoad_Impl status=%d\\n\", (int)status);\n                fflush(log);\n                fclose(log);\n            }\n        }\n    }\n\n    return status;\n}\n"
}