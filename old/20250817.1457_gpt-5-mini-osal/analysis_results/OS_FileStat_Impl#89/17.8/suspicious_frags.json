{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_FileStat_Impl:\n```c\nint32 OS_FileStat_Impl(const char *local_path, os_fstat_t *FileStats)\n{\n    struct stat     st;\n    mode_t          readbits;\n    mode_t          writebits;\n    mode_t          execbits;\n    struct timespec filetime;\n\n    if (stat(local_path, &st) < 0)\n    {\n        return OS_ERROR;\n    }\n\n    FileStats->FileSize = st.st_size;\n\n    /*\n     * NOTE: Traditional timestamps are only a whole number of seconds (time_t)\n     * POSIX.1-2008 expands this to have a full \"struct timespec\" with nanosecond\n     * resolution.\n     *\n     * GLIBC (and likely other C libraries that use similar feature selection)\n     * will expose this value based on _POSIX_C_SOURCE or _XOPEN_SOURCE minimum\n     * values.  Otherwise this just falls back to standard 1-second resolution\n     * available via the \"st_mtime\" member.\n     */\n#if (_POSIX_C_SOURCE >= 200809L) || (_XOPEN_SOURCE >= 700)\n    /*\n     * Better - use the full resolution (seconds + nanoseconds) as specified in POSIX.1-2008\n     */\n    filetime = st.st_mtim;\n#else\n    /*\n     * Fallback - every POSIX-compliant implementation must expose \"st_mtime\" field.\n     */\n    filetime.tv_sec  = st.st_mtime;\n    filetime.tv_nsec = 0;\n#endif\n\n    FileStats->FileTime = OS_TimeAssembleFromNanoseconds(filetime.tv_sec, filetime.tv_nsec);\n\n    /* note that the \"fst_mode\" member is already zeroed by the caller */\n    if (S_ISDIR(st.st_mode))\n    {\n        FileStats->FileModeBits |= OS_FILESTAT_MODE_DIR;\n    }\n\n    /* always check world bits */\n    readbits  = S_IROTH;\n    writebits = S_IWOTH;\n    execbits  = S_IXOTH;\n\n    if (OS_IMPL_SELF_EUID == st.st_uid)\n    {\n        /* we own the file so use user bits for simplified perms */\n        readbits |= S_IRUSR;\n        writebits |= S_IWUSR;\n        execbits |= S_IXUSR;\n    }\n\n    if (OS_IMPL_SELF_EGID == st.st_gid)\n    {\n        /* our group owns the file so use group bits for simplified perms */\n        readbits |= S_IRGRP;\n        writebits |= S_IWGRP;\n        execbits |= S_IXGRP;\n    }\n\n    if (st.st_mode & readbits)\n    {\n        FileStats->FileModeBits |= OS_FILESTAT_MODE_READ;\n    }\n    if (st.st_mode & writebits)\n    {\n        FileStats->FileModeBits |= OS_FILESTAT_MODE_WRITE;\n    }\n    if (st.st_mode & execbits)\n    {\n        FileStats->FileModeBits |= OS_FILESTAT_MODE_EXEC;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_FileStat_Impl:\ntypedef struct\n{\n    uint32    FileModeBits;\n    OS_time_t FileTime;\n    size_t    FileSize;\n} os_fstat_t\n...\nextern uid_t OS_IMPL_SELF_EUID\n...\nextern gid_t OS_IMPL_SELF_EGID\n...\n#define OS_ERROR (-1)\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragment modifies the function parameters themselves. The pointer parameter FileStats is only dereferenced to modify the object it points to (assigning FileSize, FileTime and updating FileModeBits), which is permitted by the rule. The local_path parameter is declared const and is only passed to stat() (not modified or reassigned). There are no assignments to FileStats or local_path (no pointer reassignments, pointer arithmetic, or other modifications of the parameter objects themselves). Therefore there are no fragments that need investigation under MISRA C 2023 Rule 17.8."
}