{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_FileSysStopVolume_Impl is reachable and invoked (e.g. in OS_FileSys_Initialize as (void)OS_FileSysStopVolume_Impl(&token); when formatting fails), but its body is a pure no-op that only returns OS_SUCCESS and has no observable side-effects. Under MISRA C 2023 Rule 2.2 any executed operation whose removal would not affect program behaviour is dead code. Since removing the call (or the function) would not change program behaviour in the current implementation, this constitutes dead code and thus violates Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysFormatVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/298.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysFormatVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysFormatVolume_Impl:\n```c\nint32 OS_FileSysFormatVolume_Impl(const OS_object_token_t *token)\n{\n    /*\n     * In theory, this should wipe any existing files in the ramdisk,\n     * but since ramdisks here are implemented using a directory within a tmpfs,\n     * removal of such files could be risky if something goes wrong,\n     * because it might remove files that were important.\n     *\n     * So the safest option is just a no-op.\n     * (this is also backward compatible since POSIX mkfs was always a no-op)\n     */\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysFormatVolume_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\nint32 OS_FileSysFormatVolume_Impl(const OS_object_token_t *token)\n{\n    /*\n     * In theory, this should wipe any existing files in the ramdisk,\n     * but since ramdisks here are implemented using a directory within a tmpfs,\n     * removal of such files could be risky if something goes wrong,\n     * because it might remove files that were important.\n     *\n     * So the safest option is just a no-op.\n     * (this is also backward compatible since POSIX mkfs was always a no-op)\n     */\n\n    /* Probe: log entry, token pointer and timestamp to aid reproduction */\n    {\n        FILE *log = fopen(\"/tmp/logs/298.txt\", \"a\");\n        if (log != NULL)\n        {\n            time_t now = time(NULL);\n            (void)fprintf(log, \"OS_FileSysFormatVolume_Impl entered: token=%p, time=%ld\\n\",\n                          (const void *)token, (long)now);\n            (void)fflush(log);\n            (void)fclose(log);\n        }\n        /* If logging is not possible, do not change behavior: continue as no-op */\n    }\n\n    return OS_SUCCESS;\n}\n"
}