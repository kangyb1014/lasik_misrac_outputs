{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdAllocateNew the const char *name parameter is cast to void * and passed to OS_ObjectIdFindNextMatch: return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token); This discards the const qualifier on the string pointer (const char * -> void *), violating the requirement that pointers should point to const-qualified types when possible. The safe fix is to change the callee prototype to accept const void * (or otherwise preserve const), or avoid the cast so the const qualifier is not removed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1683.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad:\n```c\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad code.\n",
  "test_code": "/* Probe helper for OS_ModuleLoad logging. Inserts minimal-impact logging to /tmp/logs/1683.txt.\n   This helper preserves const correctness (takes const char * for strings) and does not alter\n   the behavior of OS_ModuleLoad. It only appends records describing the control flow and\n   important state (module_name pointer, filename_status, return codes, token address, translated_path).\n*/\nstatic void OS_ModuleLoad_LogState(const char *stage,\n                                   const char *module_name,\n                                   const char *filename,\n                                   unsigned int flags,\n                                   int filename_status,\n                                   int return_code,\n                                   const void *token_ptr,\n                                   const char *translated_path)\n{\n    /* Open in append mode so repeated calls accumulate evidence */\n    FILE *fp = fopen(\"/tmp/logs/1683.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    fprintf(fp, \"--- OS_ModuleLoad LOG (%s) ---\\n\", stage);\n    fprintf(fp, \"module_name ptr=%p\\n\", (const void *)module_name);\n    fprintf(fp, \"module_name str=\\\"\");\n    if (module_name != NULL)\n    {\n        /* Print safely: limit length to avoid huge outputs */\n        size_t i;\n        for (i = 0; i < 256 && module_name[i] != '\\0'; ++i)\n            fputc((unsigned char)module_name[i], fp);\n        if (module_name[i] != '\\0')\n            fprintf(fp, \"...(truncated)\");\n    }\n    else\n    {\n        fprintf(fp, \"(null)\");\n    }\n    fprintf(fp, \"\\\"\\n\");\n\n    fprintf(fp, \"filename ptr=%p\\n\", (const void *)filename);\n    fprintf(fp, \"filename str=\\\"\");\n    if (filename != NULL)\n    {\n        size_t i;\n        for (i = 0; i < 256 && filename[i] != '\\0'; ++i)\n            fputc((unsigned char)filename[i], fp);\n        if (filename[i] != '\\0')\n            fprintf(fp, \"...(truncated)\");\n    }\n    else\n    {\n        fprintf(fp, \"(null)\");\n    }\n    fprintf(fp, \"\\\"\\n\");\n\n    fprintf(fp, \"flags=0x%08x\\n\", flags);\n    fprintf(fp, \"filename_status=%d\\n\", filename_status);\n    fprintf(fp, \"return_code=%d\\n\", return_code);\n    fprintf(fp, \"token address=%p\\n\", token_ptr);\n\n    fprintf(fp, \"translated_path ptr=%p\\n\", (const void *)translated_path);\n    if (translated_path != NULL)\n    {\n        size_t i;\n        fprintf(fp, \"translated_path=\\\"\");\n        for (i = 0; i < 256 && translated_path[i] != '\\0'; ++i)\n            fputc((unsigned char)translated_path[i], fp);\n        if (translated_path[i] != '\\0')\n            fprintf(fp, \"...(truncated)\");\n        fprintf(fp, \"\\\"\\n\");\n    }\n\n    fprintf(fp, \"--- end log ---\\n\\n\");\n    fclose(fp);\n}\n\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /* Log entry state */\n    OS_ModuleLoad_LogState(\"entry\", module_name, filename, flags, /*filename_status*/ -999, /*return_code*/ -999, &token, NULL);\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Log after translation so the translated path and filename_status are captured */\n    OS_ModuleLoad_LogState(\"after_translate\", module_name, filename, flags, filename_status, /*return_code*/ -999, &token, translated_path);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    /* Log right before calling OS_ObjectIdAllocateNew to capture the module_name pointer and string */\n    OS_ModuleLoad_LogState(\"before_ObjectIdAllocateNew\", module_name, filename, flags, filename_status, /*return_code*/ -999, &token, translated_path);\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n\n    /* Log immediately after allocation attempt to capture return code and token address */\n    OS_ModuleLoad_LogState(\"after_ObjectIdAllocateNew\", module_name, filename, flags, filename_status, return_code, &token, translated_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n\n        /* Log result of static check */\n        OS_ModuleLoad_LogState(\"after_ModuleLoad_Static\", module_name, filename, flags, filename_status, return_code, &token, translated_path);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        /* Log right before finalizing to capture final state */\n        OS_ModuleLoad_LogState(\"before_ObjectIdFinalizeNew\", module_name, filename, flags, filename_status, return_code, &token, translated_path);\n\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n\n        /* Log after finalization */\n        OS_ModuleLoad_LogState(\"after_ObjectIdFinalizeNew\", module_name, filename, flags, filename_status, return_code, &token, translated_path);\n    }\n\n    return return_code;\n}\n"
}