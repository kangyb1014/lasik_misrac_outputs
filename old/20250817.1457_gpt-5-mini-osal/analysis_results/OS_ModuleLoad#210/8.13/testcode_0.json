{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts away the const qualifier: (void *)VirtualPath passes a const char * as a plain void * to OS_ObjectIdGetBySearch. This discards the const qualification of the pointer and therefore violates MISRA C 2023 Rule 8.13. Recommended fix: change the search-argument parameter type of OS_ObjectIdGetBySearch (and related callbacks such as OS_FileSys_FindVirtMountPoint) to accept a const void * (or const char *) so the const is preserved, and remove the cast.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1683.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad:\n```c\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad code.\n",
  "test_code": "static void OS_ModuleLoad_Probe(const char *stage,\n                                     const char *module_name,\n                                     const char *filename,\n                                     const char *translated_path,\n                                     int filename_status,\n                                     int return_code,\n                                     const void *module_id_ptr,\n                                     const void *token_ptr,\n                                     const void *module_ptr,\n                                     unsigned long flags)\n{\n    /* Append-only logging to allow reproduction and inspection. */\n    FILE *f = fopen(\"/tmp/logs/1683.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_ModuleLoad: stage=%s\\n\", stage);\n        fprintf(f, \"  module_name ptr=%p name=\\\"%s\\\"\\n\",\n                (const void *)module_name,\n                (module_name != NULL) ? module_name : \"(NULL)\");\n        fprintf(f, \"  filename ptr=%p value=\\\"%s\\\"\\n\",\n                (const void *)filename,\n                (filename != NULL) ? filename : \"(NULL)\");\n        fprintf(f, \"  translated_path=\\\"%s\\\"\\n\",\n                (translated_path != NULL) ? translated_path : \"(NULL)\");\n        fprintf(f, \"  filename_status=%d return_code=%d\\n\", filename_status, return_code);\n        fprintf(f, \"  module_id ptr=%p token ptr=%p module ptr=%p flags=%lu\\n\",\n                module_id_ptr, token_ptr, module_ptr, flags);\n        fprintf(f, \"----\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /* Log entry state */\n    OS_ModuleLoad_Probe(\"entry\", module_name, filename, \"\", -1, -1, (const void *)module_id, NULL, NULL, (unsigned long)flags);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Log after translation */\n    OS_ModuleLoad_Probe(\"after_translate\", module_name, filename, translated_path, filename_status, -1, (const void *)module_id, NULL, NULL, (unsigned long)flags);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /* Log allocation result and module internal pointer */\n        OS_ModuleLoad_Probe(\"allocated_and_init\", module_name, filename, translated_path, filename_status, return_code, (const void *)module_id, (const void *)&token, (const void *)module, (unsigned long)flags);\n\n        /* Also log some internal fields for easier reproduction (non-intrusive read-only) */\n        {\n            FILE *f = fopen(\"/tmp/logs/1683.txt\", \"a\");\n            if (f != NULL)\n            {\n                fprintf(f, \"OS_ModuleLoad: internal module info after init:\\n\");\n                fprintf(f, \"  module ptr=%p flags=%u module_type=%u file_name=\\\"%s\\\"\\n\",\n                        (const void *)module,\n                        (unsigned int)module->flags,\n                        (unsigned int)module->module_type,\n                        (module->file_name[0] != '\\0') ? module->file_name : \"(empty)\");\n                fprintf(f, \"----\\n\");\n                fclose(f);\n            }\n        }\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n\n            /* Log that the module was static */\n            OS_ModuleLoad_Probe(\"static_found\", module_name, filename, translated_path, filename_status, return_code, (const void *)module_id, (const void *)&token, (const void *)module, (unsigned long)flags);\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n\n                OS_ModuleLoad_Probe(\"bad_filename\", module_name, filename, translated_path, filename_status, return_code, (const void *)module_id, (const void *)&token, (const void *)module, (unsigned long)flags);\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->file_name[sizeof(module->file_name) - 1] = '\\0';\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Log before calling OS-specific implementation */\n                OS_ModuleLoad_Probe(\"before_impl\", module_name, filename, translated_path, filename_status, -1, (const void *)module_id, (const void *)&token, (const void *)module, (unsigned long)flags);\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n\n                /* Log result of implementation call */\n                OS_ModuleLoad_Probe(\"after_impl\", module_name, filename, translated_path, filename_status, return_code, (const void *)module_id, (const void *)&token, (const void *)module, (unsigned long)flags);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n\n        /* Final state log */\n        OS_ModuleLoad_Probe(\"finalize\", module_name, filename, translated_path, filename_status, return_code, (const void *)module_id, (const void *)&token, (const void *)module, (unsigned long)flags);\n    }\n\n    return return_code;\n}\n"
}