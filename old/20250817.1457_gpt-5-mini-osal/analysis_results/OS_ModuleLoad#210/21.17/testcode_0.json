{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(module->file_name, filename, sizeof(module->file_name) - 1) can lead to out\u2011of\u2011bounds accesses in two ways. 1) strncpy will read up to sizeof(module->file_name)-1 bytes from the source pointer 'filename'; if 'filename' does not point to a null\u2011terminated object at least that long (or its object is smaller than that), strncpy may read beyond the bounds of the source object. 2) If the source string length is >= sizeof(module->file_name)-1, strncpy will copy that many bytes but will not NUL\u2011terminate module->file_name; subsequent string operations on module->file_name (strlen/strcpy/strcat, etc.) may then read or write beyond the destination buffer. Because these scenarios can produce accesses beyond the bounds of the objects referenced by the pointer parameters, Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1687.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad:\n```c\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad code.\n",
  "test_code": "int32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /* Logging probe: entry state */\n    {\n        FILE *log = fopen(\"/tmp/logs/1687.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"[OS_ModuleLoad] ENTRY: module_id=%p module_name=%s filename=%p flags=%u\\n\",\n                    (void *)module_id,\n                    (module_name != NULL) ? module_name : \"(null)\",\n                    (const void *)filename,\n                    (unsigned)flags);\n            fprintf(log, \"[OS_ModuleLoad] translated_path(buf)=%p size=%d\\n\",\n                    (void *)translated_path,\n                    (int)OS_MAX_LOCAL_PATH_LEN);\n            fclose(log);\n        }\n    }\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Log result of translation attempt (do not attempt to print filename contents) */\n    {\n        FILE *log = fopen(\"/tmp/logs/1687.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"[OS_ModuleLoad] OS_TranslatePath -> filename_status=%d filename_ptr=%p\\n\",\n                    (int)filename_status,\n                    (const void *)filename);\n            fprintf(log, \"[OS_ModuleLoad] translated_path buffer address=%p (contents not logged)\\n\",\n                    (void *)translated_path);\n            fclose(log);\n        }\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /* Log allocation and initial module state */\n        {\n            FILE *log = fopen(\"/tmp/logs/1687.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"[OS_ModuleLoad] Allocated token at %p -> module record %p\\n\",\n                        (void *)&token, (void *)module);\n                fprintf(log, \"[OS_ModuleLoad] module_name=%s flags=%u module->file_name_addr=%p module->file_name_size=%zu\\n\",\n                        (module_name != NULL) ? module_name : \"(null)\",\n                        (unsigned)flags,\n                        (void *)module->file_name,\n                        sizeof(module->file_name));\n                fclose(log);\n            }\n        }\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n\n            /* Log static load path */\n            {\n                FILE *log = fopen(\"/tmp/logs/1687.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"[OS_ModuleLoad] Module \"%s\" is static; module_type set to STATIC\\n\", module_name);\n                    fclose(log);\n                }\n            }\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n\n                /* Log invalid filename path */\n                {\n                    FILE *log = fopen(\"/tmp/logs/1687.txt\", \"a\");\n                    if (log)\n                    {\n                        fprintf(log, \"[OS_ModuleLoad] filename invalid: filename_status=%d filename_ptr=%p -> returning %d\\n\",\n                                (int)filename_status,\n                                (const void *)filename,\n                                (int)return_code);\n                        fclose(log);\n                    }\n                }\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n\n                /* Log the details of the strncpy operation without dereferencing the source or destination strings */\n                {\n                    FILE *log = fopen(\"/tmp/logs/1687.txt\", \"a\");\n                    if (log)\n                    {\n                        size_t dest_size = sizeof(module->file_name);\n                        fprintf(log, \"[OS_ModuleLoad] About to strncpy: dest_addr=%p dest_size=%zu bytes_to_copy=%zu source_addr=%p\\n\",\n                                (void *)module->file_name,\n                                dest_size,\n                                (dest_size > 0) ? dest_size - 1 : 0,\n                                (const void *)filename);\n                        fprintf(log, \"[OS_ModuleLoad] NOTE: not logging source or destination contents to avoid out-of-bounds reads\\n\");\n                        fclose(log);\n                    }\n                }\n\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Log after strncpy (do not inspect module->file_name contents) */\n                {\n                    FILE *log = fopen(\"/tmp/logs/1687.txt\", \"a\");\n                    if (log)\n                    {\n                        fprintf(log, \"[OS_ModuleLoad] strncpy completed: dest_addr=%p dest_size=%zu source_addr=%p\\n\",\n                                (void *)module->file_name,\n                                sizeof(module->file_name),\n                                (const void *)filename);\n                        fclose(log);\n                    }\n                }\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n\n                /* Log result of implementation call */\n                {\n                    FILE *log = fopen(\"/tmp/logs/1687.txt\", \"a\");\n                    if (log)\n                    {\n                        fprintf(log, \"[OS_ModuleLoad] OS_ModuleLoad_Impl -> return_code=%d (token=%p)\\n\",\n                                (int)return_code,\n                                (void *)&token);\n                        fclose(log);\n                    }\n                }\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n\n        /* Final state log */\n        {\n            FILE *log = fopen(\"/tmp/logs/1687.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"[OS_ModuleLoad] Finalizing: final_return_code=%d module_id_out=%p\\n\",\n                        (int)return_code,\n                        (void *)module_id);\n                fprintf(log, \"[OS_ModuleLoad] EXIT\\n\");\n                fclose(log);\n            }\n        }\n    }\n\n    return return_code;\n}\n"
}