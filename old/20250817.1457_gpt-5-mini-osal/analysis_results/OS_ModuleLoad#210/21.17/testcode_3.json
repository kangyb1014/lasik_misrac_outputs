{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_ModuleLoad calls OS_ModuleLoad_Impl(&token, translated_path) where translated_path is filled by OS_TranslatePath. If OS_TranslatePath returns success but does not guarantee a terminating '\\0' within the OS_MAX_LOCAL_PATH_LEN buffer (for example it writes bytes equal to the buffer size or otherwise fails to null-terminate), then OS_ModuleLoad_Impl may call string.h functions such as strlen, strcpy, strcat, memcpy, etc., on translated_path. Those calls would read or write past the bounds of translated_path and thus violate MISRA C 2023 Rule 21.17. Because the implementation and contract of OS_TranslatePath/OS_ModuleLoad_Impl are not shown here, the fragment as written can lead to a Rule 21.17 violation in this scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1687.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad:\n```c\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/*\n * Lightweight logging helpers that append to /tmp/logs/1687.txt.\n * These are implemented to avoid reading beyond buffer bounds (no %s on non-terminated buffers).\n */\nstatic void log_probe_fmt(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1687.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nstatic void log_buffer_hex_and_nul(const char *label, const char *buf, size_t buflen)\n{\n    FILE *f = fopen(\"/tmp/logs/1687.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"%s: buflen=%zu\\n\", label, buflen);\n\n    /* Find first NUL within the buffer, if any, without reading beyond buflen. */\n    size_t nulpos = (size_t)(-1);\n    for (size_t i = 0; i < buflen; ++i)\n    {\n        if (buf[i] == '\\0')\n        {\n            nulpos = i;\n            break;\n        }\n    }\n\n    if (nulpos != (size_t)(-1))\n    {\n        fprintf(f, \"%s: first NUL at pos=%zu\\n\", label, nulpos);\n        /* Print as a safe string up to NUL */\n        fprintf(f, \"%s: as-string='\", label);\n        for (size_t i = 0; i <= nulpos; ++i)\n        {\n            int c = (unsigned char)buf[i];\n            if (c == '\\0')\n            {\n                fputc('\\0', f);\n            }\n            else\n            {\n                fputc(c, f);\n            }\n        }\n        fprintf(f, \"'\\n\");\n    }\n    else\n    {\n        fprintf(f, \"%s: NO NUL found within buffer\\n\", label);\n    }\n\n    /* Print hex dump of the entire buffer region provided */\n    fprintf(f, \"%s: hex:\", label);\n    for (size_t i = 0; i < buflen; ++i)\n    {\n        fprintf(f, \" %02X\", (unsigned char)buf[i]);\n        if ((i & 31) == 31)\n            fprintf(f, \"\\n\");\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /* Log entry and basic params (safe prints) */\n    log_probe_fmt(\"OS_ModuleLoad ENTRY: module_id=%p module_name=%p filename=%p flags=%u\",\n                  (void *)module_id, (void *)module_name, (void *)filename, (unsigned)flags);\n    if (module_name != NULL)\n    {\n        /* Print module_name up to a reasonable length to avoid surprises */\n        size_t cap = 256;\n        size_t i = 0;\n        for (; i < cap && module_name[i] != '\\0'; ++i) { /* scan only up to cap */ }\n        if (i < cap)\n        {\n            log_probe_fmt(\"OS_ModuleLoad: module_name='%.*s'\", (int)i, module_name);\n        }\n        else\n        {\n            log_probe_fmt(\"OS_ModuleLoad: module_name (truncated to %zu)='%.*s'\", cap, (int)cap, module_name);\n        }\n    }\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Log the result of the translation and the translated_path buffer safely */\n    log_probe_fmt(\"OS_ModuleLoad: OS_TranslatePath returned %d\", (int)filename_status);\n    log_buffer_hex_and_nul(\"translated_path\", translated_path, sizeof(translated_path));\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n    log_probe_fmt(\"OS_ModuleLoad: OS_ObjectIdAllocateNew returned %d token=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        log_probe_fmt(\"OS_ModuleLoad: OS_ModuleLoad_Static returned %d\", (int)return_code);\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n            log_probe_fmt(\"OS_ModuleLoad: marked static module\");\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n                log_probe_fmt(\"OS_ModuleLoad: filename_status indicates failure, returning %d\", (int)return_code);\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                log_probe_fmt(\"OS_ModuleLoad: calling OS_ModuleLoad_Impl with token=%p\", (void *)&token);\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n                log_probe_fmt(\"OS_ModuleLoad: OS_ModuleLoad_Impl returned %d\", (int)return_code);\n\n                /* Also log the translated_path again after the impl call to capture any later observations */\n                log_buffer_hex_and_nul(\"translated_path_after_impl\", translated_path, sizeof(translated_path));\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        log_probe_fmt(\"OS_ModuleLoad: finalizing new object with return_code=%d token=%p\", (int)return_code, (void *)&token);\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n        log_probe_fmt(\"OS_ModuleLoad: OS_ObjectIdFinalizeNew returned %d\", (int)return_code);\n    }\n\n    log_probe_fmt(\"OS_ModuleLoad EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}