{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe memset(&OS_console_table, 0, sizeof(OS_console_table)) is redundant when OS_console_table has static storage duration and is therefore zero-initialized before program startup. In the typical initialization path (first and only call at boot), the table is already all-zeros so executing this memset has no effect \u2014 removing it would not change program behaviour. (If the init routine can be called later to reinitialize a previously used table, then the memset would not be dead; the violation applies only when the call is provably redundant at first startup.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleAPI_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1802.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ConsoleAPI_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleAPI_Init:\n```c\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ConsoleAPI_Init code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Helper to safely open/append the log file. Create the directory if needed. */\nstatic FILE *os_console_log_open(void)\n{\n    /* Attempt to create the directory, ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0755);\n    return fopen(\"/tmp/logs/1802.txt\", \"a\");\n}\n\n/* Helper to log a byte summary of a memory region (prints up to the first 64 bytes). */\nstatic void os_console_log_bytes(FILE *f, const void *ptr, size_t len, const char *label)\n{\n    const unsigned char *b = (const unsigned char *)ptr;\n    size_t to_print = (len < 64) ? len : 64;\n\n    fprintf(f, \"%s: addr=%p size=%zu\\n\", label, ptr, len);\n    fprintf(f, \"%s: first %zu bytes:\", label, to_print);\n    for (size_t i = 0; i < to_print; ++i)\n    {\n        fprintf(f, \" %02X\", (unsigned int)b[i]);\n    }\n    if (len > to_print)\n    {\n        fprintf(f, \" ...\");\n    }\n    fprintf(f, \"\\n\");\n}\n\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /* Open log and record the state leading up to the memset */\n    FILE *log = os_console_log_open();\n    if (log)\n    {\n        fprintf(log, \"=== OS_ConsoleAPI_Init start ===\\n\");\n        fprintf(log, \"About to memset(&OS_console_table, 0, sizeof(OS_console_table))\\n\");\n        os_console_log_bytes(log, &OS_console_table, sizeof(OS_console_table), \"OS_console_table (before memset)\");\n        fflush(log);\n    }\n\n    /* Original initialization (kept intact) */\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    if (log)\n    {\n        os_console_log_bytes(log, &OS_console_table, sizeof(OS_console_table), \"OS_console_table (after memset)\");\n        fflush(log);\n    }\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdAllocateNew returned %ld, token=%llu\\n\", (long)return_code, (unsigned long long)token);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        if (log)\n        {\n            fprintf(log, \"Allocated console record pointer=%p for token=%llu\\n\", (void *)console, (unsigned long long)token);\n            fflush(log);\n        }\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        if (log)\n        {\n            /* Attempt to print the saved device_name if reasonable; guard against NULL */\n            const char *nm = ((console != NULL) ? (const char *)console->device_name : \"<null>\");\n            fprintf(log, \"OS_OBJECT_INIT done, device_name=\" \"%s\" \"\\n\", nm);\n            fflush(log);\n        }\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        if (log)\n        {\n            fprintf(log, \"Console buffer: BufBase=%p BufSize=%zu IsAsync=%d\\n\",\n                    (void *)console->BufBase, (size_t)console->BufSize, (int)console->IsAsync);\n            fflush(log);\n        }\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n\n        if (log)\n        {\n            fprintf(log, \"OS_ConsoleCreate_Impl returned %ld\\n\", (long)return_code);\n            fflush(log);\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n\n        if (log)\n        {\n            fprintf(log, \"OS_ObjectIdFinalizeNew returned %ld, PrintfConsoleId=%ld\\n\",\n                    (long)return_code, (long)OS_SharedGlobalVars.PrintfConsoleId);\n            fflush(log);\n        }\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n\n        if (log)\n        {\n            fprintf(log, \"PrintfEnabled set to true\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"Returning from OS_ConsoleAPI_Init with code=%ld\\n\", (long)return_code);\n        fprintf(log, \"=== OS_ConsoleAPI_Init end ===\\n\\n\");\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}