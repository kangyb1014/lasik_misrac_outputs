{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdAllocateNew the parameter 'name' is declared as 'const char *name' but is passed to OS_ObjectIdFindNextMatch using an explicit cast to (void *)name. This discards the const qualifier on the pointer (allowing a non-const void * to point to data originally const) and thus violates MISRA C 2023 Rule 8.13. The correct approach is to preserve the const qualifier (e.g. change the callee to accept 'const void *' or avoid casting away const).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleAPI_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1803.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ConsoleAPI_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleAPI_Init:\n```c\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ConsoleAPI_Init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe/logger helper: append informative logs to /tmp/logs/1803.txt.\n * Keep the helper signatures const-correct to avoid casting away const qualifiers.\n */\nstatic void os_log_probe(const char *stage, const char *name, int32_t return_code, void *token_raw)\n{\n    FILE *f = fopen(\"/tmp/logs/1803.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print pointer, text, numeric return code and a token representation. */\n        fprintf(f, \"%s: name_ptr=%p, name=\\\"%s\\\", return_code=%ld, token=%p\\n\",\n                stage,\n                (const void *)name,\n                (name != NULL) ? name : \"(null)\",\n                (long)return_code,\n                token_raw);\n        fclose(f);\n    }\n}\n\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /* Log entry into the function and the name to be used for allocation. */\n    os_log_probe(\"OS_ConsoleAPI_Init:start\", OS_PRINTF_CONSOLE_NAME, 0, (void *)0);\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    /* Log right before calling the allocator. Token is not yet set, pass NULL as token. */\n    os_log_probe(\"OS_ConsoleAPI_Init:before_AllocateNew\", OS_PRINTF_CONSOLE_NAME, 0, (void *)0);\n\n    /* Original allocation call preserved exactly (no casting away const here). */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n\n    /* Capture result of allocation and the token returned (if any). */\n    os_log_probe(\"OS_ConsoleAPI_Init:after_AllocateNew\", OS_PRINTF_CONSOLE_NAME, return_code, (void *)(uintptr_t)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Reset the table entry and save the name (preserve original logic). */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /* Initialize the ring buffer pointers */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        /* Call the implementation and log the intermediate result. */\n        return_code = OS_ConsoleCreate_Impl(&token);\n        os_log_probe(\"OS_ConsoleAPI_Init:after_Create_Impl\", OS_PRINTF_CONSOLE_NAME, return_code, (void *)(uintptr_t)token);\n\n        /* Finalize and capture the final result and the assigned PrintfConsoleId. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n        os_log_probe(\"OS_ConsoleAPI_Init:after_FinalizeNew\", OS_PRINTF_CONSOLE_NAME, return_code, (void *)(uintptr_t)token);\n\n        /* Printf can be enabled by default now that the buffer is configured. */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n        os_log_probe(\"OS_ConsoleAPI_Init:finalized\", OS_PRINTF_CONSOLE_NAME, return_code, (void *)(uintptr_t)token);\n    }\n\n    return return_code;\n}\n"
}