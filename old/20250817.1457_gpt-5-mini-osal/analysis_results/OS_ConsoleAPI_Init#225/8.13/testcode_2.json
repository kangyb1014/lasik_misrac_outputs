{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro assigns the address of ref->namefield (a char array) to OS_ObjectIdGlobalFromToken(&tok)->name_entry. If name_entry is declared as a non-const pointer (e.g. char *name_entry), then a pointer to non-const-qualified data is used where a const-qualified pointer would be appropriate (the name is intended for read-only access). This fails MISRA C 2023 Rule 8.13. Change name_entry to const char * to satisfy the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleAPI_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1803.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ConsoleAPI_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleAPI_Init:\n```c\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ConsoleAPI_Init code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/*\n * Probe logging helper for OS_ConsoleAPI_Init.\n * Logs to /tmp/logs/1803.txt the control flow and key state info.\n * Uses only basic operations to avoid changing behavior.\n */\nstatic void OS_ConsoleAPI_Log(const char *stage, const void *token_addr, const void *console_addr, long rc)\n{\n    FILE *f = fopen(\"/tmp/logs/1803.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(f, \"[%ld] %s: return_code=%ld, token_addr=%p, console_addr=%p\\n\", (long)t, stage, rc, token_addr, console_addr);\n        fclose(f);\n    }\n}\n\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /* Log entry into function */\n    OS_ConsoleAPI_Log(\"Entry\", &token, NULL, (long)0);\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    /* Log after clearing the console table */\n    OS_ConsoleAPI_Log(\"After memset\", &token, NULL, (long)0);\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n\n    /* Log result of allocation */\n    OS_ConsoleAPI_Log(\"After OS_ObjectIdAllocateNew\", &token, NULL, (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Log after retrieving table entry */\n        OS_ConsoleAPI_Log(\"After OS_OBJECT_TABLE_GET\", &token, console, (long)return_code);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /* Log after object init - this is where name pointer assignments may occur */\n        OS_ConsoleAPI_Log(\"After OS_OBJECT_INIT\", &token, console, (long)return_code);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        /* Log buffer initialization details (addresses only to avoid depending on struct layout) */\n        OS_ConsoleAPI_Log(\"After buffer init\", &token, console, (long)return_code);\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n\n        /* Log result of create impl */\n        OS_ConsoleAPI_Log(\"After OS_ConsoleCreate_Impl\", &token, console, (long)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n\n        /* Log result of finalize */\n        OS_ConsoleAPI_Log(\"After OS_ObjectIdFinalizeNew\", &token, console, (long)return_code);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n\n        /* Log final state after enabling printf */\n        OS_ConsoleAPI_Log(\"After enabling Printf\", &token, console, (long)return_code);\n    }\n\n    /* Log before return with final return_code */\n    OS_ConsoleAPI_Log(\"Exit\", &token, (return_code == OS_SUCCESS) ? console : NULL, (long)return_code);\n\n    return return_code;\n}\n"
}