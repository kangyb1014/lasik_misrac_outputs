{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CloseFileByName:\ntypedef struct\n{\n    char   stream_name[OS_MAX_PATH_LEN];\n    uint8  socket_domain;\n    uint8  socket_type;\n    uint16 stream_state;\n} OS_stream_internal_record_t\n...\nOS_stream_internal_record_t OS_stream_table[OS_MAX_NUM_OPEN_FILES]\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\ntypedef struct\n{\n    OS_common_record_t * base;\n    OS_ObjectMatchFunc_t match;\n    void *               arg;\n    osal_index_t         limit;\n    OS_object_token_t    token;\n} OS_object_iter_t\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))",
    "stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);",
    "typedef struct\n{\n    char   stream_name[OS_MAX_PATH_LEN];\n    uint8  socket_domain;\n    uint8  socket_type;\n    uint16 stream_state;\n} OS_stream_internal_record_t",
    "OS_stream_internal_record_t *stream;",
    "OS_stream_internal_record_t OS_stream_table[OS_MAX_NUM_OPEN_FILES]",
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])"
  ],
  "explanation": "The flagged fragments involve obtaining and using a non-const pointer to entries in the global OS_stream_table (the local variable declaration, the macro that returns a non-const pointer into the table, the assignment from that macro, and accesses to stream fields such as stream_name and socket_domain). These should be investigated to determine whether the pointer (and/or the table/struct members) could be const-qualified per MISRA C 2023 Rule 8.13.\n\nWhy other fragments are NOT flagged:\n- The function parameter 'const char *Filename' is already const-qualified, so it complies with the rule.\n- OS_CHECK_POINTER(Filename) merely checks the pointer value; it does not affect pointer qualification.\n- The iterator variable 'OS_object_iter_t iter' and the calls that manipulate it (OS_ObjectIdIterateActive, OS_ObjectIdIteratorGetNext, OS_ObjectIdIteratorProcessEntry, OS_ObjectIdIteratorDestroy) operate on the iterator object and/or perform actions that likely require mutable state; therefore their pointer usage is expected to be non-const and not flagged here.\n- The call to OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose) passes the iterator for processing entries; that operation may modify table entries (e.g. closing a file), so the non-const access there is plausible and should not be conservatively flagged without further context.\n- Other local variables (return_code, close_code) are non-pointer scalars and are not relevant to Rule 8.13.\n\nIf investigation shows the table entries are not modified by this function (or should be protected), consider changing the local pointer to 'const OS_stream_internal_record_t *' or otherwise providing a const-qualified accessor/macro to satisfy Rule 8.13."
}