{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'stream' is declared as OS_stream_internal_record_t *stream but is only used for read-only access (reading stream->socket_domain and stream->stream_name, passing their values to strcmp). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. In this case the pointer could be declared const OS_stream_internal_record_t *stream (the OS_OBJECT_TABLE_GET macro yields a non-const pointer but can be assigned to a const-qualified pointer), so the current declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseFileByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1267.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseFileByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append logs to /tmp/logs/1267.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1267.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    /* attempt to flush and close to ensure log is written even if caller crashes */\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Log entry and parameters */\n    probe_log(\"OS_CloseFileByName ENTER Filename='%s'\\n\", (Filename != NULL) ? Filename : \"(null)\");\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    probe_log(\"Initializing object iterator for LOCAL_OBJID_TYPE\\n\");\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        probe_log(\"Iterator token=%lu stream_ptr=%p\\n\", (unsigned long)iter.token, (void *)stream);\n\n        if (stream == NULL)\n        {\n            probe_log(\"  stream is NULL, continuing\\n\");\n            continue;\n        }\n\n        /* Log relevant read-only fields used in the decision */\n        probe_log(\"  stream->socket_domain=%d stream->stream_name='%s'\\n\",\n                  (int)stream->socket_domain,\n                  (stream->stream_name != NULL) ? stream->stream_name : \"(null)\");\n\n        /* Compute strcmp result once to log it and to keep logic equivalent */\n        int cmp_result = -1;\n        if (stream->stream_name != NULL && Filename != NULL)\n        {\n            cmp_result = strcmp(stream->stream_name, Filename);\n        }\n        else\n        {\n            /* If either is NULL, keep strcmp semantics conservative (non-match) */\n            cmp_result = -1;\n        }\n\n        probe_log(\"  strcmp(stream->stream_name, Filename) => %d\\n\", cmp_result);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (cmp_result == 0))\n        {\n            probe_log(\"  Match found. Calling OS_ObjectIdIteratorProcessEntry for token=%lu\\n\", (unsigned long)iter.token);\n\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            probe_log(\"  close_code=%ld (previous return_code=%ld)\\n\", (long)close_code, (long)return_code);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n                probe_log(\"  Updated return_code => %ld\\n\", (long)return_code);\n            }\n        }\n        else\n        {\n            probe_log(\"  No match or socket domain not INVALID; skipping token=%lu\\n\", (unsigned long)iter.token);\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    probe_log(\"OS_CloseFileByName EXIT return_code=%ld\\n\", (long)return_code);\n\n    return return_code;\n}\n"
}