{
  "user_message": "An agent A claimed that the following OS_CloseFileByName code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CloseFileByName.\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In OS_CloseFileByName the local pointer is declared as a non-const pointer: \"OS_stream_internal_record_t *stream;\". The pointer is used only for read access (reading stream->socket_domain and stream->stream_name for strcmp) and never used to modify the pointed object within this function. According to MISRA C 2023 Rule 8.13 the pointer should therefore point to a const-qualified type (e.g. \"const OS_stream_internal_record_t *stream;\"). Thus the current non-const declaration violates Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Open log file to capture control flow and state for debugging the pointer usage */\n    FILE *log_fp = fopen(\"/tmp/logs/1267.txt\", \"a\");\n    if (log_fp)\n    {\n        fprintf(log_fp, \"OS_CloseFileByName called with Filename=\\\"%s\\\"\\n\", (Filename != NULL) ? Filename : \"(null)\");\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log the iterator token and the stream pointer and fields used in this function. */\n        if (log_fp)\n        {\n            /* iter.token is an aggregate type in some builds/configurations; print its address instead of trying to\n             * cast it to an integer (which is not allowed for aggregates). */\n            fprintf(log_fp, \"Iterator token=%p, stream_ptr=%p\\n\", (void *)&iter.token, (void *)stream);\n            if (stream != NULL)\n            {\n                fprintf(log_fp, \"  socket_domain=%d, stream_name=\\\"%s\\\"\\n\",\n                        (int)stream->socket_domain,\n                        (stream->stream_name != NULL) ? stream->stream_name : \"(null)\");\n            }\n            else\n            {\n                fprintf(log_fp, \"  stream is NULL\\n\");\n            }\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            if (log_fp)\n            {\n                /* See note above about iter.token being an aggregate; print its address. */\n                fprintf(log_fp, \"  match found for token=%p (stream_name matches Filename)\\n\", (void *)&iter.token);\n            }\n\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (log_fp)\n            {\n                fprintf(log_fp, \"  close_code=%d, return_code(before)=%d\\n\", (int)close_code, (int)return_code);\n            }\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n                if (log_fp)\n                {\n                    fprintf(log_fp, \"  return_code(updated)=%d\\n\", (int)return_code);\n                }\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"OS_CloseFileByName returning %d\\n\\n\", (int)return_code);\n        fclose(log_fp);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_CloseFileByName. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A\u2019s report is correct. In this function the local pointer stream is only used for read-only access (reading stream->socket_domain and stream->stream_name, and passing those to strcmp). Per MISRA C 2023 Rule 8.13 (\u201cA pointer should point to a const\u2011qualified type whenever possible\u201d), the pointer should be declared to point to a const-qualified type (for example: const OS_stream_internal_record_t *stream). Declaring it const prevents accidental modification through this pointer and better documents intent.\n\nNotes/considerations:\n- Assigning the result of OS_OBJECT_TABLE_GET (which currently yields a non-const pointer) to a pointer-to-const is allowed by C; so making stream const will generally compile without changes.\n- If other code in this function later needed to modify the pointed object or pass the pointer to an API that requires a pointer-to-non-const, then keeping it non-const would be necessary; no such usage appears in the provided function.\n- The added logging/test code and empty log do not affect the rule analysis; they do not demonstrate any write access through stream.\n\nTherefore the assertion that the current non-const declaration violates Rule 8.13 (i.e., it should be const-qualified) is correct."
}