{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_CloseFileByName the local pointer is declared as a non-const pointer: \"OS_stream_internal_record_t *stream;\". The pointer is used only for read access (reading stream->socket_domain and stream->stream_name for strcmp) and never used to modify the pointed object within this function. According to MISRA C 2023 Rule 8.13 the pointer should therefore point to a const-qualified type (e.g. \"const OS_stream_internal_record_t *stream;\"). Thus the current non-const declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseFileByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1267.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseFileByName code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Open log file to capture control flow and state for debugging the pointer usage */\n    FILE *log_fp = fopen(\"/tmp/logs/1267.txt\", \"a\");\n    if (log_fp)\n    {\n        fprintf(log_fp, \"OS_CloseFileByName called with Filename=\\\"%s\\\"\\n\", (Filename != NULL) ? Filename : \"(null)\");\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log the iterator token and the stream pointer and fields used in this function. */\n        if (log_fp)\n        {\n            fprintf(log_fp, \"Iterator token=%u, stream_ptr=%p\\n\", (unsigned int)iter.token, (void *)stream);\n            if (stream != NULL)\n            {\n                fprintf(log_fp, \"  socket_domain=%d, stream_name=\\\"%s\\\"\\n\",\n                        (int)stream->socket_domain,\n                        (stream->stream_name != NULL) ? stream->stream_name : \"(null)\");\n            }\n            else\n            {\n                fprintf(log_fp, \"  stream is NULL\\n\");\n            }\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            if (log_fp)\n            {\n                fprintf(log_fp, \"  match found for token=%u (stream_name matches Filename)\\n\", (unsigned int)iter.token);\n            }\n\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (log_fp)\n            {\n                fprintf(log_fp, \"  close_code=%d, return_code(before)=%d\\n\", (int)close_code, (int)return_code);\n            }\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n                if (log_fp)\n                {\n                    fprintf(log_fp, \"  return_code(updated)=%d\\n\", (int)return_code);\n                }\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"OS_CloseFileByName returning %d\\n\\n\", (int)return_code);\n        fclose(log_fp);\n    }\n\n    return return_code;\n}\n"
}