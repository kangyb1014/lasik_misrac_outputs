{
  "user_message": "An agent A claimed that the following OS_CloseFileByName code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CloseFileByName.\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local variable 'stream' is declared as OS_stream_internal_record_t *stream but is only used for read-only access (reading stream->socket_domain and stream->stream_name, passing their values to strcmp). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. In this case the pointer could be declared const OS_stream_internal_record_t *stream (the OS_OBJECT_TABLE_GET macro yields a non-const pointer but can be assigned to a const-qualified pointer), so the current declaration violates Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1267.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    /* attempt to flush and close to ensure log is written even if caller crashes */\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Log entry and parameters */\n    probe_log(\"OS_CloseFileByName ENTER Filename='%s'\\n\", (Filename != NULL) ? Filename : \"(null)\");\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    probe_log(\"Initializing object iterator for LOCAL_OBJID_TYPE\\n\");\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Print the address of the token structure instead of casting the aggregate to an integer */\n        probe_log(\"Iterator token=%p stream_ptr=%p\\n\", (void *)&iter.token, (void *)stream);\n\n        if (stream == NULL)\n        {\n            probe_log(\"  stream is NULL, continuing\\n\");\n            continue;\n        }\n\n        /* Log relevant read-only fields used in the decision */\n        probe_log(\"  stream->socket_domain=%d stream->stream_name='%s'\\n\",\n                  (int)stream->socket_domain,\n                  (stream->stream_name != NULL) ? stream->stream_name : \"(null)\");\n\n        /* Compute strcmp result once to log it and to keep logic equivalent */\n        int cmp_result = -1;\n        if (stream->stream_name != NULL && Filename != NULL)\n        {\n            cmp_result = strcmp(stream->stream_name, Filename);\n        }\n        else\n        {\n            /* If either is NULL, keep strcmp semantics conservative (non-match) */\n            cmp_result = -1;\n        }\n\n        probe_log(\"  strcmp(stream->stream_name, Filename) => %d\\n\", cmp_result);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (cmp_result == 0))\n        {\n            probe_log(\"  Match found. Calling OS_ObjectIdIteratorProcessEntry for token=%p\\n\", (void *)&iter.token);\n\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            probe_log(\"  close_code=%ld (previous return_code=%ld)\\n\", (long)close_code, (long)return_code);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n                probe_log(\"  Updated return_code => %ld\\n\", (long)return_code);\n            }\n        }\n        else\n        {\n            probe_log(\"  No match or socket domain not INVALID; skipping token=%p\\n\", (void *)&iter.token);\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    probe_log(\"OS_CloseFileByName EXIT return_code=%ld\\n\", (long)return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_CloseFileByName. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the shown function the local variable stream is only used for read-only access (reading stream->socket_domain and stream->stream_name and passing those values to strcmp); there are no writes through stream and it is not passed to any function that requires a non-const pointer. Declaring it as const OS_stream_internal_record_t *stream would be valid in C (a non-const T * can be assigned to a const T * without a cast) and therefore satisfies MISRA C 2023 Rule 8.13 (pointer targets should be const-qualified whenever possible). Note: if OS_OBJECT_TABLE_GET or other code called here required a mutable pointer or the pointer were later used for mutation, const would not be possible \u2014 but in the presented snippet the change is safe and the agent A report is correct."
}