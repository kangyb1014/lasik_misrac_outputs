{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code only checks Typename != NULL and that the first character is not '\\0', but does not guarantee that the object referenced by Typename is a null-terminated string. If Typename points to a buffer that is not NUL-terminated (or where the NUL lies beyond the allocated bounds), strchr(Typename, '*') will scan past the object\u2019s bounds and perform an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GenericIntegerCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2279.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_GenericIntegerCompare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_GenericIntegerCompare:\n```c\nbool UtAssert_GenericIntegerCompare(bool IsUnsigned, UT_IntCheck_t ActualValue, UtAssert_Compare_t CompareType,\n                                    UT_IntCheck_t RefValue, const char *File, uint32 Line, UtAssert_Radix_t RadixType,\n                                    const char *Typename, const char *ActualText, const char *RefText)\n{\n    static const char UTASSERT_PREFIX[] = \"UTASSERT_\";\n\n    char ActualStr[32];\n    char RefStr[32];\n    char TagStr[32];\n    int  TagLen;\n\n    /* If the radix type was not specified, then check if the typename appears to be a pointer -\n     * That is, it contains an asterisk.  This is far from foolproof due to typedefs etc but\n     * it should catch most of them (note that \"hiding\" a pointer via typedef is discouraged by\n     * GSFC coding standards, so this shouldn't be too likely)\n     */\n    if (Typename != NULL && *Typename != 0)\n    {\n        TagLen = snprintf(TagStr, sizeof(TagStr), \"%s\", Typename);\n        if (TagLen < 0)\n        {\n            TagLen = 0;\n        }\n        else if (TagLen > (sizeof(TagStr) - 3))\n        {\n            TagLen = sizeof(TagStr) - 3;\n        }\n\n        while (TagLen > 0 && (isspace((unsigned char)TagStr[TagLen - 1]) || TagStr[TagLen - 1] == ':'))\n        {\n            --TagLen;\n        }\n\n        if (TagLen > 0)\n        {\n            TagStr[TagLen] = ':';\n            ++TagLen;\n            TagStr[TagLen] = ' ';\n            ++TagLen;\n        }\n\n        TagStr[TagLen] = 0;\n\n        if (RadixType == UtAssert_Radix_DEFAULT && strchr(Typename, '*') != NULL)\n        {\n            /* looks like a pointer type */\n            RadixType = UtAssert_Radix_HEX;\n        }\n    }\n    else\n    {\n        TagStr[0] = 0;\n    }\n\n    /* If either the actual text or the ref text starts with the \"UTASSERT_\" prefix, then strip it */\n    if (strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        ActualText += sizeof(UTASSERT_PREFIX) - 1;\n    }\n    if (strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        RefText += sizeof(UTASSERT_PREFIX) - 1;\n    }\n\n    return UtAssertEx(UtAssert_DoCompare(ActualValue, CompareType, RefValue, IsUnsigned), UTASSERT_CASETYPE_FAILURE,\n                      File, Line, \"%s%s (%s) %s %s (%s)\", TagStr, ActualText,\n                      UtAssert_GetValueText(ActualStr, sizeof(ActualStr), ActualValue, IsUnsigned, RadixType),\n                      UtAssert_GetOpText(CompareType), RefText,\n                      UtAssert_GetValueText(RefStr, sizeof(RefStr), RefValue, IsUnsigned, RadixType));\n}\n```\n</target_code>\nPlease provide the modified UtAssert_GenericIntegerCompare code.\n",
  "test_code": "static void UtAssert_LogProbe(const char *Fmt, ...)\n{\n    FILE *F = fopen(\"/tmp/logs/2279.txt\", \"a\");\n    if (F == NULL)\n    {\n        return;\n    }\n\n    va_list Args;\n    va_start(Args, Fmt);\n    vfprintf(F, Fmt, Args);\n    va_end(Args);\n    fputc('\\n', F);\n    fclose(F);\n}\n\nbool UtAssert_GenericIntegerCompare(bool IsUnsigned, UT_IntCheck_t ActualValue, UtAssert_Compare_t CompareType,\n                                    UT_IntCheck_t RefValue, const char *File, uint32 Line, UtAssert_Radix_t RadixType,\n                                    const char *Typename, const char *ActualText, const char *RefText)\n{\n    static const char UTASSERT_PREFIX[] = \"UTASSERT_\";\n\n    char ActualStr[32];\n    char RefStr[32];\n    char TagStr[32];\n    int  TagLen;\n\n    /* Log entry state */\n    UtAssert_LogProbe(\"[2279] Enter UtAssert_GenericIntegerCompare: IsUnsigned=%d, CompareType=%d, RefValue=%lld, File=%s, Line=%u, RadixType=%d, Typename_ptr=%p, ActualText_ptr=%p, RefText_ptr=%p\",\n                      (int)IsUnsigned, (int)CompareType, (long long)RefValue, File ? File : \"(null)\", (unsigned)Line, (int)RadixType, (const void *)Typename, (const void *)ActualText, (const void *)RefText);\n\n    /* If the radix type was not specified, then check if the typename appears to be a pointer -\n     * That is, it contains an asterisk.  This is far from foolproof due to typedefs etc but\n     * it should catch most of them (note that \"hiding\" a pointer via typedef is discouraged by\n     * GSFC coding standards, so this shouldn't be too likely)\n     */\n    if (Typename != NULL && *Typename != 0)\n    {\n        /* Log Typename first character (safe because we checked Typename != NULL and *Typename != 0) */\n        UtAssert_LogProbe(\"[2279] Typename first char=0x%02x ('%c')\", (unsigned char)Typename[0], (Typename[0] >= ' ' && Typename[0] <= '~') ? Typename[0] : '?');\n\n        TagLen = snprintf(TagStr, sizeof(TagStr), \"%s\", Typename);\n        if (TagLen < 0)\n        {\n            TagLen = 0;\n        }\n        else if (TagLen > (sizeof(TagStr) - 3))\n        {\n            TagLen = sizeof(TagStr) - 3;\n        }\n\n        while (TagLen > 0 && (isspace((unsigned char)TagStr[TagLen - 1]) || TagStr[TagLen - 1] == ':'))\n        {\n            --TagLen;\n        }\n\n        if (TagLen > 0)\n        {\n            TagStr[TagLen] = ':';\n            ++TagLen;\n            TagStr[TagLen] = ' ';\n            ++TagLen;\n        }\n\n        TagStr[TagLen] = 0;\n\n        /* Log the constructed TagStr and TagLen */\n        UtAssert_LogProbe(\"[2279] TagStr=\\\"%s\\\", TagLen=%d\", TagStr, TagLen);\n\n        if (RadixType == UtAssert_Radix_DEFAULT && strchr(Typename, '*') != NULL)\n        {\n            /* Log that a '*' was found by strchr (note: this is the site identified as scanning Typename) */\n            const char *Found = strchr(Typename, '*');\n            if (Found != NULL)\n            {\n                long Index = (long)(Found - Typename);\n                UtAssert_LogProbe(\"[2279] strchr found '*' at offset=%ld, Typename_ptr=%p, Found_ptr=%p\", Index, (const void *)Typename, (const void *)Found);\n            }\n            else\n            {\n                UtAssert_LogProbe(\"[2279] strchr did not find '*' in Typename (Typename_ptr=%p)\", (const void *)Typename);\n            }\n\n            /* looks like a pointer type */\n            RadixType = UtAssert_Radix_HEX;\n            UtAssert_LogProbe(\"[2279] RadixType changed to HEX based on Typename content\");\n        }\n        else\n        {\n            UtAssert_LogProbe(\"[2279] Radix decision: RadixType=%d (no '*' detected or not DEFAULT)\", (int)RadixType);\n        }\n    }\n    else\n    {\n        TagStr[0] = 0;\n        UtAssert_LogProbe(\"[2279] Typename is NULL or empty (Typename_ptr=%p)\", (const void *)Typename);\n    }\n\n    /* If either the actual text or the ref text starts with the \"UTASSERT_\" prefix, then strip it */\n    if (strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        ActualText += sizeof(UTASSERT_PREFIX) - 1;\n        UtAssert_LogProbe(\"[2279] Stripped UTASSERT_ prefix from ActualText, now points to %p\", (const void *)ActualText);\n    }\n    if (strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        RefText += sizeof(UTASSERT_PREFIX) - 1;\n        UtAssert_LogProbe(\"[2279] Stripped UTASSERT_ prefix from RefText, now points to %p\", (const void *)RefText);\n    }\n\n    UtAssert_LogProbe(\"[2279] About to perform comparison and report: TagStr=\\\"%s\\\" ActualText_ptr=%p RefText_ptr=%p\", TagStr, (const void *)ActualText, (const void *)RefText);\n\n    return UtAssertEx(UtAssert_DoCompare(ActualValue, CompareType, RefValue, IsUnsigned), UTASSERT_CASETYPE_FAILURE,\n                      File, Line, \"%s%s (%s) %s %s (%s)\", TagStr, ActualText,\n                      UtAssert_GetValueText(ActualStr, sizeof(ActualStr), ActualValue, IsUnsigned, RadixType),\n                      UtAssert_GetOpText(CompareType), RefText,\n                      UtAssert_GetValueText(RefStr, sizeof(RefStr), RefValue, IsUnsigned, RadixType));\n}\n"
}