{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe code assigns to the parameter RadixType (RadixType = UtAssert_Radix_HEX;) when RadixType == UtAssert_Radix_DEFAULT and Typename contains '*'. This modifies a non-pointer function parameter inside the function, which violates MISRA C 2023 Rule 17.8 (parameters shall not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GenericIntegerCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2277.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_GenericIntegerCompare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_GenericIntegerCompare:\n```c\nbool UtAssert_GenericIntegerCompare(bool IsUnsigned, UT_IntCheck_t ActualValue, UtAssert_Compare_t CompareType,\n                                    UT_IntCheck_t RefValue, const char *File, uint32 Line, UtAssert_Radix_t RadixType,\n                                    const char *Typename, const char *ActualText, const char *RefText)\n{\n    static const char UTASSERT_PREFIX[] = \"UTASSERT_\";\n\n    char ActualStr[32];\n    char RefStr[32];\n    char TagStr[32];\n    int  TagLen;\n\n    /* If the radix type was not specified, then check if the typename appears to be a pointer -\n     * That is, it contains an asterisk.  This is far from foolproof due to typedefs etc but\n     * it should catch most of them (note that \"hiding\" a pointer via typedef is discouraged by\n     * GSFC coding standards, so this shouldn't be too likely)\n     */\n    if (Typename != NULL && *Typename != 0)\n    {\n        TagLen = snprintf(TagStr, sizeof(TagStr), \"%s\", Typename);\n        if (TagLen < 0)\n        {\n            TagLen = 0;\n        }\n        else if (TagLen > (sizeof(TagStr) - 3))\n        {\n            TagLen = sizeof(TagStr) - 3;\n        }\n\n        while (TagLen > 0 && (isspace((unsigned char)TagStr[TagLen - 1]) || TagStr[TagLen - 1] == ':'))\n        {\n            --TagLen;\n        }\n\n        if (TagLen > 0)\n        {\n            TagStr[TagLen] = ':';\n            ++TagLen;\n            TagStr[TagLen] = ' ';\n            ++TagLen;\n        }\n\n        TagStr[TagLen] = 0;\n\n        if (RadixType == UtAssert_Radix_DEFAULT && strchr(Typename, '*') != NULL)\n        {\n            /* looks like a pointer type */\n            RadixType = UtAssert_Radix_HEX;\n        }\n    }\n    else\n    {\n        TagStr[0] = 0;\n    }\n\n    /* If either the actual text or the ref text starts with the \"UTASSERT_\" prefix, then strip it */\n    if (strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        ActualText += sizeof(UTASSERT_PREFIX) - 1;\n    }\n    if (strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        RefText += sizeof(UTASSERT_PREFIX) - 1;\n    }\n\n    return UtAssertEx(UtAssert_DoCompare(ActualValue, CompareType, RefValue, IsUnsigned), UTASSERT_CASETYPE_FAILURE,\n                      File, Line, \"%s%s (%s) %s %s (%s)\", TagStr, ActualText,\n                      UtAssert_GetValueText(ActualStr, sizeof(ActualStr), ActualValue, IsUnsigned, RadixType),\n                      UtAssert_GetOpText(CompareType), RefText,\n                      UtAssert_GetValueText(RefStr, sizeof(RefStr), RefValue, IsUnsigned, RadixType));\n}\n```\n</target_code>\nPlease provide the modified UtAssert_GenericIntegerCompare code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <ctype.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n/* Forward declarations of external functions/types used by the original code */\n/* These are not defined here; they are part of the original project. */\ntypedef unsigned int uint32;\ntypedef long long UT_IntCheck_t; /* best-effort stand-in for printing purposes */\ntypedef enum { UtAssert_Radix_DEFAULT = 0, UtAssert_Radix_HEX = 1 } UtAssert_Radix_t;\ntypedef int UtAssert_Compare_t;\n\nextern bool UtAssertEx(bool condition, int caseType, const char *File, uint32 Line, const char *Fmt, ...);\nextern bool UtAssert_DoCompare(UT_IntCheck_t ActualValue, UtAssert_Compare_t CompareType, UT_IntCheck_t RefValue, bool IsUnsigned);\nextern const char *UtAssert_GetValueText(char *Buf, size_t BufSize, UT_IntCheck_t Value, bool IsUnsigned, UtAssert_Radix_t RadixType);\nextern const char *UtAssert_GetOpText(UtAssert_Compare_t CompareType);\n\n/* Probe logging utility: append formatted messages to /tmp/logs/2277.txt */\nstatic void UtAssert_Logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2277.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nbool UtAssert_GenericIntegerCompare(bool IsUnsigned, UT_IntCheck_t ActualValue, UtAssert_Compare_t CompareType,\n                                    UT_IntCheck_t RefValue, const char *File, uint32 Line, UtAssert_Radix_t RadixType,\n                                    const char *Typename, const char *ActualText, const char *RefText)\n{\n    static const char UTASSERT_PREFIX[] = \"UTASSERT_\";\n\n    char ActualStr[32];\n    char RefStr[32];\n    char TagStr[32];\n    int  TagLen;\n\n    /* Log entry state */\n    UtAssert_Logf(\"ENTER: IsUnsigned=%d, ActualValue=%lld, CompareType=%d, RefValue=%lld, File=%s, Line=%u, RadixType=%d, Typename=%s, ActualText=%s, RefText=%s\",\n                  IsUnsigned, (long long)ActualValue, (int)CompareType, (long long)RefValue,\n                  (File != NULL ? File : \"(null)\"), (unsigned)Line, (int)RadixType,\n                  (Typename != NULL ? Typename : \"(null)\"), (ActualText != NULL ? ActualText : \"(null)\"), (RefText != NULL ? RefText : \"(null)\"));\n\n    /* If the radix type was not specified, then check if the typename appears to be a pointer -\n     * That is, it contains an asterisk.  This is far from foolproof due to typedefs etc but\n     * it should catch most of them (note that \"hiding\" a pointer via typedef is discouraged by\n     * GSFC coding standards, so this shouldn't be too likely)\n     */\n    if (Typename != NULL && *Typename != 0)\n    {\n        TagLen = snprintf(TagStr, sizeof(TagStr), \"%s\", Typename);\n        if (TagLen < 0)\n        {\n            TagLen = 0;\n        }\n        else if (TagLen > (sizeof(TagStr) - 3))\n        {\n            TagLen = sizeof(TagStr) - 3;\n        }\n\n        while (TagLen > 0 && (isspace((unsigned char)TagStr[TagLen - 1]) || TagStr[TagLen - 1] == ':'))\n        {\n            --TagLen;\n        }\n\n        if (TagLen > 0)\n        {\n            TagStr[TagLen] = ':';\n            ++TagLen;\n            TagStr[TagLen] = ' ';\n            ++TagLen;\n        }\n\n        TagStr[TagLen] = 0;\n\n        /* Log TagStr and TagLen after trimming */\n        UtAssert_Logf(\"TAG_STATE: TagStr=\\\"%s\\\", TagLen=%d\", TagStr, TagLen);\n\n        if (RadixType == UtAssert_Radix_DEFAULT && strchr(Typename, '*') != NULL)\n        {\n            /* looks like a pointer type */\n            UtAssert_Logf(\"RADIX_DECISION: Typename contains '*', RadixType before=%d\", (int)RadixType);\n            RadixType = UtAssert_Radix_HEX;\n            UtAssert_Logf(\"RADIX_DECISION: RadixType after=%d\", (int)RadixType);\n        }\n    }\n    else\n    {\n        TagStr[0] = 0;\n    }\n\n    /* If either the actual text or the ref text starts with the \"UTASSERT_\" prefix, then strip it */\n    if (strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        ActualText += sizeof(UTASSERT_PREFIX) - 1;\n        UtAssert_Logf(\"STRIP_PREFIX: ActualText now=\\\"%s\\\"\", ActualText);\n    }\n    if (strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        RefText += sizeof(UTASSERT_PREFIX) - 1;\n        UtAssert_Logf(\"STRIP_PREFIX: RefText now=\\\"%s\\\"\", RefText);\n    }\n\n    /* Log final values used for printing */\n    UtAssert_Logf(\"FINAL: Using RadixType=%d, TagStr=\\\"%s\\\", ActualText=\\\"%s\\\", RefText=\\\"%s\\\"\",\n                  (int)RadixType, TagStr, (ActualText != NULL ? ActualText : \"(null)\"), (RefText != NULL ? RefText : \"(null)\"));\n\n    return UtAssertEx(UtAssert_DoCompare(ActualValue, CompareType, RefValue, IsUnsigned), UTASSERT_CASETYPE_FAILURE,\n                      File, Line, \"%s%s (%s) %s %s (%s)\", TagStr, ActualText,\n                      UtAssert_GetValueText(ActualStr, sizeof(ActualStr), ActualValue, IsUnsigned, RadixType),\n                      UtAssert_GetOpText(CompareType), RefText,\n                      UtAssert_GetValueText(RefStr, sizeof(RefStr), RefValue, IsUnsigned, RadixType));\n}\n"
}