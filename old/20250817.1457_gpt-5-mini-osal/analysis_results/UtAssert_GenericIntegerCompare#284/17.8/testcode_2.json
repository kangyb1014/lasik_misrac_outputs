{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter ActualText has type 'const char *' (a pointer parameter). The code performs 'ActualText += sizeof(UTASSERT_PREFIX) - 1;', which modifies the pointer parameter itself (advances it to skip the prefix). Modifying the pointer parameter value violates MISRA C 2023 Rule 17.8 (the object pointed to may be modified, but the pointer parameter shall not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GenericIntegerCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2277.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_GenericIntegerCompare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_GenericIntegerCompare:\n```c\nbool UtAssert_GenericIntegerCompare(bool IsUnsigned, UT_IntCheck_t ActualValue, UtAssert_Compare_t CompareType,\n                                    UT_IntCheck_t RefValue, const char *File, uint32 Line, UtAssert_Radix_t RadixType,\n                                    const char *Typename, const char *ActualText, const char *RefText)\n{\n    static const char UTASSERT_PREFIX[] = \"UTASSERT_\";\n\n    char ActualStr[32];\n    char RefStr[32];\n    char TagStr[32];\n    int  TagLen;\n\n    /* If the radix type was not specified, then check if the typename appears to be a pointer -\n     * That is, it contains an asterisk.  This is far from foolproof due to typedefs etc but\n     * it should catch most of them (note that \"hiding\" a pointer via typedef is discouraged by\n     * GSFC coding standards, so this shouldn't be too likely)\n     */\n    if (Typename != NULL && *Typename != 0)\n    {\n        TagLen = snprintf(TagStr, sizeof(TagStr), \"%s\", Typename);\n        if (TagLen < 0)\n        {\n            TagLen = 0;\n        }\n        else if (TagLen > (sizeof(TagStr) - 3))\n        {\n            TagLen = sizeof(TagStr) - 3;\n        }\n\n        while (TagLen > 0 && (isspace((unsigned char)TagStr[TagLen - 1]) || TagStr[TagLen - 1] == ':'))\n        {\n            --TagLen;\n        }\n\n        if (TagLen > 0)\n        {\n            TagStr[TagLen] = ':';\n            ++TagLen;\n            TagStr[TagLen] = ' ';\n            ++TagLen;\n        }\n\n        TagStr[TagLen] = 0;\n\n        if (RadixType == UtAssert_Radix_DEFAULT && strchr(Typename, '*') != NULL)\n        {\n            /* looks like a pointer type */\n            RadixType = UtAssert_Radix_HEX;\n        }\n    }\n    else\n    {\n        TagStr[0] = 0;\n    }\n\n    /* If either the actual text or the ref text starts with the \"UTASSERT_\" prefix, then strip it */\n    if (strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        ActualText += sizeof(UTASSERT_PREFIX) - 1;\n    }\n    if (strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        RefText += sizeof(UTASSERT_PREFIX) - 1;\n    }\n\n    return UtAssertEx(UtAssert_DoCompare(ActualValue, CompareType, RefValue, IsUnsigned), UTASSERT_CASETYPE_FAILURE,\n                      File, Line, \"%s%s (%s) %s %s (%s)\", TagStr, ActualText,\n                      UtAssert_GetValueText(ActualStr, sizeof(ActualStr), ActualValue, IsUnsigned, RadixType),\n                      UtAssert_GetOpText(CompareType), RefText,\n                      UtAssert_GetValueText(RefStr, sizeof(RefStr), RefValue, IsUnsigned, RadixType));\n}\n```\n</target_code>\nPlease provide the modified UtAssert_GenericIntegerCompare code.\n",
  "test_code": "/* Probe/log helper inserted to capture control flow and state for debugging the pointer-parameter modification\n * Logs appended to: /tmp/logs/2277.txt\n * This helper is kept minimal and does not change function semantics.\n */\nstatic void UtAssert_LogProbe(const char *stage, const char *actual, const char *reftext, const char *typename_local,\n                              const char *file_local, unsigned int line, int actual_prefixed, int ref_prefixed)\n{\n    FILE *fp = fopen(\"/tmp/logs/2277.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    fprintf(fp, \"[UtAssert_GenericIntegerCompare] %s\\n\", stage);\n    fprintf(fp, \"  File: %s Line: %u\\n\", (file_local != NULL) ? file_local : \"(null)\", line);\n    fprintf(fp, \"  Typename: %s\\n\", (typename_local != NULL) ? typename_local : \"(null)\");\n    fprintf(fp, \"  ActualText (ptr): %p\\n\", (const void *)actual);\n    fprintf(fp, \"  ActualText (str): %s\\n\", (actual != NULL) ? actual : \"(null)\");\n    fprintf(fp, \"  RefText (ptr): %p\\n\", (const void *)reftext);\n    fprintf(fp, \"  RefText (str): %s\\n\", (reftext != NULL) ? reftext : \"(null)\");\n    fprintf(fp, \"  ActualHasPrefix: %d  RefHasPrefix: %d\\n\", actual_prefixed, ref_prefixed);\n    fprintf(fp, \"---\\n\");\n    fclose(fp);\n}\n\nbool UtAssert_GenericIntegerCompare(bool IsUnsigned, UT_IntCheck_t ActualValue, UtAssert_Compare_t CompareType,\n                                    UT_IntCheck_t RefValue, const char *File, uint32 Line, UtAssert_Radix_t RadixType,\n                                    const char *Typename, const char *ActualText, const char *RefText)\n{\n    static const char UTASSERT_PREFIX[] = \"UTASSERT_\";\n\n    char ActualStr[32];\n    char RefStr[32];\n    char TagStr[32];\n    int  TagLen;\n\n    /* Log entry state before any potential modifications */\n    UtAssert_LogProbe(\"ENTRY\", ActualText, RefText, Typename, File, (unsigned int)Line,\n                      (ActualText != NULL && strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0) ? 1 : 0,\n                      (RefText != NULL && strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0) ? 1 : 0);\n\n    /* If the radix type was not specified, then check if the typename appears to be a pointer -\n     * That is, it contains an asterisk.  This is far from foolproof due to typedefs etc but\n     * it should catch most of them (note that \"hiding\" a pointer via typedef is discouraged by\n     * GSFC coding standards, so this shouldn't be too likely)\n     */\n    if (Typename != NULL && *Typename != 0)\n    {\n        TagLen = snprintf(TagStr, sizeof(TagStr), \"%s\", Typename);\n        if (TagLen < 0)\n        {\n            TagLen = 0;\n        }\n        else if (TagLen > (sizeof(TagStr) - 3))\n        {\n            TagLen = sizeof(TagStr) - 3;\n        }\n\n        while (TagLen > 0 && (isspace((unsigned char)TagStr[TagLen - 1]) || TagStr[TagLen - 1] == ':'))\n        {\n            --TagLen;\n        }\n\n        if (TagLen > 0)\n        {\n            TagStr[TagLen] = ':';\n            ++TagLen;\n            TagStr[TagLen] = ' ';\n            ++TagLen;\n        }\n\n        TagStr[TagLen] = 0;\n\n        if (RadixType == UtAssert_Radix_DEFAULT && strchr(Typename, '*') != NULL)\n        {\n            /* looks like a pointer type */\n            RadixType = UtAssert_Radix_HEX;\n\n            /* Log detection of pointer-type affecting radix */\n            UtAssert_LogProbe(\"Radix set to HEX due to '*' in Typename\", ActualText, RefText, Typename, File,\n                              (unsigned int)Line, 0, 0);\n        }\n    }\n    else\n    {\n        TagStr[0] = 0;\n    }\n\n    /* If either the actual text or the ref text starts with the \"UTASSERT_\" prefix, then strip it */\n    /* Keep original pointer values for logging evidence of modification */\n    const char *origActual = ActualText;\n    const char *origRef = RefText;\n\n    if (strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        /* Log just before pointer-modifying operation */\n        UtAssert_LogProbe(\"Before ActualText strip\", ActualText, RefText, Typename, File, (unsigned int)Line, 1,\n                          (RefText != NULL && strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0) ? 1 : 0);\n\n        ActualText += sizeof(UTASSERT_PREFIX) - 1; /* NOTE: modifies pointer parameter (violates MISRA C 2023 Rule 17.8) */\n\n        /* Log right after modification showing pointer change */\n        UtAssert_LogProbe(\"After ActualText strip\", ActualText, RefText, Typename, File, (unsigned int)Line,\n                          1,\n                          (RefText != NULL && strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0) ? 1 : 0);\n\n        /* Also append a record showing the pointer offset for clarity */\n        {\n            FILE *fp = fopen(\"/tmp/logs/2277.txt\", \"a\");\n            if (fp != NULL)\n            {\n                int offset = (int)(ActualText - origActual);\n                fprintf(fp, \"[UtAssert_GenericIntegerCompare] ActualText pointer advanced by %d (bytes/characters)\\n\", offset);\n                fprintf(fp, \"---\\n\");\n                fclose(fp);\n            }\n        }\n    }\n    if (strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        /* Log just before pointer-modifying operation for RefText */\n        UtAssert_LogProbe(\"Before RefText strip\", ActualText, RefText, Typename, File, (unsigned int)Line,\n                          (ActualText != NULL && strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0) ? 1 : 0,\n                          1);\n\n        RefText += sizeof(UTASSERT_PREFIX) - 1; /* NOTE: modifies pointer parameter (violates MISRA C 2023 Rule 17.8) */\n\n        /* Log after modification */\n        UtAssert_LogProbe(\"After RefText strip\", ActualText, RefText, Typename, File, (unsigned int)Line,\n                          (ActualText != NULL && strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0) ? 1 : 0,\n                          1);\n\n        {\n            FILE *fp = fopen(\"/tmp/logs/2277.txt\", \"a\");\n            if (fp != NULL)\n            {\n                int offset = (int)(RefText - origRef);\n                fprintf(fp, \"[UtAssert_GenericIntegerCompare] RefText pointer advanced by %d (bytes/characters)\\n\", offset);\n                fprintf(fp, \"---\\n\");\n                fclose(fp);\n            }\n        }\n    }\n\n    /* Final state log before performing the assertion/compare call */\n    UtAssert_LogProbe(\"FINAL\", ActualText, RefText, Typename, File, (unsigned int)Line,\n                      (ActualText != NULL && strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0) ? 1 : 0,\n                      (RefText != NULL && strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0) ? 1 : 0);\n\n    return UtAssertEx(UtAssert_DoCompare(ActualValue, CompareType, RefValue, IsUnsigned), UTASSERT_CASETYPE_FAILURE,\n                      File, Line, \"%s%s (%s) %s %s (%s)\", TagStr, ActualText,\n                      UtAssert_GetValueText(ActualStr, sizeof(ActualStr), ActualValue, IsUnsigned, RadixType),\n                      UtAssert_GetOpText(CompareType), RefText,\n                      UtAssert_GetValueText(RefStr, sizeof(RefStr), RefValue, IsUnsigned, RadixType));\n}\n"
}