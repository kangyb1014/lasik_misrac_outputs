{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UT_ClearDeferredRetcode:\n```c\nvoid UT_ClearDeferredRetcode(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    while (true)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED);\n        if (StubPtr == NULL)\n        {\n            break;\n        }\n        UT_ClearStubEntry(StubPtr);\n    }\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nUT_ClearStubEntry(StubPtr);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "UT_ClearStubEntry is intended to modify the stub entry (clear it), so the pointer must be to a non-const UT_StubTableEntry_t. Passing StubPtr (UT_StubTableEntry_t *) is therefore appropriate and does not violate MISRA C 2023 Rule 8.13. (If UT_ClearStubEntry did not modify the pointed object and nevertheless took a non-const pointer, that would be a violation.)"
}