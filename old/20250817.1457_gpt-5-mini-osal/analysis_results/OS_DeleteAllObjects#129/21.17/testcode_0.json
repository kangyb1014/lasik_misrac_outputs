{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf either pointer passed to strcmp can be NULL or point to a non\u2013NUL-terminated buffer. For example, if UT_Stub_RegisterReturnType was called with TypeName == NULL (or with a pointer to a non\u2013NUL-terminated string) then StubPtr->Data.Buff.ContentTypeStr may be NULL or unterminated. Later, when UT_Stub_GetReturnValuePtr() is called with a matching ReturnSize, the expression strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) will be evaluated and will dereference a NULL pointer or read past the end of the buffer, thereby accessing memory beyond the bounds of the object(s) and violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DeleteAllObjects code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1039.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DeleteAllObjects as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DeleteAllObjects:\n```c\nvoid OS_DeleteAllObjects(void)\n{\n    uint32 ObjectCount;\n    uint32 TryCount;\n\n    /*\n     * Note - this is done in a loop because some objects depend on other objects\n     * and you will not be able to delete the object until the ref count becomes zero.\n     */\n    TryCount = 0;\n    while (true)\n    {\n        ObjectCount = 0;\n        ++TryCount;\n\n        /* Delete timers and tasks first, as they could be actively using other object types  */\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMECB, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMEBASE, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TASK, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n\n        /* Then try to delete all other remaining objects of any type */\n        OS_ForEachObject(OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n\n        if (ObjectCount == 0 || TryCount > 4)\n        {\n            break;\n        }\n        OS_TaskDelay(5);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_DeleteAllObjects code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n\nvoid OS_DeleteAllObjects(void)\n{\n    uint32 ObjectCount;\n    uint32 TryCount;\n    FILE *logf = fopen(\"/tmp/logs/1039.txt\", \"a\");\n\n    if (logf)\n    {\n        fprintf(logf, \"---- OS_DeleteAllObjects ENTRY ----\\n\");\n        fflush(logf);\n    }\n\n    /*\n     * Note - this is done in a loop because some objects depend on other objects\n     * and you will not be able to delete the object until the ref count becomes zero.\n     */\n    TryCount = 0;\n    while (true)\n    {\n        ObjectCount = 0;\n        ++TryCount;\n\n        if (logf)\n        {\n            fprintf(logf, \"Iteration start: TryCount=%lu, initial ObjectCount=%lu\\n\",\n                    (unsigned long)TryCount, (unsigned long)ObjectCount);\n            fflush(logf);\n        }\n\n        /* Delete timers and tasks first, as they could be actively using other object types  */\n        if (logf)\n        {\n            fprintf(logf, \"Calling OS_ForEachObjectOfType: OS_OBJECT_TYPE_OS_TIMECB\\n\");\n            fflush(logf);\n        }\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMECB, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        if (logf)\n        {\n            fprintf(logf, \"After OS_OBJECT_TYPE_OS_TIMECB: ObjectCount=%lu\\n\", (unsigned long)ObjectCount);\n            fflush(logf);\n        }\n\n        if (logf)\n        {\n            fprintf(logf, \"Calling OS_ForEachObjectOfType: OS_OBJECT_TYPE_OS_TIMEBASE\\n\");\n            fflush(logf);\n        }\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMEBASE, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        if (logf)\n        {\n            fprintf(logf, \"After OS_OBJECT_TYPE_OS_TIMEBASE: ObjectCount=%lu\\n\", (unsigned long)ObjectCount);\n            fflush(logf);\n        }\n\n        if (logf)\n        {\n            fprintf(logf, \"Calling OS_ForEachObjectOfType: OS_OBJECT_TYPE_OS_TASK\\n\");\n            fflush(logf);\n        }\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TASK, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        if (logf)\n        {\n            fprintf(logf, \"After OS_OBJECT_TYPE_OS_TASK: ObjectCount=%lu\\n\", (unsigned long)ObjectCount);\n            fflush(logf);\n        }\n\n        /* Then try to delete all other remaining objects of any type */\n        if (logf)\n        {\n            fprintf(logf, \"Calling OS_ForEachObject: delete remaining objects\\n\");\n            fflush(logf);\n        }\n        OS_ForEachObject(OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        if (logf)\n        {\n            fprintf(logf, \"After OS_ForEachObject: ObjectCount=%lu\\n\", (unsigned long)ObjectCount);\n            fflush(logf);\n        }\n\n        if (ObjectCount == 0 || TryCount > 4)\n        {\n            if (logf)\n            {\n                fprintf(logf, \"Breaking loop: ObjectCount=%lu, TryCount=%lu\\n\",\n                        (unsigned long)ObjectCount, (unsigned long)TryCount);\n                fprintf(logf, \"---- OS_DeleteAllObjects EXIT ----\\n\\n\");\n                fflush(logf);\n                fclose(logf);\n            }\n            break;\n        }\n\n        if (logf)\n        {\n            fprintf(logf, \"Objects remain; delaying before retry: ObjectCount=%lu, TryCount=%lu\\n\",\n                    (unsigned long)ObjectCount, (unsigned long)TryCount);\n            fflush(logf);\n        }\n        OS_TaskDelay(5);\n    }\n}\n"
}