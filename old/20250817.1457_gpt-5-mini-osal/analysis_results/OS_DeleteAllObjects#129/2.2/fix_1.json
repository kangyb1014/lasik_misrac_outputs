{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\ntypedef unsigned int uint32;\ntypedef void (*OS_ObjectCleanupFunc_t)(void *obj, void *arg);\nextern void OS_ForEachObjectOfType(int type, int creator, OS_ObjectCleanupFunc_t func, void *arg);\nextern void OS_ForEachObject(int creator, OS_ObjectCleanupFunc_t func, void *arg);\nextern void OS_TaskDelay(unsigned int ticks);\nstatic void OS_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1034.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If the file cannot be opened, avoid failing the application; just return. */\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid OS_DeleteAllObjects(void)\n{\n    uint32 ObjectCount;\n    uint32 TryCount;\n\n    OS_LogProbe(\"OS_DeleteAllObjects: enter\");\n\n    /*\n     * Note - this is done in a loop because some objects depend on other objects\n     * and you will not be able to delete the object until the ref count becomes zero.\n     */\n    TryCount = 0;\n    while (true)\n    {\n        ObjectCount = 0;\n        ++TryCount;\n\n        OS_LogProbe(\"OS_DeleteAllObjects: iteration start TryCount=%u ObjectCount(initial)=%u\", TryCount, ObjectCount);\n\n        /* Delete timers and tasks first, as they could be actively using other object types  */\n        OS_LogProbe(\"OS_DeleteAllObjects: calling OS_ForEachObjectOfType for OS_OBJECT_TYPE_OS_TIMECB (TryCount=%u)\", TryCount);\n        OS_ForEachObjectOfType(/*OS_OBJECT_TYPE_OS_TIMECB*/ 0, /*OS_OBJECT_CREATOR_ANY*/ 0, /*cleanup*/ (OS_ObjectCleanupFunc_t)0, &ObjectCount);\n        OS_LogProbe(\"OS_DeleteAllObjects: returned from OS_ForEachObjectOfType(OS_TIMECB) ObjectCount=%u\", ObjectCount);\n\n        OS_LogProbe(\"OS_DeleteAllObjects: calling OS_ForEachObjectOfType for OS_OBJECT_TYPE_OS_TIMEBASE (TryCount=%u)\", TryCount);\n        OS_ForEachObjectOfType(/*OS_OBJECT_TYPE_OS_TIMEBASE*/ 1, /*OS_OBJECT_CREATOR_ANY*/ 0, /*cleanup*/ (OS_ObjectCleanupFunc_t)0, &ObjectCount);\n        OS_LogProbe(\"OS_DeleteAllObjects: returned from OS_ForEachObjectOfType(OS_TIMEBASE) ObjectCount=%u\", ObjectCount);\n\n        OS_LogProbe(\"OS_DeleteAllObjects: calling OS_ForEachObjectOfType for OS_OBJECT_TYPE_OS_TASK (TryCount=%u)\", TryCount);\n        OS_ForEachObjectOfType(/*OS_OBJECT_TYPE_OS_TASK*/ 2, /*OS_OBJECT_CREATOR_ANY*/ 0, /*cleanup*/ (OS_ObjectCleanupFunc_t)0, &ObjectCount);\n        OS_LogProbe(\"OS_DeleteAllObjects: returned from OS_ForEachObjectOfType(OS_TASK) ObjectCount=%u\", ObjectCount);\n\n        /* Then try to delete all other remaining objects of any type */\n        OS_LogProbe(\"OS_DeleteAllObjects: calling OS_ForEachObject (TryCount=%u)\", TryCount);\n        OS_ForEachObject(/*OS_OBJECT_CREATOR_ANY*/ 0, /*cleanup*/ (OS_ObjectCleanupFunc_t)0, &ObjectCount);\n        OS_LogProbe(\"OS_DeleteAllObjects: returned from OS_ForEachObject ObjectCount=%u\", ObjectCount);\n\n        if (ObjectCount == 0 || TryCount > 4)\n        {\n            OS_LogProbe(\"OS_DeleteAllObjects: breaking out of loop (TryCount=%u ObjectCount=%u)\", TryCount, ObjectCount);\n            break;\n        }\n\n        OS_LogProbe(\"OS_DeleteAllObjects: delaying before next try (TryCount=%u)\", TryCount);\n        OS_TaskDelay(5);\n    }\n\n    OS_LogProbe(\"OS_DeleteAllObjects: exit\");\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpgucu_zc5/src/src/os/shared/src/osapi-common.c:366:13: error: conflicting types for 'OS_ForEachObjectOfType'; have 'void(int,  int,  void (*)(void *, void *), void *)'\n  366 | extern void OS_ForEachObjectOfType(int type, int creator, OS_ObjectCleanupFunc_t func, void *arg);\n      |             ^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmpgucu_zc5/src/src/os/shared/inc/os-shared-idmap.h:29,\n                 from /tmp/tmpgucu_zc5/src/src/os/shared/src/osapi-common.c:56:\n/tmp/tmpgucu_zc5/src/src/os/inc/osapi-idmap.h:273:6: note: previous declaration of 'OS_ForEachObjectOfType' with type 'void(osal_objtype_t,  osal_id_t,  void (*)(osal_id_t,  void *), void *)' {aka 'void(unsigned int,  unsigned int,  void (*)(unsigned int,  void *), void *)'}\n  273 | void OS_ForEachObjectOfType(osal_objtype_t objtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n      |      ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgucu_zc5/src/src/os/shared/src/osapi-common.c:367:13: error: conflicting types for 'OS_ForEachObject'; have 'void(int,  void (*)(void *, void *), void *)'\n  367 | extern void OS_ForEachObject(int creator, OS_ObjectCleanupFunc_t func, void *arg);\n      |             ^~~~~~~~~~~~~~~~\nIn file included from /tmp/tmpgucu_zc5/src/src/os/shared/inc/os-shared-idmap.h:29,\n                 from /tmp/tmpgucu_zc5/src/src/os/shared/src/osapi-common.c:56:\n/tmp/tmpgucu_zc5/src/src/os/inc/osapi-idmap.h:258:6: note: previous declaration of 'OS_ForEachObject' with type 'void(osal_id_t,  void (*)(osal_id_t,  void *), void *)' {aka 'void(unsigned int,  void (*)(unsigned int,  void *), void *)'}\n  258 | void OS_ForEachObject(osal_id_t creator_id, OS_ArgCallback_t callback_ptr, void *callback_arg);\n      |      ^~~~~~~~~~~~~~~~\n/tmp/tmpgucu_zc5/src/src/os/shared/src/osapi-common.c:368:13: error: conflicting types for 'OS_TaskDelay'; have 'void(unsigned int)'\n  368 | extern void OS_TaskDelay(unsigned int ticks);\n      |             ^~~~~~~~~~~~\nIn file included from /tmp/tmpgucu_zc5/src/src/os/shared/inc/os-shared-task.h:29,\n                 from /tmp/tmpgucu_zc5/src/src/os/shared/src/osapi-common.c:63:\n/tmp/tmpgucu_zc5/src/src/os/inc/osapi-task.h:167:7: note: previous declaration of 'OS_TaskDelay' with type 'int32(uint32)' {aka 'int(unsigned int)'}\n  167 | int32 OS_TaskDelay(uint32 millisecond);\n      |       ^~~~~~~~~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:104: CMakeFiles/osal.dir/src/os/shared/src/osapi-common.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_DeleteAllObjects as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static void OS_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1034.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If the file cannot be opened, avoid failing the application; just return. */\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid OS_DeleteAllObjects(void)\n{\n    uint32 ObjectCount;\n    uint32 TryCount;\n\n    OS_LogProbe(\"OS_DeleteAllObjects: enter\");\n\n    /*\n     * Note - this is done in a loop because some objects depend on other objects\n     * and you will not be able to delete the object until the ref count becomes zero.\n     */\n    TryCount = 0;\n    while (true)\n    {\n        ObjectCount = 0;\n        ++TryCount;\n\n        OS_LogProbe(\"OS_DeleteAllObjects: iteration start TryCount=%u ObjectCount(initial)=%u\", TryCount, ObjectCount);\n\n        /* Delete timers and tasks first, as they could be actively using other object types  */\n        OS_LogProbe(\"OS_DeleteAllObjects: calling OS_ForEachObjectOfType for OS_OBJECT_TYPE_OS_TIMECB (TryCount=%u)\", TryCount);\n        /* Use the project-defined callback type (OS_ArgCallback_t) and pass NULL callback */\n        OS_ForEachObjectOfType(/*OS_OBJECT_TYPE_OS_TIMECB*/ 0, /*OS_OBJECT_CREATOR_ANY*/ 0, /*cleanup*/ (OS_ArgCallback_t)0, &ObjectCount);\n        OS_LogProbe(\"OS_DeleteAllObjects: returned from OS_ForEachObjectOfType(OS_TIMECB) ObjectCount=%u\", ObjectCount);\n\n        OS_LogProbe(\"OS_DeleteAllObjects: calling OS_ForEachObjectOfType for OS_OBJECT_TYPE_OS_TIMEBASE (TryCount=%u)\", TryCount);\n        OS_ForEachObjectOfType(/*OS_OBJECT_TYPE_OS_TIMEBASE*/ 1, /*OS_OBJECT_CREATOR_ANY*/ 0, /*cleanup*/ (OS_ArgCallback_t)0, &ObjectCount);\n        OS_LogProbe(\"OS_DeleteAllObjects: returned from OS_ForEachObjectOfType(OS_TIMEBASE) ObjectCount=%u\", ObjectCount);\n\n        OS_LogProbe(\"OS_DeleteAllObjects: calling OS_ForEachObjectOfType for OS_OBJECT_TYPE_OS_TASK (TryCount=%u)\", TryCount);\n        OS_ForEachObjectOfType(/*OS_OBJECT_TYPE_OS_TASK*/ 2, /*OS_OBJECT_CREATOR_ANY*/ 0, /*cleanup*/ (OS_ArgCallback_t)0, &ObjectCount);\n        OS_LogProbe(\"OS_DeleteAllObjects: returned from OS_ForEachObjectOfType(OS_TASK) ObjectCount=%u\", ObjectCount);\n\n        /* Then try to delete all other remaining objects of any type */\n        OS_LogProbe(\"OS_DeleteAllObjects: calling OS_ForEachObject (TryCount=%u)\", TryCount);\n        OS_ForEachObject(/*OS_OBJECT_CREATOR_ANY*/ 0, /*cleanup*/ (OS_ArgCallback_t)0, &ObjectCount);\n        OS_LogProbe(\"OS_DeleteAllObjects: returned from OS_ForEachObject ObjectCount=%u\", ObjectCount);\n\n        if (ObjectCount == 0 || TryCount > 4)\n        {\n            OS_LogProbe(\"OS_DeleteAllObjects: breaking out of loop (TryCount=%u ObjectCount=%u)\", TryCount, ObjectCount);\n            break;\n        }\n\n        OS_LogProbe(\"OS_DeleteAllObjects: delaying before next try (TryCount=%u)\", TryCount);\n        OS_TaskDelay(5);\n    }\n\n    OS_LogProbe(\"OS_DeleteAllObjects: exit\");\n}\n",
  "explanation": "I removed the locally declared prototypes and the custom cleanup-function typedef that conflicted with the project's existing declarations. Instead of casting to the removed type, the code now uses the project-defined OS_ArgCallback_t for the callback casts. This eliminates the conflicting declarations for OS_ForEachObjectOfType, OS_ForEachObject, and OS_TaskDelay while preserving the original OS_DeleteAllObjects logic and behavior."
}