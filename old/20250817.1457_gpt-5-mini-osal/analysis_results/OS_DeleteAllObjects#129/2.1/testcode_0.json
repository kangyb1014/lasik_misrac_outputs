{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe code can become unreachable if the user callback does not return. In OS_ObjectIdIteratorProcessEntry the code unlocks the global lock, calls func(...), then re-locks. In the provided callbacks (OS_CleanUpObject) one case calls OS_TaskDelete(object_id). If this deletes the currently executing task (or otherwise does not return, e.g. calls a non-returning API, exit, longjmp to another context, etc.), the subsequent OS_Lock_Global(&iter->token) will never be executed on that execution path. This makes that statement effectively unreachable in that scenario, violating MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DeleteAllObjects code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1033.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DeleteAllObjects as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DeleteAllObjects:\n```c\nvoid OS_DeleteAllObjects(void)\n{\n    uint32 ObjectCount;\n    uint32 TryCount;\n\n    /*\n     * Note - this is done in a loop because some objects depend on other objects\n     * and you will not be able to delete the object until the ref count becomes zero.\n     */\n    TryCount = 0;\n    while (true)\n    {\n        ObjectCount = 0;\n        ++TryCount;\n\n        /* Delete timers and tasks first, as they could be actively using other object types  */\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMECB, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMEBASE, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TASK, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n\n        /* Then try to delete all other remaining objects of any type */\n        OS_ForEachObject(OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n\n        if (ObjectCount == 0 || TryCount > 4)\n        {\n            break;\n        }\n        OS_TaskDelay(5);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_DeleteAllObjects code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n/* Minimal typedefs to allow this unit to compile as a standalone test file */\ntypedef uint32_t uint32;\n\n/* Minimal placeholder constants to preserve call-site semantics in this test file. */\nstatic const int OS_OBJECT_TYPE_OS_TIMECB = 1;\nstatic const int OS_OBJECT_TYPE_OS_TIMEBASE = 2;\nstatic const int OS_OBJECT_TYPE_OS_TASK = 3;\nstatic const int OS_OBJECT_CREATOR_ANY = 0;\n\n/*\n * Declarations of external OS functions used by OS_DeleteAllObjects.\n * These are declared so this file compiles standalone. In the real\n * system these would be provided by the OS implementation.\n */\nvoid OS_ForEachObjectOfType(int object_type, int creator, void (*func)(void *, void *), void *arg);\nvoid OS_ForEachObject(int creator, void (*func)(void *, void *), void *arg);\nvoid OS_TaskDelay(uint32 ticks);\nvoid OS_CleanUpObject(void *object, void *arg);\n\n/*\n * Probe helper: append a log line to /tmp/logs/1033.txt and flush. Keep it\n * small to avoid changing original logic/flow. This function is re-entrant\n * enough for the use here (no locking) \u2014 if the system deletes the current\n * task during a callback the absence of subsequent log lines is the evidence.\n */\nstatic void OS_DeleteAllObjects_Log(const char *msg, uint32 a, uint32 b)\n{\n    FILE *f = fopen(\"/tmp/logs/1033.txt\", \"a\");\n    if (f)\n    {\n        /* print up to two numeric parameters for additional state info */\n        if (a == (uint32)-1 && b == (uint32)-1)\n        {\n            fprintf(f, \"%s\\n\", msg);\n        }\n        else if (b == (uint32)-1)\n        {\n            fprintf(f, \"%s: %u\\n\", msg, (unsigned)a);\n        }\n        else\n        {\n            fprintf(f, \"%s: %u, %u\\n\", msg, (unsigned)a, (unsigned)b);\n        }\n        fflush(f);\n        fclose(f);\n    }\n}\n\n/*\n * Modified OS_DeleteAllObjects with logging probes inserted. The original\n * logic and call order are preserved; the probes log before and after\n * each ForEach call so that if a callback does not return the absence of\n * the \"returned\" log is visible and can be used as evidence of the\n * described unreachable-code scenario.\n */\nvoid OS_DeleteAllObjects(void)\n{\n    uint32 ObjectCount;\n    uint32 TryCount;\n\n    /* Entry log */\n    OS_DeleteAllObjects_Log(\"OS_DeleteAllObjects: entry\", (uint32)-1, (uint32)-1);\n\n    /*\n     * Note - this is done in a loop because some objects depend on other objects\n     * and you will not be able to delete the object until the ref count becomes zero.\n     */\n    TryCount = 0;\n    while (true)\n    {\n        ObjectCount = 0;\n        ++TryCount;\n\n        OS_DeleteAllObjects_Log(\"Loop start\", TryCount, (uint32)-1);\n\n        /* Delete timers and tasks first, as they could be actively using other object types  */\n        OS_DeleteAllObjects_Log(\"Before OS_ForEachObjectOfType(TIMECB)\", ObjectCount, TryCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMECB, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_DeleteAllObjects_Log(\"After OS_ForEachObjectOfType(TIMECB)\", ObjectCount, TryCount);\n\n        OS_DeleteAllObjects_Log(\"Before OS_ForEachObjectOfType(TIMEBASE)\", ObjectCount, TryCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TIMEBASE, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_DeleteAllObjects_Log(\"After OS_ForEachObjectOfType(TIMEBASE)\", ObjectCount, TryCount);\n\n        OS_DeleteAllObjects_Log(\"Before OS_ForEachObjectOfType(TASK)\", ObjectCount, TryCount);\n        OS_ForEachObjectOfType(OS_OBJECT_TYPE_OS_TASK, OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_DeleteAllObjects_Log(\"After OS_ForEachObjectOfType(TASK)\", ObjectCount, TryCount);\n\n        /* Then try to delete all other remaining objects of any type */\n        OS_DeleteAllObjects_Log(\"Before OS_ForEachObject(ANY)\", ObjectCount, TryCount);\n        OS_ForEachObject(OS_OBJECT_CREATOR_ANY, OS_CleanUpObject, &ObjectCount);\n        OS_DeleteAllObjects_Log(\"After OS_ForEachObject(ANY)\", ObjectCount, TryCount);\n\n        OS_DeleteAllObjects_Log(\"Post-iter ObjectCount\", ObjectCount, TryCount);\n\n        if (ObjectCount == 0 || TryCount > 4)\n        {\n            OS_DeleteAllObjects_Log(\"Break condition met\", ObjectCount, TryCount);\n            break;\n        }\n        OS_DeleteAllObjects_Log(\"Delaying before next try\", (uint32)5, TryCount);\n        OS_TaskDelay(5);\n    }\n\n    OS_DeleteAllObjects_Log(\"OS_DeleteAllObjects: exit\", (uint32)-1, (uint32)-1);\n}\n"
}