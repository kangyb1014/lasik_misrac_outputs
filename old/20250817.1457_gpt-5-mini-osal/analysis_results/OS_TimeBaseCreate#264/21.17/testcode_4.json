{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. OS_CHECK_APINAME(timebase_name) expands to a string-length/validation macro (OS_CHECK_STRING) whose implementation is not shown but will necessarily use C string handling functions (e.g. strlen/strnlen/strncpy) to validate the name. If the caller supplies timebase_name that is not NUL-terminated within the accessible object bounds (for example: char name[8] filled without a '\\0', or a pointer to a non-string buffer shorter than OS_MAX_API_NAME), a call such as strlen inside the check will scan past the end of that object and thus access beyond the bounds. Similarly, the subsequent OS_OBJECT_INIT uses strncpy(..., sizeof(namefield)-1) without an explicit NUL write which can further lead to out-of-bounds reads of the source if it is not NUL-terminated within the copied length. Therefore Rule 21.17 can be violated in these scenarios.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2119.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseCreate:\n```c\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n     ** Check Parameters\n     */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        timebase->external_sync = external_sync;\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        return_code = OS_TimeBaseCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseCreate code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helper - appends control flow/state info to /tmp/logs/2119.txt */\nstatic void OS_TimeBaseCreate_Log(const char *stage,\n                                  const void *timer_id_ptr,\n                                  const void *timebase_name_ptr,\n                                  const void *external_sync_ptr,\n                                  int return_code,\n                                  int objtype)\n{\n    FILE *f = fopen(\"/tmp/logs/2119.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only; don't alter program flow on failure */\n    }\n\n    fprintf(f, \"[OS_TimeBaseCreate] stage=%s\\n\", stage);\n    fprintf(f, \"  timer_id_ptr=%p\\n\", timer_id_ptr);\n    fprintf(f, \"  timebase_name_ptr=%p\\n\", timebase_name_ptr);\n    fprintf(f, \"  external_sync_ptr=%p\\n\", external_sync_ptr);\n    fprintf(f, \"  objtype=%d\\n\", objtype);\n    fprintf(f, \"  return_code=%d\\n\", return_code);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and raw pointers only. Do NOT read from timebase_name to avoid creating\n     * additional out-of-bounds/string accesses. This log is intended to capture the\n     * control flow and pointer state that can be used by external testers. */\n    OS_TimeBaseCreate_Log(\"entry\", (const void *)timer_id, (const void *)timebase_name, (const void *)external_sync, -1, -1);\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n     ** Check Parameters\n     */\n    OS_CHECK_POINTER(timer_id);\n\n    /* Log after pointer check (timer_id validated); still do NOT access timebase_name contents */\n    OS_TimeBaseCreate_Log(\"after_check_pointer\", (const void *)timer_id, (const void *)timebase_name, (const void *)external_sync, -1, -1);\n\n    OS_CHECK_APINAME(timebase_name);\n\n    /* Log after API name check macro returns. Note: the macro itself may perform string operations\n     * which are the subject of the reported violation. We only record that control returned here. */\n    OS_TimeBaseCreate_Log(\"after_check_apiname\", (const void *)timer_id, (const void *)timebase_name, (const void *)external_sync, -1, -1);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n\n    /* Log the objtype discovered */\n    OS_TimeBaseCreate_Log(\"after_objtype_check\", (const void *)timer_id, (const void *)timebase_name, (const void *)external_sync, -1, (int)objtype);\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimeBaseCreate_Log(\"incorrect_obj_state\", (const void *)timer_id, (const void *)timebase_name, (const void *)external_sync, (int)OS_ERR_INCORRECT_OBJ_STATE, (int)objtype);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n\n    /* Log allocation result and token address (log token's address; do not attempt to print token contents) */\n    OS_TimeBaseCreate_Log(\"after_allocate_new\", (const void *)timer_id, (const void *)timebase_name, (const void *)external_sync, (int)return_code, (int)objtype);\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        /* Log that initialization was performed (still not reading the name contents) */\n        OS_TimeBaseCreate_Log(\"after_object_init\", (const void *)timer_id, (const void *)timebase_name, (const void *)external_sync, (int)return_code, (int)objtype);\n\n        timebase->external_sync = external_sync;\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        return_code = OS_TimeBaseCreate_Impl(&token);\n\n        /* Log after OS-specific implementation returns */\n        OS_TimeBaseCreate_Log(\"after_impl\", (const void *)timer_id, (const void *)timebase_name, (const void *)external_sync, (int)return_code, (int)objtype);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n\n        /* Final state log before returning */\n        OS_TimeBaseCreate_Log(\"before_return\", (const void *)timer_id, (const void *)timebase_name, (const void *)external_sync, (int)return_code, (int)objtype);\n    }\n    else\n    {\n        /* Log that allocation failed and we are returning early */\n        OS_TimeBaseCreate_Log(\"alloc_failed_return\", (const void *)timer_id, (const void *)timebase_name, (const void *)external_sync, (int)return_code, (int)objtype);\n    }\n\n    return return_code;\n}\n"
}