{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdAllocateNew the const-qualified pointer 'name' (const char *) is cast to a plain void* in the call: return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token); This discards the const qualifier (casts away const), violating MISRA C 2023 Rule 8.13. For compliance the called API should accept a const void * (or the const removed safely via a non-const copy) so the const qualification is preserved.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2115.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseCreate:\n```c\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n     ** Check Parameters\n     */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        timebase->external_sync = external_sync;\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        return_code = OS_TimeBaseCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseCreate code.\n",
  "test_code": "#include <stdio.h>\n\nstatic void OS_TimeBaseCreate_Log(const osal_id_t *timer_id,\n                                  const char *timebase_name,\n                                  OS_TimerSync_t external_sync,\n                                  osal_objtype_t objtype,\n                                  int32 stage_code,\n                                  const char *stage_desc)\n{\n    FILE *f = fopen(\"/tmp/logs/2115.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Do not disturb main logic if logging fails */\n    }\n\n    /* Safely print the name (may be NULL) */\n    const char *name_to_print = (timebase_name != NULL) ? timebase_name : \"(null)\";\n\n    fprintf(f, \"OS_TimeBaseCreate - %s:\\n\", stage_desc);\n    fprintf(f, \"  timer_id ptr = %p\\n\", (const void *)timer_id);\n    fprintf(f, \"  timebase_name ptr = %p\\n\", (const void *)timebase_name);\n    fprintf(f, \"  timebase_name str = '%s'\\n\", name_to_print);\n    fprintf(f, \"  external_sync ptr = %p\\n\", (const void *)external_sync);\n    fprintf(f, \"  objtype = %u\\n\", (unsigned)objtype);\n    fprintf(f, \"  stage_code = %ld\\n\", (long)stage_code);\n    fprintf(f, \"\\n\");\n\n    fclose(f);\n}\n\nint32 OS_TimeBaseCreate(osal_id_t *timer_id, const char *timebase_name, OS_TimerSync_t external_sync)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Specifying a NULL sync function means the timebase is not externally synchronized.\n     * In this case an appropriate OS timer will be used to generate the simulated timer tick.\n     */\n\n    /*\n     ** Check Parameters\n     */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n\n    /* Log state after context check */\n    OS_TimeBaseCreate_Log(timer_id, timebase_name, external_sync, objtype, 0, \"after context check\");\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        /* Log the incorrect state return */\n        OS_TimeBaseCreate_Log(timer_id, timebase_name, external_sync, objtype, (int32)OS_ERR_INCORRECT_OBJ_STATE, \"incorrect object state\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    /* Log before calling OS_ObjectIdAllocateNew so we can trace the parameter that may be cast away later */\n    OS_TimeBaseCreate_Log(timer_id, timebase_name, external_sync, objtype, 0, \"before OS_ObjectIdAllocateNew\");\n\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, &token);\n\n    /* Log the result of allocation attempt and token state (token printed as opaque pointer if possible) */\n    OS_TimeBaseCreate_Log(timer_id, timebase_name, external_sync, objtype, return_code, \"after OS_ObjectIdAllocateNew\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, timebase, timebase_name, timebase_name);\n\n        /* Log after initialization and before setting sync/accuracy */\n        OS_TimeBaseCreate_Log(timer_id, timebase_name, external_sync, objtype, 0, \"after OS_OBJECT_INIT\");\n\n        timebase->external_sync = external_sync;\n        if (external_sync == NULL)\n        {\n            timebase->accuracy_usec = OS_SharedGlobalVars.MicroSecPerTick;\n        }\n        else\n        {\n            timebase->accuracy_usec = 0;\n        }\n\n        /* Log the chosen accuracy and external_sync state */\n        OS_TimeBaseCreate_Log(timer_id, timebase_name, external_sync, objtype, (int32)timebase->accuracy_usec, \"after setting accuracy/external_sync\");\n\n        /* Now call the OS-specific implementation.  This reads info from the timer table. */\n        OS_TimeBaseCreate_Log(timer_id, timebase_name, external_sync, objtype, 0, \"before OS_TimeBaseCreate_Impl\");\n        return_code = OS_TimeBaseCreate_Impl(&token);\n        OS_TimeBaseCreate_Log(timer_id, timebase_name, external_sync, objtype, return_code, \"after OS_TimeBaseCreate_Impl\");\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, timer_id);\n\n        /* Final log before returning success/failure */\n        OS_TimeBaseCreate_Log(timer_id, timebase_name, external_sync, objtype, return_code, \"after OS_ObjectIdFinalizeNew\");\n    }\n\n    return return_code;\n}\n"
}