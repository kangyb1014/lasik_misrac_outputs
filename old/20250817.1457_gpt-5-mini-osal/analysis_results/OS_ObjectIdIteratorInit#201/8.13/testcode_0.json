{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment stores the address of OS_common_table into iter->base which (in typical designs) is used only for read-only iteration. If iter->base is declared as a pointer to a non-const element type (e.g. OS_common_record_t *base) while the iterator only needs to read the table, this violates MISRA C 2023 Rule 8.13 because the pointer should be to a const-qualified type (const OS_common_record_t *). Note: if iter->base is intentionally used to modify table entries later, then a non-const pointer is required and there is no violation. Without the declarations of iter->base and OS_common_table we cannot be certain; the rule is violated in the common case where iter->base is non-const but only read-access is needed.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorInit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1611.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorInit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorInit:\n```c\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    return OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorInit code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append logs to a file for later inspection. */\nstatic void OS_Probe_LogIterState(const char *stage, OS_ObjectMatchFunc_t matchfunc, void *matcharg,\n                                  osal_objtype_t objtype, OS_object_iter_t *iter, int32 transaction_ret)\n{\n    FILE *fp = fopen(\"/tmp/logs/1611.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    fprintf(fp, \"=== OS_ObjectIdIteratorInit: %s ===\\n\", stage);\n    fprintf(fp, \"matchfunc=%p\\n\", (void *)matchfunc);\n    fprintf(fp, \"matcharg=%p\\n\", matcharg);\n    fprintf(fp, \"objtype=%u\\n\", (unsigned int)objtype);\n    fprintf(fp, \"iter_ptr=%p\\n\", (void *)iter);\n\n    if (iter != NULL)\n    {\n        /* Print fields if available; use %p for pointer fields and unsigned for numeric. */\n        fprintf(fp, \"iter->match=%p\\n\", (void *)iter->match);\n        fprintf(fp, \"iter->arg=%p\\n\", iter->arg);\n        fprintf(fp, \"iter->limit=%u\\n\", (unsigned int)iter->limit);\n        fprintf(fp, \"iter->base=%p\\n\", (void *)iter->base);\n        fprintf(fp, \"iter->token_addr=%p\\n\", (void *)&iter->token);\n    }\n\n    fprintf(fp, \"transaction_return=%d\\n\", (int)transaction_ret);\n    fprintf(fp, \"==============================\\n\\n\");\n    fclose(fp);\n}\n\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    int32 ret;\n\n    /* Log incoming parameters (before modification) */\n    OS_Probe_LogIterState(\"entry\", matchfunc, matcharg, objtype, iter, -1);\n\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n\n    /* Capture limit and base index in locals first so we can log them reliably. */\n    iter->limit = OS_GetMaxForObjectType(objtype);\n\n    /* Log the computed limit before setting base */\n    OS_Probe_LogIterState(\"after_limit\", matchfunc, matcharg, objtype, iter, -1);\n\n    /* Compute base pointer and assign as in the original code */\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    /* Log state after base assignment, before transaction */\n    OS_Probe_LogIterState(\"after_base_assignment\", matchfunc, matcharg, objtype, iter, -1);\n\n    ret = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n\n    /* Log final state including the return value from the transaction init */\n    OS_Probe_LogIterState(\"exit\", matchfunc, matcharg, objtype, iter, ret);\n\n    return ret;\n}\n"
}