{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorInit:\n```c\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    return OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\niter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The assignment stores the address of OS_common_table into iter->base which (in typical designs) is used only for read-only iteration. If iter->base is declared as a pointer to a non-const element type (e.g. OS_common_record_t *base) while the iterator only needs to read the table, this violates MISRA C 2023 Rule 8.13 because the pointer should be to a const-qualified type (const OS_common_record_t *). Note: if iter->base is intentionally used to modify table entries later, then a non-const pointer is required and there is no violation. Without the declarations of iter->base and OS_common_table we cannot be certain; the rule is violated in the common case where iter->base is non-const but only read-access is needed."
}