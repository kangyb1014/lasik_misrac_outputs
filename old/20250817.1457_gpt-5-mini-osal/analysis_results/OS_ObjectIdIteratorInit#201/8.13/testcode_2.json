{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'void *matcharg' is not const-qualified. In the shown function it is only stored in iter->arg and not dereferenced/modified, so it should be declared as 'const void *matcharg' (and the iterator field iter->arg made 'const void *') to indicate read-only use. As written the non-const pointer violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorInit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1611.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorInit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorInit:\n```c\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    return OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorInit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Minimal type definitions and dummy helpers to make this unit self-contained and\n   compilable. In the real system these would be provided elsewhere. */\n\ntypedef int32_t int32;\ntypedef uint32_t uint32;\ntypedef int osal_objtype_t;\ntypedef void (*OS_ObjectMatchFunc_t)(void);\n\n/* Iterator structure as used by the function under test */\ntypedef struct\n{\n    OS_ObjectMatchFunc_t match;\n    void *arg;            /* NOTE: intentionally non-const to reflect the reported code */\n    uint32 limit;\n    void *base;\n    int token;\n} OS_object_iter_t;\n\n/* Dummy common table so the address computation is valid */\nchar OS_common_table[256];\n\n/* Provide a constant value (not a macro) for the lock mode used in the call */\nconst int OS_LOCK_MODE_GLOBAL = 0;\n\n/* Minimal stubs for externally-provided functions so this translation unit compiles\n   and the logging can be exercised. Behavior is intentionally simple. */\nuint32 OS_GetMaxForObjectType(osal_objtype_t objtype)\n{\n    /* return a predictable value based on objtype */\n    return (uint32)(objtype + 10u);\n}\n\nint OS_GetBaseForObjectType(osal_objtype_t objtype)\n{\n    /* return an index into OS_common_table; keep it bounded */\n    return (int)(objtype % (sizeof(OS_common_table) / sizeof(OS_common_table[0])));\n}\n\nint32 OS_ObjectIdTransactionInit(int lock_mode, osal_objtype_t objtype, int *token)\n{\n    /* simple stub: set a token and return success (0) */\n    (void)lock_mode;\n    (void)objtype;\n    if (token != NULL)\n    {\n        *token = 0xDEADBEEF & 0x7FFFFFFF; /* some non-zero token value */\n    }\n    return 0;\n}\n\n/* Probe logging function: append control-flow and state information to the log file */\nstatic void os_probe_log_iterator_state(const char *stage, OS_ObjectMatchFunc_t matchfunc,\n                                        void *matcharg, osal_objtype_t objtype,\n                                        const OS_object_iter_t *iter, int32 rv)\n{\n    FILE *f = fopen(\"/tmp/logs/1611.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, avoid altering program behavior; silently return */\n        return;\n    }\n\n    fprintf(f, \"--- OS_ObjectIdIteratorInit probe: %s\\n\", stage);\n    fprintf(f, \" matchfunc pointer: %p\\n\", (void *)matchfunc);\n    fprintf(f, \" matchfunc is %s\\n\", (matchfunc == NULL) ? \"NULL\" : \"non-NULL\");\n    fprintf(f, \" matcharg pointer: %p\\n\", matcharg);\n    fprintf(f, \" objtype value: %d\\n\", (int)objtype);\n\n    if (iter != NULL)\n    {\n        fprintf(f, \" iter->match pointer: %p\\n\", (void *)iter->match);\n        fprintf(f, \" iter->arg pointer: %p\\n\", iter->arg);\n        fprintf(f, \" iter->limit value: %u\\n\", (unsigned)iter->limit);\n        fprintf(f, \" iter->base pointer: %p\\n\", iter->base);\n        fprintf(f, \" iter->token (pre/posted): %d\\n\", iter->token);\n    }\n    else\n    {\n        fprintf(f, \" iter pointer: NULL\\n\");\n    }\n\n    fprintf(f, \" return value from transaction init: %d\\n\", (int)rv);\n    fprintf(f, \"--- end probe\\n\\n\");\n    fclose(f);\n}\n\n/* The original function with logging probes inserted. The original logic is preserved.\n   The parameter 'matcharg' remains non-const to mirror the reported violation scenario. */\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    /* Log entry state before assignments */\n    os_probe_log_iterator_state(\"entry (before assignments)\", matchfunc, matcharg, objtype, iter, -1);\n\n    /* Preserve the original assignments exactly as in the target code */\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    /* Log state after assignments, before transaction init */\n    os_probe_log_iterator_state(\"after assignments (before transaction)\", matchfunc, matcharg, objtype, iter, -1);\n\n    /* Call the transaction init and capture its return value so it can be logged */\n    int32 rv = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n\n    /* Log final state including the return value and token set by transaction init */\n    os_probe_log_iterator_state(\"after transaction init (final)\", matchfunc, matcharg, objtype, iter, rv);\n\n    return rv;\n}\n"
}