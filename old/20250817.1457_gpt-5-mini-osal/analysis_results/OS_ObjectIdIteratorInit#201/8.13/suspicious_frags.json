{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorInit:\n```c\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    return OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];",
    "iter->arg   = matcharg;",
    "void *matcharg"
  ],
  "explanation": "The listed fragments involve pointers to data that are assigned from or to external objects and may be better qualified as pointing to const-qualified types (e.g. matcharg could be const void *, and iter->base may point to read-only table entries). Other fragments do not need investigation under MISRA C 2023 Rule 8.13: \"iter->match = matchfunc;\" is a function-pointer assignment (function types are not const-qualified in the same way as object types), \"iter->limit = OS_GetMaxForObjectType(objtype);\" deals with integer values (not pointers), and the return statement/transaction-init call do not perform pointer-to-object assignments relevant to pointer const-qualification. Also the parameter OS_object_iter_t *iter must be non-const because the function writes into the pointed object, so it is not a candidate for const-qualification under this rule."
}