{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter matcharg is declared as void * (non-const) and is stored into iter->arg. If the iterator and/or match callback treat the pointed-to data as read-only, the pointer should be const-qualified (e.g. const void *matcharg and iter->arg declared const void *). As written, the code allows/modelling a modifiable target when a const-qualified pointer would be appropriate, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorInit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1611.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorInit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorInit:\n```c\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    return OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorInit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/*\n * Probe/log helper: append control-flow and state information to /tmp/logs/1611.txt\n * This helper intentionally avoids converting function pointers to data pointers;\n * it only reports whether the match function is NULL or not to avoid undefined behavior.\n */\nstatic void OS_ObjectIdIteratorInit_Log(const char *stage,\n                                        void *matcharg,\n                                        int objtype_val,\n                                        const void *iter_ptr,\n                                        const void *arg_ptr,\n                                        unsigned long limit_val,\n                                        const void *base_ptr,\n                                        int rv)\n{\n    FILE *f = fopen(\"/tmp/logs/1611.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_ObjectIdIteratorInit %s: matcharg=%p, objtype=%d, iter=%p, iter->arg=%p, limit=%lu, base=%p, return=%d\\n\",\n                stage,\n                matcharg,\n                objtype_val,\n                iter_ptr,\n                arg_ptr,\n                limit_val,\n                base_ptr,\n                rv);\n        fclose(f);\n    }\n}\n\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    int32 rv;\n\n    /* Preserve original logic: assign iterator fields first */\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    /* Log state just after initializing iterator fields (before transaction init) */\n    OS_ObjectIdIteratorInit_Log(\"after_init\",\n                                matcharg,\n                                (int)objtype,\n                                (const void *)iter,\n                                (const void *)iter->arg,\n                                (unsigned long)iter->limit,\n                                (const void *)iter->base,\n                                0);\n\n    /* Call original transaction init and capture return value */\n    rv = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n\n    /* Log state after transaction init including the return value */\n    OS_ObjectIdIteratorInit_Log(\"after_transaction\",\n                                matcharg,\n                                (int)objtype,\n                                (const void *)iter,\n                                (const void *)iter->arg,\n                                (unsigned long)iter->limit,\n                                (const void *)iter->base,\n                                (int)rv);\n\n    return rv;\n}\n"
}