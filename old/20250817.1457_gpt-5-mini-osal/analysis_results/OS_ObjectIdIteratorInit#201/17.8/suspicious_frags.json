{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorInit:\n```c\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    return OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No fragments require investigation for MISRA C 2023 Rule 17.8. The rule forbids modifying a function parameter itself (reassigning the pointer or altering a by-value parameter); it allows modifying the object referred to by a pointer parameter. In this function:\n- iter is a pointer parameter but is not reassigned; only members of *iter (iter->match, iter->arg, iter->limit, iter->base, and iter->token via its address) are written \u2014 modifying the pointed-to object is permitted by the rule.\n- matchfunc and matcharg are copied into iter->match and iter->arg but are not modified themselves.\n- objtype is a by-value parameter used in calls and expressions but is not assigned to or changed.\n- The call to OS_ObjectIdTransactionInit(&iter->token) passes the address of a member; it does not modify any parameter variable of this function.\nTherefore there are no violations of Rule 17.8 in the provided code fragment."
}