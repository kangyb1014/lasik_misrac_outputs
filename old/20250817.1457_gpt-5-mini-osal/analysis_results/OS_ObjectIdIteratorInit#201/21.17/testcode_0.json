{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to memset(token, 0, sizeof(*token)) assumes 'token' points to a valid OS_object_token_t object but the function does not validate the pointer. If a caller invokes OS_ObjectIdTransactionInit(..., token) with token == NULL (or with a pointer to a smaller/invalid buffer), memset will write sizeof(OS_object_token_t) bytes via a NULL/invalid pointer, resulting in an access beyond the bounds of the referenced object (UB). Example violating call: OS_ObjectIdTransactionInit(OS_LOCK_MODE_NONE, some_type, NULL);\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorInit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1615.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorInit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorInit:\n```c\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    return OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorInit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    /* Probe: log entry and input pointers/state */\n    FILE *f = fopen(\"/tmp/logs/1615.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Note: cast function pointer to uintptr_t for printing; this is debug-only logging */\n        fprintf(f, \"ENTRY: OS_ObjectIdIteratorInit(matchfunc=%\" PRIxPTR \", matcharg=%p, objtype=%d, iter=%p)\\n\",\n                (uintptr_t)matchfunc, matcharg, (int)objtype, (void *)iter);\n        fclose(f);\n    }\n\n    /* Preserve original logic (perform the same assignments in the same order) */\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    /* Probe: log the iterator state and the address of the token field we will pass on */\n    f = fopen(\"/tmp/logs/1615.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"STATE: iter=%p match=%\" PRIxPTR \" arg=%p limit=%u base=%p token_addr=%p\\n\",\n                (void *)iter,\n                (uintptr_t)iter->match,\n                iter->arg,\n                (unsigned)iter->limit,\n                (void *)iter->base,\n                (void *)&iter->token);\n        fclose(f);\n    }\n\n    /* Call the original transaction init and capture its return for logging */\n    int32 ret = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n\n    f = fopen(\"/tmp/logs/1615.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"EXIT: OS_ObjectIdTransactionInit returned %ld for iter=%p token_addr=%p\\n\",\n                (long)ret,\n                (void *)iter,\n                (void *)&iter->token);\n        fclose(f);\n    }\n\n    return ret;\n}\n"
}