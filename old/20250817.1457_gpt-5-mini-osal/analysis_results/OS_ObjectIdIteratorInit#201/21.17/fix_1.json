{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    /* Probe: log entry and input pointers/state */\n    FILE *f = fopen(\"/tmp/logs/1615.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Note: cast function pointer to uintptr_t for printing; this is debug-only logging */\n        fprintf(f, \"ENTRY: OS_ObjectIdIteratorInit(matchfunc=%\" PRIxPTR \", matcharg=%p, objtype=%d, iter=%p)\\n\",\n                (uintptr_t)matchfunc, matcharg, (int)objtype, (void *)iter);\n        fclose(f);\n    }\n\n    /* Preserve original logic (perform the same assignments in the same order) */\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    /* Probe: log the iterator state and the address of the token field we will pass on */\n    f = fopen(\"/tmp/logs/1615.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"STATE: iter=%p match=%\" PRIxPTR \" arg=%p limit=%u base=%p token_addr=%p\\n\",\n                (void *)iter,\n                (uintptr_t)iter->match,\n                iter->arg,\n                (unsigned)iter->limit,\n                (void *)iter->base,\n                (void *)&iter->token);\n        fclose(f);\n    }\n\n    /* Call the original transaction init and capture its return for logging */\n    int32 ret = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n\n    f = fopen(\"/tmp/logs/1615.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"EXIT: OS_ObjectIdTransactionInit returned %ld for iter=%p token_addr=%p\\n\",\n                (long)ret,\n                (void *)iter,\n                (void *)&iter->token);\n        fclose(f);\n    }\n\n    return ret;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmp19piernj/src/src/os/shared/src/osapi-idmap.c:1:\n/tmp/tmp19piernj/src/src/os/shared/src/osapi-idmap.c: In function 'OS_ObjectIdIteratorInit':\n/tmp/tmp19piernj/src/src/os/shared/src/osapi-idmap.c:1250:65: error: expected ')' before 'PRIxPTR'\n 1250 |         fprintf(f, \"ENTRY: OS_ObjectIdIteratorInit(matchfunc=%\" PRIxPTR \", matcharg=%p, objtype=%d, iter=%p)\\n\",\n      |                                                                 ^~~~~~~\n/tmp/tmp19piernj/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmp19piernj/src/src/os/shared/src/osapi-idmap.c:60:1: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   59 | #include \"os-shared-task.h\"\n  +++ |+#include <inttypes.h>\n   60 | \nIn file included from /tmp/tmp19piernj/src/src/os/shared/src/osapi-idmap.c:1:\n/tmp/tmp19piernj/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmp19piernj/src/src/os/shared/src/osapi-idmap.c:1250:9: note: in expansion of macro 'fprintf'\n 1250 |         fprintf(f, \"ENTRY: OS_ObjectIdIteratorInit(matchfunc=%\" PRIxPTR \", matcharg=%p, objtype=%d, iter=%p)\\n\",\n      |         ^~~~~~~\n/tmp/tmp19piernj/src/src/os/shared/src/osapi-idmap.c:1265:45: error: expected ')' before 'PRIxPTR'\n 1265 |         fprintf(f, \"STATE: iter=%p match=%\" PRIxPTR \" arg=%p limit=%u base=%p token_addr=%p\\n\",\n      |                                             ^~~~~~~\n/tmp/tmp19piernj/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmp19piernj/src/src/os/shared/src/osapi-idmap.c:1265:45: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n 1265 |         fprintf(f, \"STATE: iter=%p match=%\" PRIxPTR \" arg=%p limit=%u base=%p token_addr=%p\\n\",\n      |                                             ^~~~~~~\n/tmp/tmp19piernj/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmp19piernj/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmp19piernj/src/src/os/shared/src/osapi-idmap.c:1265:9: note: in expansion of macro 'fprintf'\n 1265 |         fprintf(f, \"STATE: iter=%p match=%\" PRIxPTR \" arg=%p limit=%u base=%p token_addr=%p\\n\",\n      |         ^~~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-idmap.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-idmap.dir/__/__/os/shared/src/osapi-idmap.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3787: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-idmap.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorInit as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <inttypes.h>\n\nint32 OS_ObjectIdIteratorInit(OS_ObjectMatchFunc_t matchfunc, void *matcharg, osal_objtype_t objtype,\n                              OS_object_iter_t *iter)\n{\n    /* Probe: log entry and input pointers/state */\n    FILE *f = fopen(\"/tmp/logs/1615.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Note: cast function pointer to uintptr_t for printing; this is debug-only logging */\n        fprintf(f, \"ENTRY: OS_ObjectIdIteratorInit(matchfunc=%\" PRIxPTR \", matcharg=%p, objtype=%d, iter=%p)\\n\",\n                (uintptr_t)matchfunc, matcharg, (int)objtype, (void *)iter);\n        fclose(f);\n    }\n\n    /* Preserve original logic (perform the same assignments in the same order) */\n    iter->match = matchfunc;\n    iter->arg   = matcharg;\n    iter->limit = OS_GetMaxForObjectType(objtype);\n    iter->base  = &OS_common_table[OS_GetBaseForObjectType(objtype)];\n\n    /* Probe: log the iterator state and the address of the token field we will pass on */\n    f = fopen(\"/tmp/logs/1615.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"STATE: iter=%p match=%\" PRIxPTR \" arg=%p limit=%u base=%p token_addr=%p\\n\",\n                (void *)iter,\n                (uintptr_t)iter->match,\n                iter->arg,\n                (unsigned)iter->limit,\n                (void *)iter->base,\n                (void *)&iter->token);\n        fclose(f);\n    }\n\n    /* Call the original transaction init and capture its return for logging */\n    int32 ret = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, objtype, &iter->token);\n\n    f = fopen(\"/tmp/logs/1615.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"EXIT: OS_ObjectIdTransactionInit returned %ld for iter=%p token_addr=%p\\n\",\n                (long)ret,\n                (void *)iter,\n                (void *)&iter->token);\n        fclose(f);\n    }\n\n    return ret;\n}\n",
  "explanation": "The compilation errors were caused by use of the PRIxPTR macro in string literal concatenation without including <inttypes.h>. That macro is defined in <inttypes.h> (as a string literal like \"lx\"), so I added #include <inttypes.h> at the top. No other logic was changed \u2014 the function's assignments and logging remain the same."
}