{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn UT_Stub_GetReturnValuePtr the local variable ReturnPtr is assigned NULL immediately after declaration (ReturnPtr = NULL;). All subsequent control paths either call UtAssert_Abort(\"Return buffer invalid\") when StubPtr == NULL (which does not return) or assign ReturnPtr = StubPtr->Data.Buff.BasePtr before ReturnPtr is used/returned. Therefore the initial assignment is executed but has no effect and could be removed without changing program behaviour \u2014 it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_NetworkGetHostName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1786.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_NetworkGetHostName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_NetworkGetHostName:\n```c\nint32 OS_NetworkGetHostName(char *host_name, size_t name_len)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(host_name);\n    OS_CHECK_SIZE(name_len);\n\n    /* delegate to low-level API */\n    return_code = OS_NetworkGetHostName_Impl(host_name, name_len);\n    if (return_code != OS_SUCCESS)\n    {\n        /* return an empty string on failure, just in case */\n        host_name[0] = 0;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_NetworkGetHostName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/*\n * Probe helper: append a formatted log line to /tmp/logs/1786.txt\n * Keeps logging code isolated and does not change the behavior of\n * OS_NetworkGetHostName other than producing diagnostic output.\n */\nstatic void Probe_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1786.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_NetworkGetHostName(char *host_name, size_t name_len)\n{\n    int32 return_code;\n\n    /* Log entry and input state */\n    Probe_Log(\"ENTER: OS_NetworkGetHostName host_name=%p name_len=%zu\", (void *)host_name, name_len);\n\n    /* Check parameters (original logic preserved) */\n    OS_CHECK_POINTER(host_name);\n    OS_CHECK_SIZE(name_len);\n\n    /* Log that parameter checks passed */\n    Probe_Log(\"PARAMS_OK: host_name=%p name_len=%zu\", (void *)host_name, name_len);\n\n    /* delegate to low-level API */\n    return_code = OS_NetworkGetHostName_Impl(host_name, name_len);\n\n    /* Log return from implementation with state observed */\n    Probe_Log(\"IMPL_RETURN: return_code=%ld host_name_ptr=%p\", (long)return_code, (void *)host_name);\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log the reason for applying the failure behavior */\n        Probe_Log(\"FAIL_PATH: return_code=%ld - zeroing host_name[0] (if writable)\", (long)return_code);\n\n        /* record the previous first byte (if safe to sample) */\n        if (host_name != NULL && name_len > 0)\n        {\n            /* Capture previous byte for diagnostics */\n            Probe_Log(\"BEFORE_ZERO: host_name[0]=0x%02x\", (unsigned char)host_name[0]);\n        }\n\n        /* return an empty string on failure, just in case */\n        host_name[0] = 0;\n\n        /* Log resulting state */\n        Probe_Log(\"AFTER_ZERO: host_name[0]=0x%02x\", (unsigned char)host_name[0]);\n    }\n    else\n    {\n        /* Log successful path */\n        Probe_Log(\"SUCCESS_PATH: return_code=%ld host_name=%p name_len=%zu\", (long)return_code, (void *)host_name, name_len);\n\n        if (host_name != NULL && name_len > 0)\n        {\n            /* Log a snapshot of the first character for diagnostics */\n            Probe_Log(\"SUCCESS_SNAPSHOT: host_name[0]=0x%02x\", (unsigned char)host_name[0]);\n        }\n    }\n\n    Probe_Log(\"EXIT: OS_NetworkGetHostName return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}