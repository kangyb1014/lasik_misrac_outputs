{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls MsgLen = strlen(OutputMessage) and then OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen). If OutputMessage is NULL or not NUL-terminated within the accessible storage, strlen(OutputMessage) will read beyond the bounds of the object (and possibly dereference NULL), violating Rule 21.17. For example, if the caller supplies a char buffer without a terminating '\\0', strlen will scan past the buffer end and cause out-of-bounds access before the subsequent write using MsgLen.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ConsoleOutput_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/39.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_ConsoleOutput_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleOutput_Impl:\n```c\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_ConsoleOutput_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <errno.h>\n#include <stddef.h>\n\n/* Probe helper: append formatted logs to /tmp/logs/39.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/39.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not alter program behavior. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n    size_t iter = 0;\n\n    /* Log entry: pointer and requested length. Do not dereference Str. */\n    probe_log(\"ENTER: Str=%p DataLen=%zu\", (const void *)Str, DataLen);\n\n    while (DataLen > 0)\n    {\n        /* Log loop iteration and current state. */\n        probe_log(\"ITER %zu: Str=%p DataLen=%zu\", iter, (const void *)Str, DataLen);\n\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n\n        /* Log result of write and errno for diagnostics. */\n        probe_log(\"write returned %zd errno=%d\", WriteLen, errno);\n\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. Log and exit loop. */\n            probe_log(\"write failed or no progress, breaking loop (WriteLen=%zd)\", WriteLen);\n            break;\n        }\n\n        /* Advance pointer and remaining length as original logic. */\n        Str += (size_t)WriteLen;\n        DataLen -= (size_t)WriteLen;\n\n        iter++;\n        /* Safety cap on iterations for logging to avoid infinite loops in pathological cases. */\n        if (iter > 1000000)\n        {\n            probe_log(\"iteration cap reached (%zu), aborting loop\", iter);\n            break;\n        }\n    }\n\n    /* Log exit state. */\n    probe_log(\"EXIT: remaining DataLen=%zu iterations=%zu\", DataLen, iter);\n}\n"
}