{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'Str += WriteLen;' modifies the pointer parameter Str (increments the pointer). MISRA C 2023 Rule 17.8 forbids modifying function parameters \u2014 the object pointed to may be modified but the pointer itself shall not be. This therefore violates R17.8. To comply, use a local pointer (e.g. 'const char *p = Str;') and update p instead of Str.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ConsoleOutput_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/37.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_ConsoleOutput_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleOutput_Impl:\n```c\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_ConsoleOutput_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n\n/*\n * Probe function to record control flow and state to /tmp/logs/37.txt.\n * This function intentionally does not modify any of its pointer parameters.\n */\nstatic void OS_BSP_LogProbe(const char *stage, const char *Str, size_t DataLen, ssize_t WriteLen)\n{\n    /* Ensure log directory exists (ignore errors). */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    FILE *f = fopen(\"/tmp/logs/37.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log the stage, pointer value, lengths. Use %p for pointer values. */\n    fprintf(f, \"%s: Str=%p, DataLen=%zu, WriteLen=%zd\\n\",\n            stage, (const void *)Str, DataLen, WriteLen);\n    fclose(f);\n}\n\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    /* Log entry state */\n    OS_BSP_LogProbe(\"ENTRY\", Str, DataLen, -1);\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n\n        /* Log the result of the write call */\n        OS_BSP_LogProbe(\"AFTER_WRITE\", Str, DataLen, WriteLen);\n\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            OS_BSP_LogProbe(\"WRITE_FAILED_OR_ZERO\", Str, DataLen, WriteLen);\n            break;\n        }\n\n        /* Log state before modifying the pointer parameter (to capture the violation scenario) */\n        OS_BSP_LogProbe(\"BEFORE_PTR_INC\", Str, DataLen, WriteLen);\n\n        /* This line deliberately modifies the function parameter 'Str' as in the original code.\n           MISRA C 2023 Rule 17.8 flags this as a violation (the pointer parameter itself is modified).\n           The probes above and below capture the pointer value and remaining data so the violation can be reproduced. */\n        Str += WriteLen;\n\n        /* Log state after the pointer was incremented. Record the expected remaining DataLen as DataLen - WriteLen. */\n        OS_BSP_LogProbe(\"AFTER_PTR_INC\", Str, DataLen - (size_t)WriteLen, WriteLen);\n\n        DataLen -= WriteLen;\n    }\n\n    OS_BSP_LogProbe(\"EXIT\", Str, DataLen, 0);\n}\n"
}