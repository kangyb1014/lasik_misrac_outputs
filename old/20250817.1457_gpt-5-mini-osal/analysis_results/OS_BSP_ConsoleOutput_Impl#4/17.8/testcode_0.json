{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nWithin OS_BSP_ConsoleOutput_Impl the parameter DataLen (declared as size_t DataLen) is modified by the statement 'DataLen -= WriteLen;'. This directly violates MISRA C 2023 Rule 17.8 (a function parameter shall not be modified). Note: the function also modifies the pointer parameter Str via 'Str += WriteLen;', which likewise violates the rule's requirement that the pointer itself shall not be modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ConsoleOutput_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/37.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_ConsoleOutput_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleOutput_Impl:\n```c\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_ConsoleOutput_Impl code.\n",
  "test_code": "#include <unistd.h>\n#include <sys/types.h>\n#include <stddef.h>\n#include <stdio.h>\n#include <time.h>\n\n/* Probe helper: append a single log entry to /tmp/logs/37.txt\n * Captures stage, pointer value, DataLen, WriteLen, and a short hex snippet\n * of the buffer (up to 16 bytes). Does not modify any caller parameters.\n */\nstatic void append_log(const char *stage, const char *Str, size_t DataLen, ssize_t WriteLen)\n{\n    FILE *f = fopen(\"/tmp/logs/37.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm) == NULL)\n    {\n        /* fall back if localtime_r fails */\n        fprintf(f, \"[time_unknown] %s: Str=%p DataLen=%zu WriteLen=%zd Snippet=\", stage, (const void *)Str, DataLen, WriteLen);\n    }\n    else\n    {\n        fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] %s: Str=%p DataLen=%zu WriteLen=%zd Snippet=\",\n                tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,\n                tm.tm_hour, tm.tm_min, tm.tm_sec,\n                stage, (const void *)Str, DataLen, WriteLen);\n    }\n\n    if (DataLen == 0 || Str == NULL)\n    {\n        fprintf(f, \"(empty)\\n\");\n    }\n    else\n    {\n        size_t n = (DataLen > 16u) ? 16u : DataLen;\n        for (size_t i = 0u; i < n; ++i)\n        {\n            fprintf(f, \"%02x\", (unsigned char)Str[i]);\n        }\n        if (DataLen > n)\n        {\n            fprintf(f, \"...\");\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fclose(f);\n}\n\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    /* Log entry state */\n    append_log(\"ENTRY\", Str, DataLen, -1);\n\n    while (DataLen > 0)\n    {\n        /* Log before attempting write */\n        append_log(\"BEFORE_WRITE\", Str, DataLen, -1);\n\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n\n        /* Log result of write attempt */\n        append_log(\"AFTER_WRITE\", Str, DataLen, WriteLen);\n\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            append_log(\"WRITE_FAILED_OR_ZERO\", Str, DataLen, WriteLen);\n            break;\n        }\n\n        Str += WriteLen;\n        DataLen -= WriteLen;\n\n        /* Log state after advancing pointer and reducing length */\n        append_log(\"ADVANCED\", Str, DataLen, WriteLen);\n    }\n\n    /* Log exit state */\n    append_log(\"EXIT\", Str, DataLen, 0);\n}\n"
}