{
  "user_message": "An agent A claimed that the following OS_BSP_ConsoleOutput_Impl code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of OS_BSP_ConsoleOutput_Impl.\n```c\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement 'Str += WriteLen;' modifies the pointer parameter Str (increments the pointer). MISRA C 2023 Rule 17.8 forbids modifying function parameters \u2014 the object pointed to may be modified but the pointer itself shall not be. This therefore violates R17.8. To comply, use a local pointer (e.g. 'const char *p = Str;') and update p instead of Str.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_BSP_LogProbe(const char *stage, const char *Str, size_t DataLen, ssize_t WriteLen)\n{\n    /* Ensure log directory exists (ignore errors). */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    FILE *f = fopen(\"/tmp/logs/37.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log the stage, pointer value, lengths. Use %p for pointer values. */\n    fprintf(f, \"%s: Str=%p, DataLen=%zu, WriteLen=%zd\\n\",\n            stage, (const void *)Str, DataLen, WriteLen);\n    fclose(f);\n}\n\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    /* Log entry state */\n    OS_BSP_LogProbe(\"ENTRY\", Str, DataLen, -1);\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n\n        /* Log the result of the write call */\n        OS_BSP_LogProbe(\"AFTER_WRITE\", Str, DataLen, WriteLen);\n\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            OS_BSP_LogProbe(\"WRITE_FAILED_OR_ZERO\", Str, DataLen, WriteLen);\n            break;\n        }\n\n        /* Log state before modifying the pointer parameter (to capture the violation scenario) */\n        OS_BSP_LogProbe(\"BEFORE_PTR_INC\", Str, DataLen, WriteLen);\n\n        /* This line deliberately modifies the function parameter 'Str' as in the original code.\n           MISRA C 2023 Rule 17.8 flags this as a violation (the pointer parameter itself is modified).\n           The probes above and below capture the pointer value and remaining data so the violation can be reproduced. */\n        Str += WriteLen;\n\n        /* Log state after the pointer was incremented. Record the expected remaining DataLen as DataLen - WriteLen. */\n        OS_BSP_LogProbe(\"AFTER_PTR_INC\", Str, DataLen - (size_t)WriteLen, WriteLen);\n\n        DataLen -= WriteLen;\n    }\n\n    OS_BSP_LogProbe(\"EXIT\", Str, DataLen, 0);\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nENTRY: Str=0x557533c41efb, DataLen=1, WriteLen=-1\nAFTER_WRITE: Str=0x557533c41efb, DataLen=1, WriteLen=1\nBEFORE_PTR_INC: Str=0x557533c41efb, DataLen=1, WriteLen=1\nAFTER_PTR_INC: Str=0x557533c41efc, DataLen=0, WriteLen=1\nEXIT: Str=0x557533c41efc, DataLen=0, WriteLen=0\nENTRY: Str=0x7ffd5d5f54b0, DataLen=7, WriteLen=-1\nAFTER_WRITE: Str=0x7ffd5d5f54b0, DataLen=7, WriteLen=7\nBEFORE_PTR_INC: Str=0x7ffd5d5f54b0, DataLen=7, WriteLen=7\nAFTER_PTR_INC: Str=0x7ffd5d5f54b7, DataLen=0, WriteLen=7\nEXIT: Str=0x7ffd5d5f54b7, DataLen=0, WriteLen=0\nENTRY: Str=0x557533c41f03, DataLen=1, WriteLen=-1\nAFTER_WRITE: Str=0x557533c41f03, DataLen=1, WriteLen=1\nBEFORE_PTR_INC: Str=0x557533c41f03, DataLen=1, WriteLen=1\nAFTER_PTR_INC: Str=0x557533c41f04, DataLen=0, WriteLen=1\nEXIT: Str=0x557533c41f04, DataLen=0, WriteLen=0\nENTRY: Str=0x557533c41ee9, DataLen=9, WriteLen=-1\nAFTER_WRITE: Str=0x557533c41ee9, DataLen=9, WriteLen=9\nBEFORE_PTR_INC: Str=0x557533c41ee9, DataLen=9, WriteLen=9\nAFTER_PTR_INC: Str=0x557533c41ef2, DataLen=0, WriteLen=9\nEXIT: Str=0x557533c41ef2, DataLen=0, WriteLen=0\nENTRY: Str=0x557533c41efb, DataLen=1, WriteLen=-1\nAFTER_WRITE: Str=0x557533c41efb, DataLen=1, WriteLen=1\nBEFORE_PTR_INC: Str=0x557533c41efb, DataLen=1, WriteLen=1\nAFTER_PTR_INC: Str=0x557533c41efc, DataLen=0, WriteLen=1\nEXIT: Str=0x557533c41efc, DataLen=0, WriteLen=0\nENTRY: Str=0x557533c41efb, DataLen=1, WriteLen=-1\nAFTER_WRITE: Str=0x557533c41efb, DataLen=1, WriteLen=1\nBEFORE_PTR_INC: Str=0x557533c41efb, DataLen=1, WriteLen=1\nAFTER_PTR_INC: Str=0x557533c41efc, DataLen=0, WriteLen=1\nEXIT: Str=0x557533c41efc, DataLen=0, WriteLen=0\nENTRY: Str=0x7ffd5d5f53f0, DataLen=7, WriteLen=-1\nAFTER_WRITE: Str=0x7ffd5d5f53f0, DataLen=7, WriteLen=7\nBEFORE_PTR_INC: Str=0x7ffd5d5f53f0, DataLen=7, WriteLen=7\nAFTER_PTR_INC: Str=0x7ffd5d5f53f7, DataLen=0, WriteLen=7\nEXIT: Str=0x7ffd5d5f53f7, DataLen=0, WriteLen=0\nENTRY: Str=0x557533c41f03, DataLen=1, WriteLen=-1\nAFTER_WRITE: Str=0x557533c41f03, DataLen=1, WriteLen=1\nBEFORE_PTR_INC: Str=0x557533c41f03, DataLen=1, WriteLen=1\nAFTER_PTR_INC: Str=0x557533c41f04, DataLen=0, WriteLen=1\nEXIT: Str=0x557533c41f04, DataLen=0, WriteLen=0\nENTRY: Str=0x7ffd5d5f5430, DataLen=8, WriteLen=-1\nAFTER_WRITE: Str=0x7ffd5d5f5430, DataLen=8, WriteLen=8\nBEFORE_PTR_INC: Str=0x7ffd5d5f5430, DataLen=8, WriteLen=8\nAFTER_PTR_INC: Str=0x7ffd5d5f5438, DataLen=0, WriteLen=8\nEXIT: Str=0x7ffd5d5f5438, DataLen=0, WriteLen=0\nENTRY: Str=0x557533c41efb, DataLen=1, WriteLen=-1\nAFTER_WRITE: Str=0x557533c41efb, DataLen=1, WriteLen=1\nBEFORE_PTR_INC: Str=0x557533c41efb, DataLen=1, WriteLen=1\nAFTER_PTR_INC: Str=0x557533c41efc, DataLen=0, WriteLen=1\nEXIT: Str=0x557533c41efc, DataLen=0, WriteLen=0\nENTRY: Str=0x7ffd5d5f5420, DataLen=7, WriteLen=-1\nAFTER_WRITE: Str=0x7ffd5d5f5420, DataLen=7, WriteLen=7\nBEFORE_PTR_INC: Str=0x7ffd5d5f5420, DataLen=7, WriteLen=7\nAFTER_PTR_INC: Str=0x7ffd5d5f5427, DataLen=0, WriteLen=7\nEXIT: Str=0x7ffd5d5f5427, DataLen=0, WriteLen=0\nENTRY: Str=0x557533c41f03, DataLen=1, WriteLen=-1\nAFTER_WRITE: Str=0x557533c41f03, DataLen=1, WriteLen=1\nBEFORE_PTR_INC: Str=0x557533c41f03, DataLen=1, WriteLen=1\nAFTER_PTR_INC: Str=0x557533c41f04, DataLen=0, WriteLen=1\nEXIT: Str=0x557533c41f04, DataLen=0, WriteLen=0\nENTRY: Str=0x557533c41878, DataLen=14, WriteLen=-1\nAFTER_WRITE: Str=0x557533c41878, DataLen=14, WriteLen=14\nBEFORE_PTR_INC: Str=0x557533c41878, DataLen=14, WriteLen=14\nAFTER_PTR_INC: Str=0x557533c41886, DataLen=0, WriteLen=14\nEXIT: Str=0x557533c41886, DataLen=0, WriteLen=0\nENTRY: Str=0x557533c41efb, DataLen=1, WriteLen=-1\nAFTER_WRITE: Str=0x557533c41efb, DataLen=1, WriteLen=1\nBEFORE_PTR_INC: Str=0x557533c41efb, DataLen=1, WriteLen=1\nAFTER_PTR_INC: Str=0x557533c41efc, DataLen=0, WriteLen=1\nEXIT: Str=0x557533c41efc, DataLen=0, WriteLen=0\nENTRY: Str=0x7ffd5d5f53c0, DataLen=7, WriteLen=-1\nAFTER_WRITE: Str=0x7ffd5d5f53c0, DataLen=7, WriteLen=7\nBEFORE_PTR_INC: Str=0x7ffd5d5f53c0, DataLen=7, WriteLen=7\nAFTER_PTR_INC: Str=0x7ffd5d5f53c7, DataLen=0, WriteLen=7\nEXIT: Str=0x7ffd5d5f53c7, DataLen=0, WriteLen=0\nENTRY: Str=0x557533c41f03, DataLen=1, WriteLen=-1\nAFTER_WRITE: Str=0x5\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 R17.8 forbids modifying function parameters (the pointer object may be used to modify the pointee, but the pointer itself must not be changed). The statement Str += WriteLen; modifies the pointer parameter Str and therefore violates R17.8. (Additionally, the code also modifies the non\u2011pointer parameter DataLen with DataLen -= WriteLen;, which likewise violates the same rule.) The proper fix is to copy parameters to local variables (e.g. const char *p = Str; size_t remaining = DataLen;) and update those locals instead."
}