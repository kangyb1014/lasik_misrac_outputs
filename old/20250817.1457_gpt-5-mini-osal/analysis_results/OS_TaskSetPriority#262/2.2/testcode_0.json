{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token); is performed unconditionally but the variable 'impl' is only used inside the following if (POSIX_GlobalVars.EnableTaskPriorities) block. If POSIX_GlobalVars.EnableTaskPriorities is false at runtime, the assignment (and the macro evaluation) is executed but has no effect on program behaviour; removing it would not change program behaviour in that case. This constitutes dead code. A simple fix is to move the assignment into the EnableTaskPriorities true branch so it is only executed when the value is actually used.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskSetPriority code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2098.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskSetPriority as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskSetPriority:\n```c\nint32 OS_TaskSetPriority(osal_id_t task_id, osal_priority_t new_priority)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskSetPriority_Impl(&token, new_priority);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Use the abstracted priority, not the OS one */\n            /* Change the priority in the table as well */\n            task->priority = new_priority;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskSetPriority code.\n",
  "test_code": "#include <stdio.h>\n\nint32 OS_TaskSetPriority(osal_id_t task_id, osal_priority_t new_priority)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Log entry with inputs */\n    {\n        FILE *f = fopen(\"/tmp/logs/2098.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"OS_TaskSetPriority ENTRY: task_id=%lu new_priority=%ld\\n\",\n                    (unsigned long)task_id, (long)new_priority);\n            fclose(f);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    {\n        FILE *f = fopen(\"/tmp/logs/2098.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"OS_TaskSetPriority: OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n            fclose(f);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log task pointer and current priority (if available) */\n        {\n            FILE *f = fopen(\"/tmp/logs/2098.txt\", \"a\");\n            if (f)\n            {\n                if (task != NULL)\n                {\n                    fprintf(f, \"OS_TaskSetPriority: task ptr=%p current_priority=%ld\\n\",\n                            (void *)task, (long)task->priority);\n                }\n                else\n                {\n                    fprintf(f, \"OS_TaskSetPriority: task ptr=NULL\\n\");\n                }\n                fclose(f);\n            }\n        }\n\n        return_code = OS_TaskSetPriority_Impl(&token, new_priority);\n\n        /* Log result of implementation call */\n        {\n            FILE *f = fopen(\"/tmp/logs/2098.txt\", \"a\");\n            if (f)\n            {\n                fprintf(f, \"OS_TaskSetPriority: OS_TaskSetPriority_Impl returned %ld\\n\", (long)return_code);\n                fclose(f);\n            }\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Use the abstracted priority, not the OS one */\n            /* Change the priority in the table as well */\n\n            /* Log before change */\n            {\n                FILE *f = fopen(\"/tmp/logs/2098.txt\", \"a\");\n                if (f)\n                {\n                    fprintf(f, \"OS_TaskSetPriority: updating task priority from %ld to %ld\\n\",\n                            (long)(task ? task->priority : (osal_priority_t)0), (long)new_priority);\n                    fclose(f);\n                }\n            }\n\n            task->priority = new_priority;\n\n            /* Log after change */\n            {\n                FILE *f = fopen(\"/tmp/logs/2098.txt\", \"a\");\n                if (f)\n                {\n                    fprintf(f, \"OS_TaskSetPriority: updated task ptr=%p new_priority=%ld\\n\",\n                            (void *)task, (long)task->priority);\n                    fclose(f);\n                }\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log token release */\n        {\n            FILE *f = fopen(\"/tmp/logs/2098.txt\", \"a\");\n            if (f)\n            {\n                fprintf(f, \"OS_TaskSetPriority: token released\\n\");\n                fclose(f);\n            }\n        }\n    }\n\n    /* Log exit with return code */\n    {\n        FILE *f = fopen(\"/tmp/logs/2098.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"OS_TaskSetPriority EXIT: return_code=%ld\\n\", (long)return_code);\n            fclose(f);\n        }\n    }\n\n    return return_code;\n}\n"
}