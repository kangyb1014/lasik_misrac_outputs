{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) can read past object bounds if either pointer is NULL, points to a non-null-terminated buffer, or is dangling. For example, if UT_Stub_GetReturnValuePtr is invoked without a prior UT_Stub_RegisterReturnType (or RegisterReturnType was given a NULL or transient TypeName), StubPtr->Data.Buff.ContentTypeStr may be NULL or invalid; strcmp(TypeName, NULL) (or strcmp against a non-terminated/dangling string) will access memory beyond the referenced object (undefined behavior).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskSetPriority code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskSetPriority as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskSetPriority:\n```c\nint32 OS_TaskSetPriority(osal_id_t task_id, osal_priority_t new_priority)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskSetPriority_Impl(&token, new_priority);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Use the abstracted priority, not the OS one */\n            /* Change the priority in the table as well */\n            task->priority = new_priority;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskSetPriority code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe logging function: append control-flow/state information to a file. */\nstatic void OS_TaskSetPriority_Log(const char *msg,\n                                   const void *task_id_ptr,\n                                   const void *token_ptr,\n                                   const void *task_ptr,\n                                   long prior_priority,\n                                   long new_priority,\n                                   long return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2103.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, do not change program behavior. */\n        return;\n    }\n\n    fprintf(f, \"OS_TaskSetPriority: %s\\n\", msg);\n    if (task_id_ptr != NULL) fprintf(f, \"  task_id (addr) = %p\\n\", task_id_ptr);\n    if (token_ptr != NULL) fprintf(f, \"  token (addr) = %p\\n\", token_ptr);\n    if (task_ptr != NULL) fprintf(f, \"  task (addr) = %p\\n\", task_ptr);\n    fprintf(f, \"  prior_priority = %ld\\n\", prior_priority);\n    fprintf(f, \"  new_priority   = %ld\\n\", new_priority);\n    fprintf(f, \"  return_code    = %ld\\n\", return_code);\n    fprintf(f, \"----------------------------------------\\n\");\n\n    fclose(f);\n}\n\nint32 OS_TaskSetPriority(osal_id_t task_id, osal_priority_t new_priority)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Log entry with task_id address (if available) and requested priority. */\n    OS_TaskSetPriority_Log(\"entry\",\n                           (const void *)&task_id,\n                           NULL,\n                           NULL,\n                           -1, /* prior_priority unknown at entry */\n                           (long)new_priority,\n                           -1 /* return_code unknown at entry */);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log outcome of object id lookup. */\n    OS_TaskSetPriority_Log(\"after OS_ObjectIdGetById\",\n                           (const void *)&task_id,\n                           (const void *)&token,\n                           NULL,\n                           -1,\n                           (long)new_priority,\n                           (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log the task pointer and its current priority (only when token lookup succeeded). */\n        long prior_prio = 0;\n        if (task != NULL)\n        {\n            /* Accessing task->priority only when task pointer is non-NULL and lookup succeeded preserves original logic. */\n            prior_prio = (long)task->priority;\n        }\n\n        OS_TaskSetPriority_Log(\"before OS_TaskSetPriority_Impl\",\n                               (const void *)&task_id,\n                               (const void *)&token,\n                               (const void *)task,\n                               prior_prio,\n                               (long)new_priority,\n                               (long)return_code);\n\n        return_code = OS_TaskSetPriority_Impl(&token, new_priority);\n\n        /* Log the result of the implementation-specific priority set. */\n        OS_TaskSetPriority_Log(\"after OS_TaskSetPriority_Impl\",\n                               (const void *)&task_id,\n                               (const void *)&token,\n                               (const void *)task,\n                               prior_prio,\n                               (long)new_priority,\n                               (long)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Use the abstracted priority, not the OS one */\n            /* Change the priority in the table as well */\n            task->priority = new_priority;\n\n            OS_TaskSetPriority_Log(\"priority changed\",\n                                   (const void *)&task_id,\n                                   (const void *)&token,\n                                   (const void *)task,\n                                   prior_prio,\n                                   (long)new_priority,\n                                   (long)return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Final exit log. */\n    OS_TaskSetPriority_Log(\"exit\",\n                           (const void *)&task_id,\n                           NULL,\n                           NULL,\n                           -1,\n                           (long)new_priority,\n                           (long)return_code);\n\n    return return_code;\n}\n"
}