{
  "user_message": "An agent A claimed that the following OS_TaskSetPriority code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskSetPriority.\n```c\nint32 OS_TaskSetPriority(osal_id_t task_id, osal_priority_t new_priority)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskSetPriority_Impl(&token, new_priority);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Use the abstracted priority, not the OS one */\n            /* Change the priority in the table as well */\n            task->priority = new_priority;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Yes. The call strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) can read past object bounds if either pointer is NULL, points to a non-null-terminated buffer, or is dangling. For example, if UT_Stub_GetReturnValuePtr is invoked without a prior UT_Stub_RegisterReturnType (or RegisterReturnType was given a NULL or transient TypeName), StubPtr->Data.Buff.ContentTypeStr may be NULL or invalid; strcmp(TypeName, NULL) (or strcmp against a non-terminated/dangling string) will access memory beyond the referenced object (undefined behavior).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_TaskSetPriority_Log(const char *msg,\n                                   const void *task_id_ptr,\n                                   const void *token_ptr,\n                                   const void *task_ptr,\n                                   long prior_priority,\n                                   long new_priority,\n                                   long return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2103.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, do not change program behavior. */\n        return;\n    }\n\n    fprintf(f, \"OS_TaskSetPriority: %s\\n\", msg);\n    if (task_id_ptr != NULL) fprintf(f, \"  task_id (addr) = %p\\n\", task_id_ptr);\n    if (token_ptr != NULL) fprintf(f, \"  token (addr) = %p\\n\", token_ptr);\n    if (task_ptr != NULL) fprintf(f, \"  task (addr) = %p\\n\", task_ptr);\n    fprintf(f, \"  prior_priority = %ld\\n\", prior_priority);\n    fprintf(f, \"  new_priority   = %ld\\n\", new_priority);\n    fprintf(f, \"  return_code    = %ld\\n\", return_code);\n    fprintf(f, \"----------------------------------------\\n\");\n\n    fclose(f);\n}\n\nint32 OS_TaskSetPriority(osal_id_t task_id, osal_priority_t new_priority)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Log entry with task_id address (if available) and requested priority. */\n    OS_TaskSetPriority_Log(\"entry\",\n                           (const void *)&task_id,\n                           NULL,\n                           NULL,\n                           -1, /* prior_priority unknown at entry */\n                           (long)new_priority,\n                           -1 /* return_code unknown at entry */);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log outcome of object id lookup. */\n    OS_TaskSetPriority_Log(\"after OS_ObjectIdGetById\",\n                           (const void *)&task_id,\n                           (const void *)&token,\n                           NULL,\n                           -1,\n                           (long)new_priority,\n                           (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log the task pointer and its current priority (only when token lookup succeeded). */\n        long prior_prio = 0;\n        if (task != NULL)\n        {\n            /* Accessing task->priority only when task pointer is non-NULL and lookup succeeded preserves original logic. */\n            prior_prio = (long)task->priority;\n        }\n\n        OS_TaskSetPriority_Log(\"before OS_TaskSetPriority_Impl\",\n                               (const void *)&task_id,\n                               (const void *)&token,\n                               (const void *)task,\n                               prior_prio,\n                               (long)new_priority,\n                               (long)return_code);\n\n        return_code = OS_TaskSetPriority_Impl(&token, new_priority);\n\n        /* Log the result of the implementation-specific priority set. */\n        OS_TaskSetPriority_Log(\"after OS_TaskSetPriority_Impl\",\n                               (const void *)&task_id,\n                               (const void *)&token,\n                               (const void *)task,\n                               prior_prio,\n                               (long)new_priority,\n                               (long)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Use the abstracted priority, not the OS one */\n            /* Change the priority in the table as well */\n            task->priority = new_priority;\n\n            OS_TaskSetPriority_Log(\"priority changed\",\n                                   (const void *)&task_id,\n                                   (const void *)&token,\n                                   (const void *)task,\n                                   prior_prio,\n                                   (long)new_priority,\n                                   (long)return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Final exit log. */\n    OS_TaskSetPriority_Log(\"exit\",\n                           (const void *)&task_id,\n                           NULL,\n                           NULL,\n                           -1,\n                           (long)new_priority,\n                           (long)return_code);\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_TaskSetPriority: entry\n  task_id (addr) = 0x7fff7e9fe53c\n  prior_priority = -1\n  new_priority   = 100\n  return_code    = -1\n----------------------------------------\nOS_TaskSetPriority: after OS_ObjectIdGetById\n  task_id (addr) = 0x7fff7e9fe53c\n  token (addr) = 0x7fff7e9fe560\n  prior_priority = -1\n  new_priority   = 100\n  return_code    = -35\n----------------------------------------\nOS_TaskSetPriority: exit\n  task_id (addr) = 0x7fff7e9fe53c\n  prior_priority = -1\n  new_priority   = 100\n  return_code    = -35\n----------------------------------------\nOS_TaskSetPriority: entry\n  task_id (addr) = 0x7fff7e9fe53c\n  prior_priority = -1\n  new_priority   = 100\n  return_code    = -1\n----------------------------------------\nOS_TaskSetPriority: after OS_ObjectIdGetById\n  task_id (addr) = 0x7fff7e9fe53c\n  token (addr) = 0x7fff7e9fe560\n  prior_priority = -1\n  new_priority   = 100\n  return_code    = -35\n----------------------------------------\nOS_TaskSetPriority: exit\n  task_id (addr) = 0x7fff7e9fe53c\n  prior_priority = -1\n  new_priority   = 100\n  return_code    = -35\n----------------------------------------\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claimed violation concerns use of <string.h> functions (e.g. strcmp) reading past object bounds (MISRA C 2023 Rule 21.17). The provided OS_TaskSetPriority implementation contains no calls to any string.h functions: it only calls OS_ObjectIdGetById, OS_TaskSetPriority_Impl, OS_ObjectIdRelease and performs pointer access/assignment and fprintf/fopen logging in the modified test \u2014 none of which are string.h string-handling functions covered by Rule 21.17. The scenario described by agent A (strcmp(TypeName, StubPtr->...)) refers to entirely different code (UT_Stub_.../StubPtr) that is not present in the target OS_TaskSetPriority snippet. Therefore the reported violation of MISRA C 2023 Rule 21.17 for this OS_TaskSetPriority code is not correct."
}