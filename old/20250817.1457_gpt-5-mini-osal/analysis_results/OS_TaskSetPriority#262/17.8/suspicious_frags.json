{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_TaskSetPriority:\n```c\nint32 OS_TaskSetPriority(osal_id_t task_id, osal_priority_t new_priority)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskSetPriority_Impl(&token, new_priority);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Use the abstracted priority, not the OS one */\n            /* Change the priority in the table as well */\n            task->priority = new_priority;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_TaskSetPriority:\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n...\nint32 OS_TaskSetPriority_Impl(const OS_object_token_t *token, osal_priority_t new_priority)\n{\n    int os_priority;\n    int ret;\n\n    OS_impl_task_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    if (POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        /* Change OSAL priority into a priority that will work for this OS */\n        os_priority = OS_PriorityRemap(new_priority);\n\n        /*\n        ** Set priority\n        */\n        ret = pthread_setschedprio(impl->id, os_priority);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_setschedprio: Task ID = %lu, prio = %d, err = %s\\n\",\n                     OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), os_priority, strerror(ret));\n            return OS_ERROR;\n        }\n    }\n\n    return OS_SUCCESS;\n}\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_task_internal_record_t OS_task_table[LOCAL_NUM_OBJECTS]\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    char            task_name[OS_MAX_API_NAME];\n    size_t          stack_size;\n    osal_priority_t priority;\n    osal_task_entry entry_function_pointer;\n    osal_task_entry delete_hook_pointer;\n    void *          entry_arg;\n    osal_stackptr_t stack_pointer;\n} OS_task_internal_record_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no code fragments that modify a function parameter itself (which would violate MISRA C 2023 Rule 17.8). Specifically:\n\n- OS_TaskSetPriority(osal_id_t task_id, osal_priority_t new_priority): task_id and new_priority are passed by value and never assigned to inside the function. The write task->priority = new_priority modifies the table entry (the object referred to by a pointer), which is allowed; it does not modify the parameter new_priority.\n\n- OS_ObjectIdGetById(OS_object_token_t *token): this function assigns to members of *token (token->obj_idx, token->obj_id) which is permitted \u2014 it modifies the object referred to by the pointer parameter, not the pointer itself. The pointer parameter 'token' is not reassigned.\n\n- OS_ObjectIdRelease(OS_object_token_t *token): simply calls another function with the pointer; it does not reassign the pointer parameter.\n\n- OS_TaskSetPriority_Impl(const OS_object_token_t *token, osal_priority_t new_priority): token is a pointer to const data and is not reassigned; new_priority is not modified. The macro OS_OBJECT_TABLE_GET is used with expressions like *token or token (depending on call site) but the macro only takes the address of the provided token expression \u2014 taking the address is not a modification of the function parameter.\n\n- The OS_OBJECT_TABLE_GET macro expands to use &(...), which does not reassign or modify the original parameter; it only produces an address for indexing.\n\nTherefore, there are no instances in the provided code where a function parameter variable itself is modified (e.g., via assignment to the parameter or changing the pointer value). All observed modifications are to objects pointed to by pointer parameters or to local variables, which is allowed by the rule."
}