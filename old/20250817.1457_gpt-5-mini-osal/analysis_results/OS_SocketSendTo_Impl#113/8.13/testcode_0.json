{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nYes. The pointer 'impl' is only used for reading (impl = OS_OBJECT_TABLE_GET(...); then impl->fd is read for sendto) and the object is not modified in this function, so it should be declared with a pointer to const. Declaring it as 'const OS_impl_file_internal_record_t *impl;' would satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketSendTo_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/907.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketSendTo_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketSendTo_Impl:\n```c\nint32 OS_SocketSendTo_Impl(const OS_object_token_t *token, const void *buffer, size_t buflen,\n                           const OS_SockAddr_t *RemoteAddr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&RemoteAddr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    if (addrlen != RemoteAddr->ActualLength)\n    {\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    os_result = sendto(impl->fd, buffer, buflen, MSG_DONTWAIT, sa, addrlen);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"sendto: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return os_result;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketSendTo_Impl code.\n",
  "test_code": "int32 OS_SocketSendTo_Impl(const OS_object_token_t *token, const void *buffer, size_t buflen,\n                           const OS_SockAddr_t *RemoteAddr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Probe helper: log state before sendto */\n    static void probe_log_before(const OS_object_token_t *token_ptr,\n                                 const OS_impl_file_internal_record_t *impl_ptr,\n                                 const void *buf_ptr,\n                                 size_t buf_len,\n                                 const OS_SockAddr_t *remote_ptr,\n                                 int computed_addrlen)\n    {\n        FILE *f = fopen(\"/tmp/logs/907.txt\", \"a\");\n        if (f == NULL)\n        {\n            return;\n        }\n\n        /* Log control flow and relevant state. We avoid dereferencing token contents here\n         * because token type may vary; log the pointer instead. */\n        fprintf(f, \"ENTER OS_SocketSendTo_Impl\\n\");\n        fprintf(f, \" token_ptr=%p\\n\", (const void *)token_ptr);\n        fprintf(f, \" impl_ptr=%p\\n\", (const void *)impl_ptr);\n        if (impl_ptr != NULL)\n        {\n            fprintf(f, \" impl_fd=%d\\n\", impl_ptr->fd);\n        }\n        fprintf(f, \" buffer=%p buflen=%zu\\n\", buf_ptr, buf_len);\n        if (remote_ptr != NULL)\n        {\n            const struct sockaddr *log_sa = (const struct sockaddr *)&remote_ptr->AddrData;\n            fprintf(f, \" remote_ActualLength=%u sa_family=%d computed_addrlen=%d\\n\",\n                    (unsigned)remote_ptr->ActualLength, (int)log_sa->sa_family, computed_addrlen);\n        }\n\n        /* Record that, in this function, the impl pointer is only used for reading (no writes). */\n        fprintf(f, \" impl_used_for_read_only=1\\n\");\n        fclose(f);\n    }\n\n    /* Probe helper: log result after sendto */\n    static void probe_log_after(const OS_impl_file_internal_record_t *impl_ptr, int result)\n    {\n        FILE *f = fopen(\"/tmp/logs/907.txt\", \"a\");\n        if (f == NULL)\n        {\n            return;\n        }\n\n        fprintf(f, \"EXIT OS_SocketSendTo_Impl\\n\");\n        fprintf(f, \" impl_ptr=%p\\n\", (const void *)impl_ptr);\n        if (impl_ptr != NULL)\n        {\n            fprintf(f, \" impl_fd=%d\\n\", impl_ptr->fd);\n        }\n        fprintf(f, \" sendto_result=%d\\n\", result);\n        if (result < 0)\n        {\n            fprintf(f, \" sendto_errno=%d (%s)\\n\", errno, strerror(errno));\n        }\n        fclose(f);\n    }\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&RemoteAddr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    if (addrlen != RemoteAddr->ActualLength)\n    {\n        /* Log the mismatched address length before returning */\n        FILE *f = fopen(\"/tmp/logs/907.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_SocketSendTo_Impl: BAD_ADDRESS (addrlen=%d, RemoteAddr->ActualLength=%u)\\n\",\n                    (int)addrlen, (unsigned)RemoteAddr->ActualLength);\n            fclose(f);\n        }\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    /* Log state just before calling sendto */\n    probe_log_before(token, (const OS_impl_file_internal_record_t *)impl, buffer, buflen, RemoteAddr, (int)addrlen);\n\n    os_result = sendto(impl->fd, buffer, buflen, MSG_DONTWAIT, sa, addrlen);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"sendto: %s\\n\", strerror(errno));\n        /* Log the error result */\n        probe_log_after(impl, os_result);\n        return OS_ERROR;\n    }\n\n    /* Log successful result */\n    probe_log_after(impl, os_result);\n\n    return os_result;\n}\n"
}