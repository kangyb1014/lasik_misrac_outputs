{
  "user_message": "Target function code is:\n```c\nint32 OS_SocketSendTo_Impl(const OS_object_token_t *token, const void *buffer, size_t buflen,\n                           const OS_SockAddr_t *RemoteAddr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&RemoteAddr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    if (addrlen != RemoteAddr->ActualLength)\n    {\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    os_result = sendto(impl->fd, buffer, buflen, MSG_DONTWAIT, sa, addrlen);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"sendto: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return os_result;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'OS_SocketSendTo_Impl': {'callees': ['OS_ObjectIndexFromToken'], 'callers': ['OS_SocketSendTo']}, 'OS_ObjectIndexFromToken': {'callees': [], 'callers': ['OS_BinSemCreate_Impl', 'OS_BinSemDelete_Impl', 'OS_BinSemGive_Impl', 'OS_BinSemFlush_Impl', 'OS_GenericBinSemTake_Impl', 'OS_BinSemGetInfo_Impl', 'OS_ConsoleWakeup_Impl', 'OS_ConsoleTask_Entry', 'OS_ConsoleCreate_Impl', 'OS_CondVarCreate_Impl', 'OS_CondVarDelete_Impl', 'OS_CondVarUnlock_Impl', 'OS_CondVarLock_Impl', 'OS_CondVarSignal_Impl', 'OS_CondVarBroadcast_Impl', 'OS_CondVarWait_Impl', 'OS_CondVarTimedWait_Impl', 'OS_CountSemCreate_Impl', 'OS_CountSemDelete_Impl', 'OS_CountSemGive_Impl', 'OS_CountSemTake_Impl', 'OS_CountSemTimedWait_Impl', 'OS_CountSemGetInfo_Impl', 'OS_FileSysStartVolume_Impl', 'OS_FileSysMountVolume_Impl', 'OS_FileSysStatVolume_Impl', 'OS_MutSemCreate_Impl', 'OS_MutSemDelete_Impl', 'OS_MutSemGive_Impl', 'OS_MutSemTake_Impl', 'OS_QueueCreate_Impl', 'OS_QueueDelete_Impl', 'OS_QueueGet_Impl', 'OS_QueuePut_Impl', 'OS_TaskCreate_Impl', 'OS_TaskDetach_Impl', 'OS_TaskMatch_Impl', 'OS_TaskDelete_Impl', 'OS_TaskSetPriority_Impl', 'OS_TaskIdMatchSystemData_Impl', 'OS_TimeBaseLock_Impl', 'OS_TimeBaseUnlock_Impl', 'OS_TimeBase_SigWaitImpl', 'OS_TimeBaseCreate_Impl', 'OS_TimeBaseSet_Impl', 'OS_TimeBaseDelete_Impl', 'OS_ConsoleOutput_Impl', 'OS_SelectSingle_Impl', 'OS_GenericClose_Impl', 'OS_GenericSeek_Impl', 'OS_GenericRead_Impl', 'OS_GenericWrite_Impl', 'OS_FileOpen_Impl', 'OS_DirOpen_Impl', 'OS_DirClose_Impl', 'OS_DirRead_Impl', 'OS_DirRewind_Impl', 'OS_ModuleLoad_Impl', 'OS_ModuleUnload_Impl', 'OS_ModuleSymbolLookup_Impl', 'OS_SetSocketDefaultFlags_Impl', 'OS_SocketOpen_Impl', 'OS_SocketBindAddress_Impl', 'OS_SocketListen_Impl', 'OS_SocketConnect_Impl', 'OS_SocketShutdown_Impl', 'OS_SocketAccept_Impl', 'OS_SocketRecvFrom_Impl', 'OS_SocketSendTo_Impl', 'OS_BinSemCreate', 'OS_BinSemGetInfo', 'OS_CondVarCreate', 'OS_CondVarGetInfo', 'OS_CountSemCreate', 'OS_CountSemGetInfo', 'OS_DirectoryOpen', 'OS_OpenCreate', 'OS_rename', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_CloseFileByName', 'OS_FileSys_FindVirtMountPoint', 'OS_FileSys_Initialize', 'OS_FileSysAddFixedMap', 'OS_mount', 'OS_unmount', 'OS_FS_GetPhysDriveName', 'OS_TranslatePath', 'OS_ObjectIdFindNextMatch', 'OS_ObjectIdIteratorGetNext', 'OS_ModuleLoad', 'OS_ModuleUnload', 'OS_ModuleInfo', 'OS_ModuleSymbolLookup', 'OS_MutSemCreate', 'OS_MutSemGive', 'OS_MutSemTake', 'OS_MutSemGetInfo', 'OS_ConsoleAPI_Init', 'OS_ConsoleWrite', 'OS_QueueCreate', 'OS_QueueGet', 'OS_QueuePut', 'OS_QueueGetInfo', 'OS_CreateSocketName', 'OS_SocketOpen', 'OS_SocketListen', 'OS_SocketBindAddress', 'OS_SocketAccept', 'OS_SocketConnect', 'OS_SocketShutdown', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketGetInfo', 'OS_TaskPrepare', 'OS_TaskCreate', 'OS_TaskDelete', 'OS_TaskSetPriority', 'OS_TaskGetInfo', 'OS_TaskInstallDeleteHandler', 'OS_TimeBaseCreate', 'OS_TimeBaseSet', 'OS_TimeBaseGetInfo', 'OS_TimeBaseGetFreeRun', 'OS_TimeBase_CallbackThread', 'OS_DoTimerAdd', 'OS_TimerSet', 'OS_TimerDelete', 'OS_TimerGetInfo']}, 'OS_SocketSendTo': {'callees': ['OS_printf', 'OS_ObjectIdGetById', 'OS_ObjectIndexFromToken', 'OS_SocketSendTo_Impl', 'OS_ObjectIdRelease', 'UT_Stub_RegisterReturnType', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteBasicHandler', 'UT_Stub_GetReturnValuePtr'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "OS_OBJECT_TABLE_GET (macro)",
    "OS_impl_filehandle_table",
    "OS_object_token_t (type)",
    "OS_impl_file_internal_record_t (type)",
    "OS_SockAddr_t (type)",
    "OS_ObjectIndexFromToken (function/prototype)",
    "OS_ERR_BAD_ADDRESS (macro/constant)",
    "OS_ERROR (macro/constant)",
    "OS_DEBUG (macro)",
    "sendto (prototype)",
    "struct sockaddr / struct sockaddr_in / struct sockaddr_in6 (definitions)",
    "socklen_t (typedef)",
    "MSG_DONTWAIT (macro)",
    "AF_INET / AF_INET6 (macros)",
    "strerror (prototype)",
    "errno (macro)"
  ],
  "explanation": "For each listed symbol the analyzer must inspect the actual definition/expansion to determine whether any compiler language extensions are used (e.g. GNU statement-expressions ({...}), typeof, inline asm, __attribute__ forms that are compiler-specific, compiler-specific storage-class keywords like __thread, nonstandard variadic-macro usage, or other documented extensions). Brief reasons: \n\n- OS_OBJECT_TABLE_GET (macro): may expand to complex code that hides compiler extensions (statement-expression, typeof, compound literals, inline functions, or nonstandard syntax). Must inspect macro body. \n- OS_impl_filehandle_table: the object or its declaration could use nonstandard linkage, attributes, or storage specifiers. \n- OS_object_token_t (type): token type definition could use compiler-specific typedefs or extensions. \n- OS_impl_file_internal_record_t (type): struct definition must be checked for nonstandard features (unnamed/anonymous structs/unions, attributes, bit-field extensions). Also to confirm type of fd. \n- OS_SockAddr_t (type): contains AddrData and ActualLength fields used by the function; its definition could use flexible-array members, anonymous unions, or other extensions. \n- OS_ObjectIndexFromToken (function/prototype): the callee used by the macro/implementation might be an inline/gnu extension or have nonstandard attributes; need its signature to see hidden extension usage. \n- OS_ERR_BAD_ADDRESS / OS_ERROR (macros/constants): may be defined via compiler-specific constructs or macros that use extensions. \n- OS_DEBUG (macro): logging macro often uses variadic macros or compiler-specific attributes/expressions; its expansion must be checked. \n- sendto (prototype): system call wrapper could be a macro or inline that uses extensions; confirm standard prototype. \n- struct sockaddr / struct sockaddr_in / struct sockaddr_in6 (definitions): these system types may be standard, but platform headers could include nonstandard extensions or macros; verify their definitions. \n- socklen_t (typedef): ensure it is a standard typedef and not defined via an extension. \n- MSG_DONTWAIT (macro): inspect definition in headers (could be implemented via nonstandard constructs). \n- AF_INET / AF_INET6 (macros): platform-defined macros\u2014confirm no extension usage. \n- strerror (prototype): library function/macro: check if mapped to a macro or wrapper using extensions. \n- errno (macro): errno is commonly a macro that may expand to thread-local storage or compiler-specific TLS (e.g. __thread, __declspec(thread)); this expansion must be inspected because such TLS mechanisms can be compiler extensions.\n\nOnly these definitions/expansions need to be inspected to determine if the target function relies on any language/compiler-specific extensions."
}