{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SocketSendTo_Impl:\n```c\nint32 OS_SocketSendTo_Impl(const OS_object_token_t *token, const void *buffer, size_t buflen,\n                           const OS_SockAddr_t *RemoteAddr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&RemoteAddr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    if (addrlen != RemoteAddr->ActualLength)\n    {\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    os_result = sendto(impl->fd, buffer, buflen, MSG_DONTWAIT, sa, addrlen);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"sendto: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return os_result;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SocketSendTo_Impl:\nextern OS_impl_file_internal_record_t OS_impl_filehandle_table[OS_MAX_NUM_OPEN_FILES]\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler language extensions are used in the provided code fragment. The source contains only standard C constructs and POSIX socket APIs. Specifically:\n\n- There are no occurrences of known compiler-specific extensions such as GCC/Clang __attribute__ annotations, typeof, statement-expressions ({ ... }), nested functions, inline assembler (asm), __asm__, __extension__, or other vendor-specific keywords.\n- The cast (const struct sockaddr *)&RemoteAddr->AddrData, the use of socklen_t, sendto(), strerror(errno), and MSG_DONTWAIT are standard C/POSIX usage or macros provided by the platform headers, not language extensions.\n- The conditional compilation (#ifdef OS_NETWORK_SUPPORTS_IPV6) is a standard preprocessor feature, not a compiler language extension.\n- The extern array declaration (OS_impl_filehandle_table) in the additional code is a standard extern array declaration (no extension).\n\nOne item that is a macro invocation in the shown function is OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token). Macros themselves are preprocessor constructs (not language extensions). The macro definition is not provided here; if that macro's definition (in another file) uses a compiler-specific language extension (for example a GCC statement-expression or typeof), that would need to be investigated \u2014 but there is no evidence of such an extension in the code shown. Therefore, based on the provided source, there are no fragments that should be reported for MISRA C 2023 Rule 1.2."
}