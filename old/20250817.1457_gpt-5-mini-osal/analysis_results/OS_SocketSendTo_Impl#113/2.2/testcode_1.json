{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe OS_DEBUG macro is defined as an empty replacement (#define OS_DEBUG(__VA_ARGS__)), so the statement OS_DEBUG(\"sendto: %s\\n\", strerror(errno)); expands to an empty statement and the argument strerror(errno) is not evaluated. The statement has no effect and can be removed without changing program behaviour, therefore it is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketSendTo_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/906.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketSendTo_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketSendTo_Impl:\n```c\nint32 OS_SocketSendTo_Impl(const OS_object_token_t *token, const void *buffer, size_t buflen,\n                           const OS_SockAddr_t *RemoteAddr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&RemoteAddr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    if (addrlen != RemoteAddr->ActualLength)\n    {\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    os_result = sendto(impl->fd, buffer, buflen, MSG_DONTWAIT, sa, addrlen);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"sendto: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return os_result;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketSendTo_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <unistd.h>\n\n/* Probe helper: log pre-send state (does not read errno or strerror) */\nstatic void OS_SocketSendTo_Probe_Pre(int fd, const void *buffer, size_t buflen, int sa_family, socklen_t addrlen, socklen_t actuallen)\n{\n    FILE *f = fopen(\"/tmp/logs/906.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"[probe-pre] fd=%d buffer=%p buflen=%lu sa_family=%d addrlen=%u actuallen=%u\\n\",\n                fd, buffer, (unsigned long)buflen, sa_family, (unsigned int)addrlen, (unsigned int)actuallen);\n        fclose(f);\n    }\n}\n\n/* Probe helper: log post-send state (reads errno and strerror) */\nstatic void OS_SocketSendTo_Probe_Post(int fd, const void *buffer, size_t buflen, int sa_family, socklen_t addrlen, socklen_t actuallen, int sendto_result)\n{\n    FILE *f = fopen(\"/tmp/logs/906.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Capture errno and its string to provide evidence that strerror(errno) is evaluated here */\n        int err = errno;\n        const char *errstr = strerror(err);\n        fprintf(f, \"[probe-post] fd=%d buffer=%p buflen=%lu sa_family=%d addrlen=%u actuallen=%u sendto_result=%d errno=%d strerror=\\\"%s\\\"\\n\",\n                fd, buffer, (unsigned long)buflen, sa_family, (unsigned int)addrlen, (unsigned int)actuallen, sendto_result, err, errstr ? errstr : \"(null)\");\n        fclose(f);\n    }\n}\n\nint32 OS_SocketSendTo_Impl(const OS_object_token_t *token, const void *buffer, size_t buflen,\n                           const OS_SockAddr_t *RemoteAddr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&RemoteAddr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    if (addrlen != RemoteAddr->ActualLength)\n    {\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    /* Log pre-send state so the control path and inputs are recorded */\n    OS_SocketSendTo_Probe_Pre(impl->fd, buffer, buflen, (int)sa->sa_family, addrlen, RemoteAddr->ActualLength);\n\n    os_result = sendto(impl->fd, buffer, buflen, MSG_DONTWAIT, sa, addrlen);\n    if (os_result < 0)\n    {\n        /* Original debug macro left in place (may expand to nothing) */\n        OS_DEBUG(\"sendto: %s\\n\", strerror(errno));\n\n        /* Additional probe to ensure errno and strerror(errno) are evaluated and logged to a file\n         * This provides reproducible evidence that, if OS_DEBUG is empty, the call inside it\n         * would not evaluate strerror(errno). The probe here explicitly evaluates and logs it. */\n        OS_SocketSendTo_Probe_Post(impl->fd, buffer, buflen, (int)sa->sa_family, addrlen, RemoteAddr->ActualLength, os_result);\n\n        return OS_ERROR;\n    }\n\n    return os_result;\n}\n"
}