{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_GenericClose_Impl:\n```c\nint32 OS_GenericClose_Impl(const OS_object_token_t *token)\n{\n    int                             result;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    result = close(impl->fd);\n    if (result < 0)\n    {\n        /*\n         * close() can technically fail for various reasons, but\n         * there isn't much recourse if this call fails.  Just log\n         * the failure for debugging.\n         *\n         * POSIX also does not specify the state of the filehandle\n         * after a close() with an error.\n         *\n         * At least in  Linux/glibc the filehandle is always closed\n         * in the kernel and should not be used again or re-closed.\n         */\n        OS_DEBUG(\"close: %s\\n\", strerror(errno));\n    }\n    impl->fd = -1;\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_GenericClose_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_impl_file_internal_record_t OS_impl_filehandle_table[OS_MAX_NUM_OPEN_FILES]\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    int  fd;\n    bool selectable;\n} OS_impl_file_internal_record_t\n...\n#define OS_DEBUG(__VA_ARGS__) \n...\n#define OS_SUCCESS (0)\n...\ntypedef int32_t   int32\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no use of compiler-specific language extensions in the provided code. Items that might look suspicious on first glance but are not compiler extensions: \n\n- The variadic macro OS_DEBUG(__VA_ARGS__): variadic macros (using __VA_ARGS__) are standard since C99, not a compiler-specific extension. The macro is also defined as an empty expansion here, which is valid.\n\n- The use of static inline in OS_ObjectIndexFromToken: the inline keyword is standard since C99 (and static inline is a common idiom), not a vendor extension.\n\n- The use of types like int32_t (via typedef int32) and bool: these are standard C99 features (stdbool.h, stdint.h) and not compiler-specific extensions.\n\n- The macro OS_OBJECT_TABLE_GET(tbl, tok) taking the address of (tok) and the call site impl = OS_OBJECT_TABLE_GET(..., *token): this is unusual but valid C (the macro forms &( *token ) effectively recovering the original pointer). It does not rely on any compiler extension.\n\n- No occurrences of known compiler extensions were found (no __attribute__, __builtin_*, typeof, asm, inline assembly, statement expressions, designated initializer extensions, trailing commas in macros relying on extension, or other vendor-specific tokens). \n\nGiven the above, there are no code fragments that need investigation for MISRA C 2023 Rule 1.2 (language extensions should not be used)."
}