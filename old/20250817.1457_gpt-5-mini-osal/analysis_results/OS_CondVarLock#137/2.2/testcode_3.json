{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'ReturnPtr = NULL;' at the start of UT_Stub_GetReturnValuePtr is dead code. In the error path the function calls UtAssert_Abort (which does not return), and in the normal path ReturnPtr is always overwritten with StubPtr->Data.Buff.BasePtr before any use or return. Removing the initial 'ReturnPtr = NULL;' would not change program behaviour, so this executed assignment constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarLock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1098.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarLock as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarLock:\n```c\nint32 OS_CondVarLock(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarLock_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarLock code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helper for OS_CondVarLock control flow and state.\n * Appends logs to /tmp/logs/1098.txt showing entry, parameter checks,\n * calls to implementation and final return code. This preserves original\n * logic; it only records information to aid reproduction of the violation scenario.\n */\nstatic void OS_CondVarLock_Log(const char *stage, osal_id_t var_id, int32 return_code, const OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/1098.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print stage, var_id, return_code and the token pointer address. Casts to long/unsigned long used\n         * to avoid format-type mismatches for project-specific typedefs. Token contents are not dereferenced. */\n        fprintf(f, \"OS_CondVarLock: %s | var_id=%lu | return_code=%ld | token_ptr=%p\\n\",\n                stage,\n                (unsigned long) var_id,\n                (long) return_code,\n                (const void *) token);\n        fclose(f);\n    }\n}\n\nint32 OS_CondVarLock(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry with provided var_id */\n    OS_CondVarLock_Log(\"entry\", var_id, 0, NULL);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log result of ObjectIdGetById and token address */\n    OS_CondVarLock_Log(\"after_ObjectIdGetById\", var_id, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* About to call implementation - record state */\n        OS_CondVarLock_Log(\"before_Impl\", var_id, return_code, &token);\n\n        return_code = OS_CondVarLock_Impl(&token);\n\n        /* Record return from implementation */\n        OS_CondVarLock_Log(\"after_Impl\", var_id, return_code, &token);\n    }\n\n    /* Log final return code and exit */\n    OS_CondVarLock_Log(\"exit\", var_id, return_code, &token);\n\n    return return_code;\n}\n"
}