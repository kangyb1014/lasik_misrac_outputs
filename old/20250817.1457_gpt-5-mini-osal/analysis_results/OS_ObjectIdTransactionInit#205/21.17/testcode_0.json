{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe function unconditionally calls memset(token, 0, sizeof(*token)) without validating the pointer. If a caller were to pass token == NULL (for example: OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, SOME_TYPE, NULL)), this will invoke memset with a NULL destination and attempt to write sizeof(OS_object_token_t) bytes to address 0, resulting in an out-of-bounds access. Similarly, if the caller passed a pointer to an object smaller than OS_object_token_t, the memset would overwrite beyond that object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdTransactionInit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1647.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdTransactionInit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdTransactionInit:\n```c\nint32 OS_ObjectIdTransactionInit(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_object_token_t *token)\n{\n    memset(token, 0, sizeof(*token));\n\n    /*\n     * Confirm that OSAL has been fully initialized before allowing any transactions\n     */\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER &&\n        OS_SharedGlobalVars.GlobalState != OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERROR;\n    }\n\n    /*\n     * only \"exclusive\" locks allowed after shutdown request (this is mode used for delete).\n     * All regular ops will be blocked.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER && lock_mode != OS_LOCK_MODE_EXCLUSIVE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /*\n     * Transactions cannot be started on an object type for which\n     * there are no actual objects\n     */\n    if (OS_GetMaxForObjectType(idtype) == 0)\n    {\n        return OS_ERR_INVALID_ID;\n    }\n\n    token->lock_mode = lock_mode;\n    token->obj_type  = idtype;\n    token->obj_idx   = OSAL_INDEX_C(-1);\n\n    if (lock_mode != OS_LOCK_MODE_NONE)\n    {\n        OS_Lock_Global(token);\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdTransactionInit code.\n",
  "test_code": "/* Probe logging helper - writes to /tmp/logs/1647.txt. */\nstatic void OS_ObjectIdTransactionInit_LogProbe(const char *label, OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/1647.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log the label, pointer value, size of the token type, lock mode, id type and current global state. */\n        fprintf(f, \"[OS_ObjectIdTransactionInit][%s] token=%p sizeof(OS_object_token_t)=%zu lock_mode=%d idtype=%d GlobalState=0x%lx\\n\",\n                label, (void *)token, (size_t)sizeof(OS_object_token_t), (int)lock_mode, (int)idtype, (unsigned long)OS_SharedGlobalVars.GlobalState);\n        fflush(f);\n        fclose(f);\n    }\n}\n\nint32 OS_ObjectIdTransactionInit(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_object_token_t *token)\n{\n    /* Log entry and parameters before the unconditional memset so callers that pass token==NULL are recorded. */\n    OS_ObjectIdTransactionInit_LogProbe(\"entry_before_memset\", lock_mode, idtype, token);\n\n    /* Original behavior preserved: still performs the unconditional memset (this is the potential violation point). */\n    memset(token, 0, sizeof(*token));\n\n    /* Confirm that OSAL has been fully initialized before allowing any transactions */\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER &&\n        OS_SharedGlobalVars.GlobalState != OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        OS_ObjectIdTransactionInit_LogProbe(\"exit_not_initialized\", lock_mode, idtype, token);\n        return OS_ERROR;\n    }\n\n    /* only \"exclusive\" locks allowed after shutdown request (this is mode used for delete).\n     * All regular ops will be blocked.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER && lock_mode != OS_LOCK_MODE_EXCLUSIVE)\n    {\n        OS_ObjectIdTransactionInit_LogProbe(\"exit_incorrect_obj_state_after_shutdown\", lock_mode, idtype, token);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Transactions cannot be started on an object type for which\n     * there are no actual objects\n     */\n    if (OS_GetMaxForObjectType(idtype) == 0)\n    {\n        OS_ObjectIdTransactionInit_LogProbe(\"exit_invalid_id_no_objects\", lock_mode, idtype, token);\n        return OS_ERR_INVALID_ID;\n    }\n\n    /* Record state before populating token fields. */\n    OS_ObjectIdTransactionInit_LogProbe(\"before_populate_token\", lock_mode, idtype, token);\n\n    token->lock_mode = lock_mode;\n    token->obj_type  = idtype;\n    token->obj_idx   = OSAL_INDEX_C(-1);\n\n    OS_ObjectIdTransactionInit_LogProbe(\"after_populate_token\", lock_mode, idtype, token);\n\n    if (lock_mode != OS_LOCK_MODE_NONE)\n    {\n        OS_ObjectIdTransactionInit_LogProbe(\"before_lock_global\", lock_mode, idtype, token);\n        OS_Lock_Global(token);\n        OS_ObjectIdTransactionInit_LogProbe(\"after_lock_global\", lock_mode, idtype, token);\n    }\n\n    OS_ObjectIdTransactionInit_LogProbe(\"exit_success\", lock_mode, idtype, token);\n    return OS_SUCCESS;\n}\n"
}