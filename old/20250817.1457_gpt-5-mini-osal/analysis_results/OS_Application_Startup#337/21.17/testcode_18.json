{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation: memset is called on NewList returned by malloc without a NULL check. If malloc fails (NewList == NULL) this passes a NULL pointer to memset, causing an access beyond the bounds of the referenced object. (Also note a related risk: ActualSize computation could overflow for very large NumTags, but the primary MISRA 21.17 violation is the missing NULL check before calling memset.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Application_Startup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2703.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Application_Startup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Application_Startup:\n```c\nvoid OS_Application_Startup(void)\n{\n    UtTest_EarlyInit();\n    UT_BSP_Setup();\n\n    /*\n     * Wrap the UtTest_Setup() function in a UT segment called \"SETUP\"\n     * This allows any assert calls to be used and recorded during setup\n     */\n    UtAssert_BeginTest(\"SETUP\");\n    UtTest_Setup();\n    UtAssert_EndTest();\n}\n```\n</target_code>\nPlease provide the modified OS_Application_Startup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <time.h>\n#include <unistd.h>\n#include <limits.h>\n#ifdef __linux__\n#include <sys/resource.h>\n#endif\n\n/* External functions from the original environment */\nvoid UtTest_EarlyInit(void);\nvoid UT_BSP_Setup(void);\nvoid UtAssert_BeginTest(const char *TestName);\nvoid UtTest_Setup(void);\nvoid UtAssert_EndTest(void);\n\n/*\n * Simple logging helpers that append diagnostic information to\n * /tmp/logs/2703.txt to help reproduce memory-allocation related\n * failures (e.g. malloc returning NULL which may lead to a subsequent\n * memset on a NULL pointer elsewhere in the system).\n *\n * These helpers do not change the original control flow or logic.\n */\nstatic void log_message(const char *fmt, ...)\n{\n    FILE *f = NULL;\n    va_list ap;\n    time_t t = time(NULL);\n    struct tm tm;\n\n    if (localtime_r(&t, &tm) == NULL)\n    {\n        /* fallback */\n        tm.tm_year = 0;\n        tm.tm_mon = 0;\n        tm.tm_mday = 0;\n        tm.tm_hour = 0;\n        tm.tm_min = 0;\n        tm.tm_sec = 0;\n    }\n\n    f = fopen(\"/tmp/logs/2703.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, avoid disturbing program flow. */\n        return;\n    }\n\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d PID=%ld: \",\n            tm.tm_year + 1900,\n            tm.tm_mon + 1,\n            tm.tm_mday,\n            tm.tm_hour,\n            tm.tm_min,\n            tm.tm_sec,\n            (long)getpid());\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    /* also log current errno to help diagnose allocation failures */\n    if (errno != 0)\n    {\n        fprintf(f, \" (errno=%d)\", errno);\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Probe allocator behavior without introducing unsafe access. */\nstatic void probe_malloc_behavior(void)\n{\n    void *p = NULL;\n\n    /* Small allocation that should usually succeed. */\n    errno = 0;\n    p = malloc(1);\n    if (p != NULL)\n    {\n        log_message(\"probe_malloc: malloc(1) returned %p\", p);\n        free(p);\n    }\n    else\n    {\n        log_message(\"probe_malloc: malloc(1) returned NULL (expected on constrained systems)\");\n    }\n\n    /* Medium allocation to observe behavior under pressure. */\n    errno = 0;\n    size_t medium = 1024 * 1024; /* 1 MiB */\n    p = malloc(medium);\n    if (p != NULL)\n    {\n        log_message(\"probe_malloc: malloc(%zu) returned %p\", medium, p);\n        free(p);\n    }\n    else\n    {\n        log_message(\"probe_malloc: malloc(%zu) returned NULL\", medium);\n    }\n\n    /* Very large allocation that is expected to fail on most systems. */\n    errno = 0;\n    size_t huge = SIZE_MAX;\n    p = malloc(huge);\n    if (p != NULL)\n    {\n        /* Extremely unlikely; free for cleanliness. */\n        log_message(\"probe_malloc: malloc(SIZE_MAX) unexpectedly returned %p\", p);\n        free(p);\n    }\n    else\n    {\n        log_message(\"probe_malloc: malloc(SIZE_MAX) returned NULL (expected)\");\n    }\n\n#ifdef __linux__\n    /* If available, log the address space limit to help reproduce allocation failure conditions. */\n    struct rlimit rl;\n    if (getrlimit(RLIMIT_AS, &rl) == 0)\n    {\n        if (rl.rlim_cur == RLIM_INFINITY)\n        {\n            log_message(\"rlimit: RLIMIT_AS = infinity\");\n        }\n        else\n        {\n            log_message(\"rlimit: RLIMIT_AS current = %llu\", (unsigned long long)rl.rlim_cur);\n        }\n    }\n    else\n    {\n        log_message(\"rlimit: getrlimit(RLIMIT_AS) failed\");\n    }\n#endif\n}\n\n/* Modified OS_Application_Startup with probes inserted. */\nvoid OS_Application_Startup(void)\n{\n    /* Entry log */\n    log_message(\"OS_Application_Startup: ENTRY\");\n\n    /* Probe allocator state early so logs capture environment that might\n     * lead to malloc returning NULL elsewhere (and thus a subsequent\n     * unsafe memset on a NULL pointer). This probe does not perform any\n     * unsafe operation on returned pointers. */\n    probe_malloc_behavior();\n\n    log_message(\"Calling UtTest_EarlyInit()\");\n    UtTest_EarlyInit();\n    log_message(\"Returned from UtTest_EarlyInit()\");\n\n    log_message(\"Calling UT_BSP_Setup()\");\n    UT_BSP_Setup();\n    log_message(\"Returned from UT_BSP_Setup()\");\n\n    /*\n     * Wrap the UtTest_Setup() function in a UT segment called \"SETUP\"\n     * This allows any assert calls to be used and recorded during setup\n     */\n    log_message(\"Beginning UT segment: SETUP\");\n    UtAssert_BeginTest(\"SETUP\");\n\n    log_message(\"Calling UtTest_Setup()\");\n    UtTest_Setup();\n    log_message(\"Returned from UtTest_Setup()\");\n\n    UtAssert_EndTest();\n    log_message(\"Ended UT segment: SETUP\");\n\n    /* Final log */\n    log_message(\"OS_Application_Startup: EXIT\");\n}\n"
}