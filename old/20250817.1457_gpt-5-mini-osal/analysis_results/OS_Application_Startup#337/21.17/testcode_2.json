{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strlen(OutputMessage) without validating that OutputMessage is non-NULL and points to a null-terminated string can read beyond the object bounds. For example, if UT_BSP_DoText is invoked with OutputMessage == NULL (or with a non-terminated buffer), strlen(OutputMessage) will dereference beyond the valid memory and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Application_Startup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2703.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Application_Startup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Application_Startup:\n```c\nvoid OS_Application_Startup(void)\n{\n    UtTest_EarlyInit();\n    UT_BSP_Setup();\n\n    /*\n     * Wrap the UtTest_Setup() function in a UT segment called \"SETUP\"\n     * This allows any assert calls to be used and recorded during setup\n     */\n    UtAssert_BeginTest(\"SETUP\");\n    UtTest_Setup();\n    UtAssert_EndTest();\n}\n```\n</target_code>\nPlease provide the modified OS_Application_Startup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <signal.h>\n#include <string.h>\n#include <stdlib.h>\n#include <execinfo.h>\n#include <time.h>\n\n/* Probe logging helpers for OS_Application_Startup\n * Writes execution trace and crash evidence to /tmp/logs/2703.txt\n * This instrumentation preserves the original control flow and calls\n * UtTest_EarlyInit, UT_BSP_Setup, UtAssert_BeginTest, UtTest_Setup,\n * and UtAssert_EndTest in the same order.\n */\n\nstatic FILE *probe_log_file(void)\n{\n    static FILE *f = NULL;\n    if (f == NULL)\n    {\n        /* Open in append mode so multiple runs append to the same file */\n        f = fopen(\"/tmp/logs/2703.txt\", \"a\");\n        if (f != NULL)\n        {\n            /* Make output line-buffered for timely flushes */\n            setvbuf(f, NULL, _IOLBF, 0);\n        }\n    }\n    return f;\n}\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = probe_log_file();\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n\n    /* Prefix logs with timestamp for easier correlation */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(f, \"%s - \", timestr);\n        }\n    }\n\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    fflush(f);\n\n    va_end(ap);\n}\n\n/* Signal handler to capture segmentation faults (e.g., from strlen(NULL))\n * This writes a small diagnostic to the same probe log file so reproducer\n * runs that crash due to a misuse of string functions can be diagnosed.\n */\nstatic void probe_sig_handler(int signum, siginfo_t *info, void *ucontext)\n{\n    (void)ucontext; /* unused in this probe */\n\n    /* Try to log minimal safe information */\n    FILE *f = probe_log_file();\n    if (f != NULL)\n    {\n        fprintf(f, \"--- PROBE: Caught signal %d (%s) ---\\n\", signum, strsignal(signum));\n        if (info != NULL)\n        {\n            fprintf(f, \"Signal address: %p\\n\", info->si_addr);\n        }\n\n        /* Capture a backtrace if available */\n        void *bt[20];\n        int bt_size = backtrace(bt, 20);\n        if (bt_size > 0)\n        {\n            char **bt_syms = backtrace_symbols(bt, bt_size);\n            if (bt_syms != NULL)\n            {\n                fprintf(f, \"Backtrace (most recent first):\\n\");\n                for (int i = 0; i < bt_size; ++i)\n                {\n                    fprintf(f, \"  %s\\n\", bt_syms[i]);\n                }\n                free(bt_syms);\n            }\n        }\n\n        fprintf(f, \"--- End of probe for signal %d ---\\n\", signum);\n        fflush(f);\n    }\n\n    /* Restore default handler and re-raise to allow normal crash behavior */\n    signal(signum, SIG_DFL);\n    raise(signum);\n}\n\nvoid OS_Application_Startup(void)\n{\n    /* Install signal handlers early so crashes inside setup are captured */\n    {\n        struct sigaction act;\n        memset(&act, 0, sizeof(act));\n        act.sa_sigaction = probe_sig_handler;\n        act.sa_flags = SA_SIGINFO | SA_RESTART;\n        sigaction(SIGSEGV, &act, NULL);\n        sigaction(SIGABRT, &act, NULL);\n        sigaction(SIGFPE, &act, NULL);\n    }\n\n    probe_log(\"ENTER: OS_Application_Startup\");\n\n    probe_log(\"Before: UtTest_EarlyInit()\");\n    UtTest_EarlyInit();\n    probe_log(\"After: UtTest_EarlyInit()\");\n\n    probe_log(\"Before: UT_BSP_Setup()\");\n    UT_BSP_Setup();\n    probe_log(\"After: UT_BSP_Setup()\");\n\n    /*\n     * Wrap the UtTest_Setup() function in a UT segment called \"SETUP\"\n     * This allows any assert calls to be used and recorded during setup\n     */\n    probe_log(\"Before: UtAssert_BeginTest(\\\"SETUP\\\")\");\n    UtAssert_BeginTest(\"SETUP\");\n    probe_log(\"After: UtAssert_BeginTest(\\\"SETUP\\\")\");\n\n    probe_log(\"Before: UtTest_Setup()\");\n    UtTest_Setup();\n    probe_log(\"After: UtTest_Setup()\");\n\n    probe_log(\"Before: UtAssert_EndTest()\");\n    UtAssert_EndTest();\n    probe_log(\"After: UtAssert_EndTest()\");\n\n    probe_log(\"EXIT: OS_Application_Startup\");\n\n    /* Keep the log file open for the lifetime of the application so the\n     * signal handler can reliably write to it upon a crash. Do not close it here.\n     */\n}\n"
}