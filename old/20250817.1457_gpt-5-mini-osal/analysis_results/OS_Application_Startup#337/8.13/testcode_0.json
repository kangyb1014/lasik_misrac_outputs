{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the prototype of UtAssert_BeginTest is declared as accepting a non-const pointer, e.g. void UtAssert_BeginTest(char *msg), then the call UtAssert_BeginTest(\"SETUP\") is a violation: a string literal is being passed to a non-const pointer parameter \u2014 the parameter should be const char * (or otherwise const-qualified) per MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Application_Startup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2699.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Application_Startup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Application_Startup:\n```c\nvoid OS_Application_Startup(void)\n{\n    UtTest_EarlyInit();\n    UT_BSP_Setup();\n\n    /*\n     * Wrap the UtTest_Setup() function in a UT segment called \"SETUP\"\n     * This allows any assert calls to be used and recorded during setup\n     */\n    UtAssert_BeginTest(\"SETUP\");\n    UtTest_Setup();\n    UtAssert_EndTest();\n}\n```\n</target_code>\nPlease provide the modified OS_Application_Startup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* External declarations for existing test framework functions. These are\n   expected to be provided by the rest of the project. We do not alter\n   their prototypes here. */\nextern void UtTest_EarlyInit(void);\nextern void UT_BSP_Setup(void);\nextern void UtTest_Setup(void);\nextern void UtAssert_BeginTest(char *msg);\nextern void UtAssert_EndTest(void);\n\n/* Probe logging helper: append control-flow and state info to a file so\n   other agents can reproduce and gather evidence for the scenario. */\nstatic void Probe_Log(const char *event, const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/2699.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log the event, the message text and the pointer value of the\n           message argument. The pointer value helps demonstrate that a\n           string literal address is being passed at the call site. */\n        fprintf(f, \"Event: %s, msg: \\\"%s\\\", addr: %p\\n\", event, (msg != NULL) ? msg : \"(null)\", (const void *)msg);\n        fclose(f);\n    }\n}\n\nvoid OS_Application_Startup(void)\n{\n    Probe_Log(\"enter\", \"OS_Application_Startup\");\n\n    UtTest_EarlyInit();\n    Probe_Log(\"after\", \"UtTest_EarlyInit\");\n\n    UT_BSP_Setup();\n    Probe_Log(\"after\", \"UT_BSP_Setup\");\n\n    /*\n     * Wrap the UtTest_Setup() function in a UT segment called \"SETUP\"\n     * This allows any assert calls to be used and recorded during setup\n     *\n     * We log immediately before and after calling UtAssert_BeginTest so\n     * that the logs capture the exact call site and the pointer/address\n     * of the argument being passed. If UtAssert_BeginTest is declared\n     * as taking a non-const char *, then passing the string literal\n     * \"SETUP\" here is the violation under MISRA C 2023 Rule 8.13; the\n     * logs provide evidence of that call.\n     */\n    Probe_Log(\"before_UtAssert_BeginTest\", \"SETUP\");\n    UtAssert_BeginTest(\"SETUP\");\n    Probe_Log(\"after_UtAssert_BeginTest\", \"SETUP\");\n\n    UtTest_Setup();\n    Probe_Log(\"after\", \"UtTest_Setup\");\n\n    UtAssert_EndTest();\n    Probe_Log(\"after\", \"UtAssert_EndTest\");\n\n    Probe_Log(\"exit\", \"OS_Application_Startup\");\n}\n"
}