{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(StaticSym->Name, SymbolName) (and later strcmp(StaticSym->Module, ModuleName)) without any bounds or explicit NUL-termination checks. If either SymbolName (provided by the caller) or the StaticSym->Name/StaticSym->Module entries are not guaranteed to be NUL-terminated within their allocated bounds (for example, a caller passes a fixed-length buffer without a terminating '\\0' or the static table entries are malformed), strcmp can read past the end of the object(s), causing accesses beyond the bounds. This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleSymbolLookup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1703.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleSymbolLookup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleSymbolLookup:\n```c\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                return_code = staticsym_status;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleSymbolLookup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/1703.txt */\nstatic void OS_ModuleSymbolLookup_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1703.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    /* Log entry and key pointer values. Do NOT dereference symbol_name or other external buffers. */\n    OS_ModuleSymbolLookup_Log(\"OS_ModuleSymbolLookup: entry module_id=%llu, symbol_address=%p, symbol_name=%p\",\n                              (unsigned long long)module_id, (void *)symbol_address, (const void *)symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    OS_ModuleSymbolLookup_Log(\"OS_ObjectIdGetById returned %d\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        /* Log the record pointer and the record->name_entry pointer without reading the contents */\n        OS_ModuleSymbolLookup_Log(\"module record=%p, record->name_entry=%p\", (void *)record,\n                                  (void *)(record ? record->name_entry : NULL));\n\n        OS_ModuleSymbolLookup_Log(\"Calling OS_ModuleSymbolLookup_Impl(module_id=%llu, symbol_name=%p)\",\n                                  (unsigned long long)module_id, (const void *)symbol_name);\n\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n\n        OS_ModuleSymbolLookup_Log(\"OS_ModuleSymbolLookup_Impl returned %d, symbol_address=%p\", return_code,\n                                  (void *)symbol_address);\n\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            OS_ModuleSymbolLookup_Log(\"Attempting static symbol lookup: symbol_name=%p, module_name=%p\",\n                                      (const void *)symbol_name,\n                                      (void *)(record ? record->name_entry : NULL));\n\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            OS_ModuleSymbolLookup_Log(\"OS_SymbolLookup_Static returned %d, symbol_address=%p\",\n                                      staticsym_status, (void *)symbol_address);\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                OS_ModuleSymbolLookup_Log(\"Static lookup succeeded; overwriting return_code (%d -> %d)\", return_code, staticsym_status);\n                return_code = staticsym_status;\n            }\n            else\n            {\n                OS_ModuleSymbolLookup_Log(\"Static lookup failed; keeping return_code=%d\", return_code);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_ModuleSymbolLookup_Log(\"Released object token for module_id=%llu\", (unsigned long long)module_id);\n    }\n    else\n    {\n        OS_ModuleSymbolLookup_Log(\"OS_ObjectIdGetById failed; skipping lookup for module_id=%llu\", (unsigned long long)module_id);\n    }\n\n    OS_ModuleSymbolLookup_Log(\"OS_ModuleSymbolLookup: exit return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}