{
  "user_message": "An agent A claimed that the following OS_ModuleSymbolLookup code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_ModuleSymbolLookup.\n```c\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                return_code = staticsym_status;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local variable 'record' is declared as a non-const pointer (OS_common_record_t *record) but is only read (used to access record->name_entry). According to MISRA C 2023 Rule 8.13 it should be declared to point to a const-qualified type when possible. For example: 'const OS_common_record_t *record = OS_OBJECT_TABLE_GET(...);'.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\ntypedef int32_t int32;\ntypedef uint32_t osal_id_t;\ntypedef uintptr_t cpuaddr;\ntypedef struct\n{\n    int dummy;\n} OS_common_record_t;\ntypedef struct\n{\n    int dummy;\n} OS_object_token_t;\nstatic void os1699_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1699.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    fprintf(f, \"\\n\");\n    va_end(args);\n\n    fclose(f);\n}\n\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record = NULL;\n    OS_object_token_t   token;\n\n    /* Check parameters (replaces OS_CHECK_POINTER macros) */\n    if (symbol_address == NULL || symbol_name == NULL)\n    {\n        return -1; /* bad argument */\n    }\n\n    /* Log entry (fixed unterminated string from original) */\n    os1699_log(\"OS_ModuleSymbolLookup ENTRY: module_id=%u symbol_name=%s\", (unsigned)module_id, symbol_name);\n\n    /*\n     * The original implementation likely looked up the symbol in a module's\n     * symbol table. For this minimal, compilable version we preserve the\n     * structure and return a not-found or success code as appropriate.\n     */\n\n    /* Initialize outputs */\n    *symbol_address = (cpuaddr)0;\n    staticsym_status = 0;\n\n    /* Simulate lookup: if symbol_name is empty, treat as error */\n    if (symbol_name[0] == '\\0')\n    {\n        return_code = -2; /* symbol not found / invalid name */\n    }\n    else\n    {\n        /* For demonstration, pretend any non-empty name resolves to address 0x1000 */\n        *symbol_address = (cpuaddr)0x1000;\n        return_code = 0; /* success */\n    }\n\n    os1699_log(\"OS_ModuleSymbolLookup EXIT: return_code=%d symbol_address=0x%zx\",\n               (int)return_code, (size_t)*symbol_address);\n\n    (void)record; /* suppress unused warning */\n    (void)token;\n    (void)staticsym_status;\n\n    return return_code;\n}\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    /* Minimal implementation to make the file compile. */\n    if (filename == NULL)\n    {\n        return -1;\n    }\n\n    FILE *f = fopen(filename, \"w\");\n    if (f == NULL)\n    {\n        return -2;\n    }\n\n    fprintf(f, \"Symbol table dump (truncated to %zu bytes)\\n\", SizeLimit);\n    fclose(f);\n\n    return 0;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the shown function the local variable record is declared as OS_common_record_t * but it is only read (used to access record->name_entry) and never used to modify the object. MISRA C 2023 Rule 8.13 directs that a pointer should point to a const-qualified type whenever possible, so the pointer should be declared as pointing-to-const (for example: const OS_common_record_t *record). Assigning a non-const object pointer to a pointer-to-const is allowed in C, so this change is safe here. The only caveat would be if later code (or the macro OS_OBJECT_TABLE_GET) requires a non-const pointer for modification; based on the snippet provided, that is not the case, so the original code violates Rule 8.13."
}