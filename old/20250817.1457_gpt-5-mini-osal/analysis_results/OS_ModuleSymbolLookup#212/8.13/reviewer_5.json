{
  "user_message": "An agent A claimed that the following OS_ModuleSymbolLookup code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_ModuleSymbolLookup.\n```c\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                return_code = staticsym_status;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'record' is only read (assigned via OS_OBJECT_TABLE_GET and subsequently used to access record->name_entry) and is never used to modify the pointed object. It could be declared as 'const OS_common_record_t *record;' to express read-only access and satisfy MISRA C 2023 Rule 8.13, so the current non-const declaration violates the rule.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_ModuleSymbolLookup_Log(const char *stage,\n                                      unsigned long module_id,\n                                      const void *record_ptr,\n                                      const char *record_name_entry,\n                                      const char *symbol_name,\n                                      int32 return_code,\n                                      int32 staticsym_status)\n{\n    FILE *fp = fopen(\"/tmp/logs/1699.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging fails, do not affect original logic */\n        return;\n    }\n\n    fprintf(fp, \"Stage: %s\\n\", stage);\n    fprintf(fp, \"  module_id=%lu\\n\", module_id);\n    fprintf(fp, \"  record_ptr=%p\\n\", record_ptr);\n    fprintf(fp, \"  record->name_entry=%s\\n\", record_name_entry ? record_name_entry : \"(null)\");\n    fprintf(fp, \"  symbol_name=%s\\n\", symbol_name ? symbol_name : \"(null)\");\n    fprintf(fp, \"  return_code=%d\\n\", (int)return_code);\n    fprintf(fp, \"  staticsym_status=%d\\n\", (int)staticsym_status);\n    fprintf(fp, \"----------------------------------------\\n\");\n    fclose(fp);\n}\n\nint32 OS_ModuleSymbolLookup(osal_id_t module_id, cpuaddr *symbol_address, const char *symbol_name)\n{\n    int32               return_code;\n    int32               staticsym_status;\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(symbol_address);\n    OS_CHECK_POINTER(symbol_name);\n\n    /* Log entry with basic inputs */\n    OS_ModuleSymbolLookup_Log(\"entry\", (unsigned long)module_id, NULL, NULL, symbol_name, 0, -1);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n\n        /* Log after obtaining the record pointer (read-only access) */\n        OS_ModuleSymbolLookup_Log(\"after_get_record\", (unsigned long)module_id,\n                                  (const void *)record,\n                                  (record != NULL) ? record->name_entry : NULL,\n                                  symbol_name,\n                                  return_code, -1);\n\n        return_code = OS_ModuleSymbolLookup_Impl(&token, symbol_address, symbol_name);\n        if (return_code != OS_SUCCESS)\n        {\n            /* look for a static symbol that also matches this module name */\n            staticsym_status = OS_SymbolLookup_Static(symbol_address, symbol_name, record->name_entry);\n\n            /* Log the static lookup attempt and intermediate results */\n            OS_ModuleSymbolLookup_Log(\"after_impl_and_static_lookup\", (unsigned long)module_id,\n                                      (const void *)record,\n                                      (record != NULL) ? record->name_entry : NULL,\n                                      symbol_name,\n                                      return_code, staticsym_status);\n\n            /*\n             * Only overwrite the return code if static lookup was successful.\n             * Otherwise keep the error code from the low level implementation.\n             */\n            if (staticsym_status == OS_SUCCESS)\n            {\n                return_code = staticsym_status;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log final state before returning */\n        OS_ModuleSymbolLookup_Log(\"exit\", (unsigned long)module_id,\n                                  (const void *)record,\n                                  (record != NULL) ? record->name_entry : NULL,\n                                  symbol_name,\n                                  return_code, (return_code == OS_SUCCESS) ? 0 : -1);\n    }\n    else\n    {\n        /* Log failure to obtain object id */\n        OS_ModuleSymbolLookup_Log(\"objectid_get_failed\", (unsigned long)module_id, NULL, NULL, symbol_name, return_code, -1);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_ModuleSymbolLookup. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In the shown function the local variable record is only used for read access (it is assigned from OS_OBJECT_TABLE_GET and only used to read record->name_entry). Under MISRA C 2023 Rule 8.13, a pointer should point to a const-qualified type whenever possible, so declaring it as const OS_common_record_t *record; would be the appropriate, more restrictive qualification. Assigning the non-const result of OS_OBJECT_TABLE_GET to a const-qualified pointer is allowed and there is no evidence in this function that the object is modified, so the current non-const declaration does not follow the intent of Rule 8.13."
}