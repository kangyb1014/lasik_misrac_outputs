{
  "user_message": "An agent A claimed that the following OS_mkdir code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_mkdir.\n```c\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirCreate_Impl(local_path, access);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The use of memchr(s, 0, maxlen) in OS_strnlen can read up to maxlen bytes starting at s. There is no guarantee in the shown code that the object pointed to by s (e.g. VirtualPath passed into OS_TranslatePath/OS_strnlen) is at least maxlen bytes long. If the caller provides a buffer smaller than OS_MAX_PATH_LEN or the string object does not have accessible storage for maxlen bytes, memchr may access memory beyond the object bounds (undefined behaviour). For example, if s points to a 16-byte buffer but maxlen is OS_MAX_PATH_LEN (larger), memchr will read past the 16 bytes and thus violate Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_mkdir_log(const char *stage, const char *path, const char *local_path, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1231.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log basic control information: stage, pointer value and return code. */\n        fprintf(f, \"[OS_mkdir] stage=%s path_ptr=%p return_code=%d\\n\", stage, (const void *)path, (int)return_code);\n\n        /* Only print local_path when it is expected to be a valid, null-terminated string\n         * (i.e., after OS_TranslatePath returned success). This avoids reading from\n         * memory pointed to by 'path' which might be undersized. */\n        if (local_path != NULL)\n        {\n            fprintf(f, \"[OS_mkdir] local_path=\\\"%s\\\"\\n\", local_path);\n        }\n\n        fclose(f);\n    }\n}\n\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry with pointer value only (do not dereference 'path'). */\n    OS_mkdir_log(\"enter\", path, NULL, 0);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log the result of translation. Only expose local_path when translation succeeded. */\n    if (return_code == OS_SUCCESS)\n    {\n        OS_mkdir_log(\"after_translate_success\", path, local_path, return_code);\n        return_code = OS_DirCreate_Impl(local_path, access);\n        OS_mkdir_log(\"after_dircreate\", path, local_path, return_code);\n    }\n    else\n    {\n        OS_mkdir_log(\"after_translate_failure\", path, NULL, return_code);\n    }\n\n    OS_mkdir_log(\"exit\", path, (return_code == OS_SUCCESS) ? local_path : NULL, return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_mkdir. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. The reported problem is that OS_strnlen (called by OS_TranslatePath, which is called by OS_mkdir) uses memchr(s, 0, maxlen). memchr may read up to maxlen bytes starting at s; if the object pointed to by s is smaller than maxlen and there is no NUL byte within the actual object bounds, memchr will access memory beyond the object (undefined behaviour). Nothing in the shown OS_mkdir code guarantees that the caller-supplied pointer path refers to an object with at least OS_MAX_PATH_LEN bytes of storage, so the chain of calls can indeed lead to a potential out-of-bounds read and therefore breaches MISRA C 2023 Rule 21.17 unless the API contract elsewhere explicitly requires that callers provide buffers of that size (or that the string is NUL-terminated within the first maxlen bytes). To be compliant either: (a) the API must formally require and document that path points to a character array of at least maxlen bytes (and all callers must meet that), or (b) the implementation must be changed so the string-handling call cannot read beyond the actual object (for example by accepting an explicit buffer length parameter, or by using a different safe scanning approach)."
}