{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen calls memchr(VirtualPath, 0, OS_MAX_PATH_LEN). If VirtualPath points to an object whose length (storage size) is less than OS_MAX_PATH_LEN and there is no null byte within that object's bounds, memchr may read past the end of that object while searching for a 0 byte. For example, if a caller passes a pointer to a char buffer of size 16 which happens not to contain a '\\0' within those 16 bytes, the memchr call can access beyond the 16-byte object (up to OS_MAX_PATH_LEN), violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1231.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mkdir:\n```c\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirCreate_Impl(local_path, access);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Minimal typedefs to make this file standalone for compilation. */\ntypedef int32_t int32;\ntypedef uint32_t uint32;\n\n/* Provide sizes used by the OS code. These are deliberately ordinary\n   integer constants (not macros) so the file is self-contained. */\nenum { OS_MAX_LOCAL_PATH_LEN = 256, OS_MAX_PATH_LEN = 32768 };\n\n/* Status code used by the OS functions (typical convention). */\nenum { OS_SUCCESS = 0 };\n\n/* External OS functions implemented elsewhere. We only declare them so\n   this translation unit can be linked with the real implementations. */\nextern int32 OS_TranslatePath(const char *path, char *local_path);\nextern int32 OS_DirCreate_Impl(const char *local_path, uint32 access);\n\n/* Probe helpers: write logs to a fixed file so other agents can inspect\n   the control flow and state. All writes append so repeated runs accumulate\n   data. These helpers avoid dereferencing the caller-provided 'path'\n   pointer to prevent introducing new out-of-bounds accesses. */\nstatic void probe_log_open(const char *tag, const char *path_ptr_str, uint32 access)\n{\n    FILE *f = fopen(\"/tmp/logs/1231.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"[OS_mkdir] ENTER tag=%s path_ptr=%s access=%u\\n\", tag, path_ptr_str ? path_ptr_str : \"(null)\", (unsigned)access);\n        fclose(f);\n    }\n}\n\nstatic void probe_log_translate_result(const char *path_ptr_str, int32 translate_rc, const char *local_path)\n{\n    FILE *f = fopen(\"/tmp/logs/1231.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"[OS_mkdir] OS_TranslatePath returned %d for path_ptr=%s\\n\", (int)translate_rc, path_ptr_str ? path_ptr_str : \"(null)\");\n\n        if (translate_rc == OS_SUCCESS && local_path != NULL)\n        {\n            /* local_path is a local buffer in this function; it is safe to\n               measure and log up to OS_MAX_LOCAL_PATH_LEN bytes. */\n            size_t ln = strnlen(local_path, (size_t)OS_MAX_LOCAL_PATH_LEN);\n            fprintf(f, \"[OS_mkdir] Translated local_path (len=%zu):\\n\", ln);\n\n            /* Log as a visible string (may be truncated) */\n            fprintf(f, \"[OS_mkdir] local_path_str=\\\"\");\n            for (size_t i = 0; i < ln; ++i)\n            {\n                unsigned char c = (unsigned char)local_path[i];\n                /* Print printable characters directly; otherwise use \\xHH */\n                if (c >= 0x20 && c <= 0x7e)\n                    fputc(c, f);\n                else\n                    fprintf(f, \"\\\\x%02X\", c);\n            }\n            fprintf(f, \"\\\"\\n\");\n\n            /* Also provide a hex dump for byte-level inspection. */\n            fprintf(f, \"[OS_mkdir] local_path_hex=\");\n            for (size_t i = 0; i < ln; ++i)\n            {\n                fprintf(f, \"%02X\", (unsigned char)local_path[i]);\n                if (i + 1 < ln) fprintf(f, \":\");\n            }\n            fprintf(f, \"\\n\");\n        }\n        fclose(f);\n    }\n}\n\nstatic void probe_log_dircreate_result(const char *path_ptr_str, int32 dircreate_rc)\n{\n    FILE *f = fopen(\"/tmp/logs/1231.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"[OS_mkdir] OS_DirCreate_Impl returned %d for path_ptr=%s\\n\", (int)dircreate_rc, path_ptr_str ? path_ptr_str : \"(null)\");\n        fclose(f);\n    }\n}\n\n/* Modified OS_mkdir that preserves original logic but inserts probes. */\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry: we record the pointer value as an address string so that\n       test harnesses can correlate the pointer with allocated object sizes\n       or with fuzzing inputs. We do not dereference 'path' here to avoid\n       creating new out-of-bounds reads. */\n    char path_ptr_str[32];\n    if (path == NULL)\n    {\n        strncpy(path_ptr_str, \"(null)\", sizeof(path_ptr_str));\n        path_ptr_str[sizeof(path_ptr_str) - 1] = '\\0';\n    }\n    else\n    {\n        /* Print the address value into a small buffer. */\n        /* Use snprintf to avoid dependency on macros; this is safe. */\n        snprintf(path_ptr_str, sizeof(path_ptr_str), \"%p\", (const void *)path);\n    }\n\n    probe_log_open(\"entry\", path_ptr_str, access);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of translation and the translated local_path contents. */\n    probe_log_translate_result(path_ptr_str, return_code, local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirCreate_Impl(local_path, access);\n        /* Log result of the directory creation implementation. */\n        probe_log_dircreate_result(path_ptr_str, return_code);\n    }\n\n    /* Final return is logged as well. */\n    FILE *f = fopen(\"/tmp/logs/1231.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"[OS_mkdir] EXIT final_return=%d for path_ptr=%s\\n\", (int)return_code, path_ptr_str);\n        fclose(f);\n    }\n\n    return return_code;\n}\n"
}