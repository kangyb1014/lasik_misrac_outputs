{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe use of memchr(s, 0, maxlen) in OS_strnlen can read up to maxlen bytes starting at s. There is no guarantee in the shown code that the object pointed to by s (e.g. VirtualPath passed into OS_TranslatePath/OS_strnlen) is at least maxlen bytes long. If the caller provides a buffer smaller than OS_MAX_PATH_LEN or the string object does not have accessible storage for maxlen bytes, memchr may access memory beyond the object bounds (undefined behaviour). For example, if s points to a 16-byte buffer but maxlen is OS_MAX_PATH_LEN (larger), memchr will read past the 16 bytes and thus violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1231.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mkdir:\n```c\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirCreate_Impl(local_path, access);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logging helper for OS_mkdir. This function only logs pointer values\n * and the translated local_path when it is known to be valid (i.e. after\n * a successful OS_TranslatePath). It intentionally does NOT dereference the\n * input 'path' pointer to avoid introducing additional out-of-bounds reads.\n */\nstatic void OS_mkdir_log(const char *stage, const char *path, const char *local_path, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1231.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log basic control information: stage, pointer value and return code. */\n        fprintf(f, \"[OS_mkdir] stage=%s path_ptr=%p return_code=%d\\n\", stage, (const void *)path, (int)return_code);\n\n        /* Only print local_path when it is expected to be a valid, null-terminated string\n         * (i.e., after OS_TranslatePath returned success). This avoids reading from\n         * memory pointed to by 'path' which might be undersized. */\n        if (local_path != NULL)\n        {\n            fprintf(f, \"[OS_mkdir] local_path=\\\"%s\\\"\\n\", local_path);\n        }\n\n        fclose(f);\n    }\n}\n\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry with pointer value only (do not dereference 'path'). */\n    OS_mkdir_log(\"enter\", path, NULL, 0);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log the result of translation. Only expose local_path when translation succeeded. */\n    if (return_code == OS_SUCCESS)\n    {\n        OS_mkdir_log(\"after_translate_success\", path, local_path, return_code);\n        return_code = OS_DirCreate_Impl(local_path, access);\n        OS_mkdir_log(\"after_dircreate\", path, local_path, return_code);\n    }\n    else\n    {\n        OS_mkdir_log(\"after_translate_failure\", path, NULL, return_code);\n    }\n\n    OS_mkdir_log(\"exit\", path, (return_code == OS_SUCCESS) ? local_path : NULL, return_code);\n\n    return return_code;\n}\n"
}