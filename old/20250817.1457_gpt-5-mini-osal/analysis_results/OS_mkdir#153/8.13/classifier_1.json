{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_mkdir:\n```c\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirCreate_Impl(local_path, access);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nchar  local_path[OS_MAX_LOCAL_PATH_LEN];\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: local_path is an array used as a writable buffer (passed to OS_TranslatePath which fills it and then to OS_DirCreate_Impl). Rule 8.13 concerns pointer types pointing to const-qualified targets; here the object must be non-const because it is written to. A violation would occur if local_path were only read and passed to functions taking const char* but declared as non-const (e.g. declared as char local_path[...] while never modified and only used via const char*), in which case it should be declared const char local_path[]."
}