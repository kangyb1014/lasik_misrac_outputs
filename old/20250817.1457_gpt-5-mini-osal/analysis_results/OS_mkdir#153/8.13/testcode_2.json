{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes local_path (type char[]) to OS_DirCreate_Impl which is presumably declared to take a non-const pointer (e.g. int32 OS_DirCreate_Impl(char *path, uint32 access)). If OS_DirCreate_Impl does not need to modify the buffer, its parameter should be const-qualified (const char *). Keeping a non-const parameter when mutation is not required violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1227.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mkdir:\n```c\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirCreate_Impl(local_path, access);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n\n/*\n * Probe helpers: append formatted messages to /tmp/logs/1227.txt\n */\nstatic void write_logf(const char *format, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1227.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, format);\n    (void)vfprintf(f, format, ap);\n    va_end(ap);\n\n    (void)fprintf(f, \"\\n\");\n    (void)fclose(f);\n}\n\nstatic void probe_enter(const char *path)\n{\n    if (path != NULL)\n    {\n        write_logf(\"OS_mkdir: enter, path='%s', path_addr=%p\", path, (const void *)path);\n    }\n    else\n    {\n        write_logf(\"OS_mkdir: enter, path=NULL\");\n    }\n}\n\nstatic void probe_after_translate(int32_t rc, const char *local_path)\n{\n    if (rc == 0)\n    {\n        write_logf(\"OS_mkdir: OS_TranslatePath succeeded (rc=%ld), local_path='%s', local_path_addr=%p\",\n                   (long)rc, local_path ? local_path : \"(null)\", (const void *)local_path);\n    }\n    else\n    {\n        write_logf(\"OS_mkdir: OS_TranslatePath failed (rc=%ld)\", (long)rc);\n    }\n}\n\nstatic void probe_before_dircreate(const char *local_path, uint32_t access)\n{\n    write_logf(\"OS_mkdir: before OS_DirCreate_Impl: local_path='%s', local_path_addr=%p, access=%lu\",\n               local_path ? local_path : \"(null)\", (const void *)local_path, (unsigned long)access);\n}\n\nstatic void probe_after_dircreate(int32_t rc, const char *before, const char *after)\n{\n    write_logf(\"OS_mkdir: OS_DirCreate_Impl returned rc=%ld\", (long)rc);\n\n    if ((before != NULL) && (after != NULL))\n    {\n        if (strcmp(before, after) == 0)\n        {\n            write_logf(\"OS_mkdir: local_path unchanged by OS_DirCreate_Impl: '%s'\", after);\n        }\n        else\n        {\n            /* Record before and after to detect mutation */\n            write_logf(\"OS_mkdir: local_path WAS MODIFIED by OS_DirCreate_Impl\");\n            write_logf(\"OS_mkdir: local_path before='%s'\", before);\n            write_logf(\"OS_mkdir: local_path after ='%s'\", after);\n        }\n    }\n}\n\n/*\n * Modified OS_mkdir with probes inserted. Original logic preserved.\n * Note: this file intentionally does not define main().\n */\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and input state */\n    probe_enter(path);\n\n    /* Call original translate function */\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of translation and the translated buffer */\n    probe_after_translate(return_code, local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Take a snapshot of the buffer before calling the implementation */\n        char before_snapshot[OS_MAX_LOCAL_PATH_LEN];\n        (void)memcpy(before_snapshot, local_path, sizeof(before_snapshot));\n        /* Ensure NUL termination for safe string ops */\n        before_snapshot[sizeof(before_snapshot) - 1] = '\\0';\n\n        probe_before_dircreate(local_path, access);\n\n        /* Call the underlying implementation (preserve original call) */\n        return_code = OS_DirCreate_Impl(local_path, access);\n\n        /* Ensure NUL termination for safe string ops */\n        local_path[sizeof(local_path) - 1] = '\\0';\n\n        /* Log return and detect any modification to local_path */\n        probe_after_dircreate(return_code, before_snapshot, local_path);\n    }\n\n    return return_code;\n}\n"
}