{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_TranslatePath is declared to take a non-const pointer for the input path (for example: int32 OS_TranslatePath(char *path, char *local_path);), then passing OS_mkdir's const char *path discards the const qualifier and violates MISRA C 2023 Rule 8.13. The correct prototype should accept a const char * for the input path (e.g. int32 OS_TranslatePath(const char *path, char *local_path);).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1227.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mkdir:\n```c\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirCreate_Impl(local_path, access);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe/logging helper: append a line to the evidence log file. */\nstatic void os_mkdir_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1227.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', fp);\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and key state: pointer value and a safe preview of the input path */\n    if (path == NULL)\n    {\n        os_mkdir_log(\"OS_mkdir ENTER: path=NULL, access=%u\", (unsigned)access);\n    }\n    else\n    {\n        /* Create a safe preview (avoid overruns). */\n        char path_preview[128];\n        /* Use strncpy-like behavior to avoid reading too far. */\n        size_t i;\n        for (i = 0U; i < sizeof(path_preview) - 1U && path[i] != '\\0'; ++i)\n        {\n            path_preview[i] = path[i];\n        }\n        path_preview[i] = '\\0';\n\n        os_mkdir_log(\"OS_mkdir ENTER: path_ptr=%p, path_preview=\\\"%s\\\", access=%u\",\n                     (const void *)path, path_preview, (unsigned)access);\n    }\n\n    /* Log before calling OS_TranslatePath so the call site is recorded. */\n    os_mkdir_log(\"Calling OS_TranslatePath with path_ptr=%p, local_path_ptr=%p\",\n                 (const void *)path, (void *)local_path);\n\n    /* Original call retained to preserve behavior (this may trigger the const-discard issue\n       if OS_TranslatePath is declared to take a non-const char *). */\n    return_code = OS_TranslatePath(path, local_path);\n\n    os_mkdir_log(\"OS_TranslatePath returned %d\", (int)return_code);\n\n    /* Log the translated local path (safe print). */\n    {\n        char local_preview[256];\n        size_t j;\n        for (j = 0U; j < sizeof(local_preview) - 1U && local_path[j] != '\\0'; ++j)\n        {\n            local_preview[j] = local_path[j];\n        }\n        local_preview[j] = '\\0';\n\n        os_mkdir_log(\"local_path after translate: %s\", local_preview);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        os_mkdir_log(\"Calling OS_DirCreate_Impl with local_path_ptr=%p, access=%u\",\n                     (void *)local_path, (unsigned)access);\n\n        return_code = OS_DirCreate_Impl(local_path, access);\n\n        os_mkdir_log(\"OS_DirCreate_Impl returned %d\", (int)return_code);\n    }\n    else\n    {\n        os_mkdir_log(\"Skipping OS_DirCreate_Impl because OS_TranslatePath failed (%d)\", (int)return_code);\n    }\n\n    os_mkdir_log(\"OS_mkdir RETURN: %d\", (int)return_code);\n\n    return return_code;\n}\n"
}