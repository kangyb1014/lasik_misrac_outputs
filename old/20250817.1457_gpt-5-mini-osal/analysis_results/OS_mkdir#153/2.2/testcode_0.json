{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe two assignments \u2018SysMountPointLen = 0; VirtPathBegin = VirtPathLen;\u2019 are executed unconditionally but their values are never used as-is. When the function later proceeds with return_code == OS_SUCCESS the same variables are assigned new values inside the mounted-filesystem branch. In all other cases the function does not use them (return_code is set to an error and the later block that uses these variables is skipped). Thus removing these assignments would not change program behaviour \u2014 they are redundant (dead) operations.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1226.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mkdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mkdir:\n```c\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirCreate_Impl(local_path, access);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mkdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helper. Writes append-only logs to /tmp/logs/1226.txt.\n   Keeps behavior of OS_mkdir unchanged (only side-effect is logging to a file).\n*/\nstatic void OS_mkdir_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1226.txt\", \"a\");\n    if (!f)\n    {\n        /* Try to create the directory then reopen. If that fails, give up silently. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/1226.txt\", \"a\");\n    }\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_mkdir(const char *path, uint32 access)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Ensure local_path is a safe C-string for logging even if translation fails. */\n    local_path[0] = '\\0';\n\n    OS_mkdir_log(\"OS_mkdir ENTRY: path=\\\"%s\\\", access=%u\\n\", (path ? path : \"(null)\"), (unsigned)access);\n\n    return_code = OS_TranslatePath(path, local_path);\n    OS_mkdir_log(\"OS_mkdir after OS_TranslatePath: return_code=%d, local_path=\\\"%s\\\"\\n\", (int)return_code, local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirCreate_Impl(local_path, access);\n        OS_mkdir_log(\"OS_mkdir after OS_DirCreate_Impl: return_code=%d\\n\", (int)return_code);\n    }\n    else\n    {\n        OS_mkdir_log(\"OS_mkdir skipping DirCreate due to translate failure: return_code=%d\\n\", (int)return_code);\n    }\n\n    OS_mkdir_log(\"OS_mkdir EXIT: return_code=%d\\n\", (int)return_code);\n\n    return return_code;\n}\n"
}