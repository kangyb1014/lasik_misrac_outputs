{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_MutSemTake_Impl:\n```c\nint32 OS_MutSemTake_Impl(const OS_object_token_t *token)\n{\n    int                              status;\n    OS_impl_mutex_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    /*\n    ** Lock the mutex\n    */\n    status = pthread_mutex_lock(&(impl->id));\n    if (status != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_MutSemTake_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_mutex_internal_record_t OS_impl_mutex_table[OS_MAX_MUTEXES]\n...\ntypedef struct\n{\n    pthread_mutex_t id;\n} OS_impl_mutex_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef int32_t   int32\n...\n#define OS_SEM_FAILURE (-6)\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I reviewed the provided function and related definitions for usage of compiler-specific language extensions (examples: GCC/Clang __attribute__ or __extension__ tokens, __asm__, statement expressions ({ ... }), typeof, nested functions, asm labels, nonstandard storage-class specifiers, or other constructs explicitly documented as compiler extensions). None of these are present. Specific notes:\n\n- The function signature and use of typedefs (int32, OS_object_token_t, OS_impl_mutex_internal_record_t) are standard C (typedefs and incomplete type declarations are part of the language).\n- The OS_OBJECT_TABLE_GET macro is a plain macro that computes an address expression; macro usage itself is standard C. Although it takes the address of its tok argument (&(tok)), that is a valid C expression when used with an lvalue (and in the shown call the macro is invoked with *token producing an lvalue). This is potentially fragile but not a compiler language extension.\n- The array declaration for OS_impl_mutex_table and the struct with pthread_mutex_t are standard C declarations; pthread_mutex_t and pthread_mutex_lock are POSIX library APIs, not language extensions.\n- Integer typedefs (int32 from int32_t) and numeric macros (OS_SEM_FAILURE, OS_SUCCESS) are standard preprocessor/typedef usage.\n- Comments, return statements, and basic control flow used in the function are all standard C.\n\nTherefore there are no code fragments in the provided code that use compiler-specific language extensions that would trigger MISRA C 2023 Rule 1.2."
}