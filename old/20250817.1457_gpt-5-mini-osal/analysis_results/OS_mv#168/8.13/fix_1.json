{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\ntypedef int32_t int32;\nstatic const int32 OS_SUCCESS = 0;\nstatic void log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1347.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\nstatic void log_path_snapshot(const char *label, const char *path)\n{\n    char buf[256];\n    if (path == NULL)\n    {\n        snprintf(buf, sizeof(buf), \"%s: (null)\", label);\n    }\n    else\n    {\n        /* Copy at most sizeof(buf)-1 to ensure NUL termination */\n        size_t n = strlen(path);\n        if (n >= sizeof(buf))\n        {\n            /* Truncate for safety */\n            strncpy(buf, path, sizeof(buf) - 4);\n            buf[sizeof(buf) - 4] = '\\0';\n            strcat(buf, \"...\");\n        }\n        else\n        {\n            strncpy(buf, path, sizeof(buf));\n            buf[sizeof(buf) - 1] = '\\0';\n        }\n        char tmp[288];\n        snprintf(tmp, sizeof(tmp), \"%s: '%s' (ptr=%p)\", label, buf, (const void *)path);\n        strncpy(buf, tmp, sizeof(buf));\n        buf[sizeof(buf) - 1] = '\\0';\n    }\n\n    log_append(\"%s\", buf);\n}\nstatic int32 OS_remove_with_logging(const char *path)\n{\n    log_append(\"[OS_remove_with_logging] Enter\");\n    log_path_snapshot(\"[OS_remove_with_logging] argument (const char *)\", path);\n\n    /*\n     * Document in the log that a non-const prototype will be invoked. This is\n     * the key evidence of the scenario: a function that accepts a non-const\n     * pointer is being called with data that the caller holds as const.\n     */\n    log_append(\"[OS_remove_with_logging] Invoking OS_remove(char *) - potential const-discard\");\n\n    /* Forward the call. Cast performed here to match the external prototype. */\n    int32 rc = OS_remove((char *)path);\n\n    log_append(\"[OS_remove_with_logging] OS_remove returned %d\", (int)rc);\n    log_append(\"[OS_remove_with_logging] Exit\");\n    return rc;\n}\n\nint32 OS_mv(const char *src, const char *dest)\n{\n    int32 return_code;\n\n    log_append(\"[OS_mv] Enter\");\n    log_path_snapshot(\"[OS_mv] src\", src);\n    log_path_snapshot(\"[OS_mv] dest\", dest);\n\n    /* First try rename - this only works if it is on the same filesystem */\n    log_append(\"[OS_mv] Calling OS_rename(src, dest)\");\n    return_code = OS_rename(src, dest);\n    log_append(\"[OS_mv] OS_rename returned %d\", (int)return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        log_append(\"[OS_mv] OS_rename failed, attempting OS_cp(src, dest)\");\n        return_code = OS_cp(src, dest);\n        log_append(\"[OS_mv] OS_cp returned %d\", (int)return_code);\n        if (return_code == OS_SUCCESS)\n        {\n            log_append(\"[OS_mv] Copy succeeded, attempting to remove source\");\n            /*\n             * Call the wrapper that logs the const-discarding call. This\n             * preserves original logic (attempt to remove the source) while\n             * producing the runtime evidence requested.\n             */\n            (void)OS_remove_with_logging(src);\n        }\n        else\n        {\n            log_append(\"[OS_mv] Copy failed, not removing source\");\n        }\n    }\n    else\n    {\n        log_append(\"[OS_mv] Rename succeeded, nothing more to do\");\n    }\n\n    log_append(\"[OS_mv] Exit (return %d)\", (int)return_code);\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmp8zbfijhy/src/src/os/shared/inc/os-shared-globaldefs.h:36,\n                 from /tmp/tmp8zbfijhy/src/src/os/shared/inc/os-shared-file.h:30,\n                 from /tmp/tmp8zbfijhy/src/src/os/shared/src/osapi-file.c:49:\n/tmp/tmp8zbfijhy/src/src/os/inc/osapi-error.h:96:41: error: expected identifier or '(' before numeric constant\n   96 | #define OS_SUCCESS                     (0)   /**< @brief Successful execution */\n      |                                         ^\n/tmp/tmp8zbfijhy/src/src/os/shared/src/osapi-file.c:467:20: note: in expansion of macro 'OS_SUCCESS'\n  467 | static const int32 OS_SUCCESS = 0;\n      |                    ^~~~~~~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:174: CMakeFiles/osal.dir/src/os/shared/src/osapi-file.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_mv as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n\ntypedef int32_t int32;\n\n/*\n * Note: OS_SUCCESS is defined elsewhere in the project as a macro. Do NOT\n * redefine it here; removing the conflicting local definition fixes the\n * compile-time macro collision.\n */\n\n/* External functions provided elsewhere in the project */\nextern int32 OS_remove(char *path);\nextern int32 OS_rename(const char *src, const char *dest);\nextern int32 OS_cp(const char *src, const char *dest);\n\nstatic void log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1347.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic void log_path_snapshot(const char *label, const char *path)\n{\n    char buf[256];\n    if (path == NULL)\n    {\n        snprintf(buf, sizeof(buf), \"%s: (null)\", label);\n    }\n    else\n    {\n        /* Copy at most sizeof(buf)-1 to ensure NUL termination */\n        size_t n = strlen(path);\n        if (n >= sizeof(buf))\n        {\n            /* Truncate for safety */\n            strncpy(buf, path, sizeof(buf) - 4);\n            buf[sizeof(buf) - 4] = '\\0';\n            strcat(buf, \"...\");\n        }\n        else\n        {\n            strncpy(buf, path, sizeof(buf));\n            buf[sizeof(buf) - 1] = '\\0';\n        }\n        char tmp[288];\n        snprintf(tmp, sizeof(tmp), \"%s: '%s' (ptr=%p)\", label, buf, (const void *)path);\n        strncpy(buf, tmp, sizeof(buf));\n        buf[sizeof(buf) - 1] = '\\0';\n    }\n\n    log_append(\"%s\", buf);\n}\n\nstatic int32 OS_remove_with_logging(const char *path)\n{\n    log_append(\"[OS_remove_with_logging] Enter\");\n    log_path_snapshot(\"[OS_remove_with_logging] argument (const char *)\", path);\n\n    /*\n     * Document in the log that a non-const prototype will be invoked. This is\n     * the key evidence of the scenario: a function that accepts a non-const\n     * pointer is being called with data that the caller holds as const.\n     */\n    log_append(\"[OS_remove_with_logging] Invoking OS_remove(char *) - potential const-discard\");\n\n    /* Forward the call. Cast performed here to match the external prototype. */\n    int32 rc = OS_remove((char *)path);\n\n    log_append(\"[OS_remove_with_logging] OS_remove returned %d\", (int)rc);\n    log_append(\"[OS_remove_with_logging] Exit\");\n    return rc;\n}\n\nint32 OS_mv(const char *src, const char *dest)\n{\n    int32 return_code;\n\n    log_append(\"[OS_mv] Enter\");\n    log_path_snapshot(\"[OS_mv] src\", src);\n    log_path_snapshot(\"[OS_mv] dest\", dest);\n\n    /* First try rename - this only works if it is on the same filesystem */\n    log_append(\"[OS_mv] Calling OS_rename(src, dest)\");\n    return_code = OS_rename(src, dest);\n    log_append(\"[OS_mv] OS_rename returned %d\", (int)return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        log_append(\"[OS_mv] OS_rename failed, attempting OS_cp(src, dest)\");\n        return_code = OS_cp(src, dest);\n        log_append(\"[OS_mv] OS_cp returned %d\", (int)return_code);\n        if (return_code == OS_SUCCESS)\n        {\n            log_append(\"[OS_mv] Copy succeeded, attempting to remove source\");\n            /*\n             * Call the wrapper that logs the const-discarding call. This\n             * preserves original logic (attempt to remove the source) while\n             * producing the runtime evidence requested.\n             */\n            (void)OS_remove_with_logging(src);\n        }\n        else\n        {\n            log_append(\"[OS_mv] Copy failed, not removing source\");\n        }\n    }\n    else\n    {\n        log_append(\"[OS_mv] Rename succeeded, nothing more to do\");\n    }\n\n    log_append(\"[OS_mv] Exit (return %d)\", (int)return_code);\n    return return_code;\n}\n",
  "explanation": "The build error was caused by a local definition \"static const int32 OS_SUCCESS = 0;\" colliding with a project-wide OS_SUCCESS macro. I removed that conflicting local definition. I also added the necessary standard includes and declared the external OS functions as prototypes (not mocks). No macros were defined and the original OS_mv logic was preserved."
}