{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_mv:\n```c\nint32 OS_mv(const char *src, const char *dest)\n{\n    int32 return_code;\n\n    /* First try rename - this only works if it is on the same filesystem */\n    return_code = OS_rename(src, dest);\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_cp(src, dest);\n        if (return_code == OS_SUCCESS)\n        {\n            OS_remove(src);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nOS_remove(src);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "This call violates MISRA C 2023 Rule 8.13 if the prototype of OS_remove accepts a non-const pointer. Example violating scenario: OS_remove is declared as\n    int32 OS_remove(char *path);\nthen calling OS_remove(src) where src is declared as const char *src discards the const qualifier and therefore breaches the requirement that pointers should point to const-qualified types whenever possible. Fix: change the OS_remove prototype to accept const char * (int32 OS_remove(const char *path)) if it does not modify the pointed-to data, or otherwise justify and document why a non-const parameter is required."
}