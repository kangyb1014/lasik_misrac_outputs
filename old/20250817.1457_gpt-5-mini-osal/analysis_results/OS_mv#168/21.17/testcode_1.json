{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memchr(name_ptr, 0, OS_MAX_FILE_NAME) can read up to OS_MAX_FILE_NAME bytes starting at name_ptr, but name_ptr points into the caller-provided VirtualPath buffer and there is no guarantee that that many bytes are valid beyond name_ptr. For example, if VirtualPath is a 20-byte buffer (including the terminating NUL) and name_ptr points to byte index 15, a large OS_MAX_FILE_NAME (e.g. 255) will cause memchr to read well past the 20 bytes of the VirtualPath object and thus access out of bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mv code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1351.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mv as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mv:\n```c\nint32 OS_mv(const char *src, const char *dest)\n{\n    int32 return_code;\n\n    /* First try rename - this only works if it is on the same filesystem */\n    return_code = OS_rename(src, dest);\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_cp(src, dest);\n        if (return_code == OS_SUCCESS)\n        {\n            OS_remove(src);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mv code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe logging helper - appends control flow and state information to a file.\n   Writes timestamp, event description, pointer values for src/dest, NULL flags and return code.\n   Does not dereference src or dest to avoid reading caller-provided buffers. */\nstatic void probe_log(const char *event, const char *src, const char *dest, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1351.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, do not change program behavior. */\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] %s src=%p dest=%p src_is_null=%d dest_is_null=%d return_code=%d\\n\",\n            (long)t,\n            event,\n            (const void *)src,\n            (const void *)dest,\n            (int)(src == NULL),\n            (int)(dest == NULL),\n            (int)return_code);\n\n    fclose(f);\n}\n\nint32 OS_mv(const char *src, const char *dest)\n{\n    int32 return_code;\n\n    probe_log(\"OS_mv_enter\", src, dest, 0);\n\n    /* First try rename - this only works if it is on the same filesystem */\n    probe_log(\"before_OS_rename\", src, dest, 0);\n    return_code = OS_rename(src, dest);\n    probe_log(\"after_OS_rename\", src, dest, return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"rename_failed_try_cp\", src, dest, return_code);\n\n        return_code = OS_cp(src, dest);\n        probe_log(\"after_OS_cp\", src, dest, return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            probe_log(\"cp_succeeded_before_remove\", src, dest, return_code);\n            OS_remove(src);\n            probe_log(\"after_OS_remove\", src, dest, 0);\n        }\n    }\n\n    probe_log(\"OS_mv_exit\", src, dest, return_code);\n\n    return return_code;\n}\n"
}