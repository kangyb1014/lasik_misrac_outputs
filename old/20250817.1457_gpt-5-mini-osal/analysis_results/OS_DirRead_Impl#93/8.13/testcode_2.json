{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_DirRead_Impl the local variable 'impl' is only used to read the member 'dp' (assigned from the object table and then passed to readdir). The code never modifies the object through 'impl', so it could and should be declared as a pointer to const: \"const OS_impl_dir_internal_record_t *impl;\" (this still allows using the member impl->dp of type DIR* when calling readdir). According to MISRA C 2023 Rule 8.13, the current declaration (non-const pointer) violates the rule because the pointer could point to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirRead_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/747.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirRead_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirRead_Impl:\n```c\nint32 OS_DirRead_Impl(const OS_object_token_t *token, os_dirent_t *dirent)\n{\n    struct dirent *                de;\n    OS_impl_dir_internal_record_t *impl;\n    impl = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n\n    /* NOTE - the readdir() call is non-reentrant ....\n     * However, this is performed while the global dir table lock is taken.\n     * Therefore this ensures that only one such call can occur at any given time.\n     *\n     * Static analysis tools may warn about this because they do not know\n     * this function is externally serialized via the global lock.\n     */\n    /* cppcheck-suppress readdirCalled */\n    /* cppcheck-suppress nonreentrantFunctionsreaddir */\n    de = readdir(impl->dp);\n    if (de == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    strncpy(dirent->FileName, de->d_name, sizeof(dirent->FileName) - 1);\n    dirent->FileName[sizeof(dirent->FileName) - 1] = 0;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_DirRead_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <dirent.h>\n\n/* Probe function to log control flow and state for OS_DirRead_Impl.\n * Appends human-readable traces to /tmp/logs/747.txt.\n * This preserves original function logic and only observes state.\n */\nstatic void OS_DirRead_Log(const char *stage,\n                           const void *token_ptr,\n                           const void *impl_ptr,\n                           const void *dp_ptr,\n                           const char *d_name,\n                           const char *final_filename)\n{\n    FILE *f = fopen(\"/tmp/logs/747.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_DirRead_Impl] Stage: %s\\n\", stage);\n    fprintf(f, \"  token=%p\\n\", token_ptr);\n    fprintf(f, \"  impl=%p\\n\", impl_ptr);\n    fprintf(f, \"  impl->dp=%p\\n\", dp_ptr);\n    if (d_name != NULL)\n    {\n        fprintf(f, \"  readdir name=\\\"%s\\\"\\n\", d_name);\n    }\n    if (final_filename != NULL)\n    {\n        fprintf(f, \"  final dirent->FileName=\\\"%s\\\"\\n\", final_filename);\n    }\n    fprintf(f, \"\\n\");\n\n    fclose(f);\n}\n\nint32 OS_DirRead_Impl(const OS_object_token_t *token, os_dirent_t *dirent)\n{\n    struct dirent *                de;\n    OS_impl_dir_internal_record_t *impl;\n\n    /* Retrieve implementation record from the object table (original logic). */\n    impl = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n\n    /* Log state after obtaining the impl pointer. */\n    OS_DirRead_Log(\"after_impl_assigned\",\n                   (const void *)token,\n                   (const void *)impl,\n                   (const void *)(impl ? impl->dp : NULL),\n                   NULL,\n                   NULL);\n\n    /* NOTE - the readdir() call is non-reentrant ....\n     * However, this is performed while the global dir table lock is taken.\n     * Therefore this ensures that only one such call can occur at any given time.\n     *\n     * Static analysis tools may warn about this because they do not know\n     * this function is externally serialized via the global lock.\n     */\n    /* cppcheck-suppress readdirCalled */\n    /* cppcheck-suppress nonreentrantFunctionsreaddir */\n    de = readdir(impl->dp);\n\n    /* Log the result of readdir (NULL or name). */\n    OS_DirRead_Log(\"after_readdir\",\n                   (const void *)token,\n                   (const void *)impl,\n                   (const void *)(impl ? impl->dp : NULL),\n                   (de ? de->d_name : NULL),\n                   NULL);\n\n    if (de == NULL)\n    {\n        /* Log the error return path. */\n        OS_DirRead_Log(\"return_error_de_null\",\n                       (const void *)token,\n                       (const void *)impl,\n                       (const void *)(impl ? impl->dp : NULL),\n                       NULL,\n                       NULL);\n        return OS_ERROR;\n    }\n\n    strncpy(dirent->FileName, de->d_name, sizeof(dirent->FileName) - 1);\n    dirent->FileName[sizeof(dirent->FileName) - 1] = 0;\n\n    /* Log the successful path and the filename copied into dirent. */\n    OS_DirRead_Log(\"return_success\",\n                   (const void *)token,\n                   (const void *)impl,\n                   (const void *)(impl ? impl->dp : NULL),\n                   (de ? de->d_name : NULL),\n                   dirent->FileName);\n\n    return OS_SUCCESS;\n}\n"
}