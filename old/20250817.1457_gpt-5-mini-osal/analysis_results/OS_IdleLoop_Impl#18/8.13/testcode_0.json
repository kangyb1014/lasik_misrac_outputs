{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the address of POSIX_GlobalVars.NormalSigMask (a non-const object) to sigsuspend which takes a const sigset_t *; if NormalSigMask is not modified after initialization it should be declared const (e.g. const sigset_t NormalSigMask). Because the object is used read-only here but is not const-qualified, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_IdleLoop_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/147.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_IdleLoop_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_IdleLoop_Impl:\n```c\nvoid OS_IdleLoop_Impl(void)\n{\n    /*\n     * Unblock signals and wait for something to occur\n     *\n     * Note - \"NormalSigMask\" was calculated during task init to be the original signal mask\n     * of the process PLUS all \"RT\" signals.  The RT signals are used by timers, so we want\n     * to keep them masked here (this is different than the original POSIX impl).  The\n     * timebase objects have a dedicated thread that will be doing \"sigwait\" on those.\n     */\n    sigsuspend(&POSIX_GlobalVars.NormalSigMask);\n}\n```\n</target_code>\nPlease provide the modified OS_IdleLoop_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <signal.h>\n#include <unistd.h>\n#include <pthread.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\nvoid OS_IdleLoop_Impl(void)\n{\n    /*\n     * Unblock signals and wait for something to occur\n     *\n     * Note - \"NormalSigMask\" was calculated during task init to be the original signal mask\n     * of the process PLUS all \"RT\" signals.  The RT signals are used by timers, so we want\n     * to keep them masked here (this is different than the original POSIX impl).  The\n     * timebase objects have a dedicated thread that will be doing \"sigwait\" on those.\n     */\n\n    /* Probe: ensure log directory exists (ignore errors) */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    /* Probe: open log file and record control flow/state before calling sigsuspend */\n    FILE *log = fopen(\"/tmp/logs/147.txt\", \"a\");\n    if (log != NULL)\n    {\n        pid_t pid = getpid();\n        unsigned long tid = (unsigned long)pthread_self();\n        fprintf(log, \"OS_IdleLoop_Impl: pid=%d, thread=%lu - entering idle loop (about to call sigsuspend)\\n\", (int)pid, tid);\n\n        /* Dump membership of common signal numbers (read-only using sigismember) */\n        for (int sig = 1; sig <= 64; ++sig)\n        {\n            int ism = sigismember(&POSIX_GlobalVars.NormalSigMask, sig);\n            if (ism == 1)\n            {\n                fprintf(log, \"  NormalSigMask: signal %d = MEMBER\\n\", sig);\n            }\n            else if (ism == 0)\n            {\n                fprintf(log, \"  NormalSigMask: signal %d = NOT_MEMBER\\n\", sig);\n            }\n            else\n            {\n                /* sigismember returns -1 on error (invalid signal number) */\n                fprintf(log, \"  NormalSigMask: signal %d = ERROR (errno=%d)\\n\", sig, errno);\n            }\n        }\n\n        fflush(log);\n        fclose(log);\n    }\n\n    /* Original behavior: wait for a signal that is not masked\n     * NOTE: sigsuspend takes a const sigset_t *; we intentionally pass the address of\n     * the (non-const) POSIX_GlobalVars.NormalSigMask here to reproduce the reported scenario.\n     */\n    sigsuspend(&POSIX_GlobalVars.NormalSigMask);\n\n    /* Probe: sigsuspend returns only when a signal handler was executed (returns -1 and errno is set)\n     * Log the return so callers/reproducers can see that the idle loop resumed.\n     */\n    int saved_errno = errno;\n    log = fopen(\"/tmp/logs/147.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_IdleLoop_Impl: sigsuspend returned, errno=%d\\n\", saved_errno);\n        fflush(log);\n        fclose(log);\n    }\n}\n"
}