{
  "user_message": "An agent A claimed that the following OS_IdleLoop_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_IdleLoop_Impl.\n```c\nvoid OS_IdleLoop_Impl(void)\n{\n    /*\n     * Unblock signals and wait for something to occur\n     *\n     * Note - \"NormalSigMask\" was calculated during task init to be the original signal mask\n     * of the process PLUS all \"RT\" signals.  The RT signals are used by timers, so we want\n     * to keep them masked here (this is different than the original POSIX impl).  The\n     * timebase objects have a dedicated thread that will be doing \"sigwait\" on those.\n     */\n    sigsuspend(&POSIX_GlobalVars.NormalSigMask);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The call passes the address of POSIX_GlobalVars.NormalSigMask (a non-const object) to sigsuspend which takes a const sigset_t *; if NormalSigMask is not modified after initialization it should be declared const (e.g. const sigset_t NormalSigMask). Because the object is used read-only here but is not const-qualified, this violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nvoid OS_IdleLoop_Impl(void)\n{\n    /*\n     * Unblock signals and wait for something to occur\n     *\n     * Note - \"NormalSigMask\" was calculated during task init to be the original signal mask\n     * of the process PLUS all \"RT\" signals.  The RT signals are used by timers, so we want\n     * to keep them masked here (this is different than the original POSIX impl).  The\n     * timebase objects have a dedicated thread that will be doing \"sigwait\" on those.\n     */\n\n    /* Probe: ensure log directory exists (ignore errors) */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    /* Probe: open log file and record control flow/state before calling sigsuspend */\n    FILE *log = fopen(\"/tmp/logs/147.txt\", \"a\");\n    if (log != NULL)\n    {\n        pid_t pid = getpid();\n        unsigned long tid = (unsigned long)pthread_self();\n        fprintf(log, \"OS_IdleLoop_Impl: pid=%d, thread=%lu - entering idle loop (about to call sigsuspend)\\n\", (int)pid, tid);\n\n        /* Dump membership of common signal numbers (read-only using sigismember) */\n        for (int sig = 1; sig <= 64; ++sig)\n        {\n            int ism = sigismember(&POSIX_GlobalVars.NormalSigMask, sig);\n            if (ism == 1)\n            {\n                fprintf(log, \"  NormalSigMask: signal %d = MEMBER\\n\", sig);\n            }\n            else if (ism == 0)\n            {\n                fprintf(log, \"  NormalSigMask: signal %d = NOT_MEMBER\\n\", sig);\n            }\n            else\n            {\n                /* sigismember returns -1 on error (invalid signal number) */\n                fprintf(log, \"  NormalSigMask: signal %d = ERROR (errno=%d)\\n\", sig, errno);\n            }\n        }\n\n        fflush(log);\n        fclose(log);\n    }\n\n    /* Original behavior: wait for a signal that is not masked\n     * NOTE: sigsuspend takes a const sigset_t *; we intentionally pass the address of\n     * the (non-const) POSIX_GlobalVars.NormalSigMask here to reproduce the reported scenario.\n     */\n    sigsuspend(&POSIX_GlobalVars.NormalSigMask);\n\n    /* Probe: sigsuspend returns only when a signal handler was executed (returns -1 and errno is set)\n     * Log the return so callers/reproducers can see that the idle loop resumed.\n     */\n    int saved_errno = errno;\n    log = fopen(\"/tmp/logs/147.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_IdleLoop_Impl: sigsuspend returned, errno=%d\\n\", saved_errno);\n        fflush(log);\n        fclose(log);\n    }\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_IdleLoop_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. MISRA C:2023 Rule 8.13 concerns pointer types and says that pointers should point to const-qualified types whenever possible. In this call sigsuspend has prototype sigsuspend(const sigset_t *); the parameter type is already a pointer-to-const, so the pointer target is const-qualified at the call site. Passing the address of a non-const object to a function that takes a pointer-to-const is allowed in C and does not by itself violate 8.13. Agent A\u2019s suggestion (making POSIX_GlobalVars.NormalSigMask itself const if it is never modified) is a sensible defensive/clarifying change, but it is a recommendation \u2014 not a requirement of Rule 8.13 in this context. Therefore the reported violation is incorrect."
}