{
  "user_message": "An agent A claimed that the following OS_GetFsInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_GetFsInfo.\n```c\nint32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filesys_info);\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer variable 'record' is declared as OS_common_record_t * but is only used for read access (record->active_id) and is passed to match functions that take a const OS_common_record_t *. It should be declared const OS_common_record_t *record (and, if feasible, iterator->base could be const OS_common_record_t * as well) to comply with MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1419.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filesys_info);\n\n    probe_logf(\"OS_GetFsInfo entry: filesys_info=%p\", (void *)filesys_info);\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n\n    probe_logf(\"filesys_info cleared (size=%zu)\", sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    probe_logf(\"Set MaxFds=%u MaxVolumes=%u\",\n               (unsigned)filesys_info->MaxFds,\n               (unsigned)filesys_info->MaxVolumes);\n\n    /* Count free file descriptors */\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n    probe_logf(\"Iterator initialized for STREAMS: iter=%p\", (void *)&iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n        probe_logf(\"Found free FD: FreeFds=%u iter=%p\",\n                   (unsigned)filesys_info->FreeFds, (void *)&iter);\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    probe_logf(\"Finished STREAMS iteration: FreeFds=%u\", (unsigned)filesys_info->FreeFds);\n\n    /* Count free volumes */\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n    probe_logf(\"Iterator initialized for FILESYSTEMS: iter=%p\", (void *)&iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n        probe_logf(\"Found free Volume: FreeVolumes=%u iter=%p\",\n                   (unsigned)filesys_info->FreeVolumes, (void *)&iter);\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    probe_logf(\"Finished FILESYSTEMS iteration: FreeVolumes=%u\", (unsigned)filesys_info->FreeVolumes);\n\n    probe_logf(\"OS_GetFsInfo exit: status=%d FreeFds=%u FreeVolumes=%u\",\n               (int)OS_SUCCESS,\n               (unsigned)filesys_info->FreeFds,\n               (unsigned)filesys_info->FreeVolumes);\n\n    return OS_SUCCESS;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_GetFsInfo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not supported by the code shown. MISRA C 2023 Rule 8.13 says pointers should be to const-qualified types when possible, but in the provided OS_GetFsInfo there is no local pointer named 'record'. The only pointer parameter is filesys_info which is written to (memset and field assignments), so it must not be const. The iterator variable (OS_object_iter_t iter) is not a pointer to a record in this function as shown, so there is no obvious 8.13 violation in OS_GetFsInfo itself. If the agent's observation refers to an internal iterator implementation where a local OS_common_record_t * is only used for read access, that separate implementation should be reviewed and possibly changed to const OS_common_record_t *; but that is not demonstrated in the code you've provided. Therefore the report as applied to OS_GetFsInfo is incorrect."
}