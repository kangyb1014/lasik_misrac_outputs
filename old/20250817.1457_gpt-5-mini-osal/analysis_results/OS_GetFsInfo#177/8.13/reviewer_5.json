{
  "user_message": "An agent A claimed that the following OS_GetFsInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_GetFsInfo.\n```c\nint32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filesys_info);\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The iterator match callback and its match-argument are declared as void* (OS_ObjectMatchFunc_t takes void *ref and OS_ObjectIdIteratorInit takes void *matcharg). OS_FileSysFilterFree does not modify the ref parameter (and NULL is passed here), so the pointer could be const-qualified (e.g. const void *ref and const void *matcharg). Therefore the code uses a non-const pointer where a const-qualified pointer is possible, violating MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_ensure_log_dir(void)\n{\n    /* Try to create the directory if it does not exist. Ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\nstatic void probe_log(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1419.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\nstatic void probe_log_iterator_init(const char *label, void (*matchfunc)(void *), void *matcharg, int objtype)\n{\n    char buf[256];\n\n    probe_ensure_log_dir();\n\n    /* Indicate the iterator initialization event */\n    snprintf(buf, sizeof(buf), \"%s: OS_ObjectIdIteratorInit called for objtype=%d\", label, objtype);\n    probe_log(buf);\n\n    /* Log whether matcharg is NULL (this is the important part of the violation scenario) */\n    if (matcharg == NULL)\n    {\n        snprintf(buf, sizeof(buf), \"%s: matcharg is NULL\", label);\n    }\n    else\n    {\n        snprintf(buf, sizeof(buf), \"%s: matcharg is non-NULL (%p)\", label, matcharg);\n    }\n    probe_log(buf);\n\n    /* Log whether the provided matchfunc is the OS_FileSysFilterFree function */\n    if (matchfunc == (void (*)(void *))OS_FileSysFilterFree)\n    {\n        snprintf(buf, sizeof(buf), \"%s: matchfunc is OS_FileSysFilterFree\", label);\n    }\n    else if (matchfunc == NULL)\n    {\n        snprintf(buf, sizeof(buf), \"%s: matchfunc is NULL\", label);\n    }\n    else\n    {\n        snprintf(buf, sizeof(buf), \"%s: matchfunc is some other function\", label);\n    }\n    probe_log(buf);\n}\n\nint32_t OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filesys_info);\n\n    probe_ensure_log_dir();\n    probe_log(\"OS_GetFsInfo: enter\");\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    /* First iterator: free file descriptors */\n    probe_log_iterator_init(\"OS_GetFsInfo (Fds)\", OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM);\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n        {\n            char buf[128];\n            snprintf(buf, sizeof(buf), \"OS_GetFsInfo: FreeFds incremented to %u\", (unsigned)filesys_info->FreeFds);\n            probe_log(buf);\n        }\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n    {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"OS_GetFsInfo: FreeFds final = %u\", (unsigned)filesys_info->FreeFds);\n        probe_log(buf);\n    }\n\n    /* Second iterator: free volumes */\n    probe_log_iterator_init(\"OS_GetFsInfo (Volumes)\", OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS);\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n        {\n            char buf[128];\n            snprintf(buf, sizeof(buf), \"OS_GetFsInfo: FreeVolumes incremented to %u\", (unsigned)filesys_info->FreeVolumes);\n            probe_log(buf);\n        }\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n    {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"OS_GetFsInfo: FreeVolumes final = %u\", (unsigned)filesys_info->FreeVolumes);\n        probe_log(buf);\n    }\n\n    probe_log(\"OS_GetFsInfo: exit (return OS_SUCCESS)\");\n\n    return OS_SUCCESS;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_GetFsInfo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not correct for the shown OS_GetFsInfo function. MISRA 8.13 concerns how pointer types are declared (prefer pointer-to-const where the pointed-to object is not modified). In the presented OS_GetFsInfo body there is no local pointer declaration that should be const: filesys_info is an output parameter (it is written to) so it must not be const, and the code merely calls API functions (OS_ObjectIdIteratorInit, OS_ObjectIdIteratorGetNext, etc.). The issue Agent A describes would be a property of the API declarations (OS_ObjectMatchFunc_t and OS_ObjectIdIteratorInit) \u2014 i.e. whether those prototypes could use const void * for the match argument and callback parameter \u2014 not of this function. You cannot treat a call site as violating 8.13 because the called function\u2019s prototype uses non-const; to claim a MISRA violation you must show a declaration/definition in this translation unit that should be const. If the wider codebase\u2019s iterator callback type is unnecessarily non-const, the correct place to report a potential 8.13 violation is those API declarations/definitions (after verifying that none of the uses require a mutable pointer)."
}