{
  "user_message": "An agent A claimed that the following OS_GetFsInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_GetFsInfo.\n```c\nint32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filesys_info);\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The iterator API and callback use an unqualified void * for the match argument (OS_ObjectIdIteratorInit's matcharg and OS_ObjectMatchFunc_t first parameter). The actual callback OS_FileSysFilterFree is defined as bool OS_FileSysFilterFree(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj) and does not modify ref. Passing OS_FileSysFilterFree to OS_ObjectIdIteratorInit therefore exposes a non-const pointer where a const-qualified pointer would be appropriate. To comply with MISRA C 2023 Rule 8.13 the API and callback should use const void * (and the arg member in OS_object_iter_t should be const void *) unless mutation is required.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void osfs_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1419.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    /* Log entry */\n    osfs_log(\"OS_GetFsInfo: enter, filesys_info=%p\", (void *)filesys_info);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filesys_info);\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    /* Log initial state */\n    osfs_log(\"OS_GetFsInfo: initialized MaxFds=%u MaxVolumes=%u\", (unsigned)filesys_info->MaxFds, (unsigned)filesys_info->MaxVolumes);\n\n    /* First iterator: streams */\n    osfs_log(\"OS_GetFsInfo: calling OS_ObjectIdIteratorInit(filter=OS_FileSysFilterFree, matcharg=NULL, type=OS_OBJECT_TYPE_OS_STREAM, iter=%p)\", (void *)&iter);\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n        /* Log each iteration to capture control flow and state */\n        osfs_log(\"OS_GetFsInfo: stream iterator next -> FreeFds=%u\", (unsigned)filesys_info->FreeFds);\n    }\n\n    osfs_log(\"OS_GetFsInfo: destroying stream iterator %p (final FreeFds=%u)\", (void *)&iter, (unsigned)filesys_info->FreeFds);\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    /* Second iterator: filesystems */\n    osfs_log(\"OS_GetFsInfo: calling OS_ObjectIdIteratorInit(filter=OS_FileSysFilterFree, matcharg=NULL, type=OS_OBJECT_TYPE_OS_FILESYS, iter=%p)\", (void *)&iter);\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n        /* Log each iteration to capture control flow and state */\n        osfs_log(\"OS_GetFsInfo: filesystem iterator next -> FreeVolumes=%u\", (unsigned)filesys_info->FreeVolumes);\n    }\n\n    osfs_log(\"OS_GetFsInfo: destroying filesystem iterator %p (final FreeVolumes=%u)\", (void *)&iter, (unsigned)filesys_info->FreeVolumes);\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    osfs_log(\"OS_GetFsInfo: exit returning OS_SUCCESS\");\n    return OS_SUCCESS;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_GetFsInfo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A's reasoning about the API design is sound (if the iterator API and callback really take a void *matcharg/void *ref and the callback does not modify the argument, those declarations would be candidates for const-qualification under MISRA C:2023 Rule 8.13). However, the reported violation as stated \u2014 that the shown OS_GetFsInfo function violates Rule 8.13 \u2014 is not correct. The OS_GetFsInfo body only passes NULL as the match argument and does not itself declare or manipulate a pointer that should be const. Any potential Rule 8.13 violation would be in the API declarations (e.g. OS_ObjectIdIteratorInit prototype, OS_ObjectMatchFunc_t type, OS_object_iter_t.arg member, and the OS_FileSysFilterFree definition), not in the OS_GetFsInfo usage shown. To confirm a real MISRA violation you must inspect those declarations/definitions: if they accept a non-const void * but never modify the pointee, then those declarations violate Rule 8.13 and should be changed to const void * (subject to backward-compatibility considerations)."
}