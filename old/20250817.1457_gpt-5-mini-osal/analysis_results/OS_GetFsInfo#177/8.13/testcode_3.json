{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member 'base' is declared as OS_common_record_t * but is only used for read-only access (e.g. OS_ObjectIdIteratorGetNext obtains records and passes them to match callbacks as const OS_common_record_t *). Therefore 'base' could and should be declared as const OS_common_record_t * to prevent modification and satisfy MISRA C 2023 Rule 8.13. (The 'arg' member may or may not be safely const depending on callbacks, but the non-const 'base' is a clear violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetFsInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1419.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetFsInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetFsInfo:\n```c\nint32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filesys_info);\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_GetFsInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe helper: append a formatted message to the log file. */\nstatic void OS_GetFsInfo_Log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/1419.txt\", \"a\");\n\n    if (f == NULL)\n    {\n        /* Attempt to create directory and retry once. Ignore errors if it fails. */\n        (void)mkdir(\"/tmp/logs\", 0700);\n        f = fopen(\"/tmp/logs/1419.txt\", \"a\");\n        if (f == NULL)\n        {\n            return;\n        }\n    }\n\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    (void)fputc('\\n', f);\n    (void)fclose(f);\n}\n\nint32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filesys_info);\n\n    OS_GetFsInfo_Log(\"OS_GetFsInfo: enter (filesys_info=%p)\", (void *)filesys_info);\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    OS_GetFsInfo_Log(\"OS_GetFsInfo: MaxFds=%u, MaxVolumes=%u\",\n                     (unsigned)filesys_info->MaxFds,\n                     (unsigned)filesys_info->MaxVolumes);\n\n    OS_GetFsInfo_Log(\"OS_GetFsInfo: initializing iterator for STREAM objects\");\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n        /* Log each iteration to capture how many free FDs are discovered and the iterator address */\n        OS_GetFsInfo_Log(\"OS_GetFsInfo: stream iterator hit; FreeFds=%u, iter=%p\",\n                         (unsigned)filesys_info->FreeFds,\n                         (void *)&iter);\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n    OS_GetFsInfo_Log(\"OS_GetFsInfo: finished stream iteration; FreeFds=%u\",\n                     (unsigned)filesys_info->FreeFds);\n\n    OS_GetFsInfo_Log(\"OS_GetFsInfo: initializing iterator for FILESYS objects\");\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n        /* Log each iteration to capture how many free volumes are discovered and the iterator address */\n        OS_GetFsInfo_Log(\"OS_GetFsInfo: filesys iterator hit; FreeVolumes=%u, iter=%p\",\n                         (unsigned)filesys_info->FreeVolumes,\n                         (void *)&iter);\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n    OS_GetFsInfo_Log(\"OS_GetFsInfo: finished filesys iteration; FreeVolumes=%u\",\n                     (unsigned)filesys_info->FreeVolumes);\n\n    OS_GetFsInfo_Log(\"OS_GetFsInfo: exit (return=%d)\", OS_SUCCESS);\n\n    return OS_SUCCESS;\n}\n"
}