{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'record' is declared as OS_common_record_t * but is only used for read access (record->active_id) and is passed to match functions that take a const OS_common_record_t *. It should be declared const OS_common_record_t *record (and, if feasible, iterator->base could be const OS_common_record_t * as well) to comply with MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetFsInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1419.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetFsInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetFsInfo:\n```c\nint32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filesys_info);\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_GetFsInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper - appends logs to /tmp/logs/1419.txt */\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1419.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filesys_info);\n\n    probe_logf(\"OS_GetFsInfo entry: filesys_info=%p\", (void *)filesys_info);\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n\n    probe_logf(\"filesys_info cleared (size=%zu)\", sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    probe_logf(\"Set MaxFds=%u MaxVolumes=%u\",\n               (unsigned)filesys_info->MaxFds,\n               (unsigned)filesys_info->MaxVolumes);\n\n    /* Count free file descriptors */\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n    probe_logf(\"Iterator initialized for STREAMS: iter=%p\", (void *)&iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n        probe_logf(\"Found free FD: FreeFds=%u iter=%p\",\n                   (unsigned)filesys_info->FreeFds, (void *)&iter);\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    probe_logf(\"Finished STREAMS iteration: FreeFds=%u\", (unsigned)filesys_info->FreeFds);\n\n    /* Count free volumes */\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n    probe_logf(\"Iterator initialized for FILESYSTEMS: iter=%p\", (void *)&iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n        probe_logf(\"Found free Volume: FreeVolumes=%u iter=%p\",\n                   (unsigned)filesys_info->FreeVolumes, (void *)&iter);\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    probe_logf(\"Finished FILESYSTEMS iteration: FreeVolumes=%u\", (unsigned)filesys_info->FreeVolumes);\n\n    probe_logf(\"OS_GetFsInfo exit: status=%d FreeFds=%u FreeVolumes=%u\",\n               (int)OS_SUCCESS,\n               (unsigned)filesys_info->FreeFds,\n               (unsigned)filesys_info->FreeVolumes);\n\n    return OS_SUCCESS;\n}\n"
}