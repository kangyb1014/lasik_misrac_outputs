{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator API and callback use an unqualified void * for the match argument (OS_ObjectIdIteratorInit's matcharg and OS_ObjectMatchFunc_t first parameter). The actual callback OS_FileSysFilterFree is defined as bool OS_FileSysFilterFree(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj) and does not modify ref. Passing OS_FileSysFilterFree to OS_ObjectIdIteratorInit therefore exposes a non-const pointer where a const-qualified pointer would be appropriate. To comply with MISRA C 2023 Rule 8.13 the API and callback should use const void * (and the arg member in OS_object_iter_t should be const void *) unless mutation is required.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetFsInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1419.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetFsInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetFsInfo:\n```c\nint32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filesys_info);\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_GetFsInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper: append textual logs to /tmp/logs/1419.txt */\nstatic void osfs_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1419.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    /* Log entry */\n    osfs_log(\"OS_GetFsInfo: enter, filesys_info=%p\", (void *)filesys_info);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filesys_info);\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    /* Log initial state */\n    osfs_log(\"OS_GetFsInfo: initialized MaxFds=%u MaxVolumes=%u\", (unsigned)filesys_info->MaxFds, (unsigned)filesys_info->MaxVolumes);\n\n    /* First iterator: streams */\n    osfs_log(\"OS_GetFsInfo: calling OS_ObjectIdIteratorInit(filter=OS_FileSysFilterFree, matcharg=NULL, type=OS_OBJECT_TYPE_OS_STREAM, iter=%p)\", (void *)&iter);\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n        /* Log each iteration to capture control flow and state */\n        osfs_log(\"OS_GetFsInfo: stream iterator next -> FreeFds=%u\", (unsigned)filesys_info->FreeFds);\n    }\n\n    osfs_log(\"OS_GetFsInfo: destroying stream iterator %p (final FreeFds=%u)\", (void *)&iter, (unsigned)filesys_info->FreeFds);\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    /* Second iterator: filesystems */\n    osfs_log(\"OS_GetFsInfo: calling OS_ObjectIdIteratorInit(filter=OS_FileSysFilterFree, matcharg=NULL, type=OS_OBJECT_TYPE_OS_FILESYS, iter=%p)\", (void *)&iter);\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n        /* Log each iteration to capture control flow and state */\n        osfs_log(\"OS_GetFsInfo: filesystem iterator next -> FreeVolumes=%u\", (unsigned)filesys_info->FreeVolumes);\n    }\n\n    osfs_log(\"OS_GetFsInfo: destroying filesystem iterator %p (final FreeVolumes=%u)\", (void *)&iter, (unsigned)filesys_info->FreeVolumes);\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    osfs_log(\"OS_GetFsInfo: exit returning OS_SUCCESS\");\n    return OS_SUCCESS;\n}\n"
}