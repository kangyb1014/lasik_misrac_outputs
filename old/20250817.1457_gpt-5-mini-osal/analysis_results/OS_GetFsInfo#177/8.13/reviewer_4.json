{
  "user_message": "An agent A claimed that the following OS_GetFsInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_GetFsInfo.\n```c\nint32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filesys_info);\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Yes. The iterator stores pointers that are only read and never used to modify the pointed-to objects, but none of them are const-qualified. For example, iter->base is assigned &OS_common_table[...], and the iterator only reads records (in OS_ObjectIdIteratorGetNext), so iter->base should be declared as const OS_common_record_t *; likewise iter->arg / matcharg and the match function first parameter (currently void *ref) could be const void * if the match functions do not modify the referenced data. Because these pointer targets are not const-qualified though they could be, this violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    /* Use the project's existing pointer check macro/function */\n    OS_CHECK_POINTER(filesys_info);\n\n    /* Preserve original behavior: clear the output structure */\n    memset(filesys_info, 0, sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    /* Iterate streams (file descriptors). Use the project's iterator API;\n     * pass NULL for the match function/arg to iterate all of that type. */\n    OS_ObjectIdIteratorInit(NULL, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    /* Iterate filesystems (volumes) */\n    OS_ObjectIdIteratorInit(NULL, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return OS_SUCCESS;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_GetFsInfo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not supported by the supplied function alone. OS_GetFsInfo only declares a local structure variable (OS_object_iter_t iter) and calls iterator API functions; it does not itself declare pointer variables that could obviously be const-qualified. If there is any MISRA 8.13 issue it would be in the definition of OS_object_iter_t or the iterator API (e.g. members such as base, arg, or the match callback parameter being non-const even though they are only read). That cannot be established from the snippet shown. Therefore the report that OS_GetFsInfo violates Rule 8.13 is incorrect as applied to this function; to validate the underlying concern you must inspect and possibly change the declarations of OS_object_iter_t and the iterator API (and consider ABI/backwards-compatibility implications) to determine whether those pointer types could legally be const-qualified."
}