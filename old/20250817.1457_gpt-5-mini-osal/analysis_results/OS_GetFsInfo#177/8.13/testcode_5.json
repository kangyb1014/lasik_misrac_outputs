{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator match callback and its match-argument are declared as void* (OS_ObjectMatchFunc_t takes void *ref and OS_ObjectIdIteratorInit takes void *matcharg). OS_FileSysFilterFree does not modify the ref parameter (and NULL is passed here), so the pointer could be const-qualified (e.g. const void *ref and const void *matcharg). Therefore the code uses a non-const pointer where a const-qualified pointer is possible, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetFsInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1419.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetFsInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetFsInfo:\n```c\nint32 OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filesys_info);\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_GetFsInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <stdint.h>\n\n/*\n * Probe helpers to log control flow/state for the OS_GetFsInfo function.\n * These helpers purposely do not change the logic of OS_GetFsInfo.\n */\nstatic void probe_ensure_log_dir(void)\n{\n    /* Try to create the directory if it does not exist. Ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void probe_log(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1419.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\n/*\n * Log iterator initialization details: whether the matcharg is NULL and\n * whether the match function equals the known OS_FileSysFilterFree symbol.\n * We deliberately do not try to print raw function pointer values to avoid\n * introducing additional undefined behaviour; instead we compare the pointer\n * to the known symbol and log that fact.\n */\nextern void OS_FileSysFilterFree(void *ref);\nstatic void probe_log_iterator_init(const char *label, void (*matchfunc)(void *), void *matcharg, int objtype)\n{\n    char buf[256];\n\n    probe_ensure_log_dir();\n\n    /* Indicate the iterator initialization event */\n    snprintf(buf, sizeof(buf), \"%s: OS_ObjectIdIteratorInit called for objtype=%d\", label, objtype);\n    probe_log(buf);\n\n    /* Log whether matcharg is NULL (this is the important part of the violation scenario) */\n    if (matcharg == NULL)\n    {\n        snprintf(buf, sizeof(buf), \"%s: matcharg is NULL\", label);\n    }\n    else\n    {\n        snprintf(buf, sizeof(buf), \"%s: matcharg is non-NULL (%p)\", label, matcharg);\n    }\n    probe_log(buf);\n\n    /* Log whether the provided matchfunc is the OS_FileSysFilterFree function */\n    if (matchfunc == (void (*)(void *))OS_FileSysFilterFree)\n    {\n        snprintf(buf, sizeof(buf), \"%s: matchfunc is OS_FileSysFilterFree\", label);\n    }\n    else if (matchfunc == NULL)\n    {\n        snprintf(buf, sizeof(buf), \"%s: matchfunc is NULL\", label);\n    }\n    else\n    {\n        snprintf(buf, sizeof(buf), \"%s: matchfunc is some other function\", label);\n    }\n    probe_log(buf);\n}\n\n/*\n * The original OS_GetFsInfo function with inserted probes. The logic is\n * preserved exactly; probes only log entry/exit and the iterator traversal.\n */\nint32_t OS_GetFsInfo(os_fsinfo_t *filesys_info)\n{\n    OS_object_iter_t iter;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filesys_info);\n\n    probe_ensure_log_dir();\n    probe_log(\"OS_GetFsInfo: enter\");\n\n    memset(filesys_info, 0, sizeof(*filesys_info));\n\n    filesys_info->MaxFds     = OS_MAX_NUM_OPEN_FILES;\n    filesys_info->MaxVolumes = OS_MAX_FILE_SYSTEMS;\n\n    /* First iterator: free file descriptors */\n    probe_log_iterator_init(\"OS_GetFsInfo (Fds)\", OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM);\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_STREAM, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeFds;\n        {\n            char buf[128];\n            snprintf(buf, sizeof(buf), \"OS_GetFsInfo: FreeFds incremented to %u\", (unsigned)filesys_info->FreeFds);\n            probe_log(buf);\n        }\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n    {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"OS_GetFsInfo: FreeFds final = %u\", (unsigned)filesys_info->FreeFds);\n        probe_log(buf);\n    }\n\n    /* Second iterator: free volumes */\n    probe_log_iterator_init(\"OS_GetFsInfo (Volumes)\", OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS);\n    OS_ObjectIdIteratorInit(OS_FileSysFilterFree, NULL, OS_OBJECT_TYPE_OS_FILESYS, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        ++filesys_info->FreeVolumes;\n        {\n            char buf[128];\n            snprintf(buf, sizeof(buf), \"OS_GetFsInfo: FreeVolumes incremented to %u\", (unsigned)filesys_info->FreeVolumes);\n            probe_log(buf);\n        }\n    }\n    OS_ObjectIdIteratorDestroy(&iter);\n    {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"OS_GetFsInfo: FreeVolumes final = %u\", (unsigned)filesys_info->FreeVolumes);\n        probe_log(buf);\n    }\n\n    probe_log(\"OS_GetFsInfo: exit (return OS_SUCCESS)\");\n\n    return OS_SUCCESS;\n}\n"
}