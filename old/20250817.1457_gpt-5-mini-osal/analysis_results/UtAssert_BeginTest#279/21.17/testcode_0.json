{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nstrncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1) will read up to sizeof(CurrentSegment)-1 bytes from SegmentName. If SegmentName does not point to a NUL-terminated array within that many bytes (or points to an object smaller than that length), strncpy will read beyond the bounds of the object referenced by SegmentName. Also, if SegmentName is NULL or overlaps CurrentSegment, undefined/unsafe behaviour can occur.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_BeginTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2239.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_BeginTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_BeginTest:\n```c\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_BeginTest code.\n",
  "test_code": "void UtAssert_BeginTest(const char *SegmentName)\n{\n    /* Include stdio locally to allow logging to a file without changing file-level includes */\n    #include <stdio.h>\n\n    uint32 TestSegmentCount;\n    FILE *log = fopen(\"/tmp/logs/2239.txt\", \"a\");\n\n    UT_BSP_Lock();\n\n    if (log)\n    {\n        fprintf(log, \"ENTRY: UtAssert_BeginTest called\\n\");\n        fprintf(log, \"  SegmentName (pointer) = %p\\n\", (const void *)SegmentName);\n        fprintf(log, \"  SegmentName is %s\\n\", (SegmentName == NULL) ? \"NULL\" : \"non-NULL\");\n        fprintf(log, \"  sizeof(CurrentSegment) = %zu\\n\", (size_t)sizeof(CurrentSegment));\n        fflush(log);\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    if (log)\n    {\n        fprintf(log, \"After memset: UT_SegmentCounters cleared\\n\");\n        fflush(log);\n    }\n\n    /* Probe point: record that we are about to call strncpy with the provided parameters. */\n    if (log)\n    {\n        fprintf(log, \"About to call strncpy(CurrentSegment, SegmentName, %zu)\\n\",\n                (size_t)(sizeof(CurrentSegment) - 1));\n        fflush(log);\n    }\n\n    /* Original logic preserved: this is the call that can trigger the violation if\n       SegmentName does not point to a NUL-terminated array within the specified length,\n       or if SegmentName is NULL. */\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n\n    if (log)\n    {\n        /* Log the resulting destination buffer (safe to read, it's the local/global destination).\n           If the strncpy crashed, the program will not reach this point; pre-call logs will remain\n           in the file to help reproduce the scenario. */\n        fprintf(log, \"After strncpy: CurrentSegment = '%s'\\n\", CurrentSegment);\n        fflush(log);\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n\n    if (log)\n    {\n        fprintf(log, \"Computed TestSegmentCount = %lu\\n\", (unsigned long)TestSegmentCount);\n        fclose(log);\n    }\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n"
}