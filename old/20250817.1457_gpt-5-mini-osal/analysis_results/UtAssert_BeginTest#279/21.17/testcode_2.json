{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf CurrentSegment is not an array with at least sizeof(CurrentSegment) bytes (for example if it is declared as a pointer: char *CurrentSegment), then sizeof(CurrentSegment) yields the pointer size (e.g. 8 on 64-bit). strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1) would copy up to that many bytes into a buffer that is smaller, and the subsequent explicit write CurrentSegment[sizeof(CurrentSegment) - 1] = 0 will write beyond the actual buffer bounds. This out\u2011of\u2011bounds access violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_BeginTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2239.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_BeginTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_BeginTest:\n```c\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_BeginTest code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe function to log control flow and state to /tmp/logs/2239.txt */\nstatic void UtAssert_LogProbe(const char *phase, const char *SegmentName)\n{\n    FILE *f = fopen(\"/tmp/logs/2239.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    fprintf(f, \"Phase: %s\\n\", phase);\n    fprintf(f, \"  SegmentName ptr=%p\\n\", (const void *)SegmentName);\n    if (SegmentName != NULL) {\n        /* compute length without using library string functions to avoid extra dependencies */\n        size_t seglen = 0;\n        const char *p = SegmentName;\n        while (*p != '\\0') { seglen++; p++; }\n        fprintf(f, \"  SegmentName length=%zu\\n\", seglen);\n    } else {\n        fprintf(f, \"  SegmentName is NULL\\n\");\n    }\n\n    /* Log metadata about CurrentSegment (address and compile-time sizeof) without dereferencing */\n    fprintf(f, \"  CurrentSegment addr=%p\\n\", (const void *)CurrentSegment);\n    fprintf(f, \"  sizeof(CurrentSegment)=%zu\\n\", (size_t)sizeof(CurrentSegment));\n    fprintf(f, \"  sizeof(void*)=%zu\\n\", (size_t)sizeof(void *));\n\n    fclose(f);\n}\n\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n    UtAssert_LogProbe(\"after UT_BSP_Lock\", SegmentName);\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    UtAssert_LogProbe(\"after memset\", SegmentName);\n\n    /* Log the planned copy size and pointers just before strncpy */\n    {\n        size_t planned_copy = (sizeof(CurrentSegment) > 0) ? (sizeof(CurrentSegment) - 1U) : 0U;\n        FILE *f = fopen(\"/tmp/logs/2239.txt\", \"a\");\n        if (f != NULL) {\n            fprintf(f, \"Planned strncpy copy size = %zu\\n\", planned_copy);\n            fprintf(f, \"  CurrentSegment addr=%p, SegmentName ptr=%p\\n\", (const void *)CurrentSegment, (const void *)SegmentName);\n            fclose(f);\n        }\n    }\n\n    /* Original logic: perform the copy and explicit termination */\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n\n    UtAssert_LogProbe(\"after strncpy and termination\", SegmentName);\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UtAssert_LogProbe(\"before UT_BSP_Unlock\", SegmentName);\n\n    UT_BSP_Unlock();\n\n    /* Log final call parameters */\n    {\n        FILE *f = fopen(\"/tmp/logs/2239.txt\", \"a\");\n        if (f != NULL) {\n            fprintf(f, \"Calling UT_BSP_StartTestSegment with TestSegmentCount=%u, SegmentName ptr=%p\\n\",\n                    (unsigned)TestSegmentCount, (const void *)SegmentName);\n            fclose(f);\n        }\n    }\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n"
}