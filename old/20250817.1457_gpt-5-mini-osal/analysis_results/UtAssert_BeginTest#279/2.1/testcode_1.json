{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nOn POSIX systems pthread_mutex_lock() returns 0 on success or a positive error number on failure (not a negative value). The code tests if (status < 0) so that branch can never be taken; the BSP_DEBUG(...) path is therefore unreachable. This also means the else branch (pthread_setcancelstate(...)) will be executed for both success (status == 0) and failure (status > 0), which is incorrect.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_BeginTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2233.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_BeginTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_BeginTest:\n```c\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_BeginTest code.\n",
  "test_code": "void UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    /* Probe/log helper: ensure /tmp/logs exists and open file for appending. */\n    {\n        /* Include required headers locally so this snippet is self contained when inserted. */\n        #include <stdio.h>\n        #include <sys/stat.h>\n        #include <errno.h>\n\n        FILE *log = fopen(\"/tmp/logs/2233.txt\", \"a\");\n        if (!log)\n        {\n            /* Try to create directory and open again. */\n            (void)mkdir(\"/tmp/logs\", 0755);\n            log = fopen(\"/tmp/logs/2233.txt\", \"a\");\n        }\n        if (log)\n        {\n            fprintf(log, \"UtAssert_BeginTest: entry SegmentName=\\\"%s\\\"\\n\", SegmentName ? SegmentName : \"(null)\");\n            fclose(log);\n        }\n    }\n\n    /* Original lock call (preserve behavior). */\n    UT_BSP_Lock();\n\n    /* Log that we returned from UT_BSP_Lock to capture control flow. */\n    {\n        #include <stdio.h>\n        FILE *log = fopen(\"/tmp/logs/2233.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"UtAssert_BeginTest: returned from UT_BSP_Lock\\n\");\n            fclose(log);\n        }\n    }\n\n    /*\n     * Probe pthread behavior to provide evidence for the reported violation scenario:\n     * - Acquire a mutex once (should return 0).\n     * - Call pthread_mutex_trylock on the same mutex to get a positive error (EBUSY)\n     *   without deadlocking. This demonstrates that pthread functions can return\n     *   non-negative error codes (0 for success, positive error number for failure),\n     *   which is relevant to code that incorrectly checks for negative return values.\n     */\n    {\n        /* Local includes here to make this probe self contained. */\n        #include <stdio.h>\n        #include <pthread.h>\n\n        FILE *log = fopen(\"/tmp/logs/2233.txt\", \"a\");\n        if (log)\n        {\n            pthread_mutex_t probe_mtx;\n            pthread_mutexattr_t attr;\n            int rc;\n\n            rc = pthread_mutexattr_init(&attr);\n            fprintf(log, \"probe: pthread_mutexattr_init rc=%d\\n\", rc);\n\n            /* Use a normal (default) mutex type */\n            (void)pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_NORMAL);\n\n            rc = pthread_mutex_init(&probe_mtx, &attr);\n            fprintf(log, \"probe: pthread_mutex_init rc=%d\\n\", rc);\n\n            /* First lock should succeed (rc == 0) */\n            rc = pthread_mutex_lock(&probe_mtx);\n            fprintf(log, \"probe: pthread_mutex_lock (first) rc=%d\\n\", rc);\n\n            /* Try to lock again with trylock: should return EBUSY (>0) rather than a negative value. */\n            rc = pthread_mutex_trylock(&probe_mtx);\n            fprintf(log, \"probe: pthread_mutex_trylock (second) rc=%d\\n\", rc);\n\n            /* Unlock and cleanup */\n            rc = pthread_mutex_unlock(&probe_mtx);\n            fprintf(log, \"probe: pthread_mutex_unlock rc=%d\\n\", rc);\n\n            (void)pthread_mutex_destroy(&probe_mtx);\n            (void)pthread_mutexattr_destroy(&attr);\n\n            fclose(log);\n        }\n    }\n\n    /* Preserve original logic exactly as much as possible. */\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n\n    /* Final log entry with computed TestSegmentCount. */\n    {\n        #include <stdio.h>\n        FILE *log = fopen(\"/tmp/logs/2233.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"UtAssert_BeginTest: exit TestSegmentCount=%u\\n\", (unsigned)TestSegmentCount);\n            fclose(log);\n        }\n    }\n}\n"
}