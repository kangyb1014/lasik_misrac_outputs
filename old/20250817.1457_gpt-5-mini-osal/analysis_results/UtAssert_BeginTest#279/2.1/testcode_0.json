{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe test of 'if (status < 0)' is effectively unreachable because pthread_mutex_unlock() returns 0 on success or a positive error number on failure (POSIX semantics). Thus the branch that calls BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status)) will never be taken on compliant pthread implementations, making that code unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_BeginTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2233.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_BeginTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_BeginTest:\n```c\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_BSP_Lock();\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    TestSegmentCount                           = 1 + UT_TotalCounters.TestSegmentCount;\n\n    UT_BSP_Unlock();\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_BeginTest code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <time.h>\n#include <pthread.h>\n#include <unistd.h>\n\n/* Probe logger that appends human-readable events to /tmp/logs/2233.txt. */\nstatic void UT_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2233.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    pid_t pid = getpid();\n    unsigned long tid = (unsigned long)pthread_self();\n\n    fprintf(f, \"[%ld] pid=%d tid=%lu: \", (long)t, (int)pid, tid);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid UtAssert_BeginTest(const char *SegmentName)\n{\n    uint32 TestSegmentCount;\n\n    UT_ProbeLog(\"ENTER UtAssert_BeginTest: SegmentName=\\\"%s\\\"\", SegmentName ? SegmentName : \"(null)\");\n\n    UT_BSP_Lock();\n    UT_ProbeLog(\"After UT_BSP_Lock\");\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n    UT_ProbeLog(\"After memset(UT_SegmentCounters), sizeof=%zu\", sizeof(UT_SegmentCounters));\n\n    strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1);\n    CurrentSegment[sizeof(CurrentSegment) - 1] = 0;\n    UT_ProbeLog(\"CurrentSegment set to '%s'\", CurrentSegment);\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    UT_ProbeLog(\"Computed TestSegmentCount=%u (UT_TotalCounters.TestSegmentCount=%u)\", TestSegmentCount - 1, UT_TotalCounters.TestSegmentCount);\n\n    UT_ProbeLog(\"About to call UT_BSP_Unlock\");\n    UT_BSP_Unlock();\n    UT_ProbeLog(\"Returned from UT_BSP_Unlock (control flowed past unlock)\");\n\n    UT_BSP_StartTestSegment(TestSegmentCount, SegmentName);\n    UT_ProbeLog(\"Called UT_BSP_StartTestSegment with TestSegmentCount=%u SegmentName=\\\"%s\\\"\", TestSegmentCount, SegmentName ? SegmentName : \"(null)\");\n\n    UT_ProbeLog(\"EXIT UtAssert_BeginTest: SegmentName=\\\"%s\\\"\", SegmentName ? SegmentName : \"(null)\");\n}\n"
}