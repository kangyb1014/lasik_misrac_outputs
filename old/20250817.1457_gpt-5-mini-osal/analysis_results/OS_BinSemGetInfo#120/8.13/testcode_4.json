{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code assigns the address of an entry from OS_global_bin_sem_table to a non-const pointer variable: record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token); record is declared as OS_common_record_t * but it is only used for read-only access (reading name_entry and creator). The global table is declared as OS_common_record_t *const OS_global_bin_sem_table (a const pointer to non-const elements), so the macro yields an OS_common_record_t *; since the object is not modified, the pointer should instead point to a const-qualified type (e.g. const OS_common_record_t *record, and the table declared as const OS_common_record_t *const) to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/963.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo:\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Probe logger that appends diagnostic lines to /tmp/logs/963.txt */\nstatic void OS_963_Log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    /* Ensure directory exists; ignore errors other than failure to create */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/963.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If the target file can't be opened, give up silently to avoid\n         * changing behavior of the caller. */\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    /* Log entry and parameters */\n    OS_963_Log(\"OS_BinSemGetInfo ENTER: sem_id=%u, bin_prop=%p\", (unsigned)sem_id, (void *)bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of ObjectIdGetById and token info */\n    OS_963_Log(\"OS_ObjectIdGetById returned %d; token address=%p, token_size=%zu\",\n               (int)return_code, (void *)&token, sizeof(token));\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        /* Log the obtained record pointer and some of its read-only fields */\n        OS_963_Log(\"record pointer=%p, record->name_entry=%s, record->creator=%u\",\n                   (void *)record,\n                   (record && record->name_entry) ? record->name_entry : \"(null)\",\n                   (unsigned)(record ? record->creator : 0U));\n\n        /* Preserve original logic: copy name and creator into output struct */\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n\n        /* Log state after copying into bin_prop */\n        OS_963_Log(\"After copy: bin_prop->name=%s, bin_prop->creator=%u\",\n                   bin_prop->name, (unsigned)bin_prop->creator);\n\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        /* Log result of implementation call */\n        OS_963_Log(\"OS_BinSemGetInfo_Impl returned %d\", (int)return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after release and before returning */\n        OS_963_Log(\"Token released; final return_code=%d\", (int)return_code);\n    }\n    else\n    {\n        /* Log the failure path */\n        OS_963_Log(\"OS_BinSemGetInfo: ObjectIdGetById failed with %d; returning\", (int)return_code);\n    }\n\n    return return_code;\n}\n"
}