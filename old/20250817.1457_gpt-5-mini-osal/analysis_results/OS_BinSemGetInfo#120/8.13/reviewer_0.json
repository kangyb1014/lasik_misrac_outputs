{
  "user_message": "An agent A claimed that the following OS_BinSemGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_BinSemGetInfo.\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Yes. The declaration \"extern OS_common_record_t *const OS_global_bin_sem_table\" makes the pointer itself const but the pointed-to type is non-const. In the shown usage (OS_BinSemGetInfo) the table is only read from (record->name_entry, record->creator), so the pointer should point to a const-qualified type. According to MISRA C 2023 Rule 8.13 the pointed-to type should be const whenever possible. To fix: declare the table as pointing to const objects, e.g. \"extern const OS_common_record_t *const OS_global_bin_sem_table\" and change local uses to \"const OS_common_record_t *record\" (and adjust any macros/function prototypes that return/accept the table entries accordingly).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *tag, const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/963.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tmv;\n#if defined(_WIN32) || defined(__CYGWIN__)\n    localtime_s(&tmv, &t);\n#else\n    localtime_r(&t, &tmv);\n#endif\n\n    fprintf(fp, \"%04d-%02d-%02d %02d:%02d:%02d [%s] \",\n            tmv.tm_year + 1900, tmv.tm_mon + 1, tmv.tm_mday,\n            tmv.tm_hour, tmv.tm_min, tmv.tm_sec,\n            tag);\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast to va_list to ensure the type passed to vfprintf matches the\n       prototype on all platforms (resolves potential typedef mismatches). */\n    vfprintf(fp, fmt, (va_list)ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    probe_log(\"ENTRY\", \"OS_BinSemGetInfo called sem_id=%ld, bin_prop=%p\", (long)sem_id, (void *)bin_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n    probe_log(\"STATE\", \"bin_prop cleared at %p size=%zu\", (void *)bin_prop, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    probe_log(\"STATE\", \"OS_ObjectIdGetById returned %ld; token at %p (sizeof token=%zu)\", (long)return_code, (void *)&token, sizeof(token));\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n        probe_log(\"STATE\", \"record pointer obtained: %p\", (void *)record);\n\n        if (record != NULL)\n        {\n            /* Log fields that are read-only in this function */\n            /* Protect string access in case of unexpected NULLs */\n            const char *name = NULL;\n            if (record->name_entry != NULL)\n            {\n                name = record->name_entry;\n            }\n\n            probe_log(\"STATE\", \"record->name_entry=%s\", (name != NULL) ? name : \"<NULL>\");\n            probe_log(\"STATE\", \"record->creator=%ld\", (long)record->creator);\n\n            /* Indicate the potential MISRA concern for later analysis */\n            probe_log(\"VIOLATION_HINT\", \"record variable declared as non-const (OS_common_record_t *). In this function the fields are only read. Consider using const OS_common_record_t * to satisfy MISRA Rule 8.13.\");\n\n            strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n            bin_prop->creator = record->creator;\n        }\n        else\n        {\n            probe_log(\"WARN\", \"record is NULL for sem_id=%ld\", (long)sem_id);\n        }\n\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n        probe_log(\"STATE\", \"OS_BinSemGetInfo_Impl returned %ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"STATE\", \"OS_ObjectIdRelease called for token at %p\", (void *)&token);\n    }\n    else\n    {\n        probe_log(\"ERROR\", \"OS_ObjectIdGetById failed for sem_id=%ld with return_code=%ld\", (long)sem_id, (long)return_code);\n    }\n\n    probe_log(\"EXIT\", \"OS_BinSemGetInfo returning %ld for sem_id=%ld\", (long)return_code, (long)sem_id);\n    return return_code;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is essentially correct that the code, as shown, does not follow the guidance of MISRA C 2023 Rule 8.13 in this function. In OS_BinSemGetInfo the local variable 'record' is declared as\n    OS_common_record_t *record;\nbut in this function it is only used for read-only access (record->name_entry, record->creator). Per Rule 8.13 a pointer should point to a const-qualified type whenever possible, so the local declaration should be\n    const OS_common_record_t *record;\n(which is a safe implicit conversion from a pointer-to-non-const to pointer-to-const and documents the read-only intent).\n\nThat said, the agent\u2019s suggested global change (making the table be declared as \"extern const OS_common_record_t *const OS_global_bin_sem_table\") is not strictly required to address the rule violation in this function and may be overly invasive if other code needs to modify the records. The minimal compliant fix for this function is to change the local pointer to const; changing the global table type is only appropriate if the objects really are immutable everywhere. Also be aware that any macros or APIs that return/accept the table entries may need adjustment if you do make the global table point-to-const.\n\nFinally, the provided runtime probe code failing to compile does not affect the static correctness: the original function as written can be considered nonconforming to the \u201cshould\u201d guidance of Rule 8.13 for the local pointer usage.\n"
}