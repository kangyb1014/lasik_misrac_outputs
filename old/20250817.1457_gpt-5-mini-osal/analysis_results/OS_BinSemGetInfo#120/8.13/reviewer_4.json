{
  "user_message": "An agent A claimed that the following OS_BinSemGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_BinSemGetInfo.\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code assigns the address of an entry from OS_global_bin_sem_table to a non-const pointer variable: record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token); record is declared as OS_common_record_t * but it is only used for read-only access (reading name_entry and creator). The global table is declared as OS_common_record_t *const OS_global_bin_sem_table (a const pointer to non-const elements), so the macro yields an OS_common_record_t *; since the object is not modified, the pointer should instead point to a const-qualified type (e.g. const OS_common_record_t *record, and the table declared as const OS_common_record_t *const) to satisfy MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_963_Log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    /* Ensure directory exists; ignore errors other than failure to create */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/963.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If the target file can't be opened, give up silently to avoid\n         * changing behavior of the caller. */\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    /* Log entry and parameters */\n    OS_963_Log(\"OS_BinSemGetInfo ENTER: sem_id=%u, bin_prop=%p\", (unsigned)sem_id, (void *)bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of ObjectIdGetById and token info */\n    OS_963_Log(\"OS_ObjectIdGetById returned %d; token address=%p, token_size=%zu\",\n               (int)return_code, (void *)&token, sizeof(token));\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        /* Log the obtained record pointer and some of its read-only fields */\n        OS_963_Log(\"record pointer=%p, record->name_entry=%s, record->creator=%u\",\n                   (void *)record,\n                   (record && record->name_entry) ? record->name_entry : \"(null)\",\n                   (unsigned)(record ? record->creator : 0U));\n\n        /* Preserve original logic: copy name and creator into output struct */\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n\n        /* Log state after copying into bin_prop */\n        OS_963_Log(\"After copy: bin_prop->name=%s, bin_prop->creator=%u\",\n                   bin_prop->name, (unsigned)bin_prop->creator);\n\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        /* Log result of implementation call */\n        OS_963_Log(\"OS_BinSemGetInfo_Impl returned %d\", (int)return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after release and before returning */\n        OS_963_Log(\"Token released; final return_code=%d\", (int)return_code);\n    }\n    else\n    {\n        /* Log the failure path */\n        OS_963_Log(\"OS_BinSemGetInfo: ObjectIdGetById failed with %d; returning\", (int)return_code);\n    }\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_BinSemGetInfo ENTER: sem_id=3735928559, bin_prop=0x7fff25e656a0\nOS_ObjectIdGetById returned -35; token address=0x7fff25e65650, token_size=20\nOS_BinSemGetInfo: ObjectIdGetById failed with -35; returning\nOS_BinSemGetInfo ENTER: sem_id=0, bin_prop=0x7fff25e656a0\nOS_ObjectIdGetById returned -35; token address=0x7fff25e65650, token_size=20\nOS_BinSemGetInfo: ObjectIdGetById failed with -35; returning\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 8.13 recommends that pointers should point to const-qualified types when they are only used for read access. In the shown code the local variable record is declared as OS_common_record_t * but is only used to read fields (record->name_entry and record->creator). That means record can and should be declared as const OS_common_record_t *record to satisfy the rule. The fact that the global table is declared as OS_common_record_t *const (a const pointer to non-const elements) does not prevent using a pointer-to-const for read-only access; assigning OS_common_record_t * to const OS_common_record_t * is allowed. The runtime log simply shows a failing lookup path where the branch that assigns and uses record was not executed, but this does not change the static-qualification issue. Recommended fix: change the local declaration to const OS_common_record_t *record (and, if desired for stronger guarantees, consider making the table elements const as well)."
}