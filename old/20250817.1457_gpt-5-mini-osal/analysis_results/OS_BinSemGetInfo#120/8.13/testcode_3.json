{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_BinSemGetInfo_Impl the local variable 'sem' is declared as a non-const pointer (OS_impl_binsem_internal_record_t *sem) but is assigned from OS_OBJECT_TABLE_GET(...) and only used for read-only access (sem->current_value). Per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible (i.e. const OS_impl_binsem_internal_record_t *sem). Thus the code fragment sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token); results in a non-const pointer where a const-qualified pointer would be appropriate, violating Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/963.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo:\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <string.h>\n\n/* Probe/log helper - appends diagnostic information to /tmp/logs/963.txt */\nstatic void OS_BinSemGetInfo_Log(const char *stage,\n                                 unsigned long long sem_id_val,\n                                 const void *record_ptr,\n                                 const char *record_name,\n                                 unsigned int record_creator,\n                                 const void *token_ptr,\n                                 int return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/963.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(f, \"[%ld] stage=%s sem_id=%llu token_ptr=%p record_ptr=%p return_code=%d\\n\",\n                (long)t, stage, sem_id_val, token_ptr, record_ptr, return_code);\n        if (record_name != NULL)\n        {\n            /* record_name is printed safely as a C-string previously used by the system */\n            fprintf(f, \"    record->name_entry=\\\"%s\\\" record->creator=%u\\n\",\n                    record_name, record_creator);\n        }\n        fclose(f);\n    }\n}\n\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    /* Log start state */\n    OS_BinSemGetInfo_Log(\"start\", (unsigned long long)sem_id, NULL, NULL, 0, &token, 0);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_BinSemGetInfo_Log(\"after_ObjectIdGetById\", (unsigned long long)sem_id, NULL, NULL, 0, &token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        /* Log the record pointer and some of its fields (name_entry and creator) */\n        OS_BinSemGetInfo_Log(\"after_OBJECT_TABLE_GET\",\n                             (unsigned long long)sem_id,\n                             (const void *)record,\n                             record ? record->name_entry : NULL,\n                             record ? (unsigned int)record->creator : 0u,\n                             &token,\n                             return_code);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n\n        /* Log before calling the implementation helper */\n        OS_BinSemGetInfo_Log(\"before_ImplCall\",\n                             (unsigned long long)sem_id,\n                             (const void *)record,\n                             record ? record->name_entry : NULL,\n                             record ? (unsigned int)record->creator : 0u,\n                             &token,\n                             return_code);\n\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        /* Log after Impl call and before releasing token */\n        OS_BinSemGetInfo_Log(\"after_ImplCall\",\n                             (unsigned long long)sem_id,\n                             (const void *)record,\n                             record ? record->name_entry : NULL,\n                             record ? (unsigned int)record->creator : 0u,\n                             &token,\n                             return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Final log: token released */\n        OS_BinSemGetInfo_Log(\"end\", (unsigned long long)sem_id, (const void *)record,\n                             record ? record->name_entry : NULL,\n                             record ? (unsigned int)record->creator : 0u,\n                             &token,\n                             return_code);\n    }\n\n    return return_code;\n}\n"
}