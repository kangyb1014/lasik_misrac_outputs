{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nYes. The declaration \"extern OS_common_record_t *const OS_global_bin_sem_table\" makes the pointer itself const but the pointed-to type is non-const. In the shown usage (OS_BinSemGetInfo) the table is only read from (record->name_entry, record->creator), so the pointer should point to a const-qualified type. According to MISRA C 2023 Rule 8.13 the pointed-to type should be const whenever possible. To fix: declare the table as pointing to const objects, e.g. \"extern const OS_common_record_t *const OS_global_bin_sem_table\" and change local uses to \"const OS_common_record_t *record\" (and adjust any macros/function prototypes that return/accept the table entries accordingly).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/963.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo:\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n\n/* Probe logging helper - appends messages to /tmp/logs/963.txt */\nstatic void probe_log(const char *tag, const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/963.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tmv;\n#if defined(_WIN32) || defined(__CYGWIN__)\n    localtime_s(&tmv, &t);\n#else\n    localtime_r(&t, &tmv);\n#endif\n\n    fprintf(fp, \"%04d-%02d-%02d %02d:%02d:%02d [%s] \",\n            tmv.tm_year + 1900, tmv.tm_mon + 1, tmv.tm_mday,\n            tmv.tm_hour, tmv.tm_min, tmv.tm_sec,\n            tag);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    probe_log(\"ENTRY\", \"OS_BinSemGetInfo called sem_id=%ld, bin_prop=%p\", (long)sem_id, (void *)bin_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n    probe_log(\"STATE\", \"bin_prop cleared at %p size=%zu\", (void *)bin_prop, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    probe_log(\"STATE\", \"OS_ObjectIdGetById returned %ld; token at %p (sizeof token=%zu)\", (long)return_code, (void *)&token, sizeof(token));\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n        probe_log(\"STATE\", \"record pointer obtained: %p\", (void *)record);\n\n        if (record != NULL)\n        {\n            /* Log fields that are read-only in this function */\n            /* Protect string access in case of unexpected NULLs */\n            const char *name = NULL;\n            if (record->name_entry != NULL)\n            {\n                name = record->name_entry;\n            }\n\n            probe_log(\"STATE\", \"record->name_entry=%s\", (name != NULL) ? name : \"<NULL>\");\n            probe_log(\"STATE\", \"record->creator=%ld\", (long)record->creator);\n\n            /* Indicate the potential MISRA concern for later analysis */\n            probe_log(\"VIOLATION_HINT\", \"record variable declared as non-const (OS_common_record_t *). In this function the fields are only read. Consider using const OS_common_record_t * to satisfy MISRA Rule 8.13.\");\n\n            strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n            bin_prop->creator = record->creator;\n        }\n        else\n        {\n            probe_log(\"WARN\", \"record is NULL for sem_id=%ld\", (long)sem_id);\n        }\n\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n        probe_log(\"STATE\", \"OS_BinSemGetInfo_Impl returned %ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"STATE\", \"OS_ObjectIdRelease called for token at %p\", (void *)&token);\n    }\n    else\n    {\n        probe_log(\"ERROR\", \"OS_ObjectIdGetById failed for sem_id=%ld with return_code=%ld\", (long)sem_id, (long)return_code);\n    }\n\n    probe_log(\"EXIT\", \"OS_BinSemGetInfo returning %ld for sem_id=%ld\", (long)return_code, (long)sem_id);\n    return return_code;\n}\n"
}