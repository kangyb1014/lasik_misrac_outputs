{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'record' is declared as OS_common_record_t *record but is only used to read data from the global object table (record->name_entry and record->creator). It could and should be declared as pointing to a const-qualified type (const OS_common_record_t *record) to prevent modification through this pointer and satisfy the intent of Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/963.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo:\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetInfo code.\n",
  "test_code": "int32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Local prototypes for stdio functions (declared here so this snippet is self-contained) */\n    typedef struct FILE FILE;\n    extern FILE *fopen(const char *, const char *);\n    extern int fprintf(FILE *, const char *, ...);\n    extern int fflush(FILE *);\n    extern int fclose(FILE *);\n\n    FILE *logf = fopen(\"/tmp/logs/963.txt\", \"a\");\n    if (logf)\n    {\n        /* Log function entry and parameters */\n        fprintf(logf, \"OS_BinSemGetInfo ENTRY: sem_id=%d, bin_prop=%p\\n\", (int)sem_id, (void *)bin_prop);\n        fflush(logf);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    if (logf)\n    {\n        fprintf(logf, \"After OS_CHECK_POINTER; bin_prop=%p\\n\", (void *)bin_prop);\n        fflush(logf);\n    }\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    if (logf)\n    {\n        fprintf(logf, \"After memset; cleared bin_prop at %p\\n\", (void *)bin_prop);\n        fflush(logf);\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById returned %d; token addr=%p\\n\", (int)return_code, (void *)&token);\n        fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        if (logf)\n        {\n            /* Safely log name_entry (limit length to avoid overread) */\n            size_t _log_len = sizeof(bin_prop->name) - 1;\n            const char *_name_ptr = (record && record->name_entry) ? record->name_entry : \"(null)\";\n            fprintf(logf, \"record ptr=%p, record->name_entry=\\\"%.*s\\\", record->creator=%d\\n\",\n                    (void *)record, (int)_log_len, _name_ptr, (int)record->creator);\n            fflush(logf);\n        }\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n\n        if (logf)\n        {\n            fprintf(logf, \"Copied into bin_prop: name=\\\"%s\\\", creator=%d\\n\",\n                    bin_prop->name, (int)bin_prop->creator);\n            fflush(logf);\n        }\n\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        if (logf)\n        {\n            fprintf(logf, \"OS_BinSemGetInfo_Impl returned %d\\n\", (int)return_code);\n            fflush(logf);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_BinSemGetInfo EXIT: return_code=%d\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}