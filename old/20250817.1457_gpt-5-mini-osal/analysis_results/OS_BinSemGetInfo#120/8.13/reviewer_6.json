{
  "user_message": "An agent A claimed that the following OS_BinSemGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_BinSemGetInfo.\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'record' is declared as OS_common_record_t *record but is only used to read data from the global object table (record->name_entry and record->creator). It could and should be declared as pointing to a const-qualified type (const OS_common_record_t *record) to prevent modification through this pointer and satisfy the intent of Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    FILE *logf = fopen(\"/tmp/logs/963.txt\", \"a\");\n    if (logf)\n    {\n        /* Log function entry and parameters */\n        fprintf(logf, \"OS_BinSemGetInfo ENTRY: sem_id=%d, bin_prop=%p\\n\", (int)sem_id, (void *)bin_prop);\n        fflush(logf);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    if (logf)\n    {\n        fprintf(logf, \"After OS_CHECK_POINTER; bin_prop=%p\\n\", (void *)bin_prop);\n        fflush(logf);\n    }\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    if (logf)\n    {\n        fprintf(logf, \"After memset; cleared bin_prop at %p\\n\", (void *)bin_prop);\n        fflush(logf);\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_ObjectIdGetById returned %d; token addr=%p\\n\", (int)return_code, (void *)&token);\n        fflush(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        if (logf)\n        {\n            /* Safely log name_entry (limit length to avoid overread) */\n            size_t _log_len = sizeof(bin_prop->name) - 1;\n            const char *_name_ptr = (record && record->name_entry) ? record->name_entry : \"(null)\";\n            fprintf(logf, \"record ptr=%p, record->name_entry=\\\"%.*s\\\", record->creator=%d\\n\",\n                    (void *)record, (int)_log_len, _name_ptr, (int)record->creator);\n            fflush(logf);\n        }\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n\n        if (logf)\n        {\n            fprintf(logf, \"Copied into bin_prop: name=\\\"%s\\\", creator=%d\\n\",\n                    bin_prop->name, (int)bin_prop->creator);\n            fflush(logf);\n        }\n\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        if (logf)\n        {\n            fprintf(logf, \"OS_BinSemGetInfo_Impl returned %d\\n\", (int)return_code);\n            fflush(logf);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_BinSemGetInfo EXIT: return_code=%d\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_BinSemGetInfo ENTRY: sem_id=-559038737, bin_prop=0x7fff744f8240\nAfter OS_CHECK_POINTER; bin_prop=0x7fff744f8240\nAfter memset; cleared bin_prop at 0x7fff744f8240\nOS_ObjectIdGetById returned -35; token addr=0x7fff744f81f0\nOS_BinSemGetInfo EXIT: return_code=-35\nOS_BinSemGetInfo ENTRY: sem_id=0, bin_prop=0x7fff744f8240\nAfter OS_CHECK_POINTER; bin_prop=0x7fff744f8240\nAfter memset; cleared bin_prop at 0x7fff744f8240\nOS_ObjectIdGetById returned -35; token addr=0x7fff744f81f0\nOS_BinSemGetInfo EXIT: return_code=-35\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In OS_BinSemGetInfo the local pointer \"record\" is only used to read fields (record->name_entry and record->creator) and never used to modify the object through that pointer. According to MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so the declaration should be changed to const OS_common_record_t *record. Making this change does not impede the shown usages (strncpy takes a const char * source; copying creator is a read), and thus the current non-const declaration violates the intent of Rule 8.13."
}