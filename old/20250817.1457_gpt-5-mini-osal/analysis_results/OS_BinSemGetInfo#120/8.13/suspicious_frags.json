{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo:\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_BinSemGetInfo:\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n    int32     value;\n} OS_bin_sem_prop_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* put the info into the structure */\n    sem_prop->value = sem->current_value;\n    return OS_SUCCESS;\n}\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_common_record_t *const OS_global_bin_sem_table\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "extern OS_common_record_t *const OS_global_bin_sem_table",
    "strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);",
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])",
    "sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);",
    "record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);",
    "OS_impl_binsem_internal_record_t *sem;",
    "OS_common_record_t *record;"
  ],
  "explanation": "Fragments not listed above were reviewed and are not suspicious with respect to MISRA C:2023 Rule 8.13 because they involve objects that must be written or modified (so pointers to non-const are required) or already use const where appropriate. Specifically:\n\n- The parameter OS_bin_sem_prop_t *bin_prop is an output buffer (it is memset and written to), so it must be a non-const pointer and should not be changed to point to a const-qualified type.\n- The local token (OS_object_token_t token) is passed by address to OS_ObjectIdGetById and OS_ObjectIdRelease which initialize and/or modify it; the pointed-to object cannot be const.\n- The call to memset(bin_prop, 0, ...) obviously writes through bin_prop; bin_prop must remain non-const.\n- The return_code local and scalar parameters are not pointer types and thus not relevant to Rule 8.13.\n- The OS_BinSemGetInfo_Impl signature already declares its token parameter as const (const OS_object_token_t *), so that usage is compliant; its sem_prop parameter is non-const because the implementation writes into it.\n\nThe fragments reported are places where non-const pointers (or pointers-to-non-const data via table declarations/macros) are used to read data and could plausibly be const-qualified (for example, references to global object tables and local record pointers that are only read). These should be investigated to determine whether the pointed-to types can be made const to satisfy Rule 8.13."
}