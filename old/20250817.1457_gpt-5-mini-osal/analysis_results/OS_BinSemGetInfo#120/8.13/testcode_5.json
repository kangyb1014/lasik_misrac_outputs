{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'sem' is declared as a non-const pointer (OS_impl_binsem_internal_record_t *sem) but is only used for read access (sem->current_value). It could and should be declared as pointing to a const-qualified type (const OS_impl_binsem_internal_record_t *sem), so Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/963.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo:\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging function: append simple textual logs to /tmp/logs/963.txt */\nstatic void OS_BinSemGetInfo_Log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/963.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    /* Write formatted message and newline */\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n\n    fclose(f);\n}\n\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    OS_BinSemGetInfo_Log(\"ENTER: OS_BinSemGetInfo sem_id=%ld bin_prop=%p\", (long)sem_id, (void *)bin_prop);\n\n    /* Check parameters */\n    if (bin_prop == NULL)\n    {\n        OS_BinSemGetInfo_Log(\"PARAM ERROR: bin_prop is NULL\");\n    }\n\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n    OS_BinSemGetInfo_Log(\"After memset: bin_prop zeroed\");\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    OS_BinSemGetInfo_Log(\"OS_ObjectIdGetById returned %d, token_address=%p\", return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n        if (record == NULL)\n        {\n            OS_BinSemGetInfo_Log(\"ERROR: OS_OBJECT_TABLE_GET returned NULL record for token=%p\", (void *)&token);\n        }\n        else\n        {\n            /* Log record state observed (name and creator) before copying */\n            OS_BinSemGetInfo_Log(\"record=%p name_entry=\\\"%s\\\" creator=%u\",\n                                 (void *)record,\n                                 (record->name_entry != NULL) ? record->name_entry : \"(null)\",\n                                 (unsigned int)record->creator);\n        }\n\n        /* Preserve original logic: copy name and creator into bin_prop */\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->name[sizeof(bin_prop->name) - 1] = '\\0';\n        bin_prop->creator = record->creator;\n\n        OS_BinSemGetInfo_Log(\"After copy: bin_prop->name=\\\"%s\\\" bin_prop->creator=%u\",\n                             bin_prop->name, (unsigned int)bin_prop->creator);\n\n        OS_BinSemGetInfo_Log(\"Calling OS_BinSemGetInfo_Impl with token_address=%p bin_prop=%p\", (void *)&token, (void *)bin_prop);\n        return_code = OS_BinSemGetInfo_Impl(&token, bin_prop);\n        OS_BinSemGetInfo_Log(\"OS_BinSemGetInfo_Impl returned %d\", return_code);\n\n        OS_ObjectIdRelease(&token);\n        OS_BinSemGetInfo_Log(\"Released token for sem_id=%ld\", (long)sem_id);\n    }\n    else\n    {\n        OS_BinSemGetInfo_Log(\"OS_ObjectIdGetById failed for sem_id=%ld with code %d\", (long)sem_id, return_code);\n    }\n\n    OS_BinSemGetInfo_Log(\"EXIT: OS_BinSemGetInfo return_code=%d\", return_code);\n    return return_code;\n}\n"
}