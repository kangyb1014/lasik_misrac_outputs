{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nstrncpy is called with a length based on the destination (sizeof(bin_prop->name) - 1) but there is no proven guarantee in the fragment that record->name_entry is at least that large. If record->name_entry is a smaller array or a pointer to a shorter buffer (i.e. its storage length < sizeof(bin_prop->name) - 1), strncpy may read up to that many bytes from the source and thus read beyond the bounds of record->name_entry. This would violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/967.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo:\n```c\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        strncpy(bin_prop->name, record->name_entry, sizeof(bin_prop->name) - 1);\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/967.txt */\nstatic void os_binsem_logf(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/967.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fputc('\\n', fp);\n    fclose(fp);\n}\n\nint32 OS_BinSemGetInfo(osal_id_t sem_id, OS_bin_sem_prop_t *bin_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(bin_prop);\n\n    os_binsem_logf(\"OS_BinSemGetInfo: entry sem_id=%llu bin_prop=%p\", (unsigned long long)sem_id, (void *)bin_prop);\n\n    memset(bin_prop, 0, sizeof(OS_bin_sem_prop_t));\n\n    os_binsem_logf(\"OS_BinSemGetInfo: bin_prop cleared (%zu bytes)\", (size_t)sizeof(OS_bin_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    os_binsem_logf(\"OS_BinSemGetInfo: OS_ObjectIdGetById returned %d token=%p\", (int)return_code, (void *)&token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_bin_sem_table, token);\n\n        /* Log pointers and sizes used for the strncpy call so callers can detect potential mismatch\n         * We do NOT attempt to measure the source buffer length here to avoid reading past the\n         * bounds of the source buffer (which could itself cause undefined behavior). */\n        os_binsem_logf(\"OS_BinSemGetInfo: record=%p record->name_entry=%p\", (void *)record, (void *)(record ? record->name_entry : NULL));\n\n        {\n            size_t dest_copy_len = sizeof(bin_prop->name) - 1U;\n            os_binsem_logf(\"OS_BinSemGetInfo: strncpy parameters: dest=%p src=%p len=%zu\", (void *)bin_prop->name, (void *)(record ? record->name_entry : NULL), dest_copy_len);\n\n            /* Original behavior preserved: copy up to sizeof(bin_prop->name)-1 bytes. */\n            strncpy(bin_prop->name, record->name_entry, dest_copy_len);\n\n            /* Bin_prop was zeroed earlier, so it is safe to print as a C string (it will be NUL-terminated). */\n            os_binsem_logf(\"OS_BinSemGetInfo: after strncpy bin_prop->name='%.64s'\", bin_prop->name);\n\n            /* Log creator value if available */\n            os_binsem_logf(\"OS_BinSemGetInfo: record->creator=%llu\", (unsigned long long)(record ? (unsigned long long)record->creator : 0ULL));\n        }\n\n        bin_prop->creator = record->creator;\n        return_code       = OS_BinSemGetInfo_Impl(&token, bin_prop);\n\n        os_binsem_logf(\"OS_BinSemGetInfo: OS_BinSemGetInfo_Impl returned %d\", (int)return_code);\n\n        OS_ObjectIdRelease(&token);\n        os_binsem_logf(\"OS_BinSemGetInfo: token released\");\n    }\n    else\n    {\n        os_binsem_logf(\"OS_BinSemGetInfo: object id get failed with code %d\", (int)return_code);\n    }\n\n    os_binsem_logf(\"OS_BinSemGetInfo: exit return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}