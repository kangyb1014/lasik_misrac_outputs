{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nA violation occurs if the prototype of OS_GenericWrite_Impl accepts a non-const pointer for the data buffer. For example: int32 OS_GenericWrite_Impl(OS_object_token_t *token, void *buffer, size_t nbytes, int32 timeout); In that case the call OS_GenericWrite_Impl(&token, buffer, nbytes, timeout) would pass a const void * to a void * parameter, discarding the const qualifier and thus violating MISRA C 2023 Rule 8.13. The fix is to declare the callee parameter as const void * (or otherwise preserve const qualification).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimedWrite code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1307.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimedWrite as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimedWrite:\n```c\nint32 OS_TimedWrite(osal_id_t filedes, const void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericWrite_Impl(&token, buffer, nbytes, timeout);\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimedWrite code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stdarg.h>\n\n/* Probe / logging helpers for OS_TimedWrite. These helpers write control-flow\n * and state information to /tmp/logs/1307.txt so other agents can reproduce\n * and observe the scenario where a const void * buffer is passed to\n * OS_GenericWrite_Impl (which may accept a non-const void *).\n *\n * The helpers are written to avoid changing the original logic of\n * OS_TimedWrite; they accept const-qualified pointers where appropriate\n * so they do not introduce additional const-discarding violations.\n */\nstatic void OS_TimedWrite_Logv(const char *fmt, va_list ap)\n{\n    FILE *fp = fopen(\"/tmp/logs/1307.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    (void)vfprintf(fp, fmt, ap);\n    (void)fputc('\\n', fp);\n    (void)fclose(fp);\n}\n\nstatic void OS_TimedWrite_Log(const char *fmt, ...)\n{\n    va_list ap;\n    va_start(ap, fmt);\n    OS_TimedWrite_Logv(fmt, ap);\n    va_end(ap);\n}\n\nint32 OS_TimedWrite(osal_id_t filedes, const void *buffer, size_t nbytes, int32 timeout)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and parameter values. Casts to uintptr_t are used to print\n     * opaque identifiers and pointer values portably. */\n    OS_TimedWrite_Log(\"OS_TimedWrite: ENTER filedes=0x%\" PRIuPTR \" buffer=%p nbytes=%zu timeout=%d\",\n                      (uintptr_t)filedes, buffer, nbytes, (int)timeout);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(nbytes);\n\n    OS_TimedWrite_Log(\"OS_TimedWrite: after parameter checks (buffer OK, nbytes OK)\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n\n    OS_TimedWrite_Log(\"OS_TimedWrite: OS_ObjectIdGetById returned %d (token addr=%p)\", return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just prior to calling the implementation that may accept a non-const pointer.\n         * This records that the caller's buffer is const-qualified at the call site and\n         * captures relevant state to reproduce the const-discarding scenario. */\n        OS_TimedWrite_Log(\"OS_TimedWrite: about to call OS_GenericWrite_Impl( &token=%p, buffer=%p (const void *), nbytes=%zu, timeout=%d )\",\n                          (void *)&token, buffer, nbytes, (int)timeout);\n\n        /* Original call preserved exactly to demonstrate the potential const discard\n         * if OS_GenericWrite_Impl's prototype is non-const for the buffer parameter. */\n        return_code = OS_GenericWrite_Impl(&token, buffer, nbytes, timeout);\n\n        OS_TimedWrite_Log(\"OS_TimedWrite: OS_GenericWrite_Impl returned %d\", return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        OS_TimedWrite_Log(\"OS_TimedWrite: token released\");\n    }\n    else\n    {\n        OS_TimedWrite_Log(\"OS_TimedWrite: skipping write because OS_ObjectIdGetById failed with %d\", return_code);\n    }\n\n    OS_TimedWrite_Log(\"OS_TimedWrite: RETURN %d\", return_code);\n\n    return return_code;\n}\n"
}