{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts a const char * (name) to void *: return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token); This discards the const qualifier and allows the callee to accept a non-const pointer. That is a violation because the pointer should point to a const-qualified type when possible (the callee should accept const void * if it only reads the data).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2027.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate:\n```c\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logging helper - append-only log file capturing control flow and key state.\n * This helper tries to avoid changing program behavior. It does not cast away const\n * qualifiers and avoids converting function pointers to data pointers.\n */\nstatic void OS_LogTaskCreate(const char *stage,\n                             int32 return_code,\n                             const char *task_name,\n                             int function_pointer_set,\n                             const void *stack_pointer,\n                             size_t stack_size,\n                             unsigned long priority_val,\n                             uint32 flags_val,\n                             const void *task_id_ptr,\n                             const void *token_addr,\n                             const void *task_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/2027.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print a single-line record with useful fields. Do not attempt to cast\n         * function pointers to data pointers; instead record whether a function\n         * pointer was provided. Print task_name both as pointer and string.\n         */\n        fprintf(f,\n                \"[OS_TaskCreate] stage=%s rc=%ld name_ptr=%p name_str=%s func_present=%s stack_ptr=%p stack_size=%zu priority=%lu flags=0x%08x task_id_ptr=%p token_addr=%p task_ptr=%p\\n\",\n                stage,\n                (long)return_code,\n                (const void *)task_name,\n                (task_name != NULL) ? task_name : \"(null)\",\n                function_pointer_set ? \"yes\" : \"no\",\n                stack_pointer,\n                stack_size,\n                priority_val,\n                (unsigned)flags_val,\n                task_id_ptr,\n                token_addr,\n                task_ptr);\n        fclose(f);\n    }\n}\n\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Log entry with initial high-level parameter info. */\n    OS_LogTaskCreate(\"ENTRY\", -1, task_name, (function_pointer != NULL), (const void *)stack_pointer, stack_size, (unsigned long)priority, flags, (const void *)task_id, (const void *)&token, NULL);\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    /* Log the call about to be made to OS_ObjectIdAllocateNew */\n    OS_LogTaskCreate(\"BEFORE_ObjectIdAllocateNew\", -1, task_name, (function_pointer != NULL), (const void *)stack_pointer, stack_size, (unsigned long)priority, flags, (const void *)task_id, (const void *)&token, NULL);\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n\n    /* Log result of allocation attempt and token address/approx state */\n    OS_LogTaskCreate(\"AFTER_ObjectIdAllocateNew\", return_code, task_name, (function_pointer != NULL), (const void *)stack_pointer, stack_size, (unsigned long)priority, flags, (const void *)task_id, (const void *)&token, NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Log state before calling OS-specific implementation. */\n        OS_LogTaskCreate(\"BEFORE_TaskCreate_Impl\", return_code, task_name, (function_pointer != NULL), (const void *)stack_pointer, stack_size, (unsigned long)priority, flags, (const void *)task_id, (const void *)&token, (const void *)task);\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Log result from OS-specific implementation. */\n        OS_LogTaskCreate(\"AFTER_TaskCreate_Impl\", return_code, task_name, (function_pointer != NULL), (const void *)stack_pointer, stack_size, (unsigned long)priority, flags, (const void *)task_id, (const void *)&token, (const void *)task);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n\n        /* Log finalization and the task_id pointer state. */\n        OS_LogTaskCreate(\"AFTER_ObjectIdFinalizeNew\", return_code, task_name, (function_pointer != NULL), (const void *)stack_pointer, stack_size, (unsigned long)priority, flags, (const void *)task_id, (const void *)&token, (const void *)task);\n    }\n    else\n    {\n        /* Log early exit due to allocation failure */\n        OS_LogTaskCreate(\"ALLOC_FAILED\", return_code, task_name, (function_pointer != NULL), (const void *)stack_pointer, stack_size, (unsigned long)priority, flags, (const void *)task_id, (const void *)&token, NULL);\n    }\n\n    /* Final return. */\n    OS_LogTaskCreate(\"RETURN\", return_code, task_name, (function_pointer != NULL), (const void *)stack_pointer, stack_size, (unsigned long)priority, flags, (const void *)task_id, (const void *)&token, (const void *)task);\n\n    return return_code;\n}\n"
}