{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_TaskCreate_Impl the variable 'task' is declared as a mutable pointer (OS_task_internal_record_t *task) and assigned from OS_OBJECT_TABLE_GET(OS_task_table, *token). The function only reads fields from *task (priority, stack_size) and does not modify the record; therefore 'task' could be declared as a pointer-to-const (const OS_task_internal_record_t *task). Not qualifying it const when possible violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2027.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate:\n```c\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe/log helper for OS_TaskCreate - appends human-readable traces to /tmp/logs/2027.txt */\nstatic void OS_TaskCreate_LogState(const char *stage,\n                                   const void *task_ptr,\n                                   const void *token_ptr,\n                                   size_t stack_size,\n                                   unsigned int priority_val,\n                                   unsigned int flags_val,\n                                   int return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2027.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Primary trace line: stage, token addr, task addr, main scalar fields, rc */\n        fprintf(f, \"OS_TaskCreate: stage=%s token_addr=%p task_addr=%p stack_size=%zu priority=%u flags=0x%08x return_code=%d\\n\",\n                stage, token_ptr, task_ptr, stack_size, priority_val, flags_val, return_code);\n\n        /* If a task pointer was provided, also try to log the task's key fields (non-invasive read) */\n        if (task_ptr != NULL)\n        {\n            /* The structure type is unknown here to the logger; print via offsets in a safe way\n             * by accessing the fields through a typed view. This uses a const-qualified pointer\n             * to avoid modifying the record. */\n            const struct { size_t stack_size; unsigned int priority; } *view = (const void *)task_ptr;\n            /* Defensive print of the observed fields */\n            fprintf(f, \"  observed task->stack_size=%zu task->priority=%u\\n\",\n                    view->stack_size, view->priority);\n        }\n\n        fclose(f);\n    }\n}\n\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Log: about to allocate a new object id (token uninitialized yet) */\n    OS_TaskCreate_LogState(\"before_allocate\", NULL, &token, stack_size, (unsigned int)priority, (unsigned int)flags, 0);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n\n    /* Log result of allocation attempt */\n    OS_TaskCreate_LogState(\"after_allocate\", NULL, &token, stack_size, (unsigned int)priority, (unsigned int)flags, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Log state immediately before calling OS-specific implementation. This captures the\n         * exact task record fields that OS_TaskCreate_Impl will read. */\n        OS_TaskCreate_LogState(\"before_impl_call\", (const void *)task, &token, stack_size, (unsigned int)priority, (unsigned int)flags, 0);\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Log the result of the OS-specific creation call */\n        OS_TaskCreate_LogState(\"after_impl_call\", (const void *)task, &token, stack_size, (unsigned int)priority, (unsigned int)flags, return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n\n        /* Finalize log with final return code */\n        OS_TaskCreate_LogState(\"finalize\", (const void *)task, &token, stack_size, (unsigned int)priority, (unsigned int)flags, return_code);\n    }\n\n    return return_code;\n}\n"
}