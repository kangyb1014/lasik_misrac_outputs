{
  "user_message": "An agent A claimed that the following OS_TaskCreate code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskCreate.\n```c\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code only checks for name != NULL before passing it to OS_ObjectIdFindNextMatch. If OS_ObjectIdFindNextMatch/OS_ObjectNameMatch uses string.h functions (e.g. strcmp/strncpy/strlen) they will expect a NUL-terminated buffer and a valid object size. A caller could pass a non-terminated string or a pointer near the end of an object so that those string functions read past the object bounds, causing out-of-bounds access. Because the fragment does not ensure the pointer references a NUL-terminated buffer within the expected maximum length, this can violate MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2031.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void probe_log_taskname_snapshot(const char *task_name, const char *label)\n{\n    const size_t MAX_LOG_NAME_LEN = 256u;\n    if (task_name == NULL)\n    {\n        probe_log(\"%s: task_name=NULL\", label);\n        return;\n    }\n\n    /* Log pointer value */\n    probe_log(\"%s: task_name=%p\", label, (const void *)task_name);\n\n    /* Dump up to MAX_LOG_NAME_LEN bytes and detect NUL within that bound. */\n    size_t i;\n    int nul_found = 0;\n\n    /* Build a printable prefix representation (as characters) and a hex dump. */\n    char textbuf[65]; /* keep limited to avoid huge stack usage */\n    size_t textbuf_max = sizeof(textbuf) - 1u;\n    size_t textlen = 0u;\n\n    for (i = 0u; i < MAX_LOG_NAME_LEN; ++i)\n    {\n        unsigned char c = (unsigned char)task_name[i];\n\n        /* Append visible character or '.' */\n        if (textlen < textbuf_max)\n        {\n            if (c >= 0x20 && c < 0x7f)\n            {\n                textbuf[textlen++] = (char)c;\n            }\n            else\n            {\n                textbuf[textlen++] = '.';\n            }\n        }\n\n        if (c == '\\0')\n        {\n            nul_found = 1;\n            break;\n        }\n    }\n    textbuf[textlen] = '\\0';\n\n    probe_log(\"%s: first-%zu-chars-as-text=\\\"%s\\\" (nul_within_limit=%d)\", label, (size_t)(i + 1u), textbuf, nul_found);\n\n    /* Also provide a hex dump of the first up to 32 bytes to help diagnose adjacent-memory reads */\n    size_t hexdump_len = (i + 1u);\n    if (hexdump_len > 32u) hexdump_len = 32u;\n\n    char hexbuf[3 * 32 + 1];\n    size_t hexpos = 0u;\n    for (size_t j = 0u; j < hexdump_len; ++j)\n    {\n        unsigned char c = (unsigned char)task_name[j];\n        int written = snprintf(&hexbuf[hexpos], (sizeof(hexbuf) - hexpos), \"%02X\", c);\n        if (written > 0)\n        {\n            hexpos += (size_t)written;\n            if (j + 1u < hexdump_len && hexpos + 1u < sizeof(hexbuf))\n            {\n                hexbuf[hexpos++] = ' ';\n                hexbuf[hexpos] = '\\0';\n            }\n        }\n    }\n    hexbuf[hexpos] = '\\0';\n    probe_log(\"%s: hex_prefix=%s\", label, hexbuf);\n}\n\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Log entry and the raw incoming parameters we can safely print. */\n    probe_log(\"OS_TaskCreate: entry: task_id=%p, task_name=%p, function_pointer=%p, stack_pointer=%p, stack_size=%zu, priority=%u, flags=0x%08\" PRIx32,\n              (void *)task_id, (const void *)task_name, (void *)function_pointer, (void *)stack_pointer, stack_size, (unsigned)priority, flags);\n\n    /* Snapshot of task_name for debugging potential non-terminated buffers */\n    probe_log_taskname_snapshot(task_name, \"OS_TaskCreate:pre-check\");\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Log after API checks passed (if control reaches here) */\n    probe_log(\"OS_TaskCreate: parameters passed basic checks\");\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    /* Print the address of the token variable to avoid attempting to treat an aggregate as an integer/pointer. */\n    probe_log(\"OS_TaskCreate: after OS_ObjectIdAllocateNew: return_code=%d, token=%p\", return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        /* Log the newly allocated task record pointer and snapshot the name as stored */\n        probe_log(\"OS_TaskCreate: allocated task record at %p, storing name pointer %p\", (void *)task, (const void *)task_name);\n        probe_log_taskname_snapshot(task_name, \"OS_TaskCreate:after-alloc\");\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n        probe_log(\"OS_TaskCreate: flags after defaulting = 0x%08\" PRIx32, flags);\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n        probe_log(\"OS_TaskCreate: after OS_TaskCreate_Impl: return_code=%d\", return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n        probe_log(\"OS_TaskCreate: after OS_ObjectIdFinalizeNew: return_code=%d, created_task_id=%p\", return_code, (void *)task_id);\n    }\n    else\n    {\n        /* Log that allocation failed and that we are returning early. */\n        probe_log(\"OS_TaskCreate: OS_ObjectIdAllocateNew failed, returning %d\", return_code);\n    }\n\n    probe_log(\"OS_TaskCreate: exit: return_code=%d\", return_code);\n    return return_code;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not enough evidence that this function itself violates MISRA C:2023 Rule 21.17. Rule 21.17 forbids that calls to <string.h> functions result in accesses beyond the bounds of the objects referenced by their pointer parameters. The shown OS_TaskCreate implementation does not itself call any <string.h> routines; it simply forwards the task_name pointer to other routines (OS_ObjectIdAllocateNew, OS_ObjectIdFindNextMatch / OS_ObjectNameMatch, OS_OBJECT_INIT, etc.). Whether a 21.17 violation actually occurs depends on (a) the API contract for task_name (is a NUL-terminated string required?), and (b) how the downstream routines are implemented: if they use standard string.h functions (strcmp, strlen, strncpy, ...) without first ensuring that task_name points to a NUL-terminated buffer within an expected maximum length, then those routines could read out-of-bounds and violate 21.17. Conversely, if OS_CHECK_APINAME, OS_ObjectIdAllocateNew, or the name-matching functions either (i) ensure a NUL exists within an agreed maximum length, (ii) accept an explicit length, or (iii) use safe bounded operations (e.g., strnlen with a bound, or memchr with size), then no violation occurs.\n\nTherefore the agent A\u2019s report is not provably correct from the code shown. The claim may be valid if and only if the downstream functions and API preconditions do not ensure termination/length bounds; you need to inspect/confirm the implementations of OS_CHECK_APINAME and the object-name matching/allocation routines (or the documented API precondition for task_name). If they only check for non-NULL and then call standard string functions, that is a real 21.17 violation and should be fixed (either validate NUL within a maximum length before calling string.h functions, or use bounded functions)."
}