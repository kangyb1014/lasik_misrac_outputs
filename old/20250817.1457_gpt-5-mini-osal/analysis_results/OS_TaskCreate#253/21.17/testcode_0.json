{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_CHECK_APINAME(task_name) expands to OS_CHECK_STRING(...). If that macro invokes unbounded string.h functions (e.g. strlen, strcpy, strcat) on the task_name pointer, a read beyond the object bounds can occur. Example violation: the caller supplies a non-NULL pointer to a character buffer that is not NUL-terminated within its allocated size (or not NUL-terminated within OS_MAX_API_NAME bytes). A call to strlen(task_name) (or another unbounded string function) will then read past the buffer boundary, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2031.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate:\n```c\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe helper that appends logs to /tmp/logs/2031.txt. */\nstatic void OS_TaskCreate_Log(const char *phase, const char *task_name, int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2031.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log basic control-phase, pointer value and return code. */\n    uintptr_t addr = (uintptr_t)task_name;\n    fprintf(f, \"OS_TaskCreate: %s\\n\", phase);\n    fprintf(f, \"  task_name_ptr = %p (0x%\" PRIXPTR \")\\n\", (void *)addr, (uintptr_t)addr);\n    fprintf(f, \"  return_code   = %ld\\n\", (long)return_code);\n\n    /* Log first byte (if readable); avoid calling any unbounded string functions. */\n    if (task_name != NULL)\n    {\n        unsigned char first = (unsigned char)task_name[0];\n        if (first >= 32 && first < 127)\n        {\n            fprintf(f, \"  task_name[0]  = '%c' (0x%02X)\\n\", (char)first, first);\n        }\n        else\n        {\n            fprintf(f, \"  task_name[0]  = 0x%02X\\n\", first);\n        }\n    }\n    else\n    {\n        fprintf(f, \"  task_name is NULL\\n\");\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified OS_TaskCreate with probe calls inserted. */\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Log entry and initial parameter state. */\n    OS_TaskCreate_Log(\"ENTER\", task_name, -1);\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n\n    /* Log before name checks (this is where the reported violation scenario may originate). */\n    OS_TaskCreate_Log(\"BEFORE_OS_CHECK_APINAME\", task_name, -1);\n\n    OS_CHECK_APINAME(task_name);\n\n    /* Log after name checks so callers can see that the macro was invoked. */\n    OS_TaskCreate_Log(\"AFTER_OS_CHECK_APINAME\", task_name, -1);\n\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n\n    /* Log the result of ObjectIdAllocateNew and token address for tracing. */\n    OS_TaskCreate_Log(\"AFTER_ObjectIdAllocateNew\", task_name, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        /* Log after object init and before filling task fields. */\n        OS_TaskCreate_Log(\"AFTER_OS_OBJECT_INIT\", task_name, return_code);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Log after OS-specific implementation returned. */\n        OS_TaskCreate_Log(\"AFTER_OS_TaskCreate_Impl\", task_name, return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n\n        /* Final log before returning. */\n        OS_TaskCreate_Log(\"BEFORE_RETURN\", task_name, return_code);\n    }\n    else\n    {\n        /* Log early failure path. */\n        OS_TaskCreate_Log(\"ALLOCATE_FAILED\", task_name, return_code);\n    }\n\n    return return_code;\n}\n"
}