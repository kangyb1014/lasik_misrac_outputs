{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_TaskCreate the non-pointer parameter 'flags' is modified by the statement 'flags |= OS_ADD_TASK_FLAGS;'. This assigns to a function parameter variable, which violates MISRA C 2023 Rule 17.8. (Use a local copy such as 'uint32 local_flags = flags;' and modify that instead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2029.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate:\n```c\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS;\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <stdint.h>\n#include <errno.h>\n\n/* Probe/logging helper - writes a single-line log entry to /tmp/logs/2029.txt */\nstatic void OS_TaskCreate_Log(const char *stage, const char *task_name, unsigned long flags_before,\n                              unsigned long flags_after, long return_code, const void *func_ptr,\n                              unsigned long stack_size, unsigned long priority)\n{\n    FILE *f = fopen(\"/tmp/logs/2029.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Try to create the directory, then try again. Ignore errors if cannot create. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/2029.txt\", \"a\");\n    }\n\n    if (f != NULL)\n    {\n        fprintf(f, \"[OS_TaskCreate] %s: task_name=%s, func_ptr=%p, flags_before=0x%lx, flags_after=0x%lx, return_code=%ld, stack_size=%lu, priority=%lu\\n\",\n                stage,\n                (task_name != NULL) ? task_name : \"(null)\",\n                func_ptr,\n                flags_before,\n                flags_after,\n                return_code,\n                stack_size,\n                priority);\n        fclose(f);\n    }\n}\n\nint32 OS_TaskCreate(osal_id_t *task_id, const char *task_name, osal_task_entry function_pointer,\n                    osal_stackptr_t stack_pointer, size_t stack_size, osal_priority_t priority, uint32 flags)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Capture initial flags for logging to evidence modification of the parameter. */\n    unsigned long initial_flags = (unsigned long)flags;\n\n    /* Initial entry log */\n    OS_TaskCreate_Log(\"ENTRY\", task_name, initial_flags, initial_flags, -1,\n                      (const void *)function_pointer, (unsigned long)stack_size, (unsigned long)priority);\n\n    /*\n     * Check parameters\n     *\n     * Note \"stack_pointer\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(task_id);\n    OS_CHECK_POINTER(function_pointer);\n    OS_CHECK_APINAME(task_name);\n    OS_CHECK_SIZE(stack_size);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, task_name, &token);\n\n    OS_TaskCreate_Log(\"AFTER_ALLOC_CALL\", task_name, initial_flags, (unsigned long)flags, (long)return_code,\n                      (const void *)function_pointer, (unsigned long)stack_size, (unsigned long)priority);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, task, task_name, task_name);\n\n        task->stack_size             = stack_size;\n        task->priority               = priority;\n        task->entry_function_pointer = function_pointer;\n        task->stack_pointer          = stack_pointer;\n\n        /* Log state immediately before flags modification */\n        OS_TaskCreate_Log(\"BEFORE_FLAGS_MOD\", task_name, initial_flags, (unsigned long)flags, (long)return_code,\n                          (const void *)function_pointer, (unsigned long)stack_size, (unsigned long)priority);\n\n        /* Add default flags */\n        flags |= OS_ADD_TASK_FLAGS; /* <-- This statement modifies the non-pointer parameter 'flags'. */\n\n        /* Log state immediately after flags modification to capture the violation scenario evidence. */\n        OS_TaskCreate_Log(\"AFTER_FLAGS_MOD\", task_name, initial_flags, (unsigned long)flags, (long)return_code,\n                          (const void *)function_pointer, (unsigned long)stack_size, (unsigned long)priority);\n\n        /* Now call the OS-specific implementation.  This reads info from the task table. */\n        return_code = OS_TaskCreate_Impl(&token, flags);\n\n        /* Log the result from the OS-specific implementation */\n        OS_TaskCreate_Log(\"AFTER_IMPL_CALL\", task_name, initial_flags, (unsigned long)flags, (long)return_code,\n                          (const void *)function_pointer, (unsigned long)stack_size, (unsigned long)priority);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, task_id);\n\n        /* Final outcome log */\n        OS_TaskCreate_Log(\"FINALIZE\", task_name, initial_flags, (unsigned long)flags, (long)return_code,\n                          (const void *)function_pointer, (unsigned long)stack_size, (unsigned long)priority);\n    }\n\n    return return_code;\n}\n"
}