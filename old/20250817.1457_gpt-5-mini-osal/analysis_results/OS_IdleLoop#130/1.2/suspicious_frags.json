{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_IdleLoop:\n```c\nvoid OS_IdleLoop()\n{\n    /*\n     * Wait until the shutdown value is set to the shutdown number\n     * In most \"real\" embedded systems, this will never happen.\n     * However it will happen in debugging situations (CTRL+C, etc).\n     */\n    while (OS_SharedGlobalVars.GlobalState != OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        OS_IdleLoop_Impl();\n    }\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler-specific language extensions are present in the supplied fragment. The code uses only standard C constructs: a function definition, a while loop, a comparison against a macro constant, member access via a struct/union variable, and a plain function call. There are no uses of known compiler extensions such as __attribute__, __asm/__asm__, __inline/__forceinline, __declspec, typeof, statement-expressions ({ ... }), nested functions, or other implementation-specific keywords or built-ins. The identifier OS_IdleLoop_Impl() is a normal function call in this fragment \u2014 if that symbol is implemented elsewhere using an extension (inline asm, attributes, etc.), that would need to be checked in its definition, but the fragment shown contains no extension. The empty parameter list in the definition (void OS_IdleLoop()) is standard C syntax and not a compiler extension. Therefore there are no suspicious fragments to report for Rule 1.2."
}