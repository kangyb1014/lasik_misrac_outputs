{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorGetNext:\n```c\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    do\n    {\n        ++iter->token.obj_idx;\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n        if (iter->match == NULL || iter->match(iter->arg, &iter->token, record))\n        {\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n    } while (!got_next);\n\n    return got_next;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_ObjectIdIteratorGetNext:\ntypedef struct\n{\n    OS_common_record_t * base;\n    OS_ObjectMatchFunc_t match;\n    void *               arg;\n    osal_index_t         limit;\n    OS_object_token_t    token;\n} OS_object_iter_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\n#define OS_OBJECT_ID_UNDEFINED ((osal_id_t){0})\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "record = OS_OBJECT_TABLE_GET(iter->base, iter->token);",
    "OS_common_record_t * base;",
    "if (iter->match == NULL || iter->match(iter->arg, &iter->token, record))",
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])",
    "OS_common_record_t *record;"
  ],
  "explanation": "Other fragments were examined and are not reported because they require writable/non-const access or do not involve pointer-to-object types that can be const-qualified: the function parameter (OS_object_iter_t *iter) and lines that modify iterator state (e.g. ++iter->token.obj_idx; iter->token.obj_id = OS_OBJECT_ID_UNDEFINED; iter->token.obj_id = record->active_id;) intentionally mutate iterator fields and therefore cannot be const-qualified. The match function pointer itself and iter->arg are not flagged because their signatures and intended side effects are not visible here; they may legitimately require non-const parameters. The OS_OBJECT_ID_UNDEFINED macro and simple scalar assignments do not involve pointer-to-object types and thus are not relevant to Rule 8.13. The listed fragments are those that use or produce non-const pointers to OS_common_record_t (the table base, the macro returning an element pointer, the local record variable, and the use of that pointer when calling match) and therefore should be investigated to determine whether const qualification is possible and appropriate."
}