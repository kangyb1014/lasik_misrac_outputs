{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe invocation iter->match(iter->arg, &iter->token, record) passes a pointer to iter->token and the record pointer as non-const. If the match callback does not need to modify those objects (typical for a predicate), the function prototype should use const-qualified pointer parameters (e.g. const OS_object_token_t * and const OS_common_record_t * or const void * for arg). Given that record is declared as OS_common_record_t * and &iter->token yields a non-const pointer, this is a violation of MISRA C 2023 Rule 8.13 unless the match callback actually needs to modify those objects.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorGetNext code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1603.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorGetNext as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorGetNext:\n```c\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    do\n    {\n        ++iter->token.obj_idx;\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n        if (iter->match == NULL || iter->match(iter->arg, &iter->token, record))\n        {\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n    } while (!got_next);\n\n    return got_next;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorGetNext code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n\n/* Probe function to log iterator state and control flow to /tmp/logs/1603.txt */\nstatic void os_log_probe(const char *event, OS_object_iter_t *iter, OS_common_record_t *record, int match_result)\n{\n    FILE *f = fopen(\"/tmp/logs/1603.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Safely print the most relevant fields observed in the iterator/record. */\n    (void)fprintf(f,\n                  \"%s: iter=%p arg=%p token_addr=%p token.obj_idx=%lld token.obj_id=%lld limit=%lld base=%p record=%p active_id=%lld match_result=%d\\n\",\n                  event,\n                  (void *)iter,\n                  (void *)(iter ? iter->arg : NULL),\n                  (void *)(iter ? &iter->token : NULL),\n                  (long long)(iter ? (long long)iter->token.obj_idx : (long long)-1),\n                  (long long)(iter ? (long long)iter->token.obj_id : (long long)-1),\n                  (long long)(iter ? (long long)iter->limit : (long long)-1),\n                  (void *)(iter ? iter->base : NULL),\n                  (void *)record,\n                  (long long)(record ? (long long)record->active_id : (long long)-1),\n                  match_result);\n\n    (void)fclose(f);\n}\n\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    do\n    {\n        ++iter->token.obj_idx;\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            os_log_probe(\"break_out_of_range\", iter, NULL, -1);\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n        os_log_probe(\"after_get_record\", iter, record, -1);\n\n        if (iter->match == NULL)\n        {\n            os_log_probe(\"match_is_null\", iter, record, -1);\n            /* Preserve original behavior when match is NULL */\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n        else\n        {\n            os_log_probe(\"before_match_call\", iter, record, -1);\n            /* Call match and capture result for logging while preserving original logic */\n            int match_res = iter->match(iter->arg, &iter->token, record) ? 1 : 0;\n            os_log_probe(\"after_match_call\", iter, record, match_res);\n\n            if (match_res)\n            {\n                iter->token.obj_id = record->active_id;\n                got_next           = true;\n            }\n        }\n    } while (!got_next);\n\n    os_log_probe(\"function_exit\", iter, NULL, got_next ? 1 : 0);\n\n    return got_next;\n}\n"
}