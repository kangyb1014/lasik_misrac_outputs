{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'record' is declared as OS_common_record_t * but in the function it is only used for read-only access (record->active_id) and passed to the match callback; it is never used to modify the pointed object. Therefore it could (and should) be declared as 'const OS_common_record_t *record' to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorGetNext code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1603.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorGetNext as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorGetNext:\n```c\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    do\n    {\n        ++iter->token.obj_idx;\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n        if (iter->match == NULL || iter->match(iter->arg, &iter->token, record))\n        {\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n    } while (!got_next);\n\n    return got_next;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorGetNext code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    /* Initial probe: log entry state */\n    {\n        FILE *log = fopen(\"/tmp/logs/1603.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER: OS_ObjectIdIteratorGetNext - token.obj_idx=%llu, limit=%llu, token.obj_id=%llu\\n\",\n                    (unsigned long long)iter->token.obj_idx,\n                    (unsigned long long)iter->limit,\n                    (unsigned long long)iter->token.obj_id);\n            fclose(log);\n        }\n    }\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    do\n    {\n        ++iter->token.obj_idx;\n\n        /* Log after increment */\n        {\n            FILE *log = fopen(\"/tmp/logs/1603.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"AFTER_INC: token.obj_idx=%llu, limit=%llu\\n\",\n                        (unsigned long long)iter->token.obj_idx,\n                        (unsigned long long)iter->limit);\n                fclose(log);\n            }\n        }\n\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            FILE *log = fopen(\"/tmp/logs/1603.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"BREAK: token.obj_idx (%llu) >= limit (%llu)\\n\",\n                        (unsigned long long)iter->token.obj_idx,\n                        (unsigned long long)iter->limit);\n                fclose(log);\n            }\n\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n\n        /* Log the retrieved record pointer */\n        {\n            FILE *log = fopen(\"/tmp/logs/1603.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"GOT_RECORD: record=%p at obj_idx=%llu\\n\",\n                        (void *)record,\n                        (unsigned long long)iter->token.obj_idx);\n                fclose(log);\n            }\n        }\n\n        /* Evaluate match exactly once and log the call/result. Preserve original semantics. */\n        bool match_passed;\n        if (iter->match == NULL)\n        {\n            /* No match callback means automatic match */\n            match_passed = true;\n\n            FILE *log = fopen(\"/tmp/logs/1603.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"MATCH_SKIPPED: match==NULL at obj_idx=%llu -> pass=1\\n\",\n                        (unsigned long long)iter->token.obj_idx);\n                fclose(log);\n            }\n        }\n        else\n        {\n            FILE *log_before = fopen(\"/tmp/logs/1603.txt\", \"a\");\n            if (log_before != NULL)\n            {\n                fprintf(log_before, \"MATCH_CALL: calling match at obj_idx=%llu, record=%p\\n\",\n                        (unsigned long long)iter->token.obj_idx,\n                        (void *)record);\n                fclose(log_before);\n            }\n\n            /* Call the match callback once (same as original code) */\n            match_passed = iter->match(iter->arg, &iter->token, record);\n\n            FILE *log_after = fopen(\"/tmp/logs/1603.txt\", \"a\");\n            if (log_after != NULL)\n            {\n                fprintf(log_after, \"MATCH_RET: obj_idx=%llu, match_result=%d\\n\",\n                        (unsigned long long)iter->token.obj_idx,\n                        (int)match_passed);\n                fclose(log_after);\n            }\n        }\n\n        if (match_passed)\n        {\n            /* Log chosen active_id if available */\n            {\n                FILE *log = fopen(\"/tmp/logs/1603.txt\", \"a\");\n                if (log != NULL)\n                {\n                    if (record != NULL)\n                    {\n                        fprintf(log, \"SELECTED: record->active_id=%llu for obj_idx=%llu\\n\",\n                                (unsigned long long)record->active_id,\n                                (unsigned long long)iter->token.obj_idx);\n                    }\n                    else\n                    {\n                        fprintf(log, \"SELECTED: record is NULL for obj_idx=%llu\\n\",\n                                (unsigned long long)iter->token.obj_idx);\n                    }\n                    fclose(log);\n                }\n            }\n\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n    } while (!got_next);\n\n    /* Final probe: log exit state */\n    {\n        FILE *log = fopen(\"/tmp/logs/1603.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT: OS_ObjectIdIteratorGetNext - got_next=%d, token.obj_idx=%llu, token.obj_id=%llu\\n\",\n                    (int)got_next,\n                    (unsigned long long)iter->token.obj_idx,\n                    (unsigned long long)iter->token.obj_id);\n            fclose(log);\n        }\n    }\n\n    return got_next;\n}\n"
}