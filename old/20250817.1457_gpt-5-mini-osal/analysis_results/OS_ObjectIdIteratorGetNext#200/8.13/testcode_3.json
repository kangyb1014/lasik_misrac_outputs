{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_ObjectIndexFromToken is declared to take a non-const pointer (e.g. OS_ObjectIndexFromToken(OS_object_token_t *tok)) but does not actually modify the token, then the pointer parameter should be declared const (const OS_object_token_t *). The macro passes &(tok) which yields a non-const OS_object_token_t *; therefore in that situation Rule 8.13 is violated because the pointer should point to a const-qualified type when possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorGetNext code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1603.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorGetNext as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorGetNext:\n```c\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    do\n    {\n        ++iter->token.obj_idx;\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n        if (iter->match == NULL || iter->match(iter->arg, &iter->token, record))\n        {\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n    } while (!got_next);\n\n    return got_next;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorGetNext code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Helper: log iterator state and control-flow events to /tmp/logs/1603.txt */\nstatic void OS_ObjectIterator_LogState(const OS_object_iter_t *iter, const OS_common_record_t *record, const char *event)\n{\n    FILE *f = fopen(\"/tmp/logs/1603.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Try to create the directory once if it does not exist, then retry */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/1603.txt\", \"a\");\n    }\n\n    if (f != NULL)\n    {\n        /* Print important fields that help reproduce the control flow and state\n         * relevant to the token/object index scenario. We keep casts to avoid\n         * warnings on pointer-to-integer prints. */\n        fprintf(f,\n                \"%s: iter=%p token.obj_idx=%ld token.obj_id=%ld limit=%ld base=%p match=%p arg=%p record=%p active_id=%ld\\n\",\n                event,\n                (const void *)iter,\n                (long)iter->token.obj_idx,\n                (long)iter->token.obj_id,\n                (long)iter->limit,\n                (const void *)iter->base,\n                (const void *)iter->match,\n                (const void *)iter->arg,\n                (const void *)record,\n                (long)((record != NULL) ? record->active_id : -1));\n        fclose(f);\n    }\n}\n\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    /* Log entry state */\n    OS_ObjectIterator_LogState(iter, NULL, \"ENTRY\");\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    OS_ObjectIterator_LogState(iter, NULL, \"AFTER_INIT_TOKEN_ID\");\n\n    do\n    {\n        OS_ObjectIterator_LogState(iter, NULL, \"LOOP_TOP_BEFORE_INCREMENT\");\n\n        ++iter->token.obj_idx;\n\n        OS_ObjectIterator_LogState(iter, NULL, \"AFTER_INCREMENT\");\n\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            OS_ObjectIterator_LogState(iter, NULL, \"BREAK_LIMIT_REACHED\");\n            break;\n        }\n\n        /* Retrieve the record for the current token */\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n\n        OS_ObjectIterator_LogState(iter, record, \"AFTER_RECORD_FETCH\");\n\n        if (iter->match == NULL || iter->match(iter->arg, &iter->token, record))\n        {\n            OS_ObjectIterator_LogState(iter, record, \"MATCH_SUCCESS\");\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n            OS_ObjectIterator_LogState(iter, record, \"ASSIGNED_OBJ_ID_AND_SET_GOT_NEXT\");\n        }\n        else\n        {\n            OS_ObjectIterator_LogState(iter, record, \"MATCH_FAILED\");\n        }\n    } while (!got_next);\n\n    OS_ObjectIterator_LogState(iter, got_next ? record : NULL, \"EXIT\");\n\n    return got_next;\n}\n"
}