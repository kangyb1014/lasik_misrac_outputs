{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator member OS_object_iter_t::base is declared as OS_common_record_t * but in OS_ObjectIdIteratorGetNext it is only used for read-only access (OS_OBJECT_TABLE_GET returns a record pointer that is only read, e.g. record->active_id). Therefore base should be const OS_common_record_t * to reflect that it is not modified; the current non-const declaration violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorGetNext code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1603.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorGetNext as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorGetNext:\n```c\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    do\n    {\n        ++iter->token.obj_idx;\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n        if (iter->match == NULL || iter->match(iter->arg, &iter->token, record))\n        {\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n    } while (!got_next);\n\n    return got_next;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorGetNext code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a single log entry describing iterator state. */\nstatic void OS_ObjectIdIterator_LogState(const char *stage,\n                                         const OS_object_iter_t *iter,\n                                         const OS_common_record_t *record,\n                                         int match_called,\n                                         int match_result)\n{\n    FILE *f = fopen(\"/tmp/logs/1603.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Print a compact snapshot useful to reproduce the violation scenario. */\n    fprintf(f, \"[%s] iter=%p base=%p token.idx=%llu limit=%llu token.id=%llu match=%p arg=%p record=%p\",\n            stage,\n            (void *)iter,\n            (void *)iter->base,\n            (unsigned long long)iter->token.obj_idx,\n            (unsigned long long)iter->limit,\n            (unsigned long long)iter->token.obj_id,\n            (void *)iter->match,\n            (void *)iter->arg,\n            (void *)record);\n\n    if (record != NULL)\n    {\n        fprintf(f, \" active_id=%llu\", (unsigned long long)record->active_id);\n    }\n\n    fprintf(f, \" match_called=%d match_result=%d\\n\", match_called, match_result);\n    fclose(f);\n}\n\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    /* Log initial state */\n    OS_ObjectIdIterator_LogState(\"enter\", iter, NULL, 0, 0);\n\n    do\n    {\n        ++iter->token.obj_idx;\n\n        /* Log after advancing the index */\n        OS_ObjectIdIterator_LogState(\"after_inc\", iter, NULL, 0, 0);\n\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            OS_ObjectIdIterator_LogState(\"limit_reached\", iter, NULL, 0, 0);\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n\n        /* Log the record pointer obtained from the table */\n        OS_ObjectIdIterator_LogState(\"got_record\", iter, record, 0, 0);\n\n        if (iter->match == NULL)\n        {\n            /* No match function: treat as match */\n            OS_ObjectIdIterator_LogState(\"match_null\", iter, record, 0, 1);\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n        else\n        {\n            /* Call the match function once and log its result */\n            int match_result = iter->match(iter->arg, &iter->token, record) ? 1 : 0;\n            OS_ObjectIdIterator_LogState(\"match_called\", iter, record, 1, match_result);\n\n            if (match_result)\n            {\n                iter->token.obj_id = record->active_id;\n                got_next           = true;\n            }\n        }\n    } while (!got_next);\n\n    OS_ObjectIdIterator_LogState(\"exit\", iter, (got_next ? record : NULL), 0, got_next ? 1 : 0);\n\n    return got_next;\n}\n"
}