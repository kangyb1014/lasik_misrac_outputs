{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' is declared as OS_common_record_t * but is only used for read access (record->active_id). It is assigned from OS_OBJECT_TABLE_GET(iter->base, iter->token) which yields a non-const OS_common_record_t *. Since the pointee is not modified in this function, the pointer should be const-qualified (e.g. const OS_common_record_t *record, and ideally iter->base should be const OS_common_record_t *). Therefore Rule 8.13 is violated in this code fragment.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorGetNext code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1603.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorGetNext as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorGetNext:\n```c\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    do\n    {\n        ++iter->token.obj_idx;\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n        if (iter->match == NULL || iter->match(iter->arg, &iter->token, record))\n        {\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n    } while (!got_next);\n\n    return got_next;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorGetNext code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/1603.txt */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1603.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    /* Entry log */\n    os_probe_log(\"ENTRY: OS_ObjectIdIteratorGetNext iter=%p start_idx=%lu limit=%lu start_obj_id=%lu\",\n                 (void *)iter,\n                 (unsigned long)iter->token.obj_idx,\n                 (unsigned long)iter->limit,\n                 (unsigned long)iter->token.obj_id);\n\n    do\n    {\n        ++iter->token.obj_idx;\n        os_probe_log(\"LOOP: incremented obj_idx=%lu (limit=%lu)\",\n                     (unsigned long)iter->token.obj_idx,\n                     (unsigned long)iter->limit);\n\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            os_probe_log(\"BREAK: obj_idx (%lu) >= limit (%lu)\",\n                         (unsigned long)iter->token.obj_idx,\n                         (unsigned long)iter->limit);\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n        os_probe_log(\"FETCH: record=%p base=%p obj_idx=%lu\",\n                     (void *)record,\n                     (void *)iter->base,\n                     (unsigned long)iter->token.obj_idx);\n\n        /* Evaluate match once and log the result (preserve original semantics) */\n        bool matched;\n        if (iter->match == NULL)\n        {\n            matched = true;\n        }\n        else\n        {\n            matched = iter->match(iter->arg, &iter->token, record);\n        }\n\n        os_probe_log(\"MATCH_EVAL: matched=%d for record=%p obj_idx=%lu\",\n                     (int)matched,\n                     (void *)record,\n                     (unsigned long)iter->token.obj_idx);\n\n        if (matched)\n        {\n            /* Log the active_id read for evidence that the record is only read */\n            os_probe_log(\"ASSIGN: assigning token.obj_id = record->active_id (record=%p active_id=%lu)\",\n                         (void *)record,\n                         (unsigned long)record->active_id);\n\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n    } while (!got_next);\n\n    os_probe_log(\"EXIT: got_next=%d final_obj_id=%lu final_obj_idx=%lu\",\n                 (int)got_next,\n                 (unsigned long)iter->token.obj_id,\n                 (unsigned long)iter->token.obj_idx);\n\n    return got_next;\n}\n"
}