{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorGetNext:\n```c\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    OS_common_record_t *record;\n    bool                got_next;\n\n    got_next           = false;\n    iter->token.obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    do\n    {\n        ++iter->token.obj_idx;\n        if (iter->token.obj_idx >= iter->limit)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(iter->base, iter->token);\n        if (iter->match == NULL || iter->match(iter->arg, &iter->token, record))\n        {\n            iter->token.obj_id = record->active_id;\n            got_next           = true;\n        }\n    } while (!got_next);\n\n    return got_next;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_ObjectIdIteratorGetNext:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\ntypedef struct\n{\n    OS_common_record_t * base;\n    OS_ObjectMatchFunc_t match;\n    void *               arg;\n    osal_index_t         limit;\n    OS_object_token_t    token;\n} OS_object_iter_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\n#define OS_OBJECT_ID_UNDEFINED ((osal_id_t){0})\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "MISRA C 2023 Rule 21.17 concerns use of the string handling functions from <string.h> (memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, strspn). The provided target function and the related definitions contain no calls to any of these standard string.h functions.\n\nSpecific reasons why no fragments were flagged:\n- The function body does not call any string.h functions. It only increments an index, checks it against iter->limit, uses OS_OBJECT_TABLE_GET to obtain a record pointer, and optionally assigns record->active_id to iter->token.obj_id. None of these operations invoke or reference string.h routines.\n- The OS_OBJECT_TABLE_GET macro and the inline OS_ObjectIndexFromToken simply compute an array index (&tbl[ index ]) and return token->obj_idx; the code in OS_ObjectIdIteratorGetNext ensures the index is checked against iter->limit (break when obj_idx >= limit) before using it, so there is a bounds-guard for that array access in this function. This is not related to string.h usage covered by Rule 21.17.\n- Constants and simple assignments (e.g., OS_OBJECT_ID_UNDEFINED) do not involve string handling.\n\nNote: A callback through iter->match could, in its own implementation elsewhere, use string.h functions incorrectly; that implementation is not present here and therefore cannot be flagged within this code fragment. If you want to ensure full compliance with Rule 21.17 across the codebase, any implementations of OS_ObjectMatchFunc_t (and any other functions called by this code) should be reviewed for uses of the listed string.h functions."
}