{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UtAssert_DoCompare:\n```c\nstatic bool UtAssert_DoCompare(long ActualValueIn, UtAssert_Compare_t CompareType, UT_IntCheck_t ReferenceValueIn,\n                               bool IsUnsigned)\n{\n    bool              Result;\n    UtAssert_IntBuf_t ActualValue;\n    UtAssert_IntBuf_t ReferenceValue;\n\n    if (IsUnsigned)\n    {\n        ActualValue.u    = ActualValueIn;\n        ReferenceValue.u = ReferenceValueIn;\n    }\n    else\n    {\n        ActualValue.s    = ActualValueIn;\n        ReferenceValue.s = ReferenceValueIn;\n    }\n\n    switch (UT_COMPARE_TYPE(CompareType, IsUnsigned))\n    {\n        case UT_COMPARE_TYPE(UtAssert_Compare_EQ, true): /* actual equals reference value */\n            Result = (ActualValue.u == ReferenceValue.u);\n            break;\n        case UT_COMPARE_TYPE(UtAssert_Compare_EQ, false): /* actual equals reference value */\n            Result = (ActualValue.s == ReferenceValue.s);\n            break;\n        case UT_COMPARE_TYPE(UtAssert_Compare_NEQ, true): /* actual does not non equal reference value */\n            Result = (ActualValue.u != ReferenceValue.u);\n            break;\n        case UT_COMPARE_TYPE(UtAssert_Compare_NEQ, false): /* actual does not non equal reference value */\n            Result = (ActualValue.s != ReferenceValue.s);\n            break;\n        case UT_COMPARE_TYPE(UtAssert_Compare_LT, true): /* actual less than reference (exclusive) */\n            Result = (ActualValue.u < ReferenceValue.u);\n            break;\n        case UT_COMPARE_TYPE(UtAssert_Compare_LT, false): /* actual less than reference (exclusive) */\n            Result = (ActualValue.s < ReferenceValue.s);\n            break;\n        case UT_COMPARE_TYPE(UtAssert_Compare_GT, true): /* actual greater than reference (exclusive)  */\n            Result = (ActualValue.u > ReferenceValue.u);\n            break;\n        case UT_COMPARE_TYPE(UtAssert_Compare_GT, false): /* actual greater than reference (exclusive)  */\n            Result = (ActualValue.s > ReferenceValue.s);\n            break;\n        case UT_COMPARE_TYPE(UtAssert_Compare_LTEQ, true): /* actual less than reference (inclusive) */\n            Result = (ActualValue.u <= ReferenceValue.u);\n            break;\n        case UT_COMPARE_TYPE(UtAssert_Compare_LTEQ, false): /* actual less than reference (inclusive) */\n            Result = (ActualValue.s <= ReferenceValue.s);\n            break;\n        case UT_COMPARE_TYPE(UtAssert_Compare_GTEQ, true): /* actual greater than reference (inclusive) */\n            Result = (ActualValue.u >= ReferenceValue.u);\n            break;\n        case UT_COMPARE_TYPE(UtAssert_Compare_GTEQ, false): /* actual greater than reference (inclusive) */\n            Result = (ActualValue.s >= ReferenceValue.s);\n            break;\n        case UT_COMPARE_TYPE(UtAssert_Compare_BITMASK_SET, true): /* bit(s) in reference are set in actual */\n            Result = (ActualValue.u & ReferenceValue.u) == ReferenceValue.u;\n            break;\n        case UT_COMPARE_TYPE(UtAssert_Compare_BITMASK_SET, false): /* bit(s) in reference are set in actual */\n            Result = (ActualValue.s & ReferenceValue.s) == ReferenceValue.s;\n            break;\n        case UT_COMPARE_TYPE(UtAssert_Compare_BITMASK_UNSET, true): /* bit(s) in reference are not set in actual */\n            Result = (ActualValue.u & ReferenceValue.u) == 0;\n            break;\n        case UT_COMPARE_TYPE(UtAssert_Compare_BITMASK_UNSET, false): /* bit(s) in reference are not set in actual */\n            Result = (ActualValue.s & ReferenceValue.s) == 0;\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    return Result;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function UtAssert_DoCompare:\n#define UT_COMPARE_TYPE(t, s) (((t)<<1)|(s))\n...\ntypedef enum\n{\n    UtAssert_Compare_NONE,          /**< invalid/not used, always false */\n    UtAssert_Compare_EQ,            /**< actual equals reference value */\n    UtAssert_Compare_NEQ,           /**< actual does not non equal reference value */\n    UtAssert_Compare_LT,            /**< actual less than reference (exclusive) */\n    UtAssert_Compare_GT,            /**< actual greater than reference (exclusive)  */\n    UtAssert_Compare_LTEQ,          /**< actual less than or equal to reference (inclusive) */\n    UtAssert_Compare_GTEQ,          /**< actual greater than reference (inclusive) */\n    UtAssert_Compare_BITMASK_SET,   /**< actual equals reference value */\n    UtAssert_Compare_BITMASK_UNSET, /**< actual equals reference value */\n    UtAssert_Compare_MAX            /**< placeholder, not used */\n} UtAssert_Compare_t\n...\ntypedef ptrdiff_t UT_IntCheck_t\n...\ntypedef union\n{\n    long          s; /**< If value is signed */\n    unsigned long u; /**< If value is unsigned */\n} UtAssert_IntBuf_t\n...\nbool UtAssert_GenericIntegerCompare(bool IsUnsigned, UT_IntCheck_t ActualValue, UtAssert_Compare_t CompareType,\n                                    UT_IntCheck_t RefValue, const char *File, uint32 Line, UtAssert_Radix_t RadixType,\n                                    const char *Typename, const char *ActualText, const char *RefText)\n{\n    static const char UTASSERT_PREFIX[] = \"UTASSERT_\";\n\n    char ActualStr[32];\n    char RefStr[32];\n    char TagStr[32];\n    int  TagLen;\n\n    /* If the radix type was not specified, then check if the typename appears to be a pointer -\n     * That is, it contains an asterisk.  This is far from foolproof due to typedefs etc but\n     * it should catch most of them (note that \"hiding\" a pointer via typedef is discouraged by\n     * GSFC coding standards, so this shouldn't be too likely)\n     */\n    if (Typename != NULL && *Typename != 0)\n    {\n        TagLen = snprintf(TagStr, sizeof(TagStr), \"%s\", Typename);\n        if (TagLen < 0)\n        {\n            TagLen = 0;\n        }\n        else if (TagLen > (sizeof(TagStr) - 3))\n        {\n            TagLen = sizeof(TagStr) - 3;\n        }\n\n        while (TagLen > 0 && (isspace((unsigned char)TagStr[TagLen - 1]) || TagStr[TagLen - 1] == ':'))\n        {\n            --TagLen;\n        }\n\n        if (TagLen > 0)\n        {\n            TagStr[TagLen] = ':';\n            ++TagLen;\n            TagStr[TagLen] = ' ';\n            ++TagLen;\n        }\n\n        TagStr[TagLen] = 0;\n\n        if (RadixType == UtAssert_Radix_DEFAULT && strchr(Typename, '*') != NULL)\n        {\n            /* looks like a pointer type */\n            RadixType = UtAssert_Radix_HEX;\n        }\n    }\n    else\n    {\n        TagStr[0] = 0;\n    }\n\n    /* If either the actual text or the ref text starts with the \"UTASSERT_\" prefix, then strip it */\n    if (strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        ActualText += sizeof(UTASSERT_PREFIX) - 1;\n    }\n    if (strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        RefText += sizeof(UTASSERT_PREFIX) - 1;\n    }\n\n    return UtAssertEx(UtAssert_DoCompare(ActualValue, CompareType, RefValue, IsUnsigned), UTASSERT_CASETYPE_FAILURE,\n                      File, Line, \"%s%s (%s) %s %s (%s)\", TagStr, ActualText,\n                      UtAssert_GetValueText(ActualStr, sizeof(ActualStr), ActualValue, IsUnsigned, RadixType),\n                      UtAssert_GetOpText(CompareType), RefText,\n                      UtAssert_GetValueText(RefStr, sizeof(RefStr), RefValue, IsUnsigned, RadixType));\n}\n...\nstatic const char *UtAssert_GetValueText(char *TempBuf, size_t TempSz, UT_IntCheck_t InValue, bool IsUnsigned,\n                                         UtAssert_Radix_t RadixType)\n{\n    if (RadixType == UtAssert_Radix_BOOLEAN)\n    {\n        if (InValue != 0)\n        {\n            snprintf(TempBuf, TempSz, \"true\");\n        }\n        else\n        {\n            snprintf(TempBuf, TempSz, \"false\");\n        }\n    }\n    else if (RadixType == UtAssert_Radix_OCTAL)\n    {\n        snprintf(TempBuf, TempSz, \"0%lo\", (unsigned long)InValue);\n    }\n    else if (RadixType == UtAssert_Radix_HEX)\n    {\n        snprintf(TempBuf, TempSz, \"0x%lx\", (unsigned long)InValue);\n    }\n    else if (IsUnsigned)\n    {\n        snprintf(TempBuf, TempSz, \"%lu\", (unsigned long)InValue);\n    }\n    else\n    {\n        snprintf(TempBuf, TempSz, \"%ld\", (long)InValue);\n    }\n\n    return TempBuf;\n}\n...\nconst char *UtAssert_GetOpText(UtAssert_Compare_t CompareType)\n{\n    const char *OpText;\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            OpText = \"==\";\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            OpText = \"!=\";\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            OpText = \"<\";\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            OpText = \">\";\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            OpText = \"<=\";\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            OpText = \">=\";\n            break;\n        case UtAssert_Compare_BITMASK_SET: /* bit(s) in reference are set in actual */\n            OpText = \"&\";\n            break;\n        case UtAssert_Compare_BITMASK_UNSET: /* bit(s) in reference are not set in actual */\n            OpText = \"&~\";\n            break;\n        default: /* should never happen */\n            OpText = \"??\";\n            break;\n    }\n\n    return OpText;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (RadixType == UtAssert_Radix_DEFAULT && strchr(Typename, '*') != NULL)\n{\n    /* looks like a pointer type */\n    RadixType = UtAssert_Radix_HEX;\n}",
    "if (strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n{\n    RefText += sizeof(UTASSERT_PREFIX) - 1;\n}",
    "if (strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n{\n    ActualText += sizeof(UTASSERT_PREFIX) - 1;\n}"
  ],
  "explanation": "Other string- and buffer-related fragments do not need investigation for MISRA C Rule 21.17 because they either do not call functions from <string.h> or they perform apparent bounds checks/usage that make out-of-bounds access unlikely: - TagStr is written using snprintf with sizeof(TagStr) and TagLen is explicitly clamped (TagLen = snprintf(...); then if TagLen > (sizeof(TagStr) - 3) TagLen = sizeof(TagStr) - 3), and subsequent writes to TagStr use those clamped indices, ensuring space for the inserted characters and the terminating null. - The loops and index accesses on TagStr use TagLen computed from snprintf and then adjusted, so subsequent indexing (TagStr[TagLen - 1], TagStr[TagLen] etc.) is bounded by the buffer size. - UtAssert_GetValueText writes into provided TempBuf using snprintf with the passed TempSz, and in the shown callers TempBuf is a local array (ActualStr/RefStr[32]) with the size value passed, so those snprintf calls are size-limited. - UtAssert_DoCompare only performs integer/bitwise operations and does not call any <string.h> functions. - UtAssert_GetOpText returns string literals and does not perform any string library calls. Therefore, aside from the listed suspicious fragments that invoke string.h functions (strchr, strncmp) without a provable guarantee about the pointed-to object extents or null-termination in all call paths, the remaining code snippets do not present apparent Rule 21.17 concerns."
}