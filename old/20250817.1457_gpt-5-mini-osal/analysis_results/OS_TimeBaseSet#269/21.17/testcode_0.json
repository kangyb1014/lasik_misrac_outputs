{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(token, 0, sizeof(*token)) can write beyond the bounds of the object referenced by token if the caller passes an invalid pointer (for example NULL or a pointer to a smaller object). Example violation: a caller invokes OS_ObjectIdTransactionInit(..., NULL); the function immediately does memset(NULL,0,sizeof(*token)) causing an out-of-bounds access. The function does not validate the pointer before calling memset, so the use of memset can result in out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseSet code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2159.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseSet as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseSet:\n```c\nint32 OS_TimeBaseSet(osal_id_t timer_id, uint32 start_time, uint32 interval_time)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Internally the implementation represents the interval as a\n     * signed 32-bit integer, but the parameter is unsigned because a negative interval\n     * does not make sense.\n     *\n     * Note that the units are intentionally left unspecified.  The external sync period\n     * could be measured in microseconds or hours -- it is whatever the application requires.\n     */\n    ARGCHECK(start_time < 1000000000, OS_TIMER_ERR_INVALID_ARGS);\n    ARGCHECK(interval_time < 1000000000, OS_TIMER_ERR_INVALID_ARGS);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMEBASE, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Need to take the time base lock to ensure that no ticks are currently being processed */\n        OS_TimeBaseLock_Impl(&token);\n\n        return_code = OS_TimeBaseSet_Impl(&token, start_time, interval_time);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Save the value since we were successful */\n            timebase->nominal_start_time    = start_time;\n            timebase->nominal_interval_time = interval_time;\n        }\n\n        OS_TimeBaseUnlock_Impl(&token);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseSet code.\n",
  "test_code": "#include <stdio.h>\n\nint32 OS_TimeBaseSet(osal_id_t timer_id, uint32 start_time, uint32 interval_time)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n    FILE *log = fopen(\"/tmp/logs/2159.txt\", \"a\");\n\n    if (log)\n    {\n        fprintf(log, \"OS_TimeBaseSet ENTRY: timer_id=0x%llx, start_time=%llu, interval_time=%llu\\n\",\n                (unsigned long long)timer_id,\n                (unsigned long long)start_time,\n                (unsigned long long)interval_time);\n        fflush(log);\n    }\n\n    /*\n     * Internally the implementation represents the interval as a\n     * signed 32-bit integer, but the parameter is unsigned because a negative interval\n     * does not make sense.\n     *\n     * Note that the units are intentionally left unspecified.  The external sync period\n     * could be measured in microseconds or hours -- it is whatever the application requires.\n     */\n    ARGCHECK(start_time < 1000000000, OS_TIMER_ERR_INVALID_ARGS);\n    ARGCHECK(interval_time < 1000000000, OS_TIMER_ERR_INVALID_ARGS);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (log)\n    {\n        fprintf(log, \"OS_TimeBaseSet: caller objtype=%d\\n\", (int)objtype);\n        fflush(log);\n    }\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_TimeBaseSet: rejected - called from a timebase context, returning OS_ERR_INCORRECT_OBJ_STATE\\n\");\n            fclose(log);\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMEBASE, timer_id, &token);\n    if (log)\n    {\n        fprintf(log, \"OS_TimeBaseSet: OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n        /* Log token address and size information to help reproduce pointer issues */\n        fprintf(log, \"OS_TimeBaseSet: token address=%p, token_size=%zu\\n\", (void *)&token, sizeof(token));\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n        if (log)\n        {\n            fprintf(log, \"OS_TimeBaseSet: located timebase at %p\\n\", (void *)timebase);\n            fflush(log);\n        }\n\n        /* Need to take the time base lock to ensure that no ticks are currently being processed */\n        if (log)\n        {\n            fprintf(log, \"OS_TimeBaseSet: attempting to lock timebase (token=%p)\\n\", (void *)&token);\n            fflush(log);\n        }\n        OS_TimeBaseLock_Impl(&token);\n        if (log)\n        {\n            fprintf(log, \"OS_TimeBaseSet: acquired lock for token=%p\\n\", (void *)&token);\n            fflush(log);\n        }\n\n        return_code = OS_TimeBaseSet_Impl(&token, start_time, interval_time);\n        if (log)\n        {\n            fprintf(log, \"OS_TimeBaseSet: OS_TimeBaseSet_Impl returned %d\\n\", (int)return_code);\n            fflush(log);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Save the value since we were successful */\n            timebase->nominal_start_time    = start_time;\n            timebase->nominal_interval_time = interval_time;\n            if (log)\n            {\n                fprintf(log, \"OS_TimeBaseSet: updated timebase->nominal_start_time=%llu, nominal_interval_time=%llu\\n\",\n                        (unsigned long long)timebase->nominal_start_time,\n                        (unsigned long long)timebase->nominal_interval_time);\n                fflush(log);\n            }\n        }\n\n        OS_TimeBaseUnlock_Impl(&token);\n        if (log)\n        {\n            fprintf(log, \"OS_TimeBaseSet: unlocked timebase (token=%p)\\n\", (void *)&token);\n            fflush(log);\n        }\n\n        OS_ObjectIdRelease(&token);\n        if (log)\n        {\n            fprintf(log, \"OS_TimeBaseSet: released object id (token=%p)\\n\", (void *)&token);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_TimeBaseSet EXIT: return_code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}