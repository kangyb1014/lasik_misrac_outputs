{
  "user_message": "An agent A claimed that the following OS_CountSemGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CountSemGetInfo.\n```c\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The declaration \u2018extern OS_common_record_t *const OS_global_count_sem_table\u2019 defines a constant pointer to a non-const OS_common_record_t. In OS_CountSemGetInfo the record obtained via OS_OBJECT_TABLE_GET is only read (e.g. record->name_entry, record->creator), so the pointer could/should be to a const-qualified type to prevent accidental modification. Per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible (e.g. extern const OS_common_record_t * const OS_global_count_sem_table), therefore the current declaration violates the rule.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Probe: Log entry and parameters */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1163.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_CountSemGetInfo: ENTRY sem_id=%d count_prop=%p\\n\", (int)sem_id, (void *)count_prop);\n            fclose(logf);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        /* Probe: Log token and record state */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1163.txt\", \"a\");\n            if (logf != NULL)\n            {\n                /* token may be an opaque type; print its address for tracing */\n                fprintf(logf, \"OS_CountSemGetInfo: ObjectIdGetById SUCCESS token=%p record=%p\\n\",\n                        (void *)&token, (void *)record);\n\n                if (record != NULL)\n                {\n                    /* Safely copy a bounded amount of the name for logging */\n                    char probe_name[64];\n                    probe_name[0] = '\\0';\n                    strncpy(probe_name, record->name_entry, sizeof(probe_name) - 1);\n                    probe_name[sizeof(probe_name) - 1] = '\\0';\n\n                    fprintf(logf, \"OS_CountSemGetInfo: record->name_entry=\\\"%s\\\" creator=%u\\n\",\n                            probe_name, (unsigned)record->creator);\n                }\n                else\n                {\n                    fprintf(logf, \"OS_CountSemGetInfo: WARNING record is NULL\\n\");\n                }\n\n                fclose(logf);\n            }\n        }\n\n        /* Preserve original behavior: copy name and creator */\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->name[sizeof(count_prop->name) - 1] = '\\0';\n        count_prop->creator = record->creator;\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        /* Probe: Log result of implementation call */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1163.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_CountSemGetInfo: OS_CountSemGetInfo_Impl returned %d\\n\", (int)return_code);\n                fclose(logf);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        /* Probe: Log failure to get object id */\n        FILE *logf = fopen(\"/tmp/logs/1163.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_CountSemGetInfo: ObjectIdGetById FAILED return_code=%d sem_id=%d\\n\",\n                    (int)return_code, (int)sem_id);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_CountSemGetInfo: ENTRY sem_id=-559038737 count_prop=0x7ffc08d7e870\nOS_CountSemGetInfo: ObjectIdGetById FAILED return_code=-35 sem_id=-559038737\nOS_CountSemGetInfo: ENTRY sem_id=0 count_prop=0x7ffc08d7e870\nOS_CountSemGetInfo: ObjectIdGetById FAILED return_code=-35 sem_id=0\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The function only reads fields from the record (record->name_entry, record->creator) and does not modify the pointed-to object; therefore the pointer to the global table should point to a const-qualified type per MISRA C 2023 Rule 8.13. The problematic declaration quoted by agent A (extern OS_common_record_t *const OS_global_count_sem_table) defines a constant pointer to a non-const object. It would be better (and compliant) to declare the table as pointing to const objects (e.g. extern const OS_common_record_t * const OS_global_count_sem_table) if the table is never modified through that pointer. The diagnostic is thus valid even though the provided runtime log shows ObjectIdGetById failures \u2014 that does not change the static-typing issue identified by Rule 8.13."
}