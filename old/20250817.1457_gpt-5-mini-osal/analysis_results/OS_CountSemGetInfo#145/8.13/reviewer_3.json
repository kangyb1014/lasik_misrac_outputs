{
  "user_message": "An agent A claimed that the following OS_CountSemGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CountSemGetInfo.\n```c\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local variable 'record' is declared as OS_common_record_t * (a non-const pointer) and is assigned the address of an element from OS_global_count_sem_table via OS_OBJECT_TABLE_GET. The function only reads fields from the record, so the pointer should be to a const-qualified type (e.g. const OS_common_record_t *record). Therefore Rule 8.13 is violated. Change the declaration to a pointer-to-const (or make the table/macro produce a pointer-to-const) to comply.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_CountSemGetInfo_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1163.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* If logging fails, do not affect original logic. */\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    /* Log entry and the pointer state */\n    OS_CountSemGetInfo_Log(\"ENTER: OS_CountSemGetInfo sem_id=%lld, count_prop_ptr=%p\", (long long)sem_id, (void *)count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    OS_CountSemGetInfo_Log(\"After OS_ObjectIdGetById: return_code=%d, token_addr=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        /* Log the record pointer and some fields that will be read */\n        if (record != NULL)\n        {\n            /* record->name_entry is expected to be a string; guard length to avoid overly long logs */\n            char name_buf[64] = {0};\n            if (record->name_entry != NULL)\n            {\n                strncpy(name_buf, record->name_entry, sizeof(name_buf) - 1);\n            }\n\n            OS_CountSemGetInfo_Log(\"Record obtained: record_ptr=%p, name_entry=\\\"%s\\\", creator=%lld\", (void *)record, name_buf, (long long)record->creator);\n        }\n        else\n        {\n            OS_CountSemGetInfo_Log(\"Record obtained: record_ptr=NULL\");\n        }\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        OS_CountSemGetInfo_Log(\"Before OS_CountSemGetInfo_Impl: token_addr=%p, count_prop_ptr=%p\", (void *)&token, (void *)count_prop);\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        OS_CountSemGetInfo_Log(\"After OS_CountSemGetInfo_Impl: return_code=%d\", (int)return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        OS_CountSemGetInfo_Log(\"Released token: token_addr=%p\", (void *)&token);\n    }\n    else\n    {\n        OS_CountSemGetInfo_Log(\"OS_ObjectIdGetById failed: return_code=%d\", (int)return_code);\n    }\n\n    OS_CountSemGetInfo_Log(\"EXIT: OS_CountSemGetInfo return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nENTER: OS_CountSemGetInfo sem_id=3735928559, count_prop_ptr=0x7ffe025e0a40\nAfter OS_ObjectIdGetById: return_code=-35, token_addr=0x7ffe025e09a0\nOS_ObjectIdGetById failed: return_code=-35\nEXIT: OS_CountSemGetInfo return_code=-35\nENTER: OS_CountSemGetInfo sem_id=0, count_prop_ptr=0x7ffe025e0a40\nAfter OS_ObjectIdGetById: return_code=-35, token_addr=0x7ffe025e09a0\nOS_ObjectIdGetById failed: return_code=-35\nEXIT: OS_CountSemGetInfo return_code=-35\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_CountSemGetInfo the local variable record is only used for read-only access (reading name_entry and creator) and is not modified; therefore it should be declared as a pointer to const (e.g. const OS_common_record_t *record) to satisfy MISRA C 2023 Rule 8.13. Assigning the result of OS_OBJECT_TABLE_GET (a non-const pointer) to a const-qualified pointer is allowed and would not change runtime behavior. The provided test logs (showing only error returns from OS_ObjectIdGetById) do not contradict this conclusion."
}