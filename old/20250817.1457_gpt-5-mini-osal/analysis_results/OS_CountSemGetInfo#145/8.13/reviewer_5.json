{
  "user_message": "An agent A claimed that the following OS_CountSemGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CountSemGetInfo.\n```c\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'record' is declared as OS_common_record_t * but is only used to read fields (record->name_entry, record->creator). It should be declared as a pointer to const-qualified type (const OS_common_record_t *record) to reflect that the pointee is not modified. Therefore Rule 8.13 is violated.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_CountSemGetInfo_Log(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1163.txt\", \"a\");\n    if (!f) return;\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\nstatic void OS_CountSemGetInfo_LogRecordState(const char *prefix, OS_common_record_t *record)\n{\n    FILE *f = fopen(\"/tmp/logs/1163.txt\", \"a\");\n    if (!f) return;\n\n    fprintf(f, \"%s: record_ptr=%p\\n\", prefix, (void *)record);\n    if (record)\n    {\n        /* Defensive print of name_entry and creator. Use bounded copies to avoid overruns. */\n        char namebuf[256];\n        if (record->name_entry)\n        {\n            strncpy(namebuf, record->name_entry, sizeof(namebuf) - 1);\n            namebuf[sizeof(namebuf) - 1] = '\\0';\n        }\n        else\n        {\n            namebuf[0] = '\\0';\n        }\n        fprintf(f, \"  name_entry=\\\"%s\\\"\\n\", namebuf);\n        fprintf(f, \"  creator=%lu\\n\", (unsigned long)record->creator);\n    }\n    fclose(f);\n}\n\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        /* Log: record snapshot BEFORE any use. */\n        OS_CountSemGetInfo_Log(\"OS_CountSemGetInfo: obtained token and record\");\n        OS_CountSemGetInfo_LogRecordState(\"BEFORE_COPY\", record);\n\n        /* Capture local snapshot of the fields we will read so we can later show they were not modified. */\n        char record_name_snapshot[256];\n        unsigned long record_creator_snapshot = 0UL;\n        if (record)\n        {\n            if (record->name_entry)\n            {\n                strncpy(record_name_snapshot, record->name_entry, sizeof(record_name_snapshot) - 1);\n                record_name_snapshot[sizeof(record_name_snapshot) - 1] = '\\0';\n            }\n            else\n            {\n                record_name_snapshot[0] = '\\0';\n            }\n            record_creator_snapshot = (unsigned long)record->creator;\n        }\n\n        /* Original logic preserved: copy from record into count_prop */\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        /* Log: after copying into count_prop */\n        {\n            char msg[256];\n            snprintf(msg, sizeof(msg), \"COPIED_TO_COUNT_PROP: count_prop->name=\\\"%s\\\", count_prop->creator=%lu\",\n                     count_prop->name, (unsigned long)count_prop->creator);\n            OS_CountSemGetInfo_Log(msg);\n        }\n\n        /* Call implementation hook (preserve behavior) */\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        /* Log: record snapshot AFTER the Impl call to demonstrate non-modification in normal flow. */\n        OS_CountSemGetInfo_LogRecordState(\"AFTER_IMPL\", record);\n\n        /* Compare snapshots and log any differences. This gives evidence that the function only read from record. */\n        {\n            char msg[512];\n            const char *name_after = (record && record->name_entry) ? record->name_entry : \"\";\n            unsigned long creator_after = record ? (unsigned long)record->creator : 0UL;\n\n            if (strncmp(record_name_snapshot, name_after, sizeof(record_name_snapshot)) == 0 && record_creator_snapshot == creator_after)\n            {\n                snprintf(msg, sizeof(msg), \"RECORD_UNCHANGED: name_snapshot=\\\"%s\\\", creator_snapshot=%lu\", record_name_snapshot, record_creator_snapshot);\n            }\n            else\n            {\n                snprintf(msg, sizeof(msg), \"RECORD_CHANGED: before(name=\\\"%s\\\", creator=%lu) after(name=\\\"%s\\\", creator=%lu)\",\n                         record_name_snapshot, record_creator_snapshot, name_after, creator_after);\n            }\n            OS_CountSemGetInfo_Log(msg);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_CountSemGetInfo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In OS_CountSemGetInfo the local variable record is only used to read fields (record->name_entry and record->creator) and is never used to modify the pointee. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible, so declaring it as const OS_common_record_t *record would better express immutability and satisfy the rule. The runtime logging provided in the test code does not affect the static-qualifier requirement; an empty log or lack of test coverage does not negate the need to const-qualify the pointer. Therefore the reported violation is correct."
}