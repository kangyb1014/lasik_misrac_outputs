{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe declaration \u2018extern OS_common_record_t *const OS_global_count_sem_table\u2019 defines a constant pointer to a non-const OS_common_record_t. In OS_CountSemGetInfo the record obtained via OS_OBJECT_TABLE_GET is only read (e.g. record->name_entry, record->creator), so the pointer could/should be to a const-qualified type to prevent accidental modification. Per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible (e.g. extern const OS_common_record_t * const OS_global_count_sem_table), therefore the current declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1163.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGetInfo:\n```c\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemGetInfo code.\n",
  "test_code": "int32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Probe: Log entry and parameters */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1163.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_CountSemGetInfo: ENTRY sem_id=%d count_prop=%p\\n\", (int)sem_id, (void *)count_prop);\n            fclose(logf);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        /* Probe: Log token and record state */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1163.txt\", \"a\");\n            if (logf != NULL)\n            {\n                /* token may be an opaque type; print its numeric value for tracing */\n                fprintf(logf, \"OS_CountSemGetInfo: ObjectIdGetById SUCCESS token=%p record=%p\\n\",\n                        (void *)(uintptr_t)token, (void *)record);\n\n                if (record != NULL)\n                {\n                    /* Safely copy a bounded amount of the name for logging */\n                    char probe_name[64];\n                    probe_name[0] = '\\0';\n                    strncpy(probe_name, record->name_entry, sizeof(probe_name) - 1);\n                    probe_name[sizeof(probe_name) - 1] = '\\0';\n\n                    fprintf(logf, \"OS_CountSemGetInfo: record->name_entry=\\\"%s\\\" creator=%u\\n\",\n                            probe_name, (unsigned)record->creator);\n                }\n                else\n                {\n                    fprintf(logf, \"OS_CountSemGetInfo: WARNING record is NULL\\n\");\n                }\n\n                fclose(logf);\n            }\n        }\n\n        /* Preserve original behavior: copy name and creator */\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->name[sizeof(count_prop->name) - 1] = '\\0';\n        count_prop->creator = record->creator;\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        /* Probe: Log result of implementation call */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1163.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_CountSemGetInfo: OS_CountSemGetInfo_Impl returned %d\\n\", (int)return_code);\n                fclose(logf);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        /* Probe: Log failure to get object id */\n        FILE *logf = fopen(\"/tmp/logs/1163.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_CountSemGetInfo: ObjectIdGetById FAILED return_code=%d sem_id=%d\\n\",\n                    (int)return_code, (int)sem_id);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}"
}