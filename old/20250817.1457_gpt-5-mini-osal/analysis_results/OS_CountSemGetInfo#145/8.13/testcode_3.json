{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' is declared as OS_common_record_t * (a non-const pointer) and is assigned the address of an element from OS_global_count_sem_table via OS_OBJECT_TABLE_GET. The function only reads fields from the record, so the pointer should be to a const-qualified type (e.g. const OS_common_record_t *record). Therefore Rule 8.13 is violated. Change the declaration to a pointer-to-const (or make the table/macro produce a pointer-to-const) to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1163.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGetInfo:\n```c\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging function used to append logs for reproducing the scenario. */\nstatic void OS_CountSemGetInfo_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1163.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* If logging fails, do not affect original logic. */\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    /* Log entry and the pointer state */\n    OS_CountSemGetInfo_Log(\"ENTER: OS_CountSemGetInfo sem_id=%lld, count_prop_ptr=%p\", (long long)sem_id, (void *)count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    OS_CountSemGetInfo_Log(\"After OS_ObjectIdGetById: return_code=%d, token_addr=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        /* Log the record pointer and some fields that will be read */\n        if (record != NULL)\n        {\n            /* record->name_entry is expected to be a string; guard length to avoid overly long logs */\n            char name_buf[64] = {0};\n            if (record->name_entry != NULL)\n            {\n                strncpy(name_buf, record->name_entry, sizeof(name_buf) - 1);\n            }\n\n            OS_CountSemGetInfo_Log(\"Record obtained: record_ptr=%p, name_entry=\\\"%s\\\", creator=%lld\", (void *)record, name_buf, (long long)record->creator);\n        }\n        else\n        {\n            OS_CountSemGetInfo_Log(\"Record obtained: record_ptr=NULL\");\n        }\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        OS_CountSemGetInfo_Log(\"Before OS_CountSemGetInfo_Impl: token_addr=%p, count_prop_ptr=%p\", (void *)&token, (void *)count_prop);\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        OS_CountSemGetInfo_Log(\"After OS_CountSemGetInfo_Impl: return_code=%d\", (int)return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        OS_CountSemGetInfo_Log(\"Released token: token_addr=%p\", (void *)&token);\n    }\n    else\n    {\n        OS_CountSemGetInfo_Log(\"OS_ObjectIdGetById failed: return_code=%d\", (int)return_code);\n    }\n\n    OS_CountSemGetInfo_Log(\"EXIT: OS_CountSemGetInfo return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}