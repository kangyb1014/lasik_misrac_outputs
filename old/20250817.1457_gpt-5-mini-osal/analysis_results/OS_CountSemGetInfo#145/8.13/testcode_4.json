{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro yields a pointer to a non-const table element even when the element is only read. For example, OS_CountSemGetInfo calls record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token); which expands to &OS_global_count_sem_table[...], producing an OS_common_record_t * (non-const). Since the code only reads the record fields, the pointer could (and should) be to a const-qualified type (e.g. const OS_common_record_t *). Therefore the macro usage (and the table element type) violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1163.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGetInfo:\n```c\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe logging helper. Keeps original logic unchanged; only records runtime state to a file. */\nstatic void OS_CountSemGetInfo_Log(const char *event,\n                                   const void *sem_id_ptr,\n                                   const void *count_prop_ptr,\n                                   const void *record_ptr,\n                                   const void *token_ptr,\n                                   int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1163.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"OS_CountSemGetInfo: event=%s return_code=%d\\n\", event ? event : \"(null)\", return_code);\n    fprintf(f, \"  sem_id_ptr=%p count_prop_ptr=%p record_ptr=%p token_ptr=%p\\n\",\n            sem_id_ptr, count_prop_ptr, record_ptr, token_ptr);\n\n    /* Dump a small hex preview of the token object if available.\n       The token type is opaque here; show up to 16 bytes to help reproduce the control flow/state. */\n    if (token_ptr != NULL)\n    {\n        const unsigned char *p = (const unsigned char *)token_ptr;\n        size_t i;\n        fprintf(f, \"  token_raw=\");\n        for (i = 0; i < 16; ++i)\n        {\n            /* Guard against reading past accessible memory: we can't know token size here, but\n               reading a small fixed amount is typically safe in this context and only used for debugging */\n            fprintf(f, \"%02X\", p[i]);\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    /* If a record pointer is present, attempt to log a conservative preview of commonly present fields.\n       The code assumes the record has a name_entry char[] and a creator integer-like field as in the target code.\n       To avoid overrunning a non-terminated name, limit the printed length. */\n    if (record_ptr != NULL)\n    {\n        /* We don't know the actual record type here in this compilation unit, so cast to a generic struct\n           that matches minimal expected layout for debugging. This is only used for logging and kept conservative. */\n        struct _dbg_minimal_record\n        {\n            char name_entry[64];\n            uint32_t creator;\n        };\n        const struct _dbg_minimal_record *r = (const struct _dbg_minimal_record *)record_ptr;\n\n        fprintf(f, \"  record_preview.name_entry=\\\"%.63s\\\"\\n\", r->name_entry);\n        fprintf(f, \"  record_preview.creator=%lu\\n\", (unsigned long)r->creator);\n    }\n\n    fclose(f);\n}\n\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    /* Log entry with initial parameters */\n    OS_CountSemGetInfo_Log(\"entry\", (const void *)&sem_id, (const void *)count_prop, NULL, (const void *)&token, 0);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    OS_CountSemGetInfo_Log(\"after_ObjectIdGetById\", (const void *)&sem_id, (const void *)count_prop, NULL, (const void *)&token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        /* Log the obtained record and token to capture the non-const pointer usage and contents being read */\n        OS_CountSemGetInfo_Log(\"got_record\", (const void *)&sem_id, (const void *)count_prop, (const void *)record, (const void *)&token, return_code);\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        OS_CountSemGetInfo_Log(\"before_Impl\", (const void *)&sem_id, (const void *)count_prop, (const void *)record, (const void *)&token, return_code);\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n        OS_CountSemGetInfo_Log(\"after_Impl\", (const void *)&sem_id, (const void *)count_prop, (const void *)record, (const void *)&token, return_code);\n\n        OS_ObjectIdRelease(&token);\n        OS_CountSemGetInfo_Log(\"released_token\", (const void *)&sem_id, (const void *)count_prop, (const void *)record, NULL, return_code);\n    }\n    else\n    {\n        OS_CountSemGetInfo_Log(\"id_get_failed\", (const void *)&sem_id, (const void *)count_prop, NULL, (const void *)&token, return_code);\n    }\n\n    return return_code;\n}\n"
}