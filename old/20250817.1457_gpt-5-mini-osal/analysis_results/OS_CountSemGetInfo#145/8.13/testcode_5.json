{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'record' is declared as OS_common_record_t * but is only used to read fields (record->name_entry, record->creator). It should be declared as a pointer to const-qualified type (const OS_common_record_t *record) to reflect that the pointee is not modified. Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1163.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGetInfo:\n```c\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe helper: append logs to /tmp/logs/1163.txt. Keep simple and resilient. */\nstatic void OS_CountSemGetInfo_Log(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1163.txt\", \"a\");\n    if (!f) return;\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\nstatic void OS_CountSemGetInfo_LogRecordState(const char *prefix, OS_common_record_t *record)\n{\n    FILE *f = fopen(\"/tmp/logs/1163.txt\", \"a\");\n    if (!f) return;\n\n    fprintf(f, \"%s: record_ptr=%p\\n\", prefix, (void *)record);\n    if (record)\n    {\n        /* Defensive print of name_entry and creator. Use bounded copies to avoid overruns. */\n        char namebuf[256];\n        if (record->name_entry)\n        {\n            strncpy(namebuf, record->name_entry, sizeof(namebuf) - 1);\n            namebuf[sizeof(namebuf) - 1] = '\\0';\n        }\n        else\n        {\n            namebuf[0] = '\\0';\n        }\n        fprintf(f, \"  name_entry=\\\"%s\\\"\\n\", namebuf);\n        fprintf(f, \"  creator=%lu\\n\", (unsigned long)record->creator);\n    }\n    fclose(f);\n}\n\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        /* Log: record snapshot BEFORE any use. */\n        OS_CountSemGetInfo_Log(\"OS_CountSemGetInfo: obtained token and record\");\n        OS_CountSemGetInfo_LogRecordState(\"BEFORE_COPY\", record);\n\n        /* Capture local snapshot of the fields we will read so we can later show they were not modified. */\n        char record_name_snapshot[256];\n        unsigned long record_creator_snapshot = 0UL;\n        if (record)\n        {\n            if (record->name_entry)\n            {\n                strncpy(record_name_snapshot, record->name_entry, sizeof(record_name_snapshot) - 1);\n                record_name_snapshot[sizeof(record_name_snapshot) - 1] = '\\0';\n            }\n            else\n            {\n                record_name_snapshot[0] = '\\0';\n            }\n            record_creator_snapshot = (unsigned long)record->creator;\n        }\n\n        /* Original logic preserved: copy from record into count_prop */\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        /* Log: after copying into count_prop */\n        {\n            char msg[256];\n            snprintf(msg, sizeof(msg), \"COPIED_TO_COUNT_PROP: count_prop->name=\\\"%s\\\", count_prop->creator=%lu\",\n                     count_prop->name, (unsigned long)count_prop->creator);\n            OS_CountSemGetInfo_Log(msg);\n        }\n\n        /* Call implementation hook (preserve behavior) */\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        /* Log: record snapshot AFTER the Impl call to demonstrate non-modification in normal flow. */\n        OS_CountSemGetInfo_LogRecordState(\"AFTER_IMPL\", record);\n\n        /* Compare snapshots and log any differences. This gives evidence that the function only read from record. */\n        {\n            char msg[512];\n            const char *name_after = (record && record->name_entry) ? record->name_entry : \"\";\n            unsigned long creator_after = record ? (unsigned long)record->creator : 0UL;\n\n            if (strncmp(record_name_snapshot, name_after, sizeof(record_name_snapshot)) == 0 && record_creator_snapshot == creator_after)\n            {\n                snprintf(msg, sizeof(msg), \"RECORD_UNCHANGED: name_snapshot=\\\"%s\\\", creator_snapshot=%lu\", record_name_snapshot, record_creator_snapshot);\n            }\n            else\n            {\n                snprintf(msg, sizeof(msg), \"RECORD_CHANGED: before(name=\\\"%s\\\", creator=%lu) after(name=\\\"%s\\\", creator=%lu)\",\n                         record_name_snapshot, record_creator_snapshot, name_after, creator_after);\n            }\n            OS_CountSemGetInfo_Log(msg);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n"
}