{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1) can read up to sizeof(count_prop->name)-1 bytes from record->name_entry. If record->name_entry is a smaller array or is not NUL-terminated within that many bytes (for example record->name_entry has length < sizeof(count_prop->name)-1 or points into memory with fewer bytes available), strncpy will access beyond the bounds of the source object and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1167.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGetInfo:\n```c\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n\nint32 OS_CountSemGetInfo(osal_id_t sem_id, OS_count_sem_prop_t *count_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(count_prop);\n\n    /* Initialize the output structure as in original implementation */\n    memset(count_prop, 0, sizeof(OS_count_sem_prop_t));\n\n    /* Logging probe: entry */\n    {\n        FILE *log = fopen(\"/tmp/logs/1167.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_CountSemGetInfo: entry sem_id=%lu, count_prop=%p\\n\",\n                    (unsigned long)sem_id, (void *)count_prop);\n            fclose(log);\n        }\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_count_sem_table, token);\n\n        /* Logging probe: about to perform strncpy. Do NOT read from record->name_entry to avoid\n         * potential out-of-bounds access. Instead, record pointer values and sizes so an external\n         * agent can reason about the possibility of a violation. */\n        {\n            FILE *log = fopen(\"/tmp/logs/1167.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"OS_CountSemGetInfo: token=%p, record=%p\\n\", (void *)&token, (void *)record);\n                if (record != NULL)\n                {\n                    /* Log the source pointer address but do not dereference it. */\n                    fprintf(log, \"OS_CountSemGetInfo: record->name_entry=%p\\n\", (void *)record->name_entry);\n                }\n                fprintf(log, \"OS_CountSemGetInfo: destination count_prop->name=%p, sizeof(name)=%zu, copy_max=%zu\\n\",\n                        (void *)count_prop->name,\n                        sizeof(count_prop->name),\n                        (size_t)(sizeof(count_prop->name) - 1));\n                fprintf(log, \"OS_CountSemGetInfo: performing strncpy(count_prop->name, record->name_entry, %zu)\\n\",\n                        (size_t)(sizeof(count_prop->name) - 1));\n                fclose(log);\n            }\n        }\n\n        /* Original potentially-problematic operation retained to preserve logic. */\n        strncpy(count_prop->name, record->name_entry, sizeof(count_prop->name) - 1);\n        count_prop->creator = record->creator;\n\n        /* Logging probe: after strncpy - it is safe to log the destination buffer because it was\n         * zero-initialized above (memset) so it remains NUL-terminated even if the source wasn't. */\n        {\n            FILE *log = fopen(\"/tmp/logs/1167.txt\", \"a\");\n            if (log)\n            {\n                /* Print the resulting name (safe) and the creator value */\n                fprintf(log, \"OS_CountSemGetInfo: after strncpy, count_prop->name='%s' (truncated to %zu), creator=%lu\\n\",\n                        (char *)count_prop->name,\n                        sizeof(count_prop->name),\n                        (unsigned long)count_prop->creator);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_CountSemGetInfo_Impl(&token, count_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        /* Log failure to obtain object id */\n        FILE *log = fopen(\"/tmp/logs/1167.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_CountSemGetInfo: OS_ObjectIdGetById failed, return_code=%ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    /* Final return logging */\n    {\n        FILE *log = fopen(\"/tmp/logs/1167.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_CountSemGetInfo: exit return_code=%ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}