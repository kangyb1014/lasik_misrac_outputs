{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SelectFdIsSet:\n```c\nbool OS_SelectFdIsSet(const OS_FdSet *Set, osal_id_t objid)\n{\n    int32        return_code;\n    osal_index_t local_id;\n\n    /* check parameters */\n    BUGCHECK(Set != NULL, false);\n\n    return_code = OS_ObjectIdToArrayIndex(OS_OBJECT_TYPE_OS_STREAM, objid, &local_id);\n    if (return_code != OS_SUCCESS)\n    {\n        return false;\n    }\n\n    /*\n     * Returns boolean for if the bit in the uint8 object_ids array that corresponds\n     * to the local_id is set where local_id >> 3 determines the array element,\n     * and the mask/shift checks the bit within that element.\n     */\n    return ((Set->object_ids[local_id >> 3] >> (local_id & 0x7)) & 0x1);\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "BUGCHECK(Set != NULL, false);"
  ],
  "explanation": "I did not find any explicit compiler-specific keywords or constructs (for example: __attribute__, __asm__, __builtin_*, typeof, __int128, GCC statement-expressions ({ ... }), Microsoft-specific __forceinline/__declspec, or other vendor-specific keywords) in the provided snippet. The function signature using bool/true/false is standard C (stdbool.h), and the integer types and identifiers (int32, osal_index_t, osal_id_t, OS_FdSet) appear to be typedefs or project types, not language extensions by themselves. Bitwise and shift operations, the return of an integer expression to a bool, and the function call to OS_ObjectIdToArrayIndex are all standard C constructs. The only fragment that could hide a compiler extension is the BUGCHECK macro invocation: macros can expand to compiler-specific extensions (builtins, statement-expressions, attributes, inline assembly, etc.), but the macro definition is not provided here. Therefore BUGCHECK(...) should be investigated to confirm its expansion does not use any compiler-specific language extensions."
}