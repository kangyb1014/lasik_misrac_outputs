{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strerror(errno) returns a char * (pointer to a non-const char). The code passes that result directly to OS_DEBUG without binding it to a const-qualified pointer. Per MISRA C 2023 Rule 8.13, the returned pointer should be treated as pointing to const data when it is not modified (e.g. const char *msg = strerror(errno); and then use msg).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Posix_GetSchedulerParams code that contains useful probe functions that print useful logs to a file \"/tmp/logs/451.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Posix_GetSchedulerParams as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Posix_GetSchedulerParams:\n```c\nstatic bool OS_Posix_GetSchedulerParams(int sched_policy, POSIX_PriorityLimits_t *PriLim)\n{\n    int ret;\n\n    /*\n     * Set up the local Min/Max priority levels (varies by OS and scheduler policy)\n     *\n     * Per POSIX:\n     *  - The sched_get_priority_min/max() returns a number >= 0 on success.\n     *    (-1 indicates an error)\n     *  - Numerically higher values are scheduled before numerically lower values\n     *  - A compliant OS will have a spread of at least 32 between min and max\n     */\n    ret = sched_get_priority_max(sched_policy);\n    if (ret < 0)\n    {\n        OS_DEBUG(\"Policy %d: Unable to obtain maximum scheduling priority: %s\\n\", sched_policy, strerror(errno));\n        return false;\n    }\n\n    PriLim->PriorityMax = ret;\n\n    ret = sched_get_priority_min(sched_policy);\n    if (ret < 0)\n    {\n        OS_DEBUG(\"Policy %d: Unable to obtain minimum scheduling priority: %s\\n\", sched_policy, strerror(errno));\n        return false;\n    }\n\n    PriLim->PriorityMin = ret;\n\n    /*\n     * For OSAL, the absolute minimum spread between min and max must be 4.\n     *\n     * Although POSIX stipulates 32, we don't necessarily need that many, but we\n     * also want to confirm that there is an acceptable spread.\n     *\n     * - Highest is reserved for the root task\n     * - Next highest is reserved for OSAL priority=0 task(s)\n     * - Lowest is reserved for OSAL priority=255 tasks(s)\n     * - Need at least 1 for everything else.\n     */\n    if ((PriLim->PriorityMax - PriLim->PriorityMin) < 4)\n    {\n        OS_DEBUG(\"Policy %d: Insufficient spread between priority min-max: %d-%d\\n\", sched_policy,\n                 (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n        return false;\n    }\n\n    /* If we get here, then the sched_policy is potentially valid */\n    OS_DEBUG(\"Policy %d: available, min-max: %d-%d\\n\", sched_policy, (int)PriLim->PriorityMin,\n             (int)PriLim->PriorityMax);\n    return true;\n}\n```\n</target_code>\nPlease provide the modified OS_Posix_GetSchedulerParams code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <stdbool.h>\n\n/* Probe logger: append diagnostics to /tmp/logs/451.txt\n * Keeps the original logic intact but records control flow and state\n * so other agents can reproduce the scenario where strerror(errno) is used.\n */\nstatic void OS_Probe_Log(const char *event, int sched_policy, int ret, int errnum, const char *errmsg, const void *PriLim)\n{\n    FILE *f = fopen(\"/tmp/logs/451.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"EVENT: %s | policy=%d | ret=%d | errno=%d | errmsg=\\\"%s\\\"\", event, sched_policy, ret, errnum, errmsg ? errmsg : \"(null)\");\n        if (PriLim != NULL)\n        {\n            /* Print potential PriorityMin/PriorityMax values if available. Use casts to avoid depending on type definition here. */\n            const int *vals = (const int *)PriLim;\n            /* We expect the structure layout to have PriorityMin then PriorityMax as ints/compatible types; if not available, this is still a benign probe. */\n            fprintf(f, \" | PriMin=%d | PriMax=%d\", vals[0], vals[1]);\n        }\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nstatic bool OS_Posix_GetSchedulerParams(int sched_policy, POSIX_PriorityLimits_t *PriLim)\n{\n    int ret;\n\n    /*\n     * Set up the local Min/Max priority levels (varies by OS and scheduler policy)\n     *\n     * Per POSIX:\n     *  - The sched_get_priority_min/max() returns a number >= 0 on success.\n     *    (-1 indicates an error)\n     *  - Numerically higher values are scheduled before numerically lower values\n     *  - A compliant OS will have a spread of at least 32 between min and max\n     */\n    ret = sched_get_priority_max(sched_policy);\n    if (ret < 0)\n    {\n        /* Capture strerror result as const-qualified pointer per MISRA C 2023 Rule 8.13 */\n        const char *msg = strerror(errno);\n\n        /* Probe log for reproduction/evidence */\n        OS_Probe_Log(\"get_priority_max_failed\", sched_policy, ret, errno, msg, PriLim);\n\n        /* Preserve original behavior: report via OS_DEBUG */\n        OS_DEBUG(\"Policy %d: Unable to obtain maximum scheduling priority: %s\\n\", sched_policy, msg);\n        return false;\n    }\n\n    PriLim->PriorityMax = ret;\n\n    ret = sched_get_priority_min(sched_policy);\n    if (ret < 0)\n    {\n        const char *msg = strerror(errno);\n\n        OS_Probe_Log(\"get_priority_min_failed\", sched_policy, ret, errno, msg, PriLim);\n\n        OS_DEBUG(\"Policy %d: Unable to obtain minimum scheduling priority: %s\\n\", sched_policy, msg);\n        return false;\n    }\n\n    PriLim->PriorityMin = ret;\n\n    /*\n     * For OSAL, the absolute minimum spread between min and max must be 4.\n     *\n     * Although POSIX stipulates 32, we don't necessarily need that many, but we\n     * also want to confirm that there is an acceptable spread.\n     *\n     * - Highest is reserved for the root task\n     * - Next highest is reserved for OSAL priority=0 task(s)\n     * - Lowest is reserved for OSAL priority=255 tasks(s)\n     * - Need at least 1 for everything else.\n     */\n    if ((PriLim->PriorityMax - PriLim->PriorityMin) < 4)\n    {\n        char detail[128];\n        /* Safe formatting into a local buffer for probe and debug output */\n        (void)snprintf(detail, sizeof(detail), \"Insufficient spread: %d-%d\", (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n\n        OS_Probe_Log(\"insufficient_spread\", sched_policy, 0, 0, detail, PriLim);\n\n        OS_DEBUG(\"Policy %d: Insufficient spread between priority min-max: %d-%d\\n\", sched_policy,\n                 (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n        return false;\n    }\n\n    /* If we get here, then the sched_policy is potentially valid */\n    {\n        char detail[128];\n        (void)snprintf(detail, sizeof(detail), \"available, min-max: %d-%d\", (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n        OS_Probe_Log(\"policy_available\", sched_policy, 0, 0, detail, PriLim);\n    }\n\n    OS_DEBUG(\"Policy %d: available, min-max: %d-%d\\n\", sched_policy, (int)PriLim->PriorityMin,\n             (int)PriLim->PriorityMax);\n    return true;\n}\n"
}