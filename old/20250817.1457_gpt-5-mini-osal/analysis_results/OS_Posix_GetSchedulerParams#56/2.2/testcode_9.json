{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe 'default: break;' in the switch statement is redundant dead code: if none of the case labels match, control naturally continues after the switch whether the default label is present or not. The break statement in the default branch performs no action that affects program behaviour, so it is an operation that (when executed) could be removed without changing program behaviour, violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Posix_GetSchedulerParams code that contains useful probe functions that print useful logs to a file \"/tmp/logs/450.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Posix_GetSchedulerParams as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Posix_GetSchedulerParams:\n```c\nstatic bool OS_Posix_GetSchedulerParams(int sched_policy, POSIX_PriorityLimits_t *PriLim)\n{\n    int ret;\n\n    /*\n     * Set up the local Min/Max priority levels (varies by OS and scheduler policy)\n     *\n     * Per POSIX:\n     *  - The sched_get_priority_min/max() returns a number >= 0 on success.\n     *    (-1 indicates an error)\n     *  - Numerically higher values are scheduled before numerically lower values\n     *  - A compliant OS will have a spread of at least 32 between min and max\n     */\n    ret = sched_get_priority_max(sched_policy);\n    if (ret < 0)\n    {\n        OS_DEBUG(\"Policy %d: Unable to obtain maximum scheduling priority: %s\\n\", sched_policy, strerror(errno));\n        return false;\n    }\n\n    PriLim->PriorityMax = ret;\n\n    ret = sched_get_priority_min(sched_policy);\n    if (ret < 0)\n    {\n        OS_DEBUG(\"Policy %d: Unable to obtain minimum scheduling priority: %s\\n\", sched_policy, strerror(errno));\n        return false;\n    }\n\n    PriLim->PriorityMin = ret;\n\n    /*\n     * For OSAL, the absolute minimum spread between min and max must be 4.\n     *\n     * Although POSIX stipulates 32, we don't necessarily need that many, but we\n     * also want to confirm that there is an acceptable spread.\n     *\n     * - Highest is reserved for the root task\n     * - Next highest is reserved for OSAL priority=0 task(s)\n     * - Lowest is reserved for OSAL priority=255 tasks(s)\n     * - Need at least 1 for everything else.\n     */\n    if ((PriLim->PriorityMax - PriLim->PriorityMin) < 4)\n    {\n        OS_DEBUG(\"Policy %d: Insufficient spread between priority min-max: %d-%d\\n\", sched_policy,\n                 (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n        return false;\n    }\n\n    /* If we get here, then the sched_policy is potentially valid */\n    OS_DEBUG(\"Policy %d: available, min-max: %d-%d\\n\", sched_policy, (int)PriLim->PriorityMin,\n             (int)PriLim->PriorityMax);\n    return true;\n}\n```\n</target_code>\nPlease provide the modified OS_Posix_GetSchedulerParams code.\n",
  "test_code": "static bool OS_Posix_GetSchedulerParams(int sched_policy, POSIX_PriorityLimits_t *PriLim)\n{\n    /* Include standard I/O headers here so the logging code has the required\n     * declarations. Including inside the function is valid since the preprocessor\n     * runs before compilation and these headers primarily add declarations. */\n#include <stdio.h>\n#include <time.h>\n\n    int ret;\n\n    /* Helper: append a timestamped message to the log file. Keep this inline\n     * and minimal to avoid changing program flow. */\n    {\n        FILE *log = fopen(\"/tmp/logs/450.txt\", \"a\");\n        if (log != NULL)\n        {\n            time_t now = time(NULL);\n            fprintf(log, \"[%ld] OS_Posix_GetSchedulerParams ENTER: sched_policy=%d\\n\", (long)now, sched_policy);\n            fclose(log);\n        }\n    }\n\n    /*\n     * Set up the local Min/Max priority levels (varies by OS and scheduler policy)\n     *\n     * Per POSIX:\n     *  - The sched_get_priority_min/max() returns a number >= 0 on success.\n     *    (-1 indicates an error)\n     *  - Numerically higher values are scheduled before numerically lower values\n     *  - A compliant OS will have a spread of at least 32 between min and max\n     */\n    ret = sched_get_priority_max(sched_policy);\n    if (ret < 0)\n    {\n        /* Log the error details before returning */\n        {\n            FILE *log = fopen(\"/tmp/logs/450.txt\", \"a\");\n            if (log != NULL)\n            {\n                time_t now = time(NULL);\n                fprintf(log, \"[%ld] sched_get_priority_max FAILED: policy=%d ret=%d errno=%d msg=%s\\n\",\n                        (long)now, sched_policy, ret, errno, strerror(errno));\n                fclose(log);\n            }\n        }\n\n        OS_DEBUG(\"Policy %d: Unable to obtain maximum scheduling priority: %s\\n\", sched_policy, strerror(errno));\n        return false;\n    }\n\n    PriLim->PriorityMax = ret;\n\n    /* Log the obtained max priority value */\n    {\n        FILE *log = fopen(\"/tmp/logs/450.txt\", \"a\");\n        if (log != NULL)\n        {\n            time_t now = time(NULL);\n            fprintf(log, \"[%ld] Obtained PriorityMax=%d for policy=%d\\n\", (long)now, (int)PriLim->PriorityMax, sched_policy);\n            fclose(log);\n        }\n    }\n\n    ret = sched_get_priority_min(sched_policy);\n    if (ret < 0)\n    {\n        /* Log the error details before returning */\n        {\n            FILE *log = fopen(\"/tmp/logs/450.txt\", \"a\");\n            if (log != NULL)\n            {\n                time_t now = time(NULL);\n                fprintf(log, \"[%ld] sched_get_priority_min FAILED: policy=%d ret=%d errno=%d msg=%s\\n\",\n                        (long)now, sched_policy, ret, errno, strerror(errno));\n                fclose(log);\n            }\n        }\n\n        OS_DEBUG(\"Policy %d: Unable to obtain minimum scheduling priority: %s\\n\", sched_policy, strerror(errno));\n        return false;\n    }\n\n    PriLim->PriorityMin = ret;\n\n    /* Log the obtained min priority value */\n    {\n        FILE *log = fopen(\"/tmp/logs/450.txt\", \"a\");\n        if (log != NULL)\n        {\n            time_t now = time(NULL);\n            fprintf(log, \"[%ld] Obtained PriorityMin=%d for policy=%d\\n\", (long)now, (int)PriLim->PriorityMin, sched_policy);\n            fclose(log);\n        }\n    }\n\n    /*\n     * For OSAL, the absolute minimum spread between min and max must be 4.\n     *\n     * Although POSIX stipulates 32, we don't necessarily need that many, but we\n     * also want to confirm that there is an acceptable spread.\n     *\n     * - Highest is reserved for the root task\n     * - Next highest is reserved for OSAL priority=0 task(s)\n     * - Lowest is reserved for OSAL priority=255 tasks(s)\n     * - Need at least 1 for everything else.\n     */\n    if ((PriLim->PriorityMax - PriLim->PriorityMin) < 4)\n    {\n        /* Log the insufficient spread and state before returning */\n        {\n            FILE *log = fopen(\"/tmp/logs/450.txt\", \"a\");\n            if (log != NULL)\n            {\n                time_t now = time(NULL);\n                fprintf(log, \"[%ld] Insufficient spread: policy=%d PriorityMin=%d PriorityMax=%d spread=%d\\n\",\n                        (long)now, sched_policy, (int)PriLim->PriorityMin, (int)PriLim->PriorityMax,\n                        (int)(PriLim->PriorityMax - PriLim->PriorityMin));\n                fclose(log);\n            }\n        }\n\n        OS_DEBUG(\"Policy %d: Insufficient spread between priority min-max: %d-%d\\n\", sched_policy,\n                 (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n        return false;\n    }\n\n    /* If we get here, then the sched_policy is potentially valid */\n    OS_DEBUG(\"Policy %d: available, min-max: %d-%d\\n\", sched_policy, (int)PriLim->PriorityMin,\n             (int)PriLim->PriorityMax);\n\n    /* Log final success and state */\n    {\n        FILE *log = fopen(\"/tmp/logs/450.txt\", \"a\");\n        if (log != NULL)\n        {\n            time_t now = time(NULL);\n            fprintf(log, \"[%ld] SUCCESS: policy=%d PriorityMin=%d PriorityMax=%d\\n\",\n                    (long)now, sched_policy, (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n            fclose(log);\n        }\n    }\n\n    return true;\n}\n"
}