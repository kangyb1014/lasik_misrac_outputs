{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe OS_DEBUG macro is defined as empty (#define OS_DEBUG(__VA_ARGS__)), so every invocation like OS_DEBUG(\"...\"); in the codebase becomes a null statement (no effect). These debug calls are operations present in the source whose removal would not change program behaviour \u2014 i.e. they are dead code (for example the many OS_DEBUG(...) calls in OS_Posix_GetSchedulerParams).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Posix_GetSchedulerParams code that contains useful probe functions that print useful logs to a file \"/tmp/logs/450.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Posix_GetSchedulerParams as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Posix_GetSchedulerParams:\n```c\nstatic bool OS_Posix_GetSchedulerParams(int sched_policy, POSIX_PriorityLimits_t *PriLim)\n{\n    int ret;\n\n    /*\n     * Set up the local Min/Max priority levels (varies by OS and scheduler policy)\n     *\n     * Per POSIX:\n     *  - The sched_get_priority_min/max() returns a number >= 0 on success.\n     *    (-1 indicates an error)\n     *  - Numerically higher values are scheduled before numerically lower values\n     *  - A compliant OS will have a spread of at least 32 between min and max\n     */\n    ret = sched_get_priority_max(sched_policy);\n    if (ret < 0)\n    {\n        OS_DEBUG(\"Policy %d: Unable to obtain maximum scheduling priority: %s\\n\", sched_policy, strerror(errno));\n        return false;\n    }\n\n    PriLim->PriorityMax = ret;\n\n    ret = sched_get_priority_min(sched_policy);\n    if (ret < 0)\n    {\n        OS_DEBUG(\"Policy %d: Unable to obtain minimum scheduling priority: %s\\n\", sched_policy, strerror(errno));\n        return false;\n    }\n\n    PriLim->PriorityMin = ret;\n\n    /*\n     * For OSAL, the absolute minimum spread between min and max must be 4.\n     *\n     * Although POSIX stipulates 32, we don't necessarily need that many, but we\n     * also want to confirm that there is an acceptable spread.\n     *\n     * - Highest is reserved for the root task\n     * - Next highest is reserved for OSAL priority=0 task(s)\n     * - Lowest is reserved for OSAL priority=255 tasks(s)\n     * - Need at least 1 for everything else.\n     */\n    if ((PriLim->PriorityMax - PriLim->PriorityMin) < 4)\n    {\n        OS_DEBUG(\"Policy %d: Insufficient spread between priority min-max: %d-%d\\n\", sched_policy,\n                 (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n        return false;\n    }\n\n    /* If we get here, then the sched_policy is potentially valid */\n    OS_DEBUG(\"Policy %d: available, min-max: %d-%d\\n\", sched_policy, (int)PriLim->PriorityMin,\n             (int)PriLim->PriorityMax);\n    return true;\n}\n```\n</target_code>\nPlease provide the modified OS_Posix_GetSchedulerParams code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n#include <stdbool.h>\n#include <sched.h>\n#include <time.h>\n\n/*\n * Probe logging helper: appends timestamped messages to /tmp/logs/450.txt\n * This preserves the original function logic while recording control flow\n * and state for debugging the OS_DEBUG dead-code scenario.\n */\nstatic void OS_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/450.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, do not alter program behavior */\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(f, \"[%s] \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    /* Ensure each probe line is newline-terminated */\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic bool OS_Posix_GetSchedulerParams(int sched_policy, POSIX_PriorityLimits_t *PriLim)\n{\n    int ret;\n\n    /* Log function entry and input parameter */\n    OS_ProbeLog(\"Enter OS_Posix_GetSchedulerParams: sched_policy=%d, PriLim=%p\", sched_policy, (void *)PriLim);\n\n    /*\n     * Set up the local Min/Max priority levels (varies by OS and scheduler policy)\n     *\n     * Per POSIX:\n     *  - The sched_get_priority_min/max() returns a number >= 0 on success.\n     *    (-1 indicates an error)\n     *  - Numerically higher values are scheduled before numerically lower values\n     *  - A compliant OS will have a spread of at least 32 between min and max\n     */\n    ret = sched_get_priority_max(sched_policy);\n    OS_ProbeLog(\"sched_get_priority_max returned %d (errno=%d: %s)\", ret, errno, strerror(errno));\n    if (ret < 0)\n    {\n        OS_ProbeLog(\"Policy %d: Unable to obtain maximum scheduling priority: %s\", sched_policy, strerror(errno));\n        OS_ProbeLog(\"Exit OS_Posix_GetSchedulerParams: failure obtaining max priority\");\n        return false;\n    }\n\n    PriLim->PriorityMax = ret;\n    OS_ProbeLog(\"Assigned PriorityMax=%d\", (int)PriLim->PriorityMax);\n\n    ret = sched_get_priority_min(sched_policy);\n    OS_ProbeLog(\"sched_get_priority_min returned %d (errno=%d: %s)\", ret, errno, strerror(errno));\n    if (ret < 0)\n    {\n        OS_ProbeLog(\"Policy %d: Unable to obtain minimum scheduling priority: %s\", sched_policy, strerror(errno));\n        OS_ProbeLog(\"Exit OS_Posix_GetSchedulerParams: failure obtaining min priority\");\n        return false;\n    }\n\n    PriLim->PriorityMin = ret;\n    OS_ProbeLog(\"Assigned PriorityMin=%d\", (int)PriLim->PriorityMin);\n\n    /*\n     * For OSAL, the absolute minimum spread between min and max must be 4.\n     *\n     * Although POSIX stipulates 32, we don't necessarily need that many, but we\n     * also want to confirm that there is an acceptable spread.\n     *\n     * - Highest is reserved for the root task\n     * - Next highest is reserved for OSAL priority=0 task(s)\n     * - Lowest is reserved for OSAL priority=255 tasks(s)\n     * - Need at least 1 for everything else.\n     */\n    OS_ProbeLog(\"Checking spread: max=%d, min=%d\", (int)PriLim->PriorityMax, (int)PriLim->PriorityMin);\n    if ((PriLim->PriorityMax - PriLim->PriorityMin) < 4)\n    {\n        OS_ProbeLog(\"Policy %d: Insufficient spread between priority min-max: %d-%d\", sched_policy,\n                    (int)PriLim->PriorityMin, (int)PriLim->PriorityMax);\n        OS_ProbeLog(\"Exit OS_Posix_GetSchedulerParams: insufficient spread\");\n        return false;\n    }\n\n    /* If we get here, then the sched_policy is potentially valid */\n    OS_ProbeLog(\"Policy %d: available, min-max: %d-%d\", sched_policy, (int)PriLim->PriorityMin,\n                (int)PriLim->PriorityMax);\n    OS_ProbeLog(\"Exit OS_Posix_GetSchedulerParams: success\");\n    return true;\n}\n"
}