{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe memset call writes StubPtr->Data.Buff.TotalSize bytes to StubPtr->Data.Buff.BasePtr without validating the pointer or the actual allocation size. If a RETURN_BUFFER entry exists with Position == 0 but BasePtr == NULL and TotalSize > 0 (or BasePtr points to a smaller allocation than TotalSize), the memset will write out of bounds (NULL dereference or buffer overflow).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ExecuteVaHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2439.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ExecuteVaHandler as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ExecuteVaHandler:\n```c\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Check if the test case registered a hook, and use the default if not */\n    if (UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER) == NULL && DefaultHandler != NULL)\n    {\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n}\n```\n</target_code>\nPlease provide the modified UT_ExecuteVaHandler code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helpers: write compact execution/state logs to /tmp/logs/2439.txt */\nstatic FILE *open_probe_log(void)\n{\n    /* Ensure directory exists; ignore error if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0700);\n\n    FILE *f = fopen(\"/tmp/logs/2439.txt\", \"a\");\n    return f;\n}\n\nstatic void probe_log_state(const char *stage, const char *functionName, int hasDefaultHandler, int stubEntryNull)\n{\n    FILE *f = open_probe_log();\n    if (f == NULL)\n    {\n        /* Best-effort logging; if it fails we do not alter program behavior */\n        return;\n    }\n\n    fprintf(f, \"[UT_ExecuteVaHandler] stage=%s\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \"  FunctionName=%s\\n\", functionName ? functionName : \"(null)\");\n    fprintf(f, \"  DefaultHandler=%s\\n\", hasDefaultHandler ? \"present\" : \"NULL\");\n    fprintf(f, \"  UT_GetStubEntry returned %s\\n\", stubEntryNull ? \"NULL\" : \"non-NULL\");\n    fflush(f);\n    fclose(f);\n}\n\nvoid UT_ExecuteVaHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_VaHandlerFunc_t DefaultHandler,\n                         va_list VaList)\n{\n    /* Probe: record entry and parameter presence */\n    probe_log_state(\"entry\", FunctionName, (DefaultHandler != NULL), /*stubEntryNull=*/-1);\n\n    /* Check if the test case registered a hook, and use the default if not */\n    void *stubEntry = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n\n    /* Probe: record result of UT_GetStubEntry */\n    probe_log_state(\"after_get_stub_entry\", FunctionName, (DefaultHandler != NULL), (stubEntry == NULL));\n\n    if (stubEntry == NULL && DefaultHandler != NULL)\n    {\n        /* Probe: about to set the default VA handler */\n        probe_log_state(\"before_set_va_handler\", FunctionName, 1, 1);\n\n        UT_SetVaHandlerFunction(FuncKey, DefaultHandler, NULL);\n\n        /* Probe: after setting the handler */\n        probe_log_state(\"after_set_va_handler\", FunctionName, 1, 0);\n    }\n\n    /* Probe: about to invoke default stub implementation with args */\n    probe_log_state(\"before_default_stub_impl\", FunctionName, (DefaultHandler != NULL), (stubEntry == NULL));\n\n    UT_DefaultStubImplWithArgs(FunctionName, FuncKey, 0, VaList);\n\n    /* Probe: after invocation */\n    probe_log_state(\"exit\", FunctionName, (DefaultHandler != NULL), (stubEntry == NULL));\n}\n"
}