{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_NotifyEvent:\n```c\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n    }\n\n    return status;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_NotifyEvent:\nOS_SharedGlobalVars_t OS_SharedGlobalVars = {\n    .GlobalState     = 0,\n    .PrintfEnabled   = false,\n    .MicroSecPerTick = 0, /* invalid, _must_ be set by implementation init */\n    .TicksPerSecond  = 0, /* invalid, _must_ be set by implementation init */\n    .EventHandler    = NULL,\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    .DebugLevel = 1,\n#endif\n}\n...\n#define OS_SUCCESS (0)\n...\ntypedef enum\n{\n    OS_EVENT_RESERVED = 0, /**< no-op/reserved event id value */\n\n    /**\n     * resource/id has been newly allocated but not yet created.\n     *\n     * This event is invoked from WITHIN the locked region, in\n     * the context of the task which is allocating the resource.\n     *\n     * If the handler returns non-success, the error will be returned\n     * to the caller and the creation process is aborted.\n     */\n    OS_EVENT_RESOURCE_ALLOCATED,\n\n    /**\n     * resource/id has been fully created/finalized.\n     *\n     * Invoked outside locked region, in the context\n     * of the task which created the resource.\n     *\n     * Data object is not used, passed as NULL.\n     *\n     * Return value is ignored - this is for information purposes only.\n     */\n    OS_EVENT_RESOURCE_CREATED,\n\n    /**\n     * resource/id has been deleted.\n     *\n     * Invoked outside locked region, in the context\n     * of the task which deleted the resource.\n     *\n     * Data object is not used, passed as NULL.\n     *\n     * Return value is ignored - this is for information purposes only.\n     */\n    OS_EVENT_RESOURCE_DELETED,\n\n    /**\n     * New task is starting.\n     *\n     * Invoked outside locked region, in the context\n     * of the task which is currently starting, before\n     * the entry point is called.\n     *\n     * Data object is not used, passed as NULL.\n     *\n     * If the handler returns non-success, task startup is aborted\n     * and the entry point is not called.\n     */\n    OS_EVENT_TASK_STARTUP,\n\n    OS_EVENT_MAX /**< placeholder for end of enum, not used */\n} OS_Event_t\n...\ntypedef uint32 osal_id_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No suspicious fragments found. In OS_NotifyEvent there are no assignments to any of the parameters (no statements like event = ..., object_id = ..., or data = ...), and the pointer parameter 'data' is not reassigned or manipulated in the function. The parameters are only passed by value to OS_SharedGlobalVars.EventHandler; passing a parameter to another function is not a modification of the parameter itself. The pointed-to object may be modified by the EventHandler (which is allowed by MISRA Rule 17.8), but the EventHandler implementation is not provided here and thus cannot be judged. All other presented definitions (enum, typedefs, global initializer) do not modify the function parameters and therefore do not need investigation for Rule 17.8 compliance."
}