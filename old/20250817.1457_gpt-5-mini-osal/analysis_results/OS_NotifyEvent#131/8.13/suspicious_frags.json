{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_NotifyEvent:\n```c\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "int32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)",
    "status = OS_SharedGlobalVars.EventHandler(event, object_id, data);"
  ],
  "explanation": "The MISRA rule targets pointer const-qualification. The only pointer-related entity in this snippet that could be const-qualified is the 'data' parameter and its direct use when forwarded to the EventHandler. The other lines do not introduce pointers that could/should be const-qualified: 'OS_SharedGlobalVars.EventHandler != NULL' is a null check on a function pointer (not a data constness issue), object_id is not a pointer (osal_id_t), 'status' and return handling are non-pointer integer uses, and the else branch/OS_SUCCESS are unrelated. Therefore no other fragments need investigation for Rule 8.13 in this code."
}