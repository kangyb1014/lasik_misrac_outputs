{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_NotifyEvent takes a non-const pointer parameter (void *data) and forwards it to the EventHandler. If the handler does not need to modify the pointed-to object, the pointer should be const-qualified (const void *) \u2014 therefore the current code (passing a non-const void *) violates MISRA C 2023 Rule 8.13. Recommended fix: change the parameter and the EventHandler prototype to use const void * (unless modification is intended).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_NotifyEvent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1051.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_NotifyEvent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_NotifyEvent:\n```c\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_NotifyEvent code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a log entry describing the control flow and state. */\nstatic void OS_LogNotifyEvent(const char *phase, OS_Event_t event, osal_id_t object_id, void *data, int32 status)\n{\n    FILE *f = fopen(\"/tmp/logs/1051.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log the phase, event, object id, data pointer, and status. */\n        fprintf(f, \"%s: event=0x%lx object_id=%lu data=%p status=%ld handler=%s\\n\",\n                phase,\n                (unsigned long)event,\n                (unsigned long)object_id,\n                data,\n                (long)status,\n                (OS_SharedGlobalVars.EventHandler != NULL) ? \"present\" : \"NULL\");\n        fclose(f);\n    }\n}\n\nint32 OS_NotifyEvent(OS_Event_t event, osal_id_t object_id, void *data)\n{\n    int32 status;\n\n    /* Log entry with initial parameters. */\n    OS_LogNotifyEvent(\"ENTRY\", event, object_id, data, 0);\n\n    if (OS_SharedGlobalVars.EventHandler != NULL)\n    {\n        /* Log that we are about to call the handler, include the pointer being forwarded. */\n        OS_LogNotifyEvent(\"CALL_HANDLER\", event, object_id, data, 0);\n\n        status = OS_SharedGlobalVars.EventHandler(event, object_id, data);\n\n        /* Log the status returned by the handler. */\n        OS_LogNotifyEvent(\"AFTER_HANDLER\", event, object_id, data, status);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n\n        /* Log that no handler was present and default success is used. */\n        OS_LogNotifyEvent(\"NO_HANDLER\", event, object_id, data, status);\n    }\n\n    return status;\n}\n"
}