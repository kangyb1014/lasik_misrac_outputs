{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strerror(status) is placed inside the branch guarded by if (status < 0). pthread_mutex_unlock() (POSIX) returns 0 on success or a positive error number on failure, so status < 0 is never true; therefore the branch containing strerror(status) is unreachable. (Additionally, BSP_DEBUG is defined empty so the call is removed by preprocessing, but semantically the strerror(status) path is unreachable.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Unlock_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/25.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Unlock_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Unlock_Impl:\n```c\nvoid OS_BSP_Unlock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /* Restore previous cancellability state */\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Unlock_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <pthread.h>\n\n/* Probe helper: append diagnostic messages to /tmp/logs/25.txt */\nstatic void os_bsp_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/25.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fclose(f);\n}\n\nvoid OS_BSP_Unlock_Impl(void)\n{\n    int status;\n\n    os_bsp_probe_log(\"OS_BSP_Unlock_Impl: enter\\n\");\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    os_bsp_probe_log(\"OS_BSP_Unlock_Impl: pthread_mutex_unlock returned status=%d\\n\", status);\n\n    if (status < 0)\n    {\n        /* Log the path and the strerror for the status value. Keep original BSP_DEBUG call. */\n        os_bsp_probe_log(\"OS_BSP_Unlock_Impl: branch status<0 taken. strerror(status)='%s'\\n\", strerror(status));\n        BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        os_bsp_probe_log(\"OS_BSP_Unlock_Impl: branch status>=0 taken. restoring cancel state=%d\\n\", OS_BSP_GenericLinuxGlobal.AccessCancelState);\n        /* Restore previous cancellability state */\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n    }\n\n    os_bsp_probe_log(\"OS_BSP_Unlock_Impl: exit\\n\");\n}\n"
}