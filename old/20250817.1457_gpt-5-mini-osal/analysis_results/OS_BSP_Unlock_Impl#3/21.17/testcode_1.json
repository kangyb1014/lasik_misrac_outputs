{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strerror(status) when status may be negative. If pthread_mutex_unlock returns a negative value (so the if (status < 0) branch is taken), passing a negative errnum to strerror can cause the implementation to index its internal message table out of bounds (or otherwise behave undefinedly). This can result in accesses beyond the bounds of objects referenced by pointer parameters of string-handling code and thus violates MISRA C 2023 Rule 21.17. A safe fix is to use the correct error check (pthread functions return zero on success and a positive error number on failure) and only call strerror for valid (non-negative) errnos, or use a safer variant such as strerror_r.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Unlock_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/31.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Unlock_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Unlock_Impl:\n```c\nvoid OS_BSP_Unlock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /* Restore previous cancellability state */\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Unlock_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <time.h>\n#include <pthread.h>\n\n/* Probe helper: append a log line to /tmp/logs/31.txt with timestamp */\nstatic void OS_BSP_Probe_Log(const char *stage, int status, const char *msg, const char *strerr_ptr)\n{\n    FILE *fp = fopen(\"/tmp/logs/31.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Best-effort logging only */\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) == NULL)\n    {\n        fprintf(fp, \"[unknown-time] %s: status=%d, msg=%s, strerror_ptr=%p\\n\",\n                stage, status, (msg ? msg : \"(null)\"), (const void *)strerr_ptr);\n    }\n    else\n    {\n        char timestr[32];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n        {\n            snprintf(timestr, sizeof(timestr), \"time-fmt-err\");\n        }\n        fprintf(fp, \"%s %s: status=%d, msg=%s, strerror_ptr=%p\\n\",\n                timestr, stage, status, (msg ? msg : \"(null)\"), (const void *)strerr_ptr);\n    }\n\n    fclose(fp);\n}\n\nvoid OS_BSP_Unlock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_unlock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n\n    /* Log the return status immediately so callers can reproduce the scenario */\n    OS_BSP_Probe_Log(\"after-pthread_mutex_unlock\", status, \"returned from pthread_mutex_unlock\", NULL);\n\n    if (status < 0)\n    {\n        /* Preserve original behavior while capturing additional probe information. */\n        const char *errstr = strerror(status);\n\n        /* Original debug call retained */\n        BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", errstr);\n\n        /* Probe: record the exact status and the pointer/content returned by strerror */\n        OS_BSP_Probe_Log(\"pthread_mutex_unlock-error\", status, errstr, errstr);\n    }\n    else\n    {\n        /* Restore previous cancellability state */\n        pthread_setcancelstate(OS_BSP_GenericLinuxGlobal.AccessCancelState, NULL);\n\n        /* Probe successful unlock path */\n        OS_BSP_Probe_Log(\"pthread_mutex_unlock-success\", status, \"unlock succeeded\", NULL);\n    }\n}\n"
}