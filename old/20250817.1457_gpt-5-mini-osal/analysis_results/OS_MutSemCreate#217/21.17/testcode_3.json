{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_CHECK_APINAME expands to OS_CHECK_STRING which typically uses string.h routines (e.g. strlen) to validate the name. If the caller supplies sem_name pointing to a character array that is not NUL-terminated (or where the terminating NUL lies beyond the object bounds), a strlen or similar call inside OS_CHECK_STRING will read past the end of that object and cause an out-of-bounds access. Therefore the use of OS_CHECK_APINAME can violate MISRA C 2023 Rule 21.17 in that scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1743.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemCreate:\n```c\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_MutSemCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemCreate code.\n",
  "test_code": "#include <stdio.h>\n\nstatic void OS_Log_1743(const char *stage, const char *sem_name, const void *token_ptr, unsigned int options, long return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1743.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log the control stage, the raw pointer value for sem_name (do not dereference),\n         * the token pointer (if available), the options value, and any return code.\n         * This avoids reading the string contents (which could cause an out-of-bounds access)\n         * while still providing evidence of the pointer value and control flow. */\n        fprintf(f, \"OS_MutSemCreate probe: stage=%s sem_name_ptr=%p token_ptr=%p options=%u return_code=%ld\\n\",\n                stage,\n                (const void *)sem_name,\n                token_ptr,\n                options,\n                return_code);\n        fflush(f);\n        fclose(f);\n    }\n}\n\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Entry probe: log that we were called and the raw sem_name pointer (do not dereference). */\n    OS_Log_1743(\"entry\", sem_name, NULL, options, 0);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n\n    /* Probe just before calling the API name checker which may call string routines. */\n    OS_Log_1743(\"before_OS_CHECK_APINAME\", sem_name, NULL, options, 0);\n\n    OS_CHECK_APINAME(sem_name);\n\n    /* Probe immediately after the API name check to capture that the check was reached. */\n    OS_Log_1743(\"after_OS_CHECK_APINAME\", sem_name, NULL, options, 0);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    /* Log result of allocation attempt and the token address (token is valid only if allocation succeeded). */\n    OS_Log_1743(\"after_ObjectIdAllocateNew\", sem_name, (return_code == OS_SUCCESS) ? (const void *)&token : NULL, options, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        OS_Log_1743(\"before_Impl\", sem_name, (const void *)&token, options, 0);\n        return_code = OS_MutSemCreate_Impl(&token, options);\n        OS_Log_1743(\"after_Impl\", sem_name, (const void *)&token, options, return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n        OS_Log_1743(\"after_ObjectIdFinalizeNew\", sem_name, (const void *)&token, options, return_code);\n    }\n\n    /* Final probe before returning */\n    OS_Log_1743(\"exit\", sem_name, NULL, options, return_code);\n\n    return return_code;\n}\n"
}