{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_MutSemCreate:\n```c\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_MutSemCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_MutSemCreate:\n#define OS_OBJECT_INIT(tok, ref, namefield, nameval) {memset(ref,0,sizeof(*ref));strncpy(ref->namefield,nameval,sizeof(ref->namefield)-1);OS_ObjectIdGlobalFromToken(&tok)->name_entry=ref->namefield;}\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\ntypedef struct\n{\n    char      obj_name[OS_MAX_API_NAME];\n    osal_id_t last_owner;\n} OS_mutex_internal_record_t\n...\nOS_mutex_internal_record_t OS_mutex_table[LOCAL_NUM_OBJECTS]\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef uint32 osal_id_t\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\n#define OS_CHECK_APINAME(str) OS_CHECK_STRING(str,OS_MAX_API_NAME,OS_ERR_NAME_TOO_LONG)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "return_code = OS_MutSemCreate_Impl(&token, options);",
    "mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);",
    "#define OS_OBJECT_INIT(tok, ref, namefield, nameval) {memset(ref,0,sizeof(*ref));strncpy(ref->namefield,nameval,sizeof(ref->namefield)-1);OS_ObjectIdGlobalFromToken(&tok)->name_entry=ref->namefield;}",
    "return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);",
    "OS_OBJECT_INIT(token, mutex, obj_name, sem_name);",
    "OS_ObjectIndexFromToken(&(tok))",
    "OS_ObjectIdGlobalFromToken(&tok)",
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])"
  ],
  "explanation": "Fragments not listed do not need investigation for MISRA C 2023 Rule 8.13 because they either already use const where appropriate or necessarily require a mutable (non-const) pointer: - The function parameter 'const char *sem_name' is already const-qualified. - The output parameter 'osal_id_t *sem_id' is intentionally non-const because it is written to by the function (an output). - The local pointer 'OS_mutex_internal_record_t *mutex' points to a table entry that is explicitly zeroed and initialized via OS_OBJECT_INIT (memset/strncpy), so the pointed-to type must be modifiable. - OS_ObjectIdAllocateNew is an allocation routine that returns/initializes the token (it is passed &token), so the token pointer cannot be const. - The OS_OBJECT_INIT macro itself performs writes (memset, strncpy) to the referenced record, so its 'ref' parameter cannot be const. - The OS_Check/validation macros (OS_CHECK_POINTER/OS_CHECK_APINAME) only validate inputs and do not imply any missing const qualification. The selected fragments are those where non-const pointers are passed (or taken) in contexts that could plausibly be read-only (e.g. passing &token to routines/macros that may only need to read the token or retrieving an index/global object from a token). These calls/uses should be inspected to confirm whether the callee signatures could accept pointers to const-qualified types to comply with Rule 8.13."
}