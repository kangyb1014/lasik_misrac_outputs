{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_MutSemCreate_Impl is called with &token where the comment says the implementation only \"reads info from the table\". If OS_MutSemCreate_Impl is declared to take a non-const pointer (e.g. OS_object_token_t *token) but does not modify the pointed-to object, then the parameter should be const-qualified (const OS_object_token_t *). In that case the current prototype/use violates MISRA C 2023 Rule 8.13 because a pointer that could be to a const-qualified type is not declared const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1739.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemCreate:\n```c\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_MutSemCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Helper logging function for reproducing violation scenario traces. */\nstatic void OS_1739_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1739.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging fails, do not change program behavior. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Log entry and parameters */\n    OS_1739_Log(\"OS_MutSemCreate entry: sem_id_ptr=%p, sem_name=%s, options=0x%08\" PRIx32,\n                (void *)sem_id,\n                (sem_name != NULL) ? sem_name : \"(null)\",\n                (uint32)options);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    OS_1739_Log(\"OS_ObjectIdAllocateNew returned %ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n        OS_1739_Log(\"OS_OBJECT_TABLE_GET returned mutex_ptr=%p for token_addr=%p\", (void *)mutex, (void *)&token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n        OS_1739_Log(\"OS_OBJECT_INIT called: token_addr=%p, name=%s\", (void *)&token, (sem_name != NULL) ? sem_name : \"(null)\");\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        OS_1739_Log(\"Calling OS_MutSemCreate_Impl with token_addr=%p, options=0x%08\" PRIx32, (void *)&token, (uint32)options);\n        return_code = OS_MutSemCreate_Impl(&token, options);\n        OS_1739_Log(\"OS_MutSemCreate_Impl returned %ld\", (long)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n        if (sem_id != NULL)\n        {\n            OS_1739_Log(\"OS_ObjectIdFinalizeNew result=%ld, sem_id_ptr=%p, sem_id_value=0x%08\" PRIxPTR,\n                        (long)return_code, (void *)sem_id, (uintptr_t)(*sem_id));\n        }\n        else\n        {\n            OS_1739_Log(\"OS_ObjectIdFinalizeNew result=%ld, sem_id_ptr=(null)\", (long)return_code);\n        }\n    }\n\n    OS_1739_Log(\"OS_MutSemCreate exit: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}