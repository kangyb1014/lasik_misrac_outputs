{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_1739_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1739.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging fails, do not change program behavior. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Log entry and parameters */\n    OS_1739_Log(\"OS_MutSemCreate entry: sem_id_ptr=%p, sem_name=%s, options=0x%08\" PRIx32,\n                (void *)sem_id,\n                (sem_name != NULL) ? sem_name : \"(null)\",\n                (uint32)options);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    OS_1739_Log(\"OS_ObjectIdAllocateNew returned %ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n        OS_1739_Log(\"OS_OBJECT_TABLE_GET returned mutex_ptr=%p for token_addr=%p\", (void *)mutex, (void *)&token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n        OS_1739_Log(\"OS_OBJECT_INIT called: token_addr=%p, name=%s\", (void *)&token, (sem_name != NULL) ? sem_name : \"(null)\");\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        OS_1739_Log(\"Calling OS_MutSemCreate_Impl with token_addr=%p, options=0x%08\" PRIx32, (void *)&token, (uint32)options);\n        return_code = OS_MutSemCreate_Impl(&token, options);\n        OS_1739_Log(\"OS_MutSemCreate_Impl returned %ld\", (long)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n        if (sem_id != NULL)\n        {\n            OS_1739_Log(\"OS_ObjectIdFinalizeNew result=%ld, sem_id_ptr=%p, sem_id_value=0x%08\" PRIxPTR,\n                        (long)return_code, (void *)sem_id, (uintptr_t)(*sem_id));\n        }\n        else\n        {\n            OS_1739_Log(\"OS_ObjectIdFinalizeNew result=%ld, sem_id_ptr=(null)\", (long)return_code);\n        }\n    }\n\n    OS_1739_Log(\"OS_MutSemCreate exit: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp6y85g0a_/src/src/os/shared/src/osapi-mutex.c: In function 'OS_MutSemCreate':\n/tmp/tmp6y85g0a_/src/src/os/shared/src/osapi-mutex.c:121:83: error: expected ')' before 'PRIx32'\n  121 |     OS_1739_Log(\"OS_MutSemCreate entry: sem_id_ptr=%p, sem_name=%s, options=0x%08\" PRIx32,\n      |                ~                                                                  ^~~~~~~\n      |                                                                                   )\n/tmp/tmp6y85g0a_/src/src/os/shared/src/osapi-mutex.c:54:1: note: 'PRIx32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   53 | #include \"osapi-task.h\"\n  +++ |+#include <inttypes.h>\n   54 | \n/tmp/tmp6y85g0a_/src/src/os/shared/src/osapi-mutex.c:144:85: error: expected ')' before 'PRIx32'\n  144 |         OS_1739_Log(\"Calling OS_MutSemCreate_Impl with token_addr=%p, options=0x%08\" PRIx32, (void *)&token, (uint32)options);\n      |                    ~                                                                ^~~~~~~\n      |                                                                                     )\n/tmp/tmp6y85g0a_/src/src/os/shared/src/osapi-mutex.c:144:86: note: 'PRIx32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  144 |         OS_1739_Log(\"Calling OS_MutSemCreate_Impl with token_addr=%p, options=0x%08\" PRIx32, (void *)&token, (uint32)options);\n      |                                                                                      ^~~~~~\n/tmp/tmp6y85g0a_/src/src/os/shared/src/osapi-mutex.c:152:95: error: expected ')' before 'PRIxPTR'\n  152 |             OS_1739_Log(\"OS_ObjectIdFinalizeNew result=%ld, sem_id_ptr=%p, sem_id_value=0x%08\" PRIxPTR,\n      |                        ~                                                                      ^~~~~~~~\n      |                                                                                               )\n/tmp/tmp6y85g0a_/src/src/os/shared/src/osapi-mutex.c:152:96: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  152 |             OS_1739_Log(\"OS_ObjectIdFinalizeNew result=%ld, sem_id_ptr=%p, sem_id_value=0x%08\" PRIxPTR,\n      |                                                                                                ^~~~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:244: CMakeFiles/osal.dir/src/os/shared/src/osapi-mutex.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_MutSemCreate as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <inttypes.h>\n\nstatic void OS_1739_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1739.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging fails, do not change program behavior. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Log entry and parameters */\n    OS_1739_Log(\"OS_MutSemCreate entry: sem_id_ptr=%p, sem_name=%s, options=0x%08\" PRIx32,\n                (void *)sem_id,\n                (sem_name != NULL) ? sem_name : \"(null)\",\n                (uint32)options);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    OS_1739_Log(\"OS_ObjectIdAllocateNew returned %ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n        OS_1739_Log(\"OS_OBJECT_TABLE_GET returned mutex_ptr=%p for token_addr=%p\", (void *)mutex, (void *)&token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n        OS_1739_Log(\"OS_OBJECT_INIT called: token_addr=%p, name=%s\", (void *)&token, (sem_name != NULL) ? sem_name : \"(null)\");\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        OS_1739_Log(\"Calling OS_MutSemCreate_Impl with token_addr=%p, options=0x%08\" PRIx32, (void *)&token, (uint32)options);\n        return_code = OS_MutSemCreate_Impl(&token, options);\n        OS_1739_Log(\"OS_MutSemCreate_Impl returned %ld\", (long)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n        if (sem_id != NULL)\n        {\n            OS_1739_Log(\"OS_ObjectIdFinalizeNew result=%ld, sem_id_ptr=%p, sem_id_value=0x%08\" PRIxPTR,\n                        (long)return_code, (void *)sem_id, (uintptr_t)(*sem_id));\n        }\n        else\n        {\n            OS_1739_Log(\"OS_ObjectIdFinalizeNew result=%ld, sem_id_ptr=(null)\", (long)return_code);\n        }\n    }\n\n    OS_1739_Log(\"OS_MutSemCreate exit: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n",
  "explanation": "Added #include <inttypes.h> so the format macros PRIx32 and PRIxPTR are defined. No other logic or code was changed."
}