{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro assigns the address of the object-name array (ref->namefield, type char[]) to the global object\u2019s name_entry pointer via OS_ObjectIdGlobalFromToken(&tok)->name_entry = ref->namefield. If name_entry is declared as a non-const char * (likely), it should instead be declared as const char * because the name is read-only (originating from const char *sem_name) and there is no need to modify it through that pointer. Declaring name_entry as const char * would satisfy MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1739.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemCreate:\n```c\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_MutSemCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <stdint.h>\n\nint32 OS_MutSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 options)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_mutex_internal_record_t *mutex;\n    FILE *logf = NULL;\n\n    /* Prepare log file directory and file. Do not alter function logic. */\n    (void)mkdir(\"/tmp/logs\", 0755); /* ignore error if directory exists */\n    logf = fopen(\"/tmp/logs/1739.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"--- OS_MutSemCreate ENTRY ---\\n\");\n        fprintf(logf, \"sem_id pointer: %p\\n\", (void *)sem_id);\n        fprintf(logf, \"sem_name pointer: %p\\n\", (const void *)sem_name);\n        if (sem_name)\n        {\n            /* Safe print of the provided name (if non-NULL) */\n            fprintf(logf, \"sem_name contents: \\\"%s\\\"\\n\", sem_name);\n        }\n        fprintf(logf, \"options: %u\\n\", (unsigned)options);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (logf)\n    {\n        fprintf(logf, \"OS_ObjectIdAllocateNew returned: %d\\n\", (int)return_code);\n        fprintf(logf, \"token address: %p\\n\", (void *)&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n        if (logf)\n        {\n            fprintf(logf, \"OS_OBJECT_TABLE_GET -> mutex pointer: %p\\n\", (void *)mutex);\n        }\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, mutex, obj_name, sem_name);\n        if (logf)\n        {\n            /* We cannot safely assume the exact type of the stored name field here (char * vs const char *),\n             * but we can log that OS_OBJECT_INIT was invoked and the sem_name pointer used to initialize it.\n             * This will help reproduce the scenario where a non-const pointer might be assigned the address\n             * of a read-only name buffer. */\n            fprintf(logf, \"OS_OBJECT_INIT called with token: %p, mutex: %p, sem_name pointer: %p\\n\",\n                    (void *)&token, (void *)mutex, (const void *)sem_name);\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_MutSemCreate_Impl(&token, options);\n        if (logf)\n        {\n            fprintf(logf, \"OS_MutSemCreate_Impl returned: %d\\n\", (int)return_code);\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n        if (logf)\n        {\n            fprintf(logf, \"OS_ObjectIdFinalizeNew returned: %d\\n\", (int)return_code);\n            fprintf(logf, \"sem_id pointer after finalize: %p\\n\", (void *)sem_id);\n        }\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"--- OS_MutSemCreate EXIT: return_code=%d ---\\n\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}