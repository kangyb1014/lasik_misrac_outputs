{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_OBJECT_INIT(token, dir, dir_name, path) likely copies the string 'path' into the object's dir_name field. If the macro expands to a string.h function such as strcpy() or an unbounded memcpy(), and the runtime length of path is greater than (or equal to) the allocated size of dir->dir_name, this will access/write beyond the bounds of dir->dir_name (buffer overflow). For example, if dir->dir_name has size N and strlen(path) >= N, a strcpy(dir->dir_name, path) will violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryOpen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1207.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirectoryOpen as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryOpen:\n```c\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DirectoryOpen code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logging function: append diagnostic information to /tmp/logs/1207.txt */\nstatic void OS_DirectoryOpen_LogProbe(const char *stage,\n                                      const void *token_ptr,\n                                      const void *dir_ptr,\n                                      const char *path,\n                                      const char *local_path,\n                                      int return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1207.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only; do not alter program flow */\n    }\n\n    /* Safe printing: avoid dereferencing application-specific structures. */\n    fprintf(f, \"[OS_DirectoryOpen] stage=%s\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \"  token_ptr=%p\\n\", token_ptr);\n    fprintf(f, \"  dir_ptr=%p\\n\", dir_ptr);\n\n    if (path != NULL)\n    {\n        size_t plen = strlen(path);\n        /* Print the reported length and a truncated preview to avoid huge logs */\n        fprintf(f, \"  path_len=%zu\\n\", plen);\n        fprintf(f, \"  path_preview=\\\"\");\n        fprintf(f, \"%.512s\", path); /* limit preview to 512 chars */\n        fprintf(f, \"\\\"\\n\");\n    }\n    else\n    {\n        fprintf(f, \"  path=NULL\\n\");\n    }\n\n    if (local_path != NULL)\n    {\n        size_t lplen = strlen(local_path);\n        fprintf(f, \"  local_path_len=%zu\\n\", lplen);\n        fprintf(f, \"  local_path_preview=\\\"\");\n        fprintf(f, \"%.512s\", local_path);\n        fprintf(f, \"\\\"\\n\");\n    }\n    else\n    {\n        fprintf(f, \"  local_path=NULL\\n\");\n    }\n\n    fprintf(f, \"  return_code=%d\\n\", return_code);\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    /* Log entry with initial parameters */\n    OS_DirectoryOpen_LogProbe(\"entry\", NULL, NULL, path, NULL, 0);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log after path translation; capture translated path and return code */\n    OS_DirectoryOpen_LogProbe(\"after_translate\", NULL, NULL, path, local_path, (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n\n        /* Log result of allocation attempt and token pointer */\n        OS_DirectoryOpen_LogProbe(\"after_allocate\", (const void *)&token, NULL, path, local_path, (int)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Log the dir pointer before initialization */\n            OS_DirectoryOpen_LogProbe(\"before_object_init\", (const void *)&token, (const void *)dir, path, local_path, (int)return_code);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Log immediately after the init macro call to capture state transition attempt. */\n            OS_DirectoryOpen_LogProbe(\"after_object_init\", (const void *)&token, (const void *)dir, path, local_path, (int)return_code);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            /* Log result of OS-specific open */\n            OS_DirectoryOpen_LogProbe(\"after_impl\", (const void *)&token, (const void *)dir, path, local_path, (int)return_code);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n\n            /* Final log before return */\n            OS_DirectoryOpen_LogProbe(\"finalize\", (const void *)&token, (const void *)dir, path, local_path, (int)return_code);\n        }\n    }\n\n    return return_code;\n}\n"
}