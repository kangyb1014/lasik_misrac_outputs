{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_TranslatePath(path, local_path) does not take an explicit buffer length. If its implementation copies the input path into local_path using string.h routines (e.g. strcpy(local_path, path) or memcpy(local_path, path, strlen(path)+1)) without ensuring strlen(path) < OS_MAX_LOCAL_PATH_LEN, a path longer than OS_MAX_LOCAL_PATH_LEN-1 will overflow local_path and cause out-of-bounds accesses. For example, an implementation that does strcpy(local_path, path) or memcpy(local_path, path, strlen(path)+1) would violate Rule 21.17 when path is too long.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryOpen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1207.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirectoryOpen as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryOpen:\n```c\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DirectoryOpen code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Logging probe: record entry and path state (do not alter control flow) */\n    {\n        FILE *log = fopen(\"/tmp/logs/1207.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_DirectoryOpen ENTRY: dir_id=%p, path=%p\\n\", (void *)dir_id, (void *)path);\n            if (path != NULL)\n            {\n                size_t path_len = strlen(path);\n                fprintf(log, \"  path_len=%zu, OS_MAX_LOCAL_PATH_LEN=%d\\n\", path_len, (int)OS_MAX_LOCAL_PATH_LEN);\n\n                /* Print a prefix of the path to avoid huge logs; indicate truncation if needed */\n                size_t prefix = (path_len > 256) ? 256 : path_len;\n                fprintf(log, \"  path_prefix(%zu)='\", prefix);\n                fwrite(path, 1, prefix, log);\n                if (path_len > prefix)\n                {\n                    fprintf(log, \"'...<truncated>\\n\");\n                }\n                else\n                {\n                    fprintf(log, \"'\\n\");\n                }\n            }\n            else\n            {\n                fprintf(log, \"  path is NULL\\n\");\n            }\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    /* Call translator as in original code */\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Logging probe: record result of translation and inspect local_path safely */\n    {\n        FILE *log = fopen(\"/tmp/logs/1207.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"OS_TranslatePath returned %ld\\n\", (long)return_code);\n\n            if (return_code == OS_SUCCESS)\n            {\n                /* Safely check for a NUL within the bounds of local_path buffer. Use memchr to avoid reading past the buffer. */\n                void *nulpos = memchr(local_path, '\\0', (size_t)OS_MAX_LOCAL_PATH_LEN);\n                if (nulpos != NULL)\n                {\n                    size_t idx = (char *)nulpos - local_path;\n                    fprintf(log, \"  local_path NUL at index %zu (within bound)\\n\", idx);\n\n                    /* Print a prefix of the local_path (safe: within found length) */\n                    size_t prefix = (idx > 256) ? 256 : idx;\n                    fprintf(log, \"  local_path_prefix(%zu)='\", prefix);\n                    fwrite(local_path, 1, prefix, log);\n                    if (idx > prefix)\n                    {\n                        fprintf(log, \"'...<truncated>\\n\");\n                    }\n                    else\n                    {\n                        fprintf(log, \"'\\n\");\n                    }\n                }\n                else\n                {\n                    /* No NUL found inside the buffer -> possible missing terminator or overflow; dump safer diagnostics */\n                    fprintf(log, \"  WARNING: no NUL within first %d bytes of local_path -> possible overflow or missing terminator\\n\", (int)OS_MAX_LOCAL_PATH_LEN);\n\n                    /* Dump buffer as hex bytes (bounded) to help reproduce memory corruption without reading past the buffer */\n                    fprintf(log, \"  local_path_buffer_hex=\");\n                    for (int i = 0; i < OS_MAX_LOCAL_PATH_LEN; ++i)\n                    {\n                        fprintf(log, \"%02x\", (unsigned char)local_path[i]);\n                    }\n                    fprintf(log, \"\\n\");\n                }\n            }\n\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n        }\n    }\n\n    return return_code;\n}\n"
}