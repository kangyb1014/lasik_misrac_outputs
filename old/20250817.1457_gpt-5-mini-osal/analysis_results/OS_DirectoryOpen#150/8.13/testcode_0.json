{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable VirtualPath is declared as const char * but is passed to OS_ObjectIdGetBySearch with an explicit cast to (void *) \u2014 i.e. the call return_code = OS_ObjectIdGetBySearch(..., (void *)VirtualPath, &token); This discards the const qualifier and hands a non-const pointer to the API/callback. According to MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so removing const here violates the rule. The correct fix is to preserve const (e.g. change the API to accept const void * or otherwise avoid casting away const).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryOpen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirectoryOpen as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryOpen:\n```c\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DirectoryOpen code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helper for OS_DirectoryOpen - appends human-readable traces to /tmp/logs/1203.txt\n * This helper intentionally uses only const pointers when taking addresses of objects so as not to\n * cast away const qualifiers. It preserves the original control flow and does not change function semantics.\n */\nstatic void OS_DirectoryOpen_Log(const char *stage,\n                                 const char *path,\n                                 const char *local_path,\n                                 int32 return_code,\n                                 const void *token_ptr,\n                                 const void *dir_ptr,\n                                 const void *dir_id_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/1203.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not disrupt the normal operation. */\n        return;\n    }\n\n    fprintf(f, \"[OS_DirectoryOpen] stage=%s\\n\", stage);\n    fprintf(f, \"  input.path.ptr=%p\\n\", (const void *)path);\n    if (path != NULL)\n    {\n        /* Print only a safe prefix to avoid extremely long outputs */\n        fprintf(f, \"  input.path.value=%.*s\\n\", 256, path);\n    }\n    fprintf(f, \"  local_path.ptr=%p\\n\", (const void *)local_path);\n    if (local_path != NULL)\n    {\n        fprintf(f, \"  local_path.value=%.*s\\n\", 256, local_path);\n    }\n    fprintf(f, \"  return_code=%d\\n\", (int)return_code);\n    fprintf(f, \"  token.addr=%p\\n\", token_ptr);\n    fprintf(f, \"  dir.addr=%p\\n\", dir_ptr);\n    fprintf(f, \"  dir_id.ptr=%p\\n\", dir_id_ptr);\n    fprintf(f, \"-----------------------------\\n\");\n\n    fclose(f);\n}\n\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    /* Log entry state (do not dereference dir_id). */\n    OS_DirectoryOpen_Log(\"enter\", path, NULL, 0, NULL, NULL, (const void *)dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of translation whether success or failure. */\n    OS_DirectoryOpen_Log(\"after_translate\", path, local_path, return_code, NULL, NULL, (const void *)dir_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n\n        /* Log allocation result and token address (as const void* to avoid casting away const). */\n        OS_DirectoryOpen_Log(\"after_allocate\", path, local_path, return_code, (const void *)&token, NULL, (const void *)dir_id);\n\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Log initialization of the record. */\n            OS_DirectoryOpen_Log(\"after_init\", path, local_path, return_code, (const void *)&token, (const void *)dir, (const void *)dir_id);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            /* Log result of OS-specific open. */\n            OS_DirectoryOpen_Log(\"after_impl\", path, local_path, return_code, (const void *)&token, (const void *)dir, (const void *)dir_id);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n\n            /* Final log including the finalized return code and dir_id where the new id would have been written. */\n            OS_DirectoryOpen_Log(\"after_finalize\", path, local_path, return_code, (const void *)&token, (const void *)dir, (const void *)dir_id);\n        }\n    }\n\n    return return_code;\n}\n"
}