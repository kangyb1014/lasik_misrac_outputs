{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'VirtPathBegin = VirtPathLen;' is dead. If OS_ObjectIdGetBySearch fails the function later does not use VirtPathBegin (return_code != OS_SUCCESS), and if it succeeds VirtPathBegin is immediately overwritten by VirtPathBegin = OS_strnlen(filesys->virtual_mountpt, ...). Thus the initial assignment is executed but its removal would not affect program behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryOpen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1202.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirectoryOpen as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryOpen:\n```c\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DirectoryOpen code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helper for reproducing/reporting the control flow and state. */\nstatic void os_1202_log(const char *event, const char *path, const char *local_path, int32 return_code, const void *token, const void *dir_rec, const void *dir_id_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/1202.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_DirectoryOpen: %s\\n\", event);\n        if (path != NULL)\n        {\n            fprintf(f, \"  path='%s'\\n\", path);\n        }\n        if (local_path != NULL)\n        {\n            fprintf(f, \"  local_path='%s'\\n\", local_path);\n        }\n        fprintf(f, \"  return_code=%ld\\n\", (long)return_code);\n        fprintf(f, \"  token=%p dir_record=%p dir_id_ptr=%p\\n\", token, dir_rec, dir_id_ptr);\n        fprintf(f, \"----------------------------------------\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_DirectoryOpen(osal_id_t *dir_id, const char *path)\n{\n    char                      local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t         token;\n    OS_dir_internal_record_t *dir;\n    int32                     return_code;\n\n    /* Log entry and parameter state */\n    os_1202_log(\"entry\", path, NULL, 0, NULL, NULL, (const void *)dir_id);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(dir_id);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log after path translation */\n    os_1202_log(\"after_translate\", path, local_path, return_code, NULL, NULL, (const void *)dir_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n\n        /* Log result of allocation attempt */\n        os_1202_log(\"after_allocate\", path, local_path, return_code, (const void *)&token, NULL, (const void *)dir_id);\n\n        if (return_code == OS_SUCCESS)\n        {\n            dir = OS_OBJECT_TABLE_GET(OS_dir_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, dir, dir_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_DirOpen_Impl(&token, local_path);\n\n            /* Log after OS-specific impl */\n            os_1202_log(\"after_impl\", path, local_path, return_code, (const void *)&token, (const void *)dir, (const void *)dir_id);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, dir_id);\n\n            /* Log after finalize (final state before return) */\n            os_1202_log(\"after_finalize\", path, local_path, return_code, (const void *)&token, (const void *)dir, (const void *)dir_id);\n        }\n    }\n\n    /* Final return (also logged above if finalization occurred) */\n    return return_code;\n}\n"
}