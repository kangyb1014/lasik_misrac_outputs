{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'address' is declared as char * but is passed directly to OS_FileSys_Initialize. If OS_FileSys_Initialize does not modify the buffer (i.e. its prototype is something like OS_FileSys_Initialize(const char *address, ... ) or const void *), then 'address' should be declared const char * in OS_mkfs. Failing to const-qualify a pointer that could be const violates MISRA C 2023 Rule 8.13. (devname and volname are already const-qualified.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1451.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mkfs as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mkfs:\n```c\nint32 OS_mkfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, true);\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /*\n         * This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mkfs code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/* Minimal typedefs to match expected environment types */\ntypedef int32_t int32;\ntypedef uint64_t osal_blockcount_t;\n\n/* Error code stand-ins to allow this translation unit to compile standalone. */\nstatic const int32 OS_ERR_INCORRECT_OBJ_STATE = -1;\nstatic const int32 OS_ERR_NO_FREE_IDS = -2;\nstatic const int32 OS_FS_ERR_DEVICE_NOT_FREE = -3;\n\n/* External function prototype (provided by the larger system). */\nextern int32 OS_FileSys_Initialize(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks, bool flag);\n\n/*\n * Helper: append a structured log entry to /tmp/logs/1451.txt describing\n * the inputs, the call to OS_FileSys_Initialize, and the post-call state.\n * This function intentionally does not dereference 'address' to avoid\n * possible undefined behavior if it points to invalid memory.\n */\nstatic void OS_mkfs_log_pre(const char *tag, char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    FILE *f = fopen(\"/tmp/logs/1451.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    fprintf(f, \"[%s] OS_mkfs called\\n\", tag);\n    fprintf(f, \"[%s]   address pointer: %p\\n\", tag, (void *)address);\n    fprintf(f, \"[%s]   devname: %s\\n\", tag, (devname != NULL) ? devname : \"(null)\");\n    fprintf(f, \"[%s]   volname: %s\\n\", tag, (volname != NULL) ? volname : \"(null)\");\n    fprintf(f, \"[%s]   blocksize: %zu\\n\", tag, blocksize);\n    fprintf(f, \"[%s]   numblocks: %llu\\n\", tag, (unsigned long long)numblocks);\n\n    /* Note about const qualification concern: record the declared type used by this function. */\n    fprintf(f, \"[%s]   NOTE: OS_mkfs declares 'address' as 'char *' (non-const).\\n\", tag);\n    fprintf(f, \"[%s]   NOTE: If OS_FileSys_Initialize does not modify the buffer, 'address' should be declared 'const char *'.\\n\", tag);\n\n    fclose(f);\n}\n\nstatic void OS_mkfs_log_post(const char *tag, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1451.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    fprintf(f, \"[%s] OS_FileSys_Initialize returned: %d\\n\", tag, (int)return_code);\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        fprintf(f, \"[%s] Detected legacy filesystem-specific error code: %d or %d\\n\", tag, (int)OS_ERR_INCORRECT_OBJ_STATE, (int)OS_ERR_NO_FREE_IDS);\n        fprintf(f, \"[%s] Will map to OS_FS_ERR_DEVICE_NOT_FREE (%d) before returning.\\n\", tag, (int)OS_FS_ERR_DEVICE_NOT_FREE);\n    }\n    fprintf(f, \"[%s] Final return value (after any mapping): %d\\n\", tag, (int)return_code);\n\n    fclose(f);\n}\n\nint32 OS_mkfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n\n    /* Log inputs before calling the filesystem initialization routine. */\n    OS_mkfs_log_pre(\"PRE\", address, devname, volname, blocksize, numblocks);\n\n    /* Preserve original logic: call underlying initializer exactly as before. */\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, true);\n\n    /* Log the immediate result so callers can observe the raw return code. */\n    OS_mkfs_log_post(\"POST\", return_code);\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /*\n         * This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n\n        /* Log the mapping decision so it is visible in the trace. */\n        OS_mkfs_log_post(\"MAPPED\", return_code);\n    }\n\n    return return_code;\n}\n"
}