{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\ntypedef int32_t int32;\ntypedef uint64_t osal_blockcount_t;\nstatic const int32 OS_ERR_INCORRECT_OBJ_STATE = -1;\nstatic const int32 OS_ERR_NO_FREE_IDS = -2;\nstatic const int32 OS_FS_ERR_DEVICE_NOT_FREE = -3;\nstatic void OS_mkfs_log_pre(const char *tag, char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    FILE *f = fopen(\"/tmp/logs/1451.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    fprintf(f, \"[%s] OS_mkfs called\\n\", tag);\n    fprintf(f, \"[%s]   address pointer: %p\\n\", tag, (void *)address);\n    fprintf(f, \"[%s]   devname: %s\\n\", tag, (devname != NULL) ? devname : \"(null)\");\n    fprintf(f, \"[%s]   volname: %s\\n\", tag, (volname != NULL) ? volname : \"(null)\");\n    fprintf(f, \"[%s]   blocksize: %zu\\n\", tag, blocksize);\n    fprintf(f, \"[%s]   numblocks: %llu\\n\", tag, (unsigned long long)numblocks);\n\n    /* Note about const qualification concern: record the declared type used by this function. */\n    fprintf(f, \"[%s]   NOTE: OS_mkfs declares 'address' as 'char *' (non-const).\\n\", tag);\n    fprintf(f, \"[%s]   NOTE: If OS_FileSys_Initialize does not modify the buffer, 'address' should be declared 'const char *'.\\n\", tag);\n\n    fclose(f);\n}\nstatic void OS_mkfs_log_post(const char *tag, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1451.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    fprintf(f, \"[%s] OS_FileSys_Initialize returned: %d\\n\", tag, (int)return_code);\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        fprintf(f, \"[%s] Detected legacy filesystem-specific error code: %d or %d\\n\", tag, (int)OS_ERR_INCORRECT_OBJ_STATE, (int)OS_ERR_NO_FREE_IDS);\n        fprintf(f, \"[%s] Will map to OS_FS_ERR_DEVICE_NOT_FREE (%d) before returning.\\n\", tag, (int)OS_FS_ERR_DEVICE_NOT_FREE);\n    }\n    fprintf(f, \"[%s] Final return value (after any mapping): %d\\n\", tag, (int)return_code);\n\n    fclose(f);\n}\n\nint32 OS_mkfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n\n    /* Log inputs before calling the filesystem initialization routine. */\n    OS_mkfs_log_pre(\"PRE\", address, devname, volname, blocksize, numblocks);\n\n    /* Preserve original logic: call underlying initializer exactly as before. */\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, true);\n\n    /* Log the immediate result so callers can observe the raw return code. */\n    OS_mkfs_log_post(\"POST\", return_code);\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /*\n         * This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n\n        /* Log the mapping decision so it is visible in the trace. */\n        OS_mkfs_log_post(\"MAPPED\", return_code);\n    }\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmpf3epgab3/src/src/os/shared/inc/os-shared-globaldefs.h:36,\n                 from /tmp/tmpf3epgab3/src/src/os/shared/inc/os-shared-filesys.h:30,\n                 from /tmp/tmpf3epgab3/src/src/os/shared/src/osapi-filesys.c:50:\n/tmp/tmpf3epgab3/src/src/os/inc/osapi-error.h:125:41: error: expected identifier or '(' before '-' token\n  125 | #define OS_ERR_INCORRECT_OBJ_STATE     (-35) /**< @brief Incorrect object state */\n      |                                         ^\n/tmp/tmpf3epgab3/src/src/os/shared/src/osapi-filesys.c:336:20: note: in expansion of macro 'OS_ERR_INCORRECT_OBJ_STATE'\n  336 | static const int32 OS_ERR_INCORRECT_OBJ_STATE = -1;\n      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf3epgab3/src/src/os/inc/osapi-error.h:110:41: error: expected identifier or '(' before '-' token\n  110 | #define OS_ERR_NO_FREE_IDS             (-14) /**< @brief No free IDs */\n      |                                         ^\n/tmp/tmpf3epgab3/src/src/os/shared/src/osapi-filesys.c:337:20: note: in expansion of macro 'OS_ERR_NO_FREE_IDS'\n  337 | static const int32 OS_ERR_NO_FREE_IDS = -2;\n      |                    ^~~~~~~~~~~~~~~~~~\n/tmp/tmpf3epgab3/src/src/os/inc/osapi-error.h:144:38: error: expected identifier or '(' before '-' token\n  144 | #define OS_FS_ERR_DEVICE_NOT_FREE   (-107) /**< @brief FS device not free */\n      |                                      ^\n/tmp/tmpf3epgab3/src/src/os/shared/src/osapi-filesys.c:338:20: note: in expansion of macro 'OS_FS_ERR_DEVICE_NOT_FREE'\n  338 | static const int32 OS_FS_ERR_DEVICE_NOT_FREE = -3;\n      |                    ^~~~~~~~~~~~~~~~~~~~~~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:188: CMakeFiles/osal.dir/src/os/shared/src/osapi-filesys.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_mkfs as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/*\n * Note: Do NOT redefine error macros that are declared in the project's\n * headers (e.g. osapi-error.h). The original build failed because the\n * symbols OS_ERR_INCORRECT_OBJ_STATE, OS_ERR_NO_FREE_IDS and\n * OS_FS_ERR_DEVICE_NOT_FREE are macros defined in headers; attempting to\n * declare static const variables with the same names causes macro\n * expansion errors. Remove those conflicting declarations and use the\n * macros from the project's headers instead.\n */\n\nstatic void OS_mkfs_log_pre(const char *tag, char *address, const char *devname, const char *volname, size_t blocksize, uint64_t numblocks)\n{\n    FILE *f = fopen(\"/tmp/logs/1451.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    fprintf(f, \"[%s] OS_mkfs called\\n\", tag);\n    fprintf(f, \"[%s]   address pointer: %p\\n\", tag, (void *)address);\n    fprintf(f, \"[%s]   devname: %s\\n\", tag, (devname != NULL) ? devname : \"(null)\");\n    fprintf(f, \"[%s]   volname: %s\\n\", tag, (volname != NULL) ? volname : \"(null)\");\n    fprintf(f, \"[%s]   blocksize: %zu\\n\", tag, blocksize);\n    fprintf(f, \"[%s]   numblocks: %llu\\n\", tag, (unsigned long long)numblocks);\n\n    /* Note about const qualification concern: record the declared type used by this function. */\n    fprintf(f, \"[%s]   NOTE: OS_mkfs declares 'address' as 'char *' (non-const).\\n\", tag);\n    fprintf(f, \"[%s]   NOTE: If OS_FileSys_Initialize does not modify the buffer, 'address' should be declared 'const char *'.\\n\", tag);\n\n    fclose(f);\n}\nstatic void OS_mkfs_log_post(const char *tag, int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1451.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    fprintf(f, \"[%s] OS_FileSys_Initialize returned: %d\\n\", tag, (int)return_code);\n\n    /* Compare against the project's error macros (do not redeclare them here). */\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        fprintf(f, \"[%s] Detected legacy filesystem-specific error code: %d or %d\\n\", tag, (int)OS_ERR_INCORRECT_OBJ_STATE, (int)OS_ERR_NO_FREE_IDS);\n        fprintf(f, \"[%s] Will map to OS_FS_ERR_DEVICE_NOT_FREE (%d) before returning.\\n\", tag, (int)OS_FS_ERR_DEVICE_NOT_FREE);\n    }\n    fprintf(f, \"[%s] Final return value (after any mapping): %d\\n\", tag, (int)return_code);\n\n    fclose(f);\n}\n\nint32_t OS_mkfs(char *address, const char *devname, const char *volname, size_t blocksize, uint64_t numblocks)\n{\n    int32_t return_code;\n\n    /* Log inputs before calling the filesystem initialization routine. */\n    OS_mkfs_log_pre(\"PRE\", address, devname, volname, blocksize, numblocks);\n\n    /* Preserve original logic: call underlying initializer exactly as before. */\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, true);\n\n    /* Log the immediate result so callers can observe the raw return code. */\n    OS_mkfs_log_post(\"POST\", return_code);\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /*\n         * This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n\n        /* Log the mapping decision so it is visible in the trace. */\n        OS_mkfs_log_post(\"MAPPED\", return_code);\n    }\n\n    return return_code;\n}\n",
  "explanation": "The build error was caused by attempting to declare static const variables with the same names as error-code macros defined in the project's headers (OS_ERR_INCORRECT_OBJ_STATE, OS_ERR_NO_FREE_IDS, OS_FS_ERR_DEVICE_NOT_FREE). The preprocessor expanded those macro names and produced invalid code. To fix this, I removed the conflicting static const declarations and updated the code to use the project's macros directly. No logic changes were made to OS_mkfs; it still logs pre/post, calls OS_FileSys_Initialize, and maps legacy error codes to OS_FS_ERR_DEVICE_NOT_FREE."
}