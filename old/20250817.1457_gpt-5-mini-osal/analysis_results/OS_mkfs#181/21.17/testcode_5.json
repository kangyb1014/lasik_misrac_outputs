{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. If fsvolname does not contain a terminating '\\0' within its own object (or is an object smaller than sizeof(filesys->volume_name)), use of string.h functions can read past the end. For example, if the caller passes char buf[5] = {'A','B','C','D','E'} (no NUL) and OS_CHECK_STRING is implemented using strlen() (or the later strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name)-1) is executed), strlen/strncpy may read beyond buf[5] and access out-of-bounds memory. Unless OS_CHECK_STRING is implemented with a bounded reader (e.g. strnlen) and the code guarantees the source is long enough, this fragment can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mkfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1455.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mkfs as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mkfs:\n```c\nint32 OS_mkfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, true);\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /*\n         * This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mkfs code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/*\n * Probe logging helper for OS_mkfs to capture control flow and state\n * information relevant to potential out-of-bounds string reads.\n * Logs are appended to /tmp/logs/1455.txt\n *\n * This helper intentionally uses bounded string inspection (strnlen)\n * to avoid introducing new unbounded string operations.\n */\nstatic void os_mkfs_log_probe(const char *address, const char *devname, const char *volname,\n                              size_t blocksize, osal_blockcount_t numblocks,\n                              int stage, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1455.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"---- OS_mkfs probe (stage=%d) ----\\n\", stage);\n    fprintf(f, \"address ptr: %p\\n\", (void *)address);\n    fprintf(f, \"devname ptr: %p\\n\", (void *)devname);\n    fprintf(f, \"volname ptr: %p\\n\", (void *)volname);\n    fprintf(f, \"blocksize: %zu\\n\", blocksize);\n    fprintf(f, \"numblocks: %zu\\n\", (size_t)numblocks);\n\n    /* Use a bounded length to avoid unbounded reads while still reporting status. */\n    if (volname == NULL)\n    {\n        fprintf(f, \"volname: NULL\\n\");\n    }\n    else\n    {\n        /* Choose a reasonable inspection limit. This prevents reading arbitrarily far.\n         * If a caller passed a non-NUL-terminated buffer shorter than this bound, this\n         * will report that no NUL was found within the bound, which is useful evidence\n         * for the violation scenario. */\n        size_t bound = 256U;\n        size_t len = strnlen(volname, bound);\n\n        fprintf(f, \"volname strnlen (bound=%zu) = %zu\\n\", bound, len);\n\n        fprintf(f, \"volname bytes (hex, up to first %zu bytes):\", (len < 64U) ? len : 64U);\n        for (size_t i = 0U; i < len && i < 64U; ++i)\n        {\n            fprintf(f, \" %02X\", (unsigned char)volname[i]);\n        }\n        if (len == 0U)\n        {\n            fprintf(f, \" (empty or NUL at start)\");\n        }\n        if (len >= bound)\n        {\n            fprintf(f, \" -- no NUL within bound (%zu)\\n\", bound);\n        }\n        else\n        {\n            fprintf(f, \" -- NUL found at offset %zu\\n\", len);\n        }\n    }\n\n    fprintf(f, \"return_code (probe): %d\\n\", (int)return_code);\n    fprintf(f, \"-------------------------------\\n\\n\");\n\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_mkfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n\n    /* Log incoming parameters before calling filesystem initialize. */\n    os_mkfs_log_probe(address, devname, volname, blocksize, numblocks, 0, 0);\n\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, true);\n\n    /* Log value returned by the filesystem initialize call. */\n    os_mkfs_log_probe(address, devname, volname, blocksize, numblocks, 1, return_code);\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /*\n         * This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n\n        /* Log the mapped return code (after translation). */\n        os_mkfs_log_probe(address, devname, volname, blocksize, numblocks, 2, return_code);\n    }\n\n    return return_code;\n}\n"
}