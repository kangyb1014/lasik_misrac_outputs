{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SocketOpen:\n```c\nint32 OS_SocketOpen(osal_id_t *sock_id, OS_SocketDomain_t Domain, OS_SocketType_t Type)\n{\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n\n    /* Check for NULL pointers */\n    OS_CHECK_POINTER(sock_id);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Save all the data to our own internal table */\n        memset(stream, 0, sizeof(OS_stream_internal_record_t));\n        stream->socket_domain = Domain;\n        stream->socket_type   = Type;\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_SocketOpen_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sock_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "return_code = OS_SocketOpen_Impl(&token);",
    "memset(stream, 0, sizeof(OS_stream_internal_record_t));",
    "OS_CHECK_POINTER(sock_id);",
    "stream->socket_domain = Domain;",
    "stream->socket_type   = Type;",
    "return_code = OS_ObjectIdFinalizeNew(return_code, &token, sock_id);",
    "int32 OS_SocketOpen(osal_id_t *sock_id, OS_SocketDomain_t Domain, OS_SocketType_t Type)",
    "stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);",
    "OS_stream_internal_record_t *stream;",
    "return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);"
  ],
  "explanation": "Fragments not listed do not need investigation for MISRA C 2023 Rule 8.13 because they are either not pointer declarations/uses or the pointer-target is clearly being modified (so the pointed-to type cannot/should not be const). Specifically: local scalar declarations (token, Domain, Type, return_code) are not pointer types; assignments that write into the object (e.g. field assignments) demonstrate mutation of the pointed object and therefore require a non-const target; the final return statement and comments are not relevant to pointer const-qualification. The listed fragments include all occurrences in this function where a pointer-to-non-const is declared or a pointer is passed/used and thus should be reviewed to determine whether the pointed-to type could be const-qualified."
}