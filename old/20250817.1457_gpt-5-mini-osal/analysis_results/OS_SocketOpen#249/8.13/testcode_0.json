{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the callee OS_SocketOpen_Impl is declared to take a pointer to a non-const token (e.g. int32 OS_SocketOpen_Impl(OS_object_token_t *token)) but does not modify the token, then this violates MISRA C 2023 Rule 8.13. The pointer parameter should be const-qualified (e.g. const OS_object_token_t *token) when the function only reads the token. If, however, OS_SocketOpen_Impl actually needs to modify the token, then the non-const pointer is appropriate and no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketOpen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1995.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketOpen as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketOpen:\n```c\nint32 OS_SocketOpen(osal_id_t *sock_id, OS_SocketDomain_t Domain, OS_SocketType_t Type)\n{\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n\n    /* Check for NULL pointers */\n    OS_CHECK_POINTER(sock_id);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Save all the data to our own internal table */\n        memset(stream, 0, sizeof(OS_stream_internal_record_t));\n        stream->socket_domain = Domain;\n        stream->socket_type   = Type;\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_SocketOpen_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sock_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketOpen code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe / logging helpers. These are small helpers that append\n   textual logs to /tmp/logs/1995.txt. They are declared static to\n   limit scope to this translation unit. They use const where\n   appropriate so they don't introduce additional non-const pointer\n   usage. */\nstatic void log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1995.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    (void)vfprintf(f, fmt, args);\n    va_end(args);\n\n    (void)fclose(f);\n}\n\nstatic void probe_log_token(const char *label, const void *token_ptr, size_t token_size)\n{\n    const unsigned char *p = (const unsigned char *)token_ptr;\n    /* Prepare a hex representation. Limit to 128 bytes to avoid huge logs. */\n    const size_t max_bytes = 128U;\n    size_t bytes_to_log = (token_size < max_bytes) ? token_size : max_bytes;\n    char hexbuf[256]; /* 2 hex chars per byte + NUL */\n    size_t i;\n\n    for (i = 0U; i < bytes_to_log; ++i)\n    {\n        /* Each byte writes two chars, ensure we don't overflow hexbuf. */\n        unsigned int v = p[i];\n        (void)sprintf(&hexbuf[i * 2], \"%02X\", v);\n    }\n    hexbuf[bytes_to_log * 2] = '\\0';\n\n    log_append(\"%s: token_addr=%p token_size=%zu bytes_logged=%zu hex=%s\\n\",\n               label, token_ptr, token_size, bytes_to_log, hexbuf);\n}\n\nstatic void probe_log_stream(const void *stream_ptr, int domain, int type)\n{\n    log_append(\"stream_addr=%p socket_domain=%d socket_type=%d\\n\",\n               stream_ptr, domain, type);\n}\n\n/* Modified OS_SocketOpen with probes inserted. The original logic is\n   preserved; probes log the token and stream state before and after\n   the OS-specific implementation call as well as the finalize step. */\nint32 OS_SocketOpen(osal_id_t *sock_id, OS_SocketDomain_t Domain, OS_SocketType_t Type)\n{\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n\n    /* Check for NULL pointers */\n    OS_CHECK_POINTER(sock_id);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Save all the data to our own internal table */\n        memset(stream, 0, sizeof(OS_stream_internal_record_t));\n        stream->socket_domain = Domain;\n        stream->socket_type   = Type;\n\n        /* Log state before calling OS-specific implementation */\n        probe_log_stream((const void *)stream, (int)stream->socket_domain, (int)stream->socket_type);\n        probe_log_token(\"before_OS_SocketOpen_Impl\", (const void *)&token, sizeof(token));\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_SocketOpen_Impl(&token);\n\n        /* Log results right after the OS-specific implementation returns */\n        log_append(\"OS_SocketOpen_Impl returned %ld\\n\", (long)return_code);\n        probe_log_token(\"after_OS_SocketOpen_Impl\", (const void *)&token, sizeof(token));\n        probe_log_stream((const void *)stream, (int)stream->socket_domain, (int)stream->socket_type);\n\n        /* Check result, finalize record, and unlock global table. */\n        log_append(\"calling OS_ObjectIdFinalizeNew with rc=%ld\\n\", (long)return_code);\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sock_id);\n        log_append(\"OS_ObjectIdFinalizeNew returned %ld\\n\", (long)return_code);\n    }\n\n    return return_code;\n}\n"
}