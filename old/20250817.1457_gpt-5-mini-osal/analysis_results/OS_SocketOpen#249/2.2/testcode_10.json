{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment os_proto = 0; is executed unconditionally, but every control path that reaches the socket(os_domain, os_type, os_proto) call assigns os_proto a meaningful value in the preceding switch on stream->socket_type (or returns early on the default). Therefore removing the initial os_proto = 0; would not change program behaviour. This makes the assignment dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketOpen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1994.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketOpen as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketOpen:\n```c\nint32 OS_SocketOpen(osal_id_t *sock_id, OS_SocketDomain_t Domain, OS_SocketType_t Type)\n{\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n\n    /* Check for NULL pointers */\n    OS_CHECK_POINTER(sock_id);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Save all the data to our own internal table */\n        memset(stream, 0, sizeof(OS_stream_internal_record_t));\n        stream->socket_domain = Domain;\n        stream->socket_type   = Type;\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_SocketOpen_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sock_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketOpen code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe/logging helper - append-only logging to a known file so other agents can inspect control flow */\nstatic void OS_SocketOpen_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1994.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        fprintf(f, \"\\n\");\n        va_end(ap);\n        fclose(f);\n    }\n}\n\nint32 OS_SocketOpen(osal_id_t *sock_id, OS_SocketDomain_t Domain, OS_SocketType_t Type)\n{\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n\n    /* Log entry and arguments */\n    OS_SocketOpen_Log(\"ENTER: OS_SocketOpen sock_id=%p Domain=%d Type=%d\", (void *)sock_id, (int)Domain, (int)Type);\n\n    /* Check for NULL pointers */\n    OS_CHECK_POINTER(sock_id);\n\n    OS_SocketOpen_Log(\"After pointer check: sock_id=%p\", (void *)sock_id);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n    OS_SocketOpen_Log(\"OS_ObjectIdAllocateNew returned %ld\", (long)return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        OS_SocketOpen_Log(\"Allocated token=%lu stream=%p\", (unsigned long)token, (void *)stream);\n\n        /* Save all the data to our own internal table */\n        memset(stream, 0, sizeof(OS_stream_internal_record_t));\n        stream->socket_domain = Domain;\n        stream->socket_type   = Type;\n\n        OS_SocketOpen_Log(\"After init: stream=%p domain=%d type=%d\", (void *)stream, (int)stream->socket_domain, (int)stream->socket_type);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        OS_SocketOpen_Log(\"Calling OS_SocketOpen_Impl with token=%lu\", (unsigned long)token);\n        return_code = OS_SocketOpen_Impl(&token);\n        OS_SocketOpen_Log(\"OS_SocketOpen_Impl returned %ld\", (long)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sock_id);\n        OS_SocketOpen_Log(\"OS_ObjectIdFinalizeNew returned %ld final sock_id=%p %ld\", (long)return_code, (void *)sock_id, (long)(sock_id ? *sock_id : 0));\n    }\n    else\n    {\n        OS_SocketOpen_Log(\"Allocation failed, returning %ld\", (long)return_code);\n    }\n\n    OS_SocketOpen_Log(\"EXIT: OS_SocketOpen returning %ld\", (long)return_code);\n\n    return return_code;\n}\n"
}