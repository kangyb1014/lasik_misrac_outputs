{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_SocketOpen_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1994.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        fprintf(f, \"\\n\");\n        va_end(ap);\n        fclose(f);\n    }\n}\n\nint32 OS_SocketOpen(osal_id_t *sock_id, OS_SocketDomain_t Domain, OS_SocketType_t Type)\n{\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n\n    /* Log entry and arguments */\n    OS_SocketOpen_Log(\"ENTER: OS_SocketOpen sock_id=%p Domain=%d Type=%d\", (void *)sock_id, (int)Domain, (int)Type);\n\n    /* Check for NULL pointers */\n    OS_CHECK_POINTER(sock_id);\n\n    OS_SocketOpen_Log(\"After pointer check: sock_id=%p\", (void *)sock_id);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n    OS_SocketOpen_Log(\"OS_ObjectIdAllocateNew returned %ld\", (long)return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        OS_SocketOpen_Log(\"Allocated token=%lu stream=%p\", (unsigned long)token, (void *)stream);\n\n        /* Save all the data to our own internal table */\n        memset(stream, 0, sizeof(OS_stream_internal_record_t));\n        stream->socket_domain = Domain;\n        stream->socket_type   = Type;\n\n        OS_SocketOpen_Log(\"After init: stream=%p domain=%d type=%d\", (void *)stream, (int)stream->socket_domain, (int)stream->socket_type);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        OS_SocketOpen_Log(\"Calling OS_SocketOpen_Impl with token=%lu\", (unsigned long)token);\n        return_code = OS_SocketOpen_Impl(&token);\n        OS_SocketOpen_Log(\"OS_SocketOpen_Impl returned %ld\", (long)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sock_id);\n        OS_SocketOpen_Log(\"OS_ObjectIdFinalizeNew returned %ld final sock_id=%p %ld\", (long)return_code, (void *)sock_id, (long)(sock_id ? *sock_id : 0));\n    }\n    else\n    {\n        OS_SocketOpen_Log(\"Allocation failed, returning %ld\", (long)return_code);\n    }\n\n    OS_SocketOpen_Log(\"EXIT: OS_SocketOpen returning %ld\", (long)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpm4tvjgc8/src/src/os/shared/src/osapi-sockets.c: In function 'OS_SocketOpen':\n/tmp/tmpm4tvjgc8/src/src/os/shared/src/osapi-sockets.c:162:9: error: aggregate value used where an integer was expected\n  162 |         OS_SocketOpen_Log(\"Allocated token=%lu stream=%p\", (unsigned long)token, (void *)stream);\n      |         ^~~~~~~~~~~~~~~~~\n/tmp/tmpm4tvjgc8/src/src/os/shared/src/osapi-sockets.c:172:9: error: aggregate value used where an integer was expected\n  172 |         OS_SocketOpen_Log(\"Calling OS_SocketOpen_Impl with token=%lu\", (unsigned long)token);\n      |         ^~~~~~~~~~~~~~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:328: CMakeFiles/osal.dir/src/os/shared/src/osapi-sockets.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SocketOpen as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static void OS_SocketOpen_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1994.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        fprintf(f, \"\\n\");\n        va_end(ap);\n        fclose(f);\n    }\n}\n\nint32 OS_SocketOpen(osal_id_t *sock_id, OS_SocketDomain_t Domain, OS_SocketType_t Type)\n{\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n\n    /* Log entry and arguments */\n    OS_SocketOpen_Log(\"ENTER: OS_SocketOpen sock_id=%p Domain=%d Type=%d\", (void *)sock_id, (int)Domain, (int)Type);\n\n    /* Check for NULL pointers */\n    OS_CHECK_POINTER(sock_id);\n\n    OS_SocketOpen_Log(\"After pointer check: sock_id=%p\", (void *)sock_id);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n    OS_SocketOpen_Log(\"OS_ObjectIdAllocateNew returned %ld\", (long)return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Use pointer form for logging the token since OS_object_token_t is an aggregate type */\n        OS_SocketOpen_Log(\"Allocated token=%p stream=%p\", (void *)&token, (void *)stream);\n\n        /* Save all the data to our own internal table */\n        memset(stream, 0, sizeof(OS_stream_internal_record_t));\n        stream->socket_domain = Domain;\n        stream->socket_type   = Type;\n\n        OS_SocketOpen_Log(\"After init: stream=%p domain=%d type=%d\", (void *)stream, (int)stream->socket_domain, (int)stream->socket_type);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        OS_SocketOpen_Log(\"Calling OS_SocketOpen_Impl with token=%p\", (void *)&token);\n        return_code = OS_SocketOpen_Impl(&token);\n        OS_SocketOpen_Log(\"OS_SocketOpen_Impl returned %ld\", (long)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sock_id);\n        OS_SocketOpen_Log(\"OS_ObjectIdFinalizeNew returned %ld final sock_id=%p %ld\", (long)return_code, (void *)sock_id, (long)(sock_id ? *sock_id : 0));\n    }\n    else\n    {\n        OS_SocketOpen_Log(\"Allocation failed, returning %ld\", (long)return_code);\n    }\n\n    OS_SocketOpen_Log(\"EXIT: OS_SocketOpen returning %ld\", (long)return_code);\n\n    return return_code;\n}\n",
  "explanation": "The compile errors were caused by casting an aggregate type (OS_object_token_t) to unsigned long for the %lu format \u2014 C does not allow casting a struct/aggregate this way. I changed the two log lines that printed the token to use the pointer form (%p) and pass the address of the token ((void *)&token). This preserves the logging intent while avoiding invalid aggregate-to-integer casts. No other logic was changed."
}