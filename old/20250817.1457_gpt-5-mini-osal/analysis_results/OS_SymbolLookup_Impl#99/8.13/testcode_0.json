{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_ModuleSymbolLookup_Impl is declared to take a non-const pointer for the symbol name (e.g. int32 OS_ModuleSymbolLookup_Impl(..., cpuaddr *SymbolAddress, char *SymbolName)) or a non-const pointer to the token when it need not modify the token, then this call passes a const-qualified pointer (const char *SymbolName) to a parameter that is not const \u2014 discarding const qualification. That would violate MISRA C 2023 Rule 8.13. (If, however, OS_ModuleSymbolLookup_Impl already declares its parameters as const where appropriate, no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/795.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolLookup_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup_Impl:\n```c\nint32 OS_SymbolLookup_Impl(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32            status;\n    int32            local_status;\n    OS_object_iter_t iter;\n\n    /* First search global table */\n    status = OS_GenericSymbolLookup_Impl(OSAL_DLSYM_DEFAULT_HANDLE, SymbolAddress, SymbolName);\n\n    /* If not found iterate through module local symbols and break if found */\n    if (status != OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(OS_OBJECT_TYPE_OS_MODULE, &iter);\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            local_status = OS_ModuleSymbolLookup_Impl(&iter.token, SymbolAddress, SymbolName);\n            if (local_status == OS_SUCCESS)\n            {\n                status = local_status;\n                break;\n            }\n        }\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolLookup_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n\n/* Probe/logging helper - append-only to avoid changing program state */\nstatic void OS_SymbolLookup_Log(const char *stage, const void *token_ptr, const cpuaddr *SymbolAddress, const char *SymbolName, int32 status)\n{\n    FILE *f = fopen(\"/tmp/logs/795.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        /* Log timestamp, stage, token pointer (address of iterator token), symbol address pointer, symbol name, and status */\n        fprintf(f, \"[%ld] %s: token_ptr=%\" PRIuPTR \" SymbolAddress=%\" PRIuPTR \" SymbolName=\\\"%s\\\" status=%d\\n\",\n                (long)t,\n                stage,\n                (uintptr_t)token_ptr,\n                (uintptr_t)SymbolAddress,\n                (SymbolName != NULL) ? SymbolName : \"(null)\",\n                status);\n        fclose(f);\n    }\n}\n\nint32 OS_SymbolLookup_Impl(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32            status;\n    int32            local_status;\n    OS_object_iter_t iter;\n\n    /* Log entry and input state */\n    OS_SymbolLookup_Log(\"start_global_search\", NULL, SymbolAddress, SymbolName, 0);\n\n    /* First search global table */\n    status = OS_GenericSymbolLookup_Impl(OSAL_DLSYM_DEFAULT_HANDLE, SymbolAddress, SymbolName);\n\n    /* Log result of global search */\n    OS_SymbolLookup_Log(\"after_global_search\", NULL, SymbolAddress, SymbolName, status);\n\n    /* If not found iterate through module local symbols and break if found */\n    if (status != OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(OS_OBJECT_TYPE_OS_MODULE, &iter);\n        OS_SymbolLookup_Log(\"after_iterate_active\", &iter.token, SymbolAddress, SymbolName, status);\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            /* Log before delegating to module-local lookup. This is where const qualification may be discarded if OS_ModuleSymbolLookup_Impl takes a non-const char* */\n            OS_SymbolLookup_Log(\"before_module_lookup\", &iter.token, SymbolAddress, SymbolName, 0);\n\n            local_status = OS_ModuleSymbolLookup_Impl(&iter.token, SymbolAddress, SymbolName);\n\n            /* Log result of module-local lookup */\n            OS_SymbolLookup_Log(\"after_module_lookup\", &iter.token, SymbolAddress, SymbolName, local_status);\n\n            if (local_status == OS_SUCCESS)\n            {\n                status = local_status;\n                break;\n            }\n        }\n        OS_ObjectIdIteratorDestroy(&iter);\n        OS_SymbolLookup_Log(\"after_iterator_destroy\", NULL, SymbolAddress, SymbolName, status);\n    }\n\n    OS_SymbolLookup_Log(\"return\", NULL, SymbolAddress, SymbolName, status);\n\n    return status;\n}\n"
}