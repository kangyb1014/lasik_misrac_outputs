{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(CurrentSegment, SegmentName, sizeof(CurrentSegment) - 1) can read up to sizeof(CurrentSegment)-1 bytes from SegmentName. If SegmentName does not contain a NUL within that many bytes (for example if the source TestName buffer is smaller than sizeof(CurrentSegment)-1 or was filled without a terminating NUL), strncpy will access bytes beyond the bounds of the object referenced by SegmentName, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2615.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helpers: write trace information to /tmp/logs/2615.txt */\nstatic FILE *UtLog_Open(void)\n{\n    FILE *f = fopen(\"/tmp/logs/2615.txt\", \"a\");\n    if (f)\n    {\n        /* Line buffered to maximize chance log is flushed on crash */\n        setvbuf(f, NULL, _IOLBF, 0);\n    }\n    return f;\n}\n\nstatic void UtLog_Close(FILE *f)\n{\n    if (f)\n    {\n        fclose(f);\n    }\n}\n\nstatic void UtLog_Printf(FILE *f, const char *fmt, ...)\n{\n    if (!f) return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n}\n\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n    FILE *log = UtLog_Open();\n    unsigned int entry_index = 0;\n\n    UtLog_Printf(log, \"UtTest_Run: start\\n\");\n    UtLog_Printf(log, \"UtAssert_Global.DataBasePtr=%p\\n\", (void *)UtAssert_Global.DataBasePtr);\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtLog_Printf(log, \"UtListMain(default)=%p\\n\", (void *)UtListMain);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            entry_index++;\n            UtLog_Printf(log, \"--- Entry %u: UtTestDataBaseEntry=%p\\n\", entry_index, (void *)UtTestDataBaseEntry);\n            UtLog_Printf(log, \"--- TestNamePtr=%p (do NOT attempt to print as string here)\\n\",\n                         (void *)UtTestDataBaseEntry->TestName);\n\n            UtLog_Printf(log, \"Calling UtAssert_BeginTest(TestNamePtr=%p)\\n\",\n                         (void *)UtTestDataBaseEntry->TestName);\n            fflush(log);\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtLog_Printf(log, \"Calling Setup func ptr=%p\\n\", (void *)UtTestDataBaseEntry->Setup);\n                fflush(log);\n                UtTestDataBaseEntry->Setup();\n                UtLog_Printf(log, \"Returned from Setup func ptr=%p\\n\", (void *)UtTestDataBaseEntry->Setup);\n            }\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtLog_Printf(log, \"About to call Test func ptr=%p -- FLUSHING LOG BEFORE CALL\\n\", (void *)UtTestDataBaseEntry->Test);\n                fflush(log);\n\n                /* Call the test. If the test triggers the strncpy read-beyond-bounds issue, the process\n                 * may crash here; because the log was flushed, pre-call information will remain on disk.\n                 */\n                UtTestDataBaseEntry->Test();\n\n                UtLog_Printf(log, \"Returned from Test func ptr=%p\\n\", (void *)UtTestDataBaseEntry->Test);\n                UtAssert_Global.ExecutedCount++;\n                UtLog_Printf(log, \"ExecutedCount after increment=%u\\n\", (unsigned int)UtAssert_Global.ExecutedCount);\n            }\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtLog_Printf(log, \"Calling Teardown func ptr=%p\\n\", (void *)UtTestDataBaseEntry->Teardown);\n                fflush(log);\n                UtTestDataBaseEntry->Teardown();\n                UtLog_Printf(log, \"Returned from Teardown func ptr=%p\\n\", (void *)UtTestDataBaseEntry->Teardown);\n            }\n\n            UtLog_Printf(log, \"Calling UtAssert_EndTest() for entry %u\\n\", entry_index);\n            fflush(log);\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtLog_Printf(log, \"Destroying DataBasePtr=%p\\n\", (void *)UtAssert_Global.DataBasePtr);\n    fflush(log);\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UtLog_Printf(log, \"Calling UT_BSP_EndTest with counters=%p\\n\", (void *)UtAssert_GetCounters());\n    fflush(log);\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n\n    UtLog_Printf(log, \"UtTest_Run: end\\n\");\n    UtLog_Close(log);\n}\n"
}