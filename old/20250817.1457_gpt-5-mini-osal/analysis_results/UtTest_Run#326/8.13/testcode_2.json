{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nUtTestDataBaseEntry->TestName is declared as a non-const char array (char TestName[...]) and is passed to UtAssert_BeginTest as a (decayed) char * for read-only use. Per MISRA C 2023 Rule 8.13, the object accessed only for reading should be const-qualified (or the called function parameter should be const char *). Because TestName is not const-qualified, this is a violation: either TestName should be declared const or the API should use const char *.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2611.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe function to log information about a test database entry.\n * Uses a const-qualified pointer to avoid introducing a mutability violation.\n */\nstatic void UtTest_LogEntry(const UtTestDataBaseEntry_t *Entry)\n{\n    FILE *fp = fopen(\"/tmp/logs/2611.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* The TestName member is an array in the struct. Using sizeof on the\n     * array member here yields the declared array size (no decay), which\n     * helps demonstrate that the member is an array of non-const char.\n     */\n    const char *name_ptr = Entry->TestName; /* decays to pointer for logging */\n    size_t bufsize = sizeof(Entry->TestName);\n    size_t len = 0;\n\n    /* Safely compute length up to the buffer size to avoid overruns */\n    if (bufsize > 0)\n    {\n        len = strnlen(Entry->TestName, bufsize);\n    }\n\n    fprintf(fp, \"--- UtTest_LogEntry ---\\n\");\n    fprintf(fp, \"Entry struct address: %p\\n\", (void *)Entry);\n    fprintf(fp, \"TestName pointer (decayed): %p\\n\", (void *)name_ptr);\n    fprintf(fp, \"TestName buffer size (sizeof member): %zu\\n\", bufsize);\n    fprintf(fp, \"TestName strlen (bounded by buffer): %zu\\n\", len);\n    fprintf(fp, \"TestName contents: \\\"\");\n    /* Print safely: ensure null-termination within bufsize */\n    if (bufsize > 0)\n    {\n        /* Use fwrite to avoid interpreting format specifiers in the string */\n        fwrite(Entry->TestName, 1, len, fp);\n    }\n    fprintf(fp, \"\\\"\\n\");\n\n    fprintf(fp, \"About to call UtAssert_BeginTest with TestName as (char *) (read-only usage expected)\\n\");\n    fprintf(fp, \"--- end log ---\\n\\n\");\n\n    fclose(fp);\n}\n\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            /* Log state and control flow information about the TestName member */\n            UtTest_LogEntry((const UtTestDataBaseEntry_t *)UtTestDataBaseEntry);\n\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                /* Log that setup is being invoked */\n                FILE *fp = fopen(\"/tmp/logs/2611.txt\", \"a\");\n                if (fp)\n                {\n                    fprintf(fp, \"Invoking Setup for test at entry %p\\n\", (void *)UtTestDataBaseEntry);\n                    fclose(fp);\n                }\n\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                /* Log that test is being invoked */\n                FILE *fp = fopen(\"/tmp/logs/2611.txt\", \"a\");\n                if (fp)\n                {\n                    fprintf(fp, \"Invoking Test for test at entry %p\\n\", (void *)UtTestDataBaseEntry);\n                    fclose(fp);\n                }\n\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n\n                /* Log executed count increment */\n                fp = fopen(\"/tmp/logs/2611.txt\", \"a\");\n                if (fp)\n                {\n                    fprintf(fp, \"ExecutedCount incremented, new value: %u\\n\", (unsigned)UtAssert_Global.ExecutedCount);\n                    fclose(fp);\n                }\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                /* Log that teardown is being invoked */\n                FILE *fp = fopen(\"/tmp/logs/2611.txt\", \"a\");\n                if (fp)\n                {\n                    fprintf(fp, \"Invoking Teardown for test at entry %p\\n\", (void *)UtTestDataBaseEntry);\n                    fclose(fp);\n                }\n\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n\n            /* Mark end of this test in the log */\n            {\n                FILE *fp = fopen(\"/tmp/logs/2611.txt\", \"a\");\n                if (fp)\n                {\n                    fprintf(fp, \"Completed test for entry %p\\n\\n\", (void *)UtTestDataBaseEntry);\n                    fclose(fp);\n                }\n            }\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n"
}