{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop iterator and the list-access APIs are used in a read-only fashion but are not const-qualified. Specifically, UtListNode (and UtListMain) are declared as UtListNode_t * and the called functions UtList_GetNext, UtList_IsEnd and UtList_GetObject use/return non-const pointers. These could be const-qualified (for example UtList_GetNext could be declared to return const UtListNode_t * and UtList_IsEnd/UtList_GetObject could accept/return const pointers) because the loop only reads the list nodes. The lack of const qualification violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2611.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "static FILE *UtTest_log_fp = NULL;\n\nstatic void UtTest_LogOpen(void)\n{\n    if (UtTest_log_fp == NULL)\n    {\n        /* open for write so each run overwrites previous log */\n        UtTest_log_fp = fopen(\"/tmp/logs/2611.txt\", \"w\");\n        if (UtTest_log_fp != NULL)\n        {\n            fprintf(UtTest_log_fp, \"UtTest_Run: log open\\n\");\n            fflush(UtTest_log_fp);\n        }\n    }\n}\n\nstatic void UtTest_LogClose(void)\n{\n    if (UtTest_log_fp != NULL)\n    {\n        fprintf(UtTest_log_fp, \"UtTest_Run: log close\\n\");\n        fclose(UtTest_log_fp);\n        UtTest_log_fp = NULL;\n    }\n}\n\nstatic void UtTest_LogFmt(const char *fmt, ...)\n{\n    if (UtTest_log_fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(UtTest_log_fp, fmt, ap);\n    fflush(UtTest_log_fp);\n    va_end(ap);\n}\n\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n    int                    iter_count = 0;\n\n    UtTest_LogOpen();\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtTest_LogFmt(\"Merged head (default): UtListMain=%p\\n\", (void *)UtListMain);\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtTest_LogFmt(\"After merge SETUP: UtListMain=%p\\n\", (void *)UtListMain);\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtTest_LogFmt(\"After merge TEST: UtListMain=%p\\n\", (void *)UtListMain);\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n    UtTest_LogFmt(\"After merge TEARDOWN: UtListMain=%p\\n\", (void *)UtListMain);\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        int is_end = UtList_IsEnd(UtListMain, UtListNode);\n        UtTest_LogFmt(\"Loop iter %d: UtListNode=%p, IsEnd=%d\\n\", iter_count, (void *)UtListNode, is_end);\n\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n        UtTest_LogFmt(\"  UtTestDataBaseEntry=%p\\n\", (void *)UtTestDataBaseEntry);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            const char *test_name = UtTestDataBaseEntry->TestName;\n            UtTest_LogFmt(\"  TestName ptr=%p, TestName=\\\"%s\\\"\\n\", (void *)test_name, test_name ? test_name : \"(null)\");\n\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTest_LogFmt(\"  Calling Setup at %p\\n\", (void *)UtTestDataBaseEntry->Setup);\n                UtTestDataBaseEntry->Setup();\n                UtTest_LogFmt(\"  Returned from Setup\\n\");\n            }\n            else\n            {\n                UtTest_LogFmt(\"  No Setup\\n\");\n            }\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTest_LogFmt(\"  Calling Test at %p\\n\", (void *)UtTestDataBaseEntry->Test);\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n                UtTest_LogFmt(\"  Returned from Test, ExecutedCount=%u\\n\", (unsigned)UtAssert_Global.ExecutedCount);\n            }\n            else\n            {\n                UtTest_LogFmt(\"  No Test\\n\");\n            }\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTest_LogFmt(\"  Calling Teardown at %p\\n\", (void *)UtTestDataBaseEntry->Teardown);\n                UtTestDataBaseEntry->Teardown();\n                UtTest_LogFmt(\"  Returned from Teardown\\n\");\n            }\n            else\n            {\n                UtTest_LogFmt(\"  No Teardown\\n\");\n            }\n\n            UtAssert_EndTest();\n        }\n\n        iter_count++;\n    }\n\n    UT_BSP_Lock();\n    UtTest_LogFmt(\"Before Destroy: DataBasePtr=%p\\n\", (void *)UtAssert_Global.DataBasePtr);\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UtTest_LogFmt(\"After Destroy\\n\");\n    UT_BSP_Unlock();\n\n    UtTest_LogFmt(\"Final ExecutedCount=%u\\n\", (unsigned)UtAssert_Global.ExecutedCount);\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n\n    /* close the log after end test to ensure logs flushed */\n    UtTest_LogClose();\n}\n"
}