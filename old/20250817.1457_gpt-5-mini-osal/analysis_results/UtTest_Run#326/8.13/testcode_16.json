{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function UtList_GetHead takes a pointer parameter 'UtListHead_t *ListHead' but does not modify the object it points to (it only reads NumberOfTags and Tags). According to MISRA C 2023 Rule 8.13 the pointer target should be const-qualified when possible, so the parameter should be declared as 'const UtListHead_t *ListHead'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2611.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "#include <stdio.h>\n\nvoid UtTest_Run(void)\n{\n    FILE *log = fopen(\"/tmp/logs/2611.txt\", \"w\");\n\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n    UtListNode_t *tmpHead;\n\n    if (log)\n    {\n        fprintf(log, \"UtTest_Run: start\\n\");\n        fprintf(log, \"UtAssert_Global.DataBasePtr=%p\\n\", (void *)UtAssert_Global.DataBasePtr);\n        fflush(log);\n    }\n\n    UT_BSP_Lock();\n\n    if (log)\n    {\n        fprintf(log, \"UT_BSP_Lock acquired\\n\");\n        fflush(log);\n    }\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    if (log) { fprintf(log, \"UtList_GetHead(DATA_BASE, DEFAULT) -> %p\\n\", (void *)UtListMain); fflush(log); }\n\n    tmpHead = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP);\n    if (log) { fprintf(log, \"UtList_GetHead(DATA_BASE, SETUP) -> %p\\n\", (void *)tmpHead); fflush(log); }\n    UtList_Merge(UtListMain, tmpHead);\n    if (log) { fprintf(log, \"UtList_Merge(UtListMain=%p, setupHead=%p)\\n\", (void *)UtListMain, (void *)tmpHead); fflush(log); }\n\n    tmpHead = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST);\n    if (log) { fprintf(log, \"UtList_GetHead(DATA_BASE, TEST) -> %p\\n\", (void *)tmpHead); fflush(log); }\n    UtList_Merge(UtListMain, tmpHead);\n    if (log) { fprintf(log, \"UtList_Merge(UtListMain=%p, testHead=%p)\\n\", (void *)UtListMain, (void *)tmpHead); fflush(log); }\n\n    tmpHead = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN);\n    if (log) { fprintf(log, \"UtList_GetHead(DATA_BASE, TEARDOWN) -> %p\\n\", (void *)tmpHead); fflush(log); }\n    UtList_Merge(UtListMain, tmpHead);\n    if (log) { fprintf(log, \"UtList_Merge(UtListMain=%p, teardownHead=%p)\\n\", (void *)UtListMain, (void *)tmpHead); fflush(log); }\n\n    UT_BSP_Unlock();\n\n    if (log)\n    {\n        fprintf(log, \"UT_BSP_Unlock released\\n\");\n        fflush(log);\n    }\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        if (log)\n        {\n            fprintf(log, \"Loop: UtListNode=%p\\n\", (void *)UtListNode);\n            fflush(log);\n        }\n\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (log)\n        {\n            fprintf(log, \"UtList_GetObject(UtListNode=%p) -> %p\\n\", (void *)UtListNode, (void *)UtTestDataBaseEntry);\n            fflush(log);\n        }\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            if (log)\n            {\n                fprintf(log, \"BeginTest: name=%s, entry=%p\\n\",\n                        UtTestDataBaseEntry->TestName ? UtTestDataBaseEntry->TestName : \"(null)\", (void *)UtTestDataBaseEntry);\n                fflush(log);\n            }\n\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                if (log) { fprintf(log, \"Calling Setup at %p\\n\", (void *)UtTestDataBaseEntry->Setup); fflush(log); }\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                if (log) { fprintf(log, \"Calling Test at %p\\n\", (void *)UtTestDataBaseEntry->Test); fflush(log); }\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n                if (log) { fprintf(log, \"ExecutedCount incremented -> %u\\n\", (unsigned)UtAssert_Global.ExecutedCount); fflush(log); }\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                if (log) { fprintf(log, \"Calling Teardown at %p\\n\", (void *)UtTestDataBaseEntry->Teardown); fflush(log); }\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n\n            if (log)\n            {\n                fprintf(log, \"EndTest for entry=%p\\n\", (void *)UtTestDataBaseEntry);\n                fflush(log);\n            }\n        }\n    }\n\n    UT_BSP_Lock();\n    if (log)\n    {\n        fprintf(log, \"UT_BSP_Lock before destroy\\n\");\n        fprintf(log, \"Destroying DataBasePtr=%p\\n\", (void *)UtAssert_Global.DataBasePtr);\n        fflush(log);\n    }\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n\n    if (log)\n    {\n        fprintf(log, \"UtTest_Run: end\\n\");\n        fclose(log);\n    }\n}\n"
}