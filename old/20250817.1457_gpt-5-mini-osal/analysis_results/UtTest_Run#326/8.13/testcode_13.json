{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe UtListNode_t member is declared as 'void *Data' but is used to point to UtTestDataBaseEntry_t objects that are only read (UtList_GetObject() returns void* which is assigned to UtTestDataBaseEntry_t * and only used to call members). Because the list does not modify the pointed-to objects, the pointer could and should be const-qualified (e.g. 'const void *Data' and 'const UtTestDataBaseEntry_t *UtTestDataBaseEntry' / change UtList_GetObject to return 'const void *'). Therefore this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2611.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "void UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n    FILE *log = fopen(\"/tmp/logs/2611.txt\", \"w\");\n    unsigned int node_index = 0u;\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UtTest_Run: start\\n\");\n    }\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    if (log != NULL)\n    {\n        fprintf(log, \"Got UtListMain (DEFAULT) = %p\\n\", (void *)UtListMain);\n    }\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    if (log != NULL)\n    {\n        fprintf(log, \"Merged SETUP into UtListMain\\n\");\n    }\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    if (log != NULL)\n    {\n        fprintf(log, \"Merged TEST into UtListMain\\n\");\n    }\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n    if (log != NULL)\n    {\n        fprintf(log, \"Merged TEARDOWN into UtListMain\\n\");\n    }\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        node_index++;\n        if (log != NULL)\n        {\n            fprintf(log, \"Traversing node %u: UtListNode=%p\\n\", (unsigned)node_index, (void *)UtListNode);\n        }\n\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (log != NULL)\n        {\n            fprintf(log, \" UtList_GetObject returned %p\\n\", (void *)UtTestDataBaseEntry);\n        }\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            const char *test_name = UtTestDataBaseEntry->TestName ? UtTestDataBaseEntry->TestName : \"(null)\";\n\n            if (log != NULL)\n            {\n                fprintf(log, \"  Test entry: name=\\\"%s\\\"; Setup=%p; Test=%p; Teardown=%p; ExecutedCount(before)=%u\\n\",\n                        test_name,\n                        (void *)UtTestDataBaseEntry->Setup,\n                        (void *)UtTestDataBaseEntry->Test,\n                        (void *)UtTestDataBaseEntry->Teardown,\n                        (unsigned)UtAssert_Global.ExecutedCount);\n            }\n\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                if (log != NULL)\n                {\n                    fprintf(log, \"   Calling Setup() for %s\\n\", test_name);\n                }\n                UtTestDataBaseEntry->Setup();\n            }\n            else if (log != NULL)\n            {\n                fprintf(log, \"   No Setup() for %s\\n\", test_name);\n            }\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                if (log != NULL)\n                {\n                    fprintf(log, \"   Calling Test() for %s\\n\", test_name);\n                }\n                UtTestDataBaseEntry->Test();\n                if (log != NULL)\n                {\n                    fprintf(log, \"   Test() returned for %s; ExecutedCount(before increment)=%u\\n\",\n                            test_name,\n                            (unsigned)UtAssert_Global.ExecutedCount);\n                }\n\n                UtAssert_Global.ExecutedCount++;\n\n                if (log != NULL)\n                {\n                    fprintf(log, \"   ExecutedCount(after increment)=%u\\n\", (unsigned)UtAssert_Global.ExecutedCount);\n                }\n            }\n            else if (log != NULL)\n            {\n                fprintf(log, \"   No Test() for %s\\n\", test_name);\n            }\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                if (log != NULL)\n                {\n                    fprintf(log, \"   Calling Teardown() for %s\\n\", test_name);\n                }\n                UtTestDataBaseEntry->Teardown();\n            }\n            else if (log != NULL)\n            {\n                fprintf(log, \"   No Teardown() for %s\\n\", test_name);\n            }\n\n            UtAssert_EndTest();\n\n            if (log != NULL)\n            {\n                fprintf(log, \"  Finished test entry %s\\n\", test_name);\n            }\n        }\n        else if (log != NULL)\n        {\n            fprintf(log, \"  UtTestDataBaseEntry is NULL for node %u\\n\", (unsigned)node_index);\n        }\n    }\n\n    UT_BSP_Lock();\n\n    if (log != NULL)\n    {\n        fprintf(log, \"Calling UtList_Destroy on DataBasePtr=%p\\n\", (void *)UtAssert_Global.DataBasePtr);\n    }\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n\n    UT_BSP_Unlock();\n\n    if (log != NULL)\n    {\n        unsigned int counters = UtAssert_GetCounters();\n        fprintf(log, \"UT_BSP_EndTest with counters=%u\\n\", (unsigned)counters);\n        fclose(log);\n    }\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n"
}