{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function UtList_GetNext takes a non-const pointer parameter (UtListNode_t *ListNode) but only reads ListNode->Next and does not modify the object. The parameter could be declared as const UtListNode_t * (and the API could return a const pointer if callers do not need to modify the returned node). Therefore the pointer is not const-qualified even though it could be, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2611.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "/* Probe functions inserted to capture control flow and state for Rule 8.13 investigation.\n * Writes logs to /tmp/logs/2611.txt. These preserve the original logic of UtTest_Run\n * while recording the pointers passed to UtList_GetNext and the returned node values,\n * and logging database entry pointers and names when available.\n */\n\nstatic UtListNode_t *Probe_GetNext(UtListNode_t *Node, const char *Context)\n{\n    UtListNode_t *Result = UtList_GetNext(Node);\n    FILE *F = fopen(\"/tmp/logs/2611.txt\", \"a\");\n    if (F != NULL)\n    {\n        /* Log the call site context, input pointer, returned pointer and input->Next if available */\n        (void)fprintf(F, \"Probe_GetNext: context=%s input=%p result=%p\\n\", Context, (void *)Node, (void *)Result);\n        if (Node != NULL)\n        {\n            /* Accessing Node->Next is safe for diagnostic purposes */\n            (void)fprintf(F, \"  input->Next=%p\\n\", (void *)Node->Next);\n        }\n        (void)fclose(F);\n    }\n    return Result;\n}\n\nstatic void Probe_LogEntry(UtTestDataBaseEntry_t *Entry, const char *Context)\n{\n    FILE *F = fopen(\"/tmp/logs/2611.txt\", \"a\");\n    if (F != NULL)\n    {\n        if (Entry != NULL)\n        {\n            const char *name = Entry->TestName ? Entry->TestName : \"(null)\";\n            (void)fprintf(F, \"Probe_LogEntry: context=%s entry=%p TestName=%p \\\"%s\\\"\\n\",\n                          Context, (void *)Entry, (void *)Entry->TestName, name);\n        }\n        else\n        {\n            (void)fprintf(F, \"Probe_LogEntry: context=%s entry=(null)\\n\", Context);\n        }\n        (void)fclose(F);\n    }\n}\n\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    Probe_GetNext(UtListMain, \"after_GetHead\");\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    Probe_GetNext(UtListMain, \"after_merge_setup\");\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    Probe_GetNext(UtListMain, \"after_merge_test\");\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n    Probe_GetNext(UtListMain, \"after_merge_teardown\");\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    UtListNode = Probe_GetNext(UtListMain, \"loop_init\");\n    for (; !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = Probe_GetNext(UtListNode, \"loop_iter\"))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        Probe_LogEntry(UtTestDataBaseEntry, \"before_test_execution\");\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n"
}