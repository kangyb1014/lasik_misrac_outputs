{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nFunction UtList_IsEnd takes non-const pointers (UtListNode_t *TagHead, UtListNode_t *ListNode) but only compares them and does not modify the objects. According to MISRA C 2023 Rule 8.13 these parameters should be const-qualified (e.g. const UtListNode_t *TagHead, const UtListNode_t *ListNode).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2611.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "static void UtTest_LogState(const char *stage, const UtListNode_t *TagHead, const UtListNode_t *ListNode)\n{\n    /* Probe logging helper: append a compact record of the control point and pointers */\n    FILE *fp = fopen(\"/tmp/logs/2611.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Print stage and pointer values. Casting to void* for portability with %p. */\n        fprintf(fp, \"[%s] TagHead=%p ListNode=%p\\n\", stage, (void *)TagHead, (void *)ListNode);\n        fclose(fp);\n    }\n}\n\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    /* Log the merged list head and the first next node (if any) */\n    UtTest_LogState(\"AfterMerge\", (const UtListNode_t *)UtListMain, (const UtListNode_t *)UtList_GetNext(UtListMain));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    /*\n     * Rewritten loop so we can log the UtList_IsEnd check and pointer state explicitly\n     * while preserving original behavior.\n     */\n    UtListNode = UtList_GetNext(UtListMain);\n    for (;;)\n    {\n        /* Log before evaluating end condition */\n        UtTest_LogState(\"BeforeIsEnd\", (const UtListNode_t *)UtListMain, (const UtListNode_t *)UtListNode);\n\n        if (UtList_IsEnd(UtListMain, UtListNode))\n        {\n            UtTest_LogState(\"IsEndReached\", (const UtListNode_t *)UtListMain, (const UtListNode_t *)UtListNode);\n            break;\n        }\n\n        /* Log iteration start */\n        UtTest_LogState(\"IterationStart\", (const UtListNode_t *)UtListMain, (const UtListNode_t *)UtListNode);\n\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        /* Log retrieved object pointer */\n        UtTest_LogState(\"AfterGetObject\", (const UtListNode_t *)UtListMain, (const UtListNode_t *)UtTestDataBaseEntry);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            /* Log beginning of test with test name if available */\n            {\n                FILE *fp = fopen(\"/tmp/logs/2611.txt\", \"a\");\n                if (fp != NULL)\n                {\n                    fprintf(fp, \"[BeginTest] TestName=%s Obj=%p\\n\",\n                            (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\",\n                            (void *)UtTestDataBaseEntry);\n                    fclose(fp);\n                }\n            }\n\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTest_LogState(\"CallingSetup\", (const UtListNode_t *)UtListMain, (const UtListNode_t *)UtListNode);\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTest_LogState(\"CallingTest\", (const UtListNode_t *)UtListMain, (const UtListNode_t *)UtListNode);\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n                UtTest_LogState(\"AfterTest\", (const UtListNode_t *)UtListMain, (const UtListNode_t *)UtListNode);\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTest_LogState(\"CallingTeardown\", (const UtListNode_t *)UtListMain, (const UtListNode_t *)UtListNode);\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n\n            /* Log end of this test iteration */\n            UtTest_LogState(\"IterationEnd\", (const UtListNode_t *)UtListMain, (const UtListNode_t *)UtListNode);\n        }\n\n        /* Move to next node */\n        UtListNode = UtList_GetNext(UtListNode);\n    }\n\n    UT_BSP_Lock();\n\n    UtTest_LogState(\"BeforeDestroy\", (const UtListNode_t *)UtListMain, NULL);\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n"
}