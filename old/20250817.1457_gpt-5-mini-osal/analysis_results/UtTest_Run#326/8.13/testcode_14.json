{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nUtList_GetObject returns a non-const void * (ListNode->Data). In callers such as UtTest_Run the returned object is only read (UtTestDataBaseEntry is used to read TestName and call functions) so the pointer could and should be const-qualified (e.g. const void *UtList_GetObject(const UtListNode_t *ListNode) or returning const UtTestDataBaseEntry_t *). Returning a non-const pointer when no modification is required violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2611.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe logging helpers - keep static to limit scope and avoid affecting other translation units */\nstatic FILE *UtProbe_LogFile(void)\n{\n    static FILE *logf = NULL;\n    if (logf == NULL)\n    {\n        /* Ensure directory exists; ignore errors if it already exists */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        logf = fopen(\"/tmp/logs/2611.txt\", \"a\");\n        if (logf != NULL)\n        {\n            (void)fprintf(logf, \"---- UtTest_Run probe start ----\\n\");\n            (void)fflush(logf);\n        }\n    }\n    return logf;\n}\n\nstatic void UtProbe_Log(const char *fmt, ...)\n{\n    FILE *f = UtProbe_LogFile();\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n    (void)fflush(f);\n}\n\nstatic void UtProbe_Close(void)\n{\n    FILE *f = UtProbe_LogFile();\n    if (f != NULL)\n    {\n        (void)fprintf(f, \"---- UtTest_Run probe end ----\\n\\n\");\n        (void)fclose(f);\n    }\n}\n\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /* Log start state */\n    UtProbe_Log(\"UtTest_Run: begin. DataBasePtr=%p\\n\", (void *)UtAssert_Global.DataBasePtr);\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtProbe_Log(\"UtListMain (after default) = %p\\n\", (void *)UtListMain);\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtProbe_Log(\"Merged SETUP into UtListMain\\n\");\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtProbe_Log(\"Merged TEST into UtListMain\\n\");\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n    UtProbe_Log(\"Merged TEARDOWN into UtListMain\\n\");\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        /* Capture the raw returned object pointer to log it for analysis */\n        void *rawObj = UtList_GetObject(UtListNode);\n        UtProbe_Log(\"Iteration: UtListNode=%p, rawObj=%p\\n\", (void *)UtListNode, rawObj);\n\n        UtTestDataBaseEntry = (UtTestDataBaseEntry_t *)rawObj;\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            /* Log the important fields used in this function to show they are only read */\n            UtProbe_Log(\"  TestEntry @%p: TestName=%p\\n\", (void *)UtTestDataBaseEntry, (void *)UtTestDataBaseEntry->TestName);\n            if (UtTestDataBaseEntry->TestName != NULL)\n            {\n                /* Print a limited prefix to avoid long writes or invalid memory access */\n                char buf[128] = {0};\n                size_t i;\n                for (i = 0; i < sizeof(buf) - 1 && UtTestDataBaseEntry->TestName[i] != '\\0'; ++i)\n                {\n                    buf[i] = UtTestDataBaseEntry->TestName[i];\n                }\n                buf[i] = '\\0';\n                UtProbe_Log(\"    TestName (prefix)='%s'\\n\", buf);\n            }\n            UtProbe_Log(\"    Setup=%p, Test=%p, Teardown=%p\\n\",\n                        (void *)UtTestDataBaseEntry->Setup,\n                        (void *)UtTestDataBaseEntry->Test,\n                        (void *)UtTestDataBaseEntry->Teardown);\n\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtProbe_Log(\"    Calling Setup()\\n\");\n                UtTestDataBaseEntry->Setup();\n                UtProbe_Log(\"    Setup() returned\\n\");\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtProbe_Log(\"    Calling Test() [ExecutedCount before=%u]\\n\", (unsigned int)UtAssert_Global.ExecutedCount);\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n                UtProbe_Log(\"    Test() returned [ExecutedCount after=%u]\\n\", (unsigned int)UtAssert_Global.ExecutedCount);\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtProbe_Log(\"    Calling Teardown()\\n\");\n                UtTestDataBaseEntry->Teardown();\n                UtProbe_Log(\"    Teardown() returned\\n\");\n            }\n\n            UtAssert_EndTest();\n        }\n        else\n        {\n            UtProbe_Log(\"  UtTestDataBaseEntry is NULL for node %p\\n\", (void *)UtListNode);\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UtProbe_Log(\"Destroyed DataBasePtr=%p\\n\", (void *)UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UtProbe_Log(\"Calling UT_BSP_EndTest with counters=%u\\n\", (unsigned int)UtAssert_GetCounters());\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n\n    UtProbe_Close();\n}\n"
}