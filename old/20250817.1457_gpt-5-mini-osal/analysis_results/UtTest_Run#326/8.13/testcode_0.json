{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'UtTestDataBaseEntry_t *UtTestDataBaseEntry;' is declared non-const but is only used for read-only access (assigned from UtList_GetObject, used to read TestName and to call function pointers Setup/Test/Teardown). It could be declared as 'const UtTestDataBaseEntry_t *UtTestDataBaseEntry;' to indicate immutability and comply with MISRA C 2023 Rule 8.13. (Assigning the void* returned by UtList_GetObject to a pointer-to-const is permitted in C.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2611.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "#include <stdio.h>\n\nvoid UtTest_Run(void)\n{\n    FILE *log = fopen(\"/tmp/logs/2611.txt\", \"a\");\n\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    if (log)\n    {\n        fprintf(log, \"UtTest_Run: start\\n\");\n        fflush(log);\n    }\n\n    UT_BSP_Lock();\n\n    if (log)\n    {\n        fprintf(log, \"UtTest_Run: UT_BSP_Lock acquired\\n\");\n        fflush(log);\n    }\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    if (log)\n    {\n        fprintf(log, \"UtTest_Run: merged list head=%p\\n\", (void *)UtListMain);\n        fflush(log);\n    }\n\n    UT_BSP_Unlock();\n\n    if (log)\n    {\n        fprintf(log, \"UtTest_Run: UT_BSP_Unlock called\\n\");\n        fflush(log);\n    }\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (log)\n        {\n            fprintf(log, \"UtTest_Run: UtList_GetObject returned ptr=%p for node=%p\\n\", (void *)UtTestDataBaseEntry,\n                    (void *)UtListNode);\n            fflush(log);\n        }\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            /* Log the test name and function pointer availability for traceability */\n            if (log)\n            {\n                const char *name = UtTestDataBaseEntry->TestName ? UtTestDataBaseEntry->TestName : \"(null)\";\n                fprintf(log, \"UtTest_Run: Begin test '%s' entry=%p\\n\", name, (void *)UtTestDataBaseEntry);\n                fprintf(log, \"  Setup ptr=%p, Test ptr=%p, Teardown ptr=%p\\n\",\n                        (void *)UtTestDataBaseEntry->Setup,\n                        (void *)UtTestDataBaseEntry->Test,\n                        (void *)UtTestDataBaseEntry->Teardown);\n                fflush(log);\n            }\n\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                if (log)\n                {\n                    fprintf(log, \"UtTest_Run: calling Setup for '%s'\\n\",\n                            UtTestDataBaseEntry->TestName ? UtTestDataBaseEntry->TestName : \"(null)\");\n                    fflush(log);\n                }\n                UtTestDataBaseEntry->Setup();\n                if (log)\n                {\n                    fprintf(log, \"UtTest_Run: returned from Setup for '%s'\\n\",\n                            UtTestDataBaseEntry->TestName ? UtTestDataBaseEntry->TestName : \"(null)\");\n                    fflush(log);\n                }\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                if (log)\n                {\n                    fprintf(log, \"UtTest_Run: calling Test for '%s'\\n\",\n                            UtTestDataBaseEntry->TestName ? UtTestDataBaseEntry->TestName : \"(null)\");\n                    fflush(log);\n                }\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n                if (log)\n                {\n                    fprintf(log, \"UtTest_Run: returned from Test for '%s', ExecutedCount=%u\\n\",\n                            UtTestDataBaseEntry->TestName ? UtTestDataBaseEntry->TestName : \"(null)\",\n                            (unsigned)UtAssert_Global.ExecutedCount);\n                    fflush(log);\n                }\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                if (log)\n                {\n                    fprintf(log, \"UtTest_Run: calling Teardown for '%s'\\n\",\n                            UtTestDataBaseEntry->TestName ? UtTestDataBaseEntry->TestName : \"(null)\");\n                    fflush(log);\n                }\n                UtTestDataBaseEntry->Teardown();\n                if (log)\n                {\n                    fprintf(log, \"UtTest_Run: returned from Teardown for '%s'\\n\",\n                            UtTestDataBaseEntry->TestName ? UtTestDataBaseEntry->TestName : \"(null)\");\n                    fflush(log);\n                }\n            }\n\n            UtAssert_EndTest();\n\n            if (log)\n            {\n                fprintf(log, \"UtTest_Run: End test '%s'\\n\\n\",\n                        UtTestDataBaseEntry->TestName ? UtTestDataBaseEntry->TestName : \"(null)\");\n                fflush(log);\n            }\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"UtTest_Run: Skipping NULL entry for node=%p\\n\", (void *)UtListNode);\n                fflush(log);\n            }\n        }\n    }\n\n    UT_BSP_Lock();\n\n    if (log)\n    {\n        fprintf(log, \"UtTest_Run: UT_BSP_Lock acquired for cleanup\\n\");\n        fflush(log);\n    }\n\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n\n    UT_BSP_Unlock();\n\n    if (log)\n    {\n        fprintf(log, \"UtTest_Run: UT_BSP_Unlock called after cleanup\\n\");\n        fprintf(log, \"UtTest_Run: calling UT_BSP_EndTest with counters: Passed=%u, Failed=%u, Executed=%u\\n\",\n                (unsigned)UtAssert_Global.PassCount,\n                (unsigned)UtAssert_Global.FailCount,\n                (unsigned)UtAssert_Global.ExecutedCount);\n        fflush(log);\n        fclose(log);\n    }\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n"
}