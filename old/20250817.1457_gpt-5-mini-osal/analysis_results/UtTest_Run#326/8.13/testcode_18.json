{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer UtTestDataBaseEntry is declared as a non-const UtTestDataBaseEntry_t * but is only used for read/call operations (reading TestName and calling function pointers). It is assigned from UtList_GetObject which returns void *. Since the object is not modified via this pointer, the pointer should be const-qualified (e.g. const UtTestDataBaseEntry_t *UtTestDataBaseEntry, or UtList_GetObject should return const void * for read-only access). Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_Run code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2611.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_Run as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_Run:\n```c\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTestDataBaseEntry->Setup();\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTestDataBaseEntry->Test();\n                UtAssert_Global.ExecutedCount++;\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTestDataBaseEntry->Teardown();\n            }\n\n            UtAssert_EndTest();\n        }\n    }\n\n    UT_BSP_Lock();\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UT_BSP_EndTest(UtAssert_GetCounters());\n}\n```\n</target_code>\nPlease provide the modified UtTest_Run code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append-only logging to /tmp/logs/2611.txt */\nstatic void UtTest_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2611.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid UtTest_Run(void)\n{\n    UtListNode_t *         UtListMain;\n    UtListNode_t *         UtListNode;\n    UtTestDataBaseEntry_t *UtTestDataBaseEntry;\n\n    UtTest_ProbeLog(\"ENTER: UtTest_Run\");\n\n    UT_BSP_Lock();\n\n    /*\n     * The overall test sequence goes SETUP->TEST->TEARDOWN\n     *\n     * Combine all registered test groups into a merged group for execution.\n     *\n     * This could also (theoretically) randomize the order of the \"TEST\" group\n     * while assembling this list, if there was a portable source of entropy.\n     */\n    UtListMain = UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_DEFAULT);\n    UtTest_ProbeLog(\"After GetHead(DEFAULT): UtListMain=%p\", (void *)UtListMain);\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_SETUP));\n    UtTest_ProbeLog(\"After Merge SETUP: UtListMain=%p\", (void *)UtListMain);\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEST));\n    UtTest_ProbeLog(\"After Merge TEST: UtListMain=%p\", (void *)UtListMain);\n\n    UtList_Merge(UtListMain, UtList_GetHead(UtAssert_Global.DataBasePtr, UTASSERT_GROUP_TEARDOWN));\n    UtTest_ProbeLog(\"After Merge TEARDOWN: UtListMain=%p\", (void *)UtListMain);\n\n    UT_BSP_Unlock();\n\n    /*\n     * Run through the merged list in order\n     */\n    for (UtListNode = UtList_GetNext(UtListMain); !UtList_IsEnd(UtListMain, UtListNode);\n         UtListNode = UtList_GetNext(UtListNode))\n    {\n        UtTestDataBaseEntry = UtList_GetObject(UtListNode);\n        UtTest_ProbeLog(\"Loop iter: UtListNode=%p, UtTestDataBaseEntry=%p\", (void *)UtListNode, (void *)UtTestDataBaseEntry);\n\n        if (UtTestDataBaseEntry != NULL)\n        {\n            /* Log test name pointer and value (if available) and function pointers */\n            const char *name = (UtTestDataBaseEntry->TestName != NULL) ? UtTestDataBaseEntry->TestName : \"(null)\";\n            UtTest_ProbeLog(\"Test entry: TestNamePtr=%p TestName=\\\"%s\\\" Setup=%p Test=%p Teardown=%p\",\n                            (void *)UtTestDataBaseEntry->TestName,\n                            name,\n                            (void *)UtTestDataBaseEntry->Setup,\n                            (void *)UtTestDataBaseEntry->Test,\n                            (void *)UtTestDataBaseEntry->Teardown);\n\n            UtAssert_BeginTest(UtTestDataBaseEntry->TestName);\n\n            UtAssert_SetContext(UTASSERT_CASETYPE_TSF);\n            if (UtTestDataBaseEntry->Setup)\n            {\n                UtTest_ProbeLog(\"Calling Setup for TestName=\\\"%s\\\"\", name);\n                UtTestDataBaseEntry->Setup();\n                UtTest_ProbeLog(\"Returned from Setup for TestName=\\\"%s\\\"\", name);\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_FAILURE);\n            if (UtTestDataBaseEntry->Test)\n            {\n                UtTest_ProbeLog(\"Calling Test for TestName=\\\"%s\\\"\", name);\n                UtTestDataBaseEntry->Test();\n                UtTest_ProbeLog(\"Returned from Test for TestName=\\\"%s\\\"\", name);\n                UtAssert_Global.ExecutedCount++;\n                UtTest_ProbeLog(\"ExecutedCount incremented to %u\", (unsigned)UtAssert_Global.ExecutedCount);\n            }\n            UtAssert_SetContext(UTASSERT_CASETYPE_TTF);\n            if (UtTestDataBaseEntry->Teardown)\n            {\n                UtTest_ProbeLog(\"Calling Teardown for TestName=\\\"%s\\\"\", name);\n                UtTestDataBaseEntry->Teardown();\n                UtTest_ProbeLog(\"Returned from Teardown for TestName=\\\"%s\\\"\", name);\n            }\n\n            UtAssert_EndTest();\n            UtTest_ProbeLog(\"Ended test for TestName=\\\"%s\\\"\", name);\n        }\n    }\n\n    UT_BSP_Lock();\n    UtTest_ProbeLog(\"Destroying database: DataBasePtr=%p\", (void *)UtAssert_Global.DataBasePtr);\n    UtList_Destroy(UtAssert_Global.DataBasePtr);\n    UT_BSP_Unlock();\n\n    UtTest_ProbeLog(\"Calling UT_BSP_EndTest\");\n    UT_BSP_EndTest(UtAssert_GetCounters());\n    UtTest_ProbeLog(\"EXIT: UtTest_Run\");\n}\n"
}