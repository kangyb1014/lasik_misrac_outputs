{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe call UtAssert_True(false, ...) will always trigger the assertion handler. If UtAssertEx (the implementation behind UtAssert_True) is implemented as a non\u2011returning routine (for example it calls abort(), exit(), longjmp without returning, or is declared [[noreturn]]), then the subsequent statement 'return false;' is unreachable. This constitutes a violation of MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtMem2BinFile code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2625.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtMem2BinFile as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtMem2BinFile:\n```c\nbool UtMem2BinFile(const void *Memory, const char *Filename, uint32 Length)\n{\n    FILE *fp;\n\n    if ((fp = fopen(Filename, \"w\")))\n    {\n        fwrite(Memory, Length, 1, fp);\n        fclose(fp);\n        return true;\n    }\n    else\n    {\n        printf(\"UtMem2BinFile: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2BinFile: Error Opening File\");\n        return false;\n    }\n}\n```\n</target_code>\nPlease provide the modified UtMem2BinFile code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <errno.h>\n#include <stdint.h>\n\n/* Keep the same basic type name used by the target code */\ntypedef uint32_t uint32;\n\n/* Prototype for external assertion routine used by the target code. */\nextern void UtAssert_True(bool condition, const char *msg);\n\n/*\n * Probe helper: append control-flow and state information to the log file\n * /tmp/logs/2625.txt. This function is intentionally lightweight and does\n * not alter the logic of UtMem2BinFile.\n */\nstatic void ut_log_probe(const char *event, const char *filename, uint32 length, int err)\n{\n    FILE *lf = fopen(\"/tmp/logs/2625.txt\", \"a\");\n    if (lf)\n    {\n        fprintf(lf, \"UTPROBE: event=%s filename=\\\"%s\\\" length=%u errno=%d strerror=\\\"%s\\\"\\n\",\n                event, (filename ? filename : \"(null)\"), (unsigned)length, err, strerror(err));\n        fclose(lf);\n    }\n}\n\nbool UtMem2BinFile(const void *Memory, const char *Filename, uint32 Length)\n{\n    FILE *fp;\n\n    /* Log entry and parameters */\n    ut_log_probe(\"ENTRY\", Filename, Length, errno);\n\n    ut_log_probe(\"BEFORE_FOPEN\", Filename, Length, errno);\n    if ((fp = fopen(Filename, \"w\")))\n    {\n        ut_log_probe(\"FOPEN_SUCCESS\", Filename, Length, 0);\n        fwrite(Memory, Length, 1, fp);\n        fclose(fp);\n        ut_log_probe(\"WRITE_SUCCESS\", Filename, Length, 0);\n        return true;\n    }\n    else\n    {\n        /* Log failure details before printing and asserting */\n        ut_log_probe(\"FOPEN_FAIL_BEFORE_PRINTF\", Filename, Length, errno);\n        printf(\"UtMem2BinFile: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        ut_log_probe(\"FOPEN_FAIL_AFTER_PRINTF\", Filename, Length, errno);\n\n        /* Log immediately before the assertion. If the assert is non-returning,\n         * subsequent logs (and the return false) will not appear in the log,\n         * providing evidence of unreachable code. */\n        ut_log_probe(\"BEFORE_ASSERT\", Filename, Length, errno);\n        UtAssert_True(false, \"UtMem2BinFile: Error Opening File\");\n\n        /* If UtAssert_True returns, we will log the fact and then return false.\n         * If it does not return (e.g. abort/exit/longjmp/noreturn), this log\n         * and the return will be absent, demonstrating the unreachable code\n         * scenario described. */\n        ut_log_probe(\"AFTER_ASSERT\", Filename, Length, errno);\n        return false;\n    }\n}\n"
}