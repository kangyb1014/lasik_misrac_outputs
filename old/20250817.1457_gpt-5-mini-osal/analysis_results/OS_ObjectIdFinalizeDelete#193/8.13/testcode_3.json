{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes a pointer parameter 'OS_object_token_t *token' but never modifies the referent in this function (only reads token->obj_id). Per MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type when possible (e.g. const OS_object_token_t *token). Therefore this signature violates the rule unless the callee OS_ObjectIdTransactionFinish or other code requires a non-const pointer (in which case the non-const is justified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFinalizeDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1547.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFinalizeDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFinalizeDelete:\n```c\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    return operation_status;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFinalizeDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper - append-only to /tmp/logs/1547.txt */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1547.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Modified function: inserts logging probes but preserves original logic.\n * Logs control flow and key state so the usage of the token pointer and\n * token->obj_id can be observed for the MISRA Rule 8.13 investigation.\n */\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    os_probe_log(\"ENTER: OS_ObjectIdFinalizeDelete operation_status=%d token=%p\",\n                 (int)operation_status, (void *)token);\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n        os_probe_log(\"Branch: operation_status==OS_SUCCESS -> final_id set to OS_OBJECT_ID_UNDEFINED(%lld)\",\n                     (long long)final_id);\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n        os_probe_log(\"Branch: operation_status!=OS_SUCCESS -> final_id restored from token->obj_id=%lld token=%p\",\n                     (long long)token->obj_id, (void *)token);\n    }\n\n    /* Either way we must unlock the object type */\n    os_probe_log(\"Before OS_ObjectIdTransactionFinish: token=%p final_id=%lld\",\n                 (void *)token, (long long)final_id);\n    OS_ObjectIdTransactionFinish(token, &final_id);\n    os_probe_log(\"After OS_ObjectIdTransactionFinish: token=%p final_id=%lld\",\n                 (void *)token, (long long)final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        /* Note: original code passes token->obj_id here; logging does the same read to evidence the usage */\n        os_probe_log(\"About to call OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id=%lld, NULL) token=%p\",\n                     (long long)token->obj_id, (void *)token);\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    os_probe_log(\"EXIT: OS_ObjectIdFinalizeDelete returning %d\", (int)operation_status);\n\n    return operation_status;\n}\n"
}