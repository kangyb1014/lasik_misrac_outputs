{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter token is declared as OS_object_token_t *token but in this function it is only read (final_id = token->obj_id; and passed onward without being modified). According to MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type whenever possible (e.g. const OS_object_token_t *token). If the function and the callees do not need to modify the object, the current non-const pointer violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFinalizeDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1547.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFinalizeDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFinalizeDelete:\n```c\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    return operation_status;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFinalizeDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append formatted log messages to the file. */\nstatic void OS_LogAppend(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1547.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    (void)fputc('\\n', fp);\n    (void)fclose(fp);\n}\n\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Log entry state (do not dereference token here to preserve original behavior) */\n    OS_LogAppend(\"ENTER: OS_ObjectIdFinalizeDelete operation_status=%d token=%p\", operation_status, (void *)token);\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n        OS_LogAppend(\"BRANCH: operation_status == OS_SUCCESS -> final_id set to OS_OBJECT_ID_UNDEFINED (%d)\", (int)final_id);\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n        OS_LogAppend(\"BRANCH: operation_status != OS_SUCCESS -> final_id restored from token->obj_id (%d)\", (int)final_id);\n    }\n\n    /* Either way we must unlock the object type */\n    OS_LogAppend(\"ACTION: calling OS_ObjectIdTransactionFinish(token=%p, &final_id=%d)\", (void *)token, (int)final_id);\n    OS_ObjectIdTransactionFinish(token, &final_id);\n    OS_LogAppend(\"RETURN: OS_ObjectIdTransactionFinish completed\");\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_LogAppend(\"ACTION: operation successful, calling OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id=%d, NULL)\", (int)token->obj_id);\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n        OS_LogAppend(\"RETURN: OS_NotifyEvent completed\");\n    }\n\n    OS_LogAppend(\"EXIT: OS_ObjectIdFinalizeDelete returning operation_status=%d\", operation_status);\n\n    return operation_status;\n}"
}