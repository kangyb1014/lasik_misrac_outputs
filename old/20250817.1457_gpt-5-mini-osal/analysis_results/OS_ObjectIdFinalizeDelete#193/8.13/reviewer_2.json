{
  "user_message": "An agent A claimed that the following OS_ObjectIdFinalizeDelete code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_ObjectIdFinalizeDelete.\n```c\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    return operation_status;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The parameter token is declared as OS_object_token_t *token but in this function it is only read (final_id = token->obj_id; and passed onward without being modified). According to MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type whenever possible (e.g. const OS_object_token_t *token). If the function and the callees do not need to modify the object, the current non-const pointer violates Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_LogAppend(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1547.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    (void)fputc('\\n', fp);\n    (void)fclose(fp);\n}\n\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Log entry state (do not dereference token here to preserve original behavior) */\n    OS_LogAppend(\"ENTER: OS_ObjectIdFinalizeDelete operation_status=%d token=%p\", operation_status, (void *)token);\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n        OS_LogAppend(\"BRANCH: operation_status == OS_SUCCESS -> final_id set to OS_OBJECT_ID_UNDEFINED (%d)\", (int)final_id);\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n        OS_LogAppend(\"BRANCH: operation_status != OS_SUCCESS -> final_id restored from token->obj_id (%d)\", (int)final_id);\n    }\n\n    /* Either way we must unlock the object type */\n    OS_LogAppend(\"ACTION: calling OS_ObjectIdTransactionFinish(token=%p, &final_id=%d)\", (void *)token, (int)final_id);\n    OS_ObjectIdTransactionFinish(token, &final_id);\n    OS_LogAppend(\"RETURN: OS_ObjectIdTransactionFinish completed\");\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_LogAppend(\"ACTION: operation successful, calling OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id=%d, NULL)\", (int)token->obj_id);\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n        OS_LogAppend(\"RETURN: OS_NotifyEvent completed\");\n    }\n\n    OS_LogAppend(\"EXIT: OS_ObjectIdFinalizeDelete returning operation_status=%d\", operation_status);\n\n    return operation_status;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_ObjectIdFinalizeDelete. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not enough information to conclude a MISRA 8.13 violation. Rule 8.13 requires pointers be to const-qualified types when the pointed-to object is not modified. In this function token is dereferenced for reading, but it is also passed to OS_ObjectIdTransactionFinish(token, &final_id). If that callee (or any other reachable code) may modify the object pointed to by token (or has a non-const prototype), then token must not be declared const here. The claim assumes the token is only read in the whole call chain; that may be false. To determine whether a violation exists you must inspect the declarations/definitions of OS_ObjectIdTransactionFinish and any other callees and confirm whether they modify *token or take a non-const pointer. If they do not modify it and their prototypes can be changed to accept const, then token should be const and the current code would violate 8.13; otherwise the report is incorrect. Given only the snippet, the agent\u2019s blanket claim is not justified."
}