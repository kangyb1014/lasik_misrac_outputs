{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFinalizeDelete:\n```c\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    return operation_status;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);",
    "OS_ObjectIdTransactionFinish(token, &final_id);",
    "final_id = token->obj_id;",
    "int32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)"
  ],
  "explanation": "The rule targets pointers that could be const-qualified. In this function the only pointer-type usages are the token parameter and the address of the local final_id. The address of final_id is passed to a helper and is likely intended to be modified there (so it should remain non-const), and other lines (comparisons to OS_SUCCESS, assignments of OS_OBJECT_ID_UNDEFINED, the return statement, and the local variable declaration) do not involve pointer types that could/should be const-qualified. Therefore only the occurrences involving the token pointer and its uses are potential candidates for investigation under Rule 8.13; the remaining code fragments do not present additional pointer-to-non-const issues and need not be investigated."
}