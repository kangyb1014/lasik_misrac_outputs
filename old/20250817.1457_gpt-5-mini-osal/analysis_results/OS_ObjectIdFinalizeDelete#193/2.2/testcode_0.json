{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to OS_NotifyEvent is dead when the global event handler is never installed. OS_NotifyEvent does nothing if OS_SharedGlobalVars.EventHandler == NULL (it simply returns OS_SUCCESS). In a project configuration where OS_SharedGlobalVars.EventHandler is always NULL (no code ever sets an event handler), the call inside if (operation_status == OS_SUCCESS) { OS_NotifyEvent(...); } has no runtime effect and could be removed without changing program behaviour, therefore violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFinalizeDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1546.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFinalizeDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFinalizeDelete:\n```c\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n    }\n\n    return operation_status;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFinalizeDelete code.\n",
  "test_code": "#include <stdio.h>\n\nint32 OS_ObjectIdFinalizeDelete(int32 operation_status, OS_object_token_t *token)\n{\n    osal_id_t final_id;\n\n    /* Probe: log entry and input state */\n    {\n        FILE *f = fopen(\"/tmp/logs/1546.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_ObjectIdFinalizeDelete: entry operation_status=%ld, token=%p, token->obj_id=%ld\\n\",\n                    (long)operation_status, (void *)token, (long)token->obj_id);\n            fclose(f);\n        }\n    }\n\n    /* Clear the OSAL ID if successful - this returns the record to the pool */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n    else\n    {\n        /* this restores the original ID */\n        final_id = token->obj_id;\n    }\n\n    /* Probe: after computing final_id */\n    {\n        FILE *f = fopen(\"/tmp/logs/1546.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_ObjectIdFinalizeDelete: computed final_id=%ld\\n\", (long)final_id);\n            fclose(f);\n        }\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Probe: after transaction finish */\n    {\n        FILE *f = fopen(\"/tmp/logs/1546.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_ObjectIdFinalizeDelete: after OS_ObjectIdTransactionFinish token->obj_id=%ld\\n\", (long)token->obj_id);\n            fclose(f);\n        }\n    }\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        /* Probe: about to call OS_NotifyEvent */\n        {\n            FILE *f = fopen(\"/tmp/logs/1546.txt\", \"a\");\n            if (f != NULL)\n            {\n                fprintf(f, \"OS_ObjectIdFinalizeDelete: about to call OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, obj_id=%ld)\\n\", (long)token->obj_id);\n                fclose(f);\n            }\n        }\n\n        OS_NotifyEvent(OS_EVENT_RESOURCE_DELETED, token->obj_id, NULL);\n\n        /* Probe: after calling OS_NotifyEvent */\n        {\n            FILE *f = fopen(\"/tmp/logs/1546.txt\", \"a\");\n            if (f != NULL)\n            {\n                fprintf(f, \"OS_ObjectIdFinalizeDelete: returned from OS_NotifyEvent\\n\");\n                fclose(f);\n            }\n        }\n    }\n\n    /* Final probe: exit */\n    {\n        FILE *f = fopen(\"/tmp/logs/1546.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_ObjectIdFinalizeDelete: exit operation_status=%ld\\n\\n\", (long)operation_status);\n            fclose(f);\n        }\n    }\n\n    return operation_status;\n}\n"
}