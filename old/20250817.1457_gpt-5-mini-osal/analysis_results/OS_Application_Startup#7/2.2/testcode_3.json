{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe switch contains a 'default: break;' label that performs no action. If control reaches the default, the break merely exits the switch; removing the default (or its break) would not change program behaviour. Therefore this executed no-op is redundant and constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Application_Startup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/58.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Application_Startup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Application_Startup:\n```c\nvoid OS_Application_Startup(void)\n{\n    int32 Status;\n\n    Status = OS_API_Init();\n    if (Status != OS_SUCCESS)\n    {\n        BSP_DEBUG(\"Error: OS_API_Init() failed with status=%d\\n\", (int)Status);\n        OS_ApplicationExit(Status);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_Application_Startup code.\n",
  "test_code": "#include <stdio.h>\n\nvoid OS_Application_Startup(void)\n{\n    int32 Status;\n    FILE *fp = fopen(\"/tmp/logs/58.txt\", \"a\");\n\n    /* Probe: record entry to function */\n    if (fp != NULL)\n    {\n        fprintf(fp, \"OS_Application_Startup: entry\\n\");\n        fflush(fp);\n    }\n\n    Status = OS_API_Init();\n\n    /* Probe: record return status from OS_API_Init */\n    if (fp != NULL)\n    {\n        fprintf(fp, \"OS_API_Init returned status=%ld\\n\", (long)Status);\n        fflush(fp);\n    }\n\n    if (Status != OS_SUCCESS)\n    {\n        /* Record the error path for later analysis */\n        if (fp != NULL)\n        {\n            fprintf(fp, \"OS_Application_Startup: detected failure (status=%ld). About to call BSP_DEBUG and OS_ApplicationExit.\\n\", (long)Status);\n            fflush(fp);\n        }\n\n        BSP_DEBUG(\"Error: OS_API_Init() failed with status=%d\\n\", (int)Status);\n\n        if (fp != NULL)\n        {\n            fprintf(fp, \"OS_Application_Startup: BSP_DEBUG called\\n\");\n            fflush(fp);\n        }\n\n        OS_ApplicationExit(Status);\n\n        /* If OS_ApplicationExit returns, log that fact */\n        if (fp != NULL)\n        {\n            fprintf(fp, \"OS_Application_Startup: OS_ApplicationExit returned (unexpected)\\n\");\n            fflush(fp);\n            fclose(fp);\n        }\n\n        return;\n    }\n\n    /* Probe: normal successful exit */\n    if (fp != NULL)\n    {\n        fprintf(fp, \"OS_Application_Startup: completed successfully\\n\");\n        fclose(fp);\n    }\n}\n"
}