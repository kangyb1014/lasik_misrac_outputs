{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn the switch(idtype) inside OS_API_Init the default label contains an empty block with only a break (\"default: { break; }\"). This statement, when executed, performs no action and removing it would not change program behavior (control simply continues after the switch). Therefore it is executed but redundant and constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Application_Startup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/58.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Application_Startup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Application_Startup:\n```c\nvoid OS_Application_Startup(void)\n{\n    int32 Status;\n\n    Status = OS_API_Init();\n    if (Status != OS_SUCCESS)\n    {\n        BSP_DEBUG(\"Error: OS_API_Init() failed with status=%d\\n\", (int)Status);\n        OS_ApplicationExit(Status);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_Application_Startup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <unistd.h>\n\n/*\n * Probe logger: append human-readable logs to /tmp/logs/58.txt\n * This helper preserves the original logic of OS_Application_Startup\n * and is used to capture control-flow and state (the return Status\n * from OS_API_Init) so other agents can reproduce evidence.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/58.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging is not available, do not change program behaviour */\n        return;\n    }\n\n    /* Timestamp and pid for correlating logs */\n    time_t now = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&now, &tm_buf) != NULL)\n    {\n        char ts[64];\n        if (strftime(ts, sizeof(ts), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(f, \"[%s] pid=%d \", ts, (int)getpid());\n        }\n        else\n        {\n            fprintf(f, \"[time-error] pid=%d \", (int)getpid());\n        }\n    }\n    else\n    {\n        fprintf(f, \"[no-time] pid=%d \", (int)getpid());\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid OS_Application_Startup(void)\n{\n    int32 Status;\n\n    probe_log(\"OS_Application_Startup: enter\");\n\n    probe_log(\"OS_Application_Startup: calling OS_API_Init()\");\n    Status = OS_API_Init();\n    probe_log(\"OS_API_Init returned Status=%d\", (int)Status);\n\n    if (Status != OS_SUCCESS)\n    {\n        /* Log failure path and preserve original behaviour */\n        probe_log(\"OS_Application_Startup: OS_API_Init failed with status=%d\", (int)Status);\n        BSP_DEBUG(\"Error: OS_API_Init() failed with status=%d\\n\", (int)Status);\n        probe_log(\"OS_Application_Startup: calling OS_ApplicationExit with status=%d\", (int)Status);\n        OS_ApplicationExit(Status);\n    }\n\n    probe_log(\"OS_Application_Startup: completed successfully with Status=%d\", (int)Status);\n}\n"
}