{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memset(NewList, 0, ActualSize) immediately after NewList = malloc(ActualSize) without checking the return. If malloc returns NULL (allocation failure) this invokes memset(NULL, ..., ActualSize) which is undefined and can access beyond the bounds of the object referenced by NewList. Also if NumTags is so large that ActualSize overflows or doesn't match the allocated buffer, memset may write past the allocated region.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Application_Startup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/63.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Application_Startup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Application_Startup:\n```c\nvoid OS_Application_Startup(void)\n{\n    int32 Status;\n\n    Status = OS_API_Init();\n    if (Status != OS_SUCCESS)\n    {\n        BSP_DEBUG(\"Error: OS_API_Init() failed with status=%d\\n\", (int)Status);\n        OS_ApplicationExit(Status);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_Application_Startup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/*\n * Probe logging helper: appends human-readable logs to /tmp/logs/63.txt.\n * Attempts to create the directory if it does not exist. Falls back to\n * stderr if file access is not possible. This helper is intentionally\n * conservative (no dynamic allocation) and checks file handles to avoid\n * introducing new undefined behavior.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/63.txt\", \"a\");\n\n    if (!f)\n    {\n        /* Try to create the logs directory (best-effort). Ignore mkdir errors. */\n        (void)mkdir(\"/tmp/logs\", 0700);\n        f = fopen(\"/tmp/logs/63.txt\", \"a\");\n    }\n\n    if (!f)\n    {\n        /* Fallback to stderr so the information is not lost. */\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(stderr, fmt, ap);\n        fputc('\\n', stderr);\n        va_end(ap);\n        return;\n    }\n\n    /* Timestamp for each log entry (seconds since epoch). */\n    time_t now = time(NULL);\n    (void)fprintf(f, \"[%ld] \", (long)now);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/*\n * Modified OS_Application_Startup: preserves original control flow while\n * inserting probe_log calls to record the control path and state. The\n * logs written to /tmp/logs/63.txt will show the call to OS_API_Init,\n * its return value, and the decision path (error handling and exit).\n */\nvoid OS_Application_Startup(void)\n{\n    int32 Status;\n\n    probe_log(\"Entering OS_Application_Startup\");\n    probe_log(\"Calling OS_API_Init()\");\n\n    Status = OS_API_Init();\n\n    probe_log(\"OS_API_Init returned status=%d\", (int)Status);\n\n    if (Status != OS_SUCCESS)\n    {\n        probe_log(\"OS_API_Init failed: status=%d - invoking BSP_DEBUG and OS_ApplicationExit\", (int)Status);\n        BSP_DEBUG(\"Error: OS_API_Init() failed with status=%d\\n\", (int)Status);\n        probe_log(\"BSP_DEBUG invoked with status=%d\", (int)Status);\n\n        /* Preserve original behavior: call OS_ApplicationExit with the same status. */\n        OS_ApplicationExit(Status);\n\n        /* If OS_ApplicationExit returns unexpectedly, log that fact. */\n        probe_log(\"OS_ApplicationExit returned unexpectedly (status=%d)\", (int)Status);\n    }\n\n    probe_log(\"OS_Application_Startup completed successfully\");\n}\n"
}