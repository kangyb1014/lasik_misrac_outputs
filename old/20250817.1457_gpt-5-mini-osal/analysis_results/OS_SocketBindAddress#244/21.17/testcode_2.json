{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe function calls memchr(s, 0, maxlen) without ensuring that the object pointed to by s has at least maxlen bytes. If a caller supplies a maxlen larger than the actual size of the buffer, memchr may read beyond the object bounds. Example: char buf[4] = \"abc\"; OS_strnlen(buf, 10) \u2014 memchr will scan up to 10 bytes and can access beyond buf, causing an out-of-bounds access (violates Rule 21.17).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketBindAddress code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1959.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketBindAddress as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketBindAddress:\n```c\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n\n            if (return_code == OS_SUCCESS)\n            {\n                OS_CreateSocketName(&token, Addr, NULL);\n                record->name_entry = stream->stream_name;\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketBindAddress code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1959.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Log entry and basic parameters */\n    probe_log(\"ENTER OS_SocketBindAddress: sock_id=%ld, Addr=%p\", (long)sock_id, (void *)Addr);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    probe_log(\"After OS_CHECK_POINTER: Addr=%p\", (void *)Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    probe_log(\"Called OS_ObjectIdGetById: return_code=%ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        probe_log(\"Resolved record=%p, stream=%p\", (void *)record, (void *)stream);\n\n        if (stream != NULL)\n        {\n            /* Log stream state fields without assuming string contents */\n            probe_log(\"stream->socket_domain=%ld, stream->stream_state=0x%lx, stream->stream_name=%p\",\n                      (long)stream->socket_domain,\n                      (unsigned long)stream->stream_state,\n                      (void *)stream->stream_name);\n        }\n        else\n        {\n            probe_log(\"stream is NULL (unexpected)\");\n        }\n\n        if (record != NULL)\n        {\n            probe_log(\"record->name_entry=%p\", (void *)record->name_entry);\n        }\n        else\n        {\n            probe_log(\"record is NULL (unexpected)\");\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            probe_log(\"Socket domain invalid for sock_id=%ld\", (long)sock_id);\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            probe_log(\"Socket in incorrect state for sock_id=%ld: stream_state=0x%lx\",\n                      (long)sock_id, (unsigned long)stream->stream_state);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            probe_log(\"About to call OS_SocketBindAddress_Impl for sock_id=%ld, Addr=%p\", (long)sock_id, (void *)Addr);\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n            probe_log(\"OS_SocketBindAddress_Impl returned %ld for sock_id=%ld\", (long)return_code, (long)sock_id);\n\n            if (return_code == OS_SUCCESS)\n            {\n                probe_log(\"Calling OS_CreateSocketName: token_addr=%p, Addr=%p\", (void *)&token, (void *)Addr);\n                OS_CreateSocketName(&token, Addr, NULL);\n                probe_log(\"Returned from OS_CreateSocketName: stream->stream_name=%p, record->name_entry will be set to stream->stream_name\",\n                          (void *)stream->stream_name);\n\n                /* Preserve original logic */\n                record->name_entry = stream->stream_name;\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n\n                probe_log(\"After binding: record->name_entry=%p, stream->stream_state=0x%lx\",\n                          (void *)record->name_entry, (unsigned long)stream->stream_state);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"Released token for sock_id=%ld\", (long)sock_id);\n    }\n    else\n    {\n        probe_log(\"OS_ObjectIdGetById failed for sock_id=%ld with return_code=%ld\", (long)sock_id, (long)return_code);\n    }\n\n    probe_log(\"EXIT OS_SocketBindAddress: sock_id=%ld, return_code=%ld\", (long)sock_id, (long)return_code);\n\n    return return_code;\n}\n"
}