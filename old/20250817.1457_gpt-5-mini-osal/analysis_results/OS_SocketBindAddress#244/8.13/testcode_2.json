{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'impl' is declared as OS_impl_file_internal_record_t * and is assigned the address of a table entry via OS_OBJECT_TABLE_GET. In OS_SocketBindAddress_Impl the code only reads from this structure (uses impl->fd for bind) and does not modify the table entry; therefore the pointer could and should be declared as a pointer to const (const OS_impl_file_internal_record_t *impl). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible, so this usage violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketBindAddress code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1955.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketBindAddress as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketBindAddress:\n```c\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n\n            if (return_code == OS_SUCCESS)\n            {\n                OS_CreateSocketName(&token, Addr, NULL);\n                record->name_entry = stream->stream_name;\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketBindAddress code.\n",
  "test_code": "#include <stdio.h>\n\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Open probe log early to capture all control flow for analysis */\n    FILE *probe_log = fopen(\"/tmp/logs/1955.txt\", \"a\");\n    if (probe_log)\n    {\n        fprintf(probe_log, \"ENTER: OS_SocketBindAddress(sock_id=%ld, Addr=%p)\\n\", (long)sock_id, (const void *)Addr);\n    }\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (probe_log)\n    {\n        fprintf(probe_log, \"OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (probe_log)\n        {\n            /* Log key state used by the subsequent decision logic */\n            fprintf(probe_log,\n                    \"Fetched record=%p stream=%p socket_domain=%d stream_state=0x%08lx stream_name=%p\\n\",\n                    (void *)record,\n                    (void *)stream,\n                    (int)stream->socket_domain,\n                    (unsigned long)stream->stream_state,\n                    (void *)stream->stream_name);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            if (probe_log)\n            {\n                fprintf(probe_log, \"Decision: Not a socket (socket_domain == OS_SocketDomain_INVALID)\\n\");\n            }\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            if (probe_log)\n            {\n                fprintf(probe_log, \"Decision: Incorrect object state (already BOUND or CONNECTED). stream_state=0x%08lx\\n\", (unsigned long)stream->stream_state);\n            }\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            if (probe_log)\n            {\n                fprintf(probe_log, \"Calling OS_SocketBindAddress_Impl(token=%p, Addr=%p)\\n\", (void *)&token, (const void *)Addr);\n            }\n\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n\n            if (probe_log)\n            {\n                fprintf(probe_log, \"OS_SocketBindAddress_Impl returned %ld\\n\", (long)return_code);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                OS_CreateSocketName(&token, Addr, NULL);\n                record->name_entry = stream->stream_name;\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n\n                if (probe_log)\n                {\n                    fprintf(probe_log, \"Bind successful: name_entry=%p stream_name=%p new_stream_state=0x%08lx\\n\",\n                            (void *)record->name_entry,\n                            (void *)stream->stream_name,\n                            (unsigned long)stream->stream_state);\n                }\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (probe_log)\n        {\n            fprintf(probe_log, \"OS_ObjectIdRelease called for token=%p\\n\", (void *)&token);\n        }\n    }\n\n    if (probe_log)\n    {\n        fprintf(probe_log, \"EXIT: OS_SocketBindAddress returning %ld\\n\\n\", (long)return_code);\n        fclose(probe_log);\n    }\n\n    return return_code;\n}\n"
}