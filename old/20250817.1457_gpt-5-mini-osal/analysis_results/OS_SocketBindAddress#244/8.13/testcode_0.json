{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_SocketBindAddress_Impl the local variable is declared as a non-const pointer: \"OS_impl_file_internal_record_t *impl;\". The function only reads from the pointed-to object (uses impl->fd) and does not modify the structure through this pointer, so the pointer could and should be declared as const: \"const OS_impl_file_internal_record_t *impl;\". Declaring it non-const when it could be const violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketBindAddress code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1955.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketBindAddress as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketBindAddress:\n```c\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n\n            if (return_code == OS_SUCCESS)\n            {\n                OS_CreateSocketName(&token, Addr, NULL);\n                record->name_entry = stream->stream_name;\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketBindAddress code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n#include <string.h>\n\n/*\n * Probe/logging helper for OS_SocketBindAddress.\n * Uses const-qualified pointers where possible so it does not imply modification\n * of the underlying objects. Writes an append-only trace to /tmp/logs/1955.txt.\n */\nstatic void OS_SocketBind_Log(const OS_common_record_t *record,\n                              const OS_stream_internal_record_t *stream,\n                              const OS_object_token_t *token,\n                              const OS_SockAddr_t *Addr,\n                              int32 return_code,\n                              const char *stage)\n{\n    /* Try to ensure the directory exists; ignore errors if it cannot be created. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/1955.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"=== OS_SocketBindAddress TRACE ===\\n\");\n    fprintf(f, \"Stage: %s\\n\", stage ? stage : \"(null)\");\n\n    /* Print pointer addresses and a few selected state fields. Use casts to void* to avoid type issues. */\n    fprintf(f, \"token ptr: %p\\n\", (const void *)token);\n    fprintf(f, \"Addr ptr: %p\\n\", (const void *)Addr);\n\n    if (record != NULL)\n    {\n        /* record->name_entry is used in the original function; print its pointer if available. */\n        fprintf(f, \"record ptr: %p, record->name_entry ptr: %p\\n\",\n                (const void *)record,\n                (const void *)record->name_entry);\n    }\n    else\n    {\n        fprintf(f, \"record: NULL\\n\");\n    }\n\n    if (stream != NULL)\n    {\n        /* Print the socket domain and stream state (hex) and stream_name if present. */\n        fprintf(f, \"stream ptr: %p, socket_domain: %d, stream_state: 0x%X, stream_name: %s\\n\",\n                (const void *)stream,\n                (int)stream->socket_domain,\n                (unsigned int)stream->stream_state,\n                (stream->stream_name != NULL) ? stream->stream_name : \"(null)\");\n    }\n    else\n    {\n        fprintf(f, \"stream: NULL\\n\");\n    }\n\n    fprintf(f, \"return_code (at log time): %d\\n\", (int)return_code);\n    fprintf(f, \"=================================\\n\\n\");\n\n    fclose(f);\n}\n\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    /* Log initial parameter state (Addr pointer) and stage */\n    OS_SocketBind_Log(NULL, NULL, NULL, Addr, 0, \"entry_after_param_check\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    OS_SocketBind_Log(NULL, NULL, &token, Addr, return_code, \"after_ObjectIdGetById\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log state after fetching record and stream */\n        OS_SocketBind_Log(record, stream, &token, Addr, return_code, \"after_table_get\");\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n            OS_SocketBind_Log(record, stream, &token, Addr, return_code, \"invalid_domain\");\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            OS_SocketBind_Log(record, stream, &token, Addr, return_code, \"incorrect_state_bound_or_connected\");\n        }\n        else\n        {\n            OS_SocketBind_Log(record, stream, &token, Addr, return_code, \"before_Impl_call\");\n\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n\n            OS_SocketBind_Log(record, stream, &token, Addr, return_code, \"after_Impl_call\");\n\n            if (return_code == OS_SUCCESS)\n            {\n                OS_CreateSocketName(&token, Addr, NULL);\n                record->name_entry = stream->stream_name;\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n\n                OS_SocketBind_Log(record, stream, &token, Addr, return_code, \"success_post_update\");\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Final return state */\n    OS_SocketBind_Log(NULL, NULL, &token, Addr, return_code, \"function_exit\");\n\n    return return_code;\n}\n"
}