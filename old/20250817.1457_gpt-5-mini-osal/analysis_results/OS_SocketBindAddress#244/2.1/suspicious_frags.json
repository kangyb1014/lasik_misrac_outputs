{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SocketBindAddress:\n```c\nint32 OS_SocketBindAddress(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    OS_common_record_t *         record;\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Not a socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither bound nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketBindAddress_Impl(&token, Addr);\n\n            if (return_code == OS_SUCCESS)\n            {\n                OS_CreateSocketName(&token, Addr, NULL);\n                record->name_entry = stream->stream_name;\n                stream->stream_state |= OS_STREAM_STATE_BOUND;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SocketBindAddress:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_common_record_t *const OS_global_stream_table\n...\nextern OS_stream_internal_record_t OS_stream_table[OS_MAX_NUM_OPEN_FILES]\n...\ntypedef struct OS_common_record OS_common_record_t\n...\ntypedef struct\n{\n    char   stream_name[OS_MAX_PATH_LEN];\n    uint8  socket_domain;\n    uint8  socket_type;\n    uint16 stream_state;\n} OS_stream_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERR_INCORRECT_OBJ_TYPE (-36)\n...\n#define OS_ERR_INCORRECT_OBJ_STATE (-35)\n...\nint32 OS_SocketBindAddress_Impl(const OS_object_token_t *token, const OS_SockAddr_t *Addr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&Addr->AddrData;\n\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    if (addrlen == 0)\n    {\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    os_result = bind(impl->fd, sa, addrlen);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"bind: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n...\nvoid OS_CreateSocketName(const OS_object_token_t *token, const OS_SockAddr_t *Addr, const char *parent_name)\n{\n    size_t                       len;\n    uint16                       port;\n    OS_stream_internal_record_t *sock;\n\n    sock = OS_OBJECT_TABLE_GET(OS_stream_table, *token);\n\n    if (OS_SocketAddrToString_Impl(sock->stream_name, sizeof(sock->stream_name), Addr) != OS_SUCCESS)\n    {\n        sock->stream_name[0] = 0;\n    }\n    if (OS_SocketAddrGetPort_Impl(&port, Addr) == OS_SUCCESS)\n    {\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \":%u\", (unsigned int)port);\n    }\n\n    if (parent_name)\n    {\n        /* Append the name from the parent socket. */\n        len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n        snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \"-%s\", parent_name);\n    }\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "switch (sa->sa_family)\n{\n    case AF_INET:\n        addrlen = sizeof(struct sockaddr_in);\n        break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n    case AF_INET6:\n        addrlen = sizeof(struct sockaddr_in6);\n        break;\n#endif\n    default:\n        addrlen = 0;\n        break;\n}\n\nif (addrlen == 0)\n{\n    return OS_ERR_BAD_ADDRESS;\n}",
    "OS_CHECK_POINTER(Addr);",
    "if (return_code == OS_SUCCESS)\n{\n    record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n    stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n    if (stream->socket_domain == OS_SocketDomain_INVALID)\n    {\n        /* Not a socket */\n        return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n    }\n    else if ((stream->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != 0)\n    {\n        /* Socket must be neither bound nor connected */\n        return_code = OS_ERR_INCORRECT_OBJ_STATE;\n    }\n    else\n    {\n        return_code = OS_SocketBindAddress_Impl(&token, Addr);\n\n        if (return_code == OS_SUCCESS)\n        {\n            OS_CreateSocketName(&token, Addr, NULL);\n            record->name_entry = stream->stream_name;\n            stream->stream_state |= OS_STREAM_STATE_BOUND;\n        }\n    }\n\n    OS_ObjectIdRelease(&token);\n}",
    "if (parent_name)\n{\n    /* Append the name from the parent socket. */\n    len = OS_strnlen(sock->stream_name, sizeof(sock->stream_name));\n    snprintf(&sock->stream_name[len], sizeof(sock->stream_name) - len, \"-%s\", parent_name);\n}"
  ],
  "explanation": "I selected fragments that are potential sources of unreachable code and therefore merit investigation:\n\n- The OS_CHECK_POINTER(Addr) macro expands to BUGCHECK(...). If BUGCHECK performs a non-local exit (abort, infinite loop, longjmp, etc.) this can make subsequent code unreachable in some builds/conditions. The call site must be checked to determine whether code following the macro can ever be executed in all configurations.\n\n- The main if (return_code == OS_SUCCESS) { ... } block contains several mutually exclusive branches and an early release/return pattern. Invariants on token/stream/table contents or on the object-id routines might make some branches impossible at runtime; the sequence of OS_ObjectIdGetById, table lookups, and later OS_ObjectIdRelease should be checked for paths that cannot be taken (e.g. if some error conditions are impossible given prior checks).\n\n- The switch on sa->sa_family in OS_SocketBindAddress_Impl has an AF_INET6 case guarded by a compile-time macro. Depending on build-time configuration the default branch (addrlen = 0) may be the only code compiled for certain platforms or, conversely, some switch branches may never be reached. The follow-up check if (addrlen == 0) return ... means code paths related to certain families could be unreachable or always taken; verify platform/macro combinations and possible sa_family values.\n\n- The parent_name branch in OS_CreateSocketName is passed NULL from OS_SocketBindAddress (OS_CreateSocketName(&token, Addr, NULL)), so that particular call-site will never execute the parent_name body. This branch may still be reachable from other callers, but it should be checked whether it is actually reachable anywhere in the project or if it is dead code.\n\nOther fragments in the provided code (the bind() call and its error handling, OS_ObjectIdGetById implementation flow, OS_ObjectIdRelease call, name creation when Addr is valid, and the simple return statements) appear to be normal control-flow constructs without obvious unreachable statements. They do not show patterns (compile-time-excluded cases, unconditional non-local exits at the call site, or contradictory conditions) that would make code permanently unreachable across all builds, so they were not flagged."
}