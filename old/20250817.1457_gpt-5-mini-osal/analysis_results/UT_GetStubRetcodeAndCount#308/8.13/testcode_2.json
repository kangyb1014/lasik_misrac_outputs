{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer StubPtr is declared as UT_StubTableEntry_t * but is only used to read members (Data.Rc.Count and Data.Rc.Value). It should be declared as a pointer-to-const (const UT_StubTableEntry_t *StubPtr) to indicate no modification of the pointed-to object. Therefore the code fragment 'StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);' with a non-const target pointer violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetStubRetcodeAndCount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2467.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetStubRetcodeAndCount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetStubRetcodeAndCount:\n```c\nbool UT_GetStubRetcodeAndCount(UT_EntryKey_t FuncKey, int32 *Retcode, int32 *Count)\n{\n    UT_StubTableEntry_t *StubPtr;\n    bool                 Result;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);\n    if (StubPtr != NULL)\n    {\n        *Count   = StubPtr->Data.Rc.Count;\n        *Retcode = StubPtr->Data.Rc.Value;\n        Result   = true;\n    }\n    else\n    {\n        Result = false;\n    }\n\n    return Result;\n}\n```\n</target_code>\nPlease provide the modified UT_GetStubRetcodeAndCount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <stddef.h>\n\n/*\n * Probe logging helper: Append human-readable traces to /tmp/logs/2467.txt.\n * Keep this as a small helper to avoid changing original logic.\n */\nstatic void UT_LogProbe(UT_EntryKey_t FuncKey,\n                        const UT_StubTableEntry_t *StubPtr,\n                        int32 RetcodeVal,\n                        int32 CountVal,\n                        const char *note)\n{\n    FILE *f = fopen(\"/tmp/logs/2467.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print a simple record of the control point and observed state. */\n        (void)fprintf(f, \"UT_GetStubRetcodeAndCount: %s\\n\", note);\n        (void)fprintf(f, \"  FuncKey (repr) = %llu\\n\", (unsigned long long)(uintptr_t)FuncKey);\n        (void)fprintf(f, \"  StubPtr = %p\\n\", (void *)StubPtr);\n        if (StubPtr != NULL)\n        {\n            (void)fprintf(f, \"  Observed Data.Rc.Value = %ld\\n\", (long)RetcodeVal);\n            (void)fprintf(f, \"  Observed Data.Rc.Count = %ld\\n\", (long)CountVal);\n        }\n        (void)fprintf(f, \"\\n\");\n        (void)fclose(f);\n    }\n}\n\nbool UT_GetStubRetcodeAndCount(UT_EntryKey_t FuncKey, int32 *Retcode, int32 *Count)\n{\n    UT_StubTableEntry_t *StubPtr;\n    bool                 Result;\n\n    /* Log entry into the function with the function key. */\n    UT_LogProbe(FuncKey, NULL, 0, 0, \"entering\");\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);\n\n    /* Log result of lookup (pointer value). */\n    UT_LogProbe(FuncKey, StubPtr, 0, 0, \"after UT_GetStubEntry\");\n\n    if (StubPtr != NULL)\n    {\n        /* Read-only access to the stub table entry members (original logic preserved). */\n        *Count   = StubPtr->Data.Rc.Count;\n        *Retcode = StubPtr->Data.Rc.Value;\n\n        /* Log the values that were read to provide evidence of the read-only usage. */\n        UT_LogProbe(FuncKey, StubPtr, *Retcode, *Count, \"read values\");\n\n        Result   = true;\n    }\n    else\n    {\n        UT_LogProbe(FuncKey, StubPtr, 0, 0, \"stub not found\");\n\n        Result = false;\n    }\n\n    /* Final log record summarizing the exit state. */\n    if (Result != false)\n    {\n        UT_LogProbe(FuncKey, StubPtr, *Retcode, *Count, \"exiting (true)\");\n    }\n    else\n    {\n        UT_LogProbe(FuncKey, StubPtr, 0, 0, \"exiting (false)\");\n    }\n\n    return Result;\n}\n"
}