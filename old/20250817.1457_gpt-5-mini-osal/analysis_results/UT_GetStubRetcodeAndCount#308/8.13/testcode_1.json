{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nUT_GetStubRetcodeAndCount declares StubPtr as UT_StubTableEntry_t * but only reads the pointed-to data (Count and Value). The pointer can be const-qualified (const UT_StubTableEntry_t *StubPtr) since the function does not modify the structure. Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetStubRetcodeAndCount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2467.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetStubRetcodeAndCount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetStubRetcodeAndCount:\n```c\nbool UT_GetStubRetcodeAndCount(UT_EntryKey_t FuncKey, int32 *Retcode, int32 *Count)\n{\n    UT_StubTableEntry_t *StubPtr;\n    bool                 Result;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);\n    if (StubPtr != NULL)\n    {\n        *Count   = StubPtr->Data.Rc.Count;\n        *Retcode = StubPtr->Data.Rc.Value;\n        Result   = true;\n    }\n    else\n    {\n        Result = false;\n    }\n\n    return Result;\n}\n```\n</target_code>\nPlease provide the modified UT_GetStubRetcodeAndCount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nbool UT_GetStubRetcodeAndCount(UT_EntryKey_t FuncKey, int32 *Retcode, int32 *Count)\n{\n    UT_StubTableEntry_t *StubPtr;\n    bool                 Result;\n\n    /* Log entry with the function key */\n    {\n        FILE *log = fopen(\"/tmp/logs/2467.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* FuncKey is printed as an unsigned long long to capture its numeric value for debugging. */\n            fprintf(log, \"UT_GetStubRetcodeAndCount: Enter FuncKey=%llu\\n\", (unsigned long long)FuncKey);\n            fclose(log);\n        }\n    }\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);\n\n    /* Log the returned pointer value to show whether it is NULL or points to a table entry */\n    {\n        FILE *log = fopen(\"/tmp/logs/2467.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"  UT_GetStubEntry returned StubPtr=%p\\n\", (const void *)StubPtr);\n            fclose(log);\n        }\n    }\n\n    if (StubPtr != NULL)\n    {\n        /* Preserve original logic: read fields from the stub entry. */\n        *Count   = StubPtr->Data.Rc.Count;\n        *Retcode = StubPtr->Data.Rc.Value;\n        Result   = true;\n\n        /* Log the values that were read so others can reproduce the violation scenario evidence. */\n        {\n            FILE *log = fopen(\"/tmp/logs/2467.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"  Read Count=%d, Retcode=%d from StubPtr=%p\\n\", (int)*Count, (int)*Retcode, (const void *)StubPtr);\n                fprintf(log, \"  Returning Result=true\\n\");\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        Result = false;\n\n        /* Log the NULL case so control flow is captured. */\n        FILE *log = fopen(\"/tmp/logs/2467.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"  StubPtr is NULL. Returning Result=false\\n\");\n            fclose(log);\n        }\n    }\n\n    return Result;\n}\n"
}