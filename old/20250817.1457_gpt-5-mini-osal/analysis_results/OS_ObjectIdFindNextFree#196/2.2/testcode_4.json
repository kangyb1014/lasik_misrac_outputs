{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'obj' is initialized to NULL at declaration (OS_common_record_t *obj = NULL;). This assignment is never relied upon: when max_id > 0 the for-loop assigns 'obj' before any use, and when max_id == 0 the loop is skipped and the block that would dereference 'obj' is not executed. Therefore the initialization has no effect on program behavior and can be removed \u2014 it is an executed operation qualifying as dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFindNextFree code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1570.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFindNextFree as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindNextFree:\n```c\nint32 OS_ObjectIdFindNextFree(OS_object_token_t *token)\n{\n    uint32              max_id;\n    uint32              base_id;\n    uint32              local_id = 0;\n    uint32              serial;\n    uint32              i;\n    int32               return_code;\n    OS_common_record_t *obj = NULL;\n    OS_objtype_state_t *objtype_state;\n\n    base_id       = OS_GetBaseForObjectType(token->obj_type);\n    max_id        = OS_GetMaxForObjectType(token->obj_type);\n    objtype_state = &OS_objtype_state[token->obj_type];\n\n    if (max_id == 0)\n    {\n        /* if the max id is zero, then this build of OSAL\n         * does not include any support for that object type.\n         * Return the \"not implemented\" to differentiate between\n         * this case vs. running out of valid slots  */\n        return_code = OS_ERR_NOT_IMPLEMENTED;\n        serial      = 0;\n    }\n    else\n    {\n        return_code = OS_ERR_NO_FREE_IDS;\n        serial      = OS_ObjectIdToSerialNumber_Impl(objtype_state->last_id_issued);\n    }\n\n    for (i = 0; i < max_id; ++i)\n    {\n        local_id = (++serial) % max_id;\n        if (serial >= OS_OBJECT_INDEX_MASK)\n        {\n            /* reset to beginning of ID space */\n            serial = local_id;\n        }\n        obj = &OS_common_table[local_id + base_id];\n        if (!OS_ObjectIdDefined(obj->active_id))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_idx = OSAL_INDEX_C(local_id);\n        OS_ObjectIdCompose_Impl(token->obj_type, serial, &token->obj_id);\n\n        /* Ensure any data in the record has been cleared */\n        obj->active_id  = token->obj_id;\n        obj->name_entry = NULL;\n        obj->creator    = OS_TaskGetId();\n        obj->refcount   = 0;\n\n        /* preemptively update the last id issued */\n        objtype_state->last_id_issued = token->obj_id;\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        token->obj_idx = OSAL_INDEX_C(-1);\n        token->obj_id  = OS_OBJECT_ID_UNDEFINED;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFindNextFree code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper - appends to /tmp/logs/1570.txt. */\nstatic void OS_ObjectIdFindNextFree_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1570.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ObjectIdFindNextFree(OS_object_token_t *token)\n{\n    uint32              max_id;\n    uint32              base_id;\n    uint32              local_id = 0;\n    uint32              serial;\n    uint32              i;\n    int32               return_code;\n    OS_common_record_t *obj = NULL;\n    OS_objtype_state_t *objtype_state;\n\n    /* Log entry and initial ptr state to demonstrate the initialization value */\n    OS_ObjectIdFindNextFree_log(\"Entry: token=%p, obj_type=%u, initial_obj=%p\", (void *)token, (unsigned)token->obj_type, (void *)obj);\n\n    base_id       = OS_GetBaseForObjectType(token->obj_type);\n    max_id        = OS_GetMaxForObjectType(token->obj_type);\n    objtype_state = &OS_objtype_state[token->obj_type];\n\n    OS_ObjectIdFindNextFree_log(\"Computed base_id=%u, max_id=%u, objtype_state=%p\", (unsigned)base_id, (unsigned)max_id, (void *)objtype_state);\n\n    if (max_id == 0)\n    {\n        /* if the max id is zero, then this build of OSAL\n         * does not include any support for that object type.\n         * Return the \"not implemented\" to differentiate between\n         * this case vs. running out of valid slots  */\n        return_code = OS_ERR_NOT_IMPLEMENTED;\n        serial      = 0;\n\n        OS_ObjectIdFindNextFree_log(\"Branch: max_id==0 -> return_code=%d, serial=%u\", (int)return_code, (unsigned)serial);\n    }\n    else\n    {\n        return_code = OS_ERR_NO_FREE_IDS;\n        serial      = OS_ObjectIdToSerialNumber_Impl(objtype_state->last_id_issued);\n\n        OS_ObjectIdFindNextFree_log(\"Branch: max_id>0 -> initial return_code=%d, initial serial=%u (last_id_issued=0x%08x)\",\n                                   (int)return_code, (unsigned)serial, (unsigned)objtype_state->last_id_issued);\n    }\n\n    for (i = 0; i < max_id; ++i)\n    {\n        local_id = (++serial) % max_id;\n        OS_ObjectIdFindNextFree_log(\"Loop iter %u: pre-check serial=%u, local_id=%u\", (unsigned)i, (unsigned)serial, (unsigned)local_id);\n\n        if (serial >= OS_OBJECT_INDEX_MASK)\n        {\n            /* reset to beginning of ID space */\n            serial = local_id;\n            OS_ObjectIdFindNextFree_log(\"serial >= OS_OBJECT_INDEX_MASK, reset serial -> %u\", (unsigned)serial);\n        }\n\n        obj = &OS_common_table[local_id + base_id];\n        OS_ObjectIdFindNextFree_log(\"Assigned obj = &OS_common_table[%u] -> %p, obj->active_id=0x%08x\", (unsigned)(local_id + base_id), (void *)obj, (unsigned)obj->active_id);\n\n        if (!OS_ObjectIdDefined(obj->active_id))\n        {\n            OS_ObjectIdFindNextFree_log(\"Found free slot at local_id=%u (global_idx=%u), serial=%u\", (unsigned)local_id, (unsigned)(local_id + base_id), (unsigned)serial);\n            return_code = OS_SUCCESS;\n            break;\n        }\n        else\n        {\n            OS_ObjectIdFindNextFree_log(\"Slot occupied: active_id=0x%08x\", (unsigned)obj->active_id);\n        }\n    }\n\n    OS_ObjectIdFindNextFree_log(\"After loop: return_code=%d, local_id=%u, serial=%u, obj=%p\", (int)return_code, (unsigned)local_id, (unsigned)serial, (void *)obj);\n\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_idx = OSAL_INDEX_C(local_id);\n        OS_ObjectIdCompose_Impl(token->obj_type, serial, &token->obj_id);\n\n        /* Ensure any data in the record has been cleared */\n        obj->active_id  = token->obj_id;\n        obj->name_entry = NULL;\n        obj->creator    = OS_TaskGetId();\n        obj->refcount   = 0;\n\n        /* preemptively update the last id issued */\n        objtype_state->last_id_issued = token->obj_id;\n\n        OS_ObjectIdFindNextFree_log(\"Success path: token->obj_idx=%d, token->obj_id=0x%08x, obj(ptr)=%p, objtype_state->last_id_issued=0x%08x\",\n                                   (int)token->obj_idx, (unsigned)token->obj_id, (void *)obj, (unsigned)objtype_state->last_id_issued);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        token->obj_idx = OSAL_INDEX_C(-1);\n        token->obj_id  = OS_OBJECT_ID_UNDEFINED;\n\n        OS_ObjectIdFindNextFree_log(\"Failure path: set token->obj_idx=%d, token->obj_id=0x%08x\", (int)token->obj_idx, (unsigned)token->obj_id);\n    }\n\n    OS_ObjectIdFindNextFree_log(\"Exit: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}