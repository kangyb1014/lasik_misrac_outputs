{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen OS_GetMaxForObjectType(token->obj_type) returns 0 (max_id == 0), the code sets return_code = OS_ERR_NOT_IMPLEMENTED and then executes serial = 0. After this point the for-loop (for (i = 0; i < max_id; ++i)) is skipped because max_id is 0, and the success path that would use 'serial' (OS_ObjectIdCompose_Impl and related assignments) is not taken because return_code != OS_SUCCESS. Therefore the assignment serial = 0 has no effect on program behaviour and could be removed without changing the program. This constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFindNextFree code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1570.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFindNextFree as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindNextFree:\n```c\nint32 OS_ObjectIdFindNextFree(OS_object_token_t *token)\n{\n    uint32              max_id;\n    uint32              base_id;\n    uint32              local_id = 0;\n    uint32              serial;\n    uint32              i;\n    int32               return_code;\n    OS_common_record_t *obj = NULL;\n    OS_objtype_state_t *objtype_state;\n\n    base_id       = OS_GetBaseForObjectType(token->obj_type);\n    max_id        = OS_GetMaxForObjectType(token->obj_type);\n    objtype_state = &OS_objtype_state[token->obj_type];\n\n    if (max_id == 0)\n    {\n        /* if the max id is zero, then this build of OSAL\n         * does not include any support for that object type.\n         * Return the \"not implemented\" to differentiate between\n         * this case vs. running out of valid slots  */\n        return_code = OS_ERR_NOT_IMPLEMENTED;\n        serial      = 0;\n    }\n    else\n    {\n        return_code = OS_ERR_NO_FREE_IDS;\n        serial      = OS_ObjectIdToSerialNumber_Impl(objtype_state->last_id_issued);\n    }\n\n    for (i = 0; i < max_id; ++i)\n    {\n        local_id = (++serial) % max_id;\n        if (serial >= OS_OBJECT_INDEX_MASK)\n        {\n            /* reset to beginning of ID space */\n            serial = local_id;\n        }\n        obj = &OS_common_table[local_id + base_id];\n        if (!OS_ObjectIdDefined(obj->active_id))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_idx = OSAL_INDEX_C(local_id);\n        OS_ObjectIdCompose_Impl(token->obj_type, serial, &token->obj_id);\n\n        /* Ensure any data in the record has been cleared */\n        obj->active_id  = token->obj_id;\n        obj->name_entry = NULL;\n        obj->creator    = OS_TaskGetId();\n        obj->refcount   = 0;\n\n        /* preemptively update the last id issued */\n        objtype_state->last_id_issued = token->obj_id;\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        token->obj_idx = OSAL_INDEX_C(-1);\n        token->obj_id  = OS_OBJECT_ID_UNDEFINED;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFindNextFree code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging function to capture control flow and state. */\nstatic void osal_probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1570.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_ObjectIdFindNextFree(OS_object_token_t *token)\n{\n    uint32              max_id;\n    uint32              base_id;\n    uint32              local_id = 0;\n    uint32              serial;\n    uint32              i;\n    int32               return_code;\n    OS_common_record_t *obj = NULL;\n    OS_objtype_state_t *objtype_state;\n\n    /* Log entry and input token state */\n    osal_probe_log(\"ENTRY: OS_ObjectIdFindNextFree token=%p obj_type=%u\", (void *)token, (unsigned)token->obj_type);\n\n    base_id       = OS_GetBaseForObjectType(token->obj_type);\n    max_id        = OS_GetMaxForObjectType(token->obj_type);\n    objtype_state = &OS_objtype_state[token->obj_type];\n\n    /* Log retrieved base/max and last_id_issued */\n    osal_probe_log(\"LOOKUP: base_id=%u max_id=%u objtype_state=%p last_id_issued=0x%08x\",\n                   (unsigned)base_id, (unsigned)max_id, (void *)objtype_state,\n                   (unsigned)objtype_state->last_id_issued);\n\n    if (max_id == 0)\n    {\n        /* if the max id is zero, then this build of OSAL\n         * does not include any support for that object type.\n         * Return the \"not implemented\" to differentiate between\n         * this case vs. running out of valid slots  */\n        return_code = OS_ERR_NOT_IMPLEMENTED;\n        serial      = 0;\n\n        /* Probe log: record the assignment that is the subject of the reported dead-code */\n        osal_probe_log(\"BRANCH: max_id==0 -> return_code=%d serial_assigned=%u (loop will be skipped)\",\n                       (int)return_code, (unsigned)serial);\n    }\n    else\n    {\n        return_code = OS_ERR_NO_FREE_IDS;\n        serial      = OS_ObjectIdToSerialNumber_Impl(objtype_state->last_id_issued);\n\n        osal_probe_log(\"BRANCH: max_id>0 -> return_code=%d initial_serial=%u\",\n                       (int)return_code, (unsigned)serial);\n    }\n\n    /* Log before entering loop (or skipping it) */\n    osal_probe_log(\"LOOP_BEGIN: max_id=%u serial=%u\", (unsigned)max_id, (unsigned)serial);\n\n    for (i = 0; i < max_id; ++i)\n    {\n        local_id = (++serial) % max_id;\n        if (serial >= OS_OBJECT_INDEX_MASK)\n        {\n            /* reset to beginning of ID space */\n            serial = local_id;\n        }\n        obj = &OS_common_table[local_id + base_id];\n\n        /* Log each iteration's indices and active state for reproducibility */\n        osal_probe_log(\"ITER: i=%u serial=%u local_id=%u check_active_id=0x%08x\",\n                       (unsigned)i, (unsigned)serial, (unsigned)local_id, (unsigned)obj->active_id);\n\n        if (!OS_ObjectIdDefined(obj->active_id))\n        {\n            return_code = OS_SUCCESS;\n            osal_probe_log(\"FOUND_FREE: i=%u local_id=%u serial=%u -> return_code=OS_SUCCESS\",\n                           (unsigned)i, (unsigned)local_id, (unsigned)serial);\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_idx = OSAL_INDEX_C(local_id);\n        OS_ObjectIdCompose_Impl(token->obj_type, serial, &token->obj_id);\n\n        /* Ensure any data in the record has been cleared */\n        obj->active_id  = token->obj_id;\n        obj->name_entry = NULL;\n        obj->creator    = OS_TaskGetId();\n        obj->refcount   = 0;\n\n        /* preemptively update the last id issued */\n        objtype_state->last_id_issued = token->obj_id;\n\n        osal_probe_log(\"SUCCESS_ASSIGN: token->obj_idx=%d token->obj_id=0x%08x obj=%p\",\n                       (int)token->obj_idx, (unsigned)token->obj_id, (void *)obj);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        token->obj_idx = OSAL_INDEX_C(-1);\n        token->obj_id  = OS_OBJECT_ID_UNDEFINED;\n\n        /* Log failure path and final token state */\n        osal_probe_log(\"FAIL_PATH: return_code=%d token->obj_idx=%d token->obj_id=0x%08x\",\n                       (int)return_code, (int)token->obj_idx, (unsigned)token->obj_id);\n    }\n\n    osal_probe_log(\"EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}