{
  "user_message": "An agent A claimed that the following OS_BinSemDelete code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_BinSemDelete.\n```c\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The global function-pointer OS_SharedGlobalVars.EventHandler is invoked with a data parameter of type void * (e.g. status = OS_SharedGlobalVars.EventHandler(event, object_id, data);). The EventHandler prototype therefore accepts a non-const pointer (void *). Unless the callback is intended to modify the pointed-to data, the parameter should be const-qualified (const void *) so the pointer points to a const-qualified type. As written this use of a non-const pointer violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\ntypedef int32_t int32;\ntypedef long long osal_id_t;\nstruct OS_object_token\n{\n    int dummy;\n};\ntypedef struct OS_object_token\n{\n    int dummy;\n} OS_object_token_t;\nstatic const int OS_LOCK_MODE_EXCLUSIVE = 1;\nstatic const int LOCAL_OBJID_TYPE = 2;\nstatic const int OS_SUCCESS = 0;\nint32 OS_ObjectIdGetById(int lock_mode, int objtype, osal_id_t id, OS_object_token_t *token);\nint32 OS_BinSemDelete_Impl(OS_object_token_t *token);\nint32 OS_ObjectIdFinalizeDelete(int32 return_code, OS_object_token_t *token);\nstatic void OS_BinSemDelete_LogProbe(const char *stage, osal_id_t sem_id, int32 return_code, const void *token_ptr)\n{\n    FILE *fp = fopen(\"/tmp/logs/939.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Do not interfere with normal operation if logging fails */\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    (void)localtime_r(&t, &tm_buf);\n\n    fprintf(fp, \"%04d-%02d-%02d %02d:%02d:%02d | OS_BinSemDelete | stage=%s | sem_id=%lld | return_code=%lld | token_ptr=%p\\n\",\n            tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n            tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec,\n            stage,\n            (long long)(sem_id),\n            (long long)(return_code),\n            token_ptr);\n    fclose(fp);\n}\n\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry */\n    OS_BinSemDelete_LogProbe(\"ENTRY\", sem_id, -1, &token);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log after object id lookup */\n    OS_BinSemDelete_LogProbe(\"AFTER_ObjectIdGetById\", sem_id, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        /* Log after impl */\n        OS_BinSemDelete_LogProbe(\"AFTER_BinSemDelete_Impl\", sem_id, return_code, &token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log after finalize */\n        OS_BinSemDelete_LogProbe(\"AFTER_ObjectIdFinalizeDelete\", sem_id, return_code, &token);\n    }\n\n    /* Log exit with final return code */\n    OS_BinSemDelete_LogProbe(\"EXIT\", sem_id, return_code, &token);\n\n    return return_code;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C 2023 Rule 8.13 is about declaring pointers to point to const-qualified types when the pointed-to object is not modified. You must judge the rule against the actual declarations and uses in the code, not against an unrelated hypothetical EventHandler.\n\nIn the supplied OS_BinSemDelete code:\n- The logging helper OS_BinSemDelete_LogProbe already takes a const void *token_ptr, and the calls pass &token to it \u2014 this is fine (adding const is allowed).\n- The other functions called (OS_ObjectIdGetById, OS_BinSemDelete_Impl, OS_ObjectIdFinalizeDelete) are declared to take OS_object_token_t * \u2014 i.e. non-const pointers. That is appropriate if those routines need to modify the token (and the names/semantics strongly imply they do). Declaring them const would be incorrect if they mutate the object. The presence of non-const parameters in the callees therefore does not by itself violate Rule 8.13.\n\nThe agent\u2019s scenario invoking a global EventHandler with a void * parameter is not present in the provided code, and cannot be used to prove a violation here. Even if such an EventHandler exists elsewhere, whether its parameter should be const void * depends on whether the callback is intended to modify the pointed-to data; you cannot conclude a MISRA violation without inspecting that API\u2019s intended semantics and implementation.\n\nTherefore, there is no evidence in the given code that a pointer should be changed to point to a const-qualified type; the report is incorrect."
}