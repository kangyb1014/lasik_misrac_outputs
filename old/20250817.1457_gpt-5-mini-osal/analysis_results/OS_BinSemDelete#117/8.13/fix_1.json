{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_BinSemDelete_LogProbe(const char *stage, osal_id_t sem_id, int32 return_code, const void *token_ptr)\n{\n    FILE *fp = fopen(\"/tmp/logs/939.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Do not interfere with normal operation if logging fails */\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    (void)localtime_r(&t, &tm_buf);\n\n    fprintf(fp, \"%04d-%02d-%02d %02d:%02d:%02d | OS_BinSemDelete | stage=%s | sem_id=%lld | return_code=%lld | token_ptr=%p\\n\",\n            tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n            tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec,\n            stage,\n            (long long) (sem_id),\n            (long long) (return_code),\n            token_ptr);\n    fclose(fp);\n}\n\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry */\n    OS_BinSemDelete_LogProbe(\"ENTRY\", sem_id, -1, &token);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log after object id lookup */\n    OS_BinSemDelete_LogProbe(\"AFTER_ObjectIdGetById\", sem_id, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        /* Log after impl */\n        OS_BinSemDelete_LogProbe(\"AFTER_BinSemDelete_Impl\", sem_id, return_code, &token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log after finalize */\n        OS_BinSemDelete_LogProbe(\"AFTER_ObjectIdFinalizeDelete\", sem_id, return_code, &token);\n    }\n\n    /* Log exit with final return code */\n    OS_BinSemDelete_LogProbe(\"EXIT\", sem_id, return_code, &token);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpzlipo94d/src/src/os/shared/src/osapi-binsem.c: In function 'OS_BinSemDelete_LogProbe':\n/tmp/tmpzlipo94d/src/src/os/shared/src/osapi-binsem.c:143:15: error: storage size of 'tm_buf' isn't known\n  143 |     struct tm tm_buf;\n      |               ^~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-binsem.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-binsem.dir/__/__/os/shared/src/osapi-binsem.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3167: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-binsem.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_BinSemDelete as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Minimal type definitions so this file compiles standalone for testing. */\ntypedef int32_t int32;\ntypedef long long osal_id_t;\n\ntypedef struct OS_object_token\n{\n    int dummy;\n} OS_object_token_t;\n\n/* Minimal constants (original code referenced these); keep as integers rather than macros. */\nstatic const int OS_LOCK_MODE_EXCLUSIVE = 1;\nstatic const int LOCAL_OBJID_TYPE = 2;\nstatic const int OS_SUCCESS = 0;\n\n/* External function declarations (no mock implementations here). */\nint32 OS_ObjectIdGetById(int lock_mode, int objtype, osal_id_t id, OS_object_token_t *token);\nint32 OS_BinSemDelete_Impl(OS_object_token_t *token);\nint32 OS_ObjectIdFinalizeDelete(int32 return_code, OS_object_token_t *token);\n\nstatic void OS_BinSemDelete_LogProbe(const char *stage, osal_id_t sem_id, int32 return_code, const void *token_ptr)\n{\n    FILE *fp = fopen(\"/tmp/logs/939.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Do not interfere with normal operation if logging fails */\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    (void)localtime_r(&t, &tm_buf);\n\n    fprintf(fp, \"%04d-%02d-%02d %02d:%02d:%02d | OS_BinSemDelete | stage=%s | sem_id=%lld | return_code=%lld | token_ptr=%p\\n\",\n            tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n            tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec,\n            stage,\n            (long long)(sem_id),\n            (long long)(return_code),\n            token_ptr);\n    fclose(fp);\n}\n\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry */\n    OS_BinSemDelete_LogProbe(\"ENTRY\", sem_id, -1, &token);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log after object id lookup */\n    OS_BinSemDelete_LogProbe(\"AFTER_ObjectIdGetById\", sem_id, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        /* Log after impl */\n        OS_BinSemDelete_LogProbe(\"AFTER_BinSemDelete_Impl\", sem_id, return_code, &token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log after finalize */\n        OS_BinSemDelete_LogProbe(\"AFTER_ObjectIdFinalizeDelete\", sem_id, return_code, &token);\n    }\n\n    /* Log exit with final return code */\n    OS_BinSemDelete_LogProbe(\"EXIT\", sem_id, return_code, &token);\n\n    return return_code;\n}\n",
  "explanation": "The compile error was due to struct tm not being defined because <time.h> was not included. I added the necessary headers (<stdio.h>, <time.h>, <stdint.h>) and provided minimal type definitions and external function declarations so the file compiles standalone while preserving the original logic. I avoided defining any mock functions or macros and kept the function implementations unchanged aside from the added includes and type/prototype declarations."
}