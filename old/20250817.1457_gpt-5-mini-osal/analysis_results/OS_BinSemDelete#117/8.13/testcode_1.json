{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe global function-pointer OS_SharedGlobalVars.EventHandler is invoked with a data parameter of type void * (e.g. status = OS_SharedGlobalVars.EventHandler(event, object_id, data);). The EventHandler prototype therefore accepts a non-const pointer (void *). Unless the callback is intended to modify the pointed-to data, the parameter should be const-qualified (const void *) so the pointer points to a const-qualified type. As written this use of a non-const pointer violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/939.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemDelete:\n```c\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe helper: append a log entry to /tmp/logs/939.txt\n * This preserves the original behavior of OS_BinSemDelete while\n * capturing control flow and important state values for debugging.\n */\nstatic void OS_BinSemDelete_LogProbe(const char *stage, osal_id_t sem_id, int32 return_code, const void *token_ptr)\n{\n    FILE *fp = fopen(\"/tmp/logs/939.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Do not interfere with normal operation if logging fails */\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    (void)localtime_r(&t, &tm_buf);\n\n    fprintf(fp, \"%04d-%02d-%02d %02d:%02d:%02d | OS_BinSemDelete | stage=%s | sem_id=%lld | return_code=%lld | token_ptr=%p\\n\",\n            tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n            tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec,\n            stage,\n            (long long) (sem_id),\n            (long long) (return_code),\n            token_ptr);\n    fclose(fp);\n}\n\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry */\n    OS_BinSemDelete_LogProbe(\"ENTRY\", sem_id, -1, &token);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log after object id lookup */\n    OS_BinSemDelete_LogProbe(\"AFTER_ObjectIdGetById\", sem_id, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        /* Log after impl */\n        OS_BinSemDelete_LogProbe(\"AFTER_BinSemDelete_Impl\", sem_id, return_code, &token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log after finalize */\n        OS_BinSemDelete_LogProbe(\"AFTER_ObjectIdFinalizeDelete\", sem_id, return_code, &token);\n    }\n\n    /* Log exit with final return code */\n    OS_BinSemDelete_LogProbe(\"EXIT\", sem_id, return_code, &token);\n\n    return return_code;\n}\n"
}