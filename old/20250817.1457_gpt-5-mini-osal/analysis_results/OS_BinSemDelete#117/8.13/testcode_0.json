{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_NotifyEvent takes a non-const void *data parameter but does not modify the pointed-to data \u2014 it only forwards the pointer to the registered EventHandler. According to MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type when possible. Therefore the parameter should be declared as const void *data (and the EventHandler callback type updated accordingly). If the design intentionally allows the handler to mutate the data, then the non-const is justified; otherwise this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/939.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemDelete:\n```c\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemDelete code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a single-line log entry to /tmp/logs/939.txt\n * Keeps the original OS_BinSemDelete logic intact; only records\n * key control-flow points and returned codes to help reproduce\n * and gather evidence for external analysis. */\nstatic void OS_BinSemDelete_Log(const char *stage, unsigned long sem_id_val, long return_code_val, const void *token_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/939.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* timestamp would be useful but avoid extra dependencies; keep entry concise */\n        fprintf(f, \"%s: sem_id=%lu, return_code=%ld, token_ptr=%p\\n\", stage, sem_id_val, return_code_val, token_ptr);\n        fclose(f);\n    }\n}\n\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry point and the semaphore id. token address is stable even before initialization. */\n    OS_BinSemDelete_Log(\"Entry\", (unsigned long)sem_id, 0L, (const void *)&token);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Record result of lookup and the token address returned to caller */\n    OS_BinSemDelete_Log(\"After_GetById\", (unsigned long)sem_id, (long)return_code, (const void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Record before calling the platform-specific implementation */\n        OS_BinSemDelete_Log(\"Before_Impl\", (unsigned long)sem_id, (long)return_code, (const void *)&token);\n\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        /* Record after implementation completes */\n        OS_BinSemDelete_Log(\"After_Impl\", (unsigned long)sem_id, (long)return_code, (const void *)&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Record finalization result */\n        OS_BinSemDelete_Log(\"After_FinalizeDelete\", (unsigned long)sem_id, (long)return_code, (const void *)&token);\n    }\n\n    /* Log exit and final return code */\n    OS_BinSemDelete_Log(\"Exit\", (unsigned long)sem_id, (long)return_code, (const void *)&token);\n\n    return return_code;\n}\n"
}