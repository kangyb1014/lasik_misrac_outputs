{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_CleanUpObject, the switch's final \"default: break;\" label is executed for unmatched object types but performs no action; removing this default:break; would not change program behaviour, so this operation constitutes dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/938.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemDelete:\n```c\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe logging helper for OS_BinSemDelete.\n * Appends human-readable traces to /tmp/logs/938.txt to capture control flow\n * and key state (sem_id, return codes, token address) for post-mortem\n * analysis. The helper intentionally does not dereference the token to avoid\n * reading uninitialized memory; it only logs the address.\n */\nstatic void OS_BinSemDelete_Log(const char *stage, osal_id_t sem_id, int32 return_code, const OS_object_token_t *token)\n{\n    FILE *fp = fopen(\"/tmp/logs/938.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* sem_id is printed via uintptr_t for portability across implementations. */\n        fprintf(fp, \"OS_BinSemDelete [%s]: sem_id=%\" PRIuPTR \", return_code=%ld, token_addr=%p\\n\",\n                stage,\n                (uintptr_t)sem_id,\n                (long)return_code,\n                (const void *)token);\n        fclose(fp);\n    }\n}\n\nint32 OS_BinSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log function entry and initial state */\n    OS_BinSemDelete_Log(\"entry\", sem_id, 0, &token);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_BinSemDelete_Log(\"after_ObjectIdGetById\", sem_id, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemDelete_Impl(&token);\n\n        /* Log result of the implementation-specific delete */\n        OS_BinSemDelete_Log(\"after_BinSemDelete_Impl\", sem_id, return_code, &token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log finalization result */\n        OS_BinSemDelete_Log(\"after_ObjectIdFinalizeDelete\", sem_id, return_code, &token);\n    }\n\n    /* Log function exit and final return code */\n    OS_BinSemDelete_Log(\"exit\", sem_id, return_code, &token);\n\n    return return_code;\n}\n"
}