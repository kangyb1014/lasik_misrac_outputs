{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CondVarTimedWait:\n```c\nint32 OS_CondVarTimedWait(osal_id_t var_id, const OS_time_t *abs_wakeup_time)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(abs_wakeup_time);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarTimedWait_Impl(&token, abs_wakeup_time);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CondVarTimedWait:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\nint32 OS_CondVarTimedWait_Impl(const OS_object_token_t *token, const OS_time_t *abs_wakeup_time)\n{\n    struct timespec                    limit;\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    limit.tv_sec  = OS_TimeGetTotalSeconds(*abs_wakeup_time);\n    limit.tv_nsec = OS_TimeGetNanosecondsPart(*abs_wakeup_time);\n\n    pthread_cleanup_push(OS_Posix_CondVarReleaseMutex, &impl->mut);\n    status = pthread_cond_timedwait(&impl->cv, &impl->mut, &limit);\n    pthread_cleanup_pop(false);\n\n    if (status == ETIMEDOUT)\n    {\n        return OS_ERROR_TIMEOUT;\n    }\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n...\n#define OS_SUCCESS (0)\n...\n#define OS_INVALID_POINTER (-2)\n...\ntypedef uint32 osal_id_t\n...\ntypedef struct\n{\n    int64 ticks; /**< Ticks elapsed since reference point */\n} OS_time_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef int32_t   int32\n...\n#define OS_OBJECT_TYPE_OS_CONDVAR 0x0D\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragments in the supplied snippets are provably unreachable. Reasoning: \n\n- OS_CondVarTimedWait: The pointer check is via the OS_CHECK_POINTER macro (expands to BUGCHECK((ptr)!=NULL, OS_INVALID_POINTER)). This is a runtime guard that may abort/return on a NULL pointer; it does not make subsequent code unreachable in general. The call to OS_ObjectIdGetById may return either success or an error; both the if (return_code == OS_SUCCESS) branch and the subsequent return of return_code are reachable depending on runtime results. There is no code following an unconditional return or any compile-time constant condition that makes code unreachable.\n\n- OS_ObjectIdGetById: The early return if OS_ObjectIdTransactionInit fails is a normal control-flow path, not unreachable code. Subsequent statements (OS_ObjectIdToArrayIndex, token->obj_id assignment, OS_ObjectIdConvertToken, and the conditional OS_ObjectIdTransactionCancel) are all reachable depending on intermediate return_code values. No dead code is present.\n\n- OS_CondVarTimedWait_Impl: All branches after pthread_cond_timedwait (status == ETIMEDOUT, status != 0, and the final return OS_SUCCESS) are mutually exclusive runtime outcomes of pthread_cond_timedwait and are therefore reachable. The pthread_cleanup_push / pthread_cleanup_pop usage does not introduce unreachable code (it registers a cleanup handler to be called on cancellation; pthread_cleanup_pop(false) does not call it but that is a runtime choice, not compile-time unreachable code).\n\n- Macro and constant definitions (OS_SUCCESS, OS_INVALID_POINTER, OS_OBJECT_TYPE_OS_CONDVAR, typedefs) do not introduce unreachable code constructs.\n\nGiven the provided code, there are no fragments that are syntactically or semantically unreachable at compile-time (no constant-false conditionals, no code after unconditional returns that would always be skipped, no duplicated returns preventing access to later code). Therefore no suspicious fragments need to be investigated for MISRA C Rule 2.1 based on the supplied snippets."
}