{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SocketShutdown:\n```c\nint32 OS_SocketShutdown(osal_id_t sock_id, OS_SocketShutdownMode_t Mode)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Confirm that \"Mode\" is one of the 3 acceptable values */\n    BUGCHECK(Mode == OS_SocketShutdownMode_SHUT_READ || Mode == OS_SocketShutdownMode_SHUT_WRITE ||\n                 Mode == OS_SocketShutdownMode_SHUT_READWRITE,\n             OS_ERR_INVALID_ARGUMENT);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) == 0)\n        {\n            /* Stream socket must not be connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketShutdown_Impl(&token, Mode);\n\n            if (return_code == OS_SUCCESS)\n            {\n                if (Mode & OS_SocketShutdownMode_SHUT_READ)\n                {\n                    stream->stream_state &= ~OS_STREAM_STATE_READABLE;\n                }\n                if (Mode & OS_SocketShutdownMode_SHUT_WRITE)\n                {\n                    stream->stream_state &= ~OS_STREAM_STATE_WRITABLE;\n                }\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SocketShutdown:\n#define BUGCHECK(cond, errcode) if(!(cond)){BUGREPORT(\"\\n**BUG** %s():%d:check \\'%s\\' FAILED --> %s\\n\\n\",__func__,__LINE__,#cond,#errcode);returnerrcode;}\n...\n#define OS_ERR_INVALID_ARGUMENT (-42)\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\n#define OS_SUCCESS (0)\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_stream_internal_record_t OS_stream_table[OS_MAX_NUM_OPEN_FILES]\n...\ntypedef struct\n{\n    char   stream_name[OS_MAX_PATH_LEN];\n    uint8  socket_domain;\n    uint8  socket_type;\n    uint16 stream_state;\n} OS_stream_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_ERR_INCORRECT_OBJ_TYPE (-36)\n...\n#define OS_ERR_INCORRECT_OBJ_STATE (-35)\n...\nint32 OS_SocketShutdown_Impl(const OS_object_token_t *token, OS_SocketShutdownMode_t Mode)\n{\n    OS_impl_file_internal_record_t *conn_impl;\n    int32                           return_code;\n    int                             how;\n\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Note that when called via the shared layer,\n     * the \"Mode\" arg has already been checked/validated. */\n    if (Mode == OS_SocketShutdownMode_SHUT_READ)\n    {\n        how = SHUT_RD;\n    }\n    else if (Mode == OS_SocketShutdownMode_SHUT_WRITE)\n    {\n        how = SHUT_WR;\n    }\n    else\n    {\n        how = SHUT_RDWR;\n    }\n\n    if (shutdown(conn_impl->fd, how) == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (Mode == OS_SocketShutdownMode_SHUT_READ)\\n    {\\n        how = SHUT_RD;\\n    }\\n    else if (Mode == OS_SocketShutdownMode_SHUT_WRITE)\\n    {\\n        how = SHUT_WR;\\n    }\\n    else\\n    {\\n        how = SHUT_RDWR;\\n    }",
    "BUGCHECK(Mode == OS_SocketShutdownMode_SHUT_READ || Mode == OS_SocketShutdownMode_SHUT_WRITE ||\\n                 Mode == OS_SocketShutdownMode_SHUT_READWRITE,\\n             OS_ERR_INVALID_ARGUMENT);",
    "if (stream->socket_domain == OS_SocketDomain_INVALID)\\n        {\\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\\n        }",
    "#define BUGCHECK(cond, errcode) if(!(cond)){BUGREPORT(\"\\n**BUG** %s():%d:check \\'%s\\' FAILED --> %s\\n\\n\",__func__,__LINE__,#cond,#errcode);returnerrcode;}",
    "if (return_code != OS_SUCCESS)\\n    {\\n        OS_ObjectIdTransactionCancel(token);\\n    }",
    "else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) == 0)\\n        {\\n            /* Stream socket must not be connected */\\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\\n        }",
    "return_code = OS_SocketShutdown_Impl(&token, Mode);\\n\\n            if (return_code == OS_SUCCESS)\\n            {\\n                if (Mode & OS_SocketShutdownMode_SHUT_READ)\\n                {\\n                    stream->stream_state &= ~OS_STREAM_STATE_READABLE;\\n                }\\n                if (Mode & OS_SocketShutdownMode_SHUT_WRITE)\\n                {\\n                    stream->stream_state &= ~OS_STREAM_STATE_WRITABLE;\\n                }\\n            }"
  ],
  "explanation": "The fragments above are flagged for investigation because they contain conditional checks, fallbacks, or cleanup code that may be redundant or never affect observable behavior (i.e. candidates for dead code). They should be examined in context (call sites, invariants, enumeration ranges, and locking/transaction semantics) to determine whether the operations can ever be executed and, if executed, whether removing them would change program behavior.\n\nWhy other code fragments are not reported: variable declarations, function signatures, simple assignments and return statements, macro usages such as OS_OBJECT_TABLE_GET, and the final return of return_code are standard, reachable, and have obvious side effects or rely on external behavior (e.g. shutdown() system call). The OS_ObjectIdGetById control flow (initialization, index conversion, token conversion) and the final OS_ObjectIdRelease are part of the locking/transaction protocol and are necessary for correct resource management; they are therefore not prima facie candidates for dead code without a deeper architectural analysis. Similarly, mapping shutdown result to return_code and the use of error code macros (OS_SUCCESS, OS_ERROR, OS_ERR_*) are functional and clearly affect behavior, so they are not included as suspicious."
}