{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_SocketShutdown:\n```c\nint32 OS_SocketShutdown(osal_id_t sock_id, OS_SocketShutdownMode_t Mode)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Confirm that \"Mode\" is one of the 3 acceptable values */\n    BUGCHECK(Mode == OS_SocketShutdownMode_SHUT_READ || Mode == OS_SocketShutdownMode_SHUT_WRITE ||\n                 Mode == OS_SocketShutdownMode_SHUT_READWRITE,\n             OS_ERR_INVALID_ARGUMENT);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) == 0)\n        {\n            /* Stream socket must not be connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketShutdown_Impl(&token, Mode);\n\n            if (return_code == OS_SUCCESS)\n            {\n                if (Mode & OS_SocketShutdownMode_SHUT_READ)\n                {\n                    stream->stream_state &= ~OS_STREAM_STATE_READABLE;\n                }\n                if (Mode & OS_SocketShutdownMode_SHUT_WRITE)\n                {\n                    stream->stream_state &= ~OS_STREAM_STATE_WRITABLE;\n                }\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_SocketShutdown:\ntypedef struct\n{\n    char   stream_name[OS_MAX_PATH_LEN];\n    uint8  socket_domain;\n    uint8  socket_type;\n    uint16 stream_state;\n} OS_stream_internal_record_t\n...\nextern OS_stream_internal_record_t OS_stream_table[OS_MAX_NUM_OPEN_FILES]\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\ntypedef struct OS_object_token OS_object_token_t\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (Mode & OS_SocketShutdownMode_SHUT_WRITE)\n{\n    stream->stream_state &= ~OS_STREAM_STATE_WRITABLE;\n}\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The pointer 'stream' is used to modify the object (stream->stream_state is updated with &= ~OS_STREAM_STATE_WRITABLE). Because the code intentionally writes through the pointer, the pointer must point to a non-const OS_stream_internal_record_t. Therefore Rule 8.13 (pointer should point to const-qualified type whenever possible) is not violated here. (If the pointer were only used for read access, it should be const.)"
}