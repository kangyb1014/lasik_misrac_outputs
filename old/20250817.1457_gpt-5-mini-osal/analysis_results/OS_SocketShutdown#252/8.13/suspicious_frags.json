{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SocketShutdown:\n```c\nint32 OS_SocketShutdown(osal_id_t sock_id, OS_SocketShutdownMode_t Mode)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Confirm that \"Mode\" is one of the 3 acceptable values */\n    BUGCHECK(Mode == OS_SocketShutdownMode_SHUT_READ || Mode == OS_SocketShutdownMode_SHUT_WRITE ||\n                 Mode == OS_SocketShutdownMode_SHUT_READWRITE,\n             OS_ERR_INVALID_ARGUMENT);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) == 0)\n        {\n            /* Stream socket must not be connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketShutdown_Impl(&token, Mode);\n\n            if (return_code == OS_SUCCESS)\n            {\n                if (Mode & OS_SocketShutdownMode_SHUT_READ)\n                {\n                    stream->stream_state &= ~OS_STREAM_STATE_READABLE;\n                }\n                if (Mode & OS_SocketShutdownMode_SHUT_WRITE)\n                {\n                    stream->stream_state &= ~OS_STREAM_STATE_WRITABLE;\n                }\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SocketShutdown:\ntypedef struct\n{\n    char   stream_name[OS_MAX_PATH_LEN];\n    uint8  socket_domain;\n    uint8  socket_type;\n    uint16 stream_state;\n} OS_stream_internal_record_t\n...\nextern OS_stream_internal_record_t OS_stream_table[OS_MAX_NUM_OPEN_FILES]\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\ntypedef struct OS_object_token OS_object_token_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (Mode & OS_SocketShutdownMode_SHUT_READ)\n{\n    stream->stream_state &= ~OS_STREAM_STATE_READABLE;\n}",
    "OS_ObjectIdRelease(&token);",
    "if (stream->socket_domain == OS_SocketDomain_INVALID)",
    "else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) == 0)",
    "if (Mode & OS_SocketShutdownMode_SHUT_WRITE)\n{\n    stream->stream_state &= ~OS_STREAM_STATE_WRITABLE;\n}",
    "stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);",
    "return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);",
    "OS_stream_internal_record_t *stream;",
    "OS_object_token_t            token;",
    "return_code = OS_SocketShutdown_Impl(&token, Mode);"
  ],
  "explanation": "Rule 8.13 concerns pointer types that could/should point to const-qualified data. The fragments selected are all places in this function where pointers or addresses are used to access or modify OS_stream_internal_record_t or where an object token address is passed to other routines; these need investigation to determine whether the pointers could/should be to const-qualified types. Other parts of the function do not need investigation for this rule: scalar locals (return_code, Mode, sock_id), the BUGCHECK input validation, constant expressions and bitmasks, and the control-flow constructs themselves are unrelated to pointer const-qualification. The macro definition and the global table declaration in the additional code are utilities; the table itself is mutable by design (entries are updated), and the token is passed to functions that initialize/release it (so those particular uses are expected to be non-const). Therefore only the pointer-related lines shown above require examination for compliance with MISRA C:2023 Rule 8.13."
}