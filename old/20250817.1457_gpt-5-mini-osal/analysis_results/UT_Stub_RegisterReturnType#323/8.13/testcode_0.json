{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if StubPtr->Data.Buff.ContentTypeStr is declared without const (e.g. as 'char *ContentTypeStr'). Assigning the parameter 'const char *TypeName' to a non-const pointer discards the const qualifier and therefore violates MISRA C 2023 Rule 8.13. If ContentTypeStr is already declared as 'const char *', there is no violation. Recommend declaring the member as 'const char *ContentTypeStr' to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_RegisterReturnType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2587.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_RegisterReturnType as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_RegisterReturnType:\n```c\nvoid UT_Stub_RegisterReturnType(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    if (ReturnSize > 0)\n    {\n        /* Check for existing buffer and re-use if same size (should be!) */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n        if (StubPtr != NULL && StubPtr->Data.Buff.TotalSize != ReturnSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n            StubPtr = NULL;\n        }\n\n        if (StubPtr == NULL)\n        {\n            StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n            if (StubPtr == NULL)\n            {\n                UtAssert_Abort(\"Cannot set return buffer - UT_MAX_FUNC_STUBS too low?\");\n            }\n            else\n            {\n                StubPtr->FuncKey           = FuncKey;\n                StubPtr->EntryType         = UT_ENTRYTYPE_RETURN_BUFFER;\n                StubPtr->Data.Buff.BasePtr = malloc(ReturnSize);\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    memset(StubPtr->Data.Buff.BasePtr, 0, ReturnSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n\n                StubPtr->Data.Buff.TotalSize = ReturnSize;\n            }\n        }\n\n        if (StubPtr != NULL)\n        {\n            StubPtr->Data.Buff.Position       = 0;\n            StubPtr->Data.Buff.ContentTypeStr = TypeName;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_RegisterReturnType code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe logging helper - appends control-flow/state information to the log file */\nstatic void UT_ProbeLog(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2587.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fflush(fp);\n    fclose(fp);\n}\n\nvoid UT_Stub_RegisterReturnType(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    UT_ProbeLog(\"Enter UT_Stub_RegisterReturnType: FuncKey=%lu, ReturnSize=%zu, TypeName=%p, TypeName_str=%s\\n\",\n                (unsigned long)FuncKey,\n                ReturnSize,\n                (const void *)TypeName,\n                (TypeName != NULL) ? TypeName : \"(null)\");\n\n    if (ReturnSize > 0)\n    {\n        /* Check for existing buffer and re-use if same size (should be!) */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n        UT_ProbeLog(\"UT_GetStubEntry(RETURN_BUFFER) returned %p\\n\", (const void *)StubPtr);\n\n        if (StubPtr != NULL && StubPtr->Data.Buff.TotalSize != ReturnSize)\n        {\n            UT_ProbeLog(\"Existing buffer size mismatch: existing=%zu, requested=%zu - clearing stub %p\\n\",\n                        StubPtr->Data.Buff.TotalSize, ReturnSize, (const void *)StubPtr);\n            UT_ClearStubEntry(StubPtr);\n            StubPtr = NULL;\n            UT_ProbeLog(\"Stub cleared, continuing to allocate new stub.\\n\");\n        }\n\n        if (StubPtr == NULL)\n        {\n            StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n            UT_ProbeLog(\"UT_GetStubEntry(UNUSED) returned %p\\n\", (const void *)StubPtr);\n            if (StubPtr == NULL)\n            {\n                UT_ProbeLog(\"Abort condition reached: no unused stub available for FuncKey=%lu\\n\", (unsigned long)FuncKey);\n                UtAssert_Abort(\"Cannot set return buffer - UT_MAX_FUNC_STUBS too low?\");\n            }\n            else\n            {\n                UT_ProbeLog(\"Initializing new stub at %p for FuncKey=%lu\\n\", (const void *)StubPtr, (unsigned long)FuncKey);\n\n                StubPtr->FuncKey           = FuncKey;\n                StubPtr->EntryType         = UT_ENTRYTYPE_RETURN_BUFFER;\n                UT_ProbeLog(\"Attempting malloc of size %zu for stub %p\\n\", ReturnSize, (const void *)StubPtr);\n                StubPtr->Data.Buff.BasePtr = malloc(ReturnSize);\n                UT_ProbeLog(\"malloc returned %p for stub %p\\n\", (const void *)StubPtr->Data.Buff.BasePtr, (const void *)StubPtr);\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    UT_ProbeLog(\"malloc failed for size %zu\\n\", ReturnSize);\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    memset(StubPtr->Data.Buff.BasePtr, 0, ReturnSize);\n                    UT_ProbeLog(\"memset done for buffer %p size %zu\\n\", (const void *)StubPtr->Data.Buff.BasePtr, ReturnSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                    UT_ProbeLog(\"ModeFlags updated to 0x%08x for stub %p\\n\", StubPtr->ModeFlags, (const void *)StubPtr);\n                }\n\n                StubPtr->Data.Buff.TotalSize = ReturnSize;\n                UT_ProbeLog(\"Set TotalSize=%zu for stub %p\\n\", StubPtr->Data.Buff.TotalSize, (const void *)StubPtr);\n            }\n        }\n\n        if (StubPtr != NULL)\n        {\n            StubPtr->Data.Buff.Position = 0;\n            UT_ProbeLog(\"Set Position=0 for stub %p\\n\", (const void *)StubPtr);\n\n            /* Log the assignment operation explicitly so that the pointer value and\n             * the source TypeName are captured in the log. This helps reproduce\n             * cases where a const-qualified source is assigned to a potentially\n             * non-const member in the struct at runtime. */\n            UT_ProbeLog(\"Assigning ContentTypeStr member at address %p of stub %p <- TypeName %p (%s)\\n\",\n                        (const void *)&(StubPtr->Data.Buff.ContentTypeStr), (const void *)StubPtr,\n                        (const void *)TypeName, (TypeName != NULL) ? TypeName : \"(null)\");\n\n            StubPtr->Data.Buff.ContentTypeStr = TypeName;\n\n            UT_ProbeLog(\"After assignment: ContentTypeStr=%p, ContentTypeStr_str=%s for stub %p\\n\",\n                        (const void *)StubPtr->Data.Buff.ContentTypeStr,\n                        (StubPtr->Data.Buff.ContentTypeStr != NULL) ? StubPtr->Data.Buff.ContentTypeStr : \"(null)\",\n                        (const void *)StubPtr);\n        }\n    }\n\n    UT_ProbeLog(\"Exit UT_Stub_RegisterReturnType for FuncKey=%lu\\n\", (unsigned long)FuncKey);\n}\n"
}