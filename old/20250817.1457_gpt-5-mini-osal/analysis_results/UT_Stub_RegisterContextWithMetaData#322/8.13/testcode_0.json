{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment stores a const void * (ParamPtr) into ArgPtr[] which is likely a non-const pointer (e.g. void *ArgPtr[...]). This discards the const qualifier on the pointee. Under MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so ArgPtr elements should be declared as const void * to preserve the const qualification.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_RegisterContextWithMetaData code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2579.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_RegisterContextWithMetaData as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_RegisterContextWithMetaData:\n```c\nvoid UT_Stub_RegisterContextWithMetaData(UT_EntryKey_t FuncKey, const char *Name, UT_StubContext_Arg_Type_t ParamType,\n                                         const void *ParamPtr, size_t ParamSize)\n{\n    UT_StubTableEntry_t * StubPtr;\n    UT_StubArgMetaData_t *MetaPtr;\n\n    /*\n     * First find an existing context entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_CALLBACK_CONTEXT);\n    if (StubPtr == NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot set context - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey   = FuncKey;\n        StubPtr->EntryType = UT_ENTRYTYPE_CALLBACK_CONTEXT;\n        if (StubPtr->Data.Context.ArgCount < UT_STUBCONTEXT_MAXSIZE)\n        {\n            StubPtr->Data.Context.ArgPtr[StubPtr->Data.Context.ArgCount] = ParamPtr;\n\n            MetaPtr       = &StubPtr->Data.Context.Meta[StubPtr->Data.Context.ArgCount];\n            MetaPtr->Size = ParamSize;\n            MetaPtr->Type = ParamType;\n\n            /*\n             * If name was specified, then trim any leading address operator (&)\n             * and/or whitespace, keeping only the actual name part.\n             */\n            if (Name != NULL)\n            {\n                /*\n                 * If the _address_ of the stack variable was actually passed in,\n                 * the mark this as indirect (i.e. hook must dereference ArgPtr\n                 * to get actual parameter value).  Otherwise assume it as direct.\n                 */\n                MetaPtr->Name = Name;\n                while (*MetaPtr->Name != 0)\n                {\n                    if (*MetaPtr->Name == '&')\n                    {\n                        /* this means its a pointer to the value, not the value itself */\n                        if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                        {\n                            MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_INDIRECT;\n                        }\n                    }\n                    else if (*MetaPtr->Name != ' ')\n                    {\n                        /* stop at non-whitespace */\n                        break;\n                    }\n                    ++MetaPtr->Name;\n                }\n\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                {\n                    MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_DIRECT;\n                }\n            }\n            ++StubPtr->Data.Context.ArgCount;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_RegisterContextWithMetaData code.\n",
  "test_code": "void UT_Stub_RegisterContextWithMetaData(UT_EntryKey_t FuncKey, const char *Name, UT_StubContext_Arg_Type_t ParamType,\n                                         const void *ParamPtr, size_t ParamSize)\n{\n    UT_StubTableEntry_t * StubPtr;\n    UT_StubArgMetaData_t *MetaPtr;\n\n    /* Open log file for probe output - append so multiple calls accumulate */\n    {\n        FILE *log = fopen(\"/tmp/logs/2579.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Log function entry and key parameters */\n            fprintf(log, \"UT_Stub_RegisterContextWithMetaData entry: FuncKey=%lu, Name=%p, ParamType=%d, ParamPtr=%p, ParamSize=%zu\\n\",\n                    (unsigned long)FuncKey, (const void *)Name, (int)ParamType, (const void *)ParamPtr, ParamSize);\n            fclose(log);\n        }\n    }\n\n    /*\n     * First find an existing context entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_CALLBACK_CONTEXT);\n    if (StubPtr == NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        /* Log the abort condition for repro */\n        {\n            FILE *log = fopen(\"/tmp/logs/2579.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"UT_Stub_RegisterContextWithMetaData: No StubPtr found for FuncKey=%lu - aborting\\n\", (unsigned long)FuncKey);\n                fclose(log);\n            }\n        }\n\n        UtAssert_Abort(\"Cannot set context - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey   = FuncKey;\n        StubPtr->EntryType = UT_ENTRYTYPE_CALLBACK_CONTEXT;\n        if (StubPtr->Data.Context.ArgCount < UT_STUBCONTEXT_MAXSIZE)\n        {\n            /* Probe: log the target index and pointer to be stored (captures potential const discard) */\n            {\n                unsigned int idx = StubPtr->Data.Context.ArgCount;\n                FILE *log = fopen(\"/tmp/logs/2579.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"About to assign ParamPtr=%p to StubPtr->Data.Context.ArgPtr[%u] (ArgCount=%u)\\n\",\n                            (const void *)ParamPtr, idx, idx);\n                    fclose(log);\n                }\n            }\n\n            /* The assignment that is the subject of the reported violation */\n            StubPtr->Data.Context.ArgPtr[StubPtr->Data.Context.ArgCount] = ParamPtr;\n\n            /* Log after assignment to capture that the pointer value was stored into the (likely non-const) array element */\n            {\n                unsigned int idx = StubPtr->Data.Context.ArgCount;\n                FILE *log = fopen(\"/tmp/logs/2579.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"Performed assignment: StubPtr->Data.Context.ArgPtr[%u] == %p\\n\",\n                            idx, (const void *)StubPtr->Data.Context.ArgPtr[idx]);\n                    fclose(log);\n                }\n            }\n\n            MetaPtr       = &StubPtr->Data.Context.Meta[StubPtr->Data.Context.ArgCount];\n            MetaPtr->Size = ParamSize;\n            MetaPtr->Type = ParamType;\n\n            /* Log metadata after setting size and type */\n            {\n                unsigned int idx = StubPtr->Data.Context.ArgCount;\n                FILE *log = fopen(\"/tmp/logs/2579.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"Meta for index %u: Size=%zu, Type=%d, Name(ptr)=%p\\n\",\n                            idx, MetaPtr->Size, (int)MetaPtr->Type, (const void *)MetaPtr->Name);\n                    fclose(log);\n                }\n            }\n\n            /*\n             * If name was specified, then trim any leading address operator (&)\n             * and/or whitespace, keeping only the actual name part.\n             */\n            if (Name != NULL)\n            {\n                /*\n                 * If the _address_ of the stack variable was actually passed in,\n                 * the mark this as indirect (i.e. hook must dereference ArgPtr\n                 * to get actual parameter value).  Otherwise assume it as direct.\n                 */\n                MetaPtr->Name = Name;\n\n                /* Log original name string */\n                {\n                    FILE *log = fopen(\"/tmp/logs/2579.txt\", \"a\");\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"Name processing start: original Name=\");\n                        /* print as string but handle non-null safely */\n                        if (Name[0] != '\\0')\n                        {\n                            fprintf(log, \"%s\", Name);\n                        }\n                        else\n                        {\n                            fprintf(log, \"(empty)\");\n                        }\n                        fprintf(log, \"\\n\");\n                        fclose(log);\n                    }\n                }\n\n                while (*MetaPtr->Name != 0)\n                {\n                    if (*MetaPtr->Name == '&')\n                    {\n                        /* this means its a pointer to the value, not the value itself */\n                        if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                        {\n                            MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_INDIRECT;\n                        }\n\n                        /* Log detection of '&' */\n                        {\n                            FILE *log = fopen(\"/tmp/logs/2579.txt\", \"a\");\n                            if (log != NULL)\n                            {\n                                fprintf(log, \"Detected leading '&' in Name; marking Type=INDIRECT\\n\");\n                                fclose(log);\n                            }\n                        }\n                    }\n                    else if (*MetaPtr->Name != ' ')\n                    {\n                        /* stop at non-whitespace */\n                        break;\n                    }\n                    ++MetaPtr->Name;\n                }\n\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                {\n                    MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_DIRECT;\n\n                    /* Log defaulting to DIRECT */\n                    {\n                        FILE *log = fopen(\"/tmp/logs/2579.txt\", \"a\");\n                        if (log != NULL)\n                        {\n                            fprintf(log, \"No '&' found and not specified: setting Type=DIRECT\\n\");\n                            fclose(log);\n                        }\n                    }\n                }\n\n                /* Log the final Name pointer and the first few characters after trimming */\n                {\n                    FILE *log = fopen(\"/tmp/logs/2579.txt\", \"a\");\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"Final MetaPtr->Name ptr=%p\", (const void *)MetaPtr->Name);\n                        if (*MetaPtr->Name != '\\0')\n                        {\n                            fprintf(log, \", starts with: '%c'\\n\", *MetaPtr->Name);\n                        }\n                        else\n                        {\n                            fprintf(log, \", (empty)\\n\");\n                        }\n                        fclose(log);\n                    }\n                }\n            }\n\n            ++StubPtr->Data.Context.ArgCount;\n\n            /* Log final ArgCount */\n            {\n                FILE *log = fopen(\"/tmp/logs/2579.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"ArgCount incremented to %u\\n\", StubPtr->Data.Context.ArgCount);\n                    fclose(log);\n                }\n            }\n        }\n    }\n}\n"
}