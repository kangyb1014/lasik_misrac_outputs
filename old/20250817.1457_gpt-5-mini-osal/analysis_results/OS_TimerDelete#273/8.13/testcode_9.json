{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the implementation of OS_TimeBaseLock_Impl is declared to take a pointer to non-const (e.g. OS_TimeBaseLock_Impl(OS_object_token_t *token)) but the function only reads the token (does not modify *token), then Rule 8.13 is violated because the pointer parameter should be to a const-qualified type (const OS_object_token_t *). The call site itself (&timecb->timebase_token) is fine; the violation would be in the function prototype/definition. If, however, OS_TimeBaseLock_Impl is declared to accept a pointer-to-const (or if it actually modifies the token), then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2187.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerDelete:\n```c\nint32 OS_TimerDelete(osal_id_t timer_id)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    osal_id_t                      dedicated_timebase_id;\n    OS_object_token_t              timecb_token;\n    OS_object_token_t              timebase_token;\n    OS_object_token_t              listcb_token;\n    OS_timebase_internal_record_t *timebase;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timecb_internal_record_t *  list_timecb;\n\n    dedicated_timebase_id = OS_OBJECT_ID_UNDEFINED;\n    memset(&timebase_token, 0, sizeof(timebase_token));\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &timecb_token);\n    if (return_code == OS_SUCCESS)\n    {\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, timecb_token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        OS_ObjectIdTransferToken(&timecb->timebase_token, &timebase_token);\n\n        OS_TimeBaseLock_Impl(&timecb->timebase_token);\n\n        /*\n         * If the timer uses a dedicated time base, then also delete that.\n         */\n        if ((timecb->flags & TIMECB_FLAG_DEDICATED_TIMEBASE) != 0)\n        {\n            dedicated_timebase_id = OS_ObjectIdFromToken(&timecb->timebase_token);\n        }\n\n        /*\n         * Now we need to remove it from the time base callback ring\n         */\n        if (OS_ObjectIdEqual(timebase->first_cb, OS_ObjectIdFromToken(&timecb_token)))\n        {\n            if (OS_ObjectIdEqual(OS_ObjectIdFromToken(&timecb_token), timecb->next_cb))\n            {\n                timebase->first_cb = OS_OBJECT_ID_UNDEFINED;\n            }\n            else\n            {\n                timebase->first_cb = timecb->next_cb;\n            }\n        }\n\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->prev_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->next_cb = timecb->next_cb;\n        }\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->next_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->prev_cb = timecb->prev_cb;\n        }\n\n        timecb->next_cb = OS_ObjectIdFromToken(&timecb_token);\n        timecb->prev_cb = OS_ObjectIdFromToken(&timecb_token);\n\n        OS_TimeBaseUnlock_Impl(&timecb->timebase_token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &timecb_token);\n    }\n\n    /*\n     * Remove the reference count against the timebase\n     */\n    OS_ObjectIdRelease(&timebase_token);\n\n    /*\n     * If the timer uses a dedicated time base, then also delete it.\n     */\n    if (return_code == OS_SUCCESS && OS_ObjectIdDefined(dedicated_timebase_id))\n    {\n        OS_TimeBaseDelete(dedicated_timebase_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logging helpers */\nstatic void probe_log_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2187.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fflush(f);\n    fclose(f);\n}\n\nstatic void probe_log_token(const char *label, const OS_object_token_t *token)\n{\n    /* Use the provided API to obtain the ID for human-readable logging. */\n    osal_id_t id = OS_ObjectIdFromToken((OS_object_token_t *)token);\n    probe_log_printf(\"%s: token_addr=%p id=%llu\\n\", label, (const void *)token, (unsigned long long)id);\n}\n\nint32 OS_TimerDelete(osal_id_t timer_id)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    osal_id_t                      dedicated_timebase_id;\n    OS_object_token_t              timecb_token;\n    OS_object_token_t              timebase_token;\n    OS_object_token_t              listcb_token;\n    OS_timebase_internal_record_t *timebase;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timecb_internal_record_t *  list_timecb;\n\n    dedicated_timebase_id = OS_OBJECT_ID_UNDEFINED;\n    memset(&timebase_token, 0, sizeof(timebase_token));\n\n    /*\n     * Log entry and context check\n     */\n    probe_log_printf(\"OS_TimerDelete: entry timer_id=%llu\\n\", (unsigned long long)timer_id);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    probe_log_printf(\"OS_TimerDelete: current objtype=%d\\n\", (int)objtype);\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        probe_log_printf(\"OS_TimerDelete: disallowed context (timer callback) - returning OS_ERR_INCORRECT_OBJ_STATE\\n\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &timecb_token);\n    probe_log_printf(\"OS_TimerDelete: OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, timecb_token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        /* Log tokens before transfer */\n        probe_log_token(\"timecb_token (before transfer)\", &timecb_token);\n        probe_log_token(\"timecb->timebase_token (before transfer)\", &timecb->timebase_token);\n        probe_log_token(\"timebase_token (before transfer)\", &timebase_token);\n\n        OS_ObjectIdTransferToken(&timecb->timebase_token, &timebase_token);\n\n        /* Log tokens after transfer */\n        probe_log_token(\"timecb->timebase_token (after transfer)\", &timecb->timebase_token);\n        probe_log_token(\"timebase_token (after transfer)\", &timebase_token);\n\n        /*\n         * Snapshot the timebase token identity prior to calling the implementation lock.\n         * This helps detect whether OS_TimeBaseLock_Impl modifies the token parameter.\n         */\n        osal_id_t timebase_id_before = OS_ObjectIdFromToken(&timecb->timebase_token);\n        probe_log_printf(\"OS_TimerDelete: calling OS_TimeBaseLock_Impl; timebase_id_before=%llu\\n\", (unsigned long long)timebase_id_before);\n\n        /* Call the implementation; this is the call under investigation */\n        OS_TimeBaseLock_Impl(&timecb->timebase_token);\n\n        /* Snapshot after call to detect modification */\n        osal_id_t timebase_id_after = OS_ObjectIdFromToken(&timecb->timebase_token);\n        probe_log_printf(\"OS_TimerDelete: returned from OS_TimeBaseLock_Impl; timebase_id_after=%llu\\n\", (unsigned long long)timebase_id_after);\n\n        if (timebase_id_before == timebase_id_after)\n        {\n            probe_log_printf(\"OS_TimerDelete: OBSERVATION: timebase token NOT modified by OS_TimeBaseLock_Impl\\n\");\n        }\n        else\n        {\n            probe_log_printf(\"OS_TimerDelete: OBSERVATION: timebase token WAS modified by OS_TimeBaseLock_Impl\\n\");\n        }\n\n        /*\n         * If the timer uses a dedicated time base, then also delete that.\n         */\n        if ((timecb->flags & TIMECB_FLAG_DEDICATED_TIMEBASE) != 0)\n        {\n            dedicated_timebase_id = OS_ObjectIdFromToken(&timecb->timebase_token);\n            probe_log_printf(\"OS_TimerDelete: dedicated_timebase_id=%llu\\n\", (unsigned long long)dedicated_timebase_id);\n        }\n\n        /*\n         * Now we need to remove it from the time base callback ring\n         */\n        if (OS_ObjectIdEqual(timebase->first_cb, OS_ObjectIdFromToken(&timecb_token)))\n        {\n            if (OS_ObjectIdEqual(OS_ObjectIdFromToken(&timecb_token), timecb->next_cb))\n            {\n                timebase->first_cb = OS_OBJECT_ID_UNDEFINED;\n            }\n            else\n            {\n                timebase->first_cb = timecb->next_cb;\n            }\n        }\n\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->prev_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->next_cb = timecb->next_cb;\n        }\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->next_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->prev_cb = timecb->prev_cb;\n        }\n\n        timecb->next_cb = OS_ObjectIdFromToken(&timecb_token);\n        timecb->prev_cb = OS_ObjectIdFromToken(&timecb_token);\n\n        /* Call unlock and log around it as well */\n        probe_log_printf(\"OS_TimerDelete: calling OS_TimeBaseUnlock_Impl; timebase_id=%llu\\n\", (unsigned long long)OS_ObjectIdFromToken(&timecb->timebase_token));\n        OS_TimeBaseUnlock_Impl(&timecb->timebase_token);\n        probe_log_printf(\"OS_TimerDelete: returned from OS_TimeBaseUnlock_Impl\\n\");\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &timecb_token);\n        probe_log_printf(\"OS_TimerDelete: OS_ObjectIdFinalizeDelete returned %d\\n\", (int)return_code);\n    }\n\n    /*\n     * Remove the reference count against the timebase\n     */\n    probe_log_printf(\"OS_TimerDelete: releasing reference to timebase_token\\n\");\n    OS_ObjectIdRelease(&timebase_token);\n\n    /*\n     * If the timer uses a dedicated time base, then also delete it.\n     */\n    if (return_code == OS_SUCCESS && OS_ObjectIdDefined(dedicated_timebase_id))\n    {\n        probe_log_printf(\"OS_TimerDelete: deleting dedicated timebase id=%llu\\n\", (unsigned long long)dedicated_timebase_id);\n        OS_TimeBaseDelete(dedicated_timebase_id);\n    }\n\n    probe_log_printf(\"OS_TimerDelete: exit return_code=%d\\n\", (int)return_code);\n    return return_code;\n}\n"
}