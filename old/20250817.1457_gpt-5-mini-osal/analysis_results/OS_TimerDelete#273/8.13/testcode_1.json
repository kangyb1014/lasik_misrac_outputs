{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes &timecb->timebase_token to OS_TimeBaseUnlock_Impl. If the implementation/prototype of OS_TimeBaseUnlock_Impl is something like\n\n    void OS_TimeBaseUnlock_Impl(OS_object_token_t *token);\n\nand the function does not modify the pointed-to token, then the parameter should be const-qualified (const OS_object_token_t *token). In that case Rule 8.13 is violated because a pointer parameter that could be to a const-qualified type is not declared const. If, however, OS_TimeBaseUnlock_Impl needs to modify the token, then the non-const parameter is appropriate and there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2187.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerDelete:\n```c\nint32 OS_TimerDelete(osal_id_t timer_id)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    osal_id_t                      dedicated_timebase_id;\n    OS_object_token_t              timecb_token;\n    OS_object_token_t              timebase_token;\n    OS_object_token_t              listcb_token;\n    OS_timebase_internal_record_t *timebase;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timecb_internal_record_t *  list_timecb;\n\n    dedicated_timebase_id = OS_OBJECT_ID_UNDEFINED;\n    memset(&timebase_token, 0, sizeof(timebase_token));\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &timecb_token);\n    if (return_code == OS_SUCCESS)\n    {\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, timecb_token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        OS_ObjectIdTransferToken(&timecb->timebase_token, &timebase_token);\n\n        OS_TimeBaseLock_Impl(&timecb->timebase_token);\n\n        /*\n         * If the timer uses a dedicated time base, then also delete that.\n         */\n        if ((timecb->flags & TIMECB_FLAG_DEDICATED_TIMEBASE) != 0)\n        {\n            dedicated_timebase_id = OS_ObjectIdFromToken(&timecb->timebase_token);\n        }\n\n        /*\n         * Now we need to remove it from the time base callback ring\n         */\n        if (OS_ObjectIdEqual(timebase->first_cb, OS_ObjectIdFromToken(&timecb_token)))\n        {\n            if (OS_ObjectIdEqual(OS_ObjectIdFromToken(&timecb_token), timecb->next_cb))\n            {\n                timebase->first_cb = OS_OBJECT_ID_UNDEFINED;\n            }\n            else\n            {\n                timebase->first_cb = timecb->next_cb;\n            }\n        }\n\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->prev_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->next_cb = timecb->next_cb;\n        }\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->next_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->prev_cb = timecb->prev_cb;\n        }\n\n        timecb->next_cb = OS_ObjectIdFromToken(&timecb_token);\n        timecb->prev_cb = OS_ObjectIdFromToken(&timecb_token);\n\n        OS_TimeBaseUnlock_Impl(&timecb->timebase_token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &timecb_token);\n    }\n\n    /*\n     * Remove the reference count against the timebase\n     */\n    OS_ObjectIdRelease(&timebase_token);\n\n    /*\n     * If the timer uses a dedicated time base, then also delete it.\n     */\n    if (return_code == OS_SUCCESS && OS_ObjectIdDefined(dedicated_timebase_id))\n    {\n        OS_TimeBaseDelete(dedicated_timebase_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Helper logging functions: append probes to /tmp/logs/2187.txt */\nstatic void OS_TimerDelete_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2187.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void OS_TimerDelete_DumpToken(const char *label, const void *token, size_t tok_size)\n{\n    const unsigned char *p = (const unsigned char *)token;\n    FILE *f = fopen(\"/tmp/logs/2187.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"%s: \", label);\n    for (size_t i = 0; i < tok_size; ++i)\n    {\n        fprintf(f, \"%02X\", (unsigned)p[i]);\n        if (i + 1 < tok_size) fprintf(f, \":\");\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TimerDelete(osal_id_t timer_id)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    osal_id_t                      dedicated_timebase_id;\n    OS_object_token_t              timecb_token;\n    OS_object_token_t              timebase_token;\n    OS_object_token_t              listcb_token;\n    OS_timebase_internal_record_t *timebase;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timecb_internal_record_t *  list_timecb;\n\n    /* Probe: entry */\n    OS_TimerDelete_Log(\"OS_TimerDelete ENTRY: timer_id=%llu\", (unsigned long long)timer_id);\n\n    dedicated_timebase_id = OS_OBJECT_ID_UNDEFINED;\n    memset(&timebase_token, 0, sizeof(timebase_token));\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    OS_TimerDelete_Log(\"Context object type: %d\", (int)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimerDelete_Log(\"Incorrect object state: called from timebase callback\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &timecb_token);\n    OS_TimerDelete_Log(\"OS_ObjectIdGetById returned %d\", (int)return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Dump the token retrieved */\n        OS_TimerDelete_DumpToken(\"timecb_token BEFORE lookup\", &timecb_token, sizeof(timecb_token));\n\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, timecb_token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        /* Dump relevant internal state */\n        OS_TimerDelete_Log(\"timecb ptr=%p, timecb->timebase_token ptr=%p\", (void *)timecb, (void *)&timecb->timebase_token);\n        OS_TimerDelete_DumpToken(\"timecb->timebase_token BEFORE transfer/lock\", &timecb->timebase_token, sizeof(timecb->timebase_token));\n        OS_TimerDelete_DumpToken(\"timebase_token BEFORE transfer\", &timebase_token, sizeof(timebase_token));\n        OS_TimerDelete_Log(\"timecb flags=0x%08X\", (unsigned)timecb->flags);\n        OS_TimerDelete_Log(\"timecb->next_cb=%llu, timecb->prev_cb=%llu\", (unsigned long long)timecb->next_cb, (unsigned long long)timecb->prev_cb);\n\n        OS_ObjectIdTransferToken(&timecb->timebase_token, &timebase_token);\n\n        OS_TimerDelete_DumpToken(\"timecb->timebase_token AFTER transfer\", &timecb->timebase_token, sizeof(timecb->timebase_token));\n        OS_TimerDelete_DumpToken(\"timebase_token AFTER transfer\", &timebase_token, sizeof(timebase_token));\n\n        /* Probe before locking the timebase */\n        OS_TimerDelete_Log(\"Calling OS_TimeBaseLock_Impl with timebase token at %p\", (void *)&timecb->timebase_token);\n        OS_TimerDelete_DumpToken(\"Lock token BEFORE call\", &timecb->timebase_token, sizeof(timecb->timebase_token));\n        OS_TimeBaseLock_Impl(&timecb->timebase_token);\n        OS_TimerDelete_DumpToken(\"Lock token AFTER call\", &timecb->timebase_token, sizeof(timecb->timebase_token));\n        OS_TimerDelete_Log(\"Returned from OS_TimeBaseLock_Impl\");\n\n        /*\n         * If the timer uses a dedicated time base, then also delete that.\n         */\n        if ((timecb->flags & TIMECB_FLAG_DEDICATED_TIMEBASE) != 0)\n        {\n            dedicated_timebase_id = OS_ObjectIdFromToken(&timecb->timebase_token);\n            OS_TimerDelete_Log(\"Dedicated timebase detected: id=%llu\", (unsigned long long)dedicated_timebase_id);\n        }\n\n        /*\n         * Now we need to remove it from the time base callback ring\n         */\n        if (OS_ObjectIdEqual(timebase->first_cb, OS_ObjectIdFromToken(&timecb_token)))\n        {\n            if (OS_ObjectIdEqual(OS_ObjectIdFromToken(&timecb_token), timecb->next_cb))\n            {\n                timebase->first_cb = OS_OBJECT_ID_UNDEFINED;\n                OS_TimerDelete_Log(\"Removed sole callback from timebase, first_cb set to UNDEFINED\");\n            }\n            else\n            {\n                timebase->first_cb = timecb->next_cb;\n                OS_TimerDelete_Log(\"Removed first callback, new first_cb=%llu\", (unsigned long long)timebase->first_cb);\n            }\n        }\n\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->prev_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->next_cb = timecb->next_cb;\n            OS_TimerDelete_Log(\"Patched prev_cb (%llu) next_cb to %llu\", (unsigned long long)timecb->prev_cb,\n                                (unsigned long long)timecb->next_cb);\n        }\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->next_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n            list_timecb->prev_cb = timecb->prev_cb;\n            OS_TimerDelete_Log(\"Patched next_cb (%llu) prev_cb to %llu\", (unsigned long long)timecb->next_cb,\n                                (unsigned long long)timecb->prev_cb);\n        }\n\n        timecb->next_cb = OS_ObjectIdFromToken(&timecb_token);\n        timecb->prev_cb = OS_ObjectIdFromToken(&timecb_token);\n\n        /* Probe: before unlocking, capture token bytes to detect any mutation by Unlock impl */\n        OS_TimerDelete_DumpToken(\"timecb->timebase_token BEFORE Unlock\", &timecb->timebase_token, sizeof(timecb->timebase_token));\n        OS_TimerDelete_Log(\"Calling OS_TimeBaseUnlock_Impl with timebase token at %p\", (void *)&timecb->timebase_token);\n\n        OS_TimeBaseUnlock_Impl(&timecb->timebase_token);\n\n        /* Probe: after unlock */\n        OS_TimerDelete_DumpToken(\"timecb->timebase_token AFTER Unlock\", &timecb->timebase_token, sizeof(timecb->timebase_token));\n        OS_TimerDelete_DumpToken(\"timebase_token AT end of critical section\", &timebase_token, sizeof(timebase_token));\n        OS_TimerDelete_Log(\"Returned from OS_TimeBaseUnlock_Impl\");\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &timecb_token);\n        OS_TimerDelete_Log(\"OS_ObjectIdFinalizeDelete returned %d\", (int)return_code);\n    }\n\n    /*\n     * Remove the reference count against the timebase\n     */\n    OS_TimerDelete_Log(\"Releasing timebase_token\");\n    OS_ObjectIdRelease(&timebase_token);\n\n    /*\n     * If the timer uses a dedicated time base, then also delete it.\n     */\n    if (return_code == OS_SUCCESS && OS_ObjectIdDefined(dedicated_timebase_id))\n    {\n        OS_TimerDelete_Log(\"Deleting dedicated timebase id=%llu\", (unsigned long long)dedicated_timebase_id);\n        OS_TimeBaseDelete(dedicated_timebase_id);\n    }\n\n    OS_TimerDelete_Log(\"OS_TimerDelete EXIT: return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}