{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_ShellOutputToFile:\n```c\nint32 OS_ShellOutputToFile(const char *Cmd, osal_id_t filedes)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Cmd);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_STREAM, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ShellOutputToFile_Impl(&token, Cmd);\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nOS_CHECK_POINTER(Cmd);\n```\nFocus on the above code fragment and judge whether it violates the rule 17.8 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No \u2014 as written this fragment does not modify the parameter. Calling OS_CHECK_POINTER(Cmd) typically only inspects Cmd (e.g. checks for NULL) and does not assign to Cmd. A violation would occur if the macro expanded to an assignment to the parameter (for example: #define OS_CHECK_POINTER(p) do { if ((p) == NULL) { p = some_default; } } while(0)), because assigning to the parameter itself would breach MISRA C 2023 Rule 17.8."
}