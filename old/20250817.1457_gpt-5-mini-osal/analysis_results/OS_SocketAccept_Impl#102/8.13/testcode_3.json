{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable sock_impl is declared as OS_impl_file_internal_record_t * but in this function it is only used for read access (sock_impl->selectable and sock_impl->fd). According to MISRA C 2023 Rule 8.13 it should be a pointer to a const-qualified type (const OS_impl_file_internal_record_t *) to indicate non-modification and avoid violating the rule. (conn_impl remains non-const because it is written to.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAccept_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/819.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAccept_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAccept_Impl:\n```c\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen       = Addr->ActualLength;\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n            if (conn_impl->fd < 0)\n            {\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAccept_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/819.txt\", \"a\");\n    if (fp != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(fp, fmt, ap);\n        va_end(ap);\n        fprintf(fp, \"\\n\");\n        fclose(fp);\n    }\n}\n\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    probe_log(\"OS_SocketAccept_Impl ENTRY: sock_token=%p conn_token=%p timeout=%d Addr=%p\",\n              (void *)sock_token, (void *)conn_token, (int)timeout, (void *)Addr);\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    probe_log(\"LOOKUP: sock_impl=%p conn_impl=%p\", (void *)sock_impl, (void *)conn_impl);\n    if (sock_impl != NULL)\n    {\n        probe_log(\"SOCK STATE: selectable=%d fd=%d\", sock_impl->selectable, sock_impl->fd);\n    }\n    else\n    {\n        probe_log(\"SOCK STATE: sock_impl is NULL\");\n    }\n    if (conn_impl != NULL)\n    {\n        probe_log(\"CONN STATE BEFORE: fd=%d\", conn_impl->fd);\n    }\n    else\n    {\n        probe_log(\"CONN STATE: conn_impl is NULL\");\n    }\n\n    operation = OS_STREAM_STATE_READABLE;\n    probe_log(\"OPERATION SET: operation=0x%08x\", (unsigned)operation);\n    if (sock_impl != NULL && sock_impl->selectable)\n    {\n        probe_log(\"SOCKET IS SELECTABLE: calling OS_SelectSingle_Impl\");\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n        probe_log(\"OS_SelectSingle_Impl returned: return_code=%d operation=0x%08x\", return_code, (unsigned)operation);\n    }\n    else\n    {\n        probe_log(\"SOCKET NOT SELECTABLE: skipping select, default success\");\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            probe_log(\"TIMED OUT: operation=0x%08x not readable\", (unsigned)operation);\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen = Addr->ActualLength;\n            probe_log(\"BEFORE ACCEPT: addrlen=%u Addr->ActualLength=%u sock_fd=%d\",\n                      (unsigned)addrlen, (unsigned)Addr->ActualLength, (sock_impl != NULL) ? sock_impl->fd : -1);\n\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n            probe_log(\"ACCEPT RETURN: conn_impl->fd=%d errno=%d\", conn_impl->fd, errno);\n\n            if (conn_impl->fd < 0)\n            {\n                probe_log(\"ACCEPT FAILED: setting return_code=OS_ERROR\");\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n                probe_log(\"ACCEPT SUCCESS: new fd=%d Addr->ActualLength=%u\", conn_impl->fd, (unsigned)Addr->ActualLength);\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n                probe_log(\"OS_IMPL_SET_SOCKET_FLAGS called for conn_token=%p\", (void *)conn_token);\n            }\n        }\n    }\n    else\n    {\n        probe_log(\"EARLY RETURN: return_code=%d\", return_code);\n    }\n\n    probe_log(\"OS_SocketAccept_Impl EXIT: return_code=%d\", return_code);\n    return return_code;\n}\n"
}