{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer sock_impl is only used for reading (accessing sock_impl->selectable and sock_impl->fd) and is never modified through the pointer, so it should be declared to point to a const-qualified type (e.g. const OS_impl_file_internal_record_t *sock_impl). Because it is declared as a non-const pointer when const qualification is possible, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAccept_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/819.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAccept_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAccept_Impl:\n```c\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen       = Addr->ActualLength;\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n            if (conn_impl->fd < 0)\n            {\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAccept_Impl code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helper for OS_SocketAccept_Impl\n * Writes control-flow and state information to /tmp/logs/819.txt\n */\nstatic void OS_SocketAccept_Log(const OS_impl_file_internal_record_t *sock_impl,\n                                const OS_impl_file_internal_record_t *conn_impl,\n                                const OS_SockAddr_t *Addr,\n                                int32 timeout,\n                                uint32 operation,\n                                int32 return_code,\n                                socklen_t addrlen,\n                                const char *stage)\n{\n    FILE *f = fopen(\"/tmp/logs/819.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"Stage: %s\\n\", stage);\n    fprintf(f, \"  sock_impl=%p, conn_impl=%p, timeout=%d, operation=0x%08x, return_code=%d\\n\",\n            (const void *)sock_impl, (const void *)conn_impl, (int)timeout, (unsigned)operation, (int)return_code);\n\n    if (sock_impl != NULL)\n    {\n        /* Log fields that are used in the function: selectable and fd */\n        fprintf(f, \"  sock_impl->fd=%d, sock_impl->selectable=%d\\n\",\n                (int)sock_impl->fd, (int)sock_impl->selectable);\n    }\n    else\n    {\n        fprintf(f, \"  sock_impl is NULL\\n\");\n    }\n\n    if (conn_impl != NULL)\n    {\n        fprintf(f, \"  conn_impl->fd=%d\\n\", (int)conn_impl->fd);\n    }\n\n    if (Addr != NULL)\n    {\n        fprintf(f, \"  Addr->ActualLength=%u\\n\", (unsigned)Addr->ActualLength);\n    }\n\n    fprintf(f, \"  probe addrlen=%u\\n\", (unsigned)addrlen);\n    fprintf(f, \"----------------------------------------\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen = 0;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    /* Log after object table lookup */\n    OS_SocketAccept_Log(sock_impl, conn_impl, Addr, timeout, 0U, -999, addrlen, \"after_object_lookup\");\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        OS_SocketAccept_Log(sock_impl, conn_impl, Addr, timeout, operation, -999, addrlen, \"before_select\");\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n        OS_SocketAccept_Log(sock_impl, conn_impl, Addr, timeout, operation, return_code, addrlen, \"after_select\");\n    }\n    else\n    {\n        OS_SocketAccept_Log(sock_impl, conn_impl, Addr, timeout, operation, -999, addrlen, \"select_not_required\");\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            OS_SocketAccept_Log(sock_impl, conn_impl, Addr, timeout, operation, return_code, addrlen, \"not_readable_timeout_path\");\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen = Addr->ActualLength;\n            OS_SocketAccept_Log(sock_impl, conn_impl, Addr, timeout, operation, return_code, addrlen, \"before_accept_call\");\n\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n\n            OS_SocketAccept_Log(sock_impl, conn_impl, Addr, timeout, operation, return_code, addrlen, \"after_accept_call\");\n\n            if (conn_impl->fd < 0)\n            {\n                return_code = OS_ERROR;\n                OS_SocketAccept_Log(sock_impl, conn_impl, Addr, timeout, operation, return_code, addrlen, \"accept_failed\");\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n\n                OS_SocketAccept_Log(sock_impl, conn_impl, Addr, timeout, operation, return_code, addrlen, \"accept_success\");\n            }\n        }\n    }\n\n    OS_SocketAccept_Log(sock_impl, conn_impl, Addr, timeout, operation, return_code, addrlen, \"function_exit\");\n\n    return return_code;\n}\n"
}