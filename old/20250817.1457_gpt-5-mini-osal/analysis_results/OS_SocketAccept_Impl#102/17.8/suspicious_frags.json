{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SocketAccept_Impl:\n```c\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen       = Addr->ActualLength;\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n            if (conn_impl->fd < 0)\n            {\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);",
    "Addr->ActualLength = addrlen;",
    "conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);",
    "return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);",
    "sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);",
    "addrlen       = Addr->ActualLength;",
    "OS_IMPL_SET_SOCKET_FLAGS(conn_token);"
  ],
  "explanation": "Other lines in the function are simple local variable declarations/initializations, control-flow checks, bitwise tests, or returning the local return_code; these do not assign to or otherwise modify the function parameters themselves and therefore do not need investigation for Rule 17.8. The fragments listed above are those that either (a) write into memory reachable from a pointer parameter (accept writing into Addr->AddrData, the assignment to Addr->ActualLength), (b) obtain implementation records via dereferencing the token parameters (the OS_OBJECT_TABLE_GET uses *sock_token/*conn_token and the resulting implementation record is then modified), or (c) pass the parameter to external functions/macros that may modify the pointed-to objects (OS_SelectSingle_Impl and OS_IMPL_SET_SOCKET_FLAGS). Those interactions should be reviewed to ensure that the pointer parameters themselves are not being reassigned within this function and that any modifications are only to the objects referred to by pointer parameters, in accordance with MISRA C 2023 Rule 17.8."
}