{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UtAssert_GetOpText:\n```c\nconst char *UtAssert_GetOpText(UtAssert_Compare_t CompareType)\n{\n    const char *OpText;\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            OpText = \"==\";\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            OpText = \"!=\";\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            OpText = \"<\";\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            OpText = \">\";\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            OpText = \"<=\";\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            OpText = \">=\";\n            break;\n        case UtAssert_Compare_BITMASK_SET: /* bit(s) in reference are set in actual */\n            OpText = \"&\";\n            break;\n        case UtAssert_Compare_BITMASK_UNSET: /* bit(s) in reference are not set in actual */\n            OpText = \"&~\";\n            break;\n        default: /* should never happen */\n            OpText = \"??\";\n            break;\n    }\n\n    return OpText;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function UtAssert_GetOpText:\ntypedef enum\n{\n    UtAssert_Compare_NONE,          /**< invalid/not used, always false */\n    UtAssert_Compare_EQ,            /**< actual equals reference value */\n    UtAssert_Compare_NEQ,           /**< actual does not non equal reference value */\n    UtAssert_Compare_LT,            /**< actual less than reference (exclusive) */\n    UtAssert_Compare_GT,            /**< actual greater than reference (exclusive)  */\n    UtAssert_Compare_LTEQ,          /**< actual less than or equal to reference (inclusive) */\n    UtAssert_Compare_GTEQ,          /**< actual greater than reference (inclusive) */\n    UtAssert_Compare_BITMASK_SET,   /**< actual equals reference value */\n    UtAssert_Compare_BITMASK_UNSET, /**< actual equals reference value */\n    UtAssert_Compare_MAX            /**< placeholder, not used */\n} UtAssert_Compare_t\n...\nbool UtAssert_GenericIntegerCompare(bool IsUnsigned, UT_IntCheck_t ActualValue, UtAssert_Compare_t CompareType,\n                                    UT_IntCheck_t RefValue, const char *File, uint32 Line, UtAssert_Radix_t RadixType,\n                                    const char *Typename, const char *ActualText, const char *RefText)\n{\n    static const char UTASSERT_PREFIX[] = \"UTASSERT_\";\n\n    char ActualStr[32];\n    char RefStr[32];\n    char TagStr[32];\n    int  TagLen;\n\n    /* If the radix type was not specified, then check if the typename appears to be a pointer -\n     * That is, it contains an asterisk.  This is far from foolproof due to typedefs etc but\n     * it should catch most of them (note that \"hiding\" a pointer via typedef is discouraged by\n     * GSFC coding standards, so this shouldn't be too likely)\n     */\n    if (Typename != NULL && *Typename != 0)\n    {\n        TagLen = snprintf(TagStr, sizeof(TagStr), \"%s\", Typename);\n        if (TagLen < 0)\n        {\n            TagLen = 0;\n        }\n        else if (TagLen > (sizeof(TagStr) - 3))\n        {\n            TagLen = sizeof(TagStr) - 3;\n        }\n\n        while (TagLen > 0 && (isspace((unsigned char)TagStr[TagLen - 1]) || TagStr[TagLen - 1] == ':'))\n        {\n            --TagLen;\n        }\n\n        if (TagLen > 0)\n        {\n            TagStr[TagLen] = ':';\n            ++TagLen;\n            TagStr[TagLen] = ' ';\n            ++TagLen;\n        }\n\n        TagStr[TagLen] = 0;\n\n        if (RadixType == UtAssert_Radix_DEFAULT && strchr(Typename, '*') != NULL)\n        {\n            /* looks like a pointer type */\n            RadixType = UtAssert_Radix_HEX;\n        }\n    }\n    else\n    {\n        TagStr[0] = 0;\n    }\n\n    /* If either the actual text or the ref text starts with the \"UTASSERT_\" prefix, then strip it */\n    if (strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        ActualText += sizeof(UTASSERT_PREFIX) - 1;\n    }\n    if (strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        RefText += sizeof(UTASSERT_PREFIX) - 1;\n    }\n\n    return UtAssertEx(UtAssert_DoCompare(ActualValue, CompareType, RefValue, IsUnsigned), UTASSERT_CASETYPE_FAILURE,\n                      File, Line, \"%s%s (%s) %s %s (%s)\", TagStr, ActualText,\n                      UtAssert_GetValueText(ActualStr, sizeof(ActualStr), ActualValue, IsUnsigned, RadixType),\n                      UtAssert_GetOpText(CompareType), RefText,\n                      UtAssert_GetValueText(RefStr, sizeof(RefStr), RefValue, IsUnsigned, RadixType));\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        ActualText += sizeof(UTASSERT_PREFIX) - 1;\n    }",
    "if (RadixType == UtAssert_Radix_DEFAULT && strchr(Typename, '*') != NULL)\n    {\n        /* looks like a pointer type */\n        RadixType = UtAssert_Radix_HEX;\n    }",
    "if (strncmp(RefText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) == 0)\n    {\n        RefText += sizeof(UTASSERT_PREFIX) - 1;\n    }"
  ],
  "explanation": "The three fragments above reassign function parameter variables: ActualText and RefText are pointer parameters that are incremented (the pointer variables themselves are modified), and RadixType is a non-pointer parameter that is assigned a new value. According to MISRA C 2023 Rule 17.8 the pointer parameter itself shall not be modified (only the object pointed to may be modified), and function parameters in general should not be modified. Other code in the supplied functions does not modify parameters: UtAssert_GetOpText reads CompareType but does not assign to it; local arrays (TagStr, ActualStr, RefStr) and local scalars (TagLen, OpText) are assigned but are not function parameters; Typename is only inspected (strchr/isspace) and not reassigned; calls to helper functions pass parameters but do not show any in-function reassignment. Therefore no other fragments need investigation for Rule 17.8."
}