{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter ActualText (type const char *) is reassigned with ActualText += sizeof(UTASSERT_PREFIX) - 1 to skip a prefix. This modifies the pointer parameter itself (not the pointed-to object) and therefore violates MISRA C 2023 Rule 17.8. (The same pattern is present for RefText later.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GetOpText code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2293.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_GetOpText as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_GetOpText:\n```c\nconst char *UtAssert_GetOpText(UtAssert_Compare_t CompareType)\n{\n    const char *OpText;\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            OpText = \"==\";\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            OpText = \"!=\";\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            OpText = \"<\";\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            OpText = \">\";\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            OpText = \"<=\";\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            OpText = \">=\";\n            break;\n        case UtAssert_Compare_BITMASK_SET: /* bit(s) in reference are set in actual */\n            OpText = \"&\";\n            break;\n        case UtAssert_Compare_BITMASK_UNSET: /* bit(s) in reference are not set in actual */\n            OpText = \"&~\";\n            break;\n        default: /* should never happen */\n            OpText = \"??\";\n            break;\n    }\n\n    return OpText;\n}\n```\n</target_code>\nPlease provide the modified UtAssert_GetOpText code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/*\n * Minimal definition so this snippet is self-contained for testing.\n * In the real project, UtAssert_Compare_t is expected to be defined elsewhere.\n */\ntypedef enum\n{\n    UtAssert_Compare_EQ,\n    UtAssert_Compare_NEQ,\n    UtAssert_Compare_LT,\n    UtAssert_Compare_GT,\n    UtAssert_Compare_LTEQ,\n    UtAssert_Compare_GTEQ,\n    UtAssert_Compare_BITMASK_SET,\n    UtAssert_Compare_BITMASK_UNSET\n} UtAssert_Compare_t;\n\n/* Helper probe function: append a log entry to /tmp/logs/2293.txt.\n * This captures the control path (stage), the numeric CompareType, and\n * the textual operator (OpText) plus its pointer value. */\nstatic void UtAssert_LogProbe(const char *stage, UtAssert_Compare_t CompareType, const char *OpText)\n{\n    /* Ensure the directory exists; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/2293.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print a simple, unambiguous log line. */\n        fprintf(f, \"stage=%s, CompareType=%d, OpText_addr=%p, OpText=\\\"%s\\\"\\n\",\n                stage,\n                (int)CompareType,\n                (const void *)OpText,\n                (OpText != NULL) ? OpText : \"(null)\");\n        fclose(f);\n    }\n}\n\nconst char *UtAssert_GetOpText(UtAssert_Compare_t CompareType)\n{\n    const char *OpText;\n\n    /* Log entry with the incoming CompareType. */\n    UtAssert_LogProbe(\"enter\", CompareType, NULL);\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            OpText = \"==\";\n            UtAssert_LogProbe(\"case_EQ\", CompareType, OpText);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            OpText = \"!=\";\n            UtAssert_LogProbe(\"case_NEQ\", CompareType, OpText);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            OpText = \"<\";\n            UtAssert_LogProbe(\"case_LT\", CompareType, OpText);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            OpText = \">\";\n            UtAssert_LogProbe(\"case_GT\", CompareType, OpText);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            OpText = \"<=\";\n            UtAssert_LogProbe(\"case_LTEQ\", CompareType, OpText);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            OpText = \">=\";\n            UtAssert_LogProbe(\"case_GTEQ\", CompareType, OpText);\n            break;\n        case UtAssert_Compare_BITMASK_SET: /* bit(s) in reference are set in actual */\n            OpText = \"&\";\n            UtAssert_LogProbe(\"case_BITMASK_SET\", CompareType, OpText);\n            break;\n        case UtAssert_Compare_BITMASK_UNSET: /* bit(s) in reference are not set in actual */\n            OpText = \"&~\";\n            UtAssert_LogProbe(\"case_BITMASK_UNSET\", CompareType, OpText);\n            break;\n        default: /* should never happen */\n            OpText = \"??\";\n            UtAssert_LogProbe(\"case_default\", CompareType, OpText);\n            break;\n    }\n\n    /* Log before returning the selected OpText. */\n    UtAssert_LogProbe(\"return\", CompareType, OpText);\n\n    return OpText;\n}\n"
}