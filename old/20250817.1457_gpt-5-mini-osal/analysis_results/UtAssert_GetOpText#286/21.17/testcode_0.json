{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) without ensuring ActualText (or RefText) is non-NULL and that the object it points to has at least sizeof(UTASSERT_PREFIX)-1 bytes or a terminating '\\0' within that range. This can lead to out-of-bounds accesses. For example, if ActualText is NULL or points to a short/non-terminated buffer (e.g. a 3-byte buffer without a '\\0'), strncmp may read beyond the bounds of the object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GetOpText code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2295.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_GetOpText as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_GetOpText:\n```c\nconst char *UtAssert_GetOpText(UtAssert_Compare_t CompareType)\n{\n    const char *OpText;\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            OpText = \"==\";\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            OpText = \"!=\";\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            OpText = \"<\";\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            OpText = \">\";\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            OpText = \"<=\";\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            OpText = \">=\";\n            break;\n        case UtAssert_Compare_BITMASK_SET: /* bit(s) in reference are set in actual */\n            OpText = \"&\";\n            break;\n        case UtAssert_Compare_BITMASK_UNSET: /* bit(s) in reference are not set in actual */\n            OpText = \"&~\";\n            break;\n        default: /* should never happen */\n            OpText = \"??\";\n            break;\n    }\n\n    return OpText;\n}\n```\n</target_code>\nPlease provide the modified UtAssert_GetOpText code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <unistd.h>\n\n/*\n * Probe logger: append control-flow/state information to the log file\n * This is intentionally lightweight and safe (no dereferencing of external\n * pointers). It records when UtAssert_GetOpText is called, the CompareType\n * value, the resolved OpText pointer and a timestamp/pid to aid repro.\n */\nstatic void UtAssert_LogProbe(int compareType, const char *opText)\n{\n    FILE *f = fopen(\"/tmp/logs/2295.txt\", \"a\");\n    if (!f)\n    {\n        return; /* best-effort logging; do not affect original logic */\n    }\n\n    time_t now = time(NULL);\n    /* Write a single line with time, pid, compare type, op text and its address */\n    fprintf(f, \"[%ld] PID=%d UtAssert_GetOpText: CompareType=%d, OpText=%s, OpAddr=%p\\n\",\n            (long)now, (int)getpid(), compareType, (opText ? opText : \"(null)\"), (void *)opText);\n    fclose(f);\n}\n\nconst char *UtAssert_GetOpText(UtAssert_Compare_t CompareType)\n{\n    const char *OpText;\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            OpText = \"==\";\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            OpText = \"!=\";\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            OpText = \"<\";\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            OpText = \">\";\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            OpText = \"<=\";\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            OpText = \">=\";\n            break;\n        case UtAssert_Compare_BITMASK_SET: /* bit(s) in reference are set in actual */\n            OpText = \"&\";\n            break;\n        case UtAssert_Compare_BITMASK_UNSET: /* bit(s) in reference are not set in actual */\n            OpText = \"&~\";\n            break;\n        default: /* should never happen */\n            OpText = \"??\";\n            break;\n    }\n\n    /* Probe log for downstream analysis and reproduction of control paths */\n    UtAssert_LogProbe((int)CompareType, OpText);\n\n    return OpText;\n}\n"
}