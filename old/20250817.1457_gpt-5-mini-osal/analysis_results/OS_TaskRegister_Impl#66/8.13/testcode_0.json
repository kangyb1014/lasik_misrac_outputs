{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe union member opaque_arg is declared as void * (non-const) and is passed to pthread_setspecific which takes a const void * value. According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible (i.e. const void *). Therefore this use of a non-const pointer to supply a value that will not be modified violates the rule. (Fix: declare opaque_arg as const void * or otherwise supply a const-qualified pointer.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskRegister_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/531.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskRegister_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskRegister_Impl:\n```c\nint32 OS_TaskRegister_Impl(osal_id_t global_task_id)\n{\n    int32                    return_code;\n    OS_VoidPtrValueWrapper_t arg;\n    int                      old_state;\n    int                      old_type;\n\n    /*\n     * Set cancel state=ENABLED, type=DEFERRED\n     * This should be the default for new threads, but\n     * setting explicitly to be sure that a pthread_join()\n     * will work as expected in case this thread is deleted.\n     */\n    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_state);\n    pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &old_type);\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = global_task_id;\n\n    return_code = pthread_setspecific(POSIX_GlobalVars.ThreadKey, arg.opaque_arg);\n    if (return_code == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"OS_TaskRegister_Impl failed during pthread_setspecific() error=%s\\n\", strerror(return_code));\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskRegister_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <pthread.h>\n\n/* Probe logging helper: append human-readable trace to /tmp/logs/531.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/531.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TaskRegister_Impl(osal_id_t global_task_id)\n{\n    int32                    return_code;\n    OS_VoidPtrValueWrapper_t arg;\n    int                      old_state;\n    int                      old_type;\n\n    /* Log entry and initial state */\n    probe_log(\"OS_TaskRegister_Impl: entry: global_task_id=%ld\", (long)global_task_id);\n\n    /*\n     * Set cancel state=ENABLED, type=DEFERRED\n     * This should be the default for new threads, but\n     * setting explicitly to be sure that a pthread_join()\n     * will work as expected in case this thread is deleted.\n     */\n    probe_log(\"Calling pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_state)\");\n    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_state);\n    probe_log(\"pthread_setcancelstate returned old_state=%d\", old_state);\n\n    probe_log(\"Calling pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &old_type)\");\n    pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &old_type);\n    probe_log(\"pthread_setcanceltype returned old_type=%d\", old_type);\n\n    memset(&arg, 0, sizeof(arg));\n    probe_log(\"memset(&arg, 0, sizeof(arg)) completed\");\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = global_task_id;\n    probe_log(\"Assigned arg.id = %ld\", (long)global_task_id);\n\n    /* Log the raw value of the opaque pointer before passing to pthread_setspecific */\n    probe_log(\"About to call pthread_setspecific with key=%p and value (opaque_arg)=%p\",\n              (void *)POSIX_GlobalVars.ThreadKey, (void *)arg.opaque_arg);\n\n    return_code = pthread_setspecific(POSIX_GlobalVars.ThreadKey, arg.opaque_arg);\n    probe_log(\"pthread_setspecific returned %d\", return_code);\n\n    if (return_code == 0)\n    {\n        probe_log(\"pthread_setspecific succeeded -> returning OS_SUCCESS\");\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        /* Preserve original debug message but also log to file for repro */\n        OS_DEBUG(\"OS_TaskRegister_Impl failed during pthread_setspecific() error=%s\\n\", strerror(return_code));\n        probe_log(\"OS_TaskRegister_Impl failed during pthread_setspecific() error=%s\", strerror(return_code));\n        return_code = OS_ERROR;\n    }\n\n    probe_log(\"OS_TaskRegister_Impl: exit: return_code=%d\", return_code);\n    return return_code;\n}\n"
}