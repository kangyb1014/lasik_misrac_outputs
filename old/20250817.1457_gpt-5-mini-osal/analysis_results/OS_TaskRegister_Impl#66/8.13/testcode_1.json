{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe union defines 'void *opaque_arg' which is used only as an opaque/read-only value passed to pthread_setspecific (which accepts a const void *). The pointer does not appear to be used to modify pointed-to data, so it could (and should) be declared as 'const void *opaque_arg'. Therefore the non-const pointer member violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskRegister_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/531.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskRegister_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskRegister_Impl:\n```c\nint32 OS_TaskRegister_Impl(osal_id_t global_task_id)\n{\n    int32                    return_code;\n    OS_VoidPtrValueWrapper_t arg;\n    int                      old_state;\n    int                      old_type;\n\n    /*\n     * Set cancel state=ENABLED, type=DEFERRED\n     * This should be the default for new threads, but\n     * setting explicitly to be sure that a pthread_join()\n     * will work as expected in case this thread is deleted.\n     */\n    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_state);\n    pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &old_type);\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = global_task_id;\n\n    return_code = pthread_setspecific(POSIX_GlobalVars.ThreadKey, arg.opaque_arg);\n    if (return_code == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"OS_TaskRegister_Impl failed during pthread_setspecific() error=%s\\n\", strerror(return_code));\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskRegister_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <pthread.h>\n#include <errno.h>\n\n/* Probe logging helper - writes control flow/state to /tmp/logs/531.txt */\nstatic void OS_TaskRegister_Impl_log(const char *stage, osal_id_t global_task_id,\n                                     const OS_VoidPtrValueWrapper_t *arg, int setspecific_ret,\n                                     int old_state, int old_type)\n{\n    FILE *fp = fopen(\"/tmp/logs/531.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"[OS_TaskRegister_Impl] stage=%s\\n\", stage);\n        fprintf(fp, \"  global_task_id=%lu\\n\", (unsigned long)global_task_id);\n        if (arg != NULL)\n        {\n            /* Print union member values that are relevant to this scenario */\n            fprintf(fp, \"  arg.id=%lu\\n\", (unsigned long)arg->id);\n            /* Print pointer value. opaque_arg is non-const in the original code. */\n            fprintf(fp, \"  arg.opaque_arg=%p\\n\", (void *)arg->opaque_arg);\n        }\n        fprintf(fp, \"  pthread_setspecific_ret=%d\\n\", setspecific_ret);\n        fprintf(fp, \"  old_state=%d old_type=%d\\n\", old_state, old_type);\n        fflush(fp);\n        fclose(fp);\n    }\n}\n\nint32 OS_TaskRegister_Impl(osal_id_t global_task_id)\n{\n    int32                    return_code;\n    OS_VoidPtrValueWrapper_t arg;\n    int                      old_state;\n    int                      old_type;\n\n    /* Log entry */\n    OS_TaskRegister_Impl_log(\"entry\", global_task_id, NULL, -1, -1, -1);\n\n    /*\n     * Set cancel state=ENABLED, type=DEFERRED\n     * This should be the default for new threads, but\n     * setting explicitly to be sure that a pthread_join()\n     * will work as expected in case this thread is deleted.\n     */\n    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_state);\n    pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &old_type);\n\n    /* Log after setting cancel parameters */\n    OS_TaskRegister_Impl_log(\"after_cancel_settings\", global_task_id, NULL, -1, old_state, old_type);\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = global_task_id;\n\n    /* Log prepared arg (id and opaque_arg pointer value) before setspecific */\n    OS_TaskRegister_Impl_log(\"after_prepare_arg\", global_task_id, &arg, -1, old_state, old_type);\n\n    return_code = pthread_setspecific(POSIX_GlobalVars.ThreadKey, arg.opaque_arg);\n\n    /* Log result of pthread_setspecific and arg state */\n    OS_TaskRegister_Impl_log(\"after_setspecific\", global_task_id, &arg, return_code, old_state, old_type);\n\n    if (return_code == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"OS_TaskRegister_Impl failed during pthread_setspecific() error=%s\\n\", strerror(return_code));\n        /* Log error branch */\n        OS_TaskRegister_Impl_log(\"setspecific_error\", global_task_id, &arg, return_code, old_state, old_type);\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n"
}