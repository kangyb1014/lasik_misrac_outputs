{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe then-branch assignment 'return_code = OS_SUCCESS;' is dead code: when pthread_setspecific() returns 0, return_code is already 0 and assigning OS_SUCCESS (defined as 0) has no effect on program behaviour. Removing that assignment would not change the observable behaviour, so this operation violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskRegister_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/530.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskRegister_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskRegister_Impl:\n```c\nint32 OS_TaskRegister_Impl(osal_id_t global_task_id)\n{\n    int32                    return_code;\n    OS_VoidPtrValueWrapper_t arg;\n    int                      old_state;\n    int                      old_type;\n\n    /*\n     * Set cancel state=ENABLED, type=DEFERRED\n     * This should be the default for new threads, but\n     * setting explicitly to be sure that a pthread_join()\n     * will work as expected in case this thread is deleted.\n     */\n    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_state);\n    pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &old_type);\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = global_task_id;\n\n    return_code = pthread_setspecific(POSIX_GlobalVars.ThreadKey, arg.opaque_arg);\n    if (return_code == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"OS_TaskRegister_Impl failed during pthread_setspecific() error=%s\\n\", strerror(return_code));\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskRegister_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <pthread.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe logger: append a single-line record about the call and return values. */\nstatic void OS_TaskRegister_Impl_log(const char *stage,\n                                     unsigned long global_task_id_val,\n                                     void *opaque_arg,\n                                     unsigned long thread_key_val,\n                                     int return_before_assign,\n                                     int return_after_assign,\n                                     int old_state,\n                                     int old_type)\n{\n    FILE *f = fopen(\"/tmp/logs/530.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f,\n                \"%s: global_task_id=%lu opaque_arg=%p thread_key=%lu old_state=%d old_type=%d return_before=%d return_after=%d\\n\",\n                stage,\n                global_task_id_val,\n                opaque_arg,\n                thread_key_val,\n                old_state,\n                old_type,\n                return_before_assign,\n                return_after_assign);\n        fclose(f);\n    }\n}\n\nint32 OS_TaskRegister_Impl(osal_id_t global_task_id)\n{\n    int32                    return_code;\n    OS_VoidPtrValueWrapper_t arg;\n    int                      old_state;\n    int                      old_type;\n\n    /*\n     * Set cancel state=ENABLED, type=DEFERRED\n     * This should be the default for new threads, but\n     * setting explicitly to be sure that a pthread_join()\n     * will work as expected in case this thread is deleted.\n     */\n    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_state);\n    pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &old_type);\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = global_task_id;\n\n    /* Log state just before calling pthread_setspecific to capture inputs */\n    OS_TaskRegister_Impl_log(\"before_setspecific\",\n                             (unsigned long)global_task_id,\n                             arg.opaque_arg,\n                             (unsigned long)POSIX_GlobalVars.ThreadKey,\n                             -1, /* return_before_assign not known yet */\n                             -1,\n                             old_state,\n                             old_type);\n\n    return_code = pthread_setspecific(POSIX_GlobalVars.ThreadKey, arg.opaque_arg);\n\n    /* Capture value returned by pthread_setspecific for forensic evidence */\n    if (return_code == 0)\n    {\n        /* Log the state immediately before the (potentially redundant) assignment */\n        OS_TaskRegister_Impl_log(\"after_setspecific_before_assign\",\n                                 (unsigned long)global_task_id,\n                                 arg.opaque_arg,\n                                 (unsigned long)POSIX_GlobalVars.ThreadKey,\n                                 return_code,\n                                 return_code, /* placeholder, will be same after assign */\n                                 old_state,\n                                 old_type);\n\n        /* Preserve original logic: assigning OS_SUCCESS when return_code == 0 */\n        return_code = OS_SUCCESS;\n\n        /* Log the state after the assignment so a reviewer can confirm no state change */\n        OS_TaskRegister_Impl_log(\"after_setspecific_after_assign\",\n                                 (unsigned long)global_task_id,\n                                 arg.opaque_arg,\n                                 (unsigned long)POSIX_GlobalVars.ThreadKey,\n                                 0,\n                                 return_code,\n                                 old_state,\n                                 old_type);\n    }\n    else\n    {\n        OS_DEBUG(\"OS_TaskRegister_Impl failed during pthread_setspecific() error=%s\\n\", strerror(return_code));\n\n        /* Log the error path and the error code */\n        OS_TaskRegister_Impl_log(\"setspecific_error\",\n                                 (unsigned long)global_task_id,\n                                 arg.opaque_arg,\n                                 (unsigned long)POSIX_GlobalVars.ThreadKey,\n                                 return_code,\n                                 OS_ERROR,\n                                 old_state,\n                                 old_type);\n\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n"
}