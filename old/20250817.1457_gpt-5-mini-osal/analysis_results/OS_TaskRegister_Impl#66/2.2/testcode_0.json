{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe local variables old_state and old_type exist solely to supply addresses to pthread_setcancelstate() and pthread_setcanceltype(); the functions write into them but their values are never read afterwards. Those writes (dead stores) are executed yet removing the variables and passing NULL instead would not change the program behaviour, so this is dead code under MISRA C 2023 Rule 2.2. (Fix: remove the unused variables and pass NULL or otherwise avoid the unused output parameters.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskRegister_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/530.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskRegister_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskRegister_Impl:\n```c\nint32 OS_TaskRegister_Impl(osal_id_t global_task_id)\n{\n    int32                    return_code;\n    OS_VoidPtrValueWrapper_t arg;\n    int                      old_state;\n    int                      old_type;\n\n    /*\n     * Set cancel state=ENABLED, type=DEFERRED\n     * This should be the default for new threads, but\n     * setting explicitly to be sure that a pthread_join()\n     * will work as expected in case this thread is deleted.\n     */\n    pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_state);\n    pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &old_type);\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = global_task_id;\n\n    return_code = pthread_setspecific(POSIX_GlobalVars.ThreadKey, arg.opaque_arg);\n    if (return_code == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"OS_TaskRegister_Impl failed during pthread_setspecific() error=%s\\n\", strerror(return_code));\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskRegister_Impl code.\n",
  "test_code": "int32 OS_TaskRegister_Impl(osal_id_t global_task_id)\n{\n    int32                    return_code;\n    OS_VoidPtrValueWrapper_t arg;\n    int                      old_state = -1;  /* initialize to a sentinel to make logging safe */\n    int                      old_type  = -1;  /* initialize to a sentinel to make logging safe */\n    int                      rc_state;\n    int                      rc_type;\n    FILE                    *logf = NULL;\n\n    /* Open log file for appending probe information.  This is only for\n     * diagnostics and must not change the functional behaviour of the\n     * function. Failure to open the log file is ignored to avoid\n     * interfering with normal operation. */\n    logf = fopen(\"/tmp/logs/530.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_TaskRegister_Impl: enter global_task_id=%u\\n\", (unsigned)global_task_id);\n        fprintf(logf, \"OS_TaskRegister_Impl: old_state(addr=%p, value=%d) old_type(addr=%p, value=%d) before calls\\n\",\n                (void *)&old_state, old_state, (void *)&old_type, old_type);\n    }\n\n    /*\n     * Set cancel state=ENABLED, type=DEFERRED\n     * This should be the default for new threads, but\n     * setting explicitly to be sure that a pthread_join()\n     * will work as expected in case this thread is deleted.\n     */\n    rc_state = pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &old_state);\n    rc_type  = pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &old_type);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_TaskRegister_Impl: pthread_setcancelstate rc=%d wrote old_state(addr=%p, value=%d)\\n\",\n                rc_state, (void *)&old_state, old_state);\n        fprintf(logf, \"OS_TaskRegister_Impl: pthread_setcanceltype  rc=%d wrote old_type (addr=%p, value=%d)\\n\",\n                rc_type, (void *)&old_type, old_type);\n    }\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = global_task_id;\n\n    return_code = pthread_setspecific(POSIX_GlobalVars.ThreadKey, arg.opaque_arg);\n    if (return_code == 0)\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TaskRegister_Impl: pthread_setspecific rc=0 -> OS_SUCCESS\\n\");\n        }\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TaskRegister_Impl: pthread_setspecific rc=%d (errno-like) error=%s -> OS_ERROR\\n\",\n                    return_code, strerror(return_code));\n        }\n        OS_DEBUG(\"OS_TaskRegister_Impl failed during pthread_setspecific() error=%s\\n\", strerror(return_code));\n        return_code = OS_ERROR;\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_TaskRegister_Impl: exit return_code=%d\\n\\n\", return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}