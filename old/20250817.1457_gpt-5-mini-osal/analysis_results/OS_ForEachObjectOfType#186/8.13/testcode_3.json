{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator API and callbacks use plain void * for read-only context pointers. In this call the second argument is OS_ForEachDoCallback, which has the signature int32 OS_ForEachDoCallback(osal_id_t, void *). The callback (and the match function OS_ForEachFilterCreator) only read from the pointed OS_creator_filter_t and do not modify it, so the pointer should be const-qualified (e.g. const void * or int32 (*)(osal_id_t, const void *)). Similarly iter->arg and the matcharg parameter could be const void *.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachObjectOfType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1491.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ForEachObjectOfType as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ForEachObjectOfType:\n```c\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_ForEachObjectOfType code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nstatic void os_log_trace(const char *where,\n                         unsigned long idtype_ul,\n                         unsigned long creator_id_ul,\n                         const void *cb_ptr,\n                         const void *cb_arg,\n                         int result,\n                         int iter_count)\n{\n    FILE *f = fopen(\"/tmp/logs/1491.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_ForEachObjectOfType: %s | idtype=0x%lx creator_id=0x%lx callback_ptr=%p callback_arg=%p result=%d iter=%d\\n\",\n                where, idtype_ul, creator_id_ul, cb_ptr, cb_arg, result, iter_count);\n        fclose(f);\n    }\n}\n\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n    int                 init_result;\n    int                 iter_count = 0;\n\n    /* Log entry into the function */\n    os_log_trace(\"enter\", (unsigned long)idtype, (unsigned long)creator_id,\n                 (const void *)callback_ptr, (const void *)callback_arg, -1, 0);\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    /* Log populated filter values */\n    os_log_trace(\"filter_populated\", (unsigned long)idtype, (unsigned long)filter.creator_id,\n                 (const void *)filter.user_callback, (const void *)filter.user_arg, -1, 0);\n\n    init_result = OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter);\n\n    /* Log result of iterator init */\n    os_log_trace(\"init_result\", (unsigned long)idtype, (unsigned long)creator_id,\n                 (const void *)callback_ptr, (const void *)callback_arg, init_result, 0);\n\n    if (init_result == OS_SUCCESS)\n    {\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            iter_count++;\n\n            /* Log before processing each entry */\n            os_log_trace(\"processing_entry\", (unsigned long)idtype, (unsigned long)creator_id,\n                         (const void *)callback_ptr, (const void *)callback_arg, init_result, iter_count);\n\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n        }\n\n        /* Log before destroying iterator with total iterations count */\n        os_log_trace(\"destroy_iterator\", (unsigned long)idtype, (unsigned long)creator_id,\n                     (const void *)callback_ptr, (const void *)callback_arg, init_result, iter_count);\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n}\n"
}