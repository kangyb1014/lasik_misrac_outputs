{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_ForEachDoCallback takes a non-const void *ref and casts it to OS_creator_filter_t *filter, but it only reads fields from filter (user_callback and user_arg) and does not modify the pointed-to data. According to MISRA C 2023 Rule 8.13 the pointer should be const-qualified (e.g. const void *ref and const OS_creator_filter_t *filter) whenever possible. Thus the current use of a non-const pointer is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachObjectOfType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1491.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ForEachObjectOfType as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ForEachObjectOfType:\n```c\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_ForEachObjectOfType code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helper: append a formatted message to the evidence log. */\nstatic void append_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1491.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    /* Record entry and parameter values. Cast to integer types for logging portability. */\n    append_log(\"OS_ForEachObjectOfType ENTRY: idtype=%llu, creator_id=%llu, callback_ptr=%p, callback_arg=%p\",\n               (unsigned long long)(uintptr_t)idtype,\n               (unsigned long long)(uintptr_t)creator_id,\n               (void *)(uintptr_t)callback_ptr,\n               (void *)(uintptr_t)callback_arg);\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    /* Log the prepared filter contents and its address. This shows the non-const pointer being passed. */\n    append_log(\"filter prepared: addr=%p, creator_id=%llu, user_callback=%p, user_arg=%p\",\n               (void *)(uintptr_t)&filter,\n               (unsigned long long)(uintptr_t)filter.creator_id,\n               (void *)(uintptr_t)filter.user_callback,\n               (void *)(uintptr_t)filter.user_arg);\n\n    int init_rc = OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter);\n    append_log(\"OS_ObjectIdIteratorInit returned %d\", init_rc);\n\n    if (init_rc == OS_SUCCESS)\n    {\n        unsigned long long loop_count = 0ULL;\n\n        append_log(\"Iterator initialized successfully. Beginning iteration. filter_addr=%p\", (void *)(uintptr_t)&filter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            loop_count++;\n            /* Log before processing each entry. This captures the control path and the filter pointer used by the iterator. */\n            append_log(\"Iteration %llu: calling OS_ObjectIdIteratorProcessEntry with callback OS_ForEachDoCallback, filter_addr=%p\",\n                       loop_count,\n                       (void *)(uintptr_t)&filter);\n\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n\n            /* Log after processing the entry. */\n            append_log(\"Iteration %llu: returned from OS_ObjectIdIteratorProcessEntry\", loop_count);\n        }\n\n        append_log(\"Iteration finished after %llu entries. Destroying iterator.\", loop_count);\n\n        OS_ObjectIdIteratorDestroy(&iter);\n\n        append_log(\"Iterator destroyed. Exiting OS_ForEachObjectOfType.\");\n    }\n    else\n    {\n        append_log(\"Iterator initialization failed (rc=%d). Exiting OS_ForEachObjectOfType.\", init_rc);\n    }\n}\n"
}