{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'record' is declared as OS_common_record_t *record but is only used for read-only access (record->active_id) and is passed to a function that expects a const OS_common_record_t *; it should be declared as const OS_common_record_t *record. This violates MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachObjectOfType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1491.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ForEachObjectOfType as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ForEachObjectOfType:\n```c\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_ForEachObjectOfType code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\nstatic void OS_ForEach_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1491.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fclose(f);\n    }\n}\n\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n    int                 loop_count = 0;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    OS_ForEach_Log(\"OS_ForEachObjectOfType ENTRY: idtype=%lu creator_id=%lu callback_ptr=%p callback_arg=%p\\n\",\n                   (unsigned long)idtype, (unsigned long)creator_id, (void *)callback_ptr, callback_arg);\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        OS_ForEach_Log(\"Iterator initialized successfully: iter=%p\\n\", (void *)&iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            loop_count++;\n            OS_ForEach_Log(\"Iterator GetNext TRUE (entry #%d): iter=%p\\n\", loop_count, (void *)&iter);\n\n            OS_ForEach_Log(\"About to call OS_ObjectIdIteratorProcessEntry for entry #%d: iter=%p callback=OS_ForEachDoCallback\\n\",\n                           loop_count, (void *)&iter);\n\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n\n            OS_ForEach_Log(\"Returned from OS_ObjectIdIteratorProcessEntry for entry #%d\\n\", loop_count);\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        OS_ForEach_Log(\"Iterator destroyed after %d processed entries: iter=%p\\n\", loop_count, (void *)&iter);\n    }\n    else\n    {\n        OS_ForEach_Log(\"Iterator initialization failed: idtype=%lu creator_id=%lu\\n\",\n                       (unsigned long)idtype, (unsigned long)creator_id);\n    }\n\n    OS_ForEach_Log(\"OS_ForEachObjectOfType EXIT: processed_entries=%d\\n\", loop_count);\n}\n"
}