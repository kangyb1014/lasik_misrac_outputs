{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe OS_object_iter_t contains a non-const pointer field `OS_common_record_t *base` that is only used for read-only access (e.g. OS_ObjectIdIteratorGetNext reads record->active_id and passes the record as a const pointer to match functions). Therefore `base` could and should be declared as `const OS_common_record_t *base` so the pointer points to a const-qualified type. (Note: `arg` remains `void *` because match/callback prototypes expect a mutable void pointer.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachObjectOfType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1491.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ForEachObjectOfType as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ForEachObjectOfType:\n```c\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_ForEachObjectOfType code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper to log messages to /tmp/logs/1491.txt */\nstatic void OS_ForEach_log(const char *tag, const void *iter_ptr, unsigned long long idtype,\n                           unsigned long long creator_id, void *callback_ptr, void *callback_arg, int rc, int iteration)\n{\n    FILE *f = fopen(\"/tmp/logs/1491.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"%s: tag=%s\\n\", __func__, tag);\n    fprintf(f, \"  idtype=%llu, creator_id=%llu\\n\", idtype, creator_id);\n    fprintf(f, \"  callback_ptr=%p, callback_arg=%p\\n\", callback_ptr, callback_arg);\n    fprintf(f, \"  iter_ptr=%p, rc=%d, iteration=%d\\n\", iter_ptr, rc, iteration);\n    fflush(f);\n    fclose(f);\n}\n\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    /* Log entry to function with initial state */\n    OS_ForEach_log(\"enter\", (const void *)&iter, (unsigned long long)idtype, (unsigned long long)creator_id,\n                   (void *)callback_ptr, callback_arg, 0, 0);\n\n    /* Call init and capture return code so it can be logged */\n    int init_rc = OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter);\n\n    /* Log result of iterator init. Attempt to log iter.base if present by printing iter pointer; callers\n       can inspect the memory or instrument other tools to see the non-const base pointer inside iter. */\n    OS_ForEach_log(\"after_init\", (const void *)&iter, (unsigned long long)idtype, (unsigned long long)creator_id,\n                   (void *)callback_ptr, callback_arg, init_rc, 0);\n\n    if (init_rc == OS_SUCCESS)\n    {\n        int iteration = 0;\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            iteration++;\n\n            /* Log before processing each entry */\n            OS_ForEach_log(\"before_process_entry\", (const void *)&iter, (unsigned long long)idtype,\n                           (unsigned long long)creator_id, (void *)callback_ptr, callback_arg, 0, iteration);\n\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n\n            /* Log after processing each entry */\n            OS_ForEach_log(\"after_process_entry\", (const void *)&iter, (unsigned long long)idtype,\n                           (unsigned long long)creator_id, (void *)callback_ptr, callback_arg, 0, iteration);\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n\n        /* Final log on successful completion */\n        OS_ForEach_log(\"done\", (const void *)&iter, (unsigned long long)idtype, (unsigned long long)creator_id,\n                       (void *)callback_ptr, callback_arg, 0, iteration);\n    }\n    else\n    {\n        /* Log failure to initialize iterator */\n        OS_ForEach_log(\"init_failed\", (const void *)&iter, (unsigned long long)idtype, (unsigned long long)creator_id,\n                       (void *)callback_ptr, callback_arg, init_rc, 0);\n    }\n}\n"
}