{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_ForEachFilterCreator accepts a non-const void *ref and immediately assigns it to a non-const OS_creator_filter_t *filter, but the function only reads from the filter (filter->creator_id) and does not modify it. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. Here the parameter and the local pointer could be const (e.g. change the parameter to const void *ref or the local pointer to const OS_creator_filter_t *filter = ref), so the current code violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachObjectOfType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1491.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ForEachObjectOfType as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ForEachObjectOfType:\n```c\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_ForEachObjectOfType code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n\n/* Probe helper: append a formatted log line to the required file. */\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1491.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', fp);\n    fclose(fp);\n}\n\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    /* Log entry and incoming parameter values (addresses/values) */\n    probe_logf(\"OS_ForEachObjectOfType ENTRY: idtype=%llu, creator_id=%llu, callback_ptr_addr=%p, callback_arg=%p\",\n               (unsigned long long)(uintptr_t)idtype,\n               (unsigned long long)(uintptr_t)creator_id,\n               (const void *)&callback_ptr,\n               callback_arg);\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    /* Log the constructed filter state and its address before passing to iterator init */\n    probe_logf(\"Filter constructed: &filter=%p, filter.creator_id=%llu, filter.user_callback_addr=%p, filter.user_arg=%p\",\n               (const void *)&filter,\n               (unsigned long long)(uintptr_t)filter.creator_id,\n               (const void *)&filter.user_callback,\n               filter.user_arg);\n\n    /* Preserve original logic while capturing the return code for logging */\n    int init_status = OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter);\n    probe_logf(\"OS_ObjectIdIteratorInit returned: %d\", init_status);\n\n    if (init_status == OS_SUCCESS)\n    {\n        probe_logf(\"Iterator initialized successfully. Entering iteration loop. iterator_addr=%p\", (const void *)&iter);\n\n        unsigned long long iter_count = 0ULL;\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            iter_count++;\n            probe_logf(\"Iterator got next (iteration #%llu). iterator_addr=%p\", iter_count, (const void *)&iter);\n\n            /* Log just before processing each entry */\n            probe_logf(\"Processing entry #%llu with OS_ObjectIdIteratorProcessEntry (iterator_addr=%p)\", iter_count, (const void *)&iter);\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n\n            /* Optionally log after processing this entry */\n            probe_logf(\"Processed entry #%llu\", iter_count);\n        }\n\n        probe_logf(\"Iteration loop complete. total_iterations=%llu\", iter_count);\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        probe_logf(\"Iterator destroyed. iterator_addr=%p\", (const void *)&iter);\n    }\n    else\n    {\n        probe_logf(\"Iterator initialization failed (status=%d). Skipping iteration.\", init_status);\n    }\n\n    probe_logf(\"OS_ForEachObjectOfType EXIT: idtype=%llu, creator_id=%llu\", (unsigned long long)(uintptr_t)idtype, (unsigned long long)(uintptr_t)creator_id);\n}\n"
}