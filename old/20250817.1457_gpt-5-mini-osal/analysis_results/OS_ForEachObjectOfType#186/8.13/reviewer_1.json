{
  "user_message": "An agent A claimed that the following OS_ForEachObjectOfType code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_ForEachObjectOfType.\n```c\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'record' is declared as OS_common_record_t *record but is only used for read-only access (record->active_id) and is passed to a function that expects a const OS_common_record_t *; it should be declared as const OS_common_record_t *record. This violates MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types whenever possible).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_ForEach_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1491.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fclose(f);\n    }\n}\n\nvoid OS_ForEachObjectOfType(osal_objtype_t idtype, osal_id_t creator_id, OS_ArgCallback_t callback_ptr,\n                            void *callback_arg)\n{\n    OS_object_iter_t    iter;\n    OS_creator_filter_t filter;\n    int                 loop_count = 0;\n\n    filter.creator_id    = creator_id;\n    filter.user_callback = callback_ptr;\n    filter.user_arg      = callback_arg;\n\n    OS_ForEach_Log(\"OS_ForEachObjectOfType ENTRY: idtype=%lu creator_id=%lu callback_ptr=%p callback_arg=%p\\n\",\n                   (unsigned long)idtype, (unsigned long)creator_id, (void *)callback_ptr, callback_arg);\n\n    if (OS_ObjectIdIteratorInit(OS_ForEachFilterCreator, &filter, idtype, &iter) == OS_SUCCESS)\n    {\n        OS_ForEach_Log(\"Iterator initialized successfully: iter=%p\\n\", (void *)&iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            loop_count++;\n            OS_ForEach_Log(\"Iterator GetNext TRUE (entry #%d): iter=%p\\n\", loop_count, (void *)&iter);\n\n            OS_ForEach_Log(\"About to call OS_ObjectIdIteratorProcessEntry for entry #%d: iter=%p callback=OS_ForEachDoCallback\\n\",\n                           loop_count, (void *)&iter);\n\n            OS_ObjectIdIteratorProcessEntry(&iter, OS_ForEachDoCallback);\n\n            OS_ForEach_Log(\"Returned from OS_ObjectIdIteratorProcessEntry for entry #%d\\n\", loop_count);\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        OS_ForEach_Log(\"Iterator destroyed after %d processed entries: iter=%p\\n\", loop_count, (void *)&iter);\n    }\n    else\n    {\n        OS_ForEach_Log(\"Iterator initialization failed: idtype=%lu creator_id=%lu\\n\",\n                       (unsigned long)idtype, (unsigned long)creator_id);\n    }\n\n    OS_ForEach_Log(\"OS_ForEachObjectOfType EXIT: processed_entries=%d\\n\", loop_count);\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_ForEachObjectOfType ENTRY: idtype=9 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=9 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=8 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=8 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=1 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=1 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=0 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=0 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=1 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=1 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=2 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=2 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=3 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=3 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=4 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=4 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=5 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=5 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=6 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=6 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=7 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=7 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=8 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=8 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=9 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=9 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=10 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=10 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=11 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=11 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=12 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=12 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=13 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=13 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=14 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=14 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=15 creator_id=0 callback_ptr=0x559298c70988 callback_arg=0x7ffcd3f01050\nIterator initialization failed: idtype=15 creator_id=0\nOS_ForEachObjectOfType EXIT: processed_entries=0\nOS_ForEachObjectOfType ENTRY: idtype=9 creator_id=0 callback_ptr=0x559298c7\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not supported. The posted OS_ForEachObjectOfType implementation contains no local pointer named 'record' and does not show a pointer that is only used for read-only access but declared non-const. The function stores values into a local filter struct and passes a void* user_arg and a callback pointer; these are intentionally non-const (callback_arg is user data that may be mutable). The supplied test log shows the iterator initialization always fails and no entries are processed, so the alleged read-only use of a 'record' never occurs in the observed execution. Because the reported variable and scenario do not appear in the provided function and there is no evidence that a pointer could or should be const-qualified here, the report of a MISRA C:2023 Rule 8.13 violation is incorrect."
}