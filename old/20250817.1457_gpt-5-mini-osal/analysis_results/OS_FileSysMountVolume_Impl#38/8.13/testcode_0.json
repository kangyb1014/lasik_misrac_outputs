{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'local' is declared as a non-const pointer (OS_filesys_internal_record_t *local) but the function only reads fields from the referenced structure (system_mountpt, fstype) and does not modify it. According to MISRA C 2023 Rule 8.13 it should be declared to point to a const-qualified type, e.g. const OS_filesys_internal_record_t *local, to enforce read-only access and prevent accidental modification. The OS_OBJECT_TABLE_GET macro returns a non-const pointer, but assigning it to a const-qualified pointer is allowed, so the current declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysMountVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/307.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysMountVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysMountVolume_Impl:\n```c\nint32 OS_FileSysMountVolume_Impl(const OS_object_token_t *token)\n{\n    OS_filesys_internal_record_t *local;\n    struct stat                   stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /*\n     * This will do a mkdir() for the mount point if it does\n     * not already exist.\n     */\n    if (stat(local->system_mountpt, &stat_buf) != 0)\n    {\n        if (mkdir(local->system_mountpt, 0700) < 0)\n        {\n            OS_DEBUG(\"ERROR: Cannot create mount point %s: %s\", local->system_mountpt, strerror(errno));\n            return OS_FS_ERR_DRIVE_NOT_CREATED;\n        }\n    }\n    else if (!S_ISDIR(stat_buf.st_mode))\n    {\n        OS_DEBUG(\"ERROR: Volume %s exists and is not a directory\", local->system_mountpt);\n        return OS_FS_ERR_DRIVE_NOT_CREATED;\n    }\n\n    /*\n     * NOTE: The mount() system call could be used here to actually\n     * mount a disk, if warranted.  For all current POSIX-based PSPs,\n     * this is not needed, because the volumes are all pre-mounted\n     * through the system init before OSAL starts.\n     *\n     * For volatile filesystems (ramdisk) these were created within\n     * a temp filesystem, so all that is needed is to ensure the\n     * mount point exists.  For any other FS type, trigger an\n     * error to indicate that it is not implemented in this OSAL.\n     */\n    if (local->fstype != OS_FILESYS_TYPE_VOLATILE_DISK && local->fstype != OS_FILESYS_TYPE_FS_BASED)\n    {\n        /* the mount command is not implemented for this FS type */\n        return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysMountVolume_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/stat.h>\n\n/*\n * Probe function: append human-readable trace information to /tmp/logs/307.txt.\n * Does not change program state; used only for diagnostics.\n */\nstatic void osal_probe_log(const char *stage, const char *mountpt, int fstype, const struct stat *st, int saved_errno)\n{\n    FILE *fp = fopen(\"/tmp/logs/307.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* Best-effort logging only; do not alter program flow if logging fails */\n        return;\n    }\n\n    fprintf(fp, \"[OS_FileSysMountVolume_Impl] stage=%s\\n\", stage ? stage : \"(null)\");\n\n    if (mountpt != NULL)\n    {\n        fprintf(fp, \"  mountpt='%s'\\n\", mountpt);\n    }\n    else\n    {\n        fprintf(fp, \"  mountpt=(null)\\n\");\n    }\n\n    fprintf(fp, \"  fstype=%d\\n\", fstype);\n\n    if (st != NULL)\n    {\n        fprintf(fp, \"  stat: st_mode=0%o st_size=%lld\\n\", (unsigned int)st->st_mode, (long long)st->st_size);\n    }\n    else\n    {\n        fprintf(fp, \"  stat: (null)\\n\");\n    }\n\n    if (saved_errno != 0)\n    {\n        fprintf(fp, \"  errno=%d (%s)\\n\", saved_errno, strerror(saved_errno));\n    }\n\n    fprintf(fp, \"---\\n\");\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_FileSysMountVolume_Impl(const OS_object_token_t *token)\n{\n    OS_filesys_internal_record_t *local;\n    struct stat                   stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Log state immediately after obtaining \"local\" */\n    osal_probe_log(\"after_get\", local ? local->system_mountpt : NULL, local ? local->fstype : -1, NULL, 0);\n\n    /*\n     * This will do a mkdir() for the mount point if it does\n     * not already exist.\n     */\n    osal_probe_log(\"before_stat\", local ? local->system_mountpt : NULL, local ? local->fstype : -1, NULL, 0);\n    if (stat(local->system_mountpt, &stat_buf) != 0)\n    {\n        int saved_errno = errno;\n        osal_probe_log(\"stat_failed\", local->system_mountpt, local->fstype, NULL, saved_errno);\n\n        if (mkdir(local->system_mountpt, 0700) < 0)\n        {\n            int mkdir_errno = errno;\n            /* Log mkdir failure details */\n            osal_probe_log(\"mkdir_failed\", local->system_mountpt, local->fstype, NULL, mkdir_errno);\n\n            OS_DEBUG(\"ERROR: Cannot create mount point %s: %s\", local->system_mountpt, strerror(errno));\n            return OS_FS_ERR_DRIVE_NOT_CREATED;\n        }\n        else\n        {\n            /* mkdir succeeded; record that the directory was created */\n            osal_probe_log(\"mkdir_succeeded\", local->system_mountpt, local->fstype, NULL, 0);\n        }\n    }\n    else if (!S_ISDIR(stat_buf.st_mode))\n    {\n        /* Log that path exists but is not a directory */\n        osal_probe_log(\"exists_not_dir\", local->system_mountpt, local->fstype, &stat_buf, 0);\n\n        OS_DEBUG(\"ERROR: Volume %s exists and is not a directory\", local->system_mountpt);\n        return OS_FS_ERR_DRIVE_NOT_CREATED;\n    }\n    else\n    {\n        /* Path exists and is a directory */\n        osal_probe_log(\"exists_is_dir\", local->system_mountpt, local->fstype, &stat_buf, 0);\n    }\n\n    /*\n     * NOTE: The mount() system call could be used here to actually\n     * mount a disk, if warranted.  For all current POSIX-based PSPs,\n     * this is not needed, because the volumes are all pre-mounted\n     * through the system init before OSAL starts.\n     *\n     * For volatile filesystems (ramdisk) these were created within\n     * a temp filesystem, so all that is needed is to ensure the\n     * mount point exists.  For any other FS type, trigger an\n     * error to indicate that it is not implemented in this OSAL.\n     */\n    osal_probe_log(\"before_fstype_check\", local->system_mountpt, local->fstype, &stat_buf, 0);\n    if (local->fstype != OS_FILESYS_TYPE_VOLATILE_DISK && local->fstype != OS_FILESYS_TYPE_FS_BASED)\n    {\n        /* the mount command is not implemented for this FS type */\n        osal_probe_log(\"not_implemented_fstype\", local->system_mountpt, local->fstype, &stat_buf, 0);\n        return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    osal_probe_log(\"success\", local->system_mountpt, local->fstype, &stat_buf, 0);\n    return OS_SUCCESS;\n}\n"
}