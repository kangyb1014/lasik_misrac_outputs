{
  "user_message": "An agent A claimed that the following OS_FileSysMountVolume_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileSysMountVolume_Impl.\n```c\nint32 OS_FileSysMountVolume_Impl(const OS_object_token_t *token)\n{\n    OS_filesys_internal_record_t *local;\n    struct stat                   stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /*\n     * This will do a mkdir() for the mount point if it does\n     * not already exist.\n     */\n    if (stat(local->system_mountpt, &stat_buf) != 0)\n    {\n        if (mkdir(local->system_mountpt, 0700) < 0)\n        {\n            OS_DEBUG(\"ERROR: Cannot create mount point %s: %s\", local->system_mountpt, strerror(errno));\n            return OS_FS_ERR_DRIVE_NOT_CREATED;\n        }\n    }\n    else if (!S_ISDIR(stat_buf.st_mode))\n    {\n        OS_DEBUG(\"ERROR: Volume %s exists and is not a directory\", local->system_mountpt);\n        return OS_FS_ERR_DRIVE_NOT_CREATED;\n    }\n\n    /*\n     * NOTE: The mount() system call could be used here to actually\n     * mount a disk, if warranted.  For all current POSIX-based PSPs,\n     * this is not needed, because the volumes are all pre-mounted\n     * through the system init before OSAL starts.\n     *\n     * For volatile filesystems (ramdisk) these were created within\n     * a temp filesystem, so all that is needed is to ensure the\n     * mount point exists.  For any other FS type, trigger an\n     * error to indicate that it is not implemented in this OSAL.\n     */\n    if (local->fstype != OS_FILESYS_TYPE_VOLATILE_DISK && local->fstype != OS_FILESYS_TYPE_FS_BASED)\n    {\n        /* the mount command is not implemented for this FS type */\n        return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The variable 'local' is declared as a non-const pointer (OS_filesys_internal_record_t *local) but is only used for read-only access (reading system_mountpt and fstype). The assignment local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token) therefore produces a non-const pointer where a pointer to const-qualified type should be used. Per MISRA C 2023 Rule 8.13, 'local' should be declared as const OS_filesys_internal_record_t * to reflect read-only access.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nextern OS_filesys_internal_record_t OS_filesys_table[];\nvoid OS_DEBUG(const char *fmt, ...)\n{\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(stderr, fmt, args);\n    fprintf(stderr, \"\\n\");\n    va_end(args);\n}\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/307.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging file cannot be opened, still print to stderr for visibility */\n        va_list args;\n        va_start(args, fmt);\n        vfprintf(stderr, fmt, args);\n        fprintf(stderr, \"\\n\");\n        va_end(args);\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    fprintf(fp, \"\\n\");\n    va_end(args);\n    fclose(fp);\n}\n\nint32 OS_FileSysMountVolume_Impl(const OS_object_token_t *token)\n{\n    OS_filesys_internal_record_t *local;\n    struct stat                   stat_buf;\n\n    /* Record token and entry into function. Print the pointer value to avoid\n     * assumptions about the internals of OS_object_token_t. */\n    probe_log(\"ENTER: OS_FileSysMountVolume_Impl token=%p\", (const void *)token);\n\n    if (token == NULL)\n    {\n        probe_log(\"ERROR: NULL token passed to OS_FileSysMountVolume_Impl\");\n        OS_DEBUG(\"ERROR: Invalid token (NULL)\");\n        probe_log(\"EXIT: OS_FileSysMountVolume_Impl -> %d\", OS_FS_ERR_DRIVE_NOT_CREATED);\n        return OS_FS_ERR_DRIVE_NOT_CREATED;\n    }\n\n    /* Use the project's macro to convert the token to a table entry. */\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Log the result of the table lookup and key fields from the record. */\n    if (local == NULL)\n    {\n        probe_log(\"ERROR: OS_OBJECT_TABLE_GET returned NULL for token=%p\", (const void *)token);\n        OS_DEBUG(\"ERROR: Invalid token (lookup returned NULL)\");\n        probe_log(\"EXIT: OS_FileSysMountVolume_Impl -> %d\", OS_FS_ERR_DRIVE_NOT_CREATED);\n        return OS_FS_ERR_DRIVE_NOT_CREATED;\n    }\n    else\n    {\n        probe_log(\"LOOKUP: token=%p -> local=%p\", (const void *)token, (void *)local);\n        probe_log(\"STATE: local->system_mountpt=\\\"%s\\\", local->fstype=%d\",\n                  local->system_mountpt ? local->system_mountpt : \"(null)\", local->fstype);\n    }\n\n    /* This will do a mkdir() for the mount point if it does not already exist. */\n    probe_log(\"ACTION: calling stat on %s\", local->system_mountpt ? local->system_mountpt : \"(null)\");\n    if (stat(local->system_mountpt, &stat_buf) != 0)\n    {\n        probe_log(\"RESULT: stat returned error errno=%d (%s)\", errno, strerror(errno));\n        if (mkdir(local->system_mountpt, 0700) < 0)\n        {\n            probe_log(\"ERROR: mkdir failed for %s errno=%d (%s)\", local->system_mountpt, errno, strerror(errno));\n            OS_DEBUG(\"ERROR: Cannot create mount point %s: %s\", local->system_mountpt, strerror(errno));\n            probe_log(\"EXIT: OS_FileSysMountVolume_Impl -> %d\", OS_FS_ERR_DRIVE_NOT_CREATED);\n            return OS_FS_ERR_DRIVE_NOT_CREATED;\n        }\n        else\n        {\n            probe_log(\"INFO: mkdir succeeded for %s\", local->system_mountpt);\n        }\n    }\n    else if (!S_ISDIR(stat_buf.st_mode))\n    {\n        probe_log(\"ERROR: Path exists and is not a directory: %s (mode=0%o)\", local->system_mountpt, stat_buf.st_mode);\n        OS_DEBUG(\"ERROR: Volume %s exists and is not a directory\", local->system_mountpt);\n        probe_log(\"EXIT: OS_FileSysMountVolume_Impl -> %d\", OS_FS_ERR_DRIVE_NOT_CREATED);\n        return OS_FS_ERR_DRIVE_NOT_CREATED;\n    }\n    else\n    {\n        probe_log(\"INFO: Path exists and is a directory: %s (mode=0%o)\", local->system_mountpt, stat_buf.st_mode);\n    }\n\n    /* Check supported filesystem types. Rely on project-provided constants. */\n    probe_log(\"CHECK: fstype=%d against VOLATILE(%d) and FS_BASED(%d)\", local->fstype, OS_FILESYS_TYPE_VOLATILE_DISK, OS_FILESYS_TYPE_FS_BASED);\n    if (local->fstype != OS_FILESYS_TYPE_VOLATILE_DISK && local->fstype != OS_FILESYS_TYPE_FS_BASED)\n    {\n        probe_log(\"UNSUPPORTED: fstype=%d -> returning %d\", local->fstype, OS_ERR_NOT_IMPLEMENTED);\n        /* the mount command is not implemented for this FS type */\n        return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    probe_log(\"EXIT: OS_FileSysMountVolume_Impl -> %d\", OS_SUCCESS);\n    return OS_SUCCESS;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the shown function 'local' is only used for read-only access (reading local->system_mountpt and local->fstype) and there are no writes through that pointer. MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types whenever possible; therefore 'local' should be declared as a pointer-to-const: const OS_filesys_internal_record_t *local. Assigning the non-const pointer returned by the OS_OBJECT_TABLE_GET macro to a pointer-to-const is type-compatible (allowed), so this change is feasible and would remove the rule violation. (Be aware of any project-specific macros or APIs that expect a non-const pointer; if such usage exists elsewhere, that would need review, but for this function the change is appropriate.)"
}