{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct member 'char *address' is not const-qualified. If this pointer is intended to refer to read\u2011only data (e.g. an immutable device/address string or configuration data) and the code never modifies *address, it should be declared 'const char *address'. As shown, there is no evidence the pointee is modified, so the declaration violates MISRA C 2023 Rule 8.13. If, however, the design requires modifying the pointed-to buffer, then the non-const is justified (no violation).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysMountVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/307.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysMountVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysMountVolume_Impl:\n```c\nint32 OS_FileSysMountVolume_Impl(const OS_object_token_t *token)\n{\n    OS_filesys_internal_record_t *local;\n    struct stat                   stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /*\n     * This will do a mkdir() for the mount point if it does\n     * not already exist.\n     */\n    if (stat(local->system_mountpt, &stat_buf) != 0)\n    {\n        if (mkdir(local->system_mountpt, 0700) < 0)\n        {\n            OS_DEBUG(\"ERROR: Cannot create mount point %s: %s\", local->system_mountpt, strerror(errno));\n            return OS_FS_ERR_DRIVE_NOT_CREATED;\n        }\n    }\n    else if (!S_ISDIR(stat_buf.st_mode))\n    {\n        OS_DEBUG(\"ERROR: Volume %s exists and is not a directory\", local->system_mountpt);\n        return OS_FS_ERR_DRIVE_NOT_CREATED;\n    }\n\n    /*\n     * NOTE: The mount() system call could be used here to actually\n     * mount a disk, if warranted.  For all current POSIX-based PSPs,\n     * this is not needed, because the volumes are all pre-mounted\n     * through the system init before OSAL starts.\n     *\n     * For volatile filesystems (ramdisk) these were created within\n     * a temp filesystem, so all that is needed is to ensure the\n     * mount point exists.  For any other FS type, trigger an\n     * error to indicate that it is not implemented in this OSAL.\n     */\n    if (local->fstype != OS_FILESYS_TYPE_VOLATILE_DISK && local->fstype != OS_FILESYS_TYPE_FS_BASED)\n    {\n        /* the mount command is not implemented for this FS type */\n        return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysMountVolume_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helper - appends human-readable diagnostic information to /tmp/logs/307.txt */\nstatic void OS_FileSysMountVolume_Impl_log_probe(const OS_filesys_internal_record_t *local,\n                                                  const struct stat *stat_buf,\n                                                  const char *stage)\n{\n    FILE *fp = fopen(\"/tmp/logs/307.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Best-effort logging only */\n    }\n\n    time_t t = time(NULL);\n    fprintf(fp, \"\\n--- OS_FileSysMountVolume_Impl probe (%s) @ %ld ---\\n\", stage, (long)t);\n\n    /* Log the local pointer and some interpreted members if available */\n    fprintf(fp, \"local pointer = %p\\n\", (const void *)local);\n    if (local != NULL)\n    {\n        /* system_mountpt is expected to be a char * inside the record; log pointer and contents safely */\n        fprintf(fp, \"system_mountpt pointer = %p\\n\", (const void *)local->system_mountpt);\n        if (local->system_mountpt != NULL)\n        {\n            /* limit string length to avoid overly large logs */\n            char buf[256] = {0};\n            strncpy(buf, local->system_mountpt, sizeof(buf) - 1);\n            fprintf(fp, \"system_mountpt content = \\\"%s\\\"\\n\", buf);\n        }\n        else\n        {\n            fprintf(fp, \"system_mountpt content = (NULL)\\n\");\n        }\n\n        /* fstype is typically an integer/enum value */\n        fprintf(fp, \"fstype value = %d\\n\", (int)local->fstype);\n\n        /* If a stat_buf is provided, log the mode and other fields useful to reason about S_ISDIR */\n        if (stat_buf != NULL)\n        {\n            fprintf(fp, \"stat_buf: st_mode = 0%o, st_ino = %lu, st_dev = %lu, st_nlink = %lu\\n\",\n                    (unsigned int)stat_buf->st_mode,\n                    (unsigned long)stat_buf->st_ino,\n                    (unsigned long)stat_buf->st_dev,\n                    (unsigned long)stat_buf->st_nlink);\n        }\n\n        /* Dump the first 64 bytes of the structure memory to give downstream analyzers raw bytes\n         * which can be inspected to find candidate pointer fields (e.g. a \"char *address\"). */\n        {\n            const unsigned char *p = (const unsigned char *)local;\n            size_t dump_len = 64;\n            fprintf(fp, \"local raw bytes (first %zu):\", dump_len);\n            for (size_t i = 0; i < dump_len; ++i)\n            {\n                fprintf(fp, \" %02x\", (unsigned)p[i]);\n            }\n            fprintf(fp, \"\\n\");\n        }\n    }\n\n    /* Record errno if present (useful after mkdir/stat failures) */\n    fprintf(fp, \"errno = %d (%s)\\n\", errno, strerror(errno));\n\n    fclose(fp);\n}\n\nint32 OS_FileSysMountVolume_Impl(const OS_object_token_t *token)\n{\n    OS_filesys_internal_record_t *local;\n    struct stat                   stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Probe: entry with initial state */\n    OS_FileSysMountVolume_Impl_log_probe(local, NULL, \"entry\");\n\n    /*\n     * This will do a mkdir() for the mount point if it does\n     * not already exist.\n     */\n    if (stat(local->system_mountpt, &stat_buf) != 0)\n    {\n        /* Probe: stat failed, log state and errno */\n        OS_FileSysMountVolume_Impl_log_probe(local, &stat_buf, \"stat_failed_before_mkdir\");\n\n        if (mkdir(local->system_mountpt, 0700) < 0)\n        {\n            /* Probe: mkdir failed - capture state and errno */\n            OS_FileSysMountVolume_Impl_log_probe(local, &stat_buf, \"mkdir_failed\");\n\n            OS_DEBUG(\"ERROR: Cannot create mount point %s: %s\", local->system_mountpt, strerror(errno));\n            return OS_FS_ERR_DRIVE_NOT_CREATED;\n        }\n        else\n        {\n            /* Probe: mkdir succeeded - capture post-mkdir state */\n            OS_FileSysMountVolume_Impl_log_probe(local, &stat_buf, \"mkdir_succeeded\");\n        }\n    }\n    else if (!S_ISDIR(stat_buf.st_mode))\n    {\n        /* Probe: exists but not directory */\n        OS_FileSysMountVolume_Impl_log_probe(local, &stat_buf, \"exists_not_directory\");\n\n        OS_DEBUG(\"ERROR: Volume %s exists and is not a directory\", local->system_mountpt);\n        return OS_FS_ERR_DRIVE_NOT_CREATED;\n    }\n\n    /*\n     * NOTE: The mount() system call could be used here to actually\n     * mount a disk, if warranted.  For all current POSIX-based PSPs,\n     * this is not needed, because the volumes are all pre-mounted\n     * through the system init before OSAL starts.\n     *\n     * For volatile filesystems (ramdisk) these were created within\n     * a temp filesystem, so all that is needed is to ensure the\n     * mount point exists.  For any other FS type, trigger an\n     * error to indicate that it is not implemented in this OSAL.\n     */\n    /* Probe: about to check fstype */\n    OS_FileSysMountVolume_Impl_log_probe(local, &stat_buf, \"before_fstype_check\");\n\n    if (local->fstype != OS_FILESYS_TYPE_VOLATILE_DISK && local->fstype != OS_FILESYS_TYPE_FS_BASED)\n    {\n        /* the mount command is not implemented for this FS type */\n        OS_FileSysMountVolume_Impl_log_probe(local, &stat_buf, \"fstype_not_implemented\");\n        return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    /* Probe: successful end state */\n    OS_FileSysMountVolume_Impl_log_probe(local, &stat_buf, \"success_return\");\n\n    return OS_SUCCESS;\n}\n"
}