{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable 'local' is declared as a non-const pointer (OS_filesys_internal_record_t *local) but is only used for read-only access (reading system_mountpt and fstype). The assignment local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token) therefore produces a non-const pointer where a pointer to const-qualified type should be used. Per MISRA C 2023 Rule 8.13, 'local' should be declared as const OS_filesys_internal_record_t * to reflect read-only access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysMountVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/307.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysMountVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysMountVolume_Impl:\n```c\nint32 OS_FileSysMountVolume_Impl(const OS_object_token_t *token)\n{\n    OS_filesys_internal_record_t *local;\n    struct stat                   stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /*\n     * This will do a mkdir() for the mount point if it does\n     * not already exist.\n     */\n    if (stat(local->system_mountpt, &stat_buf) != 0)\n    {\n        if (mkdir(local->system_mountpt, 0700) < 0)\n        {\n            OS_DEBUG(\"ERROR: Cannot create mount point %s: %s\", local->system_mountpt, strerror(errno));\n            return OS_FS_ERR_DRIVE_NOT_CREATED;\n        }\n    }\n    else if (!S_ISDIR(stat_buf.st_mode))\n    {\n        OS_DEBUG(\"ERROR: Volume %s exists and is not a directory\", local->system_mountpt);\n        return OS_FS_ERR_DRIVE_NOT_CREATED;\n    }\n\n    /*\n     * NOTE: The mount() system call could be used here to actually\n     * mount a disk, if warranted.  For all current POSIX-based PSPs,\n     * this is not needed, because the volumes are all pre-mounted\n     * through the system init before OSAL starts.\n     *\n     * For volatile filesystems (ramdisk) these were created within\n     * a temp filesystem, so all that is needed is to ensure the\n     * mount point exists.  For any other FS type, trigger an\n     * error to indicate that it is not implemented in this OSAL.\n     */\n    if (local->fstype != OS_FILESYS_TYPE_VOLATILE_DISK && local->fstype != OS_FILESYS_TYPE_FS_BASED)\n    {\n        /* the mount command is not implemented for this FS type */\n        return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysMountVolume_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <stdlib.h>\n\n/* Minimal typedefs and constants to allow standalone compilation for testing. */\ntypedef int int32;\ntypedef int OS_object_token_t;\n\ntypedef struct\n{\n    const char *system_mountpt;\n    int         fstype;\n} OS_filesys_internal_record_t;\n\n/* Return codes and filesystem type constants (stand-ins for the real OSAL values) */\nstatic const int OS_FILESYS_TYPE_VOLATILE_DISK = 1;\nstatic const int OS_FILESYS_TYPE_FS_BASED     = 2;\nstatic const int OS_FS_ERR_DRIVE_NOT_CREATED  = -1;\nstatic const int OS_ERR_NOT_IMPLEMENTED       = -2;\nstatic const int OS_SUCCESS                   = 0;\n\n/* A simple global table for the test harness. */\nstatic OS_filesys_internal_record_t OS_filesys_table[4] =\n{\n    { \"/tmp/mount0\", OS_FILESYS_TYPE_VOLATILE_DISK },\n    { \"/tmp/mount1\", OS_FILESYS_TYPE_FS_BASED },\n    { \"/tmp/mount2\", 999 }, /* unsupported type */\n    { \"/dev/null\", OS_FILESYS_TYPE_FS_BASED }\n};\n\n/* Stand-in for the original table-get macro/function. */\nOS_filesys_internal_record_t *OS_OBJECT_TABLE_GET(OS_filesys_internal_record_t *table, OS_object_token_t token)\n{\n    /* Basic bounds check for safety in this test harness */\n    if (token < 0 || token >= (int)(sizeof(OS_filesys_table) / sizeof(OS_filesys_table[0])))\n    {\n        return NULL;\n    }\n    return &table[token];\n}\n\n/* Simple debug function used in the original codebase (stand-in). */\nvoid OS_DEBUG(const char *fmt, ...)\n{\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(stderr, fmt, args);\n    fprintf(stderr, \"\\n\");\n    va_end(args);\n}\n\n/* Probe logger that appends control-flow and state info to /tmp/logs/307.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/307.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging file cannot be opened, still print to stderr for visibility */\n        va_list args;\n        va_start(args, fmt);\n        vfprintf(stderr, fmt, args);\n        fprintf(stderr, \"\\n\");\n        va_end(args);\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    fprintf(fp, \"\\n\");\n    va_end(args);\n    fclose(fp);\n}\n\n/* The target function with inserted probes. The original logic is preserved. */\nint32 OS_FileSysMountVolume_Impl(const OS_object_token_t *token)\n{\n    OS_filesys_internal_record_t *local;\n    struct stat                   stat_buf;\n\n    /* Record token and entry into function */\n    probe_log(\"ENTER: OS_FileSysMountVolume_Impl token=%d\", (token != NULL) ? *token : -1);\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Log the result of the table lookup and key fields from the record. */\n    if (local == NULL)\n    {\n        probe_log(\"ERROR: OS_OBJECT_TABLE_GET returned NULL for token=%d\", *token);\n        OS_DEBUG(\"ERROR: Invalid token %d\", *token);\n        probe_log(\"EXIT: OS_FileSysMountVolume_Impl -> OS_FS_ERR_DRIVE_NOT_CREATED\");\n        return OS_FS_ERR_DRIVE_NOT_CREATED;\n    }\n    else\n    {\n        probe_log(\"LOOKUP: token=%d -> local=%p\", *token, (void *)local);\n        probe_log(\"STATE: local->system_mountpt=\\\"%s\\\", local->fstype=%d\", local->system_mountpt ? local->system_mountpt : \"(null)\", local->fstype);\n    }\n\n    /*\n     * This will do a mkdir() for the mount point if it does\n     * not already exist.\n     */\n    probe_log(\"ACTION: calling stat on %s\", local->system_mountpt ? local->system_mountpt : \"(null)\");\n    if (stat(local->system_mountpt, &stat_buf) != 0)\n    {\n        probe_log(\"RESULT: stat returned error errno=%d (%s)\", errno, strerror(errno));\n        if (mkdir(local->system_mountpt, 0700) < 0)\n        {\n            probe_log(\"ERROR: mkdir failed for %s errno=%d (%s)\", local->system_mountpt, errno, strerror(errno));\n            OS_DEBUG(\"ERROR: Cannot create mount point %s: %s\", local->system_mountpt, strerror(errno));\n            probe_log(\"EXIT: OS_FileSysMountVolume_Impl -> OS_FS_ERR_DRIVE_NOT_CREATED\");\n            return OS_FS_ERR_DRIVE_NOT_CREATED;\n        }\n        else\n        {\n            probe_log(\"INFO: mkdir succeeded for %s\", local->system_mountpt);\n        }\n    }\n    else if (!S_ISDIR(stat_buf.st_mode))\n    {\n        probe_log(\"ERROR: Path exists and is not a directory: %s (mode=0%o)\", local->system_mountpt, stat_buf.st_mode);\n        OS_DEBUG(\"ERROR: Volume %s exists and is not a directory\", local->system_mountpt);\n        probe_log(\"EXIT: OS_FileSysMountVolume_Impl -> OS_FS_ERR_DRIVE_NOT_CREATED\");\n        return OS_FS_ERR_DRIVE_NOT_CREATED;\n    }\n    else\n    {\n        probe_log(\"INFO: Path exists and is a directory: %s (mode=0%o)\", local->system_mountpt, stat_buf.st_mode);\n    }\n\n    /*\n     * NOTE: The mount() system call could be used here to actually\n     * mount a disk, if warranted.  For all current POSIX-based PSPs,\n     * this is not needed, because the volumes are all pre-mounted\n     * through the system init before OSAL starts.\n     *\n     * For volatile filesystems (ramdisk) these were created within\n     * a temp filesystem, so all that is needed is to ensure the\n     * mount point exists.  For any other FS type, trigger an\n     * error to indicate that it is not implemented in this OSAL.\n     */\n    probe_log(\"CHECK: fstype=%d against VOLATILE(%d) and FS_BASED(%d)\", local->fstype, OS_FILESYS_TYPE_VOLATILE_DISK, OS_FILESYS_TYPE_FS_BASED);\n    if (local->fstype != OS_FILESYS_TYPE_VOLATILE_DISK && local->fstype != OS_FILESYS_TYPE_FS_BASED)\n    {\n        probe_log(\"UNSUPPORTED: fstype=%d -> returning OS_ERR_NOT_IMPLEMENTED\", local->fstype);\n        /* the mount command is not implemented for this FS type */\n        return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    probe_log(\"EXIT: OS_FileSysMountVolume_Impl -> OS_SUCCESS\");\n    return OS_SUCCESS;\n}\n"
}