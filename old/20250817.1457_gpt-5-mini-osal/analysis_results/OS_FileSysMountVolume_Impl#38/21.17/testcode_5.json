{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential out-of-bounds read: memchr(dev_name, 0, sizeof(filesys->volume_name)) scans sizeof(volume_name) bytes starting at dev_name, but dev_name points into the caller-supplied phys_path buffer. The earlier OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), ...) only guarantees phys_path is null-terminated within sizeof(system_mountpt) bytes, not that there are at least sizeof(filesys->volume_name) bytes available from dev_name to the end of phys_path. If sizeof(filesys->volume_name) is larger than the remaining bytes in phys_path starting at dev_name (for example phys_path is a 20-byte buffer with dev_name at offset 10 while sizeof(volume_name) == 64), memchr will read beyond the phys_path object -> violation of Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysMountVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/311.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysMountVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysMountVolume_Impl:\n```c\nint32 OS_FileSysMountVolume_Impl(const OS_object_token_t *token)\n{\n    OS_filesys_internal_record_t *local;\n    struct stat                   stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /*\n     * This will do a mkdir() for the mount point if it does\n     * not already exist.\n     */\n    if (stat(local->system_mountpt, &stat_buf) != 0)\n    {\n        if (mkdir(local->system_mountpt, 0700) < 0)\n        {\n            OS_DEBUG(\"ERROR: Cannot create mount point %s: %s\", local->system_mountpt, strerror(errno));\n            return OS_FS_ERR_DRIVE_NOT_CREATED;\n        }\n    }\n    else if (!S_ISDIR(stat_buf.st_mode))\n    {\n        OS_DEBUG(\"ERROR: Volume %s exists and is not a directory\", local->system_mountpt);\n        return OS_FS_ERR_DRIVE_NOT_CREATED;\n    }\n\n    /*\n     * NOTE: The mount() system call could be used here to actually\n     * mount a disk, if warranted.  For all current POSIX-based PSPs,\n     * this is not needed, because the volumes are all pre-mounted\n     * through the system init before OSAL starts.\n     *\n     * For volatile filesystems (ramdisk) these were created within\n     * a temp filesystem, so all that is needed is to ensure the\n     * mount point exists.  For any other FS type, trigger an\n     * error to indicate that it is not implemented in this OSAL.\n     */\n    if (local->fstype != OS_FILESYS_TYPE_VOLATILE_DISK && local->fstype != OS_FILESYS_TYPE_FS_BASED)\n    {\n        /* the mount command is not implemented for this FS type */\n        return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysMountVolume_Impl code.\n",
  "test_code": "int32 OS_FileSysMountVolume_Impl(const OS_object_token_t *token)\n{\n    OS_filesys_internal_record_t *local;\n    struct stat                   stat_buf;\n\n    /* Probe log: function entry */\n    {\n        FILE *f = fopen(\"/tmp/logs/311.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"OS_FileSysMountVolume_Impl ENTRY: token=%p\\n\", (const void *)token);\n            fclose(f);\n        }\n    }\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Probe log: resolved local object info */\n    {\n        FILE *f = fopen(\"/tmp/logs/311.txt\", \"a\");\n        if (f)\n        {\n            if (local == NULL)\n            {\n                fprintf(f, \"OS_FileSysMountVolume_Impl: local == NULL (invalid token)\\n\");\n            }\n            else\n            {\n                const char *mp = local->system_mountpt ? local->system_mountpt : \"(NULL)\";\n                size_t mp_len = 0;\n                if (local->system_mountpt)\n                {\n                    /* Use strlen for observed length (note: original code also uses this string in stat/mkdir) */\n                    mp_len = strlen(local->system_mountpt);\n                }\n\n                fprintf(f, \"OS_FileSysMountVolume_Impl: local=%p, system_mountpt=%p, system_mountpt_str=\\\"%s\\\", system_mountpt_len=%zu, fstype=%d\\n\",\n                        (void *)local, (void *)local->system_mountpt, mp, mp_len, (int)local->fstype);\n            }\n            fclose(f);\n        }\n    }\n\n    /*\n     * This will do a mkdir() for the mount point if it does\n     * not already exist.\n     */\n    if (stat(local->system_mountpt, &stat_buf) != 0)\n    {\n        /* Probe: stat failed */\n        {\n            FILE *f = fopen(\"/tmp/logs/311.txt\", \"a\");\n            if (f)\n            {\n                fprintf(f, \"stat(%s) != 0 -> errno=%d (%s)\\n\",\n                        local->system_mountpt ? local->system_mountpt : \"(NULL)\", errno, strerror(errno));\n                fclose(f);\n            }\n        }\n\n        if (mkdir(local->system_mountpt, 0700) < 0)\n        {\n            /* Probe: mkdir failed */\n            {\n                FILE *f = fopen(\"/tmp/logs/311.txt\", \"a\");\n                if (f)\n                {\n                    fprintf(f, \"mkdir(%s) < 0 -> errno=%d (%s)\\n\",\n                            local->system_mountpt ? local->system_mountpt : \"(NULL)\", errno, strerror(errno));\n                    fclose(f);\n                }\n            }\n\n            OS_DEBUG(\"ERROR: Cannot create mount point %s: %s\", local->system_mountpt, strerror(errno));\n            /* Probe: returning error OS_FS_ERR_DRIVE_NOT_CREATED */\n            {\n                FILE *f = fopen(\"/tmp/logs/311.txt\", \"a\");\n                if (f)\n                {\n                    fprintf(f, \"RETURN: OS_FS_ERR_DRIVE_NOT_CREATED\\n\");\n                    fclose(f);\n                }\n            }\n            return OS_FS_ERR_DRIVE_NOT_CREATED;\n        }\n    }\n    else if (!S_ISDIR(stat_buf.st_mode))\n    {\n        OS_DEBUG(\"ERROR: Volume %s exists and is not a directory\", local->system_mountpt);\n        /* Probe: not a directory */\n        {\n            FILE *f = fopen(\"/tmp/logs/311.txt\", \"a\");\n            if (f)\n            {\n                fprintf(f, \"stat path exists but not a directory: path=%s, st_mode=0%o\\n\",\n                        local->system_mountpt ? local->system_mountpt : \"(NULL)\", (unsigned int)stat_buf.st_mode);\n                fprintf(f, \"RETURN: OS_FS_ERR_DRIVE_NOT_CREATED\\n\");\n                fclose(f);\n            }\n        }\n        return OS_FS_ERR_DRIVE_NOT_CREATED;\n    }\n\n    /*\n     * NOTE: The mount() system call could be used here to actually\n     * mount a disk, if warranted.  For all current POSIX-based PSPs,\n     * this is not needed, because the volumes are all pre-mounted\n     * through the system init before OSAL starts.\n     *\n     * For volatile filesystems (ramdisk) these were created within\n     * a temp filesystem, so all that is needed is to ensure the\n     * mount point exists.  For any other FS type, trigger an\n     * error to indicate that it is not implemented in this OSAL.\n     */\n    if (local->fstype != OS_FILESYS_TYPE_VOLATILE_DISK && local->fstype != OS_FILESYS_TYPE_FS_BASED)\n    {\n        /* the mount command is not implemented for this FS type */\n        /* Probe: not implemented for this fstype */\n        {\n            FILE *f = fopen(\"/tmp/logs/311.txt\", \"a\");\n            if (f)\n            {\n                fprintf(f, \"fstype=%d not supported -> RETURN: OS_ERR_NOT_IMPLEMENTED\\n\", (int)local->fstype);\n                fclose(f);\n            }\n        }\n        return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    /* Probe: success */\n    {\n        FILE *f = fopen(\"/tmp/logs/311.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"RETURN: OS_SUCCESS\\n\");\n            fclose(f);\n        }\n    }\n\n    return OS_SUCCESS;\n}\n"
}