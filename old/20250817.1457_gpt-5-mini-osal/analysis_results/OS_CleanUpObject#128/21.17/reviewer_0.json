{
  "user_message": "An agent A claimed that the following OS_CleanUpObject code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_CleanUpObject.\n```c\nvoid OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n\n    ObjectCount = (uint32 *)arg;\n    ++(*ObjectCount);\n    switch (OS_IdentifyObject(object_id))\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            OS_TaskDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            OS_QueueDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            OS_BinSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            OS_CountSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            OS_MutSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            OS_ModuleUnload(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            OS_TimeBaseDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            OS_TimerDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            OS_close(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            OS_DirectoryClose(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            OS_CondVarDelete(object_id);\n            break;\n        default:\n            break;\n    }\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The call strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) is invoked without validating that either pointer is non-NULL and points to a NUL-terminated buffer. For example, if the caller passes TypeName == NULL (or if ContentTypeStr points to a non-NUL-terminated buffer), strcmp will dereference/read past the object bounds, causing an out-of-bounds access and violating MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1031.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nvoid OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n\n    probe_log(\"OS_CleanUpObject: enter object_id=%lu arg=%p\", (unsigned long)object_id, arg);\n\n    ObjectCount = (uint32 *)arg;\n    if (ObjectCount == NULL)\n    {\n        probe_log(\"OS_CleanUpObject: ObjectCount pointer is NULL; cannot increment\");\n    }\n    else\n    {\n        probe_log(\"OS_CleanUpObject: ObjectCount pointer=%p value_before=%lu\", (void *)ObjectCount, (unsigned long)(*ObjectCount));\n        ++(*ObjectCount);\n        probe_log(\"OS_CleanUpObject: ObjectCount value_after=%lu\", (unsigned long)(*ObjectCount));\n    }\n\n    /* Capture the identified object type once and log it for traceability */\n    uint32 Identified = OS_IdentifyObject(object_id);\n    probe_log(\"OS_CleanUpObject: OS_IdentifyObject returned=%lu\", (unsigned long)Identified);\n\n    switch (Identified)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_TaskDelete(%lu)\", (unsigned long)object_id);\n            OS_TaskDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_QueueDelete(%lu)\", (unsigned long)object_id);\n            OS_QueueDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_BinSemDelete(%lu)\", (unsigned long)object_id);\n            OS_BinSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_CountSemDelete(%lu)\", (unsigned long)object_id);\n            OS_CountSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_MutSemDelete(%lu)\", (unsigned long)object_id);\n            OS_MutSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_ModuleUnload(%lu)\", (unsigned long)object_id);\n            OS_ModuleUnload(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_TimeBaseDelete(%lu)\", (unsigned long)object_id);\n            OS_TimeBaseDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_TimerDelete(%lu)\", (unsigned long)object_id);\n            OS_TimerDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_close(%lu)\", (unsigned long)object_id);\n            OS_close(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_DirectoryClose(%lu)\", (unsigned long)object_id);\n            OS_DirectoryClose(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_CondVarDelete(%lu)\", (unsigned long)object_id);\n            OS_CondVarDelete(object_id);\n            break;\n        default:\n            probe_log(\"OS_CleanUpObject: dispatch -> default (no action) for object_id=%lu\", (unsigned long)object_id);\n            break;\n    }\n\n    probe_log(\"OS_CleanUpObject: exit object_id=%lu\", (unsigned long)object_id);\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_CleanUpObject. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The reported violation is incorrect. Rule 21.17 concerns use of string.h functions (e.g. strcmp, memcpy, memset, strlen, etc.) and preventing out\u2011of\u2011bounds reads/writes from their pointer parameters. The provided OS_CleanUpObject implementation contains no calls to any string handling functions \u2014 there is no strcmp or other <string.h> usage shown \u2014 so Rule 21.17 cannot be violated by this function as presented. \n\n(Separately: the original code does dereference a casted void* (ObjectCount = (uint32 *)arg; ++(*ObjectCount);) without a null check, which could be a different safety/undefined\u2011behavior concern or a violation of other MISRA rules, but that is unrelated to Rule 21.17. Also, the strcmp scenario referenced by agent A appears to refer to different code that is not in this function.)"
}