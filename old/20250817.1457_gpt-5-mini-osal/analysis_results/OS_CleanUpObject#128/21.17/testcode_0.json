{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) is invoked without validating that either pointer is non-NULL and points to a NUL-terminated buffer. For example, if the caller passes TypeName == NULL (or if ContentTypeStr points to a non-NUL-terminated buffer), strcmp will dereference/read past the object bounds, causing an out-of-bounds access and violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CleanUpObject code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1031.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CleanUpObject as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CleanUpObject:\n```c\nvoid OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n\n    ObjectCount = (uint32 *)arg;\n    ++(*ObjectCount);\n    switch (OS_IdentifyObject(object_id))\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            OS_TaskDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            OS_QueueDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            OS_BinSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            OS_CountSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            OS_MutSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            OS_ModuleUnload(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            OS_TimeBaseDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            OS_TimerDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            OS_close(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            OS_DirectoryClose(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            OS_CondVarDelete(object_id);\n            break;\n        default:\n            break;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_CleanUpObject code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/1031.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1031.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nvoid OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n\n    probe_log(\"OS_CleanUpObject: enter object_id=%lu arg=%p\", (unsigned long)object_id, arg);\n\n    ObjectCount = (uint32 *)arg;\n    if (ObjectCount == NULL)\n    {\n        probe_log(\"OS_CleanUpObject: ObjectCount pointer is NULL; cannot increment\");\n    }\n    else\n    {\n        probe_log(\"OS_CleanUpObject: ObjectCount pointer=%p value_before=%lu\", (void *)ObjectCount, (unsigned long)(*ObjectCount));\n        ++(*ObjectCount);\n        probe_log(\"OS_CleanUpObject: ObjectCount value_after=%lu\", (unsigned long)(*ObjectCount));\n    }\n\n    /* Capture the identified object type once and log it for traceability */\n    uint32 Identified = OS_IdentifyObject(object_id);\n    probe_log(\"OS_CleanUpObject: OS_IdentifyObject returned=%lu\", (unsigned long)Identified);\n\n    switch (Identified)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_TaskDelete(%lu)\", (unsigned long)object_id);\n            OS_TaskDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_QueueDelete(%lu)\", (unsigned long)object_id);\n            OS_QueueDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_BinSemDelete(%lu)\", (unsigned long)object_id);\n            OS_BinSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_CountSemDelete(%lu)\", (unsigned long)object_id);\n            OS_CountSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_MutSemDelete(%lu)\", (unsigned long)object_id);\n            OS_MutSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_ModuleUnload(%lu)\", (unsigned long)object_id);\n            OS_ModuleUnload(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_TimeBaseDelete(%lu)\", (unsigned long)object_id);\n            OS_TimeBaseDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_TimerDelete(%lu)\", (unsigned long)object_id);\n            OS_TimerDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_close(%lu)\", (unsigned long)object_id);\n            OS_close(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_DirectoryClose(%lu)\", (unsigned long)object_id);\n            OS_DirectoryClose(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            probe_log(\"OS_CleanUpObject: dispatch -> OS_CondVarDelete(%lu)\", (unsigned long)object_id);\n            OS_CondVarDelete(object_id);\n            break;\n        default:\n            probe_log(\"OS_CleanUpObject: dispatch -> default (no action) for object_id=%lu\", (unsigned long)object_id);\n            break;\n    }\n\n    probe_log(\"OS_CleanUpObject: exit object_id=%lu\", (unsigned long)object_id);\n}\n"
}