{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe OS_DEBUG call in the error branch of OS_TaskDelete_Impl (the pthread_join failure path) performs only logging (side-effect-free w.r.t. program state/behavior). It is executed when pthread_join returns an error, but removing this debug print would not change return codes, object state, or control flow. Therefore this operation constitutes dead code per MISRA C 2023 Rule 2.2 (unless OS_DEBUG has required side-effects in this build configuration).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CleanUpObject code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1026.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CleanUpObject as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CleanUpObject:\n```c\nvoid OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n\n    ObjectCount = (uint32 *)arg;\n    ++(*ObjectCount);\n    switch (OS_IdentifyObject(object_id))\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            OS_TaskDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            OS_QueueDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            OS_BinSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            OS_CountSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            OS_MutSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            OS_ModuleUnload(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            OS_TimeBaseDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            OS_TimerDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            OS_close(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            OS_DirectoryClose(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            OS_CondVarDelete(object_id);\n            break;\n        default:\n            break;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_CleanUpObject code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <time.h>\n\n/* Probe helper: append a single line to the log file with timestamp and state */\nstatic void OS_CleanUpObject_Probe(const char *stage, osal_id_t object_id, uint32 count, int objtype)\n{\n    FILE *f = fopen(\"/tmp/logs/1026.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(f, \"%ld: %s - object_id=%lu count=%lu objtype=%d\\n\",\n                (long)t,\n                stage,\n                (unsigned long)object_id,\n                (unsigned long)count,\n                objtype);\n        fclose(f);\n    }\n}\n\nvoid OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n    int objtype;\n\n    ObjectCount = (uint32 *)arg;\n    ++(*ObjectCount);\n\n    /* Capture object type once so the probe and switch use the same value */\n    objtype = (int)OS_IdentifyObject(object_id);\n\n    /* Log the entry after increment with current state */\n    OS_CleanUpObject_Probe(\"OS_CleanUpObject: after increment\", object_id, *ObjectCount, objtype);\n\n    switch (objtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: about to delete TASK\", object_id, *ObjectCount, objtype);\n            OS_TaskDelete(object_id);\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: after delete TASK\", object_id, *ObjectCount, objtype);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: about to delete QUEUE\", object_id, *ObjectCount, objtype);\n            OS_QueueDelete(object_id);\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: after delete QUEUE\", object_id, *ObjectCount, objtype);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: about to delete BINSEM\", object_id, *ObjectCount, objtype);\n            OS_BinSemDelete(object_id);\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: after delete BINSEM\", object_id, *ObjectCount, objtype);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: about to delete COUNTSEM\", object_id, *ObjectCount, objtype);\n            OS_CountSemDelete(object_id);\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: after delete COUNTSEM\", object_id, *ObjectCount, objtype);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: about to delete MUTEX\", object_id, *ObjectCount, objtype);\n            OS_MutSemDelete(object_id);\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: after delete MUTEX\", object_id, *ObjectCount, objtype);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: about to unload MODULE\", object_id, *ObjectCount, objtype);\n            OS_ModuleUnload(object_id);\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: after unload MODULE\", object_id, *ObjectCount, objtype);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: about to delete TIMEBASE\", object_id, *ObjectCount, objtype);\n            OS_TimeBaseDelete(object_id);\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: after delete TIMEBASE\", object_id, *ObjectCount, objtype);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: about to delete TIMERCB\", object_id, *ObjectCount, objtype);\n            OS_TimerDelete(object_id);\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: after delete TIMERCB\", object_id, *ObjectCount, objtype);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: about to close STREAM\", object_id, *ObjectCount, objtype);\n            OS_close(object_id);\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: after close STREAM\", object_id, *ObjectCount, objtype);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: about to close DIR\", object_id, *ObjectCount, objtype);\n            OS_DirectoryClose(object_id);\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: after close DIR\", object_id, *ObjectCount, objtype);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: about to delete CONDVAR\", object_id, *ObjectCount, objtype);\n            OS_CondVarDelete(object_id);\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: after delete CONDVAR\", object_id, *ObjectCount, objtype);\n            break;\n        default:\n            OS_CleanUpObject_Probe(\"OS_CleanUpObject: default branch (no action)\", object_id, *ObjectCount, objtype);\n            break;\n    }\n}\n"
}