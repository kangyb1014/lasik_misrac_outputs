{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_IdentifyObject(object_id) yields a value not matched by any case label, the switch will take the default branch which only contains a 'break;'. That 'break' is executed but is a no-op \u2014 removing the default: break; statement (or the whole default branch) would not change program behaviour. Therefore this default branch is executed dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CleanUpObject code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1026.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CleanUpObject as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CleanUpObject:\n```c\nvoid OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n\n    ObjectCount = (uint32 *)arg;\n    ++(*ObjectCount);\n    switch (OS_IdentifyObject(object_id))\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            OS_TaskDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            OS_QueueDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            OS_BinSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            OS_CountSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            OS_MutSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            OS_ModuleUnload(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            OS_TimeBaseDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            OS_TimerDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            OS_close(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            OS_DirectoryClose(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            OS_CondVarDelete(object_id);\n            break;\n        default:\n            break;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_CleanUpObject code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper to record control flow and state. */\nstatic void OS_CleanUpObject_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1026.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fputc('\\n', f);\n        fclose(f);\n    }\n}\n\nvoid OS_CleanUpObject(osal_id_t object_id, void *arg)\n{\n    uint32 *ObjectCount;\n    int32 ident;\n\n    ObjectCount = (uint32 *)arg;\n    ++(*ObjectCount);\n\n    /* Log entry and current object count */\n    OS_CleanUpObject_log(\"OS_CleanUpObject ENTER: object_id=%d, ObjectCount=%u\", (int)object_id, (unsigned)(*ObjectCount));\n\n    /* Capture the identified object type for logging and use in the switch */\n    ident = OS_IdentifyObject(object_id);\n    OS_CleanUpObject_log(\"OS_IdentifyObject returned: %d for object_id=%d\", ident, (int)object_id);\n\n    switch (ident)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            OS_CleanUpObject_log(\"Branch: OS_OBJECT_TYPE_OS_TASK for id=%d\", (int)object_id);\n            OS_TaskDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            OS_CleanUpObject_log(\"Branch: OS_OBJECT_TYPE_OS_QUEUE for id=%d\", (int)object_id);\n            OS_QueueDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            OS_CleanUpObject_log(\"Branch: OS_OBJECT_TYPE_OS_BINSEM for id=%d\", (int)object_id);\n            OS_BinSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            OS_CleanUpObject_log(\"Branch: OS_OBJECT_TYPE_OS_COUNTSEM for id=%d\", (int)object_id);\n            OS_CountSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            OS_CleanUpObject_log(\"Branch: OS_OBJECT_TYPE_OS_MUTEX for id=%d\", (int)object_id);\n            OS_MutSemDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            OS_CleanUpObject_log(\"Branch: OS_OBJECT_TYPE_OS_MODULE for id=%d\", (int)object_id);\n            OS_ModuleUnload(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            OS_CleanUpObject_log(\"Branch: OS_OBJECT_TYPE_OS_TIMEBASE for id=%d\", (int)object_id);\n            OS_TimeBaseDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            OS_CleanUpObject_log(\"Branch: OS_OBJECT_TYPE_OS_TIMECB for id=%d\", (int)object_id);\n            OS_TimerDelete(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            OS_CleanUpObject_log(\"Branch: OS_OBJECT_TYPE_OS_STREAM for id=%d\", (int)object_id);\n            OS_close(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            OS_CleanUpObject_log(\"Branch: OS_OBJECT_TYPE_OS_DIR for id=%d\", (int)object_id);\n            OS_DirectoryClose(object_id);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            OS_CleanUpObject_log(\"Branch: OS_OBJECT_TYPE_OS_CONDVAR for id=%d\", (int)object_id);\n            OS_CondVarDelete(object_id);\n            break;\n        default:\n            /* Log that the default branch was taken. This provides evidence that\n               the default branch is executed in some scenarios (the original\n               default only performed 'break;'). */\n            OS_CleanUpObject_log(\"Branch: DEFAULT taken for id=%d (no matching object type)\", (int)object_id);\n            break;\n    }\n\n    OS_CleanUpObject_log(\"OS_CleanUpObject EXIT: object_id=%d\", (int)object_id);\n}\n"
}