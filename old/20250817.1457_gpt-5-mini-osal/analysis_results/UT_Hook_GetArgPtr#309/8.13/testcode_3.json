{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the member UT_StubArgMetaData_t.Name is declared as a non-const pointer (e.g. char *Name;), this fragment uses it only for reading (NULL check and strcmp) and therefore it should be declared const char *Name;. In that case Rule 8.13 is violated because the pointer does not point to a const-qualified type even though it can be const-qualified. (If Name is already declared as const char * then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Hook_GetArgPtr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2475.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Hook_GetArgPtr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Hook_GetArgPtr:\n```c\nconst void *UT_Hook_GetArgPtr(const UT_StubContext_t *ContextPtr, const char *Name, size_t ExpectedTypeSize)\n{\n    uint32                      i;\n    const void *                Result;\n    const UT_StubArgMetaData_t *MetaPtr;\n\n    static const union\n    {\n        unsigned long AsInt;\n        void *        AsPtr;\n        double        AsFloat;\n    } ARG_DEFAULT_ZERO_VALUE = {0};\n\n    Result = NULL;\n    for (i = 0; i < ContextPtr->ArgCount; ++i)\n    {\n        MetaPtr = &ContextPtr->Meta[i];\n        if (MetaPtr->Name != NULL)\n        {\n            if (strcmp(MetaPtr->Name, Name) == 0 && (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize))\n            {\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_DIRECT)\n                {\n                    Result = &ContextPtr->ArgPtr[i];\n                }\n                else if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_INDIRECT)\n                {\n                    Result = ContextPtr->ArgPtr[i];\n                }\n                break;\n            }\n        }\n    }\n\n    /*\n     * If no suitable result pointer was found, this means a mismatch\n     * between the stub and test case, such as a change in argument/parameter names.\n     * This is an error that should be corrected, so report it as a failure.\n     */\n    if (Result == NULL)\n    {\n        UtAssert_Failed(\"Requested parameter %s of size %lu which was not provided by the stub\", Name,\n                        (unsigned long)ExpectedTypeSize);\n\n        if (ExpectedTypeSize <= sizeof(ARG_DEFAULT_ZERO_VALUE))\n        {\n            Result = &ARG_DEFAULT_ZERO_VALUE;\n        }\n        else\n        {\n            /*\n             * As the caller will likely dereference the returned pointer, should\n             * never return NULL.  Just abort here.\n             */\n            UtAssert_Abort(\"No value for parameter\");\n        }\n    }\n\n    return Result;\n}\n```\n</target_code>\nPlease provide the modified UT_Hook_GetArgPtr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/*\n * Lightweight logging helper that appends diagnostic information to\n * /tmp/logs/2475.txt. Implemented as a simple function so it can be\n * dropped into the existing source file without changing any build\n * infrastructure. This helper preserves program behavior and only\n * performs side-effect logging.\n */\nstatic void UT_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2475.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging; do not change program flow */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    fprintf(fp, \"\\n\");\n    va_end(ap);\n\n    fclose(fp);\n}\n\nconst void *UT_Hook_GetArgPtr(const UT_StubContext_t *ContextPtr, const char *Name, size_t ExpectedTypeSize)\n{\n    uint32                      i;\n    const void *                Result;\n    const UT_StubArgMetaData_t *MetaPtr;\n\n    static const union\n    {\n        unsigned long AsInt;\n        void *        AsPtr;\n        double        AsFloat;\n    } ARG_DEFAULT_ZERO_VALUE = {0};\n\n    UT_Log(\"UT_Hook_GetArgPtr ENTRY: Name='%s' ExpectedTypeSize=%lu ArgCount=%u\", Name,\n           (unsigned long)ExpectedTypeSize, (unsigned)ContextPtr->ArgCount);\n\n    Result = NULL;\n    for (i = 0; i < ContextPtr->ArgCount; ++i)\n    {\n        MetaPtr = &ContextPtr->Meta[i];\n\n        /* Log basic metadata for this iteration */\n        UT_Log(\"iter=%u MetaPtr=%p Name_ptr=%p Name_str='%s' Size=%lu Type=%d\",\n               (unsigned)i, (void *)MetaPtr, (void *)MetaPtr->Name,\n               (MetaPtr->Name != NULL ? MetaPtr->Name : \"(null)\"), (unsigned long)MetaPtr->Size,\n               (int)MetaPtr->Type);\n\n        if (MetaPtr->Name != NULL)\n        {\n            int cmp = strcmp(MetaPtr->Name, Name);\n            UT_Log(\"iter=%u strcmp('%s','%s')=%d Size_match=%d\",\n                   (unsigned)i, MetaPtr->Name, Name, cmp,\n                   (int)(MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize));\n\n            if (cmp == 0 && (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize))\n            {\n                UT_Log(\"iter=%u MATCH found (Name='%s') at index %u; Type=%d\",\n                       (unsigned)i, MetaPtr->Name, (unsigned)i, (int)MetaPtr->Type);\n\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_DIRECT)\n                {\n                    Result = &ContextPtr->ArgPtr[i];\n                    UT_Log(\"iter=%u set Result -> &ContextPtr->ArgPtr[%u] = %p (DIRECT)\", (unsigned)i, (unsigned)i, Result);\n                }\n                else if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_INDIRECT)\n                {\n                    Result = ContextPtr->ArgPtr[i];\n                    UT_Log(\"iter=%u set Result = ContextPtr->ArgPtr[%u] = %p (INDIRECT)\", (unsigned)i, (unsigned)i, Result);\n                }\n                else\n                {\n                    UT_Log(\"iter=%u MATCH but unknown Type=%d; leaving Result as %p\", (unsigned)i, (int)MetaPtr->Type, Result);\n                }\n\n                break;\n            }\n        }\n        else\n        {\n            UT_Log(\"iter=%u Skipping: MetaPtr->Name is NULL\", (unsigned)i);\n        }\n    }\n\n    if (Result == NULL)\n    {\n        UT_Log(\"No suitable Result found for Name='%s' ExpectedTypeSize=%lu; calling UtAssert_Failed\", Name,\n               (unsigned long)ExpectedTypeSize);\n\n        UtAssert_Failed(\"Requested parameter %s of size %lu which was not provided by the stub\", Name,\n                        (unsigned long)ExpectedTypeSize);\n\n        if (ExpectedTypeSize <= sizeof(ARG_DEFAULT_ZERO_VALUE))\n        {\n            Result = &ARG_DEFAULT_ZERO_VALUE;\n            UT_Log(\"Using ARG_DEFAULT_ZERO_VALUE (%p) as fallback Result (size ok)\", Result);\n        }\n        else\n        {\n            UT_Log(\"ExpectedTypeSize %lu > ARG_DEFAULT_ZERO_VALUE size %lu; calling UtAssert_Abort\",\n                   (unsigned long)ExpectedTypeSize, (unsigned long)sizeof(ARG_DEFAULT_ZERO_VALUE));\n\n            UtAssert_Abort(\"No value for parameter\");\n        }\n    }\n    else\n    {\n        UT_Log(\"Returning Result=%p for Name='%s'\", Result, Name);\n    }\n\n    return Result;\n}\n"
}