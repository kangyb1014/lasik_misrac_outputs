{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(MetaPtr->Name, Name) only checks MetaPtr->Name != NULL but does not validate the parameter Name or that both strings are NUL-terminated. If the caller passes Name == NULL (or passes a non\u2013NUL-terminated buffer), strcmp will dereference/read beyond the bounds of the object referenced by Name, causing undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Hook_GetArgPtr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2479.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Hook_GetArgPtr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Hook_GetArgPtr:\n```c\nconst void *UT_Hook_GetArgPtr(const UT_StubContext_t *ContextPtr, const char *Name, size_t ExpectedTypeSize)\n{\n    uint32                      i;\n    const void *                Result;\n    const UT_StubArgMetaData_t *MetaPtr;\n\n    static const union\n    {\n        unsigned long AsInt;\n        void *        AsPtr;\n        double        AsFloat;\n    } ARG_DEFAULT_ZERO_VALUE = {0};\n\n    Result = NULL;\n    for (i = 0; i < ContextPtr->ArgCount; ++i)\n    {\n        MetaPtr = &ContextPtr->Meta[i];\n        if (MetaPtr->Name != NULL)\n        {\n            if (strcmp(MetaPtr->Name, Name) == 0 && (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize))\n            {\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_DIRECT)\n                {\n                    Result = &ContextPtr->ArgPtr[i];\n                }\n                else if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_INDIRECT)\n                {\n                    Result = ContextPtr->ArgPtr[i];\n                }\n                break;\n            }\n        }\n    }\n\n    /*\n     * If no suitable result pointer was found, this means a mismatch\n     * between the stub and test case, such as a change in argument/parameter names.\n     * This is an error that should be corrected, so report it as a failure.\n     */\n    if (Result == NULL)\n    {\n        UtAssert_Failed(\"Requested parameter %s of size %lu which was not provided by the stub\", Name,\n                        (unsigned long)ExpectedTypeSize);\n\n        if (ExpectedTypeSize <= sizeof(ARG_DEFAULT_ZERO_VALUE))\n        {\n            Result = &ARG_DEFAULT_ZERO_VALUE;\n        }\n        else\n        {\n            /*\n             * As the caller will likely dereference the returned pointer, should\n             * never return NULL.  Just abort here.\n             */\n            UtAssert_Abort(\"No value for parameter\");\n        }\n    }\n\n    return Result;\n}\n```\n</target_code>\nPlease provide the modified UT_Hook_GetArgPtr code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe logging helper for reproducing/reporting the scenario. */\nstatic void UT_2479_Log(const void *ContextPtr, const void *MetaPtr, const char *Name, size_t ExpectedTypeSize,\n                        unsigned int i, const char *where, unsigned long meta_size, unsigned int meta_type)\n{\n    FILE *f = fopen(\"/tmp/logs/2479.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    fprintf(f, \"UT_Hook_GetArgPtr LOG (%s)\\n\", where);\n    fprintf(f, \"  loop index i=%u\\n\", i);\n    fprintf(f, \"  ContextPtr=%p MetaPtr=%p\\n\", ContextPtr, MetaPtr);\n    fprintf(f, \"  MetaPtr->Name=%p Name=%p\\n\", (void *)MetaPtr, (void *)Name);\n    fprintf(f, \"  ExpectedTypeSize=%lu MetaPtr->Size=%lu MetaPtr->Type=%u\\n\",\n            (unsigned long)ExpectedTypeSize, (unsigned long)meta_size, meta_type);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nconst void *UT_Hook_GetArgPtr(const UT_StubContext_t *ContextPtr, const char *Name, size_t ExpectedTypeSize)\n{\n    uint32                      i;\n    const void *                Result;\n    const UT_StubArgMetaData_t *MetaPtr;\n\n    static const union\n    {\n        unsigned long AsInt;\n        void *        AsPtr;\n        double        AsFloat;\n    } ARG_DEFAULT_ZERO_VALUE = {0};\n\n    Result = NULL;\n    for (i = 0; i < ContextPtr->ArgCount; ++i)\n    {\n        MetaPtr = &ContextPtr->Meta[i];\n\n        /* Log entry for each candidate argument metadata. Do not dereference Name or MetaPtr->Name here. */\n        UT_2479_Log(ContextPtr, MetaPtr, Name, ExpectedTypeSize, (unsigned int)i, \"loop_entry\",\n                    MetaPtr->Size, (unsigned int)MetaPtr->Type);\n\n        if (MetaPtr->Name != NULL)\n        {\n            /* Log state immediately before calling strcmp. This will capture cases where Name is NULL. */\n            UT_2479_Log(ContextPtr, MetaPtr, Name, ExpectedTypeSize, (unsigned int)i, \"before_strcmp\",\n                        MetaPtr->Size, (unsigned int)MetaPtr->Type);\n\n            if (strcmp(MetaPtr->Name, Name) == 0 && (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize))\n            {\n                /* Log the match that was found */\n                UT_2479_Log(ContextPtr, MetaPtr, Name, ExpectedTypeSize, (unsigned int)i, \"match_found\",\n                            MetaPtr->Size, (unsigned int)MetaPtr->Type);\n\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_DIRECT)\n                {\n                    Result = &ContextPtr->ArgPtr[i];\n\n                    /* Log the resolved result pointer */\n                    UT_2479_Log(ContextPtr, MetaPtr, Name, ExpectedTypeSize, (unsigned int)i, \"result_direct\",\n                                MetaPtr->Size, (unsigned int)MetaPtr->Type);\n                }\n                else if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_INDIRECT)\n                {\n                    Result = ContextPtr->ArgPtr[i];\n\n                    /* Log the resolved indirect result pointer */\n                    UT_2479_Log(ContextPtr, MetaPtr, Name, ExpectedTypeSize, (unsigned int)i, \"result_indirect\",\n                                MetaPtr->Size, (unsigned int)MetaPtr->Type);\n                }\n                break;\n            }\n        }\n    }\n\n    /*\n     * If no suitable result pointer was found, this means a mismatch\n     * between the stub and test case, such as a change in argument/parameter names.\n     * This is an error that should be corrected, so report it as a failure.\n     */\n    if (Result == NULL)\n    {\n        /* Log the fact that no match was found prior to asserting. */\n        UT_2479_Log(ContextPtr, NULL, Name, ExpectedTypeSize, (unsigned int)i, \"no_result_before_assert\",\n                    0UL, 0U);\n\n        UtAssert_Failed(\"Requested parameter %s of size %lu which was not provided by the stub\", Name,\n                        (unsigned long)ExpectedTypeSize);\n\n        if (ExpectedTypeSize <= sizeof(ARG_DEFAULT_ZERO_VALUE))\n        {\n            Result = &ARG_DEFAULT_ZERO_VALUE;\n        }\n        else\n        {\n            /*\n             * As the caller will likely dereference the returned pointer, should\n             * never return NULL.  Just abort here.\n             */\n            UtAssert_Abort(\"No value for parameter\");\n        }\n    }\n\n    return Result;\n}\n"
}