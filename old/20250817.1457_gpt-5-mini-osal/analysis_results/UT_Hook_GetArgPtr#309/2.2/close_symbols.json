{
  "user_message": "Target function code is:\n```c\nconst void *UT_Hook_GetArgPtr(const UT_StubContext_t *ContextPtr, const char *Name, size_t ExpectedTypeSize)\n{\n    uint32                      i;\n    const void *                Result;\n    const UT_StubArgMetaData_t *MetaPtr;\n\n    static const union\n    {\n        unsigned long AsInt;\n        void *        AsPtr;\n        double        AsFloat;\n    } ARG_DEFAULT_ZERO_VALUE = {0};\n\n    Result = NULL;\n    for (i = 0; i < ContextPtr->ArgCount; ++i)\n    {\n        MetaPtr = &ContextPtr->Meta[i];\n        if (MetaPtr->Name != NULL)\n        {\n            if (strcmp(MetaPtr->Name, Name) == 0 && (MetaPtr->Size == 0 || MetaPtr->Size == ExpectedTypeSize))\n            {\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_DIRECT)\n                {\n                    Result = &ContextPtr->ArgPtr[i];\n                }\n                else if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_INDIRECT)\n                {\n                    Result = ContextPtr->ArgPtr[i];\n                }\n                break;\n            }\n        }\n    }\n\n    /*\n     * If no suitable result pointer was found, this means a mismatch\n     * between the stub and test case, such as a change in argument/parameter names.\n     * This is an error that should be corrected, so report it as a failure.\n     */\n    if (Result == NULL)\n    {\n        UtAssert_Failed(\"Requested parameter %s of size %lu which was not provided by the stub\", Name,\n                        (unsigned long)ExpectedTypeSize);\n\n        if (ExpectedTypeSize <= sizeof(ARG_DEFAULT_ZERO_VALUE))\n        {\n            Result = &ARG_DEFAULT_ZERO_VALUE;\n        }\n        else\n        {\n            /*\n             * As the caller will likely dereference the returned pointer, should\n             * never return NULL.  Just abort here.\n             */\n            UtAssert_Abort(\"No value for parameter\");\n        }\n    }\n\n    return Result;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'UT_Hook_GetArgPtr': {'callees': ['UtAssert_GetContext', 'UtAssert_Abort'], 'callers': ['UT_DefaultHandler_OS_BinSemCreate', 'UT_DefaultHandler_OS_BinSemGetInfo', 'UT_DefaultHandler_OS_BinSemDelete', 'UT_DefaultHandler_OS_BinSemGetIdByName', 'UT_DefaultHandler_OS_GetLocalTime', 'UT_DefaultHandler_OS_SetLocalTime', 'UT_DefaultHandler_OS_CountSemCreate', 'UT_DefaultHandler_OS_CountSemDelete', 'UT_DefaultHandler_OS_CountSemGetIdByName', 'UT_DefaultHandler_OS_CountSemGetInfo', 'UT_DefaultHandler_OS_DirectoryOpen', 'UT_DefaultHandler_OS_DirectoryClose', 'UT_DefaultHandler_OS_DirectoryRead', 'UT_DefaultHandler_OS_GetErrorName', 'UT_GenericReadStub', 'UT_GenericWriteStub', 'UT_DefaultHandler_OS_OpenCreate', 'UT_DefaultHandler_OS_close', 'UT_DefaultHandler_OS_stat', 'UT_DefaultHandler_OS_lseek', 'UT_DefaultHandler_OS_FDGetInfo', 'UT_DefaultHandler_OS_FileSysAddFixedMap', 'UT_DefaultHandler_OS_FileSysStatVolume', 'UT_DefaultHandler_OS_FS_GetPhysDriveName', 'UT_DefaultHandler_OS_GetFsInfo', 'UT_DefaultHandler_OS_TranslatePath', 'UT_DefaultHandler_OS_HeapGetInfo', 'UT_DefaultHandler_OS_ObjectIdToArrayIndex', 'UT_DefaultHandler_OS_GetResourceName', 'UT_DefaultHandler_OS_ConvertToArrayIndex', 'UT_DefaultHandler_OS_ForEachObjectOfType', 'UT_DefaultHandler_OS_ForEachObject', 'UT_DefaultHandler_OS_IdentifyObject', 'UT_DefaultHandler_OS_ModuleLoad', 'UT_DefaultHandler_OS_ModuleUnload', 'UT_DefaultHandler_OS_ModuleInfo', 'UT_DefaultHandler_OS_SymbolLookup', 'UT_DefaultHandler_OS_ModuleSymbolLookup', 'UT_DefaultHandler_OS_MutSemCreate', 'UT_DefaultHandler_OS_MutSemDelete', 'UT_DefaultHandler_OS_MutSemGetIdByName', 'UT_DefaultHandler_OS_MutSemGetInfo', 'UT_DefaultHandler_OS_NetworkGetHostName', 'UT_DefaultHandler_OS_printf', 'UT_DefaultHandler_OS_QueueCreate', 'UT_DefaultHandler_OS_QueueDelete', 'UT_DefaultHandler_OS_QueueGet', 'UT_DefaultHandler_OS_QueuePut', 'UT_DefaultHandler_OS_QueueGetIdByName', 'UT_DefaultHandler_OS_QueueGetInfo', 'UT_DefaultHandler_OS_SocketOpen', 'UT_DefaultHandler_OS_SocketRecvFrom', 'UT_DefaultHandler_OS_SocketSendTo', 'UT_DefaultHandler_OS_SocketGetIdByName', 'UT_DefaultHandler_OS_SocketGetInfo', 'UT_DefaultHandler_OS_SocketAddrInit', 'UT_DefaultHandler_OS_SocketAddrToString', 'UT_DefaultHandler_OS_SocketAddrFromString', 'UT_DefaultHandler_OS_SocketAddrGetPort', 'UT_DefaultHandler_OS_TaskCreate', 'UT_DefaultHandler_OS_TaskDelete', 'UT_DefaultHandler_OS_TaskGetIdByName', 'UT_DefaultHandler_OS_TaskGetInfo', 'UT_DefaultHandler_OS_TaskFindIdBySystemData', 'UT_DefaultHandler_OS_TimerAdd', 'UT_DefaultHandler_OS_TimerCreate', 'UT_DefaultHandler_OS_TimerDelete', 'UT_DefaultHandler_OS_TimerGetIdByName', 'UT_DefaultHandler_OS_TimerGetInfo', 'UT_DefaultHandler_OS_TimeBaseCreate', 'UT_DefaultHandler_OS_TimeBaseDelete', 'UT_DefaultHandler_OS_TimeBaseGetIdByName', 'UT_DefaultHandler_OS_TimeBaseGetInfo', 'UT_DefaultHandler_OS_TimeBaseGetFreeRun']}, 'UtAssert_GetContext': {'callees': [], 'callers': ['UtAssert', 'UT_StoreRetval', 'UT_LoadRetval', 'UT_SetDeferredRetcode', 'UT_Stub_GetReturnValuePtr', 'UT_Hook_GetArgPtr', 'UT_DefaultStubImplWithArgs', 'UtMem2BinFile', 'UtBinFile2Mem', 'UtMem2HexFile', 'UtMem2BinFileCmp', 'UT_AllocStubObjId', 'UT_DeleteStubObjId']}, 'UtAssert_Abort': {'callees': ['UT_BSP_DoText'], 'callers': ['UT_Stub_CallOnce', 'UT_ConfigureGenericStubReturnValue', 'UT_Stub_RegisterReturnType', 'UT_Stub_GetReturnValuePtr', 'UT_SetDataBuffer', 'UT_DoSetHookFunction', 'UT_Hook_GetArgPtr', 'UT_Stub_RegisterContextWithMetaData', 'UT_Stub_CopyToReturnValue', 'UT_DefaultStubImplWithArgs', 'UT_AllocStubObjId']}, 'UT_DefaultHandler_OS_BinSemCreate': {'callees': ['UT_Hook_GetArgPtr', 'UT_AllocStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_BinSemGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_BinSemDelete': {'callees': ['UT_Hook_GetArgPtr', 'UT_DeleteStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_BinSemGetIdByName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_GetLocalTime': {'callees': ['UT_Hook_GetArgPtr', 'UT_GetStubCount', 'UT_Stub_CopyToLocal', 'OS_TimeAssembleFromNanoseconds'], 'callers': []}, 'UT_DefaultHandler_OS_SetLocalTime': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyFromLocal'], 'callers': []}, 'UT_DefaultHandler_OS_CountSemCreate': {'callees': ['UT_Hook_GetArgPtr', 'UT_AllocStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_CountSemDelete': {'callees': ['UT_Hook_GetArgPtr', 'UT_DeleteStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_CountSemGetIdByName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_CountSemGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_DirectoryOpen': {'callees': ['UT_Hook_GetArgPtr', 'UT_AllocStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_DirectoryClose': {'callees': ['UT_Hook_GetArgPtr', 'UT_DeleteStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_DirectoryRead': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_GetErrorName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_GenericReadStub': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_Stub_CopyToReturnValue'], 'callers': ['UT_DefaultHandler_OS_read', 'UT_DefaultHandler_OS_TimedRead']}, 'UT_GenericWriteStub': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyFromLocal', 'UT_Stub_CopyToReturnValue'], 'callers': ['UT_DefaultHandler_OS_write', 'UT_DefaultHandler_OS_TimedWrite']}, 'UT_DefaultHandler_OS_OpenCreate': {'callees': ['UT_Hook_GetArgPtr', 'UT_AllocStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_close': {'callees': ['UT_Hook_GetArgPtr', 'UT_DeleteStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_stat': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_lseek': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToReturnValue'], 'callers': []}, 'UT_DefaultHandler_OS_FDGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_FileSysAddFixedMap': {'callees': ['UT_Hook_GetArgPtr', 'UT_AllocStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_FileSysStatVolume': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_FS_GetPhysDriveName': {'callees': ['UT_Hook_GetArgPtr'], 'callers': []}, 'UT_DefaultHandler_OS_GetFsInfo': {'callees': ['UT_Hook_GetArgPtr'], 'callers': []}, 'UT_DefaultHandler_OS_TranslatePath': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_HeapGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_ObjectIdToArrayIndex': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdDecompose'], 'callers': []}, 'UT_DefaultHandler_OS_GetResourceName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_ConvertToArrayIndex': {'callees': ['UT_Hook_GetArgPtr', 'UT_ObjIdDecompose'], 'callers': []}, 'UT_DefaultHandler_OS_ForEachObjectOfType': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_ForEachObject': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_IdentifyObject': {'callees': ['UT_Hook_GetArgPtr', 'UT_ObjIdDecompose', 'UT_Stub_CopyToReturnValue'], 'callers': []}, 'UT_DefaultHandler_OS_ModuleLoad': {'callees': ['UT_Hook_GetArgPtr', 'UT_AllocStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_ModuleUnload': {'callees': ['UT_Hook_GetArgPtr', 'UT_DeleteStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_ModuleInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_SymbolLookup': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_ModuleSymbolLookup': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_MutSemCreate': {'callees': ['UT_Hook_GetArgPtr', 'UT_AllocStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_MutSemDelete': {'callees': ['UT_Hook_GetArgPtr', 'UT_DeleteStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_MutSemGetIdByName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_MutSemGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_NetworkGetHostName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_printf': {'callees': ['UT_Hook_GetArgPtr', 'UtAssert_Message', 'UT_Stub_CopyFromLocal'], 'callers': []}, 'UT_DefaultHandler_OS_QueueCreate': {'callees': ['UT_Hook_GetArgPtr', 'UT_AllocStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_QueueDelete': {'callees': ['UT_Hook_GetArgPtr', 'UT_DeleteStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_QueueGet': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'OS_ObjectIdToInteger', 'UT_Stub_CopyToReturnValue'], 'callers': []}, 'UT_DefaultHandler_OS_QueuePut': {'callees': ['UT_Hook_GetArgPtr', 'UT_SetDataBuffer', 'OS_ObjectIdToInteger'], 'callers': []}, 'UT_DefaultHandler_OS_QueueGetIdByName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_QueueGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_SocketOpen': {'callees': ['UT_Hook_GetArgPtr', 'UT_AllocStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_SocketRecvFrom': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_Stub_CopyToReturnValue'], 'callers': []}, 'UT_DefaultHandler_OS_SocketSendTo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyFromLocal', 'UT_Stub_CopyToReturnValue'], 'callers': []}, 'UT_DefaultHandler_OS_SocketGetIdByName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_SocketGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_SocketAddrInit': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_SocketAddrToString': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_SocketAddrFromString': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_SocketAddrGetPort': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_TaskCreate': {'callees': ['UT_Hook_GetArgPtr', 'UT_AllocStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_TaskDelete': {'callees': ['UT_Hook_GetArgPtr', 'UT_DeleteStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_TaskGetIdByName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_TaskGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_TaskFindIdBySystemData': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_TimerAdd': {'callees': ['UT_Hook_GetArgPtr', 'UT_AllocStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_TimerCreate': {'callees': ['UT_Hook_GetArgPtr', 'UT_AllocStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_TimerDelete': {'callees': ['UT_Hook_GetArgPtr', 'UT_DeleteStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_TimerGetIdByName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_TimerGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_TimeBaseCreate': {'callees': ['UT_Hook_GetArgPtr', 'UT_AllocStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_TimeBaseDelete': {'callees': ['UT_Hook_GetArgPtr', 'UT_DeleteStubObjId'], 'callers': []}, 'UT_DefaultHandler_OS_TimeBaseGetIdByName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_TimeBaseGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_TimeBaseGetFreeRun': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_GetStubCount'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA project shall not contain dead code. Any operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "UT_StubContext_t",
    "UT_StubArgMetaData_t",
    "UT_STUBCONTEXT_ARG_TYPE_DIRECT",
    "UT_STUBCONTEXT_ARG_TYPE_INDIRECT",
    "UtAssert_Failed",
    "UtAssert_Abort",
    "strcmp"
  ],
  "explanation": "UT_StubContext_t \u2014 The function iterates ContextPtr->ArgCount and accesses ContextPtr->Meta[] and ContextPtr->ArgPtr[]. You must know the structure layout, invariants and field semantics (e.g. whether Meta entries can be absent, if ArgCount can be zero) to determine whether loop body or subsequent branches can ever be executed or are effectively dead.\n\nUT_StubArgMetaData_t \u2014 The code tests MetaPtr->Name, MetaPtr->Size and MetaPtr->Type. The metadata type definition and any invariants (e.g. whether Name may be NULL, valid Size values, how Type is set) are required to decide whether any conditional branches (Name != NULL, size match, type-direct vs indirect) can ever be taken or are dead.\n\nUT_STUBCONTEXT_ARG_TYPE_DIRECT \u2014 The symbolic value used to select the direct-argument path (Result = &ContextPtr->ArgPtr[i]). Knowing its value and intended meaning (and whether it can actually occur) is necessary to decide if the direct branch is reachable or dead.\n\nUT_STUBCONTEXT_ARG_TYPE_INDIRECT \u2014 The symbolic value used to select the indirect-argument path (Result = ContextPtr->ArgPtr[i]). Likewise, its value/semantics are required to determine reachability of the indirect branch.\n\nUtAssert_Failed \u2014 Called when no matching parameter is found. You must know whether this routine returns normally or performs a non-local exit (longjmp/abort) and whether it has side effects that the project relies on; that affects whether the subsequent conditional assigning ARG_DEFAULT_ZERO_VALUE is live code or dead (i.e. removal would or would not change behavior).\n\nUtAssert_Abort \u2014 Called when ExpectedTypeSize is too large to use the local zero value. If this function does not return (terminates or long-jumps), then any code after it is unreachable and may be considered dead; conversely, if it returns, the code is live. Its termination behavior is therefore essential for the dead-code decision.\n\nstrcmp \u2014 Used to compare MetaPtr->Name and Name. The standard semantics (returns zero when equal) are required to determine whether the equality test can ever be true for given inputs and thus whether the inner block can execute; any project-specific replacement/wrapper or nonstandard behavior would also affect reachability analysis.\n\n(These symbols provide the runtime semantics and invariants needed to decide whether branches/assignments in UT_Hook_GetArgPtr can ever affect program behaviour and thus whether they qualify as dead code under the MISRA rule.)"
}