{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_FileChmod_Impl is declared to take a non-const pointer (e.g. int32 OS_FileChmod_Impl(char *path, uint32 access_mode)) but the function does not need to modify the path. In that case passing local_path (char[]) shows the pointer is not const-qualified when it could be, violating MISRA C 2023 Rule 8.13. (If, however, OS_FileChmod_Impl already takes a const char * or legitimately modifies the buffer, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_chmod code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1315.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_chmod as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_chmod:\n```c\nint32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_chmod code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <string.h>\n\n/* Minimal type and constant definitions to make this unit buildable for testing. */\ntypedef int32_t int32;\ntypedef uint32_t uint32;\n\nenum\n{\n    OS_MAX_LOCAL_PATH_LEN = 260,\n    OS_SUCCESS = 0,\n    OS_ERROR = -1\n};\n\n/* Prototypes for external functions (kept as in the target scenario).\n   Note: OS_FileChmod_Impl deliberately takes a non-const char * to\n   reproduce the reported Rule 8.13 scenario for logging evidence. */\nint32 OS_TranslatePath(const char *path, char *local_path);\nint32 OS_FileChmod_Impl(char *path, uint32 access_mode);\n\n/* Internal helper to append log entries to the required log file. */\nstatic void OS_chmod_log(const char *tag,\n                         const char *path,\n                         const char *local_path,\n                         const char *old_local_path,\n                         int32 return_code,\n                         uint32 access_mode)\n{\n    FILE *f = fopen(\"/tmp/logs/1315.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not disturb original behavior. */\n        return;\n    }\n\n    fprintf(f, \"[OS_chmod] %s\\n\", tag);\n    if (path != NULL)\n    {\n        fprintf(f, \"  input path pointer: %p\\n\", (const void *)path);\n        fprintf(f, \"  input path str    : '%s'\\n\", path);\n    }\n    else\n    {\n        fprintf(f, \"  input path: (null)\\n\");\n    }\n\n    if (local_path != NULL)\n    {\n        fprintf(f, \"  local_path pointer: %p\\n\", (const void *)local_path);\n        fprintf(f, \"  local_path before/after: '%s'\\n\", local_path);\n    }\n    else\n    {\n        fprintf(f, \"  local_path: (null)\\n\");\n    }\n\n    if (old_local_path != NULL)\n    {\n        int changed = (strcmp(old_local_path, local_path) != 0);\n        fprintf(f, \"  old_local_path: '%s'\\n\", old_local_path);\n        fprintf(f, \"  changed by OS_FileChmod_Impl: %s\\n\", changed ? \"YES\" : \"NO\");\n    }\n\n    fprintf(f, \"  access_mode: %"
}