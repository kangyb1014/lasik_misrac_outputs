{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe two assignments SysMountPointLen = 0; and VirtPathBegin = VirtPathLen; are redundant. In all control-flow paths where the later code actually uses SysMountPointLen and VirtPathBegin (i.e. when return_code == OS_SUCCESS) those variables are assigned new values inside the filesys->flags check (SysMountPointLen = OS_strnlen(filesys->system_mountpt, ...); VirtPathBegin = OS_strnlen(filesys->virtual_mountpt, ...)). In the other paths the subsequent conditional (if (return_code == OS_SUCCESS)) prevents any use of the initially assigned values. Therefore these assignments are executed but their removal would not affect program behaviour, so they constitute dead code and violate MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_chmod code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1314.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_chmod as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_chmod:\n```c\nint32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_chmod code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging function to capture control flow and state for OS_chmod.\n * Logs are appended to: /tmp/logs/1314.txt\n * This function intentionally does not alter program logic or return values.\n */\nstatic void OS_chmod_LogState(const char *stage, const char *orig_path, const char *local_path, int32 return_code, uint32 access_mode)\n{\n    FILE *f = fopen(\"/tmp/logs/1314.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print pointers and strings where available to help reproduce control paths. */\n        fprintf(f, \"OS_chmod: stage=%s, orig_path=%p, orig_path_str=%s, local_path=%p, local_path_str=%s, return_code=%d, access_mode=%u\\n\",\n                stage,\n                (const void *)orig_path,\n                (orig_path != NULL) ? orig_path : \"(null)\",\n                (const void *)local_path,\n                (local_path != NULL) ? local_path : \"(null)\",\n                (int)return_code,\n                (unsigned)access_mode);\n        fclose(f);\n    }\n}\n\nint32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    /* Log entry with provided path and access mode. */\n    OS_chmod_LogState(\"entry\", path, \"\", 0, access_mode);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of path translation and the translated local_path. */\n    OS_chmod_LogState(\"after_translate\", path, local_path, return_code, access_mode);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before calling the implementation. */\n        OS_chmod_LogState(\"before_impl\", path, local_path, return_code, access_mode);\n\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n\n        /* Log the result returned by the implementation. */\n        OS_chmod_LogState(\"after_impl\", path, local_path, return_code, access_mode);\n    }\n    else\n    {\n        /* Log that the implementation call was skipped due to translate failure. */\n        OS_chmod_LogState(\"skip_impl\", path, local_path, return_code, access_mode);\n    }\n\n    /* Final log before returning to caller. */\n    OS_chmod_LogState(\"exit\", path, local_path, return_code, access_mode);\n\n    return return_code;\n}\n"
}