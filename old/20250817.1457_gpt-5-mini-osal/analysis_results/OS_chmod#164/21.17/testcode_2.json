{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_TranslatePath could copy or concatenate the input path into local_path using string.h functions (e.g. strcpy, strcat, memcpy) without checking the length. If the translated path length is >= OS_MAX_LOCAL_PATH_LEN (or does not leave room for a terminating NUL), the copy would write beyond local_path bounds, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_chmod code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1319.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_chmod as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_chmod:\n```c\nint32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_chmod code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Forward declarations for external functions (provided by the system). */\nextern int32 OS_TranslatePath(const char *path, char *local_path);\nextern int32 OS_FileChmod_Impl(const char *local_path, uint32 access_mode);\n\n/* Helper: append a formatted log line to the log file. */\nstatic void probe_log_append(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1319.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* If logging fails, do not affect normal operation. */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fflush(fp);\n    fclose(fp);\n}\n\n/* Log state before calling OS_TranslatePath. */\nstatic void probe_log_before_translate(const char *path, uint32 access_mode)\n{\n    if (path == NULL)\n    {\n        probe_log_append(\"OS_chmod: BEFORE TranslatePath: path=NULL, access_mode=%u\\n\", (unsigned)access_mode);\n    }\n    else\n    {\n        probe_log_append(\"OS_chmod: BEFORE TranslatePath: path='%s', path_len=%zu, access_mode=%u\\n\",\n                         path, strlen(path), (unsigned)access_mode);\n    }\n}\n\n/* Log results after OS_TranslatePath in a bounds-aware way. */\nstatic void probe_log_after_translate(const char *path, const char *local_path, int32 translate_rc)\n{\n    probe_log_append(\"OS_chmod: AFTER TranslatePath: rc=%d\\n\", (int)translate_rc);\n\n    if (local_path == NULL)\n    {\n        probe_log_append(\"OS_chmod: local_path=NULL\\n\");\n        return;\n    }\n\n    /* Search for a terminating NUL within the local_path buffer to avoid overruns when logging. */\n    size_t maxlen = (size_t)OS_MAX_LOCAL_PATH_LEN;\n    void *nulpos = memchr(local_path, '\\0', maxlen);\n    if (nulpos != NULL)\n    {\n        size_t plen = (const char *)nulpos - local_path;\n        probe_log_append(\"OS_chmod: local_path (NUL found within bounds) len=%zu: '%.*s'\\n\",\n                         plen, (int)plen, local_path);\n    }\n    else\n    {\n        /* No NUL found within buffer bounds \u2014 this is the key evidence for a potential overflow.\n         * Log the raw bytes up to the buffer length to avoid reading past the buffer. */\n        probe_log_append(\"OS_chmod: local_path (NO NUL within %zu bytes) -- raw data (hex):\\n\", maxlen);\n        FILE *fp = fopen(\"/tmp/logs/1319.txt\", \"a\");\n        if (fp != NULL)\n        {\n            const unsigned char *p = (const unsigned char *)local_path;\n            size_t i;\n            for (i = 0; i < maxlen; ++i)\n            {\n                fprintf(fp, \"%02X\", p[i]);\n                if ((i + 1) % 32 == 0)\n                    fprintf(fp, \"\\n\");\n                else\n                    fprintf(fp, \" \");\n            }\n            fprintf(fp, \"\\n\");\n            fclose(fp);\n        }\n    }\n\n    /* Also log the original input path for correlation. */\n    if (path != NULL)\n    {\n        probe_log_append(\"OS_chmod: original path='%s'\\n\", path);\n    }\n}\n\n/* Log before and after calling the platform-specific chmod implementation. */\nstatic void probe_log_before_chmod(const char *local_path, uint32 access_mode)\n{\n    probe_log_append(\"OS_chmod: BEFORE FileChmod_Impl: local_path (up to %d) and access_mode=%u\\n\",\n                     OS_MAX_LOCAL_PATH_LEN, (unsigned)access_mode);\n}\n\nstatic void probe_log_after_chmod(const char *local_path, uint32 access_mode, int32 rc)\n{\n    probe_log_append(\"OS_chmod: AFTER FileChmod_Impl: rc=%d\\n\", (int)rc);\n}\n\n/* The original function with logging probes inserted. */\nint32 OS_chmod(const char *path, uint32 access_mode)\n{\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n    int32 return_code;\n\n    probe_log_before_translate(path, access_mode);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    probe_log_after_translate(path, local_path, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log_before_chmod(local_path, access_mode);\n        return_code = OS_FileChmod_Impl(local_path, access_mode);\n        probe_log_after_chmod(local_path, access_mode, return_code);\n    }\n\n    probe_log_append(\"OS_chmod: RETURN rc=%d\\n\", (int)return_code);\n\n    return return_code;\n}\n"
}