{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'module' is declared as OS_module_internal_record_t * but is only used for read-only accesses (e.g. strncpy(module_prop->filename, module->file_name, ...)). According to MISRA C 2023 Rule 8.13 it should be a pointer to a const-qualified type (const OS_module_internal_record_t *module). The macro OS_OBJECT_TABLE_GET yields a non-const pointer (&tbl[...]) but assigning that to a const-qualified pointer is allowed, so making 'module' const is feasible. Therefore the code fragment module = OS_OBJECT_TABLE_GET(OS_module_table, token); constitutes a violation because the pointer is not const-qualified even though it can be.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1675.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleInfo:\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n\n/* Logging helper used to record control flow and state for OS_ModuleInfo. */\nstatic void OS_ModuleInfo_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1675.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Log entry and parameters (do not dereference module_prop here) */\n    OS_ModuleInfo_Log(\"OS_ModuleInfo ENTRY: module_id=%lu module_prop=%p\",\n                      (unsigned long)module_id, (void *)module_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    OS_ModuleInfo_Log(\"After memset(module_prop): module_prop=%p\", (void *)module_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    OS_ModuleInfo_Log(\"OS_ObjectIdGetById returned %ld; token_addr=%p\",\n                      (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Log the addresses of the retrieved objects */\n        OS_ModuleInfo_Log(\"Retrieved record=%p module=%p\", (void *)record, (void *)module);\n\n        /* Safely log string contents for evidence of read-only usage */\n        if (record != NULL && record->name_entry != NULL)\n        {\n            char tmp[128];\n            (void) snprintf(tmp, sizeof(tmp), \"%s\", record->name_entry);\n            OS_ModuleInfo_Log(\"record->name_entry='%s'\", tmp);\n        }\n        else\n        {\n            OS_ModuleInfo_Log(\"record->name_entry=<null>\");\n        }\n\n        if (module != NULL && module->file_name != NULL)\n        {\n            char tmp[128];\n            (void) snprintf(tmp, sizeof(tmp), \"%s\", module->file_name);\n            OS_ModuleInfo_Log(\"module->file_name='%s'\", tmp);\n        }\n        else\n        {\n            OS_ModuleInfo_Log(\"module->file_name=<null>\");\n        }\n\n        /* Perform the original copies (preserve original logic) */\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        /* Log module_prop contents after strncpy to show what was copied */\n        {\n            char tmp_name[sizeof(module_prop->name) + 1];\n            char tmp_file[sizeof(module_prop->filename) + 1];\n\n            /* Ensure null-termination for logging */\n            tmp_name[0] = '\\0';\n            tmp_file[0] = '\\0';\n            (void) snprintf(tmp_name, sizeof(tmp_name), \"%s\", module_prop->name);\n            (void) snprintf(tmp_file, sizeof(tmp_file), \"%s\", module_prop->filename);\n\n            OS_ModuleInfo_Log(\"After strncpy: module_prop->name='%s' module_prop->filename='%s'\",\n                              tmp_name, tmp_file);\n        }\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n        OS_ModuleInfo_Log(\"OS_ModuleGetInfo_Impl returned %ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n        OS_ModuleInfo_Log(\"OS_ObjectIdRelease called for token_addr=%p\", (void *)&token);\n    }\n\n    OS_ModuleInfo_Log(\"OS_ModuleInfo EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}