{
  "user_message": "An agent A claimed that the following OS_ModuleInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_ModuleInfo.\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The pointer 'record' is only used to read data (e.g. strncpy(module_prop->name, record->name_entry, ...)) and is never used to modify the pointee. Therefore it could and should be declared as 'const OS_common_record_t *record' to indicate read-only access. Declaring it non-const when const qualification is possible violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_ModuleInfo_LogState(const char *stage,\n                                   osal_id_t module_id,\n                                   int32 return_code,\n                                   const OS_common_record_t *record,\n                                   const OS_module_internal_record_t *module,\n                                   const OS_module_prop_t *module_prop)\n{\n    FILE *f = fopen(\"/tmp/logs/1675.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    /* Print high-level control info */\n    fprintf(f, \"[OS_ModuleInfo] stage=%s module_id=%lu return_code=%ld\\n\",\n            (stage != NULL) ? stage : \"(null)\",\n            (unsigned long)module_id,\n            (long)return_code);\n\n    /* Print pointers and selected state; check pointers before dereference */\n    fprintf(f, \"  record_ptr=%p module_ptr=%p module_prop_ptr=%p\\n\",\n            (const void *)record,\n            (const void *)module,\n            (const void *)module_prop);\n\n    if (record != NULL)\n    {\n        /* name_entry is treated as a NUL-terminated string in the production code */\n        fprintf(f, \"  record->name_entry='%s'\\n\", record->name_entry);\n    }\n    else\n    {\n        fprintf(f, \"  record->name_entry=(null)\\n\");\n    }\n\n    if (module != NULL)\n    {\n        fprintf(f, \"  module->file_name='%s'\\n\", module->file_name);\n    }\n    else\n    {\n        fprintf(f, \"  module->file_name=(null)\\n\");\n    }\n\n    if (module_prop != NULL)\n    {\n        fprintf(f, \"  module_prop->name_after_copy='%s'\\n\", module_prop->name);\n        fprintf(f, \"  module_prop->filename_after_copy='%s'\\n\", module_prop->filename);\n    }\n\n    fprintf(f, \"---\\n\");\n    fclose(f);\n}\n\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n\n    /* Log after lookup attempt so callers can see whether the id resolution succeeded */\n    OS_ModuleInfo_LogState(\"PostObjectIdGetById\", module_id, return_code, NULL, NULL, module_prop);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Log the pointers and source strings before the copy operations */\n        OS_ModuleInfo_LogState(\"BeforeStrncpy\", module_id, return_code, record, module, module_prop);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        /* Log after the copies so the resulting buffers are captured */\n        OS_ModuleInfo_LogState(\"AfterStrncpy\", module_id, return_code, record, module, module_prop);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        /* Log after implementation-specific info retrieval */\n        OS_ModuleInfo_LogState(\"AfterImpl\", module_id, return_code, record, module, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Final state before return */\n    OS_ModuleInfo_LogState(\"Exit\", module_id, return_code, NULL, NULL, module_prop);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_ModuleInfo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In the shown OS_ModuleInfo implementation the local variable record is only used for read-only access (record->name_entry is read and copied) and is never used to modify the pointee. MISRA C 2023 Rule 8.13 requires a pointer to point to a const-qualified type whenever possible; therefore record should be declared as a pointer-to-const (e.g. const OS_common_record_t *record). The same reasoning applies to module (it is only read via module->file_name and could be declared const as well). Assigning the non-const result of OS_OBJECT_TABLE_GET to a const pointer is permitted (T * -> const T *), so there is no obstacle shown in the snippet to adding const. The only caveat would be if other code (not shown) later needs to modify the pointee or if OS_OBJECT_TABLE_GET returns a type with qualifiers (volatile/const) that would change the rules; given the provided code, the report of a Rule 8.13 violation is correct."
}