{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' is declared as a non-const pointer (OS_common_record_t *record) but is only used for read access (e.g. strncpy(record->name_entry,...)). According to MISRA C 2023 Rule 8.13 it should point to a const-qualified type (const OS_common_record_t *record). The same applies to 'module' which is also only read. Not qualifying these pointers as const violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1675.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleInfo:\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logging function to capture control flow and state for OS_ModuleInfo */\nstatic void OS_ModuleInfo_LogState(const char *stage, osal_id_t module_id,\n                                   const OS_common_record_t *record,\n                                   const OS_module_internal_record_t *module,\n                                   const OS_module_prop_t *module_prop,\n                                   int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1675.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"Stage: %s\\n\", stage);\n    fprintf(f, \"  module_id: %lu\\n\", (unsigned long)module_id);\n    fprintf(f, \"  return_code: %ld\\n\", (long)return_code);\n\n    if (record != NULL)\n    {\n        /* Print pointer value and the readable name_entry (if any) */\n        fprintf(f, \"  record ptr: %p\\n\", (void *)record);\n        if (record->name_entry != NULL)\n        {\n            fprintf(f, \"  record->name_entry: %.64s\\n\", record->name_entry);\n        }\n        else\n        {\n            fprintf(f, \"  record->name_entry: (null)\\n\");\n        }\n    }\n    else\n    {\n        fprintf(f, \"  record: (null)\\n\");\n    }\n\n    if (module != NULL)\n    {\n        fprintf(f, \"  module ptr: %p\\n\", (void *)module);\n        if (module->file_name != NULL)\n        {\n            fprintf(f, \"  module->file_name: %.64s\\n\", module->file_name);\n        }\n        else\n        {\n            fprintf(f, \"  module->file_name: (null)\\n\");\n        }\n    }\n    else\n    {\n        fprintf(f, \"  module: (null)\\n\");\n    }\n\n    if (module_prop != NULL)\n    {\n        fprintf(f, \"  module_prop ptr: %p\\n\", (void *)module_prop);\n        fprintf(f, \"  module_prop->name: %.64s\\n\", module_prop->name);\n        fprintf(f, \"  module_prop->filename: %.64s\\n\", module_prop->filename);\n    }\n    else\n    {\n        fprintf(f, \"  module_prop: (null)\\n\");\n    }\n\n    fprintf(f, \"---\\n\");\n    fclose(f);\n}\n\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Log entry to function */\n    OS_ModuleInfo_LogState(\"entry\", module_id, NULL, NULL, NULL, 0);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_ModuleInfo_LogState(\"after_ObjectIdGetById\", module_id, NULL, NULL, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Log pointers and source strings before copying */\n        OS_ModuleInfo_LogState(\"before_strncpy\", module_id, record, module, module_prop, return_code);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        /* Log module_prop after strncpy to show values copied */\n        OS_ModuleInfo_LogState(\"after_strncpy\", module_id, record, module, module_prop, return_code);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        /* Log result of OS_ModuleGetInfo_Impl and module_prop state */\n        OS_ModuleInfo_LogState(\"after_ModuleGetInfo_Impl\", module_id, record, module, module_prop, return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after release, before final return */\n        OS_ModuleInfo_LogState(\"after_ObjectIdRelease\", module_id, record, module, module_prop, return_code);\n    }\n\n    return return_code;\n}\n"
}