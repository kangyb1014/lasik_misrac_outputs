{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_ModuleInfo:\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ModuleInfo:\ntypedef struct\n{\n    cpuaddr             entry_point;\n    cpuaddr             host_module_id;\n    char                filename[OS_MAX_PATH_LEN];\n    char                name[OS_MAX_API_NAME];\n    OS_module_address_t addr;\n} OS_module_prop_t\n...\nint32 OS_ModuleGetInfo_Impl(const OS_object_token_t *token, OS_module_prop_t *module_prop)\n{\n    /*\n     * Limiting strictly to POSIX-defined API means there is no defined\n     * method to get information about a module contents.\n     *\n     * The \"dlinfo()\" function might return some interesting information\n     * but this is actually a non-posix extension / platform-defined API.\n     *\n     * This returns success - although there is no information to add here,\n     * the parent/shared layer information is still valid.\n     */\n    return OS_SUCCESS;\n}\n...\ntypedef struct OS_common_record OS_common_record_t\n...\ntypedef struct\n{\n    char             module_name[OS_MAX_API_NAME];\n    char             file_name[OS_MAX_PATH_LEN];\n    OS_module_type_t module_type;\n    uint32           flags;\n    cpuaddr          entry_point;\n} OS_module_internal_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstrncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The code copies into module_prop->name which is a mutable array (must be modifiable), and strncpy\u2019s source parameter is const char* so passing record->name_entry (regardless of whether it is declared as char[] or const char[]) does not require changing the destination to const. A violation would only occur if a pointer that is used only for read access (e.g. a source string) were declared non-const when it could be declared const, but there is no evidence of that in this fragment."
}