{
  "user_message": "An agent A claimed that the following OS_ModuleInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_ModuleInfo.\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The pointer 'module' is only used to read fields (strncpy(module->file_name, ...)) and is never used to modify the pointed-to OS_module_internal_record_t. Therefore it could and should be declared as a pointer to const (const OS_module_internal_record_t *module). Declaring it as a non-const pointer violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_ModuleInfo_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1675.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Log entry and input pointer */\n    OS_ModuleInfo_Log(\"OS_ModuleInfo: entry; module_prop=%p\", (void *)module_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    OS_ModuleInfo_Log(\"OS_ModuleInfo: module_prop memset to zeros\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    OS_ModuleInfo_Log(\"OS_ModuleInfo: OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        OS_ModuleInfo_Log(\"OS_ModuleInfo: record=%p, module=%p\", (void *)record, (void *)module);\n\n        if (record != NULL)\n        {\n            /* Safely log a truncated view of name_entry */\n            char name_buf[128] = \"\";\n            (void)strncpy(name_buf, record->name_entry, sizeof(name_buf) - 1);\n            name_buf[sizeof(name_buf) - 1] = '\\0';\n            OS_ModuleInfo_Log(\"OS_ModuleInfo: record->name_entry='%s'\", name_buf);\n\n            strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n            module_prop->name[sizeof(module_prop->name) - 1] = '\\0';\n            OS_ModuleInfo_Log(\"OS_ModuleInfo: copied name to module_prop->name='%s'\", module_prop->name);\n        }\n        else\n        {\n            OS_ModuleInfo_Log(\"OS_ModuleInfo: WARNING: record is NULL\");\n        }\n\n        if (module != NULL)\n        {\n            /* Safely log a truncated view of file_name to demonstrate read-only use */\n            char file_buf[128] = \"\";\n            (void)strncpy(file_buf, module->file_name, sizeof(file_buf) - 1);\n            file_buf[sizeof(file_buf) - 1] = '\\0';\n            OS_ModuleInfo_Log(\"OS_ModuleInfo: module->file_name='%s'\", file_buf);\n\n            /* Original behavior: copy filename into module_prop */\n            strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n            module_prop->filename[sizeof(module_prop->filename) - 1] = '\\0';\n            OS_ModuleInfo_Log(\"OS_ModuleInfo: copied filename to module_prop->filename='%s'\", module_prop->filename);\n        }\n        else\n        {\n            OS_ModuleInfo_Log(\"OS_ModuleInfo: WARNING: module is NULL\");\n        }\n\n        OS_ModuleInfo_Log(\"OS_ModuleInfo: calling OS_ModuleGetInfo_Impl with token=%p\", (void *)&token);\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n        OS_ModuleInfo_Log(\"OS_ModuleInfo: OS_ModuleGetInfo_Impl returned %ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n        OS_ModuleInfo_Log(\"OS_ModuleInfo: released token and exiting, return_code=%ld\", (long)return_code);\n    }\n    else\n    {\n        OS_ModuleInfo_Log(\"OS_ModuleInfo: OS_ObjectIdGetById failed, exiting with %ld\", (long)return_code);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_ModuleInfo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types where possible. In the shown function the local variable module is only used for read-only accesses (e.g. reading module->file_name for strncpy and for logging) and is never used to modify the pointed-to OS_module_internal_record_t. Therefore it could and should be declared as const OS_module_internal_record_t *module. Assigning the result of OS_OBJECT_TABLE_GET (a non-const pointer) to a pointer-to-const is allowed, so there is no technical barrier in this snippet to making the pointer const. The only caveat would be if the surrounding API/macros or other code require module to be a non-const pointer (or the macro expands in a way that prevents such a declaration); no such constraint is visible here. Given the code shown, agent A\u2019s report is correct."
}