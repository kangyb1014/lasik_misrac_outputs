{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe conditional block in OS_printf only calls OS_DEBUG. If OS_DEBUG is compiled out or otherwise becomes a no-op when debugging is disabled (as the comment implies), then this branch can execute but perform no observable action. In that configuration the executed operations have no effect and their removal would not change program behaviour, so the code constitutes dead code and thus violates MISRA C 2023 Rule 2.2. (If OS_DEBUG actually performs logging at runtime, then the branch is not dead.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1674.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleInfo:\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helper: appends a simple event log to /tmp/logs/1674.txt */\nstatic void OS_ModuleInfo_Probe(const char *label, long code, const void *p1, const void *p2)\n{\n    FILE *fp = fopen(\"/tmp/logs/1674.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Log the label, numeric code and two pointer-valued items for context */\n        fprintf(fp, \"%s code=%ld p1=%p p2=%p\\n\", label, code, p1, p2);\n        fclose(fp);\n    }\n}\n\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Entry probe: record entry and pointers */\n    OS_ModuleInfo_Probe(\"OS_ModuleInfo:entry\", 0L, (const void *)module_prop, (const void *)&module_id);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    /* Probe after initialization */\n    OS_ModuleInfo_Probe(\"OS_ModuleInfo:after_memset\", 0L, (const void *)module_prop, NULL);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n\n    /* Probe the result of ObjectIdGetById and the token address */\n    OS_ModuleInfo_Probe(\"OS_ModuleInfo:after_ObjectIdGetById\", (long)return_code, (const void *)&token, NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Probe the table entries retrieved */\n        OS_ModuleInfo_Probe(\"OS_ModuleInfo:got_records\", 0L, (const void *)record, (const void *)module);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        /* Log the copied name and filename (as strings) for additional evidence */\n        {\n            FILE *fp = fopen(\"/tmp/logs/1674.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"OS_ModuleInfo:copied name='%s' filename='%s'\\n\",\n                        (module_prop->name != NULL) ? module_prop->name : \"(null)\",\n                        (module_prop->filename != NULL) ? module_prop->filename : \"(null)\");\n                fclose(fp);\n            }\n        }\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        /* Probe the return from the platform-specific implementation */\n        OS_ModuleInfo_Probe(\"OS_ModuleInfo:after_Impl\", (long)return_code, (const void *)&token, (const void *)module_prop);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Probe after token release */\n        OS_ModuleInfo_Probe(\"OS_ModuleInfo:after_release\", 0L, (const void *)&token, NULL);\n    }\n\n    /* Exit probe with final return code */\n    OS_ModuleInfo_Probe(\"OS_ModuleInfo:exit\", (long)return_code, (const void *)module_prop, NULL);\n\n    return return_code;\n}\n"
}