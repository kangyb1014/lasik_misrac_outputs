{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1) copies up to sizeof(module_prop->name)-1 bytes from record->name_entry. If record->name_entry does not refer to an object at least that large (for example it is a char[10] or a pointer to a smaller buffer while sizeof(module_prop->name) is larger), strncpy may read past the end of the source object and so would access beyond the bounds of the source \u2014 violating MISRA C 2023 Rule 21.17. (Note: this use is safe only if record->name_entry is guaranteed to be an array/object of size >= sizeof(module_prop->name)-1 or otherwise known to be long enough or null-terminated within that bound.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1679.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleInfo:\n```c\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\nint32 OS_ModuleInfo(osal_id_t module_id, OS_module_prop_t *module_prop)\n{\n    OS_common_record_t *         record;\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(module_prop);\n\n    memset(module_prop, 0, sizeof(OS_module_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_module_table, token);\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Probe logging: record pointers and buffer sizes that are relevant to the strncpy calls.\n         * This logging does not change the logic of the function; it only records addresses and\n         * size parameters so other agents can reproduce and investigate potential out-of-bounds\n         * reads from the source pointers used by strncpy.\n         */\n        {\n            FILE *log = fopen(\"/tmp/logs/1679.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_ModuleInfo ENTER: module_id=%lld return_code=%d\\n\",\n                        (long long)module_id, (int)return_code);\n\n                fprintf(log, \"record=%p module=%p module_prop=%p token_addr=%p\\n\",\n                        (void *)record, (void *)module, (void *)module_prop, (void *)&token);\n\n                /* Log the source pointer addresses that strncpy will read from. */\n                fprintf(log, \"record->name_entry=%p module->file_name=%p\\n\",\n                        (void *)record->name_entry, (void *)module->file_name);\n\n                /* Log the destination buffer sizes and the lengths used for the copy. */\n                fprintf(log, \"module_prop->name sizeof=%zu copy_len=%zu\\n\",\n                        sizeof(module_prop->name), (size_t)(sizeof(module_prop->name) - 1));\n                fprintf(log, \"module_prop->filename sizeof=%zu copy_len=%zu\\n\",\n                        sizeof(module_prop->filename), (size_t)(sizeof(module_prop->filename) - 1));\n\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        /* Original logic preserved: these strncpy calls are the potential source reads that may\n         * read beyond the bounds of the objects referenced by record->name_entry or\n         * module->file_name if those source objects are smaller than the copy length.\n         */\n        strncpy(module_prop->name, record->name_entry, sizeof(module_prop->name) - 1);\n        strncpy(module_prop->filename, module->file_name, sizeof(module_prop->filename) - 1);\n\n        /* Log post-copy state that can help determine whether the destination buffers were\n         * null-terminated at the final slot (helps infer whether the source was longer than\n         * the copy length). Accesses here are confined to the destination buffers only. */\n        {\n            FILE *log = fopen(\"/tmp/logs/1679.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"After strncpy: module_prop->name addr=%p module_prop->filename addr=%p\\n\",\n                        (void *)module_prop->name, (void *)module_prop->filename);\n\n                /* Log the value of the last byte in each destination buffer (safe: inside dest buffer bounds). */\n                fprintf(log, \"module_prop->name[%zu]=%d module_prop->filename[%zu]=%d\\n\",\n                        (size_t)(sizeof(module_prop->name) - 1), (int)module_prop->name[sizeof(module_prop->name) - 1],\n                        (size_t)(sizeof(module_prop->filename) - 1), (int)module_prop->filename[sizeof(module_prop->filename) - 1]);\n\n                fflush(log);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_ModuleGetInfo_Impl(&token, module_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n"
}