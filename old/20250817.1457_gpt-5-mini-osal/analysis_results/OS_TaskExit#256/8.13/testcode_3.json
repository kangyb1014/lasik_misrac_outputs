{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the function OS_ObjectIdFinalizeDelete has the prototype OS_Status_t OS_ObjectIdFinalizeDelete(OS_Status_t status, OS_object_token_t *token) (i.e. pointer to non-const) but the function does not modify the object referred to by token, then the pointer parameter should be const-qualified (const OS_object_token_t *). In that case the call OS_ObjectIdFinalizeDelete(OS_SUCCESS, &token); indicates a violation of Rule 8.13 because a pointer is not pointing to a const-qualified type when it could be.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskExit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2051.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskExit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskExit:\n```c\nvoid OS_TaskExit()\n{\n    osal_id_t         task_id;\n    OS_object_token_t token;\n\n    task_id = OS_TaskGetId_Impl();\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token) == OS_SUCCESS)\n    {\n        OS_TaskDetach_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        OS_ObjectIdFinalizeDelete(OS_SUCCESS, &token);\n    }\n\n    /* call the implementation */\n    OS_TaskExit_Impl();\n\n    /* Impl function never returns */\n}\n```\n</target_code>\nPlease provide the modified OS_TaskExit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe helpers to capture control flow and state. */\nstatic void probe_log_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2051.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Dump a byte-level view of the token for evidence. Limit output length to avoid huge logs. */\nstatic void probe_log_token_bytes(const char *label, const void *token, size_t token_size)\n{\n    FILE *f = fopen(\"/tmp/logs/2051.txt\", \"a\");\n    if (f == NULL || token == NULL)\n    {\n        if (f) fclose(f);\n        return;\n    }\n\n    fprintf(f, \"%s: token_ptr=%#lx token_size=%zu bytes=\", label, (unsigned long)(uintptr_t)token, token_size);\n\n    const unsigned char *p = (const unsigned char *)token;\n    size_t max = token_size;\n    if (max > 64) /* cap the number of bytes printed */\n    {\n        max = 64;\n    }\n\n    for (size_t i = 0; i < max; ++i)\n    {\n        fprintf(f, \"%02X\", p[i]);\n    }\n\n    if (token_size > max)\n    {\n        fprintf(f, \"..(truncated)\");\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified OS_TaskExit: original logic preserved, probes inserted. */\nvoid OS_TaskExit()\n{\n    osal_id_t         task_id;\n    OS_object_token_t token;\n\n    task_id = OS_TaskGetId_Impl();\n    probe_log_printf(\"OS_TaskExit: obtained task_id=%u\", (unsigned)task_id);\n\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token) == OS_SUCCESS)\n    {\n        probe_log_printf(\"OS_TaskExit: OS_ObjectIdGetById succeeded for task_id=%u\", (unsigned)task_id);\n        /* Log the token state before any operations */\n        probe_log_token_bytes(\"OS_TaskExit: token before detach\", &token, sizeof(token));\n\n        probe_log_printf(\"OS_TaskExit: calling OS_TaskDetach_Impl(&token) with token_ptr=%#lx\", (unsigned long)(uintptr_t)&token);\n        OS_TaskDetach_Impl(&token);\n        probe_log_printf(\"OS_TaskExit: returned from OS_TaskDetach_Impl(&token)\");\n\n        /* Complete the operation via the common routine */\n        probe_log_printf(\"OS_TaskExit: calling OS_ObjectIdFinalizeDelete(OS_SUCCESS, &token) with token_ptr=%#lx\", (unsigned long)(uintptr_t)&token);\n        probe_log_token_bytes(\"OS_TaskExit: token before finalize\", &token, sizeof(token));\n\n        OS_ObjectIdFinalizeDelete(OS_SUCCESS, &token);\n\n        probe_log_printf(\"OS_TaskExit: returned from OS_ObjectIdFinalizeDelete(OS_SUCCESS, &token)\");\n        probe_log_token_bytes(\"OS_TaskExit: token after finalize\", &token, sizeof(token));\n    }\n    else\n    {\n        probe_log_printf(\"OS_TaskExit: OS_ObjectIdGetById failed for task_id=%u\", (unsigned)task_id);\n    }\n\n    /* call the implementation */\n    probe_log_printf(\"OS_TaskExit: calling OS_TaskExit_Impl() - this function should not return\");\n    OS_TaskExit_Impl();\n\n    /* Impl function never returns */\n}\n"
}