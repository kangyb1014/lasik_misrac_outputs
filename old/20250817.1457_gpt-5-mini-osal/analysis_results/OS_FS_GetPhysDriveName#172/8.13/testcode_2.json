{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_ObjectIdGetBySearch takes a void *arg and the MatchFunc type uses a void *ref parameter. Callers (e.g. OS_FS_GetPhysDriveName) pass a const char *MountPoint and cast it to (void *)MountPoint, discarding const. The actual match function (OS_FileSys_FindVirtMountPoint) treats the arg as a const char * (it does const char *target = (const char *)ref;), so the parameter should be declared const void * to preserve const-qualification. Casting away const and using a non-const pointer where a const-qualified pointer is appropriate violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FS_GetPhysDriveName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1379.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FS_GetPhysDriveName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FS_GetPhysDriveName:\n```c\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FS_GetPhysDriveName code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/*\n * Probe helper: append a log line to /tmp/logs/1379.txt\n * Keep signatures const-correct to avoid introducing new const-related issues.\n */\nstatic void OS_FS_WriteLog(const char *stage, const char *mountpoint, const void *ref_ptr, const void *extra_ptr, long return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1379.txt\", \"a\");\n    if (f != NULL)\n    {\n        char mpbuf[256];\n        if (mountpoint != NULL)\n        {\n            /* Copy safely so we don't read beyond if the string is long */\n            strncpy(mpbuf, mountpoint, sizeof(mpbuf) - 1);\n            mpbuf[sizeof(mpbuf) - 1] = '\\0';\n        }\n        else\n        {\n            mpbuf[0] = '\\0';\n        }\n\n        /* Log stage, mountpoint (truncated), pointer addresses and return code. */\n        fprintf(f, \"[OS_FS_GetPhysDriveName] stage=%s mountpoint=\\\"%s\\\" mountpoint_addr=%p ref_ptr=%p extra_ptr=%p return_code=%ld\\n\",\n                stage, (mpbuf[0] != '\\0') ? mpbuf : \"(null)\", (const void *)mountpoint, ref_ptr, extra_ptr, return_code);\n        fflush(f);\n        fclose(f);\n    }\n}\n\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Log entry and the parameters observed before the search call */\n    OS_FS_WriteLog(\"entry\", MountPoint, (const void *)MountPoint, NULL, -1);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    /* NOTE: The original code casts away const here; keep that original behavior\n       but log the const pointer value separately so the evidence of the cast is recorded. */\n    OS_FS_WriteLog(\"before_OS_ObjectIdGetBySearch_call\", MountPoint, (const void *)MountPoint, NULL, -1);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    /* Log outcome of the search call */\n    OS_FS_WriteLog(\"after_OS_ObjectIdGetBySearch_call\", MountPoint, (const void *)MountPoint, (const void *)&token, (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Log filesys pointer and some of its state before making decisions */\n        OS_FS_WriteLog(\"filesys_resolved\", MountPoint, (const void *)MountPoint, (const void *)filesys, (long)return_code);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            /* Log the system_mountpt about to be copied */\n            OS_FS_WriteLog(\"copy_system_mountpt\", filesys->system_mountpt, (const void *)MountPoint, (const void *)filesys, (long)return_code);\n\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n\n            /* Log that the copy completed and what was written (truncated to avoid long lines) */\n            OS_FS_WriteLog(\"physdrive_written\", PhysDriveName, (const void *)MountPoint, (const void *)filesys, (long)return_code);\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n\n            OS_FS_WriteLog(\"incorrect_obj_state\", MountPoint, (const void *)MountPoint, (const void *)filesys, (long)return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n        OS_FS_WriteLog(\"name_not_found\", MountPoint, (const void *)MountPoint, NULL, (long)return_code);\n    }\n\n    /* Final log before returning */\n    OS_FS_WriteLog(\"exit\", MountPoint, (const void *)MountPoint, NULL, (long)return_code);\n\n    return return_code;\n}\n"
}