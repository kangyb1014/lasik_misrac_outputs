{
  "user_message": "An agent A claimed that the following OS_FS_GetPhysDriveName code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_FS_GetPhysDriveName.\n```c\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function OS_FileSys_FindVirtMountPoint declares its first parameter as void *ref but treats it as a read-only string (const char *target = (const char *)ref). Callers (e.g. OS_FS_GetPhysDriveName) pass a const char *MountPoint cast to (void *), discarding the const qualifier. The ref parameter (and the MatchFunc/arg typedef) should use a const-qualified pointer (e.g. const void *ref or const char *ref) to avoid removing constness.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_FS_ProbeLog(const char *msg)\n{\n    FILE *log = fopen(\"/tmp/logs/1379.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"%s\\n\", msg);\n        fclose(log);\n    }\n}\n\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n    char                          buf[512];\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Log entry + parameter state */\n    snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: entry - MountPoint_ptr=%p, MountPoint=\\\"%s\\\", PhysDriveName_ptr=%p\",\n             (const void *)MountPoint,\n             (MountPoint != NULL) ? MountPoint : \"(null)\",\n             (void *)PhysDriveName);\n    OS_FS_ProbeLog(buf);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    /* NOTE: original code casts away const by doing (void *)MountPoint. This probe records that cast. */\n    void *ref_for_search = (void *)MountPoint; /* intentional cast as in original code */\n\n    snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: about to call OS_ObjectIdGetBySearch with ref_for_search(void*)=%p (from const char* %p)\",\n             ref_for_search,\n             (const void *)MountPoint);\n    OS_FS_ProbeLog(buf);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         ref_for_search, &token);\n\n    snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: OS_ObjectIdGetBySearch returned %ld; token_address=%p\",\n             (long)return_code, (void *)&token);\n    OS_FS_ProbeLog(buf);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: filesys_ptr=%p\",\n                 (void *)filesys);\n        OS_FS_ProbeLog(buf);\n\n        if (filesys != NULL)\n        {\n            /* Log flags and mount point stored in filesys (if accessible) */\n            /* Cast flags to unsigned long for logging; typical field is integer-like */\n            snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: filesys->flags=0x%lx, filesys->system_mountpt=\\\"%s\\\"\",\n                     (unsigned long)filesys->flags,\n                     (filesys->system_mountpt != NULL) ? filesys->system_mountpt : \"(null)\");\n            OS_FS_ProbeLog(buf);\n        }\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n\n            snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: success - copied phys name=\\\"%s\\\" to PhysDriveName_ptr=%p\",\n                     PhysDriveName, (void *)PhysDriveName);\n            OS_FS_ProbeLog(buf);\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: error - not mounted system, returning OS_ERR_INCORRECT_OBJ_STATE(%ld)\", (long)return_code);\n            OS_FS_ProbeLog(buf);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: released token at %p\", (void *)&token);\n        OS_FS_ProbeLog(buf);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n        snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: object not found, returning OS_ERR_NAME_NOT_FOUND(%ld)\", (long)return_code);\n        OS_FS_ProbeLog(buf);\n    }\n\n    snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: exit - return_code=%ld\", (long)return_code);\n    OS_FS_ProbeLog(buf);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_FS_GetPhysDriveName. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. OS_FS_GetPhysDriveName takes a const char *MountPoint but passes it to OS_ObjectIdGetBySearch as (void *)MountPoint, discarding the const qualifier. The match function OS_FileSys_FindVirtMountPoint then treats the incoming void *ref as a read\u2011only string (casting it back to const char *), which demonstrates the intent that the reference is not modified. This pattern violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible) because the constness is being removed by the cast instead of the callee prototype and typedefs being declared to accept a const-qualified pointer (for example const void *ref or const char *ref, and a matching typedef for the MatchFunc/arg). The empty runtime probe log does not affect this static rule violation \u2014 the issue is at the API/type level and should be fixed by making the reference parameter and related typedefs const-qualified (unless the callback is actually intended to modify the pointed-to data, in which case const would be inappropriate)."
}