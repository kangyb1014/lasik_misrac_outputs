{
  "user_message": "An agent A claimed that the following OS_FS_GetPhysDriveName code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_FS_GetPhysDriveName.\n```c\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code casts away const by passing the const char *MountPoint to a void * parameter: (void *)MountPoint. The Match function OS_FileSys_FindVirtMountPoint treats the argument as a const char * (const char *target = (const char *)ref;), so the pointer should have been passed as a const-qualified pointer (e.g. const void *) instead of discarding const. This cast-away-const violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1379.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Log entry and parameter state */\n    probe_log(\"ENTER: OS_FS_GetPhysDriveName(PhysDriveName=%p, MountPoint=%s)\",\n              (void *)PhysDriveName,\n              (MountPoint != NULL) ? MountPoint : \"(null)\");\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    probe_log(\"About to call OS_ObjectIdGetBySearch with (void *)MountPoint (cast discards const): MountPoint_ptr=%p, MountPoint_str=%s\",\n              (const void *)MountPoint,\n              (MountPoint != NULL) ? MountPoint : \"(null)\");\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    probe_log(\"OS_ObjectIdGetBySearch returned: return_code=%ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        probe_log(\"Lookup success: filesys_ptr=%p, flags=0x%lx, system_mountpt=%s\",\n                  (void *)filesys,\n                  (unsigned long)filesys->flags,\n                  (filesys->system_mountpt != NULL) ? filesys->system_mountpt : \"(null)\");\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n\n            probe_log(\"Copied system_mountpt to PhysDriveName: PhysDriveName=%s\", PhysDriveName);\n        }\n        else\n        {\n            probe_log(\"Filesystem found but not mounted as system. flags=0x%lx\", (unsigned long)filesys->flags);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"Released token and returning with code=%ld\", (long)return_code);\n    }\n    else\n    {\n        probe_log(\"OS_ObjectIdGetBySearch did not find name. Returning OS_ERR_NAME_NOT_FOUND\");\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    probe_log(\"EXIT: OS_FS_GetPhysDriveName returning %ld\", (long)return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_FS_GetPhysDriveName. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The code casts a const-qualified pointer (const char *MountPoint) to a plain void * when calling OS_ObjectIdGetBySearch: (void *)MountPoint. That discards the const qualifier and thus uses a non-const pointer where a const pointer would be appropriate. MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types whenever possible; here the value is not modified by the lookup callback (the callback internally treats the argument as a const char *), so the API should have used a const-qualified pointer (e.g. const void *) and the callback signature should take const void *. The concrete fixes are to change OS_ObjectIdGetBySearch and related callback prototypes to accept const void * (and corresponding const in OS_FileSys_FindVirtMountPoint), or if the API cannot be changed, provide and document a formal deviation/justification for this discard of const. As written, the cast-away-const is a MISRA 8.13 violation."
}