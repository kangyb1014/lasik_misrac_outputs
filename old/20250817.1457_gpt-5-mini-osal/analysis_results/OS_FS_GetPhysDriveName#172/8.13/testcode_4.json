{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_FileSys_FindVirtMountPoint declares its first parameter as void *ref but treats it as a read-only string (const char *target = (const char *)ref). Callers (e.g. OS_FS_GetPhysDriveName) pass a const char *MountPoint cast to (void *), discarding the const qualifier. The ref parameter (and the MatchFunc/arg typedef) should use a const-qualified pointer (e.g. const void *ref or const char *ref) to avoid removing constness.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FS_GetPhysDriveName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1379.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FS_GetPhysDriveName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FS_GetPhysDriveName:\n```c\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FS_GetPhysDriveName code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe helper: append a formatted message to the logfile. */\nstatic void OS_FS_ProbeLog(const char *msg)\n{\n    FILE *log = fopen(\"/tmp/logs/1379.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"%s\\n\", msg);\n        fclose(log);\n    }\n}\n\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n    char                          buf[512];\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Log entry + parameter state */\n    snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: entry - MountPoint_ptr=%p, MountPoint=\\\"%s\\\", PhysDriveName_ptr=%p\",\n             (const void *)MountPoint,\n             (MountPoint != NULL) ? MountPoint : \"(null)\",\n             (void *)PhysDriveName);\n    OS_FS_ProbeLog(buf);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    /* NOTE: original code casts away const by doing (void *)MountPoint. This probe records that cast. */\n    void *ref_for_search = (void *)MountPoint; /* intentional cast as in original code */\n\n    snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: about to call OS_ObjectIdGetBySearch with ref_for_search(void*)=%p (from const char* %p)\",\n             ref_for_search,\n             (const void *)MountPoint);\n    OS_FS_ProbeLog(buf);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         ref_for_search, &token);\n\n    snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: OS_ObjectIdGetBySearch returned %ld; token_address=%p\",\n             (long)return_code, (void *)&token);\n    OS_FS_ProbeLog(buf);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: filesys_ptr=%p\",\n                 (void *)filesys);\n        OS_FS_ProbeLog(buf);\n\n        if (filesys != NULL)\n        {\n            /* Log flags and mount point stored in filesys (if accessible) */\n            /* Cast flags to unsigned long for logging; typical field is integer-like */\n            snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: filesys->flags=0x%lx, filesys->system_mountpt=\\\"%s\\\"\",\n                     (unsigned long)filesys->flags,\n                     (filesys->system_mountpt != NULL) ? filesys->system_mountpt : \"(null)\");\n            OS_FS_ProbeLog(buf);\n        }\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n\n            snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: success - copied phys name=\\\"%s\\\" to PhysDriveName_ptr=%p\",\n                     PhysDriveName, (void *)PhysDriveName);\n            OS_FS_ProbeLog(buf);\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: error - not mounted system, returning OS_ERR_INCORRECT_OBJ_STATE(%ld)\", (long)return_code);\n            OS_FS_ProbeLog(buf);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: released token at %p\", (void *)&token);\n        OS_FS_ProbeLog(buf);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n        snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: object not found, returning OS_ERR_NAME_NOT_FOUND(%ld)\", (long)return_code);\n        OS_FS_ProbeLog(buf);\n    }\n\n    snprintf(buf, sizeof(buf), \"OS_FS_GetPhysDriveName: exit - return_code=%ld\", (long)return_code);\n    OS_FS_ProbeLog(buf);\n\n    return return_code;\n}\n"
}