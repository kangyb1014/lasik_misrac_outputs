{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe function calls strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1) and then writes PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0 without validating that the caller-supplied PhysDriveName actually points to an object of at least OS_FS_PHYS_NAME_LEN bytes. If a caller passes a smaller buffer (e.g. char buf[16]; OS_FS_GetPhysDriveName(buf, ...)), the strncpy will write up to 63 bytes and the subsequent write of index 63 will overflow buf. Also, strncpy may read up to OS_FS_PHYS_NAME_LEN-1 bytes from filesys->system_mountpt; if filesys->system_mountpt's array size or termination is smaller than that, this can read beyond its bounds. Therefore Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FS_GetPhysDriveName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FS_GetPhysDriveName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FS_GetPhysDriveName:\n```c\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FS_GetPhysDriveName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <time.h>\n#include <stddef.h>\n#include <string.h>\n\n/*\n * Probe helper: append a log entry to /tmp/logs/1383.txt.\n * This function intentionally avoids dereferencing any caller-supplied\n * character buffers (to avoid introducing new out-of-bounds reads).\n */\nstatic void OS_FS_LogProbe(const char *stage,\n                           const void *phys_ptr,\n                           const void *mount_ptr,\n                           const void *filesys_ptr,\n                           int32_t return_code,\n                           unsigned long flags,\n                           size_t planned_copy_len)\n{\n    FILE *f = fopen(\"/tmp/logs/1383.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, do not alter program flow. */\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] STAGE=%s\\n\", (long)t, stage);\n    fprintf(f, \"  PhysDriveName_ptr=%p\\n\", phys_ptr);\n    fprintf(f, \"  MountPoint_ptr=%p\\n\", mount_ptr);\n    fprintf(f, \"  filesys_ptr=%p\\n\", filesys_ptr);\n    fprintf(f, \"  return_code=%d\\n\", (int)return_code);\n    fprintf(f, \"  filesys_flags=0x%lx\\n\", flags);\n    fprintf(f, \"  planned_copy_length=%zu\\n\", planned_copy_len);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Log entry with pointer information before doing the object lookup. */\n    OS_FS_LogProbe(\"entry\", (void *)PhysDriveName, (void *)MountPoint, NULL, -1, 0, (size_t)OS_FS_PHYS_NAME_LEN - 1);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    /* Log result of lookup attempt */\n    OS_FS_LogProbe(\"after_lookup\", (void *)PhysDriveName, (void *)MountPoint, NULL, return_code, 0, (size_t)OS_FS_PHYS_NAME_LEN - 1);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Log the filesys pointer and flags before checking mount state */\n        OS_FS_LogProbe(\"before_state_check\", (void *)PhysDriveName, (void *)MountPoint, (void *)filesys, return_code,\n                       (unsigned long)filesys->flags, (size_t)OS_FS_PHYS_NAME_LEN - 1);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            /* Log intent to copy: we do not read the contents of the source here to avoid\n             * introducing any additional out-of-bounds reads. We only log the pointer and\n             * planned length so other agents can reproduce and inspect the behavior. */\n            OS_FS_LogProbe(\"before_strncpy\", (void *)PhysDriveName, (void *)MountPoint, (void *)filesys, return_code,\n                           (unsigned long)filesys->flags, (size_t)OS_FS_PHYS_NAME_LEN - 1);\n\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n\n            /* Log after strncpy but before the explicit terminator write */\n            OS_FS_LogProbe(\"after_strncpy\", (void *)PhysDriveName, (void *)MountPoint, (void *)filesys, return_code,\n                           (unsigned long)filesys->flags, (size_t)OS_FS_PHYS_NAME_LEN - 1);\n\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n\n            /* Log completion of copy and termination write */\n            OS_FS_LogProbe(\"after_terminator_write\", (void *)PhysDriveName, (void *)MountPoint, (void *)filesys, return_code,\n                           (unsigned long)filesys->flags, (size_t)OS_FS_PHYS_NAME_LEN - 1);\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n\n            OS_FS_LogProbe(\"not_mounted\", (void *)PhysDriveName, (void *)MountPoint, (void *)filesys, return_code,\n                           (unsigned long)filesys->flags, 0);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the object id token */\n        OS_FS_LogProbe(\"after_release\", (void *)PhysDriveName, (void *)MountPoint, (void *)filesys, return_code,\n                       (unsigned long)filesys->flags, 0);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n\n        /* Log lookup failure path */\n        OS_FS_LogProbe(\"lookup_failed\", (void *)PhysDriveName, (void *)MountPoint, NULL, return_code, 0, 0);\n    }\n\n    return return_code;\n}\n"
}