{
  "user_message": "An agent A claimed that the following OS_FS_GetPhysDriveName code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_FS_GetPhysDriveName.\n```c\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Yes. The call uses strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1) without verifying the actual size of the destination buffer (PhysDriveName) or guaranteeing that the source contains a NUL within the first OS_FS_PHYS_NAME_LEN-1 bytes. strncpy will copy up to OS_FS_PHYS_NAME_LEN-1 bytes into PhysDriveName and then the code writes a terminating NUL at PhysDriveName[OS_FS_PHYS_NAME_LEN - 1]. If the caller passes a smaller buffer (for example char buf[32]) this will write beyond buf and thus violate Rule 21.17. Similarly, if filesys->system_mountpt does not contain a NUL within its accessible storage and OS_FS_PHYS_NAME_LEN-1 exceeds the accessible size of system_mountpt, strncpy could read beyond the source object. The function does not perform the necessary size checks, so the rule is violated.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void FS_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1383.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Entry log */\n    FS_ProbeLog(\"OS_FS_GetPhysDriveName ENTRY: PhysDriveName=%p, MountPoint=%p\", (void *)PhysDriveName, (const void *)MountPoint);\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Log after basic parameter checks */\n    FS_ProbeLog(\"Parameters checked: PhysDriveName=%p, MountPoint=%p\", (void *)PhysDriveName, (const void *)MountPoint);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    FS_ProbeLog(\"OS_ObjectIdGetBySearch returned %d; token addr=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n        FS_ProbeLog(\"Resolved filesys record: filesys=%p\", (void *)filesys);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            size_t copy_len = (size_t)(OS_FS_PHYS_NAME_LEN - 1);\n\n            /* Probe: log source pointer and intended copy length */\n            FS_ProbeLog(\"Preparing to strncpy: dest=%p, src=%p, copy_len=%zu, terminator_index=%d\",\n                        (void *)PhysDriveName, (const void *)filesys->system_mountpt, copy_len, (int)(OS_FS_PHYS_NAME_LEN - 1));\n\n            /* Probe: check for NUL within the first copy_len bytes of the source (this mirrors the maximum read length of strncpy)\n             * Note: memchr reads up to copy_len bytes, which is the same bound used by strncpy here. This is intended to\n             * reproduce whether the source contains a NUL within the amount that will be accessed by strncpy. */\n            const void *nulpos = memchr(filesys->system_mountpt, '\\0', copy_len);\n            if (nulpos != NULL)\n            {\n                size_t nul_index = (const char *)nulpos - filesys->system_mountpt;\n                FS_ProbeLog(\"Source has NUL within first %zu bytes at offset %zu\", copy_len, nul_index);\n            }\n            else\n            {\n                FS_ProbeLog(\"Source does NOT have NUL within first %zu bytes (memchr returned NULL)\", copy_len);\n            }\n\n            /* Actual (original) copy operation - preserve behavior */\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n\n            FS_ProbeLog(\"Performed strncpy and null-terminated at index %d (wrote '\\0' to dest[%d])\",\n                        (int)(OS_FS_PHYS_NAME_LEN - 1), (int)(OS_FS_PHYS_NAME_LEN - 1));\n        }\n        else\n        {\n            FS_ProbeLog(\"Filesystem not mounted system: filesys->flags=0x%08x\", (unsigned int)filesys->flags);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        FS_ProbeLog(\"Releasing token and returning code %d\", (int)return_code);\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        FS_ProbeLog(\"ObjectIdGetBySearch failed: return_code=%d -> returning OS_ERR_NAME_NOT_FOUND\", (int)return_code);\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    FS_ProbeLog(\"OS_FS_GetPhysDriveName EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_FS_GetPhysDriveName. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. The function calls strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1) and unconditionally writes a NUL at PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] without any check of the actual storage size of the destination buffer passed in by the caller. There is also no explicit check that filesys->system_mountpt contains a NUL within the first OS_FS_PHYS_NAME_LEN-1 bytes, so strncpy could read up to that many bytes from the source. Absent an enforced precondition (and a static guarantee in the code that both source and destination objects are at least OS_FS_PHYS_NAME_LEN bytes long), these operations can result in out-of-bounds reads or writes and therefore violate MISRA C 2023 Rule 21.17. (If the API contract elsewhere guarantees the buffer sizes and that guarantee is enforced, the call could be compliant; but from the function body shown there is no such verification, so the reported violation is valid.)"
}