{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call uses strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1) without verifying the actual size of the destination buffer (PhysDriveName) or guaranteeing that the source contains a NUL within the first OS_FS_PHYS_NAME_LEN-1 bytes. strncpy will copy up to OS_FS_PHYS_NAME_LEN-1 bytes into PhysDriveName and then the code writes a terminating NUL at PhysDriveName[OS_FS_PHYS_NAME_LEN - 1]. If the caller passes a smaller buffer (for example char buf[32]) this will write beyond buf and thus violate Rule 21.17. Similarly, if filesys->system_mountpt does not contain a NUL within its accessible storage and OS_FS_PHYS_NAME_LEN-1 exceeds the accessible size of system_mountpt, strncpy could read beyond the source object. The function does not perform the necessary size checks, so the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FS_GetPhysDriveName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1383.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FS_GetPhysDriveName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FS_GetPhysDriveName:\n```c\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FS_GetPhysDriveName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helper: append formatted logs to /tmp/logs/1383.txt */\nstatic void FS_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1383.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_FS_GetPhysDriveName(char *PhysDriveName, const char *MountPoint)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Entry log */\n    FS_ProbeLog(\"OS_FS_GetPhysDriveName ENTRY: PhysDriveName=%p, MountPoint=%p\", (void *)PhysDriveName, (const void *)MountPoint);\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(MountPoint);\n    OS_CHECK_POINTER(PhysDriveName);\n\n    /* Log after basic parameter checks */\n    FS_ProbeLog(\"Parameters checked: PhysDriveName=%p, MountPoint=%p\", (void *)PhysDriveName, (const void *)MountPoint);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)MountPoint, &token);\n\n    FS_ProbeLog(\"OS_ObjectIdGetBySearch returned %d; token addr=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n        FS_ProbeLog(\"Resolved filesys record: filesys=%p\", (void *)filesys);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            size_t copy_len = (size_t)(OS_FS_PHYS_NAME_LEN - 1);\n\n            /* Probe: log source pointer and intended copy length */\n            FS_ProbeLog(\"Preparing to strncpy: dest=%p, src=%p, copy_len=%zu, terminator_index=%d\",\n                        (void *)PhysDriveName, (const void *)filesys->system_mountpt, copy_len, (int)(OS_FS_PHYS_NAME_LEN - 1));\n\n            /* Probe: check for NUL within the first copy_len bytes of the source (this mirrors the maximum read length of strncpy)\n             * Note: memchr reads up to copy_len bytes, which is the same bound used by strncpy here. This is intended to\n             * reproduce whether the source contains a NUL within the amount that will be accessed by strncpy. */\n            const void *nulpos = memchr(filesys->system_mountpt, '\\0', copy_len);\n            if (nulpos != NULL)\n            {\n                size_t nul_index = (const char *)nulpos - filesys->system_mountpt;\n                FS_ProbeLog(\"Source has NUL within first %zu bytes at offset %zu\", copy_len, nul_index);\n            }\n            else\n            {\n                FS_ProbeLog(\"Source does NOT have NUL within first %zu bytes (memchr returned NULL)\", copy_len);\n            }\n\n            /* Actual (original) copy operation - preserve behavior */\n            strncpy(PhysDriveName, filesys->system_mountpt, OS_FS_PHYS_NAME_LEN - 1);\n            PhysDriveName[OS_FS_PHYS_NAME_LEN - 1] = 0;\n\n            FS_ProbeLog(\"Performed strncpy and null-terminated at index %d (wrote '\\0' to dest[%d])\",\n                        (int)(OS_FS_PHYS_NAME_LEN - 1), (int)(OS_FS_PHYS_NAME_LEN - 1));\n        }\n        else\n        {\n            FS_ProbeLog(\"Filesystem not mounted system: filesys->flags=0x%08x\", (unsigned int)filesys->flags);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        FS_ProbeLog(\"Releasing token and returning code %d\", (int)return_code);\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        FS_ProbeLog(\"ObjectIdGetBySearch failed: return_code=%d -> returning OS_ERR_NAME_NOT_FOUND\", (int)return_code);\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    FS_ProbeLog(\"OS_FS_GetPhysDriveName EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}