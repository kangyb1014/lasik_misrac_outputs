{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is only used to read the task record (used to access impl->id for pthread_detach) and is initialized from a non-const array element via OS_OBJECT_TABLE_GET. Since the function does not modify the pointed-to object, the pointer should be declared to point to a const-qualified type (e.g. const OS_impl_task_internal_record_t *impl). The current declaration 'OS_impl_task_internal_record_t *impl;' therefore violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskDetach_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/515.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskDetach_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskDetach_Impl:\n```c\nint32 OS_TaskDetach_Impl(const OS_object_token_t *token)\n{\n    OS_impl_task_internal_record_t *impl;\n    int                             ret;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    ret = pthread_detach(impl->id);\n\n    if (ret != 0)\n    {\n        OS_DEBUG(\"pthread_detach: Failed on Task ID = %lu, err = %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(ret));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskDetach_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <pthread.h>\n\n/*\n * Probe logging helper: append human-readable trace information to\n * /tmp/logs/515.txt so that the control flow and state leading to the\n * reported Rule 8.13 violation can be reproduced and inspected.\n *\n * This helper preserves original logic and only introduces non-intrusive\n * logging. It intentionally uses a local FILE* and opens the file in\n * append mode so multiple calls do not overwrite previous traces.\n */\nstatic void os_taskdetach_log(const char *tag, const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/515.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not affect the original control flow. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n\n    /* Prefix each line with a simple tag and then the formatted data. */\n    fprintf(f, \"[%s] \", tag);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n\n    va_end(ap);\n    fclose(f);\n}\n\nint32 OS_TaskDetach_Impl(const OS_object_token_t *token)\n{\n    OS_impl_task_internal_record_t *impl;\n    int                             ret;\n\n    /* Log entry and token pointer value to help reproduce control flow. */\n    os_taskdetach_log(\"ENTRY\", \"OS_TaskDetach_Impl called, token=%p\", (const void *)token);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    /* Log the impl pointer and the task identifier retrieved from it. */\n    os_taskdetach_log(\n        \"STATE\",\n        \"After OS_OBJECT_TABLE_GET: impl=%p, impl->id=%lu, token_objid=%lu\",\n        (void *)impl,\n        (unsigned long)impl->id,\n        (unsigned long)OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)));\n\n    /* Call the original pthread_detach and log the return code. */\n    ret = pthread_detach(impl->id);\n\n    os_taskdetach_log(\"CALL\", \"pthread_detach(id=%lu) returned %d\", (unsigned long)impl->id, ret);\n\n    if (ret != 0)\n    {\n        /* Preserve original debug output. */\n        OS_DEBUG(\"pthread_detach: Failed on Task ID = %lu, err = %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(ret));\n\n        /* Also write error details to the trace log for reproducing the scenario. */\n        os_taskdetach_log(\n            \"ERROR\",\n            \"pthread_detach failed for token=%p, impl=%p, task_objid=%lu, err=%d (%s)\",\n            (const void *)token,\n            (void *)impl,\n            (unsigned long)OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)),\n            ret,\n            strerror(ret));\n\n        return OS_ERROR;\n    }\n\n    os_taskdetach_log(\"EXIT\", \"OS_TaskDetach_Impl returning OS_SUCCESS for token=%p, impl=%p\", (const void *)token, (void *)impl);\n\n    return OS_SUCCESS;\n}\n"
}