{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_TaskDetach_Impl the local variable is declared as a non-const pointer: OS_impl_task_internal_record_t *impl; it is assigned from OS_OBJECT_TABLE_GET(OS_impl_task_table, *token) and only read (impl->id) \u2014 no modification of the pointed object occurs. Therefore impl could (and should) be declared as a pointer to a const-qualified type (const OS_impl_task_internal_record_t *impl) or the macro adjusted to return a const pointer. This violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskDetach_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/515.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskDetach_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskDetach_Impl:\n```c\nint32 OS_TaskDetach_Impl(const OS_object_token_t *token)\n{\n    OS_impl_task_internal_record_t *impl;\n    int                             ret;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    ret = pthread_detach(impl->id);\n\n    if (ret != 0)\n    {\n        OS_DEBUG(\"pthread_detach: Failed on Task ID = %lu, err = %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(ret));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskDetach_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/*\n * Probe helper: append a structured log entry to /tmp/logs/515.txt.\n * Keep this as a small utility to avoid changing the original logic.\n */\nstatic void OS_TaskDetach_Probe_Log(const char *stage,\n                                    const OS_object_token_t *token,\n                                    OS_impl_task_internal_record_t *impl,\n                                    int ret)\n{\n    FILE *fp = fopen(\"/tmp/logs/515.txt\", \"a\");\n\n    if (fp == NULL)\n    {\n        /* If logging cannot be opened, do nothing \u2014 preserve original behavior. */\n        return;\n    }\n\n    /* Write a compact, easy-to-parse single-line log for each probe stage. */\n    fprintf(fp, \"[OS_TaskDetach] stage=%s\\n\", stage);\n\n    if (token != NULL)\n    {\n        /* Log token pointer and the derived object id (uses existing project helpers).\n         * We call OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)) because the\n         * original code used that expression when reporting errors. This provides\n         * evidence tying the token to the task id in the logs. */\n        unsigned long objid = (unsigned long)OS_ObjectIdToInteger(OS_ObjectIdFromToken(token));\n        fprintf(fp, \"  token_ptr=%p, object_id=%lu\\n\", (void *)token, objid);\n    }\n    else\n    {\n        fprintf(fp, \"  token_ptr=(null)\\n\");\n    }\n\n    /* Log the impl pointer value and the impl->id read (if impl is non-null).\n     * This shows that impl is only read in this function (we do not modify it).\n     */\n    if (impl != NULL)\n    {\n        fprintf(fp, \"  impl_ptr=%p, impl->id=%lu\\n\", (void *)impl, (unsigned long)impl->id);\n    }\n    else\n    {\n        fprintf(fp, \"  impl_ptr=(null)\\n\");\n    }\n\n    /* Log return code of pthread_detach (or a sentinel if not yet invoked).\n     * When ret != 0 we also log the strerror text to mirror the original error output. */\n    if (ret >= 0)\n    {\n        fprintf(fp, \"  pthread_detach_ret=%d\", ret);\n        if (ret != 0)\n        {\n            fprintf(fp, \", errstr=%s\", strerror(ret));\n        }\n        fprintf(fp, \"\\n\");\n    }\n    else\n    {\n        fprintf(fp, \"  pthread_detach_ret=(not-invoked)\\n\");\n    }\n\n    fclose(fp);\n}\n\nint32 OS_TaskDetach_Impl(const OS_object_token_t *token)\n{\n    OS_impl_task_internal_record_t *impl;\n    int                             ret;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    /* Probe: log the pointer returned from the object table and the derived id. */\n    OS_TaskDetach_Probe_Log(\"after_object_table_get\", token, impl, -1);\n\n    ret = pthread_detach(impl->id);\n\n    /* Probe: log the result of pthread_detach and the task id involved. */\n    OS_TaskDetach_Probe_Log(\"after_pthread_detach\", token, impl, ret);\n\n    if (ret != 0)\n    {\n        OS_DEBUG(\"pthread_detach: Failed on Task ID = %lu, err = %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(ret));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n"
}