{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_TaskDetach_Impl:\n```c\nint32 OS_TaskDetach_Impl(const OS_object_token_t *token)\n{\n    OS_impl_task_internal_record_t *impl;\n    int                             ret;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    ret = pthread_detach(impl->id);\n\n    if (ret != 0)\n    {\n        OS_DEBUG(\"pthread_detach: Failed on Task ID = %lu, err = %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(ret));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nimpl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n```\nFocus on the above code fragment and judge whether it violates the rule 17.8 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the code only reads the object pointed to by the parameter (uses *token) and does not assign to or change the pointer itself. The parameter is declared as const, so the pointed-to object is not modified here. Therefore Rule 17.8 is not violated."
}