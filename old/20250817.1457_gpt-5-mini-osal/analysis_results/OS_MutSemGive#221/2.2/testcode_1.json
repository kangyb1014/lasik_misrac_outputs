{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe if-block only calls OS_DEBUG which is defined as an empty macro. The condition evaluation uses inlined, side\u2011effect free routines (OS_ObjectIdEqual/OS_ObjectIdToInteger), so the executed operations produce no observable effect; removing the entire if/OS_DEBUG call would not change program behaviour (aside from timing). Therefore this is dead code (logging removed by macro) and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGive code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1770.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemGive as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGive:\n```c\nint32 OS_MutSemGive(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n    osal_id_t                   self_task;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        self_task = OS_TaskGetId();\n\n        if (!OS_ObjectIdEqual(mutex->last_owner, self_task))\n        {\n            OS_DEBUG(\"WARNING: Task %lu giving mutex %lu while owned by task %lu\\n\", OS_ObjectIdToInteger(self_task),\n                     OS_ObjectIdToInteger(sem_id), OS_ObjectIdToInteger(mutex->last_owner));\n        }\n\n        mutex->last_owner = OS_OBJECT_ID_UNDEFINED;\n\n        return_code = OS_MutSemGive_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemGive code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Probe helper: append log lines to /tmp/logs/1770.txt\n * Kept static to avoid exposing symbols; does not change program logic. */\nstatic void OS_MutSemGive_Probe(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n    int mkdir_ret;\n\n    /* Ensure directory exists; ignore errors if it already exists. */\n    mkdir_ret = mkdir(\"/tmp/logs\", 0755);\n    (void)mkdir_ret; /* suppress unused-result warnings */\n\n    f = fopen(\"/tmp/logs/1770.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only; do not affect program behaviour */\n    }\n\n    /* Timestamp each line for easier tracing */\n    {\n        time_t t = time(NULL);\n        struct tm tm_buf;\n        if (t != (time_t)-1 && localtime_r(&t, &tm_buf) != NULL)\n        {\n            char timestr[64];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n            {\n                fprintf(f, \"%s - \", timestr);\n            }\n        }\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_MutSemGive(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n    osal_id_t                   self_task;\n\n    /* Entry log: record requested semaphore id */\n    OS_MutSemGive_Probe(\"ENTER OS_MutSemGive: sem_id=%lu\", (unsigned long)sem_id);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of object lookup */\n    OS_MutSemGive_Probe(\"OS_ObjectIdGetById returned %d for sem_id=%lu\", (int)return_code, (unsigned long)sem_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        self_task = OS_TaskGetId();\n\n        /* Log ownership state before the conditional check */\n        OS_MutSemGive_Probe(\"mutex->last_owner=%lu, self_task=%lu, sem_id=%lu\",\n                            (unsigned long)mutex->last_owner,\n                            (unsigned long)self_task,\n                            (unsigned long)sem_id);\n\n        if (!OS_ObjectIdEqual(mutex->last_owner, self_task))\n        {\n            /* Original debug call preserved to keep original behaviour */\n            OS_DEBUG(\"WARNING: Task %lu giving mutex %lu while owned by task %lu\\n\", OS_ObjectIdToInteger(self_task),\n                     OS_ObjectIdToInteger(sem_id), OS_ObjectIdToInteger(mutex->last_owner));\n\n            /* Probe: explicitly record the fact that the branch was taken and the values observed.\n             * This makes the previously-empty logging observable in the filesystem and can be used\n             * to reproduce the dead-code / removed-logging scenario described by the other agent. */\n            OS_MutSemGive_Probe(\"BRANCH TAKEN: Task %lu giving mutex %lu while owned by task %lu\",\n                                (unsigned long)self_task,\n                                (unsigned long)sem_id,\n                                (unsigned long)mutex->last_owner);\n        }\n\n        /* Log change of ownership prior to modification */\n        OS_MutSemGive_Probe(\"Setting mutex->last_owner to OS_OBJECT_ID_UNDEFINED for sem_id=%lu (previous=%lu)\",\n                            (unsigned long)sem_id,\n                            (unsigned long)mutex->last_owner);\n\n        mutex->last_owner = OS_OBJECT_ID_UNDEFINED;\n\n        /* Log before calling implementation layer */\n        OS_MutSemGive_Probe(\"Calling OS_MutSemGive_Impl for sem_id=%lu\", (unsigned long)sem_id);\n\n        return_code = OS_MutSemGive_Impl(&token);\n\n        /* Log result from implementation layer */\n        OS_MutSemGive_Probe(\"OS_MutSemGive_Impl returned %d for sem_id=%lu\", (int)return_code, (unsigned long)sem_id);\n    }\n\n    /* Exit log */\n    OS_MutSemGive_Probe(\"EXIT OS_MutSemGive: sem_id=%lu return_code=%d\", (unsigned long)sem_id, (int)return_code);\n\n    return return_code;\n}\n"
}