{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_MutSemGive_Probe(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n    int mkdir_ret;\n\n    /* Ensure directory exists; ignore errors if it already exists. */\n    mkdir_ret = mkdir(\"/tmp/logs\", 0755);\n    (void)mkdir_ret; /* suppress unused-result warnings */\n\n    f = fopen(\"/tmp/logs/1770.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only; do not affect program behaviour */\n    }\n\n    /* Timestamp each line for easier tracing */\n    {\n        time_t t = time(NULL);\n        struct tm tm_buf;\n        if (t != (time_t)-1 && localtime_r(&t, &tm_buf) != NULL)\n        {\n            char timestr[64];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n            {\n                fprintf(f, \"%s - \", timestr);\n            }\n        }\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_MutSemGive(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n    osal_id_t                   self_task;\n\n    /* Entry log: record requested semaphore id */\n    OS_MutSemGive_Probe(\"ENTER OS_MutSemGive: sem_id=%lu\", (unsigned long)sem_id);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of object lookup */\n    OS_MutSemGive_Probe(\"OS_ObjectIdGetById returned %d for sem_id=%lu\", (int)return_code, (unsigned long)sem_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        self_task = OS_TaskGetId();\n\n        /* Log ownership state before the conditional check */\n        OS_MutSemGive_Probe(\"mutex->last_owner=%lu, self_task=%lu, sem_id=%lu\",\n                            (unsigned long)mutex->last_owner,\n                            (unsigned long)self_task,\n                            (unsigned long)sem_id);\n\n        if (!OS_ObjectIdEqual(mutex->last_owner, self_task))\n        {\n            /* Original debug call preserved to keep original behaviour */\n            OS_DEBUG(\"WARNING: Task %lu giving mutex %lu while owned by task %lu\\n\", OS_ObjectIdToInteger(self_task),\n                     OS_ObjectIdToInteger(sem_id), OS_ObjectIdToInteger(mutex->last_owner));\n\n            /* Probe: explicitly record the fact that the branch was taken and the values observed.\n             * This makes the previously-empty logging observable in the filesystem and can be used\n             * to reproduce the dead-code / removed-logging scenario described by the other agent. */\n            OS_MutSemGive_Probe(\"BRANCH TAKEN: Task %lu giving mutex %lu while owned by task %lu\",\n                                (unsigned long)self_task,\n                                (unsigned long)sem_id,\n                                (unsigned long)mutex->last_owner);\n        }\n\n        /* Log change of ownership prior to modification */\n        OS_MutSemGive_Probe(\"Setting mutex->last_owner to OS_OBJECT_ID_UNDEFINED for sem_id=%lu (previous=%lu)\",\n                            (unsigned long)sem_id,\n                            (unsigned long)mutex->last_owner);\n\n        mutex->last_owner = OS_OBJECT_ID_UNDEFINED;\n\n        /* Log before calling implementation layer */\n        OS_MutSemGive_Probe(\"Calling OS_MutSemGive_Impl for sem_id=%lu\", (unsigned long)sem_id);\n\n        return_code = OS_MutSemGive_Impl(&token);\n\n        /* Log result from implementation layer */\n        OS_MutSemGive_Probe(\"OS_MutSemGive_Impl returned %d for sem_id=%lu\", (int)return_code, (unsigned long)sem_id);\n    }\n\n    /* Exit log */\n    OS_MutSemGive_Probe(\"EXIT OS_MutSemGive: sem_id=%lu return_code=%d\", (unsigned long)sem_id, (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmptm2og282/src/src/os/shared/src/osapi-mutex.c: In function 'OS_MutSemGive_Probe':\n/tmp/tmptm2og282/src/src/os/shared/src/osapi-mutex.c:176:19: error: storage size of 'tm_buf' isn't known\n  176 |         struct tm tm_buf;\n      |                   ^~~~~~\n/tmp/tmptm2og282/src/src/os/shared/src/osapi-mutex.c:188:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  188 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-mutex.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-mutex.dir/__/__/os/shared/src/osapi-mutex.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3911: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-mutex.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_MutSemGive as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n\nstatic void OS_MutSemGive_Probe(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n    int mkdir_ret;\n\n    /* Ensure directory exists; ignore errors if it already exists. */\n    mkdir_ret = mkdir(\"/tmp/logs\", 0755);\n    (void)mkdir_ret; /* suppress unused-result warnings */\n\n    f = fopen(\"/tmp/logs/1770.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only; do not affect program behaviour */\n    }\n\n    /* Timestamp each line for easier tracing */\n    {\n        time_t t = time(NULL);\n        struct tm tm_buf;\n        if (t != (time_t)-1 && localtime_r(&t, &tm_buf) != NULL)\n        {\n            char timestr[64];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n            {\n                fprintf(f, \"%s - \", timestr);\n            }\n        }\n    }\n\n    va_start(ap, fmt);\n    /* Cast ap to the implementation va_list to avoid type-mismatch with wrapper typedefs */\n    vfprintf(f, fmt, (va_list)ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_MutSemGive(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n    osal_id_t                   self_task;\n\n    /* Entry log: record requested semaphore id */\n    OS_MutSemGive_Probe(\"ENTER OS_MutSemGive: sem_id=%lu\", (unsigned long)sem_id);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of object lookup */\n    OS_MutSemGive_Probe(\"OS_ObjectIdGetById returned %d for sem_id=%lu\", (int)return_code, (unsigned long)sem_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        self_task = OS_TaskGetId();\n\n        /* Log ownership state before the conditional check */\n        OS_MutSemGive_Probe(\"mutex->last_owner=%lu, self_task=%lu, sem_id=%lu\",\n                            (unsigned long)mutex->last_owner,\n                            (unsigned long)self_task,\n                            (unsigned long)sem_id);\n\n        if (!OS_ObjectIdEqual(mutex->last_owner, self_task))\n        {\n            /* Original debug call preserved to keep original behaviour */\n            OS_DEBUG(\"WARNING: Task %lu giving mutex %lu while owned by task %lu\\n\", OS_ObjectIdToInteger(self_task),\n                     OS_ObjectIdToInteger(sem_id), OS_ObjectIdToInteger(mutex->last_owner));\n\n            /* Probe: explicitly record the fact that the branch was taken and the values observed.\n             * This makes the previously-empty logging observable in the filesystem and can be used\n             * to reproduce the dead-code / removed-logging scenario described by the other agent. */\n            OS_MutSemGive_Probe(\"BRANCH TAKEN: Task %lu giving mutex %lu while owned by task %lu\",\n                                (unsigned long)self_task,\n                                (unsigned long)sem_id,\n                                (unsigned long)mutex->last_owner);\n        }\n\n        /* Log change of ownership prior to modification */\n        OS_MutSemGive_Probe(\"Setting mutex->last_owner to OS_OBJECT_ID_UNDEFINED for sem_id=%lu (previous=%lu)\",\n                            (unsigned long)sem_id,\n                            (unsigned long)mutex->last_owner);\n\n        mutex->last_owner = OS_OBJECT_ID_UNDEFINED;\n\n        /* Log before calling implementation layer */\n        OS_MutSemGive_Probe(\"Calling OS_MutSemGive_Impl for sem_id=%lu\", (unsigned long)sem_id);\n\n        return_code = OS_MutSemGive_Impl(&token);\n\n        /* Log result from implementation layer */\n        OS_MutSemGive_Probe(\"OS_MutSemGive_Impl returned %d for sem_id=%lu\", (int)return_code, (unsigned long)sem_id);\n    }\n\n    /* Exit log */\n    OS_MutSemGive_Probe(\"EXIT OS_MutSemGive: sem_id=%lu return_code=%d\", (unsigned long)sem_id, (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "Two issues prevented compilation: struct tm was undeclared (time.h not included) and vfprintf reported a va_list type mismatch due to wrapper typedefs in the build environment. I added the necessary headers (<time.h>, <stdarg.h>, <stdio.h>, <sys/stat.h>) and cast the local 'ap' to (va_list) when calling vfprintf to avoid the type-mismatch error while preserving the original logic."
}