{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Helper: append a formatted log line with timestamp to the logfile. */\n    static void probe_log(const char *fmt, ...)\n    {\n        FILE *f = fopen(\"/tmp/logs/2095.txt\", \"a\");\n        if (f == NULL)\n        {\n            return; /* Do not disturb program flow if logging fails. */\n        }\n\n        time_t t = time(NULL);\n        struct tm tm_buf;\n        if (localtime_r(&t, &tm_buf) != NULL)\n        {\n            char timestr[64];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n            {\n                fprintf(f, \"%s - \", timestr);\n            }\n        }\n\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n\n        fprintf(f, \"\\n\");\n        fflush(f);\n        fclose(f);\n    }\n\n    /* Log entry into function with inputs */\n    probe_log(\"OS_TaskPrepare ENTER: task_id=%u, entrypt=%p\", (unsigned)task_id, (void *)entrypt);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    probe_log(\"After OS_ObjectIdGetById: return_code=%d, token_addr=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n        probe_log(\"Resolved task pointer: task=%p\", (void *)task);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        probe_log(\"After OS_TaskMatch_Impl: return_code=%d, token_addr=%p\", (int)return_code, (void *)&token);\n\n        /* Log the task's entry_function_pointer if task appears non-NULL. */\n        if (task != NULL)\n        {\n            probe_log(\"Task entry_function_pointer (about to assign): %p\", (void *)task->entry_function_pointer);\n        }\n        else\n        {\n            probe_log(\"Warning: task is NULL after OS_OBJECT_TABLE_GET\");\n        }\n\n        *entrypt    = task->entry_function_pointer;\n        probe_log(\"Assigned *entrypt = %p (entrypt pointer=%p)\", (void *)task->entry_function_pointer, (void *)entrypt);\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"Called OS_ObjectIdRelease on token at %p\", (void *)&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n        probe_log(\"After OS_TaskRegister_Impl: return_code=%d\", (int)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        probe_log(\"About to call OS_NotifyEvent: event=OS_EVENT_TASK_STARTUP, task_id=%u\", (unsigned)task_id);\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n        probe_log(\"After OS_NotifyEvent: return_code=%d\", (int)return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"Failure path: return_code=%d, setting *entrypt = NULL (entrypt=%p)\", (int)return_code, (void *)entrypt);\n        *entrypt = NULL;\n    }\n    else\n    {\n        probe_log(\"Success path: return_code=%d, final entrypt=%p, *entrypt=%p\", (int)return_code, (void *)entrypt, (void *)(entrypt ? *entrypt : NULL));\n    }\n\n    probe_log(\"OS_TaskPrepare EXIT: return_code=%d\", (int)return_code);\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpntv5i3t2/src/src/os/shared/src/osapi-task.c: In function 'OS_TaskPrepare':\n/tmp/tmpntv5i3t2/src/src/os/shared/src/osapi-task.c:94:17: error: invalid storage class for function 'probe_log'\n   94 |     static void probe_log(const char *fmt, ...)\n      |                 ^~~~~~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:342: CMakeFiles/osal.dir/src/os/shared/src/osapi-task.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_TaskPrepare as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Minimal local type definitions so this translation unit compiles standalone. */\ntypedef int32_t int32;\ntypedef uint32_t osal_id_t;\ntypedef void (*osal_task_entry)(void);\n\ntypedef struct\n{\n    uint32_t index;\n} OS_object_token_t;\n\ntypedef struct\n{\n    osal_task_entry entry_function_pointer;\n} OS_task_internal_record_t;\n\n/* The actual table is provided elsewhere in the real project; declare it extern here. */\nextern OS_task_internal_record_t OS_task_table[];\n\n/* Minimal integer constants to stand in for project constants */\nenum\n{\n    OS_SUCCESS = 0,\n    OS_LOCK_MODE_GLOBAL = 1,\n    OS_OBJECT_TYPE_OS_TASK = 2,\n    OS_EVENT_TASK_STARTUP = 3\n};\n\n/* External functions provided by the rest of the system (no mocks/definitions here). */\nint32 OS_ObjectIdGetById(int lock_mode, int object_type, osal_id_t id, OS_object_token_t *token);\nint32 OS_TaskMatch_Impl(OS_object_token_t *token);\nvoid  OS_ObjectIdRelease(OS_object_token_t *token);\nint32 OS_TaskRegister_Impl(osal_id_t id);\nint32 OS_NotifyEvent(int event, osal_id_t id, void *data);\n\n/* Helper: append a formatted log line with timestamp to the logfile. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2095.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Do not disturb program flow if logging fails. */\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(f, \"%s - \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Log entry into function with inputs */\n    probe_log(\"OS_TaskPrepare ENTER: task_id=%u, entrypt=%p\", (unsigned)task_id, (void *)entrypt);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    probe_log(\"After OS_ObjectIdGetById: return_code=%d, token_addr=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Resolve the task pointer from the table using the token.index */\n        task = &OS_task_table[token.index];\n        probe_log(\"Resolved task pointer: task=%p\", (void *)task);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        probe_log(\"After OS_TaskMatch_Impl: return_code=%d, token_addr=%p\", (int)return_code, (void *)&token);\n\n        /* Log the task's entry_function_pointer if task appears non-NULL. */\n        if (task != NULL)\n        {\n            probe_log(\"Task entry_function_pointer (about to assign): %p\", (void *)task->entry_function_pointer);\n        }\n        else\n        {\n            probe_log(\"Warning: task is NULL after resolving from OS_task_table\");\n        }\n\n        *entrypt    = task->entry_function_pointer;\n        probe_log(\"Assigned *entrypt = %p (entrypt pointer=%p)\", (void *)task->entry_function_pointer, (void *)entrypt);\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"Called OS_ObjectIdRelease on token at %p\", (void *)&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n        probe_log(\"After OS_TaskRegister_Impl: return_code=%d\", (int)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        probe_log(\"About to call OS_NotifyEvent: event=OS_EVENT_TASK_STARTUP, task_id=%u\", (unsigned)task_id);\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n        probe_log(\"After OS_NotifyEvent: return_code=%d\", (int)return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"Failure path: return_code=%d, setting *entrypt = NULL (entrypt=%p)\", (int)return_code, (void *)entrypt);\n        *entrypt = NULL;\n    }\n    else\n    {\n        probe_log(\"Success path: return_code=%d, final entrypt=%p, *entrypt=%p\", (int)return_code, (void *)entrypt, (void *)(entrypt ? *entrypt : NULL));\n    }\n\n    probe_log(\"OS_TaskPrepare EXIT: return_code=%d\", (int)return_code);\n    return return_code;\n}\n",
  "explanation": "The compilation error was caused by defining the helper function probe_log inside OS_TaskPrepare (nested function), which is not valid C. I moved probe_log out to file scope as a static function. To make the translation unit compile standalone, I added minimal type definitions, enum constants, and extern declarations for the OS table and external functions referenced by OS_TaskPrepare. I replaced the OS_OBJECT_TABLE_GET macro usage with a direct table access using token.index. No behavior of OS_TaskPrepare was changed beyond these structural fixes."
}