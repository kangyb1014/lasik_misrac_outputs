{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen OS_TaskPrepare is called from OS_TaskEntryPoint (shown), the caller only uses the entrypt value if OS_TaskPrepare returns OS_SUCCESS. Thus the assignment in the failure path (*entrypt = NULL;) is executed only when return_code != OS_SUCCESS and no caller uses entrypt in that case. Removing that assignment would not change program behaviour in this usage, so the operation is dead code. (If other callers elsewhere relied on entrypt being cleared on failure, then it would not be dead; no such callers are shown.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskPrepare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2090.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskPrepare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskPrepare:\n```c\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        *entrypt    = task->entry_function_pointer;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        *entrypt = NULL;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskPrepare code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stdbool.h>\n\nstatic void os_taskprepare_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2090.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    bool                       entry_assigned = false;\n\n    os_taskprepare_log(\"OS_TaskPrepare START: task_id=%llu, entrypt_ptr=%p\",\n                       (unsigned long long)(uintptr_t)task_id,\n                       (void *)entrypt);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    os_taskprepare_log(\"After OS_ObjectIdGetById: return_code=%d, token=%p\",\n                       return_code, (void *)(uintptr_t)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        os_taskprepare_log(\"After OS_TaskMatch_Impl: return_code=%d, task_ptr=%p\",\n                           return_code, (void *)task);\n\n        /* Log intention to assign entrypt (do not read *entrypt here to avoid UB) */\n        os_taskprepare_log(\"Assigning *entrypt = task->entry_function_pointer (%p)\",\n                           (void *)task->entry_function_pointer);\n\n        *entrypt    = task->entry_function_pointer;\n        entry_assigned = true;\n        os_taskprepare_log(\"Assigned *entrypt -> %p (entry_assigned=%d)\",\n                           (void *)*entrypt, (int)entry_assigned);\n\n        OS_ObjectIdRelease(&token);\n        os_taskprepare_log(\"Released object token\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n        os_taskprepare_log(\"After OS_TaskRegister_Impl: return_code=%d\", return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n        os_taskprepare_log(\"After OS_NotifyEvent: return_code=%d\", return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        if (entry_assigned)\n        {\n            os_taskprepare_log(\"Failure path: clearing *entrypt (was %p)\", (void *)*entrypt);\n        }\n        else\n        {\n            os_taskprepare_log(\"Failure path: clearing *entrypt but it was not previously assigned (entry_assigned=%d)\", (int)entry_assigned);\n        }\n\n        *entrypt = NULL;\n        os_taskprepare_log(\"*entrypt cleared to NULL\");\n    }\n\n    os_taskprepare_log(\"OS_TaskPrepare END: return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}