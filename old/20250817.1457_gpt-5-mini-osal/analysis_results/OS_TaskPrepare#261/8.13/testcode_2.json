{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'task' is declared as a mutable pointer (OS_task_internal_record_t *task) but in this function it is only used to read fields (e.g. task->entry_function_pointer). Therefore the pointer should be to a const-qualified type (const OS_task_internal_record_t *task) to reflect that the object is not modified here. The assignment task = OS_OBJECT_TABLE_GET(OS_task_table, token); thus violates MISRA C 2023 Rule 8.13 because the pointer is not const-qualified even though it could be.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskPrepare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2091.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskPrepare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskPrepare:\n```c\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        *entrypt    = task->entry_function_pointer;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        *entrypt = NULL;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskPrepare code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging function for OS_TaskPrepare. Logs control flow and key state to /tmp/logs/2091.txt */\nstatic void OS_TaskPrepare_Log(const char *stage, const void *task_ptr, const void *token_addr, long return_code, const void *entrypt_ptr)\n{\n    FILE *fp = fopen(\"/tmp/logs/2091.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"[OS_TaskPrepare] %s: task_ptr=%p token_addr=%p return_code=%ld entrypt_ptr=%p\\n\",\n                stage, task_ptr, token_addr, return_code, entrypt_ptr);\n        fclose(fp);\n    }\n}\n\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Obtain object token for the given task_id */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    /* Log state after attempting to get the object id */\n    OS_TaskPrepare_Log(\"after_ObjectIdGetById\", NULL, &token, (long)return_code, entrypt);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Get task record from object table */\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n        OS_TaskPrepare_Log(\"after_OBJECT_TABLE_GET\", task, &token, (long)return_code, entrypt);\n\n        /* Match the task implementation details */\n        return_code = OS_TaskMatch_Impl(&token);\n        OS_TaskPrepare_Log(\"after_TaskMatch_Impl\", task, &token, (long)return_code, entrypt);\n\n        /* Read entry function pointer from the task record (no modification of task)\n           This is the use-site that motivates the const-qualification suggestion. */\n        *entrypt = task->entry_function_pointer;\n        OS_TaskPrepare_Log(\"after_assign_entrypt\", task, &token, (long)return_code, entrypt);\n\n        /* Release the object token */\n        OS_ObjectIdRelease(&token);\n        OS_TaskPrepare_Log(\"after_ObjectIdRelease\", task, &token, (long)return_code, entrypt);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_TaskPrepare_Log(\"before_TaskRegister_Impl\", task, &token, (long)return_code, entrypt);\n        return_code = OS_TaskRegister_Impl(task_id);\n        OS_TaskPrepare_Log(\"after_TaskRegister_Impl\", task, &token, (long)return_code, entrypt);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        OS_TaskPrepare_Log(\"before_NotifyEvent\", task, &token, (long)return_code, entrypt);\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n        OS_TaskPrepare_Log(\"after_NotifyEvent\", task, &token, (long)return_code, entrypt);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* Ensure entrypt is NULL on failure and log this action */\n        *entrypt = NULL;\n        OS_TaskPrepare_Log(\"on_failure_set_entrypt_null\", NULL, &token, (long)return_code, entrypt);\n    }\n\n    OS_TaskPrepare_Log(\"exit\", (void *)((uintptr_t)task), &token, (long)return_code, entrypt);\n    return return_code;\n}\n"
}