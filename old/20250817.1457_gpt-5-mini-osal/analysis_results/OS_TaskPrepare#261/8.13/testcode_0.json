{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'task' is only used to read members (task->entry_function_pointer) and is never used to modify the pointee. According to MISRA C 2023 Rule 8.13 it should therefore be declared to point to a const-qualified type (e.g. const OS_task_internal_record_t *task). Declaring it as a non-const pointer when mutation is not required violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskPrepare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2091.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskPrepare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskPrepare:\n```c\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        *entrypt    = task->entry_function_pointer;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        *entrypt = NULL;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskPrepare code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger used by OS_TaskPrepare to record control flow and state. */\nstatic void OS_TaskPrepare_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2091.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    fprintf(fp, \"\\n\");\n    va_end(ap);\n\n    fclose(fp);\n}\n\nstatic int32 OS_TaskPrepare(osal_id_t task_id, osal_task_entry *entrypt)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    OS_TaskPrepare_Log(\"OS_TaskPrepare start: task_id=%lu, entrypt_ptr=%p\", (unsigned long)task_id, (void *)entrypt);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TASK, task_id, &token);\n    OS_TaskPrepare_Log(\"OS_ObjectIdGetById returned: %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n        OS_TaskPrepare_Log(\"Retrieved task pointer: %p (token_addr=%p)\", (void *)task, (void *)&token);\n\n        return_code = OS_TaskMatch_Impl(&token);\n        OS_TaskPrepare_Log(\"OS_TaskMatch_Impl returned: %ld\", (long)return_code);\n\n        /* Log the entry function pointer presence before assignment */\n        OS_TaskPrepare_Log(\"task->entry_function_pointer is %s\", (task && task->entry_function_pointer) ? \"non-NULL\" : \"NULL\");\n\n        *entrypt    = task->entry_function_pointer;\n        OS_TaskPrepare_Log(\"Assigned *entrypt (entrypt_ptr=%p). Now *entrypt is %s\", (void *)entrypt, (*entrypt) ? \"non-NULL\" : \"NULL\");\n\n        OS_ObjectIdRelease(&token);\n        OS_TaskPrepare_Log(\"Released object id token at %p\", (void *)&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TaskRegister_Impl(task_id);\n        OS_TaskPrepare_Log(\"OS_TaskRegister_Impl returned: %ld\", (long)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Give event callback to the application */\n        return_code = OS_NotifyEvent(OS_EVENT_TASK_STARTUP, task_id, NULL);\n        OS_TaskPrepare_Log(\"OS_NotifyEvent(OS_EVENT_TASK_STARTUP) returned: %ld\", (long)return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        *entrypt = NULL;\n        OS_TaskPrepare_Log(\"Failure path: return_code=%ld. Set *entrypt to NULL\", (long)return_code);\n    }\n    else\n    {\n        OS_TaskPrepare_Log(\"Success path: return_code=%ld. entrypt_ptr=%p, entry_assigned=%s\", (long)return_code, (void *)entrypt, (*entrypt) ? \"non-NULL\" : \"NULL\");\n    }\n\n    OS_TaskPrepare_Log(\"OS_TaskPrepare end: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}