{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe error-handling branch is effectively dead: OS_DEBUG is defined as an empty macro, so the if (ret != 0) { OS_DEBUG(\"...\"); } block has no effect (strerror() is not evaluated). The conditional check and empty block can be removed without changing program behaviour, so this constitutes dead code in the current project configuration.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Lock_Global_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/346.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Lock_Global_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Lock_Global_Impl:\n```c\nvoid OS_Lock_Global_Impl(osal_objtype_t idtype)\n{\n    OS_impl_objtype_lock_t *impl;\n    int                     ret;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    if (impl != NULL)\n    {\n        ret = pthread_mutex_lock(&impl->mutex);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_mutex_lock(&impl->mutex): %s\", strerror(ret));\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_Lock_Global_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <pthread.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/346.txt */\nstatic void os_lock_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/346.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nvoid OS_Lock_Global_Impl(osal_objtype_t idtype)\n{\n    OS_impl_objtype_lock_t *impl;\n    int                     ret;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    /* Log entry and state prior to locking */\n    os_lock_probe_log(\"OS_Lock_Global_Impl: entry idtype=%d impl=%p\", (int)idtype, (void *)impl);\n\n    if (impl != NULL)\n    {\n        os_lock_probe_log(\"OS_Lock_Global_Impl: attempting pthread_mutex_lock on impl->mutex (%p)\", (void *)&impl->mutex);\n\n        ret = pthread_mutex_lock(&impl->mutex);\n\n        /* Log result of pthread_mutex_lock */\n        os_lock_probe_log(\"OS_Lock_Global_Impl: pthread_mutex_lock returned ret=%d\", ret);\n\n        if (ret != 0)\n        {\n            /* Explicitly evaluate strerror(ret) here and log it so the runtime evidence\n               shows what the error string would have been. This provides evidence for\n               the violation scenario where the OS_DEBUG macro is empty and would\n               otherwise prevent strerror() from being evaluated. */\n            const char *errstr = strerror(ret);\n            os_lock_probe_log(\"OS_Lock_Global_Impl: error branch entered: ret=%d strerror=\\\"%s\\\"\", ret, errstr ? errstr : \"(null)\");\n\n            /* Preserve original behavior: keep the OS_DEBUG call as in the original code. */\n            OS_DEBUG(\"pthread_mutex_lock(&impl->mutex): %s\", strerror(ret));\n        }\n    }\n    else\n    {\n        os_lock_probe_log(\"OS_Lock_Global_Impl: impl is NULL for idtype=%d\", (int)idtype);\n    }\n}\n"
}