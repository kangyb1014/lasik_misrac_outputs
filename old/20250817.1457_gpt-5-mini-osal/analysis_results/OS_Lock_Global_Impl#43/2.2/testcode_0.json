{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe else branch only contains a call to OS_DEBUG, but OS_DEBUG is defined as an empty macro (#define OS_DEBUG(__VA_ARGS__)). Thus the statement compiles to nothing and has no effect; removing that call (or the entire else branch) would not change program behaviour. This is dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Lock_Global_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/346.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Lock_Global_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Lock_Global_Impl:\n```c\nvoid OS_Lock_Global_Impl(osal_objtype_t idtype)\n{\n    OS_impl_objtype_lock_t *impl;\n    int                     ret;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    if (impl != NULL)\n    {\n        ret = pthread_mutex_lock(&impl->mutex);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_mutex_lock(&impl->mutex): %s\", strerror(ret));\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_Lock_Global_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <pthread.h>\n#include <string.h>\n#include <stdint.h>\n#include <errno.h>\n\n/* Minimal type definitions to make this translation unit self-contained for testing. */\ntypedef int osal_objtype_t;\n\ntypedef struct OS_impl_objtype_lock\n{\n    pthread_mutex_t mutex;\n} OS_impl_objtype_lock_t;\n\n/*\n * Provide a weakly-linked table so this file can be compiled and executed as a test\n * without conflicting with a real definition provided elsewhere.\n */\n#ifdef __GNUC__\nOS_impl_objtype_lock_t *OS_impl_objtype_lock_table[4] __attribute__((weak)) = {0, 0, 0, 0};\n#else\nOS_impl_objtype_lock_t *OS_impl_objtype_lock_table[4] = {0, 0, 0, 0};\n#endif\n\n/* If OS_DEBUG is not a macro defined elsewhere, declare it as a function so calls compile.\n * If OS_DEBUG is defined as a macro (for example as an empty macro), this prototype is skipped.\n */\n#ifndef OS_DEBUG\nvoid OS_DEBUG(const char *fmt, ...);\n#endif\n\n/*\n * OS_Lock_Global_Impl with inserted probes that log the control path and relevant state\n * into the file: /tmp/logs/346.txt. The original logic is preserved: the mutex lock is\n * attempted when impl != NULL and OS_DEBUG is still invoked on error (whether as a macro\n * or a function). The probes provide evidence for the case when impl == NULL (a path\n * that might correspond to \"dead code\" elsewhere) and for the error-return path.\n */\nvoid OS_Lock_Global_Impl(osal_objtype_t idtype)\n{\n    OS_impl_objtype_lock_t *impl;\n    int                     ret;\n    FILE *logf = fopen(\"/tmp/logs/346.txt\", \"a\");\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_Lock_Global_Impl entry: idtype=%d, impl=%p\\n\", (int)idtype, (void *)impl);\n        fflush(logf);\n    }\n\n    if (impl != NULL)\n    {\n        if (logf)\n        {\n            fprintf(logf, \"  impl != NULL: attempting pthread_mutex_lock on %p\\n\", (void *)&impl->mutex);\n            fflush(logf);\n        }\n\n        ret = pthread_mutex_lock(&impl->mutex);\n\n        if (ret != 0)\n        {\n            /* Preserve original behavior: call OS_DEBUG as in the target code. */\n            OS_DEBUG(\"pthread_mutex_lock(&impl->mutex): %s\", strerror(ret));\n\n            if (logf)\n            {\n                /* Log the error returned by pthread_mutex_lock and the corresponding strerror. */\n                fprintf(logf, \"  pthread_mutex_lock failed: ret=%d, strerror=%s\\n\", ret, strerror(ret));\n                fflush(logf);\n            }\n        }\n        else\n        {\n            if (logf)\n            {\n                fprintf(logf, \"  pthread_mutex_lock succeeded (ret=%d)\\n\", ret);\n                fflush(logf);\n            }\n        }\n    }\n    else\n    {\n        /* This path corresponds to the scenario where nothing is performed by the function\n         * (in some variants an else branch contained only a call to OS_DEBUG which may be\n         * defined as an empty macro). Log that the impl was NULL so testers can observe\n         * the control flow that might expose a \"dead code\" situation.\n         */\n        if (logf)\n        {\n            fprintf(logf, \"  impl == NULL: no lock attempted (this path may be considered dead code if an else only called an empty OS_DEBUG)\\n\");\n            fflush(logf);\n        }\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_Lock_Global_Impl exit: idtype=%d\\n\\n\", (int)idtype);\n        fclose(logf);\n    }\n}\n"
}