{
  "user_message": "An agent A claimed that the following OS_SocketConnect_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketConnect_Impl.\n```c\nint32 OS_SocketConnect_Impl(const OS_object_token_t *token, const OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    int                             os_status;\n    int                             sockopt;\n    socklen_t                       slen;\n    uint32                          operation;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&Addr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            slen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            slen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            slen = 0;\n            break;\n    }\n\n    if (slen != Addr->ActualLength)\n    {\n        return_code = OS_ERR_BAD_ADDRESS;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n        os_status   = connect(impl->fd, sa, slen);\n        if (os_status < 0)\n        {\n            if (errno != EINPROGRESS)\n            {\n                OS_DEBUG(\"connect: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /*\n                 * If the socket was created in nonblocking mode (O_NONBLOCK flag) then the connect\n                 * runs in the background and connect() returns EINPROGRESS.  In this case we still\n                 * want to provide the \"normal\" (blocking) semantics to the calling app, such that\n                 * when OS_SocketConnect() returns, the socket is ready for use.\n                 *\n                 * To provide consistent behavior to calling apps, this does a select() to wait\n                 * for the socket to become writable, meaning that the remote side is connected.\n                 *\n                 * An important point here is that the calling app can control the timeout.  If the\n                 * normal/blocking connect() was used, the OS/IP stack controls the timeout, and it\n                 * can be quite long.\n                 */\n                operation = OS_STREAM_STATE_WRITABLE;\n                if (impl->selectable)\n                {\n                    return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n                }\n                if (return_code == OS_SUCCESS)\n                {\n                    if ((operation & OS_STREAM_STATE_WRITABLE) == 0)\n                    {\n                        return_code = OS_ERROR_TIMEOUT;\n                    }\n                    else\n                    {\n                        /*\n                         * The SO_ERROR socket flag should also read back zero.\n                         * If not zero, something went wrong during connect\n                         */\n                        sockopt   = 0;\n                        slen      = sizeof(sockopt);\n                        os_status = getsockopt(impl->fd, SOL_SOCKET, SO_ERROR, &sockopt, &slen);\n                        if (os_status < 0 || sockopt != 0)\n                        {\n                            return_code = OS_ERROR;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The pointer 'impl' is declared as a non-const pointer but is only used for read access (impl->fd, impl->selectable) in this function. According to MISRA C 2023 Rule 8.13 it should be const-qualified to prevent accidental modification (e.g. declare: const OS_impl_file_internal_record_t *impl). If the object genuinely needs to be modified through this pointer elsewhere in the function, const would be inappropriate, but in the shown code it is not modified, so the lack of const is a rule violation.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_SocketConnect_Impl(const OS_object_token_t *token, const OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    int                             os_status;\n    int                             sockopt;\n    socklen_t                       slen;\n    uint32                          operation;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Open log file for probes; if opening fails, proceed without logging */\n    FILE *log = fopen(\"/tmp/logs/875.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"ENTER OS_SocketConnect_Impl: token=%p Addr=%p timeout=%ld\\n\",\n                (const void *)token, (const void *)Addr, (long)timeout);\n    }\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    if (log)\n    {\n        fprintf(log, \"impl lookup: impl=%p\\n\", (void *)impl);\n        if (impl != NULL)\n        {\n            fprintf(log, \"impl->fd=%d impl->selectable=%d\\n\", impl->fd, impl->selectable);\n        }\n    }\n\n    sa = (const struct sockaddr *)&Addr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            slen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            slen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            slen = 0;\n            break;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"sa_family=%d computed_slen=%u Addr->ActualLength=%u\\n\",\n                (int)sa->sa_family, (unsigned)slen, (unsigned)Addr->ActualLength);\n    }\n\n    if (slen != Addr->ActualLength)\n    {\n        if (log)\n        {\n            fprintf(log, \"BAD ADDRESS: expected_len=%u actual_len=%u\\n\",\n                    (unsigned)slen, (unsigned)Addr->ActualLength);\n        }\n        return_code = OS_ERR_BAD_ADDRESS;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n        os_status   = connect(impl->fd, sa, slen);\n\n        if (log)\n        {\n            fprintf(log, \"connect returned os_status=%d\\n\", os_status);\n        }\n\n        if (os_status < 0)\n        {\n            /* save errno immediately to avoid changes by logging functions */\n            int saved_errno = errno;\n\n            if (saved_errno != EINPROGRESS)\n            {\n                if (log)\n                {\n                    fprintf(log, \"connect error: errno=%d (%s)\\n\", saved_errno, strerror(saved_errno));\n                }\n                OS_DEBUG(\"connect: %s\\n\", strerror(saved_errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* EINPROGRESS branch - non-blocking connect in progress */\n                if (log)\n                {\n                    fprintf(log, \"connect returned EINPROGRESS (non-blocking)\\n\");\n                }\n\n                operation = OS_STREAM_STATE_WRITABLE;\n                if (impl->selectable)\n                {\n                    if (log)\n                    {\n                        fprintf(log, \"calling OS_SelectSingle_Impl token=%p operation=0x%08x timeout=%ld\\n\",\n                                (const void *)token, (unsigned)operation, (long)timeout);\n                    }\n\n                    return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n\n                    if (log)\n                    {\n                        fprintf(log, \"OS_SelectSingle_Impl returned %ld operation=0x%08x\\n\",\n                                (long)return_code, (unsigned)operation);\n                    }\n                }\n                if (return_code == OS_SUCCESS)\n                {\n                    if ((operation & OS_STREAM_STATE_WRITABLE) == 0)\n                    {\n                        if (log)\n                        {\n                            fprintf(log, \"select indicated timeout/not writable: operation=0x%08x\\n\",\n                                    (unsigned)operation);\n                        }\n                        return_code = OS_ERROR_TIMEOUT;\n                    }\n                    else\n                    {\n                        /* Check SO_ERROR on the socket to ensure connect succeeded */\n                        sockopt   = 0;\n                        slen      = sizeof(sockopt);\n                        os_status = getsockopt(impl->fd, SOL_SOCKET, SO_ERROR, &sockopt, &slen);\n\n                        if (log)\n                        {\n                            fprintf(log, \"getsockopt returned os_status=%d sockopt=%d slen=%u\\n\",\n                                    os_status, sockopt, (unsigned)slen);\n                        }\n\n                        if (os_status < 0 || sockopt != 0)\n                        {\n                            return_code = OS_ERROR;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"EXIT OS_SocketConnect_Impl: return_code=%ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_SocketConnect_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_SocketConnect_Impl the local variable impl is only used for read access (impl->fd, impl->selectable) and is never used to modify the underlying object. Per MISRA C 2023 Rule 8.13 a pointer should be to a const-qualified type whenever possible, so declaring impl as const OS_impl_file_internal_record_t *impl would be appropriate and would satisfy the guideline. Assigning the table lookup result to a pointer-to-const is a valid conversion in C. (There may be legitimate project-specific reasons to keep it non-const, but based on the shown function alone the omission of const is a violation of Rule 8.13.)"
}