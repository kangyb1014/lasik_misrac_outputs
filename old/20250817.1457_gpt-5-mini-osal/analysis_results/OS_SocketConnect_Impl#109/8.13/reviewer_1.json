{
  "user_message": "An agent A claimed that the following OS_SocketConnect_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketConnect_Impl.\n```c\nint32 OS_SocketConnect_Impl(const OS_object_token_t *token, const OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    int                             os_status;\n    int                             sockopt;\n    socklen_t                       slen;\n    uint32                          operation;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&Addr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            slen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            slen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            slen = 0;\n            break;\n    }\n\n    if (slen != Addr->ActualLength)\n    {\n        return_code = OS_ERR_BAD_ADDRESS;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n        os_status   = connect(impl->fd, sa, slen);\n        if (os_status < 0)\n        {\n            if (errno != EINPROGRESS)\n            {\n                OS_DEBUG(\"connect: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /*\n                 * If the socket was created in nonblocking mode (O_NONBLOCK flag) then the connect\n                 * runs in the background and connect() returns EINPROGRESS.  In this case we still\n                 * want to provide the \"normal\" (blocking) semantics to the calling app, such that\n                 * when OS_SocketConnect() returns, the socket is ready for use.\n                 *\n                 * To provide consistent behavior to calling apps, this does a select() to wait\n                 * for the socket to become writable, meaning that the remote side is connected.\n                 *\n                 * An important point here is that the calling app can control the timeout.  If the\n                 * normal/blocking connect() was used, the OS/IP stack controls the timeout, and it\n                 * can be quite long.\n                 */\n                operation = OS_STREAM_STATE_WRITABLE;\n                if (impl->selectable)\n                {\n                    return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n                }\n                if (return_code == OS_SUCCESS)\n                {\n                    if ((operation & OS_STREAM_STATE_WRITABLE) == 0)\n                    {\n                        return_code = OS_ERROR_TIMEOUT;\n                    }\n                    else\n                    {\n                        /*\n                         * The SO_ERROR socket flag should also read back zero.\n                         * If not zero, something went wrong during connect\n                         */\n                        sockopt   = 0;\n                        slen      = sizeof(sockopt);\n                        os_status = getsockopt(impl->fd, SOL_SOCKET, SO_ERROR, &sockopt, &slen);\n                        if (os_status < 0 || sockopt != 0)\n                        {\n                            return_code = OS_ERROR;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local variable 'impl' is declared as a non-const pointer (OS_impl_file_internal_record_t *impl) and is assigned from OS_OBJECT_TABLE_GET(..., *token). In this function 'impl' is only used for read access (impl->fd, impl->selectable) and is not modified. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible, so 'impl' should be declared as 'const OS_impl_file_internal_record_t *impl' (or the table accessor should return a pointer-to-const) to prevent accidental modification.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_SocketConnect_Impl(const OS_object_token_t *token, const OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    int                             os_status;\n    int                             sockopt;\n    socklen_t                       slen;\n    uint32                          operation;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Probe: log entry and token */\n    {\n        FILE *f = fopen(\"/tmp/logs/875.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"OS_SocketConnect_Impl ENTRY: token=%p, Addr=%p, timeout=%d\\n\", (const void *)token, (const void *)Addr, (int)timeout);\n            fclose(f);\n        }\n    }\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Probe: log impl pointer and key fields (if available) */\n    {\n        FILE *f = fopen(\"/tmp/logs/875.txt\", \"a\");\n        if (f)\n        {\n            if (impl != NULL)\n            {\n                /* Note: only read access here for diagnostics */\n                fprintf(f, \"impl pointer=%p, impl->fd=%d, impl->selectable=%d\\n\", (const void *)impl, impl->fd, (int)impl->selectable);\n            }\n            else\n            {\n                fprintf(f, \"impl pointer=NULL\\n\");\n            }\n            fclose(f);\n        }\n    }\n\n    sa = (const struct sockaddr *)&Addr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            slen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            slen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            slen = 0;\n            break;\n    }\n\n    /* Probe: log sockaddr family and expected length */\n    {\n        FILE *f = fopen(\"/tmp/logs/875.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"sa_family=%d, computed_slen=%u, Addr->ActualLength=%u\\n\", (int)sa->sa_family, (unsigned)slen, (unsigned)Addr->ActualLength);\n            fclose(f);\n        }\n    }\n\n    if (slen != Addr->ActualLength)\n    {\n        /* Probe: log bad address case */\n        {\n            FILE *f = fopen(\"/tmp/logs/875.txt\", \"a\");\n            if (f)\n            {\n                fprintf(f, \"slen mismatch -> OS_ERR_BAD_ADDRESS\\n\");\n                fclose(f);\n            }\n        }\n\n        return_code = OS_ERR_BAD_ADDRESS;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n        os_status   = connect(impl->fd, sa, slen);\n\n        /* Probe: log result of connect */\n        {\n            FILE *f = fopen(\"/tmp/logs/875.txt\", \"a\");\n            if (f)\n            {\n                fprintf(f, \"connect returned os_status=%d\", os_status);\n                if (os_status < 0)\n                {\n                    fprintf(f, \", errno=%d (%s)\", errno, strerror(errno));\n                }\n                fprintf(f, \"\\n\");\n                fclose(f);\n            }\n        }\n\n        if (os_status < 0)\n        {\n            if (errno != EINPROGRESS)\n            {\n                OS_DEBUG(\"connect: %s\\n\", strerror(errno));\n\n                /* Probe: log immediate error path */\n                {\n                    FILE *f = fopen(\"/tmp/logs/875.txt\", \"a\");\n                    if (f)\n                    {\n                        fprintf(f, \"connect failed immediate (errno=%d) -> OS_ERROR\\n\", errno);\n                        fclose(f);\n                    }\n                }\n\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /*\n                 * If the socket was created in nonblocking mode (O_NONBLOCK flag) then the connect\n                 * runs in the background and connect() returns EINPROGRESS.  In this case we still\n                 * want to provide the \"normal\" (blocking) semantics to the calling app, such that\n                 * when OS_SocketConnect() returns, the socket is ready for use.\n                 *\n                 * To provide consistent behavior to calling apps, this does a select() to wait\n                 * for the socket to become writable, meaning that the remote side is connected.\n                 *\n                 * An important point here is that the calling app can control the timeout.  If the\n                 * normal/blocking connect() was used, the OS/IP stack controls the timeout, and it\n                 * can be quite long.\n                 */\n                operation = OS_STREAM_STATE_WRITABLE;\n\n                /* Probe: log entering EINPROGRESS/select path and selectable flag */\n                {\n                    FILE *f = fopen(\"/tmp/logs/875.txt\", \"a\");\n                    if (f)\n                    {\n                        if (impl != NULL)\n                        {\n                            fprintf(f, \"EINPROGRESS path: impl->selectable=%d, about to call OS_SelectSingle_Impl timeout=%d\\n\", (int)impl->selectable, (int)timeout);\n                        }\n                        else\n                        {\n                            fprintf(f, \"EINPROGRESS path: impl==NULL, about to call OS_SelectSingle_Impl timeout=%d\\n\", (int)timeout);\n                        }\n                        fclose(f);\n                    }\n                }\n\n                if (impl->selectable)\n                {\n                    return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n\n                    /* Probe: log select result */\n                    {\n                        FILE *f = fopen(\"/tmp/logs/875.txt\", \"a\");\n                        if (f)\n                        {\n                            fprintf(f, \"OS_SelectSingle_Impl returned %d, operation=0x%08x\\n\", (int)return_code, (unsigned)operation);\n                            fclose(f);\n                        }\n                    }\n                }\n                if (return_code == OS_SUCCESS)\n                {\n                    if ((operation & OS_STREAM_STATE_WRITABLE) == 0)\n                    {\n                        /* Probe: timeout from select (not writable) */\n                        {\n                            FILE *f = fopen(\"/tmp/logs/875.txt\", \"a\");\n                            if (f)\n                            {\n                                fprintf(f, \"select completed but not writable -> OS_ERROR_TIMEOUT\\n\");\n                                fclose(f);\n                            }\n                        }\n\n                        return_code = OS_ERROR_TIMEOUT;\n                    }\n                    else\n                    {\n                        /*\n                         * The SO_ERROR socket flag should also read back zero.\n                         * If not zero, something went wrong during connect\n                         */\n                        sockopt   = 0;\n                        slen      = sizeof(sockopt);\n                        os_status = getsockopt(impl->fd, SOL_SOCKET, SO_ERROR, &sockopt, &slen);\n\n                        /* Probe: log getsockopt result and sockopt value */\n                        {\n                            FILE *f = fopen(\"/tmp/logs/875.txt\", \"a\");\n                            if (f)\n                            {\n                                fprintf(f, \"getsockopt returned os_status=%d, sockopt=%d, slen=%u\\n\", os_status, sockopt, (unsigned)slen);\n                                fclose(f);\n                            }\n                        }\n\n                        if (os_status < 0 || sockopt != 0)\n                        {\n                            /* Probe: log final connect failure after select */\n                            {\n                                FILE *f = fopen(\"/tmp/logs/875.txt\", \"a\");\n                                if (f)\n                                {\n                                    fprintf(f, \"connect after select indicates failure (os_status=%d, sockopt=%d) -> OS_ERROR\\n\", os_status, sockopt);\n                                    fclose(f);\n                                }\n                            }\n\n                            return_code = OS_ERROR;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /* Probe: log exit and return_code */\n    {\n        FILE *f = fopen(\"/tmp/logs/875.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"OS_SocketConnect_Impl EXIT: return_code=%d\\n\", (int)return_code);\n            fclose(f);\n        }\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_SocketConnect_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. MISRA C:2023 Rule 8.13 recommends that a pointer should point to a const-qualified type whenever possible. In OS_SocketConnect_Impl the local variable impl is declared as OS_impl_file_internal_record_t *impl but is only used for read-only accesses (impl->fd and impl->selectable). There is no modification of *impl in this function, so it is possible and appropriate to declare impl as a pointer to const (const OS_impl_file_internal_record_t *impl). Assigning the result of OS_OBJECT_TABLE_GET (which likely yields a non-const pointer) to a pointer-to-const is allowed \u2014 it prevents accidental modification in this function and satisfies the MISRA requirement. If some other code needs to modify the record through this pointer, then the declaration there should remain non-const; but for this function the pointer should be const-qualified. Therefore the agent A report is correct."
}