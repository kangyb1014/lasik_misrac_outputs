{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment local->reset_flag = (return_code == OS_SUCCESS); is executed unconditionally, but in the supplied codebase there are no reads of local->reset_flag (it is only defined in OS_impl_timebase_internal_record_t and written here). If this member is not read anywhere else in the project, then this write has no effect and its removal would not change program behaviour \u2014 i.e. it is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseSet_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/578.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseSet_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseSet_Impl:\n```c\nint32 OS_TimeBaseSet_Impl(const OS_object_token_t *token, uint32 start_time, uint32 interval_time)\n{\n    OS_impl_timebase_internal_record_t *local;\n    struct itimerspec                   timeout;\n    int32                               return_code;\n    int                                 status;\n    OS_timebase_internal_record_t *     timebase;\n\n    local       = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, *token);\n    timebase    = OS_OBJECT_TABLE_GET(OS_timebase_table, *token);\n    return_code = OS_SUCCESS;\n\n    /* There is only something to do here if we are generating a simulated tick */\n    if (local->assigned_signal != 0)\n    {\n        /*\n        ** Convert from Microseconds to timespec structures\n        */\n        memset(&timeout, 0, sizeof(timeout));\n        OS_UsecToTimespec(start_time, &timeout.it_value);\n        OS_UsecToTimespec(interval_time, &timeout.it_interval);\n\n        /*\n        ** Program the real timer\n        */\n        status = timer_settime(local->host_timerid, 0, /* Flags field can be zero */\n                               &timeout,               /* struct itimerspec */\n                               NULL);                  /* Oldvalue */\n\n        if (status < 0)\n        {\n            OS_DEBUG(\"Error in timer_settime: %s\\n\", strerror(errno));\n            return_code = OS_TIMER_ERR_INTERNAL;\n        }\n        else if (interval_time > 0)\n        {\n            timebase->accuracy_usec = (uint32)((timeout.it_interval.tv_nsec + 999) / 1000);\n        }\n        else\n        {\n            timebase->accuracy_usec = (uint32)((timeout.it_value.tv_nsec + 999) / 1000);\n        }\n    }\n\n    local->reset_flag = (return_code == OS_SUCCESS);\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseSet_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <inttypes.h>\n#include <time.h>\n\n/* Probe logging helper. Keeps errno preserved so it doesn't affect program logic. */\nstatic void OS_TimeBaseSet_Impl_Log(const OS_object_token_t *token,\n                                    const OS_impl_timebase_internal_record_t *local,\n                                    const OS_timebase_internal_record_t *timebase,\n                                    const struct itimerspec *timeout,\n                                    int timeout_valid,\n                                    uint32 start_time,\n                                    uint32 interval_time,\n                                    int status,\n                                    int32 return_code,\n                                    const char *phase)\n{\n    int saved_errno = errno;\n    FILE *f = fopen(\"/tmp/logs/578.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log a compact snapshot of relevant state for reproducing the dead-write scenario */\n        fprintf(f, \"Phase: %s\\n\", (phase != NULL) ? phase : \"(null)\");\n        fprintf(f, \" token ptr=%p\\n\", (const void *)token);\n        fprintf(f, \" local ptr=%p assigned_signal=%u host_timerid=%ld\\n\",\n                (const void *)local,\n                (unsigned)local->assigned_signal,\n                (long)local->host_timerid);\n        fprintf(f, \" timebase ptr=%p\\n\", (const void *)timebase);\n        fprintf(f, \" start_time=%u interval_time=%u\\n\", (unsigned)start_time, (unsigned)interval_time);\n        fprintf(f, \" timer_settime status=%d errno=%d (%s)\\n\", status, errno, strerror(errno));\n        if (timeout_valid && timeout != NULL)\n        {\n            fprintf(f, \" timeout.it_value = { tv_sec=%ld, tv_nsec=%ld }\\n\",\n                    (long)timeout->it_value.tv_sec, (long)timeout->it_value.tv_nsec);\n            fprintf(f, \" timeout.it_interval = { tv_sec=%ld, tv_nsec=%ld }\\n\",\n                    (long)timeout->it_interval.tv_sec, (long)timeout->it_interval.tv_nsec);\n        }\n        /* timebase->accuracy_usec is relevant only if the timer was programmed */\n        if (timebase != NULL)\n        {\n            fprintf(f, \" timebase->accuracy_usec=%u\\n\", (unsigned)timebase->accuracy_usec);\n        }\n        fprintf(f, \" return_code=%d\\n\", (int)return_code);\n        fprintf(f, \"--------------------------\\n\");\n        fclose(f);\n    }\n    errno = saved_errno;\n}\n\nint32 OS_TimeBaseSet_Impl(const OS_object_token_t *token, uint32 start_time, uint32 interval_time)\n{\n    OS_impl_timebase_internal_record_t *local;\n    struct itimerspec                   timeout;\n    int32                               return_code;\n    int                                 status;\n    OS_timebase_internal_record_t *     timebase;\n\n    local       = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, *token);\n    timebase    = OS_OBJECT_TABLE_GET(OS_timebase_table, *token);\n    return_code = OS_SUCCESS;\n\n    /* There is only something to do here if we are generating a simulated tick */\n    if (local->assigned_signal != 0)\n    {\n        /*\n        ** Convert from Microseconds to timespec structures\n        */\n        memset(&timeout, 0, sizeof(timeout));\n        OS_UsecToTimespec(start_time, &timeout.it_value);\n        OS_UsecToTimespec(interval_time, &timeout.it_interval);\n\n        /*\n        ** Program the real timer\n        */\n        status = timer_settime(local->host_timerid, 0, /* Flags field can be zero */\n                               &timeout,               /* struct itimerspec */\n                               NULL);                  /* Oldvalue */\n\n        if (status < 0)\n        {\n            OS_DEBUG(\"Error in timer_settime: %s\\n\", strerror(errno));\n            return_code = OS_TIMER_ERR_INTERNAL;\n        }\n        else if (interval_time > 0)\n        {\n            timebase->accuracy_usec = (uint32)((timeout.it_interval.tv_nsec + 999) / 1000);\n        }\n        else\n        {\n            timebase->accuracy_usec = (uint32)((timeout.it_value.tv_nsec + 999) / 1000);\n        }\n    }\n\n    /* Log state immediately before performing the write that is suspected to be dead. */\n    OS_TimeBaseSet_Impl_Log(token, local, timebase,\n                            (local->assigned_signal != 0) ? &timeout : NULL,\n                            (local->assigned_signal != 0),\n                            start_time, interval_time, status, return_code, \"before_write\");\n\n    local->reset_flag = (return_code == OS_SUCCESS);\n\n    /* Log state immediately after the write so agents can see the written value. */\n    OS_TimeBaseSet_Impl_Log(token, local, timebase,\n                            (local->assigned_signal != 0) ? &timeout : NULL,\n                            (local->assigned_signal != 0),\n                            start_time, interval_time, status, return_code, \"after_write\");\n\n    return return_code;\n}\n"
}