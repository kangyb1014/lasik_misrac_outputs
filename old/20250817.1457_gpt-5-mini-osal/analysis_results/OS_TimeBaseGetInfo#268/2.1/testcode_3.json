{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe call OS_TaskGetId_Impl() returns the current task/thread ID which has an object type of a task. That type cannot equal OS_OBJECT_TYPE_OS_TIMEBASE (0x08). Therefore the condition if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE) can never be true and the branch return OS_ERR_INCORRECT_OBJ_STATE; is unreachable. This constitutes a violation of MISRA C 2023 Rule 2.1 (unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2145.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetInfo:\n```c\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <stdint.h>\n\n/* Helper logging function that appends probe information to /tmp/logs/2145.txt */\nstatic void os_timebase_write_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n    /* Try to open the file; if the directory does not exist, attempt to create it once */\n    f = fopen(\"/tmp/logs/2145.txt\", \"a\");\n    if (!f)\n    {\n        /* best-effort directory creation; ignore errors */\n        (void)mkdir(\"/tmp/logs\", 0755);\n        f = fopen(\"/tmp/logs/2145.txt\", \"a\");\n        if (!f)\n        {\n            return;\n        }\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] \", (long)t);\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /* Log entry with basic parameters */\n    os_timebase_write_log(\"Entered OS_TimeBaseGetInfo: timebase_id=%llu, timebase_prop=%p\",\n                          (unsigned long long)(uintptr_t)timebase_id,\n                          (void *)timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    {\n        osal_id_t current_task = OS_TaskGetId_Impl();\n        objtype = OS_ObjectIdToType_Impl(current_task);\n\n        os_timebase_write_log(\"OS_TaskGetId_Impl() returned id=%llu; OS_ObjectIdToType_Impl(...) returned objtype=%u\",\n                              (unsigned long long)(uintptr_t)current_task,\n                              (unsigned int)(objtype));\n\n        if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n        {\n            os_timebase_write_log(\"Branch taken: objtype == OS_OBJECT_TYPE_OS_TIMEBASE. Returning OS_ERR_INCORRECT_OBJ_STATE\");\n            return OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            os_timebase_write_log(\"Branch not taken: objtype != OS_OBJECT_TYPE_OS_TIMEBASE. Continuing\");\n        }\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    os_timebase_write_log(\"Calling OS_ObjectIdGetById for timebase_id=%llu\",\n                          (unsigned long long)(uintptr_t)timebase_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n\n    os_timebase_write_log(\"OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log details obtained from the records (best-effort, do not modify them) */\n        os_timebase_write_log(\"Record name='%s', creator=%llu\",\n                              record ? record->name_entry : \"(null)\",\n                              record ? (unsigned long long)(uintptr_t)record->creator : 0ULL);\n\n        os_timebase_write_log(\"Timebase internals: nominal_interval_time=%llu, freerun_time=%llu, accuracy_usec=%llu\",\n                              timebase ? (unsigned long long)timebase->nominal_interval_time : 0ULL,\n                              timebase ? (unsigned long long)timebase->freerun_time : 0ULL,\n                              timebase ? (unsigned long long)timebase->accuracy_usec : 0ULL);\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        os_timebase_write_log(\"Calling OS_TimeBaseGetInfo_Impl with token at %p and timebase_prop at %p\",\n                              (void *)&token,\n                              (void *)timebase_prop);\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        os_timebase_write_log(\"OS_TimeBaseGetInfo_Impl returned %ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        os_timebase_write_log(\"Released token at %p\", (void *)&token);\n    }\n\n    os_timebase_write_log(\"Exiting OS_TimeBaseGetInfo with return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}