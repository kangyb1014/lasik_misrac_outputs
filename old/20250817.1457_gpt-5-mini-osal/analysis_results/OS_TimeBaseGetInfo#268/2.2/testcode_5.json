{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to OS_TimeBaseGetInfo_Impl(&token, timebase_prop) is executed but, per the provided implementation, it unconditionally returns OS_SUCCESS and performs no side-effects. Prior to the call return_code is already OS_SUCCESS and timebase_prop has been populated; the call only overwrites return_code with the same value. Removing this call would not change program behaviour, so this is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2146.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetInfo:\n```c\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Lightweight logging helper that appends entries to the evidence file. */\nstatic void tb_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2146.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and parameters */\n    tb_log(\"ENTRY: OS_TimeBaseGetInfo(timebase_id=%d, timebase_prop=%p)\", (int)timebase_id, (void *)timebase_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    tb_log(\"OBJTYPE: os_task returned objtype=%d\", (int)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        tb_log(\"ERROR: incorrect object state (objtype indicates a timebase callback). Returning %d\", (int)OS_ERR_INCORRECT_OBJ_STATE);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n    tb_log(\"INFO: timebase_prop zeroed at %p\", (void *)timebase_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    tb_log(\"INFO: OS_ObjectIdGetById returned %d, token_addr=%p\", (int)return_code, (void *)&token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* populate outward-facing structure (preserve original behavior) */\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        /* Log populated values prior to calling the Impl hook */\n        tb_log(\"BEFORE_IMPL: return_code=%d, token_addr=%p, timebase_prop->name='%s', creator=%llu, nominal_interval_time=%llu, freerun_time=%llu, accuracy=%llu\",\n               (int)return_code,\n               (void *)&token,\n               timebase_prop->name ? timebase_prop->name : \"(null)\",\n               (unsigned long long)timebase_prop->creator,\n               (unsigned long long)timebase_prop->nominal_interval_time,\n               (unsigned long long)timebase_prop->freerun_time,\n               (unsigned long long)timebase_prop->accuracy);\n\n        /* Call the implementation hook (preserve original behavior). */\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        /* Log the result and state after the Impl call */\n        tb_log(\"AFTER_IMPL: return_code=%d, token_addr=%p, timebase_prop->name='%s', creator=%llu, nominal_interval_time=%llu, freerun_time=%llu, accuracy=%llu\",\n               (int)return_code,\n               (void *)&token,\n               timebase_prop->name ? timebase_prop->name : \"(null)\",\n               (unsigned long long)timebase_prop->creator,\n               (unsigned long long)timebase_prop->nominal_interval_time,\n               (unsigned long long)timebase_prop->freerun_time,\n               (unsigned long long)timebase_prop->accuracy);\n\n        OS_ObjectIdRelease(&token);\n        tb_log(\"INFO: token released (addr=%p)\", (void *)&token);\n    }\n    else\n    {\n        tb_log(\"INFO: OS_ObjectIdGetById failed with code %d, returning that code\", (int)return_code);\n    }\n\n    tb_log(\"EXIT: OS_TimeBaseGetInfo returning %d\", (int)return_code);\n    return return_code;\n}\n"
}