{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer timebase is declared as OS_timebase_internal_record_t *timebase but is only used for reading fields (timebase->nominal_interval_time, etc.). Per MISRA C 2023 Rule 8.13 this pointer should be const-qualified when possible (e.g. const OS_timebase_internal_record_t *timebase) to prevent accidental modification of the internal record. The assignment timebase_prop->nominal_interval_time = timebase->nominal_interval_time; therefore demonstrates a violation because timebase could and should be a pointer to const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2147.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetInfo:\n```c\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logging helper - writes control flow and state to /tmp/logs/2147.txt */\nstatic void OS_TimeBaseGetInfo_LogProbe(const char *stage, osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop,\n                                        OS_common_record_t *record, OS_timebase_internal_record_t *timebase,\n                                        int32 return_code, const OS_object_token_t *token, osal_objtype_t objtype)\n{\n    FILE *f = fopen(\"/tmp/logs/2147.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"-- OS_TimeBaseGetInfo probe: %s\\n\", stage);\n    fprintf(f, \"  timebase_id = %llu\\n\", (unsigned long long)timebase_id);\n    fprintf(f, \"  timebase_prop ptr = %p\\n\", (void *)timebase_prop);\n    fprintf(f, \"  return_code (reported) = %d\\n\", (int)return_code);\n    fprintf(f, \"  objtype = %d\\n\", (int)objtype);\n    if (token != NULL)\n    {\n        fprintf(f, \"  token ptr = %p\\n\", (void *)token);\n    }\n\n    if (record != NULL)\n    {\n        /* record->name_entry may not be NUL-terminated, so print as a limited string */\n        char namebuf[64] = {0};\n        strncpy(namebuf, record->name_entry, sizeof(namebuf) - 1);\n        fprintf(f, \"  record ptr = %p\\n\", (void *)record);\n        fprintf(f, \"    name_entry = '%s'\\n\", namebuf);\n        fprintf(f, \"    creator = %u\\n\", (unsigned)record->creator);\n    }\n\n    if (timebase != NULL)\n    {\n        fprintf(f, \"  timebase ptr = %p\\n\", (void *)timebase);\n        fprintf(f, \"    nominal_interval_time = %llu\\n\", (unsigned long long)timebase->nominal_interval_time);\n        fprintf(f, \"    freerun_time = %llu\\n\", (unsigned long long)timebase->freerun_time);\n        fprintf(f, \"    accuracy_usec = %u\\n\", (unsigned)timebase->accuracy_usec);\n    }\n\n    if (timebase_prop != NULL)\n    {\n        /* Log the values written into the user-visible structure (after memset this will be zeros until populated) */\n        char pname[64] = {0};\n        strncpy(pname, timebase_prop->name, sizeof(pname) - 1);\n        fprintf(f, \"  timebase_prop ptr = %p\\n\", (void *)timebase_prop);\n        fprintf(f, \"    name = '%s'\\n\", pname);\n        fprintf(f, \"    creator = %u\\n\", (unsigned)timebase_prop->creator);\n        fprintf(f, \"    nominal_interval_time = %llu\\n\", (unsigned long long)timebase_prop->nominal_interval_time);\n        fprintf(f, \"    freerun_time = %llu\\n\", (unsigned long long)timebase_prop->freerun_time);\n        fprintf(f, \"    accuracy = %u\\n\", (unsigned)timebase_prop->accuracy);\n    }\n\n    fprintf(f, \"-- end probe\\n\\n\");\n    fclose(f);\n}\n\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /* Initial probe: entry */\n    OS_TimeBaseGetInfo_LogProbe(\"entry\", timebase_id, timebase_prop, NULL, NULL, -1, NULL, -1);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        /* Log the incorrect context and return */\n        OS_TimeBaseGetInfo_LogProbe(\"incorrect_obj_state\", timebase_id, timebase_prop, NULL, NULL, OS_ERR_INCORRECT_OBJ_STATE, &token, objtype);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    /* Log after clearing the user structure */\n    OS_TimeBaseGetInfo_LogProbe(\"after_memset\", timebase_id, timebase_prop, NULL, NULL, -1, NULL, objtype);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n\n    /* Log result of object lookup */\n    OS_TimeBaseGetInfo_LogProbe(\"after_object_lookup\", timebase_id, timebase_prop, NULL, NULL, return_code, &token, objtype);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log the record & timebase contents before copying into user buffer */\n        OS_TimeBaseGetInfo_LogProbe(\"before_copy\", timebase_id, timebase_prop, record, timebase, return_code, &token, objtype);\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        /* Log the user-visible structure after population */\n        OS_TimeBaseGetInfo_LogProbe(\"after_copy\", timebase_id, timebase_prop, record, timebase, return_code, &token, objtype);\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        /* Log after implementation-specific get info call */\n        OS_TimeBaseGetInfo_LogProbe(\"after_impl_call\", timebase_id, timebase_prop, record, timebase, return_code, &token, objtype);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Final probe: exit */\n    OS_TimeBaseGetInfo_LogProbe(\"exit\", timebase_id, timebase_prop, NULL, NULL, return_code, &token, objtype);\n\n    return return_code;\n}\n"
}