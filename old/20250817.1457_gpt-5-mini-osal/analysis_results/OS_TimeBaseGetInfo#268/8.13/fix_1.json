{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_TimeBase_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2147.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp for ease of tracing */\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm) != NULL)\n    {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n        {\n            fprintf(fp, \"%s - \", timestr);\n        }\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and incoming parameters */\n    OS_TimeBase_Log(\"Entered OS_TimeBaseGetInfo: timebase_id=%llu, timebase_prop=%p\",\n                    (unsigned long long)timebase_id, (void *)timebase_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    OS_TimeBase_Log(\"Object type of caller: %d\", (int)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimeBase_Log(\"Early return: caller is a timebase callback (OS_ERR_INCORRECT_OBJ_STATE)\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n    OS_TimeBase_Log(\"Cleared timebase_prop at %p\", (void *)timebase_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    OS_TimeBase_Log(\"OS_ObjectIdGetById returned %d for id=%llu\", (int)return_code, (unsigned long long)timebase_id);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log pointers and some internal state observed (read-only) */\n        OS_TimeBase_Log(\"Obtained record=%p, timebase=%p, token=%p\", (void *)record, (void *)timebase, (void *)&token);\n        if (record != NULL)\n        {\n            /* record->name_entry may not be NUL-terminated, so copy safely for logging */\n            char name_buf[sizeof(timebase_prop->name)];\n            memset(name_buf, 0, sizeof(name_buf));\n            strncpy(name_buf, record->name_entry, sizeof(name_buf) - 1);\n            OS_TimeBase_Log(\"record->name_entry='%s', record->creator=%u\", name_buf, (unsigned)record->creator);\n        }\n        if (timebase != NULL)\n        {\n            OS_TimeBase_Log(\"timebase->nominal_interval_time=%\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmppp4y_6i3/src/src/os/shared/src/osapi-timebase.c: In function 'OS_TimeBaseGetInfo':\n/tmp/tmppp4y_6i3/src/src/os/shared/src/osapi-timebase.c:365:29: error: missing terminating \" character\n  365 |             OS_TimeBase_Log(\"timebase->nominal_interval_time=%\n      |                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmppp4y_6i3/src/src/os/shared/src/osapi-timebase.c:374:1: error: expected expression before 'int32'\n  374 | int32 OS_TimeBaseGetFreeRun(osal_id_t timebase_id, uint32 *freerun_val)\n      | ^~~~~\n/tmp/tmppp4y_6i3/src/src/os/shared/src/osapi-timebase.c:584:1: error: expected declaration or statement at end of input\n  584 | }\n      | ^\n/tmp/tmppp4y_6i3/src/src/os/shared/src/osapi-timebase.c:584:1: error: expected declaration or statement at end of input\n/tmp/tmppp4y_6i3/src/src/os/shared/src/osapi-timebase.c:584:1: error: expected declaration or statement at end of input\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:356: CMakeFiles/osal.dir/src/os/shared/src/osapi-timebase.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_TimeBaseGetInfo as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static void OS_TimeBase_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2147.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp for ease of tracing */\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm) != NULL)\n    {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n        {\n            fprintf(fp, \"%s - \", timestr);\n        }\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and incoming parameters */\n    OS_TimeBase_Log(\"Entered OS_TimeBaseGetInfo: timebase_id=%llu, timebase_prop=%p\",\n                    (unsigned long long)timebase_id, (void *)timebase_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    OS_TimeBase_Log(\"Object type of caller: %d\", (int)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimeBase_Log(\"Early return: caller is a timebase callback (OS_ERR_INCORRECT_OBJ_STATE)\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n    OS_TimeBase_Log(\"Cleared timebase_prop at %p\", (void *)timebase_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    OS_TimeBase_Log(\"OS_ObjectIdGetById returned %d for id=%llu\", (int)return_code, (unsigned long long)timebase_id);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log pointers and some internal state observed (read-only) */\n        OS_TimeBase_Log(\"Obtained record=%p, timebase=%p, token=%p\", (void *)record, (void *)timebase, (void *)&token);\n        if (record != NULL)\n        {\n            /* record->name_entry may not be NUL-terminated, so copy safely for logging */\n            char name_buf[sizeof(timebase_prop->name)];\n            memset(name_buf, 0, sizeof(name_buf));\n            strncpy(name_buf, record->name_entry, sizeof(name_buf) - 1);\n            OS_TimeBase_Log(\"record->name_entry='%s', record->creator=%u\", name_buf, (unsigned)record->creator);\n        }\n        if (timebase != NULL)\n        {\n            /* Avoid referencing fields that might not be visible here; log pointer instead */\n            OS_TimeBase_Log(\"timebase=%p\", (void *)timebase);\n        }\n\n        /* If available, copy out the name and creator into the public properties. Preserve original logic of zeroing/copying name. */\n        if (record != NULL)\n        {\n            strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n            timebase_prop->name[sizeof(timebase_prop->name) - 1] = '\\0';\n            timebase_prop->creator = record->creator;\n        }\n\n        /* Release the object lock/token and return success */\n        OS_ObjectIdRelease(token);\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n",
  "explanation": "The build error was caused by an unterminated string literal and the function being cut off mid-line. I completed the logging call (changed it to log the timebase pointer instead of referencing a possibly unknown member), closed the remaining blocks, copied the record name and creator into timebase_prop (safely), released the object token, and ensured a proper return. These changes are minimal and preserve the original logic/flow while fixing the syntax error so the file will compile."
}