{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'timebase' is declared as OS_timebase_internal_record_t * but is only used for read-only access (e.g. timebase->accuracy_usec used to populate timebase_prop). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. In this function 'timebase' could be declared as const OS_timebase_internal_record_t *timebase (it may point at a mutable global array, which is allowed), so the current non-const declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2147.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetInfo:\n```c\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetInfo code.\n",
  "test_code": "int32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Simple probe logging to capture control flow/state for analysis */\n    FILE *log = fopen(\"/tmp/logs/2147.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"\\n--- OS_TimeBaseGetInfo ENTRY ---\\n\");\n        fprintf(log, \"timebase_id=%lu, timebase_prop=%p\\n\", (unsigned long)timebase_id, (void *)timebase_prop);\n        fflush(log);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (log)\n    {\n        fprintf(log, \"objtype=%ld\\n\", (long)objtype);\n        fflush(log);\n    }\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        if (log)\n        {\n            fprintf(log, \"early return: called from timebase context -> OS_ERR_INCORRECT_OBJ_STATE\\n\");\n            fclose(log);\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n    if (log)\n    {\n        fprintf(log, \"cleared timebase_prop (zeroed).\\n\");\n        fflush(log);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        if (log)\n        {\n            /* Log pointers and read-only fields we will copy into timebase_prop */\n            fprintf(log, \"record=%p, timebase=%p, token=%p\\n\", (void *)record, (void *)timebase, (void *)&token);\n\n            /* Attempt to log some fields safely by casting to unsigned long long where appropriate */\n            fprintf(log, \"record->name_entry=%s\\n\", record->name_entry ? record->name_entry : \"(null)\");\n            fprintf(log, \"record->creator=%lu\\n\", (unsigned long)record->creator);\n\n            /* Log the timebase fields that are only read here (evidence for read-only usage) */\n            fprintf(log, \"timebase->nominal_interval_time=%llu\\n\", (unsigned long long)timebase->nominal_interval_time);\n            fprintf(log, \"timebase->freerun_time=%llu\\n\", (unsigned long long)timebase->freerun_time);\n            fprintf(log, \"timebase->accuracy_usec=%llu\\n\", (unsigned long long)timebase->accuracy_usec);\n            fflush(log);\n        }\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        if (log)\n        {\n            /* Log what we just populated into timebase_prop to show these were read-only reads from timebase */\n            fprintf(log, \"populated timebase_prop->name=%s\\n\", timebase_prop->name);\n            fprintf(log, \"populated timebase_prop->creator=%lu\\n\", (unsigned long)timebase_prop->creator);\n            fprintf(log, \"populated timebase_prop->nominal_interval_time=%llu\\n\", (unsigned long long)timebase_prop->nominal_interval_time);\n            fprintf(log, \"populated timebase_prop->freerun_time=%llu\\n\", (unsigned long long)timebase_prop->freerun_time);\n            fprintf(log, \"populated timebase_prop->accuracy=%llu\\n\", (unsigned long long)timebase_prop->accuracy);\n            fflush(log);\n        }\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        if (log)\n        {\n            fprintf(log, \"OS_TimeBaseGetInfo_Impl returned %ld\\n\", (long)return_code);\n            fflush(log);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        if (log)\n        {\n            fprintf(log, \"token released\\n\");\n            fclose(log);\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"failed to get object by id (return_code=%ld).\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}