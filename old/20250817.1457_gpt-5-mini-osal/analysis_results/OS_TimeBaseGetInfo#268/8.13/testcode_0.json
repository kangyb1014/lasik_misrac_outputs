{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment reads from record->creator but the local pointer 'record' is declared as a non-const pointer (OS_common_record_t *record). The function only reads the referenced object, so the pointer should be const-qualified (e.g. const OS_common_record_t *record). Likewise 'timebase' could be const OS_timebase_internal_record_t *timebase. Using a non-const pointer for read-only access violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2147.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetInfo:\n```c\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Minimal type definitions and constants to allow compilation of this test harness. */\ntypedef int32_t int32;\ntypedef uint32_t osal_id_t;\ntypedef uint32_t osal_objtype_t;\n\n#define OS_SUCCESS 0\n#define OS_ERR_INCORRECT_OBJ_STATE (-1)\n#define OS_INVALID_POINTER (-2)\n\n/* Object type used in the original code */\n#define OS_OBJECT_TYPE_OS_TIMEBASE 100u\n\n/* Minimal token type used to index into tables in this test harness */\ntypedef struct\n{\n    uint32_t id;\n} OS_object_token_t;\n\n/* Minimal record structures with the fields accessed by the function. */\ntypedef struct\n{\n    char name_entry[64];\n    uint32_t creator;\n} OS_common_record_t;\n\ntypedef struct\n{\n    uint32_t nominal_interval_time;\n    uint32_t freerun_time;\n    uint32_t accuracy_usec;\n} OS_timebase_internal_record_t;\n\ntypedef struct\n{\n    char name[64];\n    uint32_t creator;\n    uint32_t nominal_interval_time;\n    uint32_t freerun_time;\n    uint32_t accuracy;\n} OS_timebase_prop_t;\n\n/* Global tables for this test harness (small fixed size) */\nstatic OS_common_record_t OS_global_timebase_table_storage[4];\nstatic OS_timebase_internal_record_t OS_timebase_table_storage[4];\n\n/* Simple helpers to emulate the original table access macro. */\nstatic OS_common_record_t *OS_OBJECT_TABLE_GET_common(OS_common_record_t *table, const OS_object_token_t *token)\n{\n    if (token->id < 4)\n    {\n        return &table[token->id];\n    }\n    return NULL;\n}\n\nstatic OS_timebase_internal_record_t *OS_OBJECT_TABLE_GET_timebase(OS_timebase_internal_record_t *table, const OS_object_token_t *token)\n{\n    if (token->id < 4)\n    {\n        return &table[token->id];\n    }\n    return NULL;\n}\n\n/* Stubs for external OS functions used by the original implementation. */\nstatic osal_objtype_t OS_ObjectIdToType_Impl(osal_id_t id)\n{\n    /* For testing, return a non-timebase type for id==0, timebase for others */\n    (void)id;\n    return 0u; /* not OS_OBJECT_TYPE_OS_TIMEBASE */\n}\n\nstatic osal_id_t OS_TaskGetId_Impl(void)\n{\n    return 0u;\n}\n\nstatic int32 OS_ObjectIdGetById(int lock_mode, int local_type, osal_id_t id, OS_object_token_t *token)\n{\n    (void)lock_mode;\n    (void)local_type;\n    if (id < 4)\n    {\n        token->id = id;\n        return OS_SUCCESS;\n    }\n    return -3;\n}\n\nstatic int32 OS_TimeBaseGetInfo_Impl(const OS_object_token_t *token, OS_timebase_prop_t *timebase_prop)\n{\n    (void)token;\n    /* In a real system this might fill additional implementation details. */\n    timebase_prop->accuracy += 1u; /* arbitrary non-destructive modification */\n    return OS_SUCCESS;\n}\n\nstatic void OS_ObjectIdRelease(const OS_object_token_t *token)\n{\n    (void)token;\n}\n\n/* Logging helper that appends a line to the log file. */\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2147.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    fputc('\\n', fp);\n    va_end(args);\n\n    fclose(fp);\n}\n\n/* The modified OS_TimeBaseGetInfo with inserted logging probes. */\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log function entry and parameters */\n    os_log_probe(\"ENTRY: OS_TimeBaseGetInfo called with timebase_id=%u, timebase_prop=%p\", (unsigned)timebase_id, (void *)timebase_prop);\n\n    /* Check parameters (in original code this was a macro). */\n    if (timebase_prop == NULL)\n    {\n        os_log_probe(\"PARAMETER_CHECK: timebase_prop is NULL -> returning %d\", OS_INVALID_POINTER);\n        return OS_INVALID_POINTER;\n    }\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    os_log_probe(\"CONTEXT_CHECK: OS_ObjectIdToType_Impl returned objtype=%u\", (unsigned)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        os_log_probe(\"CONTEXT_VIOLATION: called from a timebase callback context -> returning %d\", OS_ERR_INCORRECT_OBJ_STATE);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n    os_log_probe(\"ZEROED_OUTPUT: timebase_prop at %p zeroed\", (void *)timebase_prop);\n\n    return_code = OS_ObjectIdGetById(0, 0, timebase_id, &token);\n    os_log_probe(\"LOOKUP: OS_ObjectIdGetById returned %d (token.id=%u)\", (int)return_code, (unsigned)token.id);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Retrieve records from the tables */\n        record   = OS_OBJECT_TABLE_GET_common(OS_global_timebase_table_storage, &token);\n        timebase = OS_OBJECT_TABLE_GET_timebase(OS_timebase_table_storage, &token);\n\n        os_log_probe(\"TABLE_ACCESS: record=%p, timebase=%p\", (void *)record, (void *)timebase);\n\n        if (record != NULL)\n        {\n            /* Log the fields we are about to read from the non-const pointer 'record' */\n            os_log_probe(\"RECORD_READ_BEFORE: record->name_entry='%s', record->creator=%u\", record->name_entry, (unsigned)record->creator);\n\n            strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n            timebase_prop->creator               = record->creator; /* <-- read-only access to record */\n\n            os_log_probe(\"RECORD_READ_AFTER: copied name='%s', creator=%u\", timebase_prop->name, (unsigned)timebase_prop->creator);\n        }\n        else\n        {\n            os_log_probe(\"RECORD_NULL: record pointer was NULL for token.id=%u\", (unsigned)token.id);\n        }\n\n        if (timebase != NULL)\n        {\n            /* Log the fields we are about to read from the non-const pointer 'timebase' */\n            os_log_probe(\"TIMEBASE_READ_BEFORE: nominal_interval_time=%u, freerun_time=%u, accuracy_usec=%u\",\n                         (unsigned)timebase->nominal_interval_time,\n                         (unsigned)timebase->freerun_time,\n                         (unsigned)timebase->accuracy_usec);\n\n            timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n            timebase_prop->freerun_time          = timebase->freerun_time;\n            timebase_prop->accuracy              = timebase->accuracy_usec;\n\n            os_log_probe(\"TIMEBASE_READ_AFTER: copied nominal=%u, freerun=%u, accuracy=%u\",\n                         (unsigned)timebase_prop->nominal_interval_time,\n                         (unsigned)timebase_prop->freerun_time,\n                         (unsigned)timebase_prop->accuracy);\n        }\n        else\n        {\n            os_log_probe(\"TIMEBASE_NULL: timebase pointer was NULL for token.id=%u\", (unsigned)token.id);\n        }\n\n        /* Call platform-specific implementation and log its result */\n        os_log_probe(\"IMPL_CALL: Calling OS_TimeBaseGetInfo_Impl with token.id=%u\", (unsigned)token.id);\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n        os_log_probe(\"IMPL_RETURN: OS_TimeBaseGetInfo_Impl returned %d\", (int)return_code);\n\n        OS_ObjectIdRelease(&token);\n        os_log_probe(\"RELEASE: OS_ObjectIdRelease called for token.id=%u\", (unsigned)token.id);\n    }\n\n    os_log_probe(\"EXIT: OS_TimeBaseGetInfo returning %d\", (int)return_code);\n    return return_code;\n}"
}