{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable timebase is declared as a non-const pointer (OS_timebase_internal_record_t *timebase) and is assigned from OS_OBJECT_TABLE_GET(OS_timebase_table, token). In OS_TimeBaseGetInfo the pointer is only used to read fields (nominal_interval_time, freerun_time, accuracy_usec) and is never used to modify the referenced object. Therefore the pointer could and should be declared as a pointer to const (const OS_timebase_internal_record_t *timebase) to express read-only intent and satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2147.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetInfo:\n```c\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetInfo code.\n",
  "test_code": "int32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Probe: log function entry and parameter */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2147.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"ENTER OS_TimeBaseGetInfo: timebase_prop=%p\\n\", (void *)timebase_prop);\n            fclose(fp);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n\n    /* Probe: log objtype */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2147.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"OS_TimeBaseGetInfo: objtype=%u\\n\", (unsigned int)objtype);\n            fclose(fp);\n        }\n    }\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        /* Probe: log incorrect object state path */\n        FILE *fp = fopen(\"/tmp/logs/2147.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"OS_TimeBaseGetInfo: early return - incorrect object state (called from timebase)\\n\");\n            fclose(fp);\n        }\n\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Probe: log pointers and read-only fields observed from the timebase object */\n        {\n            FILE *fp = fopen(\"/tmp/logs/2147.txt\", \"a\");\n            if (fp != NULL)\n            {\n                /* Log addresses and values used by this function. Casts used to avoid format warnings. */\n                fprintf(fp, \"OS_TimeBaseGetInfo: token=%llu record=%p name=\\\"%s\\\" timebase=%p\\n\",\n                        (unsigned long long)token,\n                        (void *)record,\n                        (record && record->name_entry) ? record->name_entry : \"(null)\",\n                        (void *)timebase);\n\n                if (timebase != NULL)\n                {\n                    fprintf(fp, \"OS_TimeBaseGetInfo: nominal_interval_time=%llu freerun_time=%llu accuracy_usec=%u\\n\",\n                            (unsigned long long)timebase->nominal_interval_time,\n                            (unsigned long long)timebase->freerun_time,\n                            (unsigned int)timebase->accuracy_usec);\n                }\n                else\n                {\n                    fprintf(fp, \"OS_TimeBaseGetInfo: timebase pointer is NULL\\n\");\n                }\n\n                fclose(fp);\n            }\n        }\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        /* Probe: log return_code from platform-specific implementation */\n        {\n            FILE *fp = fopen(\"/tmp/logs/2147.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"OS_TimeBaseGetInfo: after Impl return_code=%d\\n\", (int)return_code);\n                fclose(fp);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        /* Probe: log failure to get object by id */\n        FILE *fp = fopen(\"/tmp/logs/2147.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"OS_TimeBaseGetInfo: OS_ObjectIdGetById failed return_code=%d\\n\", (int)return_code);\n            fclose(fp);\n        }\n    }\n\n    /* Probe: log final return value */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2147.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"EXIT OS_TimeBaseGetInfo: return_code=%d\\n\", (int)return_code);\n            fclose(fp);\n        }\n    }\n\n    return return_code;\n}\n"
}