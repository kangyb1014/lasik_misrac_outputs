{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable 'record' is declared as a non-const pointer (OS_common_record_t *record) but is only used for read-only access (record->name_entry and record->creator). Per MISRA C 2023 Rule 8.13, this should be declared to point to a const-qualified type (const OS_common_record_t *record). Assigning the non-const pointer returned by OS_OBJECT_TABLE_GET to a const pointer is permitted, so the current declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2147.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetInfo:\n```c\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetInfo code.\n",
  "test_code": "static void OS_TimeBaseGetInfo_Log(const char *stage,\n                                       osal_id_t timebase_id,\n                                       int32 return_code,\n                                       osal_objtype_t objtype,\n                                       int token_acquired,\n                                       OS_common_record_t *record,\n                                       OS_timebase_internal_record_t *timebase)\n{\n    FILE *f = fopen(\"/tmp/logs/2147.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    /* Log high-level control/state information */\n    fprintf(f, \"[OS_TimeBaseGetInfo] stage=%s, return_code=%d, objtype=%d, token_acquired=%d\\n\",\n            stage, (int)return_code, (int)objtype, token_acquired);\n\n    /* Log record details (name and creator) if present. Use a field width to avoid uncontrolled prints. */\n    if (record != NULL)\n    {\n        fprintf(f, \"  record->name_entry=\\\"%.128s\\\"\\n\", record->name_entry ? record->name_entry : \"(null)\");\n        fprintf(f, \"  record->creator=%llu\\n\", (unsigned long long)record->creator);\n    }\n\n    /* Log timebase internal state if present */\n    if (timebase != NULL)\n    {\n        fprintf(f, \"  timebase->nominal_interval_time=%llu\\n\", (unsigned long long)timebase->nominal_interval_time);\n        fprintf(f, \"  timebase->freerun_time=%llu\\n\", (unsigned long long)timebase->freerun_time);\n        fprintf(f, \"  timebase->accuracy_usec=%llu\\n\", (unsigned long long)timebase->accuracy_usec);\n    }\n\n    fclose(f);\n}\n\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Entry log */\n    OS_TimeBaseGetInfo_Log(\"entry\", timebase_id, -1, -1, 0, NULL, NULL);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    OS_TimeBaseGetInfo_Log(\"after_ObjectIdToType\", timebase_id, -1, objtype, 0, NULL, NULL);\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimeBaseGetInfo_Log(\"incorrect_obj_state\", timebase_id, OS_ERR_INCORRECT_OBJ_STATE, objtype, 0, NULL, NULL);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n    OS_TimeBaseGetInfo_Log(\"after_memset\", timebase_id, -1, objtype, 0, NULL, NULL);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    OS_TimeBaseGetInfo_Log(\"after_ObjectIdGetById\", timebase_id, return_code, objtype, (return_code == OS_SUCCESS), NULL, NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log the fetched objects prior to use */\n        OS_TimeBaseGetInfo_Log(\"objects_fetched\", timebase_id, return_code, objtype, 1, record, timebase);\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        /* Log just before calling the platform-specific implementation */\n        OS_TimeBaseGetInfo_Log(\"before_Impl\", timebase_id, return_code, objtype, 1, record, timebase);\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n        OS_TimeBaseGetInfo_Log(\"after_Impl\", timebase_id, return_code, objtype, 1, record, timebase);\n\n        OS_ObjectIdRelease(&token);\n        OS_TimeBaseGetInfo_Log(\"after_Release\", timebase_id, return_code, objtype, 0, NULL, NULL);\n    }\n\n    return return_code;\n}"
}