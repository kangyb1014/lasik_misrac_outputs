{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' is declared as OS_common_record_t * but is only used for read access (e.g. strncpy(timebase_prop->name, record->name_entry, ...); timebase_prop->creator = record->creator). According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible. In this case 'record' could be declared as 'const OS_common_record_t *record' and the assignment from OS_OBJECT_TABLE_GET(...) (which yields OS_common_record_t *) can be assigned to a const-qualified pointer without a cast. Therefore the current code violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2147.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetInfo:\n```c\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Helper probe function to append logs to /tmp/logs/2147.txt */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2147.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fputc('\\n', f);\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_TimeBaseGetInfo(osal_id_t timebase_id, OS_timebase_prop_t *timebase_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and parameters */\n    log_probe(\"ENTER: OS_TimeBaseGetInfo timebase_id=%llu timebase_prop=%p\",\n              (unsigned long long)timebase_id, (void *)timebase_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timebase_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    log_probe(\"ObjectIdToType returned objtype=%d\", (int)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        log_probe(\"EARLY RETURN: called from a timebase context (objtype=%d)\", (int)objtype);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timebase_prop, 0, sizeof(OS_timebase_prop_t));\n    log_probe(\"Zeroed timebase_prop at %p (size=%zu)\", (void *)timebase_prop, sizeof(OS_timebase_prop_t));\n\n    log_probe(\"Calling OS_ObjectIdGetById with id=%llu\", (unsigned long long)timebase_id);\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, timebase_id, &token);\n    log_probe(\"OS_ObjectIdGetById returned %d\", (int)return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log pointer values obtained from object table */\n        log_probe(\"Obtained record=%p timebase=%p token=%p\", (void *)record, (void *)timebase, (void *)&token);\n\n        /* Safe copy of name for logging (ensure null termination) */\n        {\n            char namebuf[64];\n            if (record != NULL && record->name_entry != NULL)\n            {\n                strncpy(namebuf, record->name_entry, sizeof(namebuf) - 1);\n                namebuf[sizeof(namebuf) - 1] = '\\0';\n            }\n            else\n            {\n                namebuf[0] = '\\0';\n            }\n            log_probe(\"record->name_entry=\\\"%s\\\"\", namebuf);\n        }\n\n        /* Log other record/timebase fields used by this function */\n        if (record != NULL)\n        {\n            log_probe(\"record->creator=%llu\", (unsigned long long)record->creator);\n        }\n        else\n        {\n            log_probe(\"record is NULL, cannot log creator\");\n        }\n\n        if (timebase != NULL)\n        {\n            log_probe(\"timebase->nominal_interval_time=%llu freerrun_time=%llu accuracy_usec=%llu\",\n                      (unsigned long long)timebase->nominal_interval_time,\n                      (unsigned long long)timebase->freerun_time,\n                      (unsigned long long)timebase->accuracy_usec);\n        }\n        else\n        {\n            log_probe(\"timebase is NULL, cannot log nominal_interval_time/freerun_time/accuracy\");\n        }\n\n        /* Preserve original behavior: copy properties out to caller */\n        strncpy(timebase_prop->name, record->name_entry, sizeof(timebase_prop->name) - 1);\n        timebase_prop->creator               = record->creator;\n        timebase_prop->nominal_interval_time = timebase->nominal_interval_time;\n        timebase_prop->freerun_time          = timebase->freerun_time;\n        timebase_prop->accuracy              = timebase->accuracy_usec;\n\n        log_probe(\"Populated timebase_prop->name=%s creator=%llu nominal_interval_time=%llu\",\n                  timebase_prop->name,\n                  (unsigned long long)timebase_prop->creator,\n                  (unsigned long long)timebase_prop->nominal_interval_time);\n\n        return_code = OS_TimeBaseGetInfo_Impl(&token, timebase_prop);\n        log_probe(\"OS_TimeBaseGetInfo_Impl returned %d\", (int)return_code);\n\n        OS_ObjectIdRelease(&token);\n        log_probe(\"Released token and returning %d\", (int)return_code);\n    }\n    else\n    {\n        log_probe(\"OS_ObjectIdGetById failed with code %d, returning\", (int)return_code);\n    }\n\n    return return_code;\n}\n"
}