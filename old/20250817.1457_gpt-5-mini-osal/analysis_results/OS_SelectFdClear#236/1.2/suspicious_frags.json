{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SelectFdClear:\n```c\nint32 OS_SelectFdClear(OS_FdSet *Set, osal_id_t objid)\n{\n    int32        return_code;\n    osal_index_t local_id;\n\n    /* check parameters */\n    OS_CHECK_POINTER(Set);\n\n    return_code = OS_ObjectIdToArrayIndex(OS_OBJECT_TYPE_OS_STREAM, objid, &local_id);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * Clears the bit in the uint8 object_ids array that corresponds\n         * to the local_id where local_id >> 3 determines the array element,\n         * and the mask/shift clears the bit within that element.\n         */\n        Set->object_ids[local_id >> 3] &= ~(1 << (local_id & 0x7));\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SelectFdClear:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\ntypedef struct\n{\n    uint8 object_ids[(OS_MAX_NUM_OPEN_FILES + 7) / 8];\n} OS_FdSet\n...\ntypedef uint32 osal_id_t\n...\ntypedef uint32 osal_index_t\n...\ntypedef int32_t   int32\n...\n#define OS_SUCCESS (0)\n...\n#define OS_OBJECT_TYPE_OS_STREAM 0x06\n...\nint32 OS_ObjectIdToArrayIndex(osal_objtype_t idtype, osal_id_t object_id, osal_index_t *ArrayIndex)\n{\n    uint32         max_id;\n    uint32         obj_index;\n    osal_objtype_t actual_type;\n    int32          return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(ArrayIndex);\n\n    obj_index   = OS_ObjectIdToSerialNumber_Impl(object_id);\n    actual_type = OS_ObjectIdToType_Impl(object_id);\n\n    /*\n     * If requested by the caller, enforce that the ID is of the correct type.\n     * If the caller passed OS_OBJECT_TYPE_UNDEFINED, then anything is allowed.\n     */\n    if (idtype != OS_OBJECT_TYPE_UNDEFINED && actual_type != idtype)\n    {\n        return_code = OS_ERR_INVALID_ID;\n    }\n    else\n    {\n        max_id = OS_GetMaxForObjectType(actual_type);\n        if (max_id == 0)\n        {\n            return_code = OS_ERR_INVALID_ID;\n        }\n        else\n        {\n            return_code = OS_SUCCESS;\n            *ArrayIndex = OSAL_INDEX_C(obj_index % max_id);\n        }\n    }\n\n    return return_code;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no use of compiler-specific language extensions in the provided fragments. Specifically:\n- No compiler-extension tokens are present (no __attribute__, __asm__, __builtin_*, typeof, statement-expressions ({ ... }), nested functions, or other vendor-specific keywords).\n- The bitwise operations (>> and <<), mask expressions, integer literals, typedefs (uint8, uint32, int32_t), and array-size expression ((OS_MAX_NUM_OPEN_FILES + 7) / 8) are standard C constructs, not compiler extensions.\n- The single-line comments (//) are standard since C99 and are not a compiler-specific extension.\n- The function definitions and macros shown (OS_CHECK_POINTER usage, OS_ObjectIdToArrayIndex, etc.) do not exhibit language extensions in their visible forms.\n\nNote: Some identifiers/macros referenced but not expanded here (e.g., BUGCHECK, OSAL_INDEX_C, OS_ObjectIdToSerialNumber_Impl, OS_ObjectIdToType_Impl, OS_GetMaxForObjectType) could internally use compiler extensions. Those definitions were not provided; if you want to be certain no extensions are used anywhere, provide those macro/function definitions so they can be inspected. Based solely on the supplied code fragments, there are no suspicious language extensions to report."
}