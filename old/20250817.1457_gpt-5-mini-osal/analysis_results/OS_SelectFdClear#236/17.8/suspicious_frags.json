{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SelectFdClear:\n```c\nint32 OS_SelectFdClear(OS_FdSet *Set, osal_id_t objid)\n{\n    int32        return_code;\n    osal_index_t local_id;\n\n    /* check parameters */\n    OS_CHECK_POINTER(Set);\n\n    return_code = OS_ObjectIdToArrayIndex(OS_OBJECT_TYPE_OS_STREAM, objid, &local_id);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * Clears the bit in the uint8 object_ids array that corresponds\n         * to the local_id where local_id >> 3 determines the array element,\n         * and the mask/shift clears the bit within that element.\n         */\n        Set->object_ids[local_id >> 3] &= ~(1 << (local_id & 0x7));\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SelectFdClear:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\ntypedef struct\n{\n    uint8 object_ids[(OS_MAX_NUM_OPEN_FILES + 7) / 8];\n} OS_FdSet\n...\ntypedef uint32 osal_id_t\n...\ntypedef uint32 osal_index_t\n...\n#define OS_SUCCESS (0)\n...\n#define OS_OBJECT_TYPE_OS_STREAM 0x06\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragments modify a function parameter itself. Analysis of relevant fragments:\n\n- Function signature: OS_SelectFdClear(OS_FdSet *Set, osal_id_t objid)\n  - The pointer parameter Set is not assigned to or otherwise mutated in the function; only the object it points to is written. The MISRA Rule 17.8 note explicitly permits modifying the object referred to by a pointer parameter, so the write to *Set is allowed.\n  - The scalar parameter objid is passed by value and is not modified anywhere in the function.\n\n- OS_CHECK_POINTER(Set) expands to BUGCHECK((Set) != NULL, OS_INVALID_POINTER) and does not assign to or modify Set; it only evaluates it for NULL. Given the provided macro definition, it does not change the parameter.\n\n- return_code = OS_ObjectIdToArrayIndex(..., objid, &local_id);\n  - objid is passed by value (not by pointer), so it cannot be modified by this call in the caller\u2019s context. local_id is a local variable, not a parameter.\n\n- Set->object_ids[local_id >> 3] &= ~(1 << (local_id & 0x7));\n  - This modifies the array element within the object pointed to by Set. As noted, modifying the object pointed to by a pointer parameter is allowed by the rule; the pointer itself is not changed.\n\nNo other assignments, increments, or operations in the function assign to Set or objid. Therefore there are no fragments that violate MISRA C 2023 Rule 17.8 and nothing needs to be flagged for investigation."
}