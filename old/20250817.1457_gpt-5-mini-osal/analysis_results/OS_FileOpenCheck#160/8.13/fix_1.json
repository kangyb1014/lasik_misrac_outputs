{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_FileOpenCheck_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1283.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fclose(f);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    /* Log entry into the function and the Filename parameter */\n    OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] start: Filename=\\\"%s\\\"\\n\", Filename ? Filename : \"(null)\");\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] iterator initialized\\n\");\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* Preserve original logic: obtain the stream record */\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Use a const-qualified pointer for logging/inspection to avoid accidental modification */\n        const OS_stream_internal_record_t *cstream = stream;\n\n        /* Log the current iterator token, pointer, and key fields used in the match */\n        OS_FileOpenCheck_LogProbe(\n            \"[OS_FileOpenCheck] iter.token=0x%llx, stream_ptr=%p, socket_domain=%d, stream_name=\\\"%s\\\"\\n\",\n            (unsigned long long)iter.token,\n            (void *)stream,\n            (int)cstream->socket_domain,\n            cstream->stream_name ? cstream->stream_name : \"(null)\");\n\n        /* Compute strcmp result and log it so callers can reproduce matching decisions */\n        int cmp = strcmp(cstream->stream_name, Filename);\n        OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] strcmp(stream_name, Filename) = %d\\n\", cmp);\n\n        if (cstream->socket_domain == OS_SocketDomain_INVALID && (cmp == 0))\n        {\n            OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] match found, setting return_code = OS_SUCCESS and breaking\\n\");\n            return_code = OS_SUCCESS;\n            break;\n        }\n        else\n        {\n            OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] no match for this record\\n\");\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] iterator destroyed, returning code=%d\\n\", (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpsd_8iahl/src/src/os/shared/src/osapi-file.c: In function 'OS_FileOpenCheck':\n/tmp/tmpsd_8iahl/src/src/os/shared/src/osapi-file.c:569:13: error: aggregate value used where an integer was expected\n  569 |             (unsigned long long)iter.token,\n      |             ^\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:174: CMakeFiles/osal.dir/src/os/shared/src/osapi-file.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static void OS_FileOpenCheck_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1283.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fclose(f);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    /* Log entry into the function and the Filename parameter */\n    OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] start: Filename=\\\"%s\\\"\\n\", Filename ? Filename : \"(null)\");\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] iterator initialized\\n\");\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* Preserve original logic: obtain the stream record */\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Use a const-qualified pointer for logging/inspection to avoid accidental modification */\n        const OS_stream_internal_record_t *cstream = stream;\n\n        /* Log the current iterator token, pointer, and key fields used in the match */\n        OS_FileOpenCheck_LogProbe(\n            \"[OS_FileOpenCheck] iter.token=%p, stream_ptr=%p, socket_domain=%d, stream_name=\\\"%s\\\"\\n\",\n            (const void *)&iter.token,\n            (void *)stream,\n            (int)cstream->socket_domain,\n            cstream->stream_name ? cstream->stream_name : \"(null)\");\n\n        /* Compute strcmp result and log it so callers can reproduce matching decisions */\n        int cmp = strcmp(cstream->stream_name, Filename);\n        OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] strcmp(stream_name, Filename) = %d\\n\", cmp);\n\n        if (cstream->socket_domain == OS_SocketDomain_INVALID && (cmp == 0))\n        {\n            OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] match found, setting return_code = OS_SUCCESS and breaking\\n\");\n            return_code = OS_SUCCESS;\n            break;\n        }\n        else\n        {\n            OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] no match for this record\\n\");\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] iterator destroyed, returning code=%d\\n\", (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "The compilation error occurred because iter.token is an aggregate type (not a scalar integer), so casting it to unsigned long long was invalid. I changed the log to print the address of iter.token using the %p format and (const void *)&iter.token. This avoids casting an aggregate to an integer while preserving the original intent of logging the token value/location. No other logic was changed."
}