{
  "user_message": "An agent A claimed that the following OS_FileOpenCheck code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileOpenCheck.\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code assigns a non-const pointer to an object table entry even though the function only reads from that object. In OS_FileOpenCheck (stream declared as OS_stream_internal_record_t *stream), the fragment stream = OS_OBJECT_TABLE_GET(OS_stream_table, *token); obtains a mutable pointer but the code only reads stream->socket_domain and stream->stream_name (used in strcmp). The pointer could and should be declared as pointing to a const-qualified type (const OS_stream_internal_record_t *stream) to satisfy MISRA C 2023 Rule 8.13. Thus this usage violates the rule.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic const char LOG_PATH[] = \"/tmp/logs/osal.log\";\nstatic void log_appendf(const char *fmt, ...)\n{\n    /* ensure the directory exists; ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(LOG_PATH, \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32_t OS_FileOpenCheck(const char *Filename)\n{\n    int32_t                    return_code;\n    /* OS_object_iter_t and OS_stream_internal_record_t are defined in the\n       project's headers; do not redefine them here. */\n    OS_object_iter_t           iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters using the project's macro (do not redefine it). */\n    OS_CHECK_POINTER(Filename);\n    log_appendf(\"OS_FileOpenCheck: entry Filename='%s'\", (Filename != NULL) ? Filename : \"(null)\");\n\n    return_code = OS_ERROR;\n\n    /* Start an iteration over active object ids for the appropriate type. */\n    OS_ObjectIdIterateActive(0 /* LOCAL_OBJID_TYPE placeholder */, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* Use the project's OS_OBJECT_TABLE_GET macro to obtain the table entry. */\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        log_appendf(\"iteration: token=%u stream_ptr=%p\", (unsigned)iter.token, (void *)stream);\n        if (stream == NULL)\n        {\n            log_appendf(\"  -> OS_OBJECT_TABLE_GET returned NULL for token=%u\", (unsigned)iter.token);\n            continue;\n        }\n\n        /* Log stream state prior to the comparison */\n        log_appendf(\"  -> stream->socket_domain=%d stream->stream_name='%s'\", stream->socket_domain, stream->stream_name);\n\n        /* Perform the same check as the original code but log the strcmp result */\n        int cmp = strcmp(stream->stream_name, Filename);\n        log_appendf(\"  -> strcmp(stream->stream_name, Filename) returned %d\", cmp);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (cmp == 0))\n        {\n            return_code = OS_SUCCESS;\n            log_appendf(\"  -> match found at token=%u; setting return_code=OS_SUCCESS and breaking\", (unsigned)iter.token);\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    log_appendf(\"OS_FileOpenCheck: exit with return_code=%d\", return_code);\n\n    return return_code;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In OS_FileOpenCheck the local variable stream is only used to read fields (stream->socket_domain and stream->stream_name) and is never used to modify the object. According to MISRA C 2023 Rule 8.13, a pointer should point to a const-qualified type whenever possible; here it is possible to declare stream as const OS_stream_internal_record_t *stream. There is no visible reason in the snippet that requires a mutable pointer (no writes, no passing to APIs that require a non-const pointer). Note also that assigning a non-const object pointer to a const-qualified pointer is permitted, so changing the declaration would not conflict with the OS_OBJECT_TABLE_GET macro return type. The failed test compilation is unrelated to the rule assessment. Therefore the reported violation is correct."
}