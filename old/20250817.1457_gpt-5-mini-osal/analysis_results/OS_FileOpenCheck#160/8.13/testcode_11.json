{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdIteratorGetNext the local variable 'record' is declared as a non-const pointer: \"OS_common_record_t *record;\". The code only reads from *record (accesses record->active_id and passes it to the match callback) and does not modify the pointed-to object, so it could and should be declared as a pointer to const (const OS_common_record_t *record). Declaring it non-const when const qualification is possible violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1283.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper: appends formatted logs to /tmp/logs/1283.txt */\nstatic void OS_FileOpenCheck_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1283.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fclose(f);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    /* Log entry into the function and the Filename parameter */\n    OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] start: Filename=\\\"%s\\\"\\n\", Filename ? Filename : \"(null)\");\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] iterator initialized\\n\");\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* Preserve original logic: obtain the stream record */\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Use a const-qualified pointer for logging/inspection to avoid accidental modification */\n        const OS_stream_internal_record_t *cstream = stream;\n\n        /* Log the current iterator token, pointer, and key fields used in the match */\n        OS_FileOpenCheck_LogProbe(\n            \"[OS_FileOpenCheck] iter.token=0x%llx, stream_ptr=%p, socket_domain=%d, stream_name=\\\"%s\\\"\\n\",\n            (unsigned long long)iter.token,\n            (void *)stream,\n            (int)cstream->socket_domain,\n            cstream->stream_name ? cstream->stream_name : \"(null)\");\n\n        /* Compute strcmp result and log it so callers can reproduce matching decisions */\n        int cmp = strcmp(cstream->stream_name, Filename);\n        OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] strcmp(stream_name, Filename) = %d\\n\", cmp);\n\n        if (cstream->socket_domain == OS_SocketDomain_INVALID && (cmp == 0))\n        {\n            OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] match found, setting return_code = OS_SUCCESS and breaking\\n\");\n            return_code = OS_SUCCESS;\n            break;\n        }\n        else\n        {\n            OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] no match for this record\\n\");\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] iterator destroyed, returning code=%d\\n\", (int)return_code);\n\n    return return_code;\n}\n"
}