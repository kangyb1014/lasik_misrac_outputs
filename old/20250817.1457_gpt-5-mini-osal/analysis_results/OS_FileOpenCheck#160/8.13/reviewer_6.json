{
  "user_message": "An agent A claimed that the following OS_FileOpenCheck code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileOpenCheck.\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The iterator field iter->arg is declared as void * (non-const) but is passed as a read-only parameter to the match callback (iter->match(iter->arg, &iter->token, record)). If the match callback does not modify the argument (i.e. it should accept a const void *), then iter->arg should be const-qualified (const void *), and the OS_ObjectMatchFunc_t prototype adjusted accordingly. As written this use of a non-const pointer for a likely read-only parameter violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_FileOpenCheck_log_probe(const char *Filename, const OS_object_iter_t *iter, OS_stream_internal_record_t *stream, int strcmp_result, int32 return_code, const char *stage)\n{\n    FILE *fp = fopen(\"/tmp/logs/1283.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Log the stage of the function, filename, iterator token and arg, stream info, compare result and return code */\n        fprintf(fp, \"Stage: %s\\n\", stage);\n        if (Filename != NULL)\n        {\n            fprintf(fp, \"  Filename: '%s'\\n\", Filename);\n        }\n        else\n        {\n            fprintf(fp, \"  Filename: (NULL)\\n\");\n        }\n\n        if (iter != NULL)\n        {\n            /* Print iterator token and argument pointer (arg may be used elsewhere as read-only) */\n            /* iter->token is an aggregate in some builds; print its address instead of casting it to an integer */\n            fprintf(fp, \"  Iterator token: %p\\n\", (const void *)&iter->token);\n            fprintf(fp, \"  Iterator arg pointer: %p\\n\", (const void *)iter->arg);\n        }\n        else\n        {\n            fprintf(fp, \"  Iterator: (NULL)\\n\");\n        }\n\n        if (stream != NULL)\n        {\n            fprintf(fp, \"  Stream pointer: %p\\n\", (const void *)stream);\n            fprintf(fp, \"  Stream socket_domain: %d\\n\", (int)stream->socket_domain);\n            if (stream->stream_name != NULL)\n            {\n                fprintf(fp, \"  Stream name: '%s'\\n\", stream->stream_name);\n            }\n            else\n            {\n                fprintf(fp, \"  Stream name: (NULL)\\n\");\n            }\n        }\n        else\n        {\n            fprintf(fp, \"  Stream: (NULL)\\n\");\n        }\n\n        fprintf(fp, \"  strcmp result: %d\\n\", strcmp_result);\n        fprintf(fp, \"  return_code (so far): %d\\n\", (int)return_code);\n        fprintf(fp, \"----------------------------\\n\");\n        fclose(fp);\n    }\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    /* Log entry */\n    OS_FileOpenCheck_log_probe(Filename, (const OS_object_iter_t *)NULL, (OS_stream_internal_record_t *)NULL, 0, return_code, \"entry\");\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    /* Log after iterator activated */\n    OS_FileOpenCheck_log_probe(Filename, &iter, (OS_stream_internal_record_t *)NULL, 0, return_code, \"after_iterate_active\");\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Compute compare result for logging without changing original logic */\n        int cmp = -1;\n        if (stream != NULL && stream->stream_name != NULL && Filename != NULL)\n        {\n            cmp = strcmp(stream->stream_name, Filename);\n        }\n\n        /* Log current iteration state */\n        OS_FileOpenCheck_log_probe(Filename, &iter, stream, cmp, return_code, \"in_loop_before_check\");\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (cmp == 0))\n        {\n            return_code = OS_SUCCESS;\n\n            /* Log the matching event and state */\n            OS_FileOpenCheck_log_probe(Filename, &iter, stream, cmp, return_code, \"match_found_breaking\");\n            break;\n        }\n        else\n        {\n            /* Log non-matching iteration */\n            OS_FileOpenCheck_log_probe(Filename, &iter, stream, cmp, return_code, \"in_loop_no_match\");\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    /* Log exit */\n    OS_FileOpenCheck_log_probe(Filename, &iter, (OS_stream_internal_record_t *)NULL, 0, return_code, \"exit\");\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_FileOpenCheck. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not supported by the provided code. The shown OS_FileOpenCheck implementation already uses const for the Filename parameter and does not access or pass iter.arg or a match callback itself \u2014 the function only uses iter.token and looks up the stream record, then compares stream->stream_name to the const Filename. Agent A\u2019s claim relies on properties of the iterator API (the declaration of OS_object_iter_t and OS_ObjectMatchFunc_t and how iter.arg is used when invoking a match callback), but those declarations and calls are not present in the supplied code. Therefore there is no demonstrated MISRA C:2023 Rule 8.13 violation in OS_FileOpenCheck as shown. It may be that a separate iterator API (or its match callback prototype) could be improved by qualifying a pointer argument const if it is genuinely used read-only, but that is a separate issue requiring inspection of the iterator/match function prototypes and implementations. Without that evidence the report is not correct for the provided function."
}