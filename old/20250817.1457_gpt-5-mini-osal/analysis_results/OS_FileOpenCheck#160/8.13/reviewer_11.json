{
  "user_message": "An agent A claimed that the following OS_FileOpenCheck code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileOpenCheck.\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In OS_ObjectIdIteratorGetNext the local variable 'record' is declared as a non-const pointer: \"OS_common_record_t *record;\". The code only reads from *record (accesses record->active_id and passes it to the match callback) and does not modify the pointed-to object, so it could and should be declared as a pointer to const (const OS_common_record_t *record). Declaring it non-const when const qualification is possible violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_FileOpenCheck_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1283.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fclose(f);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    /* Log entry into the function and the Filename parameter */\n    OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] start: Filename=\\\"%s\\\"\\n\", Filename ? Filename : \"(null)\");\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] iterator initialized\\n\");\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* Preserve original logic: obtain the stream record */\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Use a const-qualified pointer for logging/inspection to avoid accidental modification */\n        const OS_stream_internal_record_t *cstream = stream;\n\n        /* Log the current iterator token, pointer, and key fields used in the match */\n        OS_FileOpenCheck_LogProbe(\n            \"[OS_FileOpenCheck] iter.token=%p, stream_ptr=%p, socket_domain=%d, stream_name=\\\"%s\\\"\\n\",\n            (const void *)&iter.token,\n            (void *)stream,\n            (int)cstream->socket_domain,\n            cstream->stream_name ? cstream->stream_name : \"(null)\");\n\n        /* Compute strcmp result and log it so callers can reproduce matching decisions */\n        int cmp = strcmp(cstream->stream_name, Filename);\n        OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] strcmp(stream_name, Filename) = %d\\n\", cmp);\n\n        if (cstream->socket_domain == OS_SocketDomain_INVALID && (cmp == 0))\n        {\n            OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] match found, setting return_code = OS_SUCCESS and breaking\\n\");\n            return_code = OS_SUCCESS;\n            break;\n        }\n        else\n        {\n            OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] no match for this record\\n\");\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_FileOpenCheck_LogProbe(\"[OS_FileOpenCheck] iterator destroyed, returning code=%d\\n\", (int)return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_FileOpenCheck. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the shown OS_FileOpenCheck implementation the local variable stream is declared as a non-const pointer (OS_stream_internal_record_t *stream) but the function only reads fields from the referenced object (compares socket_domain and calls strcmp on stream_name). According to MISRA C:2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so stream could and should be declared as const OS_stream_internal_record_t *stream (and likewise the iterator implementation\u2019s local record pointer can be const if it is only read).\n\nCaveat: this is only a violation if there is no other usage that requires stream to be a modifiable (non-const) pointer (for example if OS_OBJECT_TABLE_GET is a macro or API that must return a non-const pointer used elsewhere for modification, or if subsequent code needs to write through stream). Adding the const qualifier locally (assigning a non-const pointer to a const-qualified pointer) is allowed, so for the code shown the change is straightforward and would address Rule 8.13."
}