{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdIteratorGetNext the code reads a table entry via record = OS_OBJECT_TABLE_GET(iter->base, iter->token); iter->base is declared as OS_common_record_t * but is only used for read-only access (the routine only reads fields and calls the match callback). The pointer (iter->base) and the returned record could and should be const-qualified (e.g. const OS_common_record_t *base and const OS_common_record_t *record). Also the OS_OBJECT_TABLE_GET macro currently yields a non-const pointer, preventing const propagation. Therefore the use of a non-const pointer where only read access is performed violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1283.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper - append-only to avoid interfering with program state */\nstatic void os_fileopen_log_probe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1283.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging fails, do not change program behavior; silently return */\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Log entry and parameters */\n    if (Filename != NULL)\n    {\n        os_fileopen_log_probe(\"OS_FileOpenCheck: ENTRY Filename=%p \\\"%s\\\"\\n\", (void *)Filename, Filename);\n    }\n    else\n    {\n        os_fileopen_log_probe(\"OS_FileOpenCheck: ENTRY Filename=NULL\\n\");\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n    os_fileopen_log_probe(\"OS_FileOpenCheck: Iterator initialized. iter.token(initial)=%lu\\n\", (unsigned long)iter.token);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* Log that iterator advanced and current token */\n        os_fileopen_log_probe(\"OS_FileOpenCheck: IteratorGetNext -> iter.token=%lu\\n\", (unsigned long)iter.token);\n\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        os_fileopen_log_probe(\"OS_FileOpenCheck: Retrieved stream pointer=%p\\n\", (void *)stream);\n\n        if (stream != NULL)\n        {\n            /* Log stream fields used by this routine */\n            os_fileopen_log_probe(\"OS_FileOpenCheck: stream->socket_domain=%d, stream->stream_name=%p\\n\",\n                                 (int)stream->socket_domain,\n                                 (void *)stream->stream_name);\n\n            if (stream->stream_name != NULL)\n            {\n                /* Avoid passing NULL into strcmp; log comparison components */\n                os_fileopen_log_probe(\"OS_FileOpenCheck: Comparing stream->stream_name=\\\"%s\\\" to Filename=\\\"%s\\\"\\n\",\n                                     stream->stream_name,\n                                     Filename);\n            }\n            else\n            {\n                os_fileopen_log_probe(\"OS_FileOpenCheck: stream->stream_name is NULL\\n\");\n            }\n        }\n        else\n        {\n            os_fileopen_log_probe(\"OS_FileOpenCheck: stream is NULL for token=%lu\\n\", (unsigned long)iter.token);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            os_fileopen_log_probe(\"OS_FileOpenCheck: Match found for token=%lu, setting return_code=OS_SUCCESS and breaking\\n\", (unsigned long)iter.token);\n            return_code = OS_SUCCESS;\n            break;\n        }\n        else\n        {\n            os_fileopen_log_probe(\"OS_FileOpenCheck: No match for token=%lu (socket_domain=%d, name_cmp=%d)\\n\",\n                                 (unsigned long)iter.token,\n                                 (int)stream->socket_domain,\n                                 (int)(stream->stream_name ? (strcmp(stream->stream_name, Filename) == 0) : 0));\n        }\n    }\n\n    os_fileopen_log_probe(\"OS_FileOpenCheck: Iterator finished, destroying iterator\\n\");\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    os_fileopen_log_probe(\"OS_FileOpenCheck: EXIT return_code=%d\\n\", (int)return_code);\n\n    return return_code;\n}\n"
}