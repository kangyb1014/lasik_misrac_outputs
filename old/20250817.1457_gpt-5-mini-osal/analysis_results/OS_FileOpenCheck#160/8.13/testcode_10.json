{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_FileOpenCheck the local variable 'stream' is declared as OS_stream_internal_record_t *stream but is only read (e.g. used in 'switch (stream->socket_domain)' and strcmp(stream->stream_name, Filename)). Since the object is not modified in this function the pointer should be to a const-qualified type (const OS_stream_internal_record_t *). Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1283.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Helper logging function: append a single formatted line to the log file. */\nstatic void OS_FileOpenCheck_Log(const char *msg)\n{\n    FILE *fp = fopen(\"/tmp/logs/1283.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    fputs(msg, fp);\n    fputc('\\n', fp);\n    fclose(fp);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    /* Log entry and parameter state */\n    {\n        char buf[256];\n        snprintf(buf, sizeof(buf), \"OS_FileOpenCheck ENTRY: Filename=%p (%s)\", (const void *)Filename, (Filename ? Filename : \"<NULL>\"));\n        OS_FileOpenCheck_Log(buf);\n    }\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    /* Iterate through stream objects and log each inspected stream */\n    int loop_count = 0;\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        loop_count++;\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log the inspected stream state */\n        {\n            char buf[512];\n            const char *sname = \"<NULL>\";\n            if (stream && stream->stream_name)\n            {\n                sname = stream->stream_name;\n            }\n\n            /* Cast socket_domain to int for logging to avoid depending on enum type */\n            snprintf(buf, sizeof(buf),\n                     \"OS_FileOpenCheck ITER %d: stream=%p, socket_domain=%d, stream_name=%s\",\n                     loop_count, (void *)stream, (int)(stream ? stream->socket_domain : -1), sname);\n            OS_FileOpenCheck_Log(buf);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* Log the match that demonstrates the pointer was only read */\n            {\n                char buf[256];\n                snprintf(buf, sizeof(buf), \"OS_FileOpenCheck MATCH: stream=%p matched Filename=%s\", (void *)stream, Filename);\n                OS_FileOpenCheck_Log(buf);\n            }\n\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    /* Log exit and return code */\n    {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"OS_FileOpenCheck EXIT: return_code=%d, iterations=%d\", return_code, loop_count);\n        OS_FileOpenCheck_Log(buf);\n    }\n\n    return return_code;\n}\n"
}