{
  "user_message": "An agent A claimed that the following OS_FileOpenCheck code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileOpenCheck.\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In OS_SocketOpen_Impl the local variable \"stream\" is declared as OS_stream_internal_record_t *stream but the function only reads fields (e.g. switch (stream->socket_type) and later reads stream->socket_domain) and does not modify the pointed-to object. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible. Thus \"stream\" should be declared as const OS_stream_internal_record_t *stream (and OS_OBJECT_TABLE_GET usage adjusted if needed) to avoid the violation.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_FileOpenCheck_LogEntry(FILE *logf, const char *Filename)\n{\n    if (logf == NULL) return;\n    fprintf(logf, \"OS_FileOpenCheck: entry\\n\");\n    fprintf(logf, \"  Filename pointer=%p\\n\", (const void *)Filename);\n    fprintf(logf, \"  Filename text=\\\"%s\\\"\\n\", (Filename != NULL) ? Filename : \"(null)\");\n}\nstatic void OS_FileOpenCheck_LogIter(FILE *logf, const void *token_ptr, const void *stream_ptr,\n                                     int socket_domain, const char *stream_name)\n{\n    if (logf == NULL) return;\n    /* Print the token as a pointer to avoid casting an aggregate to an integer */\n    fprintf(logf, \"  Iter token=%p stream_ptr=%p\\n\", token_ptr, stream_ptr);\n    fprintf(logf, \"    socket_domain=%d\\n\", socket_domain);\n    fprintf(logf, \"    stream_name=\\\"%s\\\"\\n\", (stream_name != NULL) ? stream_name : \"(null)\");\n}\nstatic void OS_FileOpenCheck_LogMatch(FILE *logf, const void *token_ptr, const char *stream_name)\n{\n    if (logf == NULL) return;\n    fprintf(logf, \"  Match found: token=%p name=\\\"%s\\\"\\n\", token_ptr, (stream_name != NULL) ? stream_name : \"(null)\");\n}\nstatic void OS_FileOpenCheck_LogNoMatch(FILE *logf, const void *token_ptr, int socket_domain)\n{\n    if (logf == NULL) return;\n    fprintf(logf, \"  No match: token=%p domain=%d\\n\", token_ptr, socket_domain);\n}\nstatic void OS_FileOpenCheck_LogExit(FILE *logf, int return_code)\n{\n    if (logf == NULL) return;\n    fprintf(logf, \"OS_FileOpenCheck: exit return_code=%d\\n\", return_code);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    FILE *logf = NULL;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    /* Open log file for append. Best-effort logging; do not affect main logic if open fails. */\n    logf = fopen(\"/tmp/logs/1283.txt\", \"a\");\n    OS_FileOpenCheck_LogEntry(logf, Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log the relevant observed state prior to the comparison */\n        /* Print the address of iter.token rather than attempting to cast it to an integer */\n        OS_FileOpenCheck_LogIter(logf, (const void *)&iter.token, (const void *)stream,\n                                 (int)stream->socket_domain, stream->stream_name);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            OS_FileOpenCheck_LogMatch(logf, (const void *)&iter.token, stream->stream_name);\n            return_code = OS_SUCCESS;\n            break;\n        }\n        else\n        {\n            OS_FileOpenCheck_LogNoMatch(logf, (const void *)&iter.token, (int)stream->socket_domain);\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_FileOpenCheck_LogExit(logf, (int)return_code);\n\n    if (logf != NULL)\n    {\n        fclose(logf);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_FileOpenCheck. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_FileOpenCheck the local variable stream is declared as a plain OS_stream_internal_record_t * but it is only used for reads (stream->socket_domain, stream->stream_name and passed to strcmp). MISRA C 2023 Rule 8.13 states that a pointer should point to a const-qualified type whenever possible \u2014 i.e. prefer const OS_stream_internal_record_t *stream here. Assigning the result of OS_OBJECT_TABLE_GET (which likely yields a non-const pointer) to a pointer-to-const is allowed, so this change is feasible in this function. The only caveat would be if other code in the same function or macros used here require a modifiable pointer (not the case in the shown code) or if the OS_OBJECT_TABLE_GET macro/API contract must be changed; otherwise the pointer should be const to comply with Rule 8.13."
}