{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator field 'base' points to an object table that is only read by the iterator (e.g. OS_ObjectIdIteratorGetNext uses OS_OBJECT_TABLE_GET(iter->base, iter->token) to obtain a record for inspection). Since the iterator does not modify the table through this pointer, it should be declared const (const OS_common_record_t *base). Leaving it as a non-const pointer allows accidental modification and therefore violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1283.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n\n/* Helper logging function that appends control-flow/state data to the evidence log. */\nstatic void OS_FileOpenCheck_Log(const char *format, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1283.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* If logging fails do not affect original logic. */\n    }\n\n    va_list ap;\n    va_start(ap, format);\n    vfprintf(fp, format, ap);\n    fprintf(fp, \"\\n\");\n    va_end(ap);\n\n    fclose(fp);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    /* Log entry and parameter state */\n    OS_FileOpenCheck_Log(\"OS_FileOpenCheck: entered. Filename='%s' ptr=%p\", Filename, (void *)Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    OS_FileOpenCheck_Log(\"OS_FileOpenCheck: iterator initialized. iter.ptr=%p, iter.token=%u\", (void *)&iter, (unsigned int)iter.token);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* Capture token prior to table access */\n        OS_FileOpenCheck_Log(\"OS_FileOpenCheck: iterator advanced. iter.token=%u\", (unsigned int)iter.token);\n\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log addresses and key fields read from the record. This shows read-only usage of the table. */\n        OS_FileOpenCheck_Log(\"OS_FileOpenCheck: stream ptr=%p, socket_domain=%d, stream_name='%s'\", (void *)stream, (int)stream->socket_domain, (stream->stream_name != NULL) ? stream->stream_name : \"(null)\");\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            OS_FileOpenCheck_Log(\"OS_FileOpenCheck: match found. token=%u, stream=%p\", (unsigned int)iter.token, (void *)stream);\n            return_code = OS_SUCCESS;\n            break;\n        }\n        else\n        {\n            OS_FileOpenCheck_Log(\"OS_FileOpenCheck: no match for token=%u\", (unsigned int)iter.token);\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_FileOpenCheck_Log(\"OS_FileOpenCheck: iterator destroyed. final return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}