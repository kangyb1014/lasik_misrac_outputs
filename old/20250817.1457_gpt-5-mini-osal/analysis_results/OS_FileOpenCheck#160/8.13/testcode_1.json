{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'stream' is declared as a non-const OS_stream_internal_record_t * but is only used for read-only operations (accessing stream->socket_domain and stream->stream_name for strcmp). It could and should be declared as const OS_stream_internal_record_t *stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token); converting the non-const result of the macro to a pointer to const is allowed. Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1283.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    FILE *log = fopen(\"/tmp/logs/1283.txt\", \"a\");\n\n    if (log)\n    {\n        fprintf(log, \"OS_FileOpenCheck START: Filename=\\\"%s\\\"\\n\",\n                (Filename != NULL) ? Filename : \"(null)\");\n        fflush(log);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Probe: log iterator token and stream pointer + key fields observed\n         * Note: print safe fallbacks if stream or its name is NULL to avoid\n         * introducing new side effects. The original logic below still\n         * dereferences stream as before to preserve behavior. */\n        if (log)\n        {\n            fprintf(log,\n                    \"ITER token=%u stream_ptr=%p socket_domain=%d stream_name=\\\"%s\\\"\\n\",\n                    (unsigned int)iter.token,\n                    (void *)stream,\n                    (int)((stream != NULL) ? stream->socket_domain : -999),\n                    (stream != NULL && stream->stream_name != NULL) ? stream->stream_name : \"(null)\");\n            fflush(log);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            if (log)\n            {\n                fprintf(log, \"MATCH FOUND: token=%u stream_name=\\\"%s\\\" Filename=\\\"%s\\\"\\n\",\n                        (unsigned int)iter.token,\n                        stream->stream_name,\n                        Filename);\n                fflush(log);\n            }\n\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"Iterator complete, return_code=%d\\n\", (int)return_code);\n        fflush(log);\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    if (log)\n    {\n        fprintf(log, \"OS_FileOpenCheck END\\n\\n\");\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}