{
  "user_message": "An agent A claimed that the following OS_FileOpenCheck code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileOpenCheck.\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In OS_FileOpenCheck the local variable is declared as a non-const pointer: \"OS_stream_internal_record_t *stream;\". In that function the pointer is only used for read-only access (checking stream->socket_domain and strcmp(stream->stream_name, Filename)), so it could and should be declared as a pointer to a const-qualified type (const OS_stream_internal_record_t *stream). Therefore Rule 8.13 is violated.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1283.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', fp);\n    fclose(fp);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Log entry and parameter state */\n    os_probe_log(\"OS_FileOpenCheck: enter Filename='%s'\", Filename ? Filename : \"(null)\");\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    os_probe_log(\"OS_FileOpenCheck: started object iteration\");\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log state for this iteration */\n        /* Defensive prints: stream name may be NULL in pathological cases */\n        os_probe_log(\n            \"OS_FileOpenCheck: iter token=%p stream_ptr=%p socket_domain=%d stream_name='%s'\",\n            (void *)&iter.token,\n            (void *)stream,\n            (int)stream->socket_domain,\n            stream->stream_name ? stream->stream_name : \"(null)\");\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            os_probe_log(\n                \"OS_FileOpenCheck: match found token=%p stream_name='%s' Filename='%s'\",\n                (void *)&iter.token,\n                stream->stream_name ? stream->stream_name : \"(null)\",\n                Filename ? Filename : \"(null)\");\n\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    os_probe_log(\"OS_FileOpenCheck: destroying iterator and exiting with return_code=%d\", return_code);\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_FileOpenCheck. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_FileOpenCheck the local variable stream is only used for read-only access (reading stream->socket_domain and stream->stream_name and passing them to strcmp/printing). According to MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible; here it is possible to declare the pointer as const OS_stream_internal_record_t *stream without changing behavior. Assignment from the (presumed) non-const return of OS_OBJECT_TABLE_GET to a pointer-to-const is allowed, and the rest of the function does not perform any writes through stream. Therefore the current non-const declaration violates the rule. Recommendation: change the declaration to const OS_stream_internal_record_t *stream (and ensure this change is compatible with OS_OBJECT_TABLE_GET and other call sites). If other code in this function or later needs to modify the pointed object, then a non-const pointer would be required and the rule would not apply in that context."
}