{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_SocketOpen_Impl the local variable \"stream\" is declared as OS_stream_internal_record_t *stream but the function only reads fields (e.g. switch (stream->socket_type) and later reads stream->socket_domain) and does not modify the pointed-to object. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible. Thus \"stream\" should be declared as const OS_stream_internal_record_t *stream (and OS_OBJECT_TABLE_GET usage adjusted if needed) to avoid the violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1283.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe/helper functions for logging. These are intentionally lightweight\n * and should not alter the original control flow or logic. */\nstatic void OS_FileOpenCheck_LogEntry(FILE *logf, const char *Filename)\n{\n    if (logf == NULL) return;\n    fprintf(logf, \"OS_FileOpenCheck: entry\\n\");\n    fprintf(logf, \"  Filename pointer=%p\\n\", (const void *)Filename);\n    fprintf(logf, \"  Filename text=\\\"%s\\\"\\n\", (Filename != NULL) ? Filename : \"(null)\");\n}\n\nstatic void OS_FileOpenCheck_LogIter(FILE *logf, unsigned long long token, const void *stream_ptr,\n                                     int socket_domain, const char *stream_name)\n{\n    if (logf == NULL) return;\n    fprintf(logf, \"  Iter token=%llu stream_ptr=%p\\n\", token, stream_ptr);\n    fprintf(logf, \"    socket_domain=%d\\n\", socket_domain);\n    fprintf(logf, \"    stream_name=\\\"%s\\\"\\n\", (stream_name != NULL) ? stream_name : \"(null)\");\n}\n\nstatic void OS_FileOpenCheck_LogMatch(FILE *logf, unsigned long long token, const char *stream_name)\n{\n    if (logf == NULL) return;\n    fprintf(logf, \"  Match found: token=%llu name=\\\"%s\\\"\\n\", token, (stream_name != NULL) ? stream_name : \"(null)\");\n}\n\nstatic void OS_FileOpenCheck_LogNoMatch(FILE *logf, unsigned long long token, int socket_domain)\n{\n    if (logf == NULL) return;\n    fprintf(logf, \"  No match: token=%llu domain=%d\\n\", token, socket_domain);\n}\n\nstatic void OS_FileOpenCheck_LogExit(FILE *logf, int return_code)\n{\n    if (logf == NULL) return;\n    fprintf(logf, \"OS_FileOpenCheck: exit return_code=%d\\n\", return_code);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    FILE *logf = NULL;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    /* Open log file for append. Best-effort logging; do not affect main logic if open fails. */\n    logf = fopen(\"/tmp/logs/1283.txt\", \"a\");\n    OS_FileOpenCheck_LogEntry(logf, Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log the relevant observed state prior to the comparison */\n        /* Note: cast iter.token to unsigned long long for portable printing */\n        OS_FileOpenCheck_LogIter(logf, (unsigned long long)iter.token, (const void *)stream,\n                                 (int)stream->socket_domain, stream->stream_name);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            OS_FileOpenCheck_LogMatch(logf, (unsigned long long)iter.token, stream->stream_name);\n            return_code = OS_SUCCESS;\n            break;\n        }\n        else\n        {\n            OS_FileOpenCheck_LogNoMatch(logf, (unsigned long long)iter.token, (int)stream->socket_domain);\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_FileOpenCheck_LogExit(logf, (int)return_code);\n\n    if (logf != NULL)\n    {\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}