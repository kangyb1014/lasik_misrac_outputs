{
  "user_message": "An agent A claimed that the following OS_FileOpenCheck code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileOpenCheck.\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In OS_ObjectIdIteratorGetNext the code reads a table entry via record = OS_OBJECT_TABLE_GET(iter->base, iter->token); iter->base is declared as OS_common_record_t * but is only used for read-only access (the routine only reads fields and calls the match callback). The pointer (iter->base) and the returned record could and should be const-qualified (e.g. const OS_common_record_t *base and const OS_common_record_t *record). Also the OS_OBJECT_TABLE_GET macro currently yields a non-const pointer, preventing const propagation. Therefore the use of a non-const pointer where only read access is performed violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_fileopen_log_probe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1283.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging fails, do not change program behavior; silently return */\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Log entry and parameters */\n    if (Filename != NULL)\n    {\n        os_fileopen_log_probe(\"OS_FileOpenCheck: ENTRY Filename=%p \\\"%s\\\"\\n\", (void *)Filename, Filename);\n    }\n    else\n    {\n        os_fileopen_log_probe(\"OS_FileOpenCheck: ENTRY Filename=NULL\\n\");\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n    os_fileopen_log_probe(\"OS_FileOpenCheck: Iterator initialized. iter.token(initial)=%p\\n\", (void *)&iter.token);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* Log that iterator advanced and current token */\n        os_fileopen_log_probe(\"OS_FileOpenCheck: IteratorGetNext -> iter.token=%p\\n\", (void *)&iter.token);\n\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        os_fileopen_log_probe(\"OS_FileOpenCheck: Retrieved stream pointer=%p\\n\", (void *)stream);\n\n        if (stream != NULL)\n        {\n            /* Log stream fields used by this routine */\n            os_fileopen_log_probe(\"OS_FileOpenCheck: stream->socket_domain=%d, stream->stream_name=%p\\n\",\n                                 (int)stream->socket_domain,\n                                 (void *)stream->stream_name);\n\n            if (stream->stream_name != NULL)\n            {\n                /* Avoid passing NULL into strcmp; log comparison components */\n                os_fileopen_log_probe(\"OS_FileOpenCheck: Comparing stream->stream_name=\\\"%s\\\" to Filename=\\\"%s\\\"\\n\",\n                                     stream->stream_name,\n                                     Filename);\n            }\n            else\n            {\n                os_fileopen_log_probe(\"OS_FileOpenCheck: stream->stream_name is NULL\\n\");\n            }\n        }\n        else\n        {\n            os_fileopen_log_probe(\"OS_FileOpenCheck: stream is NULL for token=%p\\n\", (void *)&iter.token);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            os_fileopen_log_probe(\"OS_FileOpenCheck: Match found for token=%p, setting return_code=OS_SUCCESS and breaking\\n\", (void *)&iter.token);\n            return_code = OS_SUCCESS;\n            break;\n        }\n        else\n        {\n            os_fileopen_log_probe(\"OS_FileOpenCheck: No match for token=%p (socket_domain=%d, name_cmp=%d)\\n\",\n                                 (void *)&iter.token,\n                                 (int)stream->socket_domain,\n                                 (int)(stream->stream_name ? (strcmp(stream->stream_name, Filename) == 0) : 0));\n        }\n    }\n\n    os_fileopen_log_probe(\"OS_FileOpenCheck: Iterator finished, destroying iterator\\n\");\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    os_fileopen_log_probe(\"OS_FileOpenCheck: EXIT return_code=%d\\n\", (int)return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_FileOpenCheck. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 8.13 advises that pointers used only for read-only access should point to const-qualified types. In OS_FileOpenCheck the pointer \"stream\" is declared as OS_stream_internal_record_t * but is only read (socket_domain and stream_name) \u2014 it could and should be declared const OS_stream_internal_record_t *stream. The agent also calls out OS_object_iter_t::base (and the record local in the iterator implementation) being declared non-const while only used for reads; that likewise prevents propagation of const-qualification. The OS_OBJECT_TABLE_GET macro yielding a non-const pointer further prevents const propagation; however this does not excuse the local code: assigning the macro result to a const-qualified pointer is allowed and would satisfy the rule for this function. The empty test log does not affect the static-typing issue. Therefore the agent's report that the code violates MISRA C 2023 Rule 8.13 is correct."
}