{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_FileOpenCheck the local variable 'stream' is declared as \"OS_stream_internal_record_t *stream;\" even though it is only used for read-only access (checking stream->socket_domain and calling strcmp on stream->stream_name). It could and should be declared as \"const OS_stream_internal_record_t *stream\" to express immutability and satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1283.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <time.h>\n\n/* Probe helper: append a single-line log entry to /tmp/logs/1283.txt. */\nstatic void OSAL_Probe_LogStreamState(const void *stream_ptr, int socket_domain, const char *stream_name, const char *filename, int strcmp_result, int match_found, int token)\n{\n    FILE *f = fopen(\"/tmp/logs/1283.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        struct tm tm_buf;\n        (void)localtime_r(&t, &tm_buf);\n\n        /* Log: timestamp, token, pointer value, socket_domain, stream_name, strcmp result, match flag, filename */\n        fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d | token=%d | stream=%p | socket_domain=%d | stream_name=\\\"%s\\\" | strcmp=%d | match=%d | Filename=\\\"%s\\\"\\n\",\n                tm_buf.tm_year + 1900,\n                tm_buf.tm_mon + 1,\n                tm_buf.tm_mday,\n                tm_buf.tm_hour,\n                tm_buf.tm_min,\n                tm_buf.tm_sec,\n                token,\n                stream_ptr,\n                socket_domain,\n                (stream_name != NULL) ? stream_name : \"(null)\",\n                strcmp_result,\n                match_found,\n                (filename != NULL) ? filename : \"(null)\");\n        fclose(f);\n    }\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Probe: log the state before the comparison so callers can reproduce and inspect the flow */\n        /* Compute strcmp result for logging without changing behavior (strcmp will be called again in the condition) */\n        int strcmp_result = -1;\n        if (stream != NULL && stream->stream_name != NULL && Filename != NULL)\n        {\n            strcmp_result = strcmp(stream->stream_name, Filename);\n        }\n\n        OSAL_Probe_LogStreamState((const void *)stream,\n                                  (stream != NULL) ? (int)stream->socket_domain : -1,\n                                  (stream != NULL) ? stream->stream_name : NULL,\n                                  Filename,\n                                  strcmp_result,\n                                  0,\n                                  iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* Log the matching event with match flag set */\n            OSAL_Probe_LogStreamState((const void *)stream,\n                                      (int)stream->socket_domain,\n                                      stream->stream_name,\n                                      Filename,\n                                      0,\n                                      1,\n                                      iter.token);\n\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n"
}