{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator field iter->arg is declared as void * (non-const) but is passed as a read-only parameter to the match callback (iter->match(iter->arg, &iter->token, record)). If the match callback does not modify the argument (i.e. it should accept a const void *), then iter->arg should be const-qualified (const void *), and the OS_ObjectMatchFunc_t prototype adjusted accordingly. As written this use of a non-const pointer for a likely read-only parameter violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1283.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe function to log control flow and state to /tmp/logs/1283.txt */\nstatic void OS_FileOpenCheck_log_probe(const char *Filename, const OS_object_iter_t *iter, OS_stream_internal_record_t *stream, int strcmp_result, int32 return_code, const char *stage)\n{\n    FILE *fp = fopen(\"/tmp/logs/1283.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Log the stage of the function, filename, iterator token and arg, stream info, compare result and return code */\n        fprintf(fp, \"Stage: %s\\n\", stage);\n        if (Filename != NULL)\n        {\n            fprintf(fp, \"  Filename: '%s'\\n\", Filename);\n        }\n        else\n        {\n            fprintf(fp, \"  Filename: (NULL)\\n\");\n        }\n\n        if (iter != NULL)\n        {\n            /* Print iterator token and argument pointer (arg may be used elsewhere as read-only) */\n            fprintf(fp, \"  Iterator token: %u\\n\", (unsigned int)iter->token);\n            fprintf(fp, \"  Iterator arg pointer: %p\\n\", (const void *)iter->arg);\n        }\n        else\n        {\n            fprintf(fp, \"  Iterator: (NULL)\\n\");\n        }\n\n        if (stream != NULL)\n        {\n            fprintf(fp, \"  Stream pointer: %p\\n\", (const void *)stream);\n            fprintf(fp, \"  Stream socket_domain: %d\\n\", (int)stream->socket_domain);\n            if (stream->stream_name != NULL)\n            {\n                fprintf(fp, \"  Stream name: '%s'\\n\", stream->stream_name);\n            }\n            else\n            {\n                fprintf(fp, \"  Stream name: (NULL)\\n\");\n            }\n        }\n        else\n        {\n            fprintf(fp, \"  Stream: (NULL)\\n\");\n        }\n\n        fprintf(fp, \"  strcmp result: %d\\n\", strcmp_result);\n        fprintf(fp, \"  return_code (so far): %d\\n\", (int)return_code);\n        fprintf(fp, \"----------------------------\\n\");\n        fclose(fp);\n    }\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    /* Log entry */\n    OS_FileOpenCheck_log_probe(Filename, (const OS_object_iter_t *)NULL, (OS_stream_internal_record_t *)NULL, 0, return_code, \"entry\");\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    /* Log after iterator activated */\n    OS_FileOpenCheck_log_probe(Filename, &iter, (OS_stream_internal_record_t *)NULL, 0, return_code, \"after_iterate_active\");\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Compute compare result for logging without changing original logic */\n        int cmp = -1;\n        if (stream != NULL && stream->stream_name != NULL && Filename != NULL)\n        {\n            cmp = strcmp(stream->stream_name, Filename);\n        }\n\n        /* Log current iteration state */\n        OS_FileOpenCheck_log_probe(Filename, &iter, stream, cmp, return_code, \"in_loop_before_check\");\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (cmp == 0))\n        {\n            return_code = OS_SUCCESS;\n\n            /* Log the matching event and state */\n            OS_FileOpenCheck_log_probe(Filename, &iter, stream, cmp, return_code, \"match_found_breaking\");\n            break;\n        }\n        else\n        {\n            /* Log non-matching iteration */\n            OS_FileOpenCheck_log_probe(Filename, &iter, stream, cmp, return_code, \"in_loop_no_match\");\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    /* Log exit */\n    OS_FileOpenCheck_log_probe(Filename, &iter, (OS_stream_internal_record_t *)NULL, 0, return_code, \"exit\");\n\n    return return_code;\n}\n"
}