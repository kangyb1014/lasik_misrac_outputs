{
  "user_message": "An agent A claimed that the following OS_FileOpenCheck code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileOpenCheck.\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In OS_FileOpenCheck the local variable 'stream' is declared as OS_stream_internal_record_t *stream but is only read (e.g. used in 'switch (stream->socket_domain)' and strcmp(stream->stream_name, Filename)). Since the object is not modified in this function the pointer should be to a const-qualified type (const OS_stream_internal_record_t *). Therefore Rule 8.13 is violated.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_FileOpenCheck_Log(const char *msg)\n{\n    FILE *fp = fopen(\"/tmp/logs/1283.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    fputs(msg, fp);\n    fputc('\\n', fp);\n    fclose(fp);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    /* Log entry and parameter state */\n    {\n        char buf[256];\n        snprintf(buf, sizeof(buf), \"OS_FileOpenCheck ENTRY: Filename=%p (%s)\", (const void *)Filename, (Filename ? Filename : \"<NULL>\"));\n        OS_FileOpenCheck_Log(buf);\n    }\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    /* Iterate through stream objects and log each inspected stream */\n    int loop_count = 0;\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        loop_count++;\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log the inspected stream state */\n        {\n            char buf[512];\n            const char *sname = \"<NULL>\";\n            if (stream && stream->stream_name)\n            {\n                sname = stream->stream_name;\n            }\n\n            /* Cast socket_domain to int for logging to avoid depending on enum type */\n            snprintf(buf, sizeof(buf),\n                     \"OS_FileOpenCheck ITER %d: stream=%p, socket_domain=%d, stream_name=%s\",\n                     loop_count, (void *)stream, (int)(stream ? stream->socket_domain : -1), sname);\n            OS_FileOpenCheck_Log(buf);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* Log the match that demonstrates the pointer was only read */\n            {\n                char buf[256];\n                snprintf(buf, sizeof(buf), \"OS_FileOpenCheck MATCH: stream=%p matched Filename=%s\", (void *)stream, Filename);\n                OS_FileOpenCheck_Log(buf);\n            }\n\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    /* Log exit and return code */\n    {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"OS_FileOpenCheck EXIT: return_code=%d, iterations=%d\", return_code, loop_count);\n        OS_FileOpenCheck_Log(buf);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_FileOpenCheck. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In OS_FileOpenCheck the local variable stream is only used for reads (accessing stream->socket_domain and stream->stream_name, passing the latter to strcmp), and the function does not modify the pointed-at object. MISRA C 2023 Rule 8.13 recommends that a pointer should point to a const-qualified type whenever possible; therefore the local declaration should be changed to const OS_stream_internal_record_t *stream. Assigning the non-const result of OS_OBJECT_TABLE_GET to a const-qualified pointer is allowed by C and would satisfy the guideline. The empty test log does not affect the rule assessment \u2014 it only indicates the function may not have been exercised. One caveat: if OS_OBJECT_TABLE_GET or other code requires a non-const pointer (e.g. later writes through stream or other APIs expect a non-const), then const cannot be used; absent such constraints, the report is correct."
}