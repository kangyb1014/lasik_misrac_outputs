{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call to strcmp(stream->stream_name, Filename) can read past the end of either string because there is no guarantee here that both operands are NUL-terminated within their object bounds. For example, if the caller passes a non-terminated buffer (e.g. char buf[4] filled via strncpy without a terminating '\\0') as Filename, strcmp will read beyond buf and access out-of-bounds memory. Similarly, if a stream table entry were populated via a byte-copy that did not ensure a terminating '\\0' (or filled completely to OS_MAX_PATH_LEN with no terminator), strcmp could read past stream->stream_name. Therefore Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1287.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logger: Append diagnostics to /tmp/logs/1287.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1287.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Log entry and parameter pointer for diagnostics */\n    probe_log(\"OS_FileOpenCheck ENTRY: Filename=%p\", (const void *)Filename);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log iterator and stream pointers and socket domain */\n        probe_log(\"ITER token=%lu stream_ptr=%p stream_name_ptr=%p socket_domain=%d\",\n                  (unsigned long)iter.token,\n                  (const void *)stream,\n                  (const void *)stream->stream_name,\n                  (int)stream->socket_domain);\n\n        /* Log that a strcmp is about to happen so callers can see the involved addresses\n         * (Do not attempt to read beyond the pointers here; only record addresses.) */\n        probe_log(\"BEFORE strcmp: stream->stream_name=%p Filename=%p\",\n                  (const void *)stream->stream_name,\n                  (const void *)Filename);\n\n        int cmp_result = strcmp(stream->stream_name, Filename);\n\n        /* Log the result of strcmp so the control decision can be traced */\n        probe_log(\"AFTER strcmp: result=%d (0 means equal)\", cmp_result);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (cmp_result == 0))\n        {\n            probe_log(\"MATCH found: token=%lu stream=%p\", (unsigned long)iter.token, (const void *)stream);\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    probe_log(\"OS_FileOpenCheck EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}