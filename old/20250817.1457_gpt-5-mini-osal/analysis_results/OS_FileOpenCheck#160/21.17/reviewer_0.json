{
  "user_message": "An agent A claimed that the following OS_FileOpenCheck code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileOpenCheck.\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Yes. The call to strcmp(stream->stream_name, Filename) can read past the end of either string because there is no guarantee here that both operands are NUL-terminated within their object bounds. For example, if the caller passes a non-terminated buffer (e.g. char buf[4] filled via strncpy without a terminating '\\0') as Filename, strcmp will read beyond buf and access out-of-bounds memory. Similarly, if a stream table entry were populated via a byte-copy that did not ensure a terminating '\\0' (or filled completely to OS_MAX_PATH_LEN with no terminator), strcmp could read past stream->stream_name. Therefore Rule 21.17 is violated.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1287.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Log entry and parameter pointer for diagnostics */\n    probe_log(\"OS_FileOpenCheck ENTRY: Filename=%p\", (const void *)Filename);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log iterator and stream pointers and socket domain */\n        probe_log(\"ITER token=%p stream_ptr=%p stream_name_ptr=%p socket_domain=%d\",\n                  (const void *)&iter.token,\n                  (const void *)stream,\n                  (const void *)stream->stream_name,\n                  (int)stream->socket_domain);\n\n        /* Log that a strcmp is about to happen so callers can see the involved addresses\n         * (Do not attempt to read beyond the pointers here; only record addresses.) */\n        probe_log(\"BEFORE strcmp: stream->stream_name=%p Filename=%p\",\n                  (const void *)stream->stream_name,\n                  (const void *)Filename);\n\n        int cmp_result = strcmp(stream->stream_name, Filename);\n\n        /* Log the result of strcmp so the control decision can be traced */\n        probe_log(\"AFTER strcmp: result=%d (0 means equal)\", cmp_result);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (cmp_result == 0))\n        {\n            probe_log(\"MATCH found: token=%p stream=%p\", (const void *)&iter.token, (const void *)stream);\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    probe_log(\"OS_FileOpenCheck EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_FileOpenCheck. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The agent A's report is correct. strcmp reads characters until a NUL terminator and therefore can access beyond the object bounds if either operand is not NUL-terminated within its allocated storage. In the shown function only a non-NULL check is performed on Filename (OS_CHECK_POINTER) and there is no local check that stream->stream_name or Filename are NUL-terminated or bounded. Unless there is an external, provable invariant (not shown) that both stream->stream_name and Filename are always NUL-terminated within their object bounds, this use of strcmp potentially results in out-of-bounds accesses and thus violates MISRA C 2023 Rule 21.17. Remedies include ensuring NUL-termination when strings are created, or using bounded operations (e.g. strncmp with known maximum lengths or checking with strnlen/memchr) before calling strcmp."
}