{
  "user_message": "An agent A claimed that the following OS_FileOpenCheck code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileOpenCheck.\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Potential buffer overrun / unterminated string leading to out-of-bounds access in later strcmp: OS_OBJECT_INIT(token, stream, stream_name, path) must copy the path into stream->stream_name (char[OS_MAX_PATH_LEN]). The macro definition is not provided; if it uses an unbounded copy (e.g. strcpy or memcpy without size check) the copy can overflow stream_name. Even if it uses strncpy(stream->stream_name, path, sizeof(stream->stream_name)) but does not explicitly NUL-terminate when path length >= sizeof(stream->stream_name), stream->stream_name may be non-terminated. Later, OS_FileOpenCheck calls strcmp(stream->stream_name, Filename) \u2014 strcmp will read until a NUL byte and can therefore access beyond the bounds of stream_name, violating MISRA C 2023 Rule 21.17. Because the macro behavior and any bounds checks on the source path are not shown, this fragment is considered to potentially violate the rule.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\ntypedef int32_t int32;\ntypedef struct\n{\n    unsigned token; /* iterator token exposed as an unsigned integer */\n    unsigned index;\n    unsigned max;\n} OS_object_iter_t;\ntypedef struct\n{\n    int    socket_domain;\n    char  *stream_name;\n} OS_stream_internal_record_t;\nstatic OS_stream_internal_record_t stream0 = { OS_SocketDomain_INVALID, \"fileA.txt\" };\nstatic OS_stream_internal_record_t stream1 = { 1, \"socketB\" };\nstatic void OS_ObjectIdIterateActive(int local_type, OS_object_iter_t *iter)\n{\n    (void)local_type;\n    iter->token = 0;\n    iter->index = 0;\n    iter->max = OS_STREAM_TABLE_SIZE;\n}\nstatic int OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    if (iter->index < iter->max)\n    {\n        iter->token = iter->index;\n        iter->index++;\n        return 1;\n    }\n    return 0;\n}\nstatic void OS_ObjectIdIteratorDestroy(OS_object_iter_t *iter)\n{\n    (void)iter; /* nothing to do for this minimal implementation */\n}\nstatic void OS_FileOpenCheck_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1287.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    if (Filename == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    /* Log entry and Filename pointer (do not print contents to avoid extra reads) */\n    OS_FileOpenCheck_Log(\"OS_FileOpenCheck ENTER: Filename=%p\", (const void *)Filename);\n\n    return_code = OS_ERROR;\n\n    /* Start iteration over active objects */\n    OS_ObjectIdIterateActive(0, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_stream_table[iter.token];\n\n        /* Log iterator token and stream pointer and domain value */\n        OS_FileOpenCheck_Log(\n            \"ITER token=%u stream=%p socket_domain=%d stream_name_ptr=%p\",\n            (unsigned)iter.token,\n            (const void *)stream,\n            (int)stream->socket_domain,\n            (const void *)stream->stream_name);\n\n        /* Preserve original short-circuit logic: check domain first */\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Log that we are about to call strcmp (this replicates the original behavior)\n             * Do not attempt to print stream->stream_name contents here to avoid additional\n             * out-of-bounds reads beyond what the original code would do. */\n            OS_FileOpenCheck_Log(\"About to strcmp(stream->stream_name, Filename) for token=%u\", (unsigned)iter.token);\n\n            int cmp = strcmp(stream->stream_name, Filename);\n\n            OS_FileOpenCheck_Log(\"strcmp result for token=%u: %d\", (unsigned)iter.token, cmp);\n\n            if (cmp == 0)\n            {\n                OS_FileOpenCheck_Log(\"Match found for token=%u -> returning OS_SUCCESS\", (unsigned)iter.token);\n                return_code = OS_SUCCESS;\n                break;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_FileOpenCheck_Log(\"OS_FileOpenCheck EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The agent A report is correct. MISRA C:2023 Rule 21.17 forbids calling string.h functions in a way that can access beyond the bounds of the referenced objects. In the shown fragment strcmp(stream->stream_name, Filename) is called after only a NULL check on Filename; there is no visible guarantee in this snippet that stream->stream_name (or Filename) is NUL-terminated and sized so that strcmp cannot run past the object boundary. Agent A\u2019s scenario (that the initialization macro might copy a path without size-limiting or without ensuring a terminating NUL) is a realistic cause for out-of-bounds reads by strcmp. Therefore, unless there is a separate, provable invariant elsewhere in the codebase that always ensures both operands are proper NUL-terminated buffers within bounds, this usage is a potential violation of MISRA Rule 21.17. Recommended fixes: ensure stream->stream_name is always NUL-terminated (e.g. copy with bounded functions and explicitly set the last byte to '\\0'), or use a length-limited comparison (e.g. strncmp with the known buffer size) with careful handling to avoid reading past the buffers."
}