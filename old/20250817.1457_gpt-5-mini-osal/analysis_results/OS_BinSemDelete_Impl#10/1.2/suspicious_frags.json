{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_BinSemDelete_Impl:\n```c\nint32 OS_BinSemDelete_Impl(const OS_object_token_t *token)\n{\n    OS_impl_binsem_internal_record_t *sem;\n    int32                             return_code;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    if (pthread_cond_destroy(&(sem->cv)) != 0)\n    {\n        /* sem could be busy, i.e. some task is pending on it already.\n         * that means it cannot be deleted at this time. */\n        return_code = OS_SEM_FAILURE;\n    }\n    else\n    {\n        /* Now that the CV is destroyed this sem is unusable,\n         * so we must do our best to clean everything else.  Even if cleanup\n         * does not fully work, returning anything other than OS_SUCCESS would\n         * suggest to the caller that the sem is still usable which it is not.\n         */\n        return_code = OS_SUCCESS;\n\n        /* destroy the associated mutex --\n         * Note that this might fail if the mutex is locked,\n         * but there is no sane way to recover from that (see above). */\n        pthread_mutex_destroy(&(sem->id));\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_BinSemDelete_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_binsem_internal_record_t OS_impl_bin_sem_table[OS_MAX_BIN_SEMAPHORES]\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    pthread_mutex_t       id;\n    pthread_cond_t        cv;\n    volatile sig_atomic_t flush_request;\n    volatile sig_atomic_t current_value;\n} OS_impl_binsem_internal_record_t\n...\ntypedef int32_t   int32\n...\n#define OS_SEM_FAILURE (-6)\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no usages of compiler language extensions in the provided code. Specifically:\n- There are no GCC/MSVC/Clang extension tokens such as __attribute__, __declspec, __asm, __extension__, typeof, statement-expressions ({ ... }), or nested functions.\n- No inline assembly or compiler intrinsics are present.\n- The macro OS_OBJECT_TABLE_GET is a plain preprocessor macro and uses only standard address-of and array indexing operations; its expansion (&tbl[OS_ObjectIndexFromToken(&(tok))]) is standard C (the invocation OS_OBJECT_TABLE_GET(..., *token) results in a valid &(*token) expression).\n- The type definitions (int32 as int32_t), use of volatile sig_atomic_t, and the struct with pthread_mutex_t/pthread_cond_t are standard C types or POSIX library types, not compiler language extensions. Use of POSIX pthread APIs is a platform/library facility, not a compiler language extension as required by MISRA C:2012 Rule 1.2 reporting (the rule concerns language/compiler extensions explicitly documented by the compiler).\n- No nonstandard storage-class specifiers, nonstandard keywords, or other implementation-specific language features are present.\n\nIf your compliance interpretation treats POSIX APIs or particular platform headers as disallowed language extensions for your toolchain, indicate which compiler/platform and its extension list; otherwise, based on the code shown there are no fragments that need to be investigated for Rule 1.2."
}