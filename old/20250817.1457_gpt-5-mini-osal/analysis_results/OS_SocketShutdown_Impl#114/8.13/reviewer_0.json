{
  "user_message": "An agent A claimed that the following OS_SocketShutdown_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketShutdown_Impl.\n```c\nint32 OS_SocketShutdown_Impl(const OS_object_token_t *token, OS_SocketShutdownMode_t Mode)\n{\n    OS_impl_file_internal_record_t *conn_impl;\n    int32                           return_code;\n    int                             how;\n\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Note that when called via the shared layer,\n     * the \"Mode\" arg has already been checked/validated. */\n    if (Mode == OS_SocketShutdownMode_SHUT_READ)\n    {\n        how = SHUT_RD;\n    }\n    else if (Mode == OS_SocketShutdownMode_SHUT_WRITE)\n    {\n        how = SHUT_WR;\n    }\n    else\n    {\n        how = SHUT_RDWR;\n    }\n\n    if (shutdown(conn_impl->fd, how) == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local variable conn_impl is declared as OS_impl_file_internal_record_t * but is only used for read access (conn_impl->fd) and is obtained via OS_OBJECT_TABLE_GET. The pointer can and should be to a const-qualified type (const OS_impl_file_internal_record_t *). Therefore the code fragment conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token); violates Rule 8.13. A compliant fix is to declare conn_impl as const OS_impl_file_internal_record_t * (or make OS_OBJECT_TABLE_GET return a pointer-to-const when appropriate).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_SocketShutdown_Log(const OS_object_token_t *token, void *conn_ptr, int fd, OS_SocketShutdownMode_t Mode, int how, int shutdown_ret)\n{\n    FILE *log = fopen(\"/tmp/logs/915.txt\", \"a\");\n    if (log == NULL)\n    {\n        return; /* best-effort logging, do not alter control flow */\n    }\n\n    /* Log token pointer, implementation pointer, fd, Mode, how and shutdown result/errno */\n    fprintf(log, \"OS_SocketShutdown_Impl called\\n\");\n    fprintf(log, \"  token pointer: %p\\n\", (const void *)token);\n    fprintf(log, \"  conn_impl pointer: %p\\n\", conn_ptr);\n\n    if (conn_ptr != NULL)\n    {\n        fprintf(log, \"  conn_impl->fd: %d\\n\", fd);\n    }\n    else\n    {\n        fprintf(log, \"  conn_impl is NULL\\n\");\n    }\n\n    fprintf(log, \"  Mode value: %d\\n\", (int)Mode);\n    fprintf(log, \"  mapped how value: %d\\n\", how);\n    fprintf(log, \"  shutdown returned: %d, errno: %d\\n\", shutdown_ret, errno);\n    fprintf(log, \"----\\n\");\n\n    fclose(log);\n}\n\nint32 OS_SocketShutdown_Impl(const OS_object_token_t *token, OS_SocketShutdownMode_t Mode)\n{\n    OS_impl_file_internal_record_t *conn_impl;\n    int32                           return_code;\n    int                             how;\n\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Note that when called via the shared layer,\n     * the \"Mode\" arg has already been checked/validated. */\n    if (Mode == OS_SocketShutdownMode_SHUT_READ)\n    {\n        how = SHUT_RD;\n    }\n    else if (Mode == OS_SocketShutdownMode_SHUT_WRITE)\n    {\n        how = SHUT_WR;\n    }\n    else\n    {\n        how = SHUT_RDWR;\n    }\n\n    /* Inserted probe: capture state before calling shutdown. */\n    /* Best-effort read of fd for logging; preserve original control flow below. */\n    {\n        int fd_for_log = -1;\n        if (conn_impl != NULL)\n        {\n            fd_for_log = conn_impl->fd; /* read-only access for logging */\n        }\n        /* Call shutdown and capture result for logging. */\n        int shutdown_ret = -1;\n        shutdown_ret = shutdown(conn_impl->fd, how);\n\n        /* Log the control path and state to /tmp/logs/915.txt */\n        OS_SocketShutdown_Log(token, (void *)conn_impl, fd_for_log, Mode, how, shutdown_ret);\n\n        if (shutdown_ret == 0)\n        {\n            return_code = OS_SUCCESS;\n        }\n        else\n        {\n            return_code = OS_ERROR;\n        }\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_SocketShutdown_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In this function conn_impl is only read (conn_impl->fd is accessed) and is not modified; therefore per MISRA C 2023 Rule 8.13 it should be declared to point to a const-qualified type (e.g. const OS_impl_file_internal_record_t *conn_impl). Assigning the result of OS_OBJECT_TABLE_GET (presumably a pointer to a non-const record) to a pointer-to-const is allowed and is the appropriate change for this function. Note: Rule 8.13 is a \u2018\u2018should\u2019\u2019 guideline (advisory), so a documented justification/deviation is acceptable if there is a reason to keep the non-const type. Also be careful not to cast away const elsewhere (the test logging code casts to void*), as that would defeat the benefit of adding the qualifier and may violate other MISRA rules."
}