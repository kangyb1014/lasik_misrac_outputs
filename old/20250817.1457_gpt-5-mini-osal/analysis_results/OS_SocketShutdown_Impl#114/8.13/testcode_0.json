{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable conn_impl is declared as OS_impl_file_internal_record_t * but is only used for read access (conn_impl->fd) and is obtained via OS_OBJECT_TABLE_GET. The pointer can and should be to a const-qualified type (const OS_impl_file_internal_record_t *). Therefore the code fragment conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token); violates Rule 8.13. A compliant fix is to declare conn_impl as const OS_impl_file_internal_record_t * (or make OS_OBJECT_TABLE_GET return a pointer-to-const when appropriate).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketShutdown_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/915.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketShutdown_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketShutdown_Impl:\n```c\nint32 OS_SocketShutdown_Impl(const OS_object_token_t *token, OS_SocketShutdownMode_t Mode)\n{\n    OS_impl_file_internal_record_t *conn_impl;\n    int32                           return_code;\n    int                             how;\n\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Note that when called via the shared layer,\n     * the \"Mode\" arg has already been checked/validated. */\n    if (Mode == OS_SocketShutdownMode_SHUT_READ)\n    {\n        how = SHUT_RD;\n    }\n    else if (Mode == OS_SocketShutdownMode_SHUT_WRITE)\n    {\n        how = SHUT_WR;\n    }\n    else\n    {\n        how = SHUT_RDWR;\n    }\n\n    if (shutdown(conn_impl->fd, how) == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketShutdown_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <sys/socket.h>\n\n/* Probe logging function: append diagnostic information to /tmp/logs/915.txt */\nstatic void OS_SocketShutdown_Log(const OS_object_token_t *token, void *conn_ptr, int fd, OS_SocketShutdownMode_t Mode, int how, int shutdown_ret)\n{\n    FILE *log = fopen(\"/tmp/logs/915.txt\", \"a\");\n    if (log == NULL)\n    {\n        return; /* best-effort logging, do not alter control flow */\n    }\n\n    /* Log token pointer, implementation pointer, fd, Mode, how and shutdown result/errno */\n    fprintf(log, \"OS_SocketShutdown_Impl called\\n\");\n    fprintf(log, \"  token pointer: %p\\n\", (const void *)token);\n    fprintf(log, \"  conn_impl pointer: %p\\n\", conn_ptr);\n\n    if (conn_ptr != NULL)\n    {\n        fprintf(log, \"  conn_impl->fd: %d\\n\", fd);\n    }\n    else\n    {\n        fprintf(log, \"  conn_impl is NULL\\n\");\n    }\n\n    fprintf(log, \"  Mode value: %d\\n\", (int)Mode);\n    fprintf(log, \"  mapped how value: %d\\n\", how);\n    fprintf(log, \"  shutdown returned: %d, errno: %d\\n\", shutdown_ret, errno);\n    fprintf(log, \"----\\n\");\n\n    fclose(log);\n}\n\nint32 OS_SocketShutdown_Impl(const OS_object_token_t *token, OS_SocketShutdownMode_t Mode)\n{\n    OS_impl_file_internal_record_t *conn_impl;\n    int32                           return_code;\n    int                             how;\n\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Note that when called via the shared layer,\n     * the \"Mode\" arg has already been checked/validated. */\n    if (Mode == OS_SocketShutdownMode_SHUT_READ)\n    {\n        how = SHUT_RD;\n    }\n    else if (Mode == OS_SocketShutdownMode_SHUT_WRITE)\n    {\n        how = SHUT_WR;\n    }\n    else\n    {\n        how = SHUT_RDWR;\n    }\n\n    /* Inserted probe: capture state before calling shutdown. */\n    /* Best-effort read of fd for logging; preserve original control flow below. */\n    {\n        int fd_for_log = -1;\n        if (conn_impl != NULL)\n        {\n            fd_for_log = conn_impl->fd; /* read-only access for logging */\n        }\n        /* Call shutdown and capture result for logging. */\n        int shutdown_ret = -1;\n        shutdown_ret = shutdown(conn_impl->fd, how);\n\n        /* Log the control path and state to /tmp/logs/915.txt */\n        OS_SocketShutdown_Log(token, (void *)conn_impl, fd_for_log, Mode, how, shutdown_ret);\n\n        if (shutdown_ret == 0)\n        {\n            return_code = OS_SUCCESS;\n        }\n        else\n        {\n            return_code = OS_ERROR;\n        }\n    }\n\n    return return_code;\n}\n"
}