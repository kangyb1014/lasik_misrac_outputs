{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer conn_impl is declared as a pointer to a non-const OS_impl_file_internal_record_t even though it is only used for read access (conn_impl->fd) in the function. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible \u2014 e.g. const OS_impl_file_internal_record_t *conn_impl \u2014 to prevent accidental modification. Assigning the address returned by OS_OBJECT_TABLE_GET (a pointer to a non-const object) to a pointer-to-const is permitted, so conn_impl can and should be const here.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketShutdown_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/915.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketShutdown_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketShutdown_Impl:\n```c\nint32 OS_SocketShutdown_Impl(const OS_object_token_t *token, OS_SocketShutdownMode_t Mode)\n{\n    OS_impl_file_internal_record_t *conn_impl;\n    int32                           return_code;\n    int                             how;\n\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Note that when called via the shared layer,\n     * the \"Mode\" arg has already been checked/validated. */\n    if (Mode == OS_SocketShutdownMode_SHUT_READ)\n    {\n        how = SHUT_RD;\n    }\n    else if (Mode == OS_SocketShutdownMode_SHUT_WRITE)\n    {\n        how = SHUT_WR;\n    }\n    else\n    {\n        how = SHUT_RDWR;\n    }\n\n    if (shutdown(conn_impl->fd, how) == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketShutdown_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\nstatic void socket_shutdown_log(const void *token_ptr, const void *conn_impl_ptr,\n                                int fd_valid, int fd_val,\n                                int Mode_val, int how, int shutdown_ret,\n                                long return_code, const char *stage)\n{\n    FILE *f = NULL;\n\n    /* Try to ensure the log directory exists; ignore errors other than EEXIST. */\n    if (mkdir(\"/tmp/logs\", 0755) != 0)\n    {\n        if (errno != EEXIST)\n        {\n            /* proceed; fopen will likely fail if directory doesn't exist */\n        }\n    }\n\n    f = fopen(\"/tmp/logs/915.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log the control stage, pointers, Mode/how mapping, fd, shutdown result and return code. */\n        (void)fprintf(f, \"stage=%s token=%p conn_impl=%p fd_valid=%d fd=%d Mode=%d how=%d shutdown_ret=%d return_code=%ld\\n\",\n                      stage,\n                      token_ptr,\n                      conn_impl_ptr,\n                      fd_valid,\n                      fd_val,\n                      Mode_val,\n                      how,\n                      shutdown_ret,\n                      return_code);\n        (void)fclose(f);\n    }\n}\n\nint32 OS_SocketShutdown_Impl(const OS_object_token_t *token, OS_SocketShutdownMode_t Mode)\n{\n    OS_impl_file_internal_record_t *conn_impl;\n    int32                           return_code;\n    int                             how;\n\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Probe: log after fetching the conn_impl pointer and fd (if available) */\n    socket_shutdown_log((const void *)token,\n                        (const void *)conn_impl,\n                        (conn_impl != (OS_impl_file_internal_record_t *)0) ? 1 : 0,\n                        (conn_impl != (OS_impl_file_internal_record_t *)0) ? conn_impl->fd : -1,\n                        (int)Mode,\n                        -1,\n                        -1,\n                        -1L,\n                        \"after_get_conn_impl\");\n\n    /* Note that when called via the shared layer,\n     * the \"Mode\" arg has already been checked/validated. */\n    if (Mode == OS_SocketShutdownMode_SHUT_READ)\n    {\n        how = SHUT_RD;\n    }\n    else if (Mode == OS_SocketShutdownMode_SHUT_WRITE)\n    {\n        how = SHUT_WR;\n    }\n    else\n    {\n        how = SHUT_RDWR;\n    }\n\n    /* Probe: log the Mode -> how mapping */\n    socket_shutdown_log((const void *)token,\n                        (const void *)conn_impl,\n                        (conn_impl != (OS_impl_file_internal_record_t *)0) ? 1 : 0,\n                        (conn_impl != (OS_impl_file_internal_record_t *)0) ? conn_impl->fd : -1,\n                        (int)Mode,\n                        how,\n                        -1,\n                        -1L,\n                        \"after_mode_to_how\");\n\n    if (shutdown(conn_impl->fd, how) == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        return_code = OS_ERROR;\n    }\n\n    /* Probe: log the result of shutdown and the final return code */\n    socket_shutdown_log((const void *)token,\n                        (const void *)conn_impl,\n                        (conn_impl != (OS_impl_file_internal_record_t *)0) ? 1 : 0,\n                        (conn_impl != (OS_impl_file_internal_record_t *)0) ? conn_impl->fd : -1,\n                        (int)Mode,\n                        how,\n                        /* shutdown() result already evaluated above; 0 => success, non-zero => error.\n                           We log 0 for success and -1 for failure here to reflect the observed outcome. */\n                        (return_code == OS_SUCCESS) ? 0 : -1,\n                        (long)return_code,\n                        \"after_shutdown\");\n\n    return return_code;\n}\n"
}