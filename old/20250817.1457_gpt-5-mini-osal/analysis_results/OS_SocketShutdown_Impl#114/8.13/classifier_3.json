{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_SocketShutdown_Impl:\n```c\nint32 OS_SocketShutdown_Impl(const OS_object_token_t *token, OS_SocketShutdownMode_t Mode)\n{\n    OS_impl_file_internal_record_t *conn_impl;\n    int32                           return_code;\n    int                             how;\n\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Note that when called via the shared layer,\n     * the \"Mode\" arg has already been checked/validated. */\n    if (Mode == OS_SocketShutdownMode_SHUT_READ)\n    {\n        how = SHUT_RD;\n    }\n    else if (Mode == OS_SocketShutdownMode_SHUT_WRITE)\n    {\n        how = SHUT_WR;\n    }\n    else\n    {\n        how = SHUT_RDWR;\n    }\n\n    if (shutdown(conn_impl->fd, how) == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else\n    {\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_SocketShutdown_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_impl_file_internal_record_t OS_impl_filehandle_table[OS_MAX_NUM_OPEN_FILES]\n...\ntypedef struct\n{\n    int  fd;\n    bool selectable;\n} OS_impl_file_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ntypedef struct\n{\n    int  fd;\n    bool selectable;\n} OS_impl_file_internal_record_t\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in the typedef itself. The snippet defines a struct type (OS_impl_file_internal_record_t) and contains no pointer declarations; MISRA C 2023 Rule 8.13 concerns pointer types and their const-qualification. A possible rule concern would arise elsewhere if a function takes an OS_impl_file_internal_record_t * but only reads from it (e.g., conn_impl in OS_SocketShutdown_Impl) \u2014 in that case the pointer parameter/variable could be const-qualified (const OS_impl_file_internal_record_t *) to satisfy Rule 8.13, but the struct typedef as shown does not violate the rule."
}