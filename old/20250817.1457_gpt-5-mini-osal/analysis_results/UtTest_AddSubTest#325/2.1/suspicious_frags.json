{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UtTest_AddSubTest:\n```c\nvoid UtTest_AddSubTest(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *GroupName,\n                       const char *TestName)\n{\n    char        CompleteTestName[128];\n    const char *GroupPtr;\n    const char *TestPtr;\n\n    /* Remove any common prefix between the two names.\n     * They are often function names that all start with \"Test_XXX\"\n     * and this repetitive information just becomes clutter.\n     */\n    GroupPtr = GroupName;\n    TestPtr  = TestName;\n    while (*GroupPtr != 0 && *GroupPtr == *TestPtr)\n    {\n        ++GroupPtr;\n        ++TestPtr;\n    }\n\n    /*\n     * Only break at an underscore(_) to avoid weird effects\n     */\n    while (TestPtr > TestName && *TestPtr != '_')\n    {\n        --TestPtr;\n    }\n    if (*TestPtr == '_')\n    {\n        ++TestPtr;\n    }\n\n    /*\n     * Remove a remaining \"Test_\" prefix on the group name.\n     * Again just to remove common repetitive content\n     */\n    GroupPtr = GroupName;\n    if (strncmp(GroupPtr, \"Test_\", 5) == 0)\n    {\n        GroupPtr += 5;\n    }\n\n    (void)snprintf(CompleteTestName, sizeof(CompleteTestName), \"%s.%s\", GroupPtr, TestPtr);\n\n    UtTest_AddCommon(Test, Setup, Teardown, CompleteTestName, UTASSERT_GROUP_TEST);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function UtTest_AddSubTest:\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    UT_BSP_Lock();\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n    UT_BSP_Unlock();\n}\n...\nvoid UT_BSP_Lock(void)\n{\n    OS_BSP_Lock_Impl();\n}\n...\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    if (TagHead != NULL)\n    {\n        NewNode      = UtList_NewNode(Data, DataSize);\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n}\n...\nvoid UT_BSP_Unlock(void)\n{\n    OS_BSP_Unlock_Impl();\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I inspected the provided functions and could not find any code that is provably unreachable (dead) within the supplied fragments. Rationale by fragment:\n\n- UtTest_AddSubTest: control flow proceeds sequentially through the two while loops, the if that advances TestPtr past an underscore (when present), the check for a \"Test_\" prefix on GroupPtr, the snprintf call and the final call to UtTest_AddCommon. There are no unconditional returns, breaks, infinite loops, or compile-time-constant conditions that would make any statement unreachable. All conditional branches (the two while loops and the if) can be either taken or not taken depending on the input strings, so none are dead code.\n\n- UtTest_AddCommon: the function initializes a local structure, conditionally copies TestName only if TestName != NULL (this condition is reachable because other callers may pass NULL), then locks, calls UtList_Add and unlocks. There is no code following an unconditional jump or infinite loop; both the True and the implicit False paths of the TestName NULL check are reachable in general (even if the shown caller always supplies a non-NULL name, that does not make the check unreachable globally).\n\n- UT_BSP_Lock / UT_BSP_Unlock: these wrapper calls simply forward to OS_BSP_*_Impl functions; there is no unreachable code in the provided wrappers.\n\n- UtList_Add: the function first obtains TagHead and only performs insertion if TagHead != NULL. Both the branch taken and not taken are reachable in normal usage (TagHead may or may not exist depending on list state), so the body is not dead code. Note: while there are potential runtime issues (e.g., no null-check after UtList_NewNode), those are not instances of unreachable code.\n\nGiven these points, there are no code fragments in the supplied code that are clearly unreachable and thus requiring investigation under MISRA C 2023 Rule 2.1. If you can provide other translation units or callers (especially definitions of UtList_GetHead, UtList_NewNode, or other callers of UtTest_AddCommon) I can re-evaluate for unreachable code that might arise across compilation units."
}