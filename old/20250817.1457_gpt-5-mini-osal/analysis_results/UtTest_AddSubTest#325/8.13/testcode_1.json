{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nUtList_Add and likely UtList_NewNode take a void *Data parameter (non-const). In UtTest_AddCommon a pointer to an existing data object (&UtTestDataBaseEntry) is passed through UtList_Add to UtList_NewNode which presumably copies the data and does not modify the source. The pointer should therefore be declared as pointing to const (const void *) so callers and implementers know the pointed-to object is not modified. Because the parameter is not const-qualified, Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_AddSubTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2603.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_AddSubTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_AddSubTest:\n```c\nvoid UtTest_AddSubTest(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *GroupName,\n                       const char *TestName)\n{\n    char        CompleteTestName[128];\n    const char *GroupPtr;\n    const char *TestPtr;\n\n    /* Remove any common prefix between the two names.\n     * They are often function names that all start with \"Test_XXX\"\n     * and this repetitive information just becomes clutter.\n     */\n    GroupPtr = GroupName;\n    TestPtr  = TestName;\n    while (*GroupPtr != 0 && *GroupPtr == *TestPtr)\n    {\n        ++GroupPtr;\n        ++TestPtr;\n    }\n\n    /*\n     * Only break at an underscore(_) to avoid weird effects\n     */\n    while (TestPtr > TestName && *TestPtr != '_')\n    {\n        --TestPtr;\n    }\n    if (*TestPtr == '_')\n    {\n        ++TestPtr;\n    }\n\n    /*\n     * Remove a remaining \"Test_\" prefix on the group name.\n     * Again just to remove common repetitive content\n     */\n    GroupPtr = GroupName;\n    if (strncmp(GroupPtr, \"Test_\", 5) == 0)\n    {\n        GroupPtr += 5;\n    }\n\n    (void)snprintf(CompleteTestName, sizeof(CompleteTestName), \"%s.%s\", GroupPtr, TestPtr);\n\n    UtTest_AddCommon(Test, Setup, Teardown, CompleteTestName, UTASSERT_GROUP_TEST);\n}\n```\n</target_code>\nPlease provide the modified UtTest_AddSubTest code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\nstatic void UtTest_LogState(const char *label, const char *GroupName, const char *TestName,\n                            const char *GroupPtr, const char *TestPtr, const char *CompleteTestName)\n{\n    FILE *f = fopen(\"/tmp/logs/2603.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"[%s]\\n\", label ? label : \"(null)\");\n        fprintf(f, \"  GroupName ptr=%p\\n\", (const void *)GroupName);\n        fprintf(f, \"  GroupName val=\\\"%s\\\"\\n\", GroupName ? GroupName : \"(null)\");\n        fprintf(f, \"  TestName  ptr=%p\\n\", (const void *)TestName);\n        fprintf(f, \"  TestName  val=\\\"%s\\\"\\n\", TestName ? TestName : \"(null)\");\n        fprintf(f, \"  GroupPtr  ptr=%p\\n\", (const void *)GroupPtr);\n        fprintf(f, \"  GroupPtr  val=\\\"%s\\\"\\n\", GroupPtr ? GroupPtr : \"(null)\");\n        fprintf(f, \"  TestPtr   ptr=%p\\n\", (const void *)TestPtr);\n        fprintf(f, \"  TestPtr   val=\\\"%s\\\"\\n\", TestPtr ? TestPtr : \"(null)\");\n        fprintf(f, \"  CompleteTestName val=\\\"%s\\\"\\n\", CompleteTestName ? CompleteTestName : \"(null)\");\n        fprintf(f, \"----\\n\");\n        fclose(f);\n    }\n}\n\nvoid UtTest_AddSubTest(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *GroupName,\n                       const char *TestName)\n{\n    char        CompleteTestName[128];\n    const char *GroupPtr;\n    const char *TestPtr;\n\n    /* Initial log: entry values */\n    UtTest_LogState(\"entry\", GroupName, TestName, NULL, NULL, NULL);\n\n    /* Remove any common prefix between the two names.\n     * They are often function names that all start with \"Test_XXX\"\n     * and this repetitive information just becomes clutter.\n     */\n    GroupPtr = GroupName;\n    TestPtr  = TestName;\n    while (*GroupPtr != 0 && *GroupPtr == *TestPtr)\n    {\n        ++GroupPtr;\n        ++TestPtr;\n    }\n\n    /* Log after prefix-skipping loop */\n    UtTest_LogState(\"after_prefix_skip\", GroupName, TestName, GroupPtr, TestPtr, NULL);\n\n    /*\n     * Only break at an underscore(_) to avoid weird effects\n     */\n    while (TestPtr > TestName && *TestPtr != '_')\n    {\n        --TestPtr;\n    }\n    if (*TestPtr == '_')\n    {\n        ++TestPtr;\n    }\n\n    /* Log after underscore-adjustment */\n    UtTest_LogState(\"after_underscore_adjust\", GroupName, TestName, GroupPtr, TestPtr, NULL);\n\n    /*\n     * Remove a remaining \"Test_\" prefix on the group name.\n     * Again just to remove common repetitive content\n     */\n    GroupPtr = GroupName;\n    if (strncmp(GroupPtr, \"Test_\", 5) == 0)\n    {\n        GroupPtr += 5;\n    }\n\n    /* Log after removing \"Test_\" prefix */\n    UtTest_LogState(\"after_remove_Test_prefix\", GroupName, TestName, GroupPtr, TestPtr, NULL);\n\n    (void)snprintf(CompleteTestName, sizeof(CompleteTestName), \"%s.%s\", GroupPtr, TestPtr);\n\n    /* Final log before calling common add function */\n    UtTest_LogState(\"before_UtTest_AddCommon\", GroupName, TestName, GroupPtr, TestPtr, CompleteTestName);\n\n    UtTest_AddCommon(Test, Setup, Teardown, CompleteTestName, UTASSERT_GROUP_TEST);\n}\n"
}