{
  "user_message": "An agent A claimed that the following UtTest_AddSubTest code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of UtTest_AddSubTest.\n```c\nvoid UtTest_AddSubTest(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *GroupName,\n                       const char *TestName)\n{\n    char        CompleteTestName[128];\n    const char *GroupPtr;\n    const char *TestPtr;\n\n    /* Remove any common prefix between the two names.\n     * They are often function names that all start with \"Test_XXX\"\n     * and this repetitive information just becomes clutter.\n     */\n    GroupPtr = GroupName;\n    TestPtr  = TestName;\n    while (*GroupPtr != 0 && *GroupPtr == *TestPtr)\n    {\n        ++GroupPtr;\n        ++TestPtr;\n    }\n\n    /*\n     * Only break at an underscore(_) to avoid weird effects\n     */\n    while (TestPtr > TestName && *TestPtr != '_')\n    {\n        --TestPtr;\n    }\n    if (*TestPtr == '_')\n    {\n        ++TestPtr;\n    }\n\n    /*\n     * Remove a remaining \"Test_\" prefix on the group name.\n     * Again just to remove common repetitive content\n     */\n    GroupPtr = GroupName;\n    if (strncmp(GroupPtr, \"Test_\", 5) == 0)\n    {\n        GroupPtr += 5;\n    }\n\n    (void)snprintf(CompleteTestName, sizeof(CompleteTestName), \"%s.%s\", GroupPtr, TestPtr);\n\n    UtTest_AddCommon(Test, Setup, Teardown, CompleteTestName, UTASSERT_GROUP_TEST);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:UtList_Add and likely UtList_NewNode take a void *Data parameter (non-const). In UtTest_AddCommon a pointer to an existing data object (&UtTestDataBaseEntry) is passed through UtList_Add to UtList_NewNode which presumably copies the data and does not modify the source. The pointer should therefore be declared as pointing to const (const void *) so callers and implementers know the pointed-to object is not modified. Because the parameter is not const-qualified, Rule 8.13 is violated.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void UtTest_LogState(const char *label, const char *GroupName, const char *TestName,\n                            const char *GroupPtr, const char *TestPtr, const char *CompleteTestName)\n{\n    FILE *f = fopen(\"/tmp/logs/2603.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"[%s]\\n\", label ? label : \"(null)\");\n        fprintf(f, \"  GroupName ptr=%p\\n\", (const void *)GroupName);\n        fprintf(f, \"  GroupName val=\\\"%s\\\"\\n\", GroupName ? GroupName : \"(null)\");\n        fprintf(f, \"  TestName  ptr=%p\\n\", (const void *)TestName);\n        fprintf(f, \"  TestName  val=\\\"%s\\\"\\n\", TestName ? TestName : \"(null)\");\n        fprintf(f, \"  GroupPtr  ptr=%p\\n\", (const void *)GroupPtr);\n        fprintf(f, \"  GroupPtr  val=\\\"%s\\\"\\n\", GroupPtr ? GroupPtr : \"(null)\");\n        fprintf(f, \"  TestPtr   ptr=%p\\n\", (const void *)TestPtr);\n        fprintf(f, \"  TestPtr   val=\\\"%s\\\"\\n\", TestPtr ? TestPtr : \"(null)\");\n        fprintf(f, \"  CompleteTestName val=\\\"%s\\\"\\n\", CompleteTestName ? CompleteTestName : \"(null)\");\n        fprintf(f, \"----\\n\");\n        fclose(f);\n    }\n}\n\nvoid UtTest_AddSubTest(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *GroupName,\n                       const char *TestName)\n{\n    char        CompleteTestName[128];\n    const char *GroupPtr;\n    const char *TestPtr;\n\n    /* Initial log: entry values */\n    UtTest_LogState(\"entry\", GroupName, TestName, NULL, NULL, NULL);\n\n    /* Remove any common prefix between the two names.\n     * They are often function names that all start with \"Test_XXX\"\n     * and this repetitive information just becomes clutter.\n     */\n    GroupPtr = GroupName;\n    TestPtr  = TestName;\n    while (*GroupPtr != 0 && *GroupPtr == *TestPtr)\n    {\n        ++GroupPtr;\n        ++TestPtr;\n    }\n\n    /* Log after prefix-skipping loop */\n    UtTest_LogState(\"after_prefix_skip\", GroupName, TestName, GroupPtr, TestPtr, NULL);\n\n    /*\n     * Only break at an underscore(_) to avoid weird effects\n     */\n    while (TestPtr > TestName && *TestPtr != '_')\n    {\n        --TestPtr;\n    }\n    if (*TestPtr == '_')\n    {\n        ++TestPtr;\n    }\n\n    /* Log after underscore-adjustment */\n    UtTest_LogState(\"after_underscore_adjust\", GroupName, TestName, GroupPtr, TestPtr, NULL);\n\n    /*\n     * Remove a remaining \"Test_\" prefix on the group name.\n     * Again just to remove common repetitive content\n     */\n    GroupPtr = GroupName;\n    if (strncmp(GroupPtr, \"Test_\", 5) == 0)\n    {\n        GroupPtr += 5;\n    }\n\n    /* Log after removing \"Test_\" prefix */\n    UtTest_LogState(\"after_remove_Test_prefix\", GroupName, TestName, GroupPtr, TestPtr, NULL);\n\n    (void)snprintf(CompleteTestName, sizeof(CompleteTestName), \"%s.%s\", GroupPtr, TestPtr);\n\n    /* Final log before calling common add function */\n    UtTest_LogState(\"before_UtTest_AddCommon\", GroupName, TestName, GroupPtr, TestPtr, CompleteTestName);\n\n    UtTest_AddCommon(Test, Setup, Teardown, CompleteTestName, UTASSERT_GROUP_TEST);\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for UtTest_AddSubTest. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct for the code shown. UtTest_AddSubTest itself already uses const-qualified pointers for the incoming name strings (const char *GroupName, const char *TestName) and the local pointers GroupPtr and TestPtr are const char *. There is no pointer in this function that should be const-qualified but is not. The scenario that complains about a void * parameter applies to other functions (UtList_Add, UtList_NewNode or possibly UtTest_AddCommon) that are not shown here. If those functions accept a non-const void * but do not modify the pointed-to data, then those functions (their parameter declarations) would be the loci of a Rule 8.13 violation \u2014 not UtTest_AddSubTest. Recommendation: inspect the signatures of UtTest_AddCommon/UtList_Add/UtList_NewNode and change their data parameter to const void * (or otherwise justify the non-const) if they do not modify the source data."
}