{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe 'Data' parameter is declared as void * but the function does not (and should not) modify the pointee; callers (e.g. UtTest_AddCommon passing &UtTestDataBaseEntry) expect UtList_Add to copy the data rather than alter it. Therefore the parameter should be declared as const void *Data (e.g. void UtList_Add(UtListHead_t *ListHead, const void *Data, uint32 DataSize, uint32 Tag)). As written (void *Data) Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_AddSubTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2603.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_AddSubTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_AddSubTest:\n```c\nvoid UtTest_AddSubTest(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *GroupName,\n                       const char *TestName)\n{\n    char        CompleteTestName[128];\n    const char *GroupPtr;\n    const char *TestPtr;\n\n    /* Remove any common prefix between the two names.\n     * They are often function names that all start with \"Test_XXX\"\n     * and this repetitive information just becomes clutter.\n     */\n    GroupPtr = GroupName;\n    TestPtr  = TestName;\n    while (*GroupPtr != 0 && *GroupPtr == *TestPtr)\n    {\n        ++GroupPtr;\n        ++TestPtr;\n    }\n\n    /*\n     * Only break at an underscore(_) to avoid weird effects\n     */\n    while (TestPtr > TestName && *TestPtr != '_')\n    {\n        --TestPtr;\n    }\n    if (*TestPtr == '_')\n    {\n        ++TestPtr;\n    }\n\n    /*\n     * Remove a remaining \"Test_\" prefix on the group name.\n     * Again just to remove common repetitive content\n     */\n    GroupPtr = GroupName;\n    if (strncmp(GroupPtr, \"Test_\", 5) == 0)\n    {\n        GroupPtr += 5;\n    }\n\n    (void)snprintf(CompleteTestName, sizeof(CompleteTestName), \"%s.%s\", GroupPtr, TestPtr);\n\n    UtTest_AddCommon(Test, Setup, Teardown, CompleteTestName, UTASSERT_GROUP_TEST);\n}\n```\n</target_code>\nPlease provide the modified UtTest_AddSubTest code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n\nstatic void UtTest_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2603.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nvoid UtTest_AddSubTest(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *GroupName,\n                       const char *TestName)\n{\n    char        CompleteTestName[128];\n    const char *GroupPtr;\n    const char *TestPtr;\n\n    /* Save originals for logging */\n    const char *OrigGroup = GroupName;\n    const char *OrigTest  = TestName;\n\n    UtTest_LogProbe(\"ENTER UtTest_AddSubTest: GroupName=\\\"%s\\\", TestName=\\\"%s\\\", GroupName_ptr=%p, TestName_ptr=%p\",\n                    GroupName ? GroupName : \"(null)\", TestName ? TestName : \"(null)\", (const void *)GroupName, (const void *)TestName);\n\n    /* Remove any common prefix between the two names.\n     * They are often function names that all start with \"Test_XXX\"\n     * and this repetitive information just becomes clutter.\n     */\n    GroupPtr = GroupName;\n    TestPtr  = TestName;\n    while (*GroupPtr != 0 && *GroupPtr == *TestPtr)\n    {\n        ++GroupPtr;\n        ++TestPtr;\n    }\n\n    /* Log where the common prefix ended */\n    UtTest_LogProbe(\"After common-prefix strip: GroupPtr=%p, TestPtr=%p, prefix_len=%td\",\n                    (const void *)GroupPtr, (const void *)TestPtr, (ptrdiff_t)(GroupPtr - OrigGroup));\n\n    /*\n     * Only break at an underscore(_) to avoid weird effects\n     */\n    while (TestPtr > TestName && *TestPtr != '_')\n    {\n        --TestPtr;\n    }\n\n    UtTest_LogProbe(\"After searching for underscore: TestPtr=%p, char_at_TestPtr='%c', TestPtr_offset=%td\",\n                    (const void *)TestPtr,\n                    (TestPtr && *TestPtr) ? *TestPtr : '\\0',\n                    (ptrdiff_t)(TestPtr - OrigTest));\n\n    if (*TestPtr == '_')\n    {\n        ++TestPtr;\n        UtTest_LogProbe(\"Underscore found and skipped: New TestPtr=%p, New offset=%td\",\n                        (const void *)TestPtr, (ptrdiff_t)(TestPtr - OrigTest));\n    }\n\n    /*\n     * Remove a remaining \"Test_\" prefix on the group name.\n     * Again just to remove common repetitive content\n     */\n    GroupPtr = GroupName;\n    if (strncmp(GroupPtr, \"Test_\", 5) == 0)\n    {\n        GroupPtr += 5;\n        UtTest_LogProbe(\"Removed \\\"Test_\\\" prefix from GroupName: GroupPtr=%p, offset=%td\",\n                        (const void *)GroupPtr, (ptrdiff_t)(GroupPtr - OrigGroup));\n    }\n    else\n    {\n        UtTest_LogProbe(\"No \\\"Test_\\\" prefix on GroupName: GroupPtr=%p, offset=%td\",\n                        (const void *)GroupPtr, (ptrdiff_t)(GroupPtr - OrigGroup));\n    }\n\n    (void)snprintf(CompleteTestName, sizeof(CompleteTestName), \"%s.%s\", GroupPtr, TestPtr);\n\n    UtTest_LogProbe(\"CompleteTestName formed: \\\"%s\\\" (buffer_addr=%p)\", CompleteTestName, (void *)CompleteTestName);\n\n    /* Log the parameters being passed to UtTest_AddCommon for traceability */\n    UtTest_LogProbe(\"Calling UtTest_AddCommon: Test_ptr=%p, Setup_ptr=%p, Teardown_ptr=%p, CompleteTestName=\\\"%s\\\"\",\n                    (void *)Test, (void *)Setup, (void *)Teardown, CompleteTestName);\n\n    UtTest_AddCommon(Test, Setup, Teardown, CompleteTestName, UTASSERT_GROUP_TEST);\n\n    UtTest_LogProbe(\"EXIT UtTest_AddSubTest: CompleteTestName=\\\"%s\\\"\", CompleteTestName);\n}\n"
}