{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe UtList_Add API takes a void *Data parameter but the call passes the address of a local entry (&UtTestDataBaseEntry) which is only read to create a new list node. Because the data is used as an input/source buffer (copied) and is not modified, the pointer parameter should be const-qualified (const void *Data). As written, the pointer is not const-qualified even though it could be, so Rule 8.13 is violated. Change the prototypes (e.g. UtList_Add and UtList_NewNode) to accept const void *Data to fix the violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_AddSubTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2603.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_AddSubTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_AddSubTest:\n```c\nvoid UtTest_AddSubTest(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *GroupName,\n                       const char *TestName)\n{\n    char        CompleteTestName[128];\n    const char *GroupPtr;\n    const char *TestPtr;\n\n    /* Remove any common prefix between the two names.\n     * They are often function names that all start with \"Test_XXX\"\n     * and this repetitive information just becomes clutter.\n     */\n    GroupPtr = GroupName;\n    TestPtr  = TestName;\n    while (*GroupPtr != 0 && *GroupPtr == *TestPtr)\n    {\n        ++GroupPtr;\n        ++TestPtr;\n    }\n\n    /*\n     * Only break at an underscore(_) to avoid weird effects\n     */\n    while (TestPtr > TestName && *TestPtr != '_')\n    {\n        --TestPtr;\n    }\n    if (*TestPtr == '_')\n    {\n        ++TestPtr;\n    }\n\n    /*\n     * Remove a remaining \"Test_\" prefix on the group name.\n     * Again just to remove common repetitive content\n     */\n    GroupPtr = GroupName;\n    if (strncmp(GroupPtr, \"Test_\", 5) == 0)\n    {\n        GroupPtr += 5;\n    }\n\n    (void)snprintf(CompleteTestName, sizeof(CompleteTestName), \"%s.%s\", GroupPtr, TestPtr);\n\n    UtTest_AddCommon(Test, Setup, Teardown, CompleteTestName, UTASSERT_GROUP_TEST);\n}\n```\n</target_code>\nPlease provide the modified UtTest_AddSubTest code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper: appends human-readable traces to /tmp/logs/2603.txt */\nstatic void UtTest_Log(const char *fmt, ...)\n{\n    const char logfile[] = \"/tmp/logs/2603.txt\"; /* const-qualified to avoid accidental modification */\n    va_list ap;\n    FILE *fp = fopen(logfile, \"a\");\n    if (fp == NULL)\n    {\n        return; /* If logging fails, do not affect the tested logic */\n    }\n\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nvoid UtTest_AddSubTest(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *GroupName,\n                       const char *TestName)\n{\n    char        CompleteTestName[128];\n    const char *GroupPtr;\n    const char *TestPtr;\n\n    /* Log entry and input state */\n    UtTest_Log(\"Enter UtTest_AddSubTest: GroupName=\\\"%s\\\", TestName=\\\"%s\\\"\",\n               GroupName ? GroupName : \"(null)\", TestName ? TestName : \"(null)\");\n\n    /* Remove any common prefix between the two names.\n     * They are often function names that all start with \"Test_XXX\"\n     * and this repetitive information just becomes clutter.\n     */\n    GroupPtr = GroupName;\n    TestPtr  = TestName;\n\n    /* Count how many characters are advanced while skipping common prefix */\n    int prefixMatchCount = 0;\n    while (*GroupPtr != 0 && *GroupPtr == *TestPtr)\n    {\n        ++GroupPtr;\n        ++TestPtr;\n        ++prefixMatchCount;\n    }\n    UtTest_Log(\"After common-prefix loop: prefixMatchCount=%d, GroupPtr char=%c (%d), TestPtr char=%c (%d)\",\n               prefixMatchCount,\n               (*GroupPtr != '\\0') ? *GroupPtr : '#', (int)(*GroupPtr),\n               (*TestPtr != '\\0') ? *TestPtr : '#', (int)(*TestPtr));\n\n    /*\n     * Only break at an underscore(_) to avoid weird effects\n     */\n    int backtrackSteps = 0;\n    while (TestPtr > TestName && *TestPtr != '_')\n    {\n        --TestPtr;\n        ++backtrackSteps;\n    }\n    UtTest_Log(\"After backtrack loop: backtrackSteps=%d, TestPtr now points to char=%c (%d), offset=%td\",\n               backtrackSteps,\n               (*TestPtr != '\\0') ? *TestPtr : '#', (int)(*TestPtr),\n               TestPtr - TestName);\n\n    if (*TestPtr == '_')\n    {\n        ++TestPtr;\n        UtTest_Log(\"Underscore found; advanced TestPtr to point to char=%c (%d), offset=%td\",\n                   (*TestPtr != '\\0') ? *TestPtr : '#', (int)(*TestPtr), TestPtr - TestName);\n    }\n\n    /*\n     * Remove a remaining \"Test_\" prefix on the group name.\n     * Again just to remove common repetitive content\n     */\n    GroupPtr = GroupName; /* restore to beginning of GroupName as original logic */\n    UtTest_Log(\"Reset GroupPtr to GroupName start: GroupPtr char=%c (%d)\",\n               (*GroupPtr != '\\0') ? *GroupPtr : '#', (int)(*GroupPtr));\n\n    if (strncmp(GroupPtr, \"Test_\", 5) == 0)\n    {\n        GroupPtr += 5;\n        UtTest_Log(\"Removed leading \\\"Test_\\\" from GroupName; GroupPtr now starts with \\\"%s\\\"\",\n                   GroupPtr ? GroupPtr : \"(null)\");\n    }\n    else\n    {\n        UtTest_Log(\"No leading \\\"Test_\\\" on GroupName\");\n    }\n\n    (void)snprintf(CompleteTestName, sizeof(CompleteTestName), \"%s.%s\", GroupPtr, TestPtr);\n    UtTest_Log(\"CompleteTestName constructed: \\\"%s\\\" (buffer size=%zu)\", CompleteTestName, sizeof(CompleteTestName));\n\n    /* Log which callbacks are non-NULL (do not print function pointer values to avoid portability issues) */\n    UtTest_Log(\"Callbacks state: Test=%s, Setup=%s, Teardown=%s\",\n               (Test != NULL) ? \"present\" : \"NULL\",\n               (Setup != NULL) ? \"present\" : \"NULL\",\n               (Teardown != NULL) ? \"present\" : \"NULL\");\n\n    UtTest_Log(\"Calling UtTest_AddCommon with CompleteTestName=\\\"%s\\\"\", CompleteTestName);\n\n    UtTest_AddCommon(Test, Setup, Teardown, CompleteTestName, UTASSERT_GROUP_TEST);\n\n    UtTest_Log(\"Exit UtTest_AddSubTest for CompleteTestName=\\\"%s\\\"\", CompleteTestName);\n}\n"
}