{
  "user_message": "Target function code is:\n```c\nvoid UtTest_AddSubTest(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *GroupName,\n                       const char *TestName)\n{\n    char        CompleteTestName[128];\n    const char *GroupPtr;\n    const char *TestPtr;\n\n    /* Remove any common prefix between the two names.\n     * They are often function names that all start with \"Test_XXX\"\n     * and this repetitive information just becomes clutter.\n     */\n    GroupPtr = GroupName;\n    TestPtr  = TestName;\n    while (*GroupPtr != 0 && *GroupPtr == *TestPtr)\n    {\n        ++GroupPtr;\n        ++TestPtr;\n    }\n\n    /*\n     * Only break at an underscore(_) to avoid weird effects\n     */\n    while (TestPtr > TestName && *TestPtr != '_')\n    {\n        --TestPtr;\n    }\n    if (*TestPtr == '_')\n    {\n        ++TestPtr;\n    }\n\n    /*\n     * Remove a remaining \"Test_\" prefix on the group name.\n     * Again just to remove common repetitive content\n     */\n    GroupPtr = GroupName;\n    if (strncmp(GroupPtr, \"Test_\", 5) == 0)\n    {\n        GroupPtr += 5;\n    }\n\n    (void)snprintf(CompleteTestName, sizeof(CompleteTestName), \"%s.%s\", GroupPtr, TestPtr);\n\n    UtTest_AddCommon(Test, Setup, Teardown, CompleteTestName, UTASSERT_GROUP_TEST);\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'UtTest_AddSubTest': {'callees': ['UtTest_AddCommon'], 'callers': []}, 'UtTest_AddCommon': {'callees': ['UT_BSP_Lock', 'UtList_Add', 'UT_BSP_Unlock'], 'callers': ['UtTest_Add', 'UtTest_AddSetup', 'UtTest_AddTeardown', 'UtTest_AddSubTest']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "strncmp",
    "snprintf",
    "UtTest_AddCommon",
    "UTASSERT_GROUP_TEST"
  ],
  "explanation": "- strncmp: The function is used to compare GroupName against the literal \"Test_\". To prove the target function does not modify its pointer parameters you must confirm strncmp is the standard function (takes const char *) and is not a macro or local replacement that could alter GroupName/TestName or their pointer variables.  \n- snprintf: Used with GroupPtr/TestPtr as inputs and writes into CompleteTestName. Confirming the standard prototype (inputs are const char * for format/strings) shows it will not modify the pointer parameters or the data they point to. Also ensure it is not a macro that could have side effects on caller variables.  \n- UtTest_AddCommon: The target calls this routine with the function-pointer parameters and the composed string. To be sure the target function does not violate the rule you must inspect UtTest_AddCommon's declaration/definition (or macro) to ensure it is a normal call (parameters passed by value) and that no macro expansion could alter the caller's parameter variables (Test, Setup, Teardown, GroupName, TestName).  \n- UTASSERT_GROUP_TEST: This token is passed as an argument; if it is a macro it could expand into code that affects the caller (rare but possible). Its definition should be checked to ensure it is a simple constant and not a macro that mutates parameter variables."
}