{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_BinSemTimedWait_Impl:\n```c\nint32 OS_BinSemTimedWait_Impl(const OS_object_token_t *token, uint32 msecs)\n{\n    struct timespec ts;\n\n    /*\n     ** Compute an absolute time for the delay\n     */\n    OS_Posix_CompAbsDelayTime(msecs, &ts);\n\n    return (OS_GenericBinSemTake_Impl(token, &ts));\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nOS_Posix_CompAbsDelayTime(msecs, &ts);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: &ts is passed to OS_Posix_CompAbsDelayTime to be populated (the function name and comment indicate it computes and writes an absolute time into ts). Since the callee must modify the struct, the pointer must be to a non-const type, so Rule 8.13 is not violated. (If, contrary to that, the function does not modify ts, then the correct fix would be to declare the parameter as a pointer to const and pass &ts.)"
}