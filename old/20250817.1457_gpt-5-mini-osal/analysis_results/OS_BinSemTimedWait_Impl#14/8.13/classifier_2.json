{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_BinSemTimedWait_Impl:\n```c\nint32 OS_BinSemTimedWait_Impl(const OS_object_token_t *token, uint32 msecs)\n{\n    struct timespec ts;\n\n    /*\n     ** Compute an absolute time for the delay\n     */\n    OS_Posix_CompAbsDelayTime(msecs, &ts);\n\n    return (OS_GenericBinSemTake_Impl(token, &ts));\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn (OS_GenericBinSemTake_Impl(token, &ts));\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The fragment itself does not show a violation. A violation would occur if OS_GenericBinSemTake_Impl is declared/defined as taking a non-const pointer (e.g. int32 OS_GenericBinSemTake_Impl(const OS_object_token_t *token, struct timespec *ts)) but the function does not modify *ts. In that case the parameter should be const struct timespec *ts and Rule 8.13 would be violated by the non-const parameter declaration."
}