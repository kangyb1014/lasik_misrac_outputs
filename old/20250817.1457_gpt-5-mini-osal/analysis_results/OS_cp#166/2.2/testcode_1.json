{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe explicit assignment \"file1 = OS_OBJECT_ID_UNDEFINED;\" is redundant (dead). OS_OpenCreate(&file1, ...) always sets *filedes = OS_OBJECT_ID_UNDEFINED at the start of the function, so the prior assignment is overwritten and removing it would not affect behavior. Therefore this operation constitutes dead code under Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_cp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1330.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_cp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_cp:\n```c\nint32 OS_cp(const char *src, const char *dest)\n{\n    int32     return_code;\n    int32     rd_size;\n    int32     wr_size;\n    int32     wr_total;\n    osal_id_t file1;\n    osal_id_t file2;\n    uint8     copyblock[OS_CP_BLOCK_SIZE];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(src);\n    OS_CHECK_POINTER(dest);\n\n    file1       = OS_OBJECT_ID_UNDEFINED;\n    file2       = OS_OBJECT_ID_UNDEFINED;\n    return_code = OS_OpenCreate(&file1, src, OS_FILE_FLAG_NONE, OS_READ_ONLY);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_OpenCreate(&file2, dest, OS_FILE_FLAG_CREATE | OS_FILE_FLAG_TRUNCATE, OS_WRITE_ONLY);\n    }\n\n    while (return_code == OS_SUCCESS)\n    {\n        rd_size = OS_read(file1, copyblock, sizeof(copyblock));\n        if (rd_size < 0)\n        {\n            return_code = rd_size;\n            break;\n        }\n        if (rd_size == 0)\n        {\n            break;\n        }\n        wr_total = 0;\n        while (wr_total < rd_size)\n        {\n            wr_size = OS_write(file2, &copyblock[wr_total], rd_size - wr_total);\n            if (wr_size < 0)\n            {\n                return_code = wr_size;\n                break;\n            }\n            wr_total += wr_size;\n        }\n    }\n\n    if (OS_ObjectIdDefined(file1))\n    {\n        OS_close(file1);\n    }\n    if (OS_ObjectIdDefined(file2))\n    {\n        OS_close(file2);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_cp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper -- appends messages to the requested logfile. */\nstatic void os_cp_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1330.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_cp(const char *src, const char *dest)\n{\n    int32     return_code;\n    int32     rd_size;\n    int32     wr_size;\n    int32     wr_total;\n    osal_id_t file1;\n    osal_id_t file2;\n    uint8     copyblock[OS_CP_BLOCK_SIZE];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(src);\n    OS_CHECK_POINTER(dest);\n\n    /* Log entry and parameter values */\n    os_cp_log(\"OS_cp ENTRY: src=%p dest=%p\", (const void *)src, (const void *)dest);\n\n    file1       = OS_OBJECT_ID_UNDEFINED;\n    file2       = OS_OBJECT_ID_UNDEFINED;\n\n    /* Log the explicit initializations (this is the operation under investigation) */\n    os_cp_log(\"After explicit init: file1=%lld file2=%lld OS_OBJECT_ID_UNDEFINED=%lld\",\n              (long long)file1, (long long)file2, (long long)OS_OBJECT_ID_UNDEFINED);\n\n    /* Call Open/Create for source */\n    return_code = OS_OpenCreate(&file1, src, OS_FILE_FLAG_NONE, OS_READ_ONLY);\n\n    /* Log result of OpenCreate for source, and current file1 value */\n    os_cp_log(\"After OS_OpenCreate(&file1,...): return_code=%ld file1=%lld\",\n              (long)return_code, (long long)file1);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Call Open/Create for destination */\n        return_code = OS_OpenCreate(&file2, dest, OS_FILE_FLAG_CREATE | OS_FILE_FLAG_TRUNCATE, OS_WRITE_ONLY);\n        /* Log result of OpenCreate for dest, and current file2 value */\n        os_cp_log(\"After OS_OpenCreate(&file2,...): return_code=%ld file2=%lld\",\n                  (long)return_code, (long long)file2);\n    }\n\n    while (return_code == OS_SUCCESS)\n    {\n        rd_size = OS_read(file1, copyblock, sizeof(copyblock));\n        os_cp_log(\"OS_read returned rd_size=%ld\", (long)rd_size);\n\n        if (rd_size < 0)\n        {\n            return_code = rd_size;\n            os_cp_log(\"Read error: setting return_code=%ld\", (long)return_code);\n            break;\n        }\n        if (rd_size == 0)\n        {\n            os_cp_log(\"Reached EOF (rd_size==0)\");\n            break;\n        }\n        wr_total = 0;\n        while (wr_total < rd_size)\n        {\n            wr_size = OS_write(file2, &copyblock[wr_total], rd_size - wr_total);\n            os_cp_log(\"OS_write requested=%ld returned=%ld\", (long)(rd_size - wr_total), (long)wr_size);\n            if (wr_size < 0)\n            {\n                return_code = wr_size;\n                os_cp_log(\"Write error: setting return_code=%ld\", (long)return_code);\n                break;\n            }\n            wr_total += wr_size;\n        }\n    }\n\n    /* Log the state before closing */\n    os_cp_log(\"Before close: file1=%lld file2=%lld\", (long long)file1, (long long)file2);\n\n    if (OS_ObjectIdDefined(file1))\n    {\n        os_cp_log(\"Closing file1=%lld\", (long long)file1);\n        OS_close(file1);\n    }\n    else\n    {\n        os_cp_log(\"file1 not defined, skip close (file1=%lld)\", (long long)file1);\n    }\n    if (OS_ObjectIdDefined(file2))\n    {\n        os_cp_log(\"Closing file2=%lld\", (long long)file2);\n        OS_close(file2);\n    }\n    else\n    {\n        os_cp_log(\"file2 not defined, skip close (file2=%lld)\", (long long)file2);\n    }\n\n    os_cp_log(\"OS_cp EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}