{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPossible violation when dest points to a path string that is longer than OS_MAX_LOCAL_PATH_LEN (or not properly NUL-terminated). OS_OpenCreate calls OS_TranslatePath(path, local_path) where local_path is a fixed-size buffer (char local_path[OS_MAX_LOCAL_PATH_LEN]) but there is no size check on the incoming path in OS_OpenCreate. If OS_TranslatePath (or subsequent OS_FileOpen_Impl) uses string.h functions such as strcpy/strlen/strncpy without enforcing the destination buffer limit, those functions can read or write beyond the bounds of the source or destination objects. Because OS_cp only checks dest for non-NULL (OS_CHECK_POINTER) and does not bound its length, this call can lead to out-of-bounds accesses by string.h routines in the called routines.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_cp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1335.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_cp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_cp:\n```c\nint32 OS_cp(const char *src, const char *dest)\n{\n    int32     return_code;\n    int32     rd_size;\n    int32     wr_size;\n    int32     wr_total;\n    osal_id_t file1;\n    osal_id_t file2;\n    uint8     copyblock[OS_CP_BLOCK_SIZE];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(src);\n    OS_CHECK_POINTER(dest);\n\n    file1       = OS_OBJECT_ID_UNDEFINED;\n    file2       = OS_OBJECT_ID_UNDEFINED;\n    return_code = OS_OpenCreate(&file1, src, OS_FILE_FLAG_NONE, OS_READ_ONLY);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_OpenCreate(&file2, dest, OS_FILE_FLAG_CREATE | OS_FILE_FLAG_TRUNCATE, OS_WRITE_ONLY);\n    }\n\n    while (return_code == OS_SUCCESS)\n    {\n        rd_size = OS_read(file1, copyblock, sizeof(copyblock));\n        if (rd_size < 0)\n        {\n            return_code = rd_size;\n            break;\n        }\n        if (rd_size == 0)\n        {\n            break;\n        }\n        wr_total = 0;\n        while (wr_total < rd_size)\n        {\n            wr_size = OS_write(file2, &copyblock[wr_total], rd_size - wr_total);\n            if (wr_size < 0)\n            {\n                return_code = wr_size;\n                break;\n            }\n            wr_total += wr_size;\n        }\n    }\n\n    if (OS_ObjectIdDefined(file1))\n    {\n        OS_close(file1);\n    }\n    if (OS_ObjectIdDefined(file2))\n    {\n        OS_close(file2);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_cp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logger: append-only to /tmp/logs/1335.txt */\nstatic void os_cp_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1335.txt\", \"a\");\n    if (!f)\n    {\n        return; /* If logging can't be opened, don't affect program flow */\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_cp(const char *src, const char *dest)\n{\n    int32     return_code;\n    int32     rd_size;\n    int32     wr_size;\n    int32     wr_total;\n    osal_id_t file1;\n    osal_id_t file2;\n    uint8     copyblock[OS_CP_BLOCK_SIZE];\n\n    /* Entry log */\n    os_cp_log(\"OS_cp ENTER: src=%p dest=%p\", (const void *)src, (const void *)dest);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(src);\n    os_cp_log(\"OS_cp: src pointer passed OS_CHECK_POINTER: %p\", (const void *)src);\n    OS_CHECK_POINTER(dest);\n    os_cp_log(\"OS_cp: dest pointer passed OS_CHECK_POINTER: %p\", (const void *)dest);\n\n    file1       = OS_OBJECT_ID_UNDEFINED;\n    file2       = OS_OBJECT_ID_UNDEFINED;\n    return_code = OS_OpenCreate(&file1, src, OS_FILE_FLAG_NONE, OS_READ_ONLY);\n    os_cp_log(\"OS_cp: OS_OpenCreate(src) returned %d, file1=%llu\", (int)return_code, (unsigned long long)file1);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_OpenCreate(&file2, dest, OS_FILE_FLAG_CREATE | OS_FILE_FLAG_TRUNCATE, OS_WRITE_ONLY);\n        os_cp_log(\"OS_cp: OS_OpenCreate(dest) returned %d, file2=%llu\", (int)return_code, (unsigned long long)file2);\n    }\n\n    while (return_code == OS_SUCCESS)\n    {\n        rd_size = OS_read(file1, copyblock, sizeof(copyblock));\n        os_cp_log(\"OS_cp: OS_read(file1=%llu, buf, size=%zu) -> rd_size=%d\", (unsigned long long)file1, sizeof(copyblock), (int)rd_size);\n\n        if (rd_size < 0)\n        {\n            return_code = rd_size;\n            os_cp_log(\"OS_cp: read error -> return_code=%d\", (int)return_code);\n            break;\n        }\n        if (rd_size == 0)\n        {\n            os_cp_log(\"OS_cp: read returned 0 (EOF)\");\n            break;\n        }\n        wr_total = 0;\n        while (wr_total < rd_size)\n        {\n            wr_size = OS_write(file2, &copyblock[wr_total], rd_size - wr_total);\n            os_cp_log(\"OS_cp: OS_write(file2=%llu, &copyblock[%d], len=%d) -> wr_size=%d\", (unsigned long long)file2, wr_total, (int)(rd_size - wr_total), (int)wr_size);\n\n            if (wr_size < 0)\n            {\n                return_code = wr_size;\n                os_cp_log(\"OS_cp: write error -> return_code=%d\", (int)return_code);\n                break;\n            }\n            wr_total += wr_size;\n            os_cp_log(\"OS_cp: updated wr_total=%d (rd_size=%d)\", (int)wr_total, (int)rd_size);\n        }\n    }\n\n    if (OS_ObjectIdDefined(file1))\n    {\n        os_cp_log(\"OS_cp: closing file1=%llu\", (unsigned long long)file1);\n        OS_close(file1);\n    }\n    if (OS_ObjectIdDefined(file2))\n    {\n        os_cp_log(\"OS_cp: closing file2=%llu\", (unsigned long long)file2);\n        OS_close(file2);\n    }\n\n    os_cp_log(\"OS_cp EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}