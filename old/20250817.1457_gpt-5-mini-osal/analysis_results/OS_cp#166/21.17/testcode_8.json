{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 potential violation: local_path is a fixed-size buffer (char local_path[OS_MAX_LOCAL_PATH_LEN]) passed to OS_TranslatePath and then to OS_FileOpen_Impl without passing its size. If OS_TranslatePath or OS_FileOpen_Impl use <string.h> functions (e.g. strcpy, strcat, strlen, memcpy) assuming the buffer is large enough or null-terminated, a long input path (longer than OS_MAX_LOCAL_PATH_LEN-1) could cause writes or reads beyond local_path bounds. For example: a very long 'path' causes OS_TranslatePath to copy more bytes into local_path than its capacity (or fail to NUL-terminate); later OS_FileOpen_Impl calls strlen/strcpy/strcat/memcpy on local_path and thus performs out-of-bounds access. Because the buffer length is not communicated/checked, the fragment can lead to a Rule 21.17 violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_cp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1335.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_cp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_cp:\n```c\nint32 OS_cp(const char *src, const char *dest)\n{\n    int32     return_code;\n    int32     rd_size;\n    int32     wr_size;\n    int32     wr_total;\n    osal_id_t file1;\n    osal_id_t file2;\n    uint8     copyblock[OS_CP_BLOCK_SIZE];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(src);\n    OS_CHECK_POINTER(dest);\n\n    file1       = OS_OBJECT_ID_UNDEFINED;\n    file2       = OS_OBJECT_ID_UNDEFINED;\n    return_code = OS_OpenCreate(&file1, src, OS_FILE_FLAG_NONE, OS_READ_ONLY);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_OpenCreate(&file2, dest, OS_FILE_FLAG_CREATE | OS_FILE_FLAG_TRUNCATE, OS_WRITE_ONLY);\n    }\n\n    while (return_code == OS_SUCCESS)\n    {\n        rd_size = OS_read(file1, copyblock, sizeof(copyblock));\n        if (rd_size < 0)\n        {\n            return_code = rd_size;\n            break;\n        }\n        if (rd_size == 0)\n        {\n            break;\n        }\n        wr_total = 0;\n        while (wr_total < rd_size)\n        {\n            wr_size = OS_write(file2, &copyblock[wr_total], rd_size - wr_total);\n            if (wr_size < 0)\n            {\n                return_code = wr_size;\n                break;\n            }\n            wr_total += wr_size;\n        }\n    }\n\n    if (OS_ObjectIdDefined(file1))\n    {\n        OS_close(file1);\n    }\n    if (OS_ObjectIdDefined(file2))\n    {\n        OS_close(file2);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_cp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helpers -- write control flow and state to /tmp/logs/1335.txt */\nstatic void OS_cp_log_raw(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1335.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void OS_cp_log_enter(const char *src, const char *dest)\n{\n    /* Log entry and pointer values only (do not dereference potentially unterminated strings). */\n    OS_cp_log_raw(\"ENTER: OS_cp(src=%p, dest=%p)\", (const void *)src, (const void *)dest);\n    if (src == NULL)\n    {\n        OS_cp_log_raw(\"ENTER: src is NULL\");\n    }\n    else\n    {\n        OS_cp_log_raw(\"ENTER: src pointer non-NULL (content not logged to avoid OOB read)\");\n    }\n    if (dest == NULL)\n    {\n        OS_cp_log_raw(\"ENTER: dest is NULL\");\n    }\n    else\n    {\n        OS_cp_log_raw(\"ENTER: dest pointer non-NULL (content not logged to avoid OOB read)\");\n    }\n}\n\nstatic void OS_cp_log_open_result(int return_code, void *file1, void *file2)\n{\n    OS_cp_log_raw(\"OPEN_RESULT: return_code=%d, file1=%p, file2=%p\", return_code, file1, file2);\n}\n\nstatic void OS_cp_log_read(int file1, int requested, int rd_size)\n{\n    OS_cp_log_raw(\"READ: file1=%d, requested=%d, rd_size=%d\", file1, requested, rd_size);\n}\n\nstatic void OS_cp_log_write_attempt(int file2, int to_write, int wr_size, int wr_total)\n{\n    OS_cp_log_raw(\"WRITE: file2=%d, to_write=%d, wr_size=%d, wr_total=%d\", file2, to_write, wr_size, wr_total);\n}\n\nstatic void OS_cp_log_close_and_return(int32 return_code, osal_id_t file1, osal_id_t file2)\n{\n    OS_cp_log_raw(\"EXIT: return_code=%d, file1=%p, file2=%p\", (int)return_code, (void *)file1, (void *)file2);\n}\n\nint32 OS_cp(const char *src, const char *dest)\n{\n    int32     return_code;\n    int32     rd_size;\n    int32     wr_size;\n    int32     wr_total;\n    osal_id_t file1;\n    osal_id_t file2;\n    uint8     copyblock[OS_CP_BLOCK_SIZE];\n\n    /* Probe log: entry */\n    OS_cp_log_enter(src, dest);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(src);\n    OS_CHECK_POINTER(dest);\n\n    file1       = OS_OBJECT_ID_UNDEFINED;\n    file2       = OS_OBJECT_ID_UNDEFINED;\n    return_code = OS_OpenCreate(&file1, src, OS_FILE_FLAG_NONE, OS_READ_ONLY);\n\n    /* Log result of first open */\n    OS_cp_log_open_result(return_code, (void *)file1, (void *)file2);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_OpenCreate(&file2, dest, OS_FILE_FLAG_CREATE | OS_FILE_FLAG_TRUNCATE, OS_WRITE_ONLY);\n        /* Log result of second open */\n        OS_cp_log_open_result(return_code, (void *)file1, (void *)file2);\n    }\n\n    while (return_code == OS_SUCCESS)\n    {\n        /* Log upcoming read request */\n        OS_cp_log_raw(\"LOOP: preparing to read up to %zu bytes\", sizeof(copyblock));\n\n        rd_size = OS_read(file1, copyblock, sizeof(copyblock));\n\n        /* Log read results */\n        OS_cp_log_read((int)file1, (int)sizeof(copyblock), (int)rd_size);\n\n        if (rd_size < 0)\n        {\n            OS_cp_log_raw(\"ERROR: OS_read returned negative value: %d\", (int)rd_size);\n            return_code = rd_size;\n            break;\n        }\n        if (rd_size == 0)\n        {\n            OS_cp_log_raw(\"INFO: OS_read returned 0 (EOF)\");\n            break;\n        }\n        wr_total = 0;\n        while (wr_total < rd_size)\n        {\n            wr_size = OS_write(file2, &copyblock[wr_total], rd_size - wr_total);\n\n            /* Log each write attempt */\n            OS_cp_log_write_attempt((int)file2, (int)(rd_size - wr_total), (int)wr_size, (int)wr_total);\n\n            if (wr_size < 0)\n            {\n                OS_cp_log_raw(\"ERROR: OS_write returned negative value: %d\", (int)wr_size);\n                return_code = wr_size;\n                break;\n            }\n            wr_total += wr_size;\n        }\n    }\n\n    if (OS_ObjectIdDefined(file1))\n    {\n        OS_cp_log_raw(\"CLOSE: closing file1=%p\", (void *)file1);\n        OS_close(file1);\n    }\n    if (OS_ObjectIdDefined(file2))\n    {\n        OS_cp_log_raw(\"CLOSE: closing file2=%p\", (void *)file2);\n        OS_close(file2);\n    }\n\n    /* Final exit log */\n    OS_cp_log_close_and_return(return_code, file1, file2);\n\n    return return_code;\n}\n"
}