{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_OBJECT_INIT(token, stream, stream_name, path) plausibly copies the caller-supplied path string into the fixed-size member stream->stream_name. The code shows no prior bounding of the original path pointer (path is the user-supplied parameter), and the translation routine writes into local_path but OS_OBJECT_INIT is called with the original path, not local_path. If the macro performs a strcpy/memcpy/strncpy or similar from path into a fixed-size array without ensuring the source length <= destination capacity, this can result in a buffer overflow (access beyond the bounds of stream->stream_name). Therefore Rule 21.17 can be violated in the scenario where path is longer than the destination buffer used by OS_OBJECT_INIT.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_cp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1335.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_cp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_cp:\n```c\nint32 OS_cp(const char *src, const char *dest)\n{\n    int32     return_code;\n    int32     rd_size;\n    int32     wr_size;\n    int32     wr_total;\n    osal_id_t file1;\n    osal_id_t file2;\n    uint8     copyblock[OS_CP_BLOCK_SIZE];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(src);\n    OS_CHECK_POINTER(dest);\n\n    file1       = OS_OBJECT_ID_UNDEFINED;\n    file2       = OS_OBJECT_ID_UNDEFINED;\n    return_code = OS_OpenCreate(&file1, src, OS_FILE_FLAG_NONE, OS_READ_ONLY);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_OpenCreate(&file2, dest, OS_FILE_FLAG_CREATE | OS_FILE_FLAG_TRUNCATE, OS_WRITE_ONLY);\n    }\n\n    while (return_code == OS_SUCCESS)\n    {\n        rd_size = OS_read(file1, copyblock, sizeof(copyblock));\n        if (rd_size < 0)\n        {\n            return_code = rd_size;\n            break;\n        }\n        if (rd_size == 0)\n        {\n            break;\n        }\n        wr_total = 0;\n        while (wr_total < rd_size)\n        {\n            wr_size = OS_write(file2, &copyblock[wr_total], rd_size - wr_total);\n            if (wr_size < 0)\n            {\n                return_code = wr_size;\n                break;\n            }\n            wr_total += wr_size;\n        }\n    }\n\n    if (OS_ObjectIdDefined(file1))\n    {\n        OS_close(file1);\n    }\n    if (OS_ObjectIdDefined(file2))\n    {\n        OS_close(file2);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_cp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helper: appends logs to /tmp/logs/1335.txt */\nstatic void os_cp_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1335.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Safe sample printer: writes a truncated preview of a string to the log. */\nstatic void os_cp_log_string_sample(const char *label, const char *s, size_t max_preview)\n{\n    if (s == NULL)\n    {\n        os_cp_log(\"%s: (NULL)\", label);\n        return;\n    }\n\n    /* Use strnlen to avoid unbounded reads; limit preview size */\n    size_t len = strnlen(s, max_preview + 1);\n    if (len <= max_preview)\n    {\n        os_cp_log(\"%s: len=%zu sample=\\\"%s\\\"\", label, len, s);\n    }\n    else\n    {\n        /* Print truncated preview */\n        char buf[256];\n        size_t show = (max_preview < (sizeof(buf) - 1)) ? max_preview : (sizeof(buf) - 1);\n        memcpy(buf, s, show);\n        buf[show] = '\\0';\n        os_cp_log(\"%s: len>=%zu sample=\\\"%s...\\\"\", label, max_preview + 1, buf);\n    }\n}\n\nint32 OS_cp(const char *src, const char *dest)\n{\n    int32     return_code;\n    int32     rd_size;\n    int32     wr_size;\n    int32     wr_total;\n    osal_id_t file1;\n    osal_id_t file2;\n    uint8     copyblock[OS_CP_BLOCK_SIZE];\n\n    /* Entry log with pointers and short string previews */\n    os_cp_log(\"OS_cp ENTRY: src=%p dest=%p\", (const void *)src, (const void *)dest);\n    os_cp_log_string_sample(\"src\", src, 200);\n    os_cp_log_string_sample(\"dest\", dest, 200);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(src);\n    OS_CHECK_POINTER(dest);\n\n    file1       = OS_OBJECT_ID_UNDEFINED;\n    file2       = OS_OBJECT_ID_UNDEFINED;\n    return_code = OS_OpenCreate(&file1, src, OS_FILE_FLAG_NONE, OS_READ_ONLY);\n    os_cp_log(\"OS_OpenCreate(src) -> return_code=%ld file1=%ld\", (long)return_code, (long)file1);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_OpenCreate(&file2, dest, OS_FILE_FLAG_CREATE | OS_FILE_FLAG_TRUNCATE, OS_WRITE_ONLY);\n        os_cp_log(\"OS_OpenCreate(dest) -> return_code=%ld file2=%ld\", (long)return_code, (long)file2);\n    }\n\n    while (return_code == OS_SUCCESS)\n    {\n        rd_size = OS_read(file1, copyblock, sizeof(copyblock));\n        os_cp_log(\"OS_read -> rd_size=%ld\", (long)rd_size);\n        if (rd_size < 0)\n        {\n            return_code = rd_size;\n            os_cp_log(\"Read error: setting return_code=%ld and breaking\", (long)return_code);\n            break;\n        }\n        if (rd_size == 0)\n        {\n            os_cp_log(\"OS_read returned 0 (EOF)\");\n            break;\n        }\n        wr_total = 0;\n        while (wr_total < rd_size)\n        {\n            wr_size = OS_write(file2, &copyblock[wr_total], rd_size - wr_total);\n            os_cp_log(\"OS_write attempt -> wr_size=%ld (requested=%ld, wr_total_before=%ld)\", (long)wr_size, (long)(rd_size - wr_total), (long)wr_total);\n            if (wr_size < 0)\n            {\n                return_code = wr_size;\n                os_cp_log(\"Write error: setting return_code=%ld and breaking\", (long)return_code);\n                break;\n            }\n            wr_total += wr_size;\n            os_cp_log(\"After write: wr_total=%ld\", (long)wr_total);\n        }\n    }\n\n    if (OS_ObjectIdDefined(file1))\n    {\n        int32 close_rc = OS_close(file1);\n        os_cp_log(\"OS_close(file1=%ld) -> %ld\", (long)file1, (long)close_rc);\n    }\n    if (OS_ObjectIdDefined(file2))\n    {\n        int32 close_rc = OS_close(file2);\n        os_cp_log(\"OS_close(file2=%ld) -> %ld\", (long)file2, (long)close_rc);\n    }\n\n    os_cp_log(\"OS_cp EXIT: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}