{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_OpenCreate forwards the caller-supplied src to OS_TranslatePath which copies/translates into a fixed local_path buffer of size OS_MAX_LOCAL_PATH_LEN but no buffer length is provided. If src points to a path string whose length >= OS_MAX_LOCAL_PATH_LEN, a string handling function used inside OS_TranslatePath (e.g. strcpy/memcpy/strcat) may write beyond local_path (or read/write beyond the src/destination buffers), violating Rule 21.17. The caller only checks src != NULL, not its length, so passing an overly long path demonstrates the violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_cp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1335.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_cp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_cp:\n```c\nint32 OS_cp(const char *src, const char *dest)\n{\n    int32     return_code;\n    int32     rd_size;\n    int32     wr_size;\n    int32     wr_total;\n    osal_id_t file1;\n    osal_id_t file2;\n    uint8     copyblock[OS_CP_BLOCK_SIZE];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(src);\n    OS_CHECK_POINTER(dest);\n\n    file1       = OS_OBJECT_ID_UNDEFINED;\n    file2       = OS_OBJECT_ID_UNDEFINED;\n    return_code = OS_OpenCreate(&file1, src, OS_FILE_FLAG_NONE, OS_READ_ONLY);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_OpenCreate(&file2, dest, OS_FILE_FLAG_CREATE | OS_FILE_FLAG_TRUNCATE, OS_WRITE_ONLY);\n    }\n\n    while (return_code == OS_SUCCESS)\n    {\n        rd_size = OS_read(file1, copyblock, sizeof(copyblock));\n        if (rd_size < 0)\n        {\n            return_code = rd_size;\n            break;\n        }\n        if (rd_size == 0)\n        {\n            break;\n        }\n        wr_total = 0;\n        while (wr_total < rd_size)\n        {\n            wr_size = OS_write(file2, &copyblock[wr_total], rd_size - wr_total);\n            if (wr_size < 0)\n            {\n                return_code = wr_size;\n                break;\n            }\n            wr_total += wr_size;\n        }\n    }\n\n    if (OS_ObjectIdDefined(file1))\n    {\n        OS_close(file1);\n    }\n    if (OS_ObjectIdDefined(file2))\n    {\n        OS_close(file2);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_cp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe helper functions to log control flow and state to /tmp/logs/1335.txt */\nstatic void ensure_log_dir(void)\n{\n    /* Try to create the directory if it does not exist. Ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void log_event(const char *fmt, ...)\n{\n    ensure_log_dir();\n    FILE *f = fopen(\"/tmp/logs/1335.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fflush(f);\n    fclose(f);\n}\n\n/* Safe bounded strlen: does not read beyond 'max' bytes */\nstatic size_t safe_strnlen(const char *s, size_t max)\n{\n    size_t i;\n    if (s == NULL)\n        return 0;\n    for (i = 0; i < max; ++i)\n    {\n        if (s[i] == '\\0')\n            return i;\n    }\n    return max;\n}\n\n/* Log a preview of a string safely (prints printable chars, '.' for others) */\nstatic void log_string_preview(FILE *f, const char *s, size_t maxchars)\n{\n    size_t i;\n    for (i = 0; i < maxchars && s[i] != '\\0'; ++i)\n    {\n        unsigned char c = (unsigned char)s[i];\n        if (c >= 32 && c < 127)\n            fputc(c, f);\n        else\n            fputc('.', f);\n    }\n    if (i == maxchars && s[i] != '\\0')\n    {\n        fputs(\"...\", f);\n    }\n}\n\n/* Modified OS_cp with logging probes. Original logic preserved. */\nint32 OS_cp(const char *src, const char *dest)\n{\n    int32     return_code;\n    int32     rd_size;\n    int32     wr_size;\n    int32     wr_total;\n    osal_id_t file1;\n    osal_id_t file2;\n    uint8     copyblock[OS_CP_BLOCK_SIZE];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(src);\n    OS_CHECK_POINTER(dest);\n\n    /* Log entry and parameter information (safe) */\n    {\n        size_t src_len = safe_strnlen(src, 4096);\n        size_t dest_len = safe_strnlen(dest, 4096);\n        ensure_log_dir();\n        FILE *f = fopen(\"/tmp/logs/1335.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"OS_cp ENTRY: src=%p dest=%p\\n\", (void *)src, (void *)dest);\n            fprintf(f, \"OS_cp PARAMS: src_len=%zu dest_len=%zu\\n\", src_len, dest_len);\n            fprintf(f, \"OS_cp SRC_PREVIEW: '\");\n            log_string_preview(f, src ? src : \"(null)\", 256);\n            fprintf(f, \"'\\n\");\n            fprintf(f, \"OS_cp DEST_PREVIEW: '\");\n            log_string_preview(f, dest ? dest : \"(null)\", 256);\n            fprintf(f, \"'\\n\");\n            fclose(f);\n        }\n    }\n\n    file1       = OS_OBJECT_ID_UNDEFINED;\n    file2       = OS_OBJECT_ID_UNDEFINED;\n    return_code = OS_OpenCreate(&file1, src, OS_FILE_FLAG_NONE, OS_READ_ONLY);\n\n    /* Log result of opening source */\n    log_event(\"OS_cp: OS_OpenCreate(source) returned %d file1=%d\\n\", (int)return_code, (int)file1);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_OpenCreate(&file2, dest, OS_FILE_FLAG_CREATE | OS_FILE_FLAG_TRUNCATE, OS_WRITE_ONLY);\n        log_event(\"OS_cp: OS_OpenCreate(dest) returned %d file2=%d\\n\", (int)return_code, (int)file2);\n    }\n\n    while (return_code == OS_SUCCESS)\n    {\n        rd_size = OS_read(file1, copyblock, sizeof(copyblock));\n        log_event(\"OS_cp: OS_read returned rd_size=%d\\n\", (int)rd_size);\n        if (rd_size < 0)\n        {\n            return_code = rd_size;\n            log_event(\"OS_cp: read error, setting return_code=%d\\n\", (int)return_code);\n            break;\n        }\n        if (rd_size == 0)\n        {\n            log_event(\"OS_cp: reached EOF (rd_size==0)\\n\");\n            break;\n        }\n        wr_total = 0;\n        while (wr_total < rd_size)\n        {\n            wr_size = OS_write(file2, &copyblock[wr_total], rd_size - wr_total);\n            log_event(\"OS_cp: OS_write requested=%d wrote=%d\\n\", (int)(rd_size - wr_total), (int)wr_size);\n            if (wr_size < 0)\n            {\n                return_code = wr_size;\n                log_event(\"OS_cp: write error, setting return_code=%d\\n\", (int)return_code);\n                break;\n            }\n            wr_total += wr_size;\n        }\n    }\n\n    if (OS_ObjectIdDefined(file1))\n    {\n        OS_close(file1);\n        log_event(\"OS_cp: closed file1=%d\\n\", (int)file1);\n    }\n    if (OS_ObjectIdDefined(file2))\n    {\n        OS_close(file2);\n        log_event(\"OS_cp: closed file2=%d\\n\", (int)file2);\n    }\n\n    log_event(\"OS_cp EXIT: return_code=%d\\n\", (int)return_code);\n\n    return return_code;\n}\n"
}