{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a fixed-size local_path buffer (char local_path[OS_MAX_LOCAL_PATH_LEN]) to OS_TranslatePath without supplying its size. If OS_TranslatePath internally uses functions from <string.h> such as strcpy, strcat or memcpy without checking/truncating to OS_MAX_LOCAL_PATH_LEN, a long path string can be copied/concatenated past the end of local_path (e.g. strcpy(local_path, path) when strlen(path) >= OS_MAX_LOCAL_PATH_LEN), causing writes beyond the object bounds and violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_cp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1335.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_cp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_cp:\n```c\nint32 OS_cp(const char *src, const char *dest)\n{\n    int32     return_code;\n    int32     rd_size;\n    int32     wr_size;\n    int32     wr_total;\n    osal_id_t file1;\n    osal_id_t file2;\n    uint8     copyblock[OS_CP_BLOCK_SIZE];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(src);\n    OS_CHECK_POINTER(dest);\n\n    file1       = OS_OBJECT_ID_UNDEFINED;\n    file2       = OS_OBJECT_ID_UNDEFINED;\n    return_code = OS_OpenCreate(&file1, src, OS_FILE_FLAG_NONE, OS_READ_ONLY);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_OpenCreate(&file2, dest, OS_FILE_FLAG_CREATE | OS_FILE_FLAG_TRUNCATE, OS_WRITE_ONLY);\n    }\n\n    while (return_code == OS_SUCCESS)\n    {\n        rd_size = OS_read(file1, copyblock, sizeof(copyblock));\n        if (rd_size < 0)\n        {\n            return_code = rd_size;\n            break;\n        }\n        if (rd_size == 0)\n        {\n            break;\n        }\n        wr_total = 0;\n        while (wr_total < rd_size)\n        {\n            wr_size = OS_write(file2, &copyblock[wr_total], rd_size - wr_total);\n            if (wr_size < 0)\n            {\n                return_code = wr_size;\n                break;\n            }\n            wr_total += wr_size;\n        }\n    }\n\n    if (OS_ObjectIdDefined(file1))\n    {\n        OS_close(file1);\n    }\n    if (OS_ObjectIdDefined(file2))\n    {\n        OS_close(file2);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_cp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe logging helper. Writes a single line with key state info to /tmp/logs/1335.txt.\n   Keeps logging lightweight and avoids reading the contents of src/dest (only logs pointers)\n   to avoid introducing additional out-of-bounds risks. */\nstatic void OSCP_LogState(const char *stage,\n                          const char *src,\n                          const char *dest,\n                          long long file1_id,\n                          long long file2_id,\n                          int rd_size,\n                          int wr_size,\n                          int wr_total,\n                          int return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1335.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log stage, pointer values, file ids (as numeric), sizes and return code */\n    fprintf(f, \"[OS_cp] %s: src=%p dest=%p file1=%lld file2=%lld rd_size=%d wr_size=%d wr_total=%d return=%d\\n\",\n            stage, (void *)src, (void *)dest, file1_id, file2_id, rd_size, wr_size, wr_total, return_code);\n\n    fclose(f);\n}\n\nint32 OS_cp(const char *src, const char *dest)\n{\n    int32     return_code;\n    int32     rd_size;\n    int32     wr_size;\n    int32     wr_total;\n    osal_id_t file1;\n    osal_id_t file2;\n    uint8     copyblock[OS_CP_BLOCK_SIZE];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(src);\n    OS_CHECK_POINTER(dest);\n\n    /* Initial log entry */\n    OSCP_LogState(\"enter\", src, dest, (long long)OS_OBJECT_ID_UNDEFINED, (long long)OS_OBJECT_ID_UNDEFINED, -1, -1, -1, -999);\n\n    file1       = OS_OBJECT_ID_UNDEFINED;\n    file2       = OS_OBJECT_ID_UNDEFINED;\n    return_code = OS_OpenCreate(&file1, src, OS_FILE_FLAG_NONE, OS_READ_ONLY);\n\n    /* Log result of opening source */\n    OSCP_LogState(\"after_open_src\", src, dest, (long long)file1, (long long)file2, -1, -1, -1, (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_OpenCreate(&file2, dest, OS_FILE_FLAG_CREATE | OS_FILE_FLAG_TRUNCATE, OS_WRITE_ONLY);\n        /* Log result of opening/creating dest */\n        OSCP_LogState(\"after_open_dest\", src, dest, (long long)file1, (long long)file2, -1, -1, -1, (int)return_code);\n    }\n\n    while (return_code == OS_SUCCESS)\n    {\n        rd_size = OS_read(file1, copyblock, sizeof(copyblock));\n\n        /* Log read result */\n        OSCP_LogState(\"after_read\", src, dest, (long long)file1, (long long)file2, (int)rd_size, -1, -1, (int)return_code);\n\n        if (rd_size < 0)\n        {\n            return_code = rd_size;\n            OSCP_LogState(\"read_error\", src, dest, (long long)file1, (long long)file2, (int)rd_size, -1, -1, (int)return_code);\n            break;\n        }\n        if (rd_size == 0)\n        {\n            /* EOF */\n            OSCP_LogState(\"read_eof\", src, dest, (long long)file1, (long long)file2, 0, -1, -1, (int)return_code);\n            break;\n        }\n        wr_total = 0;\n        while (wr_total < rd_size)\n        {\n            wr_size = OS_write(file2, &copyblock[wr_total], rd_size - wr_total);\n\n            /* Log write attempt */\n            OSCP_LogState(\"after_write\", src, dest, (long long)file1, (long long)file2, (int)rd_size, (int)wr_size, (int)wr_total, (int)return_code);\n\n            if (wr_size < 0)\n            {\n                return_code = wr_size;\n                OSCP_LogState(\"write_error\", src, dest, (long long)file1, (long long)file2, (int)rd_size, (int)wr_size, (int)wr_total, (int)return_code);\n                break;\n            }\n            wr_total += wr_size;\n        }\n    }\n\n    if (OS_ObjectIdDefined(file1))\n    {\n        OSCP_LogState(\"close_file1\", src, dest, (long long)file1, (long long)file2, -1, -1, -1, (int)return_code);\n        OS_close(file1);\n    }\n    if (OS_ObjectIdDefined(file2))\n    {\n        OSCP_LogState(\"close_file2\", src, dest, (long long)file1, (long long)file2, -1, -1, -1, (int)return_code);\n        OS_close(file2);\n    }\n\n    OSCP_LogState(\"exit\", src, dest, (long long)file1, (long long)file2, -1, -1, -1, (int)return_code);\n\n    return return_code;\n}\n"
}