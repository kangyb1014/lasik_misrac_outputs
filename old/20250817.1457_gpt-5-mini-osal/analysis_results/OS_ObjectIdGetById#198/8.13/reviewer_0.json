{
  "user_message": "An agent A claimed that the following OS_ObjectIdGetById code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_ObjectIdGetById.\n```c\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:OS_ObjectIdConvertToken takes a mutable pointer 'OS_object_token_t *token' but the function never directly modifies the token object (only reads token->lock_mode and uses accessors OS_ObjectIdFromToken/OS_ObjectIdGlobalFromToken). Therefore the parameter could be const-qualified (const OS_object_token_t *token). As written the code does not use the pointer to modify the object, so it violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1587.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp for each log line */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(f, \"%s - \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ObjectIdTransactionInit(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_object_token_t *token)\n{\n    /* Simulate initialization: record requested lock mode in the token for later inspection */\n    if (token != NULL)\n    {\n        token->lock_mode = lock_mode;\n    }\n    probe_log(\"OS_ObjectIdTransactionInit called: lock_mode=%d, idtype=%d, token=%p\", (int)lock_mode, (int)idtype, (void *)token);\n    return OS_SUCCESS;\n}\nint32 OS_ObjectIdToArrayIndex(osal_objtype_t idtype, osal_id_t id, osal_index_t *out_index)\n{\n    /* Convert id to an index (stub): simply use id modulo 1024 for this test */\n    if (out_index != NULL)\n    {\n        *out_index = (osal_index_t)(id % 1024u);\n    }\n    probe_log(\"OS_ObjectIdToArrayIndex called: idtype=%d, id=%u -> obj_idx=%u\", (int)idtype, (unsigned)id, (unsigned)((out_index != NULL) ? *out_index : 0u));\n    return OS_SUCCESS;\n}\nint32 OS_ObjectIdConvertToken(OS_object_token_t *token)\n{\n    /* This stub reads token->lock_mode and does not modify the token structure.\n     * This mirrors the violation scenario: the function only reads fields and\n     * therefore could accept a const-qualified pointer.\n     */\n    if (token != NULL)\n    {\n        probe_log(\"OS_ObjectIdConvertToken called: token=%p, token->lock_mode=%d, token->obj_idx=%d, token->obj_id=%u\",\n                  (void *)token, (int)token->lock_mode, (int)token->obj_idx, (unsigned)token->obj_id);\n    }\n    else\n    {\n        probe_log(\"OS_ObjectIdConvertToken called: token=NULL\");\n    }\n\n    return OS_SUCCESS;\n}\nvoid OS_ObjectIdTransactionCancel(OS_object_token_t *token)\n{\n    /* Log cancellation; do not modify token to preserve original data for inspection */\n    probe_log(\"OS_ObjectIdTransactionCancel called: token=%p, token->obj_idx=%d, token->obj_id=%u\",\n              (void *)token,\n              (token != NULL) ? token->obj_idx : -1,\n              (unsigned)((token != NULL) ? token->obj_id : 0u));\n}\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    probe_log(\"Entering OS_ObjectIdGetById: lock_mode=%d, idtype=%d, id=%u, token=%p\", (int)lock_mode, (int)idtype, (unsigned)id, (void *)token);\n\n    if (token != NULL)\n    {\n        probe_log(\"Initial token state: obj_idx=%d, obj_id=%u, lock_mode=%d\", (int)token->obj_idx, (unsigned)token->obj_id, (int)token->lock_mode);\n    }\n    else\n    {\n        probe_log(\"Initial token state: token is NULL\");\n    }\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    probe_log(\"After OS_ObjectIdTransactionInit: return_code=%d, token=%p\", (int)return_code, (void *)token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"OS_ObjectIdGetById early return due to TransactionInit failure: return_code=%d\", (int)return_code);\n        return return_code;\n    }\n\n    /* Note: token->obj_idx type comes from project's definition; pass its address. */\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    probe_log(\"After OS_ObjectIdToArrayIndex: return_code=%d, token->obj_idx=%d\", (int)return_code, (int)token->obj_idx);\n\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n        probe_log(\"Assigned token->obj_id = %u\", (unsigned)token->obj_id);\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        probe_log(\"Calling OS_ObjectIdConvertToken with token=%p (note: function may only read token fields)\", (void *)token);\n        return_code = OS_ObjectIdConvertToken(token);\n        probe_log(\"After OS_ObjectIdConvertToken: return_code=%d, token->obj_idx=%d, token->obj_id=%u, token->lock_mode=%d\",\n                  (int)return_code, (int)token->obj_idx, (unsigned)token->obj_id, (int)token->lock_mode);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"Operation failed, calling OS_ObjectIdTransactionCancel for token=%p\", (void *)token);\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    probe_log(\"Exiting OS_ObjectIdGetById with return_code=%d, final token=%p, obj_idx=%d, obj_id=%u, lock_mode=%d\",\n              (int)return_code,\n              (void *)token,\n              (token != NULL) ? token->obj_idx : -1,\n              (unsigned)((token != NULL) ? token->obj_id : 0u),\n              (int)((token != NULL) ? token->lock_mode : 0));\n\n    return return_code;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. OS_ObjectIdGetById clearly treats token as an in/out object: it assigns token->obj_idx (via OS_ObjectIdToArrayIndex), sets token->obj_id, and OS_ObjectIdTransactionInit also records lock_mode into the token. Because the function (and the called initialization/array-index routines) modify the token, the token parameter cannot be const-qualified in this function. The only potential MISRA concern would be the signature of OS_ObjectIdConvertToken if that function truly never modifies the token; that would be a separate issue in ConvertToken\u2019s declaration (it could accept a pointer-to-const), but it does not make OS_ObjectIdGetById itself violate Rule 8.13. Also, without the complete original implementation one cannot assume ConvertToken is read-only (it may have side effects or future changes), so no definite violation is shown here."
}