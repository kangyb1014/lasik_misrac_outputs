{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(token, 0, sizeof(*token)) can write beyond the bounds of the object if the caller passes an invalid pointer (for example token == NULL or a pointer to a smaller object). There is no prior validation of the token pointer in OS_ObjectIdTransactionInit, so a NULL or incorrectly sized pointer from the caller will cause out-of-bounds access or undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetById code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1591.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdGetById as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetById:\n```c\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdGetById code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe helper to log control flow and state to /tmp/logs/1591.txt */\nstatic void OS_ObjectIdGetById_log(const char *stage,\n                                   int lock_mode_val,\n                                   int idtype_val,\n                                   unsigned long long id_val,\n                                   void *token_ptr,\n                                   int return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1591.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, do not interfere with normal flow. */\n        return;\n    }\n\n    fprintf(f, \"[OS_ObjectIdGetById] %s: lock_mode=%d idtype=%d id=%llu token=%p return=%d\\n\",\n            stage, lock_mode_val, idtype_val, id_val, token_ptr, return_code);\n    fclose(f);\n}\n\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Log entry with the raw parameters. Avoid dereferencing 'token' here to\n       prevent further undefined behavior if the caller passed an invalid pointer. */\n    OS_ObjectIdGetById_log(\"entry\", (int)lock_mode, (int)idtype, (unsigned long long)id, (void *)token, 0);\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    /* Log result of TransactionInit. Note: if TransactionInit itself dereferences\n       'token' and crashes (e.g. due to NULL), the preceding \"entry\" log will\n       still exist on disk and can be used as evidence of the call that led\n       to the crash. */\n    OS_ObjectIdGetById_log(\"after_init\", (int)lock_mode, (int)idtype, (unsigned long long)id, (void *)token, (int)return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n\n    /* Log outcome of ToArrayIndex and token pointer. Only now it is safe to\n       reference token->obj_idx because TransactionInit returned success. */\n    OS_ObjectIdGetById_log(\"after_toarrayindex\", (int)lock_mode, (int)idtype, (unsigned long long)id, (void *)token, (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /* Log before ConvertToken call */\n        OS_ObjectIdGetById_log(\"before_convert\", (int)lock_mode, (int)idtype, (unsigned long long)id, (void *)token, (int)return_code);\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n\n        /* Log result of ConvertToken */\n        OS_ObjectIdGetById_log(\"after_convert\", (int)lock_mode, (int)idtype, (unsigned long long)id, (void *)token, (int)return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log cancellation event and then invoke the original cancel routine. */\n        OS_ObjectIdGetById_log(\"before_cancel\", (int)lock_mode, (int)idtype, (unsigned long long)id, (void *)token, (int)return_code);\n        OS_ObjectIdTransactionCancel(token);\n        OS_ObjectIdGetById_log(\"after_cancel\", (int)lock_mode, (int)idtype, (unsigned long long)id, (void *)token, (int)return_code);\n    }\n\n    return return_code;\n}\n"
}