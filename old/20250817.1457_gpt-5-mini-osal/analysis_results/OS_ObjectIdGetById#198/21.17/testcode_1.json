{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The code calls strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) without validating that both pointers are non-NULL and point to null-terminated strings bounded within their allocated objects. For example, if StubPtr->Data.Buff.Position == ReturnSize (so the left side of the || is false) but StubPtr->Data.Buff.ContentTypeStr refers to a buffer that is not null-terminated within its bounds (or TypeName is NULL), strcmp will read past the end of the buffer (or dereference NULL), causing an out-of-bounds access. This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetById code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1591.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdGetById as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetById:\n```c\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdGetById code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe/log helper - appends messages to /tmp/logs/1591.txt */\nstatic void probe_log_printf(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1591.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\n/* A small wrapper to centralize logging of the main parameters/state */\nstatic void probe_log_state(const char *place,\n                            void *lock_mode_val,\n                            void *idtype_val,\n                            void *id_val,\n                            void *token_ptr,\n                            int32_t return_code)\n{\n    /* Note: cast to (void*) for generic pointer printing; numeric values\n       are printed as long casts to avoid introducing type assumptions. */\n    probe_log_printf(\"[OS_ObjectIdGetById] %s: lock_mode=%p idtype=%p id=%p token=%p return=%ld\",\n                     place, lock_mode_val, idtype_val, id_val, token_ptr, (long)return_code);\n}\n\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Log entry with parameter snapshots */\n    probe_log_printf(\"[OS_ObjectIdGetById] ENTRY: lock_mode=%p idtype=%p id=%p token=%p\",\n                     (void *)(uintptr_t)lock_mode, (void *)(uintptr_t)idtype, (void *)(uintptr_t)id, (void *)token);\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    /* Log after TransactionInit */\n    probe_log_state(\"After TransactionInit\", (void *)(uintptr_t)lock_mode, (void *)(uintptr_t)idtype, (void *)(uintptr_t)id, (void *)token, return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log_printf(\"[OS_ObjectIdGetById] Early return after TransactionInit with code=%ld\", (long)return_code);\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n\n    /* Log result of ToArrayIndex and token index if available */\n    if (token != NULL)\n    {\n        probe_log_printf(\"[OS_ObjectIdGetById] After ToArrayIndex: return=%ld obj_idx=%ld\",\n                         (long)return_code, (long)token->obj_idx);\n    }\n    else\n    {\n        probe_log_printf(\"[OS_ObjectIdGetById] After ToArrayIndex: return=%ld token=NULL\",\n                         (long)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n        probe_log_printf(\"[OS_ObjectIdGetById] Assigned token->obj_id=%p (id)\", (void *)(uintptr_t)id);\n\n        /* ConvertToken will adjust global lock state as needed. Log before and after. */\n        probe_log_printf(\"[OS_ObjectIdGetById] Calling OS_ObjectIdConvertToken with token=%p\", (void *)token);\n        return_code = OS_ObjectIdConvertToken(token);\n        probe_log_printf(\"[OS_ObjectIdGetById] After OS_ObjectIdConvertToken: return=%ld\", (long)return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log_printf(\"[OS_ObjectIdGetById] Operation failed, calling OS_ObjectIdTransactionCancel for token=%p\", (void *)token);\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    probe_log_printf(\"[OS_ObjectIdGetById] EXIT: return=%ld\", (long)return_code);\n    return return_code;\n}\n"
}