{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(Rvc->TypeName, WantTypeName) after only checking for non-NULL. If either pointer refers to a non\u2011null\u2011terminated character array or a buffer whose bounds do not include a terminating '\\0', strcmp may read past the object bounds. Example: Rvc->TypeName points to a 3\u2011byte buffer {'a','b','c'} (no '\\0') and WantTypeName is a valid C string \u2014 strcmp will read beyond the 3 bytes, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_IsValueCompatible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2575.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_IsValueCompatible as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_IsValueCompatible:\n```c\nbool UT_Stub_IsValueCompatible(const UT_RetvalConfigEntry_t *Rvc, const char *WantTypeName, UT_ValueGenre_t WantGenre)\n{\n    bool IsCompatible;\n\n    /* If the type names were specified on both sides, and they match, then the value is compatible */\n    if (Rvc->TypeName != NULL && WantTypeName != NULL)\n    {\n        IsCompatible = (strcmp(Rvc->TypeName, WantTypeName) == 0);\n    }\n    else\n    {\n        /* The types are not _directly_ assignable, but it could possibly be coerced */\n        IsCompatible = false;\n    }\n\n    /*\n     * As an alternative/fallback, if the value genre is known for both sides,\n     * check if coercion is a possibility.  For example, this could apply if the\n     * value was int32 on one side and int16 on the other.\n     */\n    if (!IsCompatible && Rvc->Genre != UT_ValueGenre_OPAQUE && Rvc->Genre == WantGenre)\n    {\n        /* Genre match - should be compatible, with a potential size adjustment */\n        IsCompatible = true;\n    }\n\n    return IsCompatible;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_IsValueCompatible code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdbool.h>\n\n/*\n * Logging helper that appends to /tmp/logs/2575.txt. Kept minimal and safe\n * (only writes to the log file; does not attempt to scan or probe strings\n * beyond the first character to avoid introducing additional out-of-bounds\n * accesses).\n */\nstatic void UT_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2575.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Preserve original function logic while inserting probes that log the\n * control flow and minimal state information useful to reproduce the\n * scenario described (i.e. pointers being non-NULL and a strcmp call\n * occurring). The probes intentionally avoid scanning strings (e.g. no\n * strlen or strnlen) beyond inspecting the first byte to avoid adding new\n * potential out-of-bounds accesses.\n */\nbool UT_Stub_IsValueCompatible(const UT_RetvalConfigEntry_t *Rvc, const char *WantTypeName, UT_ValueGenre_t WantGenre)\n{\n    bool IsCompatible;\n\n    /* Log entry and basic state */\n    UT_Log(\"UT_Stub_IsValueCompatible called: Rvc=%p, WantTypeName=%p, WantGenre=%d\", (const void *)Rvc, (const void *)WantTypeName, (int)WantGenre);\n\n    if (Rvc == NULL)\n    {\n        UT_Log(\"Rvc is NULL -> returning false\");\n        return false;\n    }\n\n    /* If the type names were specified on both sides, and they match, then the value is compatible */\n    if (Rvc->TypeName != NULL && WantTypeName != NULL)\n    {\n        /* Log that both pointers are non-NULL and log their first byte (if readable) */\n        unsigned char r0 = (unsigned char)Rvc->TypeName[0];\n        unsigned char w0 = (unsigned char)WantTypeName[0];\n        UT_Log(\"Both TypeName pointers non-NULL: Rvc->TypeName=%p (first byte=0x%02X), WantTypeName=%p (first byte=0x%02X)\",\n               (const void *)Rvc->TypeName, r0, (const void *)WantTypeName, w0);\n\n        /* Log that strcmp will be invoked (this is the operation that may read beyond the bounds if the strings are not NUL-terminated) */\n        UT_Log(\"Invoking strcmp(Rvc->TypeName, WantTypeName)\");\n\n        IsCompatible = (strcmp(Rvc->TypeName, WantTypeName) == 0);\n\n        UT_Log(\"strcmp returned %s -> IsCompatible=%s\", IsCompatible ? \"0 (equal)\" : \"non-zero (not equal)\", IsCompatible ? \"true\" : \"false\");\n    }\n    else\n    {\n        /* The types are not _directly_ assignable, but it could possibly be coerced */\n        IsCompatible = false;\n        UT_Log(\"One or both TypeName pointers are NULL: Rvc->TypeName=%p, WantTypeName=%p -> IsCompatible=false (so far)\", (const void *)Rvc->TypeName, (const void *)WantTypeName);\n    }\n\n    /*\n     * As an alternative/fallback, if the value genre is known for both sides,\n     * check if coercion is a possibility.  For example, this could apply if the\n     * value was int32 on one side and int16 on the other.\n     */\n    if (!IsCompatible && Rvc->Genre != UT_ValueGenre_OPAQUE && Rvc->Genre == WantGenre)\n    {\n        /* Genre match - should be compatible, with a potential size adjustment */\n        UT_Log(\"Genre fallback: Rvc->Genre=%d matches WantGenre=%d -> marking IsCompatible=true\", (int)Rvc->Genre, (int)WantGenre);\n        IsCompatible = true;\n    }\n    else\n    {\n        UT_Log(\"Genre check: Rvc->Genre=%d, WantGenre=%d, IsCompatible=%s\", (int)Rvc->Genre, (int)WantGenre, IsCompatible ? \"true\" : \"false\");\n    }\n\n    UT_Log(\"UT_Stub_IsValueCompatible returning %s\", IsCompatible ? \"true\" : \"false\");\n\n    return IsCompatible;\n}\n"
}