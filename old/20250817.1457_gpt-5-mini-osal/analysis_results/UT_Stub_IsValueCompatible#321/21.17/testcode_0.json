{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolated when either pointer is non-NULL but does not point to a null-terminated string within its allocated bounds. Although the code checks Rvc->TypeName != NULL and WantTypeName != NULL, strcmp will read until a '\\0' and can read past the end of the referenced object if the string is not null-terminated or the pointer points into a shorter buffer (e.g. a fixed-size buffer lacking a terminator or a pointer into the middle of an allocation). This can cause out-of-bounds accesses, so the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_IsValueCompatible code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2575.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_IsValueCompatible as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_IsValueCompatible:\n```c\nbool UT_Stub_IsValueCompatible(const UT_RetvalConfigEntry_t *Rvc, const char *WantTypeName, UT_ValueGenre_t WantGenre)\n{\n    bool IsCompatible;\n\n    /* If the type names were specified on both sides, and they match, then the value is compatible */\n    if (Rvc->TypeName != NULL && WantTypeName != NULL)\n    {\n        IsCompatible = (strcmp(Rvc->TypeName, WantTypeName) == 0);\n    }\n    else\n    {\n        /* The types are not _directly_ assignable, but it could possibly be coerced */\n        IsCompatible = false;\n    }\n\n    /*\n     * As an alternative/fallback, if the value genre is known for both sides,\n     * check if coercion is a possibility.  For example, this could apply if the\n     * value was int32 on one side and int16 on the other.\n     */\n    if (!IsCompatible && Rvc->Genre != UT_ValueGenre_OPAQUE && Rvc->Genre == WantGenre)\n    {\n        /* Genre match - should be compatible, with a potential size adjustment */\n        IsCompatible = true;\n    }\n\n    return IsCompatible;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_IsValueCompatible code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/*\n * Probe logger: append human-readable logs to /tmp/logs/2575.txt.\n * This avoids performing any additional reads of the string pointers\n * (which could themselves cause out-of-bounds access).  It only\n * records pointer values, NULL-ness and the control path decisions.\n */\nstatic void UT_Probe_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2575.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Try to create the directory and retry once */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/2575.txt\", \"a\");\n        if (f == NULL)\n        {\n            /* If still failing, nothing more we can do safely here */\n            return;\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\n/* The function signature is preserved; the body is instrumented with logs. */\nbool UT_Stub_IsValueCompatible(const UT_RetvalConfigEntry_t *Rvc, const char *WantTypeName, UT_ValueGenre_t WantGenre)\n{\n    bool IsCompatible;\n\n    /* Log entry and pointer state. Do not dereference the string pointers. */\n    UT_Probe_Log(\"UT_Stub_IsValueCompatible enter: Rvc=%p, Rvc->TypeName=%p, WantTypeName=%p, Rvc->Genre=%d, WantGenre=%d\",\n                 (const void *)Rvc,\n                 (const void *)(Rvc ? Rvc->TypeName : NULL),\n                 (const void *)WantTypeName,\n                 (int)(Rvc ? Rvc->Genre : -1),\n                 (int)WantGenre);\n\n    /* If the type names were specified on both sides, and they match, then the value is compatible */\n    if (Rvc->TypeName != NULL && WantTypeName != NULL)\n    {\n        /* Log that strcmp will be invoked (this is where a violation can occur if the strings\n         * are not null-terminated within their allocated bounds). We deliberately do not\n         * attempt any extra reads here to avoid introducing further undefined behavior. */\n        UT_Probe_Log(\"Both type-name pointers non-NULL: Rvc->TypeName=%p, WantTypeName=%p -- calling strcmp()\",\n                     (const void *)Rvc->TypeName, (const void *)WantTypeName);\n\n        IsCompatible = (strcmp(Rvc->TypeName, WantTypeName) == 0);\n\n        UT_Probe_Log(\"strcmp returned %d; IsCompatible set to %d\",\n                     (int)(strcmp(Rvc->TypeName, WantTypeName)), (int)IsCompatible);\n    }\n    else\n    {\n        /* The types are not _directly_ assignable, but it could possibly be coerced */\n        IsCompatible = false;\n        UT_Probe_Log(\"One or both type-name pointers are NULL: Rvc->TypeName=%p, WantTypeName=%p -- skipping strcmp(), IsCompatible=%d\",\n                     (const void *)(Rvc ? Rvc->TypeName : NULL), (const void *)WantTypeName, (int)IsCompatible);\n    }\n\n    /*\n     * As an alternative/fallback, if the value genre is known for both sides,\n     * check if coercion is a possibility.  For example, this could apply if the\n     * value was int32 on one side and int16 on the other.\n     */\n    if (!IsCompatible && Rvc->Genre != UT_ValueGenre_OPAQUE && Rvc->Genre == WantGenre)\n    {\n        /* Genre match - should be compatible, with a potential size adjustment */\n        IsCompatible = true;\n        UT_Probe_Log(\"Genre fallback applied: Rvc->Genre=%d matches WantGenre=%d => IsCompatible set to true\",\n                     (int)Rvc->Genre, (int)WantGenre);\n    }\n    else\n    {\n        UT_Probe_Log(\"Genre fallback not applied: Rvc->Genre=%d, WantGenre=%d, IsCompatible=%d\",\n                     (int)Rvc->Genre, (int)WantGenre, (int)IsCompatible);\n    }\n\n    UT_Probe_Log(\"UT_Stub_IsValueCompatible exit: IsCompatible=%d\", (int)IsCompatible);\n\n    return IsCompatible;\n}\n"
}