{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_CHECK_APINAME(var_name) expands to OS_CHECK_STRING(...), which typically uses string handling functions (e.g. strlen/strnlen) to validate the API name length. If the caller passes a pointer to a character buffer that is not NUL-terminated or whose storage is smaller than the characters present (for example: char name[5] = {'a','b','c','d','e'}; /* no '\\0' */ OS_CHECK_APINAME(name);), a strlen-based check will read past the bounds of the object and therefore violate Rule 21.17. Even if later code uses strncpy safely, the preliminary check can still access memory beyond the referenced object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1071.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarCreate:\n```c\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Helper logging probe. Writes concise control-flow/state info to /tmp/logs/1071.txt.\n * Does not dereference the var_name pointer (to avoid introducing new out-of-bounds reads).\n */\nstatic void OS_1071_Log(const char *stage, const void *var_id_ptr, const void *var_name_ptr, unsigned long options, long return_code, const void *extra)\n{\n    FILE *f = fopen(\"/tmp/logs/1071.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log the stage, pointer values, options, return code, and an extra pointer for context. */\n        fprintf(f, \"%s: var_id=%p var_name=%p options=%lu return_code=%ld extra=%p\\n\",\n                stage, var_id_ptr, var_name_ptr, options, return_code, extra);\n        fclose(f);\n    }\n}\n\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Log entry and initial parameter state (only pointer values, do NOT dereference var_name). */\n    OS_1071_Log(\"ENTER\", (const void *)var_id, (const void *)var_name, (unsigned long)options, 0, NULL);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n\n    /* Log immediately before the API name check so callers that provide a non-NUL-terminated\n     * buffer can be investigated (we only log the pointer value here; we do NOT read the string).\n     */\n    OS_1071_Log(\"BEFORE_APINAME_CHECK\", (const void *)var_id, (const void *)var_name, (unsigned long)options, 0, NULL);\n\n    OS_CHECK_APINAME(var_name);\n\n    /* If execution continues past the APINAME check, log that fact. If the APINAME check\n     * causes a failure (for example because it reads past the buffer bounds), this log\n     * will not be written and the previous \"BEFORE_APINAME_CHECK\" entry will help debug.\n     */\n    OS_1071_Log(\"AFTER_APINAME_CHECK\", (const void *)var_id, (const void *)var_name, (unsigned long)options, 0, NULL);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n\n    /* Log result of allocation and the token address for further tracing. */\n    OS_1071_Log(\"AFTER_ALLOCATE\", (const void *)var_id, (const void *)var_name, (unsigned long)options, (long)return_code, (const void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Log the internal record pointer before init. */\n        OS_1071_Log(\"BEFORE_INIT\", (const void *)var_id, (const void *)var_name, (unsigned long)options, (long)return_code, (const void *)condvar);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Log the result from the OS-specific implementation. */\n        OS_1071_Log(\"AFTER_IMPL\", (const void *)var_id, (const void *)var_name, (unsigned long)options, (long)return_code, (const void *)&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n\n        /* Log finalization result and the assigned var_id pointer value. */\n        OS_1071_Log(\"AFTER_FINALIZE\", (const void *)var_id, (const void *)var_name, (unsigned long)options, (long)return_code, (const void *)var_id);\n    }\n\n    /* Log exit with the returning code. */\n    OS_1071_Log(\"EXIT\", (const void *)var_id, (const void *)var_name, (unsigned long)options, (long)return_code, NULL);\n\n    return return_code;\n}\n"
}