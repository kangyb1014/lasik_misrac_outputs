{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIf the macro is invoked with a constant/compile-time NULL (for example OS_CHECK_POINTER(NULL);), it expands to BUGCHECK((NULL)!=NULL,OS_INVALID_POINTER) i.e. BUGCHECK(0,OS_INVALID_POINTER). If BUGCHECK is implemented to unconditionally terminate (e.g. call abort()/infinite loop/return), the code following that call becomes unreachable. Thus the macro can introduce unreachable code at call sites where the argument is a constant false expression.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1065.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarCreate:\n```c\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helper. Keeps original logic intact; only appends log messages to /tmp/logs/1065.txt. */\nstatic void OS_1065_Log(const char *stage, const void *var_id, const char *var_name, uint32 options, int32 return_code, const char *extra)\n{\n    const char *dir = \"/tmp/logs\";\n    FILE *f;\n\n    /* Best-effort create directory; ignore errors if it already exists. */\n    (void)mkdir(dir, 0777);\n\n    f = fopen(\"/tmp/logs/1065.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"[%s] stage=%s var_id=%p var_name=%p name_str=%s options=%u return_code=%ld extra=%s\\n\",\n                __func__,\n                (stage ? stage : \"(null)\"),\n                var_id,\n                (void *)var_name,\n                (var_name ? var_name : \"(null)\"),\n                (unsigned)options,\n                (long)return_code,\n                (extra ? extra : \"(null)\"));\n        fflush(f);\n        fclose(f);\n    }\n}\n\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Entry log */\n    OS_1065_Log(\"entry\", (const void *)var_id, var_name, options, -1, \"entering OS_CondVarCreate\");\n\n    /* Check parameters */\n    OS_1065_Log(\"before_check_pointer\", (const void *)var_id, var_name, options, -1, \"about to call OS_CHECK_POINTER\");\n    OS_CHECK_POINTER(var_id);\n    /* If OS_CHECK_POINTER aborts (e.g. BUGCHECK), no further logs will be produced.\n       The absence of subsequent log entries is evidence of an early termination/unreachable code scenario. */\n    OS_1065_Log(\"after_check_pointer\", (const void *)var_id, var_name, options, -1, \"returned from OS_CHECK_POINTER\");\n\n    OS_1065_Log(\"before_check_apiname\", (const void *)var_id, var_name, options, -1, \"about to call OS_CHECK_APINAME\");\n    OS_CHECK_APINAME(var_name);\n    OS_1065_Log(\"after_check_apiname\", (const void *)var_id, var_name, options, -1, \"returned from OS_CHECK_APINAME\");\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    OS_1065_Log(\"before_ObjectIdAllocateNew\", (const void *)var_id, var_name, options, -1, \"calling OS_ObjectIdAllocateNew\");\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    OS_1065_Log(\"after_ObjectIdAllocateNew\", (const void *)var_id, var_name, options, return_code, \"returned from OS_ObjectIdAllocateNew\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_1065_Log(\"before_object_init\", (const void *)var_id, var_name, options, return_code, \"about to initialize object table entry\");\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n        OS_1065_Log(\"after_object_init\", (const void *)var_id, var_name, options, return_code, \"initialized object table entry\");\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        OS_1065_Log(\"before_Impl\", (const void *)var_id, var_name, options, return_code, \"calling OS_CondVarCreate_Impl\");\n        return_code = OS_CondVarCreate_Impl(&token, options);\n        OS_1065_Log(\"after_Impl\", (const void *)var_id, var_name, options, return_code, \"returned from OS_CondVarCreate_Impl\");\n\n        /* Check result, finalize record, and unlock global table. */\n        OS_1065_Log(\"before_finalize\", (const void *)var_id, var_name, options, return_code, \"calling OS_ObjectIdFinalizeNew\");\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n        OS_1065_Log(\"after_finalize\", (const void *)var_id, var_name, options, return_code, \"returned from OS_ObjectIdFinalizeNew\");\n    }\n\n    OS_1065_Log(\"exit\", (const void *)var_id, var_name, options, return_code, \"exiting OS_CondVarCreate\");\n\n    return return_code;\n}\n"
}