{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts away the const qualifier: 'name' is declared as 'const char *' but is passed as '(void *)name' to OS_ObjectIdFindNextMatch, discarding const. This violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type (e.g. change the callee to accept 'const void *' or remove the cast).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1067.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarCreate:\n```c\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <time.h>\n\n/* Probe helper: append formatted log entries to /tmp/logs/1067.txt. */\nstatic void OS_CondVarCreate_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1067.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging fails, do not alter program flow. */\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timestr[32];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(fp, \"%s \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nstatic void OS_CondVarCreate_LogState(const char *stage, const char *var_name, uint32 options, int32 return_code, const void *token_addr)\n{\n    /* Safely capture a short printout of the name (without modifying it). */\n    char name_buf[129] = \"(null)\";\n    if (var_name != NULL)\n    {\n        /* copy up to 128 chars, ensure NUL-termination */\n        strncpy(name_buf, var_name, sizeof(name_buf) - 1);\n        name_buf[sizeof(name_buf) - 1] = '\\0';\n    }\n\n    /* Log stage, pointer value, name preview, options, return code, and token address */\n    OS_CondVarCreate_Log(\"stage=%s: var_name_ptr=%p var_name=\\\"%s\\\" options=%lu return_code=%ld token_addr=%p\",\n                         stage,\n                         (const void *)var_name,\n                         name_buf,\n                         (unsigned long)options,\n                         (long)return_code,\n                         token_addr);\n}\n\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Log entry parameters */\n    OS_CondVarCreate_LogState(\"entry\", var_name, options, -1, NULL);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n\n    /* Log result of allocation attempt */\n    OS_CondVarCreate_LogState(\"after_ObjectIdAllocateNew\", var_name, options, return_code, (const void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Log after initialization of the table entry. */\n        OS_CondVarCreate_LogState(\"after_OS_OBJECT_INIT\", var_name, options, return_code, (const void *)&token);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Log result of OS-specific implementation */\n        OS_CondVarCreate_LogState(\"after_OS_CondVarCreate_Impl\", var_name, options, return_code, (const void *)&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n\n        /* Final state before return */\n        OS_CondVarCreate_LogState(\"after_ObjectIdFinalizeNew\", var_name, options, return_code, (const void *)&token);\n    }\n    else\n    {\n        /* Allocation failed: log final state */\n        OS_CondVarCreate_LogState(\"allocate_failed\", var_name, options, return_code, (const void *)&token);\n    }\n\n    return return_code;\n}\n"
}