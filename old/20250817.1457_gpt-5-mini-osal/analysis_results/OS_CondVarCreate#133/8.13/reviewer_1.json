{
  "user_message": "An agent A claimed that the following OS_CondVarCreate code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CondVarCreate.\n```c\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The call casts away the const qualifier: 'name' is declared as 'const char *' but is passed as '(void *)name' to OS_ObjectIdFindNextMatch, discarding const. This violates MISRA C 2023 Rule 8.13 because the pointer should point to a const-qualified type (e.g. change the callee to accept 'const void *' or remove the cast).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_CondVarCreate_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1067.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging fails, do not alter program flow. */\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timestr[32];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(fp, \"%s \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast to the standard va_list in case the build environment uses a wrapped/aliased type */\n    vfprintf(fp, fmt, (va_list)ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\nstatic void OS_CondVarCreate_LogState(const char *stage, const char *var_name, uint32 options, int32 return_code, const void *token_addr)\n{\n    /* Safely capture a short printout of the name (without modifying it). */\n    char name_buf[129] = \"(null)\";\n    if (var_name != NULL)\n    {\n        /* copy up to 128 chars, ensure NUL-termination */\n        strncpy(name_buf, var_name, sizeof(name_buf) - 1);\n        name_buf[sizeof(name_buf) - 1] = '\\0';\n    }\n\n    /* Log stage, pointer value, name preview, options, return code, and token address */\n    OS_CondVarCreate_Log(\"stage=%s: var_name_ptr=%p var_name=\\\"%s\\\" options=%lu return_code=%ld token_addr=%p\",\n                         stage,\n                         (const void *)var_name,\n                         name_buf,\n                         (unsigned long)options,\n                         (long)return_code,\n                         token_addr);\n}\n\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Log entry parameters */\n    OS_CondVarCreate_LogState(\"entry\", var_name, options, -1, NULL);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n\n    /* Log result of allocation attempt */\n    OS_CondVarCreate_LogState(\"after_ObjectIdAllocateNew\", var_name, options, return_code, (const void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Log after initialization of the table entry. */\n        OS_CondVarCreate_LogState(\"after_OS_OBJECT_INIT\", var_name, options, return_code, (const void *)&token);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Log result of OS-specific implementation */\n        OS_CondVarCreate_LogState(\"after_OS_CondVarCreate_Impl\", var_name, options, return_code, (const void *)&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n\n        /* Final state before return */\n        OS_CondVarCreate_LogState(\"after_ObjectIdFinalizeNew\", var_name, options, return_code, (const void *)&token);\n    }\n    else\n    {\n        /* Allocation failed: log final state */\n        OS_CondVarCreate_LogState(\"allocate_failed\", var_name, options, return_code, (const void *)&token);\n    }\n\n    return return_code;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct based on the code shown. In the provided OS_CondVarCreate implementation var_name is declared as const char * and is passed directly to OS_ObjectIdAllocateNew and to the OS_OBJECT_INIT macro \u2014 there is no visible explicit cast to (void *) or any other cast that would remove the const qualifier in this snippet. Agent A's scenario refers to a call that casts away const when calling OS_ObjectIdFindNextMatch, but that call does not appear in the supplied code and no prototype or implementation of OS_ObjectIdFindNextMatch/OS_ObjectIdAllocateNew/OS_OBJECT_INIT was provided to demonstrate a non-const parameter. Therefore there is no demonstrated violation of MISRA C 2023 Rule 8.13 in the shown code. If elsewhere in the codebase a function or macro indeed takes a non-const void * (or char *) and a const char * is passed (or cast) to it, that would be a legitimate Rule 8.13 concern \u2014 but that evidence is not present here, so the report as given is unsupported."
}