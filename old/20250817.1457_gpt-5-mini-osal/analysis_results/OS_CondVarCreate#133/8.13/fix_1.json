{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_CondVarCreate_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1067.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging fails, do not alter program flow. */\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timestr[32];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(fp, \"%s \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\nstatic void OS_CondVarCreate_LogState(const char *stage, const char *var_name, uint32 options, int32 return_code, const void *token_addr)\n{\n    /* Safely capture a short printout of the name (without modifying it). */\n    char name_buf[129] = \"(null)\";\n    if (var_name != NULL)\n    {\n        /* copy up to 128 chars, ensure NUL-termination */\n        strncpy(name_buf, var_name, sizeof(name_buf) - 1);\n        name_buf[sizeof(name_buf) - 1] = '\\0';\n    }\n\n    /* Log stage, pointer value, name preview, options, return code, and token address */\n    OS_CondVarCreate_Log(\"stage=%s: var_name_ptr=%p var_name=\\\"%s\\\" options=%lu return_code=%ld token_addr=%p\",\n                         stage,\n                         (const void *)var_name,\n                         name_buf,\n                         (unsigned long)options,\n                         (long)return_code,\n                         token_addr);\n}\n\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Log entry parameters */\n    OS_CondVarCreate_LogState(\"entry\", var_name, options, -1, NULL);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n\n    /* Log result of allocation attempt */\n    OS_CondVarCreate_LogState(\"after_ObjectIdAllocateNew\", var_name, options, return_code, (const void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Log after initialization of the table entry. */\n        OS_CondVarCreate_LogState(\"after_OS_OBJECT_INIT\", var_name, options, return_code, (const void *)&token);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Log result of OS-specific implementation */\n        OS_CondVarCreate_LogState(\"after_OS_CondVarCreate_Impl\", var_name, options, return_code, (const void *)&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n\n        /* Final state before return */\n        OS_CondVarCreate_LogState(\"after_ObjectIdFinalizeNew\", var_name, options, return_code, (const void *)&token);\n    }\n    else\n    {\n        /* Allocation failed: log final state */\n        OS_CondVarCreate_LogState(\"allocate_failed\", var_name, options, return_code, (const void *)&token);\n    }\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpirg3y42p/src/src/os/shared/src/osapi-condvar.c: In function 'OS_CondVarCreate_Log':\n/tmp/tmpirg3y42p/src/src/os/shared/src/osapi-condvar.c:99:15: error: storage size of 'tm_buf' isn't known\n   99 |     struct tm tm_buf;\n      |               ^~~~~~\n/tmp/tmpirg3y42p/src/src/os/shared/src/osapi-condvar.c:111:23: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  111 |     vfprintf(fp, fmt, ap);\n      |                       ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/__/__/os/shared/src/osapi-condvar.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3353: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_CondVarCreate as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <string.h>\n#include <time.h>\n#include <stdarg.h>\n\nstatic void OS_CondVarCreate_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1067.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging fails, do not alter program flow. */\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timestr[32];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(fp, \"%s \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast to the standard va_list in case the build environment uses a wrapped/aliased type */\n    vfprintf(fp, fmt, (va_list)ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\nstatic void OS_CondVarCreate_LogState(const char *stage, const char *var_name, uint32 options, int32 return_code, const void *token_addr)\n{\n    /* Safely capture a short printout of the name (without modifying it). */\n    char name_buf[129] = \"(null)\";\n    if (var_name != NULL)\n    {\n        /* copy up to 128 chars, ensure NUL-termination */\n        strncpy(name_buf, var_name, sizeof(name_buf) - 1);\n        name_buf[sizeof(name_buf) - 1] = '\\0';\n    }\n\n    /* Log stage, pointer value, name preview, options, return code, and token address */\n    OS_CondVarCreate_Log(\"stage=%s: var_name_ptr=%p var_name=\\\"%s\\\" options=%lu return_code=%ld token_addr=%p\",\n                         stage,\n                         (const void *)var_name,\n                         name_buf,\n                         (unsigned long)options,\n                         (long)return_code,\n                         token_addr);\n}\n\nint32 OS_CondVarCreate(osal_id_t *var_id, const char *var_name, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_condvar_internal_record_t *condvar;\n\n    /* Log entry parameters */\n    OS_CondVarCreate_LogState(\"entry\", var_name, options, -1, NULL);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_APINAME(var_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONDVAR, var_name, &token);\n\n    /* Log result of allocation attempt */\n    OS_CondVarCreate_LogState(\"after_ObjectIdAllocateNew\", var_name, options, return_code, (const void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        condvar = OS_OBJECT_TABLE_GET(OS_condvar_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, condvar, obj_name, var_name);\n\n        /* Log after initialization of the table entry. */\n        OS_CondVarCreate_LogState(\"after_OS_OBJECT_INIT\", var_name, options, return_code, (const void *)&token);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CondVarCreate_Impl(&token, options);\n\n        /* Log result of OS-specific implementation */\n        OS_CondVarCreate_LogState(\"after_OS_CondVarCreate_Impl\", var_name, options, return_code, (const void *)&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, var_id);\n\n        /* Final state before return */\n        OS_CondVarCreate_LogState(\"after_ObjectIdFinalizeNew\", var_name, options, return_code, (const void *)&token);\n    }\n    else\n    {\n        /* Allocation failed: log final state */\n        OS_CondVarCreate_LogState(\"allocate_failed\", var_name, options, return_code, (const void *)&token);\n    }\n\n    return return_code;\n}\n",
  "explanation": "Two issues from the build errors were fixed:\n\n- The struct tm storage-size error was caused by missing time header. I added #include <time.h> (also added <stdio.h>, <string.h>, and <stdarg.h>) so struct tm and localtime_r/strftime are defined.\n- The vfprintf call failed due to a va_list type mismatch in the build environment. I cast the va_list variable when passing it to vfprintf: vfprintf(fp, fmt, (va_list)ap); \u2014 this avoids mismatched typedef/name issues in environments that wrap or alias va_list.\n\nNo logic changes were made to OS_CondVarCreate; only headers and a safe cast were added to resolve compilation errors."
}