{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe called function OS_BSP_ConsoleOutput_Impl appears to be passed string literals (\" \", \"\\n\") and other read-only strings (OutputMessage). If its first parameter is declared as a non-const pointer (for example: void OS_BSP_ConsoleOutput_Impl(char *Output, size_t Len)), then the parameter should instead be const-qualified (const char *Output) because the function does not need to modify the data. In that case Rule 8.13 is violated: a pointer parameter is not const-qualified even though it can and should be.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2307.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_Message as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_Message code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: write structured diagnostics to the prescribed log file. */\nstatic void UtAssert_Probe(const char *stage, unsigned int MessageType, const char *File, unsigned int Line,\n                           const char *Spec, const char *BaseName, const char *FinalMessage, size_t MsgLen)\n{\n    FILE *f = fopen(\"/tmp/logs/2307.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Logging is best-effort; do not alter original behavior on failure. */\n    }\n\n    fprintf(f, \"--- UtAssert Probe: %s ---\\n\", stage);\n    fprintf(f, \"MessageType=%u Line=%u\\n\", MessageType, Line);\n    fprintf(f, \"File=%s\\n\", (File != NULL) ? File : \"(NULL)\");\n    fprintf(f, \"BaseName=%s\\n\", (BaseName != NULL) ? BaseName : \"(NULL)\");\n    fprintf(f, \"Spec=%s\\n\", (Spec != NULL) ? Spec : \"(NULL)\");\n    fprintf(f, \"MsgLen=%zu\\n\", MsgLen);\n\n    /* FinalMessage may contain embedded newlines; print it on a separate labeled line. */\n    fprintf(f, \"FinalMessage:\\n%s\\n\", (FinalMessage != NULL) ? FinalMessage : \"(NULL)\");\n    fprintf(f, \"-----------------------------\\n\");\n    fclose(f);\n}\n\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n        BaseName = NULL;\n    }\n\n    /* Log state after computing BaseName and MsgLen */\n    UtAssert_Probe(\"after-basename\", (unsigned int)MessageType, File, (unsigned int)Line, Spec, BaseName, FinalMessage, MsgLen);\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    /* Log final message state before handing off to UT_BSP_DoText */\n    UtAssert_Probe(\"before-UT_BSP_DoText\", (unsigned int)MessageType, File, (unsigned int)Line, Spec, BaseName, FinalMessage, strlen(FinalMessage));\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n\n    /* Log after call to UT_BSP_DoText to capture control flow completion */\n    UtAssert_Probe(\"after-UT_BSP_DoText\", (unsigned int)MessageType, File, (unsigned int)Line, Spec, BaseName, FinalMessage, strlen(FinalMessage));\n}\n"
}