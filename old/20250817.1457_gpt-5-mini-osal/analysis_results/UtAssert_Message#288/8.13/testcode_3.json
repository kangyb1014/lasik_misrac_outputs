{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf UtAssert_GetCaseTypeAbbrev has the signature 'char *UtAssert_GetCaseTypeAbbrev(uint8)' (i.e. returns a non-const pointer) while it actually returns pointers to string literals or other immutable data, then Rule 8.13 is violated: the pointer should be declared 'const char *'. If, however, UtAssert_GetCaseTypeAbbrev is declared to return 'const char *', there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2307.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_Message as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_Message code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Minimal type definitions to make this test compilation-unit self-contained. */\ntypedef unsigned char uint8;\ntypedef unsigned int  uint32;\n\n/* Minimal implementation of UT_BSP_DoText so the unit is linkable and runnable. */\nvoid UT_BSP_DoText(uint8 MessageType, const char *Text)\n{\n    /* Preserve original observable behavior by printing to stdout. */\n    if (Text != NULL)\n    {\n        (void)printf(\"UT_BSP_DoText (%u): %s\\n\", (unsigned int)MessageType, Text);\n    }\n}\n\n/* Helper probe function that appends detailed state and control-flow information\n   to /tmp/logs/2307.txt for post-mortem analysis by other agents. */\nstatic void UtAssert_Message_Log(uint8 MessageType,\n                                const char *File,\n                                uint32 Line,\n                                const char *Spec,\n                                const char *BaseName,\n                                size_t MsgLen,\n                                const char *FinalMessage)\n{\n    FILE *fp = fopen(\"/tmp/logs/2307.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging fails, do not alter program flow; just return. */\n        return;\n    }\n\n    (void)fprintf(fp, \"--- UtAssert_Message probe ---\\n\");\n    (void)fprintf(fp, \"MessageType: %u\\n\", (unsigned int)MessageType);\n    (void)fprintf(fp, \"File ptr: %p\\n\", (const void *)File);\n    (void)fprintf(fp, \"File str: %s\\n\", (File != NULL) ? File : \"(null)\");\n    (void)fprintf(fp, \"Line: %u\\n\", (unsigned int)Line);\n    (void)fprintf(fp, \"Spec ptr: %p\\n\", (const void *)Spec);\n    (void)fprintf(fp, \"Spec str: %s\\n\", (Spec != NULL) ? Spec : \"(null)\");\n    (void)fprintf(fp, \"BaseName ptr: %p\\n\", (const void *)BaseName);\n    (void)fprintf(fp, \"BaseName str: %s\\n\", (BaseName != NULL) ? BaseName : \"(null)\");\n    (void)fprintf(fp, \"MsgLen: %zu\\n\", MsgLen);\n    (void)fprintf(fp, \"FinalMessage (len %zu): %s\\n\", strlen(FinalMessage), FinalMessage);\n\n    /* Additional contextual note: this probe logs the pointers and strings that\n       can help other agents infer whether string data might be immutable (e.g.,\n       string literals) by examining pointer addresses and content. */\n    (void)fprintf(fp, \"--- end probe ---\\n\\n\");\n\n    (void)fclose(fp);\n}\n\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n        BaseName = NULL;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    /* Insert probe logging here so the composed message and relevant state are\n       recorded for later inspection without changing the original behavior. */\n    UtAssert_Message_Log(MessageType, File, Line, Spec, BaseName, MsgLen, FinalMessage);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n"
}