{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initial computation \"size_t length = strlen(string);\" at the start of UT_DefaultHandler_OS_printf is redundant: the variable length is immediately recomputed (length = strlen(string);) inside the if (status >= 0) branch when that branch is taken, and if status < 0 the subsequently-assigned value is never used. Thus the initial strlen call and assignment are executed but have no effect on program behaviour and can be removed. This constitutes dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2306.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_Message as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_Message code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/2306.txt. */\nstatic void UtAssert_LogProbe(const char *label,\n                              const char *File,\n                              const char *BaseName,\n                              size_t MsgLen,\n                              const char *FinalMessage,\n                              size_t BufSize)\n{\n    FILE *f = fopen(\"/tmp/logs/2306.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Basic context */\n    fprintf(f, \"[%s] File_ptr=%p\", label, (const void *)File);\n    if (File != NULL)\n    {\n        /* limit printed file name length to avoid huge logs */\n        size_t i = 0;\n        fprintf(f, \" File='\");\n        while (File[i] != '\\0' && i < 200)\n        {\n            fputc((int)File[i], f);\n            ++i;\n        }\n        if (File[i] != '\\0')\n        {\n            fprintf(f, \"... (truncated)\");\n        }\n        fprintf(f, \"'\");\n    }\n\n    fprintf(f, \" BaseName_ptr=%p\", (const void *)BaseName);\n    if (BaseName != NULL)\n    {\n        size_t i = 0;\n        fprintf(f, \" BaseName='\");\n        while (BaseName[i] != '\\0' && i < 200)\n        {\n            fputc((int)BaseName[i], f);\n            ++i;\n        }\n        if (BaseName[i] != '\\0')\n        {\n            fprintf(f, \"... (truncated)\");\n        }\n        fprintf(f, \"'\");\n    }\n\n    fprintf(f, \" MsgLen=%zu BufSize=%zu\\n\", MsgLen, BufSize);\n\n    if (FinalMessage != NULL)\n    {\n        /* Print a short preview of FinalMessage (up to 128 chars) */\n        size_t preview = 0;\n        while (preview < 128 && FinalMessage[preview] != '\\0')\n        {\n            ++preview;\n        }\n        fprintf(f, \"[%s] FinalMessage_preview(len=%zu): '\", label, preview);\n        fwrite(FinalMessage, 1, preview, f);\n        if (FinalMessage[preview] != '\\0')\n        {\n            fprintf(f, \"... (truncated)\");\n        }\n        fprintf(f, \"'\\n\");\n    }\n\n    fclose(f);\n}\n\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    /* Log entry and initial state */\n    UtAssert_LogProbe(\"ENTRY\", File, NULL, 0u, NULL, sizeof(FinalMessage));\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n\n        /* Log after basename computation and after formatting the prefix into FinalMessage */\n        UtAssert_LogProbe(\"AFTER_BASENAME\", File, BaseName, MsgLen, FinalMessage, sizeof(FinalMessage));\n    }\n    else\n    {\n        MsgLen = 0;\n\n        /* Log the fact that File was NULL */\n        UtAssert_LogProbe(\"FILE_NULL\", File, NULL, MsgLen, FinalMessage, sizeof(FinalMessage));\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    /* Log after vsnprintf so we can see the final composed message */\n    UtAssert_LogProbe(\"AFTER_VSNPRINTF\", File, BaseName, MsgLen, FinalMessage, sizeof(FinalMessage));\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n"
}