{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strlen(string) without first ensuring that 'string' is non-NULL and points to a NUL-terminated object can read past the bounds of the referenced object. For example, if UT_Hook_GetArgValueByName returns NULL or a pointer to a non-terminated/invalid buffer, strlen(string) will access memory beyond the object and violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2311.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_Message as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_Message code.\n",
  "test_code": "void UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    /* Probe log file to capture control flow and state for Rule 21.17 investigation */\n    {\n        FILE *logfp = fopen(\"/tmp/logs/2311.txt\", \"a\");\n        if (logfp != NULL)\n        {\n            fprintf(logfp, \"UtAssert_Message ENTRY: MessageType=%u, File_ptr=%p, Line=%u, Spec_ptr=%p\\n\",\n                    (unsigned int)MessageType, (const void *)File, (unsigned int)Line, (const void *)Spec);\n            fclose(logfp);\n        }\n    }\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n\n        /* Compose the prefix into FinalMessage as original logic does */\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n\n        /* Log the composed prefix and pointer values. Avoid calling strlen on File directly. */\n        MsgLen = strlen(FinalMessage);\n        {\n            FILE *logfp = fopen(\"/tmp/logs/2311.txt\", \"a\");\n            if (logfp != NULL)\n            {\n                fprintf(logfp, \"After prefix snprintf: BaseName_ptr=%p, FinalMessage_prefix=\\\"%s\\\", MsgLen=%zu\\n\",\n                        (const void *)BaseName, FinalMessage, MsgLen);\n                fclose(logfp);\n            }\n        }\n    }\n    else\n    {\n        MsgLen = 0;\n        {\n            FILE *logfp = fopen(\"/tmp/logs/2311.txt\", \"a\");\n            if (logfp != NULL)\n            {\n                fprintf(logfp, \"No File provided; MsgLen set to 0\\n\");\n                fclose(logfp);\n            }\n        }\n    }\n\n    /* Record beginning of formatted message append */\n    {\n        FILE *logfp = fopen(\"/tmp/logs/2311.txt\", \"a\");\n        if (logfp != NULL)\n        {\n            fprintf(logfp, \"Before vsnprintf: FinalMessage buffer offset=%zu, remaining_space=%zu, Spec_ptr=%p\\n\",\n                    MsgLen, sizeof(FinalMessage) - MsgLen, (const void *)Spec);\n            fclose(logfp);\n        }\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    /* Log the final composed message (FinalMessage is NUL-terminated by snprintf/vsnprintf) */\n    {\n        size_t final_len = strlen(FinalMessage);\n        FILE *logfp = fopen(\"/tmp/logs/2311.txt\", \"a\");\n        if (logfp != NULL)\n        {\n            fprintf(logfp, \"After vsnprintf: FinalMessage=\\\"%s\\\", final_len=%zu\\n\",\n                    FinalMessage, final_len);\n            fclose(logfp);\n        }\n    }\n\n    /* Call the original sink */\n    UT_BSP_DoText(MessageType, FinalMessage);\n\n    /* Final log entry to indicate completion */\n    {\n        FILE *logfp = fopen(\"/tmp/logs/2311.txt\", \"a\");\n        if (logfp != NULL)\n        {\n            fprintf(logfp, \"UtAssert_Message EXIT: Called UT_BSP_DoText with MessageType=%u\\n\\n\",\n                    (unsigned int)MessageType);\n            fclose(logfp);\n        }\n    }\n}\n"
}