{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memset(StubPtr->Data.Buff.BasePtr, 0, StubPtr->Data.Buff.TotalSize) without validating that BasePtr is non-NULL and that TotalSize does not exceed the actual allocated size of the object pointed to by BasePtr. If BasePtr is NULL or points to a buffer smaller than TotalSize (e.g. an incorrectly initialized/ configured return buffer), this call will write beyond the bounds of the object and violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2311.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_Message as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_Message code.\n",
  "test_code": "void UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n    int         VsnRet = 0;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    /* Capture the return of vsnprintf for logging */\n    VsnRet = vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    /*\n     * Probe/logging block: append information about the assertion call to\n     * /tmp/logs/2311.txt so other agents can reproduce and gather evidence.\n     * Keep logging non-intrusive and do not change the behavior of the\n     * original function. If the log file cannot be opened, silently continue.\n     */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2311.txt\", \"a\");\n        if (logf != NULL)\n        {\n            /* Timestamp is useful, but avoid extra dependencies; use a simple marker */\n            fprintf(logf, \"---- UtAssert_Message probe ----\\n\");\n            fprintf(logf, \"MessageType: %u\\n\", (unsigned int)MessageType);\n            if (File != NULL)\n            {\n                fprintf(logf, \"File: '%s'\\n\", File);\n                fprintf(logf, \"BaseName ptr: %p\\n\", (void *)BaseName);\n                fprintf(logf, \"BaseName str: '%s'\\n\", (BaseName != NULL) ? BaseName : \"(null)\");\n            }\n            else\n            {\n                fprintf(logf, \"File: (NULL)\\n\");\n            }\n            fprintf(logf, \"Line: %u\\n\", (unsigned int)Line);\n            fprintf(logf, \"Spec (format) pointer: %p\\n\", (const void *)Spec);\n            fprintf(logf, \"Spec (string): '%s'\\n\", (Spec != NULL) ? Spec : \"(null)\");\n            fprintf(logf, \"Formatted MsgLen (used offset): %zu\\n\", MsgLen);\n            fprintf(logf, \"vsnprintf return (chars that would have been written): %d\\n\", VsnRet);\n            /* Ensure we don't pass a NULL FinalMessage to fprintf */\n            fprintf(logf, \"FinalMessage (resulting): '%s'\\n\", FinalMessage);\n            fprintf(logf, \"---- end probe ----\\n\\n\");\n            fflush(logf);\n            fclose(logf);\n        }\n    }\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n"
}