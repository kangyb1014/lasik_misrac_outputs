{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe memcpy call can copy StubPtr->Data.Buff.TotalSize bytes without validating that the source and destination pointers reference objects at least that large. If StubPtr->Data.Buff.BasePtr or StubPtr->Data.Rvc.Buf.IndirectPtr are NULL or point to buffers smaller than StubPtr->Data.Buff.TotalSize (for example due to an uninitialized or misconfigured stub entry), the memcpy will read from or write to memory beyond the bounds of the referenced objects, violating MISRA C 2023 Rule 21.17. Note: although the code checks that StubPtr->Data.Rvc.ActualSz == StubPtr->Data.Buff.TotalSize, it does not check that the BasePtr/IndirectPtr are non-NULL or that the actual allocated object sizes match these fields, so a violation is still possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2311.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_Message as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_Message code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/2311.txt */\nstatic void UtAssert_Logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2311.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/*\n * Modified UtAssert_Message with lightweight probes that record the control\n * flow and key state values useful to reproduce and investigate the\n * potential memcpy-related buffer bounds scenario reported by another agent.\n * The original behavior and final UT_BSP_DoText call are preserved.\n */\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    /* Entry log: parameters and their pointer values */\n    UtAssert_Logf(\"ENTER UtAssert_Message: MessageType=%u, File=%p, Line=%u, Spec=%p\",\n                  (unsigned)MessageType, (const void *)File, (unsigned)Line, (const void *)Spec);\n\n    if (File != NULL)\n    {\n        /* Log a truncated view of the incoming File string to avoid huge logs */\n        UtAssert_Logf(\"Input File (truncated): %.*s\", 200, File);\n\n        BaseName = strrchr(File, '/');\n        UtAssert_Logf(\"strrchr(File, '/') returned %p\", (const void *)BaseName);\n\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n            UtAssert_Logf(\"No '/' found; using BaseName = File -> %.*s\", 200, BaseName);\n        }\n        else\n        {\n            ++BaseName;\n            UtAssert_Logf(\"Found '/'; using BaseName after slash -> %.*s\", 200, BaseName);\n        }\n\n        /* Compose file:line prefix as in original code */\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n\n        UtAssert_Logf(\"After snprintf prefix -> FinalMessage prefix='%.*s' (MsgLen=%zu)\", (int)MsgLen, FinalMessage, MsgLen);\n    }\n    else\n    {\n        MsgLen = 0;\n        UtAssert_Logf(\"File is NULL; MsgLen set to 0\");\n    }\n\n    va_start(va, Spec);\n\n    /* Log before vsnprintf: available buffer space */\n    UtAssert_Logf(\"Formatting message: buffer remaining=%zu (out of %zu)\",\n                  sizeof(FinalMessage) - MsgLen, (size_t)sizeof(FinalMessage));\n\n    /* Preserve original formatting behavior and capture return value */\n    int ret = vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    if (ret < 0)\n    {\n        UtAssert_Logf(\"vsnprintf returned error (ret=%d)\", ret);\n    }\n    else\n    {\n        /* ret may be larger than available space; log both values */\n        UtAssert_Logf(\"vsnprintf returned ret=%d; stored up to buffer end. FinalMessage (truncated to 240): %.*s\",\n                      ret, 240, FinalMessage);\n    }\n\n    /* Final state log before calling the original sink */\n    UtAssert_Logf(\"EXIT UtAssert_Message: MessageType=%u, FinalMessage_ptr=%p, FinalMessage_len=%zu\",\n                  (unsigned)MessageType, (void *)FinalMessage, strlen(FinalMessage));\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n"
}