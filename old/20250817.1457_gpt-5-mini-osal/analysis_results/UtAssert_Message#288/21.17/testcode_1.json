{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nWhen the format string is \"%s\" or \"%s\\n\" the code fetches the next variadic argument via va_arg(va, const char *), assigns it to 'string', and then calls string handling functions (e.g. strlen and character indexing). If the caller supplies a NULL pointer or a pointer to a character array that is not NUL-terminated (or otherwise not valid for the subsequent strlen/reads), the later calls to strlen and indexing (string[length-1]) will read beyond the bounds of the referenced object (or dereference NULL), causing undefined behaviour. This constitutes a violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2311.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_Message as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_Message code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Helper: append a formatted log line to /tmp/logs/2311.txt */\nstatic void UtAssert_Log(const char *Fmt, ...)\n{\n    FILE *Log = fopen(\"/tmp/logs/2311.txt\", \"a\");\n    if (Log == NULL)\n    {\n        return;\n    }\n\n    va_list Ap;\n    va_start(Ap, Fmt);\n    vfprintf(Log, Fmt, Ap);\n    va_end(Ap);\n\n    fputc('\\n', Log);\n    fclose(Log);\n}\n\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    /* Log entry with basic state prior to formatting */\n    UtAssert_Log(\"UtAssert_Message ENTER: File=%p, BaseName=%s, Line=%u, MsgLen=%zu, Spec=%p, SpecStr=\\\"%s\\\"\",\n                 (const void *)File,\n                 (BaseName != NULL) ? BaseName : \"(null)\",\n                 (unsigned int)Line,\n                 MsgLen,\n                 (const void *)Spec,\n                 (Spec != NULL) ? Spec : \"(null)\");\n\n    va_start(va, Spec);\n\n    /* If the format string contains %s, probe the corresponding variadic arguments\n       by copying the va_list. Do NOT dereference the pointers we obtain; just log\n       their pointer values. This provides evidence of potential NULL pointers\n       or suspicious pointer values without introducing further undefined behaviour. */\n    if (Spec != NULL && strstr(Spec, \"%s\") != NULL)\n    {\n        va_list va_probe;\n        va_copy(va_probe, va);\n\n        const char *p = Spec;\n        int idx = 0;\n        /* Limit probing to a reasonable number to avoid walking too many args */\n        while (p != NULL && (p = strstr(p, \"%s\")) != NULL && idx < 8)\n        {\n            /* Fetch the corresponding argument as a pointer-sized value */\n            const void *arg_ptr = va_arg(va_probe, const void *);\n            UtAssert_Log(\"  Detected %%s at index %d -> arg pointer: %p\",\n                         idx, arg_ptr);\n            ++idx;\n            /* Move past this occurrence to find subsequent ones */\n            p += 2;\n        }\n\n        va_end(va_probe);\n    }\n\n    /* Perform the original formatting into FinalMessage (preserve original behaviour) */\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    /* Log the resulting FinalMessage contents for evidence */\n    UtAssert_Log(\"UtAssert_Message RESULT: MessageType=%u, FinalMessage=\\\"%s\\\"\",\n                 (unsigned int)MessageType,\n                 FinalMessage);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n"
}