{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call BaseName = strrchr(File, '/'); only checks File != NULL but does not ensure File points to a null-terminated character array within its object bounds. If File references a buffer that is not NUL-terminated (or the NUL lies beyond the allocated object), strrchr will scan past the buffer boundary searching for '\\0' and thus access memory beyond the object (undefined behavior). Example: File points to char buf[4] = {'a','b','/','c'} (no terminator) \u2014 strrchr will read past buf[i] searching for '\\0'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2311.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_Message as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_Message code.\n",
  "test_code": "void UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n    FILE       *log = fopen(\"/tmp/logs/2311.txt\", \"a\");\n\n    if (log)\n    {\n        /* Log entry and basic parameters (avoid dereferencing File here) */\n        fprintf(log, \"UtAssert_Message ENTER: MessageType=%u File=%p Line=%u Spec=%p\\n\",\n                (unsigned)MessageType, (void *)File, (unsigned)Line, (const void *)Spec);\n        fflush(log);\n    }\n\n    if (File != NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"File != NULL: about to call strrchr(File, '/')\\n\");\n            fflush(log);\n        }\n\n        /* Original logic preserved: this is the site of the potential over-read if File is not NUL-terminated */\n        BaseName = strrchr(File, '/');\n\n        if (log)\n        {\n            fprintf(log, \"strrchr returned %p\\n\", (void *)BaseName);\n            fflush(log);\n        }\n\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n            if (log)\n            {\n                fprintf(log, \"BaseName set to File (%p)\\n\", (void *)BaseName);\n                fflush(log);\n            }\n        }\n        else\n        {\n            ++BaseName;\n            if (log)\n            {\n                fprintf(log, \"BaseName advanced to %p\\n\", (void *)BaseName);\n                fflush(log);\n            }\n        }\n\n        /* Build the prefix exactly as originally done */\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n\n        if (log)\n        {\n            /* Print the prefix part we have constructed (this reads from BaseName as the original code does) */\n            fprintf(log, \"After prefix snprintf: FinalMessage(prefix)='%s' MsgLen=%zu\\n\", FinalMessage, MsgLen);\n            fflush(log);\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"File == NULL\\n\");\n            fflush(log);\n        }\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    if (log)\n    {\n        fprintf(log, \"About to append formatted message with vsnprintf at offset %zu\\n\", MsgLen);\n        fflush(log);\n    }\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    if (log)\n    {\n        fprintf(log, \"FinalMessage='%s'\\n\", FinalMessage);\n        fprintf(log, \"Calling UT_BSP_DoText(MessageType=%u)\\n\", (unsigned)MessageType);\n        fflush(log);\n        fclose(log);\n    }\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n"
}