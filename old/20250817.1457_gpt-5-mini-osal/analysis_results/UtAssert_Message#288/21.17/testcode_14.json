{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf UT_Hook_GetArgValueByName returns NULL (or a pointer to data that is not NUL-terminated or otherwise invalid), the call strlen(string) will dereference an invalid pointer or scan past the object bounds, causing out-of-bounds access/undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_Message code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2311.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_Message as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_Message:\n```c\nvoid UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    if (File != NULL)\n    {\n        BaseName = strrchr(File, '/');\n        if (BaseName == NULL)\n        {\n            BaseName = File;\n        }\n        else\n        {\n            ++BaseName;\n        }\n        snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        MsgLen = strlen(FinalMessage);\n    }\n    else\n    {\n        MsgLen = 0;\n    }\n\n    va_start(va, Spec);\n    vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_Message code.\n",
  "test_code": "void UtAssert_Message(uint8 MessageType, const char *File, uint32 Line, const char *Spec, ...)\n{\n    va_list     va;\n    char        FinalMessage[256];\n    const char *BaseName;\n    size_t      MsgLen;\n\n    /* Probe log file to capture control flow/state for Rule 21.17 investigation */\n    FILE *log = fopen(\"/tmp/logs/2311.txt\", \"a\");\n    if (log)\n    {\n        /* Log entry and pointers only (do not dereference File here) */\n        fprintf(log, \"UtAssert_Message ENTER: MessageType=%u, File=%p, Line=%u, Spec=%p\\n\",\n                (unsigned int)MessageType, (const void *)File, (unsigned int)Line, (const void *)Spec);\n        fflush(log);\n    }\n\n    if (File != NULL)\n    {\n        if (log) fprintf(log, \"File != NULL, calling strrchr(File, '/')\\n\");\n\n        BaseName = strrchr(File, '/');\n\n        if (BaseName == NULL)\n        {\n            if (log) fprintf(log, \"strrchr returned NULL; using File as BaseName: %p\\n\", (const void *)File);\n            BaseName = File;\n        }\n        else\n        {\n            if (log) fprintf(log, \"strrchr found '/' at %p; BaseName will be %p (after ++)\", (const void *)BaseName, (const void *)(BaseName+1));\n            ++BaseName;\n            if (log) fprintf(log, \" -> BaseName=%p\\n\", (const void *)BaseName);\n        }\n\n        /* Perform the original prefix formatting. Capture snprintf return for diagnostics. */\n        int sn = snprintf(FinalMessage, sizeof(FinalMessage), \"%s:%u:\", BaseName, (unsigned int)Line);\n        if (log)\n        {\n            /* FinalMessage is a locally constructed buffer; safe to print. */\n            fprintf(log, \"snprintf returned %d; FinalMessage prefix=\" \"'%s'\" \"\\n\", sn, FinalMessage);\n            fflush(log);\n        }\n\n        MsgLen = strlen(FinalMessage);\n        if (log) fprintf(log, \"Computed MsgLen=%zu\\n\", MsgLen);\n    }\n    else\n    {\n        if (log) fprintf(log, \"File == NULL; setting MsgLen = 0\\n\");\n        MsgLen = 0;\n    }\n\n    if (log) fprintf(log, \"Preparing to append formatted Spec at offset %zu (remaining %zu)\\n\", MsgLen, sizeof(FinalMessage) - MsgLen);\n\n    va_start(va, Spec);\n    int vsn = vsnprintf(&FinalMessage[MsgLen], sizeof(FinalMessage) - MsgLen, Spec, va);\n    va_end(va);\n\n    if (log)\n    {\n        fprintf(log, \"vsnprintf returned %d; FinalMessage='%s'\\n\", vsn, FinalMessage);\n        fprintf(log, \"About to call UT_BSP_DoText with MessageType=%u\\n\", (unsigned int)MessageType);\n        fflush(log);\n        fclose(log);\n    }\n\n    UT_BSP_DoText(MessageType, FinalMessage);\n}\n"
}