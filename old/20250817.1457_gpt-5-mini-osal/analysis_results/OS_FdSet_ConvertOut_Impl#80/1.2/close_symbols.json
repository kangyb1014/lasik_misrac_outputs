{
  "user_message": "Target function code is:\n```c\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd < 0 || !FD_ISSET(osfd, OS_set))\n                {\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'OS_FdSet_ConvertOut_Impl': {'callees': [], 'callers': ['OS_SelectMultiple_Impl']}, 'OS_SelectMultiple_Impl': {'callees': ['OS_FdSet_ConvertIn_Impl', 'OS_DoSelect', 'OS_FdSet_ConvertOut_Impl'], 'callers': ['OS_SelectMultiple']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "OSAL_INDEX_C (macro)",
    "OS_impl_filehandle_table (declaration and element type)",
    "OS_MAX_NUM_OPEN_FILES (macro)",
    "OS_FdSet (struct/type definition, including object_ids member)",
    "fd_set (type definition)",
    "FD_ISSET (macro or function)",
    "osal_index_t (typedef)",
    "uint8 (typedef)"
  ],
  "explanation": "To determine whether this function uses any compiler language extensions you must inspect the definitions of all macros, typedefs and data structures referenced by the code because extensions commonly appear there (statement-expressions, __typeof__, __attribute__, inline asm, compiler-specific integer types, non-standard cast idioms, etc.). Specifically:\n\n- OSAL_INDEX_C (macro): The macro transforms an integer into an index value used by the code. Macros are a frequent place for compiler extensions (e.g. GCC statement-expressions ({...}), typeof, __extension__, builtins). The macro body must be examined to ensure it does not use any language extensions.\n\n- OS_impl_filehandle_table (declaration and element type): The code accesses OS_impl_filehandle_table[id].fd. The table declaration or the element type/struct could use compiler-specific attributes, packed/packed-bitfields, or extension types. Inspecting its definition ensures no extensions are used in its declaration or the fd member.\n\n- OS_MAX_NUM_OPEN_FILES (macro): Although used as a limit check, the macro definition could be an expression that uses compiler extensions or non-standard constructs; it must be checked.\n\n- OS_FdSet (struct/type definition, including object_ids member): The object_ids member is indexed and bit-manipulated; its type, size and declaration could involve flexible-array members, compiler-specific attributes, or extension types. The exact member type is needed to validate operations and to verify no extensions are present in the type definition.\n\n- fd_set (type definition): fd_set and its internal representation/macros may be implemented with non-standard constructs; the type definition (from the system headers) and any implementation macros must be checked for extensions.\n\n- FD_ISSET (macro or function): This macro/function is used in the conditional. FD_ISSET implementations are macros that sometimes rely on implementation-specific tricks; the definition must be examined for compiler extensions (e.g. statement-expr, typeof, non-standard bit-field usage).\n\n- osal_index_t (typedef): The index type may be a compiler-specific integer type or use attributes; inspect its typedef to ensure no non-standard types or extensions are used.\n\n- uint8 (typedef): This non-standard name (rather than uint8_t) may be a typedef to a compiler-specific width type or use extensions; its definition must be checked.\n\nCollectively, examining these symbols' definitions lets you detect any use of language/compiler extensions in the code paths exercised by OS_FdSet_ConvertOut_Impl."
}