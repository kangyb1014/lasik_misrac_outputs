{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_FdSet_ConvertOut_Impl:\n```c\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd < 0 || !FD_ISSET(osfd, OS_set))\n                {\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nfor (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd < 0 || !FD_ISSET(osfd, OS_set))\n                {\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. There is no statically unreachable code: the outer for iterates over the array bytes, objids is assigned each byte, and the inner while(objids != 0) body is entered whenever that byte has any set bits. The innermost statements (the if tests and the clearing assignment) can be reached whenever the corresponding bit is 1 and id is within range. The loop terminates because objids is right-shifted each iteration (objids is an 8-bit value), so there are no permanently unreachable statements in this fragment."
}