{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_FdSet_ConvertOut_Impl:\n```c\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd < 0 || !FD_ISSET(osfd, OS_set))\n                {\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_FdSet_ConvertOut_Impl:\n#define OSAL_INDEX_C(X) ((osal_index_t)(X))\n...\ntypedef uint32 osal_index_t\n...\n#define OS_MAX_NUM_OPEN_FILES 50\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nfor (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n```\nFocus on the above code fragment and judge whether it violates the rule 17.8 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the expression sizeof(OSAL_set->object_ids) does not modify the pointer parameter OSAL_set nor the object it points to. sizeof does not evaluate or alter the operand, so the function parameter is not modified. A violating scenario would be code that changes the pointer parameter itself, e.g. \u2018OSAL_set = OSAL_set + 1;\u2019 or \u2018++OSAL_set;\u2019 or assigning a different pointer to OSAL_set."
}