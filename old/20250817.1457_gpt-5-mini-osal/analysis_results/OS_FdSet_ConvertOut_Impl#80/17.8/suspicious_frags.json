{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_FdSet_ConvertOut_Impl:\n```c\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd < 0 || !FD_ISSET(osfd, OS_set))\n                {\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_FdSet_ConvertOut_Impl:\n#define OSAL_INDEX_C(X) ((osal_index_t)(X))\n...\ntypedef uint32 osal_index_t\n...\n#define OS_MAX_NUM_OPEN_FILES 50\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)",
    "if (osfd < 0 || !FD_ISSET(osfd, OS_set))",
    "OSAL_set->object_ids[offset] &= ~(1 << bit);",
    "objids = OSAL_set->object_ids[offset];"
  ],
  "explanation": "Only the fragments that read from or write to OSAL_set->object_ids and the use of OS_set in FD_ISSET need investigation for compliance with Rule 17.8 (pointer parameter itself must not be modified; objects it points to may be). There are no assignments to the pointer parameters OS_set or OSAL_set themselves anywhere in the function. Other statements (local variable increments, shifts, casts, index calculations, reads of OS_impl_filehandle_table[id].fd, and loop control) only operate on local variables or on objects via the pointers and do not reassign the parameter pointers, so they do not require further investigation for this rule."
}