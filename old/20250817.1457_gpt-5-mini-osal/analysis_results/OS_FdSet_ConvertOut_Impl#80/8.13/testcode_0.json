{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter OS_set is declared as fd_set *OS_set but it is only read (used in FD_ISSET). Rule 8.13 requires pointers to point to const-qualified types when possible. Therefore OS_set should be declared const fd_set *OS_set. The fragment if (osfd < 0 || !FD_ISSET(osfd, OS_set)) shows OS_set used read\u2011only, so the current non\u2011const pointer violates the rule. (Note: FD_ISSET typically has a non\u2011const parameter, so to keep the safer const signature you may need an explicit cast when calling FD_ISSET: FD_ISSET(osfd, (fd_set *)OS_set), with justification documented.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FdSet_ConvertOut_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/643.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FdSet_ConvertOut_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FdSet_ConvertOut_Impl:\n```c\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd < 0 || !FD_ISSET(osfd, OS_set))\n                {\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_FdSet_ConvertOut_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <sys/select.h>\n\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    FILE *log = fopen(\"/tmp/logs/643.txt\", \"a\");\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_FdSet_ConvertOut_Impl ENTRY: OS_set=%p OSAL_set=%p\\n\", (void *)OS_set, (void *)OSAL_set);\n    }\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        if (log != NULL)\n        {\n            fprintf(log, \" offset=%zu initial_objids=0x%02x\\n\", offset, (unsigned)objids);\n        }\n\n        bit = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if (log != NULL)\n            {\n                fprintf(log, \"  examining bit=%zu id=%u (objids LSB=0x%02x)\\n\", bit, (unsigned)id, (unsigned)(objids & 0x01));\n            }\n\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n\n                /* Log the fd and the result of FD_ISSET; preserve original behavior */\n                int fdset_result = FD_ISSET(osfd, OS_set);\n                if (log != NULL)\n                {\n                    fprintf(log, \"    id=%u bit=%zu osfd=%d FD_ISSET=%d\\n\", (unsigned)id, bit, osfd, fdset_result);\n                }\n\n                if (osfd < 0 || !fdset_result)\n                {\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"    clearing: id=%u offset=%zu bit=%zu reason=(osfd<0=%d FD_ISSET=%d)\\n\",\n                                (unsigned)id, offset, bit, (osfd < 0) ? 1 : 0, fdset_result ? 0 : 1);\n                    }\n\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n                }\n            }\n\n            ++bit;\n            objids >>= 1;\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_FdSet_ConvertOut_Impl EXIT\\n\\n\");\n        fclose(log);\n    }\n}\n"
}