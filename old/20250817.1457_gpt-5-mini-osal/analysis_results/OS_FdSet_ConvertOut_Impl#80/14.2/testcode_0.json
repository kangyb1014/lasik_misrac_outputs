{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for second clause uses sizeof(OSAL_set->object_ids). The loop body modifies OSAL_set->object_ids (OSAL_set->object_ids[offset] &= \u2026). Clause 2 requires the second clause to use only the loop counter (and optional loop-control flags) and not use any other object that is modified in the loop body. Even though sizeof has no side effects, it references the same object that is modified in the loop body, so this violates Rule 14.2 (clause 2).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FdSet_ConvertOut_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/644.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FdSet_ConvertOut_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FdSet_ConvertOut_Impl:\n```c\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd < 0 || !FD_ISSET(osfd, OS_set))\n                {\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_FdSet_ConvertOut_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append textual logs to /tmp/logs/644.txt */\nstatic void OSAL_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/644.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    /* Log entry and the size used in the for-loop condition so that the\n       behaviour and the relation between the second clause and the body\n       modifications can be observed. */\n    OSAL_log(\"ENTER OS_FdSet_ConvertOut_Impl: OS_set=%p OSAL_set=%p sizeof(object_ids)=%zu\",\n             (void *)OS_set, (void *)OSAL_set, (size_t)sizeof(OSAL_set->object_ids));\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        OSAL_log(\"offset %zu: initial objids=0x%02x\", offset, (unsigned int)objids);\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            OSAL_log(\"  offset %zu bit %zu: id=%lu objids=0x%02x\", offset, bit, (unsigned long)id, (unsigned int)objids);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                OSAL_log(\"    candidate id=%lu osfd=%d FD_ISSET=%d\", (unsigned long)id, osfd, FD_ISSET(osfd, OS_set));\n                if (osfd < 0 || !FD_ISSET(osfd, OS_set))\n                {\n                    OSAL_log(\"    clearing bit %zu at offset %zu (before 0x%02x)\", bit, offset, (unsigned int)OSAL_set->object_ids[offset]);\n                    OSAL_set->object_ids[offset] &= ~(1U << bit);\n                    OSAL_log(\"    cleared  bit %zu at offset %zu (after  0x%02x)\", bit, offset, (unsigned int)OSAL_set->object_ids[offset]);\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n        OSAL_log(\"offset %zu: final object_ids[%zu]=0x%02x\", offset, offset, (unsigned int)OSAL_set->object_ids[offset]);\n    }\n\n    OSAL_log(\"EXIT  OS_FdSet_ConvertOut_Impl: OSAL_set=%p\", (void *)OSAL_set);\n}\n"
}