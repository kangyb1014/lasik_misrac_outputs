{
  "user_message": "An agent A claimed that the following OS_FdSet_ConvertOut_Impl code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. .\n</misra_rule>\n<target_code>\nHere is the original code of OS_FdSet_ConvertOut_Impl.\n```c\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd < 0 || !FD_ISSET(osfd, OS_set))\n                {\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The for statement uses sizeof(OSAL_set->object_ids) in its second clause while the loop body modifies elements of that same array via OSAL_set->object_ids[offset] &= ~(1 << bit);. Clause 2 of Rule 14.2 forbids the second clause from using any object that is modified in the loop body, so this is a violation.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    /* Log entry and size of the object_ids array used in the for loop condition */\n    {\n        FILE *f = fopen(\"/tmp/logs/644.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"ENTER: OS_FdSet_ConvertOut_Impl: OS_set=%p OSAL_set=%p sizeof(object_ids)=%zu\\n\",\n                    (void *)OS_set, (void *)OSAL_set, sizeof(OSAL_set->object_ids));\n            fclose(f);\n        }\n    }\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n\n        /* Log per-offset initial state */\n        {\n            FILE *f = fopen(\"/tmp/logs/644.txt\", \"a\");\n            if (f != NULL)\n            {\n                fprintf(f, \"LOOP offset=%zu initial_objids=0x%02x array_val=0x%02x\\n\",\n                        offset, (unsigned)objids, (unsigned)OSAL_set->object_ids[offset]);\n                fclose(f);\n            }\n        }\n\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n\n                /* Log decision factors before potential modification */\n                {\n                    int isset = (osfd >= 0) && FD_ISSET(osfd, OS_set);\n                    FILE *f = fopen(\"/tmp/logs/644.txt\", \"a\");\n                    if (f != NULL)\n                    {\n                        fprintf(f, \"CHECK offset=%zu bit=%zu id=%u osfd=%d isset=%d objids=0x%02x array_before=0x%02x\\n\",\n                                offset, bit, (unsigned)id, osfd, isset, (unsigned)objids, (unsigned)OSAL_set->object_ids[offset]);\n                        fclose(f);\n                    }\n                }\n\n                if (osfd < 0 || !FD_ISSET(osfd, OS_set))\n                {\n                    /* Log the exact mutation and the values before/after */\n                    {\n                        FILE *f = fopen(\"/tmp/logs/644.txt\", \"a\");\n                        if (f != NULL)\n                        {\n                            fprintf(f, \"MUTATE Clearing bit: offset=%zu bit=%zu before=0x%02x\\n\",\n                                    offset, bit, (unsigned)OSAL_set->object_ids[offset]);\n                            fclose(f);\n                        }\n                    }\n\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n\n                    {\n                        FILE *f = fopen(\"/tmp/logs/644.txt\", \"a\");\n                        if (f != NULL)\n                        {\n                            fprintf(f, \"MUTATE After clear: offset=%zu array_after=0x%02x\\n\",\n                                    offset, (unsigned)OSAL_set->object_ids[offset]);\n                            fclose(f);\n                        }\n                    }\n                }\n            }\n\n            ++bit;\n            objids >>= 1;\n        }\n    }\n\n    /* Log exit */\n    {\n        FILE *f = fopen(\"/tmp/logs/644.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"EXIT: OS_FdSet_ConvertOut_Impl\\n\");\n            fclose(f);\n        }\n    }\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_FdSet_ConvertOut_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. Clause 2 of MISRA Rule 14.2 forbids the loop condition from depending on objects that are modified in the loop body (or producing persistent side effects). In this code the second clause is sizeof(OSAL_set->object_ids). sizeof here yields the size of the array type (a compile-time constant for a fixed-size array member) and does not read or mutate the array contents nor produce side effects. The loop bound is therefore invariant with respect to the loop body, so there is no dependence on objects modified by the body. The third clause (++offset) only modifies the loop counter. Therefore the for loop is well-formed per Rule 14.2. (If object_ids were some runtime-sized/VLA situation that made sizeof evaluate at run-time or otherwise depend on a modifiable object, then care would be required; but as written the use of sizeof is safe.)"
}