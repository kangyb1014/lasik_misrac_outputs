{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for statement uses sizeof(OSAL_set->object_ids) in its second clause while the loop body modifies elements of that same array via OSAL_set->object_ids[offset] &= ~(1 << bit);. Clause 2 of Rule 14.2 forbids the second clause from using any object that is modified in the loop body, so this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FdSet_ConvertOut_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/644.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FdSet_ConvertOut_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FdSet_ConvertOut_Impl:\n```c\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd < 0 || !FD_ISSET(osfd, OS_set))\n                {\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_FdSet_ConvertOut_Impl code.\n",
  "test_code": "#include <stdio.h>\n\nstatic void OS_FdSet_ConvertOut_Impl(fd_set *OS_set, OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n\n    /* Log entry and size of the object_ids array used in the for loop condition */\n    {\n        FILE *f = fopen(\"/tmp/logs/644.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"ENTER: OS_FdSet_ConvertOut_Impl: OS_set=%p OSAL_set=%p sizeof(object_ids)=%zu\\n\",\n                    (void *)OS_set, (void *)OSAL_set, sizeof(OSAL_set->object_ids));\n            fclose(f);\n        }\n    }\n\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n\n        /* Log per-offset initial state */\n        {\n            FILE *f = fopen(\"/tmp/logs/644.txt\", \"a\");\n            if (f != NULL)\n            {\n                fprintf(f, \"LOOP offset=%zu initial_objids=0x%02x array_val=0x%02x\\n\",\n                        offset, (unsigned)objids, (unsigned)OSAL_set->object_ids[offset]);\n                fclose(f);\n            }\n        }\n\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n\n                /* Log decision factors before potential modification */\n                {\n                    int isset = (osfd >= 0) && FD_ISSET(osfd, OS_set);\n                    FILE *f = fopen(\"/tmp/logs/644.txt\", \"a\");\n                    if (f != NULL)\n                    {\n                        fprintf(f, \"CHECK offset=%zu bit=%zu id=%u osfd=%d isset=%d objids=0x%02x array_before=0x%02x\\n\",\n                                offset, bit, (unsigned)id, osfd, isset, (unsigned)objids, (unsigned)OSAL_set->object_ids[offset]);\n                        fclose(f);\n                    }\n                }\n\n                if (osfd < 0 || !FD_ISSET(osfd, OS_set))\n                {\n                    /* Log the exact mutation and the values before/after */\n                    {\n                        FILE *f = fopen(\"/tmp/logs/644.txt\", \"a\");\n                        if (f != NULL)\n                        {\n                            fprintf(f, \"MUTATE Clearing bit: offset=%zu bit=%zu before=0x%02x\\n\",\n                                    offset, bit, (unsigned)OSAL_set->object_ids[offset]);\n                            fclose(f);\n                        }\n                    }\n\n                    OSAL_set->object_ids[offset] &= ~(1 << bit);\n\n                    {\n                        FILE *f = fopen(\"/tmp/logs/644.txt\", \"a\");\n                        if (f != NULL)\n                        {\n                            fprintf(f, \"MUTATE After clear: offset=%zu array_after=0x%02x\\n\",\n                                    offset, (unsigned)OSAL_set->object_ids[offset]);\n                            fclose(f);\n                        }\n                    }\n                }\n            }\n\n            ++bit;\n            objids >>= 1;\n        }\n    }\n\n    /* Log exit */\n    {\n        FILE *f = fopen(\"/tmp/logs/644.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"EXIT: OS_FdSet_ConvertOut_Impl\\n\");\n            fclose(f);\n        }\n    }\n}\n"
}