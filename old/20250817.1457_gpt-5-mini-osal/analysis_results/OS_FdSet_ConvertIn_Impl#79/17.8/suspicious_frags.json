{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_FdSet_ConvertIn_Impl:\n```c\nstatic int32 OS_FdSet_ConvertIn_Impl(int *os_maxfd, fd_set *os_set, const OS_FdSet *OSAL_set)\n{\n    size_t       offset;\n    size_t       bit;\n    osal_index_t id;\n    uint8        objids;\n    int          osfd;\n    int32        status;\n\n    status = OS_SUCCESS;\n    for (offset = 0; offset < sizeof(OSAL_set->object_ids); ++offset)\n    {\n        objids = OSAL_set->object_ids[offset];\n        bit    = 0;\n        while (objids != 0)\n        {\n            id = OSAL_INDEX_C((offset * 8) + bit);\n            if ((objids & 0x01) != 0 && id < OS_MAX_NUM_OPEN_FILES)\n            {\n                osfd = OS_impl_filehandle_table[id].fd;\n                if (osfd >= 0)\n                {\n                    if (osfd >= FD_SETSIZE || !OS_impl_filehandle_table[id].selectable)\n                    {\n                        /* out of range of select() implementation */\n                        status = OS_ERR_OPERATION_NOT_SUPPORTED;\n                    }\n                    else\n                    {\n                        FD_SET(osfd, os_set);\n                        if (osfd > *os_maxfd)\n                        {\n                            *os_maxfd = osfd;\n                        }\n                    }\n                }\n            }\n            ++bit;\n            objids >>= 1;\n        }\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No function parameter is assigned to or otherwise modified in this function. Analysis by parameter:\n- int *os_maxfd: only the pointee is modified via '*os_maxfd = osfd;' which is allowed by the rule (the object referred to by a pointer parameter may be modified; the pointer itself must not be changed). The parameter variable 'os_maxfd' is never reassigned.\n- fd_set *os_set: modified only through FD_SET(osfd, os_set), which alters the object pointed to, not the pointer variable itself; this is permitted. The pointer 'os_set' is not reassigned.\n- const OS_FdSet *OSAL_set: treated as read-only; only members are read (sizeof and indexing). The pointer and the pointed-to object are not modified.\nNo other parameters or parameter variables are modified (no assignments like 'os_maxfd = ...', 'os_set = ...', or pointer arithmetic on parameters). Therefore there are no code fragments requiring investigation for potential violations of MISRA C 2023 Rule 17.8."
}