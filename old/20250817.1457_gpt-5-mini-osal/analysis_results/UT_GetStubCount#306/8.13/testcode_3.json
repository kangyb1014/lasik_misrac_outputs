{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer StubPtr is declared as UT_StubTableEntry_t * but in this function it is only used for read access (Count = StubPtr->Data.Rc.Count;). According to MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible. Declaring it as const UT_StubTableEntry_t *StubPtr (and allowing assignment from UT_GetStubEntry) would satisfy the rule. This change is only inappropriate if StubPtr is later used to modify the pointed-to object; given the shown fragment it is not, so the current non-const declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetStubCount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2451.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetStubCount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetStubCount:\n```c\nuint32 UT_GetStubCount(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    uint32               Count;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);\n    if (StubPtr != NULL)\n    {\n        Count = StubPtr->Data.Rc.Count;\n    }\n    else\n    {\n        Count = 0;\n    }\n\n    return Count;\n}\n```\n</target_code>\nPlease provide the modified UT_GetStubCount code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n\nuint32 UT_GetStubCount(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    uint32               Count;\n    FILE *log = NULL;\n\n    /* Preserve original logic: obtain the stub entry */\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);\n\n    /* Attempt to open the log file; if the directory does not exist try to create it */\n    log = fopen(\"/tmp/logs/2451.txt\", \"a\");\n    if (log == NULL)\n    {\n        if ((mkdir(\"/tmp/logs\", 0777) == 0) || (errno == EEXIST))\n        {\n            log = fopen(\"/tmp/logs/2451.txt\", \"a\");\n        }\n    }\n\n    if (StubPtr != NULL)\n    {\n        /* Read the count from the stub as in original implementation */\n        Count = StubPtr->Data.Rc.Count;\n\n        /* Log the control path and relevant state for reproduction of the violation scenario */\n        if (log != NULL)\n        {\n            /* Log function key, pointer value, and the read-only access to the count */\n            fprintf(log, \"UT_GetStubCount: FuncKey=%lu, StubPtr=%p, Read Count=%u\\n\",\n                    (unsigned long)FuncKey,\n                    (void *)StubPtr,\n                    (unsigned)Count);\n            fclose(log);\n        }\n    }\n    else\n    {\n        Count = 0u;\n\n        /* Log the NULL path */\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_GetStubCount: FuncKey=%lu, StubPtr=NULL, Count=0\\n\",\n                    (unsigned long)FuncKey);\n            fclose(log);\n        }\n    }\n\n    return Count;\n}\n"
}