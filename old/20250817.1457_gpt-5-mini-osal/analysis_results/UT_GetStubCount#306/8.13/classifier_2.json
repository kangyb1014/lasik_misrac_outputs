{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UT_GetStubCount:\n```c\nuint32 UT_GetStubCount(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    uint32               Count;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);\n    if (StubPtr != NULL)\n    {\n        Count = StubPtr->Data.Rc.Count;\n    }\n    else\n    {\n        Count = 0;\n    }\n\n    return Count;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (StubPtr != NULL)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The conditional expression itself ('if (StubPtr != NULL)') does not violate MISRA C 2023 Rule 8.13. Rule 8.13 concerns the qualifier of the pointer type, not a null-check. However, the surrounding code reveals a potential violation: StubPtr is declared as 'UT_StubTableEntry_t *StubPtr;' but is only read (StubPtr->Data.Rc.Count). In that case the pointer should be const-qualified (e.g. 'const UT_StubTableEntry_t *StubPtr;') whenever possible. So no violation for the 'if' fragment, but the non-const declaration of StubPtr would violate 8.13 if it is indeed only used for read access."
}