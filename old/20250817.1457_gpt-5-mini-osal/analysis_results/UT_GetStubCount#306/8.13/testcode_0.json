{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer StubPtr is declared as a non-const UT_StubTableEntry_t * but is only used for read access (Count = StubPtr->Data.Rc.Count;). Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible (e.g. const UT_StubTableEntry_t *StubPtr), so the code violates the rule. If UT_GetStubEntry does not need to return a modifiable pointer, it should return a pointer-to-const as well.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetStubCount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2451.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetStubCount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetStubCount:\n```c\nuint32 UT_GetStubCount(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    uint32               Count;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);\n    if (StubPtr != NULL)\n    {\n        Count = StubPtr->Data.Rc.Count;\n    }\n    else\n    {\n        Count = 0;\n    }\n\n    return Count;\n}\n```\n</target_code>\nPlease provide the modified UT_GetStubCount code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe helper: logs control flow and state to /tmp/logs/2451.txt */\nstatic void UT_LogStubAccess(UT_EntryKey_t FuncKey, const UT_StubTableEntry_t *StubPtr, uint32 Count)\n{\n    FILE *f = fopen(\"/tmp/logs/2451.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    /* Log time as epoch seconds to avoid locale/thread issues */\n    fprintf(f, \"[%ld] UT_GetStubCount called: FuncKey=%ld, StubPtr=%p\",\n            (long)t, (long)FuncKey, (void *)StubPtr);\n\n    if (StubPtr != NULL)\n    {\n        /* Log the observed stored count and the value that will be returned */\n        fprintf(f, \", Data.Rc.Count=%lu, Returned Count=%lu\\n\",\n                (unsigned long)StubPtr->Data.Rc.Count,\n                (unsigned long)Count);\n    }\n    else\n    {\n        fprintf(f, \", StubPtr=NULL, Returned Count=%lu\\n\", (unsigned long)Count);\n    }\n\n    fclose(f);\n}\n\nuint32 UT_GetStubCount(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    uint32               Count;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);\n    if (StubPtr != NULL)\n    {\n        Count = StubPtr->Data.Rc.Count;\n    }\n    else\n    {\n        Count = 0;\n    }\n\n    /* Probe: record the control path and state so the non-const pointer usage\n       (StubPtr used only for read access) can be observed in the logs. */\n    UT_LogStubAccess(FuncKey, StubPtr, Count);\n\n    return Count;\n}\n"
}