{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer is used only for read access (StubPtr->Data.Rc.Count) and the function does not modify the pointed-to object, yet it is declared as a non-const pointer: UT_StubTableEntry_t *StubPtr;. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible (for example: const UT_StubTableEntry_t *StubPtr;), so this declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetStubCount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2451.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetStubCount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetStubCount:\n```c\nuint32 UT_GetStubCount(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    uint32               Count;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);\n    if (StubPtr != NULL)\n    {\n        Count = StubPtr->Data.Rc.Count;\n    }\n    else\n    {\n        Count = 0;\n    }\n\n    return Count;\n}\n```\n</target_code>\nPlease provide the modified UT_GetStubCount code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe/logger helper: append control-flow and state information to /tmp/logs/2451.txt */\nstatic void UT_LogStubCount(UT_EntryKey_t FuncKey, const UT_StubTableEntry_t *StubPtr, uint32 Count)\n{\n    FILE *fp = fopen(\"/tmp/logs/2451.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging, do not affect original behavior */\n    }\n\n    /* Log entry and key */\n    fprintf(fp, \"UT_GetStubCount: FuncKey=%llu\\n\", (unsigned long long)FuncKey);\n\n    if (StubPtr != NULL)\n    {\n        /* Log pointer address and observed counts. Do not modify StubPtr. */\n        fprintf(fp, \"  StubPtr=%p\\n\", (void *)StubPtr);\n        fprintf(fp, \"  Observed Count (returned)=%llu\\n\", (unsigned long long)Count);\n        fprintf(fp, \"  Underlying Stub Data Rc.Count=%llu\\n\", (unsigned long long)StubPtr->Data.Rc.Count);\n    }\n    else\n    {\n        fprintf(fp, \"  StubPtr=NULL\\n\");\n        fprintf(fp, \"  Observed Count (returned)=%llu\\n\", (unsigned long long)Count);\n    }\n\n    fclose(fp);\n}\n\nuint32 UT_GetStubCount(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    uint32               Count;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_COUNTER);\n    if (StubPtr != NULL)\n    {\n        Count = StubPtr->Data.Rc.Count;\n    }\n    else\n    {\n        Count = 0;\n    }\n\n    /* Log the control path and the relevant state for reproducing the violation scenario */\n    UT_LogStubCount(FuncKey, StubPtr, Count);\n\n    return Count;\n}\n"
}