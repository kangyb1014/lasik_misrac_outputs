{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetIdByName:\n```c\nint32 OS_MutSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "OS_CHECK_POINTER(sem_name);",
    "OS_CHECK_POINTER(sem_id);",
    "return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);"
  ],
  "explanation": "No direct assignment or modification of the parameter variables sem_id or sem_name appears in the visible code (e.g. no statements like sem_id = ... or sem_name = ...). The only places that could implicitly modify a parameter identifier in this translation unit are macro expansions or inlined code. Therefore the two OS_CHECK_POINTER(...) macro uses must be inspected (their macro definitions could modify the parameter identifiers when expanded). The call to OS_ObjectIdFindByName also should be reviewed because it might be a macro or inline function whose expansion could modify caller-local parameter identifiers; a normal function call cannot change the caller's parameter variable itself. All other lines (local variable declaration, return statement, function header) do not modify the parameter identifiers and thus do not need investigation for Rule 17.8 compliance."
}