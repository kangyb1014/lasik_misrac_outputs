{
  "user_message": "An agent A claimed that the following OS_MutSemGetIdByName code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_MutSemGetIdByName.\n```c\nint32 OS_MutSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If LENGTHCHECK is implemented using functions such as strlen (or other <string.h> routines that scan for a NUL), then a non-NULL sem_name that is not NUL-terminated within OS_MAX_API_NAME bytes will cause the string function to read past the bounds of the object. Example: sem_name points to char buf[4] = {'a','b','c','d'} (no '\\0') and OS_MAX_API_NAME >= 10; LENGTHCHECK(name, OS_MAX_API_NAME, ...) calling strlen(name) will read beyond buf, violating Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_log_entry(const char *sem_name, const void *sem_id)\n{\n    FILE *f = fopen(\"/tmp/logs/1759.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(f, \"[%ld] ENTRY: OS_MutSemGetIdByName called\\n\", (long)t);\n        fprintf(f, \"[%ld]   sem_name pointer: %p\\n\", (long)t, (const void *)sem_name);\n        fprintf(f, \"[%ld]   sem_id pointer:   %p\\n\", (long)t, sem_id);\n        fflush(f);\n        fclose(f);\n    }\n}\nstatic void os_log_exit(const char *sem_name, const void *sem_id, long return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1759.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(f, \"[%ld] EXIT:  OS_MutSemGetIdByName returning\\n\", (long)t);\n        fprintf(f, \"[%ld]   sem_name pointer: %p\\n\", (long)t, (const void *)sem_name);\n        fprintf(f, \"[%ld]   sem_id pointer:   %p\\n\", (long)t, sem_id);\n        fprintf(f, \"[%ld]   return_code:      %ld\\n\", (long)t, return_code);\n        fflush(f);\n        fclose(f);\n    }\n}\n\nint32 OS_MutSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    /* Log entry state. Do NOT dereference sem_name as a C string here; only log its pointer. */\n    os_log_entry(sem_name, (const void *)sem_id);\n\n    /* Preserve original logic */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    /* Log exit state */\n    os_log_exit(sem_name, (const void *)sem_id, (long)return_code);\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\n[1755444514] ENTRY: OS_MutSemGetIdByName called\n[1755444514]   sem_name pointer: 0x7ffd9d882380\n[1755444514]   sem_id pointer:   0x7ffd9d88237c\n[1755444514] EXIT:  OS_MutSemGetIdByName returning\n[1755444514]   sem_name pointer: 0x7ffd9d882380\n[1755444514]   sem_id pointer:   0x7ffd9d88237c\n[1755444514]   return_code:      -13\n[1755444514] ENTRY: OS_MutSemGetIdByName called\n[1755444514]   sem_name pointer: 0x559e7a7086d9\n[1755444514]   sem_id pointer:   0x7ffd9d88237c\n[1755444514] EXIT:  OS_MutSemGetIdByName returning\n[1755444514]   sem_name pointer: 0x559e7a7086d9\n[1755444514]   sem_id pointer:   0x7ffd9d88237c\n[1755444514]   return_code:      -17\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The reported violation is not correct for OS_MutSemGetIdByName itself. The function as shown does not call any of the <string.h> string-handling routines; it only checks for a non-NULL pointer and forwards sem_name to OS_ObjectIdFindByName. MISRA C:2023 Rule 21.17 applies to uses of the standard string functions (e.g. strlen, memcpy, strcpy) that can read beyond an object\u2019s bounds. If a LENGTHCHECK/OS_ObjectIdFindByName implementation used strlen on an unterminated buffer, that implementation would violate Rule 21.17 \u2014 but the violation would be located in that callee/LENGTHCHECK code, not in OS_MutSemGetIdByName. The provided test log shows the function returned error codes rather than causing a crash or demonstrating an out-of-bounds access, so there is no evidence that OS_MutSemGetIdByName itself violates Rule 21.17."
}