{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf LENGTHCHECK is implemented using functions such as strlen (or other <string.h> routines that scan for a NUL), then a non-NULL sem_name that is not NUL-terminated within OS_MAX_API_NAME bytes will cause the string function to read past the bounds of the object. Example: sem_name points to char buf[4] = {'a','b','c','d'} (no '\\0') and OS_MAX_API_NAME >= 10; LENGTHCHECK(name, OS_MAX_API_NAME, ...) calling strlen(name) will read beyond buf, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1759.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetIdByName:\n```c\nint32 OS_MutSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/*\n * Probe functions to log control flow and state information for\n * OS_MutSemGetIdByName. The logs are appended to /tmp/logs/1759.txt.\n *\n * These probes intentionally avoid dereferencing sem_name (no string\n * operations) to avoid introducing further out-of-bounds accesses.\n */\nstatic void os_log_entry(const char *sem_name, const void *sem_id)\n{\n    FILE *f = fopen(\"/tmp/logs/1759.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(f, \"[%ld] ENTRY: OS_MutSemGetIdByName called\\n\", (long)t);\n        fprintf(f, \"[%ld]   sem_name pointer: %p\\n\", (long)t, (const void *)sem_name);\n        fprintf(f, \"[%ld]   sem_id pointer:   %p\\n\", (long)t, sem_id);\n        fflush(f);\n        fclose(f);\n    }\n}\n\nstatic void os_log_exit(const char *sem_name, const void *sem_id, long return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1759.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(f, \"[%ld] EXIT:  OS_MutSemGetIdByName returning\\n\", (long)t);\n        fprintf(f, \"[%ld]   sem_name pointer: %p\\n\", (long)t, (const void *)sem_name);\n        fprintf(f, \"[%ld]   sem_id pointer:   %p\\n\", (long)t, sem_id);\n        fprintf(f, \"[%ld]   return_code:      %ld\\n\", (long)t, return_code);\n        fflush(f);\n        fclose(f);\n    }\n}\n\nint32 OS_MutSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    /* Log entry state. Do NOT dereference sem_name as a C string here; only log its pointer. */\n    os_log_entry(sem_name, (const void *)sem_id);\n\n    /* Preserve original logic */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    /* Log exit state */\n    os_log_exit(sem_name, (const void *)sem_id, (long)return_code);\n\n    return return_code;\n}\n"
}