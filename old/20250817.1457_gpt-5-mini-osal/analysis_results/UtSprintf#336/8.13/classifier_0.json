{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UtSprintf:\n```c\nchar *UtSprintf(const char *Spec, ...)\n{\n    va_list                     Args;\n    static UT_Snprintf_Buffer_t Buf[UT_SNPRINTF_MAX_BUFS];\n    static uint32               TextIndex = 0;\n\n    ++TextIndex;\n    if (TextIndex >= UT_SNPRINTF_MAX_BUFS)\n        TextIndex = 0;\n\n    va_start(Args, Spec);\n    vsnprintf(Buf[TextIndex].Text, sizeof(Buf[TextIndex].Text), Spec, Args);\n    va_end(Args);\n\n    return Buf[TextIndex].Text;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function UtSprintf:\ntypedef struct\n{\n    char Text[UT_SNPRINTF_BUF_SIZE];\n} UT_Snprintf_Buffer_t\n...\n#define UT_SNPRINTF_MAX_BUFS 10\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nchar *UtSprintf(const char *Spec, ...)\n{\n\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The function returns a non-const pointer (char *) to a static text buffer (Buf[...].Text). There is no need for the caller to modify the returned string, so the pointer could and should be const-qualified (const char *UtSprintf(...)) to express immutability. Thus the declaration 'char *UtSprintf(const char *Spec, ...)' violates MISRA C 2023 Rule 8.13. (If the API truly requires callers to modify the returned buffer, then making it non-const would be justified.)"
}