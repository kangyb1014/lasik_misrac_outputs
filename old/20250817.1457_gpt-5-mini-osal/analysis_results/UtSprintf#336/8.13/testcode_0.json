{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function returns a non-const pointer (char *) to a static text buffer (Buf[...].Text). There is no need for the caller to modify the returned string, so the pointer could and should be const-qualified (const char *UtSprintf(...)) to express immutability. Thus the declaration 'char *UtSprintf(const char *Spec, ...)' violates MISRA C 2023 Rule 8.13. (If the API truly requires callers to modify the returned buffer, then making it non-const would be justified.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtSprintf code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2691.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtSprintf as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtSprintf:\n```c\nchar *UtSprintf(const char *Spec, ...)\n{\n    va_list                     Args;\n    static UT_Snprintf_Buffer_t Buf[UT_SNPRINTF_MAX_BUFS];\n    static uint32               TextIndex = 0;\n\n    ++TextIndex;\n    if (TextIndex >= UT_SNPRINTF_MAX_BUFS)\n        TextIndex = 0;\n\n    va_start(Args, Spec);\n    vsnprintf(Buf[TextIndex].Text, sizeof(Buf[TextIndex].Text), Spec, Args);\n    va_end(Args);\n\n    return Buf[TextIndex].Text;\n}\n```\n</target_code>\nPlease provide the modified UtSprintf code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helper: append execution trace and state to /tmp/logs/2691.txt */\nstatic void UtSprintf_Log(const char *stage, const char *spec, unsigned long idx, const char *bufptr)\n{\n    FILE *f = fopen(\"/tmp/logs/2691.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging: do not alter control flow if logging fails */\n    }\n\n    /* Print stage and pointers */\n    (void)fprintf(f, \"[%s] Spec_ptr=%p\", stage, (const void *)spec);\n\n    /* Print a short preview of the format string (escaped, limited length) */\n    if (spec != NULL)\n    {\n        (void)fprintf(f, \", Spec=\\\"\");\n        for (size_t i = 0U; i < 128U && spec[i] != '\\0'; ++i)\n        {\n            unsigned char c = (unsigned char)spec[i];\n            if (c == '\\n') (void)fprintf(f, \"\\\\n\");\n            else if (c == '\\r') (void)fprintf(f, \"\\\\r\");\n            else if (c == '\\t') (void)fprintf(f, \"\\\\t\");\n            else if (c < ' 'U || c == 127U) (void)fprintf(f, \"\\\\x%02X\", c);\n            else (void)fputc(c, f);\n        }\n        (void)fprintf(f, \"\\\"\");\n    }\n\n    (void)fprintf(f, \", TextIndex=%lu, Buf_ptr=%p\", idx, (const void *)bufptr);\n\n    /* Print a preview of the resulting buffer content (escaped, limited length) */\n    if (bufptr != NULL)\n    {\n        (void)fprintf(f, \", Result=\\\"\");\n        for (size_t i = 0U; i < 512U && bufptr[i] != '\\0'; ++i)\n        {\n            unsigned char c = (unsigned char)bufptr[i];\n            if (c == '\\n') (void)fprintf(f, \"\\\\n\");\n            else if (c == '\\r') (void)fprintf(f, \"\\\\r\");\n            else if (c == '\\t') (void)fprintf(f, \"\\\\t\");\n            else if (c < ' 'U || c == 127U) (void)fprintf(f, \"\\\\x%02X\", c);\n            else (void)fputc(c, f);\n        }\n        (void)fprintf(f, \"\\\"\");\n    }\n\n    (void)fprintf(f, \"\\n\");\n    (void)fclose(f);\n}\n\n/* Original function with inserted probes to capture control flow and state. */\nchar *UtSprintf(const char *Spec, ...)\n{\n    va_list                     Args;\n    static UT_Snprintf_Buffer_t Buf[UT_SNPRINTF_MAX_BUFS];\n    static uint32               TextIndex = 0;\n\n    /* Log entry state (before index increment) */\n    UtSprintf_Log(\"entry\", Spec, (unsigned long)TextIndex, NULL);\n\n    ++TextIndex;\n    if (TextIndex >= UT_SNPRINTF_MAX_BUFS)\n        TextIndex = 0;\n\n    /* Log after index selection */\n    UtSprintf_Log(\"after_index\", Spec, (unsigned long)TextIndex, NULL);\n\n    va_start(Args, Spec);\n    vsnprintf(Buf[TextIndex].Text, sizeof(Buf[TextIndex].Text), Spec, Args);\n    va_end(Args);\n\n    /* Log the buffer contents and pointer returned for evidence */\n    UtSprintf_Log(\"after_vsnprintf\", Spec, (unsigned long)TextIndex, Buf[TextIndex].Text);\n\n    return Buf[TextIndex].Text;\n}\n"
}