{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function returns a non-const char * that points to an internal static char array (Buf[TextIndex].Text). There is no need for callers to modify that buffer and the pointer type could be changed to const char * (e.g. const char *UtSprintf(...)) to express non\u2011modifiability. Therefore the fragment violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtSprintf code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2691.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtSprintf as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtSprintf:\n```c\nchar *UtSprintf(const char *Spec, ...)\n{\n    va_list                     Args;\n    static UT_Snprintf_Buffer_t Buf[UT_SNPRINTF_MAX_BUFS];\n    static uint32               TextIndex = 0;\n\n    ++TextIndex;\n    if (TextIndex >= UT_SNPRINTF_MAX_BUFS)\n        TextIndex = 0;\n\n    va_start(Args, Spec);\n    vsnprintf(Buf[TextIndex].Text, sizeof(Buf[TextIndex].Text), Spec, Args);\n    va_end(Args);\n\n    return Buf[TextIndex].Text;\n}\n```\n</target_code>\nPlease provide the modified UtSprintf code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append diagnostic lines to a file for later inspection. */\nstatic void WriteLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2691.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nchar *UtSprintf(const char *Spec, ...)\n{\n    va_list                     Args;\n    static UT_Snprintf_Buffer_t Buf[UT_SNPRINTF_MAX_BUFS];\n    static uint32               TextIndex = 0;\n\n    /* Log entry and incoming parameters */\n    WriteLog(\"UtSprintf ENTER: Spec_ptr=%p Spec=\\\"%s\\\"\", (const void *)Spec, (Spec != NULL) ? Spec : \"<NULL>\");\n    WriteLog(\"TextIndex before increment=%u\", (unsigned)TextIndex);\n\n    ++TextIndex;\n    if (TextIndex >= UT_SNPRINTF_MAX_BUFS)\n    {\n        TextIndex = 0;\n        WriteLog(\"TextIndex wrapped to 0 (was >= UT_SNPRINTF_MAX_BUFS)\");\n    }\n    else\n    {\n        WriteLog(\"TextIndex incremented to %u\", (unsigned)TextIndex);\n    }\n\n    /* Log the target buffer address and size (for evidence of internal static buffer) */\n    WriteLog(\"Target buffer address=%p size_of_text=%zu\", (void *)Buf[TextIndex].Text, sizeof(Buf[TextIndex].Text));\n\n    va_start(Args, Spec);\n    /* Log that we're about to format into the static buffer */\n    WriteLog(\"Calling vsnprintf into Buf[%u].Text\", (unsigned)TextIndex);\n    vsnprintf(Buf[TextIndex].Text, sizeof(Buf[TextIndex].Text), Spec, Args);\n    va_end(Args);\n\n    /* Log the resulting contents and the pointer to be returned */\n    WriteLog(\"After vsnprintf Buf[%u].Text=\\\"%s\\\"\", (unsigned)TextIndex, Buf[TextIndex].Text);\n    WriteLog(\"Returning pointer=%p (points into internal static buffer)\", (void *)Buf[TextIndex].Text);\n\n    return Buf[TextIndex].Text;\n}"
}