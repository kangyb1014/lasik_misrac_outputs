{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UtSprintf:\n```c\nchar *UtSprintf(const char *Spec, ...)\n{\n    va_list                     Args;\n    static UT_Snprintf_Buffer_t Buf[UT_SNPRINTF_MAX_BUFS];\n    static uint32               TextIndex = 0;\n\n    ++TextIndex;\n    if (TextIndex >= UT_SNPRINTF_MAX_BUFS)\n        TextIndex = 0;\n\n    va_start(Args, Spec);\n    vsnprintf(Buf[TextIndex].Text, sizeof(Buf[TextIndex].Text), Spec, Args);\n    va_end(Args);\n\n    return Buf[TextIndex].Text;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function UtSprintf:\ntypedef struct\n{\n    char Text[UT_SNPRINTF_BUF_SIZE];\n} UT_Snprintf_Buffer_t\n...\n#define UT_SNPRINTF_MAX_BUFS 10\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (TextIndex >= UT_SNPRINTF_MAX_BUFS)\n        TextIndex = 0;",
    "vsnprintf(Buf[TextIndex].Text, sizeof(Buf[TextIndex].Text), Spec, Args);",
    "return Buf[TextIndex].Text;",
    "static UT_Snprintf_Buffer_t Buf[UT_SNPRINTF_MAX_BUFS];",
    "typedef struct\n{\n    char Text[UT_SNPRINTF_BUF_SIZE];\n} UT_Snprintf_Buffer_t",
    "#define UT_SNPRINTF_MAX_BUFS 10",
    "static uint32               TextIndex = 0;",
    "++TextIndex;"
  ],
  "explanation": "Fragments not listed above do not need investigation for MISRA C:2023 Rule 21.17 because they do not perform or directly invoke string-handling operations that can write into the buffers. Specifically: the function signature and local declaration of va_list, the calls to va_start and va_end, and the variable initializations do not themselves perform memory writes into the character buffers and therefore cannot by themselves cause out-of-bounds accesses of the buffer objects via string.h functions. The selected fragments cover all sites where buffer storage, indexing/wrapping logic, the size passed to the formatting routine, and the buffer pointer returned are used \u2014 these are the locations that could lead to accesses beyond the bounds and therefore warrant investigation."
}