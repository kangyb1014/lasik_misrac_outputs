{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetIdByName:\n```c\nint32 OS_CondVarGetIdByName(osal_id_t *var_id, const char *var_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_POINTER(var_name);\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_CONDVAR, var_name, var_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "int32 OS_CondVarGetIdByName(osal_id_t *var_id, const char *var_name)",
    "OS_CHECK_POINTER(var_id);",
    "return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_CONDVAR, var_name, var_id);"
  ],
  "explanation": "Fragments not listed do not need investigation for MISRA C 2023 Rule 8.13: var_name is declared as const char * so it is already const-qualified; the macro call OS_CHECK_POINTER(var_name) only checks a pointer (and the pointer is const-qualified); the local variable return_code is not a pointer; the comment and the final return statement deal with non-pointer values. The only pointer usage that could be questioned for missing const qualification is the var_id parameter and its uses (checked and passed into OS_ObjectIdFindByName), which are included above."
}