{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf LENGTHCHECK is implemented using an unbounded string function such as strlen(name) to test length (e.g. if (strlen(name) >= OS_MAX_API_NAME) ...), and the caller provides a char buffer of size OS_MAX_API_NAME that contains no terminating '\\0' (or otherwise the string is not NUL-terminated within the object bounds), the strlen call will read past the bounds of the object and thus violate MISRA C 2023 Rule 21.17. For example, a caller passes a buffer of exactly OS_MAX_API_NAME bytes filled with non-zero characters and no NUL terminator \u2014 strlen will scan beyond the buffer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1087.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetIdByName:\n```c\nint32 OS_CondVarGetIdByName(osal_id_t *var_id, const char *var_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_POINTER(var_name);\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_CONDVAR, var_name, var_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helpers: write logs to /tmp/logs/1087.txt capturing control flow and minimal state */\nstatic void OS_CondVarGetIdByName_LogEntry(const void *var_id, const char *var_name)\n{\n    FILE *f = fopen(\"/tmp/logs/1087.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_CondVarGetIdByName ENTRY\\n\");\n        fprintf(f, \"  var_id ptr = %p\\n\", var_id);\n        fprintf(f, \"  var_name ptr = %p\\n\", (const void *)var_name);\n        /* Log only the first byte (if any) to avoid unbounded reads. This does not attempt\n           to determine string length to avoid introducing an unbounded read here. */\n        if (var_name != NULL)\n        {\n            unsigned char first = (unsigned char) var_name[0];\n            /* print as hex and a printable char (or '.') */\n            fprintf(f, \"  first_byte = 0x%02x ('%c')\\n\", first,\n                    (first >= 32 && first < 127) ? (char)first : '.');\n        }\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nstatic void OS_CondVarGetIdByName_LogExit(int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1087.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_CondVarGetIdByName EXIT\\n\");\n        fprintf(f, \"  return_code = %ld\\n\", (long) return_code);\n        fprintf(f, \"========================================\\n\\n\");\n        fclose(f);\n    }\n}\n\n/* Original function with probes inserted. Original logic is preserved; probes occur\n   after the parameter checks and around the call to OS_ObjectIdFindByName. */\nint32 OS_CondVarGetIdByName(osal_id_t *var_id, const char *var_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_POINTER(var_name);\n\n    /* Log entry state (pointer values and first byte) */\n    OS_CondVarGetIdByName_LogEntry(var_id, var_name);\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_CONDVAR, var_name, var_id);\n\n    /* Log exit state (return code) */\n    OS_CondVarGetIdByName_LogExit(return_code);\n\n    return return_code;\n}\n"
}