{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_CondVarGetIdByName performs only a NULL check on 'var_name' and then forwards it to OS_ObjectIdGetByName/OS_ObjectIdGetBySearch. The called code (via ARGCHECK/LENGTHCHECK and the name-matching function) is likely to use string.h functions such as strlen/strcmp. If the caller provides a non-NULL pointer to a char object that is not NUL-terminated within its actual object bounds (for example a 5-byte buffer {'A','B','C','D','E'} with no '\\0'), those string functions can read past the object\u2019s bounds and cause out-of-bounds accesses. Therefore the code as shown can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1087.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetIdByName:\n```c\nint32 OS_CondVarGetIdByName(osal_id_t *var_id, const char *var_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_POINTER(var_name);\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_CONDVAR, var_name, var_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe helpers: Append control-flow and state info to /tmp/logs/1087.txt. */\nstatic void OS_CondVar_GetName_Probe_Enter(const char *func, const char *var_name, const void *var_id)\n{\n    FILE *f = fopen(\"/tmp/logs/1087.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(f, \"[%ld] %s: ENTER\\n\", (long)t, func);\n        fprintf(f, \"    var_name ptr = %p\\n\", (const void *)var_name);\n        fprintf(f, \"    var_id   ptr = %p\\n\", var_id);\n        fprintf(f, \"    var_name NULL check = %s\\n\", (var_name != NULL) ? \"non-NULL\" : \"NULL\");\n        fprintf(f, \"    NOTE: No NUL-termination check performed here; forwarding pointer as-is.\\n\");\n        fclose(f);\n    }\n}\n\nstatic void OS_CondVar_GetName_Probe_Exit(const char *func, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1087.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(f, \"[%ld] %s: EXIT return_code=%ld\\n\", (long)t, func, (long)return_code);\n        fprintf(f, \"------------------------------------------------------------\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_CondVarGetIdByName(osal_id_t *var_id, const char *var_name)\n{\n    int32 return_code;\n\n    /* Log entry and pointer-state BEFORE parameter macros so we capture the raw pointers\n       even if the macros cause an early return. This does not change original logic. */\n    OS_CondVar_GetName_Probe_Enter(\"OS_CondVarGetIdByName\", var_name, (const void *)var_id);\n\n    /* Check parameters (original logic preserved) */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_POINTER(var_name);\n\n    /* Forward to object-id finder (original logic preserved) */\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_CONDVAR, var_name, var_id);\n\n    /* Log exit with return code and control flow evidence */\n    OS_CondVar_GetName_Probe_Exit(\"OS_CondVarGetIdByName\", return_code);\n\n    return return_code;\n}\n"
}