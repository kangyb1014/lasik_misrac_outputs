{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetIdByName:\n```c\nint32 OS_CondVarGetIdByName(osal_id_t *var_id, const char *var_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(var_id);\n    OS_CHECK_POINTER(var_name);\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_CONDVAR, var_name, var_id);\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CondVarGetIdByName:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n...\ntypedef uint32 osal_id_t\n...\ntypedef int32_t   int32\n...\n#define OS_OBJECT_TYPE_OS_CONDVAR 0x0D\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No language extensions are used in the provided fragments. Specifically:\n- There are no compiler-specific keywords or constructs such as __attribute__, __asm__, asm, typeof, statement-expressions ({ ... }), nested functions, __builtin_* intrinsics, or other vendor extensions visible in the code.\n- All typedefs and types shown (int32, osal_id_t, uint32, int32_t) are normal C typedefs or standard fixed-width integer types, not extensions.\n- Macros (OS_CHECK_POINTER, ARGCHECK, LENGTHCHECK, BUGCHECK) are preprocessor constructs; their usages here are ordinary macro invocations. The definitions/expansions of those macros are not shown; based on the provided code there is no evidence they expand to compiler-specific language extensions. If those macro definitions (or other unseen functions) use compiler extensions, those expansions would need to be reviewed, but the shown call sites themselves do not exhibit any extension usage.\n- Function definitions, parameter lists, return statements, pointer dereference and assignments (e.g., *object_id = token.obj_id) are all standard C.\n- Numeric literal 0x0D and enum/constant usage are standard C.\n\nTherefore there are no code fragments in the supplied snippets that should be flagged for MISRA C 2023 Rule 1.2 (use of language extensions). If you want a deeper check, provide the full definitions of the macros (e.g., BUGCHECK, OS_CHECK_POINTER) and any compiler-specific headers so their expansions can be inspected for extensions."
}