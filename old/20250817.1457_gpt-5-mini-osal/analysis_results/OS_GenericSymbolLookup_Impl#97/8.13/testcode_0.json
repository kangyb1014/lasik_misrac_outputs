{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter dl_handle is declared as void * even though the function does not modify the pointed-to object; per MISRA C 2023 Rule 8.13 it should be const-qualified (const void *) when possible. SymbolAddress is an output parameter and must remain non-const, and SymbolName is already const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericSymbolLookup_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/779.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GenericSymbolLookup_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GenericSymbolLookup_Impl:\n```c\nint32 OS_GenericSymbolLookup_Impl(void *dl_handle, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    const char *dlError; /*  Pointer to error string   */\n    void *      Function;\n    int32       status;\n\n    status = OS_ERROR;\n\n    /*\n     * call dlerror() to clear any prior error that might have occurred.\n     */\n    dlerror();\n    Function = dlsym(dl_handle, SymbolName);\n    dlError  = dlerror();\n\n    /*\n     * For the POSIX DL implementation, if the symbol does not exist\n     * then dlerror() is supposed to return non-null.  This is intended\n     * to differentiate between valid symbols which are actually 0/NULL\n     * and invalid symbols that do not exist.\n     *\n     * Some implementations do _not_ implement this detail, and dlerror()\n     * still returns NULL after looking up an invalid symbol name.\n     *\n     * In practice, this is expected to be used for looking up functions\n     * and as such all valid symbols should be non-NULL, so NULL is considered\n     * an error even if the C library doesn't consider this an error.\n     */\n    if (dlError != NULL)\n    {\n        OS_DEBUG(\"Error: %s: %s\\n\", SymbolName, dlError);\n    }\n    else if (Function == NULL)\n    {\n        /* technically not an error per POSIX, but in practice should not happen */\n        OS_DEBUG(\"Error: %s: dlsym() returned NULL\\n\", SymbolName);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n    }\n\n    *SymbolAddress = (cpuaddr)Function;\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_GenericSymbolLookup_Impl code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging function: append control-flow and state information to /tmp/logs/779.txt */\nstatic void OS_GenericSymbolLookup_LogProbe(const char *stage, void *dl_handle, void *Function, const char *SymbolName, const char *dlError, cpuaddr *SymbolAddress, int32 status)\n{\n    FILE *log = fopen(\"/tmp/logs/779.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"Stage: %s\\n\", stage);\n        fprintf(log, \"  dl_handle: %p\\n\", dl_handle);\n        fprintf(log, \"  Function:  %p\\n\", Function);\n        fprintf(log, \"  SymbolName: %s\\n\", (SymbolName != NULL) ? SymbolName : \"(null)\");\n        fprintf(log, \"  dlError:   %s\\n\", (dlError != NULL) ? dlError : \"(null)\");\n        fprintf(log, \"  SymbolAddress pointer: %p\\n\", (void *)SymbolAddress);\n        fprintf(log, \"  status: %d\\n\", status);\n        fprintf(log, \"----------------------------------------\\n\");\n        (void)fclose(log);\n    }\n}\n\nint32 OS_GenericSymbolLookup_Impl(void *dl_handle, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    const char *dlError; /*  Pointer to error string   */\n    void *      Function;\n    int32       status;\n\n    status = OS_ERROR;\n\n    /* Log entry state */\n    OS_GenericSymbolLookup_LogProbe(\"entry\", dl_handle, NULL, SymbolName, NULL, SymbolAddress, status);\n\n    /*\n     * call dlerror() to clear any prior error that might have occurred.\n     */\n    dlerror();\n\n    Function = dlsym(dl_handle, SymbolName);\n    dlError  = dlerror();\n\n    /* Log result of dlsym/dlerror */\n    OS_GenericSymbolLookup_LogProbe(\"after_dlsym\", dl_handle, Function, SymbolName, dlError, SymbolAddress, status);\n\n    /*\n     * For the POSIX DL implementation, if the symbol does not exist\n     * then dlerror() is supposed to return non-null.  This is intended\n     * to differentiate between valid symbols which are actually 0/NULL\n     * and invalid symbols that do not exist.\n     *\n     * Some implementations do _not_ implement this detail, and dlerror()\n     * still returns NULL after looking up an invalid symbol name.\n     *\n     * In practice, this is expected to be used for looking up functions\n     * and as such all valid symbols should be non-NULL, so NULL is considered\n     * an error even if the C library doesn't consider this an error.\n     */\n    if (dlError != NULL)\n    {\n        OS_DEBUG(\"Error: %s: %s\\n\", SymbolName, dlError);\n    }\n    else if (Function == NULL)\n    {\n        /* technically not an error per POSIX, but in practice should not happen */\n        OS_DEBUG(\"Error: %s: dlsym() returned NULL\\n\", SymbolName);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n    }\n\n    /* Log decision before writing the output parameter */\n    OS_GenericSymbolLookup_LogProbe(\"before_assign\", dl_handle, Function, SymbolName, dlError, SymbolAddress, status);\n\n    *SymbolAddress = (cpuaddr)Function;\n\n    /* Log final state after assignment */\n    OS_GenericSymbolLookup_LogProbe(\"after_assign\", dl_handle, Function, SymbolName, dlError, SymbolAddress, status);\n\n    return status;\n}\n"
}