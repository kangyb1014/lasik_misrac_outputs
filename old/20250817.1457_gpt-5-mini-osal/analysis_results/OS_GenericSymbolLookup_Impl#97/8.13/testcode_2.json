{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'Function' is declared as void * and is assigned the result of dlsym(dl_handle, SymbolName). Since the code does not modify the pointed-to object, MISRA C 2023 Rule 8.13 requires the pointer to be const-qualified (e.g., const void *Function). Thus the assignment 'Function = dlsym(dl_handle, SymbolName);' demonstrates a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericSymbolLookup_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/779.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GenericSymbolLookup_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GenericSymbolLookup_Impl:\n```c\nint32 OS_GenericSymbolLookup_Impl(void *dl_handle, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    const char *dlError; /*  Pointer to error string   */\n    void *      Function;\n    int32       status;\n\n    status = OS_ERROR;\n\n    /*\n     * call dlerror() to clear any prior error that might have occurred.\n     */\n    dlerror();\n    Function = dlsym(dl_handle, SymbolName);\n    dlError  = dlerror();\n\n    /*\n     * For the POSIX DL implementation, if the symbol does not exist\n     * then dlerror() is supposed to return non-null.  This is intended\n     * to differentiate between valid symbols which are actually 0/NULL\n     * and invalid symbols that do not exist.\n     *\n     * Some implementations do _not_ implement this detail, and dlerror()\n     * still returns NULL after looking up an invalid symbol name.\n     *\n     * In practice, this is expected to be used for looking up functions\n     * and as such all valid symbols should be non-NULL, so NULL is considered\n     * an error even if the C library doesn't consider this an error.\n     */\n    if (dlError != NULL)\n    {\n        OS_DEBUG(\"Error: %s: %s\\n\", SymbolName, dlError);\n    }\n    else if (Function == NULL)\n    {\n        /* technically not an error per POSIX, but in practice should not happen */\n        OS_DEBUG(\"Error: %s: dlsym() returned NULL\\n\", SymbolName);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n    }\n\n    *SymbolAddress = (cpuaddr)Function;\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_GenericSymbolLookup_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <dlfcn.h>\n\n/* Minimal types/constants to allow standalone compilation.\n   These are provided as variables/typedefs (not macros) to avoid\n   introducing macro definitions as requested. In the real project\n   these would come from the project headers. */\ntypedef int32_t int32;\ntypedef uintptr_t cpuaddr;\nstatic const int32 OS_ERROR  = -1;\nstatic const int32 OS_SUCCESS = 0;\n\n/* Provide a simple OS_DEBUG function so the code is self-contained.\n   It appends the same messages to the probe log for convenience. */\nstatic void OS_DEBUG(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *fp = fopen(\"/tmp/logs/779.txt\", \"a\");\n\n    if (fp != NULL)\n    {\n        va_start(ap, fmt);\n        vfprintf(fp, fmt, ap);\n        va_end(ap);\n        fclose(fp);\n    }\n}\n\n/* Probe helper: write a formatted line to the probe log file. */\nstatic void probe_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *fp = fopen(\"/tmp/logs/779.txt\", \"a\");\n\n    if (fp == NULL)\n    {\n        /* If the probe log cannot be opened, attempt nothing further. */\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    /* Ensure the line is flushed for immediate evidence collection. */\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_GenericSymbolLookup_Impl(void *dl_handle, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    const char *dlError; /*  Pointer to error string   */\n    void *      Function;\n    int32       status;\n\n    status = OS_ERROR;\n\n    /* Log entry and input state */\n    probe_log(\"ENTER: OS_GenericSymbolLookup_Impl dl_handle=%p SymbolName=%s\\n\",\n              dl_handle,\n              (SymbolName != NULL) ? SymbolName : \"(null)\");\n\n    /*\n     * call dlerror() to clear any prior error that might have occurred.\n     */\n    dlerror();\n\n    /* Record that dlerror() was called to clear prior error */\n    probe_log(\"ACTION: cleared prior dlerror() state\\n\");\n\n    Function = dlsym(dl_handle, SymbolName);\n\n    /* Log raw result returned from dlsym */\n    probe_log(\"dlsym returned Function=%p for SymbolName=%s\\n\",\n              Function,\n              (SymbolName != NULL) ? SymbolName : \"(null)\");\n\n    dlError  = dlerror();\n\n    /* Log the dlerror() result */\n    probe_log(\"dlerror() returned: %s\\n\", (dlError != NULL) ? dlError : \"(null)\");\n\n    /*\n     * For the POSIX DL implementation, if the symbol does not exist\n     * then dlerror() is supposed to return non-null.  This is intended\n     * to differentiate between valid symbols which are actually 0/NULL\n     * and invalid symbols that do not exist.\n     *\n     * Some implementations do _not_ implement this detail, and dlerror()\n     * still returns NULL after looking up an invalid symbol name.\n     *\n     * In practice, this is expected to be used for looking up functions\n     * and as such all valid symbols should be non-NULL, so NULL is considered\n     * an error even if the C library doesn't consider this an error.\n     */\n    if (dlError != NULL)\n    {\n        OS_DEBUG(\"Error: %s: %s\\n\", SymbolName, dlError);\n        probe_log(\"PATH: error (dlError non-null) for SymbolName=%s dlError=%s\\n\",\n                  (SymbolName != NULL) ? SymbolName : \"(null)\", dlError);\n    }\n    else if (Function == NULL)\n    {\n        /* technically not an error per POSIX, but in practice should not happen */\n        OS_DEBUG(\"Error: %s: dlsym() returned NULL\\n\", SymbolName);\n        probe_log(\"PATH: error (Function == NULL) for SymbolName=%s\\n\",\n                  (SymbolName != NULL) ? SymbolName : \"(null)\");\n    }\n    else\n    {\n        status = OS_SUCCESS;\n        probe_log(\"PATH: success for SymbolName=%s Function=%p -> status=OS_SUCCESS\\n\",\n                  (SymbolName != NULL) ? SymbolName : \"(null)\", Function);\n    }\n\n    /* Record the address being assigned (evidence of the pointer value captured) */\n    *SymbolAddress = (cpuaddr)Function;\n    probe_log(\"ASSIGN: *SymbolAddress set to %p (from Function=%p) final status=%d\\n\",\n              (void *)(uintptr_t)(*SymbolAddress), Function, (int)status);\n\n    probe_log(\"EXIT: OS_GenericSymbolLookup_Impl returning status=%d\\n\", (int)status);\n\n    return status;\n}\n"
}