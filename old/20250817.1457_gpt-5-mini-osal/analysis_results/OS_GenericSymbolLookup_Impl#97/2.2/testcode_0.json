{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe empty macro causes executed no-op debug statements that can be removed without changing program behaviour. E.g. in OS_GenericSymbolLookup_Impl the call\n    OS_DEBUG(\"Error: %s: %s\\n\", SymbolName, dlError);\nexpands (with #define OS_DEBUG(__VA_ARGS__)) to an empty statement (\u201c;\u201d), which is an executed no-op. Removing those OS_DEBUG calls would not change the functional behaviour of the program, so they constitute dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericSymbolLookup_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/778.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GenericSymbolLookup_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GenericSymbolLookup_Impl:\n```c\nint32 OS_GenericSymbolLookup_Impl(void *dl_handle, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    const char *dlError; /*  Pointer to error string   */\n    void *      Function;\n    int32       status;\n\n    status = OS_ERROR;\n\n    /*\n     * call dlerror() to clear any prior error that might have occurred.\n     */\n    dlerror();\n    Function = dlsym(dl_handle, SymbolName);\n    dlError  = dlerror();\n\n    /*\n     * For the POSIX DL implementation, if the symbol does not exist\n     * then dlerror() is supposed to return non-null.  This is intended\n     * to differentiate between valid symbols which are actually 0/NULL\n     * and invalid symbols that do not exist.\n     *\n     * Some implementations do _not_ implement this detail, and dlerror()\n     * still returns NULL after looking up an invalid symbol name.\n     *\n     * In practice, this is expected to be used for looking up functions\n     * and as such all valid symbols should be non-NULL, so NULL is considered\n     * an error even if the C library doesn't consider this an error.\n     */\n    if (dlError != NULL)\n    {\n        OS_DEBUG(\"Error: %s: %s\\n\", SymbolName, dlError);\n    }\n    else if (Function == NULL)\n    {\n        /* technically not an error per POSIX, but in practice should not happen */\n        OS_DEBUG(\"Error: %s: dlsym() returned NULL\\n\", SymbolName);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n    }\n\n    *SymbolAddress = (cpuaddr)Function;\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_GenericSymbolLookup_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <dlfcn.h>\n\n/*\n * Probe logger for OS_GenericSymbolLookup_Impl\n * Appends human-readable trace lines into /tmp/logs/778.txt so that the\n * control flow and state leading to the OS_DEBUG calls can be reproduced.\n * This helper is intentionally local (static) to avoid changing linkage.\n */\nstatic void OS_GenericSymbolLookup_Log(const char *event, const char *SymbolName, const void *Function, const char *dlError, long status)\n{\n    FILE *f = NULL;\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    char timestr[64];\n\n    /* Ensure directory exists; ignore error if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/778.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, silently return to avoid altering behavior. */\n        return;\n    }\n\n    /* Format time safely */\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n        {\n            timestr[0] = '\\0';\n        }\n    }\n    else\n    {\n        timestr[0] = '\\0';\n    }\n\n    fprintf(f, \"%s - EVENT=%s; SymbolName=%s; Function=%p; dlError=%s; status=%ld\\n\",\n            timestr,\n            (event != NULL) ? event : \"(null)\",\n            (SymbolName != NULL) ? SymbolName : \"(null)\",\n            Function,\n            (dlError != NULL) ? dlError : \"(null)\",\n            status);\n\n    fflush(f);\n    (void)fclose(f);\n}\n\nint32 OS_GenericSymbolLookup_Impl(void *dl_handle, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    const char *dlError; /*  Pointer to error string   */\n    void *      Function;\n    int32       status;\n\n    status = OS_ERROR;\n\n    /*\n     * call dlerror() to clear any prior error that might have occurred.\n     */\n    dlerror();\n    Function = dlsym(dl_handle, SymbolName);\n    dlError  = dlerror();\n\n    /* Log state immediately after lookup so we capture whether dlerror() was set */\n    OS_GenericSymbolLookup_Log(\"after_dlsym\", SymbolName, Function, dlError, (long)status);\n\n    /*\n     * For the POSIX DL implementation, if the symbol does not exist\n     * then dlerror() is supposed to return non-null.  This is intended\n     * to differentiate between valid symbols which are actually 0/NULL\n     * and invalid symbols that do not exist.\n     *\n     * Some implementations do _not_ implement this detail, and dlerror()\n     * still returns NULL after looking up an invalid symbol name.\n     *\n     * In practice, this is expected to be used for looking up functions\n     * and as such all valid symbols should be non-NULL, so NULL is considered\n     * an error even if the C library doesn't consider this an error.\n     */\n    if (dlError != NULL)\n    {\n        /* Log that we hit the dlerror != NULL branch */\n        OS_GenericSymbolLookup_Log(\"dlerror_nonnull_branch\", SymbolName, Function, dlError, (long)status);\n\n        OS_DEBUG(\"Error: %s: %s\\n\", SymbolName, dlError);\n    }\n    else if (Function == NULL)\n    {\n        /* technically not an error per POSIX, but in practice should not happen */\n        OS_GenericSymbolLookup_Log(\"function_null_branch\", SymbolName, Function, dlError, (long)status);\n\n        OS_DEBUG(\"Error: %s: dlsym() returned NULL\\n\", SymbolName);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n\n        /* Log that we will return success */\n        OS_GenericSymbolLookup_Log(\"success_branch\", SymbolName, Function, dlError, (long)status);\n    }\n\n    *SymbolAddress = (cpuaddr)Function;\n\n    /* Final state before return -- useful to show that OS_DEBUG may have been a no-op */\n    OS_GenericSymbolLookup_Log(\"return\", SymbolName, Function, dlError, (long)status);\n\n    return status;\n}\n"
}