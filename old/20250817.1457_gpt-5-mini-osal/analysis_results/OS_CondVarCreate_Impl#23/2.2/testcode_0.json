{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe OS_DEBUG(...) invocation expands to nothing (#define OS_DEBUG(__VA_ARGS__) ), leaving only an empty/null statement in the error path (e.g. after pthread_cond_init fails). That null statement is executed but has no effect and could be removed without changing program behaviour, so it constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarCreate_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/186.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarCreate_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarCreate_Impl:\n```c\nint32 OS_CondVarCreate_Impl(const OS_object_token_t *token, uint32 options)\n{\n    int32                              final_status;\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    final_status = OS_SUCCESS;\n    impl         = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    /*\n    ** create the underlying mutex\n    */\n    status = pthread_mutex_init(&impl->mut, NULL);\n    if (status != 0)\n    {\n        OS_DEBUG(\"Error: CondVar mutex could not be created. ID = %lu: %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(status));\n        final_status = OS_ERROR;\n    }\n    else\n    {\n        /*\n        ** create the condvar\n        */\n        status = pthread_cond_init(&impl->cv, NULL);\n        if (status != 0)\n        {\n            pthread_mutex_destroy(&impl->mut);\n\n            OS_DEBUG(\"Error: CondVar could not be created. ID = %lu: %s\\n\",\n                     OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(status));\n            final_status = OS_ERROR;\n        }\n    }\n\n    return final_status;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarCreate_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper - appends formatted messages to /tmp/logs/186.txt */\nstatic void os_probe_printf(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/186.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_CondVarCreate_Impl(const OS_object_token_t *token, uint32 options)\n{\n    int32                              final_status;\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    /* Log entry and initial parameters */\n    os_probe_printf(\"OS_CondVarCreate_Impl ENTRY: token=%p options=%u\", (void *)token, (unsigned)options);\n\n    final_status = OS_SUCCESS;\n    impl         = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    /*\n    ** create the underlying mutex\n    */\n    status = pthread_mutex_init(&impl->mut, NULL);\n    os_probe_printf(\"pthread_mutex_init called: returned status=%d\", status);\n    if (status != 0)\n    {\n        /* Capture same info the original OS_DEBUG reported so it is available even if OS_DEBUG is a no-op */\n        os_probe_printf(\"Error: CondVar mutex could not be created. ID=%lu strerror=%s\",\n                        OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(status));\n\n        OS_DEBUG(\"Error: CondVar mutex could not be created. ID = %lu: %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(status));\n\n        final_status = OS_ERROR;\n        os_probe_printf(\"Setting final_status=%d due to mutex init failure\", final_status);\n    }\n    else\n    {\n        /*\n        ** create the condvar\n        */\n        status = pthread_cond_init(&impl->cv, NULL);\n        os_probe_printf(\"pthread_cond_init called: returned status=%d\", status);\n        if (status != 0)\n        {\n            pthread_mutex_destroy(&impl->mut);\n            os_probe_printf(\"pthread_mutex_destroy called after condvar init failure\");\n\n            /* Capture same info the original OS_DEBUG reported so it is available even if OS_DEBUG is a no-op */\n            os_probe_printf(\"Error: CondVar could not be created. ID=%lu strerror=%s\",\n                            OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(status));\n\n            OS_DEBUG(\"Error: CondVar could not be created. ID = %lu: %s\\n\",\n                     OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(status));\n\n            final_status = OS_ERROR;\n            os_probe_printf(\"Setting final_status=%d due to condvar init failure\", final_status);\n        }\n        else\n        {\n            os_probe_printf(\"Mutex and CondVar successfully initialized for ID=%lu\",\n                            OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)));\n        }\n    }\n\n    os_probe_printf(\"OS_CondVarCreate_Impl EXIT: final_status=%d\", final_status);\n    return final_status;\n}\n"
}