{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn the switch default label the code executes 'return OS_ERR_BAD_ADDRESS;' followed by 'break;'. The 'break' statement is unreachable because control has already returned from the function, so an unreachable statement exists.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrToString_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/857.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAddrToString_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrToString_Impl:\n```c\nint32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    const void *                  addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    if (inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen) == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAddrToString_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <stddef.h>\n\n/* Probe helper: append a single log line to /tmp/logs/857.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/857.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    const void *                  addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    probe_log(\"OS_SocketAddrToString_Impl: entry buffer=%p buflen=%zu Addr=%p\", (void *)buffer, buflen, (const void *)Addr);\n    probe_log(\"OS_SocketAddrToString_Impl: interpreted family=%d\", (int)Accessor->sa.sa_family);\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            probe_log(\"switch: AF_INET selected, addrbuffer=%p\", addrbuffer);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            probe_log(\"switch: AF_INET6 selected, addrbuffer=%p\", addrbuffer);\n            break;\n#endif\n        default:\n            probe_log(\"switch: default branch taken, bad family=%d -- returning OS_ERR_BAD_ADDRESS\", (int)Accessor->sa.sa_family);\n            return OS_ERR_BAD_ADDRESS;\n            break; /* unreachable: left in place to preserve original code shape */\n    }\n\n    probe_log(\"calling inet_ntop with family=%d addrbuffer=%p buflen=%zu\", (int)Accessor->sa.sa_family, addrbuffer, buflen);\n    if (inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen) == NULL)\n    {\n        probe_log(\"inet_ntop: failed errno=%d\", errno);\n        return OS_ERROR;\n    }\n\n    probe_log(\"inet_ntop: success, result=\\\"%s\\\"\", buffer);\n\n    return OS_SUCCESS;\n}\n"
}