{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 the call to memchr(s, 0, maxlen) can read up to maxlen bytes starting at s. The function itself does not guarantee that the object referenced by s is at least maxlen bytes long, so memchr may access beyond the bounds of the actual object. Example violating scenario: char buf[16]; /* only 16 bytes valid */ OS_strnlen(&buf[8], sizeof(buf)); /* memchr will search 16 bytes from &buf[8], overrunning the 16-byte object */. In general, if a caller passes a pointer to an object smaller than maxlen (or an interior pointer) this will cause out\u2011of\u2011bounds accesses.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrToString_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/863.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAddrToString_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrToString_Impl:\n```c\nint32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    const void *                  addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    if (inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen) == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAddrToString_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <time.h>\n#include <unistd.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logging helper - appends information to /tmp/logs/863.txt */\nstatic void OS_SocketAddrToString_LogProbe(const char *stage,\n                                           const void *AddrPtr,\n                                           const void *AccessorPtr,\n                                           int family,\n                                           const void *addrbuffer,\n                                           size_t buflen,\n                                           const char *buffer_ptr,\n                                           const void *inet_ntop_ret,\n                                           int errnum)\n{\n    FILE *f = fopen(\"/tmp/logs/863.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t now = time(NULL);\n    pid_t pid = getpid();\n\n    fprintf(f, \"[%ld] pid=%d stage=%s Addr=%p Accessor=%p family=%d addrbuffer=%p buflen=%zu buffer=%p inet_ntop_ret=%p errno=%d\\n\",\n            (long)now, (int)pid, stage, AddrPtr, AccessorPtr, family, addrbuffer, buflen, (const void *)buffer_ptr, inet_ntop_ret, errnum);\n\n    fclose(f);\n}\n\nint32 OS_SocketAddrToString_Impl(char *buffer, size_t buflen, const OS_SockAddr_t *Addr)\n{\n    const void *                  addrbuffer;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    /* Keep original logic: create accessor to the AddrData */\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    /* Log initial state after obtaining accessor */\n    OS_SocketAddrToString_LogProbe(\"after_accessor\", (const void *)Addr, (const void *)Accessor,\n                                   (int)Accessor->sa.sa_family, NULL, buflen, buffer, NULL, 0);\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            /* Log the bad address family before returning */\n            OS_SocketAddrToString_LogProbe(\"bad_family\", (const void *)Addr, (const void *)Accessor,\n                                           (int)Accessor->sa.sa_family, NULL, buflen, buffer, NULL, 0);\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    /* Log chosen addrbuffer just before calling inet_ntop */\n    OS_SocketAddrToString_LogProbe(\"before_inet_ntop\", (const void *)Addr, (const void *)Accessor,\n                                   (int)Accessor->sa.sa_family, addrbuffer, buflen, buffer, NULL, 0);\n\n    if (inet_ntop(Accessor->sa.sa_family, addrbuffer, buffer, buflen) == NULL)\n    {\n        /* Log inet_ntop failure with errno */\n        OS_SocketAddrToString_LogProbe(\"inet_ntop_failed\", (const void *)Addr, (const void *)Accessor,\n                                       (int)Accessor->sa.sa_family, addrbuffer, buflen, buffer, NULL, errno);\n        return OS_ERROR;\n    }\n\n    /* Log success and the resulting buffer pointer (do not attempt to read buffer contents to avoid additional risks) */\n    OS_SocketAddrToString_LogProbe(\"inet_ntop_success\", (const void *)Addr, (const void *)Accessor,\n                                   (int)Accessor->sa.sa_family, addrbuffer, buflen, buffer, (const void *)buffer, 0);\n\n    return OS_SUCCESS;\n}\n"
}