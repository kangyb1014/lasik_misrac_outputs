{
  "user_message": "Target function code is:\n```c\nuint32 OS_BSP_GetResourceTypeConfig(uint32 ResourceType)\n{\n    uint32 ConfigOptionValue;\n\n    if (ResourceType < OS_OBJECT_TYPE_USER)\n    {\n        ConfigOptionValue = OS_BSP_Global.ResoureConfig[ResourceType];\n    }\n    else\n    {\n        ConfigOptionValue = 0;\n    }\n\n    return ConfigOptionValue;\n}\n```\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "uint32 (typedef/definition)",
    "OS_OBJECT_TYPE_USER (macro or enum definition)",
    "OS_BSP_Global (declaration and/or definition of the global variable)",
    "Type/struct definition of OS_BSP_Global (complete struct so the ResoureConfig member is visible)",
    "Declaration/definition of ResoureConfig member (type, array size, qualifiers, and any attributes)"
  ],
  "explanation": "You must inspect these symbols to determine whether any compiler language extensions are used in the target function:\n\n- uint32 (typedef/definition): The underlying typedef may use compiler-specific types or attributes (for example, compiler built-ins, non-standard types, or __attribute__ annotations). MISRA checks must confirm this is a plain standard typedef and not an extension.\n\n- OS_OBJECT_TYPE_USER (macro or enum definition): The constant could be defined in a way that uses non-standard extensions (e.g., unusual enum extensions or macros invoking compiler-specific constructs). Its definition is needed to ensure no extension is used in the comparison.\n\n- OS_BSP_Global (declaration and/or definition of the global variable): The global itself may carry extensions (section/visibility attributes, storage-class extensions). You need its declaration to see such annotations.\n\n- Type/struct definition of OS_BSP_Global (complete struct so the ResoureConfig member is visible): The struct may contain flexible/zero-length arrays, bit-fields with non-standard widths, or attribute-specifiers on the struct that are compiler extensions. These affect whether the code relies on extensions.\n\n- Declaration/definition of ResoureConfig member (type, array size, qualifiers, and any attributes): The array member's exact type (e.g., zero-length array, flexible array, VLA, pointer, or decorated with GCC/Clang attributes like aligned/section/packed) determines whether the indexing ResoureConfig[ResourceType] uses language extensions. Inspecting its declaration is required to detect such extensions.\n\nCollecting these symbols lets the next analyst detect any compiler-specific attributes, zero-length array usage, non-standard typedefs, or other language extensions that would violate the MISRA rule."
}