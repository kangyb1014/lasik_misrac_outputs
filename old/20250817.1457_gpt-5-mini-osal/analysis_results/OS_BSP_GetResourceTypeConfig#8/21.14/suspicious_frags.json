{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_BSP_GetResourceTypeConfig:\n```c\nuint32 OS_BSP_GetResourceTypeConfig(uint32 ResourceType)\n{\n    uint32 ConfigOptionValue;\n\n    if (ResourceType < OS_OBJECT_TYPE_USER)\n    {\n        ConfigOptionValue = OS_BSP_Global.ResoureConfig[ResourceType];\n    }\n    else\n    {\n        ConfigOptionValue = 0;\n    }\n\n    return ConfigOptionValue;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_BSP_GetResourceTypeConfig:\nextern OS_BSP_GlobalData_t OS_BSP_Global\n...\n#define OS_OBJECT_TYPE_USER 0x10\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "MISRA C 2023 Rule 21.14 prohibits using memcmp to compare null-terminated strings. The provided function OS_BSP_GetResourceTypeConfig contains no calls to memcmp or any other string-comparison functions (strcmp, strncmp, etc.), and it manipulates only integer values: it compares the unsigned integer ResourceType with the integer constant OS_OBJECT_TYPE_USER and indexes OS_BSP_Global.ResoureConfig to return a uint32. There are no char pointers, string literals, or operations indicative of string comparison in the shown code. OS_BSP_Global is declared extern, but within this function the accessed member ResoureConfig is used as an array of integral values (assigned to a uint32), not treated as a null-terminated string. Therefore there are no code fragments here that need investigation for Rule 21.14."
}