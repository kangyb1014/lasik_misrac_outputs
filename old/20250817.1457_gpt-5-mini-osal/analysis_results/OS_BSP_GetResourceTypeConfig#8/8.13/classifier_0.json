{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_BSP_GetResourceTypeConfig:\n```c\nuint32 OS_BSP_GetResourceTypeConfig(uint32 ResourceType)\n{\n    uint32 ConfigOptionValue;\n\n    if (ResourceType < OS_OBJECT_TYPE_USER)\n    {\n        ConfigOptionValue = OS_BSP_Global.ResoureConfig[ResourceType];\n    }\n    else\n    {\n        ConfigOptionValue = 0;\n    }\n\n    return ConfigOptionValue;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_BSP_GetResourceTypeConfig:\ntypedef uint32_t  uint32\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nConfigOptionValue = OS_BSP_Global.ResoureConfig[ResourceType];\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The fragment itself does not use any pointer variable \u2014 it just indexes an array/member (OS_BSP_Global.ResoureConfig[ResourceType]) and assigns the element value to a local uint32. MISRA C 2023 Rule 8.13 addresses pointer types and their pointees being const-qualified when possible. Based on the code shown, there is no pointer declaration or use in the fragment, so the fragment as written does not by itself violate Rule 8.13.\n\nPossible violation scenario (if relevant): if OS_BSP_Global.ResoureConfig is declared as a pointer to a non-const type (for example, uint32 *ResoureConfig or uint32 ResoureConfig[] in a global structure) and the array is intended to be read-only, then the object should be declared const (e.g. const uint32 *ResoureConfig or const uint32 ResoureConfig[]) so that accesses via pointers/decayed pointers point to a const-qualified type. In that situation the codebase would violate Rule 8.13 because the pointee could have been const-qualified but is not."
}