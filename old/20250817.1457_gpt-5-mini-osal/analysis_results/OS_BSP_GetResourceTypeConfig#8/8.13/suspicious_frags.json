{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_BSP_GetResourceTypeConfig:\n```c\nuint32 OS_BSP_GetResourceTypeConfig(uint32 ResourceType)\n{\n    uint32 ConfigOptionValue;\n\n    if (ResourceType < OS_OBJECT_TYPE_USER)\n    {\n        ConfigOptionValue = OS_BSP_Global.ResoureConfig[ResourceType];\n    }\n    else\n    {\n        ConfigOptionValue = 0;\n    }\n\n    return ConfigOptionValue;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_BSP_GetResourceTypeConfig:\ntypedef uint32_t  uint32\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "ConfigOptionValue = OS_BSP_Global.ResoureConfig[ResourceType];"
  ],
  "explanation": "The rule targets pointer-to-const usage. In the provided function there are no explicit pointer declarations or pointer parameter types, so scalar declarations and the function signature (uint32 return and uint32 ResourceType parameter) do not need investigation for Rule 8.13. The only expression that can involve an underlying pointer-type or array object is the indexed access to OS_BSP_Global.ResoureConfig; this should be inspected to determine whether ResoureConfig (the global array/object) is or should be a pointer to const-qualified data (or an array of const-qualified elements) because the function only reads from it. No other lines in the function introduce pointer semantics relevant to MISRA C Rule 8.13, so they are not reported."
}