{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_BSP_GetResourceTypeConfig:\n```c\nuint32 OS_BSP_GetResourceTypeConfig(uint32 ResourceType)\n{\n    uint32 ConfigOptionValue;\n\n    if (ResourceType < OS_OBJECT_TYPE_USER)\n    {\n        ConfigOptionValue = OS_BSP_Global.ResoureConfig[ResourceType];\n    }\n    else\n    {\n        ConfigOptionValue = 0;\n    }\n\n    return ConfigOptionValue;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_BSP_GetResourceTypeConfig:\nextern OS_BSP_GlobalData_t OS_BSP_Global\n...\n#define OS_OBJECT_TYPE_USER 0x10\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (ResourceType < OS_OBJECT_TYPE_USER)",
    "ConfigOptionValue = OS_BSP_Global.ResoureConfig[ResourceType];",
    "ConfigOptionValue = 0;"
  ],
  "explanation": "The lines selected are the operations whose executed-ness and effect on behavior should be confirmed: the conditional that gates which assignment executes, the assignment from the global array, and the assignment of 0 in the alternate branch. These are the only places where observable state is changed in the function and thus are the only candidates for dead code under Rule 2.2 (an executed operation whose removal would not affect program behaviour). Other fragments in the function do not need investigation for dead code: the local declaration of ConfigOptionValue is used by subsequent statements; the return statement is required to deliver the value; function signature, braces and syntactic elements are not executable operations; and there are no other assignments or side-effecting expressions in the function to consider. Note also that unreachable code would not be considered dead code per the rule; the selection focuses on executed assignments that might be redundant depending on call-sites or global configuration."
}