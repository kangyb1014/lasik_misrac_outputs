{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment *entrypt = NULL; is executed only when OS_TaskPrepare() returns a non-success code. OS_TaskPrepare is static and its only observed caller is OS_TaskEntryPoint, which checks the return code and only uses the out-parameter when OS_TaskPrepare() == OS_SUCCESS. Therefore when the assignment executes its value is never used by the caller and removing it would not change program behaviour \u2014 the operation is redundant (defensive) and thus constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskEntryPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2042.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskEntryPoint as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskEntryPoint:\n```c\nvoid OS_TaskEntryPoint(osal_id_t task_id)\n{\n    osal_task_entry task_entry;\n\n    if (OS_TaskPrepare(task_id, &task_entry) == OS_SUCCESS)\n    {\n        if (task_entry != NULL)\n        {\n            (*task_entry)();\n        }\n    }\n\n    /* If the function returns, treat as a normal exit and do the proper cleanup */\n    OS_TaskExit();\n}\n```\n</target_code>\nPlease provide the modified OS_TaskEntryPoint code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <time.h>\n\n/* Probe helper: append a timestamped message to the log file. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2042.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        fprintf(f, \"%ld: \", (long)t);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nvoid OS_TaskEntryPoint(osal_id_t task_id)\n{\n    osal_task_entry task_entry;\n    int res;\n\n    /* Log entry into the task entry point with the task identifier. */\n    probe_log(\"OS_TaskEntryPoint start: task_id=%lu\", (unsigned long)(uintptr_t)task_id);\n\n    /* Preserve original behavior: call OS_TaskPrepare once and store the result. */\n    res = OS_TaskPrepare(task_id, &task_entry);\n\n    /* Log the result code and the out-parameter value returned by OS_TaskPrepare. */\n    probe_log(\"OS_TaskPrepare returned: code=%d, task_entry_ptr=%lu\", res, (unsigned long)(uintptr_t)task_entry);\n\n    if (res == OS_SUCCESS)\n    {\n        if (task_entry != NULL)\n        {\n            /* Log just before invoking the task entry. */\n            probe_log(\"Invoking task entry for task_id=%lu at address=%lu\", (unsigned long)(uintptr_t)task_id, (unsigned long)(uintptr_t)task_entry);\n\n            /* Call the task entry exactly as in the original code. */\n            (*task_entry)();\n\n            /* Log after the task entry returns (if it returns). */\n            probe_log(\"Returned from task entry for task_id=%lu\", (unsigned long)(uintptr_t)task_id);\n        }\n        else\n        {\n            probe_log(\"OS_TaskPrepare returned OS_SUCCESS but task_entry is NULL for task_id=%lu\", (unsigned long)(uintptr_t)task_id);\n        }\n    }\n    else\n    {\n        /* Record the non-success return so callers can reproduce the reported scenario. */\n        probe_log(\"OS_TaskPrepare did not return OS_SUCCESS (code=%d) for task_id=%lu; out-parameter value (if any) is recorded above\", res, (unsigned long)(uintptr_t)task_id);\n    }\n\n    /* If the function returns, treat as a normal exit and do the proper cleanup */\n    probe_log(\"Calling OS_TaskExit for task_id=%lu\", (unsigned long)(uintptr_t)task_id);\n    OS_TaskExit();\n}\n"
}