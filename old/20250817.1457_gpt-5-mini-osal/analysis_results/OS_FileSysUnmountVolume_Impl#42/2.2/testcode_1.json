{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_FileSysUnmountVolume_Impl is implemented as a pure no-op that unconditionally returns OS_SUCCESS. In OS_unmount the call return_code = OS_FileSysUnmountVolume_Impl(&token); is executed and only its return value is used. Because the function has no side effects and always yields the same result, removing the call (or replacing it with return_code = OS_SUCCESS) would not change program behaviour. Therefore this executed operation constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysUnmountVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/338.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysUnmountVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysUnmountVolume_Impl:\n```c\nint32 OS_FileSysUnmountVolume_Impl(const OS_object_token_t *token)\n{\n    /*\n     * NOTE: Mounting/Unmounting on POSIX is not implemented.\n     * For backward compatibility this call must return success.\n     *\n     * This is a no-op.  The mount point that was created during\n     * the mount process can stay for the next mount.\n     */\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysUnmountVolume_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\nint32 OS_FileSysUnmountVolume_Impl(const OS_object_token_t *token)\n{\n    /*\n     * NOTE: Mounting/Unmounting on POSIX is not implemented.\n     * For backward compatibility this call must return success.\n     *\n     * This is a no-op.  The mount point that was created during\n     * the mount process can stay for the next mount.\n     */\n\n    /* Probe logging: record invocation and token state to help reproduce the\n     * reported dead-code scenario. Logging is best-effort; failures to open the\n     * log file will not affect the original return behaviour. */\n    FILE *log = fopen(\"/tmp/logs/338.txt\", \"a\");\n    if (log != NULL)\n    {\n        time_t now = time(NULL);\n        /* Print timestamp as integer to avoid requiring additional helpers */\n        fprintf(log, \"timestamp=%ld, func=OS_FileSysUnmountVolume_Impl, token=%p\\n\", (long)now, (const void *)token);\n        fprintf(log, \"    Note: implementation is a no-op and will return OS_SUCCESS\\n\");\n        fclose(log);\n    }\n\n    return OS_SUCCESS;\n}\n"
}