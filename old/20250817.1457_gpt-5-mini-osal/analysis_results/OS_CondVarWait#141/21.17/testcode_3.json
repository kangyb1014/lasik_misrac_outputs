{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call to strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) is not preceded by a NULL check or any guarantee that ContentTypeStr points to a valid NUL-terminated buffer. If StubPtr->Data.Buff.ContentTypeStr is NULL (e.g. the return-buffer entry exists but ContentTypeStr was never set or was cleared) or if it points to data that is not NUL-terminated, strcmp will read past the object bounds and cause an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarWait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1135.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarWait as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarWait:\n```c\nint32 OS_CondVarWait(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarWait_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarWait code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log control-flow and state information to /tmp/logs/1135.txt */\nstatic void OS_CondVarWait_Probe(const char *stage, osal_id_t var_id, int32 return_code, const OS_object_token_t *token)\n{\n    FILE *fp = fopen(\"/tmp/logs/1135.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Print stage, id, return code and token pointer address. Avoid dereferencing token to\n         * prevent accessing internal members that may be opaque/incomplete here. */\n        (void)fprintf(fp, \"Stage=%s; var_id=%llu; return_code=%lld; token_ptr=%p\\n\",\n                      stage,\n                      (unsigned long long)var_id,\n                      (long long)return_code,\n                      (const void *)token);\n        (void)fclose(fp);\n    }\n}\n\nint32 OS_CondVarWait(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and initial parameter */\n    OS_CondVarWait_Probe(\"entry\", var_id, 0, &token);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log after attempting to get the object token */\n    OS_CondVarWait_Probe(\"after_OS_ObjectIdGetById\", var_id, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before calling the implementation so callers can see the control path */\n        OS_CondVarWait_Probe(\"before_OS_CondVarWait_Impl\", var_id, return_code, &token);\n\n        return_code = OS_CondVarWait_Impl(&token);\n\n        /* Log after implementation returns */\n        OS_CondVarWait_Probe(\"after_OS_CondVarWait_Impl\", var_id, return_code, &token);\n    }\n    else\n    {\n        /* Log that parameter check failed and the function will return early */\n        OS_CondVarWait_Probe(\"param_check_failed\", var_id, return_code, &token);\n    }\n\n    return return_code;\n}\n"
}