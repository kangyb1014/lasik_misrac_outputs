{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_GetResourceName:\ntypedef struct OS_common_record OS_common_record_t\n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERR_NAME_TOO_LONG (-13)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmemcpy(buffer, record->name_entry, name_len);\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "If record->name_entry does not contain a NUL within its actual allocated size and the caller supplies a larger buffer_size, the code can read/copy beyond the bounds of the source object. Example: record->name_entry is an array of 16 bytes with no NUL in those 16 bytes, and the caller passes buffer_size = 100. OS_strnlen(record->name_entry, buffer_size) may scan past the 16-byte allocation (undefined behavior) and name_len can be set to up to buffer_size-1, so memcpy(buffer, record->name_entry, name_len) will read beyond record->name_entry\u2019s bounds. The destination is protected by the buffer_size checks, but there is no guarantee name_entry\u2019s allocation is at least buffer_size bytes, so the memcpy can violate Rule 21.17."
}