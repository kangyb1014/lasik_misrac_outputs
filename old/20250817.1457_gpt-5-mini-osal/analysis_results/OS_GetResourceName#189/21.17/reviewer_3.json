{
  "user_message": "An agent A claimed that the following OS_GetResourceName code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_GetResourceName.\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If buffer_size can be zero: OS_strnlen(record->name_entry, buffer_size) returns 0, so the test (buffer_size <= name_len) is true and the assignment name_len = buffer_size - 1 underflows (size_t wraps to a very large value). The subsequent memcpy(buffer, record->name_entry, name_len) would then attempt to copy an enormous number of bytes and write beyond buffer bounds. (If, however, OS_CHECK_SIZE(buffer_size) is guaranteed to enforce buffer_size > 0, the fragment is safe and does not violate Rule 21.17.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\ntypedef int32_t int32;\ntypedef uint32_t osal_id_t;\ntypedef size_t OS_size_t;\nstruct OS_common_record\n{\n    char *name_entry;\n    /* The real structure contains many more fields; only name_entry is\n       required for OS_GetResourceName's logic. */\n};\ntypedef struct OS_common_record\n{\n    char *name_entry;\n    /* The real structure contains many more fields; only name_entry is\n       required for OS_GetResourceName's logic. */\n} OS_common_record_t;\nstruct OS_object_token\n{\n    uint32_t dummy;\n};\ntypedef struct OS_object_token\n{\n    uint32_t dummy;\n} OS_object_token_t;\ntypedef unsigned int osal_objtype_t;\nenum OS_StatusCodes\n{\n    OS_SUCCESS = 0,\n    OS_ERR_NAME_TOO_LONG = -1,\n    OS_ERR_INVALID_POINTER = -2,\n    OS_ERR_INVALID_SIZE = -3\n};\ntypedef enum\n{\n    OS_LOCK_MODE_NONE = 0,\n    OS_LOCK_MODE_GLOBAL = 1,\n    OS_LOCK_MODE_EXCLUSIVE = 2,\n    OS_LOCK_MODE_REFCOUNT = 3,\n    OS_LOCK_MODE_RESERVED = 4\n} OS_lock_mode_t;\nstatic void log_probe(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/1519.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\nvoid OS_CHECK_POINTER(const void *ptr)\n{\n    if (ptr == NULL)\n    {\n        log_probe(\"OS_CHECK_POINTER: NULL pointer detected\");\n    }\n    else\n    {\n        log_probe(\"OS_CHECK_POINTER: pointer=%p\", ptr);\n    }\n}\nvoid OS_CHECK_SIZE(size_t size)\n{\n    log_probe(\"OS_CHECK_SIZE: size=%zu\", size);\n}\nstatic inline osal_objtype_t OS_ObjectIdToType_Impl(osal_id_t object_id)\n{\n    (void)object_id;\n    return 0u;\n}\nstatic OS_common_record_t g_stub_record = { NULL };\nsize_t OS_strnlen(const char *s, size_t maxlen)\n{\n    size_t v = strnlen(s, maxlen);\n    log_probe(\"OS_strnlen: s=%p maxlen=%zu -> %zu\", (void*)s, maxlen, v);\n    return v;\n}\n\nint32 OS_ObjectIdGetById(OS_lock_mode_t lockmode, osal_objtype_t objtype, osal_id_t id, OS_object_token_t *token)\n{\n    (void)lockmode; (void)objtype; (void)id;\n    if (token != NULL)\n        token->dummy = 0u;\n    log_probe(\"OS_ObjectIdGetById: called id=%u\", (unsigned)id);\n    return OS_SUCCESS;\n}\nOS_common_record_t *OS_ObjectIdGlobalFromToken(const OS_object_token_t *token)\n{\n    (void)token;\n    log_probe(\"OS_ObjectIdGlobalFromToken: returning stub record at %p\", (void*)&g_stub_record);\n    return &g_stub_record;\n}\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    (void)token;\n    log_probe(\"OS_ObjectIdRelease: called\");\n}\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    log_probe(\"OS_GetResourceName: entry object_id=%u buffer=%p buffer_size=%zu\",\n              (unsigned)object_id, (void*)buffer, buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    if (buffer != NULL && buffer_size > 0)\n    {\n        buffer[0] = 0;\n    }\n    else if (buffer != NULL && buffer_size == 0)\n    {\n        /* When buffer_size==0 we cannot write even a terminator; log this state. */\n        log_probe(\"OS_GetResourceName: buffer_size == 0, buffer[0] not written\");\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    log_probe(\"OS_GetResourceName: OS_ObjectIdGetById returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        log_probe(\"OS_GetResourceName: record=%p record->name_entry=%p\",\n                  (void*)record, (void*)(record ? record->name_entry : NULL));\n\n        if (record != NULL && record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            log_probe(\"OS_GetResourceName: initial name_len=%zu buffer_size=%zu\",\n                      name_len, buffer_size);\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                /* Prevent underflow when buffer_size == 0 by handling that case explicitly. */\n                if (buffer_size == 0)\n                {\n                    name_len = 0; /* no copy possible */\n                    log_probe(\"OS_GetResourceName: name too long and buffer_size==0; skipping copy\");\n\n                    OS_ObjectIdRelease(&token);\n                    return return_code;\n                }\n\n                name_len = buffer_size - 1u;\n                log_probe(\"OS_GetResourceName: name too long, set return_code=%d computed name_len=%zu\",\n                          (int)return_code, name_len);\n            }\n\n            log_probe(\"OS_GetResourceName: about to memcpy dest=%p src=%p len=%zu\",\n                      (void*)buffer, (void*)record->name_entry, name_len);\n\n            if (name_len > 0 && buffer != NULL)\n            {\n                memcpy(buffer, record->name_entry, name_len);\n            }\n\n            /* Ensure NUL-termination if space exists. */\n            if (buffer != NULL && buffer_size > name_len)\n            {\n                buffer[name_len] = 0;\n            }\n            else if (buffer != NULL && buffer_size != 0)\n            {\n                /* If buffer_size <= name_len we set name_len = buffer_size-1,\n                   so the index buffer[name_len] is valid; set terminator. */\n                buffer[name_len] = 0;\n            }\n\n            log_probe(\"OS_GetResourceName: after copy name_len=%zu buffer_size=%zu return_code=%d\",\n                      name_len, buffer_size, (int)return_code);\n        }\n        else\n        {\n            log_probe(\"OS_GetResourceName: record or record->name_entry is NULL\");\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    log_probe(\"OS_GetResourceName: exit return_code=%d\", (int)return_code);\n    return return_code;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The agent A scenario is correct. If buffer_size can be zero then the sequence in the original code can underflow name_len and cause an out-of-bounds memcpy: OS_strnlen(record->name_entry, 0) yields 0, the test (buffer_size <= name_len) is true, then name_len = buffer_size - 1 wraps to SIZE_MAX, and memcpy(buffer, record->name_entry, name_len) would copy an enormous number of bytes (and thus access beyond the bounds) violating MISRA C 2023 Rule 21.17. Note also that the original code does an unconditional buffer[0] = 0 at the top which itself is undefined behaviour when buffer_size == 0. The only way this code is safe is if OS_CHECK_SIZE(buffer_size) is guaranteed to enforce buffer_size > 0; that precondition is not visible in the snippet, so the reported violation is valid unless such a guarantee exists. Recommended fixes: explicitly check for buffer_size == 0 and handle/return before writing buffer[0] or computing name_len, or guard the subtraction to avoid underflow."
}