{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf buffer_size can be zero: OS_strnlen(record->name_entry, buffer_size) returns 0, so the test (buffer_size <= name_len) is true and the assignment name_len = buffer_size - 1 underflows (size_t wraps to a very large value). The subsequent memcpy(buffer, record->name_entry, name_len) would then attempt to copy an enormous number of bytes and write beyond buffer bounds. (If, however, OS_CHECK_SIZE(buffer_size) is guaranteed to enforce buffer_size > 0, the fragment is safe and does not violate Rule 21.17.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetResourceName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1519.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetResourceName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GetResourceName code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Minimal typedefs and enums to make this translation unit compilable.\n   These are stubs to allow compiling the probe-enabled function. */\n\ntypedef int32_t int32;\ntypedef uint32_t osal_id_t;\ntypedef size_t OS_size_t; /* alias to clarify intent */\n\ntypedef struct\n{\n    char *name_entry;\n} OS_common_record_t;\n\ntypedef struct\n{\n    uint32_t dummy;\n} OS_object_token_t;\n\nenum OS_StatusCodes\n{\n    OS_SUCCESS = 0,\n    OS_ERR_NAME_TOO_LONG = -1,\n    OS_ERR_INVALID_POINTER = -2,\n    OS_ERR_INVALID_SIZE = -3\n};\n\n/* Stubs for external functions used by OS_GetResourceName.\n   These stubs are intentionally minimal and only present so this\n   file is self-contained and compilable. Real implementations\n   exist in the OSAL and are not reproduced here. */\n\nstatic void log_probe(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/1519.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n/* Minimal safety-check replacements for the macros used in the original code.\n   These functions deliberately do not change control flow of the caller to\n   preserve the original program logic as closely as possible; they merely\n   log the checks. In a real build the original macros/functions may abort or\n   return an error; here we only log to allow reproduction of the scenario. */\n\nvoid OS_CHECK_POINTER(const void *ptr)\n{\n    if (ptr == NULL)\n    {\n        log_probe(\"OS_CHECK_POINTER: NULL pointer detected\");\n    }\n    else\n    {\n        log_probe(\"OS_CHECK_POINTER: pointer=%p\", ptr);\n    }\n}\n\nvoid OS_CHECK_SIZE(size_t size)\n{\n    log_probe(\"OS_CHECK_SIZE: size=%zu\", size);\n}\n\n/* Stubs for object management - these simply return a global record for testing. */\n\nint32 OS_ObjectIdGetById(int lockmode, int objtype, osal_id_t id, OS_object_token_t *token)\n{\n    (void)lockmode; (void)objtype; (void)id; (void)token;\n    log_probe(\"OS_ObjectIdGetById: called (stub) id=%u\", (unsigned)id);\n    return OS_SUCCESS;\n}\n\nint OS_ObjectIdToType_Impl(osal_id_t object_id)\n{\n    (void)object_id;\n    return 0;\n}\n\nstatic OS_common_record_t g_stub_record = { NULL };\n\nOS_common_record_t *OS_ObjectIdGlobalFromToken(OS_object_token_t *token)\n{\n    (void)token;\n    log_probe(\"OS_ObjectIdGlobalFromToken: returning stub record at %p\", (void*)&g_stub_record);\n    return &g_stub_record;\n}\n\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    (void)token;\n    log_probe(\"OS_ObjectIdRelease: called\");\n}\n\n/* Use the platform strnlen via wrapper so original name remains OS_strnlen. */\nsize_t OS_strnlen(const char *s, size_t maxlen)\n{\n    size_t v = strnlen(s, maxlen);\n    log_probe(\"OS_strnlen: s=%p maxlen=%zu -> %zu\", (void*)s, maxlen, v);\n    return v;\n}\n\n/* The modified OS_GetResourceName with logging probes that record control\n   flow and state information to /tmp/logs/1519.txt. The original logic is\n   preserved as much as possible. To avoid causing an out-of-bounds copy\n   during testing (e.g. when buffer_size==0 leading to size_t underflow),\n   the code logs the problematic condition and prevents performing the\n   unsafe memcpy in that one specific case. This prevents creating a new\n   violation during testing while still capturing evidence of the issue. */\n\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    log_probe(\"OS_GetResourceName: entry object_id=%u buffer=%p buffer_size=%zu\",\n              (unsigned)object_id, (void*)buffer, buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    if (buffer != NULL && buffer_size > 0)\n    {\n        buffer[0] = 0;\n    }\n    else if (buffer != NULL && buffer_size == 0)\n    {\n        /* When buffer_size==0 we cannot write even a terminator; log this state. */\n        log_probe(\"OS_GetResourceName: buffer_size == 0, buffer[0] not written\");\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    log_probe(\"OS_GetResourceName: OS_ObjectIdGetById returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        log_probe(\"OS_GetResourceName: record=%p record->name_entry=%p\",\n                  (void*)record, (void*)(record ? record->name_entry : NULL));\n\n        if (record != NULL && record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            log_probe(\"OS_GetResourceName: initial name_len=%zu buffer_size=%zu\",\n                      name_len, buffer_size);\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n                log_probe(\"OS_GetResourceName: name too long, set return_code=%d computed name_len=%zu\",\n                          (int)return_code, name_len);\n\n                if (buffer_size == 0)\n                {\n                    /* Detect the underflow/wrap scenario explicitly and log it.\n                       In the original code this would underflow (size_t wrap) and\n                       potentially lead to a very large memcpy length. We log the\n                       condition so it can be reproduced and *avoid performing the\n                       unsafe memcpy* during testing to prevent crashing the test\n                       host. */\n                    log_probe(\"OS_GetResourceName: WARNING - buffer_size==0 causes name_len underflow (wrapped to %zu). Skipping memcpy to avoid OOB during test.\", name_len);\n\n                    /* Release token and return; buffer was already set to empty above\n                       (when buffer_size==0 we didn't write, but caller must be aware).\n                       We return the error code to indicate name too long, matching\n                       the original branch intent. */\n                    OS_ObjectIdRelease(&token);\n                    return return_code;\n                }\n            }\n\n            /* Log intended memcpy length and source/destination pointers. */\n            log_probe(\"OS_GetResourceName: about to memcpy dest=%p src=%p len=%zu\",\n                      (void*)buffer, (void*)record->name_entry, name_len);\n\n            /* Perform the copy. If buffer_size==0 we returned above so this\n               memcpy will not be executed in that problematic case. */\n            if (name_len > 0 && buffer != NULL)\n            {\n                memcpy(buffer, record->name_entry, name_len);\n            }\n\n            /* Ensure NUL-termination if space exists. */\n            if (buffer != NULL && (buffer_size > name_len))\n            {\n                buffer[name_len] = 0;\n            }\n            else if (buffer != NULL && buffer_size != 0)\n            {\n                /* If buffer_size <= name_len we set name_len = buffer_size-1,\n                   so the index buffer[name_len] is valid; log that we are\n                   setting the terminator in that case. */\n                buffer[name_len] = 0;\n            }\n\n            log_probe(\"OS_GetResourceName: after copy name_len=%zu buffer_size=%zu return_code=%d\",\n                      name_len, buffer_size, (int)return_code);\n        }\n        else\n        {\n            log_probe(\"OS_GetResourceName: record or record->name_entry is NULL\");\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    log_probe(\"OS_GetResourceName: exit return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}