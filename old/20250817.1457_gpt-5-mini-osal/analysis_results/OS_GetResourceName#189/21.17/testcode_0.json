{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf record->name_entry refers to a char object whose storage is smaller than the caller-supplied buffer_size (for example name_entry is a 16-byte array or points to a shorter allocation but buffer_size is 32) and there is no NUL within the first buffer_size bytes, OS_strnlen(record->name_entry, buffer_size) may read beyond the end of the object. Passing the destination buffer size instead of the actual size of the source object allows the strnlen implementation to access bytes past the source object, which violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetResourceName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1519.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetResourceName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GetResourceName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Forward declarations of external types and functions used by the original code. */\n/* These are assumed to be provided by the surrounding system. */\ntypedef int32_t int32;\ntypedef unsigned long osal_id_t;\ntypedef struct OS_common_record OS_common_record_t; /* opaque here */\ntypedef struct OS_object_token OS_object_token_t;   /* opaque here */\n\n/* External functions assumed to exist in the original environment. */\nint32 OS_ObjectIdGetById(int lock_mode, int type, osal_id_t id, OS_object_token_t *token);\nosal_id_t OS_ObjectIdToType_Impl(osal_id_t id);\nOS_common_record_t *OS_ObjectIdGlobalFromToken(OS_object_token_t *token);\nvoid OS_ObjectIdRelease(OS_object_token_t *token);\nsize_t OS_strnlen(const char *s, size_t maxlen);\n\n/* Original sanity-check macros are referenced in the code. Provide stub declarations\n   so the code remains compilable in isolation. In the real build these are provided\n   by the OS headers. */\nvoid OS_CHECK_POINTER(const void *p);\nvoid OS_CHECK_SIZE(size_t s);\n\n/* Log helper: append a message with contextual fields to the log file. */\nstatic void os_log_probe(const char *stage,\n                         osal_id_t object_id,\n                         const void *buffer,\n                         size_t buffer_size,\n                         const OS_common_record_t *record,\n                         const char *name_entry,\n                         int return_code,\n                         size_t name_len)\n{\n    FILE *f = fopen(\"/tmp/logs/1519.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, do not change program behavior. */\n        return;\n    }\n\n    /* Write a concise line containing the probe stage and key state. Do not\n       dereference name_entry (to avoid further out-of-bounds reads); only log\n       the pointer value and the sizes involved. */\n    (void)fprintf(f,\n                  \"stage=%s object_id=0x%lx buffer=%p buffer_size=%zu record=%p name_entry=%p return_code=%d name_len=%zu\\n\",\n                  stage,\n                  (unsigned long)object_id,\n                  buffer,\n                  buffer_size,\n                  (const void *)record,\n                  (const void *)name_entry,\n                  return_code,\n                  name_len);\n\n    fclose(f);\n}\n\n/* Modified OS_GetResourceName with inserted probes that log control flow and state.\n   The original logic is preserved; probes are non-invasive and only append logs. */\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /* Initially set the output string to empty. */\n    buffer[0] = 0;\n\n    /* Log entry to function with initial arguments. */\n    os_log_probe(\"entry\", object_id, buffer, buffer_size, NULL, NULL, 0, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    os_log_probe(\"after_ObjectIdGetById\", object_id, buffer, buffer_size, NULL, NULL, (int)return_code, 0);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n        os_log_probe(\"after_ObjectIdGlobalFromToken\", object_id, buffer, buffer_size, record, NULL, (int)return_code, 0);\n\n        if (record->name_entry != NULL)\n        {\n            /* Log before calling OS_strnlen so callers can see the exact parameters that may lead\n               to an out-of-bounds read in some configurations. Do NOT attempt to read the contents\n               of name_entry here; only log the pointer and sizes. */\n            os_log_probe(\"before_strnlen\", object_id, buffer, buffer_size, record, record->name_entry, (int)return_code, 0);\n\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n\n            /* Log result returned by OS_strnlen. This, combined with the prior log, documents\n               the values involved in the potential violation scenario. */\n            os_log_probe(\"after_strnlen\", object_id, buffer, buffer_size, record, record->name_entry, (int)return_code, name_len);\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n                os_log_probe(\"name_too_long\", object_id, buffer, buffer_size, record, record->name_entry, (int)return_code, name_len);\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n\n            os_log_probe(\"after_memcpy\", object_id, buffer, buffer_size, record, record->name_entry, (int)return_code, name_len);\n        }\n        else\n        {\n            os_log_probe(\"name_entry_null\", object_id, buffer, buffer_size, record, NULL, (int)return_code, 0);\n        }\n\n        OS_ObjectIdRelease(&token);\n        os_log_probe(\"after_release\", object_id, buffer, buffer_size, record, (record != NULL) ? record->name_entry : NULL, (int)return_code, name_len);\n    }\n\n    os_log_probe(\"exit\", object_id, buffer, buffer_size, (return_code == OS_SUCCESS) ? record : NULL, (return_code == OS_SUCCESS && record != NULL) ? record->name_entry : NULL, (int)return_code, (return_code == OS_SUCCESS) ? name_len : 0);\n\n    return return_code;\n}\n"
}