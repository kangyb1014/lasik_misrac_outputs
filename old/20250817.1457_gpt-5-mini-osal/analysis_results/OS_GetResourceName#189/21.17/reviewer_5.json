{
  "user_message": "An agent A claimed that the following OS_GetResourceName code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_GetResourceName.\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If record->name_entry does not contain a NUL within its actual allocated size and the caller supplies a larger buffer_size, the code can read/copy beyond the bounds of the source object. Example: record->name_entry is an array of 16 bytes with no NUL in those 16 bytes, and the caller passes buffer_size = 100. OS_strnlen(record->name_entry, buffer_size) may scan past the 16-byte allocation (undefined behavior) and name_len can be set to up to buffer_size-1, so memcpy(buffer, record->name_entry, name_len) will read beyond record->name_entry\u2019s bounds. The destination is protected by the buffer_size checks, but there is no guarantee name_entry\u2019s allocation is at least buffer_size bytes, so the memcpy can violate Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_1519_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1519.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    /* Log entry with input parameters (buffer is valid at this point) */\n    OS_1519_logf(\"OS_GetResourceName ENTRY: object_id=%llu buffer=%p buffer_size=%zu\",\n                 (unsigned long long)object_id, (void *)buffer, buffer_size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    OS_1519_logf(\"OS_ObjectIdGetById returned %d for object_id=%llu\", return_code, (unsigned long long)object_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n        OS_1519_logf(\"Token -> record: %p\", (void *)record);\n\n        if (record->name_entry != NULL)\n        {\n            OS_1519_logf(\"record->name_entry pointer: %p (about to call OS_strnlen with limit %zu)\",\n                         (void *)record->name_entry, buffer_size);\n\n            /* Compute the name length (this may itself scan up to buffer_size bytes) */\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n\n            /* Log the length as reported by OS_strnlen */\n            OS_1519_logf(\"OS_strnlen returned name_len=%zu (buffer_size=%zu)\", name_len, buffer_size);\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n                OS_1519_logf(\"Name too long: adjusted name_len=%zu, return_code=%d\", name_len, return_code);\n            }\n\n            /* Log the memcopy action (size to copy). Do NOT attempt to read/print the source bytes here. */\n            OS_1519_logf(\"About to memcpy %zu bytes from %p to %p\", name_len, (void *)record->name_entry, (void *)buffer);\n\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n\n            OS_1519_logf(\"After memcpy: buffer[0]=%02x buffer[%zu]=%02x\", (unsigned char)buffer[0], name_len, (unsigned char)buffer[name_len]);\n        }\n        else\n        {\n            OS_1519_logf(\"record->name_entry is NULL\");\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_1519_logf(\"Released token for object_id=%llu\", (unsigned long long)object_id);\n    }\n    else\n    {\n        OS_1519_logf(\"OS_GetResourceName aborting early with return_code=%d\", return_code);\n    }\n\n    OS_1519_logf(\"OS_GetResourceName EXIT: return_code=%d\", return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_GetResourceName. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The code calls OS_strnlen(record->name_entry, buffer_size) and then memcpy(buffer, record->name_entry, name_len). If record->name_entry does not contain a NUL within its actual allocated size (or otherwise the allocation is smaller than buffer_size), OS_strnlen may read past the end of the source object when it scans up to buffer_size bytes, and name_len can be set to a value (up to buffer_size-1) that causes memcpy to read beyond the source bounds. Both the scan (OS_strnlen) and the subsequent memcpy therefore can access bytes outside the source object, which is exactly what MISRA C 2023 Rule 21.17 forbids. This is a real potential violation unless there is an external, provable invariant (not visible in the snippet) that guarantees record->name_entry is NUL-terminated within at most buffer_size bytes (or that its allocation is at least buffer_size). In the absence of such a guarantee in the shown code, the reported violation stands."
}