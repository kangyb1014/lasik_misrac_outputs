{
  "user_message": "An agent A claimed that the following OS_GetResourceName code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of OS_GetResourceName.\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function OS_strnlen modifies its value parameter 'maxlen' (assignment: maxlen = end - s;), which violates MISRA C 2023 Rule 17.8 (function parameters shall not be modified). Even though the pointer 's' is not altered, changing the parameter 'maxlen' itself is a rule violation. A compliant fix is to copy maxlen into a local variable (e.g., size_t len = maxlen;) and modify/return that instead.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1517.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /* Log function entry and initial parameters */\n    OS_ProbeLog(\"OS_GetResourceName ENTRY: object_id=%llu, buffer=%p, buffer_size=%zu\",\n                (unsigned long long)(uintptr_t)object_id, (void *)buffer, buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n    OS_ProbeLog(\"buffer initialized to empty string at buffer[0]; buffer[0]=%d\", (int)buffer[0]);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    OS_ProbeLog(\"OS_ObjectIdGetById returned %d\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n        OS_ProbeLog(\"Token resolved to record=%p, name_entry=%p\",\n                    (void *)record, (void *)(record != NULL ? (void *)record->name_entry : NULL));\n\n        if (record->name_entry != NULL)\n        {\n            OS_ProbeLog(\"About to call OS_strnlen on name_entry='%s' with buffer_size=%zu\",\n                        record->name_entry, buffer_size);\n\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n\n            OS_ProbeLog(\"OS_strnlen returned name_len=%zu\", name_len);\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                OS_ProbeLog(\"Name too long: buffer_size=%zu <= name_len=%zu; setting return_code=%d\",\n                            buffer_size, name_len, return_code);\n\n                name_len = buffer_size - 1;\n                OS_ProbeLog(\"Adjusted name_len to %zu to fit buffer (buffer_size-1)\", name_len);\n            }\n\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n\n            OS_ProbeLog(\"Copied name into buffer: copied_len=%zu; buffer='%s'\", name_len, buffer);\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_ProbeLog(\"Released token\");\n    }\n\n    OS_ProbeLog(\"OS_GetResourceName EXIT: return_code=%d\", return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_GetResourceName. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C:2023 Rule 17.8 prohibits modifying a function's own parameters (assigning to them) \u2014 it applies inside the function where the parameter is declared. In the provided code OS_GetResourceName does not assign to its parameters: it writes through the pointer 'buffer' (which is permitted \u2014 the object pointed to may be modified) and reads 'buffer_size' but does not modify it. The alleged assignment to 'maxlen' occurs inside OS_strnlen (if that implementation indeed assigns to its parameter), so any violation would be in OS_strnlen itself, not in OS_GetResourceName. The recommended fix (copy the parameter into a local variable before modifying) is appropriate for OS_strnlen, but is not needed in OS_GetResourceName. Therefore Agent A's claim that OS_GetResourceName violates Rule 17.8 is incorrect."
}