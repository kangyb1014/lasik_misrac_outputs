{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_strnlen modifies its value parameter 'maxlen' (assignment: maxlen = end - s;), which violates MISRA C 2023 Rule 17.8 (function parameters shall not be modified). Even though the pointer 's' is not altered, changing the parameter 'maxlen' itself is a rule violation. A compliant fix is to copy maxlen into a local variable (e.g., size_t len = maxlen;) and modify/return that instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetResourceName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1517.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetResourceName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GetResourceName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <inttypes.h>\n#include <string.h>\n\n/* Probe helper to append diagnostic logs to /tmp/logs/1517.txt */\nstatic void OS_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1517.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /* Log function entry and initial parameters */\n    OS_ProbeLog(\"OS_GetResourceName ENTRY: object_id=%llu, buffer=%p, buffer_size=%zu\",\n                (unsigned long long)(uintptr_t)object_id, (void *)buffer, buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n    OS_ProbeLog(\"buffer initialized to empty string at buffer[0]; buffer[0]=%d\", (int)buffer[0]);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    OS_ProbeLog(\"OS_ObjectIdGetById returned %d\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n        OS_ProbeLog(\"Token resolved to record=%p, name_entry=%p\",\n                    (void *)record, (void *)(record != NULL ? (void *)record->name_entry : NULL));\n\n        if (record->name_entry != NULL)\n        {\n            OS_ProbeLog(\"About to call OS_strnlen on name_entry='%s' with buffer_size=%zu\",\n                        record->name_entry, buffer_size);\n\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n\n            OS_ProbeLog(\"OS_strnlen returned name_len=%zu\", name_len);\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                OS_ProbeLog(\"Name too long: buffer_size=%zu <= name_len=%zu; setting return_code=%d\",\n                            buffer_size, name_len, return_code);\n\n                name_len = buffer_size - 1;\n                OS_ProbeLog(\"Adjusted name_len to %zu to fit buffer (buffer_size-1)\", name_len);\n            }\n\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n\n            OS_ProbeLog(\"Copied name into buffer: copied_len=%zu; buffer='%s'\", name_len, buffer);\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_ProbeLog(\"Released token\");\n    }\n\n    OS_ProbeLog(\"OS_GetResourceName EXIT: return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}