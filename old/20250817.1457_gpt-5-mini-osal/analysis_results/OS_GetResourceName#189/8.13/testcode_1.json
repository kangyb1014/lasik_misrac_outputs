{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_common_record_t::name_entry is declared as a non-const pointer (e.g. char *name_entry) then this fragment only reads from it (OS_strnlen, memcpy) and does not modify it. In that case the pointer should be const-qualified (const char *) and the current code violates MISRA C 2023 Rule 8.13. If, however, name_entry is already declared const char * (or otherwise const-qualified), there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetResourceName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1515.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetResourceName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GetResourceName code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* Helper: append a log entry describing current state */\n    auto void log_state(const char *stage, OS_common_record_t *rec, const char *buf, size_t buf_size, size_t nlen, int32 rcode)\n    {\n        FILE *fp = fopen(\"/tmp/logs/1515.txt\", \"a\");\n        if (fp == NULL)\n        {\n            return; /* best-effort logging only */\n        }\n\n        fprintf(fp, \"[OS_GetResourceName] stage=%s object_id=%lu buffer=%p buffer_size=%zu return_code=%d\\n\",\n                stage, (unsigned long)(uintptr_t)object_id, (void *)buf, buf_size, (int)rcode);\n\n        if (rec == NULL)\n        {\n            fprintf(fp, \"  record=NULL\\n\");\n        }\n        else\n        {\n            fprintf(fp, \"  record=%p name_entry=%p\\n\", (void *)rec, (void *)rec->name_entry);\n\n            if (rec->name_entry != NULL)\n            {\n                /* Safely capture a preview of the name_entry contents (bounded) */\n                size_t preview_limit = 128U;\n                size_t preview_len = OS_strnlen(rec->name_entry, preview_limit);\n                char preview[129];\n                size_t to_copy = (preview_len < preview_limit) ? preview_len : preview_limit;\n                memcpy(preview, rec->name_entry, to_copy);\n                preview[to_copy] = '\\0';\n                fprintf(fp, \"  name_entry_preview(len=%zu)='%s'\\n\", to_copy, preview);\n\n                /* Log the computed name length used for copying in this call */\n                fprintf(fp, \"  computed_name_len_for_copy=%zu\\n\", nlen);\n\n                /* If a destination buffer is provided, log what will be copied/was copied */\n                if (buf != NULL && buf_size > 0U)\n                {\n                    size_t out_preview_limit = (nlen < 128U) ? nlen : 128U;\n                    char out_preview[129];\n                    memcpy(out_preview, buf, out_preview_limit > 0U ? out_preview_limit : 0U);\n                    out_preview[out_preview_limit > 0U ? out_preview_limit : 0U] = '\\0';\n                    fprintf(fp, \"  destination_after_copy_preview(len=%zu)='%s'\\n\", out_preview_limit, out_preview);\n\n                    /* Check that name_entry was not modified by this function: compare before/after read */\n                    size_t after_preview_len = OS_strnlen(rec->name_entry, preview_limit);\n                    char preview_after[129];\n                    size_t after_copy = (after_preview_len < preview_limit) ? after_preview_len : preview_limit;\n                    memcpy(preview_after, rec->name_entry, after_copy);\n                    preview_after[after_copy] = '\\0';\n                    if (to_copy == after_copy && memcmp(preview, preview_after, to_copy) == 0)\n                    {\n                        fprintf(fp, \"  name_entry_unchanged=TRUE\\n\");\n                    }\n                    else\n                    {\n                        fprintf(fp, \"  name_entry_unchanged=FALSE (before='%s' after='%s')\\n\", preview, preview_after);\n                    }\n                }\n            }\n        }\n\n        fclose(fp);\n    }\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    /* Log initial state */\n    log_state(\"start\", NULL, buffer, buffer_size, 0U, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    /* Log after attempting to get object by id */\n    log_state(\"after_getbyid_before_record\", NULL, buffer, buffer_size, 0U, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        /* Log immediately after obtaining the record pointer */\n        log_state(\"got_record\", record, buffer, buffer_size, 0U, return_code);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n\n            /* Log right before memcpy so the exact values used are recorded */\n            log_state(\"before_memcpy\", record, buffer, buffer_size, name_len, return_code);\n\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n\n            /* Log immediately after the copy to show resulting buffer and that name_entry was only read */\n            log_state(\"after_memcpy\", record, buffer, buffer_size, name_len, return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing token */\n        log_state(\"after_release\", record, buffer, buffer_size, (record != NULL && record->name_entry != NULL) ? OS_strnlen(record->name_entry, buffer_size) : 0U, return_code);\n    }\n\n    return return_code;\n}\n"
}