{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nrecord->name_entry is used only for reading (passed to OS_strnlen and then memcpy), but is declared as a non-const pointer (e.g. char *name_entry). Because the data is not modified, the pointer should be const-qualified (const char *) per MISRA C 2023 Rule 8.13. Thus the use of a non-const pointer here violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetResourceName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1515.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetResourceName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GetResourceName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logging helper: append textual logs to /tmp/logs/1515.txt */\nstatic void os1515_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1515.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    (void)fputc('\\n', f);\n    (void)fclose(f);\n}\n\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* Log entry and parameters */\n    os1515_log(\"OS_GetResourceName ENTRY: object_id=%llu, buffer=%p, buffer_size=%zu\",\n               (unsigned long long)object_id, (void *)buffer, buffer_size);\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n    os1515_log(\"buffer initialized to empty string (buffer[0]=0)\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    os1515_log(\"OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n        os1515_log(\"Obtained record=%p from token=%p\", (void *)record, (void *)&token);\n\n        if (record->name_entry != NULL)\n        {\n            os1515_log(\"record->name_entry pointer=%p (non-NULL)\", (void *)record->name_entry);\n\n            /* compute length with OS_strnlen */\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            os1515_log(\"Computed name_len=%zu (buffer_size=%zu)\", name_len, buffer_size);\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n                os1515_log(\"Name too long: truncated name_len set to %zu, return_code=%ld\", name_len, (long)return_code);\n            }\n\n            /* copy the name into the user buffer */\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n            os1515_log(\"Copied name into buffer (length=%zu). buffer=%s\", name_len, buffer);\n        }\n        else\n        {\n            os1515_log(\"record->name_entry is NULL\");\n        }\n\n        OS_ObjectIdRelease(&token);\n        os1515_log(\"Released object token\");\n    }\n    else\n    {\n        os1515_log(\"OS_ObjectIdGetById did not succeed, skipping record handling\");\n    }\n\n    os1515_log(\"OS_GetResourceName EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}