{
  "user_message": "An agent A claimed that the following OS_GetResourceName code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_GetResourceName.\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer variable 'record' is declared as a non-const OS_common_record_t * and is assigned from OS_ObjectIdGlobalFromToken(&token). In this function 'record' is only read (record->name_entry is accessed) and never modified, so the pointer could and should be const-qualified (e.g. const OS_common_record_t *record or have OS_ObjectIdGlobalFromToken return a pointer to const). Therefore this use violates MISRA C 2023 Rule 8.13: a pointer should point to a const-qualified type whenever possible.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_GetResourceName_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1515.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* Log entry and input state */\n    OS_GetResourceName_Log(\"ENTRY: object_id=%llu buffer=%p buffer_size=%zu\",\n                           (unsigned long long)object_id, (void *)buffer, buffer_size);\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n\n    OS_GetResourceName_Log(\"OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        /* Log pointer returned for record */\n        OS_GetResourceName_Log(\"record pointer=%p (from token=%p)\", (void *)record, (void *)&token);\n\n        if (record != NULL)\n        {\n            OS_GetResourceName_Log(\"record->name_entry pointer=%p\", (void *)record->name_entry);\n        }\n        else\n        {\n            OS_GetResourceName_Log(\"record is NULL\");\n        }\n\n        if (record->name_entry != NULL)\n        {\n            /* compute name length using the same semantics as production code */\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n\n            /* Log the computed name length and buffer_size */\n            OS_GetResourceName_Log(\"computed name_len=%zu buffer_size=%zu\", name_len, buffer_size);\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n\n                OS_GetResourceName_Log(\"name too long: adjusted name_len=%zu return_code=%ld\", name_len, (long)return_code);\n            }\n\n            /* Copy and terminate exactly as original code */\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n\n            /* Log a truncated preview of the name actually copied */\n            {\n                size_t preview_len = (name_len < 64U) ? name_len : 64U;\n                char preview[65];\n                if (preview_len > 0U)\n                {\n                    memcpy(preview, buffer, preview_len);\n                }\n                preview[preview_len] = '\\0';\n                OS_GetResourceName_Log(\"copied name (len=%zu) preview='%s'\", name_len, preview);\n            }\n        }\n        else\n        {\n            OS_GetResourceName_Log(\"record->name_entry is NULL - leaving buffer empty\");\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        OS_GetResourceName_Log(\"released token, about to return %ld\", (long)return_code);\n    }\n    else\n    {\n        OS_GetResourceName_Log(\"OS_ObjectIdGetById failed, returning %ld\", (long)return_code);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_GetResourceName. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. In the shown function the local variable record is only used for reads (record->name_entry is inspected and its bytes are passed to memcpy which accepts a const source). The pointer could therefore be declared to point to a const-qualified type (for example: const OS_common_record_t *record) without any cast or other change, since assigning a non-const OS_common_record_t * return value to a const OS_common_record_t * local is allowed. That change would satisfy MISRA C 2023 Rule 8.13 (\u2018a pointer should point to a const-qualified type whenever possible\u2019). The empty test log is unrelated to the rule evaluation. A minimal corrective action is to change the declaration to const OS_common_record_t *record (or change the called accessor to return a pointer-to-const), unless there is a project-specific reason that prevents adding const (in which case a documented deviation would be required)."
}