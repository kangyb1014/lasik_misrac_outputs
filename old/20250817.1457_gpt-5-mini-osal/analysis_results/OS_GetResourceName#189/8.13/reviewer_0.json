{
  "user_message": "An agent A claimed that the following OS_GetResourceName code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_GetResourceName.\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:record->name_entry is used only for reading (passed to OS_strnlen and then memcpy), but is declared as a non-const pointer (e.g. char *name_entry). Because the data is not modified, the pointer should be const-qualified (const char *) per MISRA C 2023 Rule 8.13. Thus the use of a non-const pointer here violates the rule.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os1515_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1515.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    (void)fputc('\\n', f);\n    (void)fclose(f);\n}\n\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* Log entry and parameters */\n    os1515_log(\"OS_GetResourceName ENTRY: object_id=%llu, buffer=%p, buffer_size=%zu\",\n               (unsigned long long)object_id, (void *)buffer, buffer_size);\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n    os1515_log(\"buffer initialized to empty string (buffer[0]=0)\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    os1515_log(\"OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n        os1515_log(\"Obtained record=%p from token=%p\", (void *)record, (void *)&token);\n\n        if (record->name_entry != NULL)\n        {\n            os1515_log(\"record->name_entry pointer=%p (non-NULL)\", (void *)record->name_entry);\n\n            /* compute length with OS_strnlen */\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            os1515_log(\"Computed name_len=%zu (buffer_size=%zu)\", name_len, buffer_size);\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n                os1515_log(\"Name too long: truncated name_len set to %zu, return_code=%ld\", name_len, (long)return_code);\n            }\n\n            /* copy the name into the user buffer */\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n            os1515_log(\"Copied name into buffer (length=%zu). buffer=%s\", name_len, buffer);\n        }\n        else\n        {\n            os1515_log(\"record->name_entry is NULL\");\n        }\n\n        OS_ObjectIdRelease(&token);\n        os1515_log(\"Released object token\");\n    }\n    else\n    {\n        os1515_log(\"OS_ObjectIdGetById did not succeed, skipping record handling\");\n    }\n\n    os1515_log(\"OS_GetResourceName EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_GetResourceName. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not enough information to conclude the report is correct. MISRA C 2023 Rule 8.13 recommends that pointer types be qualified const where the pointed-to object is never modified. In the provided OS_GetResourceName body, record->name_entry is only read (passed to OS_strnlen and memcpy), so it would be appropriate for name_entry to be declared as const char * if it is never modified anywhere. However, the snippet does not show the declaration of OS_common_record_t::name_entry or how that member is used elsewhere. The rule applies to declarations (the type of the pointer), not to every use-site. Therefore: \u2022 If OS_common_record_t declares name_entry as e.g. char * and the pointed data is never modified anywhere, then the declaration should be changed to const char * and the project would violate 8.13 as currently declared. \u2022 If name_entry is declared const already, or if other code legitimately modifies the pointed-to data (or API constraints force it to be non-const), then there is no violation. The agent A\u2019s claim assumes the declaration is non-const but provides no evidence. The test harness that logs runtime behavior does not prove a MISRA rule violation (MISRA is a static type-qualification rule). To confirm the report, inspect the definition of OS_common_record_t and all uses of name_entry. Recommended fix (if appropriate): change the member to const char *name_entry (and update any locations that modify it)."
}