{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 this macro can introduce dead code depending on how BUGCHECK is defined. For example, if BUGCHECK is defined so the boolean expression is only evaluated and its result discarded (e.g. #define BUGCHECK(expr,code) ((void)(expr))) then OS_CHECK_POINTER(ptr) expands to ((void)((ptr)!=NULL)); the evaluation has no side\u2011effects, so it is an executed operation whose removal would not affect program behaviour \u2014 this is dead code and violates MISRA C 2023 Rule 2.2. (If, conversely, BUGCHECK performs an observable action such as logging/abort on failure, then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetResourceName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1514.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetResourceName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetResourceName:\n```c\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    buffer[0] = 0;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        if (record->name_entry != NULL)\n        {\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n            }\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GetResourceName code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n#include <stdarg.h>\n\n/*\n * Probe/log helper - non-intrusive logging to help reproduce the scenario\n * Logs control flow and key state to /tmp/logs/1514.txt in append mode.\n */\nstatic void OS_ProbeLog(const char *stage, const void *buffer, size_t buffer_size, int32_t return_code, const char *extra)\n{\n    FILE *f = fopen(\"/tmp/logs/1514.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Keep logging simple and robust; do not change program state */\n    fprintf(f, \"stage=%s ptr=%p buffer_size=%zu return_code=%ld extra=%s\\n\",\n            stage,\n            buffer,\n            buffer_size,\n            (long)return_code,\n            (extra != NULL) ? extra : \"(null)\");\n\n    fclose(f);\n}\n\n/* Wrapper to log a numeric extra value (e.g. name_len) */\nstatic void OS_ProbeLogNum(const char *stage, const void *buffer, size_t buffer_size, int32_t return_code, long num)\n{\n    char extra[32];\n    (void)snprintf(extra, sizeof(extra), \"%ld\", num);\n    OS_ProbeLog(stage, buffer, buffer_size, return_code, extra);\n}\n\nint32 OS_GetResourceName(osal_id_t object_id, char *buffer, size_t buffer_size)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    size_t              name_len;\n    OS_object_token_t   token;\n\n    /* Probe: entry and values before performing the sanity checks */\n    OS_ProbeLog(\"entry_before_checks\", buffer, buffer_size, -1, NULL);\n\n    /* sanity check the passed-in buffer and size */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buffer_size);\n\n    /* Probe: after sanity-check macros. If OS_CHECK_POINTER is a no-op, this\n     * log will still be recorded; if it aborts the program, the log above will\n     * be the last entry. This helps reproduce whether the macro produces an\n     * observable action. */\n    OS_ProbeLog(\"after_sanity_checks\", buffer, buffer_size, -1, NULL);\n\n    /*\n     * Initially set the output string to empty.\n     * This avoids undefined behavior in case the function fails\n     * and the caller does not check the return code.\n     */\n    OS_ProbeLog(\"before_buffer_init\", buffer, buffer_size, -1, NULL);\n    buffer[0] = 0;\n    OS_ProbeLog(\"after_buffer_init\", buffer, buffer_size, -1, NULL);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_ObjectIdToType_Impl(object_id), object_id, &token);\n\n    /* Log result of lookup */\n    OS_ProbeLog(\"after_ObjectIdGetById\", buffer, buffer_size, return_code, NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_ObjectIdGlobalFromToken(&token);\n\n        OS_ProbeLog(\"after_get_global_record\", buffer, buffer_size, return_code,\n                    (record != NULL && record->name_entry != NULL) ? \"has_name\" : \"no_name\");\n\n        if (record->name_entry != NULL)\n        {\n            OS_ProbeLog(\"before_strnlen\", buffer, buffer_size, return_code, NULL);\n            name_len = OS_strnlen(record->name_entry, buffer_size);\n            OS_ProbeLogNum(\"computed_name_len\", buffer, buffer_size, return_code, (long)name_len);\n\n            if (buffer_size <= name_len)\n            {\n                /* indicates the name does not fit into supplied buffer */\n                return_code = OS_ERR_NAME_TOO_LONG;\n                name_len    = buffer_size - 1;\n\n                OS_ProbeLog(\"name_too_long\", buffer, buffer_size, return_code, NULL);\n            }\n\n            memcpy(buffer, record->name_entry, name_len);\n            buffer[name_len] = 0;\n\n            OS_ProbeLog(\"copied_name\", buffer, buffer_size, return_code, NULL);\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_ProbeLog(\"released_token\", buffer, buffer_size, return_code, NULL);\n    }\n\n    OS_ProbeLog(\"returning\", buffer, buffer_size, return_code, NULL);\n\n    return return_code;\n}\n"
}