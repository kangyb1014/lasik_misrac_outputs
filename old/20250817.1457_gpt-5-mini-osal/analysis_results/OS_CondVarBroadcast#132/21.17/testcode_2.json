{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) without validating either pointer or ensuring the pointed-to objects are NUL-terminated. If StubPtr->Data.Buff.ContentTypeStr is NULL (e.g. no prior UT_Stub_RegisterReturnType call or it was called with a NULL TypeName) or either string lacks a terminating '\\0', strcmp will read past the object bounds (or dereference NULL), causing an out-of-bounds access/undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarBroadcast code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1063.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarBroadcast as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarBroadcast:\n```c\nint32 OS_CondVarBroadcast(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarBroadcast_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarBroadcast code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n\n/* Minimal local typedefs so this file compiles standalone. */\ntypedef int32_t int32;\ntypedef int32_t osal_id_t;\n\n/* Opaque token placeholder used by the real OSAL. Keep it minimal and safe. */\ntypedef struct\n{\n    void *opaque; /* do not dereference; only report the pointer value */\n} OS_object_token_t;\n\n/* Constants used by the real OSAL - define as enum to avoid macros */\nenum { OS_LOCK_MODE_NONE = 0, OS_OBJECT_TYPE_OS_CONDVAR = 0, OS_SUCCESS = 0 };\n\n/* Prototypes for external functions (the real implementations are elsewhere) */\nextern int32 OS_ObjectIdGetById(int32 mode, int32 objtype, osal_id_t id, OS_object_token_t *token);\nextern int32 OS_CondVarBroadcast_Impl(OS_object_token_t *token);\n\n/* Helper: append a log entry to /tmp/logs/1063.txt capturing control flow and state. */\nstatic void OS_CondVarBroadcast_Log(const char *stage, osal_id_t var_id, const OS_object_token_t *token, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1063.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not change program behavior. */\n        return;\n    }\n\n    /* Timestamp for easier correlation */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_MSC_VER)\n    gmtime_s(&tm_buf, &t);\n#else\n    gmtime_r(&t, &tm_buf);\n#endif\n    char timebuf[64];\n    if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%dT%H:%M:%SZ\", &tm_buf) == 0)\n    {\n        timebuf[0] = '\\0';\n    }\n\n    /* Record: stage, timestamp, var_id, token pointer value, token->opaque pointer value (if any), and return_code */\n    fprintf(f, \"[%s] %s: var_id=%\" PRId32 \", token_addr=%p\",\n            timebuf, stage, var_id, (const void *)token);\n\n    if (token != NULL)\n    {\n        /* print the opaque pointer address only (do NOT dereference it) */\n        fprintf(f, \", token->opaque=%p\", token->opaque);\n    }\n\n    fprintf(f, \", return_code=%\" PRId32 \"\\n\", return_code);\n    fclose(f);\n}\n\n/* The (modified) OS_CondVarBroadcast function with probes. Original logic preserved. */\nint32 OS_CondVarBroadcast(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry to indicate function start and input parameter */\n    OS_CondVarBroadcast_Log(\"entry\", var_id, NULL, -1);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log result of parameter check and token address */\n    OS_CondVarBroadcast_Log(\"after_OS_ObjectIdGetById\", var_id, &token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log immediately before calling the implementation. This is where deeper checks\n         * (e.g., strcmp on internal strings) may occur in the implementation. Recording\n         * this point helps reproduce control flow up to the vulnerable call. */\n        OS_CondVarBroadcast_Log(\"before_Impl\", var_id, &token, return_code);\n\n        return_code = OS_CondVarBroadcast_Impl(&token);\n\n        /* Log after the implementation returns */\n        OS_CondVarBroadcast_Log(\"after_Impl\", var_id, &token, return_code);\n    }\n    else\n    {\n        /* Log that the function will return early due to parameter validation failure */\n        OS_CondVarBroadcast_Log(\"early_return_invalid_param\", var_id, &token, return_code);\n    }\n\n    return return_code;\n}\n"
}