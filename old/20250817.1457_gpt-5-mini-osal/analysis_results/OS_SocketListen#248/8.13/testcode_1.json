{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro yields a non-const pointer to an object table element but at least one caller only needs read access. Example: in OS_SocketListen_Impl the code\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\nassigns a non-const pointer (impl) to the table element and then only reads impl->fd to call listen(). Since the object is not modified, the pointer could and should be to a const-qualified type (e.g. const OS_impl_file_internal_record_t *). The macro (and/or the calling code) therefore fails to use a const-qualified pointer where possible, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketListen code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1987.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketListen as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketListen:\n```c\nint32 OS_SocketListen(osal_id_t sock_id)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* This call is only applicable to stream sockets */\n        if (stream->socket_domain == OS_SocketDomain_INVALID || stream->socket_type != OS_SocketType_STREAM)\n        {\n            /* Not a stream socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket must be bound to an address already */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_LISTENING | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither listening nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketListen_Impl(&token);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_LISTENING;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketListen code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe/logging helper for OS_SocketListen\n * Appends logs to /tmp/logs/1987.txt describing control flow and key state.\n * Uses only const-qualified pointers for observed state to avoid modifying program logic.\n */\nstatic void OS_SocketListen_Log(const char *stage, osal_id_t sock_id, const OS_object_token_t *token_ptr, const OS_stream_internal_record_t *stream, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1987.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Basic context */\n        fprintf(f, \"OS_SocketListen: stage=%s sock_id=%lu token_addr=%p stream_ptr=%p\",\n                stage, (unsigned long)sock_id, (const void *)token_ptr, (const void *)stream);\n\n        /* If stream is available, log its observable fields */\n        if (stream != NULL)\n        {\n            fprintf(f, \" domain=%d type=%d state=0x%08x\",\n                    (int)stream->socket_domain,\n                    (int)stream->socket_type,\n                    (unsigned int)stream->stream_state);\n        }\n\n        /* Return code at this point */\n        fprintf(f, \" return=%ld\\n\", (long)return_code);\n\n        fclose(f);\n    }\n}\n\nint32 OS_SocketListen(osal_id_t sock_id)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log after attempting to get the object id/token */\n    OS_SocketListen_Log(\"after_getid\", sock_id, &token, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log the stream lookup result */\n        OS_SocketListen_Log(\"after_table_get\", sock_id, &token, stream, return_code);\n\n        /* This call is only applicable to stream sockets */\n        if (stream->socket_domain == OS_SocketDomain_INVALID || stream->socket_type != OS_SocketType_STREAM)\n        {\n            /* Not a stream socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n            OS_SocketListen_Log(\"incorrect_obj_type\", sock_id, &token, stream, return_code);\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket must be bound to an address already */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            OS_SocketListen_Log(\"not_bound\", sock_id, &token, stream, return_code);\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_LISTENING | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither listening nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            OS_SocketListen_Log(\"already_listening_or_connected\", sock_id, &token, stream, return_code);\n        }\n        else\n        {\n            /* Log just before delegating to implementation */\n            OS_SocketListen_Log(\"before_impl\", sock_id, &token, stream, return_code);\n\n            return_code = OS_SocketListen_Impl(&token);\n\n            /* Log result of impl call */\n            OS_SocketListen_Log(\"after_impl\", sock_id, &token, stream, return_code);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_LISTENING;\n\n                /* Log the state change */\n                OS_SocketListen_Log(\"state_set_listening\", sock_id, &token, stream, return_code);\n            }\n        }\n\n        /* Log before token release */\n        OS_SocketListen_Log(\"before_release\", sock_id, &token, stream, return_code);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Final return value log */\n    OS_SocketListen_Log(\"final\", sock_id, &token, NULL, return_code);\n\n    return return_code;\n}\n"
}