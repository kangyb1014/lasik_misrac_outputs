{
  "user_message": "An agent A claimed that the following OS_SocketListen code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketListen.\n```c\nint32 OS_SocketListen(osal_id_t sock_id)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* This call is only applicable to stream sockets */\n        if (stream->socket_domain == OS_SocketDomain_INVALID || stream->socket_type != OS_SocketType_STREAM)\n        {\n            /* Not a stream socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket must be bound to an address already */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_LISTENING | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither listening nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketListen_Impl(&token);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_LISTENING;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro yields a non-const pointer to an object table element but at least one caller only needs read access. Example: in OS_SocketListen_Impl the code\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\nassigns a non-const pointer (impl) to the table element and then only reads impl->fd to call listen(). Since the object is not modified, the pointer could and should be to a const-qualified type (e.g. const OS_impl_file_internal_record_t *). The macro (and/or the calling code) therefore fails to use a const-qualified pointer where possible, violating MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_SocketListen_Log(const char *stage, osal_id_t sock_id, const OS_object_token_t *token_ptr, const OS_stream_internal_record_t *stream, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1987.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Basic context */\n        fprintf(f, \"OS_SocketListen: stage=%s sock_id=%lu token_addr=%p stream_ptr=%p\",\n                stage, (unsigned long)sock_id, (const void *)token_ptr, (const void *)stream);\n\n        /* If stream is available, log its observable fields */\n        if (stream != NULL)\n        {\n            fprintf(f, \" domain=%d type=%d state=0x%08x\",\n                    (int)stream->socket_domain,\n                    (int)stream->socket_type,\n                    (unsigned int)stream->stream_state);\n        }\n\n        /* Return code at this point */\n        fprintf(f, \" return=%ld\\n\", (long)return_code);\n\n        fclose(f);\n    }\n}\n\nint32 OS_SocketListen(osal_id_t sock_id)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log after attempting to get the object id/token */\n    OS_SocketListen_Log(\"after_getid\", sock_id, &token, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log the stream lookup result */\n        OS_SocketListen_Log(\"after_table_get\", sock_id, &token, stream, return_code);\n\n        /* This call is only applicable to stream sockets */\n        if (stream->socket_domain == OS_SocketDomain_INVALID || stream->socket_type != OS_SocketType_STREAM)\n        {\n            /* Not a stream socket */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n            OS_SocketListen_Log(\"incorrect_obj_type\", sock_id, &token, stream, return_code);\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket must be bound to an address already */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            OS_SocketListen_Log(\"not_bound\", sock_id, &token, stream, return_code);\n        }\n        else if ((stream->stream_state & (OS_STREAM_STATE_LISTENING | OS_STREAM_STATE_CONNECTED)) != 0)\n        {\n            /* Socket must be neither listening nor connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            OS_SocketListen_Log(\"already_listening_or_connected\", sock_id, &token, stream, return_code);\n        }\n        else\n        {\n            /* Log just before delegating to implementation */\n            OS_SocketListen_Log(\"before_impl\", sock_id, &token, stream, return_code);\n\n            return_code = OS_SocketListen_Impl(&token);\n\n            /* Log result of impl call */\n            OS_SocketListen_Log(\"after_impl\", sock_id, &token, stream, return_code);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_LISTENING;\n\n                /* Log the state change */\n                OS_SocketListen_Log(\"state_set_listening\", sock_id, &token, stream, return_code);\n            }\n        }\n\n        /* Log before token release */\n        OS_SocketListen_Log(\"before_release\", sock_id, &token, stream, return_code);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Final return value log */\n    OS_SocketListen_Log(\"final\", sock_id, &token, NULL, return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_SocketListen. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim as stated is not correct for the OS_SocketListen code shown. MISRA C 2023 Rule 8.13 says a pointer should point to a const-qualified type whenever possible (i.e. if the pointed\u2011to object is not modified through that pointer). In OS_SocketListen the stream object is written: on success the code executes stream->stream_state |= OS_STREAM_STATE_LISTENING; therefore the local pointer must be a pointer to a non-const type and there is no Rule 8.13 violation in this function.\n\nAgent A\u2019s scenario points at a different location (OS_SocketListen_Impl) where a caller may only read fields and therefore could legitimately use a const-qualified pointer. That would be a separate issue limited to that implementation: if that function declares a non-const pointer but never modifies the object, then it would be appropriate (per R8.13) to declare the pointer as pointing to const. However, changing the object-table macro to always yield a const pointer may not be feasible if other call sites need mutation; the correct fix there is to change individual call sites that only read to use a const-qualified pointer (assignment from non-const* to const* is allowed).\n\nSummary: the reported violation against OS_SocketListen is incorrect. You should, however, review OS_SocketListen_Impl and other callers: if they obtain a non-const pointer and never modify the object, they should use a const-qualified pointer to satisfy Rule 8.13."
}