{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'stream' is only used to read fields (e.g. stream->socket_type) and is not modified in this function, so it should be declared to point to a const-qualified type (e.g. 'const OS_stream_internal_record_t *stream;'). Declaring it non-const when only read violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketSendTo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2011.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketSendTo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketSendTo:\n```c\nint32 OS_SocketSendTo(osal_id_t sock_id, const void *buffer, size_t buflen, const OS_SockAddr_t *RemoteAddr)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n    OS_CHECK_POINTER(RemoteAddr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else\n        {\n            return_code = OS_SocketSendTo_Impl(&token, buffer, buflen, RemoteAddr);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketSendTo code.\n",
  "test_code": "/* Probe/log helper for OS_SocketSendTo - writes to /tmp/logs/2011.txt */\n#include <stdio.h>\n#include <stddef.h>\n\nstatic void OS_SocketSendTo_Log(const char *stage,\n                                unsigned long sock_id_val,\n                                const void *buffer,\n                                size_t buflen,\n                                const void *RemoteAddr,\n                                const void *stream_ptr,\n                                int socket_type_val,\n                                int32 return_code)\n{\n    FILE *fp = fopen(\"/tmp/logs/2011.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging fails, do not alter program behavior. */\n        return;\n    }\n\n    fprintf(fp, \"[OS_SocketSendTo] stage=%s sock_id=%lu buffer=%p buflen=%zu RemoteAddr=%p stream=%p socket_type=%d return_code=%d\\n\",\n            stage, sock_id_val, buffer, buflen, RemoteAddr, stream_ptr, socket_type_val, return_code);\n\n    fclose(fp);\n}\n\nint32 OS_SocketSendTo(osal_id_t sock_id, const void *buffer, size_t buflen, const OS_SockAddr_t *RemoteAddr)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Log entry into function with initial parameters */\n    OS_SocketSendTo_Log(\"entry\", (unsigned long)sock_id, buffer, buflen, RemoteAddr, NULL, -1, -1);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n    OS_CHECK_POINTER(RemoteAddr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    OS_SocketSendTo_Log(\"after_ObjectIdGetById\", (unsigned long)sock_id, buffer, buflen, RemoteAddr, NULL, -1, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log stream pointer and the observed socket_type */\n        {\n            int socket_type_val = -1;\n            if (stream != NULL)\n            {\n                /* Read-only observation of stream->socket_type for logging */\n                socket_type_val = (int)stream->socket_type;\n            }\n            OS_SocketSendTo_Log(\"after_table_get\", (unsigned long)sock_id, buffer, buflen, RemoteAddr, (const void *)stream, socket_type_val, return_code);\n        }\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n\n            /* Log branch taken: incorrect object type */\n            OS_SocketSendTo_Log(\"incorrect_obj_type\", (unsigned long)sock_id, buffer, buflen, RemoteAddr, (const void *)stream, (int)stream->socket_type, return_code);\n        }\n        else\n        {\n            /* Log branch taken: calling implementation */\n            OS_SocketSendTo_Log(\"calling_impl\", (unsigned long)sock_id, buffer, buflen, RemoteAddr, (const void *)stream, (int)stream->socket_type, return_code);\n\n            return_code = OS_SocketSendTo_Impl(&token, buffer, buflen, RemoteAddr);\n\n            /* Log result from implementation call */\n            OS_SocketSendTo_Log(\"after_impl\", (unsigned long)sock_id, buffer, buflen, RemoteAddr, (const void *)stream, (int)stream->socket_type, return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log token release */\n        OS_SocketSendTo_Log(\"after_release\", (unsigned long)sock_id, buffer, buflen, RemoteAddr, (const void *)stream, (int)stream->socket_type, return_code);\n    }\n\n    /* Final return logging */\n    OS_SocketSendTo_Log(\"exit\", (unsigned long)sock_id, buffer, buflen, RemoteAddr, NULL, -1, return_code);\n\n    return return_code;\n}\n"
}