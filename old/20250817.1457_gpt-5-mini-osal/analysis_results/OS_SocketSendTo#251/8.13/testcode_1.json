{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'stream' is declared as a non-const OS_stream_internal_record_t * but in this function it is only read (stream->socket_type). Therefore it could and should be declared as a pointer to const (const OS_stream_internal_record_t *stream). As written the code does not use a const-qualified pointer when possible, so Rule 8.13 is violated. (If OS_OBJECT_TABLE_GET must return a mutable pointer because callers modify the object, the local variable here should still be const if this function does not modify the object.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketSendTo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2011.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketSendTo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketSendTo:\n```c\nint32 OS_SocketSendTo(osal_id_t sock_id, const void *buffer, size_t buflen, const OS_SockAddr_t *RemoteAddr)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n    OS_CHECK_POINTER(RemoteAddr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else\n        {\n            return_code = OS_SocketSendTo_Impl(&token, buffer, buflen, RemoteAddr);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketSendTo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: appends log messages to /tmp/logs/2011.txt */\nstatic void OS_SendTo_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2011.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_SocketSendTo(osal_id_t sock_id, const void *buffer, size_t buflen, const OS_SockAddr_t *RemoteAddr)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n    OS_CHECK_POINTER(RemoteAddr);\n\n    /* Log entry with key parameters (addresses and sizes) */\n    OS_SendTo_LogProbe(\"OS_SocketSendTo entry: sock_id=%llu, buffer=%p, buflen=%zu, RemoteAddr=%p\",\n                       (unsigned long long) sock_id, buffer, buflen, (const void *) RemoteAddr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    OS_SendTo_LogProbe(\"OS_ObjectIdGetById returned: %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log the retrieved stream pointer and token address for reproduction */\n        OS_SendTo_LogProbe(\"OS_OBJECT_TABLE_GET -> stream=%p, token_addr=%p\", (void *)stream, (void *)&token);\n\n        /* Log the observed socket_type value read from the stream */\n        /* Cast to int for logging; the exact enum/integer type is platform-dependent */\n        OS_SendTo_LogProbe(\"stream->socket_type=%d\", (int)stream->socket_type);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            OS_SendTo_LogProbe(\"Decision: incorrect object type (expected DATAGRAM). Setting return_code=OS_ERR_INCORRECT_OBJ_TYPE\");\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else\n        {\n            OS_SendTo_LogProbe(\"Decision: socket_type is DATAGRAM. Calling OS_SocketSendTo_Impl\");\n            return_code = OS_SocketSendTo_Impl(&token, buffer, buflen, RemoteAddr);\n            OS_SendTo_LogProbe(\"OS_SocketSendTo_Impl returned: %d\", (int)return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_SendTo_LogProbe(\"OS_ObjectIdRelease called for token at %p\", (void *)&token);\n    }\n\n    OS_SendTo_LogProbe(\"OS_SocketSendTo exit: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}