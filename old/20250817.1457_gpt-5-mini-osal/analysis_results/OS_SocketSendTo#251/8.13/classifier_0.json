{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_SocketSendTo:\n```c\nint32 OS_SocketSendTo(osal_id_t sock_id, const void *buffer, size_t buflen, const OS_SockAddr_t *RemoteAddr)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n    OS_CHECK_POINTER(RemoteAddr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else\n        {\n            return_code = OS_SocketSendTo_Impl(&token, buffer, buflen, RemoteAddr);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn_code = OS_SocketSendTo_Impl(&token, buffer, buflen, RemoteAddr);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation can be concluded from this call site. The address of a local OS_object_token_t (token) is passed to OS_SocketSendTo_Impl(&token, buffer, buflen, RemoteAddr). The MISRA 8.13 concern is about declarations: pointers should be to const-qualified types when the pointed-to object is not modified. In this code token is obtained via OS_ObjectIdGetById and later released via OS_ObjectIdRelease(&token), so it is plausible that the token is intended to be mutable and that OS_SocketSendTo_Impl expects a non-const OS_object_token_t *. Therefore the call itself does not demonstrate a violation.\n\nSpecific violation scenario (what would be a violation): If OS_SocketSendTo_Impl has the signature OS_SocketSendTo_Impl(const OS_object_token_t *token, const void *buffer, size_t buflen, const OS_SockAddr_t *RemoteAddr) or, conversely, if the actual signature is OS_SocketSendTo_Impl(OS_object_token_t *token, ...) but the implementation does not modify *token, then the parameter should have been declared as pointer-to-const. In that case the current (non-const) pointer parameter would violate MISRA C 2023 Rule 8.13."
}