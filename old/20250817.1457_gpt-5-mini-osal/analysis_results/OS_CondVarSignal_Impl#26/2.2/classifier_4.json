{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_CondVarSignal_Impl:\n```c\nint32 OS_CondVarSignal_Impl(const OS_object_token_t *token)\n{\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    status = pthread_cond_signal(&impl->cv);\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_CondVarSignal_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_condvar_internal_record_t OS_impl_condvar_table[OS_MAX_CONDVARS]\n...\ntypedef struct\n{\n    pthread_mutex_t mut;\n    pthread_cond_t  cv;\n} OS_impl_condvar_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nint32 OS_CondVarWait_Impl(const OS_object_token_t *token)\n{\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    /*\n     * note that because pthread_cond_wait is a cancellation point, this needs to\n     * employ the same protection that is in the binsem module.  In the event that\n     * the thread is canceled inside pthread_cond_wait, the mutex will be re-acquired\n     * before the cancellation occurs, leaving the mutex in a locked state.\n     */\n    pthread_cleanup_push(OS_Posix_CondVarReleaseMutex, &impl->mut);\n    status = pthread_cond_wait(&impl->cv, &impl->mut);\n    pthread_cleanup_pop(false);\n\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n...\nint32 OS_CondVarTimedWait_Impl(const OS_object_token_t *token, const OS_time_t *abs_wakeup_time)\n{\n    struct timespec                    limit;\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    limit.tv_sec  = OS_TimeGetTotalSeconds(*abs_wakeup_time);\n    limit.tv_nsec = OS_TimeGetNanosecondsPart(*abs_wakeup_time);\n\n    pthread_cleanup_push(OS_Posix_CondVarReleaseMutex, &impl->mut);\n    status = pthread_cond_timedwait(&impl->cv, &impl->mut, &limit);\n    pthread_cleanup_pop(false);\n\n    if (status == ETIMEDOUT)\n    {\n        return OS_ERROR_TIMEOUT;\n    }\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n...\nint32 OS_CondVarBroadcast_Impl(const OS_object_token_t *token)\n{\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    status = pthread_cond_broadcast(&impl->cv);\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n...\nint32 OS_CondVarCreate_Impl(const OS_object_token_t *token, uint32 options)\n{\n    int32                              final_status;\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    final_status = OS_SUCCESS;\n    impl         = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    /*\n    ** create the underlying mutex\n    */\n    status = pthread_mutex_init(&impl->mut, NULL);\n    if (status != 0)\n    {\n        OS_DEBUG(\"Error: CondVar mutex could not be created. ID = %lu: %s\\n\",\n                 OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(status));\n        final_status = OS_ERROR;\n    }\n    else\n    {\n        /*\n        ** create the condvar\n        */\n        status = pthread_cond_init(&impl->cv, NULL);\n        if (status != 0)\n        {\n            pthread_mutex_destroy(&impl->mut);\n\n            OS_DEBUG(\"Error: CondVar could not be created. ID = %lu: %s\\n\",\n                     OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), strerror(status));\n            final_status = OS_ERROR;\n        }\n    }\n\n    return final_status;\n}\n...\nint32 OS_CondVarDelete_Impl(const OS_object_token_t *token)\n{\n    int32                              final_status;\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    final_status = OS_SUCCESS;\n    impl         = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    status = pthread_cond_destroy(&impl->cv);\n    if (status != 0)\n    {\n        final_status = OS_ERROR;\n    }\n\n    status = pthread_mutex_destroy(&impl->mut);\n    if (status != 0)\n    {\n        final_status = OS_ERROR;\n    }\n\n    return final_status;\n}\n...\nint32 OS_CondVarLock_Impl(const OS_object_token_t *token)\n{\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    status = pthread_mutex_lock(&impl->mut);\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n...\nint32 OS_CondVarUnlock_Impl(const OS_object_token_t *token)\n{\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    status = pthread_mutex_unlock(&impl->mut);\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERROR (-1)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nOS_impl_condvar_internal_record_t OS_impl_condvar_table[OS_MAX_CONDVARS]\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The global array OS_impl_condvar_table is referenced via OS_OBJECT_TABLE_GET in multiple condvar implementation functions (OS_CondVarSignal_Impl, OS_CondVarWait_Impl, OS_CondVarTimedWait_Impl, OS_CondVarBroadcast_Impl, OS_CondVarCreate_Impl, OS_CondVarDelete_Impl, OS_CondVarLock_Impl, OS_CondVarUnlock_Impl). Removing the array would change program behaviour because these functions dereference it to access the condition variable and mutex records, so the declaration is not dead."
}