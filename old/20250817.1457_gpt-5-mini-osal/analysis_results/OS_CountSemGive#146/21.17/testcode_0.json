{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(token, 0, sizeof(*token)) writes sizeof(*token) bytes to the address in token without checking that token is non-NULL and points to an object of at least that size. If a caller invokes OS_ObjectIdTransactionInit(..., NULL) (or otherwise passes a pointer to a smaller/invalid buffer), this will write out of bounds (e.g. dereference NULL) and cause undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemGive code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1175.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemGive as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGive:\n```c\nint32 OS_CountSemGive(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemGive_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemGive code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe function to log control flow and state to /tmp/logs/1175.txt\n * - stage: textual stage marker\n * - token_ptr: address of the token variable (do not dereference)\n * - return_code: current return code\n * - sem_id: semaphore id cast to unsigned long long for diagnostic printing\n * This function intentionally does not dereference token_ptr to avoid\n * introducing any new memory accesses.\n */\nstatic void OS_1175_Log(const char *stage, const void *token_ptr, long long return_code, unsigned long long sem_id)\n{\n    FILE *f = fopen(\"/tmp/logs/1175.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* sizeof on the pointed-to type is not possible here (token_ptr is void*),\n         * but the caller will pass the address of a typed object and we can\n         * additionally log the pointer address and codes. Keep this log minimal\n         * and safe (no dereference of token_ptr).\n         */\n        fprintf(f, \"%s: sem_id=%llu, return_code=%lld, token_addr=%p\\n\",\n                stage, sem_id, return_code, token_ptr);\n        fclose(f);\n    }\n}\n\nint32 OS_CountSemGive(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and token address before calling the lookup */\n    OS_1175_Log(\"ENTRY_BEFORE_GetById\", (const void *)&token, (long long)-1, (unsigned long long)sem_id);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of lookup and the token address (do NOT dereference token) */\n    OS_1175_Log(\"AFTER_GetById\", (const void *)&token, (long long)return_code, (unsigned long long)sem_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before calling the implementation */\n        OS_1175_Log(\"BEFORE_Impl\", (const void *)&token, (long long)return_code, (unsigned long long)sem_id);\n\n        return_code = OS_CountSemGive_Impl(&token);\n\n        /* Log result after implementation */\n        OS_1175_Log(\"AFTER_Impl\", (const void *)&token, (long long)return_code, (unsigned long long)sem_id);\n    }\n\n    /* Log return state */\n    OS_1175_Log(\"RETURN\", (const void *)&token, (long long)return_code, (unsigned long long)sem_id);\n\n    return return_code;\n}\n"
}