{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe call to pthread_mutexattr_setprotocol follows the POSIX convention of returning 0 on success and a positive error number on failure. The code tests if (status < 0) which can never be true for the documented return values (0 or positive). Therefore the diagnostic/debug branch (BSP_DEBUG(...)) is effectively unreachable on compliant pthread implementations. (Note: BSP_DEBUG is defined as empty in the provided additional code, so the call is removed, but even without that, the if-condition is always false for standard POSIX behavior.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/9.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Initialize as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Initialize:\n```c\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(strtoul(buffer, NULL, 10));\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n            }\n            fclose(fp);\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n    }\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n    }\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Initialize code.\n",
  "test_code": "static void OS_BSP_LogProbe(const char *point, const char *call, int status, const char *note)\n{\n    FILE *lf = fopen(\"/tmp/logs/9.txt\", \"a\");\n    if (lf)\n    {\n        /* Try to provide both numeric status and strerror description (if available) */\n        if (status != 0)\n        {\n            fprintf(lf, \"%s: %s -> status=%d (%s) : %s\\n\", point, call, status, strerror(status), (note != NULL) ? note : \"\");\n        }\n        else\n        {\n            fprintf(lf, \"%s: %s -> status=%d (Success) : %s\\n\", point, call, status, (note != NULL) ? note : \"\");\n        }\n        fclose(lf);\n    }\n}\n\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    /* Log entry into function */\n    OS_BSP_LogProbe(\"ENTRY\", \"OS_BSP_Initialize\", 0, \"entering function\");\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        OS_BSP_LogProbe(\"CHECK\", \"geteuid\", 0, \"not root, attempting to read /proc/sys/fs/mqueue/msg_max\");\n\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            OS_BSP_LogProbe(\"FILE\", \"fopen\", 0, \"/proc/sys/fs/mqueue/msg_max opened\");\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                unsigned long val = strtoul(buffer, NULL, 10);\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(val);\n                OS_BSP_LogProbe(\"PARSE\", \"strtoul\", 0, \"parsed /proc value\");\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n                OS_BSP_LogProbe(\"STATE\", \"MaxQueueDepth\", 0, \"updated OS_BSP_Global.MaxQueueDepth\");\n            }\n            else\n            {\n                OS_BSP_LogProbe(\"READ\", \"fgets\", errno, \"fgets returned NULL\");\n            }\n            fclose(fp);\n            OS_BSP_LogProbe(\"FILE\", \"fclose\", 0, \"/proc file closed\");\n        }\n        else\n        {\n            OS_BSP_LogProbe(\"FILE\", \"fopen\", errno, \"/proc/sys/fs/mqueue/msg_max not available\");\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    OS_BSP_LogProbe(\"AFTER_CALL\", \"pthread_mutexattr_init\", status, NULL);\n    if (status < 0)\n    {\n        OS_BSP_LogProbe(\"BRANCH\", \"pthread_mutexattr_init_if\", status, \"status < 0: branch taken\");\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n    }\n    else\n    {\n        OS_BSP_LogProbe(\"BRANCH\", \"pthread_mutexattr_init_if\", status, \"status < 0: branch not taken\");\n    }\n\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    OS_BSP_LogProbe(\"AFTER_CALL\", \"pthread_mutexattr_setprotocol\", status, \"setprotocol call returned\");\n    if (status < 0)\n    {\n        OS_BSP_LogProbe(\"BRANCH\", \"pthread_mutexattr_setprotocol_if\", status, \"status < 0: branch taken\");\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n    }\n    else\n    {\n        OS_BSP_LogProbe(\"BRANCH\", \"pthread_mutexattr_setprotocol_if\", status, \"status < 0: branch not taken\");\n    }\n\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    OS_BSP_LogProbe(\"AFTER_CALL\", \"pthread_mutex_init\", status, NULL);\n    if (status < 0)\n    {\n        OS_BSP_LogProbe(\"BRANCH\", \"pthread_mutex_init_if\", status, \"status < 0: branch taken\");\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n    }\n    else\n    {\n        OS_BSP_LogProbe(\"BRANCH\", \"pthread_mutex_init_if\", status, \"status < 0: branch not taken\");\n    }\n\n    /* Log exit from function */\n    OS_BSP_LogProbe(\"EXIT\", \"OS_BSP_Initialize\", 0, \"exiting function\");\n}\n"
}