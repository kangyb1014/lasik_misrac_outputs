{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe POSIX function pthread_mutexattr_init returns 0 on success and a positive error number on failure (it does not return negative values). Therefore the test if (status < 0) can never be true and the BSP_DEBUG call inside the if-block is unreachable. This violates MISRA C 2023 Rule 2.1. Recommended fix: check for non-zero error (e.g. if (status != 0) ) or otherwise handle the documented return values correctly.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/9.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Initialize as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Initialize:\n```c\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(strtoul(buffer, NULL, 10));\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n            }\n            fclose(fp);\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n    }\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n    }\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Initialize code.\n",
  "test_code": "static void os_bsp_log_probe(const char *fmt, ...)\n{\n    FILE *lf = fopen(\"/tmp/logs/9.txt\", \"a\");\n    if (!lf)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(lf, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\", lf);\n    fclose(lf);\n}\n\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    os_bsp_log_probe(\"OS_BSP_Initialize: enter (pid=%d, euid=%d)\", (int)getpid(), (int)geteuid());\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        os_bsp_log_probe(\"Checked /proc/sys/fs/mqueue/msg_max: fopen returned %p\", (void *)fp);\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(strtoul(buffer, NULL, 10));\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n                os_bsp_log_probe(\"Parsed msg_max => %u\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n            }\n            fclose(fp);\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    os_bsp_log_probe(\"pthread_mutexattr_init returned status=%d\", status);\n    /* Log the decision about the check so an off-by-sign or wrong-condition issue can be observed */\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n        os_bsp_log_probe(\"Entered error branch: status < 0 (status=%d)\", status);\n    }\n    else\n    {\n        os_bsp_log_probe(\"Did NOT enter error branch for pthread_mutexattr_init (status=%d) -- original code checks status < 0\", status);\n    }\n\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    os_bsp_log_probe(\"pthread_mutexattr_setprotocol returned status=%d\", status);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n        os_bsp_log_probe(\"Entered error branch: status < 0 (status=%d)\", status);\n    }\n    else\n    {\n        os_bsp_log_probe(\"Did NOT enter error branch for pthread_mutexattr_setprotocol (status=%d) -- original code checks status < 0\", status);\n    }\n\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    os_bsp_log_probe(\"pthread_mutex_init returned status=%d\", status);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n        os_bsp_log_probe(\"Entered error branch: status < 0 (status=%d)\", status);\n    }\n    else\n    {\n        os_bsp_log_probe(\"Did NOT enter error branch for pthread_mutex_init (status=%d) -- original code checks status < 0\", status);\n    }\n\n    os_bsp_log_probe(\"OS_BSP_Initialize: exit\");\n}\n"
}