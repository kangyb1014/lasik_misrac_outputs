{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe code tests 'if (status < 0)' after pthread_mutex_init. POSIX pthread_xxx functions return 0 on success and a positive error number on failure (never a negative value). Therefore the condition 'status < 0' is always false and the guarded code is unreachable. (Note: BSP_DEBUG is defined empty here, but even if it were not, the branch would still be unreachable.) Recommended fix: test for error with 'if (status != 0)' or 'if (status > 0)'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/9.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Initialize as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Initialize:\n```c\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(strtoul(buffer, NULL, 10));\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n            }\n            fclose(fp);\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n    }\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n    }\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Initialize code.\n",
  "test_code": "static void BSP_LOG_PROBE(const char *tag, int status, const char *extra)\n{\n    FILE *log = fopen(\"/tmp/logs/9.txt\", \"a\");\n    if (log != NULL)\n    {\n        if (extra != NULL)\n        {\n            fprintf(log, \"%s: status=%d, info=%s\\n\", tag, status, extra);\n        }\n        else\n        {\n            /* If strerror can interpret the status, include it for more info; otherwise it will just return a string. */\n            fprintf(log, \"%s: status=%d, msg=%s\\n\", tag, status, strerror(status));\n        }\n        fclose(log);\n    }\n}\n\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    /* Log entry to help reproduce control flow */\n    BSP_LOG_PROBE(\"ENTER OS_BSP_Initialize\", 0, \"start\");\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        BSP_LOG_PROBE(\"Non-root path: attempting to open /proc/sys/fs/mqueue/msg_max\", 0, NULL);\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            BSP_LOG_PROBE(\"/proc file opened\", 0, NULL);\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(strtoul(buffer, NULL, 10));\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n                /* Log the value that was read for later analysis */\n                BSP_LOG_PROBE(\"Read msg_max\", (int)OS_BSP_Global.MaxQueueDepth, buffer);\n            }\n            else\n            {\n                BSP_LOG_PROBE(\"fgets on /proc/sys/fs/mqueue/msg_max returned NULL\", 0, NULL);\n            }\n            fclose(fp);\n            BSP_LOG_PROBE(\"/proc file closed\", 0, NULL);\n        }\n        else\n        {\n            BSP_LOG_PROBE(\"/proc/sys/fs/mqueue/msg_max could not be opened\", errno, NULL);\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    BSP_LOG_PROBE(\"pthread_mutexattr_init returned\", status, NULL);\n    if (status < 0)\n    {\n        BSP_LOG_PROBE(\"branch taken: status < 0 after pthread_mutexattr_init\", status, NULL);\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n    }\n    else\n    {\n        BSP_LOG_PROBE(\"branch NOT taken: status < 0 after pthread_mutexattr_init\", status, NULL);\n    }\n\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    BSP_LOG_PROBE(\"pthread_mutexattr_setprotocol returned\", status, NULL);\n    if (status < 0)\n    {\n        BSP_LOG_PROBE(\"branch taken: status < 0 after pthread_mutexattr_setprotocol\", status, NULL);\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n    }\n    else\n    {\n        BSP_LOG_PROBE(\"branch NOT taken: status < 0 after pthread_mutexattr_setprotocol\", status, NULL);\n    }\n\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    BSP_LOG_PROBE(\"pthread_mutex_init returned\", status, NULL);\n    if (status < 0)\n    {\n        BSP_LOG_PROBE(\"branch taken: status < 0 after pthread_mutex_init\", status, NULL);\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n    }\n    else\n    {\n        BSP_LOG_PROBE(\"branch NOT taken: status < 0 after pthread_mutex_init\", status, NULL);\n    }\n\n    BSP_LOG_PROBE(\"EXIT OS_BSP_Initialize\", 0, \"end\");\n}\n"
}