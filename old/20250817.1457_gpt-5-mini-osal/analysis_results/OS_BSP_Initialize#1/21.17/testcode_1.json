{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strerror(status) with an unchecked/possibly invalid error number may lead to out\u2011of\u2011bounds access inside the implementation of strerror. In this code status is the return from pthread_* functions and is only tested as (status < 0). If an implementation of strerror uses the numeric errnum directly to index internal tables (and does not validate range), passing a negative or otherwise invalid status can cause accesses beyond the bounds of those internal objects. Therefore the use of strerror(status) here can violate Rule 21.17 unless status is first validated to be a valid, in\u2011range error number.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/15.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Initialize as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Initialize:\n```c\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(strtoul(buffer, NULL, 10));\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n            }\n            fclose(fp);\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n    }\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n    }\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Initialize code.\n",
  "test_code": "void OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    FILE *              logf;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    /* Open probe log (append) to capture control flow/state for Rule 21.17 investigation */\n    logf = fopen(\"/tmp/logs/15.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"OS_BSP_Initialize: entered (pid=%d, euid=%d)\\n\", (int)getpid(), (int)geteuid());\n        fflush(logf);\n    }\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(strtoul(buffer, NULL, 10));\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n                if (logf)\n                {\n                    fprintf(logf, \"Read /proc/sys/fs/mqueue/msg_max -> %s (MaxQueueDepth=%u)\\n\",\n                            buffer, (unsigned int)OS_BSP_Global.MaxQueueDepth);\n                    fflush(logf);\n                }\n            }\n            fclose(fp);\n        }\n        else\n        {\n            if (logf)\n            {\n                fprintf(logf, \"/proc/sys/fs/mqueue/msg_max: fopen failed (not present or no permission)\\n\");\n                fflush(logf);\n            }\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    if (logf)\n    {\n        fprintf(logf, \"pthread_mutexattr_init returned status=%d\\n\", status);\n        /* Record whether the existing code will take the branch that calls strerror(status) */\n        if (status < 0)\n        {\n            fprintf(logf, \"NOTE: status < 0 -> original code will call strerror(status) with status=%d (potential invalid errnum)\\n\", status);\n        }\n        fflush(logf);\n    }\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n    }\n\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (logf)\n    {\n        fprintf(logf, \"pthread_mutexattr_setprotocol returned status=%d\\n\", status);\n        if (status < 0)\n        {\n            fprintf(logf, \"NOTE: status < 0 -> original code will call strerror(status) with status=%d (potential invalid errnum)\\n\", status);\n        }\n        fflush(logf);\n    }\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n    }\n\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    if (logf)\n    {\n        fprintf(logf, \"pthread_mutex_init returned status=%d\\n\", status);\n        if (status < 0)\n        {\n            fprintf(logf, \"NOTE: status < 0 -> original code will call strerror(status) with status=%d (potential invalid errnum)\\n\", status);\n        }\n        fflush(logf);\n    }\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"OS_BSP_Initialize: exiting\\n\");\n        fclose(logf);\n    }\n}\n"
}