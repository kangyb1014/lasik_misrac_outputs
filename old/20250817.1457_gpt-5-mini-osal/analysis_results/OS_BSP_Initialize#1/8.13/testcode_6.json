{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strerror(status) yields a char * (pointer to non-const) that points to a string which is not intended to be modified, but the code passes it directly as an rvalue without binding it to a const-qualified pointer. Per MISRA C 2023 Rule 8.13, pointers that refer to objects that should not be modified should be const-qualified. Example compliant change: const char *msg = strerror(status); BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", msg);\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/11.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Initialize as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Initialize:\n```c\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(strtoul(buffer, NULL, 10));\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n            }\n            fclose(fp);\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n    }\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n    }\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Initialize code.\n",
  "test_code": "void OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n    FILE *              _log = NULL;\n\n    /* Open probe log (append) to capture control flow/state for analysis */\n    _log = fopen(\"/tmp/logs/11.txt\", \"a\");\n    if (_log)\n    {\n        fprintf(_log, \"ENTER: OS_BSP_Initialize\\n\");\n        fprintf(_log, \"  geteuid() = %u\\n\", (unsigned int)geteuid());\n        fflush(_log);\n    }\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        if (_log) fprintf(_log, \"BRANCH: non-root path - attempting to open /proc/sys/fs/mqueue/msg_max\\n\");\n\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                unsigned long parsed = strtoul(buffer, NULL, 10);\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(parsed);\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n                if (_log)\n                {\n                    fprintf(_log, \"  READ: /proc/sys/fs/mqueue/msg_max -> '%s'\\n\", buffer);\n                    fprintf(_log, \"  PARSED: strtoul -> %lu; MaxQueueDepth -> %u\\n\",\n                            parsed, (unsigned int)OS_BSP_Global.MaxQueueDepth);\n                    fflush(_log);\n                }\n            }\n            else\n            {\n                if (_log) fprintf(_log, \"  INFO: fgets returned NULL while reading msg_max\\n\");\n            }\n            fclose(fp);\n        }\n        else\n        {\n            if (_log) fprintf(_log, \"  INFO: could not open /proc/sys/fs/mqueue/msg_max (not present or permission denied)\\n\");\n        }\n    }\n    else\n    {\n        if (_log) fprintf(_log, \"BRANCH: running as root - skip /proc/sys/fs/mqueue/msg_max check\\n\");\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    if (status < 0)\n    {\n        /* Capture the strerror result in a const-qualified pointer before logging and debug printing */\n        const char *msg = strerror(status);\n\n        /* Log both the numeric status, the pointer returned by strerror, and the string contents */\n        if (_log)\n        {\n            fprintf(_log, \"ERROR: pthread_mutexattr_init status=%d; strerror() -> %p; msg='%s'\\n\",\n                    status, (void *)msg, (msg != NULL) ? msg : \"(null)\");\n            fflush(_log);\n        }\n\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", msg);\n    }\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (status < 0)\n    {\n        const char *msg = strerror(status);\n        if (_log)\n        {\n            fprintf(_log, \"ERROR: pthread_mutexattr_setprotocol status=%d; strerror() -> %p; msg='%s'\\n\",\n                    status, (void *)msg, (msg != NULL) ? msg : \"(null)\");\n            fflush(_log);\n        }\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", msg);\n    }\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    if (status < 0)\n    {\n        const char *msg = strerror(status);\n        if (_log)\n        {\n            fprintf(_log, \"ERROR: pthread_mutex_init status=%d; strerror() -> %p; msg='%s'\\n\",\n                    status, (void *)msg, (msg != NULL) ? msg : \"(null)\");\n            fflush(_log);\n        }\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", msg);\n    }\n\n    if (_log)\n    {\n        fprintf(_log, \"EXIT: OS_BSP_Initialize\\n\\n\");\n        fclose(_log);\n    }\n}\n"
}