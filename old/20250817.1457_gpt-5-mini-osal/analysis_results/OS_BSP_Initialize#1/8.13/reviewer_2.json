{
  "user_message": "An agent A claimed that the following OS_BSP_Initialize code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_BSP_Initialize.\n```c\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(strtoul(buffer, NULL, 10));\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n            }\n            fclose(fp);\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n    }\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n    }\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n    }\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The call to strerror(status) returns a char * (modifiable pointer to non-const data) but the returned string is not intended to be modified. Per MISRA C 2023 Rule 8.13, pointers that refer to data that should not be modified ought to be const-qualified. Here the code passes the non-const char * result of strerror directly to BSP_DEBUG/printf, which means a non-const pointer is used where a const-qualified pointer would be appropriate (the returned text is read-only).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_BSP_LogProbe(const char *site, int status, const char *errmsg)\n{\n    FILE *log = fopen(\"/tmp/logs/11.txt\", \"a\");\n    if (log != NULL)\n    {\n        /* Log the control site, numeric status, the pointer returned by strerror, and the textual message */\n        fprintf(log, \"[OS_BSP_Probe] site=%s status=%d ptr=%p msg=\\\"%s\\\"\\n\",\n                site, status, (const void *)errmsg, (errmsg != NULL) ? errmsg : \"(null)\");\n        fclose(log);\n    }\n}\n\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(strtoul(buffer, NULL, 10));\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n            }\n            fclose(fp);\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    if (status < 0)\n    {\n        /* Capture the strerror result in a const-qualified pointer to show intended read-only use */\n        const char *errmsg = strerror(status);\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", errmsg);\n        OS_BSP_LogProbe(\"pthread_mutexattr_init\", status, errmsg);\n    }\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (status < 0)\n    {\n        const char *errmsg = strerror(status);\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", errmsg);\n        OS_BSP_LogProbe(\"pthread_mutexattr_setprotocol\", status, errmsg);\n    }\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    if (status < 0)\n    {\n        const char *errmsg = strerror(status);\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", errmsg);\n        OS_BSP_LogProbe(\"pthread_mutex_init\", status, errmsg);\n    }\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_BSP_Initialize. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct in spirit. The POSIX function strerror() has the historical prototype returning char * even though the pointed-at text is not intended to be modified. MISRA C:2023 Rule 8.13 requires that pointers which refer to data that should not be modified be const-qualified where possible. In the original code the return value of strerror(status) is used directly (an expression of type char *), so no const-qualified pointer is created. The intent of 8.13 is not upheld \u2014 the safer form is to capture the result into a const char * (as shown in the test code) or otherwise ensure the pointer is const-qualified.\n\nNote: Some static analysers may not flag the original code because there is no pointer variable declaration (just a function-call expression), and because the underlying library function's prototype itself is char * (a historical incompatibility). However that does not change that the code violates the rule's intent and that the documented remediation (bind to a const char *) is straightforward and correct."
}