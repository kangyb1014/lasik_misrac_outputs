{
  "user_message": "An agent A claimed that the following OS_TimeBaseCreate_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_TimeBaseCreate_Impl.\n```c\nint32 OS_TimeBaseCreate_Impl(const OS_object_token_t *token)\n{\n    int32                               return_code;\n    int                                 status;\n    int                                 i;\n    osal_index_t                        idx;\n    struct sigevent                     evp;\n    struct timespec                     ts;\n    OS_impl_timebase_internal_record_t *local;\n    OS_timebase_internal_record_t *     timebase;\n    OS_VoidPtrValueWrapper_t            arg;\n\n    local    = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, *token);\n    timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, *token);\n\n    /*\n     * Spawn a dedicated time base handler thread\n     *\n     * This alleviates the need to handle expiration in the context of a signal handler -\n     * The handler thread can call a BSP synchronized delay implementation as well as the\n     * application callback function.  It should run with elevated priority to reduce latency.\n     *\n     * Note the thread will not actually start running until this function exits and releases\n     * the global table lock.\n     */\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id      = OS_ObjectIdFromToken(token);\n    return_code = OS_Posix_InternalTaskCreate_Impl(&local->handler_thread, OSAL_PRIORITY_C(0), 0,\n                                                   OS_TimeBasePthreadEntry, arg.opaque_arg);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    local->assigned_signal = 0;\n    clock_gettime(OS_PREFERRED_CLOCK, &local->softsleep);\n\n    /*\n     * Set up the necessary OS constructs\n     *\n     * If an external sync function is used then there is nothing to do here -\n     * we simply call that function and it should synchronize to the time source.\n     *\n     * If no external sync function is provided then this will set up a POSIX\n     * timer to locally simulate the timer tick using the CPU clock.\n     */\n    if (timebase->external_sync == NULL)\n    {\n        sigemptyset(&local->sigset);\n\n        /*\n         * find an RT signal that is not used by another time base object.\n         * This is all done while the global lock is held so no chance of the\n         * underlying tables changing\n         */\n        for (idx = 0; idx < OS_MAX_TIMEBASES; ++idx)\n        {\n            if (OS_ObjectIdIsValid(OS_global_timebase_table[idx].active_id) &&\n                OS_impl_timebase_table[idx].assigned_signal != 0)\n            {\n                sigaddset(&local->sigset, OS_impl_timebase_table[idx].assigned_signal);\n            }\n        }\n\n        for (i = SIGRTMIN; i <= SIGRTMAX; ++i)\n        {\n            if (!sigismember(&local->sigset, i))\n            {\n                local->assigned_signal = i;\n                break;\n            }\n        }\n\n        do\n        {\n            if (local->assigned_signal == 0)\n            {\n                OS_DEBUG(\"No free RT signals to use for simulated time base\\n\");\n                return_code = OS_TIMER_ERR_UNAVAILABLE;\n                break;\n            }\n\n            sigemptyset(&local->sigset);\n            sigaddset(&local->sigset, local->assigned_signal);\n\n            /*\n             * Ensure that the chosen signal is NOT already pending.\n             *\n             * Perform a \"sigtimedwait\" with a zero timeout to poll the\n             * status of the selected signal.  RT signals are also queued,\n             * so this needs to be called in a loop to until sigtimedwait()\n             * returns an error.\n             *\n             * The max number of signals that can be queued is available\n             * via sysconf() as the _SC_SIGQUEUE_MAX value.\n             *\n             * The output is irrelevant here; the objective is to just ensure\n             * that the signal is not already pending.\n             */\n            i = sysconf(_SC_SIGQUEUE_MAX);\n            do\n            {\n                ts.tv_sec  = 0;\n                ts.tv_nsec = 0;\n                if (sigtimedwait(&local->sigset, NULL, &ts) < 0)\n                {\n                    /* signal is NOT pending */\n                    break;\n                }\n                --i;\n            } while (i > 0);\n\n            /*\n            **  Initialize the sigevent structures for the handler.\n            */\n            memset((void *)&evp, 0, sizeof(evp));\n            evp.sigev_notify = SIGEV_SIGNAL;\n            evp.sigev_signo  = local->assigned_signal;\n\n            /*\n             * Pass the Timer Index value of the object ID to the signal handler --\n             *  Note that the upper bits can be safely assumed as a timer ID to recreate the original,\n             *  and doing it this way should still work on a system where sizeof(sival_int) < sizeof(uint32)\n             *  (as long as sizeof(sival_int) >= number of bits in OS_OBJECT_INDEX_MASK)\n             */\n            evp.sigev_value.sival_int = (int)OS_ObjectIdToSerialNumber_Impl(OS_ObjectIdFromToken(token));\n\n            /*\n            ** Create the timer\n            ** Note using the \"MONOTONIC\" clock here as this will still produce consistent intervals\n            ** even if the system clock is stepped (e.g. clock_settime).\n            */\n            status = timer_create(OS_PREFERRED_CLOCK, &evp, &local->host_timerid);\n            if (status < 0)\n            {\n                return_code = OS_TIMER_ERR_UNAVAILABLE;\n                break;\n            }\n\n            timebase->external_sync = OS_TimeBase_SigWaitImpl;\n        } while (0);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /*\n         * NOTE about the thread cancellation -- this technically is just a backup,\n         * we should not need to cancel it because the handler thread will exit automatically\n         * if the active ID does not match the expected value.  This check would fail\n         * if this function returns non-success (the ID in the global will be set zero)\n         */\n        pthread_cancel(local->handler_thread);\n        local->assigned_signal = 0;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The variable 'timebase' in OS_TimeBase_SigWaitImpl is declared as a non-const pointer (OS_timebase_internal_record_t *timebase) but is only used for read-only access (e.g. interval_time = timebase->nominal_start_time; and reading nominal_interval_time). According to MISRA C 2023 Rule 8.13, this pointer should point to a const-qualified type (const OS_timebase_internal_record_t *timebase).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void TBLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/555.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void TBLogState(const char *stage, OS_timebase_internal_record_t *timebase,\n                       OS_impl_timebase_internal_record_t *local, int return_code)\n{\n    /* Log basic pointer addresses and key state visible in this function. */\n    TBLog(\"[Stage] %s | return_code=%d | timebase_ptr=%p | local_ptr=%p | external_sync=%p | assigned_signal=%d\",\n          stage, return_code, (void *)timebase, (void *)local,\n          (void *)(timebase ? (void *)timebase->external_sync : NULL),\n          local ? local->assigned_signal : 0);\n}\n\nint32 OS_TimeBaseCreate_Impl(const OS_object_token_t *token)\n{\n    int32                               return_code;\n    int                                 status;\n    int                                 i;\n    osal_index_t                        idx;\n    struct sigevent                     evp;\n    struct timespec                     ts;\n    OS_impl_timebase_internal_record_t *local;\n    OS_timebase_internal_record_t *     timebase;\n    OS_VoidPtrValueWrapper_t            arg;\n\n    local    = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, *token);\n    timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, *token);\n\n    /* Log initial entry and pointers */\n    TBLogState(\"entry\", timebase, local, -1);\n\n    /*\n     * Spawn a dedicated time base handler thread\n     *\n     * This alleviates the need to handle expiration in the context of a signal handler -\n     * The handler thread can call a BSP synchronized delay implementation as well as the\n     * application callback function.  It should run with elevated priority to reduce latency.\n     *\n     * Note the thread will not actually start running until this function exits and releases\n     * the global table lock.\n     */\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id      = OS_ObjectIdFromToken(token);\n    return_code = OS_Posix_InternalTaskCreate_Impl(&local->handler_thread, OSAL_PRIORITY_C(0), 0,\n                                                   OS_TimeBasePthreadEntry, arg.opaque_arg);\n\n    /* Log after thread create attempt */\n    TBLogState(\"after_thread_create\", timebase, local, return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    local->assigned_signal = 0;\n    clock_gettime(OS_PREFERRED_CLOCK, &local->softsleep);\n\n    /*\n     * Set up the necessary OS constructs\n     *\n     * If an external sync function is used then there is nothing to do here -\n     * we simply call that function and it should synchronize to the time source.\n     *\n     * If no external sync function is provided then this will set up a POSIX\n     * timer to locally simulate the timer tick using the CPU clock.\n     */\n    if (timebase->external_sync == NULL)\n    {\n        /* Log decision to configure local simulated timer */\n        TBLogState(\"external_sync_is_null_enter\", timebase, local, return_code);\n\n        sigemptyset(&local->sigset);\n\n        /*\n         * find an RT signal that is not used by another time base object.\n         * This is all done while the global lock is held so no chance of the\n         * underlying tables changing\n         */\n        for (idx = 0; idx < OS_MAX_TIMEBASES; ++idx)\n        {\n            if (OS_ObjectIdIsValid(OS_global_timebase_table[idx].active_id) &&\n                OS_impl_timebase_table[idx].assigned_signal != 0)\n            {\n                sigaddset(&local->sigset, OS_impl_timebase_table[idx].assigned_signal);\n            }\n        }\n\n        for (i = SIGRTMIN; i <= SIGRTMAX; ++i)\n        {\n            if (!sigismember(&local->sigset, i))\n            {\n                local->assigned_signal = i;\n                break;\n            }\n        }\n\n        /* Log which signal was chosen (or 0 if none) */\n        TBLogState(\"signal_selection_done\", timebase, local, return_code);\n\n        do\n        {\n            if (local->assigned_signal == 0)\n            {\n                OS_DEBUG(\"No free RT signals to use for simulated time base\\n\");\n                TBLog(\"no_free_signals | assigned_signal=0\");\n                return_code = OS_TIMER_ERR_UNAVAILABLE;\n                break;\n            }\n\n            sigemptyset(&local->sigset);\n            sigaddset(&local->sigset, local->assigned_signal);\n\n            /*\n             * Ensure that the chosen signal is NOT already pending.\n             *\n             * Perform a \"sigtimedwait\" with a zero timeout to poll the\n             * status of the selected signal.  RT signals are also queued,\n             * so this needs to be called in a loop to until sigtimedwait()\n             * returns an error.\n             *\n             * The max number of signals that can be queued is available\n             * via sysconf() as the _SC_SIGQUEUE_MAX value.\n             *\n             * The output is irrelevant here; the objective is to just ensure\n             * that the signal is not already pending.\n             */\n            i = sysconf(_SC_SIGQUEUE_MAX);\n            do\n            {\n                ts.tv_sec  = 0;\n                ts.tv_nsec = 0;\n                if (sigtimedwait(&local->sigset, NULL, &ts) < 0)\n                {\n                    /* signal is NOT pending */\n                    break;\n                }\n                --i;\n            } while (i > 0);\n\n            /* Log after clearing pending signals loop */\n            TBLogState(\"cleared_pending_signals\", timebase, local, return_code);\n\n            /*\n            **  Initialize the sigevent structures for the handler.\n            */\n            memset((void *)&evp, 0, sizeof(evp));\n            evp.sigev_notify = SIGEV_SIGNAL;\n            evp.sigev_signo  = local->assigned_signal;\n\n            /*\n             * Pass the Timer Index value of the object ID to the signal handler --\n             *  Note that the upper bits can be safely assumed as a timer ID to recreate the original,\n             *  and doing it this way should still work on a system where sizeof(sival_int) < sizeof(uint32)\n             *  (as long as sizeof(sival_int) >= number of bits in OS_OBJECT_INDEX_MASK)\n             */\n            evp.sigev_value.sival_int = (int)OS_ObjectIdToSerialNumber_Impl(OS_ObjectIdFromToken(token));\n\n            /*\n            ** Create the timer\n            ** Note using the \"MONOTONIC\" clock here as this will still produce consistent intervals\n            ** even if the system clock is stepped (e.g. clock_settime).\n            */\n            status = timer_create(OS_PREFERRED_CLOCK, &evp, &local->host_timerid);\n\n            /* Log result of timer_create and host_timerid */\n            TBLog(\"timer_create_status=%d | host_timerid=%p\", status, (void *)&local->host_timerid);\n\n            if (status < 0)\n            {\n                return_code = OS_TIMER_ERR_UNAVAILABLE;\n                break;\n            }\n\n            timebase->external_sync = OS_TimeBase_SigWaitImpl;\n\n            /* Log that external_sync was set */\n            TBLogState(\"external_sync_set\", timebase, local, return_code);\n        } while (0);\n    }\n    else\n    {\n        /* Log that external_sync was already set (external sync case) */\n        TBLogState(\"external_sync_not_null\", timebase, local, return_code);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /*\n         * NOTE about the thread cancellation -- this technically is just a backup,\n         * we should not need to cancel it because the handler thread will exit automatically\n         * if the active ID does not match the expected value.  This check would fail\n         * if this function returns non-success (the ID in the global will be set zero)\n         */\n        pthread_cancel(local->handler_thread);\n        local->assigned_signal = 0;\n\n        /* Log cancellation and final state */\n        TBLogState(\"error_cleanup\", timebase, local, return_code);\n    }\n\n    /* Final exit log */\n    TBLogState(\"exit\", timebase, local, return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_TimeBaseCreate_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct as stated. The supplied code is OS_TimeBaseCreate_Impl, in which the variable timebase is declared as OS_timebase_internal_record_t *timebase and is written to (timebase->external_sync = OS_TimeBase_SigWaitImpl;). Because the object is modified through that pointer, it must not be const and Rule 8.13 is not violated in this function. Agent A also referred to OS_TimeBase_SigWaitImpl (not provided). If that other function truly only performs read-only accesses, then making its pointer parameter const would be appropriate to satisfy Rule 8.13 \u2014 but you must inspect the actual OS_TimeBase_SigWaitImpl implementation to be certain. The test harness shown only logs from Create_Impl and did not exercise or show SigWaitImpl, so it provides no evidence of a violation. Recommendation: (1) If you want to check Rule 8.13 for SigWaitImpl, provide that function\u2019s source and examine whether any writes occur; if none, change the pointer type to const or document a justified deviation. (2) For Create_Impl no change is needed because it legitimately modifies the timebase record."
}