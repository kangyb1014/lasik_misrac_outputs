{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct OS_creator_filter_t contains a pointer member 'void *user_arg' and elsewhere (OS_ForEachFilterCreator) an incoming 'void *ref' is cast to 'OS_creator_filter_t *filter' even though the function does not modify the pointed-at data. These should be const-qualified when the data is not modified (e.g. 'const void *user_arg' in the struct and 'const void *ref' / 'const OS_creator_filter_t *filter' in the function).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachFilterCreator code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1483.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ForEachFilterCreator as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ForEachFilterCreator:\n```c\nbool OS_ForEachFilterCreator(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_creator_filter_t *filter = ref;\n\n    /*\n     * Check if the obj_id is both valid and matches\n     * the specified creator_id\n     */\n    return (OS_ObjectIdIsValid(obj->active_id) && (OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY) ||\n                                                   OS_ObjectIdEqual(obj->creator, filter->creator_id)));\n}\n```\n</target_code>\nPlease provide the modified OS_ForEachFilterCreator code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe helpers: write logs to /tmp/logs/1483.txt */\nstatic void probe_log_open_and_header(FILE **fp)\n{\n    *fp = fopen(\"/tmp/logs/1483.txt\", \"a\");\n    if (*fp)\n    {\n        fprintf(*fp, \"--- OS_ForEachFilterCreator probe ---\\n\");\n    }\n}\n\nstatic void probe_log_close(FILE *fp)\n{\n    if (fp)\n    {\n        fprintf(fp, \"--- end probe ---\\n\\n\");\n        fclose(fp);\n    }\n}\n\nbool OS_ForEachFilterCreator(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    FILE *log = NULL;\n    probe_log_open_and_header(&log);\n\n    /* Preserve original cast/logic as much as possible */\n    OS_creator_filter_t *filter = ref;\n\n    if (log)\n    {\n        /* Log pointer identities so the control flow can be traced */\n        fprintf(log, \"entry: ref=%p, filter=%p, token=%p, obj=%p\\n\",\n                ref, (void *)filter, (const void *)token, (const void *)obj);\n    }\n\n    /* Snapshot the filter memory (if the type is complete at compile time) to show it is not modified. */\n    unsigned char *before = NULL;\n    unsigned char *after = NULL;\n    size_t filter_size = 0u;\n    bool snapshot_success = false;\n\n    if (filter != NULL)\n    {\n        /* sizeof(*filter) requires OS_creator_filter_t to be complete in this translation unit. */\n        filter_size = sizeof(*filter);\n        if (filter_size > 0u)\n        {\n            before = (unsigned char *)malloc(filter_size);\n            after  = (unsigned char *)malloc(filter_size);\n            if (before != NULL && after != NULL)\n            {\n                memcpy(before, (const void *)filter, filter_size);\n                snapshot_success = true;\n            }\n            else\n            {\n                /* If allocation failed, free any partially allocated buffer */\n                free(before);\n                free(after);\n                before = after = NULL;\n            }\n        }\n    }\n\n    /*\n     * Check if the obj_id is both valid and matches\n     * the specified creator_id\n     */\n    bool valid = OS_ObjectIdIsValid(obj->active_id);\n    bool creator_any = OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY);\n    bool creator_equal = OS_ObjectIdEqual(obj->creator, filter->creator_id);\n    bool result = (valid && (creator_any || creator_equal));\n\n    if (log)\n    {\n        fprintf(log, \"evaluations: OS_ObjectIdIsValid(active_id)=%d, \\\\n                OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY)=%d, \\\\n                OS_ObjectIdEqual(obj->creator, filter->creator_id)=%d\\n\",\n                (int)valid, (int)creator_any, (int)creator_equal);\n        fprintf(log, \"final result (to be returned) = %d\\n\", (int)result);\n    }\n\n    /* Take post-call snapshot and compare to pre-call to demonstrate no modification */\n    if (snapshot_success)\n    {\n        memcpy(after, (const void *)filter, filter_size);\n        int cmp = memcmp(before, after, filter_size);\n        if (log)\n        {\n            fprintf(log, \"filter memory snapshot: size=%zu, changed=%d\\n\", filter_size, (cmp != 0));\n            if (cmp != 0)\n            {\n                /* If changed, dump first up to 64 bytes for inspection */\n                size_t dump = (filter_size < 64u) ? filter_size : 64u;\n                fprintf(log, \"filter dump (first %zu bytes) BEFORE:\\n\", dump);\n                for (size_t i = 0u; i < dump; ++i) fprintf(log, \"%02x%cp\", before[i], ((i + 1) % 16) ? ' ' : '\\n');\n                fprintf(log, \"\\nfilter dump (first %zu bytes) AFTER:\\n\", dump);\n                for (size_t i = 0u; i < dump; ++i) fprintf(log, \"%02x%cp\", after[i], ((i + 1) % 16) ? ' ' : '\\n');\n                fprintf(log, \"\\n\");\n            }\n        }\n\n        free(before);\n        free(after);\n    }\n\n    probe_log_close(log);\n\n    return result;\n}\n"
}