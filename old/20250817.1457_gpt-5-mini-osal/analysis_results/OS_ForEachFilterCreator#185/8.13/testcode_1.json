{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'ref' is declared as void * but is only read (assigned to OS_creator_filter_t *filter and only inspected); the function does not modify the object pointed to. According to MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible. Example fix: change the prototype to 'bool OS_ForEachFilterCreator(const void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)' and use 'const OS_creator_filter_t *filter = ref;'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachFilterCreator code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1483.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ForEachFilterCreator as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ForEachFilterCreator:\n```c\nbool OS_ForEachFilterCreator(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_creator_filter_t *filter = ref;\n\n    /*\n     * Check if the obj_id is both valid and matches\n     * the specified creator_id\n     */\n    return (OS_ObjectIdIsValid(obj->active_id) && (OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY) ||\n                                                   OS_ObjectIdEqual(obj->creator, filter->creator_id)));\n}\n```\n</target_code>\nPlease provide the modified OS_ForEachFilterCreator code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <stdint.h>\n\n/* Probe helper: append formatted messages to /tmp/logs/1483.txt */\nstatic void os_log_probe(const char *fmt, ...)\n{\n    char buf[1024];\n    va_list ap;\n    va_start(ap, fmt);\n    int n = vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n\n    int fd = open(\"/tmp/logs/1483.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n    if (fd >= 0)\n    {\n        /* write up to the number of bytes reported by vsnprintf (or the buffer size) */\n        size_t to_write = (n > 0 && n < (int)sizeof(buf)) ? (size_t)n : sizeof(buf);\n        /* ignore return value; logging must not affect control flow */\n        (void)write(fd, buf, to_write);\n        (void)close(fd);\n    }\n}\n\nbool OS_ForEachFilterCreator(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    /* keep original assignment to preserve original logic and signature */\n    OS_creator_filter_t *filter = ref;\n\n    /* Log entry and pointers to reproduce the scenario where 'ref' is only read */\n    os_log_probe(\"ENTRY: OS_ForEachFilterCreator called: ref=%p, token=%p, obj=%p\\n\", ref, (const void *)token, (const void *)obj);\n\n    /* Use a const-qualified view for inspection only (does not modify object) */\n    const OS_creator_filter_t *cfilter = (const OS_creator_filter_t *)ref;\n    os_log_probe(\"INSPECT: filter (as const)=%p, filter->creator_id addr=%p\\n\", (const void *)cfilter, (const void *)&(cfilter->creator_id));\n\n    /* Preserve original checks and logic but log intermediate boolean results */\n    bool is_valid = OS_ObjectIdIsValid(obj->active_id);\n    bool equal_any = OS_ObjectIdEqual(cfilter->creator_id, OS_OBJECT_CREATOR_ANY);\n    bool equal_creator = OS_ObjectIdEqual(obj->creator, cfilter->creator_id);\n\n    os_log_probe(\"CHECKS: is_valid=%d, equal_any=%d, equal_creator=%d\\n\", (int)is_valid, (int)equal_any, (int)equal_creator);\n\n    bool result = (is_valid && (equal_any || equal_creator));\n\n    os_log_probe(\"EXIT: OS_ForEachFilterCreator result=%d\\n\", (int)result);\n\n    return result;\n}\n"
}