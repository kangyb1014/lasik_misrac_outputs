{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'filter' is declared as a non-const OS_creator_filter_t * but is only used for read-only access (reading filter->creator_id). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type where possible. For example, it should be declared as: const OS_creator_filter_t *filter = ref; (or the function parameter changed to const void *ref).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ForEachFilterCreator code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1483.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ForEachFilterCreator as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ForEachFilterCreator:\n```c\nbool OS_ForEachFilterCreator(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_creator_filter_t *filter = ref;\n\n    /*\n     * Check if the obj_id is both valid and matches\n     * the specified creator_id\n     */\n    return (OS_ObjectIdIsValid(obj->active_id) && (OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY) ||\n                                                   OS_ObjectIdEqual(obj->creator, filter->creator_id)));\n}\n```\n</target_code>\nPlease provide the modified OS_ForEachFilterCreator code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/1483.txt */\nstatic void OS_LogForEachFilterCreator(const char *format, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1483.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, format);\n    vfprintf(f, format, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nbool OS_ForEachFilterCreator(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    /* Keep the original (non-const) pointer to reproduce the reported violation scenario */\n    OS_creator_filter_t *filter = ref;\n\n    /* Log entry and key state values to help reproduce and evidence the violation */\n    OS_LogForEachFilterCreator(\"ENTER: OS_ForEachFilterCreator ref=%p token=%p obj=%p\", (void *)ref, (const void *)token, (const void *)obj);\n\n    /* Log fields that are used/read below. Cast to uintptr_t for portable integer printing. */\n    OS_LogForEachFilterCreator(\"obj->active_id=%\" PRIuPTR \", obj->creator=%\" PRIuPTR, (uintptr_t)obj->active_id, (uintptr_t)obj->creator);\n    OS_LogForEachFilterCreator(\"filter=%p filter->creator_id=%\" PRIuPTR, (void *)filter, (uintptr_t)filter->creator_id);\n\n    /* Preserve original logic while capturing intermediate boolean results for traceability. */\n    bool valid = OS_ObjectIdIsValid(obj->active_id);\n    bool any_eq = OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY);\n    bool creator_eq = OS_ObjectIdEqual(obj->creator, filter->creator_id);\n\n    OS_LogForEachFilterCreator(\"OS_ObjectIdIsValid(active_id)=%d\", (int)valid);\n    OS_LogForEachFilterCreator(\"OS_ObjectIdEqual(filter->creator_id, OS_OBJECT_CREATOR_ANY)=%d\", (int)any_eq);\n    OS_LogForEachFilterCreator(\"OS_ObjectIdEqual(obj->creator, filter->creator_id)=%d\", (int)creator_eq);\n\n    bool result = (valid && (any_eq || creator_eq));\n\n    OS_LogForEachFilterCreator(\"EXIT: result=%d\", (int)result);\n\n    return result;\n}\n"
}