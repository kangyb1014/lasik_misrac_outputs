{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_ModuleGetInfo_Impl accepts module_prop as a non-const pointer but the implementation does not modify the pointed-to object. According to MISRA C 2023 Rule 8.13, the pointer should be qualified as pointing to const (e.g. const OS_module_prop_t *module_prop) when modification is not required. Unless the non-const signature is mandated by an external API/override, this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleGetInfo_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/755.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleGetInfo_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleGetInfo_Impl:\n```c\nint32 OS_ModuleGetInfo_Impl(const OS_object_token_t *token, OS_module_prop_t *module_prop)\n{\n    /*\n     * Limiting strictly to POSIX-defined API means there is no defined\n     * method to get information about a module contents.\n     *\n     * The \"dlinfo()\" function might return some interesting information\n     * but this is actually a non-posix extension / platform-defined API.\n     *\n     * This returns success - although there is no information to add here,\n     * the parent/shared layer information is still valid.\n     */\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleGetInfo_Impl code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: logs control flow and state to /tmp/logs/755.txt. */\nstatic void OS_ModuleGetInfo_Log(const void *token_ptr, const void *module_prop_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/755.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not affect original logic. */\n        return;\n    }\n\n    fprintf(f, \"OS_ModuleGetInfo_Impl invoked\\n\");\n    fprintf(f, \"  token address: %p\\n\", token_ptr);\n    fprintf(f, \"  module_prop address: %p\\n\", module_prop_ptr);\n    fprintf(f, \"  module_prop_is_null: %d\\n\", (module_prop_ptr == NULL) ? 1 : 0);\n    fprintf(f, \"  Note: function does not modify *module_prop (intentional for this test)\\n\");\n    fprintf(f, \"---\\n\");\n\n    fclose(f);\n}\n\nint32 OS_ModuleGetInfo_Impl(const OS_object_token_t *token, OS_module_prop_t *module_prop)\n{\n    /* Log entry and state for reproducible evidence that module_prop is not modified. */\n    OS_ModuleGetInfo_Log((const void *)token, (const void *)module_prop);\n\n    /*\n     * Limiting strictly to POSIX-defined API means there is no defined\n     * method to get information about a module contents.\n     *\n     * The \"dlinfo()\" function might return some interesting information\n     * but this is actually a non-posix extension / platform-defined API.\n     *\n     * This returns success - although there is no information to add here,\n     * the parent/shared layer information is still valid.\n     */\n    return OS_SUCCESS;\n}\n"
}