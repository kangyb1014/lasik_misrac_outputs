{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_ModuleGetInfo_Impl is called from OS_ModuleInfo to potentially augment module_prop, but the implementation simply returns OS_SUCCESS and performs no operations or side-effects (it does not use token or modify module_prop). The call is therefore executed but its removal (or replacing it with return_code = OS_SUCCESS) would not change program behaviour. This constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleGetInfo_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/754.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleGetInfo_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleGetInfo_Impl:\n```c\nint32 OS_ModuleGetInfo_Impl(const OS_object_token_t *token, OS_module_prop_t *module_prop)\n{\n    /*\n     * Limiting strictly to POSIX-defined API means there is no defined\n     * method to get information about a module contents.\n     *\n     * The \"dlinfo()\" function might return some interesting information\n     * but this is actually a non-posix extension / platform-defined API.\n     *\n     * This returns success - although there is no information to add here,\n     * the parent/shared layer information is still valid.\n     */\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleGetInfo_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <errno.h>\n\nint32 OS_ModuleGetInfo_Impl(const OS_object_token_t *token, OS_module_prop_t *module_prop)\n{\n    /*\n     * Limiting strictly to POSIX-defined API means there is no defined\n     * method to get information about a module contents.\n     *\n     * The \"dlinfo()\" function might return some interesting information\n     * but this is actually a non-posix extension / platform-defined API.\n     *\n     * This returns success - although there is no information to add here,\n     * the parent/shared layer information is still valid.\n     */\n\n    /* Probe logging: append control-flow and state info so other agents can\n     * reproduce and gather evidence for the reported dead-code scenario.\n     * Do not modify token or module_prop; preserve original behavior. */\n    FILE *logf = fopen(\"/tmp/logs/754.txt\", \"a\");\n    if (logf != NULL)\n    {\n        time_t now = time(NULL);\n        /* Log invocation time and pointer values; avoid dereferencing unknown types. */\n        (void)fprintf(logf, \"OS_ModuleGetInfo_Impl invoked: time=%ld, token=%p, module_prop=%p\\n\",\n                      (long)now, (const void *)token, (const void *)module_prop);\n\n        (void)fprintf(logf, \"token_is_null=%d, module_prop_is_null=%d, errno=%d\\n\",\n                      (token == NULL) ? 1 : 0,\n                      (module_prop == NULL) ? 1 : 0,\n                      errno);\n\n        /* Flush and close to ensure logs are persisted even if program terminates. */\n        (void)fflush(logf);\n        (void)fclose(logf);\n    }\n    else\n    {\n        /* If logging fails, do not alter behavior; keep returning success. */\n    }\n\n    return OS_SUCCESS;\n}\n"
}