{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes the caller-supplied pointer 'name' (only checked for NULL) to OS_ObjectIdFindNextMatch/OS_ObjectNameMatch via a void* cast. If OS_ObjectNameMatch uses standard <string.h> routines (e.g. strcmp/strncpy/strcpy/strncat) on that pointer or on an internal fixed-size name buffer without first ensuring the input is a NUL-terminated string and/or that destination buffers are large enough, those calls can access beyond the bounds of the objects (read past the source buffer or write past the destination). For example, if OS_ObjectNameMatch does strcmp(record->name, (char*)name) and the provided name is not NUL-terminated, strcmp will read out of bounds; or if it does strcpy(record->name, (char*)name) and record->name is smaller than strlen(name)+1, strcpy will write out of bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdTransferToken code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1655.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdTransferToken as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdTransferToken:\n```c\nvoid OS_ObjectIdTransferToken(OS_object_token_t *token_from, OS_object_token_t *token_to)\n{\n    /* start with a simple copy */\n    *token_to = *token_from;\n\n    /*\n     * nullify the old token, such that if release/cancel\n     * is invoked it will have no effect (the real lock is\n     * now on token_to).\n     */\n    token_from->lock_mode = OS_LOCK_MODE_NONE;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdTransferToken code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Probe logger for OS_ObjectIdTransferToken\n * Appends structured diagnostic information to /tmp/logs/1655.txt\n * Does not change the original transfer semantics.\n */\nstatic void OS_ObjectIdTransferToken_log(const OS_object_token_t *from, const OS_object_token_t *to)\n{\n    FILE *f = fopen(\"/tmp/logs/1655.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    fprintf(f, \"\\n--- OS_ObjectIdTransferToken log entry (%ld) ---\\n\", (long)t);\n\n    /* Pointer values */\n    fprintf(f, \"token_from ptr: %p\\n\", (const void *)from);\n    fprintf(f, \"token_to   ptr: %p\\n\", (const void *)to);\n    fprintf(f, \"token_from == token_to ? %s\\n\", (from == to) ? \"yes\" : \"no\");\n\n    /* Safe reporting of lock_mode field (existing field used by original code) */\n    /* Cast to int for printing in case it's an enum or similar. */\n    fprintf(f, \"token_from->lock_mode: %d\\n\", (int)from->lock_mode);\n    fprintf(f, \"token_to->lock_mode:   %d\\n\", (int)to->lock_mode);\n\n    /* Hex dump of the token structures up to a reasonable maximum to show internal state\n     * We use sizeof *from which is a compile-time constant and identical to the copy performed\n     * by the function. Limit output to at most 256 bytes to avoid excessive logs. */\n    size_t struct_size = sizeof *from;\n    size_t max_dump = 256;\n    size_t dump_len = (struct_size < max_dump) ? struct_size : max_dump;\n\n    fprintf(f, \"sizeof(*token) = %zu, dumping first %zu bytes of token_from (hex):\\n\", struct_size, dump_len);\n\n    const unsigned char *bytes = (const unsigned char *)from;\n    for (size_t i = 0; i < dump_len; ++i)\n    {\n        if ((i % 16) == 0)\n        {\n            fprintf(f, \"%04zx: \", i);\n        }\n        fprintf(f, \"%02x \", bytes[i]);\n        if ((i % 16) == 15) fprintf(f, \"\\n\");\n    }\n    if (dump_len % 16) fprintf(f, \"\\n\");\n    if (struct_size > dump_len)\n    {\n        fprintf(f, \"(dump truncated; full size %zu bytes)\\n\", struct_size);\n    }\n\n    /* Note: we intentionally do NOT dereference any pointers embedded inside the token\n     * (e.g. name pointers) to avoid introducing additional out-of-bounds accesses.\n     * The raw hex of the token structure and the lock_mode values should help reproduce\n     * scenarios where a caller-supplied pointer (inside the token) might not be NUL-terminated\n     * or might be inconsistent with expectations of consumers like OS_ObjectNameMatch. */\n\n    fprintf(f, \"--- end log entry ---\\n\");\n    fclose(f);\n}\n\nvoid OS_ObjectIdTransferToken(OS_object_token_t *token_from, OS_object_token_t *token_to)\n{\n    /* start with a simple copy */\n    *token_to = *token_from;\n\n    /* Emit diagnostics after the copy but before we nullify the source token.\n     * This preserves the original logic while providing a reproducible trace of the\n     * token contents and pointers that may be relevant to Rule 21.17 investigations. */\n    OS_ObjectIdTransferToken_log(token_from, token_to);\n\n    /*\n     * nullify the old token, such that if release/cancel\n     * is invoked it will have no effect (the real lock is\n     * now on token_to).\n     */\n    token_from->lock_mode = OS_LOCK_MODE_NONE;\n}\n"
}