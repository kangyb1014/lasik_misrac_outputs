{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe \"if (status < 0)\" branches after pthread_mutexattr_init, pthread_mutexattr_setprotocol and pthread_mutex_init are unreachable because POSIX pthread functions return 0 on success or a positive error number on failure (i.e. status is never negative). Thus the BSP_DEBUG error-reporting blocks can never execute, violating MISRA C 2023 Rule 2.1. (Fix: test for non-zero/!= 0 or > 0 instead of < 0.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_GetReturnStatus code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_GetReturnStatus as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_GetReturnStatus:\n```c\nint OS_BSP_GetReturnStatus(void)\n{\n    int retcode;\n\n    switch (OS_BSP_Global.AppStatus)\n    {\n        case OS_SUCCESS:\n            /* translate OS_SUCCESS to the system EXIT_SUCCESS value (usually 0) */\n            retcode = EXIT_SUCCESS;\n            break;\n\n        case OS_ERROR:\n            /* translate OS_ERROR to the system EXIT_FAILURE value (usually 1) */\n            retcode = EXIT_FAILURE;\n            break;\n\n        default:\n            /* any other value will be passed through (implementation-defined) */\n            /* Range is limited to 0-127, however */\n            retcode = OS_BSP_Global.AppStatus & 0x7F;\n            break;\n    }\n\n    return retcode;\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_GetReturnStatus code.\n",
  "test_code": "int OS_BSP_GetReturnStatus(void)\n{\n    int retcode;\n\n    /* Forward declarations so this function can log without adding headers */\n    typedef struct FILE FILE;\n    extern FILE *fopen(const char *, const char *);\n    extern int fprintf(FILE *, const char *, ...);\n    extern int fclose(FILE *);\n\n    /* open log file in append mode to record control flow and state */\n    FILE *logf = fopen(\"/tmp/logs/1.txt\", \"a\");\n    if (logf)\n    {\n        (void)fprintf(logf, \"ENTER OS_BSP_GetReturnStatus: AppStatus=%d\\n\", OS_BSP_Global.AppStatus);\n    }\n\n    switch (OS_BSP_Global.AppStatus)\n    {\n        case OS_SUCCESS:\n            /* translate OS_SUCCESS to the system EXIT_SUCCESS value (usually 0) */\n            retcode = EXIT_SUCCESS;\n            if (logf)\n            {\n                (void)fprintf(logf, \"branch=OS_SUCCESS, retcode=%d\\n\", retcode);\n            }\n            break;\n\n        case OS_ERROR:\n            /* translate OS_ERROR to the system EXIT_FAILURE value (usually 1) */\n            retcode = EXIT_FAILURE;\n            if (logf)\n            {\n                (void)fprintf(logf, \"branch=OS_ERROR, retcode=%d\\n\", retcode);\n            }\n            break;\n\n        default:\n            /* any other value will be passed through (implementation-defined) */\n            /* Range is limited to 0-127, however */\n            retcode = OS_BSP_Global.AppStatus & 0x7F;\n            if (logf)\n            {\n                (void)fprintf(logf, \"branch=DEFAULT, AppStatus=%d, masked=%d, retcode=%d\\n\",\n                              OS_BSP_Global.AppStatus,\n                              (OS_BSP_Global.AppStatus & 0x7F),\n                              retcode);\n            }\n            break;\n    }\n\n    if (logf)\n    {\n        (void)fprintf(logf, \"EXIT OS_BSP_GetReturnStatus: returning %d\\n\", retcode);\n        (void)fclose(logf);\n    }\n\n    return retcode;\n}\n"
}