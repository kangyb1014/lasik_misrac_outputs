{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nint OS_BSP_GetReturnStatus(void)\n{\n    int retcode;\n\n    /* Forward declarations so this function can log without adding headers */\n    typedef struct FILE FILE;\n    extern FILE *fopen(const char *, const char *);\n    extern int fprintf(FILE *, const char *, ...);\n    extern int fclose(FILE *);\n\n    /* open log file in append mode to record control flow and state */\n    FILE *logf = fopen(\"/tmp/logs/1.txt\", \"a\");\n    if (logf)\n    {\n        (void)fprintf(logf, \"ENTER OS_BSP_GetReturnStatus: AppStatus=%d\\n\", OS_BSP_Global.AppStatus);\n    }\n\n    switch (OS_BSP_Global.AppStatus)\n    {\n        case OS_SUCCESS:\n            /* translate OS_SUCCESS to the system EXIT_SUCCESS value (usually 0) */\n            retcode = EXIT_SUCCESS;\n            if (logf)\n            {\n                (void)fprintf(logf, \"branch=OS_SUCCESS, retcode=%d\\n\", retcode);\n            }\n            break;\n\n        case OS_ERROR:\n            /* translate OS_ERROR to the system EXIT_FAILURE value (usually 1) */\n            retcode = EXIT_FAILURE;\n            if (logf)\n            {\n                (void)fprintf(logf, \"branch=OS_ERROR, retcode=%d\\n\", retcode);\n            }\n            break;\n\n        default:\n            /* any other value will be passed through (implementation-defined) */\n            /* Range is limited to 0-127, however */\n            retcode = OS_BSP_Global.AppStatus & 0x7F;\n            if (logf)\n            {\n                (void)fprintf(logf, \"branch=DEFAULT, AppStatus=%d, masked=%d, retcode=%d\\n\",\n                              OS_BSP_Global.AppStatus,\n                              (OS_BSP_Global.AppStatus & 0x7F),\n                              retcode);\n            }\n            break;\n    }\n\n    if (logf)\n    {\n        (void)fprintf(logf, \"EXIT OS_BSP_GetReturnStatus: returning %d\\n\", retcode);\n        (void)fclose(logf);\n    }\n\n    return retcode;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpbbmpr9mt/src/src/bsp/generic-linux/src/bsp_start.c: In function 'OS_BSP_GetReturnStatus':\n/tmp/tmpbbmpr9mt/src/src/bsp/generic-linux/src/bsp_start.c:160:18: error: conflicting types for 'fopen'; have 'FILE *(const char *, const char *)'\n  160 |     extern FILE *fopen(const char *, const char *);\n      |                  ^~~~~\nIn file included from /tmp/tmpbbmpr9mt/src/src/bsp/generic-linux/src/bsp_start.c:1:\n/usr/include/stdio.h:258:14: note: previous declaration of 'fopen' with type 'FILE *(const char * restrict,  const char * restrict)'\n  258 | extern FILE *fopen (const char *__restrict __filename,\n      |              ^~~~~\n/tmp/tmpbbmpr9mt/src/src/bsp/generic-linux/src/bsp_start.c:161:16: error: conflicting types for 'fprintf'; have 'int(FILE *, const char *, ...)'\n  161 |     extern int fprintf(FILE *, const char *, ...);\n      |                ^~~~~~~\nIn file included from /tmp/tmpbbmpr9mt/src/src/bsp/generic-linux/src/bsp_start.c:1:\n/usr/include/stdio.h:350:12: note: previous declaration of 'fprintf' with type 'int(FILE * restrict,  const char * restrict, ...)'\n  350 | extern int fprintf (FILE *__restrict __stream,\n      |            ^~~~~~~\n/tmp/tmpbbmpr9mt/src/src/bsp/generic-linux/src/bsp_start.c:162:16: error: conflicting types for 'fclose'; have 'int(FILE *)'\n  162 |     extern int fclose(FILE *);\n      |                ^~~~~~\nIn file included from /tmp/tmpbbmpr9mt/src/src/bsp/generic-linux/src/bsp_start.c:1:\n/usr/include/stdio.h:178:12: note: previous declaration of 'fclose' with type 'int(FILE *)'\n  178 | extern int fclose (FILE *__stream);\n      |            ^~~~~~\ngmake[2]: *** [generic-linux_impl/CMakeFiles/osal_generic-linux_impl.dir/build.make:76: generic-linux_impl/CMakeFiles/osal_generic-linux_impl.dir/src/bsp_start.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:893: generic-linux_impl/CMakeFiles/osal_generic-linux_impl.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_BSP_GetReturnStatus as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Minimal definitions so this translation unit compiles standalone. */\nenum { OS_SUCCESS = 0, OS_ERROR = 1 };\n\ntypedef struct {\n    int AppStatus;\n} OS_BSP_Global_t;\n\n/* Define the global used by the function so the file is self-contained. */\nOS_BSP_Global_t OS_BSP_Global = { OS_SUCCESS };\n\nint OS_BSP_GetReturnStatus(void)\n{\n    int retcode;\n\n    /* open log file in append mode to record control flow and state */\n    FILE *logf = fopen(\"/tmp/logs/1.txt\", \"a\");\n    if (logf)\n    {\n        (void)fprintf(logf, \"ENTER OS_BSP_GetReturnStatus: AppStatus=%d\\n\", OS_BSP_Global.AppStatus);\n    }\n\n    switch (OS_BSP_Global.AppStatus)\n    {\n        case OS_SUCCESS:\n            /* translate OS_SUCCESS to the system EXIT_SUCCESS value (usually 0) */\n            retcode = EXIT_SUCCESS;\n            if (logf)\n            {\n                (void)fprintf(logf, \"branch=OS_SUCCESS, retcode=%d\\n\", retcode);\n            }\n            break;\n\n        case OS_ERROR:\n            /* translate OS_ERROR to the system EXIT_FAILURE value (usually 1) */\n            retcode = EXIT_FAILURE;\n            if (logf)\n            {\n                (void)fprintf(logf, \"branch=OS_ERROR, retcode=%d\\n\", retcode);\n            }\n            break;\n\n        default:\n            /* any other value will be passed through (implementation-defined) */\n            /* Range is limited to 0-127, however */\n            retcode = OS_BSP_Global.AppStatus & 0x7F;\n            if (logf)\n            {\n                (void)fprintf(logf, \"branch=DEFAULT, AppStatus=%d, masked=%d, retcode=%d\\n\",\n                              OS_BSP_Global.AppStatus,\n                              (OS_BSP_Global.AppStatus & 0x7F),\n                              retcode);\n            }\n            break;\n    }\n\n    if (logf)\n    {\n        (void)fprintf(logf, \"EXIT OS_BSP_GetReturnStatus: returning %d\\n\", retcode);\n        (void)fclose(logf);\n    }\n\n    return retcode;\n}\n",
  "explanation": "The build errors were caused by local forward declarations of fopen/fprintf/fclose that conflicted with the declarations in <stdio.h>. I removed those forward declarations and included the proper headers (<stdio.h> and <stdlib.h>). To make the file self-contained and compilable, I added minimal definitions for OS_SUCCESS/OS_ERROR and the OS_BSP_Global variable (preserving the original function logic). No macros or mock functions were added."
}