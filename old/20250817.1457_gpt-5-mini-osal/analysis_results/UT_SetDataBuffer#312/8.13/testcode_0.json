{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn UT_GetDataBuffer the local variable ResultDataBuffer is declared as void * but is only used to read/return the pointer (it is never used to modify the pointee inside this function). Per MISRA C 2023 Rule 8.13 it should be declared as const void * when possible (e.g. const void *ResultDataBuffer) to indicate the function does not modify the pointed-to data. Therefore the current declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_SetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2499.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_SetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_SetDataBuffer:\n```c\nvoid UT_SetDataBuffer(UT_EntryKey_t FuncKey, void *DataBuffer, size_t BufferSize, bool AllocateCopy)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    if (DataBuffer != NULL && BufferSize > 0)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set data buffer - UT_MAX_FUNC_STUBS too low?\");\n        }\n        else\n        {\n            StubPtr->FuncKey   = FuncKey;\n            StubPtr->EntryType = UT_ENTRYTYPE_DATA_BUFFER;\n            if (AllocateCopy)\n            {\n                StubPtr->Data.Buff.BasePtr = malloc(BufferSize);\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n            }\n            else\n            {\n                /* Use buffer directly */\n                StubPtr->Data.Buff.BasePtr = DataBuffer;\n            }\n            StubPtr->Data.Buff.TotalSize = BufferSize;\n            StubPtr->Data.Buff.Position  = 0;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_SetDataBuffer code.\n",
  "test_code": "/* Probe helpers for UT_SetDataBuffer logging - writes control flow and state to /tmp/logs/2499.txt */\nstatic void UT_SetDataBuffer_LogState(const char *stage,\n                                     UT_EntryKey_t FuncKey,\n                                     void *DataBuffer,\n                                     size_t BufferSize,\n                                     bool AllocateCopy,\n                                     UT_StubTableEntry_t *StubPtr)\n{\n    FILE *fp = fopen(\"/tmp/logs/2499.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Best-effort logging only */\n    }\n\n    fprintf(fp, \"[UT_SetDataBuffer] Stage: %s\\n\", stage);\n    fprintf(fp, \"  FuncKey: %lu\\n\", (unsigned long)FuncKey);\n    fprintf(fp, \"  DataBuffer: %p\\n\", DataBuffer);\n    fprintf(fp, \"  BufferSize: %zu\\n\", BufferSize);\n    fprintf(fp, \"  AllocateCopy: %d\\n\", (int)AllocateCopy);\n    fprintf(fp, \"  StubPtr: %p\\n\", (void *)StubPtr);\n\n    if (StubPtr != NULL)\n    {\n        /* Probe common fields that are affected by this function */\n        fprintf(fp, \"  StubPtr->FuncKey: %lu\\n\", (unsigned long)StubPtr->FuncKey);\n        fprintf(fp, \"  StubPtr->EntryType: %u\\n\", (unsigned int)StubPtr->EntryType);\n        fprintf(fp, \"  StubPtr->ModeFlags: %u\\n\", (unsigned int)StubPtr->ModeFlags);\n        fprintf(fp, \"  StubPtr->Data.Buff.BasePtr: %p\\n\", (void *)StubPtr->Data.Buff.BasePtr);\n        fprintf(fp, \"  StubPtr->Data.Buff.TotalSize: %zu\\n\", StubPtr->Data.Buff.TotalSize);\n        fprintf(fp, \"  StubPtr->Data.Buff.Position: %zu\\n\", StubPtr->Data.Buff.Position);\n    }\n\n    fprintf(fp, \"--\\n\");\n    fclose(fp);\n}\n\nvoid UT_SetDataBuffer(UT_EntryKey_t FuncKey, void *DataBuffer, size_t BufferSize, bool AllocateCopy)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Log entry */\n    UT_SetDataBuffer_LogState(\"entry\", FuncKey, DataBuffer, BufferSize, AllocateCopy, NULL);\n\n    if (DataBuffer != NULL && BufferSize > 0)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        /* Log after attempting to get stub entry */\n        UT_SetDataBuffer_LogState(\"after_get_stub_entry\", FuncKey, DataBuffer, BufferSize, AllocateCopy, StubPtr);\n\n        if (StubPtr == NULL)\n        {\n            /* Log before abort */\n            UT_SetDataBuffer_LogState(\"stubptr_null_before_abort\", FuncKey, DataBuffer, BufferSize, AllocateCopy, StubPtr);\n            UtAssert_Abort(\"Cannot set data buffer - UT_MAX_FUNC_STUBS too low?\");\n        }\n        else\n        {\n            StubPtr->FuncKey   = FuncKey;\n            StubPtr->EntryType = UT_ENTRYTYPE_DATA_BUFFER;\n\n            /* Log after setting basic fields */\n            UT_SetDataBuffer_LogState(\"after_set_funckey_entrytype\", FuncKey, DataBuffer, BufferSize, AllocateCopy, StubPtr);\n\n            if (AllocateCopy)\n            {\n                StubPtr->Data.Buff.BasePtr = malloc(BufferSize);\n\n                /* Log allocation result */\n                UT_SetDataBuffer_LogState(\"after_malloc\", FuncKey, DataBuffer, BufferSize, AllocateCopy, StubPtr);\n\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    /* Log before abort on allocation failure */\n                    UT_SetDataBuffer_LogState(\"malloc_failed_before_abort\", FuncKey, DataBuffer, BufferSize, AllocateCopy, StubPtr);\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n\n                    /* Log after successful memcpy and flag set */\n                    UT_SetDataBuffer_LogState(\"after_memcpy_and_flag\", FuncKey, DataBuffer, BufferSize, AllocateCopy, StubPtr);\n                }\n            }\n            else\n            {\n                /* Use buffer directly */\n                StubPtr->Data.Buff.BasePtr = DataBuffer;\n\n                /* Log direct buffer use */\n                UT_SetDataBuffer_LogState(\"use_buffer_directly\", FuncKey, DataBuffer, BufferSize, AllocateCopy, StubPtr);\n            }\n\n            StubPtr->Data.Buff.TotalSize = BufferSize;\n            StubPtr->Data.Buff.Position  = 0;\n\n            /* Final state log */\n            UT_SetDataBuffer_LogState(\"final\", FuncKey, DataBuffer, BufferSize, AllocateCopy, StubPtr);\n        }\n    }\n    else\n    {\n        /* Log the branch where inputs are invalid/ignored */\n        UT_SetDataBuffer_LogState(\"invalid_input_no_action\", FuncKey, DataBuffer, BufferSize, AllocateCopy, NULL);\n    }\n}\n"
}