{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strcmp(MetaPtr->Name, Name) only checks MetaPtr->Name != NULL but does not check that Name is non-NULL nor that both strings are NUL-terminated within their allocated bounds. If Name were NULL (e.g. a buggy caller) or if MetaPtr->Name (or Name) pointed to a non\u2011NUL-terminated buffer, strcmp could read past the end of the object(s) and thus violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_SetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2503.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_SetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_SetDataBuffer:\n```c\nvoid UT_SetDataBuffer(UT_EntryKey_t FuncKey, void *DataBuffer, size_t BufferSize, bool AllocateCopy)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    if (DataBuffer != NULL && BufferSize > 0)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set data buffer - UT_MAX_FUNC_STUBS too low?\");\n        }\n        else\n        {\n            StubPtr->FuncKey   = FuncKey;\n            StubPtr->EntryType = UT_ENTRYTYPE_DATA_BUFFER;\n            if (AllocateCopy)\n            {\n                StubPtr->Data.Buff.BasePtr = malloc(BufferSize);\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n            }\n            else\n            {\n                /* Use buffer directly */\n                StubPtr->Data.Buff.BasePtr = DataBuffer;\n            }\n            StubPtr->Data.Buff.TotalSize = BufferSize;\n            StubPtr->Data.Buff.Position  = 0;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_SetDataBuffer code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe/logging helper - writes control flow and key state to /tmp/logs/2503.txt */\nstatic void UT_LogDataBufferProbe(const char *stage, UT_EntryKey_t FuncKey, const void *DataBuffer, size_t BufferSize, bool AllocateCopy, UT_StubTableEntry_t *StubPtr, const void *AllocPtr)\n{\n    FILE *f = NULL;\n\n    /* Try to ensure the logs directory exists; ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/2503.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[UT_SetDataBuffer] stage=%s FuncKey=0x%llx DataBuffer=%p BufferSize=%zu AllocateCopy=%d StubPtr=%p AllocPtr=%p\\n\",\n            stage,\n            (unsigned long long)(uintptr_t)FuncKey,\n            DataBuffer,\n            BufferSize,\n            (int)AllocateCopy,\n            (void *)StubPtr,\n            AllocPtr);\n\n    if (StubPtr != NULL)\n    {\n        /* Log fields that are referenced by the original function. These accesses are gated by StubPtr != NULL. */\n        fprintf(f, \"    StubPtr->FuncKey=0x%llx EntryType=%u ModeFlags=0x%02x\\n\",\n                (unsigned long long)(uintptr_t)StubPtr->FuncKey,\n                (unsigned int)StubPtr->EntryType,\n                (unsigned int)StubPtr->ModeFlags);\n\n        /* Guarded access to Data.Buff members (these members are used in the original function) */\n        fprintf(f, \"    StubPtr->Data.Buff.BasePtr=%p TotalSize=%zu Position=%zu\\n\",\n                (void *)StubPtr->Data.Buff.BasePtr,\n                (size_t)StubPtr->Data.Buff.TotalSize,\n                (size_t)StubPtr->Data.Buff.Position);\n    }\n\n    fclose(f);\n}\n\nvoid UT_SetDataBuffer(UT_EntryKey_t FuncKey, void *DataBuffer, size_t BufferSize, bool AllocateCopy)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Log entry and parameters */\n    UT_LogDataBufferProbe(\"entry\", FuncKey, DataBuffer, BufferSize, AllocateCopy, NULL, NULL);\n\n    if (DataBuffer != NULL && BufferSize > 0)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        /* Log result of getting stub entry */\n        UT_LogDataBufferProbe(\"after_get_stub\", FuncKey, DataBuffer, BufferSize, AllocateCopy, StubPtr, NULL);\n\n        if (StubPtr == NULL)\n        {\n            UT_LogDataBufferProbe(\"abort_no_stub\", FuncKey, DataBuffer, BufferSize, AllocateCopy, NULL, NULL);\n            UtAssert_Abort(\"Cannot set data buffer - UT_MAX_FUNC_STUBS too low?\");\n        }\n        else\n        {\n            StubPtr->FuncKey   = FuncKey;\n            StubPtr->EntryType = UT_ENTRYTYPE_DATA_BUFFER;\n            if (AllocateCopy)\n            {\n                /* Log before allocation */\n                UT_LogDataBufferProbe(\"before_malloc\", FuncKey, DataBuffer, BufferSize, AllocateCopy, StubPtr, NULL);\n\n                StubPtr->Data.Buff.BasePtr = malloc(BufferSize);\n\n                /* Log after allocation (AllocPtr may be NULL on failure) */\n                UT_LogDataBufferProbe(\"after_malloc\", FuncKey, DataBuffer, BufferSize, AllocateCopy, StubPtr, StubPtr->Data.Buff.BasePtr);\n\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    UT_LogDataBufferProbe(\"abort_no_mem\", FuncKey, DataBuffer, BufferSize, AllocateCopy, StubPtr, NULL);\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    /* Log before memcpy to capture source pointer and size used */\n                    UT_LogDataBufferProbe(\"before_memcpy\", FuncKey, DataBuffer, BufferSize, AllocateCopy, StubPtr, StubPtr->Data.Buff.BasePtr);\n\n                    memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize);\n\n                    /* Log after memcpy to indicate the copy completed */\n                    UT_LogDataBufferProbe(\"after_memcpy\", FuncKey, DataBuffer, BufferSize, AllocateCopy, StubPtr, StubPtr->Data.Buff.BasePtr);\n\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n            }\n            else\n            {\n                /* Use buffer directly */\n                UT_LogDataBufferProbe(\"use_direct_buffer\", FuncKey, DataBuffer, BufferSize, AllocateCopy, StubPtr, DataBuffer);\n                StubPtr->Data.Buff.BasePtr = DataBuffer;\n            }\n            StubPtr->Data.Buff.TotalSize = BufferSize;\n            StubPtr->Data.Buff.Position  = 0;\n\n            /* Final state for this operation */\n            UT_LogDataBufferProbe(\"final\", FuncKey, DataBuffer, BufferSize, AllocateCopy, StubPtr, StubPtr->Data.Buff.BasePtr);\n        }\n    }\n    else\n    {\n        /* Log early exit due to null buffer or zero size */\n        UT_LogDataBufferProbe(\"early_exit_invalid_params\", FuncKey, DataBuffer, BufferSize, AllocateCopy, NULL, NULL);\n    }\n}\n"
}