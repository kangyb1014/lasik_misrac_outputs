{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe memcpy can read beyond the source buffer because there is no proof that the DataBuffer object is at least BufferSize bytes long. Example violation: AllocateCopy == true and the caller passes a pointer to a smaller object (e.g. a 16-byte stack buffer or the ARG_DEFAULT_ZERO_VALUE fallback) while BufferSize is larger \u2014 memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize) will read past the bounds of the source, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_SetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2503.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_SetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_SetDataBuffer:\n```c\nvoid UT_SetDataBuffer(UT_EntryKey_t FuncKey, void *DataBuffer, size_t BufferSize, bool AllocateCopy)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    if (DataBuffer != NULL && BufferSize > 0)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set data buffer - UT_MAX_FUNC_STUBS too low?\");\n        }\n        else\n        {\n            StubPtr->FuncKey   = FuncKey;\n            StubPtr->EntryType = UT_ENTRYTYPE_DATA_BUFFER;\n            if (AllocateCopy)\n            {\n                StubPtr->Data.Buff.BasePtr = malloc(BufferSize);\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n            }\n            else\n            {\n                /* Use buffer directly */\n                StubPtr->Data.Buff.BasePtr = DataBuffer;\n            }\n            StubPtr->Data.Buff.TotalSize = BufferSize;\n            StubPtr->Data.Buff.Position  = 0;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_SetDataBuffer code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logging helpers: append messages to /tmp/logs/2503.txt */\nstatic void UT_ProbeLog(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *fp = fopen(\"/tmp/logs/2503.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fprintf(fp, \"\\n\");\n    fflush(fp);\n    fclose(fp);\n}\n\n/* Modified UT_SetDataBuffer with logging probes inserted. */\nvoid UT_SetDataBuffer(UT_EntryKey_t FuncKey, void *DataBuffer, size_t BufferSize, bool AllocateCopy)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Log entry and parameters */\n    UT_ProbeLog(\"UT_SetDataBuffer ENTER: FuncKey=%p, DataBuffer=%p, BufferSize=%zu, AllocateCopy=%d\",\n                (void *)(uintptr_t)FuncKey, DataBuffer, BufferSize, AllocateCopy ? 1 : 0);\n\n    if (DataBuffer != NULL && BufferSize > 0)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        /* Log result of lookup */\n        UT_ProbeLog(\"UT_GetStubEntry returned StubPtr=%p\", (void *)StubPtr);\n\n        if (StubPtr == NULL)\n        {\n            UT_ProbeLog(\"ERROR: Cannot set data buffer - UT_GetStubEntry returned NULL\");\n            UtAssert_Abort(\"Cannot set data buffer - UT_MAX_FUNC_STUBS too low?\");\n        }\n        else\n        {\n            /* Log initial stub state */\n            UT_ProbeLog(\"Setting stub: previous FuncKey=%p, previous EntryType=%d, previous BasePtr=%p, previous TotalSize=%zu, ModeFlags=0x%zx\",\n                        (void *)(uintptr_t)StubPtr->FuncKey,\n                        (int)StubPtr->EntryType,\n                        (void *)StubPtr->Data.Buff.BasePtr,\n                        (size_t)StubPtr->Data.Buff.TotalSize,\n                        (size_t)StubPtr->ModeFlags);\n\n            StubPtr->FuncKey   = FuncKey;\n            StubPtr->EntryType = UT_ENTRYTYPE_DATA_BUFFER;\n            if (AllocateCopy)\n            {\n                UT_ProbeLog(\"AllocateCopy requested: malloc(%zu)\", BufferSize);\n                StubPtr->Data.Buff.BasePtr = malloc(BufferSize);\n                UT_ProbeLog(\"malloc returned %p\", (void *)StubPtr->Data.Buff.BasePtr);\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    UT_ProbeLog(\"ERROR: malloc failed for size %zu\", BufferSize);\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    /* Log memcpy inputs to capture potential violation scenario */\n                    UT_ProbeLog(\"About to memcpy(dest=%p, src=%p, n=%zu)\",\n                                (void *)StubPtr->Data.Buff.BasePtr,\n                                DataBuffer,\n                                BufferSize);\n\n                    /* Preserve original behavior: perform the memcpy */\n                    memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize);\n\n                    UT_ProbeLog(\"memcpy completed: dest=%p now filled (n=%zu). Marking UT_MODEFLAG_ALLOC_BUF\",\n                                (void *)StubPtr->Data.Buff.BasePtr, BufferSize);\n\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n            }\n            else\n            {\n                /* Use buffer directly */\n                UT_ProbeLog(\"Using provided buffer directly: BasePtr set to %p (no allocation)\", DataBuffer);\n                StubPtr->Data.Buff.BasePtr = DataBuffer;\n            }\n            StubPtr->Data.Buff.TotalSize = BufferSize;\n            StubPtr->Data.Buff.Position  = 0;\n\n            UT_ProbeLog(\"Finished setting stub: BasePtr=%p, TotalSize=%zu, Position=%zu, ModeFlags=0x%zx\",\n                        (void *)StubPtr->Data.Buff.BasePtr,\n                        (size_t)StubPtr->Data.Buff.TotalSize,\n                        (size_t)StubPtr->Data.Buff.Position,\n                        (size_t)StubPtr->ModeFlags);\n        }\n    }\n    else\n    {\n        UT_ProbeLog(\"UT_SetDataBuffer skipped: DataBuffer=%p, BufferSize=%zu\", DataBuffer, BufferSize);\n    }\n\n    UT_ProbeLog(\"UT_SetDataBuffer EXIT: FuncKey=%p\", (void *)(uintptr_t)FuncKey);\n}\n"
}