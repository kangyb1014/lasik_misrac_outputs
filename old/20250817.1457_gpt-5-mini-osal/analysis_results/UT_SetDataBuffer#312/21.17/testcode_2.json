{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nUT_SetDataBuffer performs memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize) without any verification that the object pointed to by DataBuffer is at least BufferSize bytes. If the caller (e.g. UT_DefaultHandler_OS_QueuePut) passes a data pointer that references a smaller object than the size argument (for example: data points to a 4-byte int or a 16-byte stack buffer but the size parameter is 100), memcpy will read beyond the source buffer bounds and cause an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_SetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2503.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_SetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_SetDataBuffer:\n```c\nvoid UT_SetDataBuffer(UT_EntryKey_t FuncKey, void *DataBuffer, size_t BufferSize, bool AllocateCopy)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    if (DataBuffer != NULL && BufferSize > 0)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set data buffer - UT_MAX_FUNC_STUBS too low?\");\n        }\n        else\n        {\n            StubPtr->FuncKey   = FuncKey;\n            StubPtr->EntryType = UT_ENTRYTYPE_DATA_BUFFER;\n            if (AllocateCopy)\n            {\n                StubPtr->Data.Buff.BasePtr = malloc(BufferSize);\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n            }\n            else\n            {\n                /* Use buffer directly */\n                StubPtr->Data.Buff.BasePtr = DataBuffer;\n            }\n            StubPtr->Data.Buff.TotalSize = BufferSize;\n            StubPtr->Data.Buff.Position  = 0;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_SetDataBuffer code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <inttypes.h>\n\nvoid UT_SetDataBuffer(UT_EntryKey_t FuncKey, void *DataBuffer, size_t BufferSize, bool AllocateCopy)\n{\n    UT_StubTableEntry_t *StubPtr;\n    FILE *log = fopen(\"/tmp/logs/2503.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_SetDataBuffer ENTER: FuncKey=%\" PRIuPTR \", DataBuffer=%p, BufferSize=%zu, AllocateCopy=%s\\n\",\n                (uintptr_t)FuncKey,\n                DataBuffer,\n                BufferSize,\n                AllocateCopy ? \"true\" : \"false\");\n        fflush(log);\n    }\n\n    if (DataBuffer != NULL && BufferSize > 0)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_SetDataBuffer: UT_GetStubEntry returned StubPtr=%p\\n\", (void *)StubPtr);\n            fflush(log);\n        }\n\n        if (StubPtr == NULL)\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"UT_SetDataBuffer ABORT: Cannot set data buffer - UT_MAX_FUNC_STUBS too low?\\n\");\n                fclose(log);\n            }\n            UtAssert_Abort(\"Cannot set data buffer - UT_MAX_FUNC_STUBS too low?\");\n        }\n        else\n        {\n            StubPtr->FuncKey   = FuncKey;\n            StubPtr->EntryType = UT_ENTRYTYPE_DATA_BUFFER;\n            if (AllocateCopy)\n            {\n                if (log != NULL)\n                {\n                    fprintf(log, \"UT_SetDataBuffer: Allocating copy of size %zu\\n\", BufferSize);\n                    fflush(log);\n                }\n\n                StubPtr->Data.Buff.BasePtr = malloc(BufferSize);\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"UT_SetDataBuffer ABORT: Cannot allocate data buffer - malloc() failed!\\n\");\n                        fclose(log);\n                    }\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"UT_SetDataBuffer: memcpy about to run dst=%p src=%p size=%zu\\n\",\n                                StubPtr->Data.Buff.BasePtr,\n                                DataBuffer,\n                                BufferSize);\n                        fflush(log);\n                    }\n\n                    memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize);\n\n                    if (log != NULL)\n                    {\n                        fprintf(log, \"UT_SetDataBuffer: memcpy completed dst=%p src=%p size=%zu\\n\",\n                                StubPtr->Data.Buff.BasePtr,\n                                DataBuffer,\n                                BufferSize);\n                        fflush(log);\n                    }\n\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n            }\n            else\n            {\n                /* Use buffer directly */\n                if (log != NULL)\n                {\n                    fprintf(log, \"UT_SetDataBuffer: Using provided buffer directly: BasePtr=%p\\n\", DataBuffer);\n                    fflush(log);\n                }\n\n                StubPtr->Data.Buff.BasePtr = DataBuffer;\n            }\n            StubPtr->Data.Buff.TotalSize = BufferSize;\n            StubPtr->Data.Buff.Position  = 0;\n\n            if (log != NULL)\n            {\n                fprintf(log, \"UT_SetDataBuffer: Finalized StubPtr=%p BasePtr=%p TotalSize=%zu Position=%zu ModeFlags=0x%08x\\n\",\n                        (void *)StubPtr,\n                        StubPtr->Data.Buff.BasePtr,\n                        StubPtr->Data.Buff.TotalSize,\n                        (size_t)StubPtr->Data.Buff.Position,\n                        (unsigned)StubPtr->ModeFlags);\n                fflush(log);\n            }\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_SetDataBuffer: No action taken (DataBuffer=%p, BufferSize=%zu)\\n\", DataBuffer, BufferSize);\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_SetDataBuffer EXIT\\n\\n\");\n        fclose(log);\n    }\n}\n"
}