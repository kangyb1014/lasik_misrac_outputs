{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_FileSysFormatVolume_Impl is an unconditional no-op (it only returns OS_SUCCESS) yet is executed when should_format is true from OS_FileSys_Initialize. Because it performs no observable actions and always returns success, executing it does not change program behaviour; removing the call or the function would not affect the program. This constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1410.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_Initialize as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_Initialize:\n```c\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                (void)OS_FileSysStopVolume_Impl(&token);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_Initialize code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <inttypes.h>\n\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    FILE *log = fopen(\"/tmp/logs/1410.txt\", \"a\");\n\n    if (log)\n    {\n        fprintf(log, \"ENTER OS_FileSys_Initialize: address=%p, fsdevname='%s', fsvolname='%s', blocksize=%zu, numblocks=%llu, should_format=%d\\n\",\n                (void *)address, fsdevname ? fsdevname : \"(null)\", fsvolname ? fsvolname : \"(null)\", blocksize,\n                (unsigned long long)numblocks, should_format ? 1 : 0);\n        fflush(log);\n    }\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        /* preserve original behavior but ensure logging and resource cleanup */\n        return_code = OS_FS_ERR_PATH_INVALID;\n        if (log)\n        {\n            fprintf(log, \"Empty name(s) detected: fsdevname[0]=%d, fsvolname[0]=%d, returning %d\\n\",\n                    (int)fsdevname[0], (int)fsvolname[0], return_code);\n            fflush(log);\n        }\n        if (log) fclose(log);\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n    if (log)\n    {\n        fprintf(log, \"After OS_ObjectIdAllocateNew: return_code=%d, token_address=%p\\n\", return_code, (void *)&token);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n\n        if (log)\n        {\n            fprintf(log, \"Populated filesys: address=%p, blocksize=%zu, numblocks=%llu, volume_name='%s'\\n\",\n                    (void *)filesys->address, filesys->blocksize, (unsigned long long)filesys->numblocks,\n                    filesys->volume_name);\n            fflush(log);\n        }\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n            if (log)\n            {\n                fprintf(log, \"Determined fstype VOLATILE_DISK based on address/volname prefix\\n\");\n                fflush(log);\n            }\n        }\n        else if (log)\n        {\n            fprintf(log, \"fstype remains %d\\n\", (int)filesys->fstype);\n            fflush(log);\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n        if (log)\n        {\n            fprintf(log, \"After OS_FileSysStartVolume_Impl: return_code=%d\\n\", return_code);\n            fflush(log);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                if (log)\n                {\n                    fprintf(log, \"should_format is true -> calling OS_FileSysFormatVolume_Impl for token %p\\n\", (void *)&token);\n                    fflush(log);\n                }\n\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n\n                if (log)\n                {\n                    fprintf(log, \"After OS_FileSysFormatVolume_Impl: return_code=%d\\n\", return_code);\n                    fflush(log);\n                }\n            }\n            else if (log)\n            {\n                fprintf(log, \"should_format is false -> skipping format\\n\");\n                fflush(log);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n                if (log)\n                {\n                    fprintf(log, \"Volume marked READY. filesys->flags=0x%08x\\n\", filesys->flags);\n                    fflush(log);\n                }\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                if (log)\n                {\n                    fprintf(log, \"Formatting/initialization failed (code=%d). Stopping volume.\\n\", return_code);\n                    fflush(log);\n                }\n\n                (void)OS_FileSysStopVolume_Impl(&token);\n\n                if (log)\n                {\n                    fprintf(log, \"Called OS_FileSysStopVolume_Impl for token %p\\n\", (void *)&token);\n                    fflush(log);\n                }\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        if (log)\n        {\n            fprintf(log, \"Finalizing new object with return_code=%d for token %p\\n\", return_code, (void *)&token);\n            fflush(log);\n        }\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n        if (log)\n        {\n            fprintf(log, \"After OS_ObjectIdFinalizeNew: final return_code=%d\\n\", return_code);\n            fflush(log);\n        }\n    }\n    else if (log)\n    {\n        fprintf(log, \"OS_ObjectIdAllocateNew failed with return_code=%d\\n\", return_code);\n        fflush(log);\n    }\n\n    if (log) fclose(log);\n    return return_code;\n}\n"
}