{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct member 'char *address' is not const-qualified but in the shown code it is only assigned and inspected (checked against NULL) and never used to modify the pointed-to data. The OS_FileSys_Initialize parameter is also 'char *address' but it is merely stored in filesys->address and not written through. Because the pointer is used in a read-only manner, it should be declared as 'const char *address' (and the API parameter should be const) per MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1411.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_Initialize as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_Initialize:\n```c\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                (void)OS_FileSysStopVolume_Impl(&token);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_Initialize code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n/* Helper logging function - appends to the required logfile. */\nstatic void OS_FileSys_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1411.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', fp);\n    fclose(fp);\n}\n\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /* Log entry and parameters */\n    OS_FileSys_Log(\"OS_FileSys_Initialize ENTER: address=%p, fsdevname='%s', fsvolname='%s', blocksize=%zu, numblocks=%llu, should_format=%d\",\n                   (void *)address,\n                   (fsdevname != NULL) ? fsdevname : \"(null)\",\n                   (fsvolname != NULL) ? fsvolname : \"(null)\",\n                   blocksize,\n                   (unsigned long long)numblocks,\n                   (int)should_format);\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        OS_FileSys_Log(\"OS_FileSys_Initialize EXIT early: invalid empty fsdevname or fsvolname\");\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n    OS_FileSys_Log(\"OS_ObjectIdAllocateNew returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        OS_FileSys_Log(\"Allocated filesys record at %p, initial fstype=%d, incoming address=%p\",\n                       (void *)filesys,\n                       (int)filesys->fstype,\n                       (void *)address);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n\n        OS_FileSys_Log(\"After populate: filesys=%p, filesys->address=%p, filesys->blocksize=%zu, filesys->numblocks=%llu, volume_name='%s'\",\n                       (void *)filesys,\n                       (void *)filesys->address,\n                       filesys->blocksize,\n                       (unsigned long long)filesys->numblocks,\n                       filesys->volume_name);\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            OS_FileSys_Log(\"Condition to set VOLATILE_DISK true: fstype was UNKNOWN, address=%p, volname_prefix_match=%d\",\n                           (void *)filesys->address,\n                           (int)(strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                         sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0));\n\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n\n            OS_FileSys_Log(\"filesys->fstype set to VOLATILE_DISK (value=%d)\", (int)filesys->fstype);\n        }\n        else\n        {\n            OS_FileSys_Log(\"No change to filesys->fstype: current=%d, address=%p, volname_prefix_match=%d\",\n                           (int)filesys->fstype,\n                           (void *)filesys->address,\n                           (int)(strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                         sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0));\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n        OS_FileSys_Log(\"OS_FileSysStartVolume_Impl returned %d\", (int)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                OS_FileSys_Log(\"should_format true, calling OS_FileSysFormatVolume_Impl for token\");\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n                OS_FileSys_Log(\"OS_FileSysFormatVolume_Impl returned %d\", (int)return_code);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n                OS_FileSys_Log(\"filesys marked READY, flags now=0x%08x\", (unsigned int)filesys->flags);\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                OS_FileSys_Log(\"Formatting failed with %d, calling OS_FileSysStopVolume_Impl\", (int)return_code);\n                (void)OS_FileSysStopVolume_Impl(&token);\n                OS_FileSys_Log(\"OS_FileSysStopVolume_Impl called due to formatting failure\");\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n        OS_FileSys_Log(\"OS_ObjectIdFinalizeNew returned %d, exiting with return_code=%d\", (int)return_code, (int)return_code);\n    }\n\n    OS_FileSys_Log(\"OS_FileSys_Initialize EXIT: final return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}