{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct member filesys->address and the function parameter address are both plain char * even though the code never modifies the pointed-to data (only tests for NULL). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible. Concretely, filesys->address should be declared const char * (and the function parameter should be const char *), and the assignment filesys->address = address thus demonstrates a violation of the rule in the current code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1411.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_Initialize as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_Initialize:\n```c\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n        filesys->address   = address;\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                (void)OS_FileSysStopVolume_Impl(&token);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_Initialize code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/* Simple logging helper that writes to /tmp/logs/1411.txt. This function\n * intentionally uses generic pointer types (void *) so it does not depend\n * on project-specific types. It preserves the program logic and only\n * emits observation logs for debugging. */\nstatic void OS_FileSys_LogEvent(const char *event, const void *filesys_ptr, const void *address_ptr,\n                                const char *fsdevname, const char *fsvolname, int return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1411.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"EVENT: %s\\n\", event);\n        fprintf(f, \"  filesys_ptr=%p\\n\", filesys_ptr);\n        fprintf(f, \"  address_ptr=%p\\n\", address_ptr);\n        fprintf(f, \"  is_address_null=%s\\n\", (address_ptr == NULL) ? \"true\" : \"false\");\n        if (fsdevname != NULL)\n        {\n            /* Guard against very long strings though in normal code these are checked earlier */\n            fprintf(f, \"  fsdevname='%s'\\n\", fsdevname);\n        }\n        if (fsvolname != NULL)\n        {\n            fprintf(f, \"  fsvolname='%s'\\n\", fsvolname);\n        }\n        fprintf(f, \"  return_code=%d\\n\\n\", return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_FileSys_Initialize(char *address, const char *fsdevname, const char *fsvolname, size_t blocksize,\n                            osal_blockcount_t numblocks, bool should_format)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    /* Log entry and the raw incoming parameters relevant to the violation scenario. */\n    OS_FileSys_LogEvent(\"ENTRY\", NULL, (const void *)address, fsdevname, fsvolname, 0);\n\n    /*\n     * Check parameters\n     *\n     * Note \"address\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(fsvolname, sizeof(filesys->volume_name), OS_FS_ERR_PATH_TOO_LONG);\n\n    /* check names are not empty strings */\n    if (fsdevname[0] == 0 || fsvolname[0] == 0)\n    {\n        OS_FileSys_LogEvent(\"INVALID_NAMES\", NULL, (const void *)address, fsdevname, fsvolname, OS_FS_ERR_PATH_INVALID);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, fsdevname, &token);\n\n    /* Log result of allocation attempt */\n    OS_FileSys_LogEvent(\"ALLOCATE_NEW_RESULT\", NULL, (const void *)address, fsdevname, fsvolname, (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Log that a table entry was obtained */\n        OS_FileSys_LogEvent(\"TABLE_ENTRY_OBTAINED\", (const void *)filesys, (const void *)address, fsdevname, fsvolname, (int)return_code);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, fsdevname);\n\n        /* populate the VolumeName and BlockSize ahead of the Impl call,\n         * so the implementation can reference this info if necessary */\n        filesys->blocksize = blocksize;\n        filesys->numblocks = numblocks;\n\n        /* Capture the state immediately before assigning the address */\n        OS_FileSys_LogEvent(\"BEFORE_ADDRESS_ASSIGN\", (const void *)filesys, (const void *)address, fsdevname, fsvolname, (int)return_code);\n\n        filesys->address   = address;\n\n        /* Log the assignment so we can reproduce the violation scenario where\n         * a non-const \"char *\" is stored even though it is only read. */\n        OS_FileSys_LogEvent(\"AFTER_ADDRESS_ASSIGN\", (const void *)filesys, (const void *)filesys->address, fsdevname, fsvolname, (int)return_code);\n\n        strncpy(filesys->volume_name, fsvolname, sizeof(filesys->volume_name) - 1);\n\n        /*\n         * Determine basic type of filesystem, if not already known\n         *\n         * if either an address was supplied, or if the volume name\n         * contains the string \"RAM\" then it is a RAM disk. Otherwise\n         * leave the type as UNKNOWN and let the implementation decide.\n         */\n        if (filesys->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n            (filesys->address != NULL || strncmp(filesys->volume_name, OS_FILESYS_RAMDISK_VOLNAME_PREFIX,\n                                                 sizeof(OS_FILESYS_RAMDISK_VOLNAME_PREFIX) - 1) == 0))\n        {\n            /* Log the condition that triggered the fstype change */\n            OS_FileSys_LogEvent(\"FSTYPE_DETECTED_AS_VOLATILE\", (const void *)filesys, (const void *)filesys->address, fsdevname, fsvolname, (int)return_code);\n            filesys->fstype = OS_FILESYS_TYPE_VOLATILE_DISK;\n        }\n\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        /* Log result of start volume implementation */\n        OS_FileSys_LogEvent(\"START_VOLUME_IMPL_RESULT\", (const void *)filesys, (const void *)filesys->address, fsdevname, fsvolname, (int)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * The \"mkfs\" call also formats the device.\n             * this is the primary difference between mkfs and initfs.\n             */\n            if (should_format)\n            {\n                OS_FileSys_LogEvent(\"SHOULD_FORMAT_TRUE\", (const void *)filesys, (const void *)filesys->address, fsdevname, fsvolname, (int)return_code);\n                return_code = OS_FileSysFormatVolume_Impl(&token);\n                OS_FileSys_LogEvent(\"FORMAT_VOLUME_IMPL_RESULT\", (const void *)filesys, (const void *)filesys->address, fsdevname, fsvolname, (int)return_code);\n            }\n\n            if (return_code == OS_SUCCESS)\n            {\n                filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n                OS_FileSys_LogEvent(\"MARKED_READY\", (const void *)filesys, (const void *)filesys->address, fsdevname, fsvolname, (int)return_code);\n            }\n            else\n            {\n                /*\n                 * To avoid leaving in an intermediate state,\n                 * this also stops the volume if formatting failed.\n                 * Cast to void to repress analysis warnings for\n                 * ignored return value.\n                 */\n                (void)OS_FileSysStopVolume_Impl(&token);\n                OS_FileSys_LogEvent(\"FORMAT_FAILED_STOPPED_VOLUME\", (const void *)filesys, (const void *)filesys->address, fsdevname, fsvolname, (int)return_code);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, NULL);\n\n        OS_FileSys_LogEvent(\"FINALIZE_NEW\", (const void *)filesys, (const void *)filesys->address, fsdevname, fsvolname, (int)return_code);\n    }\n\n    /* Final return value logged for completeness */\n    OS_FileSys_LogEvent(\"EXIT\", NULL, (const void *)address, fsdevname, fsvolname, (int)return_code);\n\n    return return_code;\n}\n"
}