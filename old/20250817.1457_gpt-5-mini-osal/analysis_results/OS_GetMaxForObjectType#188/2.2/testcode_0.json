{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment obj_index = OS_ObjectIdToSerialNumber_Impl(object_id) is performed before the type check and is not used if the caller-supplied idtype is not OS_OBJECT_TYPE_UNDEFINED and does not match actual_type. In that case the function returns OS_ERR_INVALID_ID without ever using obj_index, so the call to OS_ObjectIdToSerialNumber_Impl (and the resulting assignment) is executed but could be removed without affecting program behaviour. This constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetMaxForObjectType code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1506.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetMaxForObjectType as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetMaxForObjectType:\n```c\nuint32 OS_GetMaxForObjectType(osal_objtype_t idtype)\n{\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            return OS_MAX_TASKS;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            return OS_MAX_QUEUES;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            return OS_MAX_BIN_SEMAPHORES;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            return OS_MAX_COUNT_SEMAPHORES;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            return OS_MAX_MUTEXES;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            return OS_MAX_NUM_OPEN_FILES;\n        case OS_OBJECT_TYPE_OS_DIR:\n            return OS_MAX_NUM_OPEN_DIRS;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            return OS_MAX_TIMEBASES;\n        case OS_OBJECT_TYPE_OS_TIMECB:\n            return OS_MAX_TIMERS;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            return OS_MAX_MODULES;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            return OS_MAX_FILE_SYSTEMS;\n        case OS_OBJECT_TYPE_OS_CONSOLE:\n            return OS_MAX_CONSOLES;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            return OS_MAX_CONDVARS;\n        default:\n            return 0;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_GetMaxForObjectType code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log control flow and state for debugging purposes.\n * Appends a single line with the idtype, the matched case name and the\n * returned result to the file /tmp/logs/1506.txt.\n */\nstatic void os_getmax_log_probe(int idtype_val, const char *case_name, unsigned long result)\n{\n    FILE *fp = fopen(\"/tmp/logs/1506.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Log format: function, supplied idtype (numeric), matched case name, return value */\n        fprintf(fp, \"[OS_GetMaxForObjectType] idtype=%d case=%s result=%lu\\n\", idtype_val, case_name, result);\n        fclose(fp);\n    }\n}\n\nuint32 OS_GetMaxForObjectType(osal_objtype_t idtype)\n{\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n        {\n            uint32 result = OS_MAX_TASKS;\n            os_getmax_log_probe((int)idtype, \"OS_OBJECT_TYPE_OS_TASK\", (unsigned long)result);\n            return result;\n        }\n        case OS_OBJECT_TYPE_OS_QUEUE:\n        {\n            uint32 result = OS_MAX_QUEUES;\n            os_getmax_log_probe((int)idtype, \"OS_OBJECT_TYPE_OS_QUEUE\", (unsigned long)result);\n            return result;\n        }\n        case OS_OBJECT_TYPE_OS_BINSEM:\n        {\n            uint32 result = OS_MAX_BIN_SEMAPHORES;\n            os_getmax_log_probe((int)idtype, \"OS_OBJECT_TYPE_OS_BINSEM\", (unsigned long)result);\n            return result;\n        }\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n        {\n            uint32 result = OS_MAX_COUNT_SEMAPHORES;\n            os_getmax_log_probe((int)idtype, \"OS_OBJECT_TYPE_OS_COUNTSEM\", (unsigned long)result);\n            return result;\n        }\n        case OS_OBJECT_TYPE_OS_MUTEX:\n        {\n            uint32 result = OS_MAX_MUTEXES;\n            os_getmax_log_probe((int)idtype, \"OS_OBJECT_TYPE_OS_MUTEX\", (unsigned long)result);\n            return result;\n        }\n        case OS_OBJECT_TYPE_OS_STREAM:\n        {\n            uint32 result = OS_MAX_NUM_OPEN_FILES;\n            os_getmax_log_probe((int)idtype, \"OS_OBJECT_TYPE_OS_STREAM\", (unsigned long)result);\n            return result;\n        }\n        case OS_OBJECT_TYPE_OS_DIR:\n        {\n            uint32 result = OS_MAX_NUM_OPEN_DIRS;\n            os_getmax_log_probe((int)idtype, \"OS_OBJECT_TYPE_OS_DIR\", (unsigned long)result);\n            return result;\n        }\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n        {\n            uint32 result = OS_MAX_TIMEBASES;\n            os_getmax_log_probe((int)idtype, \"OS_OBJECT_TYPE_OS_TIMEBASE\", (unsigned long)result);\n            return result;\n        }\n        case OS_OBJECT_TYPE_OS_TIMECB:\n        {\n            uint32 result = OS_MAX_TIMERS;\n            os_getmax_log_probe((int)idtype, \"OS_OBJECT_TYPE_OS_TIMECB\", (unsigned long)result);\n            return result;\n        }\n        case OS_OBJECT_TYPE_OS_MODULE:\n        {\n            uint32 result = OS_MAX_MODULES;\n            os_getmax_log_probe((int)idtype, \"OS_OBJECT_TYPE_OS_MODULE\", (unsigned long)result);\n            return result;\n        }\n        case OS_OBJECT_TYPE_OS_FILESYS:\n        {\n            uint32 result = OS_MAX_FILE_SYSTEMS;\n            os_getmax_log_probe((int)idtype, \"OS_OBJECT_TYPE_OS_FILESYS\", (unsigned long)result);\n            return result;\n        }\n        case OS_OBJECT_TYPE_OS_CONSOLE:\n        {\n            uint32 result = OS_MAX_CONSOLES;\n            os_getmax_log_probe((int)idtype, \"OS_OBJECT_TYPE_OS_CONSOLE\", (unsigned long)result);\n            return result;\n        }\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n        {\n            uint32 result = OS_MAX_CONDVARS;\n            os_getmax_log_probe((int)idtype, \"OS_OBJECT_TYPE_OS_CONDVAR\", (unsigned long)result);\n            return result;\n        }\n        default:\n        {\n            uint32 result = 0U;\n            os_getmax_log_probe((int)idtype, \"DEFAULT\", (unsigned long)result);\n            return result;\n        }\n    }\n}\n"
}