{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_ObjectIdConvertToken has the parameter OS_object_token_t *token but only reads fields (e.g. 'if (token->lock_mode != OS_LOCK_MODE_NONE)') and does not modify *token. Because the pointer could be to a const-qualified type (const OS_object_token_t *token), the current non-const pointer use violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1747.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemDelete:\n```c\nint32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_MutSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe / logging helpers. These are small, self-contained functions that\n * append diagnostic information to /tmp/logs/1747.txt. They do not change\n * the behavior of the original OS_MutSemDelete function and only observe\n * memory/state for debugging purposes. */\nstatic void probe_append_hex(FILE *f, const void *data, size_t len)\n{\n    const unsigned char *p = (const unsigned char *)data;\n    for (size_t i = 0; i < len; ++i)\n    {\n        /* Print bytes as two-digit hex to capture raw state */\n        (void)fprintf(f, \"%02X\", p[i]);\n        if ((i & 0x1F) == 0x1F)\n        {\n            /* wrap lines every 32 bytes for readability */\n            (void)fprintf(f, \"\\n\");\n        }\n    }\n    (void)fprintf(f, \"\\n\");\n}\n\nstatic void probe_log(const char *label, const void *sem_id_ptr, size_t sem_id_len, const void *token_ptr, size_t token_len)\n{\n    FILE *f = fopen(\"/tmp/logs/1747.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    (void)fprintf(f, \"--- %s ---\\n\", label);\n\n    if (sem_id_ptr != NULL && sem_id_len > 0)\n    {\n        (void)fprintf(f, \"sem_id (%zu bytes): \", sem_id_len);\n        probe_append_hex(f, sem_id_ptr, sem_id_len);\n    }\n    else\n    {\n        (void)fprintf(f, \"sem_id: <none>\\n\");\n    }\n\n    if (token_ptr != NULL && token_len > 0)\n    {\n        (void)fprintf(f, \"token (%zu bytes): \", token_len);\n        probe_append_hex(f, token_ptr, token_len);\n    }\n    else\n    {\n        (void)fprintf(f, \"token: <none>\\n\");\n    }\n\n    (void)fprintf(f, \"----------------\\n\");\n    (void)fclose(f);\n}\n\n/* Keep the signature and logic of the original function. Insert probes\n * before and after key operations to capture the control flow and the\n * contents of the token and sem_id for later analysis. */\nint32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log state before attempting to get the object id.\n     * Log the raw bytes of sem_id and the (uninitialized) token bytes so\n     * that a later examination can correlate changes. */\n    probe_log(\"OS_MutSemDelete: before OS_ObjectIdGetById\", &sem_id, sizeof(sem_id), &token, sizeof(token));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log the result of OS_ObjectIdGetById and the token contents if any. */\n    {\n        FILE *f = fopen(\"/tmp/logs/1747.txt\", \"a\");\n        if (f != NULL)\n        {\n            (void)fprintf(f, \"OS_MutSemDelete: OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n            (void)fclose(f);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log state after successful GetById: token should be populated. */\n        probe_log(\"OS_MutSemDelete: after OS_ObjectIdGetById (success)\", &sem_id, sizeof(sem_id), &token, sizeof(token));\n\n        /* Call the implementation delete and log around it. */\n        {\n            FILE *f = fopen(\"/tmp/logs/1747.txt\", \"a\");\n            if (f != NULL)\n            {\n                (void)fprintf(f, \"OS_MutSemDelete: calling OS_MutSemDelete_Impl\\n\");\n                (void)fclose(f);\n            }\n        }\n\n        return_code = OS_MutSemDelete_Impl(&token);\n\n        {\n            FILE *f = fopen(\"/tmp/logs/1747.txt\", \"a\");\n            if (f != NULL)\n            {\n                (void)fprintf(f, \"OS_MutSemDelete: OS_MutSemDelete_Impl returned %d\\n\", (int)return_code);\n                (void)fclose(f);\n            }\n        }\n\n        /* Complete the operation via the common routine. Log before and after. */\n        probe_log(\"OS_MutSemDelete: before OS_ObjectIdFinalizeDelete\", &sem_id, sizeof(sem_id), &token, sizeof(token));\n\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        {\n            FILE *f = fopen(\"/tmp/logs/1747.txt\", \"a\");\n            if (f != NULL)\n            {\n                (void)fprintf(f, \"OS_MutSemDelete: OS_ObjectIdFinalizeDelete returned %d\\n\", (int)return_code);\n                (void)fclose(f);\n            }\n        }\n\n        probe_log(\"OS_MutSemDelete: after OS_ObjectIdFinalizeDelete\", &sem_id, sizeof(sem_id), &token, sizeof(token));\n    }\n    else\n    {\n        /* Log failure path */\n        FILE *f = fopen(\"/tmp/logs/1747.txt\", \"a\");\n        if (f != NULL)\n        {\n            (void)fprintf(f, \"OS_MutSemDelete: OS_ObjectIdGetById failed with %d\\n\", (int)return_code);\n            (void)fclose(f);\n        }\n    }\n\n    return return_code;\n}\n"
}