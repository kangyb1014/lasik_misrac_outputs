{
  "user_message": "An agent A claimed that the following OS_MutSemDelete code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_MutSemDelete.\n```c\nint32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_MutSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function OS_ObjectIdConvertToken is declared as int32 OS_ObjectIdConvertToken(OS_object_token_t *token) but the implementation only reads from the token (accesses token->lock_mode and token->obj_id via helper macros) and does not modify the token object itself. Therefore the pointer parameter could and should be const-qualified (const OS_object_token_t *token). As written the non-const pointer violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1747.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void log_token_state(const char *stage, const OS_object_token_t *token, osal_id_t sem_id, int32 return_code)\n{\n    if (token == NULL)\n    {\n        log_append(\"%s: sem_id=%u return_code=%d token=NULL\", stage, (unsigned)sem_id, (int)return_code);\n    }\n    else\n    {\n        log_append(\"%s: sem_id=%u return_code=%d token->obj_id=%u token->lock_mode=%d\",\n                   stage, (unsigned)sem_id, (int)return_code, (unsigned)token->obj_id, token->lock_mode);\n    }\n}\n\nint32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    log_append(\"OS_MutSemDelete: entry sem_id=%u\", (unsigned)sem_id);\n\n    /* Use the real OS_ObjectIdGetById declared in the project's headers. */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    log_token_state(\"After OS_ObjectIdGetById\", &token, sem_id, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Call the implementation that should only read the token. */\n        log_append(\"About to call OS_MutSemDelete_Impl\");\n        return_code = OS_MutSemDelete_Impl(&token);\n        log_token_state(\"After OS_MutSemDelete_Impl\", &token, sem_id, return_code);\n\n        /* Complete the operation via the common routine */\n        log_append(\"About to call OS_ObjectIdFinalizeDelete\");\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        log_token_state(\"After OS_ObjectIdFinalizeDelete\", &token, sem_id, return_code);\n    }\n    else\n    {\n        log_append(\"OS_MutSemDelete: OS_ObjectIdGetById failed with code=%d\", (int)return_code);\n    }\n\n    log_append(\"OS_MutSemDelete: exit sem_id=%u return_code=%d\", (unsigned)sem_id, (int)return_code);\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_MutSemDelete: entry sem_id=0\nAfter OS_ObjectIdGetById: sem_id=0 return_code=-16 token->obj_id=0 token->lock_mode=0\nOS_MutSemDelete: OS_ObjectIdGetById failed with code=-16\nOS_MutSemDelete: exit sem_id=0 return_code=-16\nOS_MutSemDelete: entry sem_id=0\nAfter OS_ObjectIdGetById: sem_id=0 return_code=-16 token->obj_id=0 token->lock_mode=0\nOS_MutSemDelete: OS_ObjectIdGetById failed with code=-16\nOS_MutSemDelete: exit sem_id=0 return_code=-16\nOS_MutSemDelete: entry sem_id=3735928559\nAfter OS_ObjectIdGetById: sem_id=3735928559 return_code=-16 token->obj_id=0 token->lock_mode=0\nOS_MutSemDelete: OS_ObjectIdGetById failed with code=-16\nOS_MutSemDelete: exit sem_id=3735928559 return_code=-16\nOS_MutSemDelete: entry sem_id=0\nAfter OS_ObjectIdGetById: sem_id=0 return_code=-16 token->obj_id=0 token->lock_mode=0\nOS_MutSemDelete: OS_ObjectIdGetById failed with code=-16\nOS_MutSemDelete: exit sem_id=0 return_code=-16\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C:2023 Rule 8.13 concerns function parameter declarations: a pointer parameter should be const-qualified when the function never modifies the pointed-to object. The submitted OS_MutSemDelete implementation itself does not declare any pointer parameters that could be const \u2014 it creates a local OS_object_token_t and passes its address to other functions. The agent's claim targets a different function (OS_ObjectIdConvertToken) and asserts its parameter could be const, but no implementation or evidence was provided showing the function never modifies the token. The provided test logs only show OS_ObjectIdGetById failing (so the subsequent calls were not exercised), and therefore do not demonstrate that OS_ObjectIdConvertToken (or any other callee) is a read-only routine that would allow a const-qualified parameter. In short, there is insufficient evidence that any function signature actually violates Rule 8.13, so the report is not correct."
}