{
  "user_message": "An agent A claimed that the following OS_MutSemDelete code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_MutSemDelete.\n```c\nint32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_MutSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function OS_ObjectIdConvertToken has the parameter OS_object_token_t *token but only reads fields (e.g. 'if (token->lock_mode != OS_LOCK_MODE_NONE)') and does not modify *token. Because the pointer could be to a const-qualified type (const OS_object_token_t *token), the current non-const pointer use violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_append_hex(FILE *f, const void *data, size_t len)\n{\n    const unsigned char *p = (const unsigned char *)data;\n    for (size_t i = 0; i < len; ++i)\n    {\n        /* Print bytes as two-digit hex to capture raw state */\n        (void)fprintf(f, \"%02X\", p[i]);\n        if ((i & 0x1F) == 0x1F)\n        {\n            /* wrap lines every 32 bytes for readability */\n            (void)fprintf(f, \"\\n\");\n        }\n    }\n    (void)fprintf(f, \"\\n\");\n}\nstatic void probe_log(const char *label, const void *sem_id_ptr, size_t sem_id_len, const void *token_ptr, size_t token_len)\n{\n    FILE *f = fopen(\"/tmp/logs/1747.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    (void)fprintf(f, \"--- %s ---\\n\", label);\n\n    if (sem_id_ptr != NULL && sem_id_len > 0)\n    {\n        (void)fprintf(f, \"sem_id (%zu bytes): \", sem_id_len);\n        probe_append_hex(f, sem_id_ptr, sem_id_len);\n    }\n    else\n    {\n        (void)fprintf(f, \"sem_id: <none>\\n\");\n    }\n\n    if (token_ptr != NULL && token_len > 0)\n    {\n        (void)fprintf(f, \"token (%zu bytes): \", token_len);\n        probe_append_hex(f, token_ptr, token_len);\n    }\n    else\n    {\n        (void)fprintf(f, \"token: <none>\\n\");\n    }\n\n    (void)fprintf(f, \"----------------\\n\");\n    (void)fclose(f);\n}\n\nint32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log state before attempting to get the object id.\n     * Log the raw bytes of sem_id and the (uninitialized) token bytes so\n     * that a later examination can correlate changes. */\n    probe_log(\"OS_MutSemDelete: before OS_ObjectIdGetById\", &sem_id, sizeof(sem_id), &token, sizeof(token));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log the result of OS_ObjectIdGetById and the token contents if any. */\n    {\n        FILE *f = fopen(\"/tmp/logs/1747.txt\", \"a\");\n        if (f != NULL)\n        {\n            (void)fprintf(f, \"OS_MutSemDelete: OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n            (void)fclose(f);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log state after successful GetById: token should be populated. */\n        probe_log(\"OS_MutSemDelete: after OS_ObjectIdGetById (success)\", &sem_id, sizeof(sem_id), &token, sizeof(token));\n\n        /* Call the implementation delete and log around it. */\n        {\n            FILE *f = fopen(\"/tmp/logs/1747.txt\", \"a\");\n            if (f != NULL)\n            {\n                (void)fprintf(f, \"OS_MutSemDelete: calling OS_MutSemDelete_Impl\\n\");\n                (void)fclose(f);\n            }\n        }\n\n        return_code = OS_MutSemDelete_Impl(&token);\n\n        {\n            FILE *f = fopen(\"/tmp/logs/1747.txt\", \"a\");\n            if (f != NULL)\n            {\n                (void)fprintf(f, \"OS_MutSemDelete: OS_MutSemDelete_Impl returned %d\\n\", (int)return_code);\n                (void)fclose(f);\n            }\n        }\n\n        /* Complete the operation via the common routine. Log before and after. */\n        probe_log(\"OS_MutSemDelete: before OS_ObjectIdFinalizeDelete\", &sem_id, sizeof(sem_id), &token, sizeof(token));\n\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        {\n            FILE *f = fopen(\"/tmp/logs/1747.txt\", \"a\");\n            if (f != NULL)\n            {\n                (void)fprintf(f, \"OS_MutSemDelete: OS_ObjectIdFinalizeDelete returned %d\\n\", (int)return_code);\n                (void)fclose(f);\n            }\n        }\n\n        probe_log(\"OS_MutSemDelete: after OS_ObjectIdFinalizeDelete\", &sem_id, sizeof(sem_id), &token, sizeof(token));\n    }\n    else\n    {\n        /* Log failure path */\n        FILE *f = fopen(\"/tmp/logs/1747.txt\", \"a\");\n        if (f != NULL)\n        {\n            (void)fprintf(f, \"OS_MutSemDelete: OS_ObjectIdGetById failed with %d\\n\", (int)return_code);\n            (void)fclose(f);\n        }\n    }\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\n--- OS_MutSemDelete: before OS_ObjectIdGetById ---\nsem_id (4 bytes): 00000000\ntoken (20 bytes): 43ABAF2A00560000030000007D000000D8A9AF2A\n----------------\nOS_MutSemDelete: OS_ObjectIdGetById returned -16\nOS_MutSemDelete: OS_ObjectIdGetById failed with -16\n--- OS_MutSemDelete: before OS_ObjectIdGetById ---\nsem_id (4 bytes): 00000000\ntoken (20 bytes): 020000000056000000000000DDFFFFFF904AE208\n----------------\nOS_MutSemDelete: OS_ObjectIdGetById returned -16\nOS_MutSemDelete: OS_ObjectIdGetById failed with -16\n--- OS_MutSemDelete: before OS_ObjectIdGetById ---\nsem_id (4 bytes): EFBEADDE\ntoken (20 bytes): 604AE208FD7F0000005D372833D75261904AE208\n----------------\nOS_MutSemDelete: OS_ObjectIdGetById returned -16\nOS_MutSemDelete: OS_ObjectIdGetById failed with -16\n--- OS_MutSemDelete: before OS_ObjectIdGetById ---\nsem_id (4 bytes): 00000000\ntoken (20 bytes): 0200000000000000F0FFFFFFF0FFFFFF904AE208\n----------------\nOS_MutSemDelete: OS_ObjectIdGetById returned -16\nOS_MutSemDelete: OS_ObjectIdGetById failed with -16\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent's claim is not supported. MISRA C 2023 Rule 8.13 concerns declaring pointer parameters as pointing to const-qualified types when the function does not modify the pointee. That is a property of a function's parameter declaration (the callee), not of the caller shown in OS_MutSemDelete. In this code OS_MutSemDelete passes &token to routines that are expected to populate and/or modify that token (the augmented test code even comments \"token should be populated\" after a successful OS_ObjectIdGetById). Therefore the token object passed from OS_MutSemDelete must be writable and the pointer cannot be const at the callsite. The provided probe logs show OS_ObjectIdGetById failing (return -16) and that the automatic token variable contained uninitialized/garbage bytes before the call; they do not demonstrate that any callee declared a non-const pointer while only reading the pointee. To determine a true Rule 8.13 violation one must inspect the declaration and implementation of the callee (e.g. OS_ObjectIdConvertToken) and show it never modifies the pointee while being declared with a non-const pointer. No such evidence is provided here. For these reasons the report is incorrect."
}