{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a non-const OS_object_token_t * (token) to OS_WaitForStateChange. If OS_WaitForStateChange does not modify the token, its parameter should be declared as const OS_object_token_t * and the call should pass a pointer-to-const. Thus, if the OS_WaitForStateChange prototype is void OS_WaitForStateChange(OS_object_token_t *token, uint32 attempts) but the function does not modify *token, this violates MISRA C 2023 Rule 8.13. Change the callee to take const OS_object_token_t *token (and adjust callers) to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1747.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemDelete:\n```c\nint32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_MutSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logger: write control-flow and token state to a persistent file so other\n * agents can reproduce and gather evidence for the reported scenario.\n * The logger is implemented as small helper functions and does not change the\n * semantics of OS_MutSemDelete. */\n\nstatic void os_log_write_simple(const char *tag, osal_id_t sem_id, int32 return_code, const void *token_addr)\n{\n    FILE *f = fopen(\"/tmp/logs/1747.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"%s: sem_id=%lu return_code=%ld token_addr=%p\\n\",\n            tag, (unsigned long)sem_id, (long)return_code, token_addr);\n    fclose(f);\n}\n\nstatic void os_log_token_bytes(const char *tag, osal_id_t sem_id, int32 return_code, const OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/1747.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log header line */\n    fprintf(f, \"%s: sem_id=%lu return_code=%ld token_addr=%p\\n\",\n            tag, (unsigned long)sem_id, (long)return_code, (const void *)token);\n\n    if (token != NULL)\n    {\n        /* Safely capture the first N bytes of the token for inspection. The\n         * size of OS_object_token_t is known here because the original code\n         * instantiates a local variable of that type. Truncate if very large. */\n        const size_t MAX_BYTES = 64U;\n        unsigned char buf[MAX_BYTES];\n        size_t token_size = sizeof(*token);\n        size_t copy_len = token_size < MAX_BYTES ? token_size : MAX_BYTES;\n\n        memcpy(buf, token, copy_len);\n\n        fprintf(f, \" token_bytes(%zu):\", copy_len);\n        for (size_t i = 0; i < copy_len; ++i)\n        {\n            fprintf(f, \" %02x\", buf[i]);\n        }\n        if (token_size > copy_len)\n        {\n            fprintf(f, \" ... (truncated, total %zu bytes)\", token_size);\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fclose(f);\n}\n\nint32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Entry probe */\n    os_log_write_simple(\"OS_MutSemDelete: entry\", sem_id, 0, NULL);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log after attempting to obtain the object token. This captures whether\n     * the token was populated and the return code from the lookup. */\n    os_log_token_bytes(\"OS_MutSemDelete: after OS_ObjectIdGetById\", sem_id, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before calling the implementation delete routine. This will\n         * capture the token state as passed to the callee (address and bytes),\n         * which is useful to reproduce scenarios where a callee should have\n         * taken a const pointer instead of a non-const pointer. */\n        os_log_token_bytes(\"OS_MutSemDelete: before OS_MutSemDelete_Impl\", sem_id, return_code, &token);\n\n        return_code = OS_MutSemDelete_Impl(&token);\n\n        /* Log after the implementation call to record any change in return_code\n         * or (if applicable) token contents. */\n        os_log_token_bytes(\"OS_MutSemDelete: after OS_MutSemDelete_Impl\", sem_id, return_code, &token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Finalize logging for this successful path */\n        os_log_token_bytes(\"OS_MutSemDelete: after OS_ObjectIdFinalizeDelete\", sem_id, return_code, &token);\n    }\n    else\n    {\n        /* Log the failure path */\n        os_log_write_simple(\"OS_MutSemDelete: lookup failed\", sem_id, return_code, &token);\n    }\n\n    /* Exit probe */\n    os_log_write_simple(\"OS_MutSemDelete: exit\", sem_id, return_code, &token);\n\n    return return_code;\n}\n"
}