{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_MutSemDelete:\n```c\nint32 OS_MutSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_MutSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_MutSemDelete:\ntypedef uint32 osal_id_t\n...\ntypedef struct OS_object_token OS_object_token_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "return_code = OS_MutSemDelete_Impl(&token);",
    "return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);",
    "int32 OS_MutSemDelete(osal_id_t sem_id)",
    "return_code = OS_ObjectIdFinalizeDelete(return_code, &token);"
  ],
  "explanation": "The only function parameter in this function is sem_id; include the function declaration so its use can be checked (it must not be modified). The three call sites listed pass either sem_id or a pointer to token (&token) to other routines; those callee parameter implementations must be checked to ensure they do not modify their pointer parameters (i.e. reassign pointer parameters) or otherwise violate Rule 17.8. Other lines in the function are local variable declarations (OS_object_token_t token; int32 return_code;), assignments to the local variable return_code, the conditional and the final return statement \u2014 these do not modify function parameters and therefore do not need investigation for Rule 17.8."
}