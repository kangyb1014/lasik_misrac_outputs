{
  "user_message": "An agent A claimed that the following OS_SocketRecvFrom_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketRecvFrom_Impl.\n```c\nint32 OS_SocketRecvFrom_Impl(const OS_object_token_t *token, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr,\n                             int32 timeout)\n{\n    int32                           return_code;\n    int                             os_result;\n    int                             waitflags;\n    uint32                          operation;\n    struct sockaddr *               sa;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    if (RemoteAddr == NULL)\n    {\n        sa      = NULL;\n        addrlen = 0;\n    }\n    else\n    {\n        addrlen = OS_SOCKADDR_MAX_LEN;\n        sa      = (struct sockaddr *)&RemoteAddr->AddrData;\n    }\n\n    operation = OS_STREAM_STATE_READABLE;\n    /*\n     * If \"O_NONBLOCK\" flag is set then use select()\n     * Note this is the only way to get a correct timeout\n     */\n    if (impl->selectable)\n    {\n        waitflags   = MSG_DONTWAIT;\n        return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n    }\n    else\n    {\n        if (timeout == 0)\n        {\n            waitflags = MSG_DONTWAIT;\n        }\n        else\n        {\n            /* note timeout will not be honored if >0 */\n            waitflags = 0;\n        }\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            os_result = recvfrom(impl->fd, buffer, buflen, waitflags, sa, &addrlen);\n            if (os_result < 0)\n            {\n                if (errno == EAGAIN || errno == EWOULDBLOCK)\n                {\n                    return_code = OS_QUEUE_EMPTY;\n                }\n                else\n                {\n                    OS_DEBUG(\"recvfrom: %s\\n\", strerror(errno));\n                    return_code = OS_ERROR;\n                }\n            }\n            else\n            {\n                return_code = os_result;\n\n                if (RemoteAddr != NULL)\n                {\n                    RemoteAddr->ActualLength = addrlen;\n                }\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The variable 'impl' is declared as a non-const pointer (OS_impl_file_internal_record_t *impl) but is only read in the function. The fragment impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token); assigns a pointer-to-modifiable object to 'impl' even though the code only reads impl->selectable and impl->fd and does not modify the pointed-to object. According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible (e.g. const OS_impl_file_internal_record_t *impl).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_SocketRecvFrom_Log(const OS_object_token_t *token,\n                                  const OS_impl_file_internal_record_t *impl,\n                                  const struct sockaddr *sa,\n                                  socklen_t addrlen,\n                                  uint32 operation,\n                                  int waitflags,\n                                  int return_code,\n                                  int os_result)\n{\n    FILE *f = fopen(\"/tmp/logs/899.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Defensive printing: check impl before accessing members */\n    if (impl != NULL)\n    {\n        fprintf(f, \"OS_SocketRecvFrom_Impl: token=%p impl=%p selectable=%d fd=%d sa=%p addrlen=%u operation=0x%08x waitflags=%d return_code=%d os_result=%d errno=%d\\n\",\n                (const void *)token,\n                (const void *)impl,\n                (int)impl->selectable,\n                (int)impl->fd,\n                (const void *)sa,\n                (unsigned int)addrlen,\n                (unsigned int)operation,\n                waitflags,\n                return_code,\n                os_result,\n                errno);\n    }\n    else\n    {\n        fprintf(f, \"OS_SocketRecvFrom_Impl: token=%p impl=NULL sa=%p addrlen=%u operation=0x%08x waitflags=%d return_code=%d os_result=%d errno=%d\\n\",\n                (const void *)token,\n                (const void *)sa,\n                (unsigned int)addrlen,\n                (unsigned int)operation,\n                waitflags,\n                return_code,\n                os_result,\n                errno);\n    }\n\n    fclose(f);\n}\n\nint32 OS_SocketRecvFrom_Impl(const OS_object_token_t *token, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr,\n                             int32 timeout)\n{\n    int32                           return_code;\n    int                             os_result;\n    int                             waitflags;\n    uint32                          operation;\n    struct sockaddr *               sa;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log after retrieving impl to capture pointer and fields (evidence for const-pointer scenario) */\n    OS_SocketRecvFrom_Log(token, impl, NULL, 0u, 0u, 0, -1, -1);\n\n    if (RemoteAddr == NULL)\n    {\n        sa      = NULL;\n        addrlen = 0;\n    }\n    else\n    {\n        addrlen = OS_SOCKADDR_MAX_LEN;\n        sa      = (struct sockaddr *)&RemoteAddr->AddrData;\n    }\n\n    /* Log the address buffer state */\n    OS_SocketRecvFrom_Log(token, impl, sa, addrlen, 0u, 0, -1, -1);\n\n    operation = OS_STREAM_STATE_READABLE;\n    /*\n     * If \"O_NONBLOCK\" flag is set then use select()\n     * Note this is the only way to get a correct timeout\n     */\n    if (impl->selectable)\n    {\n        waitflags   = MSG_DONTWAIT;\n        return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n\n        /* Log decision taken because socket is selectable */\n        OS_SocketRecvFrom_Log(token, impl, sa, addrlen, operation, waitflags, return_code, -1);\n    }\n    else\n    {\n        if (timeout == 0)\n        {\n            waitflags = MSG_DONTWAIT;\n        }\n        else\n        {\n            /* note timeout will not be honored if >0 */\n            waitflags = 0;\n        }\n        return_code = OS_SUCCESS;\n\n        /* Log decision taken because socket is not selectable */\n        OS_SocketRecvFrom_Log(token, impl, sa, addrlen, operation, waitflags, return_code, -1);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n\n            /* Log timeout outcome */\n            OS_SocketRecvFrom_Log(token, impl, sa, addrlen, operation, waitflags, return_code, -1);\n        }\n        else\n        {\n            os_result = recvfrom(impl->fd, buffer, buflen, waitflags, sa, &addrlen);\n\n            /* Log result of recvfrom call (before handling) */\n            OS_SocketRecvFrom_Log(token, impl, sa, addrlen, operation, waitflags, return_code, os_result);\n\n            if (os_result < 0)\n            {\n                if (errno == EAGAIN || errno == EWOULDBLOCK)\n                {\n                    return_code = OS_QUEUE_EMPTY;\n                }\n                else\n                {\n                    OS_DEBUG(\"recvfrom: %s\\n\", strerror(errno));\n                    return_code = OS_ERROR;\n                }\n\n                /* Log error handling outcome */\n                OS_SocketRecvFrom_Log(token, impl, sa, addrlen, operation, waitflags, return_code, os_result);\n            }\n            else\n            {\n                return_code = os_result;\n\n                if (RemoteAddr != NULL)\n                {\n                    RemoteAddr->ActualLength = addrlen;\n                }\n\n                /* Log success outcome */\n                OS_SocketRecvFrom_Log(token, impl, sa, addrlen, operation, waitflags, return_code, os_result);\n            }\n        }\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_SocketRecvFrom_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. In the shown function the variable impl is fetched from the object table and only read (impl->selectable and impl->fd are inspected; no writes to *impl occur). Therefore impl can and should be declared as a pointer to a const-qualified type (const OS_impl_file_internal_record_t *impl). Converting the non-const result of OS_OBJECT_TABLE_GET to a const-qualified pointer is valid in C (no cast required). Under MISRA C 2023 Rule 8.13 this usage (a pointer that could be const but is not) is a violation. The only caveat would be if the code later needed to modify *impl or pass it to an API that requires a non-const pointer; that is not the case in the presented function."
}