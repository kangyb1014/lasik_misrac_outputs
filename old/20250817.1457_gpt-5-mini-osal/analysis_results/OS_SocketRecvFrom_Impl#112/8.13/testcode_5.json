{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable 'impl' is declared as a non-const pointer (OS_impl_file_internal_record_t *impl) but is only read in the function. The fragment impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token); assigns a pointer-to-modifiable object to 'impl' even though the code only reads impl->selectable and impl->fd and does not modify the pointed-to object. According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible (e.g. const OS_impl_file_internal_record_t *impl).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketRecvFrom_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/899.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketRecvFrom_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketRecvFrom_Impl:\n```c\nint32 OS_SocketRecvFrom_Impl(const OS_object_token_t *token, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr,\n                             int32 timeout)\n{\n    int32                           return_code;\n    int                             os_result;\n    int                             waitflags;\n    uint32                          operation;\n    struct sockaddr *               sa;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    if (RemoteAddr == NULL)\n    {\n        sa      = NULL;\n        addrlen = 0;\n    }\n    else\n    {\n        addrlen = OS_SOCKADDR_MAX_LEN;\n        sa      = (struct sockaddr *)&RemoteAddr->AddrData;\n    }\n\n    operation = OS_STREAM_STATE_READABLE;\n    /*\n     * If \"O_NONBLOCK\" flag is set then use select()\n     * Note this is the only way to get a correct timeout\n     */\n    if (impl->selectable)\n    {\n        waitflags   = MSG_DONTWAIT;\n        return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n    }\n    else\n    {\n        if (timeout == 0)\n        {\n            waitflags = MSG_DONTWAIT;\n        }\n        else\n        {\n            /* note timeout will not be honored if >0 */\n            waitflags = 0;\n        }\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            os_result = recvfrom(impl->fd, buffer, buflen, waitflags, sa, &addrlen);\n            if (os_result < 0)\n            {\n                if (errno == EAGAIN || errno == EWOULDBLOCK)\n                {\n                    return_code = OS_QUEUE_EMPTY;\n                }\n                else\n                {\n                    OS_DEBUG(\"recvfrom: %s\\n\", strerror(errno));\n                    return_code = OS_ERROR;\n                }\n            }\n            else\n            {\n                return_code = os_result;\n\n                if (RemoteAddr != NULL)\n                {\n                    RemoteAddr->ActualLength = addrlen;\n                }\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketRecvFrom_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\nstatic void OS_SocketRecvFrom_Log(const OS_object_token_t *token,\n                                  const OS_impl_file_internal_record_t *impl,\n                                  const struct sockaddr *sa,\n                                  socklen_t addrlen,\n                                  uint32 operation,\n                                  int waitflags,\n                                  int return_code,\n                                  int os_result)\n{\n    FILE *f = fopen(\"/tmp/logs/899.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Defensive printing: check impl before accessing members */\n    if (impl != NULL)\n    {\n        fprintf(f, \"OS_SocketRecvFrom_Impl: token=%p impl=%p selectable=%d fd=%d sa=%p addrlen=%u operation=0x%08x waitflags=%d return_code=%d os_result=%d errno=%d\\n\",\n                (const void *)token,\n                (const void *)impl,\n                (int)impl->selectable,\n                (int)impl->fd,\n                (const void *)sa,\n                (unsigned int)addrlen,\n                (unsigned int)operation,\n                waitflags,\n                return_code,\n                os_result,\n                errno);\n    }\n    else\n    {\n        fprintf(f, \"OS_SocketRecvFrom_Impl: token=%p impl=NULL sa=%p addrlen=%u operation=0x%08x waitflags=%d return_code=%d os_result=%d errno=%d\\n\",\n                (const void *)token,\n                (const void *)sa,\n                (unsigned int)addrlen,\n                (unsigned int)operation,\n                waitflags,\n                return_code,\n                os_result,\n                errno);\n    }\n\n    fclose(f);\n}\n\nint32 OS_SocketRecvFrom_Impl(const OS_object_token_t *token, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr,\n                             int32 timeout)\n{\n    int32                           return_code;\n    int                             os_result;\n    int                             waitflags;\n    uint32                          operation;\n    struct sockaddr *               sa;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log after retrieving impl to capture pointer and fields (evidence for const-pointer scenario) */\n    OS_SocketRecvFrom_Log(token, impl, NULL, 0u, 0u, 0, -1, -1);\n\n    if (RemoteAddr == NULL)\n    {\n        sa      = NULL;\n        addrlen = 0;\n    }\n    else\n    {\n        addrlen = OS_SOCKADDR_MAX_LEN;\n        sa      = (struct sockaddr *)&RemoteAddr->AddrData;\n    }\n\n    /* Log the address buffer state */\n    OS_SocketRecvFrom_Log(token, impl, sa, addrlen, 0u, 0, -1, -1);\n\n    operation = OS_STREAM_STATE_READABLE;\n    /*\n     * If \"O_NONBLOCK\" flag is set then use select()\n     * Note this is the only way to get a correct timeout\n     */\n    if (impl->selectable)\n    {\n        waitflags   = MSG_DONTWAIT;\n        return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n\n        /* Log decision taken because socket is selectable */\n        OS_SocketRecvFrom_Log(token, impl, sa, addrlen, operation, waitflags, return_code, -1);\n    }\n    else\n    {\n        if (timeout == 0)\n        {\n            waitflags = MSG_DONTWAIT;\n        }\n        else\n        {\n            /* note timeout will not be honored if >0 */\n            waitflags = 0;\n        }\n        return_code = OS_SUCCESS;\n\n        /* Log decision taken because socket is not selectable */\n        OS_SocketRecvFrom_Log(token, impl, sa, addrlen, operation, waitflags, return_code, -1);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n\n            /* Log timeout outcome */\n            OS_SocketRecvFrom_Log(token, impl, sa, addrlen, operation, waitflags, return_code, -1);\n        }\n        else\n        {\n            os_result = recvfrom(impl->fd, buffer, buflen, waitflags, sa, &addrlen);\n\n            /* Log result of recvfrom call (before handling) */\n            OS_SocketRecvFrom_Log(token, impl, sa, addrlen, operation, waitflags, return_code, os_result);\n\n            if (os_result < 0)\n            {\n                if (errno == EAGAIN || errno == EWOULDBLOCK)\n                {\n                    return_code = OS_QUEUE_EMPTY;\n                }\n                else\n                {\n                    OS_DEBUG(\"recvfrom: %s\\n\", strerror(errno));\n                    return_code = OS_ERROR;\n                }\n\n                /* Log error handling outcome */\n                OS_SocketRecvFrom_Log(token, impl, sa, addrlen, operation, waitflags, return_code, os_result);\n            }\n            else\n            {\n                return_code = os_result;\n\n                if (RemoteAddr != NULL)\n                {\n                    RemoteAddr->ActualLength = addrlen;\n                }\n\n                /* Log success outcome */\n                OS_SocketRecvFrom_Log(token, impl, sa, addrlen, operation, waitflags, return_code, os_result);\n            }\n        }\n    }\n\n    return return_code;\n}\n"
}