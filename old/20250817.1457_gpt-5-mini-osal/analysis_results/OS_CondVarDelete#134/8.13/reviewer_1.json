{
  "user_message": "An agent A claimed that the following OS_CondVarDelete code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CondVarDelete.\n```c\nint32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The call passes &token (type OS_object_token_t *) to OS_ObjectIdFinalizeDelete. If the implementation and prototype of OS_ObjectIdFinalizeDelete do not modify the token, then the parameter should be declared as pointer-to-const (const OS_object_token_t *). In that case the current non-const pointer use violates MISRA C 2023 Rule 8.13. (If the function is intended to modify the token, then no violation.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_CondVarDelete_Log(const char *stage, osal_id_t var_id, OS_object_token_t *token, int32 code)\n{\n    FILE *f = fopen(\"/tmp/logs/1075.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* var_id and code are printed as long long for portability; cast to avoid warnings */\n    (void)fprintf(f, \"Stage: %s\\n\", stage);\n    (void)fprintf(f, \"  var_id: %lld\\n\", (long long) var_id);\n    (void)fprintf(f, \"  token_addr: %p\\n\", (void *) token);\n    (void)fprintf(f, \"  code: %lld\\n\", (long long) code);\n    (void)fprintf(f, \"----\\n\");\n\n    (void)fclose(f);\n}\n\nint32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and the address of the local token (shows that &token is passed below) */\n    OS_CondVarDelete_Log(\"entry\", var_id, &token, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    OS_CondVarDelete_Log(\"after_OS_ObjectIdGetById\", var_id, &token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_CondVarDelete_Log(\"before_OS_CondVarDelete_Impl\", var_id, &token, return_code);\n\n        return_code = OS_CondVarDelete_Impl(&token);\n\n        OS_CondVarDelete_Log(\"after_OS_CondVarDelete_Impl\", var_id, &token, return_code);\n\n        /* Complete the operation via the common routine */\n        OS_CondVarDelete_Log(\"before_OS_ObjectIdFinalizeDelete\", var_id, &token, return_code);\n\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        OS_CondVarDelete_Log(\"after_OS_ObjectIdFinalizeDelete\", var_id, &token, return_code);\n    }\n\n    OS_CondVarDelete_Log(\"exit\", var_id, &token, return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_CondVarDelete. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent's claim is conditional and insufficiently supported. MISRA C 2023 Rule 8.13 concerns how pointer types are declared (they should point to const-qualified types when possible). The mere fact that &token (type OS_object_token_t *) is passed at the call site does not itself prove a Rule 8.13 violation. To demonstrate a violation you must show that the called function OS_ObjectIdFinalizeDelete is declared with a non-const pointer parameter and that the implementation does not modify the pointed-to object. None of that prototype/implementation information is present here.\n\nAdditionally:\n- If OS_ObjectIdFinalizeDelete is declared to take a const OS_object_token_t * then the call passing &token is perfectly fine (a non-const pointer may be passed to a parameter expecting pointer-to-const). In that case there is no violation at the call site.\n- If OS_ObjectIdFinalizeDelete is declared to take a non-const OS_object_token_t * but actually does not modify the object, then the violation (if any) would be in that function's declaration/definition, not in this call site. The report as written blames this call rather than providing evidence about the callee's declaration/behavior.\n- Also, in this function token is written by OS_ObjectIdGetById (and possibly used/modified by OS_CondVarDelete_Impl), so making the local token itself const would not be appropriate.\n\nThe provided runtime logging added no evidence about the callee's prototype/behavior.\n\nTherefore, based on the available code and information the agent's report is not proven correct."
}