{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes &token (type OS_object_token_t *) to OS_ObjectIdFinalizeDelete. If the implementation and prototype of OS_ObjectIdFinalizeDelete do not modify the token, then the parameter should be declared as pointer-to-const (const OS_object_token_t *). In that case the current non-const pointer use violates MISRA C 2023 Rule 8.13. (If the function is intended to modify the token, then no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1075.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarDelete:\n```c\nint32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe/logging helper for OS_CondVarDelete\n * Appends human-readable trace to \"/tmp/logs/1075.txt\" so other agents\n * can reproduce/control the flow and see how the token is passed.\n * This preserves the original logic and only adds logging calls. */\nstatic void OS_CondVarDelete_Log(const char *stage, osal_id_t var_id, OS_object_token_t *token, int32 code)\n{\n    FILE *f = fopen(\"/tmp/logs/1075.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* var_id and code are printed as long long for portability; cast to avoid warnings */\n    (void)fprintf(f, \"Stage: %s\\n\", stage);\n    (void)fprintf(f, \"  var_id: %lld\\n\", (long long) var_id);\n    (void)fprintf(f, \"  token_addr: %p\\n\", (void *) token);\n    (void)fprintf(f, \"  code: %lld\\n\", (long long) code);\n    (void)fprintf(f, \"----\\n\");\n\n    (void)fclose(f);\n}\n\nint32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and the address of the local token (shows that &token is passed below) */\n    OS_CondVarDelete_Log(\"entry\", var_id, &token, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    OS_CondVarDelete_Log(\"after_OS_ObjectIdGetById\", var_id, &token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_CondVarDelete_Log(\"before_OS_CondVarDelete_Impl\", var_id, &token, return_code);\n\n        return_code = OS_CondVarDelete_Impl(&token);\n\n        OS_CondVarDelete_Log(\"after_OS_CondVarDelete_Impl\", var_id, &token, return_code);\n\n        /* Complete the operation via the common routine */\n        OS_CondVarDelete_Log(\"before_OS_ObjectIdFinalizeDelete\", var_id, &token, return_code);\n\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        OS_CondVarDelete_Log(\"after_OS_ObjectIdFinalizeDelete\", var_id, &token, return_code);\n    }\n\n    OS_CondVarDelete_Log(\"exit\", var_id, &token, return_code);\n\n    return return_code;\n}\n"
}