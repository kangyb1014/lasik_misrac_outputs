{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_CondVarDelete_Log(const char *stage, osal_id_t var_id, int32 return_code, const OS_object_token_t *token_ptr)\n{\n    /* best-effort create logs directory; ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/1079.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print stage, var id (as uintptr), return_code and token pointer address (or NULL) */\n        (void)fprintf(f, \"Stage=%s; var_id=%\" PRIuPTR \"; return_code=%ld; token_ptr=%p\\n\",\n                      stage,\n                      (uintptr_t)var_id,\n                      (long)return_code,\n                      (const void *)token_ptr);\n        (void)fclose(f);\n    }\n}\n\nint32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log function entry */\n    OS_CondVarDelete_Log(\"entry\", var_id, 0, NULL);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Only report the token pointer if GetById indicated success (token valid) */\n    OS_CondVarDelete_Log(\"after_getbyid\", var_id, return_code, (return_code == OS_SUCCESS) ? &token : NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_CondVarDelete_Log(\"before_impl\", var_id, return_code, &token);\n\n        return_code = OS_CondVarDelete_Impl(&token);\n\n        OS_CondVarDelete_Log(\"after_impl\", var_id, return_code, &token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        OS_CondVarDelete_Log(\"after_finalize\", var_id, return_code, &token);\n    }\n\n    /* Log function exit and final return code */\n    OS_CondVarDelete_Log(\"exit\", var_id, return_code, (return_code == OS_SUCCESS) ? &token : NULL);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmpusq2o3e9/src/src/os/shared/src/osapi-condvar.c:1:\n/tmp/tmpusq2o3e9/src/src/os/shared/src/osapi-condvar.c: In function 'OS_CondVarDelete_Log':\n/tmp/tmpusq2o3e9/src/src/os/shared/src/osapi-condvar.c:132:47: error: expected ')' before 'PRIuPTR'\n  132 |         (void)fprintf(f, \"Stage=%s; var_id=%\" PRIuPTR \"; return_code=%ld; token_ptr=%p\\n\",\n      |                                               ^~~~~~~\n/tmp/tmpusq2o3e9/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpusq2o3e9/src/src/os/shared/src/osapi-condvar.c:55:1: note: 'PRIuPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   54 | #include \"osapi-task.h\"\n  +++ |+#include <inttypes.h>\n   55 | \nIn file included from /tmp/tmpusq2o3e9/src/src/os/shared/src/osapi-condvar.c:1:\n/tmp/tmpusq2o3e9/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmpusq2o3e9/src/src/os/shared/src/osapi-condvar.c:132:15: note: in expansion of macro 'fprintf'\n  132 |         (void)fprintf(f, \"Stage=%s; var_id=%\" PRIuPTR \"; return_code=%ld; token_ptr=%p\\n\",\n      |               ^~~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/__/__/os/shared/src/osapi-condvar.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3353: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_CondVarDelete as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <unistd.h>\n\n#include \"osapi-task.h\"\n\nstatic void OS_CondVarDelete_Log(const char *stage, osal_id_t var_id, int32 return_code, const OS_object_token_t *token_ptr)\n{\n    /* best-effort create logs directory; ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/1079.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print stage, var id (as uintptr), return_code and token pointer address (or NULL) */\n        (void)fprintf(f, \"Stage=%s; var_id=%\" PRIuPTR \"; return_code=%ld; token_ptr=%p\\n\",\n                      stage,\n                      (uintptr_t)var_id,\n                      (long)return_code,\n                      (const void *)token_ptr);\n        (void)fclose(f);\n    }\n}\n\nint32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log function entry */\n    OS_CondVarDelete_Log(\"entry\", var_id, 0, NULL);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Only report the token pointer if GetById indicated success (token valid) */\n    OS_CondVarDelete_Log(\"after_getbyid\", var_id, return_code, (return_code == OS_SUCCESS) ? &token : NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_CondVarDelete_Log(\"before_impl\", var_id, return_code, &token);\n\n        return_code = OS_CondVarDelete_Impl(&token);\n\n        OS_CondVarDelete_Log(\"after_impl\", var_id, return_code, &token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        OS_CondVarDelete_Log(\"after_finalize\", var_id, return_code, &token);\n    }\n\n    /* Log function exit and final return code */\n    OS_CondVarDelete_Log(\"exit\", var_id, return_code, (return_code == OS_SUCCESS) ? &token : NULL);\n\n    return return_code;\n}\n",
  "explanation": "The build error was due to PRIuPTR being undefined. I added #include <inttypes.h> to bring in the PRIuPTR macro. I also included standard headers (<stdio.h>, <stdint.h>, <sys/types.h>, <sys/stat.h>, <unistd.h>) to ensure declarations for FILE, fprintf, mkdir, and uintptr_t are available. No logic was changed; only the necessary headers were added so the code compiles."
}