{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) can dereference invalid pointers or read past allocated storage. Neither TypeName nor StubPtr->Data.Buff.ContentTypeStr is null-checked nor is it guaranteed they point to NUL-terminated buffers. For example, if UT_Stub_RegisterReturnType was never given a non-NULL TypeName (or was passed NULL), then ContentTypeStr can be NULL; if Position equals ReturnSize the strcmp is evaluated and will dereference the NULL pointer causing an out-of-bounds access. Similarly, if the strings are not NUL-terminated, strcmp can read beyond object bounds. This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1079.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarDelete:\n```c\nint32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CondVarDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <inttypes.h>\n\n/*\n * Probe/logger for OS_CondVarDelete to help reproduce/control-flow evidence.\n * Logs to /tmp/logs/1079.txt. Attempts to create /tmp/logs if it does not exist.\n *\n * Note: This code preserves the original control flow and return semantics of\n * OS_CondVarDelete. It only adds non-intrusive logging calls.\n */\nstatic void OS_CondVarDelete_Log(const char *stage, osal_id_t var_id, int32 return_code, const OS_object_token_t *token_ptr)\n{\n    /* best-effort create logs directory; ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/1079.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print stage, var id (as uintptr), return_code and token pointer address (or NULL) */\n        (void)fprintf(f, \"Stage=%s; var_id=%\" PRIuPTR \"; return_code=%ld; token_ptr=%p\\n\",\n                      stage,\n                      (uintptr_t)var_id,\n                      (long)return_code,\n                      (const void *)token_ptr);\n        (void)fclose(f);\n    }\n}\n\nint32 OS_CondVarDelete(osal_id_t var_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log function entry */\n    OS_CondVarDelete_Log(\"entry\", var_id, 0, NULL);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Only report the token pointer if GetById indicated success (token valid) */\n    OS_CondVarDelete_Log(\"after_getbyid\", var_id, return_code, (return_code == OS_SUCCESS) ? &token : NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_CondVarDelete_Log(\"before_impl\", var_id, return_code, &token);\n\n        return_code = OS_CondVarDelete_Impl(&token);\n\n        OS_CondVarDelete_Log(\"after_impl\", var_id, return_code, &token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        OS_CondVarDelete_Log(\"after_finalize\", var_id, return_code, &token);\n    }\n\n    /* Log function exit and final return code */\n    OS_CondVarDelete_Log(\"exit\", var_id, return_code, (return_code == OS_SUCCESS) ? &token : NULL);\n\n    return return_code;\n}\n"
}