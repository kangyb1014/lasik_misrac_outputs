{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls memcpy(StubPtr->Data.Buff.BasePtr, StubPtr->Data.Rvc.Buf.IndirectPtr, StubPtr->Data.Buff.TotalSize) without validating that both destination and source pointers are non-NULL and actually reference buffers of at least StubPtr->Data.Buff.TotalSize bytes. For example, if RvcPtr->Data.Rvc.Buf.IndirectPtr is NULL or points to a buffer smaller than StubPtr->Data.Buff.TotalSize (or if StubPtr->Data.Buff.BasePtr is smaller), memcpy will read or write past the bounds of the referenced objects.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ExecuteBasicHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2431.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ExecuteBasicHandler as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ExecuteBasicHandler:\n```c\nvoid UT_ExecuteBasicHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_HandlerFunc_t DefaultHandler)\n{\n    /* Check if the test case registered a hook, and use the default if not */\n    if (UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER) == NULL && DefaultHandler != NULL)\n    {\n        UT_SetHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_DefaultStubImpl(FunctionName, FuncKey, 0, NULL);\n}\n```\n</target_code>\nPlease provide the modified UT_ExecuteBasicHandler code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2431.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nvoid UT_ExecuteBasicHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_HandlerFunc_t DefaultHandler)\n{\n    /* Log entry and basic parameters */\n    probe_log(\"UT_ExecuteBasicHandler ENTER: FuncKey=%\" PRIuPTR \", FunctionName=%p, DefaultHandler=%p\",\n              (uintptr_t)FuncKey, (const void *)FunctionName, (const void *)DefaultHandler);\n\n    /* Check if the test case registered a hook, and use the default if not */\n    void *stubEntry = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n    probe_log(\"UT_GetStubEntry returned: %p (NULL? %s)\", stubEntry, (stubEntry == NULL) ? \"YES\" : \"NO\");\n\n    if (stubEntry == NULL && DefaultHandler != NULL)\n    {\n        probe_log(\"UT_SetHandlerFunction invoked: FuncKey=%\" PRIuPTR \", DefaultHandler=%p\",\n                  (uintptr_t)FuncKey, (const void *)DefaultHandler);\n        UT_SetHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    probe_log(\"Calling UT_DefaultStubImpl: FunctionName=%p, FuncKey=%\" PRIuPTR,\n              (const void *)FunctionName, (uintptr_t)FuncKey);\n\n    UT_DefaultStubImpl(FunctionName, FuncKey, 0, NULL);\n\n    probe_log(\"UT_DefaultStubImpl returned: FunctionName=%p, FuncKey=%\" PRIuPTR,\n              (const void *)FunctionName, (uintptr_t)FuncKey);\n}\n"
}