{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call memset(StubPtr->Data.Buff.BasePtr, 0, StubPtr->Data.Buff.TotalSize) can write beyond the bounds of the object referenced by BasePtr. The code only checks StubPtr != NULL and Position == 0; it does not validate that BasePtr is non-NULL or that TotalSize does not exceed the actual allocated buffer size. For example, if a return-buffer entry exists with BasePtr == NULL and TotalSize > 0, or if TotalSize is larger than the memory actually provided at BasePtr, the memset will perform out-of-bounds writes (or NULL writes), violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ExecuteBasicHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2431.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ExecuteBasicHandler as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ExecuteBasicHandler:\n```c\nvoid UT_ExecuteBasicHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_HandlerFunc_t DefaultHandler)\n{\n    /* Check if the test case registered a hook, and use the default if not */\n    if (UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER) == NULL && DefaultHandler != NULL)\n    {\n        UT_SetHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_DefaultStubImpl(FunctionName, FuncKey, 0, NULL);\n}\n```\n</target_code>\nPlease provide the modified UT_ExecuteBasicHandler code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n\n/* Probe logging helper - appends human-readable diagnostics to /tmp/logs/2431.txt */\nstatic void UT_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2431.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp the entry to help ordering events */\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm) == NULL)\n    {\n        fprintf(f, \"[UT_PROBE] (no time) \");\n    }\n    else\n    {\n        char buf[32];\n        if (strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n        {\n            fprintf(f, \"[UT_PROBE] %s \", buf);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Modified UT_ExecuteBasicHandler: preserves original control flow but adds\n * logging that records the arguments, decisions made, and calls to the\n * UT functions. This helps reproduce scenarios where a later memset could\n * write out-of-bounds (the stub entry pointer and context are recorded).\n */\nvoid UT_ExecuteBasicHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_HandlerFunc_t DefaultHandler)\n{\n    /* Log entry with key, function name and handler pointer */\n    UT_ProbeLog(\"Enter UT_ExecuteBasicHandler: FuncKey=%\" PRIuPTR \", FunctionName=%p, DefaultHandler=%p\",\n                (uintptr_t)FuncKey, (const void *)FunctionName, (const void *)DefaultHandler);\n\n    /* Check if the test case registered a hook, and use the default if not */\n    void *stub = (void *)UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER);\n    UT_ProbeLog(\"UT_GetStubEntry returned stub=%p\", stub);\n\n    if (stub == NULL && DefaultHandler != NULL)\n    {\n        UT_ProbeLog(\"No final handler registered and DefaultHandler is non-NULL -> calling UT_SetHandlerFunction\");\n        UT_SetHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n    else if (stub == NULL)\n    {\n        UT_ProbeLog(\"No final handler registered and DefaultHandler is NULL -> not setting handler\");\n    }\n    else\n    {\n        UT_ProbeLog(\"Final handler already registered (stub != NULL)\");\n    }\n\n    /* Before invoking default stub implementation, capture state */\n    UT_ProbeLog(\"About to call UT_DefaultStubImpl: FunctionName=%p, FuncKey=%\" PRIuPTR \", CallCount=0, Args=NULL\",\n                (const void *)FunctionName, (uintptr_t)FuncKey);\n\n    UT_DefaultStubImpl(FunctionName, FuncKey, 0, NULL);\n\n    /* After call - record that default implementation returned control */\n    UT_ProbeLog(\"Returned from UT_DefaultStubImpl: FunctionName=%p, FuncKey=%\" PRIuPTR,\n                (const void *)FunctionName, (uintptr_t)FuncKey);\n\n    /* Additional note to help correlate logs with possible memset usage elsewhere\n     * (we do not attempt to dereference \"stub\" because the structure layout is\n     * unknown in this translation unit; other agents can combine this probe\n     * output with memory dumps or higher-level debug to reproduce the exact\n     * out-of-bounds condition). */\n    if (stub != NULL)\n    {\n        UT_ProbeLog(\"Note: stub pointer non-NULL (stub=%p). If UT_DefaultStubImpl performs a memset using stub->Data.Buff.BasePtr/TotalSize,\\n\"\n                    \"this log entry allows correlating the stub pointer with the later memory operation.\", stub);\n    }\n    else\n    {\n        UT_ProbeLog(\"Note: stub pointer NULL at time of check. If UT_DefaultStubImpl later operates on a different stub entry,\\n\"\n                    \"inspect subsequent logs for changes.\");\n    }\n}\n"
}