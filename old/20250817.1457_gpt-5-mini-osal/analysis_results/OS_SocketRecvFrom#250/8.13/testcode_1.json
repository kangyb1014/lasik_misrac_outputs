{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'stream' is only used for read-only access (stream->socket_type and stream->stream_state) and is never used to modify the object. Therefore it could be declared as pointing to a const-qualified type. Declaring it without const violates MISRA C 2023 Rule 8.13. Suggested fix: change the declaration to 'const OS_stream_internal_record_t *stream;' (or update the OS_OBJECT_TABLE_GET API to return a const pointer) so the pointer points to a const-qualified type when possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketRecvFrom code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2003.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketRecvFrom as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketRecvFrom:\n```c\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketRecvFrom code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logger for OS_SocketRecvFrom control-flow and state tracing.\n * Appends human-readable information about the control path and the\n * state of the local 'stream' pointer to /tmp/logs/2003.txt.\n *\n * NOTE: This helper intentionally takes const pointers where possible\n * to avoid modifying program state while probing.\n */\nstatic void OS_SocketRecvFrom_Log(const char *where,\n                                  osal_id_t sock_id,\n                                  const OS_object_token_t *token,\n                                  const OS_stream_internal_record_t *stream,\n                                  int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2003.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not affect program behavior. */\n        return;\n    }\n\n    fprintf(f, \"OS_SocketRecvFrom: %s\\n\", where);\n    fprintf(f, \"  sock_id = %lu\\n\", (unsigned long)sock_id);\n    fprintf(f, \"  return_code = %ld\\n\", (long)return_code);\n    fprintf(f, \"  token = %p\\n\", (const void *)token);\n    fprintf(f, \"  stream = %p\\n\", (const void *)stream);\n\n    if (stream != NULL)\n    {\n        /* Read-only access to stream fields for logging. Casts to unsigned long\n         * are used to have a portable numeric print without depending on exact types.\n         */\n        fprintf(f, \"  stream->socket_type = %lu\\n\",\n                (unsigned long)stream->socket_type);\n        fprintf(f, \"  stream->stream_state = 0x%lx\\n\",\n                (unsigned long)stream->stream_state);\n    }\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    /* Log entry with initial parameter info. token and stream not yet available. */\n    OS_SocketRecvFrom_Log(\"entry/params_checked\", sock_id, NULL, NULL, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log after attempting to get token */\n    OS_SocketRecvFrom_Log(\"after_ObjectIdGetById\", sock_id, &token, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log the obtained stream pointer and its read-only fields */\n        OS_SocketRecvFrom_Log(\"after_table_get\", sock_id, &token, stream, return_code);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n            OS_SocketRecvFrom_Log(\"incorrect_obj_type\", sock_id, &token, stream, return_code);\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            OS_SocketRecvFrom_Log(\"incorrect_obj_state/not_bound\", sock_id, &token, stream, return_code);\n        }\n        else\n        {\n            OS_SocketRecvFrom_Log(\"about_to_call_impl\", sock_id, &token, stream, return_code);\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n            OS_SocketRecvFrom_Log(\"after_impl\", sock_id, &token, stream, return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_SocketRecvFrom_Log(\"after_token_release\", sock_id, &token, stream, return_code);\n    }\n\n    return return_code;\n}\n"
}