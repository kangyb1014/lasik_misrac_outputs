{
  "user_message": "An agent A claimed that the following OS_SocketRecvFrom code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketRecvFrom.\n```c\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In OS_SocketRecvFrom_Impl the local pointer variable is declared as\n    OS_impl_file_internal_record_t *impl;\nbut the function only reads members of the object (impl->selectable, impl->fd, etc.) and does not modify the referenced object. According to MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type whenever possible (e.g. const OS_impl_file_internal_record_t *impl). Therefore this code violates Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_Probe_Log(const char *stage,\n                         osal_id_t sock_id,\n                         const void *buffer,\n                         size_t buflen,\n                         const OS_SockAddr_t *RemoteAddr,\n                         const OS_stream_internal_record_t *stream,\n                         int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2003.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not affect original logic */\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"%ld: STAGE=%s sock_id=%lu buffer=%p buflen=%lu RemoteAddr=%p return_code=%ld stream=%p\",\n            (long)t, stage, (unsigned long)sock_id, buffer, (unsigned long)buflen, (const void *)RemoteAddr, (long)return_code, (const void *)stream);\n\n    if (stream != NULL)\n    {\n        /* Print the stream state and socket type to help reproduce the scenario */\n        fprintf(f, \" stream->socket_type=%u stream->stream_state=0x%08x\",\n                (unsigned int)stream->socket_type, (unsigned int)stream->stream_state);\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    /* Log state after parameter checks so behavior is preserved if the checks fail */\n    OS_Probe_Log(\"ENTRY_AFTER_PARAM_CHECK\", sock_id, buffer, buflen, RemoteAddr, NULL, -1);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log details about the resolved stream and token */\n        OS_Probe_Log(\"AFTER_OBJIDGET\", sock_id, buffer, buflen, RemoteAddr, stream, return_code);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n            OS_Probe_Log(\"INCORRECT_OBJ_TYPE\", sock_id, buffer, buflen, RemoteAddr, stream, return_code);\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            OS_Probe_Log(\"INCORRECT_OBJ_STATE\", sock_id, buffer, buflen, RemoteAddr, stream, return_code);\n        }\n        else\n        {\n            /* Log just before calling the implementation to capture the state leading into the Impl call */\n            OS_Probe_Log(\"CALL_IMPL\", sock_id, buffer, buflen, RemoteAddr, stream, return_code);\n\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n\n            /* Log after returning from the implementation to capture the result */\n            OS_Probe_Log(\"RETURN_FROM_IMPL\", sock_id, buffer, buflen, RemoteAddr, stream, return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the token to capture final state before function exit */\n        OS_Probe_Log(\"RELEASE_TOKEN\", sock_id, buffer, buflen, RemoteAddr, stream, return_code);\n    }\n    else\n    {\n        /* Log failure to acquire the object token */\n        OS_Probe_Log(\"OBJECTIDGET_FAILED\", sock_id, buffer, buflen, RemoteAddr, NULL, return_code);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_SocketRecvFrom. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct in principle. MISRA C 2023 Rule 8.13 requires a pointer to be qualified as pointing to const whenever the pointed-to object is not modified through that pointer. In the provided OS_SocketRecvFrom code the local variable 'stream' is declared as a non-const pointer (OS_stream_internal_record_t *stream) but is only read (stream->socket_type, stream->stream_state). The same claim about OS_SocketRecvFrom_Impl (impl declared as a non-const pointer but only used for reads) is consistent with the rule: such local pointers should be declared as pointing to const, e.g. const OS_stream_internal_record_t *stream (or const OS_impl_file_internal_record_t *impl) unless there is a compelling reason not to (for example the function later writes via the pointer, needs to pass it to an API that requires a non-const pointer, or there exists a required aliasing/locking convention that disallows qualification). To fully confirm the violation in the implementation function one would need to inspect OS_SocketRecvFrom_Impl/impl usages; given the scenario description that only members are read, the code violates Rule 8.13 and should be corrected by qualifying the pointer as pointing to const or otherwise documenting/exempting the case."
}