{
  "user_message": "An agent A claimed that the following OS_SocketRecvFrom code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketRecvFrom.\n```c\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'stream' is only used for read-only access (stream->socket_type and stream->stream_state) and is never used to modify the object. Therefore it could be declared as pointing to a const-qualified type. Declaring it without const violates MISRA C 2023 Rule 8.13. Suggested fix: change the declaration to 'const OS_stream_internal_record_t *stream;' (or update the OS_OBJECT_TABLE_GET API to return a const pointer) so the pointer points to a const-qualified type when possible.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_SocketRecvFrom_Log(const char *where,\n                                  osal_id_t sock_id,\n                                  const OS_object_token_t *token,\n                                  const OS_stream_internal_record_t *stream,\n                                  int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2003.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not affect program behavior. */\n        return;\n    }\n\n    fprintf(f, \"OS_SocketRecvFrom: %s\\n\", where);\n    fprintf(f, \"  sock_id = %lu\\n\", (unsigned long)sock_id);\n    fprintf(f, \"  return_code = %ld\\n\", (long)return_code);\n    fprintf(f, \"  token = %p\\n\", (const void *)token);\n    fprintf(f, \"  stream = %p\\n\", (const void *)stream);\n\n    if (stream != NULL)\n    {\n        /* Read-only access to stream fields for logging. Casts to unsigned long\n         * are used to have a portable numeric print without depending on exact types.\n         */\n        fprintf(f, \"  stream->socket_type = %lu\\n\",\n                (unsigned long)stream->socket_type);\n        fprintf(f, \"  stream->stream_state = 0x%lx\\n\",\n                (unsigned long)stream->stream_state);\n    }\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    /* Log entry with initial parameter info. token and stream not yet available. */\n    OS_SocketRecvFrom_Log(\"entry/params_checked\", sock_id, NULL, NULL, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log after attempting to get token */\n    OS_SocketRecvFrom_Log(\"after_ObjectIdGetById\", sock_id, &token, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log the obtained stream pointer and its read-only fields */\n        OS_SocketRecvFrom_Log(\"after_table_get\", sock_id, &token, stream, return_code);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n            OS_SocketRecvFrom_Log(\"incorrect_obj_type\", sock_id, &token, stream, return_code);\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            OS_SocketRecvFrom_Log(\"incorrect_obj_state/not_bound\", sock_id, &token, stream, return_code);\n        }\n        else\n        {\n            OS_SocketRecvFrom_Log(\"about_to_call_impl\", sock_id, &token, stream, return_code);\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n            OS_SocketRecvFrom_Log(\"after_impl\", sock_id, &token, stream, return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_SocketRecvFrom_Log(\"after_token_release\", sock_id, &token, stream, return_code);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_SocketRecvFrom. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In the presented code the local pointer variable stream is only used for read-only accesses (stream->socket_type and stream->stream_state) and is never used to modify the pointed object or passed to an API that requires a writable pointer. Under MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so declaring the local variable as const OS_stream_internal_record_t *stream would satisfy the rule.\n\nNotes/considerations:\n- Assigning the result of OS_OBJECT_TABLE_GET (likely a non-const OS_stream_internal_record_t *) to a const-qualified pointer is permitted (non-const T * -> const T * conversion).\n- If other parts of the code later require a modifiable pointer (or if OS_OBJECT_TABLE_GET's type semantics require a non-const target for correctness), then that would be a valid reason to keep it non-const; no such usage appears in the shown function.\n- The suggested fix (make stream a pointer to const) is therefore appropriate here.\n\nTherefore the reported violation is valid for the shown code."
}