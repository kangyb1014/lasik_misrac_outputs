{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_SocketRecvFrom_Impl the local pointer variable is declared as\n    OS_impl_file_internal_record_t *impl;\nbut the function only reads members of the object (impl->selectable, impl->fd, etc.) and does not modify the referenced object. According to MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type whenever possible (e.g. const OS_impl_file_internal_record_t *impl). Therefore this code violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketRecvFrom code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2003.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketRecvFrom as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketRecvFrom:\n```c\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketRecvFrom code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Probe logging helper - writes control flow / state information to /tmp/logs/2003.txt */\nstatic void OS_Probe_Log(const char *stage,\n                         osal_id_t sock_id,\n                         const void *buffer,\n                         size_t buflen,\n                         const OS_SockAddr_t *RemoteAddr,\n                         const OS_stream_internal_record_t *stream,\n                         int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2003.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not affect original logic */\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"%ld: STAGE=%s sock_id=%lu buffer=%p buflen=%lu RemoteAddr=%p return_code=%ld stream=%p\",\n            (long)t, stage, (unsigned long)sock_id, buffer, (unsigned long)buflen, (const void *)RemoteAddr, (long)return_code, (const void *)stream);\n\n    if (stream != NULL)\n    {\n        /* Print the stream state and socket type to help reproduce the scenario */\n        fprintf(f, \" stream->socket_type=%u stream->stream_state=0x%08x\",\n                (unsigned int)stream->socket_type, (unsigned int)stream->stream_state);\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    /* Log state after parameter checks so behavior is preserved if the checks fail */\n    OS_Probe_Log(\"ENTRY_AFTER_PARAM_CHECK\", sock_id, buffer, buflen, RemoteAddr, NULL, -1);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log details about the resolved stream and token */\n        OS_Probe_Log(\"AFTER_OBJIDGET\", sock_id, buffer, buflen, RemoteAddr, stream, return_code);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n            OS_Probe_Log(\"INCORRECT_OBJ_TYPE\", sock_id, buffer, buflen, RemoteAddr, stream, return_code);\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            OS_Probe_Log(\"INCORRECT_OBJ_STATE\", sock_id, buffer, buflen, RemoteAddr, stream, return_code);\n        }\n        else\n        {\n            /* Log just before calling the implementation to capture the state leading into the Impl call */\n            OS_Probe_Log(\"CALL_IMPL\", sock_id, buffer, buflen, RemoteAddr, stream, return_code);\n\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n\n            /* Log after returning from the implementation to capture the result */\n            OS_Probe_Log(\"RETURN_FROM_IMPL\", sock_id, buffer, buflen, RemoteAddr, stream, return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the token to capture final state before function exit */\n        OS_Probe_Log(\"RELEASE_TOKEN\", sock_id, buffer, buflen, RemoteAddr, stream, return_code);\n    }\n    else\n    {\n        /* Log failure to acquire the object token */\n        OS_Probe_Log(\"OBJECTIDGET_FAILED\", sock_id, buffer, buflen, RemoteAddr, NULL, return_code);\n    }\n\n    return return_code;\n}\n"
}