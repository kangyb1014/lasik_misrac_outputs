{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen RemoteAddr == NULL the code sets sa = NULL and executes addrlen = 0. Later recvfrom is called with sa (NULL) and &addrlen, and RemoteAddr->ActualLength is only written when RemoteAddr != NULL. POSIX says that if src_addr is NULL the addrlen argument is ignored, so the value stored in addrlen is never used in this branch. Therefore the assignment addrlen = 0 is executed but could be removed without affecting program behaviour \u2014 it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketRecvFrom code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2002.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketRecvFrom as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketRecvFrom:\n```c\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketRecvFrom code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n#include <string.h>\n\n/*\n * Probe logging helpers. These functions are added to capture runtime\n * information about calls to OS_SocketRecvFrom so other agents can\n * reproduce the reported violation scenario. Logs are appended to\n * \"/tmp/logs/2002.txt\". The original logic of OS_SocketRecvFrom is\n * preserved; these helpers only produce side-effecting diagnostic output.\n */\nstatic void ensure_log_dir(void)\n{\n    /* Attempt to create the directory; if it already exists, ignore the error. */\n    if (mkdir(\"/tmp/logs\", 0755) != 0)\n    {\n        if (errno != EEXIST)\n        {\n            /* If mkdir fails for another reason, still continue; logging may fail later. */\n        }\n    }\n}\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    ensure_log_dir();\n\n    f = fopen(\"/tmp/logs/2002.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketRecvFrom(osal_id_t sock_id, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr, int32 timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Log entry and incoming parameters (do not dereference RemoteAddr).\n     * cast values to types suitable for printing; keep logging non-intrusive. */\n    probe_log(\"ENTRY: OS_SocketRecvFrom(sock_id=%llu, buffer=%p, buflen=%zu, RemoteAddr=%p, timeout=%d)\",\n              (unsigned long long)sock_id, buffer, buflen, (void *)RemoteAddr, (int)timeout);\n\n    /*\n     * Check parameters\n     *\n     * Note \"RemoteAddr\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(buffer);\n    OS_CHECK_SIZE(buflen);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &token);\n    probe_log(\"OS_ObjectIdGetById returned %d for sock_id=%llu\", return_code, (unsigned long long)sock_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        probe_log(\"Resolved token=%p, stream=%p, socket_type=%d, stream_state=0x%08x\",\n                  (void *)&token, (void *)stream,\n                  (int)(stream ? stream->socket_type : -1), (unsigned int)(stream ? stream->stream_state : 0));\n\n        if (stream->socket_type != OS_SocketType_DATAGRAM)\n        {\n            probe_log(\"Socket type incorrect: expected DATAGRAM, got %d\", (int)stream->socket_type);\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((stream->stream_state & OS_STREAM_STATE_BOUND) == 0)\n        {\n            /* Socket needs to be bound first */\n            probe_log(\"Socket state incorrect: not bound (stream_state=0x%08x)\", (unsigned int)stream->stream_state);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Log the fact that we are about to call the implementation.\n             * Crucially capture whether RemoteAddr is NULL to reproduce the\n             * reported dead-assignment scenario (the assignment inside the\n             * implementation when RemoteAddr == NULL). */\n            probe_log(\"Calling OS_SocketRecvFrom_Impl with RemoteAddr=%p (NULL? %s)\",\n                      (void *)RemoteAddr, (RemoteAddr == NULL) ? \"YES\" : \"NO\");\n\n            return_code = OS_SocketRecvFrom_Impl(&token, buffer, buflen, RemoteAddr, timeout);\n\n            probe_log(\"OS_SocketRecvFrom_Impl returned %d\", return_code);\n        }\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"Released token=%p\", (void *)&token);\n    }\n\n    probe_log(\"EXIT: OS_SocketRecvFrom returning %d for sock_id=%llu\", return_code, (unsigned long long)sock_id);\n\n    return return_code;\n}\n"
}