{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen one or more of the output parameters are NULL (in the extreme case all three: DataBuffer==NULL, MaxSize==NULL, Position==NULL), the function still reads StubPtr->Data.Buff.* and assigns them to the local ResultDataBuffer/ResultMaxSize/ResultPosition variables. Those assignments (and the reads from StubPtr) are executed but never used, so their removal would not affect program behaviour. This constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2442.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetDataBuffer:\n```c\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_GetDataBuffer code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/2442.txt */\nstatic void UT_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2442.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    /* Log function entry and parameter pointer state */\n    UT_ProbeLog(\"UT_GetDataBuffer ENTRY: DataBuffer=%p, MaxSize=%p, Position=%p, FuncKey=%p\",\n                (void *)DataBuffer, (void *)MaxSize, (void *)Position, (void *)((void *)&FuncKey));\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    UT_ProbeLog(\"UT_GetDataBuffer: StubPtr=%p\", (void *)StubPtr);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n\n        UT_ProbeLog(\"UT_GetDataBuffer: StubPtr==NULL -> ResultDataBuffer=%p, ResultMaxSize=%zu, ResultPosition=%zu\",\n                    (void *)ResultDataBuffer, ResultMaxSize, ResultPosition);\n    }\n    else\n    {\n        /* Preserve original behavior: read values from StubPtr into local temporaries */\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n\n        /* Log the values read from the stub entry (evidence of executed reads) */\n        UT_ProbeLog(\"UT_GetDataBuffer: Read from StubPtr -> BasePtr=%p, TotalSize=%zu, Position=%zu\",\n                    (void *)ResultDataBuffer, ResultMaxSize, ResultPosition);\n    }\n\n    /* Log which output pointers are NULL before writing back to caller */\n    UT_ProbeLog(\"UT_GetDataBuffer: About to write outputs. DataBuffer_is_null=%d, MaxSize_is_null=%d, Position_is_null=%d\",\n                (DataBuffer == NULL) ? 1 : 0, (MaxSize == NULL) ? 1 : 0, (Position == NULL) ? 1 : 0);\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n        UT_ProbeLog(\"UT_GetDataBuffer: WROTE DataBuffer=%p\", (void *)ResultDataBuffer);\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n        UT_ProbeLog(\"UT_GetDataBuffer: WROTE MaxSize=%zu\", ResultMaxSize);\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n        UT_ProbeLog(\"UT_GetDataBuffer: WROTE Position=%zu\", ResultPosition);\n    }\n\n    UT_ProbeLog(\"UT_GetDataBuffer EXIT\");\n}\n"
}