{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nUT_Stub_CopyToReturnValue validates that the destination (StubPtr->Data.Buff.BasePtr) is large enough by checking StubPtr->Data.Buff.TotalSize == BufferSize, but it does not validate that the source pointer (BufferPtr) actually refers to an object at least BufferSize bytes long or that BufferPtr is non-NULL when BufferSize > 0. If BufferPtr points to a smaller object (e.g. caller passes a char buf[4] with BufferSize == 8) or is NULL while BufferSize > 0, the memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize) call will read beyond the bounds of the source object (or dereference NULL), violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2447.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetDataBuffer:\n```c\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_GetDataBuffer code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/2447.txt */\nstatic void UT_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2447.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    UT_ProbeLog(\"UT_GetDataBuffer ENTRY: FuncKey=%llu, DataBuffer_ptr=%p, MaxSize_ptr=%p, Position_ptr=%p\",\n                (unsigned long long)FuncKey, (void *)DataBuffer, (void *)MaxSize, (void *)Position);\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        UT_ProbeLog(\"UT_GetDataBuffer: No stub entry found (StubPtr == NULL). Returning NULL/0/0.\");\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        /* Log the stub structure fields that are about to be returned to the caller. */\n        UT_ProbeLog(\"UT_GetDataBuffer: Found StubPtr=%p. Buff.BasePtr=%p, Buff.TotalSize=%zu, Buff.Position=%zu\",\n                    (void *)StubPtr,\n                    (void *)StubPtr->Data.Buff.BasePtr,\n                    StubPtr->Data.Buff.TotalSize,\n                    StubPtr->Data.Buff.Position);\n\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n\n        /* Additional log to capture the relationship of returned values (evidence for violation scenario). */\n        UT_ProbeLog(\"UT_GetDataBuffer: Prepared return values -> ResultDataBuffer=%p, ResultMaxSize=%zu, ResultPosition=%zu\",\n                    ResultDataBuffer, ResultMaxSize, ResultPosition);\n    }\n\n    if (DataBuffer != NULL)\n    {\n        UT_ProbeLog(\"UT_GetDataBuffer: Writing DataBuffer -> *DataBuffer (was %p) set to %p\", (void *)*DataBuffer, ResultDataBuffer);\n        *DataBuffer = ResultDataBuffer;\n    }\n    else\n    {\n        UT_ProbeLog(\"UT_GetDataBuffer: DataBuffer parameter is NULL, not writing.\");\n    }\n\n    if (MaxSize != NULL)\n    {\n        UT_ProbeLog(\"UT_GetDataBuffer: Writing MaxSize -> *MaxSize (was %zu) set to %zu\", *MaxSize, ResultMaxSize);\n        *MaxSize = ResultMaxSize;\n    }\n    else\n    {\n        UT_ProbeLog(\"UT_GetDataBuffer: MaxSize parameter is NULL, not writing.\");\n    }\n\n    if (Position != NULL)\n    {\n        UT_ProbeLog(\"UT_GetDataBuffer: Writing Position -> *Position (was %zu) set to %zu\", *Position, ResultPosition);\n        *Position = ResultPosition;\n    }\n    else\n    {\n        UT_ProbeLog(\"UT_GetDataBuffer: Position parameter is NULL, not writing.\");\n    }\n\n    UT_ProbeLog(\"UT_GetDataBuffer EXIT: FuncKey=%llu\", (unsigned long long)FuncKey);\n}\n"
}