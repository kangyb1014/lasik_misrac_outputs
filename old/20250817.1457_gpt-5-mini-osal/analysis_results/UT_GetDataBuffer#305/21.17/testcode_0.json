{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIn UT_SetDataBuffer when AllocateCopy is true: the code mallocs a destination of BufferSize and then calls memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize) without any verification that DataBuffer actually points to an object at least BufferSize bytes long. If the caller passes a DataBuffer that is smaller than BufferSize (or otherwise not valid for BufferSize bytes), memcpy will read beyond the bounds of the source object, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2447.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetDataBuffer:\n```c\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_GetDataBuffer code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n    FILE *               log;\n\n    /* Open log file in append mode to record control flow and state. */\n    log = fopen(\"/tmp/logs/2447.txt\", \"a\");\n    if (log != NULL)\n    {\n        /* Log entry with pointer values and the opaque FuncKey value. */\n        fprintf(log, \"UT_GetDataBuffer: enter - FuncKey=%llu, DataBuffer=%p, MaxSize=%p, Position=%p\\n\",\n                (unsigned long long)(uintptr_t)FuncKey,\n                (void *)DataBuffer,\n                (void *)MaxSize,\n                (void *)Position);\n    }\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_GetDataBuffer: StubPtr == NULL - returning NULL/0/0\\n\");\n        }\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n\n        if (log != NULL)\n        {\n            /* Log the internal buffer state from the stub entry. */\n            fprintf(log, \"UT_GetDataBuffer: StubPtr=%p, BasePtr=%p, TotalSize=%zu, Position=%zu\\n\",\n                    (void *)StubPtr,\n                    ResultDataBuffer,\n                    ResultMaxSize,\n                    ResultPosition);\n        }\n    }\n\n    if (DataBuffer != NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_GetDataBuffer: assigning *DataBuffer = %p\\n\", ResultDataBuffer);\n        }\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_GetDataBuffer: assigning *MaxSize = %zu\\n\", ResultMaxSize);\n        }\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_GetDataBuffer: assigning *Position = %zu\\n\", ResultPosition);\n        }\n        *Position = ResultPosition;\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_GetDataBuffer: exit\\n\\n\");\n        (void)fclose(log);\n    }\n}\n"
}