{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter DataBuffer is declared as void ** (pointer to non-const). Per MISRA C 2023 Rule 8.13, a pointer should point to a const-qualified type whenever possible. If the pointed-to buffer is intended to be read-only (or there is no need for callers to modify the buffer via the returned pointer), DataBuffer should be declared as pointer to const, e.g. const void **DataBuffer (or const void * *), so the function returns a pointer-to-const. Declaring it as void ** allows modification through the returned pointer and therefore violates the rule in that scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2443.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetDataBuffer:\n```c\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_GetDataBuffer code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper: logs control flow and state to /tmp/logs/2443.txt */\nstatic void UT_LogDataBufferInfo(UT_EntryKey_t FuncKey,\n                                void **DataBuffer,\n                                size_t *MaxSize,\n                                size_t *Position,\n                                void *ResultDataBuffer,\n                                size_t ResultMaxSize,\n                                size_t ResultPosition,\n                                int stub_found)\n{\n    FILE *f = fopen(\"/tmp/logs/2443.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"UT_GetDataBuffer invoked. FuncKey=%lu, stub_found=%d\\n\", (unsigned long)FuncKey, stub_found);\n    fprintf(f, \"  Parameters: DataBuffer=%p, MaxSize=%p, Position=%p\\n\",\n            (void *)DataBuffer, (void *)MaxSize, (void *)Position);\n    fprintf(f, \"  Computed result: ResultDataBuffer=%p, ResultMaxSize=%zu, ResultPosition=%zu\\n\",\n            ResultDataBuffer, ResultMaxSize, ResultPosition);\n\n    if (DataBuffer != NULL)\n    {\n        /* Do not dereference *DataBuffer before assignment to avoid UB; only log the pointer address and planned assignment */\n        fprintf(f, \"  Action: will assign *DataBuffer = ResultDataBuffer (note: DataBuffer is void ** -> allows modification)\\n\");\n    }\n    else\n    {\n        fprintf(f, \"  Action: DataBuffer is NULL; no assignment will be performed\\n\");\n    }\n\n    if (MaxSize != NULL)\n    {\n        fprintf(f, \"  Action: will assign *MaxSize = ResultMaxSize\\n\");\n    }\n    else\n    {\n        fprintf(f, \"  Action: MaxSize is NULL; no assignment will be performed\\n\");\n    }\n\n    if (Position != NULL)\n    {\n        fprintf(f, \"  Action: will assign *Position = ResultPosition\\n\");\n    }\n    else\n    {\n        fprintf(f, \"  Action: Position is NULL; no assignment will be performed\\n\");\n    }\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    /* Log the control path and state prior to performing assignments so callers can reproduce the violation scenario */\n    UT_LogDataBufferInfo(FuncKey, DataBuffer, MaxSize, Position,\n                         ResultDataBuffer, ResultMaxSize, ResultPosition,\n                         (StubPtr != NULL) ? 1 : 0);\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n"
}