{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer StubPtr is only used to read fields (StubPtr->Data.Buff.BasePtr, TotalSize, Position) and is never used to modify the pointed-to object. Therefore it could and should be declared as a pointer to const: const UT_StubTableEntry_t *StubPtr; Declaring it non-const when a const-qualified type is possible violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2443.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetDataBuffer:\n```c\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_GetDataBuffer code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helper: append textual logs to the specified file. */\nstatic void UT_LogAppend(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2443.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    /* Log function entry and key value (print as uintptr_t for portability) */\n    UT_LogAppend(\"UT_GetDataBuffer: entry - FuncKey=%\" PRIuPTR, (uintptr_t)FuncKey);\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        UT_LogAppend(\"UT_GetDataBuffer: no stub entry found (StubPtr=NULL)\");\n\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        /* Log the stub pointer address and the fields that are read. */\n        UT_LogAppend(\"UT_GetDataBuffer: StubPtr=%p\", (void *)StubPtr);\n\n        /* Log the fields that are read from the stub entry. */\n        UT_LogAppend(\"UT_GetDataBuffer: StubPtr->Data.Buff.BasePtr=%p\", (void *)StubPtr->Data.Buff.BasePtr);\n        UT_LogAppend(\"UT_GetDataBuffer: StubPtr->Data.Buff.TotalSize=%zu\", (size_t)StubPtr->Data.Buff.TotalSize);\n        UT_LogAppend(\"UT_GetDataBuffer: StubPtr->Data.Buff.Position=%zu\", (size_t)StubPtr->Data.Buff.Position);\n\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    /* Log what will be written back to the caller pointers (if they exist). */\n    UT_LogAppend(\"UT_GetDataBuffer: OutParams - DataBuffer=%p, MaxSize=%p, Position=%p\",\n                 (void *)DataBuffer, (void *)MaxSize, (void *)Position);\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n        UT_LogAppend(\"UT_GetDataBuffer: wrote *DataBuffer=%p\", ResultDataBuffer);\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n        UT_LogAppend(\"UT_GetDataBuffer: wrote *MaxSize=%zu\", ResultMaxSize);\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n        UT_LogAppend(\"UT_GetDataBuffer: wrote *Position=%zu\", ResultPosition);\n    }\n\n    UT_LogAppend(\"UT_GetDataBuffer: exit\");\n}\n"
}