{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable StubPtr is declared as UT_StubTableEntry_t * and is assigned the result of UT_GetStubEntry(...). In UT_GetDataBuffer StubPtr is only used for read access (reading StubPtr->Data.Buff.*) and is not modified. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible. Therefore StubPtr (and the return type of UT_GetStubEntry) should be const UT_StubTableEntry_t * to prevent modification; as written this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2443.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetDataBuffer:\n```c\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_GetDataBuffer code.\n",
  "test_code": "void UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    /* Probe: log entry and input pointers */\n    {\n        FILE *log = fopen(\"/tmp/logs/2443.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_GetDataBuffer ENTER: FuncKey=%llu, DataBuffer=%p, MaxSize=%p, Position=%p\\n\",\n                    (unsigned long long)FuncKey, (void *)DataBuffer, (void *)MaxSize, (void *)Position);\n            fclose(log);\n        }\n    }\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    /* Probe: log result of UT_GetStubEntry and the fields read from StubPtr (if any) */\n    {\n        FILE *log = fopen(\"/tmp/logs/2443.txt\", \"a\");\n        if (log != NULL)\n        {\n            if (StubPtr == NULL)\n            {\n                fprintf(log, \"UT_GetDataBuffer: UT_GetStubEntry returned NULL\\n\");\n            }\n            else\n            {\n                fprintf(log, \"UT_GetDataBuffer: UT_GetStubEntry returned StubPtr=%p\\n\", (void *)StubPtr);\n                /* Log the fields that are read below to show read-only usage */\n                fprintf(log, \"  StubPtr->Data.Buff.BasePtr=%p\\n\", StubPtr->Data.Buff.BasePtr);\n                fprintf(log, \"  StubPtr->Data.Buff.TotalSize=%zu\\n\", StubPtr->Data.Buff.TotalSize);\n                fprintf(log, \"  StubPtr->Data.Buff.Position=%zu\\n\", StubPtr->Data.Buff.Position);\n            }\n            fclose(log);\n        }\n    }\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        /* Preserve original logic: read-only access to the StubPtr fields */\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    /* Probe: log computed results before assignments */\n    {\n        FILE *log = fopen(\"/tmp/logs/2443.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_GetDataBuffer RESULTS: ResultDataBuffer=%p, ResultMaxSize=%zu, ResultPosition=%zu\\n\",\n                    ResultDataBuffer, ResultMaxSize, ResultPosition);\n            fclose(log);\n        }\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n        /* Probe: confirm assignment */\n        FILE *log = fopen(\"/tmp/logs/2443.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"Assigned *DataBuffer=%p\\n\", ResultDataBuffer);\n            fclose(log);\n        }\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n        FILE *log = fopen(\"/tmp/logs/2443.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"Assigned *MaxSize=%zu\\n\", ResultMaxSize);\n            fclose(log);\n        }\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n        FILE *log = fopen(\"/tmp/logs/2443.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"Assigned *Position=%zu\\n\", ResultPosition);\n            fclose(log);\n        }\n    }\n\n    /* Probe: exit */\n    {\n        FILE *log = fopen(\"/tmp/logs/2443.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_GetDataBuffer EXIT\\n\\n\");\n            fclose(log);\n        }\n    }\n}\n"
}