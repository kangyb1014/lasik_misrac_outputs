{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter DataBuffer is declared as void **. If UT_GetDataBuffer only returns a pointer to buffer data that should not be modified by callers, the pointer-to-pointer should be const-qualified (for example const void **DataBuffer or const void * *). Declaring it as void ** allows dropping const qualification and therefore violates MISRA C 2023 Rule 8.13 in that scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2443.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetDataBuffer:\n```c\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_GetDataBuffer code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    /* Logging probe: record control path and state before performing assignments.\n       Writes to /tmp/logs/2443.txt so external agents can reproduce the scenario. */\n    {\n        FILE *log = fopen(\"/tmp/logs/2443.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Print basic inputs and computed results. Avoid dereferencing DataBuffer (pointer-to-pointer)\n               before the original logic to prevent introducing undefined behaviour. */\n            (void)fprintf(log, \"UT_GetDataBuffer invoked\\n\");\n            (void)fprintf(log, \"  FuncKey: %lu\\n\", (unsigned long)FuncKey);\n            (void)fprintf(log, \"  StubPtr: %p\\n\", (void *)StubPtr);\n            if (StubPtr == NULL)\n            {\n                (void)fprintf(log, \"  StubPtr == NULL -> ResultDataBuffer = NULL, ResultMaxSize = 0, ResultPosition = 0\\n\");\n            }\n            else\n            {\n                (void)fprintf(log, \"  StubPtr != NULL -> ResultDataBuffer = %p, ResultMaxSize = %zu, ResultPosition = %zu\\n\",\n                               ResultDataBuffer, ResultMaxSize, ResultPosition);\n            }\n            (void)fprintf(log, \"  Provided pointers: DataBuffer=%p, MaxSize=%p, Position=%p\\n\",\n                           (void *)DataBuffer, (void *)MaxSize, (void *)Position);\n\n            /* Indicate intended writes without dereferencing the incoming pointers here. */\n            (void)fprintf(log, \"  Will assign: if (DataBuffer) *DataBuffer = %p; if (MaxSize) *MaxSize = %zu; if (Position) *Position = %zu\\n\",\n                           ResultDataBuffer, ResultMaxSize, ResultPosition);\n\n            (void)fclose(log);\n        }\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n\n    /* Logging probe: record final state after assignments. */\n    {\n        FILE *log = fopen(\"/tmp/logs/2443.txt\", \"a\");\n        if (log != NULL)\n        {\n            (void)fprintf(log, \"UT_GetDataBuffer completed\\n\");\n            (void)fprintf(log, \"  After assignments: DataBuffer(ptr)=%p, ResultDataBuffer=%p\\n\",\n                           (void *)DataBuffer, ResultDataBuffer);\n            (void)fprintf(log, \"  After assignments: MaxSize(ptr)=%p -> %zu, Position(ptr)=%p -> %zu\\n\",\n                           (void *)MaxSize, ResultMaxSize, (void *)Position, ResultPosition);\n            (void)fclose(log);\n        }\n    }\n}\n"
}