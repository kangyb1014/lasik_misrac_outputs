{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf StubPtr->Data.Buff.BasePtr has type void * (i.e. it is a non-const pointer to the buffer) then Rule 8.13 is violated. In the shown fragment the value is assigned into a non-const void * (ResultDataBuffer) and returned via a void ** out-parameter, so any const-qualification on the referenced object is not preserved. According to MISRA C 2023 R8.13 the pointer should be const-qualified whenever possible (for example change BasePtr to const void * and the API to use const void ** / const void * as appropriate), otherwise the rule is broken.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetDataBuffer code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2443.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetDataBuffer as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetDataBuffer:\n```c\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0;\n        ResultPosition   = 0;\n    }\n    else\n    {\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n    }\n\n    if (DataBuffer != NULL)\n    {\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        *Position = ResultPosition;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_GetDataBuffer code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Helper logging function: append diagnostic information to /tmp/logs/2443.txt */\nstatic void UT_LogDataBufferState(const char *stage,\n                                  void *stub_ptr,\n                                  void *result_data_buffer,\n                                  size_t result_max_size,\n                                  size_t result_position,\n                                  void **out_DataBuffer,\n                                  size_t *out_MaxSize,\n                                  size_t *out_Position)\n{\n    FILE *fp = fopen(\"/tmp/logs/2443.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging, do not disturb function behavior */\n    }\n\n    fprintf(fp, \"---- UT_GetDataBuffer: %s ----\\n\", (stage != NULL) ? stage : \"(null)\");\n    fprintf(fp, \"StubPtr (addr): %p\\n\", stub_ptr);\n    fprintf(fp, \"ResultDataBuffer (addr): %p\\n\", result_data_buffer);\n    fprintf(fp, \"ResultMaxSize: %zu\\n\", result_max_size);\n    fprintf(fp, \"ResultPosition: %zu\\n\", result_position);\n    fprintf(fp, \"Out param DataBuffer (addr): %p\\n\", (void *)out_DataBuffer);\n    fprintf(fp, \"Out param MaxSize (addr): %p\\n\", (void *)out_MaxSize);\n    fprintf(fp, \"Out param Position (addr): %p\\n\", (void *)out_Position);\n\n    /* If the out DataBuffer pointer is provided, log what will be written. */\n    if (out_DataBuffer != NULL)\n    {\n        fprintf(fp, \"Will write *DataBuffer = %p\\n\", result_data_buffer);\n    }\n    else\n    {\n        fprintf(fp, \"DataBuffer out-parameter is NULL; no write\\n\");\n    }\n\n    if (out_MaxSize != NULL)\n    {\n        fprintf(fp, \"Will write *MaxSize = %zu\\n\", result_max_size);\n    }\n    else\n    {\n        fprintf(fp, \"MaxSize out-parameter is NULL; no write\\n\");\n    }\n\n    if (out_Position != NULL)\n    {\n        fprintf(fp, \"Will write *Position = %zu\\n\", result_position);\n    }\n    else\n    {\n        fprintf(fp, \"Position out-parameter is NULL; no write\\n\");\n    }\n\n    fprintf(fp, \"---- end ----\\n\\n\");\n    fclose(fp);\n}\n\n/* The original function with inserted probes. The logic is preserved. */\nvoid UT_GetDataBuffer(UT_EntryKey_t FuncKey, void **DataBuffer, size_t *MaxSize, size_t *Position)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ResultDataBuffer;\n    size_t               ResultMaxSize;\n    size_t               ResultPosition;\n\n    /* Log entry into function (FuncKey not printed to avoid type assumptions) */\n    UT_LogDataBufferState(\"entering UT_GetDataBuffer (before UT_GetStubEntry)\",\n                          NULL, NULL, 0u, 0u, DataBuffer, MaxSize, Position);\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    UT_LogDataBufferState(\"after UT_GetStubEntry\",\n                          (void *)StubPtr, NULL, 0u, 0u, DataBuffer, MaxSize, Position);\n\n    if (StubPtr == NULL)\n    {\n        ResultDataBuffer = NULL;\n        ResultMaxSize    = 0u;\n        ResultPosition   = 0u;\n\n        UT_LogDataBufferState(\"stub NULL: prepared default results\",\n                              (void *)StubPtr, ResultDataBuffer, ResultMaxSize, ResultPosition,\n                              DataBuffer, MaxSize, Position);\n    }\n    else\n    {\n        /* Preserve original assignments */\n        ResultDataBuffer = StubPtr->Data.Buff.BasePtr;\n        ResultMaxSize    = StubPtr->Data.Buff.TotalSize;\n        ResultPosition   = StubPtr->Data.Buff.Position;\n\n        /* Log the values obtained from the stub entry. This captures the pointer\n         * value that demonstrates whether a non-const void * is being returned. */\n        UT_LogDataBufferState(\"stub valid: obtained results from StubPtr\",\n                              (void *)StubPtr, ResultDataBuffer, ResultMaxSize, ResultPosition,\n                              DataBuffer, MaxSize, Position);\n    }\n\n    /* Before performing writes to out-parameters, log intent */\n    UT_LogDataBufferState(\"before writing out-parameters\",\n                          (void *)StubPtr, ResultDataBuffer, ResultMaxSize, ResultPosition,\n                          DataBuffer, MaxSize, Position);\n\n    if (DataBuffer != NULL)\n    {\n        /* Log the specific assignment and then perform it (preserve behavior) */\n        UT_LogDataBufferState(\"assigning *DataBuffer\",\n                              (void *)StubPtr, ResultDataBuffer, ResultMaxSize, ResultPosition,\n                              DataBuffer, MaxSize, Position);\n        *DataBuffer = ResultDataBuffer;\n    }\n    if (MaxSize != NULL)\n    {\n        UT_LogDataBufferState(\"assigning *MaxSize\",\n                              (void *)StubPtr, ResultDataBuffer, ResultMaxSize, ResultPosition,\n                              DataBuffer, MaxSize, Position);\n        *MaxSize = ResultMaxSize;\n    }\n    if (Position != NULL)\n    {\n        UT_LogDataBufferState(\"assigning *Position\",\n                              (void *)StubPtr, ResultDataBuffer, ResultMaxSize, ResultPosition,\n                              DataBuffer, MaxSize, Position);\n        *Position = ResultPosition;\n    }\n\n    /* Final state after all writes */\n    UT_LogDataBufferState(\"exiting UT_GetDataBuffer (final state)\",\n                          (void *)StubPtr, ResultDataBuffer, ResultMaxSize, ResultPosition,\n                          DataBuffer, MaxSize, Position);\n}\n"
}