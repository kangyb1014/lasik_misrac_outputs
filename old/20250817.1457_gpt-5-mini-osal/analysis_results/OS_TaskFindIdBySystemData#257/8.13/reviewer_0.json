{
  "user_message": "An agent A claimed that the following OS_TaskFindIdBySystemData code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskFindIdBySystemData.\n```c\nint32 OS_TaskFindIdBySystemData(osal_id_t *task_id, const void *sysdata, size_t sysdata_size)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_id);\n\n    /* The \"sysdata\" and \"sysdata_size\" must be passed to the underlying impl for validation */\n    return_code = OS_TaskValidateSystemData_Impl(sysdata, sysdata_size);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_TaskIdMatchSystemData_Impl,\n                                         (void *)sysdata, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *task_id = OS_ObjectIdFromToken(&token);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code casts away the const qualifier by converting the parameter 'sysdata' (type 'const void *') to '(void *)sysdata' when calling OS_ObjectIdGetBySearch. This discards the const qualification and thus allows/indicates a non-const pointer is used where a const-qualified pointer would be appropriate. To comply with MISRA C 2023 Rule 8.13, the API should accept a 'const void *' (and the callback OS_TaskIdMatchSystemData_Impl should take a 'const void *' as well), and the call should pass 'sysdata' without casting. Alternatively remove any code that would modify the data through a non-const pointer.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_TaskFind_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2059.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Do not interfere with normal operation if logging fails */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_TaskFindIdBySystemData(osal_id_t *task_id, const void *sysdata, size_t sysdata_size)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Log entry and input state */\n    OS_TaskFind_Log(\"OS_TaskFindIdBySystemData ENTRY: task_id_ptr=%p, sysdata_ptr=%p, sysdata_size=%zu\",\n                    (void *)task_id, (const void *)sysdata, sysdata_size);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_id);\n\n    /* The \"sysdata\" and \"sysdata_size\" must be passed to the underlying impl for validation */\n    return_code = OS_TaskValidateSystemData_Impl(sysdata, sysdata_size);\n    OS_TaskFind_Log(\"OS_TaskValidateSystemData_Impl returned %ld\", (long)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TaskFind_Log(\"OS_TaskFindIdBySystemData EARLY RETURN: validation failed with %ld\", (long)return_code);\n        return return_code;\n    }\n\n    /*\n     * The original code casts away const here: (void *)sysdata.\n     * Keep original behavior but log the cast occurrence and pointers involved to provide evidence\n     * for the reported violation scenario (casting away const-qualified pointer).\n     */\n    OS_TaskFind_Log(\"About to call OS_ObjectIdGetBySearch with cast (void *)sysdata -> original_sysdata_ptr=%p\",\n                    (const void *)sysdata);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_TaskIdMatchSystemData_Impl,\n                                         (void *)sysdata, &token);\n\n    OS_TaskFind_Log(\"OS_ObjectIdGetBySearch returned %ld\", (long)return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        *task_id = OS_ObjectIdFromToken(&token);\n\n        /* Log success path and state: token address and resolved task id value */\n        OS_TaskFind_Log(\"OS_TaskFindIdBySystemData SUCCESS: token_addr=%p, resolved_task_id_ptr=%p, resolved_task_id_value=%llu\",\n                        (void *)&token, (void *)task_id,\n                        (unsigned long long)(uintptr_t)*task_id);\n\n        OS_ObjectIdRelease(&token);\n\n        OS_TaskFind_Log(\"OS_TaskFindIdBySystemData: token released\");\n    }\n    else\n    {\n        OS_TaskFind_Log(\"OS_TaskFindIdBySystemData: object not found or error, return_code=%ld\", (long)return_code);\n    }\n\n    OS_TaskFind_Log(\"OS_TaskFindIdBySystemData EXIT: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_TaskFindIdBySystemData ENTRY: task_id_ptr=(nil), sysdata_ptr=0x7fff60077ac3, sysdata_size=1\nOS_TaskFindIdBySystemData ENTRY: task_id_ptr=0x7fff60077ac4, sysdata_ptr=(nil), sysdata_size=1\nOS_TaskValidateSystemData_Impl returned -2\nOS_TaskFindIdBySystemData EARLY RETURN: validation failed with -2\nOS_TaskFindIdBySystemData ENTRY: task_id_ptr=0x7fff60077ac4, sysdata_ptr=0x7fff60077ac3, sysdata_size=0\nOS_TaskValidateSystemData_Impl returned -2\nOS_TaskFindIdBySystemData EARLY RETURN: validation failed with -2\nOS_TaskFindIdBySystemData ENTRY: task_id_ptr=(nil), sysdata_ptr=0x7fff60077ac3, sysdata_size=1\nOS_TaskFindIdBySystemData ENTRY: task_id_ptr=0x7fff60077ac4, sysdata_ptr=(nil), sysdata_size=1\nOS_TaskValidateSystemData_Impl returned -2\nOS_TaskFindIdBySystemData EARLY RETURN: validation failed with -2\nOS_TaskFindIdBySystemData ENTRY: task_id_ptr=0x7fff60077ac4, sysdata_ptr=0x7fff60077ac3, sysdata_size=0\nOS_TaskValidateSystemData_Impl returned -2\nOS_TaskFindIdBySystemData EARLY RETURN: validation failed with -2\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The code casts away the const qualification by converting the parameter sysdata (const void *) to (void *)sysdata when calling OS_ObjectIdGetBySearch. MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types whenever possible; discarding const (converting const T * to T *) is a violation unless explicitly justified and documented as a deviation. The correct fixes are to propagate const: change OS_ObjectIdGetBySearch and the callback OS_TaskIdMatchSystemData_Impl to accept a const void * (and pass sysdata without a cast), or ensure no API or implementation takes a non-const pointer/does not modify the data. If modification is genuinely required, a documented MISRA deviation is needed. Note that the test logs show validation returned early in these runs and the cast was not exercised at runtime, but the source-level cast remains a static violation of Rule 8.13."
}