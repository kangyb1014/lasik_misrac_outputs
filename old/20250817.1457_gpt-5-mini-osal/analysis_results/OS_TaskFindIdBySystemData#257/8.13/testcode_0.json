{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts away the const qualifier by converting the parameter 'sysdata' (type 'const void *') to '(void *)sysdata' when calling OS_ObjectIdGetBySearch. This discards the const qualification and thus allows/indicates a non-const pointer is used where a const-qualified pointer would be appropriate. To comply with MISRA C 2023 Rule 8.13, the API should accept a 'const void *' (and the callback OS_TaskIdMatchSystemData_Impl should take a 'const void *' as well), and the call should pass 'sysdata' without casting. Alternatively remove any code that would modify the data through a non-const pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskFindIdBySystemData code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2059.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskFindIdBySystemData as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskFindIdBySystemData:\n```c\nint32 OS_TaskFindIdBySystemData(osal_id_t *task_id, const void *sysdata, size_t sysdata_size)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_id);\n\n    /* The \"sysdata\" and \"sysdata_size\" must be passed to the underlying impl for validation */\n    return_code = OS_TaskValidateSystemData_Impl(sysdata, sysdata_size);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_TaskIdMatchSystemData_Impl,\n                                         (void *)sysdata, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *task_id = OS_ObjectIdFromToken(&token);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskFindIdBySystemData code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stdarg.h>\n\n/* Probe logging helper - append-only to avoid changing program state */\nstatic void OS_TaskFind_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2059.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Do not interfere with normal operation if logging fails */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_TaskFindIdBySystemData(osal_id_t *task_id, const void *sysdata, size_t sysdata_size)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Log entry and input state */\n    OS_TaskFind_Log(\"OS_TaskFindIdBySystemData ENTRY: task_id_ptr=%p, sysdata_ptr=%p, sysdata_size=%zu\",\n                    (void *)task_id, (const void *)sysdata, sysdata_size);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_id);\n\n    /* The \"sysdata\" and \"sysdata_size\" must be passed to the underlying impl for validation */\n    return_code = OS_TaskValidateSystemData_Impl(sysdata, sysdata_size);\n    OS_TaskFind_Log(\"OS_TaskValidateSystemData_Impl returned %ld\", (long)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TaskFind_Log(\"OS_TaskFindIdBySystemData EARLY RETURN: validation failed with %ld\", (long)return_code);\n        return return_code;\n    }\n\n    /*\n     * The original code casts away const here: (void *)sysdata.\n     * Keep original behavior but log the cast occurrence and pointers involved to provide evidence\n     * for the reported violation scenario (casting away const-qualified pointer).\n     */\n    OS_TaskFind_Log(\"About to call OS_ObjectIdGetBySearch with cast (void *)sysdata -> original_sysdata_ptr=%p\",\n                    (const void *)sysdata);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_TaskIdMatchSystemData_Impl,\n                                         (void *)sysdata, &token);\n\n    OS_TaskFind_Log(\"OS_ObjectIdGetBySearch returned %ld\", (long)return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        *task_id = OS_ObjectIdFromToken(&token);\n\n        /* Log success path and state: token address and resolved task id value */\n        OS_TaskFind_Log(\"OS_TaskFindIdBySystemData SUCCESS: token_addr=%p, resolved_task_id_ptr=%p, resolved_task_id_value=%llu\",\n                        (void *)&token, (void *)task_id,\n                        (unsigned long long)(uintptr_t)*task_id);\n\n        OS_ObjectIdRelease(&token);\n\n        OS_TaskFind_Log(\"OS_TaskFindIdBySystemData: token released\");\n    }\n    else\n    {\n        OS_TaskFind_Log(\"OS_TaskFindIdBySystemData: object not found or error, return_code=%ld\", (long)return_code);\n    }\n\n    OS_TaskFind_Log(\"OS_TaskFindIdBySystemData EXIT: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}