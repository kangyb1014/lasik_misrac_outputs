{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_TaskFindIdBySystemData:\n```c\nint32 OS_TaskFindIdBySystemData(osal_id_t *task_id, const void *sysdata, size_t sysdata_size)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_id);\n\n    /* The \"sysdata\" and \"sysdata_size\" must be passed to the underlying impl for validation */\n    return_code = OS_TaskValidateSystemData_Impl(sysdata, sysdata_size);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_TaskIdMatchSystemData_Impl,\n                                         (void *)sysdata, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *task_id = OS_ObjectIdFromToken(&token);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_TaskFindIdBySystemData:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nint32 OS_TaskValidateSystemData_Impl(const void *sysdata, size_t sysdata_size)\n{\n    if (sysdata == NULL || sysdata_size != sizeof(pthread_t))\n    {\n        return OS_INVALID_POINTER;\n    }\n    return OS_SUCCESS;\n}\n...\n#define OS_SUCCESS (0)\n...\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n    else\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\nbool OS_TaskIdMatchSystemData_Impl(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    const pthread_t *               target = (const pthread_t *)ref;\n    OS_impl_task_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    return (pthread_equal(*target, impl->id) != 0);\n}\n...\nstatic inline osal_id_t OS_ObjectIdFromToken(const OS_object_token_t *token)\n{\n    return token->obj_id;\n}\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef uint32 osal_id_t\n...\ntypedef int32_t   int32\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No explicit compiler language extensions are present in the provided code fragment. I inspected the code for common compiler-specific extensions that are normally documented as extensions (examples include identifiers or constructs such as __attribute__, __asm__, __builtin_*, typeof, statement-expressions ({ ... }), nested functions, __extension__, GCC inline-asm, or other nonstandard keywords or spellings) and found none in the shown functions and macros.\n\nSpecific notes on constructs that might look suspicious but are not language extensions here:\n- static inline (OS_ObjectIdFromToken) \u2014 this is standard C (C99 onward) and not a compiler extension.\n- bool (function return type) \u2014 the boolean type is standard via <stdbool.h> in C99; not a compiler extension.\n- pthread_t / pthread_equal usage \u2014 these are POSIX API usages, not C language compiler extensions.\n- Casting const away when passing (void *)sysdata into OS_ObjectIdGetBySearch \u2014 this is a standard cast (potentially a const-correctness concern but not a compiler language extension and thus not triggering MISRA Rule 1.2 per the instruction).\n- Macros and typedefs used (OS_CHECK_POINTER, OS_OBJECT_TABLE_GET, BUGCHECK, etc.) \u2014 the macro usages shown do not themselves reveal any nonstandard language constructs. If any of these macro definitions (not provided) internally use compiler-specific extensions, those definitions would need to be inspected; however, based on the code shown there is no direct evidence of extensions.\n\nTherefore, based on the provided code and related symbol definitions, there are no fragments that explicitly use compiler language extensions that should be reported for MISRA C 2023 Rule 1.2. If you can provide the definitions of macros such as BUGCHECK, OS_OBJECT_TABLE_GET, or other underlying implementation files, I can re-check those for hidden compiler-specific extensions."
}