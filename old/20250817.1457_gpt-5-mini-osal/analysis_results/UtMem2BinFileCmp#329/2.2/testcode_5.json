{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf UtAssert_True(false, ...) always terminates execution (for example it calls exit/abort/longjmp and does not return), then the assignment 'Success = false;' in the else branch is executed but has no effect on observable program behaviour (the program will terminate in UtAssert_True before the function return is used). In that case the assignment is dead code per MISRA C 2023 Rule 2.2. (Whether this is a violation depends on the actual implementation of UtAssertEx/UtAssert_True.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtMem2BinFileCmp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2634.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtMem2BinFileCmp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtMem2BinFileCmp:\n```c\nbool UtMem2BinFileCmp(const void *Memory, const char *Filename)\n{\n    FILE *       fp;\n    const uint8 *MemByte = Memory;\n    int          FileByte;\n    bool         Success;\n    uint32       i;\n\n    Success = true;\n    if ((fp = fopen(Filename, \"r\")))\n    {\n        for (i = 0; (FileByte = fgetc(fp)) != EOF; i++)\n        {\n            if (MemByte[i] != FileByte)\n            {\n                Success = false;\n                printf(\"UtMem2BinFileCmp: Miscompare in file: %s, byte offset: %lu, expected: %u, found: %u\\n\",\n                       Filename, (unsigned long)i, (unsigned int)MemByte[i], (unsigned int)FileByte);\n                break;\n            }\n        }\n        fclose(fp);\n    }\n    else\n    {\n        Success = false;\n        printf(\"UtMem2BinFileCmp: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2BinFileCmp: Error Opening File\");\n    }\n\n    return Success;\n}\n```\n</target_code>\nPlease provide the modified UtMem2BinFileCmp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n#include <stdbool.h>\n\n/* Probe logger that appends control-flow and state information to /tmp/logs/2634.txt */\nstatic void ProbeLog(const char *fmt, ...)\n{\n    FILE *log = fopen(\"/tmp/logs/2634.txt\", \"a\");\n    if (log)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(log, fmt, ap);\n        va_end(ap);\n        fprintf(log, \"\\n\");\n        fclose(log);\n    }\n}\n\nbool UtMem2BinFileCmp(const void *Memory, const char *Filename)\n{\n    FILE *       fp;\n    const uint8 *MemByte = Memory;\n    int          FileByte;\n    bool         Success;\n    uint32       i;\n\n    ProbeLog(\"ENTER: UtMem2BinFileCmp Filename=%s Memory=%p\", Filename, Memory);\n\n    Success = true;\n    if ((fp = fopen(Filename, \"r\")))\n    {\n        ProbeLog(\"fopen succeeded: %s, fp=%p\", Filename, (void *)fp);\n        for (i = 0; (FileByte = fgetc(fp)) != EOF; i++)\n        {\n            if (MemByte[i] != FileByte)\n            {\n                Success = false;\n                ProbeLog(\"Mismatch detected: file=%s, offset=%lu, expected=%u, found=%u\",\n                         Filename, (unsigned long)i, (unsigned int)MemByte[i], (unsigned int)FileByte);\n\n                /* preserve original diagnostic output */\n                printf(\"UtMem2BinFileCmp: Miscompare in file: %s, byte offset: %lu, expected: %u, found: %u\\n\",\n                       Filename, (unsigned long)i, (unsigned int)MemByte[i], (unsigned int)FileByte);\n                break;\n            }\n        }\n        fclose(fp);\n        ProbeLog(\"fclose called for %s, returning Success=%d\", Filename, Success);\n    }\n    else\n    {\n        /* Log the fopen failure details and the assignment that follows */\n        ProbeLog(\"fopen FAILED: %s, errno=%d (%s)\", Filename, errno, strerror(errno));\n\n        Success = false;\n        ProbeLog(\"Assigned Success=false in else branch (before calling UtAssert_True)\");\n\n        /* preserve original diagnostic output and assertion call */\n        printf(\"UtMem2BinFileCmp: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n\n        /* Note: UtAssert_True may terminate execution (exit/abort/longjmp). The probe above\n         * records that Success was assigned, and the probe below will indicate whether\n         * control returns after the assertion (if it does not terminate). */\n        UtAssert_True(false, \"UtMem2BinFileCmp: Error Opening File\");\n\n        ProbeLog(\"After UtAssert_True call in else branch (this will be logged only if UtAssert_True returns)\");\n    }\n\n    ProbeLog(\"EXIT: UtMem2BinFileCmp returning Success=%d\", Success);\n    return Success;\n}\n"
}