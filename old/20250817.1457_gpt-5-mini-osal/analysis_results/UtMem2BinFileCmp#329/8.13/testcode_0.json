{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the result of strerror(errno) (type char *) directly to printf without using a const-qualified pointer. Rule 8.13 requires pointers to point to const-qualified types where possible; here the returned error-string is not captured as a const char * (e.g. const char *err = strerror(errno); or cast to const char *) even though the code does not modify it. Therefore the fragment violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtMem2BinFileCmp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2635.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtMem2BinFileCmp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtMem2BinFileCmp:\n```c\nbool UtMem2BinFileCmp(const void *Memory, const char *Filename)\n{\n    FILE *       fp;\n    const uint8 *MemByte = Memory;\n    int          FileByte;\n    bool         Success;\n    uint32       i;\n\n    Success = true;\n    if ((fp = fopen(Filename, \"r\")))\n    {\n        for (i = 0; (FileByte = fgetc(fp)) != EOF; i++)\n        {\n            if (MemByte[i] != FileByte)\n            {\n                Success = false;\n                printf(\"UtMem2BinFileCmp: Miscompare in file: %s, byte offset: %lu, expected: %u, found: %u\\n\",\n                       Filename, (unsigned long)i, (unsigned int)MemByte[i], (unsigned int)FileByte);\n                break;\n            }\n        }\n        fclose(fp);\n    }\n    else\n    {\n        Success = false;\n        printf(\"UtMem2BinFileCmp: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2BinFileCmp: Error Opening File\");\n    }\n\n    return Success;\n}\n```\n</target_code>\nPlease provide the modified UtMem2BinFileCmp code.\n",
  "test_code": "static void UtProbe_Log(const char *stage, const char *filename, unsigned long offset, unsigned int expected, unsigned int found, int errnum, const char *errstr)\n{\n    FILE *lf = fopen(\"/tmp/logs/2635.txt\", \"a\");\n    if (lf)\n    {\n        fprintf(lf, \"Stage: %s\\n\", stage ? stage : \"(null)\");\n        if (filename)\n        {\n            fprintf(lf, \"  Filename: %s\\n\", filename);\n        }\n        if (offset != 0u)\n        {\n            fprintf(lf, \"  Offset: %lu\\n\", offset);\n        }\n        if (expected != 0u || found != 0u)\n        {\n            fprintf(lf, \"  Expected byte: %u, Found byte: %u\\n\", expected, found);\n        }\n        if (errnum != 0)\n        {\n            fprintf(lf, \"  Errno: %d\\n\", errnum);\n        }\n        if (errstr)\n        {\n            fprintf(lf, \"  ErrStr: %s\\n\", errstr);\n        }\n        fprintf(lf, \"\\n\");\n        fclose(lf);\n    }\n}\n\nbool UtMem2BinFileCmp(const void *Memory, const char *Filename)\n{\n    FILE *       fp;\n    const uint8 *MemByte = Memory;\n    int          FileByte;\n    bool         Success;\n    uint32       i;\n\n    /* Probe: entering function */\n    UtProbe_Log(\"enter\", Filename, 0u, 0u, 0u, 0, NULL);\n\n    Success = true;\n    if ((fp = fopen(Filename, \"r\")))\n    {\n        /* Probe: file opened successfully */\n        UtProbe_Log(\"file_opened\", Filename, 0u, 0u, 0u, 0, NULL);\n\n        for (i = 0; (FileByte = fgetc(fp)) != EOF; i++)\n        {\n            if (MemByte[i] != FileByte)\n            {\n                Success = false;\n                /* Probe: miscompare detected */\n                UtProbe_Log(\"miscompare\", Filename, (unsigned long)i, (unsigned int)MemByte[i], (unsigned int)FileByte, 0, NULL);\n\n                printf(\"UtMem2BinFileCmp: Miscompare in file: %s, byte offset: %lu, expected: %u, found: %u\\n\",\n                       Filename, (unsigned long)i, (unsigned int)MemByte[i], (unsigned int)FileByte);\n                break;\n            }\n        }\n        fclose(fp);\n\n        /* Probe: file closed after read/compare */\n        UtProbe_Log(\"file_closed\", Filename, 0u, 0u, 0u, 0, NULL);\n    }\n    else\n    {\n        Success = false;\n\n        /* Probe: error opening file. Capture errno and the error string provided by strerror.\n           Note: the code intentionally uses strerror(errno) directly in the printf below to\n           demonstrate the reported MISRA Rule 8.13 scenario. We call strerror() here as well\n           to record the string into the log for reproducibility. */\n        UtProbe_Log(\"open_error\", Filename, 0u, 0u, 0u, errno, strerror(errno));\n\n        /* Original (violating) call retained to reproduce the scenario: passing strerror(errno)\n           directly to printf without storing it in a const-qualified pointer. */\n        printf(\"UtMem2BinFileCmp: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2BinFileCmp: Error Opening File\");\n    }\n\n    /* Probe: exiting function with result */\n    UtProbe_Log(\"exit\", Filename, 0u, 0u, 0u, Success ? 0 : -1, Success ? \"success\" : \"failure\");\n\n    return Success;\n}"
}