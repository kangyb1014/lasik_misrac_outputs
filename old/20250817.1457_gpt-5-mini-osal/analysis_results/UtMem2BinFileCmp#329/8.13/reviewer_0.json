{
  "user_message": "An agent A claimed that the following UtMem2BinFileCmp code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of UtMem2BinFileCmp.\n```c\nbool UtMem2BinFileCmp(const void *Memory, const char *Filename)\n{\n    FILE *       fp;\n    const uint8 *MemByte = Memory;\n    int          FileByte;\n    bool         Success;\n    uint32       i;\n\n    Success = true;\n    if ((fp = fopen(Filename, \"r\")))\n    {\n        for (i = 0; (FileByte = fgetc(fp)) != EOF; i++)\n        {\n            if (MemByte[i] != FileByte)\n            {\n                Success = false;\n                printf(\"UtMem2BinFileCmp: Miscompare in file: %s, byte offset: %lu, expected: %u, found: %u\\n\",\n                       Filename, (unsigned long)i, (unsigned int)MemByte[i], (unsigned int)FileByte);\n                break;\n            }\n        }\n        fclose(fp);\n    }\n    else\n    {\n        Success = false;\n        printf(\"UtMem2BinFileCmp: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2BinFileCmp: Error Opening File\");\n    }\n\n    return Success;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The call passes the result of strerror(errno) (type char *) directly to printf without using a const-qualified pointer. Rule 8.13 requires pointers to point to const-qualified types where possible; here the returned error-string is not captured as a const char * (e.g. const char *err = strerror(errno); or cast to const char *) even though the code does not modify it. Therefore the fragment violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void UtProbe_Log(const char *stage, const char *filename, unsigned long offset, unsigned int expected, unsigned int found, int errnum, const char *errstr)\n{\n    FILE *lf = fopen(\"/tmp/logs/2635.txt\", \"a\");\n    if (lf)\n    {\n        fprintf(lf, \"Stage: %s\\n\", stage ? stage : \"(null)\");\n        if (filename)\n        {\n            fprintf(lf, \"  Filename: %s\\n\", filename);\n        }\n        if (offset != 0u)\n        {\n            fprintf(lf, \"  Offset: %lu\\n\", offset);\n        }\n        if (expected != 0u || found != 0u)\n        {\n            fprintf(lf, \"  Expected byte: %u, Found byte: %u\\n\", expected, found);\n        }\n        if (errnum != 0)\n        {\n            fprintf(lf, \"  Errno: %d\\n\", errnum);\n        }\n        if (errstr)\n        {\n            fprintf(lf, \"  ErrStr: %s\\n\", errstr);\n        }\n        fprintf(lf, \"\\n\");\n        fclose(lf);\n    }\n}\n\nbool UtMem2BinFileCmp(const void *Memory, const char *Filename)\n{\n    FILE *       fp;\n    const uint8 *MemByte = Memory;\n    int          FileByte;\n    bool         Success;\n    uint32       i;\n\n    /* Probe: entering function */\n    UtProbe_Log(\"enter\", Filename, 0u, 0u, 0u, 0, NULL);\n\n    Success = true;\n    if ((fp = fopen(Filename, \"r\")))\n    {\n        /* Probe: file opened successfully */\n        UtProbe_Log(\"file_opened\", Filename, 0u, 0u, 0u, 0, NULL);\n\n        for (i = 0; (FileByte = fgetc(fp)) != EOF; i++)\n        {\n            if (MemByte[i] != FileByte)\n            {\n                Success = false;\n                /* Probe: miscompare detected */\n                UtProbe_Log(\"miscompare\", Filename, (unsigned long)i, (unsigned int)MemByte[i], (unsigned int)FileByte, 0, NULL);\n\n                printf(\"UtMem2BinFileCmp: Miscompare in file: %s, byte offset: %lu, expected: %u, found: %u\\n\",\n                       Filename, (unsigned long)i, (unsigned int)MemByte[i], (unsigned int)FileByte);\n                break;\n            }\n        }\n        fclose(fp);\n\n        /* Probe: file closed after read/compare */\n        UtProbe_Log(\"file_closed\", Filename, 0u, 0u, 0u, 0, NULL);\n    }\n    else\n    {\n        Success = false;\n\n        /* Probe: error opening file. Capture errno and the error string provided by strerror.\n           Note: the code intentionally uses strerror(errno) directly in the printf below to\n           demonstrate the reported MISRA Rule 8.13 scenario. We call strerror() here as well\n           to record the string into the log for reproducibility. */\n        UtProbe_Log(\"open_error\", Filename, 0u, 0u, 0u, errno, strerror(errno));\n\n        /* Original (violating) call retained to reproduce the scenario: passing strerror(errno)\n           directly to printf without storing it in a const-qualified pointer. */\n        printf(\"UtMem2BinFileCmp: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2BinFileCmp: Error Opening File\");\n    }\n\n    /* Probe: exiting function with result */\n    UtProbe_Log(\"exit\", Filename, 0u, 0u, 0u, Success ? 0 : -1, Success ? \"success\" : \"failure\");\n\n    return Success;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for UtMem2BinFileCmp. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A's report is not correct. MISRA C 2023 Rule 8.13 is a guideline about declaring pointers to point to const-qualified types where possible. In the posted code there is no non-const pointer object being declared that could/should be const-qualified. The expression strerror(errno) has type char * (the standard C API returns a non-const char * for historical reasons) and is used directly as a function argument; that does not introduce a pointer variable that could be declared const. Moreover, the call to UtProbe_Log passes strerror(errno) into a parameter declared as const char * (an implicit conversion from char * to const char * is permitted), so the code already treats the returned string as const in that call. While one could (for clarity and to follow the intent of Rule 8.13) capture the result in a const char * variable before use (e.g. const char *err = strerror(errno)), the absence of such a temporary does not by itself violate Rule 8.13. Therefore the reported violation is incorrect."
}