{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nextern void UtAssert_True(bool condition, const char *Message);\nstatic void UtProbeLog(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *lf = fopen(\"/tmp/logs/2636.txt\", \"a\");\n    if (lf == NULL)\n    {\n        /* If logging file can't be opened, fallback to stderr to avoid losing evidence. */\n        va_start(ap, fmt);\n        vfprintf(stderr, fmt, ap);\n        va_end(ap);\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(lf, fmt, ap);\n    va_end(ap);\n    fclose(lf);\n}\nstatic int UtLogFgetc(FILE *fp)\n{\n    int c = fgetc(fp);\n    UtProbeLog(\"UtLogFgetc: fgetc(fp) -> %d (0x%X)\\n\", c, (unsigned int)c);\n    return c;\n}\n\nbool UtMem2BinFileCmp(const void *Memory, const char *Filename)\n{\n    FILE *fp;\n    const unsigned char *MemByte = (const unsigned char *)Memory;\n    int FileByte;\n    bool Success;\n    unsigned long i;\n\n    UtProbeLog(\"Enter UtMem2BinFileCmp: Filename=%s Memory=%p\\n\", Filename, Memory);\n\n    Success = true;\n    if ((fp = fopen(Filename, \"r\")))\n    {\n        UtProbeLog(\"Opened file '%s' successfully (fp=%p)\\n\", Filename, (void *)fp);\n\n        /*\n         * Note: the second clause intentionally calls UtLogFgetc and assigns into FileByte\n         * to reproduce the scenario where the second clause has persistent side effects.\n         */\n        for (i = 0; (FileByte = UtLogFgetc(fp)) != EOF; i++)\n        {\n            UtProbeLog(\"Loop enter: i=%lu FileByte=%d MemByte[i]=%u\\n\", i, FileByte, (unsigned int)MemByte[i]);\n\n            if (MemByte[i] != (unsigned char)FileByte)\n            {\n                Success = false;\n\n                /* Log the miscompare to the probe log as evidence. */\n                UtProbeLog(\"Mismatch: file=%s offset=%lu expected=%u found=%u\\n\",\n                           Filename, i, (unsigned int)MemByte[i], (unsigned int)FileByte);\n\n                /* Preserve original behavior: print to stdout and break. */\n                printf(\"UtMem2BinFileCmp: Miscompare in file: %s, byte offset: %lu, expected: %u, found: %u\\n\",\n                       Filename, (unsigned long)i, (unsigned int)MemByte[i], (unsigned int)FileByte);\n\n                UtProbeLog(\"Breaking out of loop at i=%lu due to mismatch\\n\", i);\n                break;\n            }\n\n            UtProbeLog(\"Loop exit/iteration end: i=%lu\\n\", i);\n        }\n\n        /* After loop, log the final FileByte and loop index to capture the final evaluation (including EOF). */\n        UtProbeLog(\"After loop: final FileByte=%d i=%lu Success=%d\\n\", FileByte, i, Success ? 1 : 0);\n\n        fclose(fp);\n        UtProbeLog(\"Closed file '%s' (fp=%p)\\n\", Filename, (void *)fp);\n    }\n    else\n    {\n        Success = false;\n        UtProbeLog(\"Error Opening File: %s errno=%d (%s)\\n\", Filename, errno, strerror(errno));\n        printf(\"UtMem2BinFileCmp: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2BinFileCmp: Error Opening File\");\n    }\n\n    UtProbeLog(\"Exit UtMem2BinFileCmp: Filename=%s Success=%d\\n\", Filename, Success ? 1 : 0);\n    return Success;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmpvecdayny/src/ut_assert/src/uttools.c:46:\n/tmp/tmpvecdayny/src/ut_assert/inc/utassert.h:158:63: error: expected declaration specifiers or '...' before 'UtAssert_GetContext'\n  158 | #define UtAssert_True(Expression, ...) UtAssertEx(Expression, UtAssert_GetContext(), __FILE__, __LINE__, __VA_ARGS__)\n      |                                                               ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvecdayny/src/ut_assert/src/uttools.c:235:13: note: in expansion of macro 'UtAssert_True'\n  235 | extern void UtAssert_True(bool condition, const char *Message);\n      |             ^~~~~~~~~~~~~\n/tmp/tmpvecdayny/src/ut_assert/inc/utassert.h:158:86: error: expected declaration specifiers or '...' before string constant\n  158 | #define UtAssert_True(Expression, ...) UtAssertEx(Expression, UtAssert_GetContext(), __FILE__, __LINE__, __VA_ARGS__)\n      |                                                                                      ^~~~~~~~\n/tmp/tmpvecdayny/src/ut_assert/src/uttools.c:235:13: note: in expansion of macro 'UtAssert_True'\n  235 | extern void UtAssert_True(bool condition, const char *Message);\n      |             ^~~~~~~~~~~~~\n/tmp/tmpvecdayny/src/ut_assert/inc/utassert.h:158:96: error: expected declaration specifiers or '...' before numeric constant\n  158 | #define UtAssert_True(Expression, ...) UtAssertEx(Expression, UtAssert_GetContext(), __FILE__, __LINE__, __VA_ARGS__)\n      |                                                                                                ^~~~~~~~\n/tmp/tmpvecdayny/src/ut_assert/src/uttools.c:235:13: note: in expansion of macro 'UtAssert_True'\n  235 | extern void UtAssert_True(bool condition, const char *Message);\n      |             ^~~~~~~~~~~~~\ngmake[2]: *** [ut_assert/CMakeFiles/ut_assert.dir/build.make:132: ut_assert/CMakeFiles/ut_assert.dir/src/uttools.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:788: ut_assert/CMakeFiles/ut_assert.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of UtMem2BinFileCmp as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <errno.h>\n#include <string.h>\n\n/* Include the utassert header so the UtAssert_True macro (and related symbols)\n * are available. Do NOT declare an extern for UtAssert_True here because it is\n * a macro in that header and an explicit declaration would expand the macro\n * and break compilation. */\n#include \"utassert.h\"\n\nstatic void UtProbeLog(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *lf = fopen(\"/tmp/logs/2636.txt\", \"a\");\n    if (lf == NULL)\n    {\n        /* If logging file can't be opened, fallback to stderr to avoid losing evidence. */\n        va_start(ap, fmt);\n        vfprintf(stderr, fmt, ap);\n        va_end(ap);\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(lf, fmt, ap);\n    va_end(ap);\n    fclose(lf);\n}\n\nstatic int UtLogFgetc(FILE *fp)\n{\n    int c = fgetc(fp);\n    UtProbeLog(\"UtLogFgetc: fgetc(fp) -> %d (0x%X)\\n\", c, (unsigned int)c);\n    return c;\n}\n\nbool UtMem2BinFileCmp(const void *Memory, const char *Filename)\n{\n    FILE *fp;\n    const unsigned char *MemByte = (const unsigned char *)Memory;\n    int FileByte;\n    bool Success;\n    unsigned long i;\n\n    UtProbeLog(\"Enter UtMem2BinFileCmp: Filename=%s Memory=%p\\n\", Filename, Memory);\n\n    Success = true;\n    if ((fp = fopen(Filename, \"r\")))\n    {\n        UtProbeLog(\"Opened file '%s' successfully (fp=%p)\\n\", Filename, (void *)fp);\n\n        /*\n         * Note: the second clause intentionally calls UtLogFgetc and assigns into FileByte\n         * to reproduce the scenario where the second clause has persistent side effects.\n         */\n        for (i = 0; (FileByte = UtLogFgetc(fp)) != EOF; i++)\n        {\n            UtProbeLog(\"Loop enter: i=%lu FileByte=%d MemByte[i]=%u\\n\", i, FileByte, (unsigned int)MemByte[i]);\n\n            if (MemByte[i] != (unsigned char)FileByte)\n            {\n                Success = false;\n\n                /* Log the miscompare to the probe log as evidence. */\n                UtProbeLog(\"Mismatch: file=%s offset=%lu expected=%u found=%u\\n\",\n                           Filename, i, (unsigned int)MemByte[i], (unsigned int)FileByte);\n\n                /* Preserve original behavior: print to stdout and break. */\n                printf(\"UtMem2BinFileCmp: Miscompare in file: %s, byte offset: %lu, expected: %u, found: %u\\n\",\n                       Filename, (unsigned long)i, (unsigned int)MemByte[i], (unsigned int)FileByte);\n\n                UtProbeLog(\"Breaking out of loop at i=%lu due to mismatch\\n\", i);\n                break;\n            }\n\n            UtProbeLog(\"Loop exit/iteration end: i=%lu\\n\", i);\n        }\n\n        /* After loop, log the final FileByte and loop index to capture the final evaluation (including EOF). */\n        UtProbeLog(\"After loop: final FileByte=%d i=%lu Success=%d\\n\", FileByte, i, Success ? 1 : 0);\n\n        fclose(fp);\n        UtProbeLog(\"Closed file '%s' (fp=%p)\\n\", Filename, (void *)fp);\n    }\n    else\n    {\n        Success = false;\n        UtProbeLog(\"Error Opening File: %s errno=%d (%s)\\n\", Filename, errno, strerror(errno));\n        printf(\"UtMem2BinFileCmp: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2BinFileCmp: Error Opening File\");\n    }\n\n    UtProbeLog(\"Exit UtMem2BinFileCmp: Filename=%s Success=%d\\n\", Filename, Success ? 1 : 0);\n    return Success;\n}\n",
  "explanation": "The build error was caused by an explicit extern declaration for UtAssert_True, but UtAssert_True is actually a macro (defined in utassert.h). Declaring it as a function caused the preprocessor to expand the macro in an invalid context. I removed that extern declaration and ensured the necessary headers are included (stdio.h, stdarg.h, stdbool.h, errno.h, string.h) and included \"utassert.h\" so the UtAssert_True macro is available. No other logic was changed."
}