{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for-loop second clause '(FileByte = fgetc(fp)) != EOF' performs an assignment and a function call with persistent side effects and does not use the loop counter. This violates MISRA C 2023 Rule 14.2 (clause 2): the second clause must have no persistent side effects and should use the loop counter (or an optional loop-control flag) only. The assignment to FileByte and the call to fgetc(fp) therefore make the for loop not well-formed under Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtMem2BinFileCmp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2636.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtMem2BinFileCmp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtMem2BinFileCmp:\n```c\nbool UtMem2BinFileCmp(const void *Memory, const char *Filename)\n{\n    FILE *       fp;\n    const uint8 *MemByte = Memory;\n    int          FileByte;\n    bool         Success;\n    uint32       i;\n\n    Success = true;\n    if ((fp = fopen(Filename, \"r\")))\n    {\n        for (i = 0; (FileByte = fgetc(fp)) != EOF; i++)\n        {\n            if (MemByte[i] != FileByte)\n            {\n                Success = false;\n                printf(\"UtMem2BinFileCmp: Miscompare in file: %s, byte offset: %lu, expected: %u, found: %u\\n\",\n                       Filename, (unsigned long)i, (unsigned int)MemByte[i], (unsigned int)FileByte);\n                break;\n            }\n        }\n        fclose(fp);\n    }\n    else\n    {\n        Success = false;\n        printf(\"UtMem2BinFileCmp: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2BinFileCmp: Error Opening File\");\n    }\n\n    return Success;\n}\n```\n</target_code>\nPlease provide the modified UtMem2BinFileCmp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <string.h>\n#include <errno.h>\n#include <stdarg.h>\n\n/* Forward declaration of external test assertion used by original code. */\nextern void UtAssert_True(bool condition, const char *Message);\n\n/* Probe logging helper that appends control-flow/state info to the log file. */\nstatic void UtProbeLog(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *lf = fopen(\"/tmp/logs/2636.txt\", \"a\");\n    if (lf == NULL)\n    {\n        /* If logging file can't be opened, fallback to stderr to avoid losing evidence. */\n        va_start(ap, fmt);\n        vfprintf(stderr, fmt, ap);\n        va_end(ap);\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(lf, fmt, ap);\n    va_end(ap);\n    fclose(lf);\n}\n\n/* Wrapper for fgetc that logs every call and its returned value. */\nstatic int UtLogFgetc(FILE *fp)\n{\n    int c = fgetc(fp);\n    UtProbeLog(\"UtLogFgetc: fgetc(fp) -> %d (0x%X)\\n\", c, (unsigned int)c);\n    return c;\n}\n\nbool UtMem2BinFileCmp(const void *Memory, const char *Filename)\n{\n    FILE *fp;\n    const unsigned char *MemByte = (const unsigned char *)Memory;\n    int FileByte;\n    bool Success;\n    unsigned long i;\n\n    UtProbeLog(\"Enter UtMem2BinFileCmp: Filename=%s Memory=%p\\n\", Filename, Memory);\n\n    Success = true;\n    if ((fp = fopen(Filename, \"r\")))\n    {\n        UtProbeLog(\"Opened file '%s' successfully (fp=%p)\\n\", Filename, (void *)fp);\n\n        /*\n         * Note: the second clause intentionally calls UtLogFgetc and assigns into FileByte\n         * to reproduce the scenario where the second clause has persistent side effects.\n         */\n        for (i = 0; (FileByte = UtLogFgetc(fp)) != EOF; i++)\n        {\n            UtProbeLog(\"Loop enter: i=%lu FileByte=%d MemByte[i]=%u\\n\", i, FileByte, (unsigned int)MemByte[i]);\n\n            if (MemByte[i] != (unsigned char)FileByte)\n            {\n                Success = false;\n\n                /* Log the miscompare to the probe log as evidence. */\n                UtProbeLog(\"Mismatch: file=%s offset=%lu expected=%u found=%u\\n\",\n                           Filename, i, (unsigned int)MemByte[i], (unsigned int)FileByte);\n\n                /* Preserve original behavior: print to stdout and break. */\n                printf(\"UtMem2BinFileCmp: Miscompare in file: %s, byte offset: %lu, expected: %u, found: %u\\n\",\n                       Filename, (unsigned long)i, (unsigned int)MemByte[i], (unsigned int)FileByte);\n\n                UtProbeLog(\"Breaking out of loop at i=%lu due to mismatch\\n\", i);\n                break;\n            }\n\n            UtProbeLog(\"Loop exit/iteration end: i=%lu\\n\", i);\n        }\n\n        /* After loop, log the final FileByte and loop index to capture the final evaluation (including EOF). */\n        UtProbeLog(\"After loop: final FileByte=%d i=%lu Success=%d\\n\", FileByte, i, Success ? 1 : 0);\n\n        fclose(fp);\n        UtProbeLog(\"Closed file '%s' (fp=%p)\\n\", Filename, (void *)fp);\n    }\n    else\n    {\n        Success = false;\n        UtProbeLog(\"Error Opening File: %s errno=%d (%s)\\n\", Filename, errno, strerror(errno));\n        printf(\"UtMem2BinFileCmp: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2BinFileCmp: Error Opening File\");\n    }\n\n    UtProbeLog(\"Exit UtMem2BinFileCmp: Filename=%s Success=%d\\n\", Filename, Success ? 1 : 0);\n    return Success;\n}\n"
}