{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the for-loop\u2019s second clause ((FileByte = fgetc(fp)) != EOF) has a persistent side effect (the call to fgetc and the assignment to FileByte). Rule 14.2 requires the second clause to have no persistent side effects and to use only the loop counter and optional loop-control flags; using a function call that modifies the stream and performing an assignment in the condition breaches that requirement.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtMem2BinFileCmp code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2636.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtMem2BinFileCmp as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtMem2BinFileCmp:\n```c\nbool UtMem2BinFileCmp(const void *Memory, const char *Filename)\n{\n    FILE *       fp;\n    const uint8 *MemByte = Memory;\n    int          FileByte;\n    bool         Success;\n    uint32       i;\n\n    Success = true;\n    if ((fp = fopen(Filename, \"r\")))\n    {\n        for (i = 0; (FileByte = fgetc(fp)) != EOF; i++)\n        {\n            if (MemByte[i] != FileByte)\n            {\n                Success = false;\n                printf(\"UtMem2BinFileCmp: Miscompare in file: %s, byte offset: %lu, expected: %u, found: %u\\n\",\n                       Filename, (unsigned long)i, (unsigned int)MemByte[i], (unsigned int)FileByte);\n                break;\n            }\n        }\n        fclose(fp);\n    }\n    else\n    {\n        Success = false;\n        printf(\"UtMem2BinFileCmp: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2BinFileCmp: Error Opening File\");\n    }\n\n    return Success;\n}\n```\n</target_code>\nPlease provide the modified UtMem2BinFileCmp code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n/*\n * Logging probes added to capture control flow and state for the for-loop\n * condition that calls fgetc() and assigns to FileByte. Logs are appended\n * to /tmp/logs/2636.txt so other agents can reproduce and gather evidence\n * of the side-effect in the second clause of the for statement.\n */\n\nstatic void LogPrintf(const char *fmt, ...)\n{\n    FILE *lf = fopen(\"/tmp/logs/2636.txt\", \"a\");\n    if (!lf)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(lf, fmt, ap);\n    va_end(ap);\n    fprintf(lf, \"\\n\");\n    fclose(lf);\n}\n\nbool UtMem2BinFileCmp(const void *Memory, const char *Filename)\n{\n    FILE *       fp;\n    const uint8 *MemByte = Memory;\n    int          FileByte;\n    bool         Success;\n    uint32       i;\n    bool         loop_broken = false; /* probe: indicate if loop terminated via break */\n\n    /* Log entry and inputs */\n    LogPrintf(\"UtMem2BinFileCmp: ENTRY - Memory=%p, Filename=%s\", Memory, Filename ? Filename : \"(null)\");\n\n    Success = true;\n    if ((fp = fopen(Filename, \"r\")))\n    {\n        LogPrintf(\"UtMem2BinFileCmp: fopen succeeded, fp=%p\", (void *)fp);\n\n        /* Note: keep the original for-loop structure. The second clause has a call\n         * to fgetc() with an assignment to FileByte. This logging will record the\n         * FileByte value at each iteration to demonstrate the persistent side-effect. */\n        for (i = 0; (FileByte = fgetc(fp)) != EOF; i++)\n        {\n            /* Log after the condition expression has been evaluated (FileByte assigned). */\n            LogPrintf(\"UtMem2BinFileCmp: loop iter start - i=%lu, FileByte=%d\", (unsigned long)i, FileByte);\n\n            if (MemByte[i] != FileByte)\n            {\n                Success = false;\n                LogPrintf(\"UtMem2BinFileCmp: miscompare detected - i=%lu, MemByte=%u, FileByte=%u\", (unsigned long)i, (unsigned int)MemByte[i], (unsigned int)FileByte);\n                printf(\"UtMem2BinFileCmp: Miscompare in file: %s, byte offset: %lu, expected: %u, found: %u\\n\",\n                       Filename, (unsigned long)i, (unsigned int)MemByte[i], (unsigned int)FileByte);\n                loop_broken = true;\n                break;\n            }\n\n            /* Log progress occasionally (every iteration here) - preserves original behavior. */\n            LogPrintf(\"UtMem2BinFileCmp: loop iter ok - i=%lu\", (unsigned long)i);\n        }\n\n        /* Determine why loop terminated and log the reason. */\n        if (loop_broken)\n        {\n            LogPrintf(\"UtMem2BinFileCmp: loop terminated via break due to miscompare\");\n        }\n        else if (feof(fp))\n        {\n            LogPrintf(\"UtMem2BinFileCmp: loop terminated due to EOF\");\n        }\n        else if (ferror(fp))\n        {\n            LogPrintf(\"UtMem2BinFileCmp: loop terminated due to FILE error (ferror)\");\n        }\n        else\n        {\n            LogPrintf(\"UtMem2BinFileCmp: loop terminated - unknown reason\");\n        }\n\n        /* Close file and log fclose result */\n        {\n            int clo = fclose(fp);\n            LogPrintf(\"UtMem2BinFileCmp: fclose returned %d\", clo);\n        }\n    }\n    else\n    {\n        Success = false;\n        LogPrintf(\"UtMem2BinFileCmp: fopen failed for %s - errno=%d (%s)\", Filename ? Filename : \"(null)\", errno, strerror(errno));\n        printf(\"UtMem2BinFileCmp: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2BinFileCmp: Error Opening File\");\n    }\n\n    LogPrintf(\"UtMem2BinFileCmp: EXIT - Success=%d\", Success ? 1 : 0);\n    return Success;\n}\n"
}