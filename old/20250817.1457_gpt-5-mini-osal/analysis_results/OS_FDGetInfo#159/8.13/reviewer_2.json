{
  "user_message": "An agent A claimed that the following OS_FDGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_FDGetInfo.\n```c\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n        }\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local variable 'record' is declared as OS_common_record_t * (non-const) but is only used for reading (record->name_entry, record->creator). The OS_OBJECT_TABLE_GET macro yields a non-const OS_common_record_t * because OS_global_stream_table is declared as OS_common_record_t *const (const pointer to mutable data). Since the function does not modify the pointed-to record, the pointer could and should be const-qualified (e.g. const OS_common_record_t *record, and ideally OS_global_stream_table declared as const OS_common_record_t *const). Therefore this usage violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1275.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not affect original logic */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Log entry and input parameter */\n    probe_log(\"OS_FDGetInfo ENTRY: filedes=%ld\", (long)filedes);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    probe_log(\"OS_FDGetInfo: OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        probe_log(\"OS_FDGetInfo: record pointer=%p\", (void *)record);\n\n        if (record != NULL)\n        {\n            probe_log(\"OS_FDGetInfo: record->name_entry ptr=%p\", (void *)record->name_entry);\n            if (record->name_entry != NULL)\n            {\n                /* Log the name string safely (may be long) */\n                probe_log(\"OS_FDGetInfo: record->name_entry = '%s'\", record->name_entry);\n            }\n            probe_log(\"OS_FDGetInfo: record->creator = %ld\", (long)record->creator);\n        }\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n            /* Ensure null termination as original code intends */\n            fd_prop->Path[sizeof(fd_prop->Path) - 1] = '\\0';\n            probe_log(\"OS_FDGetInfo: copied Path='%s'\", fd_prop->Path);\n        }\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        probe_log(\"OS_FDGetInfo: fd_prop->User=%ld, fd_prop->IsValid=%d\", (long)fd_prop->User, (int)fd_prop->IsValid);\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"OS_FDGetInfo: token released\");\n    }\n    else\n    {\n        probe_log(\"OS_FDGetInfo: skipping record access due to return_code=%ld\", (long)return_code);\n    }\n\n    probe_log(\"OS_FDGetInfo EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_FDGetInfo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The agent's report is correct. In OS_FDGetInfo the local variable record is declared as OS_common_record_t * but is only dereferenced for read-only access (reading name_entry and creator). According to MISRA C:2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible. There is no observable write to *record in this function, and assigning the macro result (a non-const pointer) to a pointer-to-const is permitted, so it is feasible to change the declaration to const OS_common_record_t *record (and similarly consider making the global table const-qualified if the table is not intended to be modified). Therefore the code, as written, does not follow the Rule 8.13 recommendation and the agent\u2019s claim of a violation is valid."
}