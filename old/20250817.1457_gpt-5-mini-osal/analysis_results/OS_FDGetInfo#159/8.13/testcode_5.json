{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' is declared as a mutable pointer: 'OS_common_record_t *record;'. In the function it is only used for read access (reading name_entry and creator) and never modified, so it could/should be declared as a pointer to const: 'const OS_common_record_t *record;'. Therefore the code fails to qualify the pointee as const where possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FDGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1275.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FDGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FDGetInfo:\n```c\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n        }\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FDGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n#include <time.h>\n\n/* Probe logging helper\n * Appends logs to /tmp/logs/1275.txt to capture the control flow and state\n * related to OS_FDGetInfo. The function is kept static to avoid external linkage.\n */\nstatic void OS_1275_Log(const char *stage, osal_id_t filedes, OS_common_record_t *record,\n                        OS_object_token_t *token, int32 return_code, const OS_file_prop_t *fd_prop)\n{\n    FILE *f = fopen(\"/tmp/logs/1275.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp for easier correlation */\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] %s: filedes=%lu, return_code=%ld, fd_prop=%p, token=%p\\n\",\n            (long)t, stage, (unsigned long)filedes, (long)return_code, (const void *)fd_prop, (void *)token);\n\n    if (record == NULL)\n    {\n        fprintf(f, \"  record = NULL\\n\");\n    }\n    else\n    {\n        /* Log pointer and the fields that are read in the function */\n        fprintf(f, \"  record=%p\\n\", (void *)record);\n        if (record->name_entry != NULL)\n        {\n            /* name_entry is expected to be a NUL-terminated string */\n            fprintf(f, \"  record->name_entry = '%s'\\n\", record->name_entry);\n        }\n        else\n        {\n            fprintf(f, \"  record->name_entry = (NULL)\\n\");\n        }\n\n        fprintf(f, \"  record->creator = %lu\\n\", (unsigned long)record->creator);\n    }\n\n    if (fd_prop != NULL)\n    {\n        /* Log the fields that the function sets/reads */\n        fprintf(f, \"  fd_prop pointer = %p\\n\", (const void *)fd_prop);\n        fprintf(f, \"  fd_prop->Path = '%s'\\n\", fd_prop->Path);\n        fprintf(f, \"  fd_prop->User = %lu\\n\", (unsigned long)fd_prop->User);\n        fprintf(f, \"  fd_prop->IsValid = %d\\n\", fd_prop->IsValid ? 1 : 0);\n    }\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    /* Log entry state: fd_prop pointer and filedes */\n    OS_1275_Log(\"ENTRY_BEFORE_MEMSET\", filedes, NULL, NULL, 0, fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n\n    /* Log after attempting to get object id */\n    OS_1275_Log(\"AFTER_ObjectIdGetById\", filedes, NULL, &token, return_code, fd_prop);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        /* Log record pointer and its readable fields before use */\n        OS_1275_Log(\"BEFORE_READ_RECORD\", filedes, record, &token, return_code, fd_prop);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n        }\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        /* Log after populating fd_prop */\n        OS_1275_Log(\"AFTER_POPULATE_FDPROP\", filedes, record, &token, return_code, fd_prop);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing token */\n        OS_1275_Log(\"AFTER_RELEASE\", filedes, record, &token, return_code, fd_prop);\n    }\n\n    /* Final exit log */\n    OS_1275_Log(\"EXIT\", filedes, NULL, NULL, return_code, fd_prop);\n\n    return return_code;\n}\n"
}