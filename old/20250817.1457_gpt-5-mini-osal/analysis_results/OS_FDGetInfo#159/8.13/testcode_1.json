{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code reads from record->name_entry and never modifies it (used as the source argument to strncpy). If the OS_common_record_t field is declared as char *name_entry (non-const), this is a violation of MISRA C 2023 Rule 8.13 because the pointer should be to a const-qualified type (const char *) when only read. To resolve, declare name_entry as const char *name_entry in OS_common_record_t. (If name_entry is intentionally mutable and must be modified elsewhere, then no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FDGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1275.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FDGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FDGetInfo:\n```c\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n        }\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FDGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe helper: append diagnostic logs to /tmp/logs/1275.txt */\nstatic void OS_FDGetInfo_LogProbe(const char *stage, osal_id_t filedes, OS_object_token_t *token,\n                                  OS_common_record_t *record, OS_file_prop_t *fd_prop, int32 return_code)\n{\n    FILE *fp = fopen(\"/tmp/logs/1275.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* If logging fails, do not alter behavior */\n    }\n\n    fprintf(fp, \"[OS_FDGetInfo] stage=%s filedes=%ld return_code=%ld token=%p record=%p\\n\",\n            stage, (long)filedes, (long)return_code, (void *)token, (void *)record);\n\n    if (record != NULL)\n    {\n        /* Log pointers and readable fields safely */\n        fprintf(fp, \"  record->name_entry_ptr=%p\\n\", (void *)record->name_entry);\n        if (record->name_entry != NULL)\n        {\n            /* Print up to 200 chars of the name entry to avoid huge logs */\n            fprintf(fp, \"  record->name_entry_str=\\\"\");\n            fprintf(fp, \"%.200s\", (const char *)record->name_entry);\n            fprintf(fp, \"\\\"\\n\");\n        }\n        fprintf(fp, \"  record->creator=%llu\\n\", (unsigned long long)record->creator);\n    }\n\n    if (fd_prop != NULL)\n    {\n        /* Path is NUL-terminated (memset earlier). Print a safe amount. */\n        fprintf(fp, \"  fd_prop->Path=\\\"\");\n        fprintf(fp, \"%.255s\", (const char *)fd_prop->Path);\n        fprintf(fp, \"\\\" fd_prop->User=%llu fd_prop->IsValid=%d\\n\",\n                (unsigned long long)fd_prop->User,\n                (int)(fd_prop->IsValid ? 1 : 0));\n    }\n\n    fclose(fp);\n}\n\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Log initial entry state */\n    OS_FDGetInfo_LogProbe(\"entry_after_memset\", filedes, &token, NULL, fd_prop, -1);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_FDGetInfo_LogProbe(\"after_ObjectIdGetById\", filedes, &token, NULL, fd_prop, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        /* Log what record and name_entry point to before any copy */\n        OS_FDGetInfo_LogProbe(\"before_copy\", filedes, &token, record, fd_prop, return_code);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n        }\n        else\n        {\n            /* Log explicit NULL name_entry case */\n            OS_FDGetInfo_LogProbe(\"name_entry_null\", filedes, &token, record, fd_prop, return_code);\n        }\n\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        /* Log final populated state before releasing token */\n        OS_FDGetInfo_LogProbe(\"before_release\", filedes, &token, record, fd_prop, return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing token (final exit for success) */\n        OS_FDGetInfo_LogProbe(\"exit_success\", filedes, &token, record, fd_prop, return_code);\n    }\n    else\n    {\n        /* Log failure path */\n        OS_FDGetInfo_LogProbe(\"exit_failure\", filedes, &token, NULL, fd_prop, return_code);\n    }\n\n    return return_code;\n}\n"
}