{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' is declared as OS_common_record_t * (non-const) but is only used for reading (record->name_entry, record->creator). The OS_OBJECT_TABLE_GET macro yields a non-const OS_common_record_t * because OS_global_stream_table is declared as OS_common_record_t *const (const pointer to mutable data). Since the function does not modify the pointed-to record, the pointer could and should be const-qualified (e.g. const OS_common_record_t *record, and ideally OS_global_stream_table declared as const OS_common_record_t *const). Therefore this usage violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FDGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1275.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FDGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FDGetInfo:\n```c\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n        }\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FDGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper - appends human-readable trace info to /tmp/logs/1275.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1275.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not affect original logic */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_FDGetInfo(osal_id_t filedes, OS_file_prop_t *fd_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(fd_prop);\n\n    memset(fd_prop, 0, sizeof(OS_file_prop_t));\n\n    /* Log entry and input parameter */\n    probe_log(\"OS_FDGetInfo ENTRY: filedes=%ld\", (long)filedes);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, filedes, &token);\n    probe_log(\"OS_FDGetInfo: OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n        probe_log(\"OS_FDGetInfo: record pointer=%p\", (void *)record);\n\n        if (record != NULL)\n        {\n            probe_log(\"OS_FDGetInfo: record->name_entry ptr=%p\", (void *)record->name_entry);\n            if (record->name_entry != NULL)\n            {\n                /* Log the name string safely (may be long) */\n                probe_log(\"OS_FDGetInfo: record->name_entry = '%s'\", record->name_entry);\n            }\n            probe_log(\"OS_FDGetInfo: record->creator = %ld\", (long)record->creator);\n        }\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(fd_prop->Path, record->name_entry, sizeof(fd_prop->Path) - 1);\n            /* Ensure null termination as original code intends */\n            fd_prop->Path[sizeof(fd_prop->Path) - 1] = '\\0';\n            probe_log(\"OS_FDGetInfo: copied Path='%s'\", fd_prop->Path);\n        }\n        fd_prop->User    = record->creator;\n        fd_prop->IsValid = true;\n\n        probe_log(\"OS_FDGetInfo: fd_prop->User=%ld, fd_prop->IsValid=%d\", (long)fd_prop->User, (int)fd_prop->IsValid);\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"OS_FDGetInfo: token released\");\n    }\n    else\n    {\n        probe_log(\"OS_FDGetInfo: skipping record access due to return_code=%ld\", (long)return_code);\n    }\n\n    probe_log(\"OS_FDGetInfo EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}