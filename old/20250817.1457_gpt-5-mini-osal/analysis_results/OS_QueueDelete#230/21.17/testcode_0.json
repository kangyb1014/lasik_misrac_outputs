{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(token, 0, sizeof(*token)) can write sizeof(*token) bytes starting at the address in token without any prior NULL/valid-pointer check. If OS_ObjectIdTransactionInit is ever called with token == NULL (or with an invalid/too-small object), this will attempt to write through a NULL/invalid pointer and thus access memory beyond the bounds of the referenced object (e.g. calling OS_ObjectIdTransactionInit(..., NULL) or passing an invalid pointer).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1847.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueDelete:\n```c\nint32 OS_QueueDelete(osal_id_t queue_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_QueueDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logging helper for reproducing Rule 21.17 scenario.\n * Writes incremental logs to /tmp/logs/1847.txt. Keeps original logic\n * of OS_QueueDelete intact and only adds benign diagnostics.\n */\nstatic void OS_1847_LogState(const char *stage, osal_id_t queue_id, int32 return_code, const OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/1847.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Can't log, but do not alter program control flow */\n    }\n\n    /* Print a short record: stage, queue id, return code, token pointer */\n    /* Casts to unsigned long long / long are used to avoid format warnings for unknown typedefs */\n    (void)fprintf(f, \"[OS_QueueDelete] stage=%s queue_id=%llu return=%ld token_ptr=%p\\n\",\n                  stage,\n                  (unsigned long long) (uintptr_t) queue_id,\n                  (long) return_code,\n                  (const void *) token);\n\n    /* If token pointer is non-NULL, print a small hex preview of its bytes (up to 32 bytes)\n     * Do not dereference when token is NULL. sizeof(*token) is an unevaluated operand\n     * and is safe even if token is NULL (it depends only on the type), but we still\n     * avoid reading memory unless token is non-NULL.\n     */\n    if (token != NULL)\n    {\n        const unsigned char *bytes = (const unsigned char *) token;\n        size_t total = sizeof(*token);\n        size_t n = (total < 32u) ? total : 32u;\n\n        (void)fprintf(f, \"[OS_QueueDelete] token_preview (%zu bytes):\", n);\n        for (size_t i = 0u; i < n; ++i)\n        {\n            (void)fprintf(f, \" %02X\", (unsigned) bytes[i]);\n        }\n        (void)fprintf(f, \"\\n\");\n    }\n\n    (void)fclose(f);\n}\n\nint32 OS_QueueDelete(osal_id_t queue_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and the address of the token object that will be passed around.\n     * We intentionally do not print token contents here because it may be uninitialized.\n     */\n    OS_1847_LogState(\"ENTRY_PRE_GET\", queue_id, -1, &token);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    /* Log result of the lookup and a preview of token if the lookup succeeded. */\n    OS_1847_LogState(\"POST_GET\", queue_id, return_code, (return_code == OS_SUCCESS) ? &token : NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before calling the implementation to capture pointer and state. */\n        OS_1847_LogState(\"BEFORE_IMPL\", queue_id, return_code, &token);\n\n        return_code = OS_QueueDelete_Impl(&token);\n\n        /* Log result of the implementation call. */\n        OS_1847_LogState(\"AFTER_IMPL\", queue_id, return_code, &token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Final log after finalize delete. */\n        OS_1847_LogState(\"AFTER_FINALIZE\", queue_id, return_code, &token);\n    }\n\n    return return_code;\n}\n"
}