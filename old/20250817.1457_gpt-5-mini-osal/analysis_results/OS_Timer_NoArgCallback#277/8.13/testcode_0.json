{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter is declared as void *arg and Conv.opaque_arg is assigned from it. If the pointed-to object is not intended to be modified by the timer callback (i.e. it is read-only context data), then both the parameter and the wrapper member should be const void * (or otherwise const-qualified). Because the code uses non-const pointers where const could be applied, this is a violation of MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Timer_NoArgCallback code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2219.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Timer_NoArgCallback as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Timer_NoArgCallback:\n```c\nstatic void OS_Timer_NoArgCallback(osal_id_t objid, void *arg)\n{\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n     * Note - did not write this as simply *((OS_SimpleCallback_t)arg) because\n     * technically you cannot cast a void * to a function pointer.\n     */\n    Conv.opaque_arg = arg;\n    (*Conv.timer_callback_func)(objid);\n}\n```\n</target_code>\nPlease provide the modified OS_Timer_NoArgCallback code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Helper probe function to append logs to /tmp/logs/2219.txt */\nstatic void OS_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2219.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fclose(f);\n    }\n}\n\nstatic void OS_Timer_NoArgCallback(osal_id_t objid, void *arg)\n{\n    OS_Timer_ArgWrapper_t Conv;\n\n    /* Log entrance and the raw pointer value received */\n    OS_Log(\"OS_Timer_NoArgCallback entered: objid=%lu, arg=%p\\n\", (unsigned long)objid, arg);\n\n    /* Preserve original assignment semantics while probing the value */\n    Conv.opaque_arg = arg;\n    OS_Log(\"Assigned Conv.opaque_arg = %p\\n\", Conv.opaque_arg);\n\n    /* Log intention to call the stored callback (do not cast function pointer to void*) */\n    OS_Log(\"About to invoke timer callback for objid=%lu\\n\", (unsigned long)objid);\n\n    /* Preserve original behavior: invoke the callback as before */\n    (*Conv.timer_callback_func)(objid);\n\n    OS_Log(\"Returned from timer callback for objid=%lu\\n\", (unsigned long)objid);\n}\n"
}