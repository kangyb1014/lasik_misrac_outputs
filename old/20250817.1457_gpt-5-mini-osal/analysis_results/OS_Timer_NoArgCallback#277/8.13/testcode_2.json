{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'arg' is declared as a non-const pointer (void *arg) but in the shown function it is only stored and forwarded (Conv.opaque_arg = arg) and never modified. According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible (e.g. const void *arg and corresponding const opaque_arg), so the current declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Timer_NoArgCallback code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2219.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Timer_NoArgCallback as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Timer_NoArgCallback:\n```c\nstatic void OS_Timer_NoArgCallback(osal_id_t objid, void *arg)\n{\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n     * Note - did not write this as simply *((OS_SimpleCallback_t)arg) because\n     * technically you cannot cast a void * to a function pointer.\n     */\n    Conv.opaque_arg = arg;\n    (*Conv.timer_callback_func)(objid);\n}\n```\n</target_code>\nPlease provide the modified OS_Timer_NoArgCallback code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/*\n * Probe helper: append simple trace lines to /tmp/logs/2219.txt\n * This preserves the original control flow and does not modify program state.\n */\nstatic void OS_Timer_WriteLog(const char *stage, osal_id_t objid, const void *arg)\n{\n    FILE *f;\n    struct stat st;\n\n    /* Ensure directory exists; ignore errors if it cannot be created. */\n    if (stat(\"/tmp/logs\", &st) != 0)\n    {\n        /* attempt to create the directory; failure is non-fatal for logging */\n        (void)mkdir(\"/tmp/logs\", 0777);\n    }\n\n    f = fopen(\"/tmp/logs/2219.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* objid may be an integer or pointer type; print via uintptr_t for portability */\n        (void)fprintf(f, \"%s: objid=%\" PRIuPTR \", arg=%p\\n\",\n                      stage,\n                      (uintptr_t)objid,\n                      arg);\n        (void)fclose(f);\n    }\n}\n\nstatic void OS_Timer_NoArgCallback(osal_id_t objid, void *arg)\n{\n    OS_Timer_ArgWrapper_t Conv;\n\n    /* Log entry and input state */\n    OS_Timer_WriteLog(\"Enter\", objid, arg);\n\n    /*\n     * Note - did not write this as simply *((OS_SimpleCallback_t)arg) because\n     * technically you cannot cast a void * to a function pointer.\n     */\n    Conv.opaque_arg = arg;\n\n    /* Log the state after forwarding the opaque argument (the suspected violation)\n     * This shows that 'arg' is merely stored and forwarded, not modified. */\n    OS_Timer_WriteLog(\"AfterAssign\", objid, Conv.opaque_arg);\n\n    /* Log just before invoking the callback */\n    OS_Timer_WriteLog(\"BeforeCallback\", objid, Conv.opaque_arg);\n\n    /* Preserve original behavior: invoke the wrapped callback with the object id */\n    (*Conv.timer_callback_func)(objid);\n\n    /* Log after callback returns */\n    OS_Timer_WriteLog(\"AfterCallback\", objid, Conv.opaque_arg);\n}\n"
}