{
  "user_message": "An agent A claimed that the following OS_SocketAddrGetPort_Impl code violates the MISRA C 2023 rule 2.1.\n<misra_rule>\nMISRA C 2023 Rule 2.1 is A project shall not contain unreachable code.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketAddrGetPort_Impl.\n```c\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    *PortNum = ntohs(sa_port);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In the switch default case of OS_SocketAddrGetPort_Impl the statement 'break;' follows 'return OS_ERR_BAD_ADDRESS;'. The 'break;' is unreachable because the return exits the function, which violates MISRA C 2023 Rule 2.1 (unreachable code).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\ntypedef int32_t int32;\ntypedef uint16_t uint16;\nstatic void probe_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f;\n\n    /* Try to create the log directory; ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/833.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port = 0;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    /* Log entry and pointer state */\n    probe_log(\"ENTER: OS_SocketAddrGetPort_Impl Addr=%p PortNum=%p\", (const void *)Addr, (void *)PortNum);\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    /* Log the raw family value before switching */\n    probe_log(\"ADDR family raw value = %d\", (int)Accessor->sa.sa_family);\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            probe_log(\"CASE AF_INET: raw port (network order) = %u\", (unsigned)sa_port);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            probe_log(\"CASE AF_INET6: raw port (network order) = %u\", (unsigned)sa_port);\n            break;\n#endif\n        default:\n            probe_log(\"DEFAULT: unknown family %d -> returning OS_ERR_BAD_ADDRESS\", (int)Accessor->sa.sa_family);\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    /* If we reached this point, log the chosen port and the conversion about to occur */\n    probe_log(\"AF matched: raw sa_port = %u, ntohs(sa_port) = %u\", (unsigned)sa_port, (unsigned)ntohs(sa_port));\n\n    *PortNum = ntohs(sa_port);\n\n    probe_log(\"EXIT: OS_SocketAddrGetPort_Impl returning OS_SUCCESS, PortNum set to %u\", (unsigned)*PortNum);\n\n    return OS_SUCCESS;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_SocketAddrGetPort_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the default branch the code executes 'return OS_ERR_BAD_ADDRESS;' and the subsequent 'break;' can never be reached. MISRA C 2023 Rule 2.1 forbids unreachable code, so the redundant 'break;' after the return constitutes a violation. (The code compiles and may appear harmless, but the unreachable statement still violates the rule. The fix is to remove the 'break;' after the return.)"
}