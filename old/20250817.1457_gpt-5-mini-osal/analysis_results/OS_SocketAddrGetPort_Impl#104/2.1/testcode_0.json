{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn the switch default case of OS_SocketAddrGetPort_Impl the statement 'break;' follows 'return OS_ERR_BAD_ADDRESS;'. The 'break;' is unreachable because the return exits the function, which violates MISRA C 2023 Rule 2.1 (unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrGetPort_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/833.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAddrGetPort_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrGetPort_Impl:\n```c\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    *PortNum = ntohs(sa_port);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAddrGetPort_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <arpa/inet.h>\n#include <netinet/in.h>\n#include <sys/socket.h>\n\n/* Minimal type aliases to match the original environment */\ntypedef int32_t int32;\ntypedef uint16_t uint16;\n\n/* Return codes used by the function */\nenum { OS_SUCCESS = 0, OS_ERR_BAD_ADDRESS = -1 };\n\n/* Minimal accessor and address container types that mirror the original layout. */\ntypedef struct\n{\n    struct sockaddr sa;\n    struct sockaddr_in sa_in;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n    struct sockaddr_in6 sa_in6;\n#endif\n} OS_SockAddr_Accessor_t;\n\ntypedef struct\n{\n    /* Make this big enough to hold the accessor data */\n    unsigned char AddrData[128];\n} OS_SockAddr_t;\n\n/* Helper probe function: append formatted log lines to /tmp/logs/833.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f;\n\n    /* Try to create the log directory; ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/833.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port = 0;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    /* Log entry and pointer state */\n    probe_log(\"ENTER: OS_SocketAddrGetPort_Impl Addr=%p PortNum=%p\", (const void *)Addr, (void *)PortNum);\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    /* Log the raw family value before switching */\n    probe_log(\"ADDR family raw value = %d\", (int)Accessor->sa.sa_family);\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            probe_log(\"CASE AF_INET: raw port (network order) = %u\", (unsigned)sa_port);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            probe_log(\"CASE AF_INET6: raw port (network order) = %u\", (unsigned)sa_port);\n            break;\n#endif\n        default:\n            probe_log(\"DEFAULT: unknown family %d -> returning OS_ERR_BAD_ADDRESS\", (int)Accessor->sa.sa_family);\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    /* If we reached this point, log the chosen port and the conversion about to occur */\n    probe_log(\"AF matched: raw sa_port = %u, ntohs(sa_port) = %u\", (unsigned)sa_port, (unsigned)ntohs(sa_port));\n\n    *PortNum = ntohs(sa_port);\n\n    probe_log(\"EXIT: OS_SocketAddrGetPort_Impl returning OS_SUCCESS, PortNum set to %u\", (unsigned)*PortNum);\n\n    return OS_SUCCESS;\n}\n"
}