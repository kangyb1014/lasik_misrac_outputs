{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe four assignments setting conn_record, sock_record, sock, and conn to NULL at the start of OS_SocketAccept are redundant. Each pointer is assigned a valid value before any use in the normal control flow (assignments occur only when return_code == OS_SUCCESS), and no code relies on them being NULL if the function returns early. Therefore removing these four assignments would not affect program behaviour. They are executed but unnecessary, so this constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrGetPort_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/834.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAddrGetPort_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrGetPort_Impl:\n```c\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    *PortNum = ntohs(sa_port);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAddrGetPort_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <arpa/inet.h>\n\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    /* Open probe log (append) to record control flow and key state. */\n    FILE *probe_log = fopen(\"/tmp/logs/834.txt\", \"a\");\n    if (probe_log != NULL)\n    {\n        fprintf(probe_log, \"OS_SocketAddrGetPort_Impl entry: Addr=%p PortNum=%p\\n\", (void *)Addr, (void *)PortNum);\n    }\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    if (probe_log != NULL)\n    {\n        fprintf(probe_log, \"sa_family=%d\\n\", (int)Accessor->sa.sa_family);\n    }\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            if (probe_log != NULL)\n            {\n                fprintf(probe_log, \"path=AF_INET raw_port=0x%04x (%u)\\n\", (unsigned)sa_port, (unsigned)sa_port);\n            }\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            if (probe_log != NULL)\n            {\n                fprintf(probe_log, \"path=AF_INET6 raw_port=0x%04x (%u)\\n\", (unsigned)sa_port, (unsigned)sa_port);\n            }\n            break;\n#endif\n        default:\n            if (probe_log != NULL)\n            {\n                fprintf(probe_log, \"path=DEFAULT bad_family=%d returning=%d\\n\", (int)Accessor->sa.sa_family, (int)OS_ERR_BAD_ADDRESS);\n                fclose(probe_log);\n            }\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    /* Convert network byte order port to host order and log the result. */\n    *PortNum = ntohs(sa_port);\n\n    if (probe_log != NULL)\n    {\n        fprintf(probe_log, \"converted_port=%u return=%d\\n\", (unsigned)*PortNum, (int)OS_SUCCESS);\n        fclose(probe_log);\n    }\n\n    return OS_SUCCESS;\n}\n"
}