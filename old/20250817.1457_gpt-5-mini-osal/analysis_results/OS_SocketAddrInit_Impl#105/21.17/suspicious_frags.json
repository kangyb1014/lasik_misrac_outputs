{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrInit_Impl:\n```c\nint32 OS_SocketAddrInit_Impl(OS_SockAddr_t *Addr, OS_SocketDomain_t Domain)\n{\n    sa_family_t             sa_family;\n    socklen_t               addrlen;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    memset(Addr, 0, sizeof(OS_SockAddr_t));\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Domain)\n    {\n        case OS_SocketDomain_INET:\n            sa_family = AF_INET;\n            addrlen   = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case OS_SocketDomain_INET6:\n            sa_family = AF_INET6;\n            addrlen   = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            sa_family = 0;\n            addrlen   = 0;\n            break;\n    }\n\n    if (addrlen == 0)\n    {\n        return OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    Addr->ActualLength     = OSAL_SIZE_C(addrlen);\n    Accessor->sa.sa_family = sa_family;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SocketAddrInit_Impl:\ntypedef struct\n{\n    size_t            ActualLength; /**< @brief Length of the actual address data */\n    OS_SockAddrData_t AddrData;     /**< @brief Abstract Address data */\n} OS_SockAddr_t\n...\ntypedef union\n{\n    char               data[OS_SOCKADDR_MAX_LEN];\n    struct sockaddr    sa;\n    struct sockaddr_in sa_in;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n    struct sockaddr_in6 sa_in6;\n#endif\n} OS_SockAddr_Accessor_t\n...\n#define OS_ERR_NOT_IMPLEMENTED (-28)\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "Accessor->sa.sa_family = sa_family;",
    "memset(Addr, 0, sizeof(OS_SockAddr_t));",
    "Addr->ActualLength     = OSAL_SIZE_C(addrlen);",
    "Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;"
  ],
  "explanation": "The MISRA rule targets uses of string.h functions that can access beyond the bounds of the objects referenced by their pointer parameters \u2014 the memset call above is the direct string.h invocation and must be checked to ensure Addr really points to an object at least sizeof(OS_SockAddr_t) bytes long. The cast of Addr->AddrData to OS_SockAddr_Accessor_t and the subsequent write Accessor->sa.sa_family can result in out-of-bounds accesses if Addr->AddrData is smaller than the accessor type or if layout/size assumptions are incorrect; the ActualLength assignment influences the reported usable size and thus is relevant to buffer-size checks. Other lines (the switch, local variable declarations, the addrlen==0 check, returning OS_SUCCESS/OS_ERR_NOT_IMPLEMENTED, and the assignments of local sa_family/addrlen values) do not call string.h functions and do not perform memory writes via pointer parameters that could overflow the referenced objects, so they do not need investigation for this MISRA rule."
}