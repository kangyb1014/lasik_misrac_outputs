{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function UtAssert_Abort() simply forwards to UT_BSP_DoText(UTASSERT_CASETYPE_ABORT, Message) and is invoked (for example) from UT_Stub_RegisterContextWithMetaData when StubPtr == NULL. If UT_BSP_DoText only emits diagnostic text and returns (i.e. it does not terminate, longjmp, change global state relevant to program flow, or otherwise alter control flow or timing), then the call has no effect on program behaviour aside from printed output. In that case the operation is executed but its removal would not affect program behaviour, which meets the definition of dead code in MISRA C 2023 Rule 2.2 \u2014 therefore the rule is violated under that scenario. Note: if UT_BSP_DoText performs non\u2011trivial side effects (terminates the program, longjmps, alters global state that affects execution, etc.), then UtAssert_Abort is not dead and no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ApplicationExit code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1010.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ApplicationExit as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ApplicationExit:\n```c\nvoid OS_ApplicationExit(int32 Status)\n{\n    if (Status == OS_SUCCESS)\n    {\n        exit(EXIT_SUCCESS);\n    }\n    else\n    {\n        exit(EXIT_FAILURE);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_ApplicationExit code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe: log entry, decision and final exit code to help reproduce/control-flow evidence\n   Writes to /tmp/logs/1010.txt. Does not change original exit behavior. */\nvoid OS_ApplicationExit(int32 Status)\n{\n    int exit_code;\n    FILE *log = fopen(\"/tmp/logs/1010.txt\", \"a\");\n\n    /* Preserve original decision logic */\n    if (Status == OS_SUCCESS)\n    {\n        exit_code = EXIT_SUCCESS;\n    }\n    else\n    {\n        exit_code = EXIT_FAILURE;\n    }\n\n    /* Emit probe information if possible, then perform original exit */\n    if (log != NULL)\n    {\n        /* Log the status value and chosen exit code. Cast Status to long for printing portability. */\n        (void)fprintf(log, \"OS_ApplicationExit: entered with Status=%ld, selected exit_code=%d\\n\", (long)Status, exit_code);\n        (void)fflush(log);\n        (void)fclose(log);\n    }\n\n    /* Preserve original behavior: terminate with chosen code */\n    exit(exit_code);\n}\n"
}