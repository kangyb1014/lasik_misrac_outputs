{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts away the const qualifier: 'name' is declared as const char * in OS_ObjectIdGetByName, but it is passed to OS_ObjectIdGetBySearch as (void *)name, discarding the const. The search argument should be a pointer to const (e.g. const void *) or the callee should accept a const-qualified pointer. Casting away const in this way violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1467.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rmfs as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rmfs:\n```c\nint32 OS_rmfs(const char *devname)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(devname);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, devname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * NOTE: It is likely that if the file system is mounted,\n         * this call to stop the volume will fail.\n         *\n         * It would be prudent to first check the flags to ensure that\n         * the filesystem is unmounted first, but this would break\n         * compatibility with the existing unit tests.\n         */\n        return_code = OS_FileSysStopVolume_Impl(&token);\n\n        /* Free the entry in the master table  */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rmfs code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe/logging helper to record the control flow and state to a file\n * Path: /tmp/logs/1467.txt\n * This helper preserves the existing logic and only appends observational logs. */\nstatic void os_rmfs_log(const char *stage, const char *devname, int32 return_code, const OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/1467.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging, do not change program behavior */\n    }\n\n    fprintf(f, \"OS_rmfs: %s\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \"  devname: %s\\n\", devname ? devname : \"(null)\");\n    fprintf(f, \"  return_code (int): %d\\n\", (int)return_code);\n\n    if (token != NULL)\n    {\n        /* Log a small hex dump of the token structure to help correlate the object lookup.\n         * We cast to const unsigned char* so we do not discard const qualifiers. */\n        const unsigned char *bytes = (const unsigned char *)token;\n        size_t tsize = sizeof(*token);\n        size_t i;\n\n        fprintf(f, \"  token_size: %zu\\n\", tsize);\n        fprintf(f, \"  token_bytes: \");\n        for (i = 0; i < tsize && i < 64; ++i)\n        {\n            fprintf(f, \"%02x\", (unsigned int)bytes[i]);\n            if (i + 1 < tsize && i + 1 < 64)\n            {\n                fprintf(f, \" \");\n            }\n        }\n        if (tsize > 64)\n        {\n            fprintf(f, \" ... (truncated)\");\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nint32 OS_rmfs(const char *devname)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(devname);\n\n    /* Log entry and input state */\n    os_rmfs_log(\"ENTER\", devname, -1, NULL);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, devname, &token);\n\n    /* Log result of name lookup */\n    os_rmfs_log(\"After OS_ObjectIdGetByName\", devname, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * NOTE: It is likely that if the file system is mounted,\n         * this call to stop the volume will fail.\n         *\n         * It would be prudent to first check the flags to ensure that\n         * the filesystem is unmounted first, but this would break\n         * compatibility with the existing unit tests.\n         */\n\n        /* Log before attempting to stop the volume */\n        os_rmfs_log(\"Before OS_FileSysStopVolume_Impl\", devname, return_code, &token);\n\n        return_code = OS_FileSysStopVolume_Impl(&token);\n\n        /* Log after stopping the volume */\n        os_rmfs_log(\"After OS_FileSysStopVolume_Impl\", devname, return_code, &token);\n\n        /* Free the entry in the master table  */\n        os_rmfs_log(\"Before OS_ObjectIdFinalizeDelete\", devname, return_code, &token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        os_rmfs_log(\"After OS_ObjectIdFinalizeDelete\", devname, return_code, &token);\n    }\n    else\n    {\n        /* Log not found branch */\n        os_rmfs_log(\"Name not found branch\", devname, return_code, NULL);\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    /* Log exit */\n    os_rmfs_log(\"EXIT\", devname, return_code, &token);\n\n    return return_code;\n}\n"
}