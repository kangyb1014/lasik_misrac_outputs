{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_FileSysStopVolume_Impl is a reachable no-op that is executed but has no observable effect. In OS_rmfs the call return_code = OS_FileSysStopVolume_Impl(&token); always yields OS_SUCCESS (no side-effects) and the subsequent call OS_ObjectIdFinalizeDelete(return_code, &token) will behave identically if the intermediate call were removed (i.e. passing OS_SUCCESS directly). Therefore the operation performed by OS_FileSysStopVolume_Impl (the function body and its call) can be removed without changing program behaviour and thus constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1466.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rmfs as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rmfs:\n```c\nint32 OS_rmfs(const char *devname)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(devname);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, devname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * NOTE: It is likely that if the file system is mounted,\n         * this call to stop the volume will fail.\n         *\n         * It would be prudent to first check the flags to ensure that\n         * the filesystem is unmounted first, but this would break\n         * compatibility with the existing unit tests.\n         */\n        return_code = OS_FileSysStopVolume_Impl(&token);\n\n        /* Free the entry in the master table  */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rmfs code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe/logging helpers for reproducing the reported dead-code scenario.\n * These functions append human-readable state and control-flow information\n * to the file /tmp/logs/1466.txt so other agents can inspect the sequence\n * of calls, return values, and a small hexdump of the token structure.\n *\n * The helpers are static and do not change the behavior of OS_rmfs.\n */\nstatic void probe_write_simple(const char *label, const char *devname, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1466.txt\", \"a\");\n    if (f == NULL) return;\n    fprintf(f, \"%s: devname='%s' return_code=%ld\\n\", label, (devname ? devname : \"(null)\"), (long)return_code);\n    fclose(f);\n}\n\nstatic void probe_write_with_token(const char *label, const char *devname, int32 return_code, const void *token, size_t token_size)\n{\n    FILE *f = fopen(\"/tmp/logs/1466.txt\", \"a\");\n    if (f == NULL) return;\n\n    fprintf(f, \"%s: devname='%s' return_code=%ld token_size=%zu token_bytes=\", label, (devname ? devname : \"(null)\"), (long)return_code, token_size);\n\n    if (token != NULL && token_size > 0)\n    {\n        const unsigned char *p = (const unsigned char *)token;\n        /* Print up to the first 64 bytes to keep the log concise */\n        size_t limit = token_size;\n        if (limit > 64) limit = 64;\n        for (size_t i = 0; i < limit; ++i)\n        {\n            fprintf(f, \"%02x\", p[i]);\n        }\n        if (token_size > 64) fprintf(f, \"...\");\n    }\n    else\n    {\n        fprintf(f, \"(null)\");\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified OS_rmfs with inserted probes. The original logic is preserved;\n * only logging calls are added to capture the control flow and state\n * needed to reproduce the violation scenario reported by the other agent.\n */\nint32 OS_rmfs(const char *devname)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(devname);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, devname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log state after successfully obtaining the object id by name */\n        probe_write_with_token(\"OS_rmfs: after_GetByName\", devname, return_code, &token, sizeof(token));\n\n        /*\n         * NOTE: It is likely that if the file system is mounted,\n         * this call to stop the volume will fail.\n         *\n         * It would be prudent to first check the flags to ensure that\n         * the filesystem is unmounted first, but this would break\n         * compatibility with the existing unit tests.\n         */\n        probe_write_with_token(\"OS_rmfs: before_FileSysStopVolume_Impl\", devname, return_code, &token, sizeof(token));\n        return_code = OS_FileSysStopVolume_Impl(&token);\n        probe_write_with_token(\"OS_rmfs: after_FileSysStopVolume_Impl\", devname, return_code, &token, sizeof(token));\n\n        /* Free the entry in the master table  */\n        probe_write_with_token(\"OS_rmfs: before_ObjectIdFinalizeDelete\", devname, return_code, &token, sizeof(token));\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        probe_write_with_token(\"OS_rmfs: after_ObjectIdFinalizeDelete\", devname, return_code, &token, sizeof(token));\n    }\n    else\n    {\n        /* Log the failure to find the name */\n        probe_write_simple(\"OS_rmfs: GetByName_failed\", devname, OS_ERR_NAME_NOT_FOUND);\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    /* Final return value */\n    probe_write_simple(\"OS_rmfs: returning\", devname, return_code);\n\n    return return_code;\n}\n"
}