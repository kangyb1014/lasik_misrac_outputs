{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to OS_FileSysStopVolume_Impl(&token) is a no-op in the provided project: OS_FileSysStopVolume_Impl always returns OS_SUCCESS and performs no observable side-effects. Since return_code was already OS_SUCCESS from OS_ObjectIdGetByName and the subsequent OS_ObjectIdFinalizeDelete only uses that status, removing the call would not change program behaviour. Therefore this executed operation is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1466.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rmfs as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rmfs:\n```c\nint32 OS_rmfs(const char *devname)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(devname);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, devname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * NOTE: It is likely that if the file system is mounted,\n         * this call to stop the volume will fail.\n         *\n         * It would be prudent to first check the flags to ensure that\n         * the filesystem is unmounted first, but this would break\n         * compatibility with the existing unit tests.\n         */\n        return_code = OS_FileSysStopVolume_Impl(&token);\n\n        /* Free the entry in the master table  */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rmfs code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging function for OS_rmfs. Appends control-flow and state info to /tmp/logs/1466.txt */\nstatic void OS_rmfs_log_state(const char *stage, long long return_code, const void *token_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/1466.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"[OS_rmfs] stage=%s, return_code=%lld, token_ptr=%p\\n\", stage, return_code, token_ptr);\n        fflush(f);\n        fclose(f);\n    }\n}\n\nint32 OS_rmfs(const char *devname)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(devname);\n\n    /* Log entry after parameter check */\n    OS_rmfs_log_state(\"entry_after_check\", 0, NULL);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, devname, &token);\n\n    /* Log outcome of ObjectIdGetByName and token address when available */\n    OS_rmfs_log_state(\"after_ObjectIdGetByName\", (long long)return_code, (return_code == OS_SUCCESS) ? (const void *)&token : NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * NOTE: It is likely that if the file system is mounted,\n         * this call to stop the volume will fail.\n         *\n         * It would be prudent to first check the flags to ensure that\n         * the filesystem is unmounted first, but this would break\n         * compatibility with the existing unit tests.\n         */\n        return_code = OS_FileSysStopVolume_Impl(&token);\n\n        /* Log outcome of FileSysStopVolume_Impl */\n        OS_rmfs_log_state(\"after_FileSysStopVolume_Impl\", (long long)return_code, (const void *)&token);\n\n        /* Free the entry in the master table  */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log outcome of ObjectIdFinalizeDelete */\n        OS_rmfs_log_state(\"after_ObjectIdFinalizeDelete\", (long long)return_code, (const void *)&token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n\n        /* Log that name was not found and the return_code set */\n        OS_rmfs_log_state(\"name_not_found_set\", (long long)return_code, NULL);\n    }\n\n    /* Final exit log */\n    OS_rmfs_log_state(\"exit\", (long long)return_code, (return_code == OS_SUCCESS) ? (const void *)&token : NULL);\n\n    return return_code;\n}\n"
}