{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(token, 0, sizeof(*token)) writes sizeof(OS_object_token_t) bytes to the address in token without any NULL or size validation. If a caller passes token == NULL (or a pointer to an object smaller than OS_object_token_t), this will write outside the referenced object (e.g. dereference NULL), violating the rule. The function does not check token for NULL or otherwise guarantee the pointer references an object of at least sizeof(*token).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirectoryRewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1223.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirectoryRewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryRewind:\n```c\nint32 OS_DirectoryRewind(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, dir_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRewind_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DirectoryRewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\nint32 OS_ObjectIdGetById(int lock_mode, int obj_type, osal_id_t id, OS_object_token_t *token);\nint32 OS_DirRewind_Impl(const OS_object_token_t *token);\n\nint32 OS_DirectoryRewind(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n    FILE *logf = NULL;\n\n    /* Log entry and initial state: address and compile-time size of the local token */\n    logf = fopen(\"/tmp/logs/1223.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER OS_DirectoryRewind: dir_id=%llu, token_addr=%p, token_size=%zu\\n\",\n                (unsigned long long)dir_id, (void *)&token, sizeof(token));\n        fclose(logf);\n    }\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, dir_id, &token);\n\n    /* Log result of OS_ObjectIdGetById and state (address/size only, do not dereference token contents) */\n    logf = fopen(\"/tmp/logs/1223.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"After OS_ObjectIdGetById: return_code=%d, dir_id=%llu, token_addr=%p, token_size=%zu\\n\",\n                (int)return_code, (unsigned long long)dir_id, (void *)&token, sizeof(token));\n        fclose(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before calling implementation - record that we are about to pass the token pointer */\n        logf = fopen(\"/tmp/logs/1223.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Calling OS_DirRewind_Impl with token_ptr=%p, token_size=%zu\\n\",\n                    (void *)&token, sizeof(token));\n            fclose(logf);\n        }\n\n        return_code = OS_DirRewind_Impl(&token);\n\n        /* Log result of OS_DirRewind_Impl */\n        logf = fopen(\"/tmp/logs/1223.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_DirRewind_Impl returned %d for dir_id=%llu\\n\",\n                    (int)return_code, (unsigned long long)dir_id);\n            fclose(logf);\n        }\n    }\n\n    /* Final exit log */\n    logf = fopen(\"/tmp/logs/1223.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT OS_DirectoryRewind: dir_id=%llu, return_code=%d\\n\",\n                (unsigned long long)dir_id, (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}