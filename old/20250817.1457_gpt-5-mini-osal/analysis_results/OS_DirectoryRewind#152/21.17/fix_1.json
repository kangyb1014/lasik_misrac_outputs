{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void UT_Probe_LogEvent_Header(FILE *f)\n{\n    if (!f) return;\n    fprintf(f, \"---- UT Probe Log Entry ----\\n\");\n}\nstatic void UT_Probe_LogDirRewindCall(osal_id_t dir_id, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1223.txt\", \"a\");\n    if (!f) return;\n\n    UT_Probe_LogEvent_Header(f);\n    fprintf(f, \"OS_DirectoryRewind called: dir_id=%\" PRIu64 \", initial_return_code=%d\\n\",\n            (uint64_t)(uintptr_t)dir_id, (int)return_code);\n    fclose(f);\n}\nvoid UT_Probe_LogCompareState(const char *context, const char *TypeName, const char *ContentTypeStr)\n{\n    FILE *f = fopen(\"/tmp/logs/1223.txt\", \"a\");\n    if (!f) return;\n\n    UT_Probe_LogEvent_Header(f);\n    fprintf(f, \"Context: %s\\n\", context ? context : \"(null)\");\n    fprintf(f, \"  TypeName pointer: %p  (%s)\\n\", (const void *)TypeName,\n            (TypeName == NULL) ? \"NULL\" : \"non-NULL\");\n    fprintf(f, \"  ContentTypeStr pointer: %p  (%s)\\n\", (const void *)ContentTypeStr,\n            (ContentTypeStr == NULL) ? \"NULL\" : \"non-NULL\");\n\n    /* Heuristic warning: if either pointer is NULL, record that strcmp would crash\n     * if used without checking. If both non-NULL, record that strcmp may still\n     * read beyond the object bounds if ContentTypeStr is not NUL-terminated\n     * or is dangling.\n     */\n    if (TypeName == NULL || ContentTypeStr == NULL)\n    {\n        fprintf(f, \"  WARNING: One or more pointers are NULL. Unsafe strcmp(TypeName, ContentTypeStr) would be invalid.\\n\");\n    }\n    else\n    {\n        fprintf(f, \"  NOTE: Both pointers non-NULL. strcmp(TypeName, ContentTypeStr) may still be unsafe if either is non-terminated or dangling.\\n\");\n    }\n\n    fclose(f);\n}\nvoid UT_Probe_LogAboutToCallStrcmp(const char *TypeName, const char *ContentTypeStr)\n{\n    FILE *f = fopen(\"/tmp/logs/1223.txt\", \"a\");\n    if (!f) return;\n\n    UT_Probe_LogEvent_Header(f);\n    fprintf(f, \"About to call strcmp(TypeName, ContentTypeStr)\\n\");\n    fprintf(f, \"  TypeName ptr=%p (%s)\\n\", (const void *)TypeName, (TypeName==NULL)?\"NULL\":\"non-NULL\");\n    fprintf(f, \"  ContentTypeStr ptr=%p (%s)\\n\", (const void *)ContentTypeStr, (ContentTypeStr==NULL)?\"NULL\":\"non-NULL\");\n    fprintf(f, \"  ACTION: This probe does NOT perform the strcmp. It only logs state so a reproducer can compare timings and arguments.\\n\");\n\n    fclose(f);\n}\n\nint32 OS_DirectoryRewind(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry with dir_id. Use a sentinel initial return code value (-1)\n     * until OS_ObjectIdGetById sets the real value.\n     */\n    UT_Probe_LogDirRewindCall(dir_id, -1);\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, dir_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log that we are about to invoke the implementation layer. */\n        FILE *f = fopen(\"/tmp/logs/1223.txt\", \"a\");\n        if (f)\n        {\n            UT_Probe_LogEvent_Header(f);\n            fprintf(f, \"OS_DirectoryRewind: OS_ObjectIdGetById returned OS_SUCCESS; calling OS_DirRewind_Impl. dir_id=%\" PRIu64 \"\\n\",\n                    (uint64_t)(uintptr_t)dir_id);\n            fclose(f);\n        }\n\n        return_code = OS_DirRewind_Impl(&token);\n    }\n\n    /* Log the exit return code so callers can correlate with other logged events. */\n    UT_Probe_LogDirRewindCall(dir_id, return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmp1jgm60pf/src/src/os/shared/src/osapi-dir.c:1:\n/tmp/tmp1jgm60pf/src/src/os/shared/src/osapi-dir.c: In function 'UT_Probe_LogDirRewindCall':\n/tmp/tmp1jgm60pf/src/src/os/shared/src/osapi-dir.c:223:54: error: expected ')' before 'PRIu64'\n  223 |     fprintf(f, \"OS_DirectoryRewind called: dir_id=%\" PRIu64 \", initial_return_code=%d\\n\",\n      |                                                      ^~~~~~\n/tmp/tmp1jgm60pf/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmp1jgm60pf/src/src/os/shared/src/osapi-dir.c:51:1: note: 'PRIu64' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   50 | #include \"os-shared-idmap.h\"\n  +++ |+#include <inttypes.h>\n   51 | \nIn file included from /tmp/tmp1jgm60pf/src/src/os/shared/src/osapi-dir.c:1:\n/tmp/tmp1jgm60pf/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmp1jgm60pf/src/src/os/shared/src/osapi-dir.c:223:5: note: in expansion of macro 'fprintf'\n  223 |     fprintf(f, \"OS_DirectoryRewind called: dir_id=%\" PRIu64 \", initial_return_code=%d\\n\",\n      |     ^~~~~~~\n/tmp/tmp1jgm60pf/src/src/os/shared/src/osapi-dir.c: In function 'OS_DirectoryRewind':\n/tmp/tmp1jgm60pf/src/src/os/shared/src/osapi-dir.c:288:122: error: expected ')' before 'PRIu64'\n  288 |             fprintf(f, \"OS_DirectoryRewind: OS_ObjectIdGetById returned OS_SUCCESS; calling OS_DirRewind_Impl. dir_id=%\" PRIu64 \"\\n\",\n      |                                                                                                                          ^~~~~~\n/tmp/tmp1jgm60pf/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmp1jgm60pf/src/src/os/shared/src/osapi-dir.c:288:122: note: 'PRIu64' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  288 |             fprintf(f, \"OS_DirectoryRewind: OS_ObjectIdGetById returned OS_SUCCESS; calling OS_DirRewind_Impl. dir_id=%\" PRIu64 \"\\n\",\n      |                                                                                                                          ^~~~~~\n/tmp/tmp1jgm60pf/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmp1jgm60pf/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmp1jgm60pf/src/src/os/shared/src/osapi-dir.c:288:13: note: in expansion of macro 'fprintf'\n  288 |             fprintf(f, \"OS_DirectoryRewind: OS_ObjectIdGetById returned OS_SUCCESS; calling OS_DirRewind_Impl. dir_id=%\" PRIu64 \"\\n\",\n      |             ^~~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-dir.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-dir.dir/__/__/os/shared/src/osapi-dir.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3477: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-dir.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_DirectoryRewind as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "/* Fixed: add inttypes.h so PRIu64 is defined for use in format strings */\n#include \"os-shared-idmap.h\"\n#include <inttypes.h>\n\nstatic void UT_Probe_LogEvent_Header(FILE *f)\n{\n    if (!f) return;\n    fprintf(f, \"---- UT Probe Log Entry ----\\n\");\n}\nstatic void UT_Probe_LogDirRewindCall(osal_id_t dir_id, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1223.txt\", \"a\");\n    if (!f) return;\n\n    UT_Probe_LogEvent_Header(f);\n    fprintf(f, \"OS_DirectoryRewind called: dir_id=%\" PRIu64 \", initial_return_code=%d\\n\",\n            (uint64_t)(uintptr_t)dir_id, (int)return_code);\n    fclose(f);\n}\nvoid UT_Probe_LogCompareState(const char *context, const char *TypeName, const char *ContentTypeStr)\n{\n    FILE *f = fopen(\"/tmp/logs/1223.txt\", \"a\");\n    if (!f) return;\n\n    UT_Probe_LogEvent_Header(f);\n    fprintf(f, \"Context: %s\\n\", context ? context : \"(null)\");\n    fprintf(f, \"  TypeName pointer: %p  (%s)\\n\", (const void *)TypeName,\n            (TypeName == NULL) ? \"NULL\" : \"non-NULL\");\n    fprintf(f, \"  ContentTypeStr pointer: %p  (%s)\\n\", (const void *)ContentTypeStr,\n            (ContentTypeStr == NULL) ? \"NULL\" : \"non-NULL\");\n\n    /* Heuristic warning: if either pointer is NULL, record that strcmp would crash\n     * if used without checking. If both non-NULL, record that strcmp may still\n     * read beyond the object bounds if ContentTypeStr is not NUL-terminated\n     * or is dangling.\n     */\n    if (TypeName == NULL || ContentTypeStr == NULL)\n    {\n        fprintf(f, \"  WARNING: One or more pointers are NULL. Unsafe strcmp(TypeName, ContentTypeStr) would be invalid.\\n\");\n    }\n    else\n    {\n        fprintf(f, \"  NOTE: Both pointers non-NULL. strcmp(TypeName, ContentTypeStr) may still be unsafe if either is non-terminated or dangling.\\n\");\n    }\n\n    fclose(f);\n}\nvoid UT_Probe_LogAboutToCallStrcmp(const char *TypeName, const char *ContentTypeStr)\n{\n    FILE *f = fopen(\"/tmp/logs/1223.txt\", \"a\");\n    if (!f) return;\n\n    UT_Probe_LogEvent_Header(f);\n    fprintf(f, \"About to call strcmp(TypeName, ContentTypeStr)\\n\");\n    fprintf(f, \"  TypeName ptr=%p (%s)\\n\", (const void *)TypeName, (TypeName==NULL)?\"NULL\":\"non-NULL\");\n    fprintf(f, \"  ContentTypeStr ptr=%p (%s)\\n\", (const void *)ContentTypeStr, (ContentTypeStr==NULL)?\"NULL\":\"non-NULL\");\n    fprintf(f, \"  ACTION: This probe does NOT perform the strcmp. It only logs state so a reproducer can compare timings and arguments.\\n\");\n\n    fclose(f);\n}\n\nint32 OS_DirectoryRewind(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry with dir_id. Use a sentinel initial return code value (-1)\n     * until OS_ObjectIdGetById sets the real value.\n     */\n    UT_Probe_LogDirRewindCall(dir_id, -1);\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, dir_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log that we are about to invoke the implementation layer. */\n        FILE *f = fopen(\"/tmp/logs/1223.txt\", \"a\");\n        if (f)\n        {\n            UT_Probe_LogEvent_Header(f);\n            fprintf(f, \"OS_DirectoryRewind: OS_ObjectIdGetById returned OS_SUCCESS; calling OS_DirRewind_Impl. dir_id=%\" PRIu64 \"\\n\",\n                    (uint64_t)(uintptr_t)dir_id);\n            fclose(f);\n        }\n\n        return_code = OS_DirRewind_Impl(&token);\n    }\n\n    /* Log the exit return code so callers can correlate with other logged events. */\n    UT_Probe_LogDirRewindCall(dir_id, return_code);\n\n    return return_code;\n}\n",
  "explanation": "The build errors were caused by use of the PRIu64 format macro without including <inttypes.h>. I added #include <inttypes.h> after the existing include so PRIu64 is defined. No other logic was changed; only the include was added so the format macros expand correctly."
}