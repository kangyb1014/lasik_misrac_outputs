{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls dlerror() (which returns a char *) and passes its result directly to OS_DEBUG, using a non-const pointer to a string that should be treated as immutable. The pointer could and should be const-qualified (e.g. const char *err = dlerror(); OS_DEBUG(\"...%s\", err);). Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleUnload_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/771.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleUnload_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleUnload_Impl:\n```c\nint32 OS_ModuleUnload_Impl(const OS_object_token_t *token)\n{\n    int32                             status = OS_ERROR;\n    OS_impl_module_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n\n    /*\n    ** Attempt to close/unload the module\n    */\n    dlerror();\n    if (dlclose(impl->dl_handle) == 0)\n    {\n        impl->dl_handle = NULL;\n        status          = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"Error unloading shared library: %s\\n\", dlerror());\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleUnload_Impl code.\n",
  "test_code": "#include <stdio.h>\n\nstatic void OS_ModuleUnload_Impl_LogProbe(const OS_object_token_t *token,\n                                           const OS_impl_module_internal_record_t *impl,\n                                           int dlclose_ret,\n                                           const char *stage)\n{\n    FILE *f = fopen(\"/tmp/logs/771.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log token and implementation pointers, dl_handle, stage and dlclose result. */\n    fprintf(f, \"OS_ModuleUnload_Impl probe - stage=%s\\n\", stage);\n    fprintf(f, \"  token_ptr=%p\\n\", (const void *)token);\n    fprintf(f, \"  impl_ptr=%p\\n\", (const void *)impl);\n    if (impl != NULL)\n    {\n        fprintf(f, \"  impl->dl_handle=%p\\n\", (const void *)impl->dl_handle);\n    }\n    fprintf(f, \"  dlclose_ret=%d\\n\", dlclose_ret);\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_ModuleUnload_Impl(const OS_object_token_t *token)\n{\n    int32                             status = OS_ERROR;\n    OS_impl_module_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n\n    /* Probe: record state before clearing any previous dlerror */\n    OS_ModuleUnload_Impl_LogProbe(token, impl, -1, \"before_dlerror_clear\");\n\n    /*\n    ** Attempt to close/unload the module\n    ** Keep the original dlerror() clear call as in the original logic.\n    */\n    dlerror();\n\n    /* Probe: record state immediately before dlclose */\n    OS_ModuleUnload_Impl_LogProbe(token, impl, -1, \"before_dlclose\");\n\n    if (dlclose(impl->dl_handle) == 0)\n    {\n        impl->dl_handle = NULL;\n        status          = OS_SUCCESS;\n\n        /* Probe: successful close */\n        OS_ModuleUnload_Impl_LogProbe(token, impl, 0, \"dlclose_success\");\n    }\n    else\n    {\n        /* Probe: failure recorded before calling OS_DEBUG which will call dlerror() inline. */\n        OS_ModuleUnload_Impl_LogProbe(token, impl, -1, \"dlclose_failure_before_os_debug_inline_dlerror\");\n\n        /* Preserve original behavior: call dlerror() inline inside OS_DEBUG as in the reported violation scenario. */\n        OS_DEBUG(\"Error unloading shared library: %s\\n\", dlerror());\n\n        /* Probe: record that OS_DEBUG was invoked which used dlerror() inline */\n        OS_ModuleUnload_Impl_LogProbe(token, impl, -1, \"dlclose_failure_after_os_debug_inline_dlerror\");\n    }\n\n    return status;\n}\n"
}