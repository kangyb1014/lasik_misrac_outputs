{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the prototype of OS_BinSemTimedWait_Impl is declared as taking a non-const pointer (e.g. int32 OS_BinSemTimedWait_Impl(OS_object_token_t *token, uint32 msecs)) but the implementation only reads from *token (does not modify it), this call (&token) violates MISRA C 2023 Rule 8.13 because the pointer target should be const-qualified (const OS_object_token_t *). Note: the fragment alone does not show the prototype or whether the callee modifies the object; the violation exists only if the callee\u2019s parameter is non-const while only read access is required.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemTimedWait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/987.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemTimedWait as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemTimedWait:\n```c\nint32 OS_BinSemTimedWait(osal_id_t sem_id, uint32 msecs)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemTimedWait_Impl(&token, msecs);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemTimedWait code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/987.txt */\nstatic void os_log_append(const char *fmt, ...)\n{\n    va_list args;\n    FILE *fp = fopen(\"/tmp/logs/987.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nstatic void os_log_hexdump(const char *label, const void *buf, size_t len)\n{\n    const unsigned char *p = (const unsigned char *)buf;\n    size_t i;\n\n    FILE *fp = fopen(\"/tmp/logs/987.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    fprintf(fp, \"%s: address=%p size=%zu bytes\\n\", label, (const void *)buf, (size_t)len);\n    for (i = 0; i < len; ++i)\n    {\n        if ((i % 16) == 0)\n        {\n            fprintf(fp, \"%08zx: \", (size_t)i);\n        }\n        fprintf(fp, \"%02x \", (unsigned)p[i]);\n        if ((i % 16) == 15 || i + 1 == len)\n        {\n            fprintf(fp, \"\\n\");\n        }\n    }\n\n    fclose(fp);\n}\n\n/* Original function with logging probes inserted. */\nint32 OS_BinSemTimedWait(osal_id_t sem_id, uint32 msecs)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and parameters */\n    os_log_append(\"OS_BinSemTimedWait ENTRY: sem_id=%u msecs=%u\", (unsigned)sem_id, (unsigned)msecs);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of ObjectIdGetById and token address */\n    os_log_append(\"OS_ObjectIdGetById returned %d\", (int)return_code);\n    os_log_append(\"token address passed to OS_ObjectIdGetById: %p\", (const void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Capture a hexdump of the token contents (read-only) to show state passed to the impl */\n        os_log_hexdump(\"token contents (after OS_ObjectIdGetById)\", (const void *)&token, sizeof(token));\n\n        os_log_append(\"Calling OS_BinSemTimedWait_Impl with token address %p and msecs=%u\", (const void *)&token, (unsigned)msecs);\n        return_code = OS_BinSemTimedWait_Impl(&token, msecs);\n        os_log_append(\"OS_BinSemTimedWait_Impl returned %d\", (int)return_code);\n\n        /* After return, also dump token again to detect any unexpected modification by the callee */\n        os_log_hexdump(\"token contents (after OS_BinSemTimedWait_Impl)\", (const void *)&token, sizeof(token));\n    }\n    else\n    {\n        os_log_append(\"Skipping OS_BinSemTimedWait_Impl due to previous error: %d\", (int)return_code);\n    }\n\n    os_log_append(\"OS_BinSemTimedWait EXIT: return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}