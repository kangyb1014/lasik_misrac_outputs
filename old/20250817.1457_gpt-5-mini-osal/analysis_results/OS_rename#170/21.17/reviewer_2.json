{
  "user_message": "An agent A claimed that the following OS_rename code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_rename.\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If the filename portion is short but OS_MAX_FILE_NAME is larger than the remaining bytes in VirtualPath, memchr(name_ptr, 0, OS_MAX_FILE_NAME) can read past the end of the provided string. Example: VirtualPath = \"/a\" (length 2) and OS_MAX_FILE_NAME = 255. name_ptr points to \"a\\0\" but memchr is asked to scan 255 bytes starting at name_ptr, which may access memory beyond the VirtualPath buffer/object \u2014 undefined behavior and a violation of Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1367.txt\", \"a\");\n    if (!f) return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Probe: log entry and input parameter snippets/lengths */\n    size_t old_len = 0;\n    size_t new_len = 0;\n\n    if (old != NULL)\n    {\n        old_len = strnlen(old, OS_MAX_LOCAL_PATH_LEN);\n    }\n    if (new != NULL)\n    {\n        new_len = strnlen(new, OS_MAX_LOCAL_PATH_LEN);\n    }\n\n    /* capture short snippets (up to 64 chars) to avoid over-reading */\n    size_t old_snip_len = old_len > 64 ? 64 : old_len;\n    size_t new_snip_len = new_len > 64 ? 64 : new_len;\n    char old_snip[65];\n    char new_snip[65];\n    if (old != NULL)\n    {\n        /* use precision in format to avoid reading beyond the known length */\n        snprintf(old_snip, sizeof(old_snip), \"%.*s\", (int)old_snip_len, old);\n    }\n    else\n    {\n        old_snip[0] = '\\0';\n    }\n    if (new != NULL)\n    {\n        snprintf(new_snip, sizeof(new_snip), \"%.*s\", (int)new_snip_len, new);\n    }\n    else\n    {\n        new_snip[0] = '\\0';\n    }\n\n    log_probe(\"OS_rename ENTER: old=%p len=%zu snip='%s' ; new=%p len=%zu snip='%s'\",\n              (const void *)old, old_len, old_snip, (const void *)new, new_len, new_snip);\n\n    return_code = OS_TranslatePath(old, old_path);\n    log_probe(\"OS_TranslatePath(old) -> return_code=%d\", return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        /* log translated old_path details */\n        size_t trans_old_len = strnlen(old_path, OS_MAX_LOCAL_PATH_LEN);\n        log_probe(\"old_path='%.*s' len=%zu\", (int)(trans_old_len > 128 ? 128 : trans_old_len), old_path, trans_old_len);\n\n        return_code = OS_TranslatePath(new, new_path);\n        log_probe(\"OS_TranslatePath(new) -> return_code=%d\", return_code);\n        if (return_code == OS_SUCCESS)\n        {\n            size_t trans_new_len = strnlen(new_path, OS_MAX_LOCAL_PATH_LEN);\n            log_probe(\"new_path='%.*s' len=%zu\", (int)(trans_new_len > 128 ? 128 : trans_new_len), new_path, trans_new_len);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        log_probe(\"Calling OS_FileRename_Impl('%s','%s')\", old_path, new_path);\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        log_probe(\"OS_FileRename_Impl -> return_code=%d\", return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        log_probe(\"Rename succeeded, iterating open objects to update stream names\");\n\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            /* Log stream object state before potential update */\n            size_t stream_name_len = strnlen(stream->stream_name, sizeof(stream->stream_name));\n            /* Print the iterator token as a pointer to avoid casting an aggregate to an integer */\n            log_probe(\"iter token=%p socket_domain=%d stream_name='%.*s' len=%zu\",\n                      (const void *)&iter.token,\n                      (int)stream->socket_domain,\n                      (int)(stream_name_len > 128 ? 128 : stream_name_len),\n                      stream->stream_name,\n                      stream_name_len);\n\n            int cmp = -1;\n            if (old != NULL)\n            {\n                /* safe compare: strcmp is used in original logic; ensure old is not NULL */\n                cmp = strcmp(stream->stream_name, old);\n            }\n            log_probe(\"strcmp(stream->stream_name, old) -> %d\", cmp);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && cmp == 0)\n            {\n                /* log details about the copy about to happen */\n                size_t size_stream = sizeof(stream->stream_name);\n                size_t new_len_local = new ? strnlen(new, size_stream) : 0;\n                log_probe(\"About to strncpy into stream->stream_name: dest_size=%zu new_len=%zu new_snip='%.*s'\",\n                          size_stream,\n                          new_len_local,\n                          (int)(new_len_local > 128 ? 128 : new_len_local),\n                          new ? new : \"\");\n\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                size_t final_len = strnlen(stream->stream_name, sizeof(stream->stream_name));\n                log_probe(\"stream->stream_name updated -> '%.*s' len=%zu\",\n                          (int)(final_len > 128 ? 128 : final_len),\n                          stream->stream_name,\n                          final_len);\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    log_probe(\"OS_rename EXIT: return_code=%d\", return_code);\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_rename. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The OS_rename code shown does not itself call memchr or any unbounded scan; it only calls strcmp(stream->stream_name, old) and strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1) (and in the test harness some strnlen calls). These uses are safe provided the caller/earlier validation guarantees that the input strings are NUL-terminated or otherwise accessible for the scanned length. In this function OS_TranslatePath(old, old_path) and OS_TranslatePath(new, new_path) are invoked first and the code only proceeds to compare/copy when those return OS_SUCCESS \u2014 i.e. the function\u2019s logic relies on OS_TranslatePath to validate/translate the inputs. The agent\u2019s memchr-overrun scenario describes a potential bug inside some other routine (e.g. inside OS_TranslatePath or path-parsing code that uses memchr with a fixed large length), not in the OS_rename snippet shown. Therefore, based on the provided code, the reported Rule 21.17 violation is not demonstrated for OS_rename itself. (That said, if OS_TranslatePath or other helpers use memchr/other string functions in a way that can scan past the end of the buffer, that code could indeed violate Rule 21.17 \u2014 but that is outside the snippet under review.)"
}