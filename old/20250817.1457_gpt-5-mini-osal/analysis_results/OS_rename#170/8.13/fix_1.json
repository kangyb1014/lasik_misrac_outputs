{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    os_probe_log(\"OS_rename: start old='%s' new='%s'\", old ? old : \"(null)\", new ? new : \"(null)\");\n\n    return_code = OS_TranslatePath(old, old_path);\n    os_probe_log(\"OS_rename: OS_TranslatePath(old) -> return_code=%d old_path='%s'\", return_code, (return_code == OS_SUCCESS) ? old_path : \"\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        os_probe_log(\"OS_rename: OS_TranslatePath(new) -> return_code=%d new_path='%s'\", return_code, (return_code == OS_SUCCESS) ? new_path : \"\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        os_probe_log(\"OS_rename: OS_FileRename_Impl('%s','%s') -> return_code=%d\", old_path, new_path, return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        os_probe_log(\"OS_rename: starting object iteration for potential stream renames\");\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            /* Probe: capture iterator token before table access */\n            os_probe_log(\"OS_rename: iterator advanced, token=%u\", (unsigned int)iter.token);\n\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            /* Probe: record current stream state */\n            if (stream != NULL)\n            {\n                os_probe_log(\"OS_rename: stream ptr=%p socket_domain=%d stream_name='%s'\", (void *)stream, (int)stream->socket_domain, stream->stream_name);\n            }\n            else\n            {\n                os_probe_log(\"OS_rename: OS_OBJECT_TABLE_GET returned NULL for token=%u\", (unsigned int)iter.token);\n            }\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                char prev_name[sizeof(stream->stream_name)];\n                /* capture previous name for logging */\n                strncpy(prev_name, stream->stream_name, sizeof(prev_name) - 1);\n                prev_name[sizeof(prev_name) - 1] = '\\0';\n\n                os_probe_log(\"OS_rename: stream token=%u matched old name '%s' -> performing rename to '%s'\", (unsigned int)iter.token, prev_name, new);\n\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                os_probe_log(\"OS_rename: stream token=%u rename complete, new stream_name='%s'\", (unsigned int)iter.token, stream->stream_name);\n            }\n            else\n            {\n                /* Log why we didn't rename this stream */\n                if (stream != NULL)\n                {\n                    if (stream->socket_domain != OS_SocketDomain_INVALID)\n                    {\n                        os_probe_log(\"OS_rename: token=%u skipped: socket_domain=%d (not INVALID)\", (unsigned int)iter.token, (int)stream->socket_domain);\n                    }\n                    else\n                    {\n                        os_probe_log(\"OS_rename: token=%u skipped: name '%s' does not match old '%s'\", (unsigned int)iter.token, stream->stream_name, old);\n                    }\n                }\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        os_probe_log(\"OS_rename: object iterator destroyed\");\n    }\n\n    os_probe_log(\"OS_rename: end return_code=%d\", return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpgamrux4w/src/src/os/shared/src/osapi-file.c: In function 'OS_rename':\n/tmp/tmpgamrux4w/src/src/os/shared/src/osapi-file.c:403:13: error: aggregate value used where an integer was expected\n  403 |             os_probe_log(\"OS_rename: iterator advanced, token=%u\", (unsigned int)iter.token);\n      |             ^~~~~~~~~~~~\n/tmp/tmpgamrux4w/src/src/os/shared/src/osapi-file.c:414:17: error: aggregate value used where an integer was expected\n  414 |                 os_probe_log(\"OS_rename: OS_OBJECT_TABLE_GET returned NULL for token=%u\", (unsigned int)iter.token);\n      |                 ^~~~~~~~~~~~\n/tmp/tmpgamrux4w/src/src/os/shared/src/osapi-file.c:424:17: error: aggregate value used where an integer was expected\n  424 |                 os_probe_log(\"OS_rename: stream token=%u matched old name '%s' -> performing rename to '%s'\", (unsigned int)iter.token, prev_name, new);\n      |                 ^~~~~~~~~~~~\n/tmp/tmpgamrux4w/src/src/os/shared/src/osapi-file.c:429:17: error: aggregate value used where an integer was expected\n  429 |                 os_probe_log(\"OS_rename: stream token=%u rename complete, new stream_name='%s'\", (unsigned int)iter.token, stream->stream_name);\n      |                 ^~~~~~~~~~~~\n/tmp/tmpgamrux4w/src/src/os/shared/src/osapi-file.c:438:25: error: aggregate value used where an integer was expected\n  438 |                         os_probe_log(\"OS_rename: token=%u skipped: socket_domain=%d (not INVALID)\", (unsigned int)iter.token, (int)stream->socket_domain);\n      |                         ^~~~~~~~~~~~\n/tmp/tmpgamrux4w/src/src/os/shared/src/osapi-file.c:442:25: error: aggregate value used where an integer was expected\n  442 |                         os_probe_log(\"OS_rename: token=%u skipped: name '%s' does not match old '%s'\", (unsigned int)iter.token, stream->stream_name, old);\n      |                         ^~~~~~~~~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:174: CMakeFiles/osal.dir/src/os/shared/src/osapi-file.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_rename as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    os_probe_log(\"OS_rename: start old='%s' new='%s'\", old ? old : \"(null)\", new ? new : \"(null)\");\n\n    return_code = OS_TranslatePath(old, old_path);\n    os_probe_log(\"OS_rename: OS_TranslatePath(old) -> return_code=%d old_path='%s'\", return_code, (return_code == OS_SUCCESS) ? old_path : \"\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        os_probe_log(\"OS_rename: OS_TranslatePath(new) -> return_code=%d new_path='%s'\", return_code, (return_code == OS_SUCCESS) ? new_path : \"\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        os_probe_log(\"OS_rename: OS_FileRename_Impl('%s','%s') -> return_code=%d\", old_path, new_path, return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        os_probe_log(\"OS_rename: starting object iteration for potential stream renames\");\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            /* Probe: capture iterator token before table access */\n            /* Print the address of the token structure instead of attempting to\n             * cast an aggregate token value to an integer (which caused the\n             * original compile errors). */\n            os_probe_log(\"OS_rename: iterator advanced, token=%p\", (void *)&iter.token);\n\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            /* Probe: record current stream state */\n            if (stream != NULL)\n            {\n                os_probe_log(\"OS_rename: stream ptr=%p socket_domain=%d stream_name='%s'\", (void *)stream, (int)stream->socket_domain, stream->stream_name);\n            }\n            else\n            {\n                os_probe_log(\"OS_rename: OS_OBJECT_TABLE_GET returned NULL for token=%p\", (void *)&iter.token);\n            }\n\n            if (stream != NULL && stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                char prev_name[sizeof(stream->stream_name)];\n                /* capture previous name for logging */\n                strncpy(prev_name, stream->stream_name, sizeof(prev_name) - 1);\n                prev_name[sizeof(prev_name) - 1] = '\\0';\n\n                os_probe_log(\"OS_rename: stream token=%p matched old name '%s' -> performing rename to '%s'\", (void *)&iter.token, prev_name, new);\n\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                os_probe_log(\"OS_rename: stream token=%p rename complete, new stream_name='%s'\", (void *)&iter.token, stream->stream_name);\n            }\n            else\n            {\n                /* Log why we didn't rename this stream */\n                if (stream != NULL)\n                {\n                    if (stream->socket_domain != OS_SocketDomain_INVALID)\n                    {\n                        os_probe_log(\"OS_rename: token=%p skipped: socket_domain=%d (not INVALID)\", (void *)&iter.token, (int)stream->socket_domain);\n                    }\n                    else\n                    {\n                        os_probe_log(\"OS_rename: token=%p skipped: name '%s' does not match old '%s'\", (void *)&iter.token, stream->stream_name, old);\n                    }\n                }\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        os_probe_log(\"OS_rename: object iterator destroyed\");\n    }\n\n    os_probe_log(\"OS_rename: end return_code=%d\", return_code);\n\n    return return_code;\n}\n",
  "explanation": "The compile errors were caused by attempts to cast an aggregate token value (iter.token) to an integer for printing. I changed the log calls to print the token's address with %p and (void *)&iter.token, avoiding invalid casts. I also added a defensive NULL check before dereferencing 'stream' in the rename condition (i.e., changed to if (stream != NULL && ...)) to prevent potential null-pointer dereferences while preserving the original logic."
}