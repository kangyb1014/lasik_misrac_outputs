{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code reads from the object table but uses non-const pointers. In OS_ObjectIdIteratorGetNext, 'record' is declared as 'OS_common_record_t *' and is assigned from OS_OBJECT_TABLE_GET(iter->base, iter->token). The function only reads fields from 'record' (e.g. record->active_id) and does not modify it, so both 'record' and the data pointed to by 'iter->base' could and should be const-qualified (for example: 'const OS_common_record_t *record' and 'const OS_common_record_t *base' in OS_object_iter_t). Using non-const pointers here violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1363.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n    FILE                        *logf = NULL;\n\n    /* Log inputs */\n    logf = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_rename called: old=\"\"%s\"\", new=\"\"%s\"\"\\n\", old ? old : \"(null)\", new ? new : \"(null)\");\n        fclose(logf);\n    }\n\n    return_code = OS_TranslatePath(old, old_path);\n\n    /* Log translation result for old */\n    logf = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_TranslatePath(old) returned %ld, old_path=\\\"%s\\\"\\n\", (long)return_code, (return_code==OS_SUCCESS) ? old_path : \"(invalid)\");\n        fclose(logf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n\n        /* Log translation result for new */\n        logf = fopen(\"/tmp/logs/1363.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_TranslatePath(new) returned %ld, new_path=\\\"%s\\\"\\n\", (long)return_code, (return_code==OS_SUCCESS) ? new_path : \"(invalid)\");\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n\n        /* Log result of implementation rename */\n        logf = fopen(\"/tmp/logs/1363.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"OS_FileRename_Impl returned %ld\\n\", (long)return_code);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Start iterating object table to update stream names that match the old name */\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        logf = fopen(\"/tmp/logs/1363.txt\", \"a\");\n        if (logf != NULL)\n        {\n            /* Log iterator state (addresses/opaque tokens) to help trace how the table is accessed */\n            fprintf(logf, \"Iterator initialized: &iter=%p, iterator_token_address=%p\\n\", (void *)&iter, (void *)&iter);\n            fclose(logf);\n        }\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            /* Capture token/address information before fetching record */\n            logf = fopen(\"/tmp/logs/1363.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"OS_ObjectIdIteratorGetNext returned true; iterator state address=%p\\n\", (void *)&iter);\n                fclose(logf);\n            }\n\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            /* Log the stream record pointer and key fields we will read */\n            logf = fopen(\"/tmp/logs/1363.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"Fetched stream record: stream_ptr=%p, token=%lu\\n\", (void *)stream, (unsigned long)iter.token);\n                if (stream != NULL)\n                {\n                    fprintf(logf, \"  stream->socket_domain=%d, stream->stream_name=\\\"%s\\\"\\n\", (int)stream->socket_domain, stream->stream_name);\n                }\n                else\n                {\n                    fprintf(logf, \"  stream is NULL\\n\");\n                }\n                fclose(logf);\n            }\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                /* Log that we found a matching stream name before modification */\n                logf = fopen(\"/tmp/logs/1363.txt\", \"a\");\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"  Match found: replacing stream_name \\\"%s\\\" with \\\"%s\\\" for stream_ptr=%p\\n\", stream->stream_name, new, (void *)stream);\n                    fclose(logf);\n                }\n\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                /* Log the new name after modification */\n                logf = fopen(\"/tmp/logs/1363.txt\", \"a\");\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"  After strncpy: stream->stream_name=\\\"%s\\\"\\n\", stream->stream_name);\n                    fclose(logf);\n                }\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n\n        logf = fopen(\"/tmp/logs/1363.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Iterator destroyed\\n\");\n            fclose(logf);\n        }\n    }\n\n    /* Final return code log */\n    logf = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"OS_rename returning %ld\\n\", (long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}