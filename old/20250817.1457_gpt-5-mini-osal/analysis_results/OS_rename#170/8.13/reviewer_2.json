{
  "user_message": "An agent A claimed that the following OS_rename code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_rename.\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The member 'void *arg' is used to hold pointers to data that are const (for example OS_TranslatePath passes (void *)VirtualPath where VirtualPath is const char *). This discards the const qualifier; therefore the member should be declared as 'const void *arg' (and related callback types updated) to avoid casting away const.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n/* Fixed test code - renamed symbols to avoid collisions with existing headers */\n\n#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n/* Minimal typedef to mimic original int32 used in the logic */\ntypedef int32_t int32;\n\nstatic const int TEST_MAX_LOCAL_PATH_LEN = 256;\nstatic const int TEST_SUCCESS = 0;\nstatic const int TEST_LOCAL_OBJID_TYPE = 1;\nstatic const int TEST_SocketDomain_INVALID = -1;\n\n/* Simple iterator and stream record types with unique names to avoid collisions */\ntypedef struct\n{\n    int token;\n    /* iterator private state could be extended if needed */\n} test_object_iter_t;\n\ntypedef struct\n{\n    int socket_domain;\n    char stream_name[256];\n} test_stream_internal_record_t;\n\n/* A small table to operate on for the unit-test like code.  This replaces any external OS_stream_table. */\nstatic test_stream_internal_record_t test_stream_table[] = {\n    { TEST_SocketDomain_INVALID, \"/tmp/old_name\" },\n    { 0, \"other_stream\" },\n    { TEST_SocketDomain_INVALID, \"not_matching\" }\n};\n\nstatic inline test_stream_internal_record_t *TEST_OBJECT_TABLE_GET(test_stream_internal_record_t *table, int idx)\n{\n    int table_size = (int)(sizeof(test_stream_table) / sizeof(test_stream_table[0]));\n    (void)table; /* parameter kept for similarity with original signature; use internal table for bounds */\n\n    if (idx < 0 || idx >= table_size)\n    {\n        return NULL;\n    }\n\n    return &test_stream_table[idx];\n}\n\nstatic void test_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging is unavailable just return silently */\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic int32 test_TranslatePath(const char *path, char *local_path)\n{\n    if (path == NULL || local_path == NULL)\n    {\n        return -1;\n    }\n\n    /* Copy the path into local buffer for the simulation. */\n    strncpy(local_path, path, TEST_MAX_LOCAL_PATH_LEN - 1);\n    local_path[TEST_MAX_LOCAL_PATH_LEN - 1] = '\\0';\n\n    test_log_probe(\"test_TranslatePath: input='%s' translated='%s'\", path, local_path);\n    return TEST_SUCCESS;\n}\n\nstatic int32 test_FileRename_Impl(const char *old_path, const char *new_path)\n{\n    /* Simulate a successful rename and log it. */\n    test_log_probe(\"test_FileRename_Impl: old_path='%s' new_path='%s'\", old_path, new_path);\n    return TEST_SUCCESS;\n}\n\nstatic void test_ObjectIdIterateActive(int type, test_object_iter_t *iter)\n{\n    (void)type;\n    if (iter != NULL)\n    {\n        iter->token = -1; /* will be incremented on first GetNext call */\n    }\n    test_log_probe(\"test_ObjectIdIterateActive: started iteration for type=%d\", type);\n}\n\nstatic int test_ObjectIdIteratorGetNext(test_object_iter_t *iter)\n{\n    if (iter == NULL)\n    {\n        return 0;\n    }\n\n    iter->token++;\n    if (iter->token < (int)(sizeof(test_stream_table) / sizeof(test_stream_table[0])))\n    {\n        test_log_probe(\"test_ObjectIdIteratorGetNext: advancing to token=%d\", iter->token);\n        return 1;\n    }\n\n    test_log_probe(\"test_ObjectIdIteratorGetNext: no more elements (token=%d)\", iter->token);\n    return 0;\n}\n\nstatic void test_ObjectIdIteratorDestroy(test_object_iter_t *iter)\n{\n    (void)iter;\n    test_log_probe(\"test_ObjectIdIteratorDestroy: iterator destroyed\");\n}\n\n/*\n * This function preserves the original control flow and logic of OS_rename\n * but uses uniquely-named helper functions and types to avoid collisions\n * with external headers/symbols in the build environment.\n */\nint32 test_OS_rename(const char *old, const char *new)\n{\n    test_object_iter_t             iter;\n    test_stream_internal_record_t *stream;\n    int32                         return_code;\n    char                          old_path[TEST_MAX_LOCAL_PATH_LEN];\n    char                          new_path[TEST_MAX_LOCAL_PATH_LEN];\n\n    test_log_probe(\"test_OS_rename: entry old='%s' new='%s'\", old ? old : \"(null)\", new ? new : \"(null)\");\n\n    return_code = test_TranslatePath(old, old_path);\n    test_log_probe(\"test_OS_rename: after test_TranslatePath(old) return_code=%d old_path='%s'\", return_code, old_path);\n\n    if (return_code == TEST_SUCCESS)\n    {\n        return_code = test_TranslatePath(new, new_path);\n        test_log_probe(\"test_OS_rename: after test_TranslatePath(new) return_code=%d new_path='%s'\", return_code, new_path);\n    }\n\n    if (return_code == TEST_SUCCESS)\n    {\n        return_code = test_FileRename_Impl(old_path, new_path);\n        test_log_probe(\"test_OS_rename: after test_FileRename_Impl return_code=%d\", return_code);\n    }\n\n    if (return_code == TEST_SUCCESS)\n    {\n        test_ObjectIdIterateActive(TEST_LOCAL_OBJID_TYPE, &iter);\n\n        while (test_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = TEST_OBJECT_TABLE_GET(test_stream_table, iter.token);\n\n            if (stream == NULL)\n            {\n                test_log_probe(\"test_OS_rename: stream is NULL for token=%d\", iter.token);\n                continue;\n            }\n\n            test_log_probe(\"test_OS_rename: inspecting stream token=%d socket_domain=%d stream_name='%s'\",\n                           iter.token, stream->socket_domain, stream->stream_name);\n\n            /* The reported violation involves storing const pointers into void *arg fields elsewhere.\n               Here we log the condition that triggers a name update to provide evidence of control flow. */\n            if (stream->socket_domain == TEST_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                char before_name[sizeof(stream->stream_name)];\n                strncpy(before_name, stream->stream_name, sizeof(before_name) - 1);\n                before_name[sizeof(before_name) - 1] = '\\0';\n\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = '\\0';\n\n                test_log_probe(\"test_OS_rename: stream token=%d matched old name. before='%s' after='%s'\",\n                               iter.token, before_name, stream->stream_name);\n            }\n        }\n\n        test_ObjectIdIteratorDestroy(&iter);\n    }\n\n    test_log_probe(\"test_OS_rename: exit return_code=%d\", return_code);\n    return return_code;\n}\n\n```\nThe test code failed to parse, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The reported violation is not shown in the provided OS_rename code. In the target code the function parameters are declared as const char *old and const char *new and are passed to functions that accept const char * (e.g. OS_TranslatePath and strcmp). There is no declaration or use of a member 'void *arg' in the provided snippet, nor is there any cast that would discard const qualification. MISRA C 2023 Rule 8.13 would be violated if a non-const pointer (for example void * or char *) were used to hold addresses of const data (or if code cast away const), but that pattern does not appear in the shown OS_rename implementation. It\u2019s possible such an issue exists elsewhere in the code base (e.g. callback storage using void *arg), but based on the supplied code and test, Agent A\u2019s claim that OS_rename violates Rule 8.13 is incorrect."
}