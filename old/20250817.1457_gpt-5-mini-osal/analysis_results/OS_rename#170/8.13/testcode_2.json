{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member 'void *arg' is used to hold pointers to data that are const (for example OS_TranslatePath passes (void *)VirtualPath where VirtualPath is const char *). This discards the const qualifier; therefore the member should be declared as 'const void *arg' (and related callback types updated) to avoid casting away const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1363.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Minimal type and constant definitions to allow this unit to compile as a test harness.\n   These are intentionally small and only model the pieces used by OS_rename. */\nstatic const int OS_MAX_LOCAL_PATH_LEN = 256;\nstatic const int OS_SUCCESS = 0;\nstatic const int LOCAL_OBJID_TYPE = 1;\nstatic const int OS_SocketDomain_INVALID = -1;\n\ntypedef int32_t int32;\n\ntypedef struct\n{\n    int token;\n    /* iterator private state could be extended if needed */\n} OS_object_iter_t;\n\ntypedef struct\n{\n    int socket_domain;\n    char stream_name[256];\n} OS_stream_internal_record_t;\n\n/* A small table to simulate the object table. */\nstatic OS_stream_internal_record_t OS_stream_table[4] = {\n    { -1, \"old_name\" },\n    {  0, \"other\" },\n    { -1, \"old_name\" },\n    {  0, \"unused\" }\n};\n\n/* Accessor function to mimic the original macro behavior */\nstatic inline OS_stream_internal_record_t *OS_OBJECT_TABLE_GET(OS_stream_internal_record_t *table, int idx)\n{\n    if (idx < 0 || idx >= (int)(sizeof(OS_stream_table) / sizeof(OS_stream_table[0])))\n    {\n        return NULL;\n    }\n    return &OS_stream_table[idx];\n}\n\n/* Simple logging helper that appends text to /tmp/logs/1363.txt */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Minimal stubs for the OS functions used by OS_rename so this unit can be compiled and exercised\n   by a test harness. These stubs maintain the same return semantics as the originals for testing. */\nstatic int32 OS_TranslatePath(const char *path, char *local_path)\n{\n    if (path == NULL || local_path == NULL)\n    {\n        return -1;\n    }\n    /* Copy the path into local buffer for the simulation. */\n    strncpy(local_path, path, OS_MAX_LOCAL_PATH_LEN - 1);\n    local_path[OS_MAX_LOCAL_PATH_LEN - 1] = '\\0';\n\n    log_probe(\"OS_TranslatePath: input='%s' translated='%s'\", path, local_path);\n    return OS_SUCCESS;\n}\n\nstatic int32 OS_FileRename_Impl(const char *old_path, const char *new_path)\n{\n    /* Simulate a successful rename and log it. */\n    log_probe(\"OS_FileRename_Impl: old_path='%s' new_path='%s'\", old_path, new_path);\n    return OS_SUCCESS;\n}\n\n/* Iterator stubs: iterate over indices 0..N-1 of the OS_stream_table */\nstatic void OS_ObjectIdIterateActive(int type, OS_object_iter_t *iter)\n{\n    (void)type;\n    if (iter != NULL)\n    {\n        iter->token = -1; /* will be incremented on first GetNext call */\n    }\n    log_probe(\"OS_ObjectIdIterateActive: started iteration for type=%d\", type);\n}\n\nstatic int OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter)\n{\n    if (iter == NULL)\n    {\n        return 0;\n    }\n\n    iter->token++;\n    if (iter->token < (int)(sizeof(OS_stream_table) / sizeof(OS_stream_table[0])))\n    {\n        log_probe(\"OS_ObjectIdIteratorGetNext: advancing to token=%d\", iter->token);\n        return 1;\n    }\n\n    log_probe(\"OS_ObjectIdIteratorGetNext: no more elements (token=%d)\", iter->token);\n    return 0;\n}\n\nstatic void OS_ObjectIdIteratorDestroy(OS_object_iter_t *iter)\n{\n    (void)iter;\n    log_probe(\"OS_ObjectIdIteratorDestroy: iterator destroyed\");\n}\n\n/* The OS_rename function with inserted probes that log control-flow and state relevant to\n   the reported violation scenario. The original logic is preserved. */\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[256];\n    char                         new_path[256];\n\n    log_probe(\"OS_rename: entry old='%s' new='%s'\", old ? old : \"(null)\", new ? new : \"(null)\");\n\n    return_code = OS_TranslatePath(old, old_path);\n    log_probe(\"OS_rename: after OS_TranslatePath(old) return_code=%d old_path='%s'\", return_code, old_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        log_probe(\"OS_rename: after OS_TranslatePath(new) return_code=%d new_path='%s'\", return_code, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        log_probe(\"OS_rename: after OS_FileRename_Impl return_code=%d\", return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream == NULL)\n            {\n                log_probe(\"OS_rename: stream is NULL for token=%d\", iter.token);\n                continue;\n            }\n\n            log_probe(\"OS_rename: inspecting stream token=%d socket_domain=%d stream_name='%s'\",\n                      iter.token, stream->socket_domain, stream->stream_name);\n\n            /* The reported violation involves storing const pointers into void *arg fields elsewhere.\n               Here we log the condition that triggers a name update to provide evidence of control flow. */\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                char before_name[sizeof(stream->stream_name)];\n                strncpy(before_name, stream->stream_name, sizeof(before_name) - 1);\n                before_name[sizeof(before_name) - 1] = '\\0';\n\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = '\\0';\n\n                log_probe(\"OS_rename: stream token=%d matched old name. before='%s' after='%s'\",\n                          iter.token, before_name, stream->stream_name);\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    log_probe(\"OS_rename: exit return_code=%d\", return_code);\n    return return_code;\n}\n"
}