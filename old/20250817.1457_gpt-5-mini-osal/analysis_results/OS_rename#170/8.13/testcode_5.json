{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdIteratorGetNext, the local variable 'record' is only used to read fields (e.g. record->active_id) and is not modified in this function. It is declared as 'OS_common_record_t *record;' (pointer to mutable data) even though the pointed-to object is only accessed immutably here \u2014 therefore it could and should be declared 'const OS_common_record_t *record'. The lack of const-qualification violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1363.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logger: append diagnostic information to /tmp/logs/1363.txt */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    os_probe_log(\"OS_rename: start old='%s' new='%s'\", old ? old : \"(null)\", new ? new : \"(null)\");\n\n    return_code = OS_TranslatePath(old, old_path);\n    os_probe_log(\"OS_rename: OS_TranslatePath(old) -> return_code=%d old_path='%s'\", return_code, (return_code == OS_SUCCESS) ? old_path : \"\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        os_probe_log(\"OS_rename: OS_TranslatePath(new) -> return_code=%d new_path='%s'\", return_code, (return_code == OS_SUCCESS) ? new_path : \"\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        os_probe_log(\"OS_rename: OS_FileRename_Impl('%s','%s') -> return_code=%d\", old_path, new_path, return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        os_probe_log(\"OS_rename: starting object iteration for potential stream renames\");\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            /* Probe: capture iterator token before table access */\n            os_probe_log(\"OS_rename: iterator advanced, token=%u\", (unsigned int)iter.token);\n\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            /* Probe: record current stream state */\n            if (stream != NULL)\n            {\n                os_probe_log(\"OS_rename: stream ptr=%p socket_domain=%d stream_name='%s'\", (void *)stream, (int)stream->socket_domain, stream->stream_name);\n            }\n            else\n            {\n                os_probe_log(\"OS_rename: OS_OBJECT_TABLE_GET returned NULL for token=%u\", (unsigned int)iter.token);\n            }\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                char prev_name[sizeof(stream->stream_name)];\n                /* capture previous name for logging */\n                strncpy(prev_name, stream->stream_name, sizeof(prev_name) - 1);\n                prev_name[sizeof(prev_name) - 1] = '\\0';\n\n                os_probe_log(\"OS_rename: stream token=%u matched old name '%s' -> performing rename to '%s'\", (unsigned int)iter.token, prev_name, new);\n\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                os_probe_log(\"OS_rename: stream token=%u rename complete, new stream_name='%s'\", (unsigned int)iter.token, stream->stream_name);\n            }\n            else\n            {\n                /* Log why we didn't rename this stream */\n                if (stream != NULL)\n                {\n                    if (stream->socket_domain != OS_SocketDomain_INVALID)\n                    {\n                        os_probe_log(\"OS_rename: token=%u skipped: socket_domain=%d (not INVALID)\", (unsigned int)iter.token, (int)stream->socket_domain);\n                    }\n                    else\n                    {\n                        os_probe_log(\"OS_rename: token=%u skipped: name '%s' does not match old '%s'\", (unsigned int)iter.token, stream->stream_name, old);\n                    }\n                }\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        os_probe_log(\"OS_rename: object iterator destroyed\");\n    }\n\n    os_probe_log(\"OS_rename: end return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}