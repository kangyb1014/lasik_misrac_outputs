{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator structure member 'base' is declared as a non-const pointer: 'OS_common_record_t * base;'. In the shown code this pointer is only used to read records (via OS_OBJECT_TABLE_GET in OS_ObjectIdIteratorGetNext and passed to match functions), so it could and should be declared as 'const OS_common_record_t * base'. Because the pointer is not const-qualified, it violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1363.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n\n/* Small logging helper that appends to the evidence file. Kept static to limit scope. */\nstatic void os_1363_log_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and input parameters */\n    os_1363_log_printf(\"OS_rename ENTRY: old='%s' new='%s'\", old ? old : \"(null)\", new ? new : \"(null)\");\n\n    return_code = OS_TranslatePath(old, old_path);\n    os_1363_log_printf(\"OS_TranslatePath(old) => return_code=%d old_path='%s'\", (int)return_code, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        os_1363_log_printf(\"OS_TranslatePath(new) => return_code=%d new_path='%s'\", (int)return_code, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        os_1363_log_printf(\"OS_FileRename_Impl('%s','%s') => return_code=%d\", old_path, new_path, (int)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Start iterating object IDs of the local object type */\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        /* Log iterator start state. Attempt to record iterator internals (token and base) so behavior can be reproduced.\n         * Note: accessing iter.base is intentional to capture runtime pointer values related to the reported rule violation\n         * (pointer here is not const-qualified in the original code). This preserves original logic and only reads state. */\n        os_1363_log_printf(\"OS_rename: iterator started: iter_addr=%p token=%u base=%p\", (void *)&iter, (unsigned)iter.token, (void *)iter.base);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            /* Log stream lookup result and key fields used by the comparison/rename logic */\n            os_1363_log_printf(\"OS_rename: iter.token=%u stream_ptr=%p stream_name='%s' socket_domain=%d\", (unsigned)iter.token, (void *)stream, stream ? stream->stream_name : \"(null)\", (int)(stream ? stream->socket_domain : -1));\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                /* Log the rename action on this stream record */\n                os_1363_log_printf(\"OS_rename: renaming stream at token=%u from '%s' to '%s'\", (unsigned)iter.token, stream->stream_name, new);\n\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                /* Log post-update state */\n                os_1363_log_printf(\"OS_rename: post-update stream_name='%s'\", stream->stream_name);\n            }\n            else\n            {\n                /* Log why a stream entry was skipped */\n                if (stream->socket_domain != OS_SocketDomain_INVALID)\n                {\n                    os_1363_log_printf(\"OS_rename: skipping token=%u because socket_domain=%d\", (unsigned)iter.token, (int)stream->socket_domain);\n                }\n                else\n                {\n                    os_1363_log_printf(\"OS_rename: skipping token=%u because name mismatch (current='%s' expected='%s')\", (unsigned)iter.token, stream->stream_name, old);\n                }\n            }\n        }\n\n        os_1363_log_printf(\"OS_rename: iterator destroy: iter_addr=%p token=%u\", (void *)&iter, (unsigned)iter.token);\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    os_1363_log_printf(\"OS_rename EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}