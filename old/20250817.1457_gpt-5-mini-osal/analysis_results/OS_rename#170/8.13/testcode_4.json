{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts a const char * (VirtualPath) to void * when calling OS_ObjectIdGetBySearch: (void *)VirtualPath. This discards the const qualifier and passes a pointer to a non-const type, which violates MISRA C 2023 Rule 8.13. The correct fix is to avoid discarding const (e.g. change the callee to accept const void * or pass a non-const object), or otherwise ensure the const qualifier is preserved.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1363.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rename code.\n",
  "test_code": "int32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n    FILE                        *log = NULL;\n\n    /* Open probe log file to capture control flow and state for analysis */\n    log = fopen(\"/tmp/logs/1363.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"OS_rename called: old=%p \\\"%s\\\" new=%p \\\"%s\\\"\\n\", (const void *)old, old ? old : \"(null)\", (const void *)new, new ? new : \"(null)\");\n    }\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (log)\n    {\n        fprintf(log, \"After OS_TranslatePath(old): return_code=%d old_path=\\\"%s\\\"\\n\", (int)return_code, return_code == OS_SUCCESS ? old_path : \"(invalid)\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        if (log)\n        {\n            fprintf(log, \"After OS_TranslatePath(new): return_code=%d new_path=\\\"%s\\\"\\n\", (int)return_code, return_code == OS_SUCCESS ? new_path : \"(invalid)\");\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"Calling OS_FileRename_Impl with old_path=\\\"%s\\\" new_path=\\\"%s\\\"\\n\", old_path, new_path);\n        }\n\n        return_code = OS_FileRename_Impl(old_path, new_path);\n\n        if (log)\n        {\n            fprintf(log, \"After OS_FileRename_Impl: return_code=%d\\n\", (int)return_code);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (log)\n        {\n            fprintf(log, \"OS_FileRename_Impl succeeded, iterating object table for LOCAL_OBJID_TYPE\\n\");\n        }\n\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (log)\n            {\n                /* Log each inspected stream: token, pointer, domain, and name */\n                fprintf(log, \"Inspecting stream token=%u stream_ptr=%p socket_domain=%d stream_name=\\\"%s\\\"\\n\",\n                        (unsigned int)iter.token, (const void *)stream, (int)stream->socket_domain,\n                        stream->stream_name[0] ? stream->stream_name : \"(empty)\");\n            }\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                if (log)\n                {\n                    fprintf(log, \"Match found: stream->stream_name equals old. Preparing to update stream_name to new (new=%p \\\"%s\\\").\\n\",\n                            (const void *)new, new ? new : \"(null)\");\n                    fprintf(log, \"Before strncpy: stream_ptr=%p stream_name_addr=%p old_addr=%p new_addr=%p\\n\",\n                            (const void *)stream, (void *)stream->stream_name, (const void *)old, (const void *)new);\n                }\n\n                /* Preserve existing behavior: copy new name into stream->stream_name */\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                if (log)\n                {\n                    fprintf(log, \"After strncpy: stream->stream_name=\\\"%s\\\"\\n\", stream->stream_name);\n                }\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n\n        if (log)\n        {\n            fprintf(log, \"Finished iterating object table.\\n\");\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_rename returning return_code=%d\\n\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}