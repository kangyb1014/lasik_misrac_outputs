{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe union member opaque_arg is declared as void * but in the shown usage it only carries the pthread entry argument and is never used to modify the pointed-to object (OS_PthreadTaskEntry assigns arg to local_arg.opaque_arg and the code never dereferences it). Because the pointer could (and should) be const-qualified (e.g. const void *opaque_arg) to indicate the pointee is not modified, the current declaration violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_PthreadTaskEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/483.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_PthreadTaskEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_PthreadTaskEntry:\n```c\nstatic void *OS_PthreadTaskEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n    OS_TaskEntryPoint(local_arg.id); /* Never returns */\n\n    return NULL;\n}\n```\n</target_code>\nPlease provide the modified OS_PthreadTaskEntry code.\n",
  "test_code": "#include <stdio.h>\n\nstatic void OS_LogPthreadProbe(const char *event, void *arg)\n{\n    FILE *f = fopen(\"/tmp/logs/483.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log the event name, pointer value and whether it is NULL. */\n        fprintf(f, \"[OS_PthreadTaskEntry] %s: arg=%p is_null=%d\\n\",\n                event,\n                arg,\n                (arg == NULL) ? 1 : 0);\n        fflush(f);\n        fclose(f);\n    }\n}\n\nstatic void *OS_PthreadTaskEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* Log entry and initial argument value. */\n    OS_LogPthreadProbe(\"entry\", arg);\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n\n    /* Log after assignment to the union member. This shows the pointer is\n       carried through but not dereferenced here (supporting the reported\n       scenario that the pointee is not modified). */\n    OS_LogPthreadProbe(\"after_assign_opaque_arg\", local_arg.opaque_arg);\n\n    /* Log right before transferring control to OS_TaskEntryPoint. */\n    OS_LogPthreadProbe(\"before_OS_TaskEntryPoint\", local_arg.opaque_arg);\n\n    OS_TaskEntryPoint(local_arg.id); /* Never returns */\n\n    /* This point should be unreachable; log if execution ever continues. */\n    OS_LogPthreadProbe(\"after_OS_TaskEntryPoint_unreachable\", arg);\n\n    return NULL;\n}\n"
}