{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nstatic void *OS_PthreadTaskEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n\n    /* Prototypes for stdio functions to avoid requiring includes in this snippet. */\n    struct FILE;\n    extern struct FILE *fopen(const char *filename, const char *mode);\n    extern int fprintf(struct FILE *stream, const char *format, ...);\n    extern int fflush(struct FILE *stream);\n    extern int fclose(struct FILE *stream);\n\n    /* Open log file (append). If directory doesn't exist, fopen will return NULL. */\n    struct FILE *log = fopen(\"/tmp/logs/481.txt\", \"a\");\n    if (log != (struct FILE *)0)\n    {\n        /* Log entry with the argument pointer and the task id value. */\n        (void)fprintf(log, \"OS_PthreadTaskEntry: enter, arg=%p, local_arg.id=%lu\\n\",\n                      arg, (unsigned long)local_arg.id);\n        (void)fflush(log);\n    }\n\n    OS_TaskEntryPoint(local_arg.id); /* Never returns */\n\n    /* If control reaches here, the documented contract was violated; log evidence. */\n    if (log != (struct FILE *)0)\n    {\n        (void)fprintf(log, \"OS_PthreadTaskEntry: returned from OS_TaskEntryPoint unexpectedly\\n\");\n        (void)fclose(log);\n    }\n\n    return NULL;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp8s88_a_e/src/src/os/posix/src/os-impl-tasks.c: In function 'OS_PthreadTaskEntry':\n/tmp/tmp8s88_a_e/src/src/os/posix/src/os-impl-tasks.c:128:25: error: conflicting types for 'fopen'; have 'struct FILE *(const char *, const char *)'\n  128 |     extern struct FILE *fopen(const char *filename, const char *mode);\n      |                         ^~~~~\nIn file included from /tmp/tmp8s88_a_e/src/src/os/posix/src/os-impl-tasks.c:1:\n/usr/include/stdio.h:258:14: note: previous declaration of 'fopen' with type 'FILE *(const char * restrict,  const char * restrict)'\n  258 | extern FILE *fopen (const char *__restrict __filename,\n      |              ^~~~~\n/tmp/tmp8s88_a_e/src/src/os/posix/src/os-impl-tasks.c:129:16: error: conflicting types for 'fprintf'; have 'int(struct FILE *, const char *, ...)'\n  129 |     extern int fprintf(struct FILE *stream, const char *format, ...);\n      |                ^~~~~~~\nIn file included from /tmp/tmp8s88_a_e/src/src/os/posix/src/os-impl-tasks.c:1:\n/usr/include/stdio.h:350:12: note: previous declaration of 'fprintf' with type 'int(FILE * restrict,  const char * restrict, ...)'\n  350 | extern int fprintf (FILE *__restrict __stream,\n      |            ^~~~~~~\n/tmp/tmp8s88_a_e/src/src/os/posix/src/os-impl-tasks.c:130:16: error: conflicting types for 'fflush'; have 'int(struct FILE *)'\n  130 |     extern int fflush(struct FILE *stream);\n      |                ^~~~~~\nIn file included from /tmp/tmp8s88_a_e/src/src/os/posix/src/os-impl-tasks.c:1:\n/usr/include/stdio.h:230:12: note: previous declaration of 'fflush' with type 'int(FILE *)'\n  230 | extern int fflush (FILE *__stream);\n      |            ^~~~~~\n/tmp/tmp8s88_a_e/src/src/os/posix/src/os-impl-tasks.c:131:16: error: conflicting types for 'fclose'; have 'int(struct FILE *)'\n  131 |     extern int fclose(struct FILE *stream);\n      |                ^~~~~~\nIn file included from /tmp/tmp8s88_a_e/src/src/os/posix/src/os-impl-tasks.c:1:\n/usr/include/stdio.h:178:12: note: previous declaration of 'fclose' with type 'int(FILE *)'\n  178 | extern int fclose (FILE *__stream);\n      |            ^~~~~~\ngmake[2]: *** [posix_impl/CMakeFiles/osal_posix_impl.dir/build.make:258: posix_impl/CMakeFiles/osal_posix_impl.dir/src/os-impl-tasks.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:919: posix_impl/CMakeFiles/osal_posix_impl.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_PthreadTaskEntry as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "/* Fixed version of OS_PthreadTaskEntry - removes conflicting manual stdio prototypes */\n\n#include <stdio.h>\n\n/* Minimal type declaration used by this snippet. The real project provides this. */\ntypedef union {\n    void *opaque_arg;\n    unsigned long id;\n} OS_VoidPtrValueWrapper_t;\n\n/* Prototype for the real task entry point (implemented elsewhere). */\nextern void OS_TaskEntryPoint(unsigned long id);\n\nstatic void *OS_PthreadTaskEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n\n    /* Open log file (append). If directory doesn't exist, fopen will return NULL. */\n    FILE *log = fopen(\"/tmp/logs/481.txt\", \"a\");\n    if (log != NULL)\n    {\n        /* Log entry with the argument pointer and the task id value. */\n        (void)fprintf(log, \"OS_PthreadTaskEntry: enter, arg=%p, local_arg.id=%lu\\n\",\n                      arg, (unsigned long)local_arg.id);\n        (void)fflush(log);\n    }\n\n    OS_TaskEntryPoint(local_arg.id); /* Never returns */\n\n    /* If control reaches here, the documented contract was violated; log evidence. */\n    if (log != NULL)\n    {\n        (void)fprintf(log, \"OS_PthreadTaskEntry: returned from OS_TaskEntryPoint unexpectedly\\n\");\n        (void)fclose(log);\n    }\n\n    return NULL;\n}\n",
  "explanation": "The original code declared its own prototypes for fopen/fprintf/fflush/fclose using struct FILE, which conflicted with the standard declarations in <stdio.h>. I removed those manual prototypes and included <stdio.h> so the standard FILE type and function declarations are used. I also added a minimal definition of OS_VoidPtrValueWrapper_t and an extern prototype for OS_TaskEntryPoint so the snippet compiles standalone while preserving the original logic."
}