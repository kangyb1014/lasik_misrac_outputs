{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe statement 'return NULL;' at the end of OS_PthreadTaskEntry is unreachable. OS_PthreadTaskEntry calls OS_TaskEntryPoint(local_arg.id), which (via OS_TaskExit \u2192 OS_TaskExit_Impl) is documented/implemented to never return. Therefore execution cannot reach the subsequent return statement, violating MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_PthreadTaskEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/481.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_PthreadTaskEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_PthreadTaskEntry:\n```c\nstatic void *OS_PthreadTaskEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n    OS_TaskEntryPoint(local_arg.id); /* Never returns */\n\n    return NULL;\n}\n```\n</target_code>\nPlease provide the modified OS_PthreadTaskEntry code.\n",
  "test_code": "static void *OS_PthreadTaskEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n\n    /* Prototypes for stdio functions to avoid requiring includes in this snippet. */\n    struct FILE;\n    extern struct FILE *fopen(const char *filename, const char *mode);\n    extern int fprintf(struct FILE *stream, const char *format, ...);\n    extern int fflush(struct FILE *stream);\n    extern int fclose(struct FILE *stream);\n\n    /* Open log file (append). If directory doesn't exist, fopen will return NULL. */\n    struct FILE *log = fopen(\"/tmp/logs/481.txt\", \"a\");\n    if (log != (struct FILE *)0)\n    {\n        /* Log entry with the argument pointer and the task id value. */\n        (void)fprintf(log, \"OS_PthreadTaskEntry: enter, arg=%p, local_arg.id=%lu\\n\",\n                      arg, (unsigned long)local_arg.id);\n        (void)fflush(log);\n    }\n\n    OS_TaskEntryPoint(local_arg.id); /* Never returns */\n\n    /* If control reaches here, the documented contract was violated; log evidence. */\n    if (log != (struct FILE *)0)\n    {\n        (void)fprintf(log, \"OS_PthreadTaskEntry: returned from OS_TaskEntryPoint unexpectedly\\n\");\n        (void)fclose(log);\n    }\n\n    return NULL;\n}"
}