{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe loop iterates i from 0 through VOLATILE_DISK_LOC_MAX inclusive. The enum defines VOLATILE_DISK_LOC_MAX as a sentinel value (one past the valid cases 0..3). The switch only handles cases 0..3; when i == VOLATILE_DISK_LOC_MAX the default branch executes and simply sets tmpdir = NULL. That assignment/iteration is redundant (tmpdir was initialized to NULL and nothing else relies on this extra iteration), so the executed operation could be removed without changing program behaviour. This is dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysAddFixedMap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1386.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysAddFixedMap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysAddFixedMap:\n```c\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysAddFixedMap code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logger: append textual logs to /tmp/logs/1386.txt */\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1386.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fclose(f);\n    }\n}\n\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    os_log_probe(\"OS_FileSysAddFixedMap: ENTRY filesys_id=%p phys_path=%s virt_path=%s\\n\",\n                 (void *)filesys_id,\n                 (phys_path != NULL) ? phys_path : \"(null)\",\n                 (virt_path != NULL) ? virt_path : \"(null)\");\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n        os_log_probe(\"OS_FileSysAddFixedMap: dev_name set to phys_path (no '/') -> %s\\n\", dev_name);\n    }\n    else\n    {\n        ++dev_name;\n        os_log_probe(\"OS_FileSysAddFixedMap: dev_name extracted after last '/' -> %s\\n\", dev_name);\n    }\n\n    /* Note: sizeof(filesys->volume_name) is a compile-time sizeof, filesys not dereferenced */\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        os_log_probe(\"OS_FileSysAddFixedMap: dev_name length >= %zu -> returning OS_ERR_NAME_TOO_LONG\\n\",\n                     sizeof(filesys->volume_name));\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    os_log_probe(\"OS_FileSysAddFixedMap: calling OS_ObjectIdAllocateNew with name='%s'\\n\", dev_name);\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    os_log_probe(\"OS_FileSysAddFixedMap: OS_ObjectIdAllocateNew returned %ld token=%u\\n\",\n                 (long)return_code, (unsigned)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        os_log_probe(\"OS_FileSysAddFixedMap: allocated filesys table entry at %p (token=%u)\\n\",\n                     (void *)filesys, (unsigned)token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        filesys->volume_name[sizeof(filesys->volume_name) - 1] = '\\0';\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        filesys->system_mountpt[sizeof(filesys->system_mountpt) - 1] = '\\0';\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n        filesys->virtual_mountpt[sizeof(filesys->virtual_mountpt) - 1] = '\\0';\n\n        os_log_probe(\"OS_FileSysAddFixedMap: filesys->volume_name='%s' system_mountpt='%s' virtual_mountpt='%s'\\n\",\n                     filesys->volume_name, filesys->system_mountpt, filesys->virtual_mountpt);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        os_log_probe(\"OS_FileSysAddFixedMap: marked fstype=%d flags=0x%08x\\n\",\n                     (int)filesys->fstype, (unsigned)filesys->flags);\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        os_log_probe(\"OS_FileSysAddFixedMap: calling OS_FileSysStartVolume_Impl token=%u\\n\", (unsigned)token);\n        return_code = OS_FileSysStartVolume_Impl(&token);\n        os_log_probe(\"OS_FileSysAddFixedMap: OS_FileSysStartVolume_Impl returned %ld\\n\", (long)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            os_log_probe(\"OS_FileSysAddFixedMap: set IS_READY flag -> flags=0x%08x\\n\", (unsigned)filesys->flags);\n            return_code = OS_FileSysMountVolume_Impl(&token);\n            os_log_probe(\"OS_FileSysAddFixedMap: OS_FileSysMountVolume_Impl returned %ld\\n\", (long)return_code);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n            os_log_probe(\"OS_FileSysAddFixedMap: set MOUNTED_SYSTEM and MOUNTED_VIRTUAL -> flags=0x%08x\\n\",\n                         (unsigned)filesys->flags);\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        os_log_probe(\"OS_FileSysAddFixedMap: calling OS_ObjectIdFinalizeNew(return_code=%ld) token=%u\\n\",\n                     (long)return_code, (unsigned)token);\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n        os_log_probe(\"OS_FileSysAddFixedMap: OS_ObjectIdFinalizeNew returned %ld final_filesys_id=%p\\n\",\n                     (long)return_code, (void *)filesys_id);\n\n        /* Final state of filesys (if allocated) */\n        os_log_probe(\"OS_FileSysAddFixedMap: FINAL filesys ptr=%p volume_name='%s' flags=0x%08x fstype=%d\\n\",\n                     (void *)filesys,\n                     filesys->volume_name,\n                     (unsigned)filesys->flags,\n                     (int)filesys->fstype);\n    }\n    else\n    {\n        os_log_probe(\"OS_FileSysAddFixedMap: allocation failed, returning %ld\\n\", (long)return_code);\n    }\n\n    os_log_probe(\"OS_FileSysAddFixedMap: EXIT returning %ld\\n\", (long)return_code);\n\n    return return_code;\n}\n"
}