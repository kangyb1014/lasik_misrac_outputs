{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memchr(dev_name, 0, sizeof(filesys->volume_name)) can read beyond the end of the phys_path buffer because dev_name points into phys_path (a substring/basename) and the search length used (sizeof(filesys->volume_name)) is unrelated to the remaining number of bytes from dev_name to the end of phys_path. Example: if sizeof(filesys->volume_name) == 20, phys_path == \"/some/short\" (length 11), and dev_name points to the basename at offset 5, then only 6 bytes (including the terminator) remain from dev_name but memchr is asked to read 20 bytes \u2014 this can access memory beyond phys_path and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysAddFixedMap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1391.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysAddFixedMap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysAddFixedMap:\n```c\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysAddFixedMap code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: write log lines about the relevant state to /tmp/logs/1391.txt */\nstatic void OS_FileSysAddFixedMap_LogState(const char *stage, const char *phys_path, const char *dev_name)\n{\n    FILE *f = fopen(\"/tmp/logs/1391.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    size_t phys_len = phys_path ? strlen(phys_path) : 0U;\n    ptrdiff_t dev_offset = -1;\n    size_t remaining = 0U;\n\n    if (phys_path != NULL && dev_name != NULL)\n    {\n        dev_offset = dev_name - phys_path;\n        if (dev_offset >= 0 && (size_t)dev_offset <= phys_len)\n        {\n            /* remaining bytes including the terminating NUL */\n            remaining = phys_len - (size_t)dev_offset + 1U;\n        }\n    }\n\n    /* sizeof the volume_name member as used in the original code (compile-time) */\n    size_t volname_size = sizeof(((OS_filesys_internal_record_t *)0)->volume_name);\n\n    fprintf(f, \"[OS_FileSysAddFixedMap] %s\\n\", stage);\n    fprintf(f, \"  phys_path='%s'\\n\", phys_path ? phys_path : \"(null)\");\n    fprintf(f, \"  phys_len=%zu\\n\", phys_len);\n    fprintf(f, \"  dev_name='%s'\\n\", dev_name ? dev_name : \"(null)\");\n    fprintf(f, \"  dev_offset=%td\\n\", dev_offset);\n    fprintf(f, \"  remaining_bytes_including_nul=%zu\\n\", remaining);\n    fprintf(f, \"  sizeof(volume_name)=%zu\\n\", volname_size);\n\n    if (remaining != 0U && volname_size > remaining)\n    {\n        fprintf(f, \"  WARNING: memchr will be invoked with length=%zu which is > remaining=%zu -> POTENTIAL OOB READ\\n\", volname_size, remaining);\n    }\n    else if (remaining == 0U && phys_path != NULL && dev_name != NULL)\n    {\n        fprintf(f, \"  NOTE: unable to determine remaining bytes (dev_offset invalid)\\n\");\n    }\n    else\n    {\n        fprintf(f, \"  memchr length appears safe relative to remaining bytes\\n\");\n    }\n\n    fclose(f);\n}\n\nstatic void OS_FileSysAddFixedMap_LogMemchrResult(const char *phys_path, const char *dev_name, const void *res, size_t check_len)\n{\n    FILE *f = fopen(\"/tmp/logs/1391.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    if (res == NULL)\n    {\n        fprintf(f, \"  memchr(ptr=dev_name, ch=0, len=%zu) returned NULL -> name terminator not found within provided length\\n\", check_len);\n    }\n    else\n    {\n        ptrdiff_t pos = -1;\n        if (phys_path != NULL && dev_name != NULL)\n        {\n            /* If res is inside the phys_path region, compute offset; otherwise print pointer value */\n            pos = (const char *)res - dev_name;\n        }\n        fprintf(f, \"  memchr returned non-NULL (offset from dev_name=%td)\\n\", pos);\n    }\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    /* Log state before the memchr that is potentially problematic */\n    OS_FileSysAddFixedMap_LogState(\"before_memchr\", phys_path, dev_name);\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        /* Log memchr result (NULL) for evidence */\n        OS_FileSysAddFixedMap_LogMemchrResult(phys_path, dev_name, NULL, sizeof(filesys->volume_name));\n        return OS_ERR_NAME_TOO_LONG;\n    }\n    else\n    {\n        /* Log memchr success for evidence */\n        /* We call memchr again simply to capture the returned pointer for the log; this mirrors the original call\n           but does not change program logic because the original call already occurred. */\n        const void *mres = memchr(dev_name, 0, sizeof(filesys->volume_name));\n        OS_FileSysAddFixedMap_LogMemchrResult(phys_path, dev_name, mres, sizeof(filesys->volume_name));\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n    }\n\n    return return_code;\n}\n"
}