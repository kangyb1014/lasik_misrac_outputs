{
  "user_message": "An agent A claimed that the following OS_FileSysAddFixedMap code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileSysAddFixedMap.\n```c\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The call memchr(dev_name, 0, sizeof(filesys->volume_name)) can read beyond the end of the phys_path buffer because dev_name points into phys_path (a substring/basename) and the search length used (sizeof(filesys->volume_name)) is unrelated to the remaining number of bytes from dev_name to the end of phys_path. Example: if sizeof(filesys->volume_name) == 20, phys_path == \"/some/short\" (length 11), and dev_name points to the basename at offset 5, then only 6 bytes (including the terminator) remain from dev_name but memchr is asked to read 20 bytes \u2014 this can access memory beyond phys_path and thus violates MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_FileSysAddFixedMap_LogState(const char *stage, const char *phys_path, const char *dev_name)\n{\n    FILE *f = fopen(\"/tmp/logs/1391.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    size_t phys_len = phys_path ? strlen(phys_path) : 0U;\n    ptrdiff_t dev_offset = -1;\n    size_t remaining = 0U;\n\n    if (phys_path != NULL && dev_name != NULL)\n    {\n        dev_offset = dev_name - phys_path;\n        if (dev_offset >= 0 && (size_t)dev_offset <= phys_len)\n        {\n            /* remaining bytes including the terminating NUL */\n            remaining = phys_len - (size_t)dev_offset + 1U;\n        }\n    }\n\n    /* sizeof the volume_name member as used in the original code (compile-time) */\n    size_t volname_size = sizeof(((OS_filesys_internal_record_t *)0)->volume_name);\n\n    fprintf(f, \"[OS_FileSysAddFixedMap] %s\\n\", stage);\n    fprintf(f, \"  phys_path='%s'\\n\", phys_path ? phys_path : \"(null)\");\n    fprintf(f, \"  phys_len=%zu\\n\", phys_len);\n    fprintf(f, \"  dev_name='%s'\\n\", dev_name ? dev_name : \"(null)\");\n    fprintf(f, \"  dev_offset=%td\\n\", dev_offset);\n    fprintf(f, \"  remaining_bytes_including_nul=%zu\\n\", remaining);\n    fprintf(f, \"  sizeof(volume_name)=%zu\\n\", volname_size);\n\n    if (remaining != 0U && volname_size > remaining)\n    {\n        fprintf(f, \"  WARNING: memchr will be invoked with length=%zu which is > remaining=%zu -> POTENTIAL OOB READ\\n\", volname_size, remaining);\n    }\n    else if (remaining == 0U && phys_path != NULL && dev_name != NULL)\n    {\n        fprintf(f, \"  NOTE: unable to determine remaining bytes (dev_offset invalid)\\n\");\n    }\n    else\n    {\n        fprintf(f, \"  memchr length appears safe relative to remaining bytes\\n\");\n    }\n\n    fclose(f);\n}\nstatic void OS_FileSysAddFixedMap_LogMemchrResult(const char *phys_path, const char *dev_name, const void *res, size_t check_len)\n{\n    FILE *f = fopen(\"/tmp/logs/1391.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    if (res == NULL)\n    {\n        fprintf(f, \"  memchr(ptr=dev_name, ch=0, len=%zu) returned NULL -> name terminator not found within provided length\\n\", check_len);\n    }\n    else\n    {\n        ptrdiff_t pos = -1;\n        if (phys_path != NULL && dev_name != NULL)\n        {\n            /* If res is inside the phys_path region, compute offset; otherwise print pointer value */\n            pos = (const char *)res - dev_name;\n        }\n        fprintf(f, \"  memchr returned non-NULL (offset from dev_name=%td)\\n\", pos);\n    }\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    /* Log state before the memchr that is potentially problematic */\n    OS_FileSysAddFixedMap_LogState(\"before_memchr\", phys_path, dev_name);\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        /* Log memchr result (NULL) for evidence */\n        OS_FileSysAddFixedMap_LogMemchrResult(phys_path, dev_name, NULL, sizeof(filesys->volume_name));\n        return OS_ERR_NAME_TOO_LONG;\n    }\n    else\n    {\n        /* Log memchr success for evidence */\n        /* We call memchr again simply to capture the returned pointer for the log; this mirrors the original call\n           but does not change program logic because the original call already occurred. */\n        const void *mres = memchr(dev_name, 0, sizeof(filesys->volume_name));\n        OS_FileSysAddFixedMap_LogMemchrResult(phys_path, dev_name, mres, sizeof(filesys->volume_name));\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_FileSysAddFixedMap. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The call memchr(dev_name, 0, sizeof(filesys->volume_name)) uses a length that is unrelated to the remaining bytes in the phys_path buffer starting at dev_name. dev_name points into phys_path (either phys_path or a position inside it returned by strrchr), so memchr will read up to the given length from that pointer. If sizeof(filesys->volume_name) is larger than the number of bytes remaining (including the terminating NUL) from dev_name to the end of the phys_path object, memchr will access memory beyond the bounds of phys_path. That is exactly the kind of out\u2011of\u2011bounds access forbidden by MISRA C 2023 Rule 21.17. The example scenario given (small phys_path, dev_name at an offset, volname size larger than remaining bytes) shows this clearly. To be safe the code must limit the memchr length to the actual remaining size (e.g. using the remaining bytes or strnlen on dev_name) rather than sizeof(filesys->volume_name)."
}