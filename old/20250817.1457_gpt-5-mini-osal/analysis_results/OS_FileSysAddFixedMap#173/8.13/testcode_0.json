{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts away the const qualifier: (void *)name where name is declared as const char * in OS_ObjectIdAllocateNew. This passes a pointer to const-qualified data as a plain void * to OS_ObjectIdFindNextMatch, potentially allowing modification and violating the requirement that pointers should point to const-qualified types when possible. The correct fix is to change the callee to accept a const void * (or avoid the cast).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysAddFixedMap code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1387.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysAddFixedMap as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysAddFixedMap:\n```c\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        return_code = OS_FileSysStartVolume_Impl(&token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysAddFixedMap code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/*\n * Probe logging helper. Keeps logs of control flow and key state\n * to /tmp/logs/1387.txt so other agents can reproduce the scenario.\n * Does not change program logic or types; only records string and\n * pointer information. Uses only const-qualified parameters for pointers.\n */\nstatic void OSFS_LogState(const char *stage,\n                          const char *dev_name,\n                          const char *phys_path,\n                          const char *virt_path,\n                          int return_code,\n                          const void *token_ptr,\n                          const void *filesys_id_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/1387.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_FileSysAddFixedMap] stage=%s\\n\", stage);\n    if (dev_name != NULL)\n    {\n        fprintf(f, \"  dev_name='%s'\\n\", dev_name);\n    }\n    else\n    {\n        fprintf(f, \"  dev_name=(null)\\n\");\n    }\n\n    if (phys_path != NULL)\n    {\n        fprintf(f, \"  phys_path='%s'\\n\", phys_path);\n    }\n    else\n    {\n        fprintf(f, \"  phys_path=(null)\\n\");\n    }\n\n    if (virt_path != NULL)\n    {\n        fprintf(f, \"  virt_path='%s'\\n\", virt_path);\n    }\n    else\n    {\n        fprintf(f, \"  virt_path=(null)\\n\");\n    }\n\n    fprintf(f, \"  return_code=%d\\n\", return_code);\n    fprintf(f, \"  token_ptr=%p\\n\", token_ptr);\n    fprintf(f, \"  filesys_id_ptr=%p\\n\", filesys_id_ptr);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_FileSysAddFixedMap(osal_id_t *filesys_id, const char *phys_path, const char *virt_path)\n{\n    OS_filesys_internal_record_t *filesys;\n    int32                         return_code;\n    OS_object_token_t             token;\n    const char *                  dev_name;\n\n    /*\n     * Validate inputs\n     */\n    OS_CHECK_POINTER(filesys_id);\n    OS_CHECK_STRING(phys_path, sizeof(filesys->system_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_PATHNAME(virt_path);\n\n    /*\n     * Generate a dev name by taking the basename of the phys_path.\n     */\n    dev_name = strrchr(phys_path, '/');\n    if (dev_name == NULL)\n    {\n        dev_name = phys_path;\n    }\n    else\n    {\n        ++dev_name;\n    }\n\n    /* Log state after computing dev_name and before length check */\n    OSFS_LogState(\"after_devname\", dev_name, phys_path, virt_path, -1, (const void *)&token, (const void *)filesys_id);\n\n    if (memchr(dev_name, 0, sizeof(filesys->volume_name)) == NULL)\n    {\n        /* Log the early error path */\n        OSFS_LogState(\"name_too_long\", dev_name, phys_path, virt_path, (int)OS_ERR_NAME_TOO_LONG, (const void *)&token, (const void *)filesys_id);\n        return OS_ERR_NAME_TOO_LONG;\n    }\n\n    /* Log just before allocating a new object id. This is where the\n     * reported const-qualification issue can be observed by tracing\n     * the parameters passed into the allocator and subsequent calls.\n     */\n    OSFS_LogState(\"before_allocate\", dev_name, phys_path, virt_path, -1, (const void *)&token, (const void *)filesys_id);\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, dev_name, &token);\n\n    /* Log immediately after calling OS_ObjectIdAllocateNew */\n    OSFS_LogState(\"after_allocate\", dev_name, phys_path, virt_path, (int)return_code, (const void *)&token, (const void *)filesys_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, filesys, device_name, dev_name);\n\n        strncpy(filesys->volume_name, dev_name, sizeof(filesys->volume_name) - 1);\n        strncpy(filesys->system_mountpt, phys_path, sizeof(filesys->system_mountpt) - 1);\n        strncpy(filesys->virtual_mountpt, virt_path, sizeof(filesys->virtual_mountpt) - 1);\n\n        /*\n         * mark the entry that it is a fixed disk\n         */\n        filesys->fstype = OS_FILESYS_TYPE_FS_BASED;\n        filesys->flags  = OS_FILESYS_FLAG_IS_FIXED;\n\n        /*\n         * The \"mount\" implementation is required as it will\n         * create the mountpoint if it does not already exist\n         */\n        OSFS_LogState(\"before_start_volume\", dev_name, phys_path, virt_path, -1, (const void *)&token, (const void *)filesys_id);\n        return_code = OS_FileSysStartVolume_Impl(&token);\n        OSFS_LogState(\"after_start_volume\", dev_name, phys_path, virt_path, (int)return_code, (const void *)&token, (const void *)filesys_id);\n\n        if (return_code == OS_SUCCESS)\n        {\n            filesys->flags |= OS_FILESYS_FLAG_IS_READY;\n            return_code = OS_FileSysMountVolume_Impl(&token);\n            OSFS_LogState(\"after_mount_impl\", dev_name, phys_path, virt_path, (int)return_code, (const void *)&token, (const void *)filesys_id);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /*\n             * mark the entry that it is a fixed disk\n             */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, filesys_id);\n\n        /* Final state log just before returning */\n        OSFS_LogState(\"finalize\", dev_name, phys_path, virt_path, (int)return_code, (const void *)&token, (const void *)filesys_id);\n    }\n    else\n    {\n        /* Log failure path from allocate */\n        OSFS_LogState(\"allocate_failed\", dev_name, phys_path, virt_path, (int)return_code, (const void *)&token, (const void *)filesys_id);\n    }\n\n    return return_code;\n}\n"
}