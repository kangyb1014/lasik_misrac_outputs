{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_TimeBaseGetFreeRun_Log(const char *stage,\n                                      osal_id_t timebase_id,\n                                      uint32 *freerun_val,\n                                      int32 return_code,\n                                      const OS_timebase_internal_record_t *timebase)\n{\n    FILE *f = fopen(\"/tmp/logs/2131.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Do not affect original logic if logging fails */\n    }\n\n    fprintf(f, \"[OS_TimeBaseGetFreeRun] stage=%s timebase_id=%lu freerun_val=%p return_code=%d\\n\",\n            stage, (unsigned long)timebase_id, (void *)freerun_val, (int)return_code);\n\n    if (timebase != NULL)\n    {\n        /* Report the timebase pointer and the read-only field used in the function */\n        fprintf(f, \"    timebase=%p freerun_time=%\" PRIu32 \"\\n\",\n                (const void *)timebase, (uint32)timebase->freerun_time);\n    }\n    else\n    {\n        fprintf(f, \"    timebase=NULL\\n\");\n    }\n\n    /* If freerun_val is valid, log the value it points to (do not modify it) */\n    if (freerun_val != NULL)\n    {\n        fprintf(f, \"    *freerun_val(before/after)=%\" PRIu32 \"\\n\", (uint32)*freerun_val);\n    }\n\n    fclose(f);\n}\n\nint32 OS_TimeBaseGetFreeRun(osal_id_t timebase_id, uint32 *freerun_val)\n{\n    int32                          return_code;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(freerun_val);\n\n    /* Log entry state */\n    OS_TimeBaseGetFreeRun_Log(\"entry\", timebase_id, freerun_val, -1, NULL);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, timebase_id, &token);\n\n    /* Log after lookup attempt */\n    OS_TimeBaseGetFreeRun_Log(\"after_lookup\", timebase_id, freerun_val, return_code, NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log the resolved timebase and its freerun_time before the assignment */\n        OS_TimeBaseGetFreeRun_Log(\"before_assign\", timebase_id, freerun_val, return_code, timebase);\n\n        *freerun_val = timebase->freerun_time;\n\n        /* Log after assignment to capture final state */\n        OS_TimeBaseGetFreeRun_Log(\"after_assign\", timebase_id, freerun_val, return_code, timebase);\n    }\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmpy843tb7m/src/src/os/shared/src/osapi-timebase.c:1:\n/tmp/tmpy843tb7m/src/src/os/shared/src/osapi-timebase.c: In function 'OS_TimeBaseGetFreeRun_Log':\n/tmp/tmpy843tb7m/src/src/os/shared/src/osapi-timebase.c:353:53: error: expected ')' before 'PRIu32'\n  353 |         fprintf(f, \"    timebase=%p freerun_time=%\" PRIu32 \"\\n\",\n      |                                                     ^~~~~~\n/tmp/tmpy843tb7m/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpy843tb7m/src/src/os/shared/src/osapi-timebase.c:55:1: note: 'PRIu32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   54 | #include \"os-shared-time.h\"\n  +++ |+#include <inttypes.h>\n   55 | \nIn file included from /tmp/tmpy843tb7m/src/src/os/shared/src/osapi-timebase.c:1:\n/tmp/tmpy843tb7m/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmpy843tb7m/src/src/os/shared/src/osapi-timebase.c:353:9: note: in expansion of macro 'fprintf'\n  353 |         fprintf(f, \"    timebase=%p freerun_time=%\" PRIu32 \"\\n\",\n      |         ^~~~~~~\n/tmp/tmpy843tb7m/src/src/os/shared/src/osapi-timebase.c:364:55: error: expected ')' before 'PRIu32'\n  364 |         fprintf(f, \"    *freerun_val(before/after)=%\" PRIu32 \"\\n\", (uint32)*freerun_val);\n      |                                                       ^~~~~~\n/tmp/tmpy843tb7m/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpy843tb7m/src/src/os/shared/src/osapi-timebase.c:364:55: note: 'PRIu32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  364 |         fprintf(f, \"    *freerun_val(before/after)=%\" PRIu32 \"\\n\", (uint32)*freerun_val);\n      |                                                       ^~~~~~\n/tmp/tmpy843tb7m/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpy843tb7m/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmpy843tb7m/src/src/os/shared/src/osapi-timebase.c:364:9: note: in expansion of macro 'fprintf'\n  364 |         fprintf(f, \"    *freerun_val(before/after)=%\" PRIu32 \"\\n\", (uint32)*freerun_val);\n      |         ^~~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-timebase.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-timebase.dir/__/__/os/shared/src/osapi-timebase.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:4345: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-timebase.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_TimeBaseGetFreeRun as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include \"os-shared-time.h\"\n#include <inttypes.h>\n\nstatic void OS_TimeBaseGetFreeRun_Log(const char *stage,\n                                      osal_id_t timebase_id,\n                                      uint32 *freerun_val,\n                                      int32 return_code,\n                                      const OS_timebase_internal_record_t *timebase)\n{\n    FILE *f = fopen(\"/tmp/logs/2131.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Do not affect original logic if logging fails */\n    }\n\n    fprintf(f, \"[OS_TimeBaseGetFreeRun] stage=%s timebase_id=%lu freerun_val=%p return_code=%d\\n\",\n            stage, (unsigned long)timebase_id, (void *)freerun_val, (int)return_code);\n\n    if (timebase != NULL)\n    {\n        /* Report the timebase pointer and the read-only field used in the function */\n        fprintf(f, \"    timebase=%p freerun_time=%\" PRIu32 \"\\n\",\n                (const void *)timebase, (uint32)timebase->freerun_time);\n    }\n    else\n    {\n        fprintf(f, \"    timebase=NULL\\n\");\n    }\n\n    /* If freerun_val is valid, log the value it points to (do not modify it) */\n    if (freerun_val != NULL)\n    {\n        fprintf(f, \"    *freerun_val(before/after)=%\" PRIu32 \"\\n\", (uint32)*freerun_val);\n    }\n\n    fclose(f);\n}\n\nint32 OS_TimeBaseGetFreeRun(osal_id_t timebase_id, uint32 *freerun_val)\n{\n    int32                          return_code;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(freerun_val);\n\n    /* Log entry state */\n    OS_TimeBaseGetFreeRun_Log(\"entry\", timebase_id, freerun_val, -1, NULL);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, timebase_id, &token);\n\n    /* Log after lookup attempt */\n    OS_TimeBaseGetFreeRun_Log(\"after_lookup\", timebase_id, freerun_val, return_code, NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log the resolved timebase and its freerun_time before the assignment */\n        OS_TimeBaseGetFreeRun_Log(\"before_assign\", timebase_id, freerun_val, return_code, timebase);\n\n        *freerun_val = timebase->freerun_time;\n\n        /* Log after assignment to capture final state */\n        OS_TimeBaseGetFreeRun_Log(\"after_assign\", timebase_id, freerun_val, return_code, timebase);\n    }\n\n    return return_code;\n}\n",
  "explanation": "The compilation errors were caused by using the PRIu32 macro without including <inttypes.h>. I added #include <inttypes.h> after the existing #include \"os-shared-time.h\" so the PRIu32 macro is defined. No other logic or code was changed."
}