{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'timebase' is declared as OS_timebase_internal_record_t * but is only used for read access (it is used solely to read timebase->freerun_time). It could be declared as const OS_timebase_internal_record_t *timebase (assignment from the table pointer is allowed), so the pointer is not const-qualified when it could be \u2014 violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetFreeRun code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2131.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetFreeRun as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetFreeRun:\n```c\nint32 OS_TimeBaseGetFreeRun(osal_id_t timebase_id, uint32 *freerun_val)\n{\n    int32                          return_code;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(freerun_val);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        *freerun_val = timebase->freerun_time;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetFreeRun code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/* Probe helper: logs control flow and state to /tmp/logs/2131.txt */\nstatic void OS_TimeBaseGetFreeRun_Log(const char *stage,\n                                      osal_id_t timebase_id,\n                                      uint32 *freerun_val,\n                                      int32 return_code,\n                                      const OS_timebase_internal_record_t *timebase)\n{\n    FILE *f = fopen(\"/tmp/logs/2131.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Do not affect original logic if logging fails */\n    }\n\n    fprintf(f, \"[OS_TimeBaseGetFreeRun] stage=%s timebase_id=%lu freerun_val=%p return_code=%d\\n\",\n            stage, (unsigned long)timebase_id, (void *)freerun_val, (int)return_code);\n\n    if (timebase != NULL)\n    {\n        /* Report the timebase pointer and the read-only field used in the function */\n        fprintf(f, \"    timebase=%p freerun_time=%\" PRIu32 \"\\n\",\n                (const void *)timebase, (uint32)timebase->freerun_time);\n    }\n    else\n    {\n        fprintf(f, \"    timebase=NULL\\n\");\n    }\n\n    /* If freerun_val is valid, log the value it points to (do not modify it) */\n    if (freerun_val != NULL)\n    {\n        fprintf(f, \"    *freerun_val(before/after)=%\" PRIu32 \"\\n\", (uint32)*freerun_val);\n    }\n\n    fclose(f);\n}\n\nint32 OS_TimeBaseGetFreeRun(osal_id_t timebase_id, uint32 *freerun_val)\n{\n    int32                          return_code;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(freerun_val);\n\n    /* Log entry state */\n    OS_TimeBaseGetFreeRun_Log(\"entry\", timebase_id, freerun_val, -1, NULL);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, timebase_id, &token);\n\n    /* Log after lookup attempt */\n    OS_TimeBaseGetFreeRun_Log(\"after_lookup\", timebase_id, freerun_val, return_code, NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log the resolved timebase and its freerun_time before the assignment */\n        OS_TimeBaseGetFreeRun_Log(\"before_assign\", timebase_id, freerun_val, return_code, timebase);\n\n        *freerun_val = timebase->freerun_time;\n\n        /* Log after assignment to capture final state */\n        OS_TimeBaseGetFreeRun_Log(\"after_assign\", timebase_id, freerun_val, return_code, timebase);\n    }\n\n    return return_code;\n}\n"
}