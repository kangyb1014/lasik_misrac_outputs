{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'timebase' is only used to read fields (e.g. timebase->freerun_time) and is never used to modify the object in OS_TimeBaseGetFreeRun. Therefore it can and should be declared as a pointer to const: const OS_timebase_internal_record_t *timebase; Using a non-const pointer here violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetFreeRun code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2131.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetFreeRun as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetFreeRun:\n```c\nint32 OS_TimeBaseGetFreeRun(osal_id_t timebase_id, uint32 *freerun_val)\n{\n    int32                          return_code;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(freerun_val);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, timebase_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        *freerun_val = timebase->freerun_time;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetFreeRun code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logger for OS_TimeBaseGetFreeRun. Appends control-flow and state\n * information to /tmp/logs/2131.txt. The logger takes a const pointer to the\n * timebase record so that the probe itself does not attempt to modify the\n * record. Non-const timebase variables in the original function may be\n * passed to this logger (conversion to const is allowed).\n */\nstatic void OS_TimeBaseGetFreeRun_LogStage(const char *stage,\n                                           osal_id_t timebase_id,\n                                           const OS_timebase_internal_record_t *timebase,\n                                           uint32 freerun_out,\n                                           int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2131.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print basic control flow and key state fields. Use casts to avoid\n         * mismatched-format warnings on platforms where these typedefs map\n         * to different underlying integer sizes.\n         */\n        fprintf(f, \"OS_TimeBaseGetFreeRun: stage=%s, timebase_id=%u, return_code=%ld, timebase_ptr=%p, freerun_field=%u, freerun_out=%u\\n\",\n                stage,\n                (unsigned)timebase_id,\n                (long)return_code,\n                (void *)timebase,\n                (unsigned)(timebase ? timebase->freerun_time : 0u),\n                (unsigned)freerun_out);\n        fclose(f);\n    }\n}\n\nint32 OS_TimeBaseGetFreeRun(osal_id_t timebase_id, uint32 *freerun_val)\n{\n    int32                          return_code;\n    OS_object_token_t              token;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry */\n    OS_TimeBaseGetFreeRun_LogStage(\"entry\", timebase_id, NULL, 0u, 0);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(freerun_val);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, timebase_id, &token);\n\n    /* Log result of object-id lookup */\n    OS_TimeBaseGetFreeRun_LogStage(\"after_ObjectIdGetById\", timebase_id, NULL, 0u, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log state just before reading the field. Pass timebase as const to\n         * the logger to show the logger does not modify the record.\n         */\n        OS_TimeBaseGetFreeRun_LogStage(\"before_read\", timebase_id, timebase, 0u, return_code);\n\n        *freerun_val = timebase->freerun_time;\n\n        /* Log state after the read to demonstrate that only a read occurred\n         * (no modifications to the timebase object are performed by this\n         * function).\n         */\n        OS_TimeBaseGetFreeRun_LogStage(\"after_read\", timebase_id, timebase, *freerun_val, return_code);\n    }\n\n    /* Log exit. Only dereference freerun_val when the call was successful. */\n    OS_TimeBaseGetFreeRun_LogStage(\"exit\",\n                                   timebase_id,\n                                   (return_code == OS_SUCCESS) ? timebase : NULL,\n                                   (return_code == OS_SUCCESS) ? *freerun_val : 0u,\n                                   return_code);\n\n    return return_code;\n}\n"
}