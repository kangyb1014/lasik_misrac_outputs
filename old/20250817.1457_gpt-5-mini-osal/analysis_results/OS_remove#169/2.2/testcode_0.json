{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn UT_Stub_GetReturnValuePtr the local variable ReturnPtr is first set to NULL and then either overwritten with StubPtr->Data.Buff.BasePtr (when StubPtr != NULL) or the function calls UtAssert_Abort (when StubPtr == NULL) which does not return. In both cases the initial assignment has no effect on observable behaviour, so the statement `ReturnPtr = NULL;` is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1354.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_remove:\n```c\nint32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_remove code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <string.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Minimal type and constants to make this file self-contained for testing. */\ntypedef int32_t int32;\nenum { OS_MAX_LOCAL_PATH_LEN = 256 };\nenum { OS_SUCCESS = 0 };\n\n/* Probe logging helpers that append control-flow and state information to /tmp/logs/1354.txt */\nstatic void probe_ensure_log_dir(void)\n{\n    /* Create the directory if it doesn't exist. Ignore errors other than \"already exists\". */\n    if (mkdir(\"/tmp/logs\", 0777) != 0)\n    {\n        if (errno != EEXIST)\n        {\n            /* If directory creation fails for another reason, we still proceed and let fopen fail later. */\n        }\n    }\n}\n\nstatic void probe_log(const char *fmt, ...)\n{\n    probe_ensure_log_dir();\n\n    FILE *f = fopen(\"/tmp/logs/1354.txt\", \"a\");\n    if (!f)\n    {\n        return; /* Best-effort logging only */\n    }\n\n    /* Timestamp for easier correlation */\n    time_t t = time(NULL);\n    struct tm tm;\n    if (localtime_r(&t, &tm) == NULL)\n    {\n        fprintf(f, \"[time=?] \");\n    }\n    else\n    {\n        char buf[64];\n        if (strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tm) > 0)\n        {\n            fprintf(f, \"[%s] \", buf);\n        }\n        else\n        {\n            fprintf(f, \"[time=?] \");\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Minimal stub implementations so this translation unit is compilable/executable on its own.\n * In the real system these would be provided by the OSAL/host environment. Stubs preserve\n * the original behavior that OS_remove expects: OS_TranslatePath returns a status and fills\n * local_path, and OS_FileRemove_Impl returns a status code.\n */\nstatic int32 OS_TranslatePath(const char *path, char *local_path)\n{\n    if (path == NULL || local_path == NULL)\n    {\n        probe_log(\"OS_TranslatePath: invalid arguments path=%p local_path=%p\", (void*)path, (void*)local_path);\n        return -1; /* error */\n    }\n\n    /* Copy up to buffer size and ensure null termination */\n    strncpy(local_path, path, OS_MAX_LOCAL_PATH_LEN - 1);\n    local_path[OS_MAX_LOCAL_PATH_LEN - 1] = '\\0';\n\n    probe_log(\"OS_TranslatePath: input path='%s' -> local_path='%s'\", path, local_path);\n    return OS_SUCCESS;\n}\n\nstatic int32 OS_FileRemove_Impl(const char *local_path)\n{\n    if (local_path == NULL)\n    {\n        probe_log(\"OS_FileRemove_Impl: local_path is NULL\");\n        return -1;\n    }\n\n    /* For test purposes, do not actually remove files. Simulate success. */\n    probe_log(\"OS_FileRemove_Impl: called with local_path='%s' (simulated remove)\", local_path);\n    return OS_SUCCESS;\n}\n\n/* Modified OS_remove with inserted probes that log control flow and state. */\nint32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    probe_log(\"OS_remove: called with path='%s'\", path ? path : \"(null)\");\n\n    /* Preserve original logic: translate path, then remove if translation succeeds. */\n    return_code = OS_TranslatePath(path, local_path);\n    probe_log(\"OS_remove: OS_TranslatePath returned %d\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"OS_remove: translation successful, local_path='%s' - invoking OS_FileRemove_Impl\", local_path);\n        return_code = OS_FileRemove_Impl(local_path);\n        probe_log(\"OS_remove: OS_FileRemove_Impl returned %d\", return_code);\n    }\n    else\n    {\n        probe_log(\"OS_remove: translation failed with code %d, skipping file removal\", return_code);\n    }\n\n    probe_log(\"OS_remove: returning %d\", return_code);\n    return return_code;\n}\n"
}