{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe two assignments (SysMountPointLen = 0; VirtPathBegin = VirtPathLen;) are executed unconditionally but never affect program behaviour. If OS_ObjectIdGetBySearch succeeds and the filesystem is mounted, both variables are overwritten before any use. If lookup fails (or the filesystem is not mounted) the function later returns without using those initial values. Therefore removing these assignments would not change the program behaviour, so they constitute dead code and violate MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1354.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_remove:\n```c\nint32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_remove code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Forward declarations for project symbols - these are expected to be\n   defined elsewhere in the project. Do not change. */\nextern int32 OS_TranslatePath(const char *path, char *local_path);\nextern int32 OS_FileRemove_Impl(const char *local_path);\n\n/* Log probe helper: append a single-line record to /tmp/logs/1354.txt\n   Records stage, provided path (or local_path) and the numeric code. */\nstatic void OS_remove_log(const char *stage, const char *p, int32 code)\n{\n    FILE *f = fopen(\"/tmp/logs/1354.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_remove: %s; path='%s'; code=%d\\n\", stage, (p != NULL) ? p : \"(null)\", (int)code);\n        fclose(f);\n    }\n}\n\nint32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and requested path */\n    OS_remove_log(\"enter\", path, 0);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of translation. Only print local_path if translation succeeded. */\n    if (return_code == OS_SUCCESS)\n    {\n        OS_remove_log(\"translate_success\", local_path, return_code);\n        /* Log just before calling the implementation */\n        OS_remove_log(\"before_impl\", local_path, return_code);\n\n        return_code = OS_FileRemove_Impl(local_path);\n\n        /* Log result returned by the implementation */\n        OS_remove_log(\"after_impl\", local_path, return_code);\n    }\n    else\n    {\n        OS_remove_log(\"translate_failed\", path, return_code);\n    }\n\n    /* Log exit and returned code */\n    OS_remove_log(\"exit\", (return_code == OS_SUCCESS) ? local_path : path, return_code);\n\n    return return_code;\n}\n"
}