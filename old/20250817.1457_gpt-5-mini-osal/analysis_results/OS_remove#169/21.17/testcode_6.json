{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. OS_strnlen calls memchr(VirtualPath, 0, OS_MAX_PATH_LEN). If VirtualPath refers to an object whose allocated/storage size is less than OS_MAX_PATH_LEN and no '\\0' occurs within that object (e.g. caller passes a pointer to a 16-byte buffer but OS_MAX_PATH_LEN is 64 and there is no NUL within the first 16 bytes), memchr will read beyond the bounds of the object. Thus the fragment VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN); can result in out-of-bounds access and violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1359.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_remove:\n```c\nint32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_remove code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe logging helper. Intentionally minimal and safe: logs pointer values,\n   return codes, and the translated local_path only when the translate step\n   succeeded (to avoid dereferencing caller buffers and introducing new\n   out-of-bounds reads). Writes to /tmp/logs/1359.txt. */\nstatic void os_remove_log(const char *stage, const char *path, const char *local_path, int rc)\n{\n    FILE *f;\n\n    /* Try to ensure the log directory exists. Ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/1359.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log the stage and pointer values. We avoid dereferencing 'path' to read\n       multiple bytes because the caller buffer size is unknown and reading\n       could introduce out-of-bounds accesses. */\n    fprintf(f, \"%s: path=%p, rc=%d\", stage, (const void *)path, rc);\n\n    /* If translation succeeded, local_path is expected to be a NUL-terminated\n       string owned by this function's stack array; it's safe to log it. */\n    if (local_path != NULL && rc == 0) /* assume 0 == success in the environment */\n    {\n        fprintf(f, \", local_path=\\\"%s\\\"\", local_path);\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Original OS_remove preserved; probes inserted to capture control flow and\n   state relevant to the reported Rule 21.17 violation scenario. */\nint32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* ENTRY: record the incoming path pointer (do not dereference it). */\n    os_remove_log(\"OS_remove ENTRY\", path, NULL, (int)0);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* AFTER_TRANSLATE: record the result of translation. If successful, log the\n       translated local_path. This helps determine whether TranslatePath was\n       invoked and what it produced without reading caller buffers. */\n    os_remove_log(\"OS_remove AFTER_TRANSLATE\", path, local_path, (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* BEFORE removal: log that we're about to call the implementation. */\n        os_remove_log(\"OS_remove BEFORE_FileRemove_Impl\", path, local_path, (int)return_code);\n\n        return_code = OS_FileRemove_Impl(local_path);\n\n        /* AFTER removal: capture the result of the remove implementation. */\n        os_remove_log(\"OS_remove AFTER_FileRemove_Impl\", path, local_path, (int)return_code);\n    }\n\n    /* EXIT: final state. */\n    os_remove_log(\"OS_remove EXIT\", path, local_path, (int)return_code);\n\n    return return_code;\n}\n"
}