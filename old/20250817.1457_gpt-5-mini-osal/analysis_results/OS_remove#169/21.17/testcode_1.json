{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memchr(s, 0, maxlen) can read up to maxlen bytes from s. If s points to an object whose actual size is less than maxlen and there is no terminating '\\0' within that object, memchr will access bytes beyond the object's bounds. In this code OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) is invoked with an arbitrary VirtualPath (checked only for NULL), so if VirtualPath refers to a shorter non\u2011terminated buffer (length < OS_MAX_PATH_LEN and no '\\0' within), the memchr call will read out of bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1359.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_remove:\n```c\nint32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_remove code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Preserve the integer type used in the original code */\ntypedef int32_t int32;\n\n/* Provide compile-time constants (not macros) to allow this unit to compile standalone.\n   These mimic the original symbols used by OS_remove. */\nenum { OS_MAX_LOCAL_PATH_LEN = 256, OS_SUCCESS = 0 };\n\n/* External implementations (provided by the rest of the system).  We only declare them here\n   so this unit compiles and links in the larger build. */\nextern int32 OS_TranslatePath(const char *path, char *local_path);\nextern int32 OS_FileRemove_Impl(const char *local_path);\n\n/* Path to write logs for reproducing the scenario. */\nstatic const char LOG_FILE[] = \"/tmp/logs/1359.txt\";\n\n/* Ensure log directory exists; best-effort. */\nstatic void ensure_log_dir(void)\n{\n    /* Attempt to create the directory; ignore errors other than missing directory. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n}\n\n/* Append a message to the log file. This is simple, synchronous, and robust for debugging. */\nstatic void append_log(const char *msg)\n{\n    FILE *f = fopen(LOG_FILE, \"a\");\n    if (!f)\n    {\n        ensure_log_dir();\n        f = fopen(LOG_FILE, \"a\");\n        if (!f)\n        {\n            /* If logging is impossible, silently return to avoid changing program behavior. */\n            return;\n        }\n    }\n\n    fputs(msg, f);\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Probe and log the inputs to OS_remove. We intentionally do NOT dereference the input\n   pointer contents (other than checking for NULL) to avoid introducing new out-of-bounds\n   reads. This logs the pointer value and lets the rest of the code execute as normal.\n\n   The goal: capture control flow and state transitions (call, return values, translated\n   path contents) so a later analysis can determine whether an out-of-bounds access\n   may have occurred in OS_TranslatePath or functions it calls (e.g. memchr). */\nstatic void probe_log_input_pointer(const char *path)\n{\n    char buf[256];\n    int n = snprintf(buf, sizeof(buf), \"OS_remove called: path_ptr=%p\", (void *)path);\n    if (n >= 0 && n < (int)sizeof(buf)) append_log(buf);\n\n    if (path == NULL)\n    {\n        append_log(\"path is NULL\");\n    }\n    else\n    {\n        /* Do not attempt to read the pointed-to bytes here; that could reproduce the\n           very out-of-bounds read we are trying to capture in a controlled manner.\n           Instead, we note that the pointer is non-NULL and allow OS_TranslatePath\n           to operate. */\n        append_log(\"path is non-NULL; contents not dereferenced by probe to avoid OOB reads\");\n    }\n}\n\n/* Log the translated local_path buffer in a safe manner. We scan only within the\n   local_path array bounds (OS_MAX_LOCAL_PATH_LEN) and record whether a terminating\n   '\\0' is found and the printable/truncated contents. This is safe because local_path\n   is a local array in this translation unit and bounded by the compile-time constant. */\nstatic void probe_log_local_path(const char local_path[OS_MAX_LOCAL_PATH_LEN])\n{\n    FILE *f = fopen(LOG_FILE, \"a\");\n    if (!f)\n    {\n        ensure_log_dir();\n        f = fopen(LOG_FILE, \"a\");\n        if (!f) return;\n    }\n\n    fprintf(f, \"Translated local_path buffer (up to %d bytes):\\n\", OS_MAX_LOCAL_PATH_LEN);\n\n    /* Print as a quoted string up to the first '\\0' or buffer limit. */\n    int i;\n    int found_null = -1;\n    for (i = 0; i < OS_MAX_LOCAL_PATH_LEN; ++i)\n    {\n        if (local_path[i] == '\\0')\n        {\n            found_null = i;\n            break;\n        }\n    }\n\n    if (found_null >= 0)\n    {\n        /* There is a terminating NUL within bounds; print the string form safely. */\n        fprintf(f, \"  (terminated at index %d) string=\\\"\");\n        /* Print safely by writing in chunks to avoid relying on %s which also scans. */\n        for (i = 0; i < found_null; ++i)\n        {\n            char c = local_path[i];\n            /* Print printable characters directly, otherwise hex escape. */\n            if ((unsigned char)c >= 32 && (unsigned char)c <= 126)\n                fputc(c, f);\n            else\n                fprintf(f, \"\\\\x%02x\", (unsigned char)c);\n        }\n        fprintf(f, \"\\\"\");\n        fprintf(f, \"\\n\");\n    }\n    else\n    {\n        /* No terminating NUL found in buffer; print a hexdump of the buffer up to the limit. */\n        fprintf(f, \"  (no terminating NUL found within buffer). Hex dump (first 64 bytes or up to limit):\\n\");\n        int max_print = OS_MAX_LOCAL_PATH_LEN < 64 ? OS_MAX_LOCAL_PATH_LEN : 64;\n        for (i = 0; i < max_print; ++i)\n        {\n            fprintf(f, \"%02x \", (unsigned char)local_path[i]);\n            if ((i & 0x0f) == 0x0f) fprintf(f, \"\\n\");\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fclose(f);\n}\n\n/* The original OS_remove logic, with probes added before and after translation and\n   before/after the underlying removal implementation call. Behavior is unchanged. */\nint32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Probe input pointer/value (do not dereference). */\n    probe_log_input_pointer(path);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log translation result and the translated buffer content (safely). */\n    {\n        char buf[256];\n        int n = snprintf(buf, sizeof(buf), \"OS_TranslatePath returned %d\", (int)return_code);\n        if (n >= 0 && n < (int)sizeof(buf)) append_log(buf);\n    }\n    probe_log_local_path(local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        append_log(\"Calling OS_FileRemove_Impl(local_path)\");\n        return_code = OS_FileRemove_Impl(local_path);\n        {\n            char buf[256];\n            int n = snprintf(buf, sizeof(buf), \"OS_FileRemove_Impl returned %d\", (int)return_code);\n            if (n >= 0 && n < (int)sizeof(buf)) append_log(buf);\n        }\n    }\n    else\n    {\n        append_log(\"OS_TranslatePath failed; skipping removal implementation call\");\n    }\n\n    {\n        char buf[256];\n        int n = snprintf(buf, sizeof(buf), \"OS_remove returning %d\", (int)return_code);\n        if (n >= 0 && n < (int)sizeof(buf)) append_log(buf);\n    }\n\n    return return_code;\n}\n"
}