{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call memchr(name_ptr, 0, OS_MAX_FILE_NAME) can read up to OS_MAX_FILE_NAME bytes starting at name_ptr even though the code only proved there is a terminating '\\0' within OS_MAX_PATH_LEN bytes of VirtualPath. There is no check that the object reachable at name_ptr actually contains OS_MAX_FILE_NAME bytes. Example: if VirtualPath is a buffer of length VirtPathLen+1 (terminated at VirtPathLen), and name_ptr points near the end (so remaining bytes including the '\\0' are R bytes where R < OS_MAX_FILE_NAME), memchr will attempt to read past the end of the object (up to OS_MAX_FILE_NAME bytes) -> out-of-bounds access. This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1359.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_remove:\n```c\nint32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_remove code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/*\n * Probe helpers: append human-readable logs to /tmp/logs/1359.txt\n * These helpers are small and non-intrusive so they can be dropped\n * into the existing source without changing program logic.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1359.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Safe bounded strlen: returns length up to max_len (not including terminating '\\0') */\nstatic size_t probe_strnlen(const char *s, size_t max_len)\n{\n    size_t i;\n    for (i = 0U; i < max_len; ++i)\n    {\n        if (s[i] == '\\0')\n        {\n            return i;\n        }\n    }\n    return max_len;\n}\n\nint32 OS_remove(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and input pointer value */\n    probe_log(\"OS_remove: entered; path_ptr=%p; OS_MAX_LOCAL_PATH_LEN=%d\", (const void *)path, (int)OS_MAX_LOCAL_PATH_LEN);\n\n    /* Call path translation as in original logic */\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of translation */\n    probe_log(\"OS_remove: OS_TranslatePath returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Safely log the translated local path: only up to buffer length */\n        size_t len = probe_strnlen(local_path, (size_t)OS_MAX_LOCAL_PATH_LEN);\n        /* Print pointer of local_path, its reported C-string length, and a bounded snapshot */\n        probe_log(\"OS_remove: local_path_ptr=%p; local_path_len=%zu; local_path_snapshot='%.*s'\",\n                  (const void *)local_path, len, (int)len, local_path);\n\n        /* Preserve original behavior: remove using implementation-specific call */\n        probe_log(\"OS_remove: calling OS_FileRemove_Impl(local_path)\");\n        return_code = OS_FileRemove_Impl(local_path);\n        probe_log(\"OS_remove: OS_FileRemove_Impl returned %d\", (int)return_code);\n    }\n    else\n    {\n        probe_log(\"OS_remove: translation failed, skipping remove\");\n    }\n\n    probe_log(\"OS_remove: returning %d\", (int)return_code);\n    return return_code;\n}\n"
}