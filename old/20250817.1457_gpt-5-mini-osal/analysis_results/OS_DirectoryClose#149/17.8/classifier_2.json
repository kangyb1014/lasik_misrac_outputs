{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_DirectoryClose:\n```c\nint32 OS_DirectoryClose(osal_id_t dir_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, dir_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirClose_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_DirectoryClose:\ntypedef uint32 osal_id_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_SUCCESS (0)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n```\nFocus on the above code fragment and judge whether it violates the rule 17.8 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in this call site. OS_DirectoryClose does not modify any of its own function parameters; it passes the address of a local variable (&token) to OS_ObjectIdFinalizeDelete, and modifying the object pointed to is permitted. A violation would occur only if the callee (OS_ObjectIdFinalizeDelete) itself modified its pointer parameter (for example, by assigning to the pointer parameter inside that function, e.g. token_ptr = NULL, rather than modifying *token_ptr)."
}