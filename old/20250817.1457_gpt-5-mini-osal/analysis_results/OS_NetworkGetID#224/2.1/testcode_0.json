{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe failure branch is unreachable because OS_NetworkGetID_Impl() as provided always returns OS_SUCCESS (it unconditionally does \"return OS_SUCCESS\" after calling gethostid()). Therefore the test \"if (OS_NetworkGetID_Impl(&IdBuf) != OS_SUCCESS) return -1;\" can never be true and the return -1 path is unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_NetworkGetID code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1793.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_NetworkGetID as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_NetworkGetID:\n```c\nint32 OS_NetworkGetID(void)\n{\n    int32 IdBuf;\n\n    /* always delegate to low-level API */\n    if (OS_NetworkGetID_Impl(&IdBuf) != OS_SUCCESS)\n    {\n        /* return a hardcoded value on failure */\n        return -1;\n    }\n\n    return IdBuf;\n}\n```\n</target_code>\nPlease provide the modified OS_NetworkGetID code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <unistd.h>\n\n/*\n * Probe helper: open the log file (create directory if needed) and return FILE*.\n * Ignore failures to create directory/log file to avoid changing original behavior.\n */\nstatic FILE *OS_NetworkGetID_OpenLog(void)\n{\n    /* try to create the directory; ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    return fopen(\"/tmp/logs/1793.txt\", \"a\");\n}\n\nint32 OS_NetworkGetID(void)\n{\n    int32 IdBuf;\n    FILE *log = OS_NetworkGetID_OpenLog();\n\n    if (log)\n    {\n        fprintf(log, \"OS_NetworkGetID: entry\\n\");\n        fflush(log);\n    }\n\n    /* always delegate to low-level API */\n    int32 status = OS_NetworkGetID_Impl(&IdBuf);\n\n    if (log)\n    {\n        /* Log the return status and the IdBuf value observed after the call. */\n        fprintf(log, \"OS_NetworkGetID: OS_NetworkGetID_Impl returned=%ld, IdBuf=%ld\\n\",\n                (long)status, (long)IdBuf);\n        fflush(log);\n    }\n\n    if (status != OS_SUCCESS)\n    {\n        /* return a hardcoded value on failure */\n        if (log)\n        {\n            fprintf(log, \"OS_NetworkGetID: failure branch taken, returning -1\\n\");\n            fclose(log);\n        }\n        return -1;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_NetworkGetID: success branch taken, returning IdBuf=%ld\\n\", (long)IdBuf);\n        fclose(log);\n    }\n\n    return IdBuf;\n}\n"
}