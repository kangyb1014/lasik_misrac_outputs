{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_WaitForStateChange_Impl:\n```c\nvoid OS_WaitForStateChange_Impl(osal_objtype_t idtype, uint32 attempts)\n{\n    OS_impl_objtype_lock_t *impl;\n    struct timespec         ts;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    /*\n     * because pthread_cond_timedwait() is also a cancellation point,\n     * this pushes a cleanup handler to ensure that if canceled during this call,\n     * the mutex will be released.\n     */\n    pthread_cleanup_push(OS_Posix_ReleaseTableMutex, &impl->mutex);\n\n    clock_gettime(CLOCK_REALTIME, &ts);\n\n    if (attempts <= 10)\n    {\n        /* Wait an increasing amount of time, starting at 10ms */\n        ts.tv_nsec += attempts * attempts * 10000000;\n        if (ts.tv_nsec >= 1000000000)\n        {\n            ts.tv_nsec -= 1000000000;\n            ++ts.tv_sec;\n        }\n    }\n    else\n    {\n        /* wait 1 second (max for polling) */\n        ++ts.tv_sec;\n    }\n\n    pthread_cond_timedwait(&impl->cond, &impl->mutex, &ts);\n\n    pthread_cleanup_pop(false);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_WaitForStateChange_Impl:\nOS_impl_objtype_lock_t *const OS_impl_objtype_lock_table[OS_OBJECT_TYPE_USER] = {\n    [OS_OBJECT_TYPE_UNDEFINED]   = NULL,\n    [OS_OBJECT_TYPE_OS_TASK]     = &OS_global_task_table_lock,\n    [OS_OBJECT_TYPE_OS_QUEUE]    = &OS_queue_table_lock,\n    [OS_OBJECT_TYPE_OS_COUNTSEM] = &OS_count_sem_table_lock,\n    [OS_OBJECT_TYPE_OS_BINSEM]   = &OS_bin_sem_table_lock,\n    [OS_OBJECT_TYPE_OS_MUTEX]    = &OS_mutex_table_lock,\n    [OS_OBJECT_TYPE_OS_STREAM]   = &OS_stream_table_lock,\n    [OS_OBJECT_TYPE_OS_DIR]      = &OS_dir_table_lock,\n    [OS_OBJECT_TYPE_OS_TIMEBASE] = &OS_timebase_table_lock,\n    [OS_OBJECT_TYPE_OS_TIMECB]   = &OS_timecb_table_lock,\n    [OS_OBJECT_TYPE_OS_MODULE]   = &OS_module_table_lock,\n    [OS_OBJECT_TYPE_OS_FILESYS]  = &OS_filesys_table_lock,\n    [OS_OBJECT_TYPE_OS_CONSOLE]  = &OS_console_lock,\n    [OS_OBJECT_TYPE_OS_CONDVAR]  = &OS_condvar_lock,\n}\n...\ntypedef struct\n{\n    pthread_mutex_t mutex;\n    pthread_cond_t  cond;\n} OS_impl_objtype_lock_t\n...\nvoid OS_Posix_ReleaseTableMutex(void *mut)\n{\n    pthread_mutex_unlock(mut);\n}\n...\ntypedef uint32 osal_objtype_t\n...\ntypedef uint32_t  uint32\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No for loops are present in the provided function or in the supplied additional code. The OS_WaitForStateChange_Impl body uses if/else and increments (ts.tv_sec, ts.tv_nsec) but contains no for statement to inspect for Rule 14.2. The array initializer and typedefs in the additional code are not loops. The only macros used (pthread_cleanup_push/pop) and the pthread_cond_timedwait call do not introduce visible for statements in the supplied source; therefore there are no code fragments relevant to MISRA C 2023 Rule 14.2 to investigate."
}