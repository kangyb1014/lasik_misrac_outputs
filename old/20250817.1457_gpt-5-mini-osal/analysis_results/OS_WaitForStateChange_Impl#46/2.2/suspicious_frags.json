{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_WaitForStateChange_Impl:\n```c\nvoid OS_WaitForStateChange_Impl(osal_objtype_t idtype, uint32 attempts)\n{\n    OS_impl_objtype_lock_t *impl;\n    struct timespec         ts;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    /*\n     * because pthread_cond_timedwait() is also a cancellation point,\n     * this pushes a cleanup handler to ensure that if canceled during this call,\n     * the mutex will be released.\n     */\n    pthread_cleanup_push(OS_Posix_ReleaseTableMutex, &impl->mutex);\n\n    clock_gettime(CLOCK_REALTIME, &ts);\n\n    if (attempts <= 10)\n    {\n        /* Wait an increasing amount of time, starting at 10ms */\n        ts.tv_nsec += attempts * attempts * 10000000;\n        if (ts.tv_nsec >= 1000000000)\n        {\n            ts.tv_nsec -= 1000000000;\n            ++ts.tv_sec;\n        }\n    }\n    else\n    {\n        /* wait 1 second (max for polling) */\n        ++ts.tv_sec;\n    }\n\n    pthread_cond_timedwait(&impl->cond, &impl->mutex, &ts);\n\n    pthread_cleanup_pop(false);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_WaitForStateChange_Impl:\nOS_impl_objtype_lock_t *const OS_impl_objtype_lock_table[OS_OBJECT_TYPE_USER] = {\n    [OS_OBJECT_TYPE_UNDEFINED]   = NULL,\n    [OS_OBJECT_TYPE_OS_TASK]     = &OS_global_task_table_lock,\n    [OS_OBJECT_TYPE_OS_QUEUE]    = &OS_queue_table_lock,\n    [OS_OBJECT_TYPE_OS_COUNTSEM] = &OS_count_sem_table_lock,\n    [OS_OBJECT_TYPE_OS_BINSEM]   = &OS_bin_sem_table_lock,\n    [OS_OBJECT_TYPE_OS_MUTEX]    = &OS_mutex_table_lock,\n    [OS_OBJECT_TYPE_OS_STREAM]   = &OS_stream_table_lock,\n    [OS_OBJECT_TYPE_OS_DIR]      = &OS_dir_table_lock,\n    [OS_OBJECT_TYPE_OS_TIMEBASE] = &OS_timebase_table_lock,\n    [OS_OBJECT_TYPE_OS_TIMECB]   = &OS_timecb_table_lock,\n    [OS_OBJECT_TYPE_OS_MODULE]   = &OS_module_table_lock,\n    [OS_OBJECT_TYPE_OS_FILESYS]  = &OS_filesys_table_lock,\n    [OS_OBJECT_TYPE_OS_CONSOLE]  = &OS_console_lock,\n    [OS_OBJECT_TYPE_OS_CONDVAR]  = &OS_condvar_lock,\n}\n...\ntypedef struct\n{\n    pthread_mutex_t mutex;\n    pthread_cond_t  cond;\n} OS_impl_objtype_lock_t\n...\nvoid OS_Posix_ReleaseTableMutex(void *mut)\n{\n    pthread_mutex_unlock(mut);\n}\n...\nvoid OS_WaitForStateChange(OS_object_token_t *token, uint32 attempts)\n{\n    osal_key_t          saved_unlock_key;\n    OS_objtype_state_t *objtype;\n\n    /*\n     * This needs to release the lock, to allow other\n     * tasks to make a change to the table.  But to avoid\n     * ownership warnings the key must also be temporarily\n     * cleared too, and restored after waiting.\n     */\n\n    objtype          = &OS_objtype_state[token->obj_type];\n    saved_unlock_key = objtype->owner_key;\n\n    /* temporarily release the table */\n    objtype->owner_key = OS_LOCK_KEY_INVALID;\n\n    /*\n     * The implementation layer takes care of the actual unlock + wait.\n     * This permits use of condition variables where these two actions\n     * are done atomically.\n     */\n    OS_WaitForStateChange_Impl(token->obj_type, attempts);\n\n    /*\n     * After return, this task owns the table again\n     */\n    /* cppcheck-suppress redundantAssignment */\n    objtype->owner_key = saved_unlock_key;\n}\n...\ntypedef uint32 osal_objtype_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "pthread_cond_timedwait(&impl->cond, &impl->mutex, &ts);",
    "objtype->owner_key = OS_LOCK_KEY_INVALID;",
    "saved_unlock_key = objtype->owner_key;",
    "if (attempts <= 10)\n    {\n        /* Wait an increasing amount of time, starting at 10ms */\n        ts.tv_nsec += attempts * attempts * 10000000;\n        if (ts.tv_nsec >= 1000000000)\n        {\n            ts.tv_nsec -= 1000000000;\n            ++ts.tv_sec;\n        }\n    }\n    else\n    {\n        /* wait 1 second (max for polling) */\n        ++ts.tv_sec;\n    }",
    "clock_gettime(CLOCK_REALTIME, &ts);",
    "/* cppcheck-suppress redundantAssignment */\n    objtype->owner_key = saved_unlock_key;",
    "pthread_cleanup_pop(false);",
    "impl = OS_impl_objtype_lock_table[idtype];",
    "pthread_cleanup_push(OS_Posix_ReleaseTableMutex, &impl->mutex);",
    "[OS_OBJECT_TYPE_UNDEFINED]   = NULL,"
  ],
  "explanation": "Other statements in the provided functions appear to perform required actions for correct runtime behavior (e.g. obtaining the current time, performing the timed wait, adjusting ts for nanosecond overflow, and using the cond/mutex). These are control or synchronization operations that, if removed, would change timing, locking, or wait semantics and therefore are not dead code. The listed fragments were selected because they are potential no-ops, redundant assignments, or housekeeping calls that may be unnecessary in some code paths or could be ineffective (for example: indexing the table into impl without a null check, pushing/popping a cleanup handler with pop(false), assignments that static tools have flagged as redundant). All other lines (not listed) implement observable behavior (time computation, the timed wait call itself, and the surrounding logic) and so do not meet the definition of dead code and do not need investigation for Rule 2.2."
}