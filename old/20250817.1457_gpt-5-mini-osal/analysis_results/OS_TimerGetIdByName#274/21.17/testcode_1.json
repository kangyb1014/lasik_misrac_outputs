{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call can lead to out-of-bounds string accesses in the downstream name checks. OS_TimerGetIdByName forwards timer_name to OS_ObjectIdFindByName which performs ARGCHECK/LENGTHCHECK and then name-based search routines. If LENGTHCHECK (or the search/match callbacks) uses string.h functions such as strlen/strcmp on the supplied pointer, and the caller passed a non-NULL pointer that is not NUL-terminated within its valid object bounds (or the buffer is shorter than OS_MAX_API_NAME), these functions will read beyond the bounds of the object. Example: caller provides an 8-byte buffer without a terminating '\\0'; LENGTHCHECK calls strlen(name) (expecting a terminator within OS_MAX_API_NAME), strlen will read past the 8 bytes until a NUL is found (or crash) \u2014 this is a violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2199.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetIdByName:\n```c\nint32 OS_TimerGetIdByName(osal_id_t *timer_id, const char *timer_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_POINTER(timer_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMECB, timer_name, timer_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper to log control flow and state. Keeps logging minimal and avoids\n * dereferencing the timer_name pointer to prevent new out-of-bounds reads.\n */\nstatic void OS_TimerGetIdByName_Log(const char *stage, void *timer_id_ptr, const char *timer_name_ptr, unsigned int objtype, int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2199.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log the stage, pointer values and numeric state. Do not inspect timer_name contents. */\n    (void)fprintf(f, \"OS_TimerGetIdByName: stage=%s, timer_id=%p, timer_name=%p, objtype=%u, return_code=%ld\\n\",\n                  stage, timer_id_ptr, (const void *)timer_name_ptr, objtype, (long)return_code);\n    (void)fflush(f);\n    (void)fclose(f);\n}\n\nint32 OS_TimerGetIdByName(osal_id_t *timer_id, const char *timer_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n    osal_id_t      caller_task;\n\n    /* Initial log: entry into the function and raw pointer values. */\n    OS_TimerGetIdByName_Log(\"entry\", (void *)timer_id, timer_name, 0u, 0);\n\n    /* Check parameters (preserve original behavior). */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_POINTER(timer_name);\n\n    /* Log after pointer checks succeeded. Note: we intentionally do NOT read or print\n     * the contents of timer_name to avoid introducing additional out-of-bounds reads.\n     */\n    OS_TimerGetIdByName_Log(\"after_pointer_checks\", (void *)timer_id, timer_name, 0u, 0);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    caller_task = OS_TaskGetId_Impl();\n    objtype = OS_ObjectIdToType_Impl(caller_task);\n\n    OS_TimerGetIdByName_Log(\"after_objtype_lookup\", (void *)timer_id, timer_name, (unsigned int)objtype, 0);\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        /* Log the incorrect object state and return the same error as original. */\n        OS_TimerGetIdByName_Log(\"incorrect_obj_state\", (void *)timer_id, timer_name, (unsigned int)objtype, (int32_t)OS_ERR_INCORRECT_OBJ_STATE);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Log just before forwarding the name to the downstream lookup routine. */\n    OS_TimerGetIdByName_Log(\"before_ObjectIdFindByName\", (void *)timer_id, timer_name, (unsigned int)objtype, 0);\n\n    /* Forward the call as in the original implementation. */\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMECB, timer_name, timer_id);\n\n    /* Log the result of the downstream call. */\n    OS_TimerGetIdByName_Log(\"after_ObjectIdFindByName\", (void *)timer_id, timer_name, (unsigned int)objtype, return_code);\n\n    return return_code;\n}\n"
}