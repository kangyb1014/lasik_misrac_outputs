{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe LENGTHCHECK(name, OS_MAX_API_NAME, ...) macro presumably measures the string length (e.g. via strlen) without guaranteed prior verification that 'name' is non-NULL and NUL-terminated. The surrounding comment indicates OS_ObjectIdFindByName may be called with name==NULL (or with non-NUL-terminated buffers supplied by callers). If LENGTHCHECK calls strlen(name) unconditionally, this can read past the bounds of the object referenced by 'name' (or dereference a NULL pointer), which violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2199.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetIdByName:\n```c\nint32 OS_TimerGetIdByName(osal_id_t *timer_id, const char *timer_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_POINTER(timer_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMECB, timer_name, timer_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helper: append control-flow and state information to a file.\n * This helper avoids dereferencing the timer_name/timer_id pointers to not\n * introduce new out-of-bounds accesses. It only logs the pointer values and\n * relevant integer results.\n */\nstatic void OS_TimerGetIdByName_Log(const char *stage, const void *timer_id, const void *timer_name, int objtype, int return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2199.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log stage, pointer values and integer states. Do not dereference timer_name. */\n        fprintf(f, \"OS_TimerGetIdByName: stage=%s, timer_id=%p, timer_name=%p, objtype=%d, return_code=%d\\n\",\n                stage, timer_id, timer_name, objtype, return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_TimerGetIdByName(osal_id_t *timer_id, const char *timer_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_POINTER(timer_name);\n\n    /* Log after parameter checks to avoid logging potentially invalid pointers. */\n    OS_TimerGetIdByName_Log(\"after_checks\", (const void *)timer_id, (const void *)timer_name, (int)0, (int)0);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n\n    /* Log the determined objtype */\n    OS_TimerGetIdByName_Log(\"after_objtype\", (const void *)timer_id, (const void *)timer_name, (int)objtype, (int)0);\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        /* Log the early-return path and reason */\n        OS_TimerGetIdByName_Log(\"early_return_incorrect_state\", (const void *)timer_id, (const void *)timer_name, (int)objtype, (int)OS_ERR_INCORRECT_OBJ_STATE);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Log just before calling the lookup helper that may perform string handling */\n    OS_TimerGetIdByName_Log(\"pre_ObjectIdFindByName\", (const void *)timer_id, (const void *)timer_name, (int)objtype, (int)0);\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMECB, timer_name, timer_id);\n\n    /* Log the result of the lookup call. This is the key evidence point for downstream analysis. */\n    OS_TimerGetIdByName_Log(\"post_ObjectIdFindByName\", (const void *)timer_id, (const void *)timer_name, (int)objtype, (int)return_code);\n\n    return return_code;\n}\n"
}