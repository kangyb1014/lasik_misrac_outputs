{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is declared as OS_impl_countsem_internal_record_t *impl and is assigned with impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token); The code only reads from impl (passes impl->id to sem_getvalue and reads impl->id), so 'impl' could be declared as const OS_impl_countsem_internal_record_t *impl. Because a non-const pointer is used where a const-qualified pointer would suffice, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemGetInfo_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/259.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemGetInfo_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGetInfo_Impl:\n```c\nint32 OS_CountSemGetInfo_Impl(const OS_object_token_t *token, OS_count_sem_prop_t *count_prop)\n{\n    int                                 sval;\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    if (sem_getvalue(&impl->id, &sval) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    /* put the info into the structure */\n    count_prop->value = sval;\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemGetInfo_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <stdint.h>\n\n/* Helper logging function. Appends control-flow and state information to /tmp/logs/259.txt */\nstatic void os_countsem_log(const char *stage, const void *token_ptr, const void *impl_ptr, int sval)\n{\n    FILE *f = fopen(\"/tmp/logs/259.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log the stage, token pointer, impl pointer, returned semaphore value (if available), and errno */\n        (void)fprintf(f, \"stage=%s token_ptr=%p impl_ptr=%p sval=%d errno=%d\\n\",\n                      stage, token_ptr, impl_ptr, sval, errno);\n        (void)fclose(f);\n    }\n}\n\nint32 OS_CountSemGetInfo_Impl(const OS_object_token_t *token, OS_count_sem_prop_t *count_prop)\n{\n    int                                 sval;\n    OS_impl_countsem_internal_record_t *impl;\n\n    /* Lookup the implementation record */\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    /* Log after lookup (do not dereference impl here) */\n    os_countsem_log(\"after_lookup\", token, (void *)impl, 0);\n\n    /* Log just before calling sem_getvalue */\n    os_countsem_log(\"before_sem_getvalue\", token, (void *)impl, 0);\n\n    if (sem_getvalue(&impl->id, &sval) < 0)\n    {\n        /* Log failure case with errno and sval (sval may be undefined on failure but logged for evidence) */\n        os_countsem_log(\"sem_getvalue_failed\", token, (void *)impl, sval);\n        return OS_SEM_FAILURE;\n    }\n\n    /* Log success including the obtained semaphore value */\n    os_countsem_log(\"sem_getvalue_success\", token, (void *)impl, sval);\n\n    /* put the info into the structure */\n    count_prop->value = sval;\n\n    /* Log final success and returned value */\n    os_countsem_log(\"return_success\", token, (void *)impl, sval);\n\n    return OS_SUCCESS;\n}\n"
}