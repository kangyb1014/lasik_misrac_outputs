{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf StubPtr->Data.Buff.Position > StubPtr->Data.Buff.TotalSize the subtraction underflows (size_t wrap) producing a very large ActualCopy which is then passed to memcpy, causing writes beyond the buffer bounds. Example: TotalSize = 10, Position = 20 -> ActualCopy becomes (size_t)(10 - 20) \u2248 SIZE_MAX-9 and memcpy(..., ActualCopy) overflows the destination. The code does not check Position <= TotalSize before the subtraction, so this scenario violates Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyFromLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2535.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyFromLocal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyFromLocal:\n```c\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyFromLocal code.\n",
  "test_code": "size_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n    FILE                *log = NULL;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        /* Open log for append; ignore failure to open and continue normal behavior */\n        log = fopen(\"/tmp/logs/2535.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* Log entry and key/state info */\n            fprintf(log, \"UT_Stub_CopyFromLocal ENTER: FuncKey=%llu, LocalBuffer=%p, MaxSize=%zu\\n\",\n                    (unsigned long long)FuncKey, LocalBuffer, MaxSize);\n            fprintf(log, \"  StubPtr=%p, TotalSize=%zu, Position=%zu, BasePtr=%p\\n\",\n                    (void *)StubPtr,\n                    (size_t)StubPtr->Data.Buff.TotalSize,\n                    (size_t)StubPtr->Data.Buff.Position,\n                    (void *)StubPtr->Data.Buff.BasePtr);\n\n            if (StubPtr->Data.Buff.Position > StubPtr->Data.Buff.TotalSize)\n            {\n                /* This is the suspicious condition that leads to subtraction underflow */\n                fprintf(log, \"  WARNING: Position (%zu) > TotalSize (%zu) - subtraction will underflow and produce a very large ActualCopy\\n\",\n                        (size_t)StubPtr->Data.Buff.Position,\n                        (size_t)StubPtr->Data.Buff.TotalSize);\n            }\n        }\n\n        /* Preserve original behavior: compute difference (may underflow) */\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"  Computed ActualCopy (after subtraction) = %zu\\n\", ActualCopy);\n        }\n\n        if (MaxSize < ActualCopy)\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"  MaxSize (%zu) < ActualCopy (%zu) -> clamp ActualCopy to MaxSize\\n\", MaxSize, ActualCopy);\n            }\n\n            ActualCopy = MaxSize;\n        }\n\n        if (log != NULL)\n        {\n            fprintf(log, \"  About to memcpy dest=%p src=%p n=%zu\\n\",\n                    (void *)&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n        }\n\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"  After memcpy: New Position=%zu, TotalSize=%zu\\n\",\n                    (size_t)StubPtr->Data.Buff.Position,\n                    (size_t)StubPtr->Data.Buff.TotalSize);\n        }\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"  Position >= TotalSize -> Clearing stub entry\\n\");\n            }\n\n            UT_ClearStubEntry(StubPtr);\n        }\n\n        if (log != NULL)\n        {\n            fprintf(log, \"UT_Stub_CopyFromLocal EXIT: ActualCopy=%zu\\n\\n\", ActualCopy);\n            fclose(log);\n            log = NULL;\n        }\n    }\n\n    return ActualCopy;\n}\n"
}