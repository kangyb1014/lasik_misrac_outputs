{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf StubPtr->Data.Buff.Position > StubPtr->Data.Buff.TotalSize then the subtraction ActualCopy = TotalSize - Position underflows (size_t wrap-around) producing a very large value. If MaxSize is not less than that large value (e.g. MaxSize is also large), the condition if (MaxSize < ActualCopy) will not reduce ActualCopy and the subsequent memcpy will be invoked with an out\u2011of\u2011bounds length, causing writes beyond the destination buffer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyFromLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2535.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyFromLocal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyFromLocal:\n```c\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyFromLocal code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n\n/*\n * Probe/log helper for reproducing and evidencing the overflow/underflow\n * scenario described for MISRA C 2023 Rule 21.17.\n * Writes human-readable traces into /tmp/logs/2535.txt.\n *\n * This helper tries not to change the original control flow/logic and\n * only reads values to log them; it does not dereference buffer memory.\n */\nstatic void UT_Probe_Log2535(const char *tag,\n                             UT_EntryKey_t FuncKey,\n                             UT_StubTableEntry_t *StubPtr,\n                             const void *LocalBuffer,\n                             size_t MaxSize,\n                             size_t ActualCopyBeforeClamp,\n                             size_t ActualCopyAfterClamp)\n{\n    FILE *f = fopen(\"/tmp/logs/2535.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    fprintf(f, \"[2535] %s\\n\", tag);\n    fprintf(f, \"  FuncKey: %p\\n\", (void *)(uintptr_t)FuncKey);\n    fprintf(f, \"  LocalBuffer: %p\\n\", LocalBuffer);\n    fprintf(f, \"  MaxSize: %zu\\n\", MaxSize);\n\n    if (StubPtr == NULL)\n    {\n        fprintf(f, \"  StubPtr: NULL\\n\\n\");\n        fclose(f);\n        return;\n    }\n\n    /* Safely read fields for logging */\n    size_t total = StubPtr->Data.Buff.TotalSize;\n    size_t pos   = StubPtr->Data.Buff.Position;\n\n    /* Compute signed difference to detect potential underflow without\n     * performing the unsigned wraparound. This is only for logging. */\n    long long signed_diff = (long long)total - (long long)pos;\n\n    fprintf(f, \"  StubPtr: %p\\n\", (void *)StubPtr);\n    fprintf(f, \"  Buff.BasePtr: %p\\n\", (void *)StubPtr->Data.Buff.BasePtr);\n    fprintf(f, \"  TotalSize: %zu\\n\", total);\n    fprintf(f, \"  Position: %zu\\n\", pos);\n    fprintf(f, \"  (signed) TotalSize - Position: %lld\\n\", signed_diff);\n\n    fprintf(f, \"  ActualCopy (computed before clamp): %zu\\n\", ActualCopyBeforeClamp);\n    fprintf(f, \"  ActualCopy (after clamp): %zu\\n\", ActualCopyAfterClamp);\n\n    /* Show the destination address that will be passed to memcpy */\n    void *dest = (void *)&StubPtr->Data.Buff.BasePtr[pos];\n    fprintf(f, \"  memcpy dest: %p, length: %zu\\n\", dest, ActualCopyAfterClamp);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    /* Log entry state */\n    UT_Probe_Log2535(\"entry\", FuncKey, StubPtr, LocalBuffer, MaxSize, 0u, 0u);\n\n    if (StubPtr != NULL)\n    {\n        /* Preserve original assignment (may underflow if Position > TotalSize) */\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n\n        /* Log computed value before clamping; compute a signed diff for clarity */\n        UT_Probe_Log2535(\"after_compute_before_clamp\", FuncKey, StubPtr, LocalBuffer, MaxSize, ActualCopy, ActualCopy);\n\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        /* Log after clamp */\n        UT_Probe_Log2535(\"after_clamp_before_memcpy\", FuncKey, StubPtr, LocalBuffer, MaxSize, 0u, ActualCopy);\n\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /* Log after memcpy and position update */\n        UT_Probe_Log2535(\"after_memcpy\", FuncKey, StubPtr, LocalBuffer, MaxSize, 0u, ActualCopy);\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_Probe_Log2535(\"clearing_entry\", FuncKey, StubPtr, LocalBuffer, MaxSize, 0u, ActualCopy);\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n"
}