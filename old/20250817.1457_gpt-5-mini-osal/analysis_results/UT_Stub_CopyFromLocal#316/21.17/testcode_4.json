{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 the memcpy can copy out of bounds if the buffer metadata are not validated. For example, if StubPtr->Data.Buff.Position > StubPtr->Data.Buff.TotalSize (underflow on the subtraction TotalSize - Position), ActualCopy becomes a very large value and, after the min(MaxSize, ActualCopy) step, memcpy(&BasePtr[Position], LocalBuffer, ActualCopy) can write beyond the end of BasePtr. Similarly, if MaxSize is larger than the actual size of the object pointed to by LocalBuffer, memcpy may read past the source buffer. Without explicit validation that Position <= TotalSize and that MaxSize reflects the actual source size, this code can violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyFromLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2535.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyFromLocal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyFromLocal:\n```c\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyFromLocal code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/2535.txt */\nstatic void UT_LogProbe(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/2535.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nsize_t UT_Stub_CopyFromLocal(UT_EntryKey_t FuncKey, const void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    UT_LogProbe(\"UT_Stub_CopyFromLocal called: FuncKey=%p, LocalBuffer=%p, MaxSize=%zu, StubPtr=%p\",\n                (void *)(uintptr_t)FuncKey, LocalBuffer, MaxSize, (void *)StubPtr);\n\n    if (StubPtr != NULL)\n    {\n        /* Log buffer metadata before computation */\n        UT_LogProbe(\"Buffer metadata before compute: BasePtr=%p, Position=%zu, TotalSize=%zu\",\n                    (void *)StubPtr->Data.Buff.BasePtr,\n                    StubPtr->Data.Buff.Position,\n                    StubPtr->Data.Buff.TotalSize);\n\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n\n        UT_LogProbe(\"Computed ActualCopy (TotalSize - Position) = %zu\", ActualCopy);\n\n        if (MaxSize < ActualCopy)\n        {\n            UT_LogProbe(\"MaxSize (%zu) < ActualCopy (%zu) -> using MaxSize\",\n                        MaxSize, ActualCopy);\n            ActualCopy = MaxSize;\n        }\n        else\n        {\n            UT_LogProbe(\"MaxSize (%zu) >= ActualCopy (%zu) -> keeping ActualCopy\",\n                        MaxSize, ActualCopy);\n        }\n\n        /* Log memcpy parameters and detect potential out-of-range condition */\n        {\n            size_t dest_index = StubPtr->Data.Buff.Position;\n            size_t dest_end = dest_index + ActualCopy; /* one past last byte to be written */\n            size_t total = StubPtr->Data.Buff.TotalSize;\n\n            UT_LogProbe(\"About to memcpy: dest_base=%p, dest_index=%zu, dest_end=%zu, total_size=%zu, src=%p, copy_len=%zu\",\n                        (void *)StubPtr->Data.Buff.BasePtr,\n                        dest_index,\n                        dest_end,\n                        total,\n                        LocalBuffer,\n                        ActualCopy);\n\n            if (dest_index > total)\n            {\n                UT_LogProbe(\"WARNING: Position (%zu) > TotalSize (%zu) - subtraction underflow likely occurred\",\n                            dest_index, total);\n            }\n            if (dest_end > total)\n            {\n                UT_LogProbe(\"WARNING: dest_end (%zu) > TotalSize (%zu) - potential write beyond buffer bounds\",\n                            dest_end, total);\n            }\n        }\n\n        memcpy(&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], LocalBuffer, ActualCopy);\n\n        UT_LogProbe(\"memcpy completed: wrote %zu bytes to BasePtr[%zu]\",\n                    ActualCopy, StubPtr->Data.Buff.Position);\n\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        UT_LogProbe(\"Updated Position = %zu (TotalSize = %zu)\",\n                    StubPtr->Data.Buff.Position, StubPtr->Data.Buff.TotalSize);\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_LogProbe(\"Position >= TotalSize, calling UT_ClearStubEntry on %p\",\n                        (void *)StubPtr);\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n    else\n    {\n        UT_LogProbe(\"No stub entry found for FuncKey=%p\", (void *)(uintptr_t)FuncKey);\n    }\n\n    UT_LogProbe(\"UT_Stub_CopyFromLocal returning ActualCopy=%zu\", ActualCopy);\n    return ActualCopy;\n}\n"
}