{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe if statement tests (token->lock_mode < OS_OBJECT_TYPE_USER && token->lock_mode != OS_LOCK_MODE_NONE) but the body is empty (/* nothing to do */). The empty block performs no operations \u2014 executing it has no effect and removing the whole if (including the condition evaluation) would not change the program logic (aside from trivial timing). This is dead code and very likely a typo (the surrounding code uses token->obj_type in similar checks), so it violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFinalizeNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1554.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFinalizeNew as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFinalizeNew:\n```c\nint32 OS_ObjectIdFinalizeNew(int32 operation_status, OS_object_token_t *token, osal_id_t *outid)\n{\n    osal_id_t final_id;\n\n    /* if operation was unsuccessful, then clear\n     * the active_id field within the record, so\n     * the record can be re-used later.\n     *\n     * Otherwise, ensure that the record_id to be\n     * exported is sane (it always should be)\n     */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = token->obj_id;\n    }\n    else\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdTransactionFinish(token, &final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_NotifyEvent(OS_EVENT_RESOURCE_CREATED, token->obj_id, NULL);\n    }\n\n    if (outid != NULL)\n    {\n        /* always write the final value to the output buffer */\n        *outid = final_id;\n    }\n\n    return operation_status;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFinalizeNew code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe helper to log control flow and state to /tmp/logs/1554.txt\n * This function is intentionally lightweight and does not alter program logic.\n */\nstatic void OS_ObjectIdLogProbe(const char *stage, int32 operation_status, const OS_object_token_t *token, const osal_id_t *outid, osal_id_t final_id)\n{\n    FILE *f = fopen(\"/tmp/logs/1554.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging is not possible, do nothing to preserve original behavior */\n        return;\n    }\n\n    time_t t = time(NULL);\n\n    /* Print as many token fields as are typically present. Casts to unsigned long long\n     * are used to avoid format mismatches for integer-sized id types.\n     */\n    fprintf(f, \"timestamp=%ld stage=%s op_status=%d token=%p obj_id=%llu\",\n            (long)t,\n            stage,\n            (int)operation_status,\n            (const void *)token,\n            (unsigned long long)token->obj_id);\n\n    /* If the token contains obj_type and lock_mode fields (expected in this code base), log them. */\n    fprintf(f, \" obj_type=%d lock_mode=%d final_id=%llu outid=%p\\n\",\n            (int)token->obj_type,\n            (int)token->lock_mode,\n            (unsigned long long)final_id,\n            (const void *)outid);\n\n    fclose(f);\n}\n\nint32 OS_ObjectIdFinalizeNew(int32 operation_status, OS_object_token_t *token, osal_id_t *outid)\n{\n    osal_id_t final_id;\n\n    /* Log entry with initial state */\n    OS_ObjectIdLogProbe(\"entry\", operation_status, token, outid, (osal_id_t)0);\n\n    /* if operation was unsuccessful, then clear\n     * the active_id field within the record, so\n     * the record can be re-used later.\n     *\n     * Otherwise, ensure that the record_id to be\n     * exported is sane (it always should be)\n     */\n    if (operation_status == OS_SUCCESS)\n    {\n        final_id = token->obj_id;\n        OS_ObjectIdLogProbe(\"set_final_success\", operation_status, token, outid, final_id);\n    }\n    else\n    {\n        final_id = OS_OBJECT_ID_UNDEFINED;\n        OS_ObjectIdLogProbe(\"set_final_failure\", operation_status, token, outid, final_id);\n    }\n\n    /* Either way we must unlock the object type */\n    OS_ObjectIdLogProbe(\"before_transaction_finish\", operation_status, token, outid, final_id);\n    OS_ObjectIdTransactionFinish(token, &final_id);\n    OS_ObjectIdLogProbe(\"after_transaction_finish\", operation_status, token, outid, final_id);\n\n    /* Give event callback to the application */\n    if (operation_status == OS_SUCCESS)\n    {\n        OS_ObjectIdLogProbe(\"before_notify\", operation_status, token, outid, final_id);\n        OS_NotifyEvent(OS_EVENT_RESOURCE_CREATED, token->obj_id, NULL);\n        OS_ObjectIdLogProbe(\"after_notify\", operation_status, token, outid, final_id);\n    }\n    else\n    {\n        OS_ObjectIdLogProbe(\"no_notify_failure\", operation_status, token, outid, final_id);\n    }\n\n    if (outid != NULL)\n    {\n        /* always write the final value to the output buffer */\n        OS_ObjectIdLogProbe(\"before_write_outid\", operation_status, token, outid, final_id);\n        *outid = final_id;\n        OS_ObjectIdLogProbe(\"after_write_outid\", operation_status, token, outid, final_id);\n    }\n    else\n    {\n        OS_ObjectIdLogProbe(\"outid_null\", operation_status, token, outid, final_id);\n    }\n\n    OS_ObjectIdLogProbe(\"return\", operation_status, token, outid, final_id);\n\n    return operation_status;\n}\n"
}