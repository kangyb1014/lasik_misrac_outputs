{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_CHECK_PATHNAME (via OS_CHECK_STRING) invokes unbounded string.h functions (e.g. strlen, strcmp, strcpy) on the 'name' pointer, a read can occur past the bounds of the object. For example, if 'name' points to a char buffer that is not NUL-terminated within OS_MAX_PATH_LEN bytes (e.g. char buf[10] filled without a terminating '\\0') then strlen(name) or other unbounded routines will scan past buf and access memory beyond the object, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_chkfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1439.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_chkfs as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_chkfs:\n```c\nint32 OS_chkfs(const char *name, bool repair)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileSysCheckVolume_Impl(&token, repair);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_chkfs code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n#include <stdbool.h>\n\n/* Probe function to log events for OS_chkfs without inspecting the contents of 'name'.\n * This intentionally logs the pointer value only (not the string contents) to avoid\n * reading past the bounds of the object referenced by 'name'.\n */\nstatic void os_chkfs_log_event(const char *stage, const char *name, bool repair, int32_t return_code, const void *token_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/1439.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not change program behavior; just return. */\n        return;\n    }\n\n    time_t t = time(NULL);\n    /* Log timestamp, stage, pointer value of name, repair flag, return_code, and token pointer. */\n    fprintf(f, \"[%ld] stage=%s name_ptr=%p repair=%d return_code=%ld token_ptr=%p\\n\",\n            (long)t,\n            (stage != NULL) ? stage : \"(null)\",\n            (const void *)name,\n            repair ? 1 : 0,\n            (long)return_code,\n            token_ptr);\n\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_chkfs(const char *name, bool repair)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry: before performing any checks. Use a sentinel for return_code since it's uninitialized here. */\n    os_chkfs_log_event(\"entry\", name, repair, (int32_t)-9999, NULL);\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n\n    /* Log that OS_CHECK_PATHNAME was invoked. Do not attempt to read `name` contents. */\n    os_chkfs_log_event(\"after_OS_CHECK_PATHNAME\", name, repair, (int32_t)-9998, NULL);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    os_chkfs_log_event(\"before_ObjectIdGetBySearch\", name, repair, (int32_t)-9997, NULL);\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    /* Log result of OS_ObjectIdGetBySearch. Token pointer logged but token contents are not inspected. */\n    os_chkfs_log_event(\"after_ObjectIdGetBySearch\", name, repair, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        os_chkfs_log_event(\"before_FileSysCheckVolume_Impl\", name, repair, return_code, &token);\n\n        return_code = OS_FileSysCheckVolume_Impl(&token, repair);\n\n        os_chkfs_log_event(\"after_FileSysCheckVolume_Impl\", name, repair, return_code, &token);\n\n        OS_ObjectIdRelease(&token);\n\n        os_chkfs_log_event(\"after_ObjectIdRelease\", name, repair, return_code, NULL);\n    }\n    else\n    {\n        /* Log that we did not obtain the object token and are exiting. */\n        os_chkfs_log_event(\"no_token_obtained\", name, repair, return_code, NULL);\n    }\n\n    /* Final exit log. */\n    os_chkfs_log_event(\"exit\", name, repair, return_code, NULL);\n\n    return return_code;\n}\n"
}