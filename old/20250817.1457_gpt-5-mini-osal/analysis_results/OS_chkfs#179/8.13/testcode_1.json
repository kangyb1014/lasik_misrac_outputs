{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nYes. OS_chkfs passes a const char * (name) to OS_ObjectIdGetBySearch by casting to (void *), discarding the const qualifier. The MatchFunc (OS_FileSys_FindVirtMountPoint) receives this as void *ref and immediately treats it as const char *. The parameter 'void *arg' (and the function pointer type) should be 'const void *' so the const qualification is preserved.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_chkfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1435.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_chkfs as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_chkfs:\n```c\nint32 OS_chkfs(const char *name, bool repair)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileSysCheckVolume_Impl(&token, repair);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_chkfs code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n\n/*\n * Probe logger that appends diagnostic messages to /tmp/logs/1435.txt.\n * Uses varargs so it can be used similarly to printf.\n */\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1435.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_chkfs(const char *name, bool repair)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and input state */\n    probe_logf(\"OS_chkfs: entry: name=%p, name_str=\\\"%s\\\", repair=%d\",\n               (void *)name, (name != NULL) ? name : \"(null)\", (int)repair);\n\n    /* Check parameters (preserve original logic) */\n    OS_CHECK_PATHNAME(name);\n\n    /* Log just before calling OS_ObjectIdGetBySearch, showing the cast that discards const */\n    probe_logf(\"OS_chkfs: about to call OS_ObjectIdGetBySearch; passing argument (void *)name = %p (const discarded via cast)\",\n               (void *)name);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    probe_logf(\"OS_chkfs: OS_ObjectIdGetBySearch returned %d\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_logf(\"OS_chkfs: acquired token at stack addr=%p (sizeof token=%zu)\", (void *)&token, (size_t)sizeof(token));\n\n        probe_logf(\"OS_chkfs: calling OS_FileSysCheckVolume_Impl with token=%p, repair=%d\", (void *)&token, (int)repair);\n        return_code = OS_FileSysCheckVolume_Impl(&token, repair);\n        probe_logf(\"OS_chkfs: OS_FileSysCheckVolume_Impl returned %d\", return_code);\n\n        OS_ObjectIdRelease(&token);\n        probe_logf(\"OS_chkfs: released token at stack addr=%p\", (void *)&token);\n    }\n\n    probe_logf(\"OS_chkfs: exit returning %d\", return_code);\n    return return_code;\n}\n"
}