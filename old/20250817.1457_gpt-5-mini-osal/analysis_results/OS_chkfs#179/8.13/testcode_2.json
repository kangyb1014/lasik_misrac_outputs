{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation: OS_FileSys_FindVirtMountPoint declares its first parameter as void *ref (non-const) but immediately treats it as a pointer to const char (const char *target = (const char *)ref). In OS_chkfs a const char *name is cast to (void *) when passed into OS_ObjectIdGetBySearch, discarding the const qualifier. The function does not modify the referenced data, so the pointer could and should be const-qualified (e.g. const void *ref or const char *ref / update OS_ObjectMatchFunc_t). This discarding of const violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_chkfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1435.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_chkfs as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_chkfs:\n```c\nint32 OS_chkfs(const char *name, bool repair)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileSysCheckVolume_Impl(&token, repair);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_chkfs code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n\n/* Probe helper: append a log entry describing the control flow and key state.\n * Writes to /tmp/logs/1435.txt so other agents can reproduce the scenario.\n */\nstatic void OS_chkfs_probe_log(const char *stage, const char *name, bool repair, const void *ref_ptr, const void *token_ptr, int return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1435.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    fprintf(f, \"OS_chkfs: stage=%s\\n\", stage);\n    fprintf(f, \"  name=%s\\n\", (name != NULL) ? name : \"(null)\");\n    fprintf(f, \"  repair=%d\\n\", repair ? 1 : 0);\n    fprintf(f, \"  name_ptr=%p\\n\", (const void *)name);\n    fprintf(f, \"  ref_ptr_after_cast=%p\\n\", ref_ptr);\n    fprintf(f, \"  token_addr=%p\\n\", token_ptr);\n    fprintf(f, \"  return_code=%d\\n\", return_code);\n    fprintf(f, \"\\n\");\n\n    fclose(f);\n}\n\nint32 OS_chkfs(const char *name, bool repair)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n\n    /* Log entry and the fact that the const-qualified name will be cast to void * when passed through the search API. */\n    OS_chkfs_probe_log(\"entry_before_search\", name, repair, (void *)name, (const void *)&token, -1);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    /* Log result of the search call (this will show the return code and token address). */\n    OS_chkfs_probe_log(\"after_search\", name, repair, (void *)name, (const void *)&token, (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before invoking the implementation that actually checks the volume. */\n        OS_chkfs_probe_log(\"before_check_impl\", name, repair, (void *)name, (const void *)&token, (int)return_code);\n\n        return_code = OS_FileSysCheckVolume_Impl(&token, repair);\n\n        /* Log the result of the check implementation. */\n        OS_chkfs_probe_log(\"after_check_impl\", name, repair, (void *)name, (const void *)&token, (int)return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the token. */\n        OS_chkfs_probe_log(\"after_release\", name, repair, (void *)name, (const void *)&token, (int)return_code);\n    }\n\n    /* Final return value log. */\n    OS_chkfs_probe_log(\"exit\", name, repair, (void *)name, (const void *)&token, (int)return_code);\n\n    return return_code;\n}\n"
}