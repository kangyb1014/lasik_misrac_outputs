{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to OS_FileSysCheckVolume_Impl(&token, repair) is a dead operation: the implementation is a stub that unconditionally returns OS_ERR_NOT_IMPLEMENTED and has no side-effects (it takes a const token pointer). Removing the function call and directly assigning return_code = OS_ERR_NOT_IMPLEMENTED (or otherwise propagating that constant) would not change program behaviour, so the executed call is dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_chkfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1434.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_chkfs as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_chkfs:\n```c\nint32 OS_chkfs(const char *name, bool repair)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileSysCheckVolume_Impl(&token, repair);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_chkfs code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/*\n * Probe logger: append human-readable traces to /tmp/logs/1434.txt.\n * This helper preserves program flow and only adds side-effect logging\n * to help reproduce the reported dead-call scenario.\n */\nstatic void OS_chkfs_probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1434.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* If logging fails, do not alter program behaviour */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_chkfs(const char *name, bool repair)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and parameters */\n    OS_chkfs_probe_log(\"OS_chkfs ENTRY: name=\\\"%s\\\" repair=%d\\n\", (name?name:\"(null)\"), (int)repair);\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    OS_chkfs_probe_log(\"OS_ObjectIdGetBySearch returned %ld\\n\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log the token address and intent to call the implementation */\n        OS_chkfs_probe_log(\"About to call OS_FileSysCheckVolume_Impl with token=%p repair=%d\\n\", (void *)&token, (int)repair);\n\n        /* Preserve original logic: call the implementation and capture its return code */\n        return_code = OS_FileSysCheckVolume_Impl(&token, repair);\n\n        /* Log the implementation result */\n        OS_chkfs_probe_log(\"OS_FileSysCheckVolume_Impl returned %ld\\n\", (long)return_code);\n\n        OS_chkfs_probe_log(\"Releasing token %p\\n\", (void *)&token);\n        OS_ObjectIdRelease(&token);\n    }\n\n    OS_chkfs_probe_log(\"OS_chkfs EXIT returning %ld\\n\", (long)return_code);\n\n    return return_code;\n}\n"
}