{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call OS_Unlock_Global(token) passes a pointer to an OS_object_token_t. If the OS_Unlock_Global function is prototyped as void OS_Unlock_Global(OS_object_token_t *token) but only reads fields from the token (for example lock_mode, obj_idx) and does not modify the token contents, then the parameter should be a pointer to const (const OS_object_token_t *token). Leaving the parameter as a non-const pointer when the function could accept a const-qualified pointer violates MISRA C 2023 Rule 8.13. (If, however, OS_Unlock_Global actually modifies the token, then no violation exists.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemTake code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemTake as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemTake:\n```c\nint32 OS_CountSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemTake_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemTake code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\n/*\n * Probe / logging helpers\n * These are kept static and use const-qualified pointers where appropriate.\n */\nstatic FILE *OpenLog(void)\n{\n    FILE *f = fopen(\"/tmp/logs/1179.txt\", \"a\");\n    return f;\n}\n\nstatic void LogBytes(FILE *f, const void *data, size_t len)\n{\n    const unsigned char *b = (const unsigned char *)data;\n    for (size_t i = 0; i < len; ++i)\n    {\n        fprintf(f, \"%02X\", b[i]);\n        if (((i + 1) % 16) == 0 && (i + 1) < len)\n        {\n            fprintf(f, \"\\n\");\n        }\n    }\n    fprintf(f, \"\\n\");\n}\n\nstatic void LogToken(const char *label, const OS_object_token_t *token)\n{\n    FILE *f = OpenLog();\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"%s: token_size=%zu\\n\", label, sizeof(*token));\n    /* Dump raw bytes so we can detect any modifications by callees */\n    LogBytes(f, token, sizeof(*token));\n    fflush(f);\n    fclose(f);\n}\n\n/*\n * Original function with probes inserted. The original control flow\n * and behavior are preserved. The probes capture the token state\n * before and after the implementation call so other agents can\n * determine whether OS_CountSemTake_Impl (or downstream functions)\n * modify the token (evidence relevant to MISRA rule 8.13).\n */\nint32 OS_CountSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and parameter */\n    {\n        FILE *f = OpenLog();\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_CountSemTake: entry sem_id=%llu\\n\", (unsigned long long)sem_id);\n            fclose(f);\n        }\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Capture token state before calling the implementation */\n        LogToken(\"token_before_Impl\", &token);\n\n        /* Original call preserved */\n        return_code = OS_CountSemTake_Impl(&token);\n\n        /* Capture token state after the implementation call */\n        LogToken(\"token_after_Impl\", &token);\n\n        /* Log the return code after implementation */\n        {\n            FILE *f = OpenLog();\n            if (f != NULL)\n            {\n                fprintf(f, \"OS_CountSemTake: after Impl return_code=%d\\n\", return_code);\n                fclose(f);\n            }\n        }\n    }\n    else\n    {\n        FILE *f = OpenLog();\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_CountSemTake: OS_ObjectIdGetById returned %d\\n\", return_code);\n            fclose(f);\n        }\n    }\n\n    return return_code;\n}\n"
}