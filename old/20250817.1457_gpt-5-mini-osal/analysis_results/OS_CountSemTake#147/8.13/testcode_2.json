{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_ObjectIdConvertToken takes a non-const pointer (OS_object_token_t *token) but, in the shown implementation, it only reads fields from *token (uses token->lock_mode, OS_ObjectIdFromToken(token), passes it to helpers) and never writes to token itself. Therefore the parameter could and should be declared as const OS_object_token_t *token. If OS_WaitForStateChange or any called routine actually modifies the token, that would justify the current signature; but nothing in the provided code modifies the token, so Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemTake code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemTake as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemTake:\n```c\nint32 OS_CountSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemTake_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemTake code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe logging helper - writes human readable records of control flow and token state\n * to /tmp/logs/1179.txt. This helper only reads the token fields when the provided\n * return_code indicates the token was successfully acquired, to avoid reading\n * uninitialized data.\n */\nstatic void OS_LogTokenState(const OS_object_token_t *token, osal_id_t sem_id, int32 return_code, const char *stage)\n{\n    FILE *f = fopen(\"/tmp/logs/1179.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"%ld: stage=%s sem_id=%lu return=%ld\",\n            (long)t,\n            (stage != NULL) ? stage : \"(null)\",\n            (unsigned long)sem_id,\n            (long)return_code);\n\n    /* Only access token fields if the token acquisition was reported successful. */\n    if (return_code == OS_SUCCESS && token != NULL)\n    {\n        /* Print pointer value and some observable token fields for evidence. */\n        fprintf(f, \" token_ptr=%p lock_mode=%lu objid=%lu\",\n                (const void *)token,\n                (unsigned long)token->lock_mode,\n                (unsigned long)OS_ObjectIdFromToken(token));\n    }\n    else\n    {\n        fprintf(f, \" token_valid=false\");\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CountSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of object-id lookup and token state (if valid) */\n    OS_LogTokenState(&token, sem_id, return_code, \"AfterGetById\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before calling the implementation */\n        OS_LogTokenState(&token, sem_id, return_code, \"BeforeImpl\");\n\n        return_code = OS_CountSemTake_Impl(&token);\n\n        /* Log after implementation returns to capture any changes in return code */\n        OS_LogTokenState(&token, sem_id, return_code, \"AfterImpl\");\n    }\n\n    return return_code;\n}\n"
}