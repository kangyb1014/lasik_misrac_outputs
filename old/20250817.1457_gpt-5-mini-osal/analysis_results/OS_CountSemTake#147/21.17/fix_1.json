{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void UT_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1183.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timebuf[64];\n        if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(f, \"%s \", timebuf);\n        }\n    }\n\n    fprintf(f, \"pid=%ld \", (long)getpid());\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CountSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log function entry and sem_id value */\n    UT_LogProbe(\"OS_CountSemTake ENTRY: sem_id=%lu\", (unsigned long)sem_id);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of OS_ObjectIdGetById and the address of the token on the stack */\n    UT_LogProbe(\"OS_ObjectIdGetById returned %d; token_address=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        UT_LogProbe(\"About to call OS_CountSemTake_Impl with token_address=%p\", (void *)&token);\n        return_code = OS_CountSemTake_Impl(&token);\n        UT_LogProbe(\"OS_CountSemTake_Impl returned %d\", (int)return_code);\n    }\n    else\n    {\n        UT_LogProbe(\"Skipping OS_CountSemTake_Impl due to prior error: %d\", (int)return_code);\n    }\n\n    UT_LogProbe(\"OS_CountSemTake EXIT: sem_id=%lu return_code=%d\", (unsigned long)sem_id, (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpcm28mob8/src/src/os/shared/src/osapi-countsem.c: In function 'UT_LogProbe':\n/tmp/tmpcm28mob8/src/src/os/shared/src/osapi-countsem.c:180:15: error: storage size of 'tm_buf' isn't known\n  180 |     struct tm tm_buf;\n      |               ^~~~~~\n/tmp/tmpcm28mob8/src/src/os/shared/src/osapi-countsem.c:194:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  194 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-countsem.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-countsem.dir/__/__/os/shared/src/osapi-countsem.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3415: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-countsem.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_CountSemTake as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <time.h>\n#include <unistd.h>\n#include <stdint.h>\n\n/* Minimal typedefs and forward declarations so this file compiles by itself.\n   These mirror the external symbols used by the original code but do not\n   provide implementations. They are declarations only (no mock functions).\n*/\ntypedef int32_t int32;\ntypedef unsigned long osal_id_t;\n\ntypedef struct\n{\n    /* opaque token contents are not required for compilation */\n    int placeholder;\n} OS_object_token_t;\n\n/* Constants used by the function (declared as ints to avoid macros) */\nenum\n{\n    OS_LOCK_MODE_NONE = 0,\n    LOCAL_OBJID_TYPE = 0,\n    OS_SUCCESS = 0\n};\n\n/* External functions used by OS_CountSemTake. Declared only. */\nint32 OS_ObjectIdGetById(int lock_mode, int local_type, osal_id_t id, OS_object_token_t *token);\nint32 OS_CountSemTake_Impl(OS_object_token_t *token);\n\nstatic void UT_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1183.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timebuf[64];\n        if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(f, \"%s \", timebuf);\n        }\n    }\n\n    fprintf(f, \"pid=%ld \", (long)getpid());\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CountSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log function entry and sem_id value */\n    UT_LogProbe(\"OS_CountSemTake ENTRY: sem_id=%lu\", (unsigned long)sem_id);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of OS_ObjectIdGetById and the address of the token on the stack */\n    UT_LogProbe(\"OS_ObjectIdGetById returned %d; token_address=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        UT_LogProbe(\"About to call OS_CountSemTake_Impl with token_address=%p\", (void *)&token);\n        return_code = OS_CountSemTake_Impl(&token);\n        UT_LogProbe(\"OS_CountSemTake_Impl returned %d\", (int)return_code);\n    }\n    else\n    {\n        UT_LogProbe(\"Skipping OS_CountSemTake_Impl due to prior error: %d\", (int)return_code);\n    }\n\n    UT_LogProbe(\"OS_CountSemTake EXIT: sem_id=%lu return_code=%d\", (unsigned long)sem_id, (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "I added the proper headers (<time.h> and <stdarg.h>, plus stdio.h, unistd.h and stdint.h) so that struct tm, time functions, and va_list are known to the compiler. I also provided minimal typedefs and external function declarations (int32, osal_id_t, OS_object_token_t, and the prototypes for OS_ObjectIdGetById and OS_CountSemTake_Impl) so the file compiles standalone. No logic of OS_CountSemTake was changed."
}