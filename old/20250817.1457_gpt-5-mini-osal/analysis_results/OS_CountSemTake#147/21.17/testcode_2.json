{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe strcmp call can be passed invalid pointers (NULL, dangling, or non-NUL-terminated buffers) and there is no prior validation. For example, if UT_Stub_RegisterReturnType was called with TypeName == NULL (or with a pointer to a stack buffer that has gone out of scope), then later UT_Stub_GetReturnValuePtr executes strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) which dereferences a NULL or invalid pointer and/or reads past the object bounds. This can result in accesses beyond the bounds of the objects referenced by the pointer parameters.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemTake code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1183.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemTake as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemTake:\n```c\nint32 OS_CountSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemTake_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemTake code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <unistd.h>\n\n/*\n * Probe logging helper: append human-readable logs with a timestamp\n * to /tmp/logs/1183.txt. This function is intentionally lightweight\n * to avoid changing program logic. It does not allocate dynamic\n * resources except the FILE* used for the append.\n */\nstatic void UT_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1183.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timebuf[64];\n        if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(f, \"%s \", timebuf);\n        }\n    }\n\n    fprintf(f, \"pid=%ld \", (long)getpid());\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Original function with inserted probes to capture control flow and\n * state relevant to reproducing potential out-of-bounds string usage\n * elsewhere in the system. The original logic is preserved.\n */\nint32 OS_CountSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log function entry and sem_id value */\n    UT_LogProbe(\"OS_CountSemTake ENTRY: sem_id=%lu\", (unsigned long)sem_id);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of OS_ObjectIdGetById and the address of the token on the stack */\n    UT_LogProbe(\"OS_ObjectIdGetById returned %d; token_address=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        UT_LogProbe(\"About to call OS_CountSemTake_Impl with token_address=%p\", (void *)&token);\n        return_code = OS_CountSemTake_Impl(&token);\n        UT_LogProbe(\"OS_CountSemTake_Impl returned %d\", (int)return_code);\n    }\n    else\n    {\n        UT_LogProbe(\"Skipping OS_CountSemTake_Impl due to prior error: %d\", (int)return_code);\n    }\n\n    UT_LogProbe(\"OS_CountSemTake EXIT: sem_id=%lu return_code=%d\", (unsigned long)sem_id, (int)return_code);\n\n    return return_code;\n}\n"
}