{
  "user_message": "An agent A claimed that the following OS_CountSemTake code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_CountSemTake.\n```c\nint32 OS_CountSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemTake_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The strcmp call can be passed invalid pointers (NULL, dangling, or non-NUL-terminated buffers) and there is no prior validation. For example, if UT_Stub_RegisterReturnType was called with TypeName == NULL (or with a pointer to a stack buffer that has gone out of scope), then later UT_Stub_GetReturnValuePtr executes strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) which dereferences a NULL or invalid pointer and/or reads past the object bounds. This can result in accesses beyond the bounds of the objects referenced by the pointer parameters.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\ntypedef int32_t int32;\ntypedef unsigned long osal_id_t;\ntypedef struct\n{\n    /* opaque token contents are not required for compilation */\n    int placeholder;\n} OS_object_token_t;\nint32 OS_ObjectIdGetById(int lock_mode, int local_type, osal_id_t id, OS_object_token_t *token);\nint32 OS_CountSemTake_Impl(OS_object_token_t *token);\nstatic void UT_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1183.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timebuf[64];\n        if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(f, \"%s \", timebuf);\n        }\n    }\n\n    fprintf(f, \"pid=%ld \", (long)getpid());\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CountSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log function entry and sem_id value */\n    UT_LogProbe(\"OS_CountSemTake ENTRY: sem_id=%lu\", (unsigned long)sem_id);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of OS_ObjectIdGetById and the address of the token on the stack */\n    UT_LogProbe(\"OS_ObjectIdGetById returned %d; token_address=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        UT_LogProbe(\"About to call OS_CountSemTake_Impl with token_address=%p\", (void *)&token);\n        return_code = OS_CountSemTake_Impl(&token);\n        UT_LogProbe(\"OS_CountSemTake_Impl returned %d\", (int)return_code);\n    }\n    else\n    {\n        UT_LogProbe(\"Skipping OS_CountSemTake_Impl due to prior error: %d\", (int)return_code);\n    }\n\n    UT_LogProbe(\"OS_CountSemTake EXIT: sem_id=%lu return_code=%d\", (unsigned long)sem_id, (int)return_code);\n\n    return return_code;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The reported violation is not correct for the shown OS_CountSemTake function. MISRA C 2023 Rule 21.17 concerns unsafe uses of functions from <string.h> (memcpy, strcmp, strcpy, strlen, etc.). The provided OS_CountSemTake implementation contains no calls to any <string.h> functions \u2014 it only calls OS_ObjectIdGetById and OS_CountSemTake_Impl and passes the address of a local token. The agent's scenario describes a strcmp in some UT_Stub_GetReturnValuePtr code and NULL/dangling pointers there; that is a problem if true, but it would be a violation in the UT_Stub_* code (where strcmp is used), not in OS_CountSemTake. The supplied test harness/logging code also does not use string.h functions and failed to compile, so it offers no evidence of a Rule 21.17 violation in OS_CountSemTake. In short: nothing in the target function violates Rule 21.17 \u2014 any string-handling issue would need to be reported against the code that actually calls the string functions."
}