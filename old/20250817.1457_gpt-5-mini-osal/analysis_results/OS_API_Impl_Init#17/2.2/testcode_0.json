{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf idtype has a value not matched by any case label, the default branch is executed; it contains only a no-op \"break;\". That operation can be removed without affecting program behaviour (control simply continues after the switch), so it constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_API_Impl_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/138.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_API_Impl_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_API_Impl_Init:\n```c\nint32 OS_API_Impl_Init(osal_objtype_t idtype)\n{\n    int32 return_code;\n\n    return_code = OS_Posix_TableMutex_Init(idtype);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            return_code = OS_Posix_TaskAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            return_code = OS_Posix_QueueAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            return_code = OS_Posix_BinSemAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            return_code = OS_Posix_CountSemAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            return_code = OS_Posix_MutexAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            return_code = OS_Posix_ModuleAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            return_code = OS_Posix_TimeBaseAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            return_code = OS_Posix_StreamAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            return_code = OS_Posix_DirAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            return_code = OS_Posix_FileSysAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            return_code = OS_Posix_CondVarAPI_Impl_Init();\n            break;\n        default:\n            break;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_API_Impl_Init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Probe logger: writes simple state and control-flow information to /tmp/logs/138.txt\n * This preserves original logic; it only appends human-readable records for debugging. */\nstatic void OS_API_Impl_LogState(const char *event, osal_objtype_t idtype, int32 return_code)\n{\n    /* Keep the logger implementation small and side-effect free as much as possible. */\n    FILE *fp = fopen(\"/tmp/logs/138.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging cannot be performed, do not change program behaviour. */\n        return;\n    }\n\n    /* Write a single-line record: event, idtype, return_code */\n    /* Cast idtype to int for portability in printing. */\n    fprintf(fp, \"%s: idtype=%d return_code=%d\\n\", event, (int)idtype, (int)return_code);\n    fclose(fp);\n}\n\nint32 OS_API_Impl_Init(osal_objtype_t idtype)\n{\n    int32 return_code;\n\n    /* Log entry and the idtype value */\n    OS_API_Impl_LogState(\"ENTER\", idtype, 0);\n\n    return_code = OS_Posix_TableMutex_Init(idtype);\n\n    /* Log result of TableMutex init */\n    OS_API_Impl_LogState(\"TABLE_MUTEX_INIT\", idtype, return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log early return due to failure */\n        OS_API_Impl_LogState(\"EARLY_RETURN_TABLE_MUTEX_FAILED\", idtype, return_code);\n        return return_code;\n    }\n\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            OS_API_Impl_LogState(\"CASE_OS_TASK_BEFORE\", idtype, return_code);\n            return_code = OS_Posix_TaskAPI_Impl_Init();\n            OS_API_Impl_LogState(\"CASE_OS_TASK_AFTER\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            OS_API_Impl_LogState(\"CASE_OS_QUEUE_BEFORE\", idtype, return_code);\n            return_code = OS_Posix_QueueAPI_Impl_Init();\n            OS_API_Impl_LogState(\"CASE_OS_QUEUE_AFTER\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            OS_API_Impl_LogState(\"CASE_OS_BINSEM_BEFORE\", idtype, return_code);\n            return_code = OS_Posix_BinSemAPI_Impl_Init();\n            OS_API_Impl_LogState(\"CASE_OS_BINSEM_AFTER\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            OS_API_Impl_LogState(\"CASE_OS_COUNTSEM_BEFORE\", idtype, return_code);\n            return_code = OS_Posix_CountSemAPI_Impl_Init();\n            OS_API_Impl_LogState(\"CASE_OS_COUNTSEM_AFTER\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            OS_API_Impl_LogState(\"CASE_OS_MUTEX_BEFORE\", idtype, return_code);\n            return_code = OS_Posix_MutexAPI_Impl_Init();\n            OS_API_Impl_LogState(\"CASE_OS_MUTEX_AFTER\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            OS_API_Impl_LogState(\"CASE_OS_MODULE_BEFORE\", idtype, return_code);\n            return_code = OS_Posix_ModuleAPI_Impl_Init();\n            OS_API_Impl_LogState(\"CASE_OS_MODULE_AFTER\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            OS_API_Impl_LogState(\"CASE_OS_TIMEBASE_BEFORE\", idtype, return_code);\n            return_code = OS_Posix_TimeBaseAPI_Impl_Init();\n            OS_API_Impl_LogState(\"CASE_OS_TIMEBASE_AFTER\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            OS_API_Impl_LogState(\"CASE_OS_STREAM_BEFORE\", idtype, return_code);\n            return_code = OS_Posix_StreamAPI_Impl_Init();\n            OS_API_Impl_LogState(\"CASE_OS_STREAM_AFTER\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            OS_API_Impl_LogState(\"CASE_OS_DIR_BEFORE\", idtype, return_code);\n            return_code = OS_Posix_DirAPI_Impl_Init();\n            OS_API_Impl_LogState(\"CASE_OS_DIR_AFTER\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            OS_API_Impl_LogState(\"CASE_OS_FILESYS_BEFORE\", idtype, return_code);\n            return_code = OS_Posix_FileSysAPI_Impl_Init();\n            OS_API_Impl_LogState(\"CASE_OS_FILESYS_AFTER\", idtype, return_code);\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            OS_API_Impl_LogState(\"CASE_OS_CONDVAR_BEFORE\", idtype, return_code);\n            return_code = OS_Posix_CondVarAPI_Impl_Init();\n            OS_API_Impl_LogState(\"CASE_OS_CONDVAR_AFTER\", idtype, return_code);\n            break;\n        default:\n            /* The default branch in the original code contained only a break (no-op).\n             * To capture evidence of that execution path, log that the default path was taken.\n             * This logging does not alter the original control flow or return value. */\n            OS_API_Impl_LogState(\"CASE_DEFAULT_TAKEN\", idtype, return_code);\n            break;\n    }\n\n    /* Log final return value */\n    OS_API_Impl_LogState(\"EXIT\", idtype, return_code);\n\n    return return_code;\n}\n"
}