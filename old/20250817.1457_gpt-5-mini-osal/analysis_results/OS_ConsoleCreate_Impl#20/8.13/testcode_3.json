{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ConsoleCreate_Impl the variable 'console' is declared as a non-const pointer (OS_console_internal_record_t *console) but is only read (used to test console->IsAsync) and never used to modify the pointed-to object. Therefore it should be declared as a pointer to const (const OS_console_internal_record_t *console) to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleCreate_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/163.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ConsoleCreate_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleCreate_Impl:\n```c\nint32 OS_ConsoleCreate_Impl(const OS_object_token_t *token)\n{\n    OS_impl_console_internal_record_t *local;\n    OS_console_internal_record_t *     console;\n    pthread_t                          consoletask;\n    int32                              return_code;\n    OS_VoidPtrValueWrapper_t           local_arg = {0};\n\n    console = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n    local   = OS_OBJECT_TABLE_GET(OS_impl_console_table, *token);\n\n    if (token->obj_idx == 0)\n    {\n        return_code = OS_SUCCESS;\n\n        if (console->IsAsync)\n        {\n            if (sem_init(&local->data_sem, 0, 0) < 0)\n            {\n                return_code = OS_SEM_FAILURE;\n            }\n            else\n            {\n                /* cppcheck-suppress unreadVariable // intentional use of other union member */\n                local_arg.id = OS_ObjectIdFromToken(token);\n                return_code  = OS_Posix_InternalTaskCreate_Impl(&consoletask, OS_CONSOLE_TASK_PRIORITY, 0,\n                                                               OS_ConsoleTask_Entry, local_arg.opaque_arg);\n\n                if (return_code != OS_SUCCESS)\n                {\n                    sem_destroy(&local->data_sem);\n                }\n            }\n        }\n    }\n    else\n    {\n        /* only one physical console device is implemented */\n        return_code = OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ConsoleCreate_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper to append logs for reproducing the violation scenario */\nstatic void OS_ConsoleCreate_Impl_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/163.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_ConsoleCreate_Impl(const OS_object_token_t *token)\n{\n    OS_impl_console_internal_record_t *local;\n    OS_console_internal_record_t *     console;\n    pthread_t                          consoletask;\n    int32                              return_code;\n    OS_VoidPtrValueWrapper_t           local_arg = {0};\n\n    /* Preserve original lookups */\n    console = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n    local   = OS_OBJECT_TABLE_GET(OS_impl_console_table, *token);\n\n    /* Log entry state: token index and pointer values */\n    OS_ConsoleCreate_Impl_Log(\"ENTER OS_ConsoleCreate_Impl: token_idx=%u, console_ptr=%p, local_ptr=%p\",\n                              (unsigned)token->obj_idx, (void *)console, (void *)local);\n\n    if (token->obj_idx == 0)\n    {\n        return_code = OS_SUCCESS;\n\n        /* Log that we are in the primary branch and the observed IsAsync value */\n        /* Note: reading console->IsAsync only for logging (no modification) */\n        OS_ConsoleCreate_Impl_Log(\"BRANCH token_idx==0: console->IsAsync=%d\", (int)console->IsAsync);\n\n        if (console->IsAsync)\n        {\n            /* capture sem_init return value for logging while preserving original behavior */\n            int sem_ret = sem_init(&local->data_sem, 0, 0);\n            OS_ConsoleCreate_Impl_Log(\"sem_init called, return=%d\", sem_ret);\n\n            if (sem_ret < 0)\n            {\n                return_code = OS_SEM_FAILURE;\n                OS_ConsoleCreate_Impl_Log(\"sem_init failed -> return_code=OS_SEM_FAILURE\");\n            }\n            else\n            {\n                /* cppcheck-suppress unreadVariable // intentional use of other union member */\n                local_arg.id = OS_ObjectIdFromToken(token);\n\n                OS_ConsoleCreate_Impl_Log(\"Calling OS_Posix_InternalTaskCreate_Impl: task_priority=%d, arg_id=%u\",\n                                          (int)OS_CONSOLE_TASK_PRIORITY, (unsigned)local_arg.id);\n\n                return_code = OS_Posix_InternalTaskCreate_Impl(&consoletask, OS_CONSOLE_TASK_PRIORITY, 0,\n                                                               OS_ConsoleTask_Entry, local_arg.opaque_arg);\n\n                OS_ConsoleCreate_Impl_Log(\"OS_Posix_InternalTaskCreate_Impl returned: %d\", (int)return_code);\n\n                if (return_code != OS_SUCCESS)\n                {\n                    sem_destroy(&local->data_sem);\n                    OS_ConsoleCreate_Impl_Log(\"Task create failed; sem_destroy called and return_code=%d\", (int)return_code);\n                }\n            }\n        }\n    }\n    else\n    {\n        /* only one physical console device is implemented */\n        return_code = OS_ERR_NOT_IMPLEMENTED;\n        OS_ConsoleCreate_Impl_Log(\"BRANCH token_idx!=0: return_code=OS_ERR_NOT_IMPLEMENTED\");\n    }\n\n    OS_ConsoleCreate_Impl_Log(\"EXIT OS_ConsoleCreate_Impl: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}