{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'console' is only used for read access (e.g. checking console->IsAsync) so it should be declared as a pointer to const: const OS_console_internal_record_t *console. The current assignment console = OS_OBJECT_TABLE_GET(OS_console_table, *token) stores the address in a non-const pointer even though the object is not modified here, which violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleCreate_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/163.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ConsoleCreate_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleCreate_Impl:\n```c\nint32 OS_ConsoleCreate_Impl(const OS_object_token_t *token)\n{\n    OS_impl_console_internal_record_t *local;\n    OS_console_internal_record_t *     console;\n    pthread_t                          consoletask;\n    int32                              return_code;\n    OS_VoidPtrValueWrapper_t           local_arg = {0};\n\n    console = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n    local   = OS_OBJECT_TABLE_GET(OS_impl_console_table, *token);\n\n    if (token->obj_idx == 0)\n    {\n        return_code = OS_SUCCESS;\n\n        if (console->IsAsync)\n        {\n            if (sem_init(&local->data_sem, 0, 0) < 0)\n            {\n                return_code = OS_SEM_FAILURE;\n            }\n            else\n            {\n                /* cppcheck-suppress unreadVariable // intentional use of other union member */\n                local_arg.id = OS_ObjectIdFromToken(token);\n                return_code  = OS_Posix_InternalTaskCreate_Impl(&consoletask, OS_CONSOLE_TASK_PRIORITY, 0,\n                                                               OS_ConsoleTask_Entry, local_arg.opaque_arg);\n\n                if (return_code != OS_SUCCESS)\n                {\n                    sem_destroy(&local->data_sem);\n                }\n            }\n        }\n    }\n    else\n    {\n        /* only one physical console device is implemented */\n        return_code = OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ConsoleCreate_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/163.txt */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/163.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm tm_buf;\n        if (localtime_r(&t, &tm_buf) != NULL)\n        {\n            fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \",\n                    tm_buf.tm_year + 1900,\n                    tm_buf.tm_mon + 1,\n                    tm_buf.tm_mday,\n                    tm_buf.tm_hour,\n                    tm_buf.tm_min,\n                    tm_buf.tm_sec);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ConsoleCreate_Impl(const OS_object_token_t *token)\n{\n    OS_impl_console_internal_record_t *local;\n    OS_console_internal_record_t *     console;\n    pthread_t                          consoletask;\n    int32                              return_code;\n    OS_VoidPtrValueWrapper_t           local_arg = {0};\n\n    os_probe_log(\"OS_ConsoleCreate_Impl ENTRY: token=%p\", (const void *)token);\n    if (token != NULL)\n    {\n        /* token->obj_idx is inspected by the original logic; log it */\n        os_probe_log(\"token->obj_idx=%u\", (unsigned int)token->obj_idx);\n    }\n\n    console = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n    local   = OS_OBJECT_TABLE_GET(OS_impl_console_table, *token);\n\n    os_probe_log(\"Resolved objects: console=%p, local=%p\", (const void *)console, (const void *)local);\n\n    if (token->obj_idx == 0)\n    {\n        os_probe_log(\"Entering obj_idx==0 branch\");\n        return_code = OS_SUCCESS;\n\n        /* Only read console->IsAsync inside the same branch as original code */\n        os_probe_log(\"console->IsAsync=%d\", (int)console->IsAsync);\n\n        if (console->IsAsync)\n        {\n            os_probe_log(\"console is async: initializing semaphore\");\n            if (sem_init(&local->data_sem, 0, 0) < 0)\n            {\n                os_probe_log(\"sem_init FAILED (errno=%d)\", errno);\n                return_code = OS_SEM_FAILURE;\n            }\n            else\n            {\n                /* cppcheck-suppress unreadVariable // intentional use of other union member */\n                local_arg.id = OS_ObjectIdFromToken(token);\n                os_probe_log(\"Created local_arg.id=%u, creating console task\", (unsigned int)local_arg.id);\n\n                return_code = OS_Posix_InternalTaskCreate_Impl(&consoletask, OS_CONSOLE_TASK_PRIORITY, 0,\n                                                               OS_ConsoleTask_Entry, local_arg.opaque_arg);\n\n                os_probe_log(\"OS_Posix_InternalTaskCreate_Impl returned %d\", (int)return_code);\n\n                if (return_code != OS_SUCCESS)\n                {\n                    os_probe_log(\"Task creation failed, destroying semaphore\");\n                    sem_destroy(&local->data_sem);\n                }\n            }\n        }\n        else\n        {\n            os_probe_log(\"console is not async: no semaphore or task created\");\n        }\n    }\n    else\n    {\n        /* only one physical console device is implemented */\n        os_probe_log(\"obj_idx != 0: not implemented\");\n        return_code = OS_ERR_NOT_IMPLEMENTED;\n    }\n\n    os_probe_log(\"OS_ConsoleCreate_Impl EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}