{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nViolation: The call inside the fragment is dead because OS_FileSysFormatVolume_Impl is a documented no-op that always returns OS_SUCCESS. The if (should_format) { return_code = OS_FileSysFormatVolume_Impl(&token); } only assigns OS_SUCCESS to return_code (no side-effects); removing this call would not change program behaviour in the current project, so it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStopVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/330.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysStopVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStopVolume_Impl:\n```c\nint32 OS_FileSysStopVolume_Impl(const OS_object_token_t *token)\n{\n    /*\n     * This is a no-op.\n     *\n     * Volatile volumes are just directories created in the temp dir,\n     * and this will not remove the directories just in case something\n     * went wrong.\n     *\n     * If the volume is started again, the directory will be re-used.\n     */\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysStopVolume_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <errno.h>\n\nint32 OS_FileSysStopVolume_Impl(const OS_object_token_t *token)\n{\n    /*\n     * Preserve original behavior: this function is a documented no-op and\n     * must return OS_SUCCESS. Insert lightweight logging probes to a file\n     * so that external agents can observe the control flow and the token\n     * state to reproduce the reported dead-code scenario.\n     */\n\n    const char *logdir = \"/tmp/logs\";\n    const char *logfile = \"/tmp/logs/330.txt\";\n    FILE *fp = NULL;\n    time_t now = time(NULL);\n\n    /* Make a best-effort to create the log directory; ignore errors other\n     * than when it truly prevents logging. This does not change functional\n     * behavior of the routine other than producing logs when possible. */\n    if (mkdir(logdir, 0755) != 0 && errno != EEXIST)\n    {\n        /* Ignore error: logging is non-essential */\n    }\n\n    fp = fopen(logfile, \"a\");\n    if (fp != NULL)\n    {\n        /* Log entry with timestamp and token pointer value. Do not dereference\n         * token because its definition is external; only record NULL vs non-NULL\n         * and the pointer value to avoid changing program state. */\n        fprintf(fp, \"%ld: OS_FileSysStopVolume_Impl entered\\n\", (long)(now));\n        fprintf(fp, \"  token=%p (NULL? %s)\\n\", (const void *)token, (token == NULL) ? \"yes\" : \"no\");\n        fprintf(fp, \"  Note: documented no-op; function will return OS_SUCCESS\\n\");\n        fflush(fp);\n        fclose(fp);\n    }\n\n    /* Original no-op behavior preserved */\n    return OS_SUCCESS;\n}\n"
}