{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_FileSysStopVolume_Impl is defined as a pure no-op (always returns OS_SUCCESS and has no side-effects). It is invoked from OS_FileSys_Initialize (cast to void) and OS_rmfs, but those calls only call the no-op and do not rely on any side-effects. Removing the calls (or replacing the implementation with an empty inline) would not change observable program behaviour in this build, so the executed operations are dead code and thus violate MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStopVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/330.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysStopVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStopVolume_Impl:\n```c\nint32 OS_FileSysStopVolume_Impl(const OS_object_token_t *token)\n{\n    /*\n     * This is a no-op.\n     *\n     * Volatile volumes are just directories created in the temp dir,\n     * and this will not remove the directories just in case something\n     * went wrong.\n     *\n     * If the volume is started again, the directory will be re-used.\n     */\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysStopVolume_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\nint32 OS_FileSysStopVolume_Impl(const OS_object_token_t *token)\n{\n    /*\n     * This is a no-op.\n     *\n     * Volatile volumes are just directories created in the temp dir,\n     * and this will not remove the directories just in case something\n     * went wrong.\n     *\n     * If the volume is started again, the directory will be re-used.\n     */\n\n    /* Probe logging: record entry, token pointer value and timestamp to help\n     * reproduce whether this function has any runtime effect in the build.\n     * The logging preserves the original no-op behavior (only side-effect is\n     * writing to a log file for analysis). */\n    {\n        FILE *log = fopen(\"/tmp/logs/330.txt\", \"a\");\n        if (log != NULL)\n        {\n            time_t now = time(NULL);\n            fprintf(log, \"OS_FileSysStopVolume_Impl ENTER: time=%ld, token=%p\\n\",\n                    (long)now, (const void *)token);\n\n            if (token == NULL)\n            {\n                fprintf(log, \"  token == NULL\\n\");\n            }\n            else\n            {\n                /* Avoid dereferencing token (unknown type). Log address only. */\n                fprintf(log, \"  token address: %p\\n\", (const void *)token);\n            }\n\n            fprintf(log, \"OS_FileSysStopVolume_Impl EXIT: returning OS_SUCCESS\\n\\n\");\n            fflush(log);\n            fclose(log);\n        }\n    }\n\n    return OS_SUCCESS;\n}\n"
}