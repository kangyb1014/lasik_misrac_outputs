{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_FileSysStopVolume_Impl is an always-success no-op: it performs no operations and simply returns OS_SUCCESS. It is invoked from callers such as OS_FileSysInitialize (cleanup path where the call is explicitly cast to void) and OS_rmfs (where its return value is simply propagated). Removing the body of this function (or inlining a constant return of OS_SUCCESS at each call site) would not alter program behaviour because there are no side effects, no state changes, and no timing or synchronization effects in the implementation. Therefore the executed operations inside OS_FileSysStopVolume_Impl constitute dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStopVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/330.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysStopVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStopVolume_Impl:\n```c\nint32 OS_FileSysStopVolume_Impl(const OS_object_token_t *token)\n{\n    /*\n     * This is a no-op.\n     *\n     * Volatile volumes are just directories created in the temp dir,\n     * and this will not remove the directories just in case something\n     * went wrong.\n     *\n     * If the volume is started again, the directory will be re-used.\n     */\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysStopVolume_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <time.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe helper: append a timestamped entry describing the call and token state\n * into /tmp/logs/330.txt. This intentionally preserves the original behavior\n * (function remains a no-op from the OS perspective) while producing external\n * evidence (file output) that the function was executed and with which token.\n */\nstatic void OS_FileSysStopVolume_Impl_probe(const void *token)\n{\n    const char *log_dir = \"/tmp/logs\";\n    const char *log_file = \"/tmp/logs/330.txt\";\n    FILE *fp = NULL;\n    time_t t = time(NULL);\n    struct tm tm_buf;\n\n    /* Ensure the directory exists. If mkdir fails because it exists, ignore. */\n    (void)mkdir(log_dir, 0755);\n\n    fp = fopen(log_file, \"a\");\n    if (fp == NULL)\n    {\n        /* If logging cannot be opened, nothing else to do; avoid changing behavior. */\n        return;\n    }\n\n    if (t != (time_t)-1 && localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timestr[64];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(fp, \"%s - \", timestr);\n        }\n    }\n\n    /* Record the fact that the function was entered and the token pointer. */\n    fprintf(fp, \"OS_FileSysStopVolume_Impl called\\n\");\n    fprintf(fp, \"  token pointer: %p\\n\", token);\n\n    /* If token is NULL, explicitly log that. Avoid dereferencing token since\n     * the token type is opaque here. This keeps the probe safe and non-invasive.\n     */\n    if (token == NULL)\n    {\n        fprintf(fp, \"  token: NULL\\n\");\n    }\n    else\n    {\n        /* Log the numeric value of the pointer for cross-checking with callers. */\n        fprintf(fp, \"  token (as uintptr_t): 0x%jx\\n\", (uintmax_t)(uintptr_t)token);\n    }\n\n    /* Log errno state at entry to help detect any ambient errors in the caller.\n     * Note: do not modify errno here (avoid calls that change it). We only read it.\n     */\n    fprintf(fp, \"  errno on entry: %d (%s)\\n\", errno, strerror(errno));\n\n    /* Mark function exit in the log. Keep probe lightweight. */\n    fprintf(fp, \"OS_FileSysStopVolume_Impl exit -> OS_SUCCESS\\n\\n\");\n\n    (void)fflush(fp);\n    (void)fclose(fp);\n}\n\nint32 OS_FileSysStopVolume_Impl(const OS_object_token_t *token)\n{\n    /*\n     * This is a no-op.\n     *\n     * Volatile volumes are just directories created in the temp dir,\n     * and this will not remove the directories just in case something\n     * went wrong.\n     *\n     * If the volume is started again, the directory will be re-used.\n     */\n\n    /* Probe: log that the no-op function was executed and capture token state. */\n    OS_FileSysStopVolume_Impl_probe((const void *)token);\n\n    return OS_SUCCESS;\n}\n"
}