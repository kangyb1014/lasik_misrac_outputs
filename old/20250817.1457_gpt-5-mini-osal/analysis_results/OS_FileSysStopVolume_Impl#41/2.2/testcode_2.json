{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_FileSysFormatVolume_Impl is called from OS_FileSys_Initialize when should_format is true, but its implementation is a pure no-op that only returns OS_SUCCESS. The operation is executed at runtime yet performs no observable action or state change. Removing the call (or the function body) would not affect program behaviour in this configuration, so this meets the definition of dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStopVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/330.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysStopVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStopVolume_Impl:\n```c\nint32 OS_FileSysStopVolume_Impl(const OS_object_token_t *token)\n{\n    /*\n     * This is a no-op.\n     *\n     * Volatile volumes are just directories created in the temp dir,\n     * and this will not remove the directories just in case something\n     * went wrong.\n     *\n     * If the volume is started again, the directory will be re-used.\n     */\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysStopVolume_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\nint32 OS_FileSysStopVolume_Impl(const OS_object_token_t *token)\n{\n    /*\n     * Probe logging: record that this no-op implementation was entered and\n     * capture the token pointer value and a timestamp so other agents can\n     * reproduce and gather evidence that the function is executed but\n     * performs no observable action (dead code scenario).\n     */\n    FILE *logf = fopen(\"/tmp/logs/330.txt\", \"a\");\n\n    if (logf != NULL)\n    {\n        time_t now = time(NULL);\n        if (now != (time_t)-1)\n        {\n            struct tm *tm = localtime(&now);\n            if (tm != NULL)\n            {\n                char timestr[64];\n                if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", tm) > 0)\n                {\n                    fprintf(logf, \"%s - \", timestr);\n                }\n                else\n                {\n                    fprintf(logf, \"(time-format-error) - \");\n                }\n            }\n            else\n            {\n                fprintf(logf, \"(localtime-error) - \");\n            }\n        }\n        else\n        {\n            fprintf(logf, \"(time-error) - \");\n        }\n\n        fprintf(logf, \"OS_FileSysStopVolume_Impl called; token=%p\\n\", (const void *)token);\n        fflush(logf);\n        fclose(logf);\n    }\n\n    /*\n     * Preserve original logic: this function is intentionally a no-op for\n     * volatile volumes and returns success.\n     */\n    return OS_SUCCESS;\n}\n"
}