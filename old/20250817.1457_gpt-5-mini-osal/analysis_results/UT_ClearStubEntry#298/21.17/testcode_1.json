{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(StubPtr, 0, sizeof(*StubPtr)) will violate MISRA C 2023 Rule 21.17 if StubPtr does not point to a valid object of type UT_StubTableEntry_t (or if StubPtr == NULL). In particular, passing a NULL pointer with a non\u2011zero size (or passing a pointer to a smaller object/subobject than sizeof(UT_StubTableEntry_t)) causes memset to access beyond the bounds of the referenced object. Although the function dereferences StubPtr earlier (implying a non\u2011NULL precondition), that precondition is not enforced in the shown fragment, so the call can be unsafe and thus violates the rule unless the caller guarantees StubPtr is valid and points to a full UT_StubTableEntry_t object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ClearStubEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2391.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ClearStubEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ClearStubEntry:\n```c\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        free(StubPtr->Data.Buff.BasePtr);\n    }\n    memset(StubPtr, 0, sizeof(*StubPtr));\n}\n```\n</target_code>\nPlease provide the modified UT_ClearStubEntry code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Probe log file to capture control flow and state for violation reproduction */\n    FILE *log = fopen(\"/tmp/logs/2391.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_ClearStubEntry ENTER: StubPtr=%p\\n\", (void *)StubPtr);\n        if (StubPtr == NULL)\n        {\n            fprintf(log, \"  NOTE: StubPtr is NULL (will be dereferenced by original logic)\\n\");\n        }\n        else\n        {\n            /* Log the fields that the original function inspects/uses. This will\n             * also reproduce whether the freeing path is taken and the pointer values\n             * that can cause out-of-bounds access when followed by memset. */\n            fprintf(log, \"  EntryType=%u, ModeFlags=0x%X, Data.Buff.BasePtr=%p\\n\",\n                    (unsigned)StubPtr->EntryType,\n                    (unsigned)StubPtr->ModeFlags,\n                    (void *)StubPtr->Data.Buff.BasePtr);\n        }\n        fflush(log);\n    }\n\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"  free() called on BasePtr=%p\\n\", (void *)StubPtr->Data.Buff.BasePtr);\n            fflush(log);\n        }\n        free(StubPtr->Data.Buff.BasePtr);\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"  About to memset(%p, 0, %zu)\\n\", (void *)StubPtr, sizeof(*StubPtr));\n        fflush(log);\n    }\n\n    memset(StubPtr, 0, sizeof(*StubPtr));\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_ClearStubEntry EXIT: stub cleared at %p\\n\", (void *)StubPtr);\n        fclose(log);\n    }\n}\n"
}