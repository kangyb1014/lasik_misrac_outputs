{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf StubPtr->Data.Buff.Position == StubPtr->Data.Buff.TotalSize (or MaxSize == 0) then ActualCopy is computed as 0 and the code executes memcpy(..., 0) and then increments Position by 0. The memcpy with a zero length has no effect on program state \u2014 removing that memcpy (and the Position += 0) would not change program behaviour (aside from timing) \u2014 therefore this executed operation is dead code per Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ClearStubEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2386.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ClearStubEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ClearStubEntry:\n```c\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        free(StubPtr->Data.Buff.BasePtr);\n    }\n    memset(StubPtr, 0, sizeof(*StubPtr));\n}\n```\n</target_code>\nPlease provide the modified UT_ClearStubEntry code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Logging probe: capture control flow and relevant buffer state to help reproduce the zero-length-copy scenario. */\n    FILE *log = fopen(\"/tmp/logs/2386.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_ClearStubEntry called: StubPtr=%p\\n\", (void *)StubPtr);\n        fprintf(log, \" EntryType=%d, ModeFlags=0x%X, BasePtr=%p\\n\",\n                (int)StubPtr->EntryType,\n                (unsigned int)StubPtr->ModeFlags,\n                (void *)StubPtr->Data.Buff.BasePtr);\n        /* Print numeric buffer fields (cast to unsigned long long for safety across possible integer widths) */\n        fprintf(log, \" Buff.Position=%llu, Buff.TotalSize=%llu, Buff.MaxSize=%llu\\n\",\n                (unsigned long long)StubPtr->Data.Buff.Position,\n                (unsigned long long)StubPtr->Data.Buff.TotalSize,\n                (unsigned long long)StubPtr->Data.Buff.MaxSize);\n        fflush(log);\n    }\n\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \" Condition for free() satisfied. Calling free() on %p\\n\", (void *)StubPtr->Data.Buff.BasePtr);\n            fflush(log);\n        }\n\n        free(StubPtr->Data.Buff.BasePtr);\n\n        if (log != NULL)\n        {\n            fprintf(log, \" free() completed\\n\");\n            fflush(log);\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \" free() not called (either EntryType mismatch, BasePtr==NULL, or not UT_MODEFLAG_ALLOC_BUF)\\n\");\n            fflush(log);\n        }\n    }\n\n    memset(StubPtr, 0, sizeof(*StubPtr));\n\n    if (log != NULL)\n    {\n        fprintf(log, \" StubPtr memory cleared with memset(%zu)\\n\\n\", sizeof(*StubPtr));\n        fclose(log);\n    }\n}\n"
}