{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UT_ClearStubEntry:\n```c\nstatic void UT_ClearStubEntry(UT_StubTableEntry_t *StubPtr)\n{\n    /* Be sure to call free() on any malloc'ed buffers before clearing */\n    if ((StubPtr->EntryType == UT_ENTRYTYPE_DATA_BUFFER || StubPtr->EntryType == UT_ENTRYTYPE_RETURN_BUFFER) &&\n        StubPtr->Data.Buff.BasePtr != NULL && (StubPtr->ModeFlags & UT_MODEFLAG_ALLOC_BUF) != 0)\n    {\n        free(StubPtr->Data.Buff.BasePtr);\n    }\n    memset(StubPtr, 0, sizeof(*StubPtr));\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function UT_ClearStubEntry:\n#define UT_MODEFLAG_ALLOC_BUF 0x1U\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nfree(StubPtr->Data.Buff.BasePtr);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The pointer StubPtr->Data.Buff.BasePtr is passed to free(), whose prototype expects a void * (non-const). Rule 8.13 requires pointers be const-qualified only when possible; here const is not possible because the pointer must be compatible with free() (and may be used with allocation/deallocation APIs that require non-const). Therefore this use does not violate MISRA C 2023 Rule 8.13."
}