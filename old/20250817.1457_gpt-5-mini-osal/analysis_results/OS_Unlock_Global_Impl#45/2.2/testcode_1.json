{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe if-statement only contains a call to OS_DEBUG, and OS_DEBUG is defined as an empty macro. Thus when OS_DEBUG expands to nothing the conditional block has no side-effects (the condition only performs pure reads). Removing the entire if-statement (or allowing the compiler to optimize it away) would not change program behaviour, so this constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Unlock_Global_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/362.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Unlock_Global_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Unlock_Global_Impl:\n```c\nvoid OS_Unlock_Global_Impl(osal_objtype_t idtype)\n{\n    OS_impl_objtype_lock_t *impl;\n    int                     ret;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    if (impl != NULL)\n    {\n        /* Notify any waiting threads that the state _may_ have changed */\n        ret = pthread_cond_broadcast(&impl->cond);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_cond_broadcast(&impl->cond): %s\", strerror(ret));\n            /* unexpected but keep going (not critical) */\n        }\n\n        ret = pthread_mutex_unlock(&impl->mutex);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_mutex_unlock(&impl->mutex): %s\", strerror(ret));\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_Unlock_Global_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <time.h>\n\n/*\n * Probe helper that appends logs to /tmp/logs/362.txt. Kept minimal so it\n * does not affect program logic (only I/O side-effects for diagnostics).\n */\nstatic void os_unlock_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/362.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        fprintf(f, \"[%ld] \", (long)t);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid OS_Unlock_Global_Impl(osal_objtype_t idtype)\n{\n    OS_impl_objtype_lock_t *impl;\n    int                     ret;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    /* Log entry and resolved impl pointer to help reproduce the scenario */\n    os_unlock_probe(\"OS_Unlock_Global_Impl entered: idtype=%d impl=%p\", (int)idtype, (void *)impl);\n\n    if (impl != NULL)\n    {\n        /* Notify any waiting threads that the state _may_ have changed */\n        ret = pthread_cond_broadcast(&impl->cond);\n        if (ret != 0)\n        {\n            /* Original debug call retained (may be empty), plus our probe */\n            OS_DEBUG(\"pthread_cond_broadcast(&impl->cond): %s\", strerror(ret));\n            os_unlock_probe(\"pthread_cond_broadcast returned: %d (%s)\", ret, strerror(ret));\n            /* unexpected but keep going (not critical) */\n        }\n        else\n        {\n            os_unlock_probe(\"pthread_cond_broadcast succeeded (ret=0)\");\n        }\n\n        ret = pthread_mutex_unlock(&impl->mutex);\n        if (ret != 0)\n        {\n            /* Original debug call retained (may be empty), plus our probe */\n            OS_DEBUG(\"pthread_mutex_unlock(&impl->mutex): %s\", strerror(ret));\n            os_unlock_probe(\"pthread_mutex_unlock returned: %d (%s)\", ret, strerror(ret));\n        }\n        else\n        {\n            os_unlock_probe(\"pthread_mutex_unlock succeeded (ret=0)\");\n        }\n\n        os_unlock_probe(\"OS_Unlock_Global_Impl exiting: idtype=%d impl=%p\", (int)idtype, (void *)impl);\n    }\n    else\n    {\n        /* Log the branch where impl is NULL so callers can see the conditional behavior */\n        os_unlock_probe(\"OS_Unlock_Global_Impl: impl is NULL for idtype=%d; no operations performed\", (int)idtype);\n    }\n}\n"
}