{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe empty variadic macro causes all OS_DEBUG(...) invocations to expand to an empty replacement, leaving a null statement (e.g. OS_DEBUG(\"msg\", strerror(ret)); \u2192 ;). Those null statements are executed no-ops whose removal would not affect program behaviour, so they are dead code. Example: the OS_DEBUG calls in OS_Unlock_Global_Impl become null statements and thus violate MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Unlock_Global_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/362.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Unlock_Global_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Unlock_Global_Impl:\n```c\nvoid OS_Unlock_Global_Impl(osal_objtype_t idtype)\n{\n    OS_impl_objtype_lock_t *impl;\n    int                     ret;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    if (impl != NULL)\n    {\n        /* Notify any waiting threads that the state _may_ have changed */\n        ret = pthread_cond_broadcast(&impl->cond);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_cond_broadcast(&impl->cond): %s\", strerror(ret));\n            /* unexpected but keep going (not critical) */\n        }\n\n        ret = pthread_mutex_unlock(&impl->mutex);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_mutex_unlock(&impl->mutex): %s\", strerror(ret));\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_Unlock_Global_Impl code.\n",
  "test_code": "static void __os_unlock_probe(const char *stage, unsigned long idtype, const void *impl_ptr, int ret, const char *op)\n{\n    /* Append evidence to a file so tests can detect the control flow even if OS_DEBUG is empty. */\n    FILE *f = fopen(\"/tmp/logs/362.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"[OS_Unlock_Global_Impl] %s: idtype=%lu impl=%p op=%s ret=%d\\n\",\n                stage, idtype, impl_ptr, op != NULL ? op : \"(null)\", ret);\n        fflush(f);\n        fclose(f);\n    }\n}\n\nvoid OS_Unlock_Global_Impl(osal_objtype_t idtype)\n{\n    OS_impl_objtype_lock_t *impl;\n    int                     ret;\n\n    /* Log entry and idtype */\n    __os_unlock_probe(\"entry\", (unsigned long)idtype, NULL, 0, \"enter\");\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    __os_unlock_probe(\"after_lookup\", (unsigned long)idtype, impl, 0, \"lookup\");\n\n    if (impl != NULL)\n    {\n        /* Notify any waiting threads that the state _may_ have changed */\n        ret = pthread_cond_broadcast(&impl->cond);\n        __os_unlock_probe(\"after_broadcast\", (unsigned long)idtype, impl, ret, \"pthread_cond_broadcast\");\n        if (ret != 0)\n        {\n            /* Original debug call retained to preserve behavior when OS_DEBUG is available. */\n            OS_DEBUG(\"pthread_cond_broadcast(&impl->cond): %s\", strerror(ret));\n            /* unexpected but keep going (not critical) */\n        }\n\n        ret = pthread_mutex_unlock(&impl->mutex);\n        __os_unlock_probe(\"after_mutex_unlock\", (unsigned long)idtype, impl, ret, \"pthread_mutex_unlock\");\n        if (ret != 0)\n        {\n            /* Original debug call retained to preserve behavior when OS_DEBUG is available. */\n            OS_DEBUG(\"pthread_mutex_unlock(&impl->mutex): %s\", strerror(ret));\n        }\n    }\n    else\n    {\n        __os_unlock_probe(\"impl_null\", (unsigned long)idtype, impl, 0, \"no-op\");\n    }\n}\n"
}