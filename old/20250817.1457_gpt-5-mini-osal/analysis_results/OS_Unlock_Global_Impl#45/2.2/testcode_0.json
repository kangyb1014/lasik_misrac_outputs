{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe conditional handling of pthread_cond_broadcast errors is dead. The code tests 'if (ret != 0)' and its body only calls OS_DEBUG(\"...\", strerror(ret)); but OS_DEBUG is defined as an empty macro, so the if-body generates no code (strerror is not evaluated). The conditional and its body therefore have no observable effect and could be removed without changing program behaviour, which constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Unlock_Global_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/362.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Unlock_Global_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Unlock_Global_Impl:\n```c\nvoid OS_Unlock_Global_Impl(osal_objtype_t idtype)\n{\n    OS_impl_objtype_lock_t *impl;\n    int                     ret;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    if (impl != NULL)\n    {\n        /* Notify any waiting threads that the state _may_ have changed */\n        ret = pthread_cond_broadcast(&impl->cond);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_cond_broadcast(&impl->cond): %s\", strerror(ret));\n            /* unexpected but keep going (not critical) */\n        }\n\n        ret = pthread_mutex_unlock(&impl->mutex);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_mutex_unlock(&impl->mutex): %s\", strerror(ret));\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_Unlock_Global_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <pthread.h>\n\nvoid OS_Unlock_Global_Impl(osal_objtype_t idtype)\n{\n    OS_impl_objtype_lock_t *impl;\n    int                     ret;\n\n    /* Probe: open log file to record control flow and state for this call.\n       Using append mode so repeated calls accumulate evidence. */\n    FILE *log = fopen(\"/tmp/logs/362.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_Unlock_Global_Impl called with idtype=%d\\n\", (int)idtype);\n    }\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    if (log != NULL)\n    {\n        fprintf(log, \"impl pointer = %p\\n\", (void *)impl);\n    }\n\n    if (impl != NULL)\n    {\n        /* Notify any waiting threads that the state _may_ have changed */\n        if (log != NULL) fprintf(log, \"About to call pthread_cond_broadcast(&impl->cond)\\n\");\n        ret = pthread_cond_broadcast(&impl->cond);\n        if (log != NULL) fprintf(log, \"pthread_cond_broadcast returned %d\\n\", ret);\n\n        if (ret != 0)\n        {\n            /* The original code called OS_DEBUG(\"...\", strerror(ret));\n               In some builds OS_DEBUG is an empty macro so the strerror() call\n               is not evaluated and no code is generated. To avoid changing\n               original runtime behaviour we do NOT call strerror() here.\n               Instead we log that the branch was taken and record the raw\n               error code so observers can reproduce that the conditional\n               was reachable but produced no observable effect in builds\n               where OS_DEBUG is empty. */\n            if (log != NULL)\n            {\n                fprintf(log, \"Branch taken: (ret != 0). error code = %d. strerror() not invoked to preserve original behaviour.\\n\", ret);\n            }\n            /* unexpected but keep going (not critical) */\n        }\n\n        if (log != NULL) fprintf(log, \"About to call pthread_mutex_unlock(&impl->mutex)\\n\");\n        ret = pthread_mutex_unlock(&impl->mutex);\n        if (log != NULL) fprintf(log, \"pthread_mutex_unlock returned %d\\n\", ret);\n\n        if (ret != 0)\n        {\n            if (log != NULL) fprintf(log, \"pthread_mutex_unlock error code = %d\\n\", ret);\n        }\n    }\n    else\n    {\n        if (log != NULL) fprintf(log, \"impl is NULL: no cond/mutex operations performed\\n\");\n    }\n\n    if (log != NULL)\n    {\n        fflush(log);\n        fclose(log);\n    }\n}\n"
}