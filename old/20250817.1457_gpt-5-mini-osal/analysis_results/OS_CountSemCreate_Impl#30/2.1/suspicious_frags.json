{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CountSemCreate_Impl:\n```c\nint32 OS_CountSemCreate_Impl(const OS_object_token_t *token, uint32 sem_initial_value, uint32 options)\n{\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    if (sem_initial_value > SEM_VALUE_MAX)\n    {\n        return OS_INVALID_SEM_VALUE;\n    }\n\n    if (sem_init(&impl->id, 0, sem_initial_value) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CountSemCreate_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_countsem_internal_record_t OS_impl_count_sem_table[OS_MAX_COUNT_SEMAPHORES]\n...\ntypedef struct\n{\n    sem_t id;\n} OS_impl_countsem_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\n#define OS_INVALID_SEM_VALUE (-20)\n...\n#define OS_SEM_FAILURE (-6)\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (sem_init(&impl->id, 0, sem_initial_value) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }",
    "impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);",
    "if (sem_initial_value > SEM_VALUE_MAX)\n    {\n        return OS_INVALID_SEM_VALUE;\n    }",
    "return OS_SUCCESS;"
  ],
  "explanation": "Fragments not listed were not selected because they do not by themselves indicate unreachable code: the function signature and local declaration (int32 ..., OS_impl_countsem_internal_record_t *impl;) are standard and reachable; the variable initialization (impl = ...) is included because the macro usage may affect control flow/validity and thus reachability and so was flagged; the closing brace and other syntactic elements cannot be unreachable on their own. The macro and related type/constant definitions provided separately (OS_OBJECT_TABLE_GET, OS_impl_count_sem_table, OS_ObjectIndexFromToken, SEM_VALUE_MAX, return-code macros) were considered in marking the above fragments \u2014 the key potential unreachable-code issues are the conditional return branches and the final success return (they may be trivially always/never taken depending on macro/constant definitions or macro misuse). Other single-line or structural parts do not present unreachable-code concerns and therefore need not be investigated for Rule 2.1."
}