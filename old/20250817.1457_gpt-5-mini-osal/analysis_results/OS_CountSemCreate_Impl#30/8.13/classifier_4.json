{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_CountSemCreate_Impl:\n```c\nint32 OS_CountSemCreate_Impl(const OS_object_token_t *token, uint32 sem_initial_value, uint32 options)\n{\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    if (sem_initial_value > SEM_VALUE_MAX)\n    {\n        return OS_INVALID_SEM_VALUE;\n    }\n\n    if (sem_init(&impl->id, 0, sem_initial_value) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_CountSemCreate_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_countsem_internal_record_t OS_impl_count_sem_table[OS_MAX_COUNT_SEMAPHORES]\n...\ntypedef struct\n{\n    sem_t id;\n} OS_impl_countsem_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_INVALID_SEM_VALUE (-20)\n...\n#define OS_SEM_FAILURE (-6)\n...\n#define OS_SUCCESS (0)\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in this fragment. The macro returns a pointer to a modifiable table element (&tbl[index]) and OS_ObjectIndexFromToken already takes a const pointer to the token (the macro passes &(tok) which can bind to const). In the shown use (impl = OS_OBJECT_TABLE_GET(...)), the caller needs a non-const pointer to modify the record (sem_init writes to impl->id), so const-qualifying the returned pointer would be incorrect. A potential violation scenario would be if the macro were used in a read-only context where the pointer should be const (e.g. a function that only reads the table element); in that case the code should use or provide a const-qualified pointer (for example const OS_impl_countsem_internal_record_t *r = OS_OBJECT_TABLE_GET(...)), but the macro does not enforce that."
}