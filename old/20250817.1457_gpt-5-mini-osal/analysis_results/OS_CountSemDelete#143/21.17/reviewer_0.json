{
  "user_message": "An agent A claimed that the following OS_CountSemDelete code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_CountSemDelete.\n```c\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If OS_ObjectIdTransactionInit is called with token == NULL (or with a pointer to an object smaller than sizeof(*token)), the call memset(token, 0, sizeof(*token)) will write through a NULL or past the destination object\u2019s bounds. The function performs no null/size check on token before calling memset, so this can result in out-of-bounds access and thus violates MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\ntypedef uint32_t uint32;\ntypedef int32_t  int32;\ntypedef uintptr_t osal_id_t;\ntypedef struct\n{\n    int dummy;\n} OS_object_token_t;\nint32 OS_ObjectIdGetById(int lock_mode, int objtype, osal_id_t id, OS_object_token_t *token);\nint32 OS_CountSemDelete_Impl(OS_object_token_t *token);\nint32 OS_ObjectIdFinalizeDelete(int prior_return, OS_object_token_t *token);\nstatic void OS_1151_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1151.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry, token address and token size to help reproduce null/size issues */\n    OS_1151_Log(\"ENTER OS_CountSemDelete: sem_id=%ju, token_addr=%ju, token_size=%zu\",\n                (uintmax_t)(uintptr_t)sem_id, (uintmax_t)(uintptr_t)&token, sizeof(token));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of lookup and the token pointer again (in case the called routine mutated it) */\n    OS_1151_Log(\"After OS_ObjectIdGetById: sem_id=%ju, return_code=%d, token_addr=%ju, token_size=%zu\",\n                (uintmax_t)(uintptr_t)sem_id, (int)return_code, (uintmax_t)(uintptr_t)&token, sizeof(token));\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before the implementation call so the exact pointer passed is recorded */\n        OS_1151_Log(\"Calling OS_CountSemDelete_Impl: sem_id=%ju, token_addr=%ju, token_size=%zu\",\n                    (uintmax_t)(uintptr_t)sem_id, (uintmax_t)(uintptr_t)&token, sizeof(token));\n\n        return_code = OS_CountSemDelete_Impl(&token);\n\n        /* Log the return of the implementation */\n        OS_1151_Log(\"Returned from OS_CountSemDelete_Impl: sem_id=%ju, impl_return=%d, token_addr=%ju\",\n                    (uintmax_t)(uintptr_t)sem_id, (int)return_code, (uintmax_t)(uintptr_t)&token);\n\n        /* Complete the operation via the common routine */\n        OS_1151_Log(\"Calling OS_ObjectIdFinalizeDelete: sem_id=%ju, prior_return=%d, token_addr=%ju\",\n                    (uintmax_t)(uintptr_t)sem_id, (int)return_code, (uintmax_t)(uintptr_t)&token);\n\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Final state/log after finalization */\n        OS_1151_Log(\"After OS_ObjectIdFinalizeDelete: sem_id=%ju, final_return=%d, token_addr=%ju, token_size=%zu\",\n                    (uintmax_t)(uintptr_t)sem_id, (int)return_code, (uintmax_t)(uintptr_t)&token, sizeof(token));\n    }\n    else\n    {\n        /* Log early exit path */\n        OS_1151_Log(\"OS_CountSemDelete early exit: sem_id=%ju, return_code=%d\",\n                    (uintmax_t)(uintptr_t)sem_id, (int)return_code);\n    }\n\n    OS_1151_Log(\"EXIT OS_CountSemDelete: sem_id=%ju, return_code=%d\",\n                (uintmax_t)(uintptr_t)sem_id, (int)return_code);\n\n    return return_code;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C:2023 Rule 21.17 concerns calls to string.h functions (memset/memcpy/strcpy/etc.) that can access beyond the bounds of the referenced object. The OS_CountSemDelete implementation shown does not call any string.h functions and it creates a local object \"token\" and passes its address (&token) to other routines. That address is non\u2011NULL and points to an object of the correct size, so OS_CountSemDelete itself cannot cause a memset to write through a NULL pointer or past the bounds of the local token.\n\nThe scenario quoted by agent A refers to a call to OS_ObjectIdTransactionInit that does a memset(token,0,sizeof(*token)). If such a memset were invoked with token == NULL or pointing to a too-small object, that would indeed be a violation \u2014 but the problem would lie in the function that performs the unchecked memset (or in the caller that passes an invalid pointer), not in the shown OS_CountSemDelete code. Also the agent\u2019s scenario mentions a different function (OS_ObjectIdTransactionInit) than the one actually called in OS_CountSemDelete (OS_ObjectIdGetById), and the provided test code failed to compile, so there is no evidence that OS_CountSemDelete passes an invalid token pointer.\n\nTherefore the claim that OS_CountSemDelete violates MISRA C 2023 Rule 21.17 is not supported by the provided code and scenario."
}