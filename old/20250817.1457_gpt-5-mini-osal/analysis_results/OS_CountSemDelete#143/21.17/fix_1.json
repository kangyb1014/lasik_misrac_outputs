{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_1151_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1151.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    struct tm *tm = localtime_r(&t, &tm_buf);\n    if (tm != NULL)\n    {\n        fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \", tm->tm_year + 1900, tm->tm_mon + 1,\n                tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);\n    }\n    else\n    {\n        fprintf(f, \"(no-time) \");\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and input state */\n    OS_1151_Log(\"OS_CountSemDelete ENTRY: sem_id=%lld (0x%llx)\", (long long)sem_id, (unsigned long long)sem_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of object id lookup and address of the token used */\n    OS_1151_Log(\"After OS_ObjectIdGetById: return_code=%d, token_addr=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before calling implementation routine */\n        OS_1151_Log(\"Calling OS_CountSemDelete_Impl with token_addr=%p\", (void *)&token);\n\n        return_code = OS_CountSemDelete_Impl(&token);\n\n        /* Log after implementation routine returns */\n        OS_1151_Log(\"After OS_CountSemDelete_Impl: return_code=%d\", (int)return_code);\n\n        /* Complete the operation via the common routine */\n        OS_1151_Log(\"Calling OS_ObjectIdFinalizeDelete with token_addr=%p, current_return=%d\", (void *)&token, (int)return_code);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Final return value logged */\n        OS_1151_Log(\"After OS_ObjectIdFinalizeDelete: final_return_code=%d\", (int)return_code);\n    }\n    else\n    {\n        /* Log the failure path so callers can reproduce/inspect the scenario */\n        OS_1151_Log(\"OS_ObjectIdGetById failed (return_code=%d). Skipping delete and finalize.\", (int)return_code);\n    }\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpm3ze3i8h/src/src/os/shared/src/osapi-countsem.c: In function 'OS_1151_Log':\n/tmp/tmpm3ze3i8h/src/src/os/shared/src/osapi-countsem.c:136:15: error: storage size of 'tm_buf' isn't known\n  136 |     struct tm tm_buf;\n      |               ^~~~~~\nIn file included from /tmp/tmpm3ze3i8h/src/src/os/shared/src/osapi-countsem.c:1:\n/tmp/tmpm3ze3i8h/src/src/os/shared/src/osapi-countsem.c:140:56: error: invalid use of undefined type 'struct tm'\n  140 |         fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \", tm->tm_year + 1900, tm->tm_mon + 1,\n      |                                                        ^~\n/tmp/tmpm3ze3i8h/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpm3ze3i8h/src/src/os/shared/src/osapi-countsem.c:140:76: error: invalid use of undefined type 'struct tm'\n  140 |         fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \", tm->tm_year + 1900, tm->tm_mon + 1,\n      |                                                                            ^~\n/tmp/tmpm3ze3i8h/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpm3ze3i8h/src/src/os/shared/src/osapi-countsem.c:141:19: error: invalid use of undefined type 'struct tm'\n  141 |                 tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);\n      |                   ^~\n/tmp/tmpm3ze3i8h/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpm3ze3i8h/src/src/os/shared/src/osapi-countsem.c:141:32: error: invalid use of undefined type 'struct tm'\n  141 |                 tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);\n      |                                ^~\n/tmp/tmpm3ze3i8h/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpm3ze3i8h/src/src/os/shared/src/osapi-countsem.c:141:45: error: invalid use of undefined type 'struct tm'\n  141 |                 tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);\n      |                                             ^~\n/tmp/tmpm3ze3i8h/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpm3ze3i8h/src/src/os/shared/src/osapi-countsem.c:141:57: error: invalid use of undefined type 'struct tm'\n  141 |                 tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);\n      |                                                         ^~\n/tmp/tmpm3ze3i8h/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpm3ze3i8h/src/src/os/shared/src/osapi-countsem.c:150:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  150 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-countsem.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-countsem.dir/__/__/os/shared/src/osapi-countsem.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3415: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-countsem.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_CountSemDelete as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\nstatic void OS_1151_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1151.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    struct tm *tm = localtime_r(&t, &tm_buf);\n    if (tm != NULL)\n    {\n        fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \", tm->tm_year + 1900, tm->tm_mon + 1,\n                tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);\n    }\n    else\n    {\n        fprintf(f, \"(no-time) \");\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast to the standard va_list to match the vfprintf signature in this build environment */\n    vfprintf(f, fmt, (va_list)ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and input state */\n    OS_1151_Log(\"OS_CountSemDelete ENTRY: sem_id=%lld (0x%llx)\", (long long)sem_id, (unsigned long long)sem_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of object id lookup and address of the token used */\n    OS_1151_Log(\"After OS_ObjectIdGetById: return_code=%d, token_addr=%p\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before calling implementation routine */\n        OS_1151_Log(\"Calling OS_CountSemDelete_Impl with token_addr=%p\", (void *)&token);\n\n        return_code = OS_CountSemDelete_Impl(&token);\n\n        /* Log after implementation routine returns */\n        OS_1151_Log(\"After OS_CountSemDelete_Impl: return_code=%d\", (int)return_code);\n\n        /* Complete the operation via the common routine */\n        OS_1151_Log(\"Calling OS_ObjectIdFinalizeDelete with token_addr=%p, current_return=%d\", (void *)&token, (int)return_code);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Final return value logged */\n        OS_1151_Log(\"After OS_ObjectIdFinalizeDelete: final_return_code=%d\", (int)return_code);\n    }\n    else\n    {\n        /* Log the failure path so callers can reproduce/inspect the scenario */\n        OS_1151_Log(\"OS_ObjectIdGetById failed (return_code=%d). Skipping delete and finalize.\", (int)return_code);\n    }\n\n    return return_code;\n}\n",
  "explanation": "Added the missing standard headers <time.h>, <stdarg.h>, and <stdio.h> so struct tm and va_list are defined. To avoid a type mismatch between the build environment's va_list typedef and the vfprintf prototype, I cast the local va_list variable when calling vfprintf: vfprintf(f, fmt, (va_list)ap). No logic of OS_CountSemDelete was changed."
}