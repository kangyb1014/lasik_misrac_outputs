{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_ObjectIdTransactionInit is called with token == NULL (or with a pointer to an object smaller than sizeof(*token)), the call memset(token, 0, sizeof(*token)) will write through a NULL or past the destination object\u2019s bounds. The function performs no null/size check on token before calling memset, so this can result in out-of-bounds access and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1151.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemDelete:\n```c\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe/log helper - writes a formatted message to /tmp/logs/1151.txt */\nstatic void OS_1151_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1151.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Modified OS_CountSemDelete with lightweight probes inserted.\n * The original logic is preserved; probes only log the control flow\n * and key state (identifiers, token pointer and sizes, return codes).\n */\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry, token address and token size to help reproduce null/size issues */\n    OS_1151_Log(\"ENTER OS_CountSemDelete: sem_id=%\" PRIuPTR \", token_addr=%\" PRIuPTR \", token_size=%zu\",\n                (uintptr_t)sem_id, (uintptr_t)&token, sizeof(token));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of lookup and the token pointer again (in case the called routine mutated it) */\n    OS_1151_Log(\"After OS_ObjectIdGetById: sem_id=%\" PRIuPTR \", return_code=%d, token_addr=%\" PRIuPTR \", token_size=%zu\",\n                (uintptr_t)sem_id, (int)return_code, (uintptr_t)&token, sizeof(token));\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before the implementation call so the exact pointer passed is recorded */\n        OS_1151_Log(\"Calling OS_CountSemDelete_Impl: sem_id=%\" PRIuPTR \", token_addr=%\" PRIuPTR \", token_size=%zu\",\n                    (uintptr_t)sem_id, (uintptr_t)&token, sizeof(token));\n\n        return_code = OS_CountSemDelete_Impl(&token);\n\n        /* Log the return of the implementation */\n        OS_1151_Log(\"Returned from OS_CountSemDelete_Impl: sem_id=%\" PRIuPTR \", impl_return=%d, token_addr=%\" PRIuPTR\",\n                    (uintptr_t)sem_id, (int)return_code, (uintptr_t)&token);\n\n        /* Complete the operation via the common routine */\n        OS_1151_Log(\"Calling OS_ObjectIdFinalizeDelete: sem_id=%\" PRIuPTR \", prior_return=%d, token_addr=%\" PRIuPTR\",\n                    (uintptr_t)sem_id, (int)return_code, (uintptr_t)&token);\n\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Final state/log after finalization */\n        OS_1151_Log(\"After OS_ObjectIdFinalizeDelete: sem_id=%\" PRIuPTR \", final_return=%d, token_addr=%\" PRIuPTR \", token_size=%zu\",\n                    (uintptr_t)sem_id, (int)return_code, (uintptr_t)&token, sizeof(token));\n    }\n    else\n    {\n        /* Log early exit path */\n        OS_1151_Log(\"OS_CountSemDelete early exit: sem_id=%\" PRIuPTR \", return_code=%d\",\n                    (uintptr_t)sem_id, (int)return_code);\n    }\n\n    OS_1151_Log(\"EXIT OS_CountSemDelete: sem_id=%\" PRIuPTR \", return_code=%d\",\n                (uintptr_t)sem_id, (int)return_code);\n\n    return return_code;\n}\n"
}