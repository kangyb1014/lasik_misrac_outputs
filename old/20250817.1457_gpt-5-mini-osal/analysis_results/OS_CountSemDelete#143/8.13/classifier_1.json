{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_CountSemDelete:\n```c\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The fragment passes &token (type OS_object_token_t *) to OS_ObjectIdFinalizeDelete. Whether Rule 8.13 is violated depends on the called function's prototype. If OS_ObjectIdFinalizeDelete is declared to take a non-const pointer (e.g. int32 OS_ObjectIdFinalizeDelete(int32, OS_object_token_t *)) but the routine does not modify the token, then the prototype (and thus this use) violates Rule 8.13: the parameter should be const OS_object_token_t * (e.g. const OS_object_token_t *). If, however, the function legitimately modifies the token, or its prototype already uses const, there is no violation. Since the prototype/implementation is not provided, a potential violation exists when the function does not need to modify token."
}