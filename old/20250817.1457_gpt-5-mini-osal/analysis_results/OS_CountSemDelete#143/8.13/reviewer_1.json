{
  "user_message": "An agent A claimed that the following OS_CountSemDelete code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CountSemDelete.\n```c\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The fragment passes &token (type OS_object_token_t *) to OS_ObjectIdFinalizeDelete. Whether Rule 8.13 is violated depends on the called function's prototype. If OS_ObjectIdFinalizeDelete is declared to take a non-const pointer (e.g. int32 OS_ObjectIdFinalizeDelete(int32, OS_object_token_t *)) but the routine does not modify the token, then the prototype (and thus this use) violates Rule 8.13: the parameter should be const OS_object_token_t * (e.g. const OS_object_token_t *). If, however, the function legitimately modifies the token, or its prototype already uses const, there is no violation. Since the prototype/implementation is not provided, a potential violation exists when the function does not need to modify token.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1147.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void probe_log_token(const char *label, const OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/1147.txt\", \"a\");\n    if (f == NULL || token == NULL)\n    {\n        return;\n    }\n\n    const unsigned char *p = (const unsigned char *)token;\n    size_t i;\n\n    fprintf(f, \"%s: token@%p size=%zu bytes: \", label, (const void *)token, (size_t)sizeof(*token));\n    for (i = 0; i < sizeof(*token); ++i)\n    {\n        fprintf(f, \"%02X\", (unsigned)p[i]);\n        if (((i + 1) % 16) == 0 && (i + 1) < sizeof(*token))\n        {\n            fprintf(f, \"\\n        \");\n        }\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    probe_log(\"OS_CountSemDelete: ENTRY sem_id=%lu\", (unsigned long)sem_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    probe_log(\"OS_CountSemDelete: OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log the token state after acquisition */\n        probe_log_token(\"OS_CountSemDelete: token after GetById\", &token);\n\n        probe_log(\"OS_CountSemDelete: calling OS_CountSemDelete_Impl with token@%p\", (void *)&token);\n        return_code = OS_CountSemDelete_Impl(&token);\n        probe_log(\"OS_CountSemDelete: OS_CountSemDelete_Impl returned %ld\", (long)return_code);\n\n        /* Log token state immediately before finalization. This captures the\n         * exact pointer and its bytes as observed by this caller. If the\n         * callee (OS_ObjectIdFinalizeDelete) does not need to modify the\n         * token, its prototype should accept a const pointer; this log will\n         * help determine whether the token contents changed between calls.\n         */\n        probe_log_token(\"OS_CountSemDelete: token before FinalizeDelete\", &token);\n\n        /* Complete the operation via the common routine */\n        probe_log(\"OS_CountSemDelete: calling OS_ObjectIdFinalizeDelete with token@%p\", (void *)&token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        probe_log(\"OS_CountSemDelete: OS_ObjectIdFinalizeDelete returned %ld\", (long)return_code);\n\n        probe_log_token(\"OS_CountSemDelete: token after FinalizeDelete\", &token);\n    }\n\n    probe_log(\"OS_CountSemDelete: EXIT return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_CountSemDelete: ENTRY sem_id=0\nOS_CountSemDelete: OS_ObjectIdGetById returned -16\nOS_CountSemDelete: EXIT return_code=-16\nOS_CountSemDelete: ENTRY sem_id=0\nOS_CountSemDelete: OS_ObjectIdGetById returned -16\nOS_CountSemDelete: EXIT return_code=-16\nOS_CountSemDelete: ENTRY sem_id=3735928559\nOS_CountSemDelete: OS_ObjectIdGetById returned -16\nOS_CountSemDelete: EXIT return_code=-16\nOS_CountSemDelete: ENTRY sem_id=0\nOS_CountSemDelete: OS_ObjectIdGetById returned -16\nOS_CountSemDelete: EXIT return_code=-16\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 8.13 requires a pointer to point to a const-qualified type whenever the pointed-to object is not modified. Whether the call OS_ObjectIdFinalizeDelete(return_code, &token) violates Rule 8.13 depends entirely on the prototype of OS_ObjectIdFinalizeDelete: if its parameter is declared as a non-const OS_object_token_t * but the function does not modify the token, then the prototype (and thus that use) would violate Rule 8.13. The source fragment as shown (calling OS_ObjectIdFinalizeDelete(&token)) by itself does not prove a violation.\n\nThe provided runtime log shows that OS_ObjectIdGetById always returned an error (return code -16) and the code never entered the branch that would call OS_ObjectIdFinalizeDelete. Given the exhaustive test results provided, there is no runtime evidence that FinalizeDelete is invoked or that the token remains unmodified while the callee's prototype lacks const. Therefore the agent A's claim that this code violates Rule 8.13 is not proven by the supplied evidence, and the report is not correct.\n\nTo conclusively determine a rule violation, inspect the declaration of OS_ObjectIdFinalizeDelete: if it takes a non-const pointer but does not modify the pointed object, it should be changed to take a const OS_object_token_t * to comply with Rule 8.13."
}