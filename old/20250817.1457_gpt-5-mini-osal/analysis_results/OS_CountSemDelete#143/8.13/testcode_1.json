{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment passes &token (type OS_object_token_t *) to OS_ObjectIdFinalizeDelete. Whether Rule 8.13 is violated depends on the called function's prototype. If OS_ObjectIdFinalizeDelete is declared to take a non-const pointer (e.g. int32 OS_ObjectIdFinalizeDelete(int32, OS_object_token_t *)) but the routine does not modify the token, then the prototype (and thus this use) violates Rule 8.13: the parameter should be const OS_object_token_t * (e.g. const OS_object_token_t *). If, however, the function legitimately modifies the token, or its prototype already uses const, there is no violation. Since the prototype/implementation is not provided, a potential violation exists when the function does not need to modify token.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1147.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemDelete:\n```c\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe logging helpers. These are intentionally simple and self-contained so\n * they can be dropped into the target source file without changing program\n * semantics. They append diagnostic information to /tmp/logs/1147.txt.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1147.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Hex-dump the binary contents of the token. This uses sizeof on the token\n * type; it must be a complete type at the point this file is compiled.\n */\nstatic void probe_log_token(const char *label, const OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/1147.txt\", \"a\");\n    if (f == NULL || token == NULL)\n    {\n        return;\n    }\n\n    const unsigned char *p = (const unsigned char *)token;\n    size_t i;\n\n    fprintf(f, \"%s: token@%p size=%zu bytes: \", label, (const void *)token, (size_t)sizeof(*token));\n    for (i = 0; i < sizeof(*token); ++i)\n    {\n        fprintf(f, \"%02X\", (unsigned)p[i]);\n        if (((i + 1) % 16) == 0 && (i + 1) < sizeof(*token))\n        {\n            fprintf(f, \"\\n        \");\n        }\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    probe_log(\"OS_CountSemDelete: ENTRY sem_id=%lu\", (unsigned long)sem_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    probe_log(\"OS_CountSemDelete: OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log the token state after acquisition */\n        probe_log_token(\"OS_CountSemDelete: token after GetById\", &token);\n\n        probe_log(\"OS_CountSemDelete: calling OS_CountSemDelete_Impl with token@%p\", (void *)&token);\n        return_code = OS_CountSemDelete_Impl(&token);\n        probe_log(\"OS_CountSemDelete: OS_CountSemDelete_Impl returned %ld\", (long)return_code);\n\n        /* Log token state immediately before finalization. This captures the\n         * exact pointer and its bytes as observed by this caller. If the\n         * callee (OS_ObjectIdFinalizeDelete) does not need to modify the\n         * token, its prototype should accept a const pointer; this log will\n         * help determine whether the token contents changed between calls.\n         */\n        probe_log_token(\"OS_CountSemDelete: token before FinalizeDelete\", &token);\n\n        /* Complete the operation via the common routine */\n        probe_log(\"OS_CountSemDelete: calling OS_ObjectIdFinalizeDelete with token@%p\", (void *)&token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        probe_log(\"OS_CountSemDelete: OS_ObjectIdFinalizeDelete returned %ld\", (long)return_code);\n\n        probe_log_token(\"OS_CountSemDelete: token after FinalizeDelete\", &token);\n    }\n\n    probe_log(\"OS_CountSemDelete: EXIT return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}