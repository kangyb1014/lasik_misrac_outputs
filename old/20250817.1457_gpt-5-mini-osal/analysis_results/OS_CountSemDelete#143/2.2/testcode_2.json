{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'return_code' in OS_ObjectIdConvertToken is initialized to OS_ERROR but that stored value is never relied upon: every path that exits the while(true) loop assigns return_code (OS_SUCCESS, OS_ERR_INVALID_ID, or OS_ERR_OBJECT_IN_USE) before the loop is broken, and the only other early return in the function returns immediately before this initialization could be observed. Therefore the initialization int32 return_code = OS_ERROR; is an executed operation whose removal would not alter program behaviour \u2014 it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1146.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemDelete:\n```c\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: append a line to the log file with key state information.\n * Keep this as a small, self-contained function so it can be compiled within\n * the existing build. It must not change the logic of the original function.\n */\nstatic void OS_CountSemDelete_Probe(const char *stage, osal_id_t sem_id, int32 return_code, const OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/1146.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print: stage, sem_id, return_code, token address (token is on stack in caller).\n         * Casts used to avoid format warnings for unknown typedefs in this snippet.\n         */\n        fprintf(f, \"%s: sem_id=%ld return_code=%ld token=%p\\n\",\n                stage,\n                (long)sem_id,\n                (long)return_code,\n                (const void *)token);\n        fclose(f);\n    }\n}\n\nint32 OS_CountSemDelete(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry into the function */\n    OS_CountSemDelete_Probe(\"entry\", sem_id, 0, &token);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log after attempting to get object by id */\n    OS_CountSemDelete_Probe(\"after_OS_ObjectIdGetById\", sem_id, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before calling the implementation */\n        OS_CountSemDelete_Probe(\"before_Impl\", sem_id, return_code, &token);\n\n        return_code = OS_CountSemDelete_Impl(&token);\n\n        /* Log after Impl returns */\n        OS_CountSemDelete_Probe(\"after_Impl\", sem_id, return_code, &token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log after finalize */\n        OS_CountSemDelete_Probe(\"after_FinalizeDelete\", sem_id, return_code, &token);\n    }\n    else\n    {\n        /* Log the early-failure path */\n        OS_CountSemDelete_Probe(\"early_failure\", sem_id, return_code, &token);\n    }\n\n    /* Log just before returning the final code */\n    OS_CountSemDelete_Probe(\"exit\", sem_id, return_code, &token);\n\n    return return_code;\n}\n"
}