{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_SelectSingle_Impl:\n```c\nint32 OS_SelectSingle_Impl(const OS_object_token_t *token, uint32 *SelectFlags, int32 msecs)\n{\n    int32                           return_code;\n    fd_set                          wr_set;\n    fd_set                          rd_set;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n     * If called on a stream_id which does not support this\n     * operation, return immediately and do not invoke the system call\n     */\n    if (!impl->selectable)\n    {\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (impl->fd >= FD_SETSIZE)\n    {\n        /* out of range of select() implementation */\n        return OS_ERR_OPERATION_NOT_SUPPORTED;\n    }\n\n    if (*SelectFlags != 0)\n    {\n        FD_ZERO(&wr_set);\n        FD_ZERO(&rd_set);\n        if (*SelectFlags & OS_STREAM_STATE_READABLE)\n        {\n            FD_SET(impl->fd, &rd_set);\n        }\n        if (*SelectFlags & OS_STREAM_STATE_WRITABLE)\n        {\n            FD_SET(impl->fd, &wr_set);\n        }\n\n        return_code = OS_DoSelect(impl->fd, &rd_set, &wr_set, msecs);\n\n        if (return_code == OS_SUCCESS)\n        {\n            if (!FD_ISSET(impl->fd, &rd_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_READABLE;\n            }\n            if (!FD_ISSET(impl->fd, &wr_set))\n            {\n                *SelectFlags &= ~OS_STREAM_STATE_WRITABLE;\n            }\n        }\n        else\n        {\n            *SelectFlags = 0;\n        }\n    }\n    else\n    {\n        /* Nothing to check for, return immediately. */\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_SelectSingle_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_impl_file_internal_record_t OS_impl_filehandle_table[OS_MAX_NUM_OPEN_FILES]\n...\ntypedef struct\n{\n    int  fd;\n    bool selectable;\n} OS_impl_file_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nstatic int32 OS_DoSelect(int maxfd, fd_set *rd_set, fd_set *wr_set, int32 msecs)\n{\n    int             os_status;\n    int32           return_code;\n    struct timeval  tv;\n    struct timeval *tvptr;\n    struct timespec ts_now;\n    struct timespec ts_end;\n\n    if (msecs > 0)\n    {\n        clock_gettime(CLOCK_MONOTONIC, &ts_now);\n        ts_end.tv_sec  = ts_now.tv_sec + (msecs / 1000);\n        ts_end.tv_nsec = ts_now.tv_nsec + (1000000 * (msecs % 1000));\n        if (ts_end.tv_nsec >= 1000000000)\n        {\n            ++ts_end.tv_sec;\n            ts_end.tv_nsec -= 1000000000;\n        }\n    }\n    else\n    {\n        /* Zero for consistency and to avoid possible confusion if not cleared */\n        memset(&ts_end, 0, sizeof(ts_end));\n    }\n\n    do\n    {\n        if (msecs < 0)\n        {\n            tvptr = NULL;\n        }\n        else if (msecs == 0)\n        {\n            tvptr      = &tv;\n            tv.tv_sec  = 0;\n            tv.tv_usec = 0;\n        }\n        else\n        {\n            tvptr = &tv;\n\n            clock_gettime(CLOCK_MONOTONIC, &ts_now);\n\n            /* note that the tv_sec and tv_usec/tv_nsec values are all signed longs, so OK to subtract */\n            tv.tv_sec  = ts_end.tv_sec - ts_now.tv_sec;\n            tv.tv_usec = (ts_end.tv_nsec - ts_now.tv_nsec) / 1000;\n\n            if (tv.tv_sec < 0 || (tv.tv_sec == 0 && tv.tv_usec < 0))\n            {\n                os_status = 0;\n                break;\n            }\n\n            if (tv.tv_usec < 0)\n            {\n                tv.tv_usec += 1000000;\n                --tv.tv_sec;\n            }\n        }\n\n        os_status = select(maxfd + 1, rd_set, wr_set, NULL, tvptr);\n    } while (os_status < 0 && (errno == EINTR || errno == EAGAIN));\n\n    if (os_status < 0)\n    {\n        return_code = OS_ERROR;\n    }\n    else if (os_status == 0)\n    {\n        return_code = OS_ERROR_TIMEOUT;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n...\n#define OS_ERR_OPERATION_NOT_SUPPORTED (-38)\n...\n#define OS_SUCCESS (0)\n...\ntypedef uint32_t  uint32\n...\ntypedef int32_t   int32\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nint32 OS_GenericRead_Impl(const OS_object_token_t *token, void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_READABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_READABLE) != 0)\n        {\n            os_result = read(impl->fd, buffer, nbytes);\n            if (os_result < 0)\n            {\n                OS_DEBUG(\"read: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n            }\n        }\n    }\n\n    return return_code;\n}\n...\nint32 OS_GenericWrite_Impl(const OS_object_token_t *token, const void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_WRITABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_WRITABLE) != 0)\n        {\n            /* on some system libraries for which the write() argument is not\n             * qualified correctly, it needs to be case to a void* here */\n            os_result = write(impl->fd, GENERIC_IO_CONST_DATA_CAST buffer, nbytes);\n            if (os_result < 0)\n            {\n                OS_DEBUG(\"write: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n            }\n        }\n    }\n\n    return return_code;\n}\n...\nint32 OS_SocketConnect_Impl(const OS_object_token_t *token, const OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    int                             os_status;\n    int                             sockopt;\n    socklen_t                       slen;\n    uint32                          operation;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&Addr->AddrData;\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            slen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            slen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            slen = 0;\n            break;\n    }\n\n    if (slen != Addr->ActualLength)\n    {\n        return_code = OS_ERR_BAD_ADDRESS;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n        os_status   = connect(impl->fd, sa, slen);\n        if (os_status < 0)\n        {\n            if (errno != EINPROGRESS)\n            {\n                OS_DEBUG(\"connect: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /*\n                 * If the socket was created in nonblocking mode (O_NONBLOCK flag) then the connect\n                 * runs in the background and connect() returns EINPROGRESS.  In this case we still\n                 * want to provide the \"normal\" (blocking) semantics to the calling app, such that\n                 * when OS_SocketConnect() returns, the socket is ready for use.\n                 *\n                 * To provide consistent behavior to calling apps, this does a select() to wait\n                 * for the socket to become writable, meaning that the remote side is connected.\n                 *\n                 * An important point here is that the calling app can control the timeout.  If the\n                 * normal/blocking connect() was used, the OS/IP stack controls the timeout, and it\n                 * can be quite long.\n                 */\n                operation = OS_STREAM_STATE_WRITABLE;\n                if (impl->selectable)\n                {\n                    return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n                }\n                if (return_code == OS_SUCCESS)\n                {\n                    if ((operation & OS_STREAM_STATE_WRITABLE) == 0)\n                    {\n                        return_code = OS_ERROR_TIMEOUT;\n                    }\n                    else\n                    {\n                        /*\n                         * The SO_ERROR socket flag should also read back zero.\n                         * If not zero, something went wrong during connect\n                         */\n                        sockopt   = 0;\n                        slen      = sizeof(sockopt);\n                        os_status = getsockopt(impl->fd, SOL_SOCKET, SO_ERROR, &sockopt, &slen);\n                        if (os_status < 0 || sockopt != 0)\n                        {\n                            return_code = OS_ERROR;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return return_code;\n}\n...\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen       = Addr->ActualLength;\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n            if (conn_impl->fd < 0)\n            {\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n            }\n        }\n    }\n\n    return return_code;\n}\n...\nint32 OS_SocketRecvFrom_Impl(const OS_object_token_t *token, void *buffer, size_t buflen, OS_SockAddr_t *RemoteAddr,\n                             int32 timeout)\n{\n    int32                           return_code;\n    int                             os_result;\n    int                             waitflags;\n    uint32                          operation;\n    struct sockaddr *               sa;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    if (RemoteAddr == NULL)\n    {\n        sa      = NULL;\n        addrlen = 0;\n    }\n    else\n    {\n        addrlen = OS_SOCKADDR_MAX_LEN;\n        sa      = (struct sockaddr *)&RemoteAddr->AddrData;\n    }\n\n    operation = OS_STREAM_STATE_READABLE;\n    /*\n     * If \"O_NONBLOCK\" flag is set then use select()\n     * Note this is the only way to get a correct timeout\n     */\n    if (impl->selectable)\n    {\n        waitflags   = MSG_DONTWAIT;\n        return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n    }\n    else\n    {\n        if (timeout == 0)\n        {\n            waitflags = MSG_DONTWAIT;\n        }\n        else\n        {\n            /* note timeout will not be honored if >0 */\n            waitflags = 0;\n        }\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            os_result = recvfrom(impl->fd, buffer, buflen, waitflags, sa, &addrlen);\n            if (os_result < 0)\n            {\n                if (errno == EAGAIN || errno == EWOULDBLOCK)\n                {\n                    return_code = OS_QUEUE_EMPTY;\n                }\n                else\n                {\n                    OS_DEBUG(\"recvfrom: %s\\n\", strerror(errno));\n                    return_code = OS_ERROR;\n                }\n            }\n            else\n            {\n                return_code = os_result;\n\n                if (RemoteAddr != NULL)\n                {\n                    RemoteAddr->ActualLength = addrlen;\n                }\n            }\n        }\n    }\n\n    return return_code;\n}\n...\nint32 OS_SelectSingle(osal_id_t objid, uint32 *StateFlags, int32 msecs)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* check parameters */\n    OS_CHECK_POINTER(StateFlags);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_STREAM, objid, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SelectSingle_Impl(&token, StateFlags, msecs);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (msecs == 0)\n        {\n            tvptr      = &tv;\n            tv.tv_sec  = 0;\n            tv.tv_usec = 0;\n        }\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The code initializes the timeval 'tv' and sets tvptr = &tv when msecs == 0 so that select() receives a valid zero timeout (poll). These assignments are executed and required: without them tv would be uninitialized (or contain stale data) and select() behavior would change. Therefore this is not dead code."
}