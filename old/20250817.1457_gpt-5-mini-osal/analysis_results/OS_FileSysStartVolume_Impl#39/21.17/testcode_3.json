{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf local->device_name does not guarantee at least (sizeof(OS_POSIX_DEVICEFILE_PREFIX) - 1) accessible bytes, the call can read beyond the bounds of local->device_name. For example, if local->device_name points to a buffer smaller than the prefix length or is not guaranteed to be null-terminated within that many bytes, strncmp(local->device_name, OS_POSIX_DEVICEFILE_PREFIX, sizeof(OS_POSIX_DEVICEFILE_PREFIX) - 1) may access past the end of local->device_name and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStartVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/319.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysStartVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStartVolume_Impl:\n```c\nint32 OS_FileSysStartVolume_Impl(const OS_object_token_t *token)\n{\n    OS_filesys_internal_record_t *local;\n    struct stat                   stat_buf;\n    const char *                  tmpdir;\n    size_t                        mplen;\n    size_t                        vollen;\n    uint32                        i;\n    enum\n    {\n        VOLATILE_DISK_LOC_DEV_SHM,\n        VOLATILE_DISK_LOC_ENV,\n        VOLATILE_DISK_LOC_VARTMP,\n        VOLATILE_DISK_LOC_TMP,\n        VOLATILE_DISK_LOC_MAX\n    };\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /*\n     * Determine basic type of filesystem, if not already known\n     */\n    if (local->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n        strncmp(local->device_name, OS_POSIX_DEVICEFILE_PREFIX, sizeof(OS_POSIX_DEVICEFILE_PREFIX) - 1) == 0)\n    {\n        /*\n         * If referring to a real device in the /dev filesystem,\n         * then assume it is a normal disk.\n         */\n        local->fstype = OS_FILESYS_TYPE_NORMAL_DISK;\n    }\n\n    /*\n     * For VOLATILE volumes, there are two options:\n     *  - The /dev/shm filesystem, if it exists\n     *  - The /tmp filesystem\n     *\n     * The /dev/shm is preferable because it should actually be a ramdisk, but\n     * it is system-specific - should exist on Linux if it is mounted.\n     * The /tmp file system might be a regular persistent disk, but should always exist\n     * on any POSIX-compliant OS.\n     */\n\n    tmpdir = NULL;\n    if (local->fstype == OS_FILESYS_TYPE_VOLATILE_DISK)\n    {\n        /* find a suitable location to keep the volatile disk */\n        for (i = 0; i <= VOLATILE_DISK_LOC_MAX; ++i)\n        {\n            switch (i)\n            {\n                case VOLATILE_DISK_LOC_DEV_SHM:\n                    /* This is most preferable because it should actually be a ramdisk */\n                    tmpdir = \"/dev/shm\";\n                    break;\n                case VOLATILE_DISK_LOC_ENV:\n                    /* try the TMPDIR environment variable, if set */\n                    tmpdir = getenv(\"TMPDIR\");\n                    break;\n                case VOLATILE_DISK_LOC_VARTMP:\n                    /* try /var/tmp directory */\n                    tmpdir = \"/var/tmp\";\n                    break;\n                case VOLATILE_DISK_LOC_TMP:\n                    /* use /tmp directory as a last resort */\n                    tmpdir = \"/tmp\";\n                    break;\n                default:\n                    tmpdir = NULL;\n                    break;\n            }\n\n            if (tmpdir != NULL && stat(tmpdir, &stat_buf) == 0)\n            {\n                /* check if the user has write permission to the directory */\n                if ((stat_buf.st_mode & S_IWOTH) != 0 ||\n                    ((stat_buf.st_mode & S_IWGRP) != 0 && stat_buf.st_gid == getegid()) ||\n                    ((stat_buf.st_mode & S_IWUSR) != 0 && stat_buf.st_uid == geteuid()))\n                {\n                    break;\n                }\n            }\n        }\n\n        if (tmpdir == NULL)\n        {\n            /* OS provides no place to put the volume */\n            OS_DEBUG(\"No storage location for volatile volumes\");\n            return OS_FS_ERR_DRIVE_NOT_CREATED;\n        }\n\n        /*\n         * Note - performing the concatenation in a single snprintf() call seems\n         * to trigger a (false) pointer overlap warning, because volume_name should\n         * always be null terminated.  To get around this, calculate the\n         * string size and check that it is within the expected size, and do the\n         * append of volume_name explicitly.\n         */\n        mplen = snprintf(local->system_mountpt, sizeof(local->system_mountpt), \"%s/osal:\", tmpdir);\n        if (mplen < sizeof(local->system_mountpt))\n        {\n            vollen = OS_strnlen(local->volume_name, sizeof(local->volume_name));\n            if ((vollen + mplen) >= sizeof(local->system_mountpt))\n            {\n                vollen = sizeof(local->system_mountpt) - mplen - 1;\n            }\n            memcpy(&local->system_mountpt[mplen], local->volume_name, vollen);\n            local->system_mountpt[mplen + vollen] = 0;\n        }\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysStartVolume_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <unistd.h>\n\n/* Probe logging helper - appends human-readable traces to /tmp/logs/319.txt */\nstatic void OS_FileSysStartVolume_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/319.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_FileSysStartVolume_Impl(const OS_object_token_t *token)\n{\n    OS_filesys_internal_record_t *local;\n    struct stat                   stat_buf;\n    const char *                  tmpdir;\n    size_t                        mplen;\n    size_t                        vollen;\n    uint32                        i;\n    enum\n    {\n        VOLATILE_DISK_LOC_DEV_SHM,\n        VOLATILE_DISK_LOC_ENV,\n        VOLATILE_DISK_LOC_VARTMP,\n        VOLATILE_DISK_LOC_TMP,\n        VOLATILE_DISK_LOC_MAX\n    };\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /*\n     * Log entry into function with key pointers and state. Do not dereference\n     * string pointers here to avoid introducing new out-of-bounds accesses.\n     */\n    OS_FileSysStartVolume_LogProbe(\"ENTER OS_FileSysStartVolume_Impl: token=%p local=%p fstype=%d device_name_ptr=%p volume_name_ptr=%p\",\n                                  (const void *)token, (const void *)local, (int)local->fstype,\n                                  (const void *)local->device_name, (const void *)local->volume_name);\n\n    /*\n     * Determine basic type of filesystem, if not already known\n     */\n    if (local->fstype == OS_FILESYS_TYPE_UNKNOWN)\n    {\n        /* Log that we will perform the prefix comparison and the prefix length */\n        OS_FileSysStartVolume_LogProbe(\"About to strncmp: device_name_ptr=%p prefix_len=%zu\",\n                                      (const void *)local->device_name,\n                                      (size_t)(sizeof(OS_POSIX_DEVICEFILE_PREFIX) - 1));\n\n        int cmpres = strncmp(local->device_name, OS_POSIX_DEVICEFILE_PREFIX, sizeof(OS_POSIX_DEVICEFILE_PREFIX) - 1);\n\n        /* Log the result of the comparison to capture control path */\n        OS_FileSysStartVolume_LogProbe(\"strncmp result=%d (0 means match)\", cmpres);\n\n        if (cmpres == 0)\n        {\n            /*\n             * If referring to a real device in the /dev filesystem,\n             * then assume it is a normal disk.\n             */\n            local->fstype = OS_FILESYS_TYPE_NORMAL_DISK;\n            OS_FileSysStartVolume_LogProbe(\"fstype set to OS_FILESYS_TYPE_NORMAL_DISK for local=%p\", (const void *)local);\n        }\n        else\n        {\n            OS_FileSysStartVolume_LogProbe(\"fstype remains UNKNOWN (value=%d) for local=%p\", (int)local->fstype, (const void *)local);\n        }\n    }\n\n    /*\n     * For VOLATILE volumes, there are two options:\n     *  - The /dev/shm filesystem, if it exists\n     *  - The /tmp filesystem\n     */\n\n    tmpdir = NULL;\n    if (local->fstype == OS_FILESYS_TYPE_VOLATILE_DISK)\n    {\n        OS_FileSysStartVolume_LogProbe(\"Handling VOLATILE_DISK for local=%p - beginning search for tmpdir\", (const void *)local);\n\n        /* find a suitable location to keep the volatile disk */\n        for (i = 0; i <= VOLATILE_DISK_LOC_MAX; ++i)\n        {\n            switch (i)\n            {\n                case VOLATILE_DISK_LOC_DEV_SHM:\n                    /* This is most preferable because it should actually be a ramdisk */\n                    tmpdir = \"/dev/shm\";\n                    break;\n                case VOLATILE_DISK_LOC_ENV:\n                    /* try the TMPDIR environment variable, if set */\n                    tmpdir = getenv(\"TMPDIR\");\n                    break;\n                case VOLATILE_DISK_LOC_VARTMP:\n                    /* try /var/tmp directory */\n                    tmpdir = \"/var/tmp\";\n                    break;\n                case VOLATILE_DISK_LOC_TMP:\n                    /* use /tmp directory as a last resort */\n                    tmpdir = \"/tmp\";\n                    break;\n                default:\n                    tmpdir = NULL;\n                    break;\n            }\n\n            OS_FileSysStartVolume_LogProbe(\"Iteration %u: candidate tmpdir=%p (%s)\", i, (const void *)tmpdir, tmpdir ? tmpdir : \"(null)\");\n\n            if (tmpdir != NULL && stat(tmpdir, &stat_buf) == 0)\n            {\n                /* Log stat results necessary to understand permission checks */\n                OS_FileSysStartVolume_LogProbe(\"stat OK for %s: st_mode=0%o st_uid=%u st_gid=%u\", tmpdir, stat_buf.st_mode, (unsigned)stat_buf.st_uid, (unsigned)stat_buf.st_gid);\n\n                /* check if the user has write permission to the directory */\n                if ((stat_buf.st_mode & S_IWOTH) != 0 ||\n                    ((stat_buf.st_mode & S_IWGRP) != 0 && stat_buf.st_gid == getegid()) ||\n                    ((stat_buf.st_mode & S_IWUSR) != 0 && stat_buf.st_uid == geteuid()))\n                {\n                    OS_FileSysStartVolume_LogProbe(\"Write permission confirmed for %s\", tmpdir);\n                    break;\n                }\n                else\n                {\n                    OS_FileSysStartVolume_LogProbe(\"No write permission for %s\", tmpdir);\n                }\n            }\n            else\n            {\n                if (tmpdir == NULL)\n                {\n                    OS_FileSysStartVolume_LogProbe(\"Candidate tmpdir is NULL at iteration %u\", i);\n                }\n                else\n                {\n                    OS_FileSysStartVolume_LogProbe(\"stat failed for %s (errno may indicate reason)\", tmpdir);\n                }\n            }\n        }\n\n        if (tmpdir == NULL)\n        {\n            /* OS provides no place to put the volume */\n            OS_FileSysStartVolume_LogProbe(\"No storage location for volatile volumes - aborting\");\n            OS_DEBUG(\"No storage location for volatile volumes\");\n            return OS_FS_ERR_DRIVE_NOT_CREATED;\n        }\n\n        OS_FileSysStartVolume_LogProbe(\"Selected tmpdir=%s - building system_mountpt\", tmpdir);\n\n        /*\n         * Note - performing the concatenation in a single snprintf() call seems\n         * to trigger a (false) pointer overlap warning, because volume_name should\n         * always be null terminated.  To get around this, calculate the\n         * string size and check that it is within the expected size, and do the\n         * append of volume_name explicitly.\n         */\n        mplen = snprintf(local->system_mountpt, sizeof(local->system_mountpt), \"%s/osal:\", tmpdir);\n        OS_FileSysStartVolume_LogProbe(\"snprintf mplen=%zu (buffer_size=%zu)\", mplen, sizeof(local->system_mountpt));\n\n        if (mplen < sizeof(local->system_mountpt))\n        {\n            vollen = OS_strnlen(local->volume_name, sizeof(local->volume_name));\n            OS_FileSysStartVolume_LogProbe(\"Calculated vollen=%zu (volume_name_ptr=%p)\", vollen, (const void *)local->volume_name);\n\n            if ((vollen + mplen) >= sizeof(local->system_mountpt))\n            {\n                vollen = sizeof(local->system_mountpt) - mplen - 1;\n                OS_FileSysStartVolume_LogProbe(\"Truncating vollen to %zu to fit system_mountpt\", vollen);\n            }\n\n            memcpy(&local->system_mountpt[mplen], local->volume_name, vollen);\n            local->system_mountpt[mplen + vollen] = 0;\n\n            OS_FileSysStartVolume_LogProbe(\"Final system_mountpt (truncated to buffer) at local=%p, mplen=%zu vollen=%zu\", (const void *)local, mplen, vollen);\n        }\n    }\n\n    OS_FileSysStartVolume_LogProbe(\"EXIT OS_FileSysStartVolume_Impl: returning OS_SUCCESS for local=%p\", (const void *)local);\n    return OS_SUCCESS;\n}\n"
}