{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro takes the address of its second parameter without preserving const. In OS_FileSysStartVolume_Impl the call OS_OBJECT_TABLE_GET(OS_filesys_table, *token) passes *token where token is declared const OS_object_token_t *; the macro expands to &(*token) (i.e. a const OS_object_token_t *), but the macro (and likely the called function OS_ObjectIndexFromToken) does not use a const-qualified pointer parameter, causing a const qualification to be discarded. This fails the requirement that pointers should point to const-qualified types whenever possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStartVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/315.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysStartVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStartVolume_Impl:\n```c\nint32 OS_FileSysStartVolume_Impl(const OS_object_token_t *token)\n{\n    OS_filesys_internal_record_t *local;\n    struct stat                   stat_buf;\n    const char *                  tmpdir;\n    size_t                        mplen;\n    size_t                        vollen;\n    uint32                        i;\n    enum\n    {\n        VOLATILE_DISK_LOC_DEV_SHM,\n        VOLATILE_DISK_LOC_ENV,\n        VOLATILE_DISK_LOC_VARTMP,\n        VOLATILE_DISK_LOC_TMP,\n        VOLATILE_DISK_LOC_MAX\n    };\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /*\n     * Determine basic type of filesystem, if not already known\n     */\n    if (local->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n        strncmp(local->device_name, OS_POSIX_DEVICEFILE_PREFIX, sizeof(OS_POSIX_DEVICEFILE_PREFIX) - 1) == 0)\n    {\n        /*\n         * If referring to a real device in the /dev filesystem,\n         * then assume it is a normal disk.\n         */\n        local->fstype = OS_FILESYS_TYPE_NORMAL_DISK;\n    }\n\n    /*\n     * For VOLATILE volumes, there are two options:\n     *  - The /dev/shm filesystem, if it exists\n     *  - The /tmp filesystem\n     *\n     * The /dev/shm is preferable because it should actually be a ramdisk, but\n     * it is system-specific - should exist on Linux if it is mounted.\n     * The /tmp file system might be a regular persistent disk, but should always exist\n     * on any POSIX-compliant OS.\n     */\n\n    tmpdir = NULL;\n    if (local->fstype == OS_FILESYS_TYPE_VOLATILE_DISK)\n    {\n        /* find a suitable location to keep the volatile disk */\n        for (i = 0; i <= VOLATILE_DISK_LOC_MAX; ++i)\n        {\n            switch (i)\n            {\n                case VOLATILE_DISK_LOC_DEV_SHM:\n                    /* This is most preferable because it should actually be a ramdisk */\n                    tmpdir = \"/dev/shm\";\n                    break;\n                case VOLATILE_DISK_LOC_ENV:\n                    /* try the TMPDIR environment variable, if set */\n                    tmpdir = getenv(\"TMPDIR\");\n                    break;\n                case VOLATILE_DISK_LOC_VARTMP:\n                    /* try /var/tmp directory */\n                    tmpdir = \"/var/tmp\";\n                    break;\n                case VOLATILE_DISK_LOC_TMP:\n                    /* use /tmp directory as a last resort */\n                    tmpdir = \"/tmp\";\n                    break;\n                default:\n                    tmpdir = NULL;\n                    break;\n            }\n\n            if (tmpdir != NULL && stat(tmpdir, &stat_buf) == 0)\n            {\n                /* check if the user has write permission to the directory */\n                if ((stat_buf.st_mode & S_IWOTH) != 0 ||\n                    ((stat_buf.st_mode & S_IWGRP) != 0 && stat_buf.st_gid == getegid()) ||\n                    ((stat_buf.st_mode & S_IWUSR) != 0 && stat_buf.st_uid == geteuid()))\n                {\n                    break;\n                }\n            }\n        }\n\n        if (tmpdir == NULL)\n        {\n            /* OS provides no place to put the volume */\n            OS_DEBUG(\"No storage location for volatile volumes\");\n            return OS_FS_ERR_DRIVE_NOT_CREATED;\n        }\n\n        /*\n         * Note - performing the concatenation in a single snprintf() call seems\n         * to trigger a (false) pointer overlap warning, because volume_name should\n         * always be null terminated.  To get around this, calculate the\n         * string size and check that it is within the expected size, and do the\n         * append of volume_name explicitly.\n         */\n        mplen = snprintf(local->system_mountpt, sizeof(local->system_mountpt), \"%s/osal:\", tmpdir);\n        if (mplen < sizeof(local->system_mountpt))\n        {\n            vollen = OS_strnlen(local->volume_name, sizeof(local->volume_name));\n            if ((vollen + mplen) >= sizeof(local->system_mountpt))\n            {\n                vollen = sizeof(local->system_mountpt) - mplen - 1;\n            }\n            memcpy(&local->system_mountpt[mplen], local->volume_name, vollen);\n            local->system_mountpt[mplen + vollen] = 0;\n        }\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysStartVolume_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <stdlib.h>\n\n/* Probe helper: append diagnostic information to /tmp/logs/315.txt */\nstatic void OS_FileSysStartVolume_Impl_log(const char *tag, const void *token_ptr, const void *local_ptr, const void *extra_ptr, size_t extra_size)\n{\n    FILE *f = fopen(\"/tmp/logs/315.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"---- %s ----\\n\", tag);\n    fprintf(f, \"token ptr = %p\\n\", token_ptr);\n    if (token_ptr != NULL && extra_ptr != NULL && extra_size > 0)\n    {\n        const unsigned char *bytes = (const unsigned char *)extra_ptr;\n        size_t i;\n        fprintf(f, \"token raw (first %zu bytes):\", extra_size);\n        for (i = 0; i < extra_size; ++i)\n        {\n            fprintf(f, \" %02X\", (unsigned)bytes[i]);\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fprintf(f, \"local ptr = %p\\n\", local_ptr);\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_FileSysStartVolume_Impl(const OS_object_token_t *token)\n{\n    OS_filesys_internal_record_t *local;\n    struct stat                   stat_buf;\n    const char *                  tmpdir;\n    size_t                        mplen;\n    size_t                        vollen;\n    uint32                        i;\n    enum\n    {\n        VOLATILE_DISK_LOC_DEV_SHM,\n        VOLATILE_DISK_LOC_ENV,\n        VOLATILE_DISK_LOC_VARTMP,\n        VOLATILE_DISK_LOC_TMP,\n        VOLATILE_DISK_LOC_MAX\n    };\n\n    /* Log entry and token raw bytes (copy limited to a reasonable size) */\n    {\n        size_t token_bytes = 0;\n        if (token != NULL)\n        {\n            /* Capture up to 32 bytes of the token for diagnostics without modifying it */\n            token_bytes = (sizeof(*token) < 32u) ? sizeof(*token) : 32u;\n            unsigned char buf[32];\n            memcpy(buf, token, token_bytes);\n            OS_FileSysStartVolume_Impl_log(\"entering OS_FileSysStartVolume_Impl\", (const void *)token, NULL, buf, token_bytes);\n        }\n        else\n        {\n            OS_FileSysStartVolume_Impl_log(\"entering OS_FileSysStartVolume_Impl (null token)\", NULL, NULL, NULL, 0);\n        }\n    }\n\n    /* Preserve original call - this is the expression reported as the source of const discard */\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Log result of table lookup and some local fields if available */\n    if (local != NULL)\n    {\n        /* Compose a small string with some fields to avoid dereferencing unknown parts later */\n        char local_info[256];\n        int n = snprintf(local_info, sizeof(local_info), \"fstype=%d device_name=\\\"%s\\\" volume_name=\\\"%s\\\"\",\n                         (int)local->fstype,\n                         (local->device_name != NULL) ? local->device_name : \"(null)\",\n                         (local->volume_name != NULL) ? local->volume_name : \"(null)\");\n        (void)n;\n        OS_FileSysStartVolume_Impl_log(\"after OS_OBJECT_TABLE_GET\", (const void *)token, (const void *)local, local_info, strlen(local_info));\n    }\n    else\n    {\n        OS_FileSysStartVolume_Impl_log(\"after OS_OBJECT_TABLE_GET (null local)\", (const void *)token, NULL, NULL, 0);\n    }\n\n    /*\n     * Determine basic type of filesystem, if not already known\n     */\n    if (local->fstype == OS_FILESYS_TYPE_UNKNOWN &&\n        strncmp(local->device_name, OS_POSIX_DEVICEFILE_PREFIX, sizeof(OS_POSIX_DEVICEFILE_PREFIX) - 1) == 0)\n    {\n        /*\n         * If referring to a real device in the /dev filesystem,\n         * then assume it is a normal disk.\n         */\n        local->fstype = OS_FILESYS_TYPE_NORMAL_DISK;\n        /* Log the change of type */\n        OS_FileSysStartVolume_Impl_log(\"fstype set to NORMAL_DISK\", (const void *)token, (const void *)local, NULL, 0);\n    }\n\n    /*\n     * For VOLATILE volumes, there are two options:\n     *  - The /dev/shm filesystem, if it exists\n     *  - The /tmp filesystem\n     *\n     * The /dev/shm is preferable because it should actually be a ramdisk, but\n     * it is system-specific - should exist on Linux if it is mounted.\n     * The /tmp file system might be a regular persistent disk, but should always exist\n     * on any POSIX-compliant OS.\n     */\n\n    tmpdir = NULL;\n    if (local->fstype == OS_FILESYS_TYPE_VOLATILE_DISK)\n    {\n        /* find a suitable location to keep the volatile disk */\n        for (i = 0; i <= VOLATILE_DISK_LOC_MAX; ++i)\n        {\n            switch (i)\n            {\n                case VOLATILE_DISK_LOC_DEV_SHM:\n                    /* This is most preferable because it should actually be a ramdisk */\n                    tmpdir = \"/dev/shm\";\n                    break;\n                case VOLATILE_DISK_LOC_ENV:\n                    /* try the TMPDIR environment variable, if set */\n                    tmpdir = getenv(\"TMPDIR\");\n                    break;\n                case VOLATILE_DISK_LOC_VARTMP:\n                    /* try /var/tmp directory */\n                    tmpdir = \"/var/tmp\";\n                    break;\n                case VOLATILE_DISK_LOC_TMP:\n                    /* use /tmp directory as a last resort */\n                    tmpdir = \"/tmp\";\n                    break;\n                default:\n                    tmpdir = NULL;\n                    break;\n            }\n\n            /* Log candidate tmpdir being tested */\n            if (tmpdir != NULL)\n            {\n                OS_FileSysStartVolume_Impl_log(\"testing tmpdir candidate\", (const void *)token, (const void *)local, tmpdir, strlen(tmpdir));\n            }\n\n            if (tmpdir != NULL && stat(tmpdir, &stat_buf) == 0)\n            {\n                /* check if the user has write permission to the directory */\n                if ((stat_buf.st_mode & S_IWOTH) != 0 ||\n                    ((stat_buf.st_mode & S_IWGRP) != 0 && stat_buf.st_gid == getegid()) ||\n                    ((stat_buf.st_mode & S_IWUSR) != 0 && stat_buf.st_uid == geteuid()))\n                {\n                    /* Log successful tmpdir selection */\n                    OS_FileSysStartVolume_Impl_log(\"selected tmpdir\", (const void *)token, (const void *)local, tmpdir, strlen(tmpdir));\n                    break;\n                }\n                else\n                {\n                    OS_FileSysStartVolume_Impl_log(\"tmpdir not writable\", (const void *)token, (const void *)local, tmpdir, strlen(tmpdir));\n                }\n            }\n        }\n\n        if (tmpdir == NULL)\n        {\n            /* OS provides no place to put the volume */\n            OS_DEBUG(\"No storage location for volatile volumes\");\n            OS_FileSysStartVolume_Impl_log(\"no storage location for volatile volumes\", (const void *)token, (const void *)local, NULL, 0);\n            return OS_FS_ERR_DRIVE_NOT_CREATED;\n        }\n\n        /*\n         * Note - performing the concatenation in a single snprintf() call seems\n         * to trigger a (false) pointer overlap warning, because volume_name should\n         * always be null terminated.  To get around this, calculate the\n         * string size and check that it is within the expected size, and do the\n         * append of volume_name explicitly.\n         */\n        mplen = snprintf(local->system_mountpt, sizeof(local->system_mountpt), \"%s/osal:\", tmpdir);\n        if (mplen < sizeof(local->system_mountpt))\n        {\n            vollen = OS_strnlen(local->volume_name, sizeof(local->volume_name));\n            if ((vollen + mplen) >= sizeof(local->system_mountpt))\n            {\n                vollen = sizeof(local->system_mountpt) - mplen - 1;\n            }\n            memcpy(&local->system_mountpt[mplen], local->volume_name, vollen);\n            local->system_mountpt[mplen + vollen] = 0;\n\n            /* Log final mountpoint */\n            OS_FileSysStartVolume_Impl_log(\"mounted volatile volume\", (const void *)token, (const void *)local, local->system_mountpt, strlen(local->system_mountpt));\n        }\n    }\n\n    return OS_SUCCESS;\n}\n"
}