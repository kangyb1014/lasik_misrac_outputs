{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment \"sizeCopied = -1;\" is redundant because every control path that later tests sizeCopied executes a mq_receive/mq_timedreceive call (both in a do { ... } while(...) loop) which overwrites sizeCopied before it is examined. Removing the initialization would not change program behaviour, so the executed assignment is dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGet code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1850.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGet as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGet:\n```c\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGet code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper - appends formatted messages to /tmp/logs/1850.txt */\nstatic void OS_QueueGet_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1850.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    /* Log entry and parameters */\n    OS_QueueGet_Log(\"ENTER: OS_QueueGet(queue_id=%ld, data=%p, size=%zu, size_copied=%p, timeout=%ld)\",\n                     (long)queue_id, data, size, (void *)size_copied, (long)timeout);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    OS_QueueGet_Log(\"After OS_ObjectIdGetById: return_code=%ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n        OS_QueueGet_Log(\"Resolved queue: queue_ptr=%p, queue->max_size=%zu\", (void *)queue, (size_t)queue->max_size);\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n            OS_QueueGet_Log(\"Branch: size < queue->max_size -> set *size_copied=0, return_code=%ld\", (long)return_code);\n        }\n        else\n        {\n            OS_QueueGet_Log(\"Branch: size >= queue->max_size -> calling OS_QueueGet_Impl\");\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n            OS_QueueGet_Log(\"Returned from OS_QueueGet_Impl: return_code=%ld, *size_copied=%zu\", (long)return_code, (size_t)*size_copied);\n        }\n    }\n    else\n    {\n        OS_QueueGet_Log(\"Failed to get object token for queue_id=%ld (return_code=%ld)\", (long)queue_id, (long)return_code);\n    }\n\n    OS_QueueGet_Log(\"EXIT: OS_QueueGet returning %ld, final *size_copied=%zu\", (long)return_code, (size_t)*size_copied);\n\n    return return_code;\n}\n"
}