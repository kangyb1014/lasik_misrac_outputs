{
  "user_message": "An agent A claimed that the following OS_QueueGet code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_QueueGet.\n```c\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'impl' is used only to read fields (e.g. impl->id) but is declared as a non-const pointer (OS_impl_queue_internal_record_t *impl). The fragment impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token); yields a pointer to the table element which is not modified by OS_QueueGet_Impl; therefore the pointer should be to a const-qualified type (const OS_impl_queue_internal_record_t *impl) to satisfy MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_1851_probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1851.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fclose(fp);\n}\n\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    /* Log entry and incoming parameter state */\n    os_1851_probe_log(\"OS_QueueGet ENTRY: queue_id=%ld data=%p size=%zu size_copied=%p timeout=%d\\n\",\n                      (long)queue_id, data, size, (void *)size_copied, (int)timeout);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    os_1851_probe_log(\"OS_ObjectIdGetById returned: return_code=%d token_addr=%p\\n\",\n                      (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n        os_1851_probe_log(\"OS_OBJECT_TABLE_GET returned: queue_ptr=%p\\n\", (void *)queue);\n\n        if (queue != NULL)\n        {\n            /* Log relevant fields used below so that consumers can see the table element is only read */\n            os_1851_probe_log(\"queue->max_size=%zu queue_addr=%p\\n\",\n                              (size_t)queue->max_size, (void *)queue);\n        }\n        else\n        {\n            os_1851_probe_log(\"queue is NULL after OS_OBJECT_TABLE_GET\\n\");\n        }\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n            os_1851_probe_log(\"Branch: INVALID_SIZE: provided size=%zu < queue->max_size=%zu; size_copied set to 0; return_code=%d\\n\",\n                              size, (size_t)queue->max_size, (int)return_code);\n        }\n        else\n        {\n            /* Log the call into the implementation layer (token address used there) */\n            os_1851_probe_log(\"Calling OS_QueueGet_Impl with token_addr=%p data=%p size=%zu size_copied=%p timeout=%d\\n\",\n                              (void *)&token, data, size, (void *)size_copied, (int)timeout);\n\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n\n            /* Log results from the implementation call */\n            os_1851_probe_log(\"OS_QueueGet_Impl returned: return_code=%d size_copied=%zu\\n\",\n                              (int)return_code, (size_t)*size_copied);\n        }\n    }\n\n    /* Final state before returning */\n    os_1851_probe_log(\"OS_QueueGet EXIT: return_code=%d final_size_copied=%zu\\n\",\n                      (int)return_code, (size_t)(size_copied ? *size_copied : 0));\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_QueueGet ENTRY: queue_id=3735928559 data=0x7ffc8758adb4 size=4 size_copied=0x7ffc8758adb8 timeout=0\nOS_ObjectIdGetById returned: return_code=-35 token_addr=0x7ffc8758ad70\nOS_QueueGet EXIT: return_code=-35 final_size_copied=94222890317448\nOS_QueueGet ENTRY: queue_id=0 data=0x7ffc8758adb4 size=4 size_copied=0x7ffc8758adb8 timeout=0\nOS_ObjectIdGetById returned: return_code=-35 token_addr=0x7ffc8758ad70\nOS_QueueGet EXIT: return_code=-35 final_size_copied=94222890317448\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_QueueGet the local pointer variable (queue) is only used to read fields (queue->max_size) and is neither modified nor passed to an operation that requires a modifiable pointer. According to MISRA C 2023 Rule 8.13, such a pointer should be to a const-qualified type (e.g. const OS_queue_internal_record_t *queue). Declaring it const would satisfy the rule; the runtime logs provided do not affect this static-language rule assessment."
}