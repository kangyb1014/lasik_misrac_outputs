{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is used only to read fields (e.g. impl->id) but is declared as a non-const pointer (OS_impl_queue_internal_record_t *impl). The fragment impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token); yields a pointer to the table element which is not modified by OS_QueueGet_Impl; therefore the pointer should be to a const-qualified type (const OS_impl_queue_internal_record_t *impl) to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGet code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1851.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGet as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGet:\n```c\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGet code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe helper: append diagnostic logs to /tmp/logs/1851.txt */\nstatic void os_1851_probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1851.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fclose(fp);\n}\n\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    /* Log entry and incoming parameter state */\n    os_1851_probe_log(\"OS_QueueGet ENTRY: queue_id=%ld data=%p size=%zu size_copied=%p timeout=%d\\n\",\n                      (long)queue_id, data, size, (void *)size_copied, (int)timeout);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    os_1851_probe_log(\"OS_ObjectIdGetById returned: return_code=%d token_addr=%p\\n\",\n                      (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n        os_1851_probe_log(\"OS_OBJECT_TABLE_GET returned: queue_ptr=%p\\n\", (void *)queue);\n\n        if (queue != NULL)\n        {\n            /* Log relevant fields used below so that consumers can see the table element is only read */\n            os_1851_probe_log(\"queue->max_size=%zu queue->flags=0x%08x queue_addr=%p\\n\",\n                              (size_t)queue->max_size, (unsigned int)queue->flags, (void *)queue);\n        }\n        else\n        {\n            os_1851_probe_log(\"queue is NULL after OS_OBJECT_TABLE_GET\\n\");\n        }\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n            os_1851_probe_log(\"Branch: INVALID_SIZE: provided size=%zu < queue->max_size=%zu; size_copied set to 0; return_code=%d\\n\",\n                              size, (size_t)queue->max_size, (int)return_code);\n        }\n        else\n        {\n            /* Log the call into the implementation layer (token address used there) */\n            os_1851_probe_log(\"Calling OS_QueueGet_Impl with token_addr=%p data=%p size=%zu size_copied=%p timeout=%d\\n\",\n                              (void *)&token, data, size, (void *)size_copied, (int)timeout);\n\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n\n            /* Log results from the implementation call */\n            os_1851_probe_log(\"OS_QueueGet_Impl returned: return_code=%d size_copied=%zu\\n\",\n                              (int)return_code, (size_t)*size_copied);\n        }\n    }\n\n    /* Final state before returning */\n    os_1851_probe_log(\"OS_QueueGet EXIT: return_code=%d final_size_copied=%zu\\n\",\n                      (int)return_code, (size_t)(size_copied ? *size_copied : 0));\n\n    return return_code;\n}\n"
}