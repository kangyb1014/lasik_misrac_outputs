{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is declared as a non-const pointer (OS_impl_queue_internal_record_t *impl) but is only used for read access (impl = OS_OBJECT_TABLE_GET(...); then only impl->id is read). According to MISRA C 2023 Rule 8.13, this should be declared as a pointer to a const-qualified type (const OS_impl_queue_internal_record_t *impl) because the function does not modify the pointed-to object. Thus the current declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGet code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1851.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGet as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGet:\n```c\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGet code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: appends human-readable logs to /tmp/logs/1851.txt */\nstatic void OS_QueueGet_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1851.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        fprintf(f, \"\\n\");\n        va_end(ap);\n        fclose(f);\n    }\n}\n\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Log entry and input state */\n    OS_QueueGet_Log(\"ENTER OS_QueueGet: queue_id=%lu size=%zu timeout=%ld\", (unsigned long)queue_id, size, (long)timeout);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    OS_QueueGet_Log(\"OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (queue == NULL)\n        {\n            OS_QueueGet_Log(\"OS_OBJECT_TABLE_GET returned NULL for token\");\n        }\n        else\n        {\n            /* Log the retrieved object's key readable fields (read-only observation) */\n            OS_QueueGet_Log(\"Retrieved queue ptr=%p max_size=%zu\", (void *)queue, queue->max_size);\n        }\n\n        if (queue != NULL && size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n            OS_QueueGet_Log(\"Branch: INVALID_SIZE - provided size=%zu < max_size=%zu; size_copied set to 0; return_code=%ld\",\n                             size, queue->max_size, (long)return_code);\n        }\n        else if (queue != NULL)\n        {\n            OS_QueueGet_Log(\"Branch: calling OS_QueueGet_Impl with size=%zu\", size);\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n            OS_QueueGet_Log(\"OS_QueueGet_Impl returned %ld size_copied=%zu\", (long)return_code, *size_copied);\n        }\n    }\n\n    OS_QueueGet_Log(\"EXIT OS_QueueGet: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}