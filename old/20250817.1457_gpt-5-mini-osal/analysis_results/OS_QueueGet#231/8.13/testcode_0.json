{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_QueueGet the local pointer is declared as a non-const pointer: \"OS_queue_internal_record_t *queue;\". The pointer is only used to read data (queue->max_size) and is not used to modify the pointed-to object. Therefore the pointer can and should be declared to point to a const-qualified type (const OS_queue_internal_record_t *queue) to follow MISRA C 2023 Rule 8.13. Assigning the address returned by OS_OBJECT_TABLE_GET (a non-const pointer) to a pointer-to-const is allowed, so changing the declaration is feasible and avoids the violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGet code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1851.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGet as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGet:\n```c\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGet code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Lightweight logging helper that appends formatted messages to /tmp/logs/1851.txt */\nstatic void OS_Log1851_Printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1851.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Entry log */\n    OS_Log1851_Printf(\"OS_QueueGet ENTRY: queue_id=%lu data_ptr=%p size=%zu size_copied_ptr=%p timeout=%ld\",\n                      (unsigned long)queue_id, (void *)data, size, (void *)size_copied, (long)timeout);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    OS_Log1851_Printf(\"OS_ObjectIdGetById returned %ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n        OS_Log1851_Printf(\"OS_OBJECT_TABLE_GET returned queue_ptr=%p\", (void *)queue);\n\n        /* Log the observed queue max size if queue is valid */\n        if (queue != NULL)\n        {\n            OS_Log1851_Printf(\"queue->max_size=%zu (observed)\", (size_t)queue->max_size);\n        }\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n\n            OS_Log1851_Printf(\"Buffer too small: provided_size=%zu max_size=%zu -> set size_copied=0 return=%ld\",\n                              size, (size_t)queue->max_size, (long)return_code);\n        }\n        else\n        {\n            OS_Log1851_Printf(\"Calling OS_QueueGet_Impl: token_addr=%p data_ptr=%p size=%zu\",\n                              (void *)&token, (void *)data, size);\n\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n\n            OS_Log1851_Printf(\"OS_QueueGet_Impl returned %ld size_copied=%zu\",\n                              (long)return_code, (size_t)*size_copied);\n        }\n    }\n    else\n    {\n        OS_Log1851_Printf(\"OS_ObjectIdGetById failed, returning %ld\", (long)return_code);\n    }\n\n    OS_Log1851_Printf(\"OS_QueueGet EXIT: return=%ld queue_ptr=%p\", (long)return_code, (void *)queue);\n\n    return return_code;\n}\n"
}