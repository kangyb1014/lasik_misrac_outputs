{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_OBJECT_TABLE_GET expands to &tbl[OS_ObjectIndexFromToken(&(tok))], producing an OS_queue_internal_record_t * (non-const). In OS_QueueGet this pointer is only used for read access (queue->max_size) and is never used to modify the table entry. Therefore the pointer could and should be const-qualified (const OS_queue_internal_record_t *queue). As written, the code obtains a non-const pointer when a const-qualified pointer is possible, violating MISRA C 2023 Rule 8.13. Recommendation: declare queue as const OS_queue_internal_record_t *queue (and/or provide a const-returning variant of OS_OBJECT_TABLE_GET) so the pointer points to a const-qualified type when only read access is required.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGet code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1851.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGet as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGet:\n```c\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGet code.\n",
  "test_code": "#include <stdio.h>\n\n/* Helper probe function to log control flow and state for OS_QueueGet. */\nstatic void OS_QueueGet_Log_State(const char *stage,\n                                  const OS_object_token_t *token_ptr,\n                                  const OS_queue_internal_record_t *queue_ptr,\n                                  size_t req_size,\n                                  size_t *size_copied_ptr,\n                                  int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1851.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging is not possible, do nothing to preserve original behavior. */\n        return;\n    }\n\n    fprintf(f, \"OS_QueueGet: stage=%s\\n\", stage);\n    fprintf(f, \"  token_addr=%p\\n\", (const void *)token_ptr);\n    fprintf(f, \"  queue_ptr=%p\\n\", (const void *)queue_ptr);\n    fprintf(f, \"  req_size=%zu\\n\", req_size);\n    fprintf(f, \"  size_copied_ptr=%p\\n\", (const void *)size_copied_ptr);\n    fprintf(f, \"  return_code(before)=%d\\n\", (int)return_code);\n\n    if (queue_ptr != NULL)\n    {\n        /* queue->max_size is read-only here; log its value for diagnostics. */\n        fprintf(f, \"  queue->max_size=%zu\\n\", (size_t)queue_ptr->max_size);\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    /* Log entry after parameter checks (safe to reference parameters) */\n    OS_QueueGet_Log_State(\"entry_after_checks\", NULL, NULL, size, size_copied, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    /* Log result of object lookup */\n    OS_QueueGet_Log_State(\"after_ObjectIdGetById\", &token, NULL, size, size_copied, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Log table pointer and its max_size before branch decision */\n        OS_QueueGet_Log_State(\"after_table_get\", &token, queue, size, size_copied, return_code);\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n\n            /* Log the branch taken and resulting state */\n            OS_QueueGet_Log_State(\"branch_size_too_small\", &token, queue, size, size_copied, return_code);\n        }\n        else\n        {\n            /* Log that we are about to call the implementation */\n            OS_QueueGet_Log_State(\"before_Impl_call\", &token, queue, size, size_copied, return_code);\n\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n\n            /* Log the return from the implementation */\n            OS_QueueGet_Log_State(\"after_Impl_call\", &token, queue, size, size_copied, return_code);\n        }\n    }\n\n    /* Final return state log */\n    OS_QueueGet_Log_State(\"exit\", (return_code == OS_SUCCESS) ? &token : NULL, (return_code == OS_SUCCESS) ? queue : NULL, size, size_copied, return_code);\n\n    return return_code;\n}\n"
}