{
  "user_message": "An agent A claimed that the following OS_QueueGet code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_QueueGet.\n```c\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In OS_QueueGet the local pointer is declared as a non-const pointer: \"OS_queue_internal_record_t *queue;\". The pointer is only used to read data (queue->max_size) and is not used to modify the pointed-to object. Therefore the pointer can and should be declared to point to a const-qualified type (const OS_queue_internal_record_t *queue) to follow MISRA C 2023 Rule 8.13. Assigning the address returned by OS_OBJECT_TABLE_GET (a non-const pointer) to a pointer-to-const is allowed, so changing the declaration is feasible and avoids the violation.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_Log1851_Printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1851.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_QueueGet(osal_id_t queue_id, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Entry log */\n    OS_Log1851_Printf(\"OS_QueueGet ENTRY: queue_id=%lu data_ptr=%p size=%zu size_copied_ptr=%p timeout=%ld\",\n                      (unsigned long)queue_id, (void *)data, size, (void *)size_copied, (long)timeout);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_POINTER(size_copied);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    OS_Log1851_Printf(\"OS_ObjectIdGetById returned %ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n        OS_Log1851_Printf(\"OS_OBJECT_TABLE_GET returned queue_ptr=%p\", (void *)queue);\n\n        /* Log the observed queue max size if queue is valid */\n        if (queue != NULL)\n        {\n            OS_Log1851_Printf(\"queue->max_size=%zu (observed)\", (size_t)queue->max_size);\n        }\n\n        if (size < queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is potentially too small\n            */\n            *size_copied = 0;\n            return_code  = OS_QUEUE_INVALID_SIZE;\n\n            OS_Log1851_Printf(\"Buffer too small: provided_size=%zu max_size=%zu -> set size_copied=0 return=%ld\",\n                              size, (size_t)queue->max_size, (long)return_code);\n        }\n        else\n        {\n            OS_Log1851_Printf(\"Calling OS_QueueGet_Impl: token_addr=%p data_ptr=%p size=%zu\",\n                              (void *)&token, (void *)data, size);\n\n            return_code = OS_QueueGet_Impl(&token, data, size, size_copied, timeout);\n\n            OS_Log1851_Printf(\"OS_QueueGet_Impl returned %ld size_copied=%zu\",\n                              (long)return_code, (size_t)*size_copied);\n        }\n    }\n    else\n    {\n        OS_Log1851_Printf(\"OS_ObjectIdGetById failed, returning %ld\", (long)return_code);\n    }\n\n    OS_Log1851_Printf(\"OS_QueueGet EXIT: return=%ld queue_ptr=%p\", (long)return_code, (void *)queue);\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_QueueGet ENTRY: queue_id=3735928559 data_ptr=0x7ffe11671e84 size=4 size_copied_ptr=0x7ffe11671e88 timeout=0\nOS_ObjectIdGetById returned -35, token_addr=0x7ffe11671e40\nOS_ObjectIdGetById failed, returning -35\nOS_QueueGet EXIT: return=-35 queue_ptr=0x55a2153832d0\nOS_QueueGet ENTRY: queue_id=0 data_ptr=0x7ffe11671e84 size=4 size_copied_ptr=0x7ffe11671e88 timeout=0\nOS_ObjectIdGetById returned -35, token_addr=0x7ffe11671e40\nOS_ObjectIdGetById failed, returning -35\nOS_QueueGet EXIT: return=-35 queue_ptr=0x55a215373328\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the shown function the local variable \"queue\" is declared as OS_queue_internal_record_t *queue but is only used for read-only access (queue->max_size and logging). Under MISRA C:2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so the declaration can and should be changed to const OS_queue_internal_record_t *queue. Converting the non-const pointer returned by OS_OBJECT_TABLE_GET to a pointer-to-const is allowed in C (T * -> const T *), so the change is feasible and would resolve the Rule 8.13 concern. (The test output does show that \"queue\" may be uninitialised when OS_ObjectIdGetById fails, which is a separate issue, but it does not invalidate the conclusion about the const qualification.)"
}