{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'ref' is declared as void * but is only read and immediately cast to const char * for strcmp; it should be declared to point to a const-qualified type (e.g. const void *ref or const char *ref). Because the function does not modify the data pointed to by ref, the current declaration violates MISRA C 2023 Rule 8.13. (Note: fixing this may require updating the OS_ObjectMatchFunc_t typedef and callers to use a const-qualified pointer.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdAllocateNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1531.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdAllocateNew:\n```c\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdAllocateNew code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n    FILE *logf = NULL;\n\n    /* Helper: open log file (append) and write a header for this invocation. */\n    logf = fopen(\"/tmp/logs/1531.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"\\n--- OS_ObjectIdAllocateNew entry ---\\n\");\n        fprintf(logf, \"idtype=%p, name_ptr=%p, name=%s, token_ptr=%p\\n\",\n                (void *) (uintptr_t) idtype, (void *) name, (name != NULL) ? name : \"<NULL>\", (void *) token);\n        fclose(logf);\n    }\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        /* Log the shutdown branch */\n        logf = fopen(\"/tmp/logs/1531.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Early return: OS_SHUTDOWN_MAGIC_NUMBER detected. Returning %d\\n\", (int)OS_ERR_INCORRECT_OBJ_STATE);\n            fclose(logf);\n        }\n\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n\n    /* Log the result of TransactionInit */\n    logf = fopen(\"/tmp/logs/1531.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"After OS_ObjectIdTransactionInit: return_code=%d\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        /* Log that we are about to cast the const char * to void * and call the matcher */\n        logf = fopen(\"/tmp/logs/1531.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Calling OS_ObjectIdFindNextMatch with OS_ObjectNameMatch, ref=(void*)name -> ref_ptr=%p, name=\\\"%s\\\"\\n\",\n                    (void *) name, name);\n            fprintf(logf, \"Note: original parameter 'name' is const char *, cast to (void *) for the matcher.\\n\");\n            fclose(logf);\n        }\n\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n\n        /* Log the result of FindNextMatch */\n        logf = fopen(\"/tmp/logs/1531.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After OS_ObjectIdFindNextMatch: return_code=%d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n\n        logf = fopen(\"/tmp/logs/1531.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Name is NULL, setting return_code=OS_ERR_NAME_NOT_FOUND (%d)\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n\n        logf = fopen(\"/tmp/logs/1531.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Name match found; setting return_code=OS_ERR_NAME_TAKEN (%d)\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n\n        logf = fopen(\"/tmp/logs/1531.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Name not found; called OS_ObjectIdFindNextFree, return_code=%d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log the failure before cancelling */\n        logf = fopen(\"/tmp/logs/1531.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Allocation failed before finalization, return_code=%d. Calling OS_ObjectIdTransactionCancel.\\n\", (int)return_code);\n            if (token != NULL)\n            {\n                fprintf(logf, \"Token obj_id (pre-cancel) = %ld\\n\", (long) token->obj_id);\n            }\n            fclose(logf);\n        }\n\n        OS_ObjectIdTransactionCancel(token);\n\n        /* Log after cancel */\n        logf = fopen(\"/tmp/logs/1531.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Transaction cancelled. Returning return_code=%d\\n\", (int)return_code);\n            fclose(logf);\n        }\n\n        return return_code;\n    }\n    else\n    {\n        /* Log successful allocation event notification attempt */\n        logf = fopen(\"/tmp/logs/1531.txt\", \"a\");\n        if (logf != NULL)\n        {\n            if (token != NULL)\n            {\n                fprintf(logf, \"Allocation succeeded. Calling OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, obj_id=%ld)\\n\", (long) token->obj_id);\n            }\n            else\n            {\n                fprintf(logf, \"Allocation succeeded. Calling OS_NotifyEvent with NULL token.\\n\");\n            }\n            fclose(logf);\n        }\n\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n\n        /* Log result of notify */\n        logf = fopen(\"/tmp/logs/1531.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After OS_NotifyEvent: return_code=%d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n\n        logf = fopen(\"/tmp/logs/1531.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After OS_ObjectIdConvertToken: return_code=%d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log finalization call with the failing return_code */\n        logf = fopen(\"/tmp/logs/1531.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Finalizing new object (failure path). Calling OS_ObjectIdFinalizeNew(return_code=%d)\\n\", (int)return_code);\n            fclose(logf);\n        }\n\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n\n        logf = fopen(\"/tmp/logs/1531.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"After OS_ObjectIdFinalizeNew: return_code=%d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    /* Log the final return value */\n    logf = fopen(\"/tmp/logs/1531.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"Exiting OS_ObjectIdAllocateNew with return_code=%d\\n\", (int)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}