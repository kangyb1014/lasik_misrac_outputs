{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nYes. OS_ObjectIdFindNextMatch takes a non-const void *arg and forwards it to a MatchFunc whose first parameter is also a non-const void *. In practice the match function OS_ObjectNameMatch treats the argument as a const char * (it calls strcmp((const char *)ref, ...)) and the caller casts a const char *name to (void *) when calling OS_ObjectIdFindNextMatch. This casts away const and uses non-const pointer types for input-only data, which violates MISRA C 2023 Rule 8.13. A fix is to change the signatures to use const void *arg (and the MatchFunc typedef/parameter to const void *), removing the need to cast away const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdAllocateNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1531.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdAllocateNew:\n```c\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdAllocateNew code.\n",
  "test_code": "/* Probe logging helper functions inserted to capture control flow and state for the violation scenario. */\nstatic void OS_Probe_LogState(const char *stage, int32 rc, const char *name, OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/1531.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log stage, return code, name pointer, and name string if available. */\n        fprintf(f, \"Stage=%s, rc=%ld, name_ptr=%p\", stage, (long)rc, (const void *)name);\n        if (name != NULL)\n        {\n            /* Print the name string - this mirrors how the name is treated by callers. */\n            fprintf(f, \", name_str=\\\"%s\\\"\", name);\n        }\n\n        /* Log token pointer and obj_id when available. */\n        if (token != NULL)\n        {\n            fprintf(f, \", token_ptr=%p\", (void *)token);\n            /* token->obj_id is accessed in the original function; print it if present. */\n            fprintf(f, \", obj_id=%lu\", (unsigned long)token->obj_id);\n        }\n\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Log entry into the function with initial parameters */\n    OS_Probe_LogState(\"entry\", 0, name, token);\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        OS_Probe_LogState(\"shutdown_check_failed\", OS_ERR_INCORRECT_OBJ_STATE, name, token);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    OS_Probe_LogState(\"after_transaction_init\", return_code, name, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        /* Log the intent to check name match. The original code casts name to (void *).\n         * We log the const name pointer without casting away const. */\n        OS_Probe_LogState(\"before_find_next_match\", 0, name, token);\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n        OS_Probe_LogState(\"after_find_next_match\", return_code, name, token);\n    }\n    else\n    {\n        OS_Probe_LogState(\"name_null\", OS_ERR_NAME_NOT_FOUND, name, token);\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_Probe_LogState(\"name_taken_detected\", OS_ERR_NAME_TAKEN, name, token);\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        OS_Probe_LogState(\"finding_next_free\", 0, name, token);\n        return_code = OS_ObjectIdFindNextFree(token);\n        OS_Probe_LogState(\"after_find_next_free\", return_code, name, token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_Probe_LogState(\"allocation_failed_before_notify\", return_code, name, token);\n        OS_ObjectIdTransactionCancel(token);\n        OS_Probe_LogState(\"transaction_cancelled\", return_code, name, token);\n        return return_code;\n    }\n    else\n    {\n        OS_Probe_LogState(\"before_notify\", 0, name, token);\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n        OS_Probe_LogState(\"after_notify\", return_code, name, token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_Probe_LogState(\"before_convert_token\", 0, name, token);\n        return_code = OS_ObjectIdConvertToken(token);\n        OS_Probe_LogState(\"after_convert_token\", return_code, name, token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_Probe_LogState(\"finalize_new_due_to_error\", return_code, name, token);\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n        OS_Probe_LogState(\"after_finalize_new\", return_code, name, token);\n    }\n\n    OS_Probe_LogState(\"exit\", return_code, name, token);\n    return return_code;\n}\n"
}