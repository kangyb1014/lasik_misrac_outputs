{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the caller-provided pointer 'name' (cast to void*) into OS_ObjectIdFindNextMatch which invokes the match callback OS_ObjectNameMatch. If OS_ObjectNameMatch uses any <string.h> routines (e.g. strlen(), strcmp(), strcpy(), strncpy(), strcat(), etc.) on that pointer without first ensuring it is a valid, null-terminated buffer contained within its accessible bounds, those functions can read beyond the end of the object. For example, if the caller supplies a non-terminated or truncated name buffer and OS_ObjectNameMatch calls strlen((const char *)arg) or strcmp((const char *)arg, record->name), strlen/strcmp will scan past the buffer and access out-of-bounds memory.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdAllocateNew code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1535.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdAllocateNew as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdAllocateNew:\n```c\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        return_code = OS_ObjectIdFindNextFree(token);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdAllocateNew code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging helper - appends structured logs to /tmp/logs/1535.txt */\nstatic void OS_ObjectIdAllocateNew_Log(const char *stage, const char *name, const void *token_ptr, long obj_id, long return_code, unsigned long idtype)\n{\n    FILE *f = fopen(\"/tmp/logs/1535.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log basic control point and state without dereferencing caller-provided name buffer. */\n    fprintf(f, \"STAGE=%s\\n\", stage);\n    fprintf(f, \"  name_ptr=%p\\n\", (const void *)name);\n    fprintf(f, \"  name_is_null=%s\\n\", (name == NULL) ? \"true\" : \"false\");\n    fprintf(f, \"  idtype=%lu\\n\", idtype);\n    fprintf(f, \"  token_ptr=%p\\n\", token_ptr);\n    fprintf(f, \"  token_obj_id=%ld\\n\", obj_id);\n    fprintf(f, \"  return_code=%ld\\n\", return_code);\n    fprintf(f, \"----\\n\");\n\n    fclose(f);\n}\n\nint32 OS_ObjectIdAllocateNew(osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Log entry */\n    OS_ObjectIdAllocateNew_Log(\"ENTRY\", name, (const void *)token, (token ? (long)token->obj_id : -1), -1, (unsigned long)idtype);\n\n    /*\n     * No new objects can be created after Shutdown request\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_SHUTDOWN_MAGIC_NUMBER)\n    {\n        OS_ObjectIdAllocateNew_Log(\"ABORT_SHUTDOWN\", name, (const void *)token, (token ? (long)token->obj_id : -1), (long)OS_ERR_INCORRECT_OBJ_STATE, (unsigned long)idtype);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_EXCLUSIVE, idtype, token);\n    OS_ObjectIdAllocateNew_Log(\"AFTER_TransactionInit\", name, (const void *)token, (token ? (long)token->obj_id : -1), (long)return_code, (unsigned long)idtype);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Check if an object of the same name already exists.\n     * If so, a new object cannot be allocated.\n     */\n    if (name != NULL)\n    {\n        /* Log the fact that the caller-provided name pointer will be passed into the matcher. */\n        OS_ObjectIdAllocateNew_Log(\"BEFORE_FindNextMatch\", name, (const void *)token, (token ? (long)token->obj_id : -1), -1, (unsigned long)idtype);\n\n        return_code = OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token);\n\n        OS_ObjectIdAllocateNew_Log(\"AFTER_FindNextMatch\", name, (const void *)token, (token ? (long)token->obj_id : -1), (long)return_code, (unsigned long)idtype);\n    }\n    else\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n        OS_ObjectIdAllocateNew_Log(\"NAME_NULL\", name, (const void *)token, (token ? (long)token->obj_id : -1), (long)return_code, (unsigned long)idtype);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdAllocateNew_Log(\"NAME_TAKEN_PATH\", name, (const void *)token, (token ? (long)token->obj_id : -1), (long)OS_ERR_NAME_TAKEN, (unsigned long)idtype);\n        return_code = OS_ERR_NAME_TAKEN;\n    }\n    else\n    {\n        OS_ObjectIdAllocateNew_Log(\"FIND_NEXT_FREE_START\", name, (const void *)token, (token ? (long)token->obj_id : -1), -1, (unsigned long)idtype);\n        return_code = OS_ObjectIdFindNextFree(token);\n        OS_ObjectIdAllocateNew_Log(\"FIND_NEXT_FREE_DONE\", name, (const void *)token, (token ? (long)token->obj_id : -1), (long)return_code, (unsigned long)idtype);\n    }\n\n    /* If allocation failed, abort the operation now - no ID was allocated.\n     * After this point, if a future step fails, the allocated ID must be\n     * released. */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdAllocateNew_Log(\"ALLOC_FAIL_CANCEL\", name, (const void *)token, (token ? (long)token->obj_id : -1), (long)return_code, (unsigned long)idtype);\n        OS_ObjectIdTransactionCancel(token);\n        return return_code;\n    }\n    else\n    {\n        OS_ObjectIdAllocateNew_Log(\"BEFORE_NOTIFY\", name, (const void *)token, (token ? (long)token->obj_id : -1), -1, (unsigned long)idtype);\n        return_code = OS_NotifyEvent(OS_EVENT_RESOURCE_ALLOCATED, token->obj_id, NULL);\n        OS_ObjectIdAllocateNew_Log(\"AFTER_NOTIFY\", name, (const void *)token, (token ? (long)token->obj_id : -1), (long)return_code, (unsigned long)idtype);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_ObjectIdConvertToken(token);\n        OS_ObjectIdAllocateNew_Log(\"AFTER_ConvertToken\", name, (const void *)token, (token ? (long)token->obj_id : -1), (long)return_code, (unsigned long)idtype);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdAllocateNew_Log(\"FINALIZE_ON_ERROR\", name, (const void *)token, (token ? (long)token->obj_id : -1), (long)return_code, (unsigned long)idtype);\n        return_code = OS_ObjectIdFinalizeNew(return_code, token, NULL);\n    }\n\n    OS_ObjectIdAllocateNew_Log(\"RETURN\", name, (const void *)token, (token ? (long)token->obj_id : -1), (long)return_code, (unsigned long)idtype);\n\n    return return_code;\n}\n"
}