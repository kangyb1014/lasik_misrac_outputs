{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Static:\n```c\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            break;\n        }\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_ModuleLoad_Static:\ntypedef const struct\n{\n    const char *Name;\n    void (*Address)(void);\n    const char *Module;\n} OS_static_symbol_record_t\n...\n#define OS_STATIC_SYMTABLE_SOURCE OS_STATIC_SYMBOL_TABLE\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "void (*Address)(void);",
    "OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;",
    "typedef const struct\n{\n    const char *Name;\n    void (*Address)(void);\n    const char *Module;\n} OS_static_symbol_record_t",
    "if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)",
    "if (StaticSym->Name == NULL)"
  ],
  "explanation": "Fragments not listed above do not need investigation for MISRA C:2023 Rule 8.13 because they do not introduce non-const pointers to data. The function parameter ModuleName is already declared as const char * (so the pointer points to a const-qualified type). The local integer return_code and numeric comparisons are not pointer declarations and are irrelevant to pointer const-qualification. The pointer arithmetic (++StaticSym) modifies the pointer value, not the pointee qualification \u2014 whether incrementing the pointer is used is orthogonal to whether the pointee type is const-qualified and therefore need not be investigated here. The call to strcmp uses const-qualified char * parameters, which is compliant with the rule. The macro assignment from OS_STATIC_SYMTABLE_SOURCE is flagged (see first fragment) so its definition should be inspected by others; other macro usages in the function that only reference values or perform comparisons do not affect the const-qualification of pointer targets and thus do not require separate investigation."
}