{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Static:\n```c\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            break;\n        }\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_ModuleLoad_Static:\ntypedef const struct\n{\n    const char *Name;\n    void (*Address)(void);\n    const char *Module;\n} OS_static_symbol_record_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "while (StaticSym != NULL)",
    "++StaticSym;",
    "OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;",
    "if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)",
    "int32 OS_ModuleLoad_Static(const char *ModuleName)",
    "if (StaticSym->Name == NULL)"
  ],
  "explanation": "Only the listed fragments are relevant to MISRA C 2023 Rule 21.17 because they directly affect arguments passed to the string function call (strcmp) or the iteration that leads to that call. The code contains a single use of a <string.h> function (strcmp); no other string.h functions are used and therefore do not need investigation. StaticSym->Module is explicitly checked for NULL before strcmp, so that specific pointer NULL dereference is guarded; however, ModuleName (the function parameter) is not checked and may be NULL or point to non-terminated memory, so the function signature and the strcmp call must be examined. The loop control (initialization of StaticSym, the while condition, the Name==NULL sentinel check, and the ++StaticSym increment) are included because if the static symbol table is not correctly terminated or the source pointer is invalid, the loop may advance to records with invalid Module pointers and cause strcmp to access out-of-bounds memory. Other lines in the function do not call string-handling routines nor influence the pointers passed to strcmp, so they do not need to be investigated for Rule 21.17."
}