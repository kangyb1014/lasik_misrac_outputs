{
  "user_message": "An agent A claimed that the following OS_ModuleLoad_Static code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_ModuleLoad_Static.\n```c\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            break;\n        }\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function calls strcmp(StaticSym->Module, ModuleName) without validating ModuleName. If ModuleName is NULL (or otherwise not a valid, NUL-terminated object), strcmp will dereference an invalid pointer / read beyond the bounds of the referenced object, causing undefined behavior. No check for ModuleName != NULL or for a valid NUL-terminated string is performed, so this violates MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_module_load_log(const char *stage,\n                               const void *sym_ptr,\n                               const char *name_ptr,\n                               const char *module_ptr,\n                               const char *ModuleName_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/1695.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Only log pointer values and null-ness to avoid dereferencing invalid pointers here. */\n    fprintf(f,\n            \"[OS_ModuleLoad_Static] %s: sym=%p, Name_ptr=%p, Module_ptr=%p, ModuleName_ptr=%p, Name_is_null=%s, Module_is_null=%s, ModuleName_is_null=%s\\n\",\n            stage,\n            sym_ptr,\n            (const void *)name_ptr,\n            (const void *)module_ptr,\n            (const void *)ModuleName_ptr,\n            (name_ptr == NULL) ? \"true\" : \"false\",\n            (module_ptr == NULL) ? \"true\" : \"false\",\n            (ModuleName_ptr == NULL) ? \"true\" : \"false\");\n\n    fclose(f);\n}\n\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    /* Entry log */\n    os_module_load_log(\"entry\", (const void *)StaticSym,\n                       (StaticSym != NULL) ? StaticSym->Name : NULL,\n                       (StaticSym != NULL) ? StaticSym->Module : NULL,\n                       ModuleName);\n\n    while (StaticSym != NULL)\n    {\n        /* Log at top of each iteration */\n        os_module_load_log(\"iter_top\", (const void *)StaticSym,\n                           StaticSym->Name,\n                           StaticSym->Module,\n                           ModuleName);\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            os_module_load_log(\"end_of_list\", (const void *)StaticSym,\n                               StaticSym->Name,\n                               StaticSym->Module,\n                               ModuleName);\n            break;\n        }\n\n        if (StaticSym->Module != NULL)\n        {\n            /* Log just before calling strcmp to capture pointer state that can cause the violation. */\n            os_module_load_log(\"before_strcmp\", (const void *)StaticSym,\n                               StaticSym->Name,\n                               StaticSym->Module,\n                               ModuleName);\n\n            /* Original logic preserved: this call will exhibit undefined behavior if ModuleName is invalid (e.g., NULL). */\n            if (strcmp(StaticSym->Module, ModuleName) == 0)\n            {\n                /* found matching module name */\n                os_module_load_log(\"matched\", (const void *)StaticSym,\n                                   StaticSym->Name,\n                                   StaticSym->Module,\n                                   ModuleName);\n                return_code = OS_SUCCESS;\n                break;\n            }\n            else\n            {\n                os_module_load_log(\"no_match\", (const void *)StaticSym,\n                                   StaticSym->Name,\n                                   StaticSym->Module,\n                                   ModuleName);\n            }\n        }\n\n        ++StaticSym;\n    }\n\n    /* Exit log: StaticSym may be NULL or point to the element where we stopped. */\n    os_module_load_log(\"exit\", (const void *)StaticSym,\n                       (StaticSym != NULL) ? StaticSym->Name : NULL,\n                       (StaticSym != NULL) ? StaticSym->Module : NULL,\n                       ModuleName);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_ModuleLoad_Static. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 21.17 requires that uses of string.h functions must not result in accesses beyond the bounds of the objects referenced by their pointer parameters. In the code only StaticSym->Module is checked for NULL before calling strcmp, but ModuleName (the other strcmp parameter) is not validated. If ModuleName is NULL (or not a valid NUL-terminated array) the call strcmp(StaticSym->Module, ModuleName) will dereference/read through an invalid pointer and therefore can access out-of-bounds memory \u2014 this is undefined behavior and violates Rule 21.17. To remove the violation either ensure by contract that ModuleName cannot be NULL (and document/enforce that) or add a runtime check (e.g. verify ModuleName != NULL and that it points to a valid NUL-terminated string) before calling strcmp."
}