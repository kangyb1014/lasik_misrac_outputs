{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\ntypedef int32_t int32;\nstruct OS_static_symbol_record\n{\n    const char *Name;\n    const char *Module;\n};\ntypedef struct OS_static_symbol_record\n{\n    const char *Name;\n    const char *Module;\n} OS_static_symbol_record_t;\nextern OS_static_symbol_record_t *OS_STATIC_SYMTABLE_SOURCE;\nstatic void probe_log_state(const char *stage, const OS_static_symbol_record_t *sym, const char *ModuleName,\n                            int name_is_null, int module_is_null, int cmp_valid, int cmp_value)\n{\n    FILE *f = fopen(\"/tmp/logs/1695.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Print stage, addresses, null flags and optional strcmp result. */\n    fprintf(f, \"stage=%s sym=%p Name_ptr=%p Module_ptr=%p ModuleName_ptr=%p name_is_null=%d module_is_null=%d\",\n            stage,\n            (void *)sym,\n            (void *)(sym ? (void *)sym->Name : NULL),\n            (void *)(sym ? (void *)sym->Module : NULL),\n            (void *)ModuleName,\n            name_is_null,\n            module_is_null);\n\n    if (cmp_valid)\n    {\n        fprintf(f, \" cmp=%d\", cmp_value);\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = (int32) -1; /* OS_ERR_NAME_NOT_FOUND */\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    /* Log entry into function with ModuleName pointer */\n    probe_log_state(\"enter\", StaticSym, ModuleName, 0, 0, 0, 0);\n\n    while (StaticSym != NULL)\n    {\n        /* Log the state at start of iteration. Do not dereference ModuleName. */\n        probe_log_state(\"iter_start\", StaticSym, ModuleName,\n                        (StaticSym->Name == NULL) ? 1 : 0,\n                        (StaticSym->Module == NULL) ? 1 : 0,\n                        0, 0);\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            probe_log_state(\"end_of_list\", StaticSym, ModuleName, 1,\n                            (StaticSym->Module == NULL) ? 1 : 0, 0, 0);\n            break;\n        }\n\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* Log that we performed strcmp and observed equality */\n            /* We call strcmp exactly as in the original logic to preserve behavior. */\n            /* To capture the actual strcmp result we re-evaluate and log the value. */\n            int cmp = strcmp(StaticSym->Module, ModuleName);\n            probe_log_state(\"strcmp_after_call\", StaticSym, ModuleName, 0, 0, 1, cmp);\n\n            if (cmp == 0)\n            {\n                /* found matching module name */\n                return_code = 0; /* OS_SUCCESS */\n                probe_log_state(\"found\", StaticSym, ModuleName, 0, 0, 1, cmp);\n                break;\n            }\n        }\n\n        ++StaticSym;\n    }\n\n    probe_log_state(\"exit\", StaticSym, ModuleName, 0, 0, 0, 0);\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp8h51315p/src/src/os/shared/src/osapi-module.c:141:16: error: redefinition of 'struct OS_static_symbol_record'\n  141 | typedef struct OS_static_symbol_record\n      |                ^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8h51315p/src/src/os/shared/src/osapi-module.c:136:8: note: originally defined here\n  136 | struct OS_static_symbol_record\n      |        ^~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8h51315p/src/src/os/shared/src/osapi-module.c:145:3: error: conflicting type qualifiers for 'OS_static_symbol_record_t'\n  145 | } OS_static_symbol_record_t;\n      |   ^~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmp8h51315p/src/src/os/shared/inc/os-shared-module.h:29,\n                 from /tmp/tmp8h51315p/src/src/os/shared/src/osapi-module.c:47:\n/tmp/tmp8h51315p/src/src/os/inc/osapi-module.h:118:3: note: previous declaration of 'OS_static_symbol_record_t' with type 'OS_static_symbol_record_t'\n  118 | } OS_static_symbol_record_t;\n      |   ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8h51315p/src/src/os/shared/src/osapi-module.c:82:35: error: conflicting types for 'OS_STATIC_SYMBOL_TABLE'; have 'OS_static_symbol_record_t *' {aka 'struct OS_static_symbol_record *'}\n   82 | #define OS_STATIC_SYMTABLE_SOURCE OS_STATIC_SYMBOL_TABLE\n      |                                   ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8h51315p/src/src/os/shared/src/osapi-module.c:146:35: note: in expansion of macro 'OS_STATIC_SYMTABLE_SOURCE'\n  146 | extern OS_static_symbol_record_t *OS_STATIC_SYMTABLE_SOURCE;\n      |                                   ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8h51315p/src/src/os/shared/src/osapi-module.c:82:35: note: previous declaration of 'OS_STATIC_SYMBOL_TABLE' with type 'const OS_static_symbol_record_t[]'\n   82 | #define OS_STATIC_SYMTABLE_SOURCE OS_STATIC_SYMBOL_TABLE\n      |                                   ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8h51315p/src/src/os/shared/src/osapi-module.c:87:34: note: in expansion of macro 'OS_STATIC_SYMTABLE_SOURCE'\n   87 | extern OS_static_symbol_record_t OS_STATIC_SYMTABLE_SOURCE[];\n      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:230: CMakeFiles/osal.dir/src/os/shared/src/osapi-module.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_ModuleLoad_Static as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <string.h>\n\n/* The real project headers already define OS_static_symbol_record_t and OS_STATIC_SYMTABLE_SOURCE\n * so do not redefine the struct/typedef or the symbol here to avoid conflicts. Instead declare the\n * external symbol as provided by the project's headers (an array of records).\n */\nextern OS_static_symbol_record_t OS_STATIC_SYMTABLE_SOURCE[];\n\nstatic void probe_log_state(const char *stage, const OS_static_symbol_record_t *sym, const char *ModuleName,\n                            int name_is_null, int module_is_null, int cmp_valid, int cmp_value)\n{\n    FILE *f = fopen(\"/tmp/logs/1695.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Print stage, addresses, null flags and optional strcmp result. */\n    fprintf(f, \"stage=%s sym=%p Name_ptr=%p Module_ptr=%p ModuleName_ptr=%p name_is_null=%d module_is_null=%d\",\n            stage,\n            (void *)sym,\n            (void *)(sym ? (void *)sym->Name : NULL),\n            (void *)(sym ? (void *)sym->Module : NULL),\n            (void *)ModuleName,\n            name_is_null,\n            module_is_null);\n\n    if (cmp_valid)\n    {\n        fprintf(f, \" cmp=%d\", cmp_value);\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = (int32) -1; /* OS_ERR_NAME_NOT_FOUND */\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    /* Log entry into function with ModuleName pointer */\n    probe_log_state(\"enter\", StaticSym, ModuleName, 0, 0, 0, 0);\n\n    while (StaticSym != NULL)\n    {\n        /* Log the state at start of iteration. Do not dereference ModuleName. */\n        probe_log_state(\"iter_start\", StaticSym, ModuleName,\n                        (StaticSym->Name == NULL) ? 1 : 0,\n                        (StaticSym->Module == NULL) ? 1 : 0,\n                        0, 0);\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            probe_log_state(\"end_of_list\", StaticSym, ModuleName, 1,\n                            (StaticSym->Module == NULL) ? 1 : 0, 0, 0);\n            break;\n        }\n\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* Log that we performed strcmp and observed equality */\n            /* We call strcmp exactly as in the original logic to preserve behavior. */\n            /* To capture the actual strcmp result we re-evaluate and log the value. */\n            int cmp = strcmp(StaticSym->Module, ModuleName);\n            probe_log_state(\"strcmp_after_call\", StaticSym, ModuleName, 0, 0, 1, cmp);\n\n            if (cmp == 0)\n            {\n                /* found matching module name */\n                return_code = 0; /* OS_SUCCESS */\n                probe_log_state(\"found\", StaticSym, ModuleName, 0, 0, 1, cmp);\n                break;\n            }\n        }\n\n        ++StaticSym;\n    }\n\n    probe_log_state(\"exit\", StaticSym, ModuleName, 0, 0, 0, 0);\n    return return_code;\n}\n",
  "explanation": "Removed the duplicate struct/typedef and the conflicting extern pointer declaration that caused redefinition errors. Instead the code now declares the external symbol as provided by the project's headers: extern OS_static_symbol_record_t OS_STATIC_SYMTABLE_SOURCE[]; This preserves the original logic of OS_ModuleLoad_Static and probe_log_state while avoiding conflicts with prior declarations in included headers."
}