{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe loop condition only tests the record pointer for NULL (while (StaticSym != NULL)) while the table is advanced with ++StaticSym and termination relies on an internal sentinel (StaticSym->Name == NULL). If the static table is incorrectly formed (no terminating entry with Name == NULL) the loop can walk past the array bounds; subsequent code may find a non-NULL Module pointer (garbage) and call strcmp(StaticSym->Module, ModuleName), causing strcmp to read memory beyond the bounds of the referenced object. This would violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1695.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad_Static as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Static:\n```c\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            break;\n        }\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad_Static code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper to log control flow and key pointer/state information.\n * Appends to /tmp/logs/1695.txt so agents can reproduce the scenario.\n * Keeps behavior unchanged; only emits logs. */\nstatic void OS_ModuleLoad_Probe(const char *tag, void *sym_ptr, const char *name_ptr, const char *module_ptr, const char *ModuleName, int32_t iter)\n{\n    FILE *f = fopen(\"/tmp/logs/1695.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_ModuleLoad_Static] %s: iter=%ld, sym=%p\", tag, (long)iter, sym_ptr);\n    if (sym_ptr != NULL)\n    {\n        fprintf(f, \", Name_ptr=%p, Module_ptr=%p\", (void *)name_ptr, (void *)module_ptr);\n    }\n    if (ModuleName != NULL)\n    {\n        fprintf(f, \", ModuleName_ptr=%p\", (void *)ModuleName);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Original function with probes inserted. Preserves original logic. */\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n    int32_t                    iteration = 0;\n\n    /* Log entry state */\n    OS_ModuleLoad_Probe(\"entry\", (void *)StaticSym, NULL, NULL, ModuleName, iteration);\n\n    while (StaticSym != NULL)\n    {\n        /* Log start of iteration and pointers read from the record */\n        OS_ModuleLoad_Probe(\"loop_start\", (void *)StaticSym, StaticSym->Name, StaticSym->Module, ModuleName, iteration);\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            OS_ModuleLoad_Probe(\"name_null_break\", (void *)StaticSym, StaticSym->Name, StaticSym->Module, ModuleName, iteration);\n            break;\n        }\n\n        if (StaticSym->Module != NULL)\n        {\n            /* Log just before strcmp to capture pointer values and attempt info for reproduction */\n            OS_ModuleLoad_Probe(\"before_strcmp\", (void *)StaticSym, StaticSym->Name, StaticSym->Module, ModuleName, iteration);\n\n            if (strcmp(StaticSym->Module, ModuleName) == 0)\n            {\n                /* found matching module name */\n                OS_ModuleLoad_Probe(\"match_found\", (void *)StaticSym, StaticSym->Name, StaticSym->Module, ModuleName, iteration);\n                return_code = OS_SUCCESS;\n                break;\n            }\n            else\n            {\n                /* Log result of strcmp mismatch */\n                OS_ModuleLoad_Probe(\"strcmp_mismatch\", (void *)StaticSym, StaticSym->Name, StaticSym->Module, ModuleName, iteration);\n            }\n        }\n\n        ++StaticSym;\n        iteration++;\n\n        /* Log after advancing the pointer */\n        OS_ModuleLoad_Probe(\"after_increment\", (void *)StaticSym, (StaticSym != NULL) ? StaticSym->Name : NULL, (StaticSym != NULL) ? StaticSym->Module : NULL, ModuleName, iteration);\n    }\n\n    OS_ModuleLoad_Probe(\"exit\", (void *)StaticSym, (StaticSym != NULL) ? StaticSym->Name : NULL, (StaticSym != NULL) ? StaticSym->Module : NULL, ModuleName, iteration);\n\n    return return_code;\n}\n"
}