{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe function calls strcmp(StaticSym->Module, ModuleName) without validating ModuleName. If ModuleName is NULL (or otherwise not a valid, NUL-terminated object), strcmp will dereference an invalid pointer / read beyond the bounds of the referenced object, causing undefined behavior. No check for ModuleName != NULL or for a valid NUL-terminated string is performed, so this violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1695.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad_Static as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Static:\n```c\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            break;\n        }\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad_Static code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helper: logs control flow and pointer state to /tmp/logs/1695.txt */\nstatic void os_module_load_log(const char *stage,\n                               const void *sym_ptr,\n                               const char *name_ptr,\n                               const char *module_ptr,\n                               const char *ModuleName_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/1695.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Only log pointer values and null-ness to avoid dereferencing invalid pointers here. */\n    fprintf(f,\n            \"[OS_ModuleLoad_Static] %s: sym=%p, Name_ptr=%p, Module_ptr=%p, ModuleName_ptr=%p, Name_is_null=%s, Module_is_null=%s, ModuleName_is_null=%s\\n\",\n            stage,\n            sym_ptr,\n            (const void *)name_ptr,\n            (const void *)module_ptr,\n            (const void *)ModuleName_ptr,\n            (name_ptr == NULL) ? \"true\" : \"false\",\n            (module_ptr == NULL) ? \"true\" : \"false\",\n            (ModuleName_ptr == NULL) ? \"true\" : \"false\");\n\n    fclose(f);\n}\n\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    /* Entry log */\n    os_module_load_log(\"entry\", (const void *)StaticSym,\n                       (StaticSym != NULL) ? StaticSym->Name : NULL,\n                       (StaticSym != NULL) ? StaticSym->Module : NULL,\n                       ModuleName);\n\n    while (StaticSym != NULL)\n    {\n        /* Log at top of each iteration */\n        os_module_load_log(\"iter_top\", (const void *)StaticSym,\n                           StaticSym->Name,\n                           StaticSym->Module,\n                           ModuleName);\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            os_module_load_log(\"end_of_list\", (const void *)StaticSym,\n                               StaticSym->Name,\n                               StaticSym->Module,\n                               ModuleName);\n            break;\n        }\n\n        if (StaticSym->Module != NULL)\n        {\n            /* Log just before calling strcmp to capture pointer state that can cause the violation. */\n            os_module_load_log(\"before_strcmp\", (const void *)StaticSym,\n                               StaticSym->Name,\n                               StaticSym->Module,\n                               ModuleName);\n\n            /* Original logic preserved: this call will exhibit undefined behavior if ModuleName is invalid (e.g., NULL). */\n            if (strcmp(StaticSym->Module, ModuleName) == 0)\n            {\n                /* found matching module name */\n                os_module_load_log(\"matched\", (const void *)StaticSym,\n                                   StaticSym->Name,\n                                   StaticSym->Module,\n                                   ModuleName);\n                return_code = OS_SUCCESS;\n                break;\n            }\n            else\n            {\n                os_module_load_log(\"no_match\", (const void *)StaticSym,\n                                   StaticSym->Name,\n                                   StaticSym->Module,\n                                   ModuleName);\n            }\n        }\n\n        ++StaticSym;\n    }\n\n    /* Exit log: StaticSym may be NULL or point to the element where we stopped. */\n    os_module_load_log(\"exit\", (const void *)StaticSym,\n                       (StaticSym != NULL) ? StaticSym->Name : NULL,\n                       (StaticSym != NULL) ? StaticSym->Module : NULL,\n                       ModuleName);\n\n    return return_code;\n}\n"
}