{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_STATIC_SYMTABLE_SOURCE is an array of OS_static_symbol_record_t that is not terminated by a sentinel record with Name == NULL, successive ++StaticSym increments can move the pointer past the end of that array. A subsequent evaluation of StaticSym->Module (and the call strcmp(StaticSym->Module, ModuleName)) would then pass an invalid pointer into strcmp, causing the string function to access memory beyond the bounds of the object \u2014 violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1695.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad_Static as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Static:\n```c\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            break;\n        }\n        if (StaticSym->Module != NULL && strcmp(StaticSym->Module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad_Static code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\n/*\n * Probe/logging helper. Appends a log entry to /tmp/logs/1695.txt.\n * The helper prints pointer values and control-flow events but avoids\n * dereferencing string pointers to prevent introducing new out-of-bounds\n * memory accesses.\n */\nstatic void OS_ModuleLoad_LogState(const void *static_sym_ptr, const void *name_ptr, const void *module_ptr,\n                                   const char *moduleName_arg, int iteration, const char *event)\n{\n    FILE *f = fopen(\"/tmp/logs/1695.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, do not change program behavior. */\n        return;\n    }\n\n    /* Log format: iteration, event, pointer addresses. Avoid printing any\n     * pointed-to string contents to not dereference potentially-invalid\n     * pointers. */\n    fprintf(f, \"ITER=%d EVENT=%s StaticSym=%p Name_ptr=%p Module_ptr=%p ModuleName_arg=%p\\n\",\n            iteration, event, static_sym_ptr, name_ptr, module_ptr, (const void *)moduleName_arg);\n\n    fclose(f);\n}\n\nint32 OS_ModuleLoad_Static(const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NAME_NOT_FOUND;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n    int                        iter = 0;\n\n    while (StaticSym != NULL)\n    {\n        /* Log entry on each loop iteration with the raw pointer values. */\n        OS_ModuleLoad_LogState((const void *)StaticSym, (const void *)(&StaticSym->Name),\n                               (const void *)(&StaticSym->Module), ModuleName, iter, \"loop_start\");\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list  */\n            OS_ModuleLoad_LogState((const void *)StaticSym, (const void *)StaticSym->Name,\n                                   (const void *)StaticSym->Module, ModuleName, iter, \"sentinel_found\");\n            break;\n        }\n\n        /* Read Module pointer into a local to avoid multiple memory reads. */\n        const char *sym_module = StaticSym->Module;\n\n        /* Log the state just before performing the string comparison. Note:\n         * we only log pointer values here. The actual strcmp call remains\n         * unchanged so original behavior is preserved. */\n        OS_ModuleLoad_LogState((const void *)StaticSym, (const void *)StaticSym->Name,\n                               (const void *)sym_module, ModuleName, iter, \"before_strcmp\");\n\n        if (sym_module != NULL && strcmp(sym_module, ModuleName) == 0)\n        {\n            /* found matching module name */\n            OS_ModuleLoad_LogState((const void *)StaticSym, (const void *)StaticSym->Name,\n                                   (const void *)sym_module, ModuleName, iter, \"match_found\");\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n        ++iter;\n    }\n\n    OS_ModuleLoad_LogState((const void *)StaticSym, (StaticSym ? (const void *)StaticSym->Name : NULL),\n                           (StaticSym ? (const void *)StaticSym->Module : NULL), ModuleName, iter, \"function_exit\");\n\n    return return_code;\n}\n"
}