{
  "user_message": "Target function code is:\n```c\nint32 OS_QueueGet_Impl(const OS_object_token_t *token, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    int32                            return_code;\n    ssize_t                          sizeCopied;\n    struct timespec                  ts;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /*\n     ** Read the message queue for data\n     */\n    sizeCopied = -1;\n    if (timeout == OS_PEND)\n    {\n        /*\n         ** A signal can interrupt the mq_receive call, so the call has to be done with\n         ** a loop\n         */\n        do\n        {\n            sizeCopied = mq_receive(impl->id, data, size, NULL);\n        } while (sizeCopied < 0 && errno == EINTR);\n    }\n    else\n    {\n        /*\n         * NOTE - a prior implementation of OS_CHECK would check the mq_attr for a nonzero depth\n         * and then call mq_receive().  This is insufficient since another thread might do the same\n         * thing at the same time in which case one thread will read and the other will block.\n         *\n         * Calling mq_timedreceive with a zero timeout effectively does the same thing in the typical\n         * case, but for the case where two threads do a simultaneous read, one will get the message\n         * while the other will NOT block (as expected).\n         */\n        if (timeout == OS_CHECK)\n        {\n            memset(&ts, 0, sizeof(ts));\n        }\n        else\n        {\n            OS_Posix_CompAbsDelayTime(timeout, &ts);\n        }\n\n        /*\n         ** If the mq_timedreceive call is interrupted by a system call or signal,\n         ** call it again.\n         */\n        do\n        {\n            sizeCopied = mq_timedreceive(impl->id, data, size, NULL, &ts);\n        } while (timeout != OS_CHECK && sizeCopied < 0 && errno == EINTR);\n\n    } /* END timeout */\n\n    /* Figure out the return code */\n    if (sizeCopied == -1)\n    {\n        *size_copied = OSAL_SIZE_C(0);\n\n        /* Map the system errno to the most appropriate OSAL return code */\n        if (errno == EMSGSIZE)\n        {\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else if (timeout == OS_PEND || errno != ETIMEDOUT)\n        {\n            /* OS_PEND was supposed to pend forever until a message arrived\n             * so something else is wrong.  Otherwise, at this point the only\n             * \"acceptable\" errno is TIMEDOUT for the other cases.\n             */\n            return_code = OS_ERROR;\n        }\n        else if (timeout == OS_CHECK)\n        {\n            return_code = OS_QUEUE_EMPTY;\n        }\n        else\n        {\n            return_code = OS_QUEUE_TIMEOUT;\n        }\n    }\n    else\n    {\n        *size_copied = OSAL_SIZE_C(sizeCopied);\n        return_code  = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'OS_QueueGet_Impl': {'callees': ['OS_ObjectIndexFromToken', 'OS_Posix_CompAbsDelayTime'], 'callers': ['OS_QueueGet']}, 'OS_ObjectIndexFromToken': {'callees': [], 'callers': ['OS_BinSemCreate_Impl', 'OS_BinSemDelete_Impl', 'OS_BinSemGive_Impl', 'OS_BinSemFlush_Impl', 'OS_GenericBinSemTake_Impl', 'OS_BinSemGetInfo_Impl', 'OS_ConsoleWakeup_Impl', 'OS_ConsoleTask_Entry', 'OS_ConsoleCreate_Impl', 'OS_CondVarCreate_Impl', 'OS_CondVarDelete_Impl', 'OS_CondVarUnlock_Impl', 'OS_CondVarLock_Impl', 'OS_CondVarSignal_Impl', 'OS_CondVarBroadcast_Impl', 'OS_CondVarWait_Impl', 'OS_CondVarTimedWait_Impl', 'OS_CountSemCreate_Impl', 'OS_CountSemDelete_Impl', 'OS_CountSemGive_Impl', 'OS_CountSemTake_Impl', 'OS_CountSemTimedWait_Impl', 'OS_CountSemGetInfo_Impl', 'OS_FileSysStartVolume_Impl', 'OS_FileSysMountVolume_Impl', 'OS_FileSysStatVolume_Impl', 'OS_MutSemCreate_Impl', 'OS_MutSemDelete_Impl', 'OS_MutSemGive_Impl', 'OS_MutSemTake_Impl', 'OS_QueueCreate_Impl', 'OS_QueueDelete_Impl', 'OS_QueueGet_Impl', 'OS_QueuePut_Impl', 'OS_TaskCreate_Impl', 'OS_TaskDetach_Impl', 'OS_TaskMatch_Impl', 'OS_TaskDelete_Impl', 'OS_TaskSetPriority_Impl', 'OS_TaskIdMatchSystemData_Impl', 'OS_TimeBaseLock_Impl', 'OS_TimeBaseUnlock_Impl', 'OS_TimeBase_SigWaitImpl', 'OS_TimeBaseCreate_Impl', 'OS_TimeBaseSet_Impl', 'OS_TimeBaseDelete_Impl', 'OS_ConsoleOutput_Impl', 'OS_SelectSingle_Impl', 'OS_GenericClose_Impl', 'OS_GenericSeek_Impl', 'OS_GenericRead_Impl', 'OS_GenericWrite_Impl', 'OS_FileOpen_Impl', 'OS_DirOpen_Impl', 'OS_DirClose_Impl', 'OS_DirRead_Impl', 'OS_DirRewind_Impl', 'OS_ModuleLoad_Impl', 'OS_ModuleUnload_Impl', 'OS_ModuleSymbolLookup_Impl', 'OS_SetSocketDefaultFlags_Impl', 'OS_SocketOpen_Impl', 'OS_SocketBindAddress_Impl', 'OS_SocketListen_Impl', 'OS_SocketConnect_Impl', 'OS_SocketShutdown_Impl', 'OS_SocketAccept_Impl', 'OS_SocketRecvFrom_Impl', 'OS_SocketSendTo_Impl', 'OS_BinSemCreate', 'OS_BinSemGetInfo', 'OS_CondVarCreate', 'OS_CondVarGetInfo', 'OS_CountSemCreate', 'OS_CountSemGetInfo', 'OS_DirectoryOpen', 'OS_OpenCreate', 'OS_rename', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_CloseFileByName', 'OS_FileSys_FindVirtMountPoint', 'OS_FileSys_Initialize', 'OS_FileSysAddFixedMap', 'OS_mount', 'OS_unmount', 'OS_FS_GetPhysDriveName', 'OS_TranslatePath', 'OS_ObjectIdFindNextMatch', 'OS_ObjectIdIteratorGetNext', 'OS_ModuleLoad', 'OS_ModuleUnload', 'OS_ModuleInfo', 'OS_ModuleSymbolLookup', 'OS_MutSemCreate', 'OS_MutSemGive', 'OS_MutSemTake', 'OS_MutSemGetInfo', 'OS_ConsoleAPI_Init', 'OS_ConsoleWrite', 'OS_QueueCreate', 'OS_QueueGet', 'OS_QueuePut', 'OS_QueueGetInfo', 'OS_CreateSocketName', 'OS_SocketOpen', 'OS_SocketListen', 'OS_SocketBindAddress', 'OS_SocketAccept', 'OS_SocketConnect', 'OS_SocketShutdown', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketGetInfo', 'OS_TaskPrepare', 'OS_TaskCreate', 'OS_TaskDelete', 'OS_TaskSetPriority', 'OS_TaskGetInfo', 'OS_TaskInstallDeleteHandler', 'OS_TimeBaseCreate', 'OS_TimeBaseSet', 'OS_TimeBaseGetInfo', 'OS_TimeBaseGetFreeRun', 'OS_TimeBase_CallbackThread', 'OS_DoTimerAdd', 'OS_TimerSet', 'OS_TimerDelete', 'OS_TimerGetInfo']}, 'OS_Posix_CompAbsDelayTime': {'callees': [], 'callers': ['OS_BinSemTimedWait_Impl', 'OS_CountSemTimedWait_Impl', 'OS_QueueGet_Impl']}, 'OS_QueueGet': {'callees': ['OS_printf', 'OS_ObjectIdGetById', 'OS_ObjectIndexFromToken', 'OS_QueueGet_Impl', 'UT_Stub_RegisterReturnType', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteBasicHandler', 'UT_Stub_GetReturnValuePtr'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nUse of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters. This rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "memset",
    "struct timespec (definition / sizeof)",
    "OS_Posix_CompAbsDelayTime",
    "mq_receive",
    "mq_timedreceive",
    "errno and errno constants (EMSGSIZE, EINTR, ETIMEDOUT)",
    "OS_CHECK and OS_PEND constants",
    "OSAL_SIZE_C macro",
    "OS_impl_queue_internal_record_t (definition of impl and member id)",
    "data/size parameter contract (caller-provided buffer length semantics)",
    "ssize_t and size_t type definitions"
  ],
  "explanation": "memset \u2014 The function calls memset(&ts, 0, sizeof(ts)). To prove no out\u2011of\u2011bounds write by memset you must know the exact function prototype/semantics and that the size argument equals the size of the ts object.\n\nstruct timespec (definition / sizeof) \u2014 ts is declared as struct timespec; the exact structure definition (from <time.h>) is required to confirm sizeof(ts) matches the actual object storage and that memset(&ts, ..., sizeof(ts)) does not overrun ts.\n\nOS_Posix_CompAbsDelayTime \u2014 This helper is called with &ts and may write into the timespec. Its implementation/prototype is required to verify it only writes within the bounds of the ts object (i.e., no hidden larger writes or nonstandard behavior).\n\nmq_receive and mq_timedreceive \u2014 Although not string.h functions, these POSIX calls copy message data into the buffer pointed to by data using the provided size. Knowing their prototypes and semantics ensures they will not write beyond the provided msg_len and that an oversized message results in EMSGSIZE rather than an overrun.\n\nerno and errno constants (EMSGSIZE, EINTR, ETIMEDOUT) \u2014 The code inspects errno after mq_* calls and branches based on these values. Knowing their meanings helps determine whether failure paths could cause any string.h calls to be invoked incorrectly or with improper sizes.\n\nOS_CHECK and OS_PEND constants \u2014 These control the code path where memset is invoked (timeout == OS_CHECK). Their definitions are needed to confirm when memset runs and that no other path could lead to a different memset usage.\n\nOSAL_SIZE_C macro \u2014 Used when assigning *size_copied. While not directly a string.h issue, its definition is needed to ensure the macro does not cause type/size issues that could indirectly affect buffer-size reasoning.\n\nOS_impl_queue_internal_record_t (impl and member id) \u2014 Definition of this internal record verifies impl is a valid structure and that impl->id is the proper mqueue descriptor passed to mq_*; ensures no aliasing or unexpected memory layout that could affect the memset call or other memory writes in this function.\n\ndata/size parameter contract (caller-provided buffer length semantics) \u2014 To be confident mq_receive/mq_timedreceive (and any potential string.h use) cannot write out of bounds, the required contract/documentation or prototype showing that the caller must supply a buffer of at least 'size' bytes is needed.\n\nssize_t and size_t type definitions \u2014 Knowing the exact types/sizes ensures the conversions (e.g., ssize_t returned from mq_* to size_t via OSAL_SIZE_C) and the sizeof computations used with memset are coherent and do not hide truncation/overflow issues.\n\nSummary: The only string.h call in this function is memset. To determine compliance with the MISRA rule you must verify (1) the memset size equals the actual object size (struct timespec definition), (2) no other routine called with &ts writes beyond ts (OS_Posix_CompAbsDelayTime), and (3) there are no other hidden uses of string.h here. The other listed symbols (mq_*, errno constants, data/size contract, etc.) are included because they influence memory-copy semantics into the caller buffer and the error paths that could affect how/when memset or other memory writes occur."
}