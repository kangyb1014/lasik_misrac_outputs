{
  "user_message": "An agent A claimed that the following OS_QueueGet_Impl code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of OS_QueueGet_Impl.\n```c\nint32 OS_QueueGet_Impl(const OS_object_token_t *token, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    int32                            return_code;\n    ssize_t                          sizeCopied;\n    struct timespec                  ts;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /*\n     ** Read the message queue for data\n     */\n    sizeCopied = -1;\n    if (timeout == OS_PEND)\n    {\n        /*\n         ** A signal can interrupt the mq_receive call, so the call has to be done with\n         ** a loop\n         */\n        do\n        {\n            sizeCopied = mq_receive(impl->id, data, size, NULL);\n        } while (sizeCopied < 0 && errno == EINTR);\n    }\n    else\n    {\n        /*\n         * NOTE - a prior implementation of OS_CHECK would check the mq_attr for a nonzero depth\n         * and then call mq_receive().  This is insufficient since another thread might do the same\n         * thing at the same time in which case one thread will read and the other will block.\n         *\n         * Calling mq_timedreceive with a zero timeout effectively does the same thing in the typical\n         * case, but for the case where two threads do a simultaneous read, one will get the message\n         * while the other will NOT block (as expected).\n         */\n        if (timeout == OS_CHECK)\n        {\n            memset(&ts, 0, sizeof(ts));\n        }\n        else\n        {\n            OS_Posix_CompAbsDelayTime(timeout, &ts);\n        }\n\n        /*\n         ** If the mq_timedreceive call is interrupted by a system call or signal,\n         ** call it again.\n         */\n        do\n        {\n            sizeCopied = mq_timedreceive(impl->id, data, size, NULL, &ts);\n        } while (timeout != OS_CHECK && sizeCopied < 0 && errno == EINTR);\n\n    } /* END timeout */\n\n    /* Figure out the return code */\n    if (sizeCopied == -1)\n    {\n        *size_copied = OSAL_SIZE_C(0);\n\n        /* Map the system errno to the most appropriate OSAL return code */\n        if (errno == EMSGSIZE)\n        {\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else if (timeout == OS_PEND || errno != ETIMEDOUT)\n        {\n            /* OS_PEND was supposed to pend forever until a message arrived\n             * so something else is wrong.  Otherwise, at this point the only\n             * \"acceptable\" errno is TIMEDOUT for the other cases.\n             */\n            return_code = OS_ERROR;\n        }\n        else if (timeout == OS_CHECK)\n        {\n            return_code = OS_QUEUE_EMPTY;\n        }\n        else\n        {\n            return_code = OS_QUEUE_TIMEOUT;\n        }\n    }\n    else\n    {\n        *size_copied = OSAL_SIZE_C(sizeCopied);\n        return_code  = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The statement 'sizeCopied = -1;' is redundant (dead) because every control path that follows executes a do { sizeCopied = mq_receive(...) } or do { sizeCopied = mq_timedreceive(...) } loop which assigns sizeCopied at least once before it is tested or used. Removing the initialization would not change program behaviour, so this assignment constitutes dead code.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_queue_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/434.txt\", \"a\");\n    if (!f)\n    {\n        return; /* If logging fails, don't affect program flow */\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timestr[64];\n        strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n        fprintf(f, \"%s \", timestr);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_QueueGet_Impl(const OS_object_token_t *token, void *data, size_t size, size_t *size_copied, int32 timeout)\n{\n    int32                            return_code;\n    ssize_t                          sizeCopied;\n    struct timespec                  ts;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /*\n     ** Read the message queue for data\n     */\n    os_queue_log_probe(\"OS_QueueGet_Impl ENTER: token=%p, data=%p, size=%zu, timeout=%d\", (const void *)token, data, size, (int)timeout);\n\n    sizeCopied = -1;\n    os_queue_log_probe(\"Initialized sizeCopied = -1 (probe). Will attempt mq_receive/mq_timedreceive depending on timeout\");\n\n    if (timeout == OS_PEND)\n    {\n        /*\n         ** A signal can interrupt the mq_receive call, so the call has to be done with\n         ** a loop\n         */\n        do\n        {\n            os_queue_log_probe(\"Calling mq_receive: id=%d, buf=%p, len=%zu\", (int)impl->id, data, size);\n            sizeCopied = mq_receive(impl->id, data, size, NULL);\n            os_queue_log_probe(\"mq_receive returned sizeCopied=%zd, errno=%d (%s)\", sizeCopied, errno, strerror(errno));\n        } while (sizeCopied < 0 && errno == EINTR);\n    }\n    else\n    {\n        /*\n         * NOTE - a prior implementation of OS_CHECK would check the mq_attr for a nonzero depth\n         * and then call mq_receive().  This is insufficient since another thread might do the same\n         * thing at the same time in which case one thread will read and the other will block.\n         *\n         * Calling mq_timedreceive with a zero timeout effectively does the same thing in the typical\n         * case, but for the case where two threads do a simultaneous read, one will get the message\n         * while the other will NOT block (as expected).\n         */\n        if (timeout == OS_CHECK)\n        {\n            memset(&ts, 0, sizeof(ts));\n            os_queue_log_probe(\"timeout == OS_CHECK: zero-initialized ts\");\n        }\n        else\n        {\n            os_queue_log_probe(\"Computing absolute delay time for timeout=%d\", (int)timeout);\n            OS_Posix_CompAbsDelayTime(timeout, &ts);\n            os_queue_log_probe(\"Computed ts: tv_sec=%ld, tv_nsec=%ld\", (long)ts.tv_sec, (long)ts.tv_nsec);\n        }\n\n        /*\n         ** If the mq_timedreceive call is interrupted by a system call or signal,\n         ** call it again.\n         */\n        do\n        {\n            os_queue_log_probe(\"Calling mq_timedreceive: id=%d, buf=%p, len=%zu, timeout_mode=%s\", (int)impl->id, data, size,\n                               (timeout == OS_CHECK) ? \"OS_CHECK\" : \"timed\");\n            sizeCopied = mq_timedreceive(impl->id, data, size, NULL, &ts);\n            os_queue_log_probe(\"mq_timedreceive returned sizeCopied=%zd, errno=%d (%s)\", sizeCopied, errno, strerror(errno));\n        } while (timeout != OS_CHECK && sizeCopied < 0 && errno == EINTR);\n\n    } /* END timeout */\n\n    os_queue_log_probe(\"After receive loops: final sizeCopied=%zd, errno=%d (%s)\", sizeCopied, errno, strerror(errno));\n\n    /* Figure out the return code */\n    if (sizeCopied == -1)\n    {\n        os_queue_log_probe(\"sizeCopied == -1 branch taken\");\n        *size_copied = OSAL_SIZE_C(0);\n\n        /* Map the system errno to the most appropriate OSAL return code */\n        if (errno == EMSGSIZE)\n        {\n            os_queue_log_probe(\"Mapping errno EMSGSIZE to OS_QUEUE_INVALID_SIZE\");\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else if (timeout == OS_PEND || errno != ETIMEDOUT)\n        {\n            /* OS_PEND was supposed to pend forever until a message arrived\n             * so something else is wrong.  Otherwise, at this point the only\n             * \"acceptable\" errno is TIMEDOUT for the other cases.\n             */\n            os_queue_log_probe(\"Mapping to OS_ERROR (timeout=%d, errno=%d)\", (int)timeout, errno);\n            return_code = OS_ERROR;\n        }\n        else if (timeout == OS_CHECK)\n        {\n            os_queue_log_probe(\"Mapping to OS_QUEUE_EMPTY (timeout == OS_CHECK)\");\n            return_code = OS_QUEUE_EMPTY;\n        }\n        else\n        {\n            os_queue_log_probe(\"Mapping to OS_QUEUE_TIMEOUT (timeout=%d)\", (int)timeout);\n            return_code = OS_QUEUE_TIMEOUT;\n        }\n    }\n    else\n    {\n        os_queue_log_probe(\"sizeCopied != -1 branch taken: setting *size_copied = %zu, return_code = OS_SUCCESS\", (size_t)sizeCopied);\n        *size_copied = OSAL_SIZE_C(sizeCopied);\n        return_code  = OS_SUCCESS;\n    }\n\n    os_queue_log_probe(\"OS_QueueGet_Impl EXIT: return_code=%d, *size_copied=%zu\", (int)return_code, (size_t)(*size_copied));\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_QueueGet_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The initialization sizeCopied = -1; is executed on every call but is always overwritten by the subsequent do { sizeCopied = mq_receive(...); } or do { sizeCopied = mq_timedreceive(...); } before any use or test of sizeCopied. Both branches use a do/while, so the receive call body executes at least once and assigns sizeCopied. Therefore removing the initialization would not change program behaviour at run time, so the assignment is redundant (dead) under MISRA C 2023 Rule 2.2. (Note: authors sometimes keep such initializations for clarity or to satisfy static analysers; that justification should be documented if the assignment is retained.)"
}