{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn the provided configuration OS_DEBUG is defined as an empty macro (#define OS_DEBUG(__VA_ARGS__)), so the statement OS_DEBUG(\"fcntl(F_GETFL): %s\\n\", strerror(errno)); expands to nothing (effectively an empty statement). That executed-no-op cannot affect program behaviour if removed, therefore it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SetSocketDefaultFlags_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/810.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SetSocketDefaultFlags_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SetSocketDefaultFlags_Impl:\n```c\nvoid OS_SetSocketDefaultFlags_Impl(const OS_object_token_t *token)\n{\n    OS_impl_file_internal_record_t *impl;\n    int                             os_flags;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_flags = fcntl(impl->fd, F_GETFL);\n    if (os_flags == -1)\n    {\n        /* No recourse if F_GETFL fails - just report the error and move on. */\n        OS_DEBUG(\"fcntl(F_GETFL): %s\\n\", strerror(errno));\n    }\n    else\n    {\n        os_flags |= OS_IMPL_SOCKET_FLAGS;\n        if (fcntl(impl->fd, F_SETFL, os_flags) == -1)\n        {\n            /* No recourse if F_SETFL fails - just report the error and move on. */\n            OS_DEBUG(\"fcntl(F_SETFL): %s\\n\", strerror(errno));\n        }\n    }\n\n    impl->selectable = true;\n}\n```\n</target_code>\nPlease provide the modified OS_SetSocketDefaultFlags_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n\nstatic void os_810_log(const char *tag, const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/810.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Do not change program logic if logging cannot be performed */\n    }\n\n    fprintf(f, \"[%s] \", tag);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid OS_SetSocketDefaultFlags_Impl(const OS_object_token_t *token)\n{\n    OS_impl_file_internal_record_t *impl;\n    int                             os_flags;\n\n    os_810_log(\"ENTRY\", \"OS_SetSocketDefaultFlags_Impl called with token=%p\", (const void *)token);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_810_log(\"LOOKUP\", \"impl=%p\", (const void *)impl);\n\n    /* Record fd value if impl is non-NULL */\n    if (impl != NULL)\n    {\n        os_810_log(\"LOOKUP\", \"impl->fd=%d\", impl->fd);\n    }\n\n    os_flags = fcntl(impl->fd, F_GETFL);\n    os_810_log(\"FCNTL\", \"F_GETFL returned %d (errno=%d: %s)\", os_flags, errno, strerror(errno));\n\n    if (os_flags == -1)\n    {\n        /* No recourse if F_GETFL fails - just report the error and move on. */\n        /* Original code used OS_DEBUG which is an empty macro in the violation scenario. */\n        os_810_log(\"ERROR\", \"fcntl(F_GETFL) failed: errno=%d: %s\", errno, strerror(errno));\n    }\n    else\n    {\n        os_flags |= OS_IMPL_SOCKET_FLAGS;\n        os_810_log(\"MODIFY\", \"updated os_flags to %d\", os_flags);\n\n        if (fcntl(impl->fd, F_SETFL, os_flags) == -1)\n        {\n            /* No recourse if F_SETFL fails - just report the error and move on. */\n            os_810_log(\"ERROR\", \"fcntl(F_SETFL) failed: errno=%d: %s\", errno, strerror(errno));\n            /* Original code: OS_DEBUG(\"fcntl(F_SETFL): %s\\n\", strerror(errno)); */\n        }\n        else\n        {\n            os_810_log(\"FCNTL\", \"F_SETFL succeeded for fd=%d\", impl->fd);\n        }\n    }\n\n    impl->selectable = true;\n    os_810_log(\"EXIT\", \"impl=%p selectable=%d\", (const void *)impl, (int)impl->selectable);\n}\n"
}