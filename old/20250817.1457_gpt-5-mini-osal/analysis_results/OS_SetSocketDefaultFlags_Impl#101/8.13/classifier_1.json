{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_SetSocketDefaultFlags_Impl:\n```c\nvoid OS_SetSocketDefaultFlags_Impl(const OS_object_token_t *token)\n{\n    OS_impl_file_internal_record_t *impl;\n    int                             os_flags;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_flags = fcntl(impl->fd, F_GETFL);\n    if (os_flags == -1)\n    {\n        /* No recourse if F_GETFL fails - just report the error and move on. */\n        OS_DEBUG(\"fcntl(F_GETFL): %s\\n\", strerror(errno));\n    }\n    else\n    {\n        os_flags |= OS_IMPL_SOCKET_FLAGS;\n        if (fcntl(impl->fd, F_SETFL, os_flags) == -1)\n        {\n            /* No recourse if F_SETFL fails - just report the error and move on. */\n            OS_DEBUG(\"fcntl(F_SETFL): %s\\n\", strerror(errno));\n        }\n    }\n\n    impl->selectable = true;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_SetSocketDefaultFlags_Impl:\ntypedef struct\n{\n    int  fd;\n    bool selectable;\n} OS_impl_file_internal_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_impl_file_internal_record_t OS_impl_filehandle_table[OS_MAX_NUM_OPEN_FILES]\n...\ntypedef struct OS_object_token OS_object_token_t\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nimpl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The pointer 'impl' points to a table element that is subsequently modified (impl->selectable = true), so it cannot be const-qualified. The macro expansion uses &(*token) (a const OS_object_token_t *), which preserves const for the token; the returned pointer must be a mutable OS_impl_file_internal_record_t * because the code writes to the record. If the record were not modified, then the pointer could and should be declared const to satisfy Rule 8.13."
}