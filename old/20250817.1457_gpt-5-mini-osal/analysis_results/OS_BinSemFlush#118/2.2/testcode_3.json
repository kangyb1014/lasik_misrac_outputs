{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initializer in OS_ObjectIdConvertToken: the statement 'int32 return_code = OS_ERROR;' is redundant. Every path that reaches the later use of return_code (the while-loop breaks or earlier returns) assigns return_code explicitly before it is read (or returns directly), so the initial assignment is executed but never observed; removing it would not change program behaviour. This constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemFlush code that contains useful probe functions that print useful logs to a file \"/tmp/logs/946.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemFlush as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemFlush:\n```c\nint32 OS_BinSemFlush(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemFlush_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemFlush code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Minimal type and constant stubs to allow compilation of the test harness. */\ntypedef int32_t int32;\ntypedef uint32_t osal_id_t;\n\ntypedef struct\n{\n    uint32_t id;\n} OS_object_token_t;\n\nenum\n{\n    OS_LOCK_MODE_NONE = 0,\n    LOCAL_OBJID_TYPE  = 1,\n    OS_SUCCESS        = 0,\n    OS_ERROR          = -1\n};\n\n/* Probe logging helper: append structured logs about control flow and state. */\nstatic void OSAL_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/946.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging is unavailable, fail silently to avoid changing program behaviour. */\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Minimal stub implementations for dependent functions so this file is compilable and usable\n   as a test artifact. These stubs mimic plausible behavior but do not change the logic of\n   OS_BinSemFlush itself. */\nstatic int32 OS_ObjectIdGetById(int lock_mode, int objtype, osal_id_t id, OS_object_token_t *token)\n{\n    (void)lock_mode;\n    (void)objtype;\n\n    /* For testing: return success for non-zero ids, error for zero id. */\n    if (id == 0u)\n    {\n        return OS_ERROR;\n    }\n\n    if (token != NULL)\n    {\n        token->id = id;\n    }\n\n    return OS_SUCCESS;\n}\n\nstatic int32 OS_BinSemFlush_Impl(OS_object_token_t *token)\n{\n    /* Simulate an implementation. Return success normally. */\n    if (token == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    (void)token; /* token used only for simulation */\n    return OS_SUCCESS;\n}\n\n/* Modified OS_BinSemFlush with logging probes that capture the control path and state\n   information relevant to the reported dead-code scenario. The original function logic\n   is preserved: the function calls OS_ObjectIdGetById and, on success, OS_BinSemFlush_Impl,\n   and then returns the final return_code. */\nint32 OS_BinSemFlush(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and input state */\n    OSAL_LogProbe(\"OS_BinSemFlush: enter, sem_id=%u\", (unsigned)sem_id);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    OSAL_LogProbe(\"OS_BinSemFlush: after OS_ObjectIdGetById -> return_code=%d, token.id=%u\",\n                  (int)return_code, (unsigned)token.id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        OSAL_LogProbe(\"OS_BinSemFlush: calling OS_BinSemFlush_Impl with token.id=%u\", (unsigned)token.id);\n        return_code = OS_BinSemFlush_Impl(&token);\n        OSAL_LogProbe(\"OS_BinSemFlush: after OS_BinSemFlush_Impl -> return_code=%d\", (int)return_code);\n    }\n    else\n    {\n        OSAL_LogProbe(\"OS_BinSemFlush: skipping OS_BinSemFlush_Impl due to error return_code=%d\", (int)return_code);\n    }\n\n    OSAL_LogProbe(\"OS_BinSemFlush: exit, final return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}