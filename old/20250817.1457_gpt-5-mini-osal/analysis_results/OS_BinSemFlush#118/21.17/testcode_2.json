{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) can read past the end of the referenced objects if either pointer is NULL, points to a non\u2011NUL\u2011terminated buffer, or to memory that has gone out of scope/freed. The code does not validate that the two pointers are non\u2011NULL and point to NUL\u2011terminated strings before calling strcmp, so strcmp may access beyond object bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemFlush code that contains useful probe functions that print useful logs to a file \"/tmp/logs/951.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemFlush as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemFlush:\n```c\nint32 OS_BinSemFlush(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemFlush_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemFlush code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/*\n * Probe/log helper for OS_BinSemFlush.\n * Appends human-readable logs to /tmp/logs/951.txt to capture control flow\n * and state useful for reproducing potential string-handling violations in\n * callers (e.g. scenarios where pointers passed to string functions may be\n * invalid). This helper deliberately does not modify the OS_BinSemFlush logic.\n */\nstatic void OS_BinSemFlush_Log(const char *stage, osal_id_t sem_id, int32 rc, const OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/951.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t now = time(NULL);\n        /* Log timestamp, stage, sem_id, return code and token address. */\n        fprintf(f, \"%ld: OS_BinSemFlush - %s: sem_id=%ld return_code=%d token_addr=%p\\n\",\n                (long)now,\n                (stage != NULL) ? stage : \"(null)\",\n                (long)sem_id,\n                (int)rc,\n                (const void *)token);\n        fclose(f);\n    }\n}\n\nint32 OS_BinSemFlush(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry with the provided sem_id */\n    OS_BinSemFlush_Log(\"entry\", sem_id, 0, NULL);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of object id lookup and the token address (stack address) */\n    OS_BinSemFlush_Log(\"after_OS_ObjectIdGetById\", sem_id, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before invoking implementation */\n        OS_BinSemFlush_Log(\"before_Impl\", sem_id, return_code, &token);\n\n        return_code = OS_BinSemFlush_Impl(&token);\n\n        /* Log after implementation returns */\n        OS_BinSemFlush_Log(\"after_Impl\", sem_id, return_code, &token);\n    }\n\n    /* Final exit log */\n    OS_BinSemFlush_Log(\"exit\", sem_id, return_code, &token);\n\n    return return_code;\n}\n"
}