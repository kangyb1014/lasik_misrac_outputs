{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_BinSemFlush:\n```c\nint32 OS_BinSemFlush(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemFlush_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn_code = OS_BinSemFlush_Impl(&token);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "If the prototype of OS_BinSemFlush_Impl is declared to take a non-const pointer (for example: int32 OS_BinSemFlush_Impl(OS_object_token_t *token)) but the function only reads from *token (does not modify the object), then the pointer parameter should be const-qualified (int32 OS_BinSemFlush_Impl(const OS_object_token_t *token)). In that case the code as written violates MISRA C 2023 Rule 8.13. (If, however, OS_BinSemFlush_Impl actually modifies *token, then no violation occurs.)"
}