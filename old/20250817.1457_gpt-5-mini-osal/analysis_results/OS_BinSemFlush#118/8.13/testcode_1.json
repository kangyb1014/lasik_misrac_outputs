{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the prototype of OS_BinSemFlush_Impl is declared to take a non-const pointer (for example: int32 OS_BinSemFlush_Impl(OS_object_token_t *token)) but the function only reads from *token (does not modify the object), then the pointer parameter should be const-qualified (int32 OS_BinSemFlush_Impl(const OS_object_token_t *token)). In that case the code as written violates MISRA C 2023 Rule 8.13. (If, however, OS_BinSemFlush_Impl actually modifies *token, then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemFlush code that contains useful probe functions that print useful logs to a file \"/tmp/logs/947.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemFlush as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemFlush:\n```c\nint32 OS_BinSemFlush(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemFlush_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemFlush code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n\n/*\n * Probing helpers to log control flow and state for OS_BinSemFlush.\n * Logs are appended to \"/tmp/logs/947.txt\".\n * These functions intentionally do not change program logic.\n */\nstatic void Probe_LogMessage(const char *msg, osal_id_t sem_id, int32 code)\n{\n    FILE *f = fopen(\"/tmp/logs/947.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s: sem_id=%lld return_code=%d\\n\", msg, (long long)sem_id, (int)code);\n        fclose(f);\n    }\n}\n\nstatic void Probe_LogTokenBytes(const char *label, const OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/947.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s: token_ptr=%p\\n\", label, (const void *)token);\n\n        /* Dump the raw bytes of the token to help detect any modifications */\n        {\n            const unsigned char *p = (const unsigned char *)token;\n            size_t n = sizeof(OS_object_token_t);\n            fprintf(f, \"%s: bytes=\", label);\n            for (size_t i = 0; i < n; ++i)\n            {\n                fprintf(f, \"%02X\", (unsigned) p[i]);\n                if ((i + 1) % 16 == 0 && (i + 1) != n)\n                {\n                    fprintf(f, \"\\n%s:        \", label);\n                }\n            }\n            fprintf(f, \"\\n\");\n        }\n\n        fclose(f);\n    }\n}\n\nint32 OS_BinSemFlush(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry */\n    Probe_LogMessage(\"OS_BinSemFlush - entry\", sem_id, -1);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    Probe_LogMessage(\"OS_BinSemFlush - after OS_ObjectIdGetById\", sem_id, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Capture token state immediately before calling the implementation */\n        Probe_LogTokenBytes(\"OS_BinSemFlush - token before Impl\", &token);\n\n        /* Call the implementation (original behavior preserved) */\n        return_code = OS_BinSemFlush_Impl(&token);\n\n        /* Capture token state immediately after calling the implementation */\n        Probe_LogTokenBytes(\"OS_BinSemFlush - token after Impl\", &token);\n\n        Probe_LogMessage(\"OS_BinSemFlush - after OS_BinSemFlush_Impl\", sem_id, return_code);\n    }\n    else\n    {\n        /* Log that we did not call the Impl due to parameter check failure */\n        Probe_LogMessage(\"OS_BinSemFlush - skipped Impl due to bad id\", sem_id, return_code);\n    }\n\n    return return_code;\n}\n"
}