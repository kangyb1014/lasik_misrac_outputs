{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_SelectMultiple takes non-const pointers ReadSet and WriteSet and forwards them to OS_SelectMultiple_Impl. If the select implementation only inspects these fd sets (i.e. does not modify the objects pointed to), then the parameters should be declared as const OS_FdSet * in the API and in the implementation. By using non-const pointer types when const qualification is possible, the code violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectMultiple code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1907.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectMultiple as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectMultiple:\n```c\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"ReadSet\" and \"WriteSet\" are not checked, because in certain configurations they can be validly null.\n     */\n\n    /*\n     * This does not currently increment any refcounts.\n     * That means a file/socket can be closed while actively inside a\n     * OS_SelectMultiple() call in another thread.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectMultiple code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/*\n * Probe helper: log entry state before calling implementation\n */\nstatic void OS_SelectMultiple_Log_Pre(const void *ReadSet, const void *WriteSet, int32 msecs)\n{\n    FILE *fp = fopen(\"/tmp/logs/1907.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(fp, \"[OS_SelectMultiple] ENTRY timestamp=%ld msecs=%d ReadSet=%p WriteSet=%p\\n\",\n            (long)t, (int)msecs, ReadSet, WriteSet);\n\n    if (ReadSet == NULL)\n    {\n        fprintf(fp, \"[OS_SelectMultiple] ReadSet is NULL\\n\");\n    }\n    else\n    {\n        fprintf(fp, \"[OS_SelectMultiple] ReadSet non-NULL (address=%p)\\n\", ReadSet);\n    }\n\n    if (WriteSet == NULL)\n    {\n        fprintf(fp, \"[OS_SelectMultiple] WriteSet is NULL\\n\");\n    }\n    else\n    {\n        fprintf(fp, \"[OS_SelectMultiple] WriteSet non-NULL (address=%p)\\n\", WriteSet);\n    }\n\n    fprintf(fp, \"[OS_SelectMultiple] Forwarding to OS_SelectMultiple_Impl\\n\");\n    fclose(fp);\n}\n\n/*\n * Probe helper: log return state after calling implementation\n */\nstatic void OS_SelectMultiple_Log_Post(int32 return_code)\n{\n    FILE *fp = fopen(\"/tmp/logs/1907.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(fp, \"[OS_SelectMultiple] EXIT timestamp=%ld return_code=%d\\n\",\n            (long)t, (int)return_code);\n    fclose(fp);\n}\n\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"ReadSet\" and \"WriteSet\" are not checked, because in certain configurations they can be validly null.\n     */\n\n    /*\n     * Log state prior to calling implementation (do not modify ReadSet/WriteSet)\n     */\n    OS_SelectMultiple_Log_Pre((const void *)ReadSet, (const void *)WriteSet, msecs);\n\n    /*\n     * This does not currently increment any refcounts.\n     * That means a file/socket can be closed while actively inside a\n     * OS_SelectMultiple() call in another thread.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    /*\n     * Log state after calling implementation\n     */\n    OS_SelectMultiple_Log_Post(return_code);\n\n    return return_code;\n}\n"
}