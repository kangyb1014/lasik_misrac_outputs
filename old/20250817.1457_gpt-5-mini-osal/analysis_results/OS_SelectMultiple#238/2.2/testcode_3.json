{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_DoSelect, when msecs <= 0 the else branch executes the memset(&ts_end, 0, sizeof(ts_end)). The ts_end variable is only read in the code path for msecs > 0; for msecs == 0 or msecs < 0 ts_end is never used. Thus this memset is executed but its removal would not affect program behaviour, so it constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectMultiple code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1906.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectMultiple as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectMultiple:\n```c\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"ReadSet\" and \"WriteSet\" are not checked, because in certain configurations they can be validly null.\n     */\n\n    /*\n     * This does not currently increment any refcounts.\n     * That means a file/socket can be closed while actively inside a\n     * OS_SelectMultiple() call in another thread.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectMultiple code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <time.h>\n#include <errno.h>\n\n/* Forward declarations/types expected to be available in the real build */\ntypedef int32_t int32;\ntypedef struct OS_FdSet OS_FdSet;\n\n/* The actual implementation is provided elsewhere */\nextern int32 OS_SelectMultiple_Impl(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs);\n\n/*\n * Probe: append information about control flow and relevant state to\n * /tmp/logs/1906.txt so other agents can reproduce the scenario.\n * This function intentionally does not alter program logic or return values.\n */\nstatic void OS_SelectMultiple_LogProbe(const OS_FdSet *ReadSet, const OS_FdSet *WriteSet, int32 msecs, const char *stage, int32 return_code)\n{\n    FILE *f = NULL;\n    time_t now = time(NULL);\n\n    /* Ensure directory exists; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/1906.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not affect the original behaviour. */\n        return;\n    }\n\n    /* Timestamp, stage (ENTRY/EXIT), sets pointers, msecs and return code. */\n    fprintf(f, \"%ld | %s | ReadSet=%p WriteSet=%p msecs=%ld return=%ld\\n\",\n            (long)now,\n            stage,\n            (void *)ReadSet,\n            (void *)WriteSet,\n            (long)msecs,\n            (long)return_code);\n\n    /* Additional hint to help reproduce the reported violation scenario. */\n    if (msecs <= 0)\n    {\n        fprintf(f, \"%ld | %s | NOTE: msecs <= 0 -> expected path where memset(&ts_end,0,...) is executed but ts_end is not subsequently used.\\n\",\n                (long)now,\n                stage);\n    }\n    else\n    {\n        fprintf(f, \"%ld | %s | NOTE: msecs > 0 -> expected path where ts_end is set and later read.\\n\",\n                (long)now,\n                stage);\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /* Log entry and parameters */\n    OS_SelectMultiple_LogProbe(ReadSet, WriteSet, msecs, \"ENTRY\", 0);\n\n    /*\n     * Preserve the original behaviour exactly: call the platform-specific\n     * implementation and return its result.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    /* Log exit and return value */\n    OS_SelectMultiple_LogProbe(ReadSet, WriteSet, msecs, \"EXIT\", return_code);\n\n    return return_code;\n}\n"
}