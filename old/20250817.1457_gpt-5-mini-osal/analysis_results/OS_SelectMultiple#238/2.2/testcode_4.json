{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_API_Init() there is a switch over idtype whose default arm contains only \"break;\" (i.e. \"default: break;\"). That break is executed only if none of the case labels match, but it has no effect on program flow because control would fall out of the switch in the same way if the default arm were removed. Thus the operation is executed but removable without changing program behaviour, constituting dead code and violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectMultiple code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1906.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectMultiple as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectMultiple:\n```c\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"ReadSet\" and \"WriteSet\" are not checked, because in certain configurations they can be validly null.\n     */\n\n    /*\n     * This does not currently increment any refcounts.\n     * That means a file/socket can be closed while actively inside a\n     * OS_SelectMultiple() call in another thread.\n     */\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectMultiple code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <inttypes.h>\n\n/* Forward declarations/types assumed to exist in the original project. */\n/* These are NOT definitions; they match the original signature so this file can be linked into the project. */\n/* typedef struct OS_FdSet OS_FdSet; */\n/* int32 OS_SelectMultiple_Impl(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs); */\n\n/* Helper probe: append a timestamped message to the log file. */\nstatic void OS_Probe_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1906.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Best effort logging only. */\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm *tm_info = localtime(&t);\n    if (tm_info != NULL)\n    {\n        char buf[32];\n        if (strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm_info) > 0)\n        {\n            fprintf(fp, \"[%s] \", buf);\n        }\n    }\n\n    /* Message */\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"ReadSet\" and \"WriteSet\" are not checked, because in certain configurations they can be validly null.\n     */\n\n    /*\n     * This does not currently increment any refcounts.\n     * That means a file/socket can be closed while actively inside a\n     * OS_SelectMultiple() call in another thread.\n     */\n\n    /* Probe: log entry and input state so other agents can reproduce/control the scenario. */\n    OS_Probe_Log(\"OS_SelectMultiple entry: ReadSet=%p WriteSet=%p msecs=%\" PRId32,\n                 (void *)ReadSet, (void *)WriteSet, msecs);\n\n    /*\n     * NOTE (investigation aid): The reported MISRA Rule 2.2 violation referenced\n     * a separate function OS_API_Init() whose switch(default) arm contains only\n     * \"break;\". That default break is executed but removable without changing\n     * behaviour. This probe cannot inspect OS_API_Init() internals, but records\n     * that this API was exercised so the timeline can be correlated with logs\n     * from OS_API_Init (if those are also instrumented).\n     */\n    OS_Probe_Log(\"Probe note: OS_SelectMultiple called; if OS_API_Init default: break scenario occurred earlier, correlate timestamps in /tmp/logs/1906.txt\");\n\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    /* Probe: log return and relevant state after call. */\n    OS_Probe_Log(\"OS_SelectMultiple exit: return_code=%\" PRId32, return_code);\n\n    return return_code;\n}\n"
}