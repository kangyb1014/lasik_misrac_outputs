{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_Probe_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1906.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Best effort logging only. */\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm *tm_info = localtime(&t);\n    if (tm_info != NULL)\n    {\n        char buf[32];\n        if (strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm_info) > 0)\n        {\n            fprintf(fp, \"[%s] \", buf);\n        }\n    }\n\n    /* Message */\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /*\n     * Check parameters\n     *\n     * Note \"ReadSet\" and \"WriteSet\" are not checked, because in certain configurations they can be validly null.\n     */\n\n    /*\n     * This does not currently increment any refcounts.\n     * That means a file/socket can be closed while actively inside a\n     * OS_SelectMultiple() call in another thread.\n     */\n\n    /* Probe: log entry and input state so other agents can reproduce/control the scenario. */\n    OS_Probe_Log(\"OS_SelectMultiple entry: ReadSet=%p WriteSet=%p msecs=%\" PRId32,\n                 (void *)ReadSet, (void *)WriteSet, msecs);\n\n    /*\n     * NOTE (investigation aid): The reported MISRA Rule 2.2 violation referenced\n     * a separate function OS_API_Init() whose switch(default) arm contains only\n     * \"break;\". That default break is executed but removable without changing\n     * behaviour. This probe cannot inspect OS_API_Init() internals, but records\n     * that this API was exercised so the timeline can be correlated with logs\n     * from OS_API_Init (if those are also instrumented).\n     */\n    OS_Probe_Log(\"Probe note: OS_SelectMultiple called; if OS_API_Init default: break scenario occurred earlier, correlate timestamps in /tmp/logs/1906.txt\");\n\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    /* Probe: log return and relevant state after call. */\n    OS_Probe_Log(\"OS_SelectMultiple exit: return_code=%\" PRId32, return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmps84mwlkv/src/src/os/shared/src/osapi-select.c: In function 'OS_Probe_Log':\n/tmp/tmps84mwlkv/src/src/os/shared/src/osapi-select.c:114:23: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  114 |     vfprintf(fp, fmt, ap);\n      |                       ^~\n/tmp/tmps84mwlkv/src/src/os/shared/src/osapi-select.c: In function 'OS_SelectMultiple':\n/tmp/tmps84mwlkv/src/src/os/shared/src/osapi-select.c:138:75: error: expected ')' before 'PRId32'\n  138 |     OS_Probe_Log(\"OS_SelectMultiple entry: ReadSet=%p WriteSet=%p msecs=%\" PRId32,\n      |                 ~                                                         ^~~~~~~\n      |                                                                           )\n/tmp/tmps84mwlkv/src/src/os/shared/src/osapi-select.c:53:1: note: 'PRId32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   52 | #include \"os-shared-select.h\"\n  +++ |+#include <inttypes.h>\n   53 | \n/tmp/tmps84mwlkv/src/src/os/shared/src/osapi-select.c:154:57: error: expected ')' before 'PRId32'\n  154 |     OS_Probe_Log(\"OS_SelectMultiple exit: return_code=%\" PRId32, return_code);\n      |                 ~                                       ^~~~~~~\n      |                                                         )\n/tmp/tmps84mwlkv/src/src/os/shared/src/osapi-select.c:154:58: note: 'PRId32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  154 |     OS_Probe_Log(\"OS_SelectMultiple exit: return_code=%\" PRId32, return_code);\n      |                                                          ^~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-select.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-select.dir/__/__/os/shared/src/osapi-select.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:4159: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-select.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SelectMultiple as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Minimal types/prototypes so this file compiles standalone while preserving original logic. */\ntypedef int32_t int32;\ntypedef struct OS_FdSet { int dummy; } OS_FdSet;\n\n/* Implementation is provided elsewhere; only the prototype is needed here. */\nint32 OS_SelectMultiple_Impl(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs);\n\nstatic void OS_Probe_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1906.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Best effort logging only. */\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm *tm_info = localtime(&t);\n    if (tm_info != NULL)\n    {\n        char buf[32];\n        if (strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm_info) > 0)\n        {\n            fprintf(fp, \"[%s] \", buf);\n        }\n    }\n\n    /* Message */\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast to (va_list) to avoid potential typedef mismatches in some build environments. */\n    vfprintf(fp, fmt, (va_list)ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_SelectMultiple(OS_FdSet *ReadSet, OS_FdSet *WriteSet, int32 msecs)\n{\n    int32 return_code;\n\n    /* Probe: log entry and input state so other agents can reproduce/control the scenario. */\n    OS_Probe_Log(\"OS_SelectMultiple entry: ReadSet=%p WriteSet=%p msecs=%\" PRId32,\n                 (void *)ReadSet, (void *)WriteSet, msecs);\n\n    /*\n     * NOTE (investigation aid): The reported MISRA Rule 2.2 violation referenced\n     * a separate function OS_API_Init() whose switch(default) arm contains only\n     * \"break;\". That default break is executed but removable without changing\n     * behaviour. This probe cannot inspect OS_API_Init() internals, but records\n     * that this API was exercised so the timeline can be correlated with logs\n     * from OS_API_Init (if those are also instrumented).\n     */\n    OS_Probe_Log(\"Probe note: OS_SelectMultiple called; if OS_API_Init default: break scenario occurred earlier, correlate timestamps in /tmp/logs/1906.txt\");\n\n    return_code = OS_SelectMultiple_Impl(ReadSet, WriteSet, msecs);\n\n    /* Probe: log return and relevant state after call. */\n    OS_Probe_Log(\"OS_SelectMultiple exit: return_code=%\" PRId32, return_code);\n\n    return return_code;\n}\n",
  "explanation": "Fixes applied:\n- Added the necessary standard headers: <stdio.h>, <stdarg.h>, <time.h>, <stdint.h>, and <inttypes.h>. The <inttypes.h> inclusion resolves the PRId32 macro usage errors.\n- Added minimal type definitions (typedef int32_t int32; and a simple OS_FdSet struct) and a prototype for OS_SelectMultiple_Impl so the file compiles standalone while preserving original logic.\n- Used an explicit cast (va_list)ap when calling vfprintf to avoid potential typedef mismatches between different va_list typedefs in some build environments.\nThese changes keep the original behavior and logging logic intact while resolving the compilation errors."
}