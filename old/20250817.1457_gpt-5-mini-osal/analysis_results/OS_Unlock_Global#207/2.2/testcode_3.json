{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe if (ret != 0) block contains only OS_DEBUG(...) but OS_DEBUG is defined as an empty macro. As a result the strerror call and the debug output are removed by the preprocessor and the if body has no side effects. The conditional and its evaluation therefore execute but have no effect on program behaviour \u2014 they can be removed without changing behaviour. This is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Unlock_Global code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1658.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Unlock_Global as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Unlock_Global:\n```c\nvoid OS_Unlock_Global(OS_object_token_t *token)\n{\n    OS_objtype_state_t *objtype;\n\n    if (token->obj_type < OS_OBJECT_TYPE_USER && token->lock_mode != OS_LOCK_MODE_NONE)\n    {\n        objtype = &OS_objtype_state[token->obj_type];\n\n        /*\n         * Un-track ownership of this table.  It should only be owned by one\n         * task at a time, and this aids in recovery if the owning task is\n         * deleted or experiences an exception causing it to not be freed.\n         *\n         * This is done before unlocking, while this has exclusive access\n         * to the state object.\n         */\n        if ((objtype->owner_key.key_value & 0xFF000000) != OS_LOCK_KEY_FIXED_VALUE ||\n            objtype->owner_key.key_value != token->lock_key.key_value)\n        {\n            /* this is almost certainly a bug */\n            OS_DEBUG(\"ERROR: global %u released using mismatched key=0x%lx expected=0x%lx\\n\",\n                     (unsigned int)token->obj_type, (unsigned long)token->lock_key.key_value,\n                     (unsigned long)objtype->owner_key.key_value);\n        }\n\n        objtype->owner_key = OS_LOCK_KEY_INVALID;\n        token->lock_key    = OS_LOCK_KEY_INVALID;\n\n        OS_Unlock_Global_Impl(token->obj_type);\n    }\n    else\n    {\n        OS_DEBUG(\"ERROR: cannot unlock global %u for mode %u\\n\", (unsigned int)token->obj_type,\n                 (unsigned int)token->lock_mode);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_Unlock_Global code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe logging helper. Appends human-readable logs to /tmp/logs/1658.txt.\n * Kept static to avoid external linkage. Does not alter program logic aside\n * from producing side-effectful logs to assist in reproducing the scenario.\n */\nstatic void __os_unlock_log(const char *fmt, ...)\n{\n    va_list ap;\n    char buf[512];\n\n    va_start(ap, fmt);\n    (void)vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n\n    FILE *f = fopen(\"/tmp/logs/1658.txt\", \"a\");\n    if (f)\n    {\n        /* write a single line for easier parsing */\n        (void)fprintf(f, \"%s\\n\", buf);\n        (void)fclose(f);\n    }\n}\n\nvoid OS_Unlock_Global(OS_object_token_t *token)\n{\n    OS_objtype_state_t *objtype;\n\n    __os_unlock_log(\"ENTER: OS_Unlock_Global token=%p obj_type=%u lock_mode=%u lock_key=0x%lx\",\n                    (void *)token,\n                    (unsigned int)token->obj_type,\n                    (unsigned int)token->lock_mode,\n                    (unsigned long)token->lock_key.key_value);\n\n    if (token->obj_type < OS_OBJECT_TYPE_USER && token->lock_mode != OS_LOCK_MODE_NONE)\n    {\n        __os_unlock_log(\"BRANCH: unlocking global for obj_type=%u\", (unsigned int)token->obj_type);\n\n        objtype = &OS_objtype_state[token->obj_type];\n\n        /*\n         * Un-track ownership of this table.  It should only be owned by one\n         * task at a time, and this aids in recovery if the owning task is\n         * deleted or experiences an exception causing it to not be freed.\n         *\n         * This is done before unlocking, while this has exclusive access\n         * to the state object.\n         */\n        if ((objtype->owner_key.key_value & 0xFF000000) != OS_LOCK_KEY_FIXED_VALUE ||\n            objtype->owner_key.key_value != token->lock_key.key_value)\n        {\n            /* this is almost certainly a bug */\n            __os_unlock_log(\"MISMATCH_DETECTED: obj_type=%u owner_key=0x%lx token_lock_key=0x%lx\",\n                            (unsigned int)token->obj_type,\n                            (unsigned long)objtype->owner_key.key_value,\n                            (unsigned long)token->lock_key.key_value);\n\n            OS_DEBUG(\"ERROR: global %u released using mismatched key=0x%lx expected=0x%lx\\n\",\n                     (unsigned int)token->obj_type, (unsigned long)token->lock_key.key_value,\n                     (unsigned long)objtype->owner_key.key_value);\n\n            /* Log that OS_DEBUG was invoked at this site (even if OS_DEBUG expands to nothing) */\n            __os_unlock_log(\"CALLED_OS_DEBUG: mismatched-key message for obj_type=%u\",\n                            (unsigned int)token->obj_type);\n        }\n\n        __os_unlock_log(\"BEFORE_CLEAR_KEYS: obj_type=%u owner_key=0x%lx token_lock_key=0x%lx\",\n                        (unsigned int)token->obj_type,\n                        (unsigned long)objtype->owner_key.key_value,\n                        (unsigned long)token->lock_key.key_value);\n\n        objtype->owner_key = OS_LOCK_KEY_INVALID;\n        token->lock_key    = OS_LOCK_KEY_INVALID;\n\n        __os_unlock_log(\"AFTER_CLEAR_KEYS: obj_type=%u owner_key=0x%lx token_lock_key=0x%lx\",\n                        (unsigned int)token->obj_type,\n                        (unsigned long)objtype->owner_key.key_value,\n                        (unsigned long)token->lock_key.key_value);\n\n        OS_Unlock_Global_Impl(token->obj_type);\n\n        __os_unlock_log(\"EXIT_BRANCH: unlocked global obj_type=%u\", (unsigned int)token->obj_type);\n    }\n    else\n    {\n        __os_unlock_log(\"BRANCH_ELSE: cannot unlock global obj_type=%u lock_mode=%u\",\n                        (unsigned int)token->obj_type,\n                        (unsigned int)token->lock_mode);\n\n        OS_DEBUG(\"ERROR: cannot unlock global %u for mode %u\\n\", (unsigned int)token->obj_type,\n                 (unsigned int)token->lock_mode);\n\n        /* Record that the error-path OS_DEBUG was invoked */\n        __os_unlock_log(\"CALLED_OS_DEBUG: cannot-unlock message for obj_type=%u lock_mode=%u\",\n                        (unsigned int)token->obj_type,\n                        (unsigned int)token->lock_mode);\n    }\n\n    __os_unlock_log(\"EXIT: OS_Unlock_Global token=%p\", (void *)token);\n}\n"
}