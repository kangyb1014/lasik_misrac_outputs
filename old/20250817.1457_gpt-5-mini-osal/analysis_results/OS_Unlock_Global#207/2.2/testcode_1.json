{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe conditional block only contains an OS_DEBUG() call, and OS_DEBUG is defined as an empty macro. Thus the if-body performs no observable action at runtime; evaluating the condition and executing the empty branch can be removed without changing program behaviour, which constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Unlock_Global code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1658.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Unlock_Global as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Unlock_Global:\n```c\nvoid OS_Unlock_Global(OS_object_token_t *token)\n{\n    OS_objtype_state_t *objtype;\n\n    if (token->obj_type < OS_OBJECT_TYPE_USER && token->lock_mode != OS_LOCK_MODE_NONE)\n    {\n        objtype = &OS_objtype_state[token->obj_type];\n\n        /*\n         * Un-track ownership of this table.  It should only be owned by one\n         * task at a time, and this aids in recovery if the owning task is\n         * deleted or experiences an exception causing it to not be freed.\n         *\n         * This is done before unlocking, while this has exclusive access\n         * to the state object.\n         */\n        if ((objtype->owner_key.key_value & 0xFF000000) != OS_LOCK_KEY_FIXED_VALUE ||\n            objtype->owner_key.key_value != token->lock_key.key_value)\n        {\n            /* this is almost certainly a bug */\n            OS_DEBUG(\"ERROR: global %u released using mismatched key=0x%lx expected=0x%lx\\n\",\n                     (unsigned int)token->obj_type, (unsigned long)token->lock_key.key_value,\n                     (unsigned long)objtype->owner_key.key_value);\n        }\n\n        objtype->owner_key = OS_LOCK_KEY_INVALID;\n        token->lock_key    = OS_LOCK_KEY_INVALID;\n\n        OS_Unlock_Global_Impl(token->obj_type);\n    }\n    else\n    {\n        OS_DEBUG(\"ERROR: cannot unlock global %u for mode %u\\n\", (unsigned int)token->obj_type,\n                 (unsigned int)token->lock_mode);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_Unlock_Global code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Minimal type and constant substitutes so this file compiles standalone. */\nenum { MAX_OBJTYPE = 256 };\n\ntypedef struct\n{\n    uint32_t key_value;\n} OS_lock_key_t;\n\ntypedef struct\n{\n    unsigned int obj_type;\n    unsigned int lock_mode;\n    OS_lock_key_t lock_key;\n} OS_object_token_t;\n\ntypedef struct\n{\n    OS_lock_key_t owner_key;\n} OS_objtype_state_t;\n\n/* Constants matching the semantics used by the target code. */\nenum\n{\n    OS_OBJECT_TYPE_USER = 200,\n    OS_LOCK_MODE_NONE = 0,\n    OS_LOCK_KEY_FIXED_VALUE = 0xAB000000U\n};\n\nconst OS_lock_key_t OS_LOCK_KEY_INVALID = { 0U };\n\n/* Global state array used by OS_Unlock_Global. */\nstatic OS_objtype_state_t OS_objtype_state[MAX_OBJTYPE];\n\n/* The real implementation would be provided elsewhere; provide a simple stub. */\nvoid OS_Unlock_Global_Impl(unsigned int obj_type)\n{\n    /* preserve original behaviour: do nothing here for the test stub */\n    (void)obj_type;\n}\n\n/* Emulate the OS_DEBUG macro being empty in the reported scenario. */\nvoid OS_DEBUG(const char *fmt, ...) { (void)fmt; }\n\n/* Probe logger that records control flow and state to the required file. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1658.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm *tm = localtime(&t);\n    if (tm != NULL)\n    {\n        fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \", tm->tm_year + 1900, tm->tm_mon + 1,\n                tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified OS_Unlock_Global with logging probes inserted. */\nvoid OS_Unlock_Global(OS_object_token_t *token)\n{\n    OS_objtype_state_t *objtype;\n\n    /* Log entry and token basic state */\n    if (token == NULL)\n    {\n        probe_log(\"OS_Unlock_Global: token is NULL\");\n        return;\n    }\n\n    probe_log(\"OS_Unlock_Global: entry obj_type=%u lock_mode=%u lock_key=0x%08lx\",\n              (unsigned int)token->obj_type, (unsigned int)token->lock_mode,\n              (unsigned long)token->lock_key.key_value);\n\n    if (token->obj_type < OS_OBJECT_TYPE_USER && token->lock_mode != OS_LOCK_MODE_NONE)\n    {\n        probe_log(\"OS_Unlock_Global: condition true (obj_type < OS_OBJECT_TYPE_USER && lock_mode != NONE)\");\n\n        objtype = &OS_objtype_state[token->obj_type];\n\n        /*\n         * Un-track ownership of this table.  It should only be owned by one\n         * task at a time, and this aids in recovery if the owning task is\n         * deleted or experiences an exception causing it to not be freed.\n         *\n         * This is done before unlocking, while this has exclusive access\n         * to the state object.\n         */\n        if ((objtype->owner_key.key_value & 0xFF000000) != OS_LOCK_KEY_FIXED_VALUE ||\n            objtype->owner_key.key_value != token->lock_key.key_value)\n        {\n            /* this is almost certainly a bug */\n            /* Probe log before the (empty) OS_DEBUG to capture state */\n            probe_log(\"MISMATCHED KEY: global=%u released using mismatched key=0x%lx expected=0x%lx\",\n                      (unsigned int)token->obj_type,\n                      (unsigned long)token->lock_key.key_value,\n                      (unsigned long)objtype->owner_key.key_value);\n\n            /* Call OS_DEBUG as in original code (here it is an empty stub) */\n            OS_DEBUG(\"ERROR: global %u released using mismatched key=0x%lx expected=0x%lx\\n\",\n                     (unsigned int)token->obj_type, (unsigned long)token->lock_key.key_value,\n                     (unsigned long)objtype->owner_key.key_value);\n        }\n\n        /* Log the state just before clearing ownership */\n        probe_log(\"Clearing ownership: obj_type=%u old_owner=0x%lx old_token_key=0x%lx\",\n                  (unsigned int)token->obj_type,\n                  (unsigned long)objtype->owner_key.key_value,\n                  (unsigned long)token->lock_key.key_value);\n\n        objtype->owner_key = OS_LOCK_KEY_INVALID;\n        token->lock_key    = OS_LOCK_KEY_INVALID;\n\n        probe_log(\"Ownership cleared: obj_type=%u new_owner=0x%lx new_token_key=0x%lx\",\n                  (unsigned int)token->obj_type,\n                  (unsigned long)objtype->owner_key.key_value,\n                  (unsigned long)token->lock_key.key_value);\n\n        OS_Unlock_Global_Impl(token->obj_type);\n\n        probe_log(\"OS_Unlock_Global: exit (unlocked) obj_type=%u\", (unsigned int)token->obj_type);\n    }\n    else\n    {\n        probe_log(\"OS_Unlock_Global: condition false -> entering else branch: obj_type=%u lock_mode=%u\",\n                  (unsigned int)token->obj_type, (unsigned int)token->lock_mode);\n\n        /* Mirror original behaviour: call OS_DEBUG (empty stub) and also log */\n        probe_log(\"ERROR: cannot unlock global %u for mode %u\",\n                  (unsigned int)token->obj_type, (unsigned int)token->lock_mode);\n\n        OS_DEBUG(\"ERROR: cannot unlock global %u for mode %u\\n\", (unsigned int)token->obj_type,\n                 (unsigned int)token->lock_mode);\n    }\n}\n"
}