{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe memset(&ts_end, 0, sizeof(ts_end)) is executed only when msecs <= 0. In those cases ts_end is never subsequently read: when msecs < 0 the code uses tvptr = NULL, and when msecs == 0 the code sets tv explicitly to zero and does not reference ts_end. Thus the memset has no effect on observable program behaviour and could be removed without changing behaviour \u2014 it is an executed assignment that is effectively dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DoSelect code that contains useful probe functions that print useful logs to a file \"/tmp/logs/626.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DoSelect as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DoSelect:\n```c\nstatic int32 OS_DoSelect(int maxfd, fd_set *rd_set, fd_set *wr_set, int32 msecs)\n{\n    int             os_status;\n    int32           return_code;\n    struct timeval  tv;\n    struct timeval *tvptr;\n    struct timespec ts_now;\n    struct timespec ts_end;\n\n    if (msecs > 0)\n    {\n        clock_gettime(CLOCK_MONOTONIC, &ts_now);\n        ts_end.tv_sec  = ts_now.tv_sec + (msecs / 1000);\n        ts_end.tv_nsec = ts_now.tv_nsec + (1000000 * (msecs % 1000));\n        if (ts_end.tv_nsec >= 1000000000)\n        {\n            ++ts_end.tv_sec;\n            ts_end.tv_nsec -= 1000000000;\n        }\n    }\n    else\n    {\n        /* Zero for consistency and to avoid possible confusion if not cleared */\n        memset(&ts_end, 0, sizeof(ts_end));\n    }\n\n    do\n    {\n        if (msecs < 0)\n        {\n            tvptr = NULL;\n        }\n        else if (msecs == 0)\n        {\n            tvptr      = &tv;\n            tv.tv_sec  = 0;\n            tv.tv_usec = 0;\n        }\n        else\n        {\n            tvptr = &tv;\n\n            clock_gettime(CLOCK_MONOTONIC, &ts_now);\n\n            /* note that the tv_sec and tv_usec/tv_nsec values are all signed longs, so OK to subtract */\n            tv.tv_sec  = ts_end.tv_sec - ts_now.tv_sec;\n            tv.tv_usec = (ts_end.tv_nsec - ts_now.tv_nsec) / 1000;\n\n            if (tv.tv_sec < 0 || (tv.tv_sec == 0 && tv.tv_usec < 0))\n            {\n                os_status = 0;\n                break;\n            }\n\n            if (tv.tv_usec < 0)\n            {\n                tv.tv_usec += 1000000;\n                --tv.tv_sec;\n            }\n        }\n\n        os_status = select(maxfd + 1, rd_set, wr_set, NULL, tvptr);\n    } while (os_status < 0 && (errno == EINTR || errno == EAGAIN));\n\n    if (os_status < 0)\n    {\n        return_code = OS_ERROR;\n    }\n    else if (os_status == 0)\n    {\n        return_code = OS_ERROR_TIMEOUT;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DoSelect code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <time.h>\n#include <errno.h>\n#include <stdarg.h>\n#include <sys/select.h>\n\n/*\n * Wrapped logging helpers that append probe information to /tmp/logs/626.txt.\n * Logging may change errno; callers that need to preserve errno should capture it\n * to a local variable before calling these helpers.\n */\nstatic void probe_log_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/626.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void probe_log_ts(const char *label, const struct timespec *ts)\n{\n    if (ts == NULL)\n    {\n        probe_log_printf(\"%s: NULL\", label);\n    }\n    else\n    {\n        probe_log_printf(\"%s: tv_sec=%ld tv_nsec=%ld\", label, (long)ts->tv_sec, (long)ts->tv_nsec);\n    }\n}\n\nstatic void probe_log_tv(const char *label, const struct timeval *tv)\n{\n    if (tv == NULL)\n    {\n        probe_log_printf(\"%s: NULL\", label);\n    }\n    else\n    {\n        probe_log_printf(\"%s: tv_sec=%ld tv_usec=%ld\", label, (long)tv->tv_sec, (long)tv->tv_usec);\n    }\n}\n\nstatic int32 OS_DoSelect(int maxfd, fd_set *rd_set, fd_set *wr_set, int32 msecs)\n{\n    int             os_status;\n    int32           return_code;\n    struct timeval  tv;\n    struct timeval *tvptr;\n    struct timespec ts_now;\n    struct timespec ts_end;\n\n    /* Log entry and input parameters */\n    probe_log_printf(\"OS_DoSelect ENTRY: maxfd=%d msecs=%d rd_set=%p wr_set=%p\", maxfd, (int)msecs, (void *)rd_set, (void *)wr_set);\n\n    if (msecs > 0)\n    {\n        clock_gettime(CLOCK_MONOTONIC, &ts_now);\n        ts_end.tv_sec  = ts_now.tv_sec + (msecs / 1000);\n        ts_end.tv_nsec = ts_now.tv_nsec + (1000000 * (msecs % 1000));\n        if (ts_end.tv_nsec >= 1000000000)\n        {\n            ++ts_end.tv_sec;\n            ts_end.tv_nsec -= 1000000000;\n        }\n\n        /* Log computed end time when msecs > 0 */\n        probe_log_ts(\"Computed ts_end (msecs>0)\", &ts_end);\n    }\n    else\n    {\n        /* Zero for consistency and to avoid possible confusion if not cleared */\n        memset(&ts_end, 0, sizeof(ts_end));\n\n        /* Log the fact that memset was executed and ts_end contents. This is\n         * critical to reproduce the reported violation scenario where the memset\n         * has no observable effect. Capture the state that results from the call. */\n        probe_log_printf(\"Performed memset(&ts_end, 0, sizeof(ts_end)) because msecs=%d\", (int)msecs);\n        probe_log_ts(\"ts_end after memset\", &ts_end);\n    }\n\n    /* Prepare to loop; we will capture errno immediately after select to\n     * avoid accidental modification by logging calls when deciding whether to\n     * retry on EINTR/EAGAIN. */\n    int saved_errno = 0;\n\n    do\n    {\n        /* Log start of loop iteration */\n        probe_log_printf(\"Loop start: msecs=%d\", (int)msecs);\n\n        if (msecs < 0)\n        {\n            tvptr = NULL;\n            probe_log_printf(\"Branch: msecs < 0 -> using tvptr = NULL\");\n        }\n        else if (msecs == 0)\n        {\n            tvptr      = &tv;\n            tv.tv_sec  = 0;\n            tv.tv_usec = 0;\n            probe_log_printf(\"Branch: msecs == 0 -> using zero tv\");\n            probe_log_tv(\"tv\", &tv);\n        }\n        else\n        {\n            tvptr = &tv;\n\n            clock_gettime(CLOCK_MONOTONIC, &ts_now);\n\n            /* note that the tv_sec and tv_usec/tv_nsec values are all signed longs, so OK to subtract */\n            tv.tv_sec  = ts_end.tv_sec - ts_now.tv_sec;\n            tv.tv_usec = (ts_end.tv_nsec - ts_now.tv_nsec) / 1000;\n\n            if (tv.tv_sec < 0 || (tv.tv_sec == 0 && tv.tv_usec < 0))\n            {\n                os_status = 0;\n                probe_log_printf(\"Timeout already expired (tv computed negative): tv_sec=%ld tv_usec=%ld\", (long)tv.tv_sec, (long)tv.tv_usec);\n                break;\n            }\n\n            if (tv.tv_usec < 0)\n            {\n                tv.tv_usec += 1000000;\n                --tv.tv_sec;\n            }\n\n            probe_log_printf(\"Computed tv for select from ts_end and ts_now\");\n            probe_log_ts(\"ts_now\", &ts_now);\n            probe_log_ts(\"ts_end\", &ts_end);\n            probe_log_tv(\"tv\", &tv);\n        }\n\n        probe_log_printf(\"About to call select(maxfd+1=%d, rd_set=%p, wr_set=%p, tvptr=%p)\", maxfd + 1, (void *)rd_set, (void *)wr_set, (void *)tvptr);\n\n        os_status = select(maxfd + 1, rd_set, wr_set, NULL, tvptr);\n\n        /* Capture errno immediately after select so that subsequent logging\n         * does not alter the value used for the retry decision. */\n        saved_errno = errno;\n\n        /* Now safe to log the select result and errno using the captured value. */\n        probe_log_printf(\"select returned os_status=%d saved_errno=%d\", os_status, saved_errno);\n\n    } while (os_status < 0 && (saved_errno == EINTR || saved_errno == EAGAIN));\n\n    if (os_status < 0)\n    {\n        probe_log_printf(\"Final outcome: os_status < 0 -> OS_ERROR (errno=%d)\", errno);\n        return_code = OS_ERROR;\n    }\n    else if (os_status == 0)\n    {\n        probe_log_printf(\"Final outcome: os_status == 0 -> OS_ERROR_TIMEOUT\");\n        return_code = OS_ERROR_TIMEOUT;\n    }\n    else\n    {\n        probe_log_printf(\"Final outcome: os_status > 0 -> OS_SUCCESS\");\n        return_code = OS_SUCCESS;\n    }\n\n    probe_log_printf(\"OS_DoSelect EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}