{
  "user_message": "Target function code is:\n```c\nstatic int32 OS_DoSelect(int maxfd, fd_set *rd_set, fd_set *wr_set, int32 msecs)\n{\n    int             os_status;\n    int32           return_code;\n    struct timeval  tv;\n    struct timeval *tvptr;\n    struct timespec ts_now;\n    struct timespec ts_end;\n\n    if (msecs > 0)\n    {\n        clock_gettime(CLOCK_MONOTONIC, &ts_now);\n        ts_end.tv_sec  = ts_now.tv_sec + (msecs / 1000);\n        ts_end.tv_nsec = ts_now.tv_nsec + (1000000 * (msecs % 1000));\n        if (ts_end.tv_nsec >= 1000000000)\n        {\n            ++ts_end.tv_sec;\n            ts_end.tv_nsec -= 1000000000;\n        }\n    }\n    else\n    {\n        /* Zero for consistency and to avoid possible confusion if not cleared */\n        memset(&ts_end, 0, sizeof(ts_end));\n    }\n\n    do\n    {\n        if (msecs < 0)\n        {\n            tvptr = NULL;\n        }\n        else if (msecs == 0)\n        {\n            tvptr      = &tv;\n            tv.tv_sec  = 0;\n            tv.tv_usec = 0;\n        }\n        else\n        {\n            tvptr = &tv;\n\n            clock_gettime(CLOCK_MONOTONIC, &ts_now);\n\n            /* note that the tv_sec and tv_usec/tv_nsec values are all signed longs, so OK to subtract */\n            tv.tv_sec  = ts_end.tv_sec - ts_now.tv_sec;\n            tv.tv_usec = (ts_end.tv_nsec - ts_now.tv_nsec) / 1000;\n\n            if (tv.tv_sec < 0 || (tv.tv_sec == 0 && tv.tv_usec < 0))\n            {\n                os_status = 0;\n                break;\n            }\n\n            if (tv.tv_usec < 0)\n            {\n                tv.tv_usec += 1000000;\n                --tv.tv_sec;\n            }\n        }\n\n        os_status = select(maxfd + 1, rd_set, wr_set, NULL, tvptr);\n    } while (os_status < 0 && (errno == EINTR || errno == EAGAIN));\n\n    if (os_status < 0)\n    {\n        return_code = OS_ERROR;\n    }\n    else if (os_status == 0)\n    {\n        return_code = OS_ERROR_TIMEOUT;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'OS_DoSelect': {'callees': [], 'callers': ['OS_SelectSingle_Impl', 'OS_SelectMultiple_Impl']}, 'OS_SelectSingle_Impl': {'callees': ['OS_ObjectIndexFromToken', 'OS_DoSelect'], 'callers': ['OS_GenericRead_Impl', 'OS_GenericWrite_Impl', 'OS_SocketConnect_Impl', 'OS_SocketAccept_Impl', 'OS_SocketRecvFrom_Impl', 'OS_SelectSingle']}, 'OS_SelectMultiple_Impl': {'callees': ['OS_FdSet_ConvertIn_Impl', 'OS_DoSelect', 'OS_FdSet_ConvertOut_Impl'], 'callers': ['OS_SelectMultiple']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA for loop shall be well-formed. The three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "clock_gettime",
    "CLOCK_MONOTONIC",
    "select",
    "memset",
    "errno",
    "EINTR",
    "EAGAIN",
    "fd_set",
    "struct timeval",
    "struct timespec",
    "OS_ERROR",
    "OS_ERROR_TIMEOUT",
    "OS_SUCCESS"
  ],
  "explanation": "Goal: determine whether any for-loop in OS_DoSelect (or functions it calls when invoked inside a for-loop body) would violate MISRA's well-formed for-loop constraints. Practical notes: OS_DoSelect itself contains no for statements, so strictly speaking no extra symbols are required to decide that this function does not directly violate the MISRA for-loop rule. However, the MISRA rule treats the behaviour of called functions as part of a for-loop body, so to be complete we must know whether any called symbol could (a) contain a for loop that modifies an external loop counter or other objects modified in a surrounding for loop, or (b) have persistent side-effects that would make a for-loop's second/third clause invalid.\n\nWhy each symbol is needed:\n- clock_gettime: one of the functions called by OS_DoSelect. If OS_DoSelect were invoked inside a for-loop body, clock_gettime's implementation could contain for-loops or modify objects visible to the outer loop. Need its specification/implementation to assess side-effects and internal loop counters.\n- CLOCK_MONOTONIC: constant/macro passed to clock_gettime; include to resolve whether it expands to anything with side-effects (normally not, but check definitions/macros in the build).\n- select: the blocking I/O call used inside OS_DoSelect. If called from within a for-loop body, select's implementation (or any wrapper macro) could have loops or side-effects; need its definition/semantics for the MISRA analysis.\n- memset: used to clear ts_end. Although a C library function it could be a macro or inline with loops; include to ensure it does not introduce forbidden loop-counter modifications when considered part of a for-loop body.\n- errno: the global (macro/variable). The do-while checks errno. If a for-loop used errno in its clauses or if called functions modify errno, that could affect whether the second-clause has persistent side-effects; need to know its linkage/semantics.\n- EINTR, EAGAIN: macros/constants compared against errno in the loop condition. Include to ensure they are plain constants and do not expand to expressions with side-effects.\n- fd_set: parameter type passed to select. Its macros/operations (if any used elsewhere) could involve loops or side-effects that matter in a for-loop context; include to resolve whether operations on it modify loop counters or other objects.\n- struct timeval, struct timespec: types used to build the timeout. Include in order to check whether any operations or helpers (macros/inline functions) that manipulate these objects (or their fields) have hidden for-loops or modify external objects.\n- OS_ERROR, OS_ERROR_TIMEOUT, OS_SUCCESS: return-code macros/constants used by OS_DoSelect. Include to ensure they are simple constants/macros and do not expand to constructs (e.g., expressions with side-effects or loops) that would affect compliance if the function were used inside a for-loop body.\n\nSummary: Because OS_DoSelect itself contains no for loops, there is no direct MISRA for-loop violation to find in this function alone. To fully satisfy the MISRA requirement in contexts where OS_DoSelect might be called inside a for-loop body, the above symbols/functions must be inspected for hidden loops or side-effects that could interact with a surrounding for-loop's counter or clauses."
}