{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts away const: 'name' is declared as 'const char *name' in OS_ObjectIdAllocateNew but is passed as (void *)name to OS_ObjectIdFindNextMatch. This removes the const-qualification from the pointer and allows the callee to treat the data as modifiable. According to MISRA C 2023 Rule 8.13 a pointer should be to a const-qualified type whenever possible. The correct fix is to change the callee/signature to accept a 'const void *' (or otherwise preserve const) instead of taking a plain 'void *'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1835.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueCreate:\n```c\nint32 OS_QueueCreate(osal_id_t *queue_id, const char *queue_name, osal_blockcount_t queue_depth, size_t data_size,\n                     uint32 flags)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_queue_internal_record_t *queue;\n\n    /* validate inputs */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_APINAME(queue_name);\n    OS_CHECK_SIZE(data_size);\n    ARGCHECK(queue_depth <= OS_QUEUE_MAX_DEPTH, OS_QUEUE_INVALID_SIZE);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, queue_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, queue, queue_name, queue_name);\n\n        queue->max_depth = queue_depth;\n        queue->max_size  = data_size;\n\n        /* Now call the OS-specific implementation.  This reads info from the queue table. */\n        return_code = OS_QueueCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, queue_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/*\n * Probe/logging helpers - write simple logs to /tmp/logs/1835.txt.\n * These helpers do not alter program logic and avoid casting away const qualifiers.\n */\nstatic void os_queue_log_impl(const char *buf)\n{\n    FILE *f = fopen(\"/tmp/logs/1835.txt\", \"a\");\n    if (f)\n    {\n        (void)fputs(buf, f);\n        (void)fputc('\\n', f);\n        (void)fclose(f);\n    }\n}\n\nstatic void os_queue_logf(const char *fmt, ...)\n{\n    char localbuf[512];\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vsnprintf(localbuf, sizeof(localbuf), fmt, ap);\n    va_end(ap);\n    os_queue_log_impl(localbuf);\n}\n\n/*\n * Modified OS_QueueCreate with inserted probes/logs. All original logic is preserved.\n * The logs capture the control flow and the state of the key inputs that are\n * relevant for reproducing the const-qualification cast-away scenario.\n */\nint32 OS_QueueCreate(osal_id_t *queue_id, const char *queue_name, osal_blockcount_t queue_depth, size_t data_size,\n                     uint32 flags)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_queue_internal_record_t *queue;\n\n    /* Entry log: record parameters and pointer values (without casting away const). */\n    os_queue_logf(\"OS_QueueCreate ENTRY: queue_id=%p, queue_name=%p, queue_name_str=\\\"%s\\\", queue_depth=%u, data_size=%zu, flags=0x%08x\",\n                  (void *)queue_id, (const void *)queue_name, (queue_name != NULL) ? queue_name : \"(null)\",\n                  (unsigned)queue_depth, data_size, (unsigned)flags);\n\n    /* validate inputs */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_APINAME(queue_name);\n    OS_CHECK_SIZE(data_size);\n    ARGCHECK(queue_depth <= OS_QUEUE_MAX_DEPTH, OS_QUEUE_INVALID_SIZE);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    os_queue_logf(\"OS_QueueCreate: calling OS_ObjectIdAllocateNew with name=%p (const char *)\\\"%s\\\"\",\n                  (const void *)queue_name, (queue_name != NULL) ? queue_name : \"(null)\");\n\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, queue_name, &token);\n\n    os_queue_logf(\"OS_QueueCreate: returned from OS_ObjectIdAllocateNew return_code=%d, token_addr=%p, token_size=%zu\",\n                  (int)return_code, (void *)&token, sizeof(token));\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Log the obtained table entry pointer */\n        os_queue_logf(\"OS_QueueCreate: obtained queue table entry queue=%p\", (void *)queue);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, queue, queue_name, queue_name);\n\n        /* After initialization, log the preserved name pointer (const) and configured sizes */\n        os_queue_logf(\"OS_QueueCreate: after OS_OBJECT_INIT token=%p, queue->max_depth=%u, queue->max_size=%zu, name_ptr=%p, name_str=\\\"%s\\\"\",\n                      (void *)&token,\n                      (unsigned)queue_depth, data_size,\n                      (const void *)queue_name, (queue_name != NULL) ? queue_name : \"(null)\");\n\n        queue->max_depth = queue_depth;\n        queue->max_size  = data_size;\n\n        /* Now call the OS-specific implementation.  This reads info from the queue table. */\n        os_queue_logf(\"OS_QueueCreate: calling OS_QueueCreate_Impl with token=%p, flags=0x%08x\", (void *)&token, (unsigned)flags);\n        return_code = OS_QueueCreate_Impl(&token, flags);\n        os_queue_logf(\"OS_QueueCreate: returned from OS_QueueCreate_Impl return_code=%d\", (int)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, queue_id);\n        os_queue_logf(\"OS_QueueCreate: after OS_ObjectIdFinalizeNew return_code=%d, queue_id=%p\", (int)return_code, (void *)queue_id);\n    }\n    else\n    {\n        os_queue_logf(\"OS_QueueCreate: OS_ObjectIdAllocateNew failed with return_code=%d\", (int)return_code);\n    }\n\n    os_queue_logf(\"OS_QueueCreate EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}