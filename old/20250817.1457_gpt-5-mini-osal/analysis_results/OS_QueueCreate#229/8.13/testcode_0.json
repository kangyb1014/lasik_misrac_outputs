{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_QueueCreate_Impl the code obtains a pointer to an internal queue record via: queue = OS_OBJECT_TABLE_GET(OS_queue_table, *token); The local variable is declared as OS_queue_internal_record_t *queue (non-const) but the function only reads fields (queue->max_depth, queue->max_size). Per MISRA C 2023 Rule 8.13 the pointer should be declared to point to a const-qualified type whenever possible (e.g. const OS_queue_internal_record_t *queue). Thus the current code violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1835.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueCreate:\n```c\nint32 OS_QueueCreate(osal_id_t *queue_id, const char *queue_name, osal_blockcount_t queue_depth, size_t data_size,\n                     uint32 flags)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_queue_internal_record_t *queue;\n\n    /* validate inputs */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_APINAME(queue_name);\n    OS_CHECK_SIZE(data_size);\n    ARGCHECK(queue_depth <= OS_QUEUE_MAX_DEPTH, OS_QUEUE_INVALID_SIZE);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, queue_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, queue, queue_name, queue_name);\n\n        queue->max_depth = queue_depth;\n        queue->max_size  = data_size;\n\n        /* Now call the OS-specific implementation.  This reads info from the queue table. */\n        return_code = OS_QueueCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, queue_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe helpers: write trace lines to /tmp/logs/1835.txt */\nstatic void ensure_log_dir(void)\n{\n    /* Try to create the directory if it does not exist. Ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    ensure_log_dir();\n    f = fopen(\"/tmp/logs/1835.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    (void)fputc('\\n', f);\n    (void)fclose(f);\n}\n\nint32 OS_QueueCreate(osal_id_t *queue_id, const char *queue_name, osal_blockcount_t queue_depth, size_t data_size,\n                     uint32 flags)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_queue_internal_record_t *queue;\n\n    /* Log entry and input parameters */\n    probe_log(\"OS_QueueCreate ENTRY: queue_id=%p, queue_name=%s, queue_depth=%lu, data_size=%zu, flags=%lu\",\n              (void *)queue_id,\n              (queue_name != NULL) ? queue_name : \"(null)\",\n              (unsigned long)queue_depth,\n              data_size,\n              (unsigned long)flags);\n\n    /* validate inputs */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_APINAME(queue_name);\n    OS_CHECK_SIZE(data_size);\n    ARGCHECK(queue_depth <= OS_QUEUE_MAX_DEPTH, OS_QUEUE_INVALID_SIZE);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, queue_name, &token);\n    probe_log(\"OS_QueueCreate: OS_ObjectIdAllocateNew returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        probe_log(\"OS_QueueCreate: Obtained queue pointer=%p for token=%lu\",\n                  (void *)queue,\n                  (unsigned long)(uintptr_t)token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, queue, queue_name, queue_name);\n\n        queue->max_depth = queue_depth;\n        queue->max_size  = data_size;\n\n        /* Log the internal record state that will be read by the Impl routine */\n        probe_log(\"OS_QueueCreate: queue->max_depth=%lu, queue->max_size=%zu\",\n                  (unsigned long)queue->max_depth,\n                  queue->max_size);\n\n        /* Now call the OS-specific implementation.  This reads info from the queue table. */\n        probe_log(\"OS_QueueCreate: calling OS_QueueCreate_Impl with token=%lu, flags=%lu\",\n                  (unsigned long)(uintptr_t)token,\n                  (unsigned long)flags);\n\n        return_code = OS_QueueCreate_Impl(&token, flags);\n\n        probe_log(\"OS_QueueCreate: OS_QueueCreate_Impl returned %ld\", (long)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, queue_id);\n\n        probe_log(\"OS_QueueCreate: OS_ObjectIdFinalizeNew returned %ld\", (long)return_code);\n        if (return_code == OS_SUCCESS && queue_id != NULL)\n        {\n            probe_log(\"OS_QueueCreate: created queue_id=%lu\", (unsigned long)(uintptr_t)*queue_id);\n        }\n    }\n    else\n    {\n        probe_log(\"OS_QueueCreate: failed to allocate object id, returning %ld\", (long)return_code);\n    }\n\n    probe_log(\"OS_QueueCreate EXIT: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}