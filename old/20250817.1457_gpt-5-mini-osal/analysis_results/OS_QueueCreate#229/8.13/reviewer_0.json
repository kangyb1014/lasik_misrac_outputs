{
  "user_message": "An agent A claimed that the following OS_QueueCreate code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_QueueCreate.\n```c\nint32 OS_QueueCreate(osal_id_t *queue_id, const char *queue_name, osal_blockcount_t queue_depth, size_t data_size,\n                     uint32 flags)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_queue_internal_record_t *queue;\n\n    /* validate inputs */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_APINAME(queue_name);\n    OS_CHECK_SIZE(data_size);\n    ARGCHECK(queue_depth <= OS_QUEUE_MAX_DEPTH, OS_QUEUE_INVALID_SIZE);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, queue_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, queue, queue_name, queue_name);\n\n        queue->max_depth = queue_depth;\n        queue->max_size  = data_size;\n\n        /* Now call the OS-specific implementation.  This reads info from the queue table. */\n        return_code = OS_QueueCreate_Impl(&token, flags);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, queue_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In OS_QueueCreate_Impl the code obtains a pointer to an internal queue record via: queue = OS_OBJECT_TABLE_GET(OS_queue_table, *token); The local variable is declared as OS_queue_internal_record_t *queue (non-const) but the function only reads fields (queue->max_depth, queue->max_size). Per MISRA C 2023 Rule 8.13 the pointer should be declared to point to a const-qualified type whenever possible (e.g. const OS_queue_internal_record_t *queue). Thus the current code violates Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\ntypedef int32_t int32;\ntypedef uint32_t uint32;\ntypedef uint32_t osal_id_t;\ntypedef size_t osal_blockcount_t;\ntypedef struct\n{\n    uintptr_t val;\n} OS_object_token_t;\ntypedef struct\n{\n    osal_blockcount_t max_depth;\n    size_t            max_size;\n} OS_queue_internal_record_t;\nint32 OS_ObjectIdAllocateNew(int type, const char *name, OS_object_token_t *token);\nOS_queue_internal_record_t *OS_OBJECT_TABLE_GET(void *table, OS_object_token_t token);\nvoid OS_OBJECT_INIT(OS_object_token_t token, OS_queue_internal_record_t *rec, const char *n1, const char *n2);\nint32 OS_QueueCreate_Impl(OS_object_token_t *token, uint32 flags);\nint32 OS_ObjectIdFinalizeNew(int32 result, OS_object_token_t *token, osal_id_t *id_out);\nvoid OS_CHECK_POINTER(const void *p) { (void)p; }\nvoid OS_CHECK_APINAME(const char *n) { (void)n; }\nvoid OS_CHECK_SIZE(size_t s) { (void)s; }\nvoid ARGCHECK(int cond, int err) { (void)cond; (void)err; }\nstatic OS_queue_internal_record_t g_dummy_queue;\nint32 OS_ObjectIdAllocateNew(int type, const char *name, OS_object_token_t *token)\n{\n    (void)type; (void)name;\n    token->val = (uintptr_t)&g_dummy_queue; /* populate something */\n    return OS_SUCCESS;\n}\nOS_queue_internal_record_t *OS_OBJECT_TABLE_GET(void *table, OS_object_token_t token)\n{\n    (void)token; /* ignore token in this stub */\n    return (OS_queue_internal_record_t *)table;\n}\nvoid OS_OBJECT_INIT(OS_object_token_t token, OS_queue_internal_record_t *rec, const char *n1, const char *n2)\n{\n    (void)token; (void)n1; (void)n2; (void)rec;\n    /* No-op for this test stub */\n}\nint32 OS_QueueCreate_Impl(OS_object_token_t *token, uint32 flags)\n{\n    (void)token; (void)flags;\n    /* Pretend the OS-specific creation succeeded */\n    return OS_SUCCESS;\n}\nint32 OS_ObjectIdFinalizeNew(int32 result, OS_object_token_t *token, osal_id_t *id_out)\n{\n    (void)token;\n    if (result == OS_SUCCESS && id_out != NULL)\n    {\n        *id_out = 1u; /* assign a dummy id */\n    }\n    return result;\n}\nstatic void ensure_log_dir(void)\n{\n    /* Try to create the directory if it does not exist. Ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    ensure_log_dir();\n    f = fopen(\"/tmp/logs/1835.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    (void)fputc('\\n', f);\n    (void)fclose(f);\n}\n\nint32 OS_QueueCreate(osal_id_t *queue_id, const char *queue_name, osal_blockcount_t queue_depth, size_t data_size,\n                     uint32 flags)\n{\n    int32                       return_code;\n    OS_object_token_t           token;\n    OS_queue_internal_record_t *queue;\n\n    /* Log entry and input parameters */\n    probe_log(\"OS_QueueCreate ENTRY: queue_id=%p, queue_name=%s, queue_depth=%lu, data_size=%zu, flags=%lu\",\n              (void *)queue_id,\n              (queue_name != NULL) ? queue_name : \"(null)\",\n              (unsigned long)queue_depth,\n              data_size,\n              (unsigned long)flags);\n\n    /* validate inputs */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_APINAME(queue_name);\n    OS_CHECK_SIZE(data_size);\n    ARGCHECK(queue_depth <= OS_QUEUE_MAX_DEPTH, OS_QUEUE_INVALID_SIZE);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(0 /* LOCAL_OBJID_TYPE placeholder */, queue_name, &token);\n    probe_log(\"OS_QueueCreate: OS_ObjectIdAllocateNew returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Print the queue pointer and the token address. Printing the token as an address\n           avoids trying to cast an aggregate to an integer type. */\n        probe_log(\"OS_QueueCreate: Obtained queue pointer=%p for token=%p\",\n                  (void *)queue,\n                  (void *)&token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, queue, queue_name, queue_name);\n\n        queue->max_depth = queue_depth;\n        queue->max_size  = data_size;\n\n        /* Log the internal record state that will be read by the Impl routine */\n        probe_log(\"OS_QueueCreate: queue->max_depth=%lu, queue->max_size=%zu\",\n                  (unsigned long)queue->max_depth,\n                  queue->max_size);\n\n        /* Now call the OS-specific implementation.  This reads info from the queue table. */\n        probe_log(\"OS_QueueCreate: calling OS_QueueCreate_Impl with token=%p, flags=%lu\",\n                  (void *)&token,\n                  (unsigned long)flags);\n\n        return_code = OS_QueueCreate_Impl(&token, flags);\n\n        probe_log(\"OS_QueueCreate: OS_QueueCreate_Impl returned %ld\", (long)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, queue_id);\n\n        probe_log(\"OS_QueueCreate: OS_ObjectIdFinalizeNew returned %ld\", (long)return_code);\n        if (return_code == OS_SUCCESS && queue_id != NULL)\n        {\n            probe_log(\"OS_QueueCreate: created queue_id=%lu\", (unsigned long)(uintptr_t)*queue_id);\n        }\n    }\n    else\n    {\n        probe_log(\"OS_QueueCreate: failed to allocate object id, returning %ld\", (long)return_code);\n    }\n\n    probe_log(\"OS_QueueCreate EXIT: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. In the posted OS_QueueCreate the local variable queue is used to modify the record (queue->max_depth = ...; queue->max_size = ...;), so the pointer must not be a pointer-to-const. MISRA C 2023 Rule 8.13 recommends const-qualifying pointers that only read the pointee, but it does not require making a pointer const when the code writes through it. The scenario describes OS_QueueCreate_Impl reading fields and thus that function could accept a pointer-to-const, but that is a separate issue (a potential improvement), not a violation of Rule 8.13 in OS_QueueCreate. Therefore agent A's claim that OS_QueueCreate violates Rule 8.13 is incorrect."
}