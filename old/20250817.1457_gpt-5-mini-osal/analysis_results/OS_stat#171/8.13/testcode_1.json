{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call explicitly casts VirtualPath (type: const char *) to (void *) when passing it to OS_ObjectIdGetBySearch, discarding the const qualifier. This passes a non-const void * where the original data is const and therefore violates the requirement that pointers should point to const-qualified types whenever possible. If the callee does not need to modify the data, the parameter should be declared as const void * (and related callback signatures updated) instead of void *, or the caller should avoid removing constness.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1371.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_stat:\n```c\nint32 OS_stat(const char *path, os_fstat_t *filestats)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(filestats);\n\n    memset(filestats, 0, sizeof(*filestats));\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileStat_Impl(local_path, filestats);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logging helper: append control flow and state to /tmp/logs/1371.txt */\nstatic void OS_stat_probe_log(const char *stage, const char *path, const char *local_path, const void *filestats_ptr, int return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1371.txt\", \"a\");\n    if (!f)\n    {\n        return; /* best-effort logging only */\n    }\n\n    fprintf(f, \"[OS_stat] stage=%s\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \"    path_ptr=%p\\n\", (const void *)path);\n    if (path)\n        fprintf(f, \"    path_str=\\\"%s\\\"\\n\", path);\n    else\n        fprintf(f, \"    path_str=(null)\\n\");\n\n    fprintf(f, \"    local_path_ptr=%p\\n\", (const void *)local_path);\n    if (local_path)\n        fprintf(f, \"    local_path_str=\\\"%s\\\"\\n\", local_path);\n    else\n        fprintf(f, \"    local_path_str=(null)\\n\");\n\n    fprintf(f, \"    filestats_ptr=%p\\n\", filestats_ptr);\n    fprintf(f, \"    return_code=%d\\n\", return_code);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_stat(const char *path, os_fstat_t *filestats)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and parameter state before any checks */\n    OS_stat_probe_log(\"entry\", path, \"(uninitialized)\", (const void *)filestats, -1);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(filestats);\n\n    /* Zero the output structure (preserve original logic) */\n    memset(filestats, 0, sizeof(*filestats));\n\n    /* Log after parameter check and zeroing */\n    OS_stat_probe_log(\"after_check_and_zero\", path, \"(uninitialized)\", (const void *)filestats, -1);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of path translation and intermediate state */\n    OS_stat_probe_log(\"after_translate_path\", path, local_path, (const void *)filestats, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileStat_Impl(local_path, filestats);\n\n        /* Log result of file stat implementation call */\n        OS_stat_probe_log(\"after_file_stat_impl\", path, local_path, (const void *)filestats, return_code);\n    }\n\n    /* Log exit with final return code */\n    OS_stat_probe_log(\"exit\", path, local_path, (const void *)filestats, return_code);\n\n    return return_code;\n}\n"
}