{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nfilesys is declared as OS_filesys_internal_record_t *filesys and is assigned via filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token); The code only reads fields (flags, system_mountpt, virtual_mountpt) and does not modify the object, so the pointer could and should be a pointer-to-const (const OS_filesys_internal_record_t *filesys). Therefore the pointer is not const-qualified where possible, violating MISRA C 2023 Rule 8.13. Recommendation: declare filesys as const OS_filesys_internal_record_t * (and ensure OS_OBJECT_TABLE_GET yields a const pointer or is adjusted accordingly).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1371.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_stat:\n```c\nint32 OS_stat(const char *path, os_fstat_t *filestats)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(filestats);\n\n    memset(filestats, 0, sizeof(*filestats));\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileStat_Impl(local_path, filestats);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helpers - write a small trace to /tmp/logs/1371.txt */\nstatic void os_stat_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1371.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nstatic void os_stat_dump_filestats(const char *stage, const char *path, const char *local_path, const void *filestats, unsigned long filestats_size, long return_code)\n{\n    os_stat_probe_log(\"[OS_stat] stage=%s path='%s' local_path='%s' return=%ld\", stage, path ? path : \"(null)\", local_path ? local_path : \"(null)\", return_code);\n\n    if (filestats != NULL && filestats_size > 0u)\n    {\n        const unsigned char *p = (const unsigned char *)filestats;\n        /* write as a single hex line */\n        FILE *f = fopen(\"/tmp/logs/1371.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"[OS_stat] %s: filestats (%lu bytes):\", stage, filestats_size);\n            for (unsigned long i = 0u; i < filestats_size; ++i)\n            {\n                fprintf(f, \"%02X\", (unsigned int)p[i]);\n            }\n            fprintf(f, \"\\n\");\n            fclose(f);\n        }\n    }\n}\n\nint32 OS_stat(const char *path, os_fstat_t *filestats)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Initial probe: entry */\n    os_stat_dump_filestats(\"entry\", path, \"\", filestats, (filestats != NULL) ? (unsigned long)sizeof(*filestats) : 0u, 0L);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(filestats);\n\n    memset(filestats, 0, sizeof(*filestats));\n\n    /* Probe after zeroing out filestats */\n    os_stat_dump_filestats(\"after_memset\", path, \"\", filestats, (unsigned long)sizeof(*filestats), 0L);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Probe after path translation attempt */\n    os_stat_probe_log(\"[OS_stat] after OS_TranslatePath: return=%ld local_path='%s'\", (long)return_code, local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileStat_Impl(local_path, filestats);\n\n        /* Probe after file stat implementation call: include the filestats content and return code */\n        os_stat_dump_filestats(\"after_impl\", path, local_path, filestats, (unsigned long)sizeof(*filestats), (long)return_code);\n    }\n    else\n    {\n        /* Probe when translation failed */\n        os_stat_probe_log(\"[OS_stat] path translation failed: return=%ld\", (long)return_code);\n    }\n\n    return return_code;\n}\n"
}