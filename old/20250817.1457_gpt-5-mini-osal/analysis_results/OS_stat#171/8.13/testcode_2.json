{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'filesys' is declared as 'OS_filesys_internal_record_t *filesys;' but in OS_TranslatePath it is only used for read-only access (filesys->flags, filesys->system_mountpt, filesys->virtual_mountpt). It could and should be const-qualified (const OS_filesys_internal_record_t *filesys) to reflect that it is not modified. Therefore Rule 8.13 is violated here.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1371.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_stat:\n```c\nint32 OS_stat(const char *path, os_fstat_t *filestats)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(filestats);\n\n    memset(filestats, 0, sizeof(*filestats));\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileStat_Impl(local_path, filestats);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/*\n * Modified OS_stat with logging probes to /tmp/logs/1371.txt\n * The original logic is preserved. Logging is done only to record\n * control flow and state relevant to the reported violation scenario.\n */\nint32 OS_stat(const char *path, os_fstat_t *filestats)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Check Parameters (preserve original behavior) */\n    OS_CHECK_POINTER(filestats);\n\n    /* Open log file (attempt to create directory if needed). Do not change program logic if logging fails.) */\n    (void)mkdir(\"/tmp/logs\", 0700); /* ignore return; directory may already exist */\n    FILE *log = fopen(\"/tmp/logs/1371.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"[OS_stat] ENTER: path=\\\"%s\\\", filestats=%p\\n\", (path != NULL) ? path : \"(null)\", (void *)filestats);\n        fflush(log);\n    }\n\n    /* Preserve original initialization */\n    memset(filestats, 0, sizeof(*filestats));\n\n    if (log != NULL)\n    {\n        /* Dump first bytes of filestats after memset to show it was zeroed */\n        unsigned char *bytes = (unsigned char *)filestats;\n        size_t i;\n        size_t to_dump = sizeof(*filestats);\n        /* Limit dump length to avoid extremely large logs */\n        if (to_dump > 64U) to_dump = 64U;\n\n        fprintf(log, \"[OS_stat] After memset filestats=%p first %zu bytes:\", (void *)filestats, to_dump);\n        for (i = 0U; i < to_dump; ++i)\n        {\n            fprintf(log, \" %02X\", (unsigned)bytes[i]);\n        }\n        fprintf(log, \"\\n\");\n        fflush(log);\n    }\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (log != NULL)\n    {\n        fprintf(log, \"[OS_stat] OS_TranslatePath returned %ld\\n\", (long)return_code);\n        if (return_code == OS_SUCCESS)\n        {\n            fprintf(log, \"[OS_stat] local_path=\\\"%s\\\"\\n\", local_path);\n        }\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileStat_Impl(local_path, filestats);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"[OS_stat] OS_FileStat_Impl returned %ld\\n\", (long)return_code);\n\n            /* Dump a small snapshot of filestats returned by implementation */\n            unsigned char *bytes2 = (unsigned char *)filestats;\n            size_t j;\n            size_t to_dump2 = sizeof(*filestats);\n            if (to_dump2 > 128U) to_dump2 = 128U; /* slightly larger dump after stat */\n\n            fprintf(log, \"[OS_stat] After OS_FileStat_Impl filestats=%p first %zu bytes:\", (void *)filestats, to_dump2);\n            for (j = 0U; j < to_dump2; ++j)\n            {\n                fprintf(log, \" %02X\", (unsigned)bytes2[j]);\n            }\n            fprintf(log, \"\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"[OS_stat] EXIT returning %ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}