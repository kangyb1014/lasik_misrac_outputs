{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'SysMountPointLen = 0;' is redundant. If OS_ObjectIdGetBySearch succeeds, SysMountPointLen is overwritten in the filesys->flags branch before any use. If OS_ObjectIdGetBySearch fails, return_code is set to an error and the subsequent code that would use SysMountPointLen is not executed. Thus removing this assignment would not change program behaviour, so the operation is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1370.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_stat:\n```c\nint32 OS_stat(const char *path, os_fstat_t *filestats)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(filestats);\n\n    memset(filestats, 0, sizeof(*filestats));\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileStat_Impl(local_path, filestats);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe function: append control-flow and state information to the log file.\n   The function is deliberately conservative: it logs pointers and simple string\n   contents but does not assume knowledge of the internals of os_fstat_t. */\nstatic void OS_stat_log_probe(const char *stage, const char *path, const char *local_path, int32 return_code, const void *filestats)\n{\n    FILE *f = fopen(\"/tmp/logs/1370.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not change program behavior. */\n        return;\n    }\n\n    /* Print a compact, single-line representation of the state. */\n    fprintf(f, \"OS_stat: stage=%s path_ptr=%p path_str=\\\"%s\\\" local_path=\\\"%s\\\" return_code=%ld filestats_ptr=%p\\n\",\n            stage,\n            (const void *)path,\n            (path != NULL) ? path : \"(null)\",\n            (local_path != NULL) ? local_path : \"(null)\",\n            (long)return_code,\n            filestats);\n\n    fclose(f);\n}\n\nint32 OS_stat(const char *path, os_fstat_t *filestats)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(filestats);\n\n    /* Log the entry state before clearing the output structure. */\n    OS_stat_log_probe(\"entry_before_memset\", path, \"\", 0, filestats);\n\n    memset(filestats, 0, sizeof(*filestats));\n\n    /* Log state after memset so callers can see the zero-initialized filestats pointer. */\n    OS_stat_log_probe(\"after_memset\", path, \"\", 0, filestats);\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of path translation and the local path buffer contents. */\n    OS_stat_log_probe(\"after_translate\", path, local_path, return_code, filestats);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log just before calling the implementation so the control flow is visible. */\n        OS_stat_log_probe(\"before_impl_call\", path, local_path, return_code, filestats);\n\n        return_code = OS_FileStat_Impl(local_path, filestats);\n\n        /* Log after the implementation returns to capture the result and filestats pointer. */\n        OS_stat_log_probe(\"after_impl_call\", path, local_path, return_code, filestats);\n    }\n\n    /* Final return state. */\n    OS_stat_log_probe(\"exit\", path, local_path, return_code, filestats);\n\n    return return_code;\n}\n"
}