{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment VirtPathBegin = VirtPathLen; is redundant. When OS_ObjectIdGetBySearch succeeds the code overwrites VirtPathBegin with the virtual mount-point length; if it does not succeed the function sets return_code to an error and the later block that reads VirtPathBegin is not executed. Thus removing this assignment would not change program behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1370.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_stat:\n```c\nint32 OS_stat(const char *path, os_fstat_t *filestats)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(filestats);\n\n    memset(filestats, 0, sizeof(*filestats));\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileStat_Impl(local_path, filestats);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe logging helper - appends informative logs to /tmp/logs/1370.txt */\nstatic void OS_stat_log(const char *stage,\n                        const char *path,\n                        const char *local_path,\n                        const void *filestats_ptr,\n                        int32_t return_code,\n                        size_t filestats_size)\n{\n    FILE *f;\n    /* Ensure the logs directory exists; ignore errors if it already exists */\n    (void) mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/1370.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Logging must not affect program logic */\n    }\n\n    fprintf(f, \"[OS_stat] stage=%s\\n\", stage);\n    if (path != NULL)\n    {\n        fprintf(f, \"  path='%s'\\n\", path);\n    }\n    if (local_path != NULL)\n    {\n        /* print local_path as a string (it may be empty) */\n        fprintf(f, \"  local_path='%s'\\n\", local_path);\n    }\n    fprintf(f, \"  filestats_ptr=%p\\n\", filestats_ptr);\n    fprintf(f, \"  return_code=%ld\\n\", (long)return_code);\n\n    /* Dump up to the first 32 bytes of the filestats structure for state insight */\n    if (filestats_ptr != NULL && filestats_size > 0)\n    {\n        const unsigned char *bytes = (const unsigned char *)filestats_ptr;\n        size_t to_dump = filestats_size;\n        if (to_dump > 32U)\n        {\n            to_dump = 32U;\n        }\n        fprintf(f, \"  filestats_bytes=\");\n        for (size_t i = 0; i < to_dump; ++i)\n        {\n            fprintf(f, \"%02X\", (unsigned)bytes[i]);\n            if (i + 1 < to_dump)\n            {\n                fprintf(f, \" \");\n            }\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Original function with probes inserted. The logic is preserved. */\nint32 OS_stat(const char *path, os_fstat_t *filestats)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and parameters */\n    OS_stat_log(\"entry\", path, \"\", filestats, 0, sizeof(*filestats));\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(filestats);\n\n    memset(filestats, 0, sizeof(*filestats));\n\n    /* Log after initialization of filestats */\n    OS_stat_log(\"after_memset\", path, \"\", filestats, 0, sizeof(*filestats));\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    /* Log result of path translation */\n    OS_stat_log(\"after_TranslatePath\", path, local_path, filestats, return_code, sizeof(*filestats));\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log prior to calling the platform-specific implementation */\n        OS_stat_log(\"before_FileStat_Impl\", path, local_path, filestats, return_code, sizeof(*filestats));\n\n        return_code = OS_FileStat_Impl(local_path, filestats);\n\n        /* Log after the implementation returns (final state) */\n        OS_stat_log(\"after_FileStat_Impl\", path, local_path, filestats, return_code, sizeof(*filestats));\n    }\n    else\n    {\n        /* Log the early-exit path where TranslatePath failed */\n        OS_stat_log(\"translate_failed\", path, local_path, filestats, return_code, sizeof(*filestats));\n    }\n\n    return return_code;\n}\n"
}