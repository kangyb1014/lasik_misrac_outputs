{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen(VirtualPath, OS_MAX_PATH_LEN) can read up to OS_MAX_PATH_LEN bytes from VirtualPath. The function only checks that VirtualPath is non-NULL (OS_CHECK_POINTER) and does not know the actual size of the object pointed to. If the caller passed a pointer to a shorter object (or a pointer close to an object boundary) that does not contain a '\\0' within the first OS_MAX_PATH_LEN bytes, OS_strnlen will access bytes beyond the bounds of the object -> out-of-bounds read.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1375.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_stat:\n```c\nint32 OS_stat(const char *path, os_fstat_t *filestats)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(filestats);\n\n    memset(filestats, 0, sizeof(*filestats));\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileStat_Impl(local_path, filestats);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Note: This file adds lightweight logging probes to OS_stat to record\n   control flow and state relevant to the reported out-of-bounds read\n   scenario. The probes intentionally do NOT dereference `path` to avoid\n   introducing new out-of-bounds reads. */\n\n/* Forward declarations of external functions / types used by OS_stat. */\nint32_t OS_TranslatePath(const char *path, char *local_path);\nint32_t OS_FileStat_Impl(const char *local_path, void *filestats);\n\n/* Keep the original typedef names if present in the build; provide\n   fallback typedefs so this snippet remains compilable in isolation. */\n#ifndef int32\ntypedef int32_t int32;\n#endif\n\n#ifndef os_fstat_t\n/* Minimal placeholder for compilation; real definition comes from OS headers. */\ntypedef struct { unsigned long dummy; } os_fstat_t;\n#endif\n\n/* Internal helper to append logs describing the control path and key state. */\nstatic void OS_stat_log(const char *stage, const char *path, const void *filestats, int32 return_code, const char *extra)\n{\n    FILE *f = fopen(\"/tmp/logs/1375.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, silently continue to preserve original behavior. */\n        return;\n    }\n\n    fprintf(f, \"[OS_stat] stage=%s return_code=%d path=%p filestats=%p\\n\", stage, (int)return_code, (const void *)path, filestats);\n\n    if (path == NULL)\n    {\n        fprintf(f, \"[OS_stat] path is NULL\\n\");\n    }\n    else\n    {\n        /* IMPORTANT: do NOT dereference `path` here. The reported violation\n           arises when functions like strnlen read up to OS_MAX_PATH_LEN bytes\n           from a caller-supplied pointer that may not point to that many\n           accessible bytes. To avoid introducing new UB, we only record that\n           the pointer is non-NULL and do not read its contents. */\n        fprintf(f, \"[OS_stat] path is non-NULL (content not read to avoid potential OOB)\\n\");\n    }\n\n    if (extra != NULL)\n    {\n        fprintf(f, \"[OS_stat] extra=%s\\n\", extra);\n    }\n\n    fclose(f);\n}\n\nint32 OS_stat(const char *path, os_fstat_t *filestats)\n{\n    int32 return_code;\n    char  local_path[/* OS_MAX_LOCAL_PATH_LEN */ 256]; /* keep original buffer; actual size macro used in real build */\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(filestats);\n\n    /* Log entry: before clearing filestats and before translation attempt */\n    OS_stat_log(\"entry\", path, filestats, 0, \"before memset and TranslatePath\");\n\n    memset(filestats, 0, sizeof(*filestats));\n\n    OS_stat_log(\"after_memset\", path, filestats, 0, NULL);\n\n    /* Call TranslatePath as in the original logic. We log that we are about\n       to call it and the address/size of the local buffer. We do not peek\n       into `path` to avoid any further memory accesses. */\n    {\n        char extra_buf[128];\n        snprintf(extra_buf, sizeof(extra_buf), \"local_path_buf=%p local_path_size=%zu\", (void *)local_path, sizeof(local_path));\n        OS_stat_log(\"before_TranslatePath\", path, filestats, 0, extra_buf);\n    }\n\n    return_code = OS_TranslatePath(path, local_path);\n\n    OS_stat_log(\"after_TranslatePath\", path, filestats, return_code, NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_stat_log(\"before_FileStat_Impl\", path, filestats, return_code, \"calling OS_FileStat_Impl\");\n        return_code = OS_FileStat_Impl(local_path, filestats);\n        OS_stat_log(\"after_FileStat_Impl\", path, filestats, return_code, NULL);\n    }\n\n    OS_stat_log(\"exit\", path, filestats, return_code, NULL);\n\n    return return_code;\n}\n"
}