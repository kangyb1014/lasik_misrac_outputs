{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro takes the address of its tok parameter (&(tok)). In the call OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token) the actual tok is *token where token is declared const OS_object_token_t *. That makes &(tok) a const OS_object_token_t *. If OS_ObjectIndexFromToken (and thus the macro) expects a pointer to non-const OS_object_token_t, the const qualifier is discarded when passing &(tok) \u2014 i.e. a pointer to a non-const type is used where a pointer to a const-qualified object is available. This violates the intent of MISRA C 2023 Rule 8.13. To fix, make OS_ObjectIndexFromToken accept a pointer-to-const (const OS_object_token_t *) or avoid taking the address of a const-qualified lvalue here.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/739.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirOpen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirOpen_Impl:\n```c\nint32 OS_DirOpen_Impl(const OS_object_token_t *token, const char *local_path)\n{\n    DIR *                          dp = opendir(local_path);\n    OS_impl_dir_internal_record_t *impl;\n\n    if (dp == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    impl     = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n    impl->dp = dp;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_DirOpen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <dirent.h>\n#include <string.h>\n#include <stddef.h>\n\n/*\n * Probe helpers to log control flow and state to /tmp/logs/739.txt\n * These preserve const-correctness: they accept const pointers where appropriate\n * and only read from const-qualified objects.\n */\nstatic void probe_log_bytes(FILE *f, const void *ptr, size_t n)\n{\n    const unsigned char *b = (const unsigned char *)ptr;\n    size_t i;\n    for (i = 0; i < n; ++i)\n    {\n        /* limit output so logs are readable */\n        if (i && (i % 16) == 0)\n        {\n            fputc('\\n', f);\n        }\n        fprintf(f, \"%02X \", (unsigned) b[i]);\n    }\n    fputc('\\n', f);\n}\n\nstatic void probe_log_before(const OS_object_token_t *token, const char *local_path)\n{\n    FILE *f = fopen(\"/tmp/logs/739.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_DirOpen_Impl] Enter\\n\");\n    fprintf(f, \"  local_path: %s\\n\", (local_path != NULL) ? local_path : \"(null)\");\n    fprintf(f, \"  token pointer: %p\\n\", (const void *)token);\n\n    /* If the token type is available, dump a limited prefix of its bytes for diagnosis. */\n    if (token != NULL)\n    {\n        size_t tsize = sizeof(*token);\n        fprintf(f, \"  token sizeof: %zu bytes (showing up to 64 bytes)\\n\", tsize);\n        probe_log_bytes(f, token, (tsize > 64u) ? 64u : tsize);\n    }\n\n    fclose(f);\n}\n\nstatic void probe_log_after_open(const OS_object_token_t *token, const char *local_path, DIR *dp)\n{\n    FILE *f = fopen(\"/tmp/logs/739.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_DirOpen_Impl] After opendir\\n\");\n    fprintf(f, \"  local_path: %s\\n\", (local_path != NULL) ? local_path : \"(null)\");\n    fprintf(f, \"  dp pointer: %p\\n\", (void *)dp);\n    fprintf(f, \"  token pointer: %p\\n\", (const void *)token);\n\n    fclose(f);\n}\n\nstatic void probe_log_after_table_get(const OS_object_token_t *token, DIR *dp, OS_impl_dir_internal_record_t *impl)\n{\n    FILE *f = fopen(\"/tmp/logs/739.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_DirOpen_Impl] After OS_OBJECT_TABLE_GET and assignment\\n\");\n    fprintf(f, \"  token pointer: %p\\n\", (const void *)token);\n    fprintf(f, \"  impl pointer: %p\\n\", (void *)impl);\n    fprintf(f, \"  impl->dp (before/after assign expected to be same as dp): %p\\n\", (void *)(impl ? impl->dp : NULL));\n    fprintf(f, \"  assigned dp pointer: %p\\n\", (void *)dp);\n\n    fclose(f);\n}\n\nint32 OS_DirOpen_Impl(const OS_object_token_t *token, const char *local_path)\n{\n    DIR *                          dp;\n    OS_impl_dir_internal_record_t *impl;\n\n    /* Log entry state */\n    probe_log_before(token, local_path);\n\n    dp = opendir(local_path);\n\n    /* Log result of opendir */\n    probe_log_after_open(token, local_path, dp);\n\n    if (dp == NULL)\n    {\n        /* Document error path */\n        FILE *f = fopen(\"/tmp/logs/739.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"[OS_DirOpen_Impl] opendir returned NULL -> returning OS_ERROR\\n\");\n            fclose(f);\n        }\n\n        return OS_ERROR;\n    }\n\n    /*\n     * The call below is the original code that was reported to trigger the\n     * const-qualification scenario: OS_OBJECT_TABLE_GET takes the address of\n     * its tok parameter (&(tok)). When called as OS_OBJECT_TABLE_GET(..., *token)\n     * the address inside the macro will be the same as 'token'. We log the state\n     * before and after this operation so other agents can reproduce the scenario\n     * and examine the log for evidence.\n     */\n    impl     = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n    impl->dp = dp;\n\n    /* Log after table get and assignment */\n    probe_log_after_table_get(token, dp, impl);\n\n    return OS_SUCCESS;\n}\n"
}