{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_DirOpen_Impl:\n```c\nint32 OS_DirOpen_Impl(const OS_object_token_t *token, const char *local_path)\n{\n    DIR *                          dp = opendir(local_path);\n    OS_impl_dir_internal_record_t *impl;\n\n    if (dp == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    impl     = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n    impl->dp = dp;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_DirOpen_Impl:\ntypedef struct\n{\n    DIR *dp;\n} OS_impl_dir_internal_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_impl_dir_internal_record_t OS_impl_dir_table[OS_MAX_NUM_OPEN_DIRS]\n...\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_ERROR (-1)\n...\n#define OS_SUCCESS (0)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The macro takes the address of its tok parameter (&(tok)). In the call OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token) the actual tok is *token where token is declared const OS_object_token_t *. That makes &(tok) a const OS_object_token_t *. If OS_ObjectIndexFromToken (and thus the macro) expects a pointer to non-const OS_object_token_t, the const qualifier is discarded when passing &(tok) \u2014 i.e. a pointer to a non-const type is used where a pointer to a const-qualified object is available. This violates the intent of MISRA C 2023 Rule 8.13. To fix, make OS_ObjectIndexFromToken accept a pointer-to-const (const OS_object_token_t *) or avoid taking the address of a const-qualified lvalue here."
}