{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: memchr(name_ptr, 0, OS_MAX_FILE_NAME) can read up to OS_MAX_FILE_NAME bytes starting at name_ptr without ensuring that many bytes are valid in the object (the VirtualPath buffer). Although VirtPathLen is computed earlier (VirtPathLen < OS_MAX_PATH_LEN), the code does not compute the remaining length from name_ptr to the terminating '\\0' (or remaining allocated bytes) before calling memchr. If name_ptr points near the end of the VirtualPath (e.g. VirtualPath = \"/a\" so remaining bytes including '\\0' are 2) and OS_MAX_FILE_NAME is larger (e.g. 255), memchr will attempt to read beyond the bounds of the VirtualPath object, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/743.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirOpen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirOpen_Impl:\n```c\nint32 OS_DirOpen_Impl(const OS_object_token_t *token, const char *local_path)\n{\n    DIR *                          dp = opendir(local_path);\n    OS_impl_dir_internal_record_t *impl;\n\n    if (dp == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    impl     = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n    impl->dp = dp;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_DirOpen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <dirent.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe/logger helper - write diagnostics to /tmp/logs/743.txt */\nstatic void OS_DirOpen_ProbeLog(const char *stage, const void *token_ptr, const char *local_path, void *dp_ptr)\n{\n    FILE *log = fopen(\"/tmp/logs/743.txt\", \"a\");\n    if (log == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    fprintf(log, \"[%s] OS_DirOpen_Impl invoked\\n\", stage ? stage : \"(null)\");\n    fprintf(log, \"  token_ptr=%p\\n\", token_ptr);\n    fprintf(log, \"  local_path_ptr=%p\\n\", (const void *)local_path);\n\n    if (local_path == NULL)\n    {\n        fprintf(log, \"  local_path: (NULL)\\n\");\n    }\n    else\n    {\n        /* Use strnlen with an explicit upper bound to avoid reading beyond\n         * the caller's buffer. This is a safe, bounded length probe. */\n        size_t safe_bound = 4096u; /* large, but bounded to avoid UB */\n        size_t len = strnlen(local_path, safe_bound);\n        fprintf(log, \"  strnlen(local_path, %zu) = %zu\\n\", safe_bound, len);\n\n        /* Print a preview of the path up to a small limit so logs remain readable */\n        size_t preview_max = 256u;\n        size_t preview = (len < preview_max) ? len : preview_max;\n        fprintf(log, \"  path_preview (first %zu bytes): \\\"\", preview);\n        if (preview > 0)\n        {\n            /* fwrite avoids any further scanning beyond 'preview' bytes */\n            fwrite(local_path, 1, preview, log);\n        }\n        if (len > preview)\n        {\n            fprintf(log, \"...\");\n        }\n        fprintf(log, \"\\\"\\n\");\n\n        /* Log byte values (hex) for the preview region to help detect non-printables */\n        fprintf(log, \"  bytes_preview: \");\n        for (size_t i = 0; i < preview; ++i)\n        {\n            fprintf(log, \"%02X\", (unsigned char)local_path[i]);\n            if (i + 1 < preview) fprintf(log, \" \");\n        }\n        if (preview == 0) fprintf(log, \"(none)\");\n        fprintf(log, \"\\n\");\n\n        /* If the string was not NUL-terminated within the safe bound, log that fact. */\n        if (len == safe_bound)\n        {\n            fprintf(log, \"  NOTE: local_path has no NUL within %zu bytes (truncated probe)\\n\", safe_bound);\n        }\n    }\n\n    fprintf(log, \"  opendir returned dp=%p\\n\", dp_ptr);\n    fprintf(log, \"---\\n\");\n    fclose(log);\n}\n\nint32 OS_DirOpen_Impl(const OS_object_token_t *token, const char *local_path)\n{\n    DIR *                          dp = opendir(local_path);\n    OS_impl_dir_internal_record_t *impl;\n\n    /* Probe: log entry state (token pointer, local_path pointer and preview), and opendir result */\n    OS_DirOpen_ProbeLog(\"entry\", (const void *)token, local_path, (void *)dp);\n\n    if (dp == NULL)\n    {\n        /* Log failure path as well before returning */\n        OS_DirOpen_ProbeLog(\"opendir_failed\", (const void *)token, local_path, (void *)dp);\n        return OS_ERROR;\n    }\n\n    impl     = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n    impl->dp = dp;\n\n    /* Log success path */\n    OS_DirOpen_ProbeLog(\"opendir_success\", (const void *)token, local_path, (void *)dp);\n\n    return OS_SUCCESS;\n}\n"
}