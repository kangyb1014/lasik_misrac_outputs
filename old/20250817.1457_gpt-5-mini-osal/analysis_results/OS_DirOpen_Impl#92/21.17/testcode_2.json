{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nAfter incrementing name_ptr to point just after the last '/' the code calls memchr(name_ptr, 0, OS_MAX_FILE_NAME). If the remaining bytes in the VirtualPath object (from name_ptr to its terminating NUL) are fewer than OS_MAX_FILE_NAME, memchr may read past the end of the VirtualPath object and thus access out-of-bounds memory. For example, if the last '/' is near the end of the VirtualPath buffer and OS_MAX_FILE_NAME is larger than the number of bytes remaining to the terminating NUL, memchr(name_ptr, 0, OS_MAX_FILE_NAME) will attempt to examine bytes beyond the object bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/743.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirOpen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirOpen_Impl:\n```c\nint32 OS_DirOpen_Impl(const OS_object_token_t *token, const char *local_path)\n{\n    DIR *                          dp = opendir(local_path);\n    OS_impl_dir_internal_record_t *impl;\n\n    if (dp == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    impl     = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n    impl->dp = dp;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_DirOpen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <dirent.h>\n\n/* Probe function to log control flow and state for potential out-of-bounds\n * string access scenarios. Logs are appended to /tmp/logs/743.txt.\n * This function intentionally does not change the logic of OS_DirOpen_Impl.\n */\nstatic void os_diropen_probe(const char *local_path, const void *token)\n{\n    FILE *f = fopen(\"/tmp/logs/743.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"--- OS_DirOpen_Impl probe ---\\n\");\n    fprintf(f, \"token ptr = %p, local_path ptr = %p\\n\", token, (const void *)local_path);\n\n    if (local_path == NULL)\n    {\n        fprintf(f, \"local_path is NULL\\n\");\n        fprintf(f, \"-----------------------------\\n\");\n        fclose(f);\n        return;\n    }\n\n    /* Use a safe bounded length to avoid scanning arbitrarily far.\n     * This avoids introducing any new out-of-bounds reads in the probe.\n     */\n    const size_t MAX_PROBE_LEN = 4096;\n    size_t len = strnlen(local_path, MAX_PROBE_LEN);\n    fprintf(f, \"reported length (capped at %zu) = %zu\\n\", MAX_PROBE_LEN, len);\n\n    /* Dump a short prefix of the path to help reproduce scenarios. */\n    size_t dump_len = (len > 128) ? 128 : len;\n    fprintf(f, \"path prefix (%zu chars) = '%.*s'\\n\", dump_len, (int)dump_len, local_path);\n\n    /* Find last '/' within the scanned range (if any) and compute remaining bytes. */\n    ssize_t last_idx = -1;\n    for (ssize_t i = (ssize_t)len - 1; i >= 0; --i)\n    {\n        if (local_path[i] == '/')\n        {\n            last_idx = i;\n            break;\n        }\n    }\n\n    if (last_idx >= 0)\n    {\n        size_t remaining = len - (size_t)(last_idx + 1);\n        const char *name_ptr = local_path + (last_idx + 1);\n        fprintf(f, \"last '/' index = %zd, name_ptr = %p\\n\", last_idx, (const void *)name_ptr);\n        fprintf(f, \"bytes remaining from name_ptr to terminating NUL = %zu\\n\", remaining);\n\n        /* Print a small sample starting at name_ptr to show where memchr would begin scanning. */\n        size_t sample = (remaining > 128) ? 128 : remaining;\n        fprintf(f, \"name prefix (%zu chars) = '%.*s'\\n\", sample, (int)sample, name_ptr);\n\n        /* Warn about the potential dangerous pattern described in the report: if caller\n         * uses memchr(name_ptr, 0, N) where N is larger than 'remaining', memchr would\n         * read beyond the end of the object and may cause an out-of-bounds access.\n         */\n        fprintf(f, \"NOTE: If code calls memchr(name_ptr, 0, N) with N > %zu then memchr may read past the terminating NUL.\\n\", remaining);\n    }\n    else\n    {\n        fprintf(f, \"no '/' found in the scanned prefix of the path\\n\");\n    }\n\n    fprintf(f, \"-----------------------------\\n\");\n    fclose(f);\n}\n\n/* Keep the original signature and logic of OS_DirOpen_Impl. Insert only the probe\n * invocation to capture relevant state for reproducing the described violation.\n */\nint32 OS_DirOpen_Impl(const OS_object_token_t *token, const char *local_path)\n{\n    DIR *                          dp = NULL;\n    OS_impl_dir_internal_record_t *impl;\n\n    /* Probe before attempting to open the directory to capture the path and surrounding state. */\n    os_diropen_probe(local_path, token);\n\n    dp = opendir(local_path);\n\n    if (dp == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    impl     = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n    impl->dp = dp;\n\n    return OS_SUCCESS;\n}\n"
}