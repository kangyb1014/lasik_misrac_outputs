{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) can read up to OS_MAX_PATH_LEN bytes from VirtualPath even if the actual object it points into is smaller or lacks a '\\0' within that range. OS_CHECK_POINTER only ensures VirtualPath is non-NULL, not that the object has at least OS_MAX_PATH_LEN bytes or contains a NUL before that limit. For example, if OS_MAX_PATH_LEN == 64 and VirtualPath points into a buffer of size 10 with no terminating NUL, OS_strnlen may access bytes beyond the buffer bounds, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/743.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirOpen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirOpen_Impl:\n```c\nint32 OS_DirOpen_Impl(const OS_object_token_t *token, const char *local_path)\n{\n    DIR *                          dp = opendir(local_path);\n    OS_impl_dir_internal_record_t *impl;\n\n    if (dp == NULL)\n    {\n        return OS_ERROR;\n    }\n\n    impl     = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n    impl->dp = dp;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_DirOpen_Impl code.\n",
  "test_code": "int32 OS_DirOpen_Impl(const OS_object_token_t *token, const char *local_path)\n{\n    /* Probe logging: append control-flow and state info to a log file for reproduction\n     * This logging intentionally avoids reading the contents of local_path to prevent\n     * introducing additional out-of-bounds reads. It records the pointer values and\n     * outcomes (success/failure) around the opendir call so other agents can reproduce\n     * and analyze the reported violation scenario. */\n    FILE *log = fopen(\"/tmp/logs/743.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_DirOpen_Impl ENTRY: token=%p, token_deref=%p, local_path=%p\\n\",\n                (const void *)token,\n                (const void *)(token ? (const void *)token : NULL),\n                (const void *)local_path);\n        fflush(log);\n    }\n\n    DIR *                          dp = opendir(local_path);\n\n    if (log != NULL)\n    {\n        if (dp == NULL)\n        {\n            /* errno may be useful to diagnose why opendir failed; print its value if available. */\n            extern int errno; /* avoid adding includes here; most build environments define errno */\n            fprintf(log, \"opendir() returned NULL, errno=%d\\n\", errno);\n        }\n        else\n        {\n            fprintf(log, \"opendir() succeeded: dp=%p\\n\", (void *)dp);\n        }\n        fflush(log);\n    }\n\n    OS_impl_dir_internal_record_t *impl;\n\n    if (dp == NULL)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DirOpen_Impl EXIT: returning OS_ERROR\\n\");\n            fclose(log);\n        }\n        return OS_ERROR;\n    }\n\n    impl     = OS_OBJECT_TABLE_GET(OS_impl_dir_table, *token);\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_OBJECT_TABLE_GET returned impl=%p\\n\", (void *)impl);\n        fflush(log);\n    }\n\n    impl->dp = dp;\n\n    if (log != NULL)\n    {\n        fprintf(log, \"Assigned impl->dp=%p, returning OS_SUCCESS\\n\", (void *)impl->dp);\n        fclose(log);\n    }\n\n    return OS_SUCCESS;\n}\n"
}