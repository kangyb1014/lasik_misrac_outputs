{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nArgV is declared as 'char *const *ArgV' (elements of type 'char *'), so ArgV[1] is a pointer to non-const char. The call strtoul(ArgV[1], NULL, 0) passes that non-const char * to a function expecting 'const char *'. The pointed-to characters are not modified and therefore the pointer should be to a const-qualified type (e.g. 'const char *const *ArgV' or 'const char **') to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_Setup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2723.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_Setup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_Setup:\n```c\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                ++ArgV;\n            }\n\n            ++ArgV;\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_Setup code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe/logging helpers. These are inserted to capture control flow and\n * state around the location where ArgV[1] is passed to strtoul.\n * Logs are appended to /tmp/logs/2723.txt so that other agents can\n * reproduce and inspect the scenario. */\nstatic void UT_BSP_Probe_Append(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/2723.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s\\n\", msg);\n        fclose(f);\n    }\n}\n\nstatic void UT_BSP_Probe_State(const char *context, uint32 ArgC, char *const *ArgV, uint8 UserShift)\n{\n    FILE *f = fopen(\"/tmp/logs/2723.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"--- %s ---\\n\", context);\n    fprintf(f, \"ArgC (remaining) = %u\\n\", (unsigned)ArgC);\n    fprintf(f, \"UserShift (before) = %u\\n\", (unsigned)UserShift);\n    fprintf(f, \"ArgV pointer = %p\\n\", (void *)ArgV);\n    if (ArgV != NULL)\n    {\n        /* Log first few argv entries if available. Guard by ArgC.\n         * Note: ArgV may point to non-const char pointers (char *),\n         * which is the focus of the MISRA Rule 8.13 scenario. */\n        if (ArgC > 0)\n        {\n            fprintf(f, \"ArgV[0] pointer = %p, ArgV[0] = '%s'\\n\", (void *)ArgV[0], ArgV[0] ? ArgV[0] : \"(null)\");\n        }\n        if (ArgC > 1)\n        {\n            fprintf(f, \"ArgV[1] pointer = %p, ArgV[1] = '%s'\\n\", (void *)ArgV[1], ArgV[1] ? ArgV[1] : \"(null)\");\n        }\n    }\n    fprintf(f, \"--- end %s ---\\n\", context);\n    fclose(f);\n}\n\nstatic void UT_BSP_Probe_Strtoul_Call(const char *where, const char *arg, unsigned long result)\n{\n    FILE *f = fopen(\"/tmp/logs/2723.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"strtoul invocation (%s):\\n\", where);\n    fprintf(f, \"  argument pointer = %p\\n\", (void *)arg);\n    fprintf(f, \"  argument content = '%s'\\n\", arg ? arg : \"(null)\");\n    fprintf(f, \"  returned value = %lu\\n\", result);\n    fprintf(f, \"--- end strtoul (%s) ---\\n\", where);\n    fclose(f);\n}\n\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n\n    ArgC      = OS_BSP_GetArgC();\n\n    /* Log initial ArgC */\n    {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"UT_BSP_Setup: initial ArgC = %u\", (unsigned)ArgC);\n        UT_BSP_Probe_Append(buf);\n    }\n\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n\n        /* Log after retrieving ArgV */\n        UT_BSP_Probe_State(\"after_getargv\", ArgC, ArgV, UserShift);\n\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            /* Log each loop iteration and current ArgV[0] */\n            UT_BSP_Probe_State(\"loop_entry\", ArgC + 1u, ArgV, UserShift);\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n\n                /* Probe immediately before calling strtoul: capture ArgV pointer, ArgV[1] pointer and content. */\n                UT_BSP_Probe_State(\"before_strtoul\", ArgC + 1u, ArgV, UserShift);\n\n                /* Call strtoul as in original logic. Capture result and log it. */\n                {\n                    unsigned long sval = strtoul(ArgV[1], NULL, 0);\n                    UT_BSP_Probe_Strtoul_Call(\"UT_BSP_Setup: -v branch\", ArgV[1], sval);\n                    UserShift = (uint8)sval;\n                }\n\n                ++ArgV;\n            }\n\n            ++ArgV;\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    /* Log final computed values */\n    UT_BSP_Probe_State(\"final_state\", 0u, NULL, UserShift);\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n"
}