{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nArgV is declared as char *const *ArgV, so elements (ArgV[0]) have type char * (non-const). The code passes ArgV[0] to strcmp which takes const char *, but the pointed-to characters are not const-qualified even though they are only read. This violates MISRA C 2023 Rule 8.13. Fix: declare ArgV as const char *const *ArgV (or otherwise qualify the pointed-to characters as const) so pointers point to const-qualified data when possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_Setup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2723.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_Setup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_Setup:\n```c\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                ++ArgV;\n            }\n\n            ++ArgV;\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_Setup code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n    FILE *log = fopen(\"/tmp/logs/2723.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"--- UT_BSP_Setup enter ---\\n\");\n    }\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n\n    if (log != NULL)\n    {\n        fprintf(log, \"Initial ArgC=%u, UserShift=%u\\n\", (unsigned)ArgC, (unsigned)UserShift);\n    }\n\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Obtained ArgV pointer=%p\\n\", (void *)ArgV);\n            if (ArgV != NULL && ArgV[0] != NULL)\n            {\n                fprintf(log, \"ArgV[0] initial string=\\\"%s\\\" (pointer=%p)\\n\", ArgV[0], (void *)ArgV[0]);\n            }\n            else\n            {\n                fprintf(log, \"ArgV[0] is NULL or ArgV is NULL\\n\");\n            }\n        }\n\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            if (log != NULL)\n            {\n                const char *arg0 = (ArgV != NULL) ? ArgV[0] : NULL;\n                fprintf(log, \"Loop top: remaining ArgC=%u, ArgV=%p, ArgV[0]=%p\\n\",\n                        (unsigned)ArgC, (void *)ArgV, (void *)arg0);\n                if (arg0 != NULL)\n                {\n                    /* Log the string being compared so we can repro passing a non-const char* to strcmp */\n                    fprintf(log, \"Comparing string passed to strcmp: \\\"%s\\\"\\n\", arg0);\n                }\n                else\n                {\n                    fprintf(log, \"ArgV[0] is NULL; skipping comparisons that would dereference it\\n\");\n                }\n            }\n\n            if (ArgV != NULL && ArgV[0] != NULL && strcmp(ArgV[0], \"-d\") == 0)\n            {\n                if (log != NULL)\n                {\n                    fprintf(log, \"Matched '-d' -> set UserShift = UTASSERT_CASETYPE_DEBUG\\n\");\n                }\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n\n            if (ArgV != NULL && ArgV[0] != NULL && strcmp(ArgV[0], \"-q\") == 0)\n            {\n                if (log != NULL)\n                {\n                    fprintf(log, \"Matched '-q' -> set UserShift = UTASSERT_CASETYPE_FAILURE\\n\");\n                }\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n\n            if (ArgV != NULL && ArgV[0] != NULL && strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n\n                if (log != NULL)\n                {\n                    const char *next = (ArgV[1] != NULL) ? ArgV[1] : \"(null)\";\n                    fprintf(log, \"Matched '-v', next argument to parse: \\\"%s\\\"\\n\", next);\n                }\n\n                /* Preserve original behavior: parse ArgV[1] */\n                UserShift = strtoul(ArgV[1], NULL, 0);\n\n                if (log != NULL)\n                {\n                    fprintf(log, \"Parsed UserShift from ArgV[1] = %u\\n\", (unsigned)UserShift);\n                }\n\n                ++ArgV;\n            }\n\n            ++ArgV;\n\n            if (log != NULL)\n            {\n                fprintf(log, \"Loop end: updated ArgV pointer=%p, remaining ArgC=%u, UserShift=%u\\n\",\n                        (void *)ArgV, (unsigned)ArgC, (unsigned)UserShift);\n            }\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"Before finalization: UserShift=%u\\n\", (unsigned)UserShift);\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"UserShift adjusted to default UTASSERT_CASETYPE_PASS=%u\\n\", (unsigned)UserShift);\n        }\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    if (log != NULL)\n    {\n        fprintf(log, \"Final CurrVerbosity=%u\\n\", (unsigned)BSP_UT_Global.CurrVerbosity);\n        fprintf(log, \"--- UT_BSP_Setup exit ---\\n\\n\");\n        fclose(log);\n    }\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n"
}