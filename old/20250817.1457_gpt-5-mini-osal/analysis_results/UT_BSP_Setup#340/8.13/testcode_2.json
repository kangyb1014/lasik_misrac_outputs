{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nArgV is declared as char *const *ArgV so the pointed-to strings are char (non-const). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible (e.g. const char * const *ArgV) because the argv strings are not modified. The increment (++ArgV) advances the pointer but does not require the pointees to be mutable, so the lack of const on the character data is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_Setup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2723.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_Setup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_Setup:\n```c\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                ++ArgV;\n            }\n\n            ++ArgV;\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_Setup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe logging helper - appends messages to /tmp/logs/2723.txt */\nstatic void UT_BSP_Log(FILE *log, const char *fmt, ...)\n{\n    if (log == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(log, fmt, ap);\n    va_end(ap);\n\n    fflush(log);\n}\n\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    /* open log (append) so repeated runs accumulate evidence */\n    FILE *log = fopen(\"/tmp/logs/2723.txt\", \"a\");\n    UT_BSP_Log(log, \"=== UT_BSP_Setup ENTRY ===\\n\");\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n    UT_BSP_Log(log, \"After memset(BSP_UT_Global)\\n\");\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    UT_BSP_Log(log, \"Initial ArgC = %u\\n\", (unsigned)ArgC);\n\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        UT_BSP_Log(log, \"ArgV pointer = %p, ArgV[0] = %s\\n\",\n                   (void *)ArgV,\n                   (ArgV && ArgV[0]) ? ArgV[0] : \"(null)\");\n\n        while (ArgC > 0)\n        {\n            --ArgC;\n            UT_BSP_Log(log, \"Loop enter: remaining ArgC = %u, ArgV = %p, ArgV[0] = %s\\n\",\n                       (unsigned)ArgC,\n                       (void *)ArgV,\n                       (ArgV && ArgV[0]) ? ArgV[0] : \"(null)\");\n\n            /* log comparison results to capture control decisions */\n            if (ArgV && ArgV[0])\n            {\n                int cmp_d = strcmp(ArgV[0], \"-d\");\n                UT_BSP_Log(log, \"strcmp(ArgV[0], \\\"-d\\\") = %d\\n\", cmp_d);\n                if (cmp_d == 0)\n                {\n                    UserShift = UTASSERT_CASETYPE_DEBUG;\n                    UT_BSP_Log(log, \"Matched -d => UserShift = %u\\n\", (unsigned)UserShift);\n                }\n\n                int cmp_q = strcmp(ArgV[0], \"-q\");\n                UT_BSP_Log(log, \"strcmp(ArgV[0], \\\"-q\\\") = %d\\n\", cmp_q);\n                if (cmp_q == 0)\n                {\n                    UserShift = UTASSERT_CASETYPE_FAILURE;\n                    UT_BSP_Log(log, \"Matched -q => UserShift = %u\\n\", (unsigned)UserShift);\n                }\n\n                int cmp_v = strcmp(ArgV[0], \"-v\");\n                UT_BSP_Log(log, \"strcmp(ArgV[0], \\\"-v\\\") = %d\\n\", cmp_v);\n\n                if (cmp_v == 0 && ArgC > 0)\n                {\n                    UT_BSP_Log(log, \"-v found and ArgC > 0, ArgV[1] = %s\\n\",\n                               (ArgV[1]) ? ArgV[1] : \"(null)\");\n\n                    --ArgC;\n                    {\n                        unsigned long parsed = strtoul(ArgV[1], NULL, 0);\n                        UserShift = (uint8)parsed;\n                        UT_BSP_Log(log, \"Parsed UserShift from ArgV[1] = %s -> %u\\n\",\n                                   (ArgV[1]) ? ArgV[1] : \"(null)\", (unsigned)UserShift);\n                    }\n\n                    ++ArgV; /* advance to skip the value */\n                }\n            }\n            else\n            {\n                UT_BSP_Log(log, \"ArgV or ArgV[0] is NULL - cannot compare\\n\");\n            }\n\n            ++ArgV; /* advance to next argument */\n            UT_BSP_Log(log, \"End iteration: advanced ArgV -> %p\\n\", (void *)ArgV);\n        }\n    }\n\n    UT_BSP_Log(log, \"After parsing args: UserShift = %u\\n\", (unsigned)UserShift);\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n        UT_BSP_Log(log, \"UserShift reset to default PASS = %u\\n\", (unsigned)UserShift);\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n    UT_BSP_Log(log, \"Final CurrVerbosity = %u\\n\", (unsigned)BSP_UT_Global.CurrVerbosity);\n\n    UT_BSP_Log(log, \"Invoking UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \\\"UNIT TEST\\\")\\n\");\n\n    if (log)\n    {\n        fclose(log);\n    }\n\n    /* preserve original behavior */\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n"
}