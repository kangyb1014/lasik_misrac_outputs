{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer expression ArgV[0] has type \"char *const\" (ArgV is declared as \"char *const *ArgV\"), so the pointed-to characters are not const-qualified. In the fragment strcmp(ArgV[0], \"-q\") the argument is a non-const char* even though strcmp takes const char*. Since the string data are not modified, ArgV could and should be declared to point to a const-qualified char (for example: \"const char * const *ArgV\" or \"char const * const *ArgV\"). Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_Setup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2723.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_Setup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_Setup:\n```c\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                ++ArgV;\n            }\n\n            ++ArgV;\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_Setup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n#include <stdlib.h>\n\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n    FILE *ut_log = fopen(\"/tmp/logs/2723.txt\", \"a\");\n\n    /* Preserve original initialization */\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    if (ut_log)\n    {\n        fprintf(ut_log, \"\\n---- UT_BSP_Setup ENTRY ----\\n\");\n    }\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n\n    if (ut_log)\n    {\n        fprintf(ut_log, \"Initial ArgC = %u\\n\", (unsigned)ArgC);\n    }\n\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n\n        if (ut_log)\n        {\n            fprintf(ut_log, \"ArgV (pointer) = %p\\n\", (void *)ArgV);\n            if (ArgV[0] != NULL)\n            {\n                fprintf(ut_log, \"ArgV[0] (pointer) = %p\\n\", (void *)ArgV[0]);\n                fprintf(ut_log, \"ArgV[0] (string) = '%s'\\n\", ArgV[0]);\n            }\n            else\n            {\n                fprintf(ut_log, \"ArgV[0] is NULL\\n\");\n            }\n        }\n\n        while (ArgC > 0)\n        {\n            /* Decrement count as in original code */\n            --ArgC;\n\n            if (ut_log)\n            {\n                fprintf(ut_log, \"-- Processing argument, remaining ArgC = %u\\n\", (unsigned)ArgC);\n                fprintf(ut_log, \"   Current ArgV ptr = %p, ArgV[0] ptr = %p\\n\", (void *)ArgV, (void *)ArgV[0]);\n                fprintf(ut_log, \"   Current ArgV[0] string = '%s'\\n\", ArgV[0] ? ArgV[0] : \"(null)\");\n            }\n\n            /* Check -d */\n            {\n                int cmp = strcmp(ArgV[0], \"-d\");\n                if (ut_log)\n                {\n                    fprintf(ut_log, \"   strcmp(ArgV[0], \\\"-d\\\") = %d\\n\", cmp);\n                }\n                if (cmp == 0)\n                {\n                    UserShift = UTASSERT_CASETYPE_DEBUG;\n                    if (ut_log)\n                    {\n                        fprintf(ut_log, \"   Matched '-d', UserShift set to %u\\n\", (unsigned)UserShift);\n                    }\n                }\n            }\n\n            /* Check -q */\n            {\n                int cmp = strcmp(ArgV[0], \"-q\");\n                if (ut_log)\n                {\n                    fprintf(ut_log, \"   strcmp(ArgV[0], \\\"-q\\\") = %d\\n\", cmp);\n                }\n                if (cmp == 0)\n                {\n                    UserShift = UTASSERT_CASETYPE_FAILURE;\n                    if (ut_log)\n                    {\n                        fprintf(ut_log, \"   Matched '-q', UserShift set to %u\\n\", (unsigned)UserShift);\n                    }\n                }\n            }\n\n            /* Check -v with extra argument */\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                if (ut_log)\n                {\n                    fprintf(ut_log, \"   Matched '-v' and ArgC > 0, will consume next argument\\n\");\n                    fprintf(ut_log, \"   Next ArgV[1] ptr = %p, string = '%s'\\n\", (void *)ArgV[1], ArgV[1] ? ArgV[1] : \"(null)\");\n                }\n\n                --ArgC;\n                UserShift = strtoul(ArgV[1], NULL, 0);\n\n                if (ut_log)\n                {\n                    fprintf(ut_log, \"   Parsed UserShift from ArgV[1] = %u\\n\", (unsigned)UserShift);\n                }\n\n                ++ArgV;\n\n                if (ut_log)\n                {\n                    fprintf(ut_log, \"   ArgV advanced to %p, now ArgV[0] = %p ('%s')\\n\",\n                            (void *)ArgV, (void *)ArgV[0], ArgV[0] ? ArgV[0] : \"(null)\");\n                }\n            }\n\n            /* Advance ArgV as original logic */\n            ++ArgV;\n\n            if (ut_log)\n            {\n                fprintf(ut_log, \"   End of loop iteration, ArgV now = %p\\n\", (void *)ArgV);\n            }\n        }\n    }\n\n    if (ut_log)\n    {\n        fprintf(ut_log, \"Post-processing UserShift before bounds check = %u\\n\", (unsigned)UserShift);\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n        if (ut_log)\n        {\n            fprintf(ut_log, \"UserShift out-of-range or NONE, set to PASS (%u)\\n\", (unsigned)UserShift);\n        }\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    if (ut_log)\n    {\n        fprintf(ut_log, \"Final UserShift = %u\\n\", (unsigned)UserShift);\n        fprintf(ut_log, \"Final CurrVerbosity = %u\\n\", (unsigned)BSP_UT_Global.CurrVerbosity);\n        fprintf(ut_log, \"---- UT_BSP_Setup EXIT ----\\n\");\n        fclose(ut_log);\n    }\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n"
}