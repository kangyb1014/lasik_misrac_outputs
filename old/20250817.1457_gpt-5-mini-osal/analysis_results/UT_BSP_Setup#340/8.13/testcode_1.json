{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nArgV is declared as char *const * (pointer to non-const char pointers). The pointer targets character strings (argv) but the pointed-to characters are not const-qualified, so the pointer does not point to a const-qualified type. Per MISRA C 2023 Rule 8.13 it should be declared to point to const-qualified data when possible (e.g. const char * const *ArgV). Also, assigning OS_BSP_GetArgV() to a non-const-target could mask a discarded const qualifier if that function actually returns a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_Setup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2723.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_Setup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_Setup:\n```c\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                ++ArgV;\n            }\n\n            ++ArgV;\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_Setup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Helper logging functions. These are lightweight probes that append\n * control-flow and state information to /tmp/logs/2723.txt so other\n * agents can reproduce and get evidence for the pointer const-qualification\n * scenario described. They do not alter program logic or mutate any\n * data referenced by the original function. */\nstatic FILE *UT_BSP_LogFile(void)\n{\n    FILE *f = fopen(\"/tmp/logs/2723.txt\", \"a\");\n    if (f != NULL)\n    {\n        return f;\n    }\n\n    /* Try to create the directory if it does not exist, then reopen. */\n    if (errno == ENOENT)\n    {\n        (void)mkdir(\"/tmp/logs\", 0755);\n        f = fopen(\"/tmp/logs/2723.txt\", \"a\");\n    }\n    return f;\n}\n\nstatic void UT_BSP_Log(const char *fmt, ...)\n{\n    FILE *f = UT_BSP_LogFile();\n    if (f == NULL) return;\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    (void)fputc('\\n', f);\n    va_end(ap);\n\n    (void)fflush(f);\n    (void)fclose(f);\n}\n\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    /* Entry probe */\n    UT_BSP_Log(\"UT_BSP_Setup: entry\\nCode-level note: ArgV declared as 'char *const *ArgV' (pointer to non-const char*). Expected per MISRA: pointer to const-qualified type when possible.\");\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    UT_BSP_Log(\"OS_BSP_GetArgC() returned ArgC=%u\", (unsigned)ArgC);\n\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        UT_BSP_Log(\"OS_BSP_GetArgV() returned ArgV=%p (address of array of char*).\", (void *)ArgV);\n\n        if (ArgV == NULL)\n        {\n            UT_BSP_Log(\"ArgV is NULL despite ArgC>0\");\n        }\n        else\n        {\n            /* Log the first element pointer and its content safely. */\n            if (ArgV[0] != NULL)\n            {\n                UT_BSP_Log(\"ArgV[0] at %p -> string: '%s'\", (void *)ArgV[0], ArgV[0]);\n            }\n            else\n            {\n                UT_BSP_Log(\"ArgV[0] is NULL\");\n            }\n        }\n\n        while (ArgC > 0)\n        {\n            --ArgC;\n            UT_BSP_Log(\"Loop start: remaining ArgC=%u, current ArgV=%p, ArgV[0]=%p\", (unsigned)ArgC, (void *)ArgV, (void *)(ArgV ? ArgV[0] : NULL));\n\n            if (ArgV != NULL && ArgV[0] != NULL && strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UT_BSP_Log(\"Matched '-d' at ArgV[0]='%s'\", ArgV[0]);\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (ArgV != NULL && ArgV[0] != NULL && strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UT_BSP_Log(\"Matched '-q' at ArgV[0]='%s'\", ArgV[0]);\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (ArgV != NULL && ArgV[0] != NULL && strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                UT_BSP_Log(\"Matched '-v' at ArgV[0]='%s' and ArgC>0 (ArgC=%u) -- consuming next argument\", ArgV[0], (unsigned)ArgC);\n                --ArgC;\n\n                if (ArgV[1] != NULL)\n                {\n                    UT_BSP_Log(\"ArgV[1] at %p -> string for verbosity numeric parse: '%s'\", (void *)ArgV[1], ArgV[1]);\n                }\n                else\n                {\n                    UT_BSP_Log(\"ArgV[1] is NULL when expecting verbosity numeric argument\");\n                }\n\n                /* Preserve original behavior: parse verbosity value */\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                UT_BSP_Log(\"Parsed UserShift=%u from ArgV[1]\", (unsigned)UserShift);\n\n                ++ArgV; /* advance past the '-v' argument to point to numeric token previously at ArgV[1] */\n                UT_BSP_Log(\"Advanced ArgV to %p after handling '-v' (now ArgV[0]=%p)\", (void *)ArgV, (void *)(ArgV ? ArgV[0] : NULL));\n            }\n\n            ++ArgV;\n            UT_BSP_Log(\"End of iteration: advanced ArgV to %p (next ArgV[0]=%p), remaining ArgC=%u\", (void *)ArgV, (void *)(ArgV ? ArgV[0] : NULL), (unsigned)ArgC);\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UT_BSP_Log(\"UserShift out of range or NONE (UserShift=%u) -> defaulting to PASS\", (unsigned)UserShift);\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n    UT_BSP_Log(\"Final UserShift=%u, BSP_UT_Global.CurrVerbosity=%u\", (unsigned)UserShift, (unsigned)BSP_UT_Global.CurrVerbosity);\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n\n    UT_BSP_Log(\"UT_BSP_Setup: exit\");\n}\n"
}