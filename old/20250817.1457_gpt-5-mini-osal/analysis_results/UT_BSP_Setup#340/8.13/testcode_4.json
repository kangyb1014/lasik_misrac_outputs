{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nArgV is declared as char *const * which points to non-const char data (char *). The code only reads the argument strings (uses strcmp, strtoul) and does not modify them, so the pointer should point to const-qualified characters. This violates MISRA C 2023 Rule 8.13. Change the declaration to const char *const *ArgV (pointer to const char, with the pointer-to-pointer const preserved) so the pointed-to characters are const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_Setup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2723.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_Setup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_Setup:\n```c\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UserShift = strtoul(ArgV[1], NULL, 0);\n                ++ArgV;\n            }\n\n            ++ArgV;\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_Setup code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <stdlib.h>\n\n/* Helper logging routine: append a single formatted line to the log file. */\nstatic void UT_BSP_LogLine(const char *line)\n{\n    FILE *f = fopen(\"/tmp/logs/2723.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s\\n\", line);\n        fclose(f);\n    }\n}\n\nstatic void UT_BSP_LogState_Pair(const char *label, const char *s, const void *p)\n{\n    char buf[512];\n    /* Print label, string value and pointer address */\n    snprintf(buf, sizeof(buf), \"%s: value=\\\"%s\\\", addr=%p\", label, (s != NULL) ? s : \"(null)\", p);\n    UT_BSP_LogLine(buf);\n}\n\nstatic void UT_BSP_LogState_Scalar(const char *label, unsigned long v)\n{\n    char buf[128];\n    snprintf(buf, sizeof(buf), \"%s: %lu\", label, v);\n    UT_BSP_LogLine(buf);\n}\n\nvoid UT_BSP_Setup(void)\n{\n    uint8        UserShift;\n    uint32       ArgC;\n    char *const *ArgV;\n\n    /* Log start of function */\n    UT_BSP_LogLine(\"UT_BSP_Setup: ENTRY\");\n\n    memset(&BSP_UT_Global, 0, sizeof(BSP_UT_Global));\n\n    UserShift = UTASSERT_CASETYPE_NONE;\n    ArgC      = OS_BSP_GetArgC();\n\n    UT_BSP_LogState_Scalar(\"Initial ArgC\", (unsigned long)ArgC);\n\n    if (ArgC > 0)\n    {\n        ArgV = OS_BSP_GetArgV();\n        /* Log the ArgV pointer value */\n        {\n            char buf[128];\n            snprintf(buf, sizeof(buf), \"ArgV pointer (start) = %p\", (const void *)ArgV);\n            UT_BSP_LogLine(buf);\n        }\n\n        while (ArgC > 0)\n        {\n            --ArgC;\n\n            /* Log current iteration state */\n            UT_BSP_LogState_Pair(\"Current ArgV[0]\", ArgV[0], (const void *)ArgV[0]);\n            UT_BSP_LogState_Scalar(\"Remaining ArgC before checks\", (unsigned long)ArgC + 1UL);\n\n            if (strcmp(ArgV[0], \"-d\") == 0)\n            {\n                UT_BSP_LogLine(\"Matched -d -> set debug shift\");\n                UserShift = UTASSERT_CASETYPE_DEBUG;\n            }\n            if (strcmp(ArgV[0], \"-q\") == 0)\n            {\n                UT_BSP_LogLine(\"Matched -q -> set failure shift\");\n                UserShift = UTASSERT_CASETYPE_FAILURE;\n            }\n            if (strcmp(ArgV[0], \"-v\") == 0 && ArgC > 0)\n            {\n                --ArgC;\n                UT_BSP_LogLine(\"Matched -v -> parsing next argument as verbosity\");\n\n                UT_BSP_LogState_Pair(\"ArgV[1] before strtoul\", ArgV[1], (const void *)ArgV[1]);\n                UserShift = (uint8)strtoul(ArgV[1], NULL, 0);\n\n                UT_BSP_LogState_Scalar(\"UserShift after strtoul\", (unsigned long)UserShift);\n                ++ArgV;\n            }\n\n            /* Log pointer before increment */\n            {\n                char buf[128];\n                snprintf(buf, sizeof(buf), \"ArgV pointer (before ++ArgV) = %p\", (const void *)ArgV);\n                UT_BSP_LogLine(buf);\n            }\n\n            ++ArgV;\n\n            /* Log pointer after increment and remaining ArgC */\n            {\n                char buf[128];\n                snprintf(buf, sizeof(buf), \"ArgV pointer (after ++ArgV) = %p, Remaining ArgC = %lu\", (const void *)ArgV, (unsigned long)ArgC);\n                UT_BSP_LogLine(buf);\n            }\n        }\n    }\n\n    if (UserShift == UTASSERT_CASETYPE_NONE || UserShift >= UTASSERT_CASETYPE_MAX)\n    {\n        UT_BSP_LogLine(\"UserShift is NONE or out-of-range -> setting PASS\");\n        UserShift = UTASSERT_CASETYPE_PASS;\n    }\n\n    UT_BSP_LogState_Scalar(\"Final UserShift\", (unsigned long)UserShift);\n\n    BSP_UT_Global.CurrVerbosity = (2 << UserShift) - 1;\n\n    UT_BSP_LogState_Scalar(\"BSP_UT_Global.CurrVerbosity\", (unsigned long)BSP_UT_Global.CurrVerbosity);\n\n    UT_BSP_DoText(UTASSERT_CASETYPE_BEGIN, \"UNIT TEST\");\n\n    UT_BSP_LogLine(\"UT_BSP_Setup: EXIT\");\n}\n"
}