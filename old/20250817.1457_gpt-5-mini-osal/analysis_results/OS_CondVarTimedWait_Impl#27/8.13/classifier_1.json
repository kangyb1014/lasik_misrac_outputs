{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_CondVarTimedWait_Impl:\n```c\nint32 OS_CondVarTimedWait_Impl(const OS_object_token_t *token, const OS_time_t *abs_wakeup_time)\n{\n    struct timespec                    limit;\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    limit.tv_sec  = OS_TimeGetTotalSeconds(*abs_wakeup_time);\n    limit.tv_nsec = OS_TimeGetNanosecondsPart(*abs_wakeup_time);\n\n    pthread_cleanup_push(OS_Posix_CondVarReleaseMutex, &impl->mut);\n    status = pthread_cond_timedwait(&impl->cv, &impl->mut, &limit);\n    pthread_cleanup_pop(false);\n\n    if (status == ETIMEDOUT)\n    {\n        return OS_ERROR_TIMEOUT;\n    }\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_CondVarTimedWait_Impl:\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    int64 ticks; /**< Ticks elapsed since reference point */\n} OS_time_t\n...\ntypedef struct\n{\n    pthread_mutex_t mut;\n    pthread_cond_t  cv;\n} OS_impl_condvar_internal_record_t\n...\nOS_impl_condvar_internal_record_t OS_impl_condvar_table[OS_MAX_CONDVARS]\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstruct timespec                    limit;\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the fragment declares a non\u2011pointer automatic object (struct timespec limit;). MISRA C 2023 Rule 8.13 concerns pointer declarations and whether they should point to const\u2011qualified types; this fragment does not declare any pointer, so the rule is not applicable here."
}