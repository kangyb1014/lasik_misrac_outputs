{
  "user_message": "Target function code is:\n```c\nvoid OS_Posix_CompAbsDelayTime(uint32 msecs, struct timespec *tm)\n{\n    clock_gettime(CLOCK_REALTIME, tm);\n\n    /* add the delay to the current time */\n    tm->tv_sec += (time_t)(msecs / 1000);\n    /* convert residue ( msecs )  to nanoseconds */\n    tm->tv_nsec += (msecs % 1000) * 1000000L;\n\n    if (tm->tv_nsec >= 1000000000L)\n    {\n        tm->tv_nsec -= 1000000000L;\n        tm->tv_sec++;\n    }\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'OS_Posix_CompAbsDelayTime': {'callees': [], 'callers': ['OS_BinSemTimedWait_Impl', 'OS_CountSemTimedWait_Impl', 'OS_QueueGet_Impl']}, 'OS_BinSemTimedWait_Impl': {'callees': ['OS_Posix_CompAbsDelayTime', 'OS_GenericBinSemTake_Impl'], 'callers': ['OS_BinSemTimedWait']}, 'OS_CountSemTimedWait_Impl': {'callees': ['OS_ObjectIndexFromToken', 'OS_Posix_CompAbsDelayTime'], 'callers': ['OS_CountSemTimedWait']}, 'OS_QueueGet_Impl': {'callees': ['OS_ObjectIndexFromToken', 'OS_Posix_CompAbsDelayTime'], 'callers': ['OS_QueueGet']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct timespec",
    "clock_gettime",
    "CLOCK_REALTIME",
    "uint32",
    "time_t"
  ],
  "explanation": "struct timespec \u2014 needed to confirm the presence, names and types of members tv_sec and tv_nsec (so that tm->tv_sec and tm->tv_nsec are member accesses on the pointed object, not pointer reassignments). clock_gettime \u2014 required to see its prototype (or macro definition) to ensure it does not expand/alias to code that would reassign the local parameter variable tm (it should accept a struct timespec * and only modify the pointed object). CLOCK_REALTIME \u2014 include the macro definition to verify it is a simple constant/macro and not a function-like macro with side-effects that could affect tm or other parameters. uint32 \u2014 the typedef/definition of the msecs parameter type to confirm it is an integer scalar (not a pointer or unusual type that could imply pointer modification). time_t \u2014 definition/type of tv_sec to validate the cast and assignment semantics (ensuring operations affect the pointed object's member, not the pointer itself)."
}