{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UtMem2HexFile:\n```c\nbool UtMem2HexFile(const void *Memory, const char *Filename, uint32 Length)\n{\n    FILE * fp;\n    uint32 i;\n    uint32 j;\n\n    if ((fp = fopen(Filename, \"w\")))\n    {\n        for (i = 0; i < Length; i += 16)\n        {\n            fprintf(fp, \"   %06lX: \", (unsigned long)i);\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                    fprintf(fp, \"%02X \", ((uint8 *)Memory)[i + j]);\n                else\n                    fprintf(fp, \"   \");\n            }\n            fprintf(fp, \" \");\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                    fprintf(fp, \"%c\", isprint(((uint8 *)Memory)[i + j]) ? ((uint8 *)Memory)[i + j] : '.');\n            }\n            fprintf(fp, \"\\n\");\n        }\n        fclose(fp);\n        return true;\n    }\n    else\n    {\n        printf(\"UtMem2HexFile: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2HexFile: Error Opening File\");\n        return false;\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function UtMem2HexFile:\n#define UtAssert_True(Expression, __VA_ARGS__) UtAssertEx(Expression,UtAssert_GetContext(),__FILE__,__LINE__,__VA_ARGS__)\n...\nUtAssert_CaseType_t UtAssert_GetContext(void)\n{\n    return DefaultContext;\n}\n...\ntypedef uint8_t   uint8\n...\ntypedef uint32_t  uint32\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif ((i + j) < Length)\n                    fprintf(fp, \"%c\", isprint(((uint8 *)Memory)[i + j]) ? ((uint8 *)Memory)[i + j] : '.');\n```\nFocus on the above code fragment and judge whether it violates the rule 17.8 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the fragment only reads from the object pointed to by the parameter (via a cast) and does not modify the pointer parameter nor the pointed-to object. Rule 17.8 prohibits modifying a function parameter (or the pointer itself); this code does neither. (Note: casting away const to a non-const pointer is potentially problematic under other MISRA rules, but does not itself violate Rule 17.8 unless a write or reassignment occurs\u2014e.g. writing ((uint8 *)Memory)[i+j] = value or assigning to Memory would violate Rule 17.8.)"
}