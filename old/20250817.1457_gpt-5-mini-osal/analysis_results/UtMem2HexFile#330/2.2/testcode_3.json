{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro UtAssert_True expands to call UtAssert_GetContext() for every use. Given the provided UtAssert_GetContext implementation which simply returns a constant (DefaultContext) and has no side effects, each call is executed but its removal (replacing the call with the constant) would not affect program behaviour. Therefore the call sites constitute dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtMem2HexFile code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2642.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtMem2HexFile as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtMem2HexFile:\n```c\nbool UtMem2HexFile(const void *Memory, const char *Filename, uint32 Length)\n{\n    FILE * fp;\n    uint32 i;\n    uint32 j;\n\n    if ((fp = fopen(Filename, \"w\")))\n    {\n        for (i = 0; i < Length; i += 16)\n        {\n            fprintf(fp, \"   %06lX: \", (unsigned long)i);\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                    fprintf(fp, \"%02X \", ((uint8 *)Memory)[i + j]);\n                else\n                    fprintf(fp, \"   \");\n            }\n            fprintf(fp, \" \");\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                    fprintf(fp, \"%c\", isprint(((uint8 *)Memory)[i + j]) ? ((uint8 *)Memory)[i + j] : '.');\n            }\n            fprintf(fp, \"\\n\");\n        }\n        fclose(fp);\n        return true;\n    }\n    else\n    {\n        printf(\"UtMem2HexFile: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2HexFile: Error Opening File\");\n        return false;\n    }\n}\n```\n</target_code>\nPlease provide the modified UtMem2HexFile code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <ctype.h>\n#include <stdarg.h>\n#include <time.h>\n\n/*\n * Probe logging helper: append human-readable logs to /tmp/logs/2642.txt\n * Keeps the original UtMem2HexFile logic unchanged, only adds side-channel logging\n * so other agents can observe the control flow and state when the function runs.\n */\nstatic void UtProbe_Log(const char *fmt, ...)\n{\n    FILE *log = fopen(\"/tmp/logs/2642.txt\", \"a\");\n    if (!log)\n        return;\n\n    time_t t = time(NULL);\n    fprintf(log, \"[%ld] \", (long)t);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(log, fmt, ap);\n    va_end(ap);\n\n    fprintf(log, \"\\n\");\n    fclose(log);\n}\n\n/*\n * Modified UtMem2HexFile: original logic preserved. Added probe logging at\n * function entry, on file open success/failure, per-block iteration and in\n * the error branch just before calling UtAssert_True so callers can observe\n * that the assertion path is taken.\n */\nbool UtMem2HexFile(const void *Memory, const char *Filename, uint32 Length)\n{\n    FILE * fp;\n    uint32 i;\n    uint32 j;\n\n    /* Log function entry and key parameters */\n    UtProbe_Log(\"UtMem2HexFile: entry Memory=%p Filename='%s' Length=%lu\", Memory, Filename ? Filename : \"(null)\", (unsigned long)Length);\n\n    if ((fp = fopen(Filename, \"w\")))\n    {\n        UtProbe_Log(\"UtMem2HexFile: fopen succeeded for '%s', fp=%p\", Filename, (void *)fp);\n\n        for (i = 0; i < Length; i += 16)\n        {\n            /* Log the start of this 16-byte block and a short sample of its contents (up to 4 bytes) */\n            {\n                unsigned long idx = (unsigned long)i;\n                unsigned char c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n                unsigned int available = 0;\n                if (Memory != NULL)\n                {\n                    unsigned char *mb = (unsigned char *)Memory;\n                    if ((i + 0) < Length) { c0 = mb[i + 0]; available++; }\n                    if ((i + 1) < Length) { c1 = mb[i + 1]; available++; }\n                    if ((i + 2) < Length) { c2 = mb[i + 2]; available++; }\n                    if ((i + 3) < Length) { c3 = mb[i + 3]; available++; }\n                }\n                UtProbe_Log(\"UtMem2HexFile: block start i=%lu available_bytes=%u sample=%02X %02X %02X %02X\", idx, available, c0, c1, c2, c3);\n            }\n\n            fprintf(fp, \"   %06lX: \", (unsigned long)i);\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                    fprintf(fp, \"%02X \", ((uint8 *)Memory)[i + j]);\n                else\n                    fprintf(fp, \"   \");\n            }\n            fprintf(fp, \" \");\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                    fprintf(fp, \"%c\", isprint(((uint8 *)Memory)[i + j]) ? ((uint8 *)Memory)[i + j] : '.');\n            }\n            fprintf(fp, \"\\n\");\n        }\n        fclose(fp);\n        UtProbe_Log(\"UtMem2HexFile: successfully wrote hex dump to '%s'\", Filename);\n        return true;\n    }\n    else\n    {\n        /* Log the fopen failure details */\n        UtProbe_Log(\"UtMem2HexFile: fopen failed for '%s' errno=%d (%s)\", Filename ? Filename : \"(null)\", errno, strerror(errno));\n\n        /* Record that we are about to call UtAssert_True in the error path. This helps\n         * reproduce evidence that the macro usage is exercised at runtime. Note: we do\n         * not change the existing call to UtAssert_True; we only log before invoking it.\n         */\n        UtProbe_Log(\"UtMem2HexFile: invoking UtAssert_True(false, ...) for '%s'\", Filename ? Filename : \"(null)\");\n\n        printf(\"UtMem2HexFile: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2HexFile: Error Opening File\");\n\n        UtProbe_Log(\"UtMem2HexFile: returned from UtAssert_True(false, ...)\");\n        return false;\n    }\n}\n"
}