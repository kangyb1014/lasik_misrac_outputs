{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe call UtAssert_True(false, \"...\") unconditionally signals an assertion failure. If UtAssertEx (the underlying call) does not return (for example it aborts, longjmps, or otherwise terminates the calling function), then the subsequent statement 'return false;' is unreachable. That unreachable return (and any code after the non-returning assertion) would violate MISRA C 2023 Rule 2.1. (If, however, UtAssertEx is guaranteed to return normally, there is no unreachable code in this fragment.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtMem2HexFile code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2641.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtMem2HexFile as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtMem2HexFile:\n```c\nbool UtMem2HexFile(const void *Memory, const char *Filename, uint32 Length)\n{\n    FILE * fp;\n    uint32 i;\n    uint32 j;\n\n    if ((fp = fopen(Filename, \"w\")))\n    {\n        for (i = 0; i < Length; i += 16)\n        {\n            fprintf(fp, \"   %06lX: \", (unsigned long)i);\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                    fprintf(fp, \"%02X \", ((uint8 *)Memory)[i + j]);\n                else\n                    fprintf(fp, \"   \");\n            }\n            fprintf(fp, \" \");\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                    fprintf(fp, \"%c\", isprint(((uint8 *)Memory)[i + j]) ? ((uint8 *)Memory)[i + j] : '.');\n            }\n            fprintf(fp, \"\\n\");\n        }\n        fclose(fp);\n        return true;\n    }\n    else\n    {\n        printf(\"UtMem2HexFile: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2HexFile: Error Opening File\");\n        return false;\n    }\n}\n```\n</target_code>\nPlease provide the modified UtMem2HexFile code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <ctype.h>\n#include <stdbool.h>\n\n/* Probe logging utilities inserted to capture control flow and state. */\nstatic void UtProbe_Log(const char *stage, const void *Memory, const char *Filename, unsigned long Length, unsigned long i, unsigned long j)\n{\n    FILE *log = fopen(\"/tmp/logs/2641.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"stage=%s Filename=%s Length=%lu i=%lu j=%lu Memory=%p\\n\",\n                stage, (Filename != NULL) ? Filename : \"(null)\", Length, i, j, Memory);\n        fclose(log);\n    }\n}\n\nstatic void UtProbe_LogMsg(const char *msg)\n{\n    FILE *log = fopen(\"/tmp/logs/2641.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"%s\\n\", msg);\n        fclose(log);\n    }\n}\n\n/* Original function with probes added. Types uint32/uint8 are assumed to be defined\n   elsewhere in the project as in the original code. We use unsigned long for printing. */\nbool UtMem2HexFile(const void *Memory, const char *Filename, uint32 Length)\n{\n    FILE * fp;\n    uint32 i;\n    uint32 j;\n\n    UtProbe_Log(\"entry\", Memory, Filename, (unsigned long)Length, 0UL, 0UL);\n    UtProbe_Log(\"before_fopen\", Memory, Filename, (unsigned long)Length, 0UL, 0UL);\n\n    if ((fp = fopen(Filename, \"w\")))\n    {\n        UtProbe_Log(\"fopen_success\", Memory, Filename, (unsigned long)Length, 0UL, 0UL);\n        for (i = 0; i < Length; i += 16)\n        {\n            UtProbe_Log(\"loop_iteration_start\", Memory, Filename, (unsigned long)Length, (unsigned long)i, 0UL);\n            fprintf(fp, \"   %06lX: \", (unsigned long)i);\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                    fprintf(fp, \"%02X \", ((uint8 *)Memory)[i + j]);\n                else\n                    fprintf(fp, \"   \");\n            }\n            fprintf(fp, \" \");\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                    fprintf(fp, \"%c\", isprint(((uint8 *)Memory)[i + j]) ? ((uint8 *)Memory)[i + j] : '.');\n            }\n            fprintf(fp, \"\\n\");\n            UtProbe_Log(\"loop_iteration_end\", Memory, Filename, (unsigned long)Length, (unsigned long)i, 0UL);\n        }\n        fclose(fp);\n        UtProbe_Log(\"fclose_and_return_true\", Memory, Filename, (unsigned long)Length, 0UL, 0UL);\n        return true;\n    }\n    else\n    {\n        /* Preserve original diagnostic output */\n        printf(\"UtMem2HexFile: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n\n        /* Log failure and probe before calling the assertion helper. If UtAssert_True does not return,\n           the log entry after this call will not be recorded, providing evidence for a non-returning\n           assertion path (unreachable subsequent code). */\n        UtProbe_Log(\"fopen_failed\", Memory, Filename, (unsigned long)Length, 0UL, 0UL);\n        UtProbe_LogMsg(\"about_to_call_UtAssert_True\");\n\n        UtAssert_True(false, \"UtMem2HexFile: Error Opening File\");\n\n        /* If UtAssert_True returns normally, this will be logged; if it does not return, this is unreachable. */\n        UtProbe_LogMsg(\"returned_from_UtAssert_True\");\n        return false;\n    }\n}\n"
}