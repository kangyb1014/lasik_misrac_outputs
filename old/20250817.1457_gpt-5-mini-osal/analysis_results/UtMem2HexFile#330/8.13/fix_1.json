{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\ntypedef uint8_t  uint8;\ntypedef uint32_t uint32;\nvoid UtAssert_True(bool expr, const char *msg);\nstatic void Probe_LogAccess(const void *Memory, uint32 Index, const char *context)\n{\n    FILE *logf;\n    /* Ensure the log directory exists; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    logf = fopen(\"/tmp/logs/2643.txt\", \"a\");\n    if (logf == NULL)\n    {\n        return;\n    }\n\n    /* Use a const qualified pointer to avoid casting away const here. */\n    const uint8 *p = (const uint8 *)Memory;\n\n    fprintf(logf, \"Probe: context=%s Index=%lu Memory=%p\\n\", context, (unsigned long)Index, Memory);\n    if (Memory != NULL)\n    {\n        /* Print hex byte and printable character (use unsigned char for isprint) */\n        unsigned int byte = (unsigned int)p[Index];\n        int printable = isprint((unsigned char)p[Index]);\n        fprintf(logf, \"Probe: byte=0x%02X (%u) printable=%d char=%c\\n\",\n                byte, byte, printable, printable ? (int)p[Index] : '.');\n    }\n    else\n    {\n        fprintf(logf, \"Probe: Memory is NULL\\n\");\n    }\n\n    fclose(logf);\n}\n\nbool UtMem2HexFile(const void *Memory, const char *Filename, uint32 Length)\n{\n    FILE * fp;\n    uint32 i;\n    uint32 j;\n\n    /* Log function entry */\n    Probe_LogAccess(Memory, 0u, \"Enter_UtMem2HexFile\");\n\n    if ((fp = fopen(Filename, \"w\")))\n    {\n        for (i = 0; i < Length; i += 16)\n        {\n            fprintf(fp, \"   %06lX: \", (unsigned long)i);\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                {\n                    /* Probe before the hex byte is emitted: records the index and value. */\n                    Probe_LogAccess(Memory, i + j, \"Emit_HexByte\");\n                    fprintf(fp, \"%02X \", ((uint8 *)Memory)[i + j]);\n                }\n                else\n                    fprintf(fp, \"   \");\n            }\n            fprintf(fp, \" \");\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                {\n                    /* Probe before the ASCII byte is evaluated/printed. */\n                    Probe_LogAccess(Memory, i + j, \"Emit_AsciiByte\");\n                    fprintf(fp, \"%c\", isprint(((uint8 *)Memory)[i + j]) ? ((uint8 *)Memory)[i + j] : '.');\n                }\n            }\n            fprintf(fp, \"\\n\");\n        }\n        fclose(fp);\n        return true;\n    }\n    else\n    {\n        printf(\"UtMem2HexFile: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2HexFile: Error Opening File\");\n        return false;\n    }\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmp1wle7q6j/src/ut_assert/src/uttools.c:49:\n/tmp/tmp1wle7q6j/src/ut_assert/inc/utassert.h:158:63: error: expected declaration specifiers or '...' before 'UtAssert_GetContext'\n  158 | #define UtAssert_True(Expression, ...) UtAssertEx(Expression, UtAssert_GetContext(), __FILE__, __LINE__, __VA_ARGS__)\n      |                                                               ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp1wle7q6j/src/ut_assert/src/uttools.c:109:6: note: in expansion of macro 'UtAssert_True'\n  109 | void UtAssert_True(bool expr, const char *msg);\n      |      ^~~~~~~~~~~~~\n/tmp/tmp1wle7q6j/src/ut_assert/inc/utassert.h:158:86: error: expected declaration specifiers or '...' before string constant\n  158 | #define UtAssert_True(Expression, ...) UtAssertEx(Expression, UtAssert_GetContext(), __FILE__, __LINE__, __VA_ARGS__)\n      |                                                                                      ^~~~~~~~\n/tmp/tmp1wle7q6j/src/ut_assert/src/uttools.c:109:6: note: in expansion of macro 'UtAssert_True'\n  109 | void UtAssert_True(bool expr, const char *msg);\n      |      ^~~~~~~~~~~~~\n/tmp/tmp1wle7q6j/src/ut_assert/inc/utassert.h:158:96: error: expected declaration specifiers or '...' before numeric constant\n  158 | #define UtAssert_True(Expression, ...) UtAssertEx(Expression, UtAssert_GetContext(), __FILE__, __LINE__, __VA_ARGS__)\n      |                                                                                                ^~~~~~~~\n/tmp/tmp1wle7q6j/src/ut_assert/src/uttools.c:109:6: note: in expansion of macro 'UtAssert_True'\n  109 | void UtAssert_True(bool expr, const char *msg);\n      |      ^~~~~~~~~~~~~\ngmake[2]: *** [ut_assert/CMakeFiles/ut_assert.dir/build.make:132: ut_assert/CMakeFiles/ut_assert.dir/src/uttools.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:788: ut_assert/CMakeFiles/ut_assert.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of UtMem2HexFile as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <ctype.h>\n#include <errno.h>\n#include <string.h>\n\ntypedef uint8_t  uint8;\ntypedef uint32_t uint32;\n\nstatic void Probe_LogAccess(const void *Memory, uint32 Index, const char *context)\n{\n    FILE *logf;\n    /* Ensure the log directory exists; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    logf = fopen(\"/tmp/logs/2643.txt\", \"a\");\n    if (logf == NULL)\n    {\n        return;\n    }\n\n    /* Use a const qualified pointer to avoid casting away const here. */\n    const uint8 *p = (const uint8 *)Memory;\n\n    fprintf(logf, \"Probe: context=%s Index=%lu Memory=%p\\n\", context, (unsigned long)Index, Memory);\n    if (Memory != NULL)\n    {\n        /* Print hex byte and printable character (use unsigned char for isprint) */\n        unsigned int byte = (unsigned int)p[Index];\n        int printable = isprint((unsigned char)p[Index]);\n        fprintf(logf, \"Probe: byte=0x%02X (%u) printable=%d char=%c\\n\",\n                byte, byte, printable, printable ? (int)p[Index] : '.');\n    }\n    else\n    {\n        fprintf(logf, \"Probe: Memory is NULL\\n\");\n    }\n\n    fclose(logf);\n}\n\nbool UtMem2HexFile(const void *Memory, const char *Filename, uint32 Length)\n{\n    FILE * fp;\n    uint32 i;\n    uint32 j;\n\n    /* Log function entry */\n    Probe_LogAccess(Memory, 0u, \"Enter_UtMem2HexFile\");\n\n    if ((fp = fopen(Filename, \"w\")))\n    {\n        for (i = 0; i < Length; i += 16)\n        {\n            fprintf(fp, \"   %06lX: \", (unsigned long)i);\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                {\n                    /* Probe before the hex byte is emitted: records the index and value. */\n                    Probe_LogAccess(Memory, i + j, \"Emit_HexByte\");\n                    fprintf(fp, \"%02X \", ((uint8 *)Memory)[i + j]);\n                }\n                else\n                    fprintf(fp, \"   \");\n            }\n            fprintf(fp, \" \");\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                {\n                    /* Probe before the ASCII byte is evaluated/printed. */\n                    Probe_LogAccess(Memory, i + j, \"Emit_AsciiByte\");\n                    fprintf(fp, \"%c\", isprint(((uint8 *)Memory)[i + j]) ? ((uint8 *)Memory)[i + j] : '.');\n                }\n            }\n            fprintf(fp, \"\\n\");\n        }\n        fclose(fp);\n        return true;\n    }\n    else\n    {\n        printf(\"UtMem2HexFile: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        /* Call the project-provided UtAssert_True macro/function as originally intended. */\n        UtAssert_True(false, \"UtMem2HexFile: Error Opening File\");\n        return false;\n    }\n}\n",
  "explanation": "The compilation error was caused by a local prototype \"void UtAssert_True(bool expr, const char *msg);\" colliding with a macro of the same name (UtAssert_True) defined in the project's header. The macro expansion made the prototype invalid. I removed that prototype and added the necessary standard includes (stdio.h, stdint.h, stdbool.h, sys/types.h, sys/stat.h, ctype.h, errno.h, string.h) so all types and functions used are declared. No macros were defined, no main was added, and the original logic of UtMem2HexFile and Probe_LogAccess is preserved."
}