{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the code casts away the const qualifier of the parameter 'Memory' (declared as const void *). The fragment uses ((uint8 *)Memory)[i + j] inside fprintf/isprint, which converts a const-qualified pointer to a non-const pointer and then dereferences it. This violates MISRA C 2023 Rule 8.13. Recommended fix: preserve const qualification, e.g. use 'const uint8 *p = (const uint8 *)Memory;' and then 'p[i + j]'. Also consider casting to (unsigned char) when passing to isprint/fprintf to meet their requirements.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtMem2HexFile code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2643.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtMem2HexFile as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtMem2HexFile:\n```c\nbool UtMem2HexFile(const void *Memory, const char *Filename, uint32 Length)\n{\n    FILE * fp;\n    uint32 i;\n    uint32 j;\n\n    if ((fp = fopen(Filename, \"w\")))\n    {\n        for (i = 0; i < Length; i += 16)\n        {\n            fprintf(fp, \"   %06lX: \", (unsigned long)i);\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                    fprintf(fp, \"%02X \", ((uint8 *)Memory)[i + j]);\n                else\n                    fprintf(fp, \"   \");\n            }\n            fprintf(fp, \" \");\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                    fprintf(fp, \"%c\", isprint(((uint8 *)Memory)[i + j]) ? ((uint8 *)Memory)[i + j] : '.');\n            }\n            fprintf(fp, \"\\n\");\n        }\n        fclose(fp);\n        return true;\n    }\n    else\n    {\n        printf(\"UtMem2HexFile: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2HexFile: Error Opening File\");\n        return false;\n    }\n}\n```\n</target_code>\nPlease provide the modified UtMem2HexFile code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <ctype.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Minimal type aliases used by original code */\ntypedef uint8_t  uint8;\ntypedef uint32_t uint32;\n\n/* Provide prototype so this compiles as a translation unit. */\nvoid UtAssert_True(bool expr, const char *msg);\n\n/*\n * Probe logger: append control-flow and state information to /tmp/logs/2643.txt.\n * This function intentionally uses a const-qualified pointer when reading bytes\n * from Memory so the probe itself does not cast away const-qualification.\n */\nstatic void Probe_LogAccess(const void *Memory, uint32 Index, const char *context)\n{\n    FILE *logf;\n    /* Ensure the log directory exists; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    logf = fopen(\"/tmp/logs/2643.txt\", \"a\");\n    if (logf == NULL)\n    {\n        return;\n    }\n\n    /* Use a const qualified pointer to avoid casting away const here. */\n    const uint8 *p = (const uint8 *)Memory;\n\n    fprintf(logf, \"Probe: context=%s Index=%lu Memory=%p\\n\", context, (unsigned long)Index, Memory);\n    if (Memory != NULL)\n    {\n        /* Print hex byte and printable character (use unsigned char for isprint) */\n        unsigned int byte = (unsigned int)p[Index];\n        int printable = isprint((unsigned char)p[Index]);\n        fprintf(logf, \"Probe: byte=0x%02X (%u) printable=%d char=%c\\n\",\n                byte, byte, printable, printable ? (int)p[Index] : '.');\n    }\n    else\n    {\n        fprintf(logf, \"Probe: Memory is NULL\\n\");\n    }\n\n    fclose(logf);\n}\n\nbool UtMem2HexFile(const void *Memory, const char *Filename, uint32 Length)\n{\n    FILE * fp;\n    uint32 i;\n    uint32 j;\n\n    /* Log function entry */\n    Probe_LogAccess(Memory, 0u, \"Enter_UtMem2HexFile\");\n\n    if ((fp = fopen(Filename, \"w\")))\n    {\n        for (i = 0; i < Length; i += 16)\n        {\n            fprintf(fp, \"   %06lX: \", (unsigned long)i);\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                {\n                    /* Probe before the hex byte is emitted: records the index and value. */\n                    Probe_LogAccess(Memory, i + j, \"Emit_HexByte\");\n                    fprintf(fp, \"%02X \", ((uint8 *)Memory)[i + j]);\n                }\n                else\n                    fprintf(fp, \"   \");\n            }\n            fprintf(fp, \" \");\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                {\n                    /* Probe before the ASCII byte is evaluated/printed. */\n                    Probe_LogAccess(Memory, i + j, \"Emit_AsciiByte\");\n                    fprintf(fp, \"%c\", isprint(((uint8 *)Memory)[i + j]) ? ((uint8 *)Memory)[i + j] : '.');\n                }\n            }\n            fprintf(fp, \"\\n\");\n        }\n        fclose(fp);\n        return true;\n    }\n    else\n    {\n        printf(\"UtMem2HexFile: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2HexFile: Error Opening File\");\n        return false;\n    }\n}\n"
}