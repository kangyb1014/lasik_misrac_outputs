{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter Memory is declared as const void * but is cast to a non-const pointer and dereferenced: ((uint8 *)Memory)[i + j]. This discards the const qualifier and therefore violates MISRA C 2023 Rule 8.13. The correct approach is to preserve const, e.g. use (const uint8 *)Memory or const uint8 *p = (const uint8 *)Memory and then p[i + j].\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtMem2HexFile code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2643.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtMem2HexFile as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtMem2HexFile:\n```c\nbool UtMem2HexFile(const void *Memory, const char *Filename, uint32 Length)\n{\n    FILE * fp;\n    uint32 i;\n    uint32 j;\n\n    if ((fp = fopen(Filename, \"w\")))\n    {\n        for (i = 0; i < Length; i += 16)\n        {\n            fprintf(fp, \"   %06lX: \", (unsigned long)i);\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                    fprintf(fp, \"%02X \", ((uint8 *)Memory)[i + j]);\n                else\n                    fprintf(fp, \"   \");\n            }\n            fprintf(fp, \" \");\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                    fprintf(fp, \"%c\", isprint(((uint8 *)Memory)[i + j]) ? ((uint8 *)Memory)[i + j] : '.');\n            }\n            fprintf(fp, \"\\n\");\n        }\n        fclose(fp);\n        return true;\n    }\n    else\n    {\n        printf(\"UtMem2HexFile: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2HexFile: Error Opening File\");\n        return false;\n    }\n}\n```\n</target_code>\nPlease provide the modified UtMem2HexFile code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <ctype.h>\n#include <string.h>\n#include <errno.h>\n\n/* Provide simple aliases to match the original signature */\ntypedef uint8_t uint8;\ntypedef uint32_t uint32;\n\n/* Minimal UtAssert_True stub so the code is self-contained for compilation. */\nvoid UtAssert_True(bool expr, const char *msg)\n{\n    if (!expr)\n    {\n        fprintf(stderr, \"UtAssert_True failed: %s\\n\", msg);\n    }\n}\n\n/* Probe helpers that write detailed logs for reproducing the reported violation.\n   Logs are appended to /tmp/logs/2643.txt so other agents can inspect the control\n   flow and state (pointer values, indices, byte values and printability). */\nstatic void Probe_LogHeader(const void *Memory, const char *Filename, uint32 Length)\n{\n    FILE *log = fopen(\"/tmp/logs/2643.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"--- UtMem2HexFile probe start ---\\n\");\n        fprintf(log, \"Memory pointer: %p\\n\", Memory);\n        fprintf(log, \"Filename: %s\\n\", Filename ? Filename : \"(null)\");\n        fprintf(log, \"Length: %u\\n\", (unsigned)Length);\n        fprintf(log, \"(Note) The original code casts Memory to a non-const pointer: ((uint8 *)Memory)[idx]\\n\");\n        fprintf(log, \"---\\n\");\n        fclose(log);\n    }\n}\n\nstatic void Probe_LogOpenResult(const char *Filename, bool opened)\n{\n    FILE *log = fopen(\"/tmp/logs/2643.txt\", \"a\");\n    if (log)\n    {\n        if (opened)\n            fprintf(log, \"Opened output file '%s' for writing successfully.\\n\", Filename);\n        else\n            fprintf(log, \"Failed to open output file '%s' for writing. errno=%d (%s)\\n\", Filename, errno, strerror(errno));\n        fclose(log);\n    }\n}\n\nstatic void Probe_LogLineStart(uint32 i)\n{\n    FILE *log = fopen(\"/tmp/logs/2643.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"Line start: base index = %u (0x%06lX)\\n\", (unsigned)i, (unsigned long)i);\n        fclose(log);\n    }\n}\n\nstatic void Probe_LogByteAccess(const void *Memory, uint32 idx, uint32 i, uint32 j, uint8 value, int printable)\n{\n    FILE *log = fopen(\"/tmp/logs/2643.txt\", \"a\");\n    if (log)\n    {\n        /* Log the index, the pointer arithmetic (using a const-qualified pointer for the probe),\n           the byte value and whether it is printable. Also note that original code used a cast\n           that discards const: ((uint8 *)Memory)[i + j] */\n        const uint8 *cptr = (const uint8 *)Memory;\n        const void *addr = (const void *)(cptr + idx);\n        fprintf(log, \"  byte idx=%u (i=%u, j=%u): addr=%p, value=0x%02X, char='%c', isprint=%d, original_cast_used=((uint8 *)Memory)[i + j]\\n\",\n                (unsigned)idx, (unsigned)i, (unsigned)j, addr, (unsigned)value,\n                (isprint(value) ? value : '.'), printable);\n        fclose(log);\n    }\n}\n\n/* Modified UtMem2HexFile with inserted probes. The original behavior is preserved as much as possible.\n   NOTE: The original code performs casts that discard const (this is the reported violation). We keep\n   those original casts in place so the function's behavior is unchanged; the probes read through a\n   const-qualified pointer when probing to avoid introducing additional const-discarding operations. */\nbool UtMem2HexFile(const void *Memory, const char *Filename, uint32 Length)\n{\n    FILE * fp;\n    uint32 i;\n    uint32 j;\n\n    /* Log initial info for reproducing the violation scenario */\n    Probe_LogHeader(Memory, Filename, Length);\n\n    if ((fp = fopen(Filename, \"w\")))\n    {\n        Probe_LogOpenResult(Filename, true);\n\n        for (i = 0; i < Length; i += 16)\n        {\n            /* Log start of each 16-byte line */\n            Probe_LogLineStart(i);\n\n            fprintf(fp, \"   %06lX: \", (unsigned long)i);\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                {\n                    /* Original code reads using a cast that discards const. Keep this to preserve behavior. */\n                    fprintf(fp, \"%02X \", ((uint8 *)Memory)[i + j]);\n\n                    /* For logging, read via a const-qualified pointer to avoid introducing additional violations. */\n                    const uint8 *cptr = (const uint8 *)Memory;\n                    uint32 idx = i + j;\n                    uint8 val = cptr[idx];\n                    Probe_LogByteAccess(Memory, idx, i, j, val, isprint(val));\n                }\n                else\n                    fprintf(fp, \"   \");\n            }\n            fprintf(fp, \" \");\n            for (j = 0; j < 16; j++)\n            {\n                if ((i + j) < Length)\n                    fprintf(fp, \"%c\", isprint(((uint8 *)Memory)[i + j]) ? ((uint8 *)Memory)[i + j] : '.');\n            }\n            fprintf(fp, \"\\n\");\n        }\n        fclose(fp);\n        return true;\n    }\n    else\n    {\n        Probe_LogOpenResult(Filename, false);\n        printf(\"UtMem2HexFile: Error Opening File: %s, %s\\n\", Filename, strerror(errno));\n        UtAssert_True(false, \"UtMem2HexFile: Error Opening File\");\n        return false;\n    }\n}\n"
}