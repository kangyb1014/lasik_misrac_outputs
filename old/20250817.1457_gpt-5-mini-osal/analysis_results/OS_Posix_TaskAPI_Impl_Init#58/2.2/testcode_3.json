{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe memset(&sched_rr_limits, 0, sizeof(sched_rr_limits)) call only zeroes a local POSIX_PriorityLimits_t before it is later passed to OS_Posix_GetSchedulerParams which always initializes both PriorityMax and PriorityMin. The value is only used (assigned into POSIX_GlobalVars.PriLimits) when OS_Posix_GetSchedulerParams returns true; if the function is not called or returns false the zeroing has no effect on program behaviour. Therefore removing this memset would not change runtime behaviour (it only suppresses a possible compiler \u2018\u2018maybe uninitialized\u2019\u2019 warning), so the operation is redundant and constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Posix_TaskAPI_Impl_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/466.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Posix_TaskAPI_Impl_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Posix_TaskAPI_Impl_Init:\n```c\nint32 OS_Posix_TaskAPI_Impl_Init(void)\n{\n    int                    ret;\n    long                   ret_long;\n    int                    sig;\n    struct sched_param     sched_param;\n    int                    sched_policy;\n    POSIX_PriorityLimits_t sched_fifo_limits;\n    bool                   sched_fifo_valid;\n    POSIX_PriorityLimits_t sched_rr_limits;\n    bool                   sched_rr_valid;\n\n    /* Initialize Local Tables */\n    memset(OS_impl_task_table, 0, sizeof(OS_impl_task_table));\n\n    /* Clear the \"limits\" structs otherwise the compiler may warn\n     * about possibly being used uninitialized (false warning)\n     */\n    memset(&sched_fifo_limits, 0, sizeof(sched_fifo_limits));\n    memset(&sched_rr_limits, 0, sizeof(sched_rr_limits));\n\n    /*\n     * Create the key used to store OSAL task IDs\n     */\n    ret = pthread_key_create(&POSIX_GlobalVars.ThreadKey, NULL);\n    if (ret != 0)\n    {\n        OS_DEBUG(\"Error creating thread key: %s (%d)\\n\", strerror(ret), ret);\n        return OS_ERROR;\n    }\n\n    /*\n    ** Disable Signals to parent thread and therefore all\n    ** child threads create will block all signals\n    ** Note: Timers will not work in the application unless\n    **       threads are spawned in OS_Application_Startup.\n    */\n    sigfillset(&POSIX_GlobalVars.MaximumSigMask);\n\n    /*\n     * Keep these signals unblocked so the process can be interrupted\n     */\n    sigdelset(&POSIX_GlobalVars.MaximumSigMask, SIGINT);  /* CTRL+C */\n    sigdelset(&POSIX_GlobalVars.MaximumSigMask, SIGABRT); /* Abort */\n\n    /*\n     * One should not typically block ANY of the synchronous error\n     * signals, i.e. SIGSEGV, SIGFPE, SIGILL, SIGBUS\n     *\n     * The kernel generates these signals in response to hardware events\n     * and they get routed to the _specific thread_ that was executing when\n     * the problem occurred.\n     *\n     * While it is technically possible to block these signals, the result is\n     * undefined, and it makes debugging _REALLY_ hard.  If the kernel ever does\n     * send one it means there really is a major problem, best to listen to it,\n     * and not ignore it.\n     */\n    sigdelset(&POSIX_GlobalVars.MaximumSigMask, SIGSEGV); /* Segfault */\n    sigdelset(&POSIX_GlobalVars.MaximumSigMask, SIGILL);  /* Illegal instruction */\n    sigdelset(&POSIX_GlobalVars.MaximumSigMask, SIGBUS);  /* Bus Error */\n    sigdelset(&POSIX_GlobalVars.MaximumSigMask, SIGFPE);  /* Floating Point Exception */\n\n    /*\n     * Set the mask and store the original (default) mask in the POSIX_GlobalVars.NormalSigMask\n     */\n    sigprocmask(SIG_SETMASK, &POSIX_GlobalVars.MaximumSigMask, &POSIX_GlobalVars.NormalSigMask);\n\n    /*\n     * Add all \"RT\" signals into the POSIX_GlobalVars.NormalSigMask\n     * This will be used for the signal mask of the main thread\n     * (This way it will end up as the default/original signal mask plus all RT sigs)\n     */\n    for (sig = SIGRTMIN; sig <= SIGRTMAX; ++sig)\n    {\n        sigaddset(&POSIX_GlobalVars.NormalSigMask, sig);\n    }\n\n    /*\n     * SIGHUP is used to wake up the main thread when necessary,\n     * so make sure it is NOT in the set.\n     */\n    sigdelset(&POSIX_GlobalVars.NormalSigMask, SIGHUP);\n\n    /*\n    ** Install noop as the signal handler for SIGUP.\n    */\n    signal(SIGHUP, OS_NoopSigHandler);\n\n    /*\n    ** Raise the priority of the current (main) thread so that subsequent\n    ** application initialization will complete.  This had previously been\n    ** done by the BSP and but it is moved here.\n    **\n    ** This will only work if the user owning this process has permission\n    ** to create real time threads.  Otherwise, the default priority will\n    ** be retained.  Typically this is only the root user, but finer grained\n    ** permission controls are out there.  So if it works, great, but if\n    ** a permission denied error is generated, that is OK too - this allows\n    ** easily debugging code as a normal user.\n    */\n    ret = pthread_getschedparam(pthread_self(), &sched_policy, &sched_param);\n    if (ret == 0)\n    {\n        POSIX_GlobalVars.SelectedRtScheduler = sched_policy; /* Fallback/default */\n        do\n        {\n            sched_fifo_valid = OS_Posix_GetSchedulerParams(SCHED_FIFO, &sched_fifo_limits);\n            sched_rr_valid   = OS_Posix_GetSchedulerParams(SCHED_RR, &sched_rr_limits);\n\n            /*\n             * If both policies are valid, choose the best. In general, FIFO is preferred\n             * since it is simpler.\n             *\n             * But, RR is preferred if mapping several OSAL priority levels into the\n             * same local priority level. For instance, if 2 OSAL tasks are created at priorities\n             * \"2\" and \"1\", both may get mapped to local priority 98, and if using FIFO then the\n             * task at priority \"2\" could run indefinitely, never letting priority \"1\" execute.\n             *\n             * This violates the original intent, which would be to have priority \"1\" preempt\n             * priority \"2\" tasks.  RR is less bad since it at least guarantees both tasks some\n             * CPU time,\n             */\n            if (sched_fifo_valid && sched_rr_valid)\n            {\n                /*\n                 * If the spread from min->max is greater than what OSAL actually needs,\n                 * then FIFO is the preferred scheduler.  Must take into account one extra level\n                 * for the root task.\n                 */\n                if ((sched_fifo_limits.PriorityMax - sched_fifo_limits.PriorityMin) > OS_MAX_TASK_PRIORITY)\n                {\n                    sched_policy               = SCHED_FIFO;\n                    POSIX_GlobalVars.PriLimits = sched_fifo_limits;\n                }\n                else\n                {\n                    sched_policy               = SCHED_RR;\n                    POSIX_GlobalVars.PriLimits = sched_rr_limits;\n                }\n            }\n            else if (sched_fifo_valid)\n            {\n                /* only FIFO is available */\n                sched_policy               = SCHED_FIFO;\n                POSIX_GlobalVars.PriLimits = sched_fifo_limits;\n            }\n            else if (sched_rr_valid)\n            {\n                /* only RR is available */\n                sched_policy               = SCHED_RR;\n                POSIX_GlobalVars.PriLimits = sched_rr_limits;\n            }\n            else\n            {\n                /* Nothing is valid, use default */\n                break;\n            }\n\n            /*\n             * This OSAL POSIX implementation will reserve the absolute highest priority\n             * for the root thread, which ultimately will just pend in sigsuspend() so\n             * it will not actually DO anything, except if sent a signal.  This way,\n             * that thread will still be able to preempt a high-priority user thread that\n             * has gone awry (i.e. using 100% cpu in FIFO mode).\n             */\n            sched_param.sched_priority = POSIX_GlobalVars.PriLimits.PriorityMax;\n            --POSIX_GlobalVars.PriLimits.PriorityMax;\n\n            OS_DEBUG(\"Selected policy %d for RT tasks, root task = %d\\n\", sched_policy,\n                     (int)sched_param.sched_priority);\n\n            /*\n             * If the spread from min->max is greater than what OSAL actually needs,\n             * then truncate it at the number of OSAL priorities.  This will end up mapping 1:1.\n             * and leaving the highest priority numbers unused.\n             */\n            if ((POSIX_GlobalVars.PriLimits.PriorityMax - POSIX_GlobalVars.PriLimits.PriorityMin) >\n                OS_MAX_TASK_PRIORITY)\n            {\n                POSIX_GlobalVars.PriLimits.PriorityMax = POSIX_GlobalVars.PriLimits.PriorityMin + OS_MAX_TASK_PRIORITY;\n            }\n\n            ret = pthread_setschedparam(pthread_self(), sched_policy, &sched_param);\n            if (ret != 0)\n            {\n                OS_DEBUG(\"Could not setschedparam in main thread: %s (%d)\\n\", strerror(ret), ret);\n                break;\n            }\n\n            /*\n             * Set the boolean to indicate that \"setschedparam\" worked --\n             * This means that it is also expected to work for future calls.\n             */\n            POSIX_GlobalVars.SelectedRtScheduler  = sched_policy;\n            POSIX_GlobalVars.EnableTaskPriorities = true;\n        } while (0);\n    }\n    else\n    {\n        OS_DEBUG(\"Could not getschedparam in main thread: %s (%d)\\n\", strerror(ret), ret);\n    }\n\n#if !defined(OSAL_CONFIG_DEBUG_PERMISSIVE_MODE)\n    /*\n     * In strict (non-permissive) mode, if the task priority setting did not work, fail with an error.\n     * This would be used on a real target where it needs to be ensured that priorities are active\n     * and the \"silent fallback\" of debug mode operation is not desired.\n     */\n    if (!POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        return OS_ERROR;\n    }\n#endif\n\n    ret_long = sysconf(_SC_PAGESIZE);\n    if (ret_long < 0)\n    {\n        OS_DEBUG(\"Could not get page size via sysconf: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n    POSIX_GlobalVars.PageSize = ret_long;\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_Posix_TaskAPI_Impl_Init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper - appends human readable logs to /tmp/logs/466.txt */\nstatic void OS_Posix_ProbeLog(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/466.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint32 OS_Posix_TaskAPI_Impl_Init(void)\n{\n    int                    ret;\n    long                   ret_long;\n    int                    sig;\n    struct sched_param     sched_param;\n    int                    sched_policy;\n    POSIX_PriorityLimits_t sched_fifo_limits;\n    bool                   sched_fifo_valid;\n    POSIX_PriorityLimits_t sched_rr_limits;\n    bool                   sched_rr_valid;\n\n    OS_Posix_ProbeLog(\"ENTER: OS_Posix_TaskAPI_Impl_Init\");\n\n    /* Initialize Local Tables */\n    memset(OS_impl_task_table, 0, sizeof(OS_impl_task_table));\n\n    /* Clear the \"limits\" structs otherwise the compiler may warn\n     * about possibly being used uninitialized (false warning)\n     */\n    memset(&sched_fifo_limits, 0, sizeof(sched_fifo_limits));\n    memset(&sched_rr_limits, 0, sizeof(sched_rr_limits));\n\n    /* Log the fact that the explicit zeroing was performed and the initial values */\n    OS_Posix_ProbeLog(\"memset done: sched_fifo_limits (min=%d, max=%d), sched_rr_limits (min=%d, max=%d)\",\n                      (int)sched_fifo_limits.PriorityMin, (int)sched_fifo_limits.PriorityMax,\n                      (int)sched_rr_limits.PriorityMin, (int)sched_rr_limits.PriorityMax);\n\n    /*\n     * Create the key used to store OSAL task IDs\n     */\n    ret = pthread_key_create(&POSIX_GlobalVars.ThreadKey, NULL);\n    if (ret != 0)\n    {\n        OS_DEBUG(\"Error creating thread key: %s (%d)\\n\", strerror(ret), ret);\n        OS_Posix_ProbeLog(\"pthread_key_create failed: %s (%d)\", strerror(ret), ret);\n        OS_Posix_ProbeLog(\"EXIT: OS_Posix_TaskAPI_Impl_Init -> OS_ERROR (key create)\");\n        return OS_ERROR;\n    }\n\n    /*\n    ** Disable Signals to parent thread and therefore all\n    ** child threads create will block all signals\n    ** Note: Timers will not work in the application unless\n    **       threads are spawned in OS_Application_Startup.\n    */\n    sigfillset(&POSIX_GlobalVars.MaximumSigMask);\n\n    /*\n     * Keep these signals unblocked so the process can be interrupted\n     */\n    sigdelset(&POSIX_GlobalVars.MaximumSigMask, SIGINT);  /* CTRL+C */\n    sigdelset(&POSIX_GlobalVars.MaximumSigMask, SIGABRT); /* Abort */\n\n    /*\n     * One should not typically block ANY of the synchronous error\n     * signals, i.e. SIGSEGV, SIGFPE, SIGILL, SIGBUS\n     *\n     * The kernel generates these signals in response to hardware events\n     * and they get routed to the _specific thread_ that was executing when\n     * the problem occurred.\n     *\n     * While it is technically possible to block these signals, the result is\n     * undefined, and it makes debugging _REALLY_ hard.  If the kernel ever does\n     * send one it means there really is a major problem, best to listen to it,\n     * and not ignore it.\n     */\n    sigdelset(&POSIX_GlobalVars.MaximumSigMask, SIGSEGV); /* Segfault */\n    sigdelset(&POSIX_GlobalVars.MaximumSigMask, SIGILL);  /* Illegal instruction */\n    sigdelset(&POSIX_GlobalVars.MaximumSigMask, SIGBUS);  /* Bus Error */\n    sigdelset(&POSIX_GlobalVars.MaximumSigMask, SIGFPE);  /* Floating Point Exception */\n\n    /*\n     * Set the mask and store the original (default) mask in the POSIX_GlobalVars.NormalSigMask\n     */\n    sigprocmask(SIG_SETMASK, &POSIX_GlobalVars.MaximumSigMask, &POSIX_GlobalVars.NormalSigMask);\n\n    /*\n     * Add all \"RT\" signals into the POSIX_GlobalVars.NormalSigMask\n     * This will be used for the signal mask of the main thread\n     * (This way it will end up as the default/original signal mask plus all RT sigs)\n     */\n    for (sig = SIGRTMIN; sig <= SIGRTMAX; ++sig)\n    {\n        sigaddset(&POSIX_GlobalVars.NormalSigMask, sig);\n    }\n\n    /*\n     * SIGHUP is used to wake up the main thread when necessary,\n     * so make sure it is NOT in the set.\n     */\n    sigdelset(&POSIX_GlobalVars.NormalSigMask, SIGHUP);\n\n    /*\n    ** Install noop as the signal handler for SIGUP.\n    */\n    signal(SIGHUP, OS_NoopSigHandler);\n\n    /*\n    ** Raise the priority of the current (main) thread so that subsequent\n    ** application initialization will complete.  This had previously been\n    ** done by the BSP and but it is moved here.\n    **\n    ** This will only work if the user owning this process has permission\n    ** to create real time threads.  Otherwise, the default priority will\n    ** be retained.  Typically this is only the root user, but finer grained\n    ** permission controls are out there.  So if it works, great, but if\n    ** a permission denied error is generated, that is OK too - this allows\n    ** easily debugging code as a normal user.\n    */\n    ret = pthread_getschedparam(pthread_self(), &sched_policy, &sched_param);\n    if (ret == 0)\n    {\n        POSIX_GlobalVars.SelectedRtScheduler = sched_policy; /* Fallback/default */\n        do\n        {\n            /* Probe before calling OS_Posix_GetSchedulerParams - show pre-call values */\n            OS_Posix_ProbeLog(\"Before GetSchedulerParams: sched_fifo_limits (min=%d, max=%d), sched_rr_limits (min=%d, max=%d)\",\n                              (int)sched_fifo_limits.PriorityMin, (int)sched_fifo_limits.PriorityMax,\n                              (int)sched_rr_limits.PriorityMin, (int)sched_rr_limits.PriorityMax);\n\n            sched_fifo_valid = OS_Posix_GetSchedulerParams(SCHED_FIFO, &sched_fifo_limits);\n            OS_Posix_ProbeLog(\"OS_Posix_GetSchedulerParams(SCHED_FIFO) returned %d -> (min=%d, max=%d)\",\n                              (int)sched_fifo_valid, (int)sched_fifo_limits.PriorityMin, (int)sched_fifo_limits.PriorityMax);\n\n            sched_rr_valid   = OS_Posix_GetSchedulerParams(SCHED_RR, &sched_rr_limits);\n            OS_Posix_ProbeLog(\"OS_Posix_GetSchedulerParams(SCHED_RR) returned %d -> (min=%d, max=%d)\",\n                              (int)sched_rr_valid, (int)sched_rr_limits.PriorityMin, (int)sched_rr_limits.PriorityMax);\n\n            /*\n             * If both policies are valid, choose the best. In general, FIFO is preferred\n             * since it is simpler.\n             *\n             * But, RR is preferred if mapping several OSAL priority levels into the\n             * same local priority level. For instance, if 2 OSAL tasks are created at priorities\n             * \"2\" and \"1\", both may get mapped to local priority 98, and if using FIFO then the\n             * task at priority \"2\" could run indefinitely, never letting priority \"1\" execute.\n             *\n             * This violates the original intent, which would be to have priority \"1\" preempt\n             * priority \"2\" tasks.  RR is less bad since it at least guarantees both tasks some\n             * CPU time,\n             */\n            if (sched_fifo_valid && sched_rr_valid)\n            {\n                /*\n                 * If the spread from min->max is greater than what OSAL actually needs,\n                 * then FIFO is the preferred scheduler.  Must take into account one extra level\n                 * for the root task.\n                 */\n                if ((sched_fifo_limits.PriorityMax - sched_fifo_limits.PriorityMin) > OS_MAX_TASK_PRIORITY)\n                {\n                    sched_policy               = SCHED_FIFO;\n                    POSIX_GlobalVars.PriLimits = sched_fifo_limits;\n                    OS_Posix_ProbeLog(\"Both schedulers valid -> chosen SCHED_FIFO; assigned PriLimits(min=%d,max=%d)\",\n                                      (int)POSIX_GlobalVars.PriLimits.PriorityMin, (int)POSIX_GlobalVars.PriLimits.PriorityMax);\n                }\n                else\n                {\n                    sched_policy               = SCHED_RR;\n                    POSIX_GlobalVars.PriLimits = sched_rr_limits;\n                    OS_Posix_ProbeLog(\"Both schedulers valid -> chosen SCHED_RR; assigned PriLimits(min=%d,max=%d)\",\n                                      (int)POSIX_GlobalVars.PriLimits.PriorityMin, (int)POSIX_GlobalVars.PriLimits.PriorityMax);\n                }\n            }\n            else if (sched_fifo_valid)\n            {\n                /* only FIFO is available */\n                sched_policy               = SCHED_FIFO;\n                POSIX_GlobalVars.PriLimits = sched_fifo_limits;\n                OS_Posix_ProbeLog(\"Only SCHED_FIFO valid; assigned PriLimits(min=%d,max=%d)\",\n                                  (int)POSIX_GlobalVars.PriLimits.PriorityMin, (int)POSIX_GlobalVars.PriLimits.PriorityMax);\n            }\n            else if (sched_rr_valid)\n            {\n                /* only RR is available */\n                sched_policy               = SCHED_RR;\n                POSIX_GlobalVars.PriLimits = sched_rr_limits;\n                OS_Posix_ProbeLog(\"Only SCHED_RR valid; assigned PriLimits(min=%d,max=%d)\",\n                                  (int)POSIX_GlobalVars.PriLimits.PriorityMin, (int)POSIX_GlobalVars.PriLimits.PriorityMax);\n            }\n            else\n            {\n                /* Nothing is valid, use default */\n                OS_Posix_ProbeLog(\"No realtime scheduler parameters available; using defaults\");\n                break;\n            }\n\n            /*\n             * This OSAL POSIX implementation will reserve the absolute highest priority\n             * for the root thread, which ultimately will just pend in sigsuspend() so\n             * it will not actually DO anything, except if sent a signal.  This way,\n             * that thread will still be able to preempt a high-priority user thread that\n             * has gone awry (i.e. using 100% cpu in FIFO mode).\n             */\n            sched_param.sched_priority = POSIX_GlobalVars.PriLimits.PriorityMax;\n            --POSIX_GlobalVars.PriLimits.PriorityMax;\n\n            OS_DEBUG(\"Selected policy %d for RT tasks, root task = %d\\n\", sched_policy,\n                     (int)sched_param.sched_priority);\n            OS_Posix_ProbeLog(\"Selected policy %d; root task prio=%d; adjusted PriLimits(min=%d,max=%d)\",\n                              sched_policy, (int)sched_param.sched_priority,\n                              (int)POSIX_GlobalVars.PriLimits.PriorityMin, (int)POSIX_GlobalVars.PriLimits.PriorityMax);\n\n            /*\n             * If the spread from min->max is greater than what OSAL actually needs,\n             * then truncate it at the number of OSAL priorities.  This will end up mapping 1:1.\n             * and leaving the highest priority numbers unused.\n             */\n            if ((POSIX_GlobalVars.PriLimits.PriorityMax - POSIX_GlobalVars.PriLimits.PriorityMin) >\n                OS_MAX_TASK_PRIORITY)\n            {\n                POSIX_GlobalVars.PriLimits.PriorityMax = POSIX_GlobalVars.PriLimits.PriorityMin + OS_MAX_TASK_PRIORITY;\n                OS_Posix_ProbeLog(\"Truncated PriLimits to fit OSAL max priorities -> PriLimits(min=%d,max=%d)\",\n                                  (int)POSIX_GlobalVars.PriLimits.PriorityMin, (int)POSIX_GlobalVars.PriLimits.PriorityMax);\n            }\n\n            ret = pthread_setschedparam(pthread_self(), sched_policy, &sched_param);\n            if (ret != 0)\n            {\n                OS_DEBUG(\"Could not setschedparam in main thread: %s (%d)\\n\", strerror(ret), ret);\n                OS_Posix_ProbeLog(\"pthread_setschedparam failed: %s (%d)\", strerror(ret), ret);\n                break;\n            }\n\n            /*\n             * Set the boolean to indicate that \"setschedparam\" worked --\n             * This means that it is also expected to work for future calls.\n             */\n            POSIX_GlobalVars.SelectedRtScheduler  = sched_policy;\n            POSIX_GlobalVars.EnableTaskPriorities = true;\n            OS_Posix_ProbeLog(\"Priority setting succeeded; EnableTaskPriorities=true; SelectedRtScheduler=%d\", POSIX_GlobalVars.SelectedRtScheduler);\n        } while (0);\n    }\n    else\n    {\n        OS_DEBUG(\"Could not getschedparam in main thread: %s (%d)\\n\", strerror(ret), ret);\n        OS_Posix_ProbeLog(\"pthread_getschedparam failed: %s (%d)\", strerror(ret), ret);\n    }\n\n#if !defined(OSAL_CONFIG_DEBUG_PERMISSIVE_MODE)\n    /*\n     * In strict (non-permissive) mode, if the task priority setting did not work, fail with an error.\n     * This would be used on a real target where it needs to be ensured that priorities are active\n     * and the \"silent fallback\" of debug mode operation is not desired.\n     */\n    if (!POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        OS_Posix_ProbeLog(\"EXIT: OS_Posix_TaskAPI_Impl_Init -> OS_ERROR (EnableTaskPriorities false)\");\n        return OS_ERROR;\n    }\n#endif\n\n    ret_long = sysconf(_SC_PAGESIZE);\n    if (ret_long < 0)\n    {\n        OS_DEBUG(\"Could not get page size via sysconf: %s\\n\", strerror(errno));\n        OS_Posix_ProbeLog(\"sysconf(_SC_PAGESIZE) failed: %s\", strerror(errno));\n        OS_Posix_ProbeLog(\"EXIT: OS_Posix_TaskAPI_Impl_Init -> OS_ERROR (sysconf)\");\n        return OS_ERROR;\n    }\n    POSIX_GlobalVars.PageSize = ret_long;\n\n    OS_Posix_ProbeLog(\"EXIT: OS_Posix_TaskAPI_Impl_Init -> OS_SUCCESS; PageSize=%ld\", POSIX_GlobalVars.PageSize);\n\n    return OS_SUCCESS;\n}\n"
}