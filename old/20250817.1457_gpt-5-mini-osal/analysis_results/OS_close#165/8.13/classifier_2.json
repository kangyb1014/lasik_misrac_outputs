{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_close:\n```c\nint32 OS_close(osal_id_t filedes)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericClose_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Cannot determine from the single call alone. The call return_code = OS_ObjectIdFinalizeDelete(return_code, &token); only shows passing the address of a non-const local variable. This is NOT by itself a definite violation of MISRA C:2023 Rule 8.13. A violation would occur if the function prototype takes a non-const pointer (e.g. OS_object_token_t *) but the function does not modify the object; in that case the parameter should be declared as a pointer to const (const OS_object_token_t *). Conversely, if the function legitimately modifies the token, a non-const pointer parameter is correct and there is no violation. To decide, inspect the declaration/definition of OS_ObjectIdFinalizeDelete: if it does not modify the token, change its parameter to const OS_object_token_t * (or otherwise ensure the pointer type is const-qualified wherever possible)."
}