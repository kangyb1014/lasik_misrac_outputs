{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) is unguarded against NULL or non-terminated strings. If either TypeName or StubPtr->Data.Buff.ContentTypeStr is NULL (or points to a non-null-terminated buffer), strcmp will read through memory past the object bounds, violating Rule 21.17. For example, if a return buffer was created without a valid TypeName (ContentTypeStr == NULL) or if an incorrect pointer was stored in ContentTypeStr, this strcmp will dereference that NULL/invalid pointer and access memory out of bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1327.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_close:\n```c\nint32 OS_close(osal_id_t filedes)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericClose_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Minimal type aliases to allow this file to compile standalone in a test environment.\n   In the real project these types and symbols are provided by the OSAL headers. */\ntypedef int32_t int32;\ntypedef int32 osal_id_t;\n\n/* Minimal placeholder for the token structure. The real definition lives elsewhere. */\ntypedef struct\n{\n    /* opaque content; we do not rely on fields here */\n    int dummy;\n} OS_object_token_t;\n\n/* Stand-in constant values to allow compilation. Real values come from the project's headers. */\nconst int OS_LOCK_MODE_EXCLUSIVE = 1;\nconst int LOCAL_OBJID_TYPE = 1;\nconst int OS_SUCCESS = 0;\n\n/* External functions provided by the OSAL implementation (declared so this file compiles).\n   The actual implementations are part of the larger codebase and are linked separately. */\nextern int32 OS_ObjectIdGetById(int lock_mode, int local_type, osal_id_t id, OS_object_token_t *token);\nextern int32 OS_GenericClose_Impl(OS_object_token_t *token);\nextern int32 OS_ObjectIdFinalizeDelete(int32 status, OS_object_token_t *token);\n\n/* Probe logging helper. Appends timestamped entries to /tmp/logs/1327.txt. */\nstatic void OS_close_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1327.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Best-effort logging; if it fails, do not disturb program flow. */\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_POSIX_THREAD_SAFE_FUNCTIONS) || defined(__unix__)\n    localtime_r(&t, &tm_buf);\n#else\n    /* Fallback for environments without localtime_r */\n    struct tm *tmptr = localtime(&t);\n    if (tmptr != NULL)\n    {\n        tm_buf = *tmptr;\n    }\n    else\n    {\n        tm_buf.tm_year = tm_buf.tm_mon = tm_buf.tm_mday = 0;\n        tm_buf.tm_hour = tm_buf.tm_min = tm_buf.tm_sec = 0;\n    }\n#endif\n\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d | \",\n            tm_buf.tm_year + 1900, tm_buf.tm_mon + 1, tm_buf.tm_mday,\n            tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified OS_close with probes inserted. Original logic preserved. */\nint32 OS_close(osal_id_t filedes)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and input parameter */\n    OS_close_log(\"OS_close() entry: filedes=%d\", (int)filedes);\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, filedes, &token);\n    OS_close_log(\"OS_ObjectIdGetById returned %d for filedes=%d; token_addr=%p\", (int)return_code, (int)filedes, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Call the implementation and log before/after to capture control flow */\n        OS_close_log(\"Calling OS_GenericClose_Impl for token_addr=%p\", (void *)&token);\n        return_code = OS_GenericClose_Impl(&token);\n        OS_close_log(\"OS_GenericClose_Impl returned %d for token_addr=%p\", (int)return_code, (void *)&token);\n\n        /* Complete the operation via the common routine */\n        OS_close_log(\"Calling OS_ObjectIdFinalizeDelete(status=%d, token_addr=%p)\", (int)return_code, (void *)&token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_close_log(\"OS_ObjectIdFinalizeDelete returned %d for token_addr=%p\", (int)return_code, (void *)&token);\n    }\n    else\n    {\n        OS_close_log(\"OS_ObjectIdGetById failed with %d for filedes=%d; skipping close\", (int)return_code, (int)filedes);\n    }\n\n    OS_close_log(\"OS_close() exit: filedes=%d return_code=%d\", (int)filedes, (int)return_code);\n    return return_code;\n}\n"
}