{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs when the search target (mountpoint) is shorter than a filesystem's virtual_mountpt. Example: mountpoint = \"/mnt\" (strlen = 4) and some filesys->virtual_mountpt = \"/mnt/long\" (mplen = 9). OS_unmount only checked that strlen(mountpoint) < sizeof(filesys->virtual_mountpt), so target can be shorter than mplen. In OS_FileSys_FindVirtMountPoint the call strncmp(target, filesys->virtual_mountpt, mplen) will attempt to read mplen bytes from target and can access beyond target's bounds (undefined behavior). Consequently the subsequent access target[mplen] can also be out-of-bounds. This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_unmount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1479.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_unmount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_unmount:\n```c\nint32 OS_unmount(const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)mountpoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /*\n         * FIXED flag should always be unset (these don't support mount/unmount at all)\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * The FIXED flag is not enforced to support abstraction.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) !=\n            (OS_FILESYS_FLAG_IS_READY | OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL))\n        {\n            /* unmount() cannot be used on this file system at this time */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_FileSysUnmountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            filesys->flags &= ~(OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_unmount code.\n",
  "test_code": "int32 OS_unmount(const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* --- Probe: log entry and input state --- */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1479.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"OS_unmount: entry\\n\");\n            fprintf(logf, \"  mountpoint_ptr=%p\\n\", (void *)mountpoint);\n            if (mountpoint != NULL)\n            {\n                /* Safely compute and log the provided mountpoint and its length */\n                size_t mlen = strlen(mountpoint);\n                fprintf(logf, \"  mountpoint='%s'\\n\", mountpoint);\n                fprintf(logf, \"  mountpoint_strlen=%zu\\n\", mlen);\n            }\n            else\n            {\n                fprintf(logf, \"  mountpoint=<NULL>\\n\");\n            }\n\n            /* Log the compile-time size used by the original check macro so testers can see the bound used */\n            fprintf(logf, \"  expected_virtual_mountpt_size=%zu\\n\",\n                    sizeof(((OS_filesys_internal_record_t *)0)->virtual_mountpt));\n\n            fprintf(logf, \"  about to call OS_ObjectIdGetBySearch()...\\n\\n\");\n            fclose(logf);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)mountpoint, &token);\n\n    /* --- Probe: log result of search and (if available) the resolved filesystem state --- */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1479.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"OS_unmount: after OS_ObjectIdGetBySearch\\n\");\n            fprintf(logf, \"  OS_ObjectIdGetBySearch return_code=%ld\\n\", (long)return_code);\n\n            if (return_code == OS_SUCCESS)\n            {\n                /* Retrieve the filesys pointer the same way the original code does, then log fields of interest. */\n                filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n                if (filesys != NULL)\n                {\n                    /* Log the virtual mountpoint and its length so callers can see mismatch scenarios */\n                    const char *vmp = filesys->virtual_mountpt;\n                    fprintf(logf, \"  filesys_ptr=%p\\n\", (void *)filesys);\n                    if (vmp != NULL)\n                    {\n                        size_t vlen = strlen(vmp);\n                        fprintf(logf, \"  filesys->virtual_mountpt='%s'\\n\", vmp);\n                        fprintf(logf, \"  filesys->virtual_mountpt_len=%zu\\n\", vlen);\n                    }\n                    else\n                    {\n                        fprintf(logf, \"  filesys->virtual_mountpt=<NULL>\\n\");\n                    }\n\n                    /* Log flags to help reproduce state checks that follow */\n                    fprintf(logf, \"  filesys->flags=0x%X\\n\", (unsigned)filesys->flags);\n                }\n                else\n                {\n                    fprintf(logf, \"  filesys pointer returned NULL from OS_OBJECT_TABLE_GET\\n\");\n                }\n            }\n\n            fprintf(logf, \"--- end probe ---\\n\\n\");\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /*\n         * FIXED flag should always be unset (these don't support mount/unmount at all)\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * The FIXED flag is not enforced to support abstraction.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) !=\n            (OS_FILESYS_FLAG_IS_READY | OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL))\n        {\n            /* unmount() cannot be used on this file system at this time */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_FileSysUnmountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            filesys->flags &= ~(OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    /* Final probe: log exit code */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1479.txt\", \"a\");\n        if (logf)\n        {\n            fprintf(logf, \"OS_unmount: exit return_code=%ld\\n\\n\", (long)return_code);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}