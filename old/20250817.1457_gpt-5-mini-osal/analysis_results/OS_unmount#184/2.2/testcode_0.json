{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nWhen OS_ObjectIdGetBySearch(...) returns OS_SUCCESS and the filesys->flags test (the if that sets \"unmount() cannot be used on this file system at this time\") is true, the code executes the fragment return_code = OS_ERR_INCORRECT_OBJ_STATE; but later the function unconditionally replaces any non-success return_code with OS_ERR_NAME_NOT_FOUND (the if (return_code != OS_SUCCESS) { return_code = OS_ERR_NAME_NOT_FOUND; } block). Therefore the earlier assignment has no effect on observable behaviour and can be removed. This assignment is executed (so not unreachable) yet its removal would not change program behaviour, so it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_unmount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1474.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_unmount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_unmount:\n```c\nint32 OS_unmount(const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)mountpoint, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /*\n         * FIXED flag should always be unset (these don't support mount/unmount at all)\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * The FIXED flag is not enforced to support abstraction.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) !=\n            (OS_FILESYS_FLAG_IS_READY | OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL))\n        {\n            /* unmount() cannot be used on this file system at this time */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_FileSysUnmountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            filesys->flags &= ~(OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_unmount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper - appends to /tmp/logs/1474.txt */\nstatic void OS_unmount_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1474.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_unmount(const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    OS_unmount_log(\"OS_unmount: called with mountpoint=\\\"%s\\\"\", mountpoint ? mountpoint : \"(null)\");\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)mountpoint, &token);\n\n    OS_unmount_log(\"OS_unmount: OS_ObjectIdGetBySearch returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n        OS_unmount_log(\"OS_unmount: token=%u, filesys=%p, flags=0x%08lx\", (unsigned)token, (void *)filesys, (unsigned long)(filesys ? filesys->flags : 0UL));\n\n        /*\n         * FIXED flag should always be unset (these don't support mount/unmount at all)\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * The FIXED flag is not enforced to support abstraction.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) !=\n            (OS_FILESYS_FLAG_IS_READY | OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL))\n        {\n            /* unmount() cannot be used on this file system at this time */\n            OS_unmount_log(\"OS_unmount: filesys flags indicate incorrect state, assigning return_code = OS_ERR_INCORRECT_OBJ_STATE\");\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            OS_unmount_log(\"OS_unmount: flags indicate OK to unmount, calling OS_FileSysUnmountVolume_Impl\");\n            return_code = OS_FileSysUnmountVolume_Impl(&token);\n            OS_unmount_log(\"OS_unmount: OS_FileSysUnmountVolume_Impl returned %ld\", (long)return_code);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            OS_unmount_log(\"OS_unmount: unmount success, clearing MOUNTED flags (old flags=0x%08lx)\", (unsigned long)filesys->flags);\n            filesys->flags &= ~(OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL);\n            OS_unmount_log(\"OS_unmount: new flags=0x%08lx\", (unsigned long)filesys->flags);\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_unmount_log(\"OS_unmount: released token %u\", (unsigned)token);\n    }\n\n    /* Log the value before potential canonicalization to NAME_NOT_FOUND */\n    OS_unmount_log(\"OS_unmount: return_code before final check = %ld\", (long)return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_unmount_log(\"OS_unmount: non-success return code %ld will be replaced with OS_ERR_NAME_NOT_FOUND\", (long)return_code);\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    OS_unmount_log(\"OS_unmount: returning %ld\", (long)return_code);\n\n    return return_code;\n}\n"
}