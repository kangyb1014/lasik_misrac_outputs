{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(StubPtr->Data.Buff.BasePtr, 0, StubPtr->Data.Buff.TotalSize) can write beyond the bounds of the object referenced by BasePtr because there is no check that BasePtr is non-NULL or that TotalSize does not exceed the allocated buffer size. For example, if UT_GetStubEntry returns a return-buffer entry with Data.Buff.BasePtr == NULL and Data.Buff.TotalSize == 4 (and Position == 0), the call becomes memset(NULL, 0, 4) which is undefined and violates the rule. Similarly, if BasePtr points to a smaller allocation than TotalSize, the memset will overflow that buffer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DefaultStubImpl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2407.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DefaultStubImpl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DefaultStubImpl:\n```c\nint32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n\n    va_start(va, DefaultRc);\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n    va_end(va);\n\n    return Retcode;\n}\n```\n</target_code>\nPlease provide the modified UT_DefaultStubImpl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n\nint32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n\n    /* Attempt to create log directory if it doesn't exist; ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    /* ENTRY probe: record the call site and key argument values */\n    {\n        FILE *log = fopen(\"/tmp/logs/2407.txt\", \"a\");\n        if (log)\n        {\n            time_t t = time(NULL);\n            char timebuf[64] = \"\";\n            struct tm *tm = (t == (time_t)-1) ? NULL : localtime(&t);\n            if (tm)\n            {\n                (void)strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", tm);\n            }\n\n            fprintf(log, \"[%s] UT_DefaultStubImpl ENTRY: FunctionName=%p\", timebuf, (const void *)FunctionName);\n            if (FunctionName)\n            {\n                /* Print the string value as well for easier reproduction; guard against NULL above */\n                fprintf(log, \" (\\\"%s\\\")\", FunctionName);\n            }\n            fprintf(log, \" FuncKey=%llu DefaultRc=%ld\\n\", (unsigned long long)FuncKey, (long)DefaultRc);\n            fclose(log);\n        }\n    }\n\n    va_start(va, DefaultRc);\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n    va_end(va);\n\n    /* EXIT probe: record the return value and mark exit of the function */\n    {\n        FILE *log = fopen(\"/tmp/logs/2407.txt\", \"a\");\n        if (log)\n        {\n            time_t t = time(NULL);\n            char timebuf[64] = \"\";\n            struct tm *tm = (t == (time_t)-1) ? NULL : localtime(&t);\n            if (tm)\n            {\n                (void)strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", tm);\n            }\n\n            fprintf(log, \"[%s] UT_DefaultStubImpl EXIT: Retcode=%ld\\n\\n\", timebuf, (long)Retcode);\n            fclose(log);\n        }\n    }\n\n    return Retcode;\n}"
}