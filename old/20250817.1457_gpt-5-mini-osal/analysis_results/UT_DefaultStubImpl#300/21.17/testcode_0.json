{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller supplies a non-null pointer that does not reference a NUL-terminated character array (for example a char buffer of known length that is not terminated, or a pointer into a larger object where the terminator lies beyond the accessible bounds), strrchr(File, '/') will scan forward looking for '\\0' and can read past the end of the object, causing an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DefaultStubImpl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2407.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DefaultStubImpl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DefaultStubImpl:\n```c\nint32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n\n    va_start(va, DefaultRc);\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n    va_end(va);\n\n    return Retcode;\n}\n```\n</target_code>\nPlease provide the modified UT_DefaultStubImpl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe-enhanced UT_DefaultStubImpl\n * Logs entry, parameters (pointer value only to avoid dereferencing potentially invalid pointers),\n * and exit (return code) to /tmp/logs/2407.txt. Preserves original behavior.\n */\n\n/* Ensure the underlying implementation is visible to the compiler. The actual\n * definition is provided elsewhere in the build; this declaration preserves\n * the original call semantics.\n */\nextern int32 UT_DefaultStubImplWithArgs(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, va_list va);\n\nint32 UT_DefaultStubImpl(const char *FunctionName, UT_EntryKey_t FuncKey, int32 DefaultRc, ...)\n{\n    int32   Retcode;\n    va_list va;\n    FILE *log = fopen(\"/tmp/logs/2407.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        /* Log entry and key pieces of state. Do NOT dereference FunctionName to avoid\n         * reading beyond accessible bounds (this could itself cause the out-of-bounds\n         * behavior we're trying to capture from other code). Only log the pointer value.\n         */\n        fprintf(log, \"ENTER UT_DefaultStubImpl\\n\");\n        fprintf(log, \"  FunctionName pointer: %p\\n\", (const void *)FunctionName);\n        fprintf(log, \"  DefaultRc: %d\\n\", (int)DefaultRc);\n        fprintf(log, \"\\n\");\n        fclose(log);\n    }\n\n    va_start(va, DefaultRc);\n    Retcode = UT_DefaultStubImplWithArgs(FunctionName, FuncKey, DefaultRc, va);\n    va_end(va);\n\n    log = fopen(\"/tmp/logs/2407.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"EXIT UT_DefaultStubImpl\\n\");\n        fprintf(log, \"  Retcode: %d\\n\", (int)Retcode);\n        fprintf(log, \"----------------------------------------\\n\");\n        fclose(log);\n    }\n\n    return Retcode;\n}\n"
}