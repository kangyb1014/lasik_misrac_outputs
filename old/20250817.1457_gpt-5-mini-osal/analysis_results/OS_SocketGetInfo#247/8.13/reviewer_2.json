{
  "user_message": "An agent A claimed that the following OS_SocketGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketGetInfo.\n```c\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The declaration 'extern OS_common_record_t *const OS_global_stream_table' defines a constant pointer to a mutable OS_common_record_t. In OS_SocketGetInfo the table is only read (record = OS_OBJECT_TABLE_GET(...); then record->name_entry and record->creator are only accessed), so the pointee could and should be const-qualified. Under MISRA C 2023 Rule 8.13 this is a violation \u2014 the pointer should point to a const-qualified type (e.g. 'extern const OS_common_record_t *const OS_global_stream_table' or functions should use 'const OS_common_record_t *record').\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_SocketGetInfo_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1979.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Log entry and input */\n    OS_SocketGetInfo_Log(\"ENTRY: OS_SocketGetInfo called (sock_id=%llu, sock_prop=%p)\", (unsigned long long)sock_id, (void *)sock_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    OS_SocketGetInfo_Log(\"After OS_ObjectIdGetById: return_code=%ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        /* Log the record pointer and some of its contents for evidence */\n        if (record != NULL)\n        {\n            /* Be defensive when logging strings */\n            char name_snip[64] = {0};\n            if (record->name_entry != NULL)\n            {\n                /* Copy safely and ensure NUL-termination */\n                strncpy(name_snip, record->name_entry, sizeof(name_snip) - 1);\n            }\n\n            OS_SocketGetInfo_Log(\"Record fetched: record_ptr=%p, name_entry=\\\"%s\\\", creator=%lu\", (void *)record, name_snip, (unsigned long)record->creator);\n        }\n        else\n        {\n            OS_SocketGetInfo_Log(\"Record fetched: record_ptr=NULL\");\n        }\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n\n        OS_SocketGetInfo_Log(\"Before OS_SocketGetInfo_Impl: sock_prop->name=\\\"%s\\\", sock_prop->creator=%lu\", sock_prop->name, (unsigned long)sock_prop->creator);\n\n        return_code = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_SocketGetInfo_Log(\"After OS_SocketGetInfo_Impl: return_code=%ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        OS_SocketGetInfo_Log(\"Token released: token_addr=%p\", (void *)&token);\n    }\n    else\n    {\n        OS_SocketGetInfo_Log(\"OS_ObjectIdGetById failed: return_code=%ld\", (long)return_code);\n    }\n\n    OS_SocketGetInfo_Log(\"EXIT: OS_SocketGetInfo returning %ld\", (long)return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_SocketGetInfo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct in the context shown. Rule 8.13 requires that pointers should point to const-qualified types whenever possible. In the provided OS_SocketGetInfo implementation the local pointer 'record' is only used to read fields (record->name_entry and record->creator) and is never used to modify the pointee. Therefore the declaration should be const-qualified, e.g.:\n\n    const OS_common_record_t *record;\n\n(or the global table should be declared as 'extern const OS_common_record_t *const OS_global_stream_table' if the table elements are intended to be immutable). Assigning a non-const pointer value to a const-qualified pointer is allowed, so using a const local pointer does not impede reading from a table whose declared pointer type lacks const. The fact that the test logging produced no output is irrelevant to the static analysis of const-qualification.\n\nCaveat: if elsewhere in the code the same pointer value must be used to modify the record (or APIs/macros require a non-const type), then const cannot be applied. Based on only the shown function (which only reads the structure), the code violates MISRA C 2023 Rule 8.13 and should be changed to use a pointer-to-const (or make the global table point to const records)."
}