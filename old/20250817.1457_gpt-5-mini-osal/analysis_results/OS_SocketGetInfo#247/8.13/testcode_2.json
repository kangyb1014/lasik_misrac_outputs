{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe declaration 'extern OS_common_record_t *const OS_global_stream_table' defines a constant pointer to a mutable OS_common_record_t. In OS_SocketGetInfo the table is only read (record = OS_OBJECT_TABLE_GET(...); then record->name_entry and record->creator are only accessed), so the pointee could and should be const-qualified. Under MISRA C 2023 Rule 8.13 this is a violation \u2014 the pointer should point to a const-qualified type (e.g. 'extern const OS_common_record_t *const OS_global_stream_table' or functions should use 'const OS_common_record_t *record').\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1979.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketGetInfo:\n```c\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logger: write logs to /tmp/logs/1979.txt */\nstatic void OS_SocketGetInfo_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1979.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Log entry and input */\n    OS_SocketGetInfo_Log(\"ENTRY: OS_SocketGetInfo called (sock_id=%llu, sock_prop=%p)\", (unsigned long long)sock_id, (void *)sock_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    OS_SocketGetInfo_Log(\"After OS_ObjectIdGetById: return_code=%ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        /* Log the record pointer and some of its contents for evidence */\n        if (record != NULL)\n        {\n            /* Be defensive when logging strings */\n            char name_snip[64] = {0};\n            if (record->name_entry != NULL)\n            {\n                /* Copy safely and ensure NUL-termination */\n                strncpy(name_snip, record->name_entry, sizeof(name_snip) - 1);\n            }\n\n            OS_SocketGetInfo_Log(\"Record fetched: record_ptr=%p, name_entry=\\\"%s\\\", creator=%lu\", (void *)record, name_snip, (unsigned long)record->creator);\n        }\n        else\n        {\n            OS_SocketGetInfo_Log(\"Record fetched: record_ptr=NULL\");\n        }\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n\n        OS_SocketGetInfo_Log(\"Before OS_SocketGetInfo_Impl: sock_prop->name=\\\"%s\\\", sock_prop->creator=%lu\", sock_prop->name, (unsigned long)sock_prop->creator);\n\n        return_code = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_SocketGetInfo_Log(\"After OS_SocketGetInfo_Impl: return_code=%ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        OS_SocketGetInfo_Log(\"Token released: token_addr=%p\", (void *)&token);\n    }\n    else\n    {\n        OS_SocketGetInfo_Log(\"OS_ObjectIdGetById failed: return_code=%ld\", (long)return_code);\n    }\n\n    OS_SocketGetInfo_Log(\"EXIT: OS_SocketGetInfo returning %ld\", (long)return_code);\n\n    return return_code;\n}\n"
}