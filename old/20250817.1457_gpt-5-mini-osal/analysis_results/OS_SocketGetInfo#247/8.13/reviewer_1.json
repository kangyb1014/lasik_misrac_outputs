{
  "user_message": "An agent A claimed that the following OS_SocketGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketGetInfo.\n```c\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code reads from record->name_entry but the local pointer 'record' is declared as OS_common_record_t * (non-const). Since the function does not modify the record, the pointer (or the name_entry member) could/should be const-qualified. For example, declaring 'const OS_common_record_t *record' (or making the member 'const char name_entry[...]') would satisfy MISRA C 2023 Rule 8.13. The current use of a non-const pointer to data that is only read is a violation (the strncpy call itself takes a const src, so the problem is the non-const declaration of record/name_entry).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_SocketGetInfo_log(const char *stage, osal_id_t sock_id, OS_socket_prop_t *sock_prop,\n                                 OS_common_record_t *record, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1979.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log basic control-flow stage and IDs/addresses */\n        fprintf(f, \"OS_SocketGetInfo: stage=%s, sock_id=%lu, sock_prop=%p, return_code=%ld\\n\",\n                stage, (unsigned long)sock_id, (void *)sock_prop, (long)return_code);\n\n        /* If a record is available, log its pointer and key members used by the function. */\n        if (record != NULL)\n        {\n            const char *name = NULL;\n\n            /* Safely obtain name_entry if present. */\n            /* This mirrors how the function reads name_entry for strncpy. */\n            name = record->name_entry ? record->name_entry : \"(null)\";\n\n            fprintf(f, \"  record=%p, name_entry=\\\"%s\\\", creator=%lu\\n\",\n                    (void *)record, name, (unsigned long)record->creator);\n        }\n\n        fclose(f);\n    }\n}\n\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Log entry after parameter initialization */\n    OS_SocketGetInfo_log(\"entry_after_memset\", sock_id, sock_prop, NULL, 0);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log the result of the object id lookup */\n    OS_SocketGetInfo_log(\"after_ObjectIdGetById\", sock_id, sock_prop, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        /* Log the retrieved record state before copying */\n        OS_SocketGetInfo_log(\"before_strncpy\", sock_id, sock_prop, record, return_code);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n\n        /* Log after populating basic fields and before calling implementation */\n        OS_SocketGetInfo_log(\"after_populate_basic_fields\", sock_id, sock_prop, record, return_code);\n\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        /* Log the result of the implementation-specific call */\n        OS_SocketGetInfo_log(\"after_Impl\", sock_id, sock_prop, record, return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the token */\n        OS_SocketGetInfo_log(\"after_Release\", sock_id, sock_prop, record, return_code);\n    }\n    else\n    {\n        /* Log the failure path before returning */\n        OS_SocketGetInfo_log(\"failed_ObjectIdGetById\", sock_id, sock_prop, NULL, return_code);\n    }\n\n    /* Final log just before return */\n    OS_SocketGetInfo_log(\"exit\", sock_id, sock_prop, (return_code == OS_SUCCESS) ? record : NULL, return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_SocketGetInfo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The local pointer 'record' is only used for read-only accesses (record->name_entry and record->creator) and is never used to modify the referred object. MISRA C 2023 Rule 8.13 advises that a pointer should point to a const-qualified type whenever possible; therefore declaring the pointer as const OS_common_record_t *record would be the appropriate, compliant choice here. (Making the struct member name_entry itself const is a larger API change and unnecessary \u2014 marking the local pointer const is sufficient and allowed because adding const to the pointed-to type is a qualifier-addition and does not require a cast.) The provided test/logging code does not change the fact that the original function treats the record as read-only. So the rule violation reported by agent A is correct, subject to the caveat that if other uses in the same translation unit require a non-const pointer, that would prevent the change; in the shown code it is possible and should be done.)"
}