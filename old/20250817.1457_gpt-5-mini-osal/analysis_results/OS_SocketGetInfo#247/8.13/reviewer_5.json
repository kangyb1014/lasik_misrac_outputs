{
  "user_message": "An agent A claimed that the following OS_SocketGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketGetInfo.\n```c\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'record' is declared as OS_common_record_t *record; but it is only used for read-only access (strncpy from record->name_entry and reading record->creator), and could be declared const OS_common_record_t *record to prevent modification. The table symbol OS_global_stream_table is a const pointer to non-const elements (extern OS_common_record_t *const OS_global_stream_table), so converting the returned OS_common_record_t * to const OS_common_record_t * is safe. Therefore Rule 8.13 is violated: the pointer should point to a const-qualified type whenever possible.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_SocketGetInfo_Log(const char *stage, unsigned long long sock_id, void *record_ptr,\n                                 const char *record_name, unsigned long long record_creator,\n                                 long return_code, void *token_ptr)\n{\n    FILE *fp = fopen(\"/tmp/logs/1979.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    fprintf(fp, \"[OS_SocketGetInfo] stage=%s sock_id=%llu return_code=%ld token_ptr=%p record_ptr=%p\\n\",\n            stage, sock_id, return_code, token_ptr, record_ptr);\n\n    if (record_ptr != NULL)\n    {\n        /* record_name may be NULL-terminated; protect log from non-terminated data */\n        char namebuf[128] = {0};\n        if (record_name != NULL)\n        {\n            strncpy(namebuf, record_name, sizeof(namebuf) - 1);\n        }\n        fprintf(fp, \"    record->name_entry=\\\"%s\\\" record->creator=%llu\\n\",\n                namebuf, record_creator);\n    }\n\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Log entry with initial state */\n    OS_SocketGetInfo_Log(\"entry\", (unsigned long long)sock_id, NULL, NULL, 0ULL, 0L, NULL);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log result of object id lookup */\n    OS_SocketGetInfo_Log(\"after_ObjectIdGetById\", (unsigned long long)sock_id, NULL, NULL, 0ULL,\n                         (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        /* Log the record pointer and contents before read-only access */\n        if (record != NULL)\n        {\n            OS_SocketGetInfo_Log(\"before_read_access\", (unsigned long long)sock_id, (void *)record,\n                                 record->name_entry, (unsigned long long)record->creator,\n                                 (long)return_code, (void *)&token);\n        }\n        else\n        {\n            OS_SocketGetInfo_Log(\"before_read_access_null_record\", (unsigned long long)sock_id,\n                                 NULL, NULL, 0ULL, (long)return_code, (void *)&token);\n        }\n\n        /* Perform the original read-only operations */\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n\n        /* Log values copied into sock_prop */\n        OS_SocketGetInfo_Log(\"after_copy_to_sock_prop\", (unsigned long long)sock_id, (void *)record,\n                             sock_prop->name, (unsigned long long)sock_prop->creator,\n                             (long)return_code, (void *)&token);\n\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        /* Log result after calling the implementation-specific function */\n        OS_SocketGetInfo_Log(\"after_Impl_call\", (unsigned long long)sock_id, (void *)record,\n                             sock_prop->name, (unsigned long long)sock_prop->creator,\n                             (long)return_code, (void *)&token);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the object id token */\n        OS_SocketGetInfo_Log(\"after_ObjectIdRelease\", (unsigned long long)sock_id, (void *)record,\n                             sock_prop->name, (unsigned long long)sock_prop->creator,\n                             (long)return_code, (void *)&token);\n    }\n\n    /* Final return value log */\n    OS_SocketGetInfo_Log(\"exit\", (unsigned long long)sock_id, NULL, NULL, 0ULL, (long)return_code, NULL);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_SocketGetInfo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_SocketGetInfo the local variable record is declared as OS_common_record_t * but is only used for read-only access (strncpy and reading creator). Under MISRA C:2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible; here it is possible to change the type to const OS_common_record_t *record without semantic problems. Converting the returned OS_common_record_t * to a const OS_common_record_t * is allowed in C (T * -> const T *), so it is safe. The provided logging/test code and the successful compilation demonstrate no immediate incompatibility; the empty log is unrelated to the const-qualification issue. One caveat: if other code paths in this function or macros (e.g. OS_OBJECT_TABLE_GET) actually rely on modifying via that pointer, making it const would be inappropriate \u2014 but in the shown function the pointer is only used for reads, so the rule is violated and the pointer should be const-qualified."
}