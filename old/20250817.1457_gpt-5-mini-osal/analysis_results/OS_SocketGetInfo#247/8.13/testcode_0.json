{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable 'record' is assigned from OS_OBJECT_TABLE_GET(...) but is declared as a non-const pointer (OS_common_record_t *record) while the code only reads from the referenced object. The pointer should instead point to a const-qualified type (e.g. const OS_common_record_t *record) so that read-only access is enforced. Thus the fragment violates MISRA C 2023 Rule 8.13. (Also consider making OS_global_stream_table elements const if the table is read-only.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1979.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketGetInfo:\n```c\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <string.h>\n\n/* Probe logger for OS_SocketGetInfo\n * Appends human-readable control flow and state information to /tmp/logs/1979.txt\n * Does not alter the original control flow or return values.\n */\nstatic void OS_LogProbe_socket_get_info(const void *record_ptr,\n                                        osal_id_t sock_id,\n                                        const void *token_ptr,\n                                        int step,\n                                        int32 return_code,\n                                        const char *record_name,\n                                        unsigned long record_creator,\n                                        const char *sockprop_name,\n                                        unsigned long sockprop_creator)\n{\n    FILE *f = fopen(\"/tmp/logs/1979.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Logging failure should not affect normal execution */\n    }\n\n    time_t now = time(NULL);\n    fprintf(f, \"[%ld] OS_SocketGetInfo: step=%d sock_id=%d return_code=%d token_ptr=%p record_ptr=%p\\n\",\n            (long)now, step, (int)sock_id, (int)return_code, token_ptr, record_ptr);\n\n    if (record_name != NULL)\n    {\n        fprintf(f, \"[%ld]  record->name_entry=\\\"%s\\\"\\n\", (long)now, record_name);\n    }\n    else\n    {\n        fprintf(f, \"[%ld]  record->name_entry=(null)\\n\", (long)now);\n    }\n\n    fprintf(f, \"[%ld]  record->creator=%lu\\n\", (long)now, record_creator);\n\n    if (sockprop_name != NULL)\n    {\n        fprintf(f, \"[%ld]  sock_prop->name=\\\"%s\\\"\\n\", (long)now, sockprop_name);\n    }\n    else\n    {\n        fprintf(f, \"[%ld]  sock_prop->name=(null)\\n\", (long)now);\n    }\n\n    fprintf(f, \"[%ld]  sock_prop->creator=%lu\\n\", (long)now, sockprop_creator);\n\n    fclose(f);\n}\n\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Entry log: record is not set yet */\n    OS_LogProbe_socket_get_info(NULL, sock_id, NULL, 0, 0, NULL, 0UL, NULL, 0UL);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log after attempting to get object id */\n    OS_LogProbe_socket_get_info(NULL, sock_id, &token, 1, return_code, NULL, 0UL, NULL, 0UL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        /* Log after obtaining record pointer and before copying */\n        OS_LogProbe_socket_get_info(record, sock_id, &token, 2, return_code,\n                                    record != NULL ? record->name_entry : NULL,\n                                    (record != NULL) ? (unsigned long)record->creator : 0UL,\n                                    NULL, 0UL);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        /* Log after filling sock_prop and calling implementation */\n        OS_LogProbe_socket_get_info(record, sock_id, &token, 3, return_code,\n                                    record != NULL ? record->name_entry : NULL,\n                                    (record != NULL) ? (unsigned long)record->creator : 0UL,\n                                    sock_prop->name, (unsigned long)sock_prop->creator);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Exit log */\n    OS_LogProbe_socket_get_info(NULL, sock_id, NULL, 4, return_code,\n                                NULL, 0UL, sock_prop != NULL ? sock_prop->name : NULL,\n                                sock_prop != NULL ? (unsigned long)sock_prop->creator : 0UL);\n\n    return return_code;\n}\n"
}