{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to OS_SocketGetInfo_Impl(&token, sock_prop) is dead code. In the provided project OS_SocketGetInfo_Impl is defined to unconditionally return OS_SUCCESS and has no side effects on sock_prop or token. In OS_SocketGetInfo the name and creator fields are already copied before the call, and the return_code would remain OS_SUCCESS if the call were removed; hence executing this call does not affect program behaviour and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1978.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketGetInfo:\n```c\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/1978.txt */\nstatic void write_hex_line(FILE *f, const void *buf, size_t n)\n{\n    const unsigned char *p = (const unsigned char *)buf;\n    size_t i;\n    for (i = 0; i < n; ++i)\n    {\n        /* print without separators to keep a compact snapshot */\n        fprintf(f, \"%02X\", p[i]);\n    }\n    fprintf(f, \"\\n\");\n}\n\nstatic void probe_log_state(const char *tag,\n                            unsigned int sock_id_val,\n                            const void *token_ptr,\n                            const void *record_ptr,\n                            const void *prop_ptr,\n                            const void *prop_snapshot,\n                            size_t prop_size,\n                            int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1978.txt\", \"a\");\n    if (!f)\n    {\n        /* If logging fails, avoid changing program behavior. */\n        return;\n    }\n\n    fprintf(f, \"--- OS_SocketGetInfo LOG: %s ---\\n\", tag);\n    fprintf(f, \"sock_id=%u, token_ptr=%p, record_ptr=%p, return_code=%d\\n\",\n            sock_id_val, token_ptr, record_ptr, (int)return_code);\n\n    if (prop_ptr != NULL)\n    {\n        fprintf(f, \"sock_prop pointer=%p, snapshot_size=%zu\\n\", prop_ptr, prop_size);\n        /* Dump the raw bytes of the socket property structure to capture all fields reliably */\n        write_hex_line(f, prop_snapshot, prop_size);\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Log initial state after zeroing the output structure */\n    {\n        /* Snapshot the (zeroed) structure */\n        unsigned char snapshot_before[sizeof *sock_prop];\n        memcpy(snapshot_before, sock_prop, sizeof *sock_prop);\n        probe_log_state(\"after_memset\", (unsigned int)sock_id, (void *)&token, NULL, sock_prop, snapshot_before, sizeof *sock_prop, -1);\n    }\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n\n        /* Take a snapshot of sock_prop just before calling the implementation hook */\n        unsigned char prop_before[sizeof *sock_prop];\n        unsigned char prop_after[sizeof *sock_prop];\n        memcpy(prop_before, sock_prop, sizeof *sock_prop);\n\n        probe_log_state(\"before_OS_SocketGetInfo_Impl\", (unsigned int)sock_id, (void *)&token, (void *)record, sock_prop, prop_before, sizeof *sock_prop, return_code);\n\n        return_code = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        /* Snapshot after the call */\n        memcpy(prop_after, sock_prop, sizeof *sock_prop);\n\n        probe_log_state(\"after_OS_SocketGetInfo_Impl\", (unsigned int)sock_id, (void *)&token, (void *)record, sock_prop, prop_after, sizeof *sock_prop, return_code);\n\n        /* Record whether the implementation call changed the sock_prop buffer */\n        {\n            int changed = (memcmp(prop_before, prop_after, sizeof *sock_prop) != 0);\n            FILE *f = fopen(\"/tmp/logs/1978.txt\", \"a\");\n            if (f)\n            {\n                fprintf(f, \"OS_SocketGetInfo_Impl changed sock_prop? %s\\n\", changed ? \"YES\" : \"NO\");\n                fprintf(f, \"Final return_code=%d\\n\", (int)return_code);\n                fprintf(f, \"--- end log entry ---\\n\\n\");\n                fclose(f);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n"
}