{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_SocketGetInfo_Impl unconditionally returns OS_SUCCESS and performs no operations or side-effects on its parameters or global state. The caller OS_SocketGetInfo invokes this function and uses its return value, but removing the function call and directly using OS_SUCCESS in the caller would not change program behaviour. Therefore the executed operation (the function body) is dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1978.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketGetInfo:\n```c\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/*\n * Probe logging helper. Appends human-readable trace lines to /tmp/logs/1978.txt.\n * This function intentionally has no side effects on the program logic other than\n * the file output so that the original behaviour of OS_SocketGetInfo is preserved.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1978.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging can't be performed, do not change program behaviour. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Log entry and raw parameters */\n    probe_log(\"OS_SocketGetInfo ENTRY: sock_id=%lu, sock_prop=%p\",\n              (unsigned long)(uintptr_t)sock_id, (void *)sock_prop);\n\n    /* Check parameters */\n    /* Log before performing the existing pointer check so a failing check is recorded */\n    probe_log(\"OS_SocketGetInfo: performing OS_CHECK_POINTER on sock_prop=%p\", (void *)sock_prop);\n    OS_CHECK_POINTER(sock_prop);\n    probe_log(\"OS_SocketGetInfo: OS_CHECK_POINTER passed for sock_prop=%p\", (void *)sock_prop);\n\n    /* Preserve original memset behaviour and log the effect */\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n    probe_log(\"OS_SocketGetInfo: memset(sock_prop, 0, %zu)\", (size_t)sizeof(OS_socket_prop_t));\n\n    /* If the structure is at least a few bytes, log the first bytes to evidence the zeroing */\n    if (sizeof(OS_socket_prop_t) >= 4)\n    {\n        unsigned char *p = (unsigned char *)sock_prop;\n        probe_log(\"OS_SocketGetInfo: sock_prop[0..3]=%02x %02x %02x %02x\",\n                  (unsigned)p[0], (unsigned)p[1], (unsigned)p[2], (unsigned)p[3]);\n    }\n\n    /* Check Parameters */\n    probe_log(\"OS_SocketGetInfo: calling OS_ObjectIdGetById(sock_id=%lu)\", (unsigned long)(uintptr_t)sock_id);\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    probe_log(\"OS_SocketGetInfo: OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    /* Log a small dump of the token object (first up to 8 bytes) to capture state */\n    {\n        unsigned char *tb = (unsigned char *)&token;\n        size_t tsize = sizeof(token);\n        size_t dump_bytes = (tsize < 8u) ? tsize : 8u;\n        if (dump_bytes > 0u)\n        {\n            char buf[3 * 8 + 1];\n            size_t i;\n            char *bp = buf;\n            for (i = 0u; i < dump_bytes; ++i)\n            {\n                int n = snprintf(bp, (size_t)(buf + sizeof(buf) - bp), \"%02x\", tb[i]);\n                if (n < 0)\n                {\n                    break;\n                }\n                bp += n;\n                if (i + 1u < dump_bytes)\n                {\n                    *bp++ = ' ';\n                }\n            }\n            *bp = '\\0';\n            probe_log(\"OS_SocketGetInfo: token[0..%zu]=%s\", dump_bytes - 1u, buf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"OS_SocketGetInfo: object id resolution succeeded, obtaining record\");\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        /* Copy name and creator as original code does */\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n\n        probe_log(\"OS_SocketGetInfo: filled sock_prop->name=\\\"%s\\\", creator=%lu\",\n                  sock_prop->name, (unsigned long)(uintptr_t)sock_prop->creator);\n\n        /* Call platform-specific implementation and log its return value */\n        probe_log(\"OS_SocketGetInfo: calling OS_SocketGetInfo_Impl(token=%p, sock_prop=%p)\",\n                  (void *)&token, (void *)sock_prop);\n        return_code = OS_SocketGetInfo_Impl(&token, sock_prop);\n        probe_log(\"OS_SocketGetInfo: OS_SocketGetInfo_Impl returned %ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"OS_SocketGetInfo: released token\");\n    }\n\n    probe_log(\"OS_SocketGetInfo EXIT: returning %ld\", (long)return_code);\n\n    return return_code;\n}\n"
}