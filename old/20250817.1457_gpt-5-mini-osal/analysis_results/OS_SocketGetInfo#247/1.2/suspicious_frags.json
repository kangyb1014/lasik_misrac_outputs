{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SocketGetInfo:\n```c\nint32 OS_SocketGetInfo(osal_id_t sock_id, OS_socket_prop_t *sock_prop)\n{\n    OS_common_record_t *record;\n    OS_object_token_t   token;\n    int32               return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sock_prop);\n\n    memset(sock_prop, 0, sizeof(OS_socket_prop_t));\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_stream_table, token);\n\n        strncpy(sock_prop->name, record->name_entry, sizeof(sock_prop->name) - 1);\n        sock_prop->creator = record->creator;\n        return_code        = OS_SocketGetInfo_Impl(&token, sock_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SocketGetInfo:\ntypedef uint32 osal_id_t\n...\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME]; /**< @brief Name of the socket */\n    osal_id_t creator;               /**< @brief OSAL TaskID which opened the socket */\n} OS_socket_prop_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef int32_t   int32\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_common_record_t *const OS_global_stream_table\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n...\nint32 OS_SocketGetInfo_Impl(const OS_object_token_t *token, OS_socket_prop_t *sock_prop)\n{\n    return OS_SUCCESS;\n}\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I examined the provided function and related definitions for use of compiler or language extensions that are explicitly documented as extensions (examples: __attribute__, __asm__ / __asm, __builtin_*, typeof, statement-expressions ({ ... }), nested functions, local-label addresses (&&label), GCC\u2019s __extension__ keyword, Microsoft-specific keywords, or other non-standard tokens). None of the supplied code fragments use any of those constructs. Specific checks and reasons why other fragments do not need investigation:\n\n- No compiler attributes or builtins: there are no occurrences of __attribute__, __builtin_*, __asm__, __inline__ (as a compiler-specific token), or similar compiler-specific identifiers.\n- No inline assembly or asm statements: the code contains no asm blocks or assembly directives.\n- No GCC/Clang statement expressions or typeof: there are no ({ ... }) expressions or typeof uses.\n- No nested functions or local-label-address tricks: all functions are defined at file scope and there are no &&label uses.\n- Macros used (OS_CHECK_POINTER, OS_OBJECT_TABLE_GET, etc.) are standard C preprocessor macros and do not introduce compiler-specific extensions.\n- Declarations and typedefs (osal_id_t, OS_socket_prop_t, pointer-to-const, etc.) are standard C constructs.\n- Use of strncpy, memset, sizeof, pointer operations, and return semantics are standard C and not language extensions.\n- The extern declaration for OS_global_stream_table and the macro expansion for OS_OBJECT_TABLE_GET (indexing into an array) are standard C pointer/array operations.\n\nBecause none of the above non-standard or compiler-specific constructs appear in the supplied code, there are no fragments to flag for further investigation under MISRA C 2023 Rule 1.2."
}