{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe helper OS_strnlen calls memchr(s, 0, maxlen) which may read up to maxlen bytes from s. Nothing in the function or its callers guarantees that the object pointed to by s is at least maxlen bytes long. For example, if a caller passes a pointer to a char buffer of size 10 that contains no NUL within those 10 bytes (e.g. char buf[10]; /* filled */) and calls OS_strnlen(buf, 20) (or the code calls OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) where OS_MAX_PATH_LEN > actual allocation), memchr will access bytes beyond the buffer bounds \u2014 violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolTableDump code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1735.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolTableDump as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolTableDump:\n```c\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n\n    OS_ObjectIdTransactionCancel(&token);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolTableDump code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/*\n * Probe logging helper: append textual logs to /tmp/logs/1735.txt\n * Keeps logging separate from the main logic and does not alter return codes.\n */\nstatic void OS_1735_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1735.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* silently ignore logging failures so behavior is unchanged */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    /* Log entry and parameters (limit the amount of filename bytes printed) */\n    {\n        size_t fnlen = strnlen(filename, 1024U);\n        /* print up to fnlen characters to avoid accidental overruns */\n        OS_1735_Log(\"OS_SymbolTableDump ENTRY: filename='%.*s' (len=%zu), SizeLimit=%zu\",\n                    (int)fnlen, filename, fnlen, SizeLimit);\n    }\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    if (return_code != OS_SUCCESS)\n    {\n        OS_1735_Log(\"OS_SymbolTableDump: OS_TranslatePath FAILED: return_code=%d\", (int)return_code);\n        return return_code;\n    }\n\n    /* Log the translated path (safely bounded by OS_MAX_LOCAL_PATH_LEN) */\n    {\n        size_t tlen = strnlen(translated_path, OS_MAX_LOCAL_PATH_LEN);\n        OS_1735_Log(\"OS_SymbolTableDump: translated_path='%.*s' (len=%zu)\", (int)tlen, translated_path, tlen);\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    if (return_code != OS_SUCCESS)\n    {\n        OS_1735_Log(\"OS_SymbolTableDump: OS_ObjectIdTransactionInit FAILED: return_code=%d\", (int)return_code);\n        return return_code;\n    }\n\n    OS_1735_Log(\"OS_SymbolTableDump: OS_ObjectIdTransactionInit SUCCEEDED: return_code=%d\", (int)return_code);\n    OS_1735_Log(\"OS_SymbolTableDump: about to call OS_SymbolTableDump_Impl with SizeLimit=%zu\", SizeLimit);\n\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n\n    OS_1735_Log(\"OS_SymbolTableDump: OS_SymbolTableDump_Impl returned return_code=%d\", (int)return_code);\n\n    OS_ObjectIdTransactionCancel(&token);\n\n    OS_1735_Log(\"OS_SymbolTableDump: OS_ObjectIdTransactionCancel called; exiting with return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}