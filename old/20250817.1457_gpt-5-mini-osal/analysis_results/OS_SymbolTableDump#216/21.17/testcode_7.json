{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_strnlen calls memchr(s, 0, maxlen) with maxlen = OS_MAX_PATH_LEN. At the call site VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) there is only a null-pointer check (OS_CHECK_POINTER) but no guarantee that the object pointed to by VirtualPath has at least OS_MAX_PATH_LEN bytes. If the caller supplies a buffer smaller than OS_MAX_PATH_LEN that is not NUL-terminated within its bounds, memchr may read beyond the buffer and thus perform out-of-bounds accesses. This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolTableDump code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1735.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolTableDump as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolTableDump:\n```c\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n\n    OS_ObjectIdTransactionCancel(&token);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolTableDump code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe / logging helpers -- keep static to limit scope */\nstatic void log_append(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1735.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Try creating parent directory once (best-effort). Ignore errors. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/1735.txt\", \"a\");\n        if (f == NULL)\n        {\n            return;\n        }\n    }\n    fprintf(f, \"%s\", msg);\n    fflush(f);\n    fclose(f);\n}\n\nstatic void log_fmt(const char *prefix, const char *detail)\n{\n    char buf[1024];\n    /* Keep messages bounded to avoid introducing new issues */\n    if (prefix == NULL) prefix = \"\";\n    if (detail == NULL) detail = \"\";\n    (void)snprintf(buf, sizeof(buf), \"%s: %s\\n\", prefix, detail);\n    log_append(buf);\n}\n\n/* Safe bounded strlen for local buffers */\nstatic size_t safe_strnlen_local(const char *s, size_t maxlen)\n{\n    size_t i;\n    for (i = 0; i < maxlen; ++i)\n    {\n        if (s[i] == '\\0')\n            return i;\n    }\n    return maxlen;\n}\n\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Log: function entry and parameters (do not read filename contents to avoid OOB) */\n    {\n        char tmp[256];\n        (void)snprintf(tmp, sizeof(tmp), \"OS_SymbolTableDump ENTRY - filename_ptr=%p SizeLimit=%zu\", (const void *)filename, SizeLimit);\n        log_fmt(\"ENTRY\", tmp);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    /* Log: after pointer check */\n    log_fmt(\"CHECK\", \"filename pointer non-NULL (OS_CHECK_POINTER passed)\");\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    {\n        char tmp[512];\n        (void)snprintf(tmp, sizeof(tmp), \"OS_TranslatePath returned %d\", (int)return_code);\n        log_fmt(\"TRANSLATE_PATH_RET\", tmp);\n    }\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log and return */\n        char tmp[256];\n        (void)snprintf(tmp, sizeof(tmp), \"Early return from OS_SymbolTableDump with code %d\", (int)return_code);\n        log_fmt(\"EARLY_RETURN\", tmp);\n        return return_code;\n    }\n\n    /*\n     * Log the translated path content in a bounded manner so no out-of-bounds reads occur.\n     * translated_path is a local array of size OS_MAX_LOCAL_PATH_LEN so it is safe to inspect up to that length.\n     */\n    {\n        size_t tlen = safe_strnlen_local(translated_path, OS_MAX_LOCAL_PATH_LEN);\n        char tmp[1024];\n        /* Limit the printed portion to avoid overly large logs */\n        size_t show = (tlen < 256) ? tlen : 256;\n        /* Ensure NUL-terminated for printing */\n        char sample[257];\n        memset(sample, 0, sizeof(sample));\n        if (show > 0)\n        {\n            memcpy(sample, translated_path, show);\n        }\n        (void)snprintf(tmp, sizeof(tmp), \"translated_path (len=%zu, bufsize=%d) sample=\\\"%s\\\"\", tlen, (int)OS_MAX_LOCAL_PATH_LEN, sample);\n        log_fmt(\"TRANSLATED_PATH\", tmp);\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    {\n        char tmp[256];\n        (void)snprintf(tmp, sizeof(tmp), \"OS_ObjectIdTransactionInit returned %d\", (int)return_code);\n        log_fmt(\"TRANSACTION_INIT\", tmp);\n    }\n    if (return_code != OS_SUCCESS)\n    {\n        char tmp[256];\n        (void)snprintf(tmp, sizeof(tmp), \"Early return from OS_SymbolTableDump after TransactionInit with code %d\", (int)return_code);\n        log_fmt(\"EARLY_RETURN\", tmp);\n        return return_code;\n    }\n\n    /* Log: about to call implementation with given parameters */\n    {\n        char tmp[512];\n        (void)snprintf(tmp, sizeof(tmp), \"Calling OS_SymbolTableDump_Impl with translated_path_ptr=%p SizeLimit=%zu token_addr=%p\",\n                       (void *)translated_path, SizeLimit, (void *)&token);\n        log_fmt(\"BEFORE_IMPL_CALL\", tmp);\n    }\n\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n\n    {\n        char tmp[256];\n        (void)snprintf(tmp, sizeof(tmp), \"OS_SymbolTableDump_Impl returned %d\", (int)return_code);\n        log_fmt(\"IMPL_RET\", tmp);\n    }\n\n    OS_ObjectIdTransactionCancel(&token);\n    log_fmt(\"TRANSACTION_CANCEL\", \"OS_ObjectIdTransactionCancel called\");\n\n    /* Final return logging */\n    {\n        char tmp[256];\n        (void)snprintf(tmp, sizeof(tmp), \"OS_SymbolTableDump EXIT with code %d\", (int)return_code);\n        log_fmt(\"EXIT\", tmp);\n    }\n\n    return return_code;\n}\n"
}