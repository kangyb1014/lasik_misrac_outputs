{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nmemchr(name_ptr, 0, OS_MAX_FILE_NAME) can read up to OS_MAX_FILE_NAME bytes starting at name_ptr regardless of how many bytes remain in the caller-provided VirtualPath object. If the caller passed a small buffer (for example: char path[5] = \"/a/b\"), name_ptr will point into that small buffer and memchr with a large OS_MAX_FILE_NAME (e.g. 255) may access bytes beyond the end of the VirtualPath object, causing an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolTableDump code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1735.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolTableDump as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolTableDump:\n```c\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n\n    OS_ObjectIdTransactionCancel(&token);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolTableDump code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Helper logging function that appends probe logs to /tmp/logs/1735.txt. */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1735.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Log entry and input state */\n    os_probe_log(\"OS_SymbolTableDump ENTER: filename=%p, SizeLimit=%zu\", (const void *)filename, SizeLimit);\n\n    if (filename == NULL)\n    {\n        os_probe_log(\"filename is NULL\");\n    }\n    else\n    {\n        /* Log a safe preview of the filename (limit preview to 256 chars) */\n        size_t preview_max = 256;\n        size_t fn_len = strnlen(filename, preview_max);\n        char preview[257];\n        size_t copy_len = (fn_len < preview_max) ? fn_len : preview_max;\n        if (copy_len > 0)\n        {\n            memcpy(preview, filename, copy_len);\n        }\n        preview[copy_len] = '\\0';\n        os_probe_log(\"filename preview (first %zu bytes): '%s'\", copy_len, preview);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    os_probe_log(\"translated_path buffer size: %zu (OS_MAX_LOCAL_PATH_LEN), about to call OS_TranslatePath\", (size_t)sizeof(translated_path));\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    os_probe_log(\"OS_TranslatePath returned %d\", return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        os_probe_log(\"OS_TranslatePath failed, returning %d\", return_code);\n        return return_code;\n    }\n\n    /* Log translated_path safely */\n    {\n        size_t tlen = strnlen(translated_path, sizeof(translated_path));\n        /* print the translated path up to its reported length */\n        os_probe_log(\"translated_path length=%zu, content='%.*s'\", tlen, (int)tlen, translated_path);\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    os_probe_log(\"Calling OS_ObjectIdTransactionInit (global lock)\");\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    os_probe_log(\"OS_ObjectIdTransactionInit returned %d, token_addr=%p, token_size=%zu\", return_code, (void *)&token, sizeof(token));\n    if (return_code != OS_SUCCESS)\n    {\n        os_probe_log(\"OS_ObjectIdTransactionInit failed, returning %d\", return_code);\n        return return_code;\n    }\n\n    os_probe_log(\"Calling OS_SymbolTableDump_Impl with translated_path=%p, SizeLimit=%zu\", (void *)translated_path, SizeLimit);\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n    os_probe_log(\"OS_SymbolTableDump_Impl returned %d\", return_code);\n\n    os_probe_log(\"Calling OS_ObjectIdTransactionCancel for token=%p\", (void *)&token);\n    OS_ObjectIdTransactionCancel(&token);\n    os_probe_log(\"OS_ObjectIdTransactionCancel completed\");\n\n    os_probe_log(\"OS_SymbolTableDump EXIT: return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}