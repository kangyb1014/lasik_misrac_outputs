{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_SymbolTableDump_Impl is declared to take a non-const pointer (e.g. int32 OS_SymbolTableDump_Impl(char *path, size_t SizeLimit)) but only reads from the path buffer. In that case translated_path (a modifiable char array) is passed as a non-const char *, and the parameter should instead be const char * to reflect it is not modified. This violates MISRA C 2023 Rule 8.13. (If the implementation actually modifies the buffer, then no violation occurs.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolTableDump code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1731.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolTableDump as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolTableDump:\n```c\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Locking the global ensures only one symbol table dump\n     * can be executing.  It also prevents module loading/unloading\n     * while the dump is occurring.\n     *\n     * Because calls to this function are serialized, the\n     * underlying implementation may safely use globals for\n     * state storage.\n     */\n    return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n\n    OS_ObjectIdTransactionCancel(&token);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolTableDump code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Helper logging function that appends messages to /tmp/logs/1731.txt */\nstatic void OS_SymbolTableDump_Log(const char *fmt, ...)\n{\n    FILE *fp = NULL;\n    va_list ap;\n\n    /* Try to create the directory if it does not exist. Ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    fp = fopen(\"/tmp/logs/1731.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging cannot be performed, silently return to avoid disturbing normal behavior */\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_SymbolTableDump(const char *filename, size_t SizeLimit)\n{\n    int32             return_code;\n    char              translated_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filename);\n\n    OS_SymbolTableDump_Log(\"Entered OS_SymbolTableDump: filename=%s, SizeLimit=%zu\", filename, SizeLimit);\n\n    /*\n     ** Translate the filename to the Host System\n     */\n    return_code = OS_TranslatePath(filename, translated_path);\n    OS_SymbolTableDump_Log(\"OS_TranslatePath returned %ld, translated_path=%s\", (long)return_code, translated_path);\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_SymbolTableDump_Log(\"Exiting early: TranslatePath failed with %ld\", (long)return_code);\n        return return_code;\n    }\n\n    /* Save a copy of the translated_path before calling the implementation to detect any modification */\n    {\n        char path_before[OS_MAX_LOCAL_PATH_LEN];\n        (void)memset(path_before, 0, sizeof(path_before));\n        (void)strncpy(path_before, translated_path, sizeof(path_before) - 1);\n\n        OS_SymbolTableDump_Log(\"About to call OS_SymbolTableDump_Impl: translated_path_addr=%p, contents=%s, SizeLimit=%zu\",\n                              (void *)translated_path, translated_path, SizeLimit);\n\n        /*\n         * Locking the global ensures only one symbol table dump\n         * can be executing.  It also prevents module loading/unloading\n         * while the dump is occurring.\n         *\n         * Because calls to this function are serialized, the\n         * underlying implementation may safely use globals for\n         * state storage.\n         */\n        return_code = OS_ObjectIdTransactionInit(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, &token);\n        OS_SymbolTableDump_Log(\"OS_ObjectIdTransactionInit returned %ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n        if (return_code != OS_SUCCESS)\n        {\n            OS_SymbolTableDump_Log(\"Exiting early: ObjectIdTransactionInit failed with %ld\", (long)return_code);\n            return return_code;\n        }\n\n        /* Call the implementation (note: the implementation prototype may take a non-const char *) */\n        return_code = OS_SymbolTableDump_Impl(translated_path, SizeLimit);\n\n        OS_SymbolTableDump_Log(\"OS_SymbolTableDump_Impl returned %ld\", (long)return_code);\n\n        /* Compare translated_path with the saved copy to detect any modification by the Impl function */\n        if (strncmp(path_before, translated_path, sizeof(path_before)) == 0)\n        {\n            OS_SymbolTableDump_Log(\"translated_path was NOT modified by Impl. path_addr=%p, contents=%s\", (void *)translated_path, translated_path);\n        }\n        else\n        {\n            /* Log the before/after contents to provide evidence if modification occurred */\n            OS_SymbolTableDump_Log(\"translated_path WAS MODIFIED by Impl. before=%s\", path_before);\n            OS_SymbolTableDump_Log(\"translated_path WAS MODIFIED by Impl. after=%s\", translated_path);\n        }\n\n        OS_ObjectIdTransactionCancel(&token);\n        OS_SymbolTableDump_Log(\"OS_ObjectIdTransactionCancel called for token_addr=%p\", (void *)&token);\n\n        OS_SymbolTableDump_Log(\"Exiting OS_SymbolTableDump with return_code=%ld\", (long)return_code);\n\n        return return_code;\n    }\n}\n"
}