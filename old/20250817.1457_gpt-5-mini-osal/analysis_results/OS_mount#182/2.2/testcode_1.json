{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nInside the if (return_code == OS_SUCCESS) block the function assigns various non-success error codes to return_code (e.g. OS_ERR_INCORRECT_OBJ_STATE, OS_FS_ERR_PATH_INVALID, or the errors returned by OS_FileSysMountVolume_Impl). Immediately after that block the code unconditionally maps any non-success to OS_ERR_NAME_NOT_FOUND via: if (return_code != OS_SUCCESS) { return_code = OS_ERR_NAME_NOT_FOUND; } Thus all the intermediate non-success assignments executed in the success branch are overwritten and have no effect on the observable behaviour. These assignments are dead code and therefore violate MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1458.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_mount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_mount:\n```c\nint32 OS_mount(const char *devname, const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Check parameters */\n    OS_CHECK_STRING(devname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, devname, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /*\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * FIXED flag _should_ always be unset (these don't support mount/unmount)\n         * but to support abstraction this is not enforced.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) != OS_FILESYS_FLAG_IS_READY)\n        {\n            /* mount() cannot be used on this file system at this time */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else if (filesys->system_mountpt[0] == 0)\n        {\n            /*\n             * The system mount point should be a non-empty string.\n             */\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            return_code = OS_FileSysMountVolume_Impl(&token);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n            strncpy(filesys->virtual_mountpt, mountpoint, sizeof(filesys->virtual_mountpt) - 1);\n            filesys->virtual_mountpt[sizeof(filesys->virtual_mountpt) - 1] = 0;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_ERR_NAME_NOT_FOUND;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_mount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\nstatic void os_mount_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1458.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_mount(const char *devname, const char *mountpoint)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_filesys_internal_record_t *filesys;\n\n    /* Log entry with parameters */\n    os_mount_log(\"OS_mount entry: devname='%s', mountpoint='%s'\", devname ? devname : \"(null)\", mountpoint ? mountpoint : \"(null)\");\n\n    /* Check parameters */\n    OS_CHECK_STRING(devname, sizeof(filesys->device_name), OS_FS_ERR_PATH_TOO_LONG);\n    OS_CHECK_STRING(mountpoint, sizeof(filesys->virtual_mountpt), OS_FS_ERR_PATH_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, devname, &token);\n    os_mount_log(\"After OS_ObjectIdGetByName: return_code=%d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n        os_mount_log(\"Object found: token=%u, filesys=%p\", (unsigned)token, (void *)filesys);\n\n        /* Log current filesys state */\n        os_mount_log(\"filesys->flags=0x%08x\", (unsigned)filesys->flags);\n        os_mount_log(\"filesys->system_mountpt='%s'\", filesys->system_mountpt[0] ? filesys->system_mountpt : \"(empty)\");\n        os_mount_log(\"filesys->virtual_mountpt='%s'\", filesys->virtual_mountpt[0] ? filesys->virtual_mountpt : \"(empty)\");\n\n        /*\n         * READY flag should be set (mkfs/initfs must have been called on this FS)\n         * MOUNTED SYSTEM/VIRTUAL should always be unset.\n         *\n         * FIXED flag _should_ always be unset (these don't support mount/unmount)\n         * but to support abstraction this is not enforced.\n         */\n        if ((filesys->flags & ~OS_FILESYS_FLAG_IS_FIXED) != OS_FILESYS_FLAG_IS_READY)\n        {\n            /* mount() cannot be used on this file system at this time */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            os_mount_log(\"Assigned return_code=OS_ERR_INCORRECT_OBJ_STATE (%d) due to flags check\", (int)return_code);\n        }\n        else if (filesys->system_mountpt[0] == 0)\n        {\n            /*\n             * The system mount point should be a non-empty string.\n             */\n            return_code = OS_FS_ERR_PATH_INVALID;\n            os_mount_log(\"Assigned return_code=OS_FS_ERR_PATH_INVALID (%d) because system_mountpt is empty\", (int)return_code);\n        }\n        else\n        {\n            return_code = OS_FileSysMountVolume_Impl(&token);\n            os_mount_log(\"Called OS_FileSysMountVolume_Impl: return_code=%d\", (int)return_code);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark as mounted in the local table.\n             * For now this does both sides (system and virtual) */\n            os_mount_log(\"Before marking mounted: flags=0x%08x\", (unsigned)filesys->flags);\n            filesys->flags |= OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM | OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL;\n            os_mount_log(\"After marking mounted: flags=0x%08x\", (unsigned)filesys->flags);\n\n            strncpy(filesys->virtual_mountpt, mountpoint, sizeof(filesys->virtual_mountpt) - 1);\n            filesys->virtual_mountpt[sizeof(filesys->virtual_mountpt) - 1] = 0;\n            os_mount_log(\"Set virtual_mountpt='%s'\", filesys->virtual_mountpt);\n        }\n\n        OS_ObjectIdRelease(&token);\n        os_mount_log(\"Released token %u\", (unsigned)token);\n    }\n\n    os_mount_log(\"Before final map: return_code=%d\", (int)return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* Map any non-success to name not found as original code does */\n        return_code = OS_ERR_NAME_NOT_FOUND;\n        os_mount_log(\"Mapped non-success to OS_ERR_NAME_NOT_FOUND (%d)\", (int)return_code);\n    }\n\n    os_mount_log(\"OS_mount exit: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}