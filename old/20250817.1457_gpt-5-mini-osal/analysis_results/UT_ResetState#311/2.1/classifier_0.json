{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UT_ResetState:\n```c\nvoid UT_ResetState(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    int32                i;\n\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (FuncKey == 0 || StubPtr->FuncKey == FuncKey)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n        ++StubPtr;\n    }\n    if (FuncKey == 0)\n    {\n        UT_MaxStubSearchLen = 0;\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function UT_ResetState:\ntypedef cpuaddr UT_EntryKey_t\n...\ntypedef struct\n{\n    UT_EntryType_t EntryType;\n    uint32         ModeFlags;\n    UT_EntryKey_t  FuncKey;\n    UT_EntryData_t Data;\n} UT_StubTableEntry_t\n...\nstatic UT_StubTableEntry_t UT_StubTable[UT_MAX_FUNC_STUBS] = {{0}}\n...\n#define UT_MAX_FUNC_STUBS 200\n...\nstatic uint32              UT_MaxStubSearchLen             = 0\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nfor (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (FuncKey == 0 || StubPtr->FuncKey == FuncKey)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n        ++StubPtr;\n    }\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The for-loop iterates i from 0 to UT_MAX_FUNC_STUBS-1 and the body (including the conditional call to UT_ClearStubEntry) is reachable at each iteration. The condition (FuncKey == 0 || StubPtr->FuncKey == FuncKey) can evaluate to true or false depending on the runtime value of FuncKey and the table contents, so neither branch is statically unreachable. Therefore Rule 2.1 is not violated for this fragment."
}