{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UT_ResetState:\n```c\nvoid UT_ResetState(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    int32                i;\n\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (FuncKey == 0 || StubPtr->FuncKey == FuncKey)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n        ++StubPtr;\n    }\n    if (FuncKey == 0)\n    {\n        UT_MaxStubSearchLen = 0;\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function UT_ResetState:\ntypedef cpuaddr UT_EntryKey_t\n...\ntypedef struct\n{\n    UT_EntryType_t EntryType;\n    uint32         ModeFlags;\n    UT_EntryKey_t  FuncKey;\n    UT_EntryData_t Data;\n} UT_StubTableEntry_t\n...\nstatic UT_StubTableEntry_t UT_StubTable[UT_MAX_FUNC_STUBS] = {{0}}\n...\n#define UT_MAX_FUNC_STUBS 200\n...\nstatic uint32              UT_MaxStubSearchLen             = 0\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (FuncKey == 0 || StubPtr->FuncKey == FuncKey)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n        ++StubPtr;\n    }",
    "UT_ClearStubEntry(StubPtr);",
    "static UT_StubTableEntry_t UT_StubTable[UT_MAX_FUNC_STUBS] = {{0}}",
    "if (FuncKey == 0 || StubPtr->FuncKey == FuncKey)",
    "if (FuncKey == 0)\n    {\n        UT_MaxStubSearchLen = 0;\n    }"
  ],
  "explanation": "The fragments selected are those whose reachability depends on runtime values or configuration and therefore merit investigation for Rule 2.1. They include the loop and its conditional (which uses short\u2011circuit evaluation), the call to UT_ClearStubEntry (which may never be invoked if no entries match), the post-loop conditional that only executes when FuncKey == 0, and the static initialization of UT_StubTable (which affects whether certain branches can ever be taken). Other parts of the function (variable declarations, the assignment StubPtr = UT_StubTable, the pointer increment ++StubPtr and the loop index ++i) are straightforward, syntactically reachable, and \u2014 given UT_MAX_FUNC_STUBS is a positive compile\u2011time constant (200) and UT_StubTable is sized accordingly \u2014 do not present obvious statically unreachable code. No other code fragments in the provided snippets are syntactically unreachable (no early returns, no constant false conditions, and no dead-labels), so they do not need investigation for Rule 2.1."
}