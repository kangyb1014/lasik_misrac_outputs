{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UT_ResetState:\n```c\nvoid UT_ResetState(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    int32                i;\n\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (FuncKey == 0 || StubPtr->FuncKey == FuncKey)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n        ++StubPtr;\n    }\n    if (FuncKey == 0)\n    {\n        UT_MaxStubSearchLen = 0;\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function UT_ResetState:\nstatic UT_StubTableEntry_t UT_StubTable[UT_MAX_FUNC_STUBS] = {{0}}\n...\ntypedef struct\n{\n    UT_EntryType_t EntryType;\n    uint32         ModeFlags;\n    UT_EntryKey_t  FuncKey;\n    UT_EntryData_t Data;\n} UT_StubTableEntry_t\n...\ntypedef cpuaddr UT_EntryKey_t\n...\n#define UT_MAX_FUNC_STUBS 200\n...\nstatic uint32              UT_MaxStubSearchLen             = 0\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "UT_ClearStubEntry(StubPtr);",
    "static UT_StubTableEntry_t UT_StubTable[UT_MAX_FUNC_STUBS] = {{0}}",
    "++StubPtr;",
    "if (FuncKey == 0 || StubPtr->FuncKey == FuncKey)",
    "UT_StubTableEntry_t *StubPtr;",
    "StubPtr = UT_StubTable;"
  ],
  "explanation": "MISRA C 2023 Rule 8.13 recommends that pointers point to const-qualified types when the pointee is not modified. The listed fragments are all places where a non-const pointer to UT_StubTableEntry_t is created, used, advanced, or the backing array is defined non-const; each should be checked to determine whether the pointed-to data is actually modified (for example by UT_ClearStubEntry) or could be made const. Other code fragments in the function and additional definitions do not need investigation for Rule 8.13: the parameter FuncKey is an integral type (cpuaddr) not a pointer; the loop index declaration and control (int32 i; for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)) do not involve pointer-to-object qualifications; the final assignment UT_MaxStubSearchLen = 0 modifies a scalar variable (not a pointer target qualification issue). Any other references (e.g., comparisons against zero, integer operations) are not relevant to pointer-to-const qualification and therefore are not flagged."
}