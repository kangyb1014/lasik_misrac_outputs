{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UT_ResetState:\n```c\nvoid UT_ResetState(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    int32                i;\n\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (FuncKey == 0 || StubPtr->FuncKey == FuncKey)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n        ++StubPtr;\n    }\n    if (FuncKey == 0)\n    {\n        UT_MaxStubSearchLen = 0;\n    }\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No suspicious fragments related to MISRA C 2023 Rule 21.14 were found in the provided code. The rule prohibits using memcmp to compare null-terminated strings; this snippet contains no use of memcmp, strcmp, strncmp, or other string-comparison library calls, nor any explicit buffer/content comparisons that would suggest memcmp use. The code only performs integer/key comparisons (FuncKey == 0 and StubPtr->FuncKey == FuncKey), pointer/array traversal (++StubPtr), and a call to UT_ClearStubEntry(StubPtr). The called function UT_ClearStubEntry is not defined in this fragment, but since memcmp is not present in the shown code, there is no direct violation to flag here. If investigation across other translation units is required, UT_ClearStubEntry and the definitions of UT_EntryKey_t/UT_StubTable should be reviewed for any memcmp usage comparing null-terminated strings; however, those are external to the provided fragment and therefore not included as suspicious fragments from this snippet."
}