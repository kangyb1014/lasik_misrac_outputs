{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UT_ResetState:\n```c\nvoid UT_ResetState(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    int32                i;\n\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (FuncKey == 0 || StubPtr->FuncKey == FuncKey)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n        ++StubPtr;\n    }\n    if (FuncKey == 0)\n    {\n        UT_MaxStubSearchLen = 0;\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function UT_ResetState:\ntypedef cpuaddr UT_EntryKey_t\n...\ntypedef struct\n{\n    UT_EntryType_t EntryType;\n    uint32         ModeFlags;\n    UT_EntryKey_t  FuncKey;\n    UT_EntryData_t Data;\n} UT_StubTableEntry_t\n...\ntypedef int32_t   int32\n...\nstatic UT_StubTableEntry_t UT_StubTable[UT_MAX_FUNC_STUBS] = {{0}}\n...\n#define UT_MAX_FUNC_STUBS 200\n...\nstatic uint32              UT_MaxStubSearchLen             = 0\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no code fragments that use compiler-specific language extensions as defined by MISRA C 2023 Rule 1.2. Specifically:\n\n- There are no occurrences of compiler-extension keywords or constructs such as __attribute__, __asm__, __builtin_*, typeof, __label__, statement-expressions ({ ... }) used as an expression, nested functions, or other vendor-specific extensions.\n- The array declaration and initializer (static UT_StubTableEntry_t UT_StubTable[UT_MAX_FUNC_STUBS] = {{0}}) uses standard nested-brace initialization permitted by ISO C and is not a compiler extension.\n- All typedefs (e.g., int32 from int32_t, UT_EntryKey_t from cpuaddr) and use of standard operators (pointer dereference, equality, logical OR, prefix ++, for-loop) are standard C constructs, not extensions.\n- No variable-length arrays, zero-length arrays, anonymous structs/unions, or other nonstandard object-layout features are present in the shown code.\n\nTherefore there are no fragments to flag for potential use of language/compiler extensions in the provided code."
}