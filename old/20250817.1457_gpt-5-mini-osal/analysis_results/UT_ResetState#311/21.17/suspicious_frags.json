{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UT_ResetState:\n```c\nvoid UT_ResetState(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubPtr;\n    int32                i;\n\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (FuncKey == 0 || StubPtr->FuncKey == FuncKey)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n        ++StubPtr;\n    }\n    if (FuncKey == 0)\n    {\n        UT_MaxStubSearchLen = 0;\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function UT_ResetState:\ntypedef struct\n{\n    UT_EntryType_t EntryType;\n    uint32         ModeFlags;\n    UT_EntryKey_t  FuncKey;\n    UT_EntryData_t Data;\n} UT_StubTableEntry_t\n...\ntypedef cpuaddr UT_EntryKey_t\n...\nstatic UT_StubTableEntry_t UT_StubTable[UT_MAX_FUNC_STUBS] = {{0}}\n...\n#define UT_MAX_FUNC_STUBS 200\n...\nstatic uint32              UT_MaxStubSearchLen             = 0\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (FuncKey == 0 || StubPtr->FuncKey == FuncKey)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n        ++StubPtr;\n    }",
    "static UT_StubTableEntry_t UT_StubTable[UT_MAX_FUNC_STUBS] = {{0}}",
    "UT_ClearStubEntry(StubPtr);"
  ],
  "explanation": "The remaining code fragments do not use or reference any of the <string.h> functions named by MISRA C 2023 Rule 21.17 and therefore do not need investigation for this rule: - The function signature and local variable declarations (void UT_ResetState(UT_EntryKey_t FuncKey), UT_StubTableEntry_t *StubPtr; int32 i;) are plain declarations with no string handling. - The assignment StubPtr = UT_StubTable; and the pointer increment ++StubPtr; together with the loop bound i < UT_MAX_FUNC_STUBS ensure pointer traversal of the statically sized array; these are simple pointer/array operations, not calls to string functions. - The comparison (FuncKey == 0 || StubPtr->FuncKey == FuncKey) is an integer comparison and cannot itself invoke string handling. - The final conditional UT_MaxStubSearchLen = 0; is a simple integer assignment unrelated to string functions. - The typedefs (UT_EntryKey_t, UT_StubTableEntry_t fields) and the macro UT_MAX_FUNC_STUBS are type/size definitions and do not call or imply use of <string.h> functions. The only places in the provided code that could lead to uses of <string.h> (and therefore potential out-of-bounds accesses per Rule 21.17) are the call to UT_ClearStubEntry (and code it invokes) and the static UT_StubTable definition/initialization, so those fragments are reported for further inspection."
}