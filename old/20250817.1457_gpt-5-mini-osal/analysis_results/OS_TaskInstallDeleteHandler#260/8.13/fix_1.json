{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_Task_LogInstall(osal_id_t task_id, int32 return_code, OS_object_token_t *token, OS_task_internal_record_t *task, osal_task_entry function_pointer, const char *stage)\n{\n    FILE *f = fopen(\"/tmp/logs/2083.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log the high-level call information. */\n    fprintf(f, \"OS_TaskInstallDeleteHandler: stage=%s task_id=%ld return_code=%ld token=%p\\n\",\n            stage, (long)task_id, (long)return_code, (void *)token);\n\n    if (task != NULL)\n    {\n        /* Log internal task pointers and state. Do not dereference entry_arg. */\n        fprintf(f, \"  task_ptr=%p\\n\", (void *)task);\n\n        /* Log the function pointer being installed. Cast to uintptr_t to print as pointer-sized integer. */\n        fprintf(f, \"  installing_function_pointer=%#\" PRIxPTR \"\\n\", (uintptr_t)function_pointer);\n\n        /* Log the current delete hook pointer (before/after assignment caller will capture both). */\n        fprintf(f, \"  current_delete_hook_pointer=%#\" PRIxPTR \"\\n\", (uintptr_t)task->delete_hook_pointer);\n\n        /* Log the entry_arg pointer value to provide evidence of the pointer used as start-parameter. */\n        fprintf(f, \"  entry_arg_pointer=%p\\n\", (void *)task->entry_arg);\n    }\n    else\n    {\n        fprintf(f, \"  task == NULL\\n\");\n    }\n\n    fclose(f);\n}\n\nint32 OS_TaskInstallDeleteHandler(osal_task_entry function_pointer)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_id_t                  task_id;\n\n    task_id     = OS_TaskGetId_Impl();\n\n    /* Log: entry into the function with task id. */\n    OS_Task_LogInstall(task_id, -1, NULL, NULL, function_pointer, \"entry\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log: token resolved and task pointer obtained (before install). */\n        OS_Task_LogInstall(task_id, return_code, &token, task, function_pointer, \"before_install\");\n\n        /*\n        ** Install the pointer\n        */\n        task->delete_hook_pointer = function_pointer;\n\n        /* Log: after install to capture the new value and the entry_arg pointer for inspection. */\n        OS_Task_LogInstall(task_id, return_code, &token, task, function_pointer, \"after_install\");\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log: after token release */\n        OS_Task_LogInstall(task_id, return_code, NULL, task, function_pointer, \"after_release\");\n    }\n    else\n    {\n        /* Log failure path so callers can see why the install did not happen. */\n        OS_Task_LogInstall(task_id, return_code, NULL, NULL, function_pointer, \"id_get_failed\");\n    }\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpf5n_4own/src/src/os/shared/src/osapi-task.c: In function 'OS_Task_LogInstall':\n/tmp/tmpf5n_4own/src/src/os/shared/src/osapi-task.c:423:54: error: expected ')' before 'PRIxPTR'\n  423 |         fprintf(f, \"  installing_function_pointer=%#\" PRIxPTR \"\\n\", (uintptr_t)function_pointer);\n      |                ~                                     ^~~~~~~~\n      |                                                      )\n/tmp/tmpf5n_4own/src/src/os/shared/src/osapi-task.c:54:1: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   53 | #include \"os-shared-idmap.h\"\n  +++ |+#include <inttypes.h>\n   54 | \n/tmp/tmpf5n_4own/src/src/os/shared/src/osapi-task.c:426:54: error: expected ')' before 'PRIxPTR'\n  426 |         fprintf(f, \"  current_delete_hook_pointer=%#\" PRIxPTR \"\\n\", (uintptr_t)task->delete_hook_pointer);\n      |                ~                                     ^~~~~~~~\n      |                                                      )\n/tmp/tmpf5n_4own/src/src/os/shared/src/osapi-task.c:426:55: note: 'PRIxPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  426 |         fprintf(f, \"  current_delete_hook_pointer=%#\" PRIxPTR \"\\n\", (uintptr_t)task->delete_hook_pointer);\n      |                                                       ^~~~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:342: CMakeFiles/osal.dir/src/os/shared/src/osapi-task.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_TaskInstallDeleteHandler as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <inttypes.h>\n\nstatic void OS_Task_LogInstall(osal_id_t task_id, int32 return_code, OS_object_token_t *token, OS_task_internal_record_t *task, osal_task_entry function_pointer, const char *stage)\n{\n    FILE *f = fopen(\"/tmp/logs/2083.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log the high-level call information. */\n    fprintf(f, \"OS_TaskInstallDeleteHandler: stage=%s task_id=%ld return_code=%ld token=%p\\n\",\n            stage, (long)task_id, (long)return_code, (void *)token);\n\n    if (task != NULL)\n    {\n        /* Log internal task pointers and state. Do not dereference entry_arg. */\n        fprintf(f, \"  task_ptr=%p\\n\", (void *)task);\n\n        /* Log the function pointer being installed. Cast to uintptr_t to print as pointer-sized integer. */\n        fprintf(f, \"  installing_function_pointer=%#\" PRIxPTR \"\\n\", (uintptr_t)function_pointer);\n\n        /* Log the current delete hook pointer (before/after assignment caller will capture both). */\n        fprintf(f, \"  current_delete_hook_pointer=%#\" PRIxPTR \"\\n\", (uintptr_t)task->delete_hook_pointer);\n\n        /* Log the entry_arg pointer value to provide evidence of the pointer used as start-parameter. */\n        fprintf(f, \"  entry_arg_pointer=%p\\n\", (void *)task->entry_arg);\n    }\n    else\n    {\n        fprintf(f, \"  task == NULL\\n\");\n    }\n\n    fclose(f);\n}\n\nint32 OS_TaskInstallDeleteHandler(osal_task_entry function_pointer)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_id_t                  task_id;\n\n    task_id     = OS_TaskGetId_Impl();\n\n    /* Log: entry into the function with task id. */\n    OS_Task_LogInstall(task_id, -1, NULL, NULL, function_pointer, \"entry\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log: token resolved and task pointer obtained (before install). */\n        OS_Task_LogInstall(task_id, return_code, &token, task, function_pointer, \"before_install\");\n\n        /*\n        ** Install the pointer\n        */\n        task->delete_hook_pointer = function_pointer;\n\n        /* Log: after install to capture the new value and the entry_arg pointer for inspection. */\n        OS_Task_LogInstall(task_id, return_code, &token, task, function_pointer, \"after_install\");\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log: after token release */\n        OS_Task_LogInstall(task_id, return_code, NULL, task, function_pointer, \"after_release\");\n    }\n    else\n    {\n        /* Log failure path so callers can see why the install did not happen. */\n        OS_Task_LogInstall(task_id, return_code, NULL, NULL, function_pointer, \"id_get_failed\");\n    }\n\n    return return_code;\n}\n",
  "explanation": "The compilation errors were caused by use of the PRIxPTR format macro without including the header that defines it. I added #include <inttypes.h> at the top so PRIxPTR (and the related integer types) are defined. No other logic was changed."
}