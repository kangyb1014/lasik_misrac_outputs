{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe field entry_arg is declared as void * in OS_task_internal_record_t but is used to hold the task\u2019s start-parameter (an argument supplied by the caller and not modified by the OS). In that common usage the pointer should be const-qualified to express that the OS does not modify the pointee and to avoid callers having to cast away const. As written (void *entry_arg) it fails to qualify the pointer as pointing to a const-qualified type and therefore violates MISRA C 2023 Rule 8.13. (If, however, the OS actually modifies the object via entry_arg, then a non-const pointer would be justified and there would be no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskInstallDeleteHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2083.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskInstallDeleteHandler as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskInstallDeleteHandler:\n```c\nint32 OS_TaskInstallDeleteHandler(osal_task_entry function_pointer)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_id_t                  task_id;\n\n    task_id     = OS_TaskGetId_Impl();\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /*\n        ** Install the pointer\n        */\n        task->delete_hook_pointer = function_pointer;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskInstallDeleteHandler code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper to log task-related information to a file for debugging. */\nstatic void OS_Task_LogInstall(osal_id_t task_id, int32 return_code, OS_object_token_t *token, OS_task_internal_record_t *task, osal_task_entry function_pointer, const char *stage)\n{\n    FILE *f = fopen(\"/tmp/logs/2083.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log the high-level call information. */\n    fprintf(f, \"OS_TaskInstallDeleteHandler: stage=%s task_id=%ld return_code=%ld token=%p\\n\",\n            stage, (long)task_id, (long)return_code, (void *)token);\n\n    if (task != NULL)\n    {\n        /* Log internal task pointers and state. Do not dereference entry_arg. */\n        fprintf(f, \"  task_ptr=%p\\n\", (void *)task);\n\n        /* Log the function pointer being installed. Cast to uintptr_t to print as pointer-sized integer. */\n        fprintf(f, \"  installing_function_pointer=%#\" PRIxPTR \"\\n\", (uintptr_t)function_pointer);\n\n        /* Log the current delete hook pointer (before/after assignment caller will capture both). */\n        fprintf(f, \"  current_delete_hook_pointer=%#\" PRIxPTR \"\\n\", (uintptr_t)task->delete_hook_pointer);\n\n        /* Log the entry_arg pointer value to provide evidence of the pointer used as start-parameter. */\n        fprintf(f, \"  entry_arg_pointer=%p\\n\", (void *)task->entry_arg);\n    }\n    else\n    {\n        fprintf(f, \"  task == NULL\\n\");\n    }\n\n    fclose(f);\n}\n\nint32 OS_TaskInstallDeleteHandler(osal_task_entry function_pointer)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_id_t                  task_id;\n\n    task_id     = OS_TaskGetId_Impl();\n\n    /* Log: entry into the function with task id. */\n    OS_Task_LogInstall(task_id, -1, NULL, NULL, function_pointer, \"entry\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log: token resolved and task pointer obtained (before install). */\n        OS_Task_LogInstall(task_id, return_code, &token, task, function_pointer, \"before_install\");\n\n        /*\n        ** Install the pointer\n        */\n        task->delete_hook_pointer = function_pointer;\n\n        /* Log: after install to capture the new value and the entry_arg pointer for inspection. */\n        OS_Task_LogInstall(task_id, return_code, &token, task, function_pointer, \"after_install\");\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log: after token release */\n        OS_Task_LogInstall(task_id, return_code, NULL, task, function_pointer, \"after_release\");\n    }\n    else\n    {\n        /* Log failure path so callers can see why the install did not happen. */\n        OS_Task_LogInstall(task_id, return_code, NULL, NULL, function_pointer, \"id_get_failed\");\n    }\n\n    return return_code;\n}\n"
}