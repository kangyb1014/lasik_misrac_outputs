{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_TaskInstallDeleteHandler:\n```c\nint32 OS_TaskInstallDeleteHandler(osal_task_entry function_pointer)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_id_t                  task_id;\n\n    task_id     = OS_TaskGetId_Impl();\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /*\n        ** Install the pointer\n        */\n        task->delete_hook_pointer = function_pointer;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_TaskInstallDeleteHandler:\ntypedef osal_task((*osal_task_entry)(void))\n...\ntypedef struct\n{\n    char            task_name[OS_MAX_API_NAME];\n    size_t          stack_size;\n    osal_priority_t priority;\n    osal_task_entry entry_function_pointer;\n    osal_task_entry delete_hook_pointer;\n    void *          entry_arg;\n    osal_stackptr_t stack_pointer;\n} OS_task_internal_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_task_internal_record_t OS_task_table[LOCAL_NUM_OBJECTS]\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "task->delete_hook_pointer = function_pointer;",
    "osal_task_entry delete_hook_pointer;",
    "typedef osal_task((*osal_task_entry)(void))",
    "task = OS_OBJECT_TABLE_GET(OS_task_table, token);",
    "void *          entry_arg;",
    "osal_task_entry entry_function_pointer;",
    "int32 OS_TaskInstallDeleteHandler(osal_task_entry function_pointer)",
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])",
    "OS_task_internal_record_t OS_task_table[LOCAL_NUM_OBJECTS]"
  ],
  "explanation": "The MISRA C 2023 Rule 8.13 concerns pointer types that could/should point to const-qualified targets. The fragments selected are all places where pointer types are declared or where a pointer value is assigned/retrieved (function parameter of pointer type, struct members holding pointers, the global table declaration, the macro that returns an address, and the function-pointer typedef). These are the relevant locations for investigating whether the pointee types could be const-qualified. Other code fragments in the function (local scalar variables: return_code, task_id; the token variable; calls OS_ObjectIdGetById(...) and OS_ObjectIdRelease(...)) do not declare pointer-to-object types that could be made const in place \u2014 token is an output/handle that is written to by the API, and the OS Object API calls expect mutable arguments or are not pointer-to-data declarations \u2014 so they are not candidates for Rule 8.13 and therefore need not be investigated here."
}