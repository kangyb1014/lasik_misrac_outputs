{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_TaskDelete, the local variable delete_hook is set to NULL immediately after declaration, but in all execution paths this initial assignment has no effect: if OS_ObjectIdGetById succeeds the variable is overwritten with task->delete_hook_pointer; if OS_ObjectIdGetById fails the later conditional (return_code == OS_SUCCESS && delete_hook != NULL) short-circuits on the first operand and the uninitialized value would not be evaluated. Therefore removing the initial assignment would not change program behavior, so the statement 'delete_hook = NULL;' is redundant dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskInstallDeleteHandler code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2082.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskInstallDeleteHandler as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskInstallDeleteHandler:\n```c\nint32 OS_TaskInstallDeleteHandler(osal_task_entry function_pointer)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_id_t                  task_id;\n\n    task_id     = OS_TaskGetId_Impl();\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /*\n        ** Install the pointer\n        */\n        task->delete_hook_pointer = function_pointer;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskInstallDeleteHandler code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/*\n * Probe logger for OS_TaskInstallDeleteHandler\n * Appends human-readable records to /tmp/logs/2082.txt so other agents can\n * reproduce and inspect the control flow and relevant state.\n */\nstatic void OS_TaskInstallDeleteHandler_Log(osal_id_t task_id,\n                                            int32 return_code,\n                                            void *token_addr,\n                                            OS_task_internal_record_t *task,\n                                            osal_task_entry function_pointer,\n                                            const char *note)\n{\n    FILE *f = fopen(\"/tmp/logs/2082.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_TaskInstallDeleteHandler: %s\\n\", note);\n        fprintf(f, \"  task_id=%llu, return_code=%ld\\n\",\n                (unsigned long long)task_id,\n                (long)return_code);\n        fprintf(f, \"  token_addr=%p, task_ptr=%p, function_pointer_is_null=%d\\n\",\n                token_addr,\n                (void *)task,\n                (function_pointer == NULL) ? 1 : 0);\n        fprintf(f, \"---\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_TaskInstallDeleteHandler(osal_task_entry function_pointer)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_id_t                  task_id;\n\n    /* Log entry and initial task id */\n    task_id = OS_TaskGetId_Impl();\n    OS_TaskInstallDeleteHandler_Log(task_id, -1, &token, NULL, function_pointer, \"entry: after OS_TaskGetId_Impl\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log result of ObjectIdGetById (success/failure) and the token location */\n    OS_TaskInstallDeleteHandler_Log(task_id, return_code, &token, NULL, function_pointer, \"after OS_ObjectIdGetById\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log state before installing the delete hook pointer */\n        OS_TaskInstallDeleteHandler_Log(task_id, return_code, &token, task, function_pointer, \"about to install delete_hook_pointer\");\n\n        /*\n        ** Install the pointer\n        */\n        task->delete_hook_pointer = function_pointer;\n\n        /* Log state after installing the delete hook pointer */\n        OS_TaskInstallDeleteHandler_Log(task_id, return_code, &token, task, function_pointer, \"after installing delete_hook_pointer\");\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the token */\n        OS_TaskInstallDeleteHandler_Log(task_id, return_code, NULL, task, function_pointer, \"after OS_ObjectIdRelease\");\n    }\n\n    return return_code;\n}\n"
}