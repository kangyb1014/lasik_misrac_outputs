{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf a table entry has a non-NULL Name (so the loop continues) but its Module pointer is NULL, and OS_SymbolLookup_Static is called with a non-NULL ModuleName, the expression strcmp(StaticSym->Module, ModuleName) will be executed and dereference a NULL pointer (out-of-bounds access). Thus the use of strcmp here can lead to accesses beyond the bounds of the objects referenced by its pointer parameters.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1727.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolLookup_Static as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup_Static:\n```c\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolLookup_Static code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    /* Open log file once for this call. Use append so multiple calls accumulate evidence. */\n    FILE *logf = fopen(\"/tmp/logs/1727.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"\\n--- OS_SymbolLookup_Static ENTRY ---\\n\");\n        fprintf(logf, \"SymbolName ptr=%p, ModuleName ptr=%p\\n\", (const void *)SymbolName, (const void *)ModuleName);\n        if (SymbolName) fprintf(logf, \"SymbolName='%s'\\n\", SymbolName);\n        if (ModuleName) fprintf(logf, \"ModuleName='%s'\\n\", ModuleName);\n        fflush(logf);\n    }\n\n    int iter = 0;\n    while (StaticSym != NULL)\n    {\n        /* Log state at the start of each iteration after the Name NULL check below. */\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            if (logf)\n            {\n                fprintf(logf, \"iter=%d: StaticSym=%p, Name=NULL -> End of list, returning OS_ERROR\\n\", iter, (void *)StaticSym);\n                fflush(logf);\n                fclose(logf);\n                logf = NULL;\n            }\n\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /* Probe/log the current entry's pointers and string contents (only if non-NULL). */\n        if (logf)\n        {\n            fprintf(logf, \"iter=%d: StaticSym=%p\\n\", iter, (void *)StaticSym);\n            fprintf(logf, \"  Name ptr=%p\", (void *)StaticSym->Name);\n            if (StaticSym->Name) fprintf(logf, \", Name='%s'\", StaticSym->Name);\n            fprintf(logf, \"\\n\");\n\n            fprintf(logf, \"  Module ptr=%p\", (void *)StaticSym->Module);\n            if (StaticSym->Module) fprintf(logf, \", Module='%s'\", StaticSym->Module);\n            else fprintf(logf, \", Module=<NULL>\");\n            fprintf(logf, \"\\n\");\n\n            /* Safe to print SymbolName/ModuleName pointers and values as we checked above at function entry. */\n            fprintf(logf, \"  Param SymbolName ptr=%p\", (const void *)SymbolName);\n            if (SymbolName) fprintf(logf, \", '%s'\", SymbolName);\n            fprintf(logf, \"\\n\");\n\n            fprintf(logf, \"  Param ModuleName ptr=%p\", (const void *)ModuleName);\n            if (ModuleName) fprintf(logf, \", '%s'\", ModuleName);\n            fprintf(logf, \"\\n\");\n\n            /* Compute and log the name comparison (safe because Name != NULL here). */\n            int name_match = 0;\n            if (StaticSym->Name && SymbolName)\n            {\n                name_match = (strcmp(StaticSym->Name, SymbolName) == 0);\n                fprintf(logf, \"  strcmp(Name, SymbolName) => %s\\n\", name_match ? \"EQUAL\" : \"DIFFERENT\");\n            }\n            else\n            {\n                fprintf(logf, \"  strcmp(Name, SymbolName) => SKIPPED (NULL operand)\\n\");\n            }\n\n            /* Warn if the upcoming conditional will call strcmp with a potentially NULL Module pointer. */\n            if (ModuleName != NULL && StaticSym->Module == NULL)\n            {\n                fprintf(logf, \"  WARNING: ModuleName is non-NULL but StaticSym->Module is NULL. The upcoming strcmp(StaticSym->Module, ModuleName) will dereference a NULL pointer.\\n\");\n            }\n\n            fflush(logf);\n        }\n\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n\n            if (logf)\n            {\n                fprintf(logf, \"iter=%d: MATCH FOUND -> Address=%p, returning OS_SUCCESS\\n\", iter, (void *)StaticSym->Address);\n                fflush(logf);\n                fclose(logf);\n                logf = NULL;\n            }\n\n            break;\n        }\n\n        ++StaticSym;\n        ++iter;\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"--- OS_SymbolLookup_Static EXIT returning %d ---\\n\", return_code);\n        fflush(logf);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}