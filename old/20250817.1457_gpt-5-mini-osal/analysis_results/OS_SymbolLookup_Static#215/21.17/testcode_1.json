{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf ModuleName is non-NULL but the table entry has StaticSym->Module == NULL (or points to a non-terminated buffer), the call strcmp(StaticSym->Module, ModuleName) will dereference a NULL/invalid pointer or read past the bounds of the Module buffer. The code only checks ModuleName for NULL, not StaticSym->Module, so a static symbol record with a NULL or non-terminated Module field will cause out-of-bounds access and thus violate MISRA R21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1727.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolLookup_Static as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup_Static:\n```c\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolLookup_Static code.\n",
  "test_code": "int32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    /* Probe: log entry and initial pointers */\n    {\n        FILE *log = fopen(\"/tmp/logs/1727.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTER OS_SymbolLookup_Static: SymbolAddress=%p SymbolName=%p ModuleName=%p StaticSym_start=%p\\n\",\n                    (void *)SymbolAddress, (const void *)SymbolName, (const void *)ModuleName, (const void *)StaticSym);\n            fclose(log);\n        }\n    }\n\n    size_t record_index = 0;\n\n    while (StaticSym != NULL)\n    {\n        /* Log the current record state */\n        {\n            FILE *log = fopen(\"/tmp/logs/1727.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"RECORD[%zu]: StaticSym=%p Name_ptr=%p Module_ptr=%p Address_field_ptr=%p\\n\",\n                        record_index, (void *)StaticSym, (const void *)StaticSym->Name, (const void *)StaticSym->Module,\n                        (void *)&StaticSym->Address);\n                fclose(log);\n            }\n        }\n\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list -- log and return OS_ERROR */\n            {\n                FILE *log = fopen(\"/tmp/logs/1727.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"RECORD[%zu]: Name==NULL -> end of list, returning OS_ERROR\\n\", record_index);\n                    fclose(log);\n                }\n            }\n\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /* Compare names (original logic preserved). Capture the result so we can log it. */\n        int name_matches = (strcmp(StaticSym->Name, SymbolName) == 0);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/1727.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"RECORD[%zu]: name_matches=%d (StaticSym->Name=%p vs SymbolName=%p)\\n\",\n                        record_index, name_matches, (const void *)StaticSym->Name, (const void *)SymbolName);\n                fclose(log);\n            }\n        }\n\n        if (name_matches)\n        {\n            /* If caller supplied a ModuleName, the original code will call strcmp on StaticSym->Module.\n             * We log the state immediately before that call so that a reproducer can see the NULL/invalid\n             * Module pointer or other suspicious state. We do NOT change the original behavior: the\n             * strcmp below is still performed as in the original code. */\n            if (ModuleName == NULL)\n            {\n                FILE *log = fopen(\"/tmp/logs/1727.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"RECORD[%zu]: ModuleName==NULL -> match by name only will be accepted\\n\", record_index);\n                    fclose(log);\n                }\n            }\n            else\n            {\n                /* ModuleName is non-NULL: log whether StaticSym->Module is NULL before the strcmp that follows. */\n                FILE *log = fopen(\"/tmp/logs/1727.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"RECORD[%zu]: ModuleName provided (ModuleName=%p). StaticSym->Module=%p\\n\",\n                            record_index, (const void *)ModuleName, (const void *)StaticSym->Module);\n                    if (StaticSym->Module == NULL)\n                    {\n                        fprintf(log, \"RECORD[%zu]: WARNING: StaticSym->Module is NULL while ModuleName is non-NULL -> strcmp may dereference NULL\\n\",\n                                record_index);\n                    }\n                    fclose(log);\n                }\n            }\n        }\n\n        /* Preserve original combined condition exactly (but using temporaries so we can log around it). */\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n\n            {\n                FILE *log = fopen(\"/tmp/logs/1727.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"RECORD[%zu]: FOUND -> assigning *SymbolAddress (ptr=%p) = &StaticSym->Address (ptr=%p) ; returning OS_SUCCESS\\n\",\n                            record_index, (void *)SymbolAddress, (void *)&StaticSym->Address);\n                    fclose(log);\n                }\n            }\n\n            return_code = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n        ++record_index;\n    }\n\n    /* Log the exit state */\n    {\n        FILE *log = fopen(\"/tmp/logs/1727.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"EXIT OS_SymbolLookup_Static: return_code=%d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}