{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup_Static:\n```c\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SymbolLookup_Static:\ntypedef const struct\n{\n    const char *Name;\n    void (*Address)(void);\n    const char *Module;\n} OS_static_symbol_record_t\n...\n#define OS_STATIC_SYMTABLE_SOURCE OS_STATIC_SYMBOL_TABLE\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragments require investigation for MISRA C:2023 Rule 8.13. Reasoning by pointer site:\n\n- SymbolAddress (cpuaddr *SymbolAddress): This is an output parameter and is deliberately non-const because the function writes to *SymbolAddress. Making the pointed-to type const would prevent the intended use.\n- SymbolName and ModuleName (const char *): Both are already pointers to const-qualified char data, satisfying the rule for read-only string parameters.\n- StaticSym declaration (OS_static_symbol_record_t *StaticSym): The typedef is declared as a const-qualified struct (typedef const struct { ... } OS_static_symbol_record_t;), so OS_static_symbol_record_t * is a pointer to a const-qualified type already; no further const qualification is required.\n- StaticSym->Name and StaticSym->Module: These members are declared as const char *, so they already point to const-qualified types.\n- StaticSym->Address: This is a function pointer (void (*)(void)). Function types cannot sensibly be const-qualified in C, so this cannot be made a pointer to a const-qualified function type.\n- The cast (cpuaddr)StaticSym->Address and the assignment to *SymbolAddress involve converting a function pointer to an integer type and updating the output parameter; these are unrelated to making pointers point to const-qualified types.\n\nGiven the above, all pointer uses are either already pointing to const-qualified types or are intentionally non-const for valid reasons (e.g., output parameter or function pointer), so there are no fragments that violate or need investigation under Rule 8.13."
}