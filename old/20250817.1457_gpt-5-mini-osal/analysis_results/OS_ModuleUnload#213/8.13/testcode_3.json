{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'module' is declared as a mutable pointer (OS_module_internal_record_t *module) but is only used for read access (module->module_type) and never modifies the pointed-at object. According to MISRA C 2023 Rule 8.13, it should be declared to point to a const-qualified type whenever possible (e.g. const OS_module_internal_record_t *module).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleUnload code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1707.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleUnload as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleUnload:\n```c\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            return_code = OS_ModuleUnload_Impl(&token);\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleUnload code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log control flow and state to /tmp/logs/1707.txt */\nstatic void OS_ModuleUnload_Log(const char *stage,\n                                osal_id_t module_id,\n                                const OS_module_internal_record_t *module,\n                                int32 return_code,\n                                const OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/1707.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_ModuleUnload: %s\\n\", stage);\n        fprintf(f, \"  module_id=%lu\\n\", (unsigned long)module_id);\n        fprintf(f, \"  token_addr=%p\\n\", (const void *)token);\n        fprintf(f, \"  return_code=%ld\\n\", (long)return_code);\n        if (module != NULL)\n        {\n            fprintf(f, \"  module_ptr=%p\\n\", (const void *)module);\n            /* Print the module_type value observed (read-only observation) */\n            fprintf(f, \"  module->module_type=%lu\\n\", (unsigned long)module->module_type);\n            /* Indicate whether the dynamic branch will be taken */\n            if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n            {\n                fprintf(f, \"  branch: module is DYNAMIC\\n\");\n            }\n            else\n            {\n                fprintf(f, \"  branch: module is NOT DYNAMIC\\n\");\n            }\n        }\n        else\n        {\n            fprintf(f, \"  module_ptr=(null)\\n\");\n        }\n        fprintf(f, \"--\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Log entry state */\n    OS_ModuleUnload_Log(\"entry_before_GetById\", module_id, NULL, 0, NULL);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n\n    /* Log result of lookup */\n    OS_ModuleUnload_Log(\"after_GetById\", module_id, NULL, return_code, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Log after resolving the module pointer */\n        OS_ModuleUnload_Log(\"after_table_get\", module_id, module, return_code, &token);\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            OS_ModuleUnload_Log(\"before_unload_impl\", module_id, module, return_code, &token);\n            return_code = OS_ModuleUnload_Impl(&token);\n            OS_ModuleUnload_Log(\"after_unload_impl\", module_id, module, return_code, &token);\n        }\n\n        /* Complete the operation via the common routine */\n        OS_ModuleUnload_Log(\"before_finalize\", module_id, module, return_code, &token);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_ModuleUnload_Log(\"after_finalize\", module_id, module, return_code, &token);\n    }\n\n    OS_ModuleUnload_Log(\"exit\", module_id, NULL, return_code, NULL);\n\n    return return_code;\n}\n"
}