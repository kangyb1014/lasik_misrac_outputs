{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'module' is declared as a modifiable pointer (OS_module_internal_record_t *module) but is only used to read module->module_type. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible. The code at the fragment if (module->module_type == OS_MODULE_TYPE_DYNAMIC) therefore violates the rule \u2014 'module' should be declared const OS_module_internal_record_t *module (assigning the address of the non-const table element to a pointer-to-const is allowed) to indicate it is not used to modify the object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleUnload code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1707.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleUnload as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleUnload:\n```c\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            return_code = OS_ModuleUnload_Impl(&token);\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleUnload code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe helper: append log entries to /tmp/logs/1707.txt */\nstatic void OS_ModuleUnload_Log(const char *stage, osal_id_t module_id, const OS_module_internal_record_t *module, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1707.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(f, \"[%ld] OS_ModuleUnload: %s; module_id=%lu; return_code=%ld; module_ptr=%p\",\n                (long)t,\n                stage,\n                (unsigned long)module_id,\n                (long)return_code,\n                (void *)module);\n\n        if (module != NULL)\n        {\n            /* Safely log the module_type field for evidence that the pointer is only read */\n            fprintf(f, \"; module->module_type=%d\", (int)module->module_type);\n        }\n\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Initial lookup */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n\n    /* Log result of lookup */\n    OS_ModuleUnload_Log(\"after_getbyid\", module_id, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Log the table lookup and the pointed-to state (module_type) */\n        OS_ModuleUnload_Log(\"after_table_get\", module_id, module, return_code);\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (module != NULL && module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            OS_ModuleUnload_Log(\"before_impl\", module_id, module, return_code);\n            return_code = OS_ModuleUnload_Impl(&token);\n            OS_ModuleUnload_Log(\"after_impl\", module_id, module, return_code);\n        }\n\n        /* Complete the operation via the common routine */\n        OS_ModuleUnload_Log(\"before_finalize\", module_id, module, return_code);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_ModuleUnload_Log(\"after_finalize\", module_id, module, return_code);\n    }\n\n    OS_ModuleUnload_Log(\"exit\", module_id, NULL, return_code);\n    return return_code;\n}\n"
}