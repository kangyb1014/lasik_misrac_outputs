{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'module' is declared as a non-const pointer (OS_module_internal_record_t *module) but is only used for read access (module->module_type). The assignment module = OS_OBJECT_TABLE_GET(OS_module_table, token); therefore yields a pointer that could and should be to a const-qualified type (const OS_module_internal_record_t *module). As written, the code fails to qualify the pointer as pointing to const when possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleUnload code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1707.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleUnload as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleUnload:\n```c\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            return_code = OS_ModuleUnload_Impl(&token);\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleUnload code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/1707.txt */\nstatic void os_module_unload_log(const char *fmt, ...)\n{\n    FILE *fp;\n    va_list ap;\n\n    /* Ensure the directory exists; ignore errors if it already does */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    fp = fopen(\"/tmp/logs/1707.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Best-effort logging only */\n    }\n\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    os_module_unload_log(\"OS_ModuleUnload ENTRY: module_id=%lu\", (unsigned long)module_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n    os_module_unload_log(\"OS_ObjectIdGetById returned %ld; token addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n        os_module_unload_log(\"OS_OBJECT_TABLE_GET -> module ptr=%p\", (void *)module);\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (module != NULL)\n        {\n            /* Log the observed module_type for diagnostic evidence */\n            os_module_unload_log(\"module->module_type=%d\", (int)module->module_type);\n        }\n        else\n        {\n            os_module_unload_log(\"module is NULL (unexpected)\");\n        }\n\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            os_module_unload_log(\"Calling OS_ModuleUnload_Impl for token addr=%p\", (void *)&token);\n            return_code = OS_ModuleUnload_Impl(&token);\n            os_module_unload_log(\"OS_ModuleUnload_Impl returned %ld\", (long)return_code);\n        }\n\n        /* Complete the operation via the common routine */\n        os_module_unload_log(\"Calling OS_ObjectIdFinalizeDelete with return_code=%ld\", (long)return_code);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        os_module_unload_log(\"OS_ObjectIdFinalizeDelete returned %ld\", (long)return_code);\n    }\n    else\n    {\n        os_module_unload_log(\"OS_ObjectIdGetById failed; skipping unload path\");\n    }\n\n    os_module_unload_log(\"OS_ModuleUnload EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}