{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro yields a pointer to a mutable table element (e.g. OS_module_internal_record_t *). In OS_ModuleUnload the variable 'module' is declared as OS_module_internal_record_t *module but is only used for read access (module->module_type). According to Rule 8.13 this should be const-qualified (const OS_module_internal_record_t *module). Thus the use of the macro in this context results in a pointer that could/should be const and so violates the intent of Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleUnload code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1707.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleUnload as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleUnload:\n```c\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            return_code = OS_ModuleUnload_Impl(&token);\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleUnload code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe helper: append formatted log entries to /tmp/logs/1707.txt */\nstatic void OS_ModuleUnload_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1707.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char ts[64];\n        if (strftime(ts, sizeof(ts), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(fp, \"%s - \", ts);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    OS_ModuleUnload_Log(\"OS_ModuleUnload: entry module_id=%d\", (int)module_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n    OS_ModuleUnload_Log(\"OS_ObjectIdGetById returned %d (token addr=%p)\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n        /* Log the pointer obtained from the table. This reproduces the pointer\n         * value that the original code then dereferences. */\n        OS_ModuleUnload_Log(\"OS_OBJECT_TABLE_GET -> module ptr=%p\", (void *)module);\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        /* Log the module_type access (this is the read that should be const-qualified)\n         * Intentionally keep the same access pattern as original code to preserve logic. */\n        OS_ModuleUnload_Log(\"About to read module->module_type\");\n        OS_ModuleUnload_Log(\"module->module_type=%d\", (int)module->module_type);\n\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            OS_ModuleUnload_Log(\"module is dynamic, calling OS_ModuleUnload_Impl\");\n            return_code = OS_ModuleUnload_Impl(&token);\n            OS_ModuleUnload_Log(\"OS_ModuleUnload_Impl returned %d\", (int)return_code);\n        }\n        else\n        {\n            OS_ModuleUnload_Log(\"module is not dynamic (module_type=%d), skipping implementation call\", (int)module->module_type);\n        }\n\n        /* Complete the operation via the common routine */\n        OS_ModuleUnload_Log(\"Calling OS_ObjectIdFinalizeDelete with current return_code=%d\", (int)return_code);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_ModuleUnload_Log(\"OS_ObjectIdFinalizeDelete returned %d\", (int)return_code);\n    }\n\n    OS_ModuleUnload_Log(\"OS_ModuleUnload: exit return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}