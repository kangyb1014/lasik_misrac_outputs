{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_ModuleUnload_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1707.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char ts[64];\n        if (strftime(ts, sizeof(ts), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(fp, \"%s - \", ts);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    OS_ModuleUnload_Log(\"OS_ModuleUnload: entry module_id=%d\", (int)module_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n    OS_ModuleUnload_Log(\"OS_ObjectIdGetById returned %d (token addr=%p)\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n        /* Log the pointer obtained from the table. This reproduces the pointer\n         * value that the original code then dereferences. */\n        OS_ModuleUnload_Log(\"OS_OBJECT_TABLE_GET -> module ptr=%p\", (void *)module);\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        /* Log the module_type access (this is the read that should be const-qualified)\n         * Intentionally keep the same access pattern as original code to preserve logic. */\n        OS_ModuleUnload_Log(\"About to read module->module_type\");\n        OS_ModuleUnload_Log(\"module->module_type=%d\", (int)module->module_type);\n\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            OS_ModuleUnload_Log(\"module is dynamic, calling OS_ModuleUnload_Impl\");\n            return_code = OS_ModuleUnload_Impl(&token);\n            OS_ModuleUnload_Log(\"OS_ModuleUnload_Impl returned %d\", (int)return_code);\n        }\n        else\n        {\n            OS_ModuleUnload_Log(\"module is not dynamic (module_type=%d), skipping implementation call\", (int)module->module_type);\n        }\n\n        /* Complete the operation via the common routine */\n        OS_ModuleUnload_Log(\"Calling OS_ObjectIdFinalizeDelete with current return_code=%d\", (int)return_code);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_ModuleUnload_Log(\"OS_ObjectIdFinalizeDelete returned %d\", (int)return_code);\n    }\n\n    OS_ModuleUnload_Log(\"OS_ModuleUnload: exit return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp0i2xyq1x/src/src/os/shared/src/osapi-module.c: In function 'OS_ModuleUnload_Log':\n/tmp/tmp0i2xyq1x/src/src/os/shared/src/osapi-module.c:283:15: error: storage size of 'tm_buf' isn't known\n  283 |     struct tm tm_buf;\n      |               ^~~~~~\n/tmp/tmp0i2xyq1x/src/src/os/shared/src/osapi-module.c:295:23: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  295 |     vfprintf(fp, fmt, ap);\n      |                       ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-module.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-module.dir/__/__/os/shared/src/osapi-module.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3849: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-module.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_ModuleUnload as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\nstatic void OS_ModuleUnload_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1707.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char ts[64];\n        if (strftime(ts, sizeof(ts), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(fp, \"%s - \", ts);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast the va_list to the implementation's va_list type expected by vfprintf\n     * to avoid mismatches between project-specific va_list typedefs and the\n     * system prototype for vfprintf. This preserves the original logic. */\n    vfprintf(fp, fmt, (va_list)ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    OS_ModuleUnload_Log(\"OS_ModuleUnload: entry module_id=%d\", (int)module_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n    OS_ModuleUnload_Log(\"OS_ObjectIdGetById returned %d (token addr=%p)\", (int)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n        /* Log the pointer obtained from the table. This reproduces the pointer\n         * value that the original code then dereferences. */\n        OS_ModuleUnload_Log(\"OS_OBJECT_TABLE_GET -> module ptr=%p\", (void *)module);\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        /* Log the module_type access (this is the read that should be const-qualified)\n         * Intentionally keep the same access pattern as original code to preserve logic. */\n        OS_ModuleUnload_Log(\"About to read module->module_type\");\n        OS_ModuleUnload_Log(\"module->module_type=%d\", (int)module->module_type);\n\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            OS_ModuleUnload_Log(\"module is dynamic, calling OS_ModuleUnload_Impl\");\n            return_code = OS_ModuleUnload_Impl(&token);\n            OS_ModuleUnload_Log(\"OS_ModuleUnload_Impl returned %d\", (int)return_code);\n        }\n        else\n        {\n            OS_ModuleUnload_Log(\"module is not dynamic (module_type=%d), skipping implementation call\", (int)module->module_type);\n        }\n\n        /* Complete the operation via the common routine */\n        OS_ModuleUnload_Log(\"Calling OS_ObjectIdFinalizeDelete with current return_code=%d\", (int)return_code);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_ModuleUnload_Log(\"OS_ObjectIdFinalizeDelete returned %d\", (int)return_code);\n    }\n\n    OS_ModuleUnload_Log(\"OS_ModuleUnload: exit return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "Two issues prevented compilation: struct tm (from time.h) was unknown, and the variadic vfprintf call had a va_list type mismatch in this build environment. I added the required headers (<time.h>, <stdarg.h>, <stdio.h>) so struct tm and va_list are defined. To avoid a possible project-specific va_list/type mismatch when calling vfprintf, I cast the va_list when passing it to vfprintf: vfprintf(fp, fmt, (va_list)ap). This preserves the original logic and resolves the type mismatch during compilation."
}