{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_ModuleUnload obtains a non-const pointer to an element of OS_module_table even though it only reads the record. The macro OS_OBJECT_TABLE_GET(&tbl, token) expands to &tbl[index], and OS_module_table is declared as a non-const array: \"OS_module_internal_record_t OS_module_table[OS_MAX_MODULES]\". In OS_ModuleUnload the code does: module = OS_OBJECT_TABLE_GET(OS_module_table, token); then only reads module->module_type. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible (e.g. use const OS_module_internal_record_t *module or declare OS_module_table as const if it is never modified). Because a non-const pointer is produced/used where a const-qualified pointer would suffice, this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleUnload code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1707.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleUnload as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleUnload:\n```c\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            return_code = OS_ModuleUnload_Impl(&token);\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleUnload code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe/log helper for OS_ModuleUnload. This writes append-only logs to /tmp/logs/1707.txt.\n * The helper intentionally does not dereference token contents (unknown layout) and only\n * prints pointer values and module->module_type when module is non-NULL. This preserves\n * the original logic while providing trace evidence for the reported violation scenario.\n */\nstatic void OS_ModuleUnload_LogProbe(osal_id_t module_id,\n                                    const OS_object_token_t *token,\n                                    const OS_module_internal_record_t *module,\n                                    int32 return_code,\n                                    const char *stage)\n{\n    FILE *f = fopen(\"/tmp/logs/1707.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print basic state: stage, module_id (as long), addresses of token/module, module_type (if available), and return_code */\n        (void)fprintf(f,\n                      \"[%s] module_id=%ld token_ptr=%p module_ptr=%p module_type=%d return_code=%ld\\n\",\n                      (stage != NULL) ? stage : \"(null)\",\n                      (long)module_id,\n                      (const void *)token,\n                      (const void *)module,\n                      (module != NULL) ? (int)module->module_type : -1,\n                      (long)return_code);\n        (void)fclose(f);\n    }\n}\n\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Log entry before attempting to resolve the ID. token is uninitialized here so we only log its address. */\n    OS_ModuleUnload_LogProbe(module_id, &token, NULL, -1, \"entry_before_GetById\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n\n    /* Log result of ID resolution */\n    OS_ModuleUnload_LogProbe(module_id, &token, NULL, return_code, \"after_GetById\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Log pointer obtained from table and the current module_type (if readable) */\n        OS_ModuleUnload_LogProbe(module_id, &token, module, return_code, \"after_table_get\");\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            OS_ModuleUnload_LogProbe(module_id, &token, module, return_code, \"before_impl_call\");\n            return_code = OS_ModuleUnload_Impl(&token);\n            OS_ModuleUnload_LogProbe(module_id, &token, module, return_code, \"after_impl_call\");\n        }\n\n        /* Complete the operation via the common routine */\n        OS_ModuleUnload_LogProbe(module_id, &token, module, return_code, \"before_finalize\");\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_ModuleUnload_LogProbe(module_id, &token, module, return_code, \"after_finalize\");\n    }\n\n    OS_ModuleUnload_LogProbe(module_id, &token, NULL, return_code, \"exit\");\n\n    return return_code;\n}\n"
}