{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe memset call writes sizeof(*token) bytes to the address in token without first validating the pointer. If a caller passes token == NULL (or a pointer to a smaller object), memset(token, 0, sizeof(*token)) will write out of bounds (e.g. dereference NULL), violating MISRA C 2023 Rule 21.17. Although current callers shown pass the address of a local OS_object_token_t, the function itself does not check the pointer and is therefore potentially violating the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleUnload code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1711.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleUnload as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleUnload:\n```c\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            return_code = OS_ModuleUnload_Impl(&token);\n        }\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleUnload code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe/logging helper for OS_ModuleUnload - writes trace to /tmp/logs/1711.txt */\nstatic void OS_ModuleUnload_Log(const char *stage, const OS_object_token_t *token_p,\n                                OS_module_internal_record_t *module, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1711.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, do not change program behavior; just return. */\n        return;\n    }\n\n    /* Log basic stage and return code */\n    fprintf(f, \"[OS_ModuleUnload] Stage: %s, return_code: %ld\\n\", stage, (long)return_code);\n\n    /* Log the address of the token variable (local stack address) */\n    fprintf(f, \"[OS_ModuleUnload] token local address: %p\\n\", (const void *)token_p);\n\n    /* Dump the raw bytes of the token object representation to allow reproducing\n       what value (including NULL) the token contained when passed on the stack. */\n    if (token_p != NULL)\n    {\n        const unsigned char *bytes = (const unsigned char *)token_p;\n        size_t i;\n        fprintf(f, \"[OS_ModuleUnload] token raw bytes:\");\n        for (i = 0u; i < sizeof(*token_p); ++i)\n        {\n            /* Print each byte in hex to capture pointer/integer representation */\n            fprintf(f, \" %02x\", (unsigned)bytes[i]);\n        }\n        fprintf(f, \"\\n\");\n    }\n    else\n    {\n        fprintf(f, \"[OS_ModuleUnload] token pointer passed to logger is NULL\\n\");\n    }\n\n    /* Log module pointer and, if available, the module_type field (safe check) */\n    fprintf(f, \"[OS_ModuleUnload] module pointer: %p\\n\", (const void *)module);\n    if (module != NULL)\n    {\n        fprintf(f, \"[OS_ModuleUnload] module->module_type: %d\\n\", (int)module->module_type);\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_ModuleUnload(osal_id_t module_id)\n{\n    OS_module_internal_record_t *module;\n    int32                        return_code;\n    OS_object_token_t            token;\n\n    /* Log entry state: module_id and uninitialized token raw bytes (stack content) */\n    OS_ModuleUnload_Log(\"entry_before_getbyid\", &token, NULL, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, module_id, &token);\n    OS_ModuleUnload_Log(\"after_getbyid\", &token, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Log after resolving module pointer */\n        OS_ModuleUnload_Log(\"after_table_get\", &token, module, return_code);\n\n        /*\n         * Only call the implementation if the file was actually loaded.\n         * If this is a static module, then this is just a placeholder and\n         * it means there was no file actually loaded.\n         */\n        if (module->module_type == OS_MODULE_TYPE_DYNAMIC)\n        {\n            OS_ModuleUnload_Log(\"before_impl_unload\", &token, module, return_code);\n            return_code = OS_ModuleUnload_Impl(&token);\n            OS_ModuleUnload_Log(\"after_impl_unload\", &token, module, return_code);\n        }\n\n        /* Complete the operation via the common routine */\n        OS_ModuleUnload_Log(\"before_finalize_delete\", &token, module, return_code);\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_ModuleUnload_Log(\"after_finalize_delete\", &token, module, return_code);\n    }\n    else\n    {\n        /* Log the failure path */\n        OS_ModuleUnload_Log(\"getbyid_failed\", &token, NULL, return_code);\n    }\n\n    OS_ModuleUnload_Log(\"exit\", &token, NULL, return_code);\n    return return_code;\n}\n"
}