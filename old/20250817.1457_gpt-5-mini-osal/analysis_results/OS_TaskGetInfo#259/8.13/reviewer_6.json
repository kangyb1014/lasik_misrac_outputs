{
  "user_message": "An agent A claimed that the following OS_TaskGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskGetInfo.\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local variable 'record' is declared as OS_common_record_t * but is only used to read fields (record->name_entry, record->creator). It is assigned from OS_OBJECT_TABLE_GET(OS_global_task_table, token) which yields an OS_common_record_t *; however the pointer should be to a const-qualified target (e.g. const OS_common_record_t *) since the function does not modify the pointed-to data. Thus a pointer that could point to a const-qualified type is declared without const, violating MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Probe logging: record and task pointers and key fields. */\n        {\n            FILE *log = fopen(\"/tmp/logs/2075.txt\", \"a\");\n            if (log != NULL)\n            {\n                /* Log basic control information (addresses rather than internal token)\n                   to avoid assumptions about token's type/representation. */\n                fprintf(log, \"OS_TaskGetInfo: entered (task_id=%lu)\\n\", (unsigned long)task_id);\n                fprintf(log, \"  local token variable address=%p\\n\", (void *)&token);\n                fprintf(log, \"  record ptr=%p, task ptr=%p\\n\", (void *)record, (void *)task);\n\n                if (record != NULL)\n                {\n                    fprintf(log, \"  record->name_entry ptr=%p\\n\", (void *)record->name_entry);\n                    if (record->name_entry != NULL)\n                    {\n                        /* Log up to 256 chars of the name to avoid extremely long logs */\n                        char name_buf[257] = {0};\n                        strncpy(name_buf, record->name_entry, sizeof(name_buf) - 1);\n                        fprintf(log, \"  record->name_entry content='%s'\\n\", name_buf);\n                    }\n                    else\n                    {\n                        fprintf(log, \"  record->name_entry is NULL\\n\");\n                    }\n\n                    fprintf(log, \"  record->creator=%lu\\n\", (unsigned long)record->creator);\n                }\n                else\n                {\n                    fprintf(log, \"  record is NULL\\n\");\n                }\n\n                if (task != NULL)\n                {\n                    fprintf(log, \"  task->stack_size=%lu, task->priority=%lu\\n\",\n                            (unsigned long)task->stack_size,\n                            (unsigned long)task->priority);\n                }\n                else\n                {\n                    fprintf(log, \"  task is NULL\\n\");\n                }\n\n                fclose(log);\n            }\n        }\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        /* Log the result and the populated task_prop for evidence */\n        {\n            FILE *log = fopen(\"/tmp/logs/2075.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_TaskGetInfo: after Impl return_code=%ld\\n\", (long)return_code);\n                fprintf(log, \"  populated task_prop->name='%s'\\n\", task_prop->name);\n                fprintf(log, \"  populated task_prop->creator=%lu\\n\", (unsigned long)task_prop->creator);\n                fprintf(log, \"  populated task_prop->stack_size=%lu\\n\", (unsigned long)task_prop->stack_size);\n                fprintf(log, \"  populated task_prop->priority=%lu\\n\", (unsigned long)task_prop->priority);\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        /* Log failure to obtain object id/token */\n        FILE *log = fopen(\"/tmp/logs/2075.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TaskGetInfo: ObjectIdGetById failed return_code=%ld (task_id=%lu)\\n\",\n                    (long)return_code, (unsigned long)task_id);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_TaskGetInfo: ObjectIdGetById failed return_code=-35 (task_id=3735928559)\nOS_TaskGetInfo: ObjectIdGetById failed return_code=-35 (task_id=0)\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_TaskGetInfo both 'record' and 'task' are only used for read-only access (record->name_entry, record->creator, task->stack_size, task->priority) and are never modified through those pointers in this function. Per MISRA C 2023 Rule 8.13, pointers that are used only to access data and not to modify it should point to a const-qualified type. Declaring them as const OS_common_record_t *record and const OS_task_internal_record_t *task (assigning the non-const result of OS_OBJECT_TABLE_GET to a const pointer is allowed) would satisfy the rule. Therefore the agent A's identification of a Rule 8.13 violation is correct."
}