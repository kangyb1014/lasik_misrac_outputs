{
  "user_message": "An agent A claimed that the following OS_TaskGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskGetInfo.\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In OS_TaskGetInfo the local pointer 'task' is declared as OS_task_internal_record_t * but is only used to read fields (task->stack_size, task->priority). According to MISRA C 2023 Rule 8.13 it should be declared as const OS_task_internal_record_t *task (assigning the address of the non-const table element to a pointer-to-const is allowed) to indicate no modification is intended.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_TaskGetInfo_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2075.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Log entry and parameters */\n    OS_TaskGetInfo_Log(\"ENTER: OS_TaskGetInfo task_id=%lu task_prop=%p\", (unsigned long)task_id, (void *)task_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    OS_TaskGetInfo_Log(\"OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        OS_TaskGetInfo_Log(\"Resolved token=%p record=%p task=%p\", (void *)&token, (void *)record, (void *)task);\n\n        if (record->name_entry != NULL)\n        {\n            OS_TaskGetInfo_Log(\"record->name_entry present at %p: '%.64s'\", (void *)record->name_entry, record->name_entry);\n\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n\n            OS_TaskGetInfo_Log(\"Copied name to task_prop->name: '%.64s'\", task_prop->name);\n        }\n        else\n        {\n            OS_TaskGetInfo_Log(\"record->name_entry is NULL\");\n        }\n\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        OS_TaskGetInfo_Log(\"Populated fields: creator=%lu stack_size=%lu priority=%ld\", (unsigned long)task_prop->creator, (unsigned long)task_prop->stack_size, (long)task_prop->priority);\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n        OS_TaskGetInfo_Log(\"OS_TaskGetInfo_Impl returned %ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n        OS_TaskGetInfo_Log(\"Released token\");\n    }\n    else\n    {\n        OS_TaskGetInfo_Log(\"ObjectIdGetById failed, skipping lookup and impl call\");\n    }\n\n    OS_TaskGetInfo_Log(\"EXIT: OS_TaskGetInfo returning %ld\", (long)return_code);\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nENTER: OS_TaskGetInfo task_id=3735928559 task_prop=0x7fff52d0ba00\nOS_ObjectIdGetById returned -35\nObjectIdGetById failed, skipping lookup and impl call\nEXIT: OS_TaskGetInfo returning -35\nENTER: OS_TaskGetInfo task_id=0 task_prop=0x7fff52d0ba00\nOS_ObjectIdGetById returned -35\nObjectIdGetById failed, skipping lookup and impl call\nEXIT: OS_TaskGetInfo returning -35\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 8.13 requires that a pointer should point to a const-qualified type whenever possible. In OS_TaskGetInfo the local pointer 'task' is only used to read fields (task->stack_size, task->priority) and therefore should be declared as a pointer to const (e.g. const OS_task_internal_record_t *task). Assigning the address of a non-const table element to a pointer-to-const is allowed, so changing the declaration to const does not violate semantics. (Note: by the same reasoning, 'record' is also only read and could likewise be a const pointer.)"
}