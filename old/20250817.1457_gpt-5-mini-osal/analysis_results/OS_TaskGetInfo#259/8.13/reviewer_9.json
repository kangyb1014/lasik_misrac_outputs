{
  "user_message": "An agent A claimed that the following OS_TaskGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskGetInfo.\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'task' is declared as OS_task_internal_record_t *task but is only used for read-only access (task->stack_size, task->priority). According to MISRA C 2023 Rule 8.13 it should be declared as a pointer-to-const (const OS_task_internal_record_t *task). The statement task_prop->priority = task->priority therefore reads via a non-const pointer when a const-qualified pointer is possible \u2014 this violates Rule 8.13. (Note: OS_OBJECT_TABLE_GET yields an address of a non-const array element, but assigning that to a pointer-to-const is allowed.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_2075_log_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2075.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    OS_2075_log_printf(\"OS_TaskGetInfo ENTRY: task_id=%lu\", (unsigned long)task_id);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    OS_2075_log_printf(\"OS_ObjectIdGetById returned %ld\", (long)return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        OS_2075_log_printf(\"record=%p, task=%p\", (void *)record, (void *)task);\n\n        if (record->name_entry != NULL)\n        {\n            /* Log the name about to be copied (truncate safely for log) */\n            char name_log[128] = {0};\n            strncpy(name_log, record->name_entry, sizeof(name_log) - 1);\n            OS_2075_log_printf(\"record->name_entry=%p name='%s'\", (void *)record->name_entry, name_log);\n\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        else\n        {\n            OS_2075_log_printf(\"record->name_entry is NULL\");\n        }\n\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        OS_2075_log_printf(\"After assignment: creator=%lu, stack_size=%ld, priority=%ld\",\n                           (unsigned long)task_prop->creator,\n                           (long)task_prop->stack_size,\n                           (long)task_prop->priority);\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n        OS_2075_log_printf(\"OS_TaskGetInfo_Impl returned %ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n        OS_2075_log_printf(\"OS_ObjectIdRelease called for token\");\n    }\n\n    OS_2075_log_printf(\"OS_TaskGetInfo EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_TaskGetInfo ENTRY: task_id=3735928559\nOS_ObjectIdGetById returned -35\nOS_TaskGetInfo EXIT: return_code=-35\nOS_TaskGetInfo ENTRY: task_id=0\nOS_ObjectIdGetById returned -35\nOS_TaskGetInfo EXIT: return_code=-35\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The local variable task is only used for read-only access (task->stack_size and task->priority) and is never used to modify the underlying object. Under MISRA C 2023 Rule 8.13 a pointer that is used only to access an object read-only should be declared to point to a const-qualified type (e.g. const OS_task_internal_record_t *task). Assigning the address produced by OS_OBJECT_TABLE_GET (a non-const object address) to a pointer-to-const is permitted in C, so changing the declaration to a pointer-to-const would both satisfy the rule and be safe. Therefore agent A\u2019s claim of a Rule 8.13 violation is valid."
}