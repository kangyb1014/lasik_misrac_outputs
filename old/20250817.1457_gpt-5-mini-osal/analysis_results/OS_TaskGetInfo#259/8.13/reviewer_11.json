{
  "user_message": "An agent A claimed that the following OS_TaskGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskGetInfo.\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer variable 'record' is declared as OS_common_record_t *record but is only used for read-only access (checked record->name_entry and read record->creator). Per MISRA C 2023 Rule 8.13 it should be const-qualified (const OS_common_record_t *record). Assigning the non-const result of OS_OBJECT_TABLE_GET to a const-qualified pointer is permitted, so the current non-const declaration violates the rule.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_TaskGetInfo_Logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2075.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fputc('\\n', f);\n        fclose(f);\n    }\n}\n\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Log entry with provided parameters */\n    OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: entry task_id=%lld task_prop=%p\", (long long)task_id, (void *)task_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: zeroed task_prop at %p\", (void *)task_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: ObjectIdGetById returned %lld\", (long long)return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log pointers and initial state read from records */\n        OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: token=%p record=%p task=%p\", (void *)&token, (void *)record, (void *)task);\n        if (record != NULL)\n        {\n            OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: record->name_entry=%p record->creator=%lld\",\n                                (void *)record->name_entry, (long long)record->creator);\n        }\n        else\n        {\n            OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: record is NULL\");\n        }\n        if (task != NULL)\n        {\n            OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: task->stack_size=%lld task->priority=%lld\",\n                                (long long)task->stack_size, (long long)task->priority);\n        }\n        else\n        {\n            OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: task is NULL\");\n        }\n\n        if (record != NULL && record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n            OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: copied name='%s'\", task_prop->name);\n        }\n        else\n        {\n            OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: name_entry is NULL or record is NULL\");\n        }\n\n        task_prop->creator    = record != NULL ? record->creator : 0;\n        task_prop->stack_size = task != NULL ? task->stack_size : 0;\n        task_prop->priority   = task != NULL ? task->priority : 0;\n\n        OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: populated task_prop->creator=%lld stack_size=%lld priority=%lld\",\n                            (long long)task_prop->creator, (long long)task_prop->stack_size, (long long)task_prop->priority);\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n        OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: OS_TaskGetInfo_Impl returned %lld\", (long long)return_code);\n\n        OS_ObjectIdRelease(&token);\n        OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: released token\");\n    }\n    else\n    {\n        OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: failed to get object id, returning %lld\", (long long)return_code);\n    }\n\n    OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: exit returning %lld\", (long long)return_code);\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_TaskGetInfo: entry task_id=3735928559 task_prop=0x7ffede1e6eb0\nOS_TaskGetInfo: zeroed task_prop at 0x7ffede1e6eb0\nOS_TaskGetInfo: ObjectIdGetById returned -35\nOS_TaskGetInfo: failed to get object id, returning -35\nOS_TaskGetInfo: exit returning -35\nOS_TaskGetInfo: entry task_id=0 task_prop=0x7ffede1e6eb0\nOS_TaskGetInfo: zeroed task_prop at 0x7ffede1e6eb0\nOS_TaskGetInfo: ObjectIdGetById returned -35\nOS_TaskGetInfo: failed to get object id, returning -35\nOS_TaskGetInfo: exit returning -35\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The local pointer 'record' is only used for read-only access (checked and read fields) and therefore should be declared to point to a const-qualified type (e.g. const OS_common_record_t *record) in order to satisfy MISRA C:2023 Rule 8.13. Assigning the non-const result of OS_OBJECT_TABLE_GET to a pointer-to-const is allowed (adding const qualification is permitted), so making this change is valid. (Note: the same rationale applies to 'task' which is also only read and could be declared const.)"
}