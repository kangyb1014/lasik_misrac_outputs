{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable 'task' is declared as a non-const pointer (OS_task_internal_record_t *task) but is only used for read-only access (task->stack_size, task->priority). The assignment task = OS_OBJECT_TABLE_GET(OS_task_table, token); therefore should use a const-qualified pointer (const OS_task_internal_record_t *task) to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2075.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskGetInfo:\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe logging helper - append-only to avoid overwriting previous evidence */\nstatic void OS_TaskGetInfo_LogProbe(const char *stage, osal_id_t task_id, OS_common_record_t *record, OS_task_internal_record_t *task, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2075.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"Stage: %s\\n\", stage);\n        fprintf(f, \"  task_id: %lu\\n\", (unsigned long)task_id);\n        fprintf(f, \"  return_code (so far): %ld\\n\", (long)return_code);\n        fprintf(f, \"  record ptr: %p\\n\", (void *)record);\n        if (record != NULL)\n        {\n            fprintf(f, \"    name_entry ptr: %p\\n\", (void *)record->name_entry);\n            if (record->name_entry != NULL)\n            {\n                /* print name safely */\n                fprintf(f, \"    name_entry (as string): '%.*s'\\n\", 256, record->name_entry);\n            }\n            fprintf(f, \"    creator: %lu\\n\", (unsigned long)record->creator);\n        }\n        fprintf(f, \"  task ptr: %p\\n\", (void *)task);\n        if (task != NULL)\n        {\n            fprintf(f, \"    stack_size: %lu\\n\", (unsigned long)task->stack_size);\n            fprintf(f, \"    priority: %ld\\n\", (long)task->priority);\n        }\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    /* Log entry */\n    OS_TaskGetInfo_LogProbe(\"enter\", task_id, NULL, NULL, -1);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_TaskGetInfo_LogProbe(\"after ObjectIdGetById\", task_id, NULL, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log pointers and fields obtained from the tables */\n        OS_TaskGetInfo_LogProbe(\"after table lookups\", task_id, record, task, return_code);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        /* Log values copied into task_prop to demonstrate read-only usage of 'task' */\n        OS_TaskGetInfo_LogProbe(\"before Impl call (copied to task_prop)\", task_id, record, task, return_code);\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        /* Log result from implementation call and about to release token */\n        OS_TaskGetInfo_LogProbe(\"after Impl call\", task_id, record, task, return_code);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Log exit */\n    OS_TaskGetInfo_LogProbe(\"exit\", task_id, NULL, NULL, return_code);\n\n    return return_code;\n}\n"
}