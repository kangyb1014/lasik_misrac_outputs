{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe symbol is declared as 'extern OS_common_record_t *const OS_global_task_table' \u2014 a const pointer to a non-const OS_common_record_t. In the shown code OS_TaskGetInfo only reads fields from the table (record = OS_OBJECT_TABLE_GET(OS_global_task_table, token); then uses record->name_entry, record->creator, etc.), so the pointee is effectively read-only and should be const-qualified. Per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible; therefore the declaration should be 'extern const OS_common_record_t *const OS_global_task_table'. As given (pointer to non-const), this violates Rule 8.13 unless there is a justified need elsewhere to modify the pointed-to records.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2075.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskGetInfo:\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Helper: append a log entry to /tmp/logs/2075.txt capturing key state and control flow */\nstatic void OS_TaskGetInfo_Log(const char *stage,\n                               unsigned long long task_id_val,\n                               const void *token_addr,\n                               const OS_common_record_t *record,\n                               const OS_task_internal_record_t *task,\n                               int32 return_code)\n{\n    FILE *fp = fopen(\"/tmp/logs/2075.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    fprintf(fp, \"[OS_TaskGetInfo] stage=%s\\n\", stage);\n    fprintf(fp, \"  task_id=%llu\\n\", task_id_val);\n    fprintf(fp, \"  local_token_addr=%p\\n\", token_addr);\n    fprintf(fp, \"  return_code=%d\\n\", (int)return_code);\n\n    if (record != NULL)\n    {\n        fprintf(fp, \"  record_ptr=%p\\n\", (const void *)record);\n        fprintf(fp, \"  record->name_entry=%p\\n\", (const void *)record->name_entry);\n        if (record->name_entry != NULL)\n        {\n            /* limit the logged name length to avoid long outputs */\n            char tmpname[128] = {0};\n            (void)strncpy(tmpname, record->name_entry, sizeof(tmpname) - 1);\n            tmpname[sizeof(tmpname) - 1] = '\\0';\n            fprintf(fp, \"  record->name_entry_str=\\\"%s\\\"\\n\", tmpname);\n        }\n        fprintf(fp, \"  record->creator=%llu\\n\", (unsigned long long)record->creator);\n    }\n    else\n    {\n        fprintf(fp, \"  record_ptr=NULL\\n\");\n    }\n\n    if (task != NULL)\n    {\n        fprintf(fp, \"  task_ptr=%p\\n\", (const void *)task);\n        fprintf(fp, \"  task->stack_size=%llu\\n\", (unsigned long long)task->stack_size);\n        fprintf(fp, \"  task->priority=%llu\\n\", (unsigned long long)task->priority);\n    }\n    else\n    {\n        fprintf(fp, \"  task_ptr=NULL\\n\");\n    }\n\n    fprintf(fp, \"---\\n\");\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    /* Log: entry */\n    OS_TaskGetInfo_Log(\"entry\", (unsigned long long)task_id, &token, NULL, NULL, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log: after ObjectIdGetById */\n    OS_TaskGetInfo_Log(\"after_ObjectIdGetById\", (unsigned long long)task_id, &token, NULL, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log: after obtaining record and task pointers */\n        OS_TaskGetInfo_Log(\"got_record_and_task\", (unsigned long long)task_id, &token, record, task, return_code);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        /* Log: before calling platform-specific implementation */\n        OS_TaskGetInfo_Log(\"before_Impl\", (unsigned long long)task_id, &token, record, task, return_code);\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        /* Log: after Impl returned */\n        OS_TaskGetInfo_Log(\"after_Impl\", (unsigned long long)task_id, &token, record, task, return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log: after releasing token */\n        OS_TaskGetInfo_Log(\"after_Release\", (unsigned long long)task_id, &token, record, task, return_code);\n    }\n\n    /* Log: exit */\n    OS_TaskGetInfo_Log(\"exit\", (unsigned long long)task_id, &token, NULL, NULL, return_code);\n\n    return return_code;\n}\n"
}