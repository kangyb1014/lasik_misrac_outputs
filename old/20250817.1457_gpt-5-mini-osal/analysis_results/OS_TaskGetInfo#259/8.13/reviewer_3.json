{
  "user_message": "An agent A claimed that the following OS_TaskGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskGetInfo.\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The variable 'task' is declared as a non-const pointer (OS_task_internal_record_t *task) but is only used for read-only access (task->stack_size, task->priority). The assignment task = OS_OBJECT_TABLE_GET(OS_task_table, token); therefore should use a const-qualified pointer (const OS_task_internal_record_t *task) to satisfy MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_TaskGetInfo_LogProbe(const char *stage, osal_id_t task_id, OS_common_record_t *record, OS_task_internal_record_t *task, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2075.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"Stage: %s\\n\", stage);\n        fprintf(f, \"  task_id: %lu\\n\", (unsigned long)task_id);\n        fprintf(f, \"  return_code (so far): %ld\\n\", (long)return_code);\n        fprintf(f, \"  record ptr: %p\\n\", (void *)record);\n        if (record != NULL)\n        {\n            fprintf(f, \"    name_entry ptr: %p\\n\", (void *)record->name_entry);\n            if (record->name_entry != NULL)\n            {\n                /* print name safely */\n                fprintf(f, \"    name_entry (as string): '%.*s'\\n\", 256, record->name_entry);\n            }\n            fprintf(f, \"    creator: %lu\\n\", (unsigned long)record->creator);\n        }\n        fprintf(f, \"  task ptr: %p\\n\", (void *)task);\n        if (task != NULL)\n        {\n            fprintf(f, \"    stack_size: %lu\\n\", (unsigned long)task->stack_size);\n            fprintf(f, \"    priority: %ld\\n\", (long)task->priority);\n        }\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    /* Log entry */\n    OS_TaskGetInfo_LogProbe(\"enter\", task_id, NULL, NULL, -1);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_TaskGetInfo_LogProbe(\"after ObjectIdGetById\", task_id, NULL, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log pointers and fields obtained from the tables */\n        OS_TaskGetInfo_LogProbe(\"after table lookups\", task_id, record, task, return_code);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        /* Log values copied into task_prop to demonstrate read-only usage of 'task' */\n        OS_TaskGetInfo_LogProbe(\"before Impl call (copied to task_prop)\", task_id, record, task, return_code);\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        /* Log result from implementation call and about to release token */\n        OS_TaskGetInfo_LogProbe(\"after Impl call\", task_id, record, task, return_code);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Log exit */\n    OS_TaskGetInfo_LogProbe(\"exit\", task_id, NULL, NULL, return_code);\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nStage: enter\n  task_id: 3735928559\n  return_code (so far): -1\n  record ptr: (nil)\n  task ptr: (nil)\n\nStage: after ObjectIdGetById\n  task_id: 3735928559\n  return_code (so far): -35\n  record ptr: (nil)\n  task ptr: (nil)\n\nStage: exit\n  task_id: 3735928559\n  return_code (so far): -35\n  record ptr: (nil)\n  task ptr: (nil)\n\nStage: enter\n  task_id: 0\n  return_code (so far): -1\n  record ptr: (nil)\n  task ptr: (nil)\n\nStage: after ObjectIdGetById\n  task_id: 0\n  return_code (so far): -35\n  record ptr: (nil)\n  task ptr: (nil)\n\nStage: exit\n  task_id: 0\n  return_code (so far): -35\n  record ptr: (nil)\n  task ptr: (nil)\n\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the shown OS_TaskGetInfo implementation the local variable 'task' is declared as OS_task_internal_record_t *task but is only ever used for read-only access (task->stack_size and task->priority); the added logging also only reads fields. MISRA C 2023 Rule 8.13 requires that a pointer should point to a const-qualified type whenever possible. Here it is possible to qualify the pointer as const (i.e. const OS_task_internal_record_t *task) because assigning a non-const object pointer to a pointer-to-const is allowed and there are no writes through 'task' in the provided code paths. Therefore the original code violates Rule 8.13 and should be changed to use a const-qualified pointer."
}