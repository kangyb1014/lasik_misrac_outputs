{
  "user_message": "An agent A claimed that the following OS_TaskGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskGetInfo.\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'task' is declared as OS_task_internal_record_t *task but is only used for read access (e.g. task_prop->stack_size = task->stack_size). According to MISRA C 2023 Rule 8.13 this pointer should be declared to point to a const-qualified type (const OS_task_internal_record_t *task). The same applies to 'record' which is only read. Thus the code as written violates Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    FILE *log = fopen(\"/tmp/logs/2075.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_TaskGetInfo: entry\\n\");\n        fprintf(log, \"  task_prop ptr = %p\\n\", (void *)task_prop);\n        fflush(log);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    if (log != NULL)\n    {\n        fprintf(log, \"  After parameter check and memset\\n\");\n        fflush(log);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"  OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n        fflush(log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"  record ptr = %p, task ptr = %p\\n\", (void *)record, (void *)task);\n            fflush(log);\n        }\n\n        if (record->name_entry != NULL)\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"  record->name_entry = '%s'\\n\", record->name_entry);\n                fflush(log);\n            }\n\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n\n            if (log != NULL)\n            {\n                fprintf(log, \"  Copied name to task_prop->name = '%s'\\n\", task_prop->name);\n                fflush(log);\n            }\n        }\n\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"  record->creator = %ld\\n\", (long)record->creator);\n            fprintf(log, \"  task->stack_size = %ld\\n\", (long)task->stack_size);\n            fprintf(log, \"  task->priority = %ld\\n\", (long)task->priority);\n            fflush(log);\n        }\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"  OS_TaskGetInfo_Impl returned %ld\\n\", (long)return_code);\n            fflush(log);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_TaskGetInfo: exit with return_code=%ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_TaskGetInfo: entry\n  task_prop ptr = 0x7ffc30b4e130\n  After parameter check and memset\n  OS_ObjectIdGetById returned -35\nOS_TaskGetInfo: exit with return_code=-35\nOS_TaskGetInfo: entry\n  task_prop ptr = 0x7ffc30b4e130\n  After parameter check and memset\n  OS_ObjectIdGetById returned -35\nOS_TaskGetInfo: exit with return_code=-35\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the function body both 'record' and 'task' are only dereferenced for reading (e.g. record->name_entry, record->creator, task->stack_size, task->priority) and are never used to modify the pointed-to objects. Per MISRA C 2023 Rule 8.13 such pointers should be declared to point to a const-qualified type (const OS_common_record_t *record; const OS_task_internal_record_t *task). The runtime log showing OS_ObjectIdGetById failing does not change the static analysis of the source code: the pointers as declared permit modification even though the function only reads through them, so they violate the intent of Rule 8.13. Assigning the result of OS_OBJECT_TABLE_GET (which likely yields a non-const pointer) to a const-qualified local pointer is allowed and would be the appropriate fix."
}