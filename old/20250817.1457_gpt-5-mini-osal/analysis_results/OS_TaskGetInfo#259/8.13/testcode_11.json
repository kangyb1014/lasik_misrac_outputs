{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'record' is declared as OS_common_record_t *record but is only used for read-only access (checked record->name_entry and read record->creator). Per MISRA C 2023 Rule 8.13 it should be const-qualified (const OS_common_record_t *record). Assigning the non-const result of OS_OBJECT_TABLE_GET to a const-qualified pointer is permitted, so the current non-const declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2075.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskGetInfo:\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Lightweight logging helper used only for probes. Appends to /tmp/logs/2075.txt */\nstatic void OS_TaskGetInfo_Logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2075.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fputc('\\n', f);\n        fclose(f);\n    }\n}\n\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Log entry with provided parameters */\n    OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: entry task_id=%lld task_prop=%p\", (long long)task_id, (void *)task_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: zeroed task_prop at %p\", (void *)task_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: ObjectIdGetById returned %lld\", (long long)return_code);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log pointers and initial state read from records */\n        OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: token=%p record=%p task=%p\", (void *)&token, (void *)record, (void *)task);\n        if (record != NULL)\n        {\n            OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: record->name_entry=%p record->creator=%lld\",\n                                (void *)record->name_entry, (long long)record->creator);\n        }\n        else\n        {\n            OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: record is NULL\");\n        }\n        if (task != NULL)\n        {\n            OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: task->stack_size=%lld task->priority=%lld\",\n                                (long long)task->stack_size, (long long)task->priority);\n        }\n        else\n        {\n            OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: task is NULL\");\n        }\n\n        if (record != NULL && record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n            OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: copied name='%s'\", task_prop->name);\n        }\n        else\n        {\n            OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: name_entry is NULL or record is NULL\");\n        }\n\n        task_prop->creator    = record != NULL ? record->creator : 0;\n        task_prop->stack_size = task != NULL ? task->stack_size : 0;\n        task_prop->priority   = task != NULL ? task->priority : 0;\n\n        OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: populated task_prop->creator=%lld stack_size=%lld priority=%lld\",\n                            (long long)task_prop->creator, (long long)task_prop->stack_size, (long long)task_prop->priority);\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n        OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: OS_TaskGetInfo_Impl returned %lld\", (long long)return_code);\n\n        OS_ObjectIdRelease(&token);\n        OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: released token\");\n    }\n    else\n    {\n        OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: failed to get object id, returning %lld\", (long long)return_code);\n    }\n\n    OS_TaskGetInfo_Logf(\"OS_TaskGetInfo: exit returning %lld\", (long long)return_code);\n\n    return return_code;\n}\n"
}