{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call return_code = OS_TaskGetInfo_Impl(&token, task_prop); invokes OS_TaskGetInfo_Impl which, in the provided project, is defined as a no-op that simply returns OS_SUCCESS (no side-effects). Removing this call would not change program behaviour (aside from possible timing differences), so the operation is dead code. Therefore MISRA C 2023 Rule 2.2 is violated. Note: if OS_TaskGetInfo_Impl is intended to be replaced/overridden externally (e.g. a hook with effects), then this analysis might differ; with the given definition it is dead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2074.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskGetInfo:\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helper: append a formatted log line to /tmp/logs/2074.txt */\nstatic void os_taskgetinfo_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2074.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    /* Log entry and parameter */\n    os_taskgetinfo_probe(\"OS_TaskGetInfo ENTRY: task_id=%llu, task_prop=%p\", (unsigned long long)task_id, (void *)task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log result of object id lookup */\n    os_taskgetinfo_probe(\"OS_ObjectIdGetById returned %ld for task_id=%llu; token=%p\", (long)return_code, (unsigned long long)task_id, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log pointers obtained */\n        os_taskgetinfo_probe(\"record=%p, task=%p\", (void *)record, (void *)task);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n\n            /* Log name copy */\n            os_taskgetinfo_probe(\"name_entry present: '%s' -> task_prop->name='%s'\", record->name_entry, task_prop->name);\n        }\n        else\n        {\n            os_taskgetinfo_probe(\"name_entry is NULL\");\n        }\n\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        /* Log properties before calling Impl */\n        os_taskgetinfo_probe(\"Before Impl: creator=%llu, stack_size=%llu, priority=%llu\", (unsigned long long)task_prop->creator, (unsigned long long)task_prop->stack_size, (unsigned long long)task_prop->priority);\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        /* Log return from Impl and current state of task_prop */\n        os_taskgetinfo_probe(\"OS_TaskGetInfo_Impl returned %ld; task_prop->name='%s', creator=%llu, stack_size=%llu, priority=%llu\",\n                             (long)return_code, task_prop->name, (unsigned long long)task_prop->creator, (unsigned long long)task_prop->stack_size, (unsigned long long)task_prop->priority);\n\n        OS_ObjectIdRelease(&token);\n\n        os_taskgetinfo_probe(\"OS_ObjectIdRelease called for token=%p\", (void *)&token);\n    }\n    else\n    {\n        os_taskgetinfo_probe(\"OS_TaskGetInfo: object lookup failed with code %ld for task_id=%llu\", (long)return_code, (unsigned long long)task_id);\n    }\n\n    os_taskgetinfo_probe(\"OS_TaskGetInfo EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}