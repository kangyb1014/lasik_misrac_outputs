{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_TaskGetInfo_Impl(const OS_object_token_t *token, OS_task_prop_t *task_prop) only contains \"return OS_SUCCESS;\" and is called from OS_TaskGetInfo. The call is executed but the function performs no operations (no side effects, does not modify task_prop) and always returns a constant success value. Removing the call and the function would not change program behaviour (the surrounding code already had return_code == OS_SUCCESS), so the executed operation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2074.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskGetInfo:\n```c\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logging helper - writes control flow and state to /tmp/logs/2074.txt */\nstatic void OS_TaskGetInfo_Probe(const char *stage, const void *token_ptr, const void *task_prop_ptr, int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2074.txt\", \"a\");\n    if (!f) return;\n\n    fprintf(f, \"[OS_TaskGetInfo] stage=%s, return_code=%d, token_ptr=%p, task_prop_ptr=%p\\n\",\n            stage, (int)return_code, token_ptr, task_prop_ptr);\n\n    if (task_prop_ptr != NULL)\n    {\n        /* Print common fields we expect exist on OS_task_prop_t. If fields differ in type, cast to long long for safety. */\n        const char *name_ptr = ((const void *)((const char *)task_prop_ptr)) ? ((const char *)task_prop_ptr) : \"\"; /* placeholder, replaced below */\n        /* Attempt to print fields by casting to known layout; this is best-effort for debugging logs. */\n        /* We access members by assuming typical names used in the surrounding code. */\n        /* To avoid compiler errors if types are unknown here, use casts through char* and offset prints would be unsafe; instead try to print via known member names directly. */\n    }\n\n    fclose(f);\n}\n\n/* Forward declarations of external types to allow this file to compile in its original context. */\n/* The real project will already define these types; here we only reference members used in logging elsewhere in the original code. */\n\n/* Keep the original function signature. */\nint32 OS_TaskGetInfo(osal_id_t task_id, OS_task_prop_t *task_prop)\n{\n    OS_common_record_t *       record;\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(task_prop);\n\n    /* Log entry and initial pointer state */\n    OS_TaskGetInfo_Probe(\"entry_before_memset\", NULL, task_prop, 0);\n\n    memset(task_prop, 0, sizeof(OS_task_prop_t));\n\n    /* Log after clearing task_prop */\n    OS_TaskGetInfo_Probe(\"after_memset\", NULL, task_prop, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log result of ObjectIdGetById and token pointer (address) */\n    OS_TaskGetInfo_Probe(\"after_ObjectIdGetById\", (return_code == OS_SUCCESS) ? (void *)&token : NULL, task_prop, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_task_table, token);\n        task   = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        if (record->name_entry != NULL)\n        {\n            strncpy(task_prop->name, record->name_entry, sizeof(task_prop->name) - 1);\n            task_prop->name[sizeof(task_prop->name) - 1] = 0;\n        }\n        task_prop->creator    = record->creator;\n        task_prop->stack_size = task->stack_size;\n        task_prop->priority   = task->priority;\n\n        /* Log state just before calling the Impl function */\n        OS_TaskGetInfo_Probe(\"before_Impl_call\", (void *)&token, task_prop, return_code);\n\n        return_code = OS_TaskGetInfo_Impl(&token, task_prop);\n\n        /* Log result of Impl call and state afterwards */\n        OS_TaskGetInfo_Probe(\"after_Impl_call\", (void *)&token, task_prop, return_code);\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        /* Log early-exit path when ObjectIdGetById failed */\n        OS_TaskGetInfo_Probe(\"exit_objectid_failed\", NULL, task_prop, return_code);\n    }\n\n    /* Final exit log */\n    OS_TaskGetInfo_Probe(\"exit\", (return_code == OS_SUCCESS) ? (void *)&token : NULL, task_prop, return_code);\n\n    return return_code;\n}\n"
}