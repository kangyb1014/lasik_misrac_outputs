{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe union member is declared as a plain void * (void * Ptr). In UT_StoreRetval the function parameter ValuePtr is const void * and the pointer value for the POINTER genre is read from a const source and stored into Buf->Ptr. If the pointed-to object is not intended to be modified through this stored pointer (which the const on ValuePtr suggests), then declaring Ptr as void * removes the const qualification and thus violates MISRA C 2023 Rule 8.13. The correct approach is to use const void * Ptr unless there is a specific need to allow modification through the stored pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_StoreRetval code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2515.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_StoreRetval as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_StoreRetval:\n```c\nbool UT_StoreRetval(UT_RetvalBuf_t *Buf, const void *ValuePtr, size_t ValueSize, UT_ValueGenre_t ValueGenre)\n{\n    /* Copy the value based on width, so it will be properly extended, if applicable:\n     * - all numeric values need to be aligned per endianness of the host\n     * - signed ints must be sign-extended,\n     * - single-precision floating points will be extended to double-precision\n     *\n     * Pointers must all be the expected size, however.\n     */\n    switch (UT_GENRE_SIZE(ValueGenre, ValueSize))\n    {\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int8)):\n            Buf->Integer = *((int8 const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int16)):\n            Buf->Integer = *((int16 const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int32)):\n            Buf->Integer = *((int32 const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int64)):\n            Buf->Integer = *((int64 const *)ValuePtr);\n            break;\n\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(float)):\n            Buf->FloatingPt = *((float const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(double)):\n            Buf->FloatingPt = *((double const *)ValuePtr);\n            break;\n\n        case UT_GENRE_SIZE(UT_ValueGenre_POINTER, sizeof(void *)):\n            Buf->Ptr = *((void *const *)ValuePtr);\n            break;\n\n        default:\n            return UtAssert_Failed(\"Cannot store return value - ValueSize not valid\");\n    }\n\n    return true;\n}\n```\n</target_code>\nPlease provide the modified UT_StoreRetval code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helper: append logs about the operation to /tmp/logs/2515.txt */\nstatic void UT_Probe_Log(const char *case_desc, const void *ValuePtr, size_t ValueSize, int ValueGenre, const void *StoredPtr)\n{\n    FILE *f = fopen(\"/tmp/logs/2515.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"--- UT_StoreRetval probe ---\\n\");\n    fprintf(f, \"Case: %s\\n\", case_desc ? case_desc : \"<unknown>\");\n    fprintf(f, \"ValuePtr: %p\\n\", ValuePtr);\n    fprintf(f, \"ValueSize: %zu\\n\", ValueSize);\n    fprintf(f, \"ValueGenre (numeric): %d\\n\", ValueGenre);\n\n    /* Dump up to first 64 bytes at ValuePtr to help reproduce endianness/sign extension/etc. */\n    fprintf(f, \"Value bytes (hex, up to 64):\");\n    if (ValuePtr != NULL && ValueSize > 0)\n    {\n        const unsigned char *p = (const unsigned char *)ValuePtr;\n        size_t i, lim = (ValueSize > 64u) ? 64u : ValueSize;\n        for (i = 0; i < lim; ++i)\n        {\n            fprintf(f, \" %02X\", (unsigned)p[i]);\n        }\n        if (ValueSize > lim)\n        {\n            fprintf(f, \" ... (total %zu bytes)\", ValueSize);\n        }\n    }\n    fprintf(f, \"\\n\");\n\n    if (StoredPtr != NULL)\n    {\n        fprintf(f, \"Stored pointer value: %p\\n\", StoredPtr);\n    }\n\n    fprintf(f, \"----------------------------\\n\");\n    fclose(f);\n}\n\nbool UT_StoreRetval(UT_RetvalBuf_t *Buf, const void *ValuePtr, size_t ValueSize, UT_ValueGenre_t ValueGenre)\n{\n    /* Copy the value based on width, so it will be properly extended, if applicable:\n     * - all numeric values need to be aligned per endianness of the host\n     * - signed ints must be sign-extended,\n     * - single-precision floating points will be extended to double-precision\n     *\n     * Pointers must all be the expected size, however.\n     */\n    switch (UT_GENRE_SIZE(ValueGenre, ValueSize))\n    {\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int8)):\n            Buf->Integer = *((int8 const *)ValuePtr);\n            UT_Probe_Log(\"INTEGER: int8\", ValuePtr, ValueSize, (int)ValueGenre, NULL);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int16)):\n            Buf->Integer = *((int16 const *)ValuePtr);\n            UT_Probe_Log(\"INTEGER: int16\", ValuePtr, ValueSize, (int)ValueGenre, NULL);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int32)):\n            Buf->Integer = *((int32 const *)ValuePtr);\n            UT_Probe_Log(\"INTEGER: int32\", ValuePtr, ValueSize, (int)ValueGenre, NULL);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int64)):\n            Buf->Integer = *((int64 const *)ValuePtr);\n            UT_Probe_Log(\"INTEGER: int64\", ValuePtr, ValueSize, (int)ValueGenre, NULL);\n            break;\n\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(float)):\n            Buf->FloatingPt = *((float const *)ValuePtr);\n            UT_Probe_Log(\"FLOAT: float\", ValuePtr, ValueSize, (int)ValueGenre, NULL);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(double)):\n            Buf->FloatingPt = *((double const *)ValuePtr);\n            UT_Probe_Log(\"FLOAT: double\", ValuePtr, ValueSize, (int)ValueGenre, NULL);\n            break;\n\n        case UT_GENRE_SIZE(UT_ValueGenre_POINTER, sizeof(void *)):\n        {\n            /* Read pointer from the const source and store it into Buf->Ptr as original logic */\n            void *stored = *((void *const *)ValuePtr);\n            Buf->Ptr = stored;\n            /* Log the pointer value and the raw bytes that produced it to help reproduce const-qualification issues */\n            UT_Probe_Log(\"POINTER\", ValuePtr, ValueSize, (int)ValueGenre, stored);\n            break;\n        }\n\n        default:\n            return UtAssert_Failed(\"Cannot store return value - ValueSize not valid\");\n    }\n\n    return true;\n}\n"
}