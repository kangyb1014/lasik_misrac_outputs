{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts the const void * ValuePtr to (void *const *) and then dereferences to store into Buf->Ptr (type void *). This can discard a const qualification on the pointed-to data. For example, if the caller passes a pointer-to-const (const char *p; UT_StoreRetval(&buf, &p, sizeof(p), UT_ValueGenre_POINTER);) the function will store a non-const void * into Buf->Ptr, losing the const qualification. The safe approach would be to preserve the const (e.g. use const void * in the buffer or cast to (const void * const *) before dereference).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_StoreRetval code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2515.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_StoreRetval as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_StoreRetval:\n```c\nbool UT_StoreRetval(UT_RetvalBuf_t *Buf, const void *ValuePtr, size_t ValueSize, UT_ValueGenre_t ValueGenre)\n{\n    /* Copy the value based on width, so it will be properly extended, if applicable:\n     * - all numeric values need to be aligned per endianness of the host\n     * - signed ints must be sign-extended,\n     * - single-precision floating points will be extended to double-precision\n     *\n     * Pointers must all be the expected size, however.\n     */\n    switch (UT_GENRE_SIZE(ValueGenre, ValueSize))\n    {\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int8)):\n            Buf->Integer = *((int8 const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int16)):\n            Buf->Integer = *((int16 const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int32)):\n            Buf->Integer = *((int32 const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int64)):\n            Buf->Integer = *((int64 const *)ValuePtr);\n            break;\n\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(float)):\n            Buf->FloatingPt = *((float const *)ValuePtr);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(double)):\n            Buf->FloatingPt = *((double const *)ValuePtr);\n            break;\n\n        case UT_GENRE_SIZE(UT_ValueGenre_POINTER, sizeof(void *)):\n            Buf->Ptr = *((void *const *)ValuePtr);\n            break;\n\n        default:\n            return UtAssert_Failed(\"Cannot store return value - ValueSize not valid\");\n    }\n\n    return true;\n}\n```\n</target_code>\nPlease provide the modified UT_StoreRetval code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/2515.txt */\nstatic void UT_AppendLog(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    /* Try to create directory (ignore errors if it already exists) */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/2515.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Helper to dump a sequence of bytes in hex */\nstatic void UT_DumpHex(const void *ptr, size_t len)\n{\n    const unsigned char *p = (const unsigned char *)ptr;\n    size_t i;\n    char buf[64];\n    size_t off = 0;\n\n    for (i = 0; i < len && off + 3 < sizeof(buf); ++i)\n    {\n        off += snprintf(buf + off, sizeof(buf) - off, \"%02X\", p[i]);\n        if (i + 1 < len && off + 1 < sizeof(buf))\n        {\n            buf[off++] = ' ';\n            buf[off] = '\\0';\n        }\n    }\n    UT_AppendLog(\"hex[%zu]: %s\", len, buf);\n}\n\n/* Original function with inserted probes. */\nbool UT_StoreRetval(UT_RetvalBuf_t *Buf, const void *ValuePtr, size_t ValueSize, UT_ValueGenre_t ValueGenre)\n{\n    /* Log entry and basic parameters */\n    UT_AppendLog(\"UT_StoreRetval ENTER: Buf=%p, ValuePtr=%p, ValueSize=%zu, ValueGenre=%d\", (void *)Buf, ValuePtr, ValueSize, (int)ValueGenre);\n\n    /* If ValuePtr is not NULL, dump the raw bytes that will be interpreted */\n    if (ValuePtr != NULL && ValueSize > 0)\n    {\n        /* Cap the dump to pointer size to avoid overly long logs */\n        size_t dump_len = ValueSize;\n        if (dump_len > sizeof(void *))\n        {\n            dump_len = sizeof(void *);\n        }\n        UT_DumpHex(ValuePtr, dump_len);\n    }\n\n    /* Copy the value based on width, so it will be properly extended, if applicable:\n     * - all numeric values need to be aligned per endianness of the host\n     * - signed ints must be sign-extended,\n     * - single-precision floating points will be extended to double-precision\n     *\n     * Pointers must all be the expected size, however.\n     */\n    switch (UT_GENRE_SIZE(ValueGenre, ValueSize))\n    {\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int8)):\n            Buf->Integer = *((int8 const *)ValuePtr);\n            UT_AppendLog(\"case INTEGER/8: Buf->Integer=%lld\", (long long)Buf->Integer);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int16)):\n            Buf->Integer = *((int16 const *)ValuePtr);\n            UT_AppendLog(\"case INTEGER/16: Buf->Integer=%lld\", (long long)Buf->Integer);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int32)):\n            Buf->Integer = *((int32 const *)ValuePtr);\n            UT_AppendLog(\"case INTEGER/32: Buf->Integer=%lld\", (long long)Buf->Integer);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_INTEGER, sizeof(int64)):\n            Buf->Integer = *((int64 const *)ValuePtr);\n            UT_AppendLog(\"case INTEGER/64: Buf->Integer=%lld\", (long long)Buf->Integer);\n            break;\n\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(float)):\n            Buf->FloatingPt = *((float const *)ValuePtr);\n            UT_AppendLog(\"case FLOAT/float: Buf->FloatingPt=%f\", (double)Buf->FloatingPt);\n            break;\n        case UT_GENRE_SIZE(UT_ValueGenre_FLOAT, sizeof(double)):\n            Buf->FloatingPt = *((double const *)ValuePtr);\n            UT_AppendLog(\"case FLOAT/double: Buf->FloatingPt=%f\", Buf->FloatingPt);\n            break;\n\n        case UT_GENRE_SIZE(UT_ValueGenre_POINTER, sizeof(void *)):\n        {\n            /* Before performing the original assignment (which casts away const),\n             * capture the pointer value from the raw bytes in ValuePtr for logging.\n             * Use memcpy from the const source to avoid casting away const for the probe.\n             */\n            void *tmpPtr = NULL;\n            if (ValuePtr != NULL)\n            {\n                memcpy(&tmpPtr, ValuePtr, sizeof(tmpPtr));\n                UT_AppendLog(\"pointer raw value read (via memcpy) => %p\", tmpPtr);\n            }\n\n            /* Original behavior kept to preserve logic (note: this is the line\n             * identified in the violation scenario; it may discard const).\n             */\n            Buf->Ptr = *((void *const *)ValuePtr);\n\n            UT_AppendLog(\"after assignment: Buf->Ptr=%p\", Buf->Ptr);\n            break;\n        }\n\n        default:\n            UT_AppendLog(\"UT_StoreRetval ERROR: Cannot store return value - ValueSize not valid (ValueSize=%zu)\", ValueSize);\n            return UtAssert_Failed(\"Cannot store return value - ValueSize not valid\");\n    }\n\n    UT_AppendLog(\"UT_StoreRetval EXIT: success\");\n    return true;\n}\n"
}