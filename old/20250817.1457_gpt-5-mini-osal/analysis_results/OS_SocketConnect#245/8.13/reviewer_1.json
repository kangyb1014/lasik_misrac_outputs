{
  "user_message": "An agent A claimed that the following OS_SocketConnect code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketConnect.\n```c\nint32 OS_SocketConnect(osal_id_t sock_id, const OS_SockAddr_t *Addr, int32 Timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) != 0)\n        {\n            /* Stream socket must not be connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketConnect_Impl(&token, Addr, Timeout);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_CONNECTED | OS_STREAM_STATE_READABLE | OS_STREAM_STATE_WRITABLE;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In OS_SocketConnect_Impl the local variable is declared as a mutable pointer: \"OS_impl_file_internal_record_t *impl;\" and then assigned from the global table via \"impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\". The function only reads members (fd, selectable, etc.) and does not modify the record, so the pointer could/should be const-qualified (const OS_impl_file_internal_record_t *impl). Leaving it non-const violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_SocketConnect_Log(const char *stage,\n                                 osal_id_t sock_id,\n                                 const OS_object_token_t *token_ptr,\n                                 const OS_stream_internal_record_t *stream,\n                                 const OS_SockAddr_t *Addr,\n                                 int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1963.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Basic invocation info */\n    fprintf(f, \"Stage=%s, sock_id=%lu, return_code=%ld, Addr=%p\\n\",\n            (stage != NULL) ? stage : \"(null)\",\n            (unsigned long)sock_id,\n            (long)return_code,\n            (const void *)Addr);\n\n    /* Token info (if available) */\n    if (token_ptr != NULL)\n    {\n        /* Print the token pointer address rather than dereferencing an opaque/aggregate token\n           which may not be a scalar type in some builds. */\n        fprintf(f, \" token_ptr=%p\\n\", (const void *)token_ptr);\n    }\n\n    /* Stream internals (if available) */\n    if (stream != NULL)\n    {\n        /* Print likely integer members; pointer to stream shown too */\n        fprintf(f, \" stream_ptr=%p, socket_domain=%d, socket_type=%d, stream_state=0x%08lx\\n\",\n                (const void *)stream,\n                (int)stream->socket_domain,\n                (int)stream->socket_type,\n                (unsigned long)stream->stream_state);\n\n        /* Note: Do not attempt to access optional members (e.g. fd, selectable) that may not\n           exist in all implementations of OS_stream_internal_record_t. Accessing them would\n           cause compile errors on some platforms. */\n    }\n    else\n    {\n        fprintf(f, \" stream_ptr=(null)\\n\");\n    }\n\n    fclose(f);\n}\n\nint32 OS_SocketConnect(osal_id_t sock_id, const OS_SockAddr_t *Addr, int32 Timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    /* Log entry */\n    OS_SocketConnect_Log(\"entry\", sock_id, NULL, NULL, Addr, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log result of object lookup */\n    OS_SocketConnect_Log(\"after_ObjectIdGetById\", sock_id, &token, NULL, Addr, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log after obtaining stream pointer and its state */\n        OS_SocketConnect_Log(\"got_stream\", sock_id, &token, stream, Addr, return_code);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Log invalid domain */\n            OS_SocketConnect_Log(\"invalid_domain\", sock_id, &token, stream, Addr, OS_ERR_INCORRECT_OBJ_TYPE);\n\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) != 0)\n        {\n            /* Stream socket must not be connected */\n            /* Log already connected */\n            OS_SocketConnect_Log(\"already_connected\", sock_id, &token, stream, Addr, OS_ERR_INCORRECT_OBJ_STATE);\n\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Log about to call implementation */\n            OS_SocketConnect_Log(\"calling_impl\", sock_id, &token, stream, Addr, 0);\n\n            return_code = OS_SocketConnect_Impl(&token, Addr, Timeout);\n\n            /* Log result of implementation */\n            OS_SocketConnect_Log(\"after_impl\", sock_id, &token, stream, Addr, return_code);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_CONNECTED | OS_STREAM_STATE_READABLE | OS_STREAM_STATE_WRITABLE;\n\n                /* Log state change */\n                OS_SocketConnect_Log(\"connected_set_flags\", sock_id, &token, stream, Addr, return_code);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log release */\n        OS_SocketConnect_Log(\"released_token\", sock_id, &token, stream, Addr, return_code);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_SocketConnect. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The supplied OS_SocketConnect implementation itself uses a non-const pointer (stream) and later modifies the pointed object (stream->stream_state |= ...), so that pointer must be mutable and does not violate MISRA\u2011C 2023 Rule 8.13. The scenario the agent A describes refers to a different function (OS_SocketConnect_Impl) and to a local variable (impl) that was not shown. Without the actual OS_SocketConnect_Impl source (and the definition/contract of OS_OBJECT_TABLE_GET and the table element type) you cannot determine whether that pointer could validly be const-qualified. Additionally, the table-access macro/type may force a non-const result (or the object may be legitimately modifiable elsewhere), so changing the local pointer to const may be impossible or incorrect. In summary: (1) the provided OS_SocketConnect code does not violate Rule 8.13 because it modifies the pointed-to object; (2) the agent\u2019s claim about OS_SocketConnect_Impl cannot be confirmed from the evidence shown. To validate that separate claim you must inspect the OS_SocketConnect_Impl source and the table/macro/type definitions to see whether the pointed object is indeed only read and can be declared as a pointer-to-const."
}