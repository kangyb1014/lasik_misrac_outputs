{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_SocketConnect_Log(const char *stage,\n                                 osal_id_t sock_id,\n                                 const OS_object_token_t *token_ptr,\n                                 const OS_stream_internal_record_t *stream,\n                                 const OS_SockAddr_t *Addr,\n                                 int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1963.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Basic invocation info */\n    fprintf(f, \"Stage=%s, sock_id=%lu, return_code=%ld, Addr=%p\\n\",\n            (stage != NULL) ? stage : \"(null)\",\n            (unsigned long)sock_id,\n            (long)return_code,\n            (const void *)Addr);\n\n    /* Token info (if available) */\n    if (token_ptr != NULL)\n    {\n        fprintf(f, \" token=%lu\\n\", (unsigned long)(*token_ptr));\n    }\n\n    /* Stream internals (if available) */\n    if (stream != NULL)\n    {\n        /* Print likely integer members; pointer to stream shown too */\n        fprintf(f, \" stream_ptr=%p, socket_domain=%d, socket_type=%d, stream_state=0x%08lx\",\n                (const void *)stream,\n                (int)stream->socket_domain,\n                (int)stream->socket_type,\n                (unsigned long)stream->stream_state);\n\n        /* If common members exist, log them too (guarded casts to int for safety) */\n        /* Many implementations have fd and selectable fields; print if present by name. */\n        /* Use try to print - if these fields don't exist in the struct for the build, compile will fail\n           and should be adjusted in the real project environment. */\n#ifdef __GNUC__\n        /* Suppress unused-but-set warnings in some builds */\n        (void)0;\n#endif\n\n        /* Attempt additional common members - wrap in do/while to keep single statement style */\n        {\n            /* Use a defensive print; if members are present they will be printed. */\n            /* Casts to (int) to keep deterministic format */\n            /* Note: If these members do not exist in the target build, remove these lines. */\n            fprintf(f, \", fd=%d, selectable=%d\\n\",\n                    (int)stream->fd,\n                    (int)stream->selectable);\n        }\n    }\n    else\n    {\n        fprintf(f, \" stream_ptr=(null)\\n\");\n    }\n\n    fclose(f);\n}\n\nint32 OS_SocketConnect(osal_id_t sock_id, const OS_SockAddr_t *Addr, int32 Timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    /* Log entry */\n    OS_SocketConnect_Log(\"entry\", sock_id, NULL, NULL, Addr, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log result of object lookup */\n    OS_SocketConnect_Log(\"after_ObjectIdGetById\", sock_id, &token, NULL, Addr, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log after obtaining stream pointer and its state */\n        OS_SocketConnect_Log(\"got_stream\", sock_id, &token, stream, Addr, return_code);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Log invalid domain */\n            OS_SocketConnect_Log(\"invalid_domain\", sock_id, &token, stream, Addr, OS_ERR_INCORRECT_OBJ_TYPE);\n\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) != 0)\n        {\n            /* Stream socket must not be connected */\n            /* Log already connected */\n            OS_SocketConnect_Log(\"already_connected\", sock_id, &token, stream, Addr, OS_ERR_INCORRECT_OBJ_STATE);\n\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Log about to call implementation */\n            OS_SocketConnect_Log(\"calling_impl\", sock_id, &token, stream, Addr, 0);\n\n            return_code = OS_SocketConnect_Impl(&token, Addr, Timeout);\n\n            /* Log result of implementation */\n            OS_SocketConnect_Log(\"after_impl\", sock_id, &token, stream, Addr, return_code);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_CONNECTED | OS_STREAM_STATE_READABLE | OS_STREAM_STATE_WRITABLE;\n\n                /* Log state change */\n                OS_SocketConnect_Log(\"connected_set_flags\", sock_id, &token, stream, Addr, return_code);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log release */\n        OS_SocketConnect_Log(\"released_token\", sock_id, &token, stream, Addr, return_code);\n    }\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpgr9k_hd5/src/src/os/shared/src/osapi-sockets.c: In function 'OS_SocketConnect_Log':\n/tmp/tmpgr9k_hd5/src/src/os/shared/src/osapi-sockets.c:401:9: error: aggregate value used where an integer was expected\n  401 |         fprintf(f, \" token=%lu\\n\", (unsigned long)(*token_ptr));\n      |         ^~~~~~~\n/tmp/tmpgr9k_hd5/src/src/os/shared/src/osapi-sockets.c:429:32: error: 'OS_stream_internal_record_t' has no member named 'fd'\n  429 |                     (int)stream->fd,\n      |                                ^~\n/tmp/tmpgr9k_hd5/src/src/os/shared/src/osapi-sockets.c:430:32: error: 'OS_stream_internal_record_t' has no member named 'selectable'\n  430 |                     (int)stream->selectable);\n      |                                ^~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:328: CMakeFiles/osal.dir/src/os/shared/src/osapi-sockets.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SocketConnect as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static void OS_SocketConnect_Log(const char *stage,\n                                 osal_id_t sock_id,\n                                 const OS_object_token_t *token_ptr,\n                                 const OS_stream_internal_record_t *stream,\n                                 const OS_SockAddr_t *Addr,\n                                 int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1963.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Basic invocation info */\n    fprintf(f, \"Stage=%s, sock_id=%lu, return_code=%ld, Addr=%p\\n\",\n            (stage != NULL) ? stage : \"(null)\",\n            (unsigned long)sock_id,\n            (long)return_code,\n            (const void *)Addr);\n\n    /* Token info (if available) */\n    if (token_ptr != NULL)\n    {\n        /* Print the token pointer address rather than dereferencing an opaque/aggregate token\n           which may not be a scalar type in some builds. */\n        fprintf(f, \" token_ptr=%p\\n\", (const void *)token_ptr);\n    }\n\n    /* Stream internals (if available) */\n    if (stream != NULL)\n    {\n        /* Print likely integer members; pointer to stream shown too */\n        fprintf(f, \" stream_ptr=%p, socket_domain=%d, socket_type=%d, stream_state=0x%08lx\\n\",\n                (const void *)stream,\n                (int)stream->socket_domain,\n                (int)stream->socket_type,\n                (unsigned long)stream->stream_state);\n\n        /* Note: Do not attempt to access optional members (e.g. fd, selectable) that may not\n           exist in all implementations of OS_stream_internal_record_t. Accessing them would\n           cause compile errors on some platforms. */\n    }\n    else\n    {\n        fprintf(f, \" stream_ptr=(null)\\n\");\n    }\n\n    fclose(f);\n}\n\nint32 OS_SocketConnect(osal_id_t sock_id, const OS_SockAddr_t *Addr, int32 Timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    /* Log entry */\n    OS_SocketConnect_Log(\"entry\", sock_id, NULL, NULL, Addr, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log result of object lookup */\n    OS_SocketConnect_Log(\"after_ObjectIdGetById\", sock_id, &token, NULL, Addr, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log after obtaining stream pointer and its state */\n        OS_SocketConnect_Log(\"got_stream\", sock_id, &token, stream, Addr, return_code);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Log invalid domain */\n            OS_SocketConnect_Log(\"invalid_domain\", sock_id, &token, stream, Addr, OS_ERR_INCORRECT_OBJ_TYPE);\n\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) != 0)\n        {\n            /* Stream socket must not be connected */\n            /* Log already connected */\n            OS_SocketConnect_Log(\"already_connected\", sock_id, &token, stream, Addr, OS_ERR_INCORRECT_OBJ_STATE);\n\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Log about to call implementation */\n            OS_SocketConnect_Log(\"calling_impl\", sock_id, &token, stream, Addr, 0);\n\n            return_code = OS_SocketConnect_Impl(&token, Addr, Timeout);\n\n            /* Log result of implementation */\n            OS_SocketConnect_Log(\"after_impl\", sock_id, &token, stream, Addr, return_code);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_CONNECTED | OS_STREAM_STATE_READABLE | OS_STREAM_STATE_WRITABLE;\n\n                /* Log state change */\n                OS_SocketConnect_Log(\"connected_set_flags\", sock_id, &token, stream, Addr, return_code);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log release */\n        OS_SocketConnect_Log(\"released_token\", sock_id, &token, stream, Addr, return_code);\n    }\n\n    return return_code;\n}\n",
  "explanation": "Two changes to eliminate compile errors while preserving logic:\n\n1) Token printing: The original code attempted to dereference token_ptr and cast it to unsigned long, which failed when OS_object_token_t is an aggregate. I changed the log to print the token pointer address (token_ptr) with %p instead of dereferencing. This avoids assuming internal representation of the token.\n\n2) Removed accesses to non-existent members fd and selectable on OS_stream_internal_record_t. The original code attempted to print stream->fd and stream->selectable which are not present in some builds. I consolidated the stream log into a single fprintf (which now includes a terminating newline) and added a comment explaining why optional members are not accessed. This preserves the original logging intent without referencing fields that may not exist."
}