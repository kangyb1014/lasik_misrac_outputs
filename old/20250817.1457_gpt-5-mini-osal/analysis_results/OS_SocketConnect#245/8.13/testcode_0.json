{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_SocketConnect_Impl the local variable is declared as 'OS_impl_file_internal_record_t *impl;' but the code only reads members (impl->fd, impl->selectable) and never modifies the pointed-to object. According to MISRA C 2023 Rule 8.13 this pointer should be declared to point to a const-qualified type (e.g. 'const OS_impl_file_internal_record_t *impl;').\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketConnect code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1963.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketConnect as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketConnect:\n```c\nint32 OS_SocketConnect(osal_id_t sock_id, const OS_SockAddr_t *Addr, int32 Timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) != 0)\n        {\n            /* Stream socket must not be connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            return_code = OS_SocketConnect_Impl(&token, Addr, Timeout);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_CONNECTED | OS_STREAM_STATE_READABLE | OS_STREAM_STATE_WRITABLE;\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketConnect code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n/* Probe logging helper\n * Writes control-flow and state information to /tmp/logs/1963.txt\n * This helper is intentionally non-intrusive and does not change program logic.\n */\nstatic void OS_SocketConnect_log(const char *stage,\n                                 unsigned long sock_id_repr,\n                                 const void *addr_ptr,\n                                 long timeout_repr,\n                                 const void *token_ptr,\n                                 const void *stream_ptr,\n                                 int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1963.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_SocketConnect] stage=%s sock_id=0x%lx Addr=%p Timeout=%ld token=%p stream=%p return=%d\\n\",\n            stage,\n            sock_id_repr,\n            addr_ptr,\n            timeout_repr,\n            token_ptr,\n            stream_ptr,\n            return_code);\n\n    fflush(f);\n    fclose(f);\n}\n\n/* Original function with logging probes inserted. Logic preserved. */\nint32 OS_SocketConnect(osal_id_t sock_id, const OS_SockAddr_t *Addr, int32 Timeout)\n{\n    OS_stream_internal_record_t *stream;\n    OS_object_token_t            token;\n    int32                        return_code;\n    bool                         token_valid = false;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n\n    /* Log initial state after parameter check */\n    OS_SocketConnect_log(\"entry_after_param_check\",\n                         (unsigned long)sock_id,\n                         (const void *)Addr,\n                         (long)Timeout,\n                         NULL,\n                         NULL,\n                         0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, sock_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_SocketConnect_log(\"after_ObjectIdGetById\",\n                         (unsigned long)sock_id,\n                         (const void *)Addr,\n                         (long)Timeout,\n                         (return_code == OS_SUCCESS) ? (const void *)&token : NULL,\n                         NULL,\n                         return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        token_valid = true;\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n        /* Log stream pointer and key fields that are only read (evidence of read-only access) */\n        OS_SocketConnect_log(\"after_table_get\",\n                             (unsigned long)sock_id,\n                             (const void *)Addr,\n                             (long)Timeout,\n                             (const void *)&token,\n                             (const void *)stream,\n                             return_code);\n\n        /* Additional detailed logging of the fields accessed (read-only) */\n        {\n            FILE *f = fopen(\"/tmp/logs/1963.txt\", \"a\");\n            if (f != NULL)\n            {\n                /* Print the specific fields used in the decision logic. Do not modify them. */\n                fprintf(f, \"[OS_SocketConnect] stream->socket_domain=%ld socket_type=%ld stream_state=0x%lx\\n\",\n                        (long)stream->socket_domain,\n                        (long)stream->socket_type,\n                        (unsigned long)stream->stream_state);\n                fflush(f);\n                fclose(f);\n            }\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Log branch taken */\n            OS_SocketConnect_log(\"branch_invalid_domain\",\n                                 (unsigned long)sock_id,\n                                 (const void *)Addr,\n                                 (long)Timeout,\n                                 (const void *)&token,\n                                 (const void *)stream,\n                                 OS_ERR_INCORRECT_OBJ_TYPE);\n\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if (stream->socket_type == OS_SocketType_STREAM && (stream->stream_state & OS_STREAM_STATE_CONNECTED) != 0)\n        {\n            /* Stream socket must not be connected */\n            OS_SocketConnect_log(\"branch_already_connected\",\n                                 (unsigned long)sock_id,\n                                 (const void *)Addr,\n                                 (long)Timeout,\n                                 (const void *)&token,\n                                 (const void *)stream,\n                                 OS_ERR_INCORRECT_OBJ_STATE);\n\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            OS_SocketConnect_log(\"before_Impl_call\",\n                                 (unsigned long)sock_id,\n                                 (const void *)Addr,\n                                 (long)Timeout,\n                                 (const void *)&token,\n                                 (const void *)stream,\n                                 0);\n\n            return_code = OS_SocketConnect_Impl(&token, Addr, Timeout);\n\n            OS_SocketConnect_log(\"after_Impl_call\",\n                                 (unsigned long)sock_id,\n                                 (const void *)Addr,\n                                 (long)Timeout,\n                                 (const void *)&token,\n                                 (const void *)stream,\n                                 return_code);\n\n            if (return_code == OS_SUCCESS)\n            {\n                stream->stream_state |= OS_STREAM_STATE_CONNECTED | OS_STREAM_STATE_READABLE | OS_STREAM_STATE_WRITABLE;\n\n                OS_SocketConnect_log(\"connected_and_state_set\",\n                                     (unsigned long)sock_id,\n                                     (const void *)Addr,\n                                     (long)Timeout,\n                                     (const void *)&token,\n                                     (const void *)stream,\n                                     return_code);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        OS_SocketConnect_log(\"after_release\",\n                             (unsigned long)sock_id,\n                             (const void *)Addr,\n                             (long)Timeout,\n                             (const void *)&token,\n                             (const void *)stream,\n                             return_code);\n    }\n\n    /* Final return logging */\n    OS_SocketConnect_log(\"function_exit\",\n                         (unsigned long)sock_id,\n                         (const void *)Addr,\n                         (long)Timeout,\n                         token_valid ? (const void *)&token : NULL,\n                         NULL,\n                         return_code);\n\n    return return_code;\n}\n"
}