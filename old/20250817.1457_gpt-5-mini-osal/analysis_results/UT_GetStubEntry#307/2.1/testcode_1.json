{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nWith UT_MAX_FUNC_STUBS defined as 200, the expression uses (UT_MAX_FUNC_STUBS - 1) = 199 as the divisor, so Idx = FuncKey % 199 yields values in the range 0..198. Later in the function there is a test if (Idx >= UT_MAX_FUNC_STUBS) (i.e. >= 200) whose body can never be executed. That makes that branch unreachable, which violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_GetStubEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2457.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_GetStubEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_GetStubEntry:\n```c\nstatic UT_StubTableEntry_t *UT_GetStubEntry(UT_EntryKey_t FuncKey, UT_EntryType_t TestMode)\n{\n    UT_StubTableEntry_t *StubPtr   = NULL;\n    uint32               Idx       = FuncKey % (UT_MAX_FUNC_STUBS - 1); /* hash the key to determine the start point */\n    uint32               SearchLen = 0;\n    uint32               SearchLimit;\n    UT_EntryKey_t        SearchKey;\n\n    /* If searching for an unused entry, look through the entire table.\n     * Otherwise bound the search */\n    if (TestMode == UT_ENTRYTYPE_UNUSED)\n    {\n        SearchLimit = UT_MAX_FUNC_STUBS;\n        SearchKey   = 0;\n    }\n    else\n    {\n        SearchLimit = UT_MaxStubSearchLen;\n        SearchKey   = FuncKey;\n    }\n\n    while (1)\n    {\n        if (SearchLen >= SearchLimit)\n        {\n            StubPtr = NULL;\n            break;\n        }\n        ++SearchLen;\n        StubPtr = &UT_StubTable[Idx];\n        if (StubPtr->EntryType == TestMode && StubPtr->FuncKey == SearchKey)\n        {\n            break;\n        }\n        ++Idx;\n        if (Idx >= UT_MAX_FUNC_STUBS)\n        {\n            Idx = 0;\n        }\n    }\n\n    /*\n     * Keep track of the longest search length since the last reset.\n     * This serves as the upper bound for future searches.\n     */\n    if (SearchLen > UT_MaxStubSearchLen)\n    {\n        UT_MaxStubSearchLen = SearchLen;\n    }\n\n    return StubPtr;\n}\n```\n</target_code>\nPlease provide the modified UT_GetStubEntry code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe logging utilities: append-only logs to help reproduce the scenario. */\nstatic void UT_ProbeLog(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2457.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Best-effort logging; do not alter program flow on failure. */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nstatic UT_StubTableEntry_t *UT_GetStubEntry(UT_EntryKey_t FuncKey, UT_EntryType_t TestMode)\n{\n    UT_StubTableEntry_t *StubPtr   = NULL;\n    uint32               Idx       = FuncKey % (UT_MAX_FUNC_STUBS - 1); /* hash the key to determine the start point */\n    uint32               SearchLen = 0;\n    uint32               SearchLimit;\n    UT_EntryKey_t        SearchKey;\n\n    /* Log initial state */\n    UT_ProbeLog(\"UT_GetStubEntry ENTRY: FuncKey=%\" PRIu64 \", computed Idx=%\" PRIu32 \", TestMode=%\" PRIu64,\n                (unsigned long long)(uintptr_t)FuncKey, Idx, (unsigned long long)(uintptr_t)TestMode);\n\n    /* If searching for an unused entry, look through the entire table.\n     * Otherwise bound the search */\n    if (TestMode == UT_ENTRYTYPE_UNUSED)\n    {\n        SearchLimit = UT_MAX_FUNC_STUBS;\n        SearchKey   = 0;\n        UT_ProbeLog(\"Branch: UT_ENTRYTYPE_UNUSED -> SearchLimit=%\" PRIu32 \", SearchKey=0\", SearchLimit);\n    }\n    else\n    {\n        SearchLimit = UT_MaxStubSearchLen;\n        SearchKey   = FuncKey;\n        UT_ProbeLog(\"Branch: specific search -> SearchLimit=%\" PRIu32 \", SearchKey=%\" PRIu64,\n                    SearchLimit, (unsigned long long)(uintptr_t)SearchKey);\n    }\n\n    while (1)\n    {\n        if (SearchLen >= SearchLimit)\n        {\n            UT_ProbeLog(\"Search terminated: SearchLen(=%\" PRIu32 \") >= SearchLimit(=%\" PRIu32 \") -> no entry found\",\n                        SearchLen, SearchLimit);\n            StubPtr = NULL;\n            break;\n        }\n\n        ++SearchLen;\n        StubPtr = &UT_StubTable[Idx];\n\n        /* Log per-iteration state before checking the entry */\n        UT_ProbeLog(\"Iter start: SearchLen=%\" PRIu32 \", Idx=%\" PRIu32 \", StubPtr=%p, Stub.EntryType=%\" PRIu64 \", Stub.FuncKey=%\" PRIu64,\n                    SearchLen, Idx, (void *)StubPtr,\n                    (unsigned long long)(uintptr_t)StubPtr->EntryType,\n                    (unsigned long long)(uintptr_t)StubPtr->FuncKey);\n\n        if (StubPtr->EntryType == TestMode && StubPtr->FuncKey == SearchKey)\n        {\n            UT_ProbeLog(\"Match found at Idx=%\" PRIu32 \", SearchLen=%\" PRIu32, Idx, SearchLen);\n            break;\n        }\n\n        ++Idx;\n        UT_ProbeLog(\"After increment: Idx=%\" PRIu32, Idx);\n\n        if (Idx >= UT_MAX_FUNC_STUBS)\n        {\n            UT_ProbeLog(\"Idx wrapped from >= UT_MAX_FUNC_STUBS (=%\" PRIu32 \") to 0\", UT_MAX_FUNC_STUBS);\n            Idx = 0;\n        }\n    }\n\n    /*\n     * Keep track of the longest search length since the last reset.\n     * This serves as the upper bound for future searches.\n     */\n    if (SearchLen > UT_MaxStubSearchLen)\n    {\n        UT_ProbeLog(\"Updating UT_MaxStubSearchLen: old=%\" PRIu32 \", new=%\" PRIu32, UT_MaxStubSearchLen, SearchLen);\n        UT_MaxStubSearchLen = SearchLen;\n    }\n    else\n    {\n        UT_ProbeLog(\"UT_MaxStubSearchLen remains: %\" PRIu32, UT_MaxStubSearchLen);\n    }\n\n    UT_ProbeLog(\"UT_GetStubEntry EXIT: returning StubPtr=%p\", (void *)StubPtr);\n\n    return StubPtr;\n}\n"
}