{
  "user_message": "Target function code is:\n```c\nstatic UT_StubTableEntry_t *UT_GetStubEntry(UT_EntryKey_t FuncKey, UT_EntryType_t TestMode)\n{\n    UT_StubTableEntry_t *StubPtr   = NULL;\n    uint32               Idx       = FuncKey % (UT_MAX_FUNC_STUBS - 1); /* hash the key to determine the start point */\n    uint32               SearchLen = 0;\n    uint32               SearchLimit;\n    UT_EntryKey_t        SearchKey;\n\n    /* If searching for an unused entry, look through the entire table.\n     * Otherwise bound the search */\n    if (TestMode == UT_ENTRYTYPE_UNUSED)\n    {\n        SearchLimit = UT_MAX_FUNC_STUBS;\n        SearchKey   = 0;\n    }\n    else\n    {\n        SearchLimit = UT_MaxStubSearchLen;\n        SearchKey   = FuncKey;\n    }\n\n    while (1)\n    {\n        if (SearchLen >= SearchLimit)\n        {\n            StubPtr = NULL;\n            break;\n        }\n        ++SearchLen;\n        StubPtr = &UT_StubTable[Idx];\n        if (StubPtr->EntryType == TestMode && StubPtr->FuncKey == SearchKey)\n        {\n            break;\n        }\n        ++Idx;\n        if (Idx >= UT_MAX_FUNC_STUBS)\n        {\n            Idx = 0;\n        }\n    }\n\n    /*\n     * Keep track of the longest search length since the last reset.\n     * This serves as the upper bound for future searches.\n     */\n    if (SearchLen > UT_MaxStubSearchLen)\n    {\n        UT_MaxStubSearchLen = SearchLen;\n    }\n\n    return StubPtr;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'UT_GetStubEntry': {'callees': [], 'callers': ['UT_ConfigureGenericStubReturnValue', 'UT_ClearDeferredRetcode', 'UT_ClearDefaultReturnValue', 'UT_GetStubRetcodeAndCount', 'UT_GetStubCount', 'UT_Stub_RegisterReturnType', 'UT_Stub_GetReturnValuePtr', 'UT_SetDataBuffer', 'UT_GetDataBuffer', 'UT_Stub_CopyToLocal', 'UT_Stub_CopyFromLocal', 'UT_DoSetHookFunction', 'UT_Stub_RegisterContextWithMetaData', 'UT_Stub_CopyToReturnValue', 'UT_Stub_FindRetvalConfig', 'UT_DefaultStubImplWithArgs', 'UT_ExecuteBasicHandler', 'UT_ExecuteVaHandler']}, 'UT_ConfigureGenericStubReturnValue': {'callees': ['UT_GetStubEntry', 'UtAssert_Abort'], 'callers': ['UT_SetDeferredRetcode', 'UT_SetDefaultReturnValue']}, 'UT_ClearDeferredRetcode': {'callees': ['UT_GetStubEntry', 'UT_ClearStubEntry'], 'callers': []}, 'UT_ClearDefaultReturnValue': {'callees': ['UT_GetStubEntry', 'UT_ClearStubEntry'], 'callers': []}, 'UT_GetStubRetcodeAndCount': {'callees': ['UT_GetStubEntry'], 'callers': []}, 'UT_GetStubCount': {'callees': ['UT_GetStubEntry'], 'callers': ['UT_DefaultHandler_OS_GetLocalTime', 'UT_DefaultHandler_OS_TimeBaseGetFreeRun']}, 'UT_Stub_RegisterReturnType': {'callees': ['UT_GetStubEntry', 'UT_ClearStubEntry', 'UtAssert_Abort'], 'callers': ['OS_BinSemCreate', 'OS_BinSemDelete', 'OS_BinSemFlush', 'OS_BinSemGetIdByName', 'OS_BinSemGetInfo', 'OS_BinSemGive', 'OS_BinSemTake', 'OS_BinSemTimedWait', 'OS_GetLocalTime', 'OS_SetLocalTime', 'OS_API_Init', 'OS_RegisterEventHandler', 'OS_CondVarBroadcast', 'OS_CondVarCreate', 'OS_CondVarDelete', 'OS_CondVarGetIdByName', 'OS_CondVarGetInfo', 'OS_CondVarLock', 'OS_CondVarSignal', 'OS_CondVarTimedWait', 'OS_CondVarUnlock', 'OS_CondVarWait', 'OS_CountSemCreate', 'OS_CountSemDelete', 'OS_CountSemGetIdByName', 'OS_CountSemGetInfo', 'OS_CountSemGive', 'OS_CountSemTake', 'OS_CountSemTimedWait', 'OS_DirectoryClose', 'OS_DirectoryOpen', 'OS_DirectoryRead', 'OS_DirectoryRewind', 'OS_mkdir', 'OS_rmdir', 'OS_GetErrorName', 'OS_StatusToString', 'OS_CloseAllFiles', 'OS_CloseFileByName', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_OpenCreate', 'OS_TimedRead', 'OS_TimedWrite', 'OS_chmod', 'OS_close', 'OS_cp', 'OS_lseek', 'OS_mv', 'OS_read', 'OS_remove', 'OS_rename', 'OS_stat', 'OS_write', 'OS_FS_GetPhysDriveName', 'OS_FileSysAddFixedMap', 'OS_FileSysStatVolume', 'OS_GetFsInfo', 'OS_TranslatePath', 'OS_chkfs', 'OS_initfs', 'OS_mkfs', 'OS_mount', 'OS_rmfs', 'OS_unmount', 'OS_HeapGetInfo', 'OS_ConvertToArrayIndex', 'OS_GetResourceName', 'OS_IdentifyObject', 'OS_ObjectIdToArrayIndex', 'OS_ModuleInfo', 'OS_ModuleLoad', 'OS_ModuleSymbolLookup', 'OS_ModuleUnload', 'OS_SymbolLookup', 'OS_SymbolTableDump', 'OS_MutSemCreate', 'OS_MutSemDelete', 'OS_MutSemGetIdByName', 'OS_MutSemGetInfo', 'OS_MutSemGive', 'OS_MutSemTake', 'OS_NetworkGetHostName', 'OS_NetworkGetID', 'OS_QueueCreate', 'OS_QueueDelete', 'OS_QueueGet', 'OS_QueueGetIdByName', 'OS_QueueGetInfo', 'OS_QueuePut', 'OS_SelectFdAdd', 'OS_SelectFdClear', 'OS_SelectFdIsSet', 'OS_SelectFdZero', 'OS_SelectMultiple', 'OS_SelectSingle', 'OS_ShellOutputToFile', 'OS_SocketAccept', 'OS_SocketAddrFromString', 'OS_SocketAddrGetPort', 'OS_SocketAddrInit', 'OS_SocketAddrSetPort', 'OS_SocketAddrToString', 'OS_SocketBind', 'OS_SocketBindAddress', 'OS_SocketConnect', 'OS_SocketGetIdByName', 'OS_SocketGetInfo', 'OS_SocketListen', 'OS_SocketOpen', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketShutdown', 'OS_TaskCreate', 'OS_TaskDelay', 'OS_TaskDelete', 'OS_TaskFindIdBySystemData', 'OS_TaskGetId', 'OS_TaskGetIdByName', 'OS_TaskGetInfo', 'OS_TaskInstallDeleteHandler', 'OS_TaskSetPriority', 'OS_TimerAdd', 'OS_TimerCreate', 'OS_TimerDelete', 'OS_TimerGetIdByName', 'OS_TimerGetInfo', 'OS_TimerSet', 'OS_TimeBaseCreate', 'OS_TimeBaseDelete', 'OS_TimeBaseGetFreeRun', 'OS_TimeBaseGetIdByName', 'OS_TimeBaseGetInfo', 'OS_TimeBaseSet', 'OS_GetBuildNumber', 'OS_GetVersionCodeName', 'OS_GetVersionString']}, 'UT_Stub_GetReturnValuePtr': {'callees': ['UT_GetStubEntry', 'UtAssert_Abort', 'UtAssert_GetContext'], 'callers': ['OS_BinSemCreate', 'OS_BinSemDelete', 'OS_BinSemFlush', 'OS_BinSemGetIdByName', 'OS_BinSemGetInfo', 'OS_BinSemGive', 'OS_BinSemTake', 'OS_BinSemTimedWait', 'OS_GetLocalTime', 'OS_SetLocalTime', 'OS_API_Init', 'OS_RegisterEventHandler', 'OS_CondVarBroadcast', 'OS_CondVarCreate', 'OS_CondVarDelete', 'OS_CondVarGetIdByName', 'OS_CondVarGetInfo', 'OS_CondVarLock', 'OS_CondVarSignal', 'OS_CondVarTimedWait', 'OS_CondVarUnlock', 'OS_CondVarWait', 'OS_CountSemCreate', 'OS_CountSemDelete', 'OS_CountSemGetIdByName', 'OS_CountSemGetInfo', 'OS_CountSemGive', 'OS_CountSemTake', 'OS_CountSemTimedWait', 'OS_DirectoryClose', 'OS_DirectoryOpen', 'OS_DirectoryRead', 'OS_DirectoryRewind', 'OS_mkdir', 'OS_rmdir', 'OS_GetErrorName', 'OS_StatusToString', 'OS_CloseAllFiles', 'OS_CloseFileByName', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_OpenCreate', 'OS_TimedRead', 'OS_TimedWrite', 'OS_chmod', 'OS_close', 'OS_cp', 'OS_lseek', 'OS_mv', 'OS_read', 'OS_remove', 'OS_rename', 'OS_stat', 'OS_write', 'OS_FS_GetPhysDriveName', 'OS_FileSysAddFixedMap', 'OS_FileSysStatVolume', 'OS_GetFsInfo', 'OS_TranslatePath', 'OS_chkfs', 'OS_initfs', 'OS_mkfs', 'OS_mount', 'OS_rmfs', 'OS_unmount', 'OS_HeapGetInfo', 'OS_ConvertToArrayIndex', 'OS_GetResourceName', 'OS_IdentifyObject', 'OS_ObjectIdToArrayIndex', 'OS_ModuleInfo', 'OS_ModuleLoad', 'OS_ModuleSymbolLookup', 'OS_ModuleUnload', 'OS_SymbolLookup', 'OS_SymbolTableDump', 'OS_MutSemCreate', 'OS_MutSemDelete', 'OS_MutSemGetIdByName', 'OS_MutSemGetInfo', 'OS_MutSemGive', 'OS_MutSemTake', 'OS_NetworkGetHostName', 'OS_NetworkGetID', 'OS_QueueCreate', 'OS_QueueDelete', 'OS_QueueGet', 'OS_QueueGetIdByName', 'OS_QueueGetInfo', 'OS_QueuePut', 'OS_SelectFdAdd', 'OS_SelectFdClear', 'OS_SelectFdIsSet', 'OS_SelectFdZero', 'OS_SelectMultiple', 'OS_SelectSingle', 'OS_ShellOutputToFile', 'OS_SocketAccept', 'OS_SocketAddrFromString', 'OS_SocketAddrGetPort', 'OS_SocketAddrInit', 'OS_SocketAddrSetPort', 'OS_SocketAddrToString', 'OS_SocketBind', 'OS_SocketBindAddress', 'OS_SocketConnect', 'OS_SocketGetIdByName', 'OS_SocketGetInfo', 'OS_SocketListen', 'OS_SocketOpen', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketShutdown', 'OS_TaskCreate', 'OS_TaskDelay', 'OS_TaskDelete', 'OS_TaskFindIdBySystemData', 'OS_TaskGetId', 'OS_TaskGetIdByName', 'OS_TaskGetInfo', 'OS_TaskInstallDeleteHandler', 'OS_TaskSetPriority', 'OS_TimerAdd', 'OS_TimerCreate', 'OS_TimerDelete', 'OS_TimerGetIdByName', 'OS_TimerGetInfo', 'OS_TimerSet', 'OS_TimeBaseCreate', 'OS_TimeBaseDelete', 'OS_TimeBaseGetFreeRun', 'OS_TimeBaseGetIdByName', 'OS_TimeBaseGetInfo', 'OS_TimeBaseSet', 'OS_GetBuildNumber', 'OS_GetVersionCodeName', 'OS_GetVersionString']}, 'UT_SetDataBuffer': {'callees': ['UT_GetStubEntry', 'UtAssert_Abort'], 'callers': ['UT_DefaultHandler_OS_QueuePut']}, 'UT_GetDataBuffer': {'callees': ['UT_GetStubEntry'], 'callers': ['UT_DefaultHandler_OS_GetVersionString', 'UT_DefaultHandler_OS_GetVersionCodeName']}, 'UT_Stub_CopyToLocal': {'callees': ['UT_GetStubEntry', 'UT_ClearStubEntry'], 'callers': ['UT_DefaultHandler_OS_BinSemGetInfo', 'UT_DefaultHandler_OS_BinSemGetIdByName', 'UT_DefaultHandler_OS_GetLocalTime', 'UT_DefaultHandler_OS_CountSemGetIdByName', 'UT_DefaultHandler_OS_CountSemGetInfo', 'UT_DefaultHandler_OS_DirectoryRead', 'UT_DefaultHandler_OS_GetErrorName', 'UT_GenericReadStub', 'UT_DefaultHandler_OS_stat', 'UT_DefaultHandler_OS_FDGetInfo', 'UT_DefaultHandler_OS_FileSysStatVolume', 'UT_DefaultHandler_OS_TranslatePath', 'UT_DefaultHandler_OS_HeapGetInfo', 'UT_DefaultHandler_OS_ObjectIdToArrayIndex', 'UT_DefaultHandler_OS_GetResourceName', 'UT_DefaultHandler_OS_ForEachObjectOfType', 'UT_DefaultHandler_OS_ForEachObject', 'UT_DefaultHandler_OS_ModuleInfo', 'UT_DefaultHandler_OS_SymbolLookup', 'UT_DefaultHandler_OS_ModuleSymbolLookup', 'UT_DefaultHandler_OS_MutSemGetIdByName', 'UT_DefaultHandler_OS_MutSemGetInfo', 'UT_DefaultHandler_OS_NetworkGetHostName', 'UT_DefaultHandler_OS_QueueGet', 'UT_DefaultHandler_OS_QueueGetIdByName', 'UT_DefaultHandler_OS_QueueGetInfo', 'UT_DefaultHandler_OS_SocketRecvFrom', 'UT_DefaultHandler_OS_SocketGetIdByName', 'UT_DefaultHandler_OS_SocketGetInfo', 'UT_DefaultHandler_OS_SocketAddrInit', 'UT_DefaultHandler_OS_SocketAddrToString', 'UT_DefaultHandler_OS_SocketAddrFromString', 'UT_DefaultHandler_OS_SocketAddrGetPort', 'UT_DefaultHandler_OS_TaskGetIdByName', 'UT_DefaultHandler_OS_TaskGetInfo', 'UT_DefaultHandler_OS_TaskFindIdBySystemData', 'UT_DefaultHandler_OS_TimerGetIdByName', 'UT_DefaultHandler_OS_TimerGetInfo', 'UT_DefaultHandler_OS_TimeBaseGetIdByName', 'UT_DefaultHandler_OS_TimeBaseGetInfo', 'UT_DefaultHandler_OS_TimeBaseGetFreeRun']}, 'UT_Stub_CopyFromLocal': {'callees': ['UT_GetStubEntry', 'UT_ClearStubEntry'], 'callers': ['UT_DefaultHandler_OS_SetLocalTime', 'UT_GenericWriteStub', 'UT_DefaultHandler_OS_printf', 'UT_DefaultHandler_OS_SocketSendTo']}, 'UT_DoSetHookFunction': {'callees': ['UT_GetStubEntry', 'UtAssert_Abort', 'UT_ClearStubEntry'], 'callers': ['UT_SetHookFunction', 'UT_SetVaHookFunction', 'UT_SetHandlerFunction', 'UT_SetVaHandlerFunction']}, 'UT_Stub_RegisterContextWithMetaData': {'callees': ['UT_GetStubEntry', 'UtAssert_Abort'], 'callers': ['OS_BinSemCreate', 'OS_BinSemDelete', 'OS_BinSemFlush', 'OS_BinSemGetIdByName', 'OS_BinSemGetInfo', 'OS_BinSemGive', 'OS_BinSemTake', 'OS_BinSemTimedWait', 'OS_GetLocalTime', 'OS_SetLocalTime', 'OS_ApplicationExit', 'OS_ApplicationShutdown', 'OS_RegisterEventHandler', 'OS_CondVarBroadcast', 'OS_CondVarCreate', 'OS_CondVarDelete', 'OS_CondVarGetIdByName', 'OS_CondVarGetInfo', 'OS_CondVarLock', 'OS_CondVarSignal', 'OS_CondVarTimedWait', 'OS_CondVarUnlock', 'OS_CondVarWait', 'OS_CountSemCreate', 'OS_CountSemDelete', 'OS_CountSemGetIdByName', 'OS_CountSemGetInfo', 'OS_CountSemGive', 'OS_CountSemTake', 'OS_CountSemTimedWait', 'OS_DirectoryClose', 'OS_DirectoryOpen', 'OS_DirectoryRead', 'OS_DirectoryRewind', 'OS_mkdir', 'OS_rmdir', 'OS_GetErrorName', 'OS_StatusToString', 'OS_CloseFileByName', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_OpenCreate', 'OS_TimedRead', 'OS_TimedWrite', 'OS_chmod', 'OS_close', 'OS_cp', 'OS_lseek', 'OS_mv', 'OS_read', 'OS_remove', 'OS_rename', 'OS_stat', 'OS_write', 'OS_FS_GetPhysDriveName', 'OS_FileSysAddFixedMap', 'OS_FileSysStatVolume', 'OS_GetFsInfo', 'OS_TranslatePath', 'OS_chkfs', 'OS_initfs', 'OS_mkfs', 'OS_mount', 'OS_rmfs', 'OS_unmount', 'OS_HeapGetInfo', 'OS_ConvertToArrayIndex', 'OS_ForEachObject', 'OS_ForEachObjectOfType', 'OS_GetResourceName', 'OS_IdentifyObject', 'OS_ObjectIdToArrayIndex', 'OS_ModuleInfo', 'OS_ModuleLoad', 'OS_ModuleSymbolLookup', 'OS_ModuleUnload', 'OS_SymbolLookup', 'OS_SymbolTableDump', 'OS_MutSemCreate', 'OS_MutSemDelete', 'OS_MutSemGetIdByName', 'OS_MutSemGetInfo', 'OS_MutSemGive', 'OS_MutSemTake', 'OS_NetworkGetHostName', 'OS_printf', 'OS_QueueCreate', 'OS_QueueDelete', 'OS_QueueGet', 'OS_QueueGetIdByName', 'OS_QueueGetInfo', 'OS_QueuePut', 'OS_SelectFdAdd', 'OS_SelectFdClear', 'OS_SelectFdIsSet', 'OS_SelectFdZero', 'OS_SelectMultiple', 'OS_SelectSingle', 'OS_ShellOutputToFile', 'OS_SocketAccept', 'OS_SocketAddrFromString', 'OS_SocketAddrGetPort', 'OS_SocketAddrInit', 'OS_SocketAddrSetPort', 'OS_SocketAddrToString', 'OS_SocketBind', 'OS_SocketBindAddress', 'OS_SocketConnect', 'OS_SocketGetIdByName', 'OS_SocketGetInfo', 'OS_SocketListen', 'OS_SocketOpen', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketShutdown', 'OS_TaskCreate', 'OS_TaskDelay', 'OS_TaskDelete', 'OS_TaskFindIdBySystemData', 'OS_TaskGetIdByName', 'OS_TaskGetInfo', 'OS_TaskInstallDeleteHandler', 'OS_TaskSetPriority', 'OS_TimerAdd', 'OS_TimerCreate', 'OS_TimerDelete', 'OS_TimerGetIdByName', 'OS_TimerGetInfo', 'OS_TimerSet', 'OS_TimeBaseCreate', 'OS_TimeBaseDelete', 'OS_TimeBaseGetFreeRun', 'OS_TimeBaseGetIdByName', 'OS_TimeBaseGetInfo', 'OS_TimeBaseSet']}, 'UT_Stub_CopyToReturnValue': {'callees': ['UT_GetStubEntry', 'UtAssert_Abort'], 'callers': ['UT_GenericReadStub', 'UT_GenericWriteStub', 'UT_DefaultHandler_OS_lseek', 'UT_DefaultHandler_OS_IdentifyObject', 'UT_DefaultHandler_OS_QueueGet', 'UT_DefaultHandler_OS_SocketRecvFrom', 'UT_DefaultHandler_OS_SocketSendTo', 'UT_DefaultHandler_OS_TaskGetId', 'UT_DefaultHandler_OS_GetVersionString', 'UT_DefaultHandler_OS_GetVersionCodeName']}, 'UT_Stub_FindRetvalConfig': {'callees': ['UT_GetStubEntry'], 'callers': ['UT_DefaultStubImplWithArgs']}, 'UT_DefaultStubImplWithArgs': {'callees': ['UT_GetStubEntry', 'UT_ClearStubEntry', 'UT_Stub_FindRetvalConfig', 'UtAssert_Message', 'UtAssert_Abort', 'UtAssert_GetContext'], 'callers': ['UT_DefaultStubImpl', 'UT_ExecuteVaHandler']}, 'UT_ExecuteBasicHandler': {'callees': ['UT_GetStubEntry', 'UT_SetHandlerFunction', 'UT_DefaultStubImpl'], 'callers': ['OS_BinSemCreate', 'OS_BinSemDelete', 'OS_BinSemFlush', 'OS_BinSemGetIdByName', 'OS_BinSemGetInfo', 'OS_BinSemGive', 'OS_BinSemTake', 'OS_BinSemTimedWait', 'OS_GetLocalTime', 'OS_SetLocalTime', 'OS_API_Init', 'OS_API_Teardown', 'OS_ApplicationExit', 'OS_ApplicationShutdown', 'OS_DeleteAllObjects', 'OS_IdleLoop', 'OS_RegisterEventHandler', 'OS_CondVarBroadcast', 'OS_CondVarCreate', 'OS_CondVarDelete', 'OS_CondVarGetIdByName', 'OS_CondVarGetInfo', 'OS_CondVarLock', 'OS_CondVarSignal', 'OS_CondVarTimedWait', 'OS_CondVarUnlock', 'OS_CondVarWait', 'OS_CountSemCreate', 'OS_CountSemDelete', 'OS_CountSemGetIdByName', 'OS_CountSemGetInfo', 'OS_CountSemGive', 'OS_CountSemTake', 'OS_CountSemTimedWait', 'OS_DirectoryClose', 'OS_DirectoryOpen', 'OS_DirectoryRead', 'OS_DirectoryRewind', 'OS_mkdir', 'OS_rmdir', 'OS_GetErrorName', 'OS_StatusToString', 'OS_CloseAllFiles', 'OS_CloseFileByName', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_OpenCreate', 'OS_TimedRead', 'OS_TimedWrite', 'OS_chmod', 'OS_close', 'OS_cp', 'OS_lseek', 'OS_mv', 'OS_read', 'OS_remove', 'OS_rename', 'OS_stat', 'OS_write', 'OS_FS_GetPhysDriveName', 'OS_FileSysAddFixedMap', 'OS_FileSysStatVolume', 'OS_GetFsInfo', 'OS_TranslatePath', 'OS_chkfs', 'OS_initfs', 'OS_mkfs', 'OS_mount', 'OS_rmfs', 'OS_unmount', 'OS_HeapGetInfo', 'OS_ConvertToArrayIndex', 'OS_ForEachObject', 'OS_ForEachObjectOfType', 'OS_GetResourceName', 'OS_IdentifyObject', 'OS_ObjectIdToArrayIndex', 'OS_ModuleInfo', 'OS_ModuleLoad', 'OS_ModuleSymbolLookup', 'OS_ModuleUnload', 'OS_SymbolLookup', 'OS_SymbolTableDump', 'OS_MutSemCreate', 'OS_MutSemDelete', 'OS_MutSemGetIdByName', 'OS_MutSemGetInfo', 'OS_MutSemGive', 'OS_MutSemTake', 'OS_NetworkGetHostName', 'OS_NetworkGetID', 'OS_printf_disable', 'OS_printf_enable', 'OS_QueueCreate', 'OS_QueueDelete', 'OS_QueueGet', 'OS_QueueGetIdByName', 'OS_QueueGetInfo', 'OS_QueuePut', 'OS_SelectFdAdd', 'OS_SelectFdClear', 'OS_SelectFdIsSet', 'OS_SelectFdZero', 'OS_SelectMultiple', 'OS_SelectSingle', 'OS_ShellOutputToFile', 'OS_SocketAccept', 'OS_SocketAddrFromString', 'OS_SocketAddrGetPort', 'OS_SocketAddrInit', 'OS_SocketAddrSetPort', 'OS_SocketAddrToString', 'OS_SocketBind', 'OS_SocketBindAddress', 'OS_SocketConnect', 'OS_SocketGetIdByName', 'OS_SocketGetInfo', 'OS_SocketListen', 'OS_SocketOpen', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketShutdown', 'OS_TaskCreate', 'OS_TaskDelay', 'OS_TaskDelete', 'OS_TaskExit', 'OS_TaskFindIdBySystemData', 'OS_TaskGetId', 'OS_TaskGetIdByName', 'OS_TaskGetInfo', 'OS_TaskInstallDeleteHandler', 'OS_TaskSetPriority', 'OS_TimerAdd', 'OS_TimerCreate', 'OS_TimerDelete', 'OS_TimerGetIdByName', 'OS_TimerGetInfo', 'OS_TimerSet', 'OS_TimeBaseCreate', 'OS_TimeBaseDelete', 'OS_TimeBaseGetFreeRun', 'OS_TimeBaseGetIdByName', 'OS_TimeBaseGetInfo', 'OS_TimeBaseSet', 'OS_GetBuildNumber', 'OS_GetVersionCodeName', 'OS_GetVersionNumber', 'OS_GetVersionString']}, 'UT_ExecuteVaHandler': {'callees': ['UT_GetStubEntry', 'UT_SetVaHandlerFunction', 'UT_DefaultStubImplWithArgs'], 'callers': ['OS_printf']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "UT_StubTableEntry_t",
    "UT_EntryKey_t",
    "UT_EntryType_t",
    "uint32",
    "UT_MAX_FUNC_STUBS",
    "UT_MaxStubSearchLen",
    "UT_StubTable",
    "UT_ENTRYTYPE_UNUSED"
  ],
  "explanation": "For each symbol below explain why it is needed to decide if the function uses any compiler language extensions:\n\n- UT_StubTableEntry_t\n  - The struct/type definition must be inspected to detect compiler-specific extensions (e.g. __attribute__ annotations, packed/aligned pragmas, non-standard bit-field usage, flexible-array members or other vendor extensions). Also the code reads fields (EntryType, FuncKey) \u2014 their declarations determine if non-standard types/attributes are used.\n\n- UT_EntryKey_t\n  - Determine the underlying type (enum, typedef to a compiler-specific integer type or builtin). The % operator is applied to FuncKey: this must be an integer type per standard C; if UT_EntryKey_t is defined via a compiler extension (typeof, extended-width integer, etc.) that would violate the rule.\n\n- UT_EntryType_t\n  - Used for comparisons (TestMode and StubPtr->EntryType). Its definition (enum or typedef) must be checked for non-standard enum extensions, explicit underlying types, attributes, or other compiler-specific constructs.\n\n- uint32\n  - This identifier is used as a type. It may be a typedef or macro (e.g. to an extended-width integer or compiler builtin). The actual definition must be checked for use of non-standard types or attributes.\n\n- UT_MAX_FUNC_STUBS\n  - Macro/constant controlling array sizing and the modulus divisor. Its definition could employ compiler-specific constants or expressions (e.g. GCC statement-expressions, builtins) or be inconsistent with standard integer semantics; also a value of 0/1 would expose undefined behaviour (modulo/div-by-zero) which is relevant to correctness though not a language-extension per se.\n\n- UT_MaxStubSearchLen\n  - Global/extern variable whose declaration may include compiler-specific storage-class specifiers or attributes (e.g. section, aligned, volatile with extension). Its type must be checked for non-standard typedefs.\n\n- UT_StubTable\n  - The array/object declaration must be checked for non-standard definitions: variable-length array, flexible array members, section attributes, packed/aligned attributes, unusual linkage, or other extensions affecting indexing and pointer operations.\n\n- UT_ENTRYTYPE_UNUSED\n  - The constant used for comparison; its definition (macro or enum constant) must be checked to ensure it was not created via non-standard means (compiler-specific macros or extensions).\n\nIn short: to verify absence of language extensions you must inspect the definitions of the types, macros and globals used by UT_GetStubEntry (their typedef/enum/struct/macro/variable declarations) because extensions would appear there rather than in the simple control flow of this function."
}