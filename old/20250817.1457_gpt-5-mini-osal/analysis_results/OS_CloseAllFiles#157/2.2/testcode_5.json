{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment iter->token.obj_id = OS_OBJECT_ID_UNDEFINED; in OS_ObjectIdIteratorGetNext is redundant. When a matching entry is found the code always overwrites token.obj_id with record->active_id before it is used (via OS_ObjectIdIteratorProcessEntry -> OS_ObjectIdFromToken). If no matching entry is found the value written (OS_OBJECT_ID_UNDEFINED) is never subsequently used. Therefore removing this assignment would not affect program behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseAllFiles code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1258.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseAllFiles as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseAllFiles:\n```c\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n\n    return_code = OS_SUCCESS;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n        if (close_code != OS_SUCCESS)\n        {\n            return_code = close_code;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseAllFiles code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logger: append control-flow and state information to /tmp/logs/1258.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1258.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp for easier correlation */\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm tmbuf;\n        (void)localtime_r(&t, &tmbuf);\n        fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n                1900 + tmbuf.tm_year, tmbuf.tm_mon + 1, tmbuf.tm_mday,\n                tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    (void)fclose(f);\n}\n\n/* The target function with probes inserted. Logic is preserved. */\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n\n    return_code = OS_SUCCESS;\n\n    probe_log(\"OS_CloseAllFiles: entry - return_code=%ld\", (long)return_code);\n\n    probe_log(\"OS_CloseAllFiles: calling OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE)\");\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n    probe_log(\"OS_CloseAllFiles: returned from OS_ObjectIdIterateActive\");\n\n    /* Iterate using an explicit loop variable so we can log the boolean result */\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        probe_log(\"OS_CloseAllFiles: iterator advanced (OS_ObjectIdIteratorGetNext returned true)\");\n\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n        probe_log(\"OS_CloseAllFiles: OS_ObjectIdIteratorProcessEntry returned %ld\", (long)close_code);\n\n        if (close_code != OS_SUCCESS)\n        {\n            probe_log(\"OS_CloseAllFiles: non-success close_code (%ld) -> setting return_code from %ld to %ld\",\n                      (long)close_code, (long)return_code, (long)close_code);\n            return_code = close_code;\n        }\n        else\n        {\n            probe_log(\"OS_CloseAllFiles: close_code successful (OS_SUCCESS)\");\n        }\n    }\n\n    probe_log(\"OS_CloseAllFiles: iterator finished, calling OS_ObjectIdIteratorDestroy\");\n    OS_ObjectIdIteratorDestroy(&iter);\n    probe_log(\"OS_CloseAllFiles: destroyed iterator, returning %ld\", (long)return_code);\n\n    return return_code;\n}\n"
}