{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1258.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp for easier correlation */\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm tmbuf;\n        (void)localtime_r(&t, &tmbuf);\n        fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n                1900 + tmbuf.tm_year, tmbuf.tm_mon + 1, tmbuf.tm_mday,\n                tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    (void)fclose(f);\n}\n\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n\n    return_code = OS_SUCCESS;\n\n    probe_log(\"OS_CloseAllFiles: entry - return_code=%ld\", (long)return_code);\n\n    probe_log(\"OS_CloseAllFiles: calling OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE)\");\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n    probe_log(\"OS_CloseAllFiles: returned from OS_ObjectIdIterateActive\");\n\n    /* Iterate using an explicit loop variable so we can log the boolean result */\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        probe_log(\"OS_CloseAllFiles: iterator advanced (OS_ObjectIdIteratorGetNext returned true)\");\n\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n        probe_log(\"OS_CloseAllFiles: OS_ObjectIdIteratorProcessEntry returned %ld\", (long)close_code);\n\n        if (close_code != OS_SUCCESS)\n        {\n            probe_log(\"OS_CloseAllFiles: non-success close_code (%ld) -> setting return_code from %ld to %ld\",\n                      (long)close_code, (long)return_code, (long)close_code);\n            return_code = close_code;\n        }\n        else\n        {\n            probe_log(\"OS_CloseAllFiles: close_code successful (OS_SUCCESS)\");\n        }\n    }\n\n    probe_log(\"OS_CloseAllFiles: iterator finished, calling OS_ObjectIdIteratorDestroy\");\n    OS_ObjectIdIteratorDestroy(&iter);\n    probe_log(\"OS_CloseAllFiles: destroyed iterator, returning %ld\", (long)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmptyzlasc2/src/src/os/shared/src/osapi-file.c: In function 'probe_log':\n/tmp/tmptyzlasc2/src/src/os/shared/src/osapi-file.c:611:19: error: storage size of 'tmbuf' isn't known\n  611 |         struct tm tmbuf;\n      |                   ^~~~~\n/tmp/tmptyzlasc2/src/src/os/shared/src/osapi-file.c:620:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  620 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-file.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-file.dir/__/__/os/shared/src/osapi-file.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3601: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-file.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_CloseAllFiles as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n/* Minimal type/constant declarations so this snippet compiles standalone.\n   These are only declarations and simple definitions to satisfy the compiler\n   \u2014 the real project will provide the actual definitions. */\ntypedef int32_t int32;\n\n/* Provide a compile-time constant for OS_SUCCESS (no macros per instructions). */\nconst int32 OS_SUCCESS = 0;\n\n/* Minimal iterator type used by the APIs (opaque in the real project). */\ntypedef struct\n{\n    int placeholder;\n} OS_object_iter_t;\n\n/* External identifier used in the original call. Declared here to allow compilation. */\nextern int LOCAL_OBJID_TYPE;\n\n/* Prototypes for external functions used by OS_CloseAllFiles. These are not\n   defined here (no mocks), only declared so this translation unit compiles. */\nvoid OS_ObjectIdIterateActive(int idtype, OS_object_iter_t *iter);\nbool OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter);\nint32 OS_ObjectIdIteratorProcessEntry(OS_object_iter_t *iter, int (*processor)(void *));\nvoid OS_ObjectIdIteratorDestroy(OS_object_iter_t *iter);\nint OS_FileIteratorClose(void *entry);\n\n/* probe_log: writes a timestamped message to a log file. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1258.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp for easier correlation */\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm tmbuf;\n        (void)localtime_r(&t, &tmbuf);\n        fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n                1900 + tmbuf.tm_year, tmbuf.tm_mon + 1, tmbuf.tm_mday,\n                tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast ap to the compiler's va_list type expected by vfprintf to avoid\n       mismatches in environments that use a different underlying typedef. */\n    vfprintf(f, fmt, (va_list)ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    (void)fclose(f);\n}\n\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n\n    return_code = OS_SUCCESS;\n\n    probe_log(\"OS_CloseAllFiles: entry - return_code=%ld\", (long)return_code);\n\n    probe_log(\"OS_CloseAllFiles: calling OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE)\");\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n    probe_log(\"OS_CloseAllFiles: returned from OS_ObjectIdIterateActive\");\n\n    /* Iterate using an explicit loop variable so we can log the boolean result */\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        probe_log(\"OS_CloseAllFiles: iterator advanced (OS_ObjectIdIteratorGetNext returned true)\");\n\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n        probe_log(\"OS_CloseAllFiles: OS_ObjectIdIteratorProcessEntry returned %ld\", (long)close_code);\n\n        if (close_code != OS_SUCCESS)\n        {\n            probe_log(\"OS_CloseAllFiles: non-success close_code (%ld) -> setting return_code from %ld to %ld\",\n                      (long)close_code, (long)return_code, (long)close_code);\n            return_code = close_code;\n        }\n        else\n        {\n            probe_log(\"OS_CloseAllFiles: close_code successful (OS_SUCCESS)\");\n        }\n    }\n\n    probe_log(\"OS_CloseAllFiles: iterator finished, calling OS_ObjectIdIteratorDestroy\");\n    OS_ObjectIdIteratorDestroy(&iter);\n    probe_log(\"OS_CloseAllFiles: destroyed iterator, returning %ld\", (long)return_code);\n\n    return return_code;\n}\n",
  "explanation": "Fixes applied:\n\n1. Added necessary standard headers: <stdio.h>, <time.h>, and <stdarg.h> so that struct tm, time-related functions, and va_list are known to the compiler. This resolves the \"storage size of 'tmbuf' isn't known\" error.\n\n2. Cast the variadic argument list when calling vfprintf: vfprintf(f, fmt, (va_list)ap); this avoids type-mismatch diagnostics in environments where the local va_list typedef differs from the one vfprintf expects.\n\n3. Added minimal typedefs/declarations (int32, OS_object_iter_t), a const OS_SUCCESS, and prototypes/extern declaration for the external APIs/identifiers used by OS_CloseAllFiles so the snippet compiles standalone. These are declarations only (no mock implementations), preserving the original logic of OS_CloseAllFiles."
}