{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(stream->stream_name, Filename) can read past the end of either buffer if either string is not NUL-terminated. The code only checks Filename for NULL (OS_CHECK_POINTER) but does not bound its length or guarantee termination, nor does the fragment show any guarantee that stream->stream_name is always NUL-terminated (e.g. if it was populated with strncpy without an explicit terminator). In that case strcmp may access memory beyond the objects and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseAllFiles code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseAllFiles as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseAllFiles:\n```c\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n\n    return_code = OS_SUCCESS;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n        if (close_code != OS_SUCCESS)\n        {\n            return_code = close_code;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseAllFiles code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Minimal forward declarations to allow this translation unit to compile\n   without pulling in the full OS headers. These are declared as extern\n   because the real definitions exist elsewhere in the system. */\ntypedef struct OS_object_iter OS_object_iter_t;\ntypedef int32_t int32;\nextern const int32 OS_SUCCESS;\nextern void OS_ObjectIdIterateActive(int type, OS_object_iter_t *iter);\nextern int32 OS_ObjectIdIteratorGetNext(OS_object_iter_t *iter);\nextern int32 OS_ObjectIdIteratorProcessEntry(OS_object_iter_t *iter, int32 (*func)(void *));\nextern void OS_ObjectIdIteratorDestroy(OS_object_iter_t *iter);\nextern int32 OS_FileIteratorClose(void *entry);\n\n/* Logging helpers that append to /tmp/logs/1263.txt. These helpers use\n   standard C I/O functions (fprintf/vfprintf) and flush after each\n   message so that other agents/processes can observe the control flow\n   as it happens. */\nstatic FILE *OS_CloseAllFiles_log_open(void)\n{\n    FILE *fp = fopen(\"/tmp/logs/1263.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Line buffering makes log lines visible promptly */\n        setvbuf(fp, NULL, _IOLBF, 0);\n    }\n    return fp;\n}\n\nstatic void OS_CloseAllFiles_log_close(FILE *fp)\n{\n    if (fp != NULL)\n    {\n        fflush(fp);\n        fclose(fp);\n    }\n}\n\nstatic void OS_CloseAllFiles_log_printf(FILE *fp, const char *fmt, ...)\n{\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fflush(fp);\n}\n\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n    FILE *log_fp = OS_CloseAllFiles_log_open();\n    int iter_count = 0;\n\n    /* Preserve original initialization logic */\n    return_code = OS_SUCCESS;\n\n    OS_CloseAllFiles_log_printf(log_fp, \"OS_CloseAllFiles: start - iter object at %p\\n\", (void *)&iter);\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n    OS_CloseAllFiles_log_printf(log_fp, \"OS_CloseAllFiles: iterate active called\\n\");\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        iter_count++;\n        OS_CloseAllFiles_log_printf(log_fp, \"OS_CloseAllFiles: iteration %d - about to process entry (callback at %p)\\n\",\n                                   iter_count, (void *)OS_FileIteratorClose);\n\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n        OS_CloseAllFiles_log_printf(log_fp, \"OS_CloseAllFiles: iteration %d - ProcessEntry returned %d\\n\",\n                                   iter_count, (int)close_code);\n\n        if (close_code != OS_SUCCESS)\n        {\n            OS_CloseAllFiles_log_printf(log_fp, \"OS_CloseAllFiles: iteration %d - non-success code %d -> saving as return_code\\n\",\n                                       iter_count, (int)close_code);\n            return_code = close_code;\n        }\n    }\n\n    OS_CloseAllFiles_log_printf(log_fp, \"OS_CloseAllFiles: iteration complete - total iterations %d\\n\", iter_count);\n\n    OS_ObjectIdIteratorDestroy(&iter);\n    OS_CloseAllFiles_log_printf(log_fp, \"OS_CloseAllFiles: iterator destroyed\\n\");\n\n    OS_CloseAllFiles_log_printf(log_fp, \"OS_CloseAllFiles: returning %d\\n\", (int)return_code);\n    OS_CloseAllFiles_log_close(log_fp);\n\n    return return_code;\n}\n"
}