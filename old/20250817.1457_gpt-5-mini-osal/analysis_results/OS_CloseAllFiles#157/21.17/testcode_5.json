{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memchr(name_ptr, 0, OS_MAX_FILE_NAME) can read up to OS_MAX_FILE_NAME bytes starting at name_ptr but there is no guarantee the object (the buffer backing VirtualPath) actually contains that many bytes from name_ptr. Although VirtPathLen was found with OS_strnlen(VirtualPath, OS_MAX_PATH_LEN), this only ensures a NUL exists within the first OS_MAX_PATH_LEN bytes; it does not guarantee that the caller provided a buffer with at least OS_MAX_FILE_NAME bytes available from name_ptr. If the caller passed a minimally sized buffer (e.g. allocated exactly strlen(VirtualPath)+1 bytes) or if the remaining bytes from the last '/' to the end of the buffer are less than OS_MAX_FILE_NAME, memchr may access beyond the bounds of the object and cause undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseAllFiles code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseAllFiles as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseAllFiles:\n```c\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n\n    return_code = OS_SUCCESS;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n        if (close_code != OS_SUCCESS)\n        {\n            return_code = close_code;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseAllFiles code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe logging helpers. These write appended logs to /tmp/logs/1263.txt\n * and are placed so as not to alter the control flow of OS_CloseAllFiles.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1263.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n    int              __probe_iter_count = 0;\n\n    /* Log entry to function and address of iterator structure */\n    probe_log(\"OS_CloseAllFiles: entry; iter_addr=%p\", (void *)&iter);\n\n    return_code = OS_SUCCESS;\n\n    /* Start iteration over file objects */\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n    probe_log(\"OS_CloseAllFiles: after OS_ObjectIdIterateActive; iter_addr=%p\", (void *)&iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* Log that we are about to process another entry and the iteration count. */\n        probe_log(\"OS_CloseAllFiles: iterator next returned true; iter_count=%d; iter_addr=%p\",\n                  __probe_iter_count, (void *)&iter);\n\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n        /* Log the result of processing this entry so callers can correlate failures. */\n        probe_log(\"OS_CloseAllFiles: processed entry; iter_count=%d; close_code=%ld\",\n                  __probe_iter_count, (long)close_code);\n\n        if (close_code != OS_SUCCESS)\n        {\n            /* Record the (first) non-success return code but continue to try to close all files. */\n            probe_log(\"OS_CloseAllFiles: non-success detected; iter_count=%d; close_code=%ld\",\n                      __probe_iter_count, (long)close_code);\n            return_code = close_code;\n        }\n\n        __probe_iter_count++;\n    }\n\n    /* Log iterator destruction and final status before returning. */\n    OS_ObjectIdIteratorDestroy(&iter);\n    probe_log(\"OS_CloseAllFiles: after OS_ObjectIdIteratorDestroy; total_iter_count=%d; return_code=%ld\",\n              __probe_iter_count, (long)return_code);\n\n    return return_code;\n}\n"
}