{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call uses sizeof(fd_prop->Path) - 1 as the length argument without any guarantee that the source (record->name_entry) has at least that many accessible bytes or a NUL within that range. If record->name_entry points to a shorter object or is not NUL-terminated within (sizeof(fd_prop->Path)-1) bytes, strncpy will read up to that length from the source and thus may access memory beyond the bounds of the source object, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseAllFiles code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseAllFiles as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseAllFiles:\n```c\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n\n    return_code = OS_SUCCESS;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n        if (close_code != OS_SUCCESS)\n        {\n            return_code = close_code;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseAllFiles code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\n/*\n * Probe logging for OS_CloseAllFiles. Writes append-only logs to /tmp/logs/1263.txt\n * This file is intended to capture control flow and state to reproduce the violation scenario.\n * The original logic of OS_CloseAllFiles is preserved; the probes only observe state.\n */\n\nstatic void LogIteratorState(const OS_object_iter_t *iter, int32 iter_idx, int32 close_code, int32 return_code, const char *phase)\n{\n    /* Preserve errno so logging does not disturb program behavior. */\n    int saved_errno = errno;\n\n    FILE *f = fopen(\"/tmp/logs/1263.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print a compact, machine- and human-readable single-line record. */\n        fprintf(f,\n                \"phase=%s iter_idx=%d iter_addr=%p close_code=%ld return_code=%ld errno=%d msg=%s\\n\",\n                (phase != NULL) ? phase : \"(null)\",\n                (int)iter_idx,\n                (const void *)iter,\n                (long)close_code,\n                (long)return_code,\n                saved_errno,\n                (saved_errno != 0) ? strerror(saved_errno) : \"OK\");\n        fclose(f);\n    }\n\n    errno = saved_errno;\n}\n\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n    int32            iter_count = 0;\n\n    return_code = OS_SUCCESS;\n\n    /* Log: starting iteration activation */\n    LogIteratorState(&iter, iter_count, 0, return_code, \"before_iterate_active\");\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    /* Log: after activation */\n    LogIteratorState(&iter, iter_count, 0, return_code, \"after_iterate_active\");\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        iter_count++;\n\n        /* Log: about to process current entry */\n        LogIteratorState(&iter, iter_count, 0, return_code, \"before_process_entry\");\n\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n        /* Log: after processing current entry, capture close_code */\n        LogIteratorState(&iter, iter_count, close_code, return_code, \"after_process_entry\");\n\n        if (close_code != OS_SUCCESS)\n        {\n            return_code = close_code;\n\n            /* Log: updated return_code due to non-success close_code */\n            LogIteratorState(&iter, iter_count, close_code, return_code, \"update_return_code\");\n        }\n    }\n\n    /* Log: before destroying iterator; include final iteration count */\n    LogIteratorState(&iter, iter_count, 0, return_code, \"before_destroy\");\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    /* Log: after destroy and before return */\n    LogIteratorState(&iter, iter_count, 0, return_code, \"after_destroy\");\n\n    return return_code;\n}\n"
}