{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf VirtualPath points to a character array whose allocated size is smaller than OS_MAX_PATH_LEN and it is not NUL-terminated within that size, then OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) may read up to OS_MAX_PATH_LEN bytes and thus read past the end of the object. Note that OS_CHECK_POINTER only ensures the pointer is non-NULL, not that the buffer is at least OS_MAX_PATH_LEN bytes long, so this can lead to an out-of-bounds access and violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseAllFiles code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseAllFiles as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseAllFiles:\n```c\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n\n    return_code = OS_SUCCESS;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n        if (close_code != OS_SUCCESS)\n        {\n            return_code = close_code;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseAllFiles code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logging helper - appends timestamped messages to /tmp/logs/1263.txt */\nstatic void OS_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1263.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Do not change program behavior if logging is unavailable */\n    }\n\n    time_t t = time(NULL);\n    struct tm *tm_info = localtime(&t);\n    char timebuf[32] = \"\";\n    if (tm_info != NULL)\n    {\n        if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", tm_info) == 0)\n        {\n            timebuf[0] = '\\0';\n        }\n    }\n\n    if (timebuf[0] != '\\0')\n    {\n        fprintf(f, \"[%s] \", timebuf);\n    }\n    else\n    {\n        fprintf(f, \"[no-time] \");\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Original function with inserted probes to capture control flow and state */\nint32 OS_CloseAllFiles(void)\n{\n    int32            return_code;\n    int32            close_code;\n    OS_object_iter_t iter;\n    int              iteration = 0;\n\n    return_code = OS_SUCCESS;\n\n    OS_LogProbe(\"OS_CloseAllFiles: entry. iter_addr=%p\", (void *)&iter);\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    OS_LogProbe(\"OS_CloseAllFiles: after OS_ObjectIdIterateActive\");\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        iteration++;\n        OS_LogProbe(\"OS_CloseAllFiles: iterator advanced (iteration=%d)\", iteration);\n\n        /* call OS_close() on the entry referred to by the iterator */\n        close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n        OS_LogProbe(\"OS_CloseAllFiles: OS_ObjectIdIteratorProcessEntry returned %d (iteration=%d)\", close_code, iteration);\n\n        if (close_code != OS_SUCCESS)\n        {\n            return_code = close_code;\n            OS_LogProbe(\"OS_CloseAllFiles: return_code updated to %d (iteration=%d)\", return_code, iteration);\n        }\n    }\n\n    OS_LogProbe(\"OS_CloseAllFiles: iterator loop complete after %d iterations\", iteration);\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_LogProbe(\"OS_CloseAllFiles: after OS_ObjectIdIteratorDestroy, returning %d\", return_code);\n\n    return return_code;\n}\n"
}