{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1) can read up to N = sizeof(TestNameField)-1 bytes from the source. If TestName points to a character array that is not NUL-terminated within those N bytes (for example a 4-byte buffer {'a','b','c','d'} with no '\\0' while N is 31), strncpy will read beyond the bounds of the source object, causing an out-of-bounds access and violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_NewNode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2367.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_NewNode as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_NewNode:\n```c\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n```\n</target_code>\nPlease provide the modified UtList_NewNode code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n\n/*\n * Modified UtList_NewNode with probe logging to /tmp/logs/2367.txt.\n * Preserves original logic; inserts logging before/after allocation and memcpy\n * and captures a small sample of source bytes (up to 32 or DataSize) for evidence.\n *\n * NOTE: This file intentionally does not define types such as UtListNode_t or\n * uint32 which are assumed to be present in the surrounding codebase. Only\n * the function and probe logic are added here.\n */\n\nstatic void UtList_LogProbe_Header(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/2367.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"%s\\n\", msg);\n        fclose(f);\n    }\n}\n\nstatic void UtList_LogProbe_Format(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/2367.txt\", \"a\");\n    if (!f) return;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    size_t alloc_size = sizeof(union NodeAllocator) + (size_t)DataSize;\n\n    /* Log entry: function called and parameters */\n    UtList_LogProbe_Format(\"[UtList_NewNode] called: Data=%p, DataSize=%u, alloc_size=%zu\", Data, (unsigned)DataSize, alloc_size);\n\n    AllocNode = malloc(alloc_size);\n\n    /* Log allocation result */\n    UtList_LogProbe_Format(\"[UtList_NewNode] malloc returned: %p\", (void *)AllocNode);\n\n    /* Log the memset operation about to be performed (size preserved as original) */\n    UtList_LogProbe_Format(\"[UtList_NewNode] memset header size: %zu (only header, not payload)\", sizeof(union NodeAllocator));\n\n    /* Preserve original behavior: zero only the header portion */\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n\n    /* Prepare a small sample of the source data for logging. The sample length is\n     * limited to min(DataSize, 32) so that any reads performed for logging do not\n     * exceed what the original memcpy may read (which is DataSize). This avoids\n     * introducing additional out-of-bounds reads beyond those already present in\n     * the original code path. */\n    {\n        unsigned int sample_len = (DataSize < (uint32)32u) ? (unsigned int)DataSize : 32u;\n        unsigned char sample[32];\n        if ((Data != NULL) && (sample_len > 0u))\n        {\n            /* Copy a sample of the source for logging (this may itself read up to sample_len bytes).\n             * This is intentionally <= DataSize to avoid introducing extra out-of-bounds reads beyond the\n             * forthcoming memcpy(AllocNode->Node.Data, Data, DataSize). */\n            memcpy(sample, Data, sample_len);\n\n            /* Log hex and printable representation of the sample */\n            UtList_LogProbe_Format(\"[UtList_NewNode] source sample_len=%u\", sample_len);\n            {\n                FILE *f = fopen(\"/tmp/logs/2367.txt\", \"a\");\n                if (f)\n                {\n                    fprintf(f, \"[UtList_NewNode] source sample hex: \");\n                    for (unsigned int i = 0u; i < sample_len; ++i)\n                    {\n                        fprintf(f, \"%02x \", (unsigned int)sample[i]);\n                    }\n                    fprintf(f, \"\\n\");\n\n                    fprintf(f, \"[UtList_NewNode] source sample ascii: \");\n                    for (unsigned int i = 0u; i < sample_len; ++i)\n                    {\n                        unsigned char c = sample[i];\n                        if ((c >= 32u) && (c <= 126u))\n                        {\n                            fputc((int)c, f);\n                        }\n                        else\n                        {\n                            fputc('.', f);\n                        }\n                    }\n                    fprintf(f, \"\\n\");\n                    fclose(f);\n                }\n            }\n        }\n        else\n        {\n            UtList_LogProbe_Format(\"[UtList_NewNode] no source sample (Data=%p, sample_len=%u)\", Data, sample_len);\n        }\n    }\n\n    /* Log that we are about to perform the memcpy which is the site that can read DataSize bytes */\n    UtList_LogProbe_Format(\"[UtList_NewNode] performing memcpy to node payload at %p (size=%u)\", (void *)((char *)AllocNode + sizeof(union NodeAllocator)), (unsigned)DataSize);\n\n    /* Original payload setup and copy (preserved) */\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    /* After copy, log a small sample of the destination payload */\n    {\n        unsigned int sample_len = (DataSize < (uint32)32u) ? (unsigned int)DataSize : 32u;\n        unsigned char dst_sample[32];\n        if (sample_len > 0u)\n        {\n            memcpy(dst_sample, AllocNode->Node.Data, sample_len);\n            FILE *f = fopen(\"/tmp/logs/2367.txt\", \"a\");\n            if (f)\n            {\n                fprintf(f, \"[UtList_NewNode] dest sample hex: \");\n                for (unsigned int i = 0u; i < sample_len; ++i)\n                {\n                    fprintf(f, \"%02x \", (unsigned int)dst_sample[i]);\n                }\n                fprintf(f, \"\\n\");\n\n                fprintf(f, \"[UtList_NewNode] dest sample ascii: \");\n                for (unsigned int i = 0u; i < sample_len; ++i)\n                {\n                    unsigned char c = dst_sample[i];\n                    if ((c >= 32u) && (c <= 126u))\n                    {\n                        fputc((int)c, f);\n                    }\n                    else\n                    {\n                        fputc('.', f);\n                    }\n                }\n                fprintf(f, \"\\n\");\n                fclose(f);\n            }\n        }\n        else\n        {\n            UtList_LogProbe_Format(\"[UtList_NewNode] dest sample_len==0\");\n        }\n    }\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    UtList_LogProbe_Format(\"[UtList_NewNode] node initialized at %p (Node.Data=%p, Node.DataSize=%u)\", (void *)&AllocNode->Node, AllocNode->Node.Data, (unsigned)AllocNode->Node.DataSize);\n\n    return &AllocNode->Node;\n}\n"
}