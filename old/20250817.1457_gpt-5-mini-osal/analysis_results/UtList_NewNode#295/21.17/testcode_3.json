{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf malloc fails (returns NULL) then memset(AllocNode, 0, sizeof(union NodeAllocator)) will dereference a NULL pointer and access memory out of bounds. Also if the expression sizeof(union NodeAllocator) + DataSize passed to malloc overflows (DataSize very large) the allocated size may be smaller than sizeof(union NodeAllocator), causing the subsequent memset to write beyond the allocated object. In those cases the use of memset can access beyond the bounds of the object referenced by AllocNode, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_NewNode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2367.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_NewNode as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_NewNode:\n```c\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n```\n</target_code>\nPlease provide the modified UtList_NewNode code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/*\n * Probe logging helper: append a single line with key state to the log file.\n * Keep implementation minimal so it does not change the original control flow.\n */\nstatic void UtList_LogProbe(const char *stage, size_t header_size, size_t data_size, size_t total_size, const void *alloc_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/2367.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print stage, sizes and pointer value. Do not dereference alloc_ptr. */\n        (void)fprintf(f, \"%s: header_size=%zu, data_size=%zu, total_size=%zu, alloc_ptr=%p\\n\",\n                      stage, header_size, data_size, total_size, alloc_ptr);\n        (void)fclose(f);\n    }\n}\n\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    /* Preserve original allocation logic but capture computed sizes for logging. */\n    size_t header_size = sizeof(union NodeAllocator);\n    size_t data_size = (size_t)DataSize;\n    size_t total_size = header_size + data_size;\n\n    /* Log sizes before malloc to capture potential overflow / suspicious values. */\n    UtList_LogProbe(\"before_malloc\", header_size, data_size, total_size, NULL);\n\n    AllocNode = malloc(total_size);\n\n    /* Log result of malloc so caller can reproduce NULL or undersized allocations. */\n    UtList_LogProbe(\"after_malloc\", header_size, data_size, total_size, (const void *)AllocNode);\n\n    /* Log immediately before the memset that can trigger the violation if AllocNode is NULL\n       or if total_size < header_size due to overflow. Do not alter the original behavior. */\n    UtList_LogProbe(\"before_memset\", header_size, data_size, total_size, (const void *)AllocNode);\n\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n\n    /* If execution continues, log after memset (won't be reached if memset crashed). */\n    UtList_LogProbe(\"after_memset\", header_size, data_size, total_size, (const void *)AllocNode);\n\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n"
}