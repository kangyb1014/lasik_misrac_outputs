{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'void *Data' is used only as the source for memcpy (read-only) and therefore can and should be declared as 'const void *Data'. In the fragment memcpy(AllocNode->Node.Data, Data, DataSize); a non-const pointer is used where a const-qualified pointer is possible (the source argument), so Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_NewNode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2363.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_NewNode as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_NewNode:\n```c\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n```\n</target_code>\nPlease provide the modified UtList_NewNode code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Minimal type definitions so this test code is compilable. */\ntypedef uint32_t uint32;\n\ntypedef struct UtListNode_tag\n{\n    void *Data;\n    uint32 DataSize;\n    struct UtListNode_tag *Next;\n    struct UtListNode_tag *Prev;\n} UtListNode_t;\n\n/*\n * UtList_NewNode with inserted logging probes.\n * Logs control flow and state relevant to the memcpy source argument (Data)\n * into the file /tmp/logs/2363.txt so other agents can reproduce the\n * scenario where a non-const pointer is used as the source for memcpy.\n */\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    /* Open log file (append) and write initial probe information. */\n    FILE *log = fopen(\"/tmp/logs/2363.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"--- UtList_NewNode ENTRY ---\\n\");\n        fprintf(log, \"Data (source ptr): %p\\n\", (void *)Data);\n        fprintf(log, \"DataSize: %u\\n\", (unsigned)DataSize);\n    }\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"malloc returned: %p (requested %zu bytes)\\n\",\n                (void *)AllocNode,\n                sizeof(union NodeAllocator) + (size_t)DataSize);\n    }\n\n    /* Preserve original behavior: still zero the union header only. */\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n\n    /* Compute data storage pointer inside allocated block. */\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n\n    if (log != NULL)\n    {\n        fprintf(log, \"AllocNode address: %p\\n\", (void *)AllocNode);\n        fprintf(log, \"Allocated node payload addr (&AllocNode[1]): %p\\n\",\n                (void *)AllocNode->Node.Data);\n\n        /* Log first up to 64 bytes at source pointer (if readable). */\n        if (Data != NULL && DataSize > 0)\n        {\n            const unsigned char *bytes = (const unsigned char *)Data;\n            unsigned int to_dump = (DataSize > 64u) ? 64u : (unsigned int)DataSize;\n            fprintf(log, \"Dumping first %u bytes of source Data (%p):\\n\", to_dump, (void *)Data);\n            for (unsigned int i = 0; i < to_dump; ++i)\n            {\n                fprintf(log, \"%02X \", bytes[i]);\n                if (((i + 1) % 16) == 0)\n                {\n                    fprintf(log, \"\\n\");\n                }\n            }\n            if ((to_dump % 16) != 0)\n            {\n                fprintf(log, \"\\n\");\n            }\n        }\n        else\n        {\n            fprintf(log, \"No source data to dump (Data is NULL or DataSize==0).\\n\");\n        }\n\n        /* Log intent to call memcpy with these parameters. */\n        fprintf(log, \"About to call memcpy(dest=%p, src=%p, n=%u)\\n\",\n                (void *)AllocNode->Node.Data, (void *)Data, (unsigned)DataSize);\n    }\n\n    /* Perform the copy exactly as original code. */\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"memcpy completed.\\n\");\n\n        /* Log the first up to 64 bytes of the destination to confirm copy. */\n        if (AllocNode->Node.Data != NULL && AllocNode->Node.DataSize > 0)\n        {\n            const unsigned char *dst_bytes = (const unsigned char *)AllocNode->Node.Data;\n            unsigned int to_dump = (AllocNode->Node.DataSize > 64u) ? 64u : (unsigned int)AllocNode->Node.DataSize;\n            fprintf(log, \"Dumping first %u bytes of destination (%p):\\n\", to_dump, (void *)AllocNode->Node.Data);\n            for (unsigned int i = 0; i < to_dump; ++i)\n            {\n                fprintf(log, \"%02X \", dst_bytes[i]);\n                if (((i + 1) % 16) == 0)\n                {\n                    fprintf(log, \"\\n\");\n                }\n            }\n            if ((to_dump % 16) != 0)\n            {\n                fprintf(log, \"\\n\");\n            }\n        }\n\n        fprintf(log, \"--- UtList_NewNode EXIT (about to init links & return) ---\\n\\n\");\n        fclose(log);\n    }\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n"
}