{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'Data' is declared as void * but is only read (used as the source for memcpy) and is not modified inside UtList_NewNode. According to MISRA C 2023 Rule 8.13, such a pointer should be declared to point to a const-qualified type. The function should be declared as: UtListNode_t *UtList_NewNode(const void *Data, uint32 DataSize).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_NewNode code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2363.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_NewNode as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_NewNode:\n```c\nUtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    AllocNode = malloc(sizeof(union NodeAllocator) + DataSize);\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    return &AllocNode->Node;\n}\n```\n</target_code>\nPlease provide the modified UtList_NewNode code.\n",
  "test_code": "UtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    FILE *fp = fopen(\"/tmp/logs/2363.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"UtList_NewNode ENTER: Data=%p DataSize=%u\\n\", (void *)Data, (unsigned)DataSize);\n    }\n\n    union NodeAllocator\n    {\n        UtListNode_t Node;\n        double       AlignDbl;\n        void *       AlignPtr;\n        long         AlignLong;\n    } * AllocNode;\n\n    size_t alloc_size = sizeof(union NodeAllocator) + (size_t)DataSize;\n    if (fp != NULL)\n    {\n        fprintf(fp, \"Requested allocation size: %zu\\n\", alloc_size);\n    }\n\n    AllocNode = malloc(alloc_size);\n    if (fp != NULL)\n    {\n        fprintf(fp, \"malloc returned: %p\\n\", (void *)AllocNode);\n    }\n\n    /* Preserve original behavior: perform the same memset as original code */\n    memset(AllocNode, 0, sizeof(union NodeAllocator));\n\n    AllocNode->Node.Data     = &AllocNode[1];\n    AllocNode->Node.DataSize = DataSize;\n\n    if (fp != NULL)\n    {\n        fprintf(fp, \"Node.Data set to: %p Node.DataSize=%u\\n\", (void *)AllocNode->Node.Data, (unsigned)AllocNode->Node.DataSize);\n\n        /* Log a small sample of the source data (up to 64 bytes) for evidence. */\n        unsigned int sample_len = (DataSize > 64u) ? 64u : (unsigned)DataSize;\n        if ((Data != NULL) && (sample_len > 0u))\n        {\n            const unsigned char *src = (const unsigned char *)Data;\n            unsigned int i;\n            fprintf(fp, \"Source sample (%u bytes):\", sample_len);\n            for (i = 0u; i < sample_len; i++)\n            {\n                fprintf(fp, \" %02X\", (unsigned)src[i]);\n            }\n            fprintf(fp, \"\\n\");\n        }\n        else\n        {\n            fprintf(fp, \"Source sample: Data is NULL or size is zero\\n\");\n        }\n\n        fprintf(fp, \"About to memcpy %u bytes from %p to %p\\n\", (unsigned)DataSize, (void *)Data, (void *)AllocNode->Node.Data);\n    }\n\n    memcpy(AllocNode->Node.Data, Data, DataSize);\n\n    if (fp != NULL)\n    {\n        unsigned int sample_len2 = (DataSize > 64u) ? 64u : (unsigned)DataSize;\n        if ((AllocNode->Node.Data != NULL) && (sample_len2 > 0u))\n        {\n            const unsigned char *dst = (const unsigned char *)AllocNode->Node.Data;\n            unsigned int i;\n            fprintf(fp, \"Destination sample after memcpy (%u bytes):\", sample_len2);\n            for (i = 0u; i < sample_len2; i++)\n            {\n                fprintf(fp, \" %02X\", (unsigned)dst[i]);\n            }\n            fprintf(fp, \"\\n\");\n\n            /* Compare the first sample_len2 bytes of source and destination */\n            if (Data != NULL)\n            {\n                const unsigned char *src = (const unsigned char *)Data;\n                unsigned int mismatch = 0u;\n                for (i = 0u; i < sample_len2; i++)\n                {\n                    if (src[i] != dst[i])\n                    {\n                        mismatch = 1u;\n                        break;\n                    }\n                }\n                fprintf(fp, \"Source vs Dest (first %u bytes): %s\\n\", sample_len2, (mismatch ? \"DIFFER\" : \"EQUAL\"));\n            }\n        }\n        else\n        {\n            fprintf(fp, \"Destination sample: Data pointer is NULL or size is zero\\n\");\n        }\n    }\n\n    AllocNode->Node.Next = &AllocNode->Node;\n    AllocNode->Node.Prev = &AllocNode->Node;\n\n    if (fp != NULL)\n    {\n        fprintf(fp, \"Returning node at %p\\n\", (void *)&AllocNode->Node);\n        fclose(fp);\n    }\n\n    return &AllocNode->Node;\n}\n"
}