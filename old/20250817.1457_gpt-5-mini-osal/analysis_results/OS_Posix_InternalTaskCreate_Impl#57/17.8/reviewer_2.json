{
  "user_message": "An agent A claimed that the following OS_Posix_InternalTaskCreate_Impl code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of OS_Posix_InternalTaskCreate_Impl.\n```c\nint32 OS_Posix_InternalTaskCreate_Impl(pthread_t *pthr, osal_priority_t priority, size_t stacksz,\n                                       PthreadFuncPtr_t entry, void *entry_arg)\n{\n    int                return_code = 0;\n    pthread_attr_t     custom_attr;\n    struct sched_param priority_holder;\n\n    /*\n     ** Initialize the pthread_attr structure.\n     ** The structure is used to set the stack and priority\n     */\n    memset(&custom_attr, 0, sizeof(custom_attr));\n    return_code = pthread_attr_init(&custom_attr);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_attr_init error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n     * Adjust the stack size parameter.\n     *\n     * POSIX has additional restrictions/limitations on the stack size of tasks that\n     * other RTOS environments may not have.  Specifically POSIX says that the stack\n     * size must be at least PTHREAD_STACK_MIN and may also need to be a multiple of the\n     * system page size.\n     *\n     * Rounding up means the user might get a bigger stack than they requested, but\n     * that should not break anything aside from consuming extra memory.\n     */\n    if (stacksz < PTHREAD_STACK_MIN)\n    {\n        stacksz = PTHREAD_STACK_MIN;\n    }\n\n    stacksz += POSIX_GlobalVars.PageSize - 1;\n    stacksz -= stacksz % POSIX_GlobalVars.PageSize;\n\n    /*\n    ** Set the Stack Size\n    */\n    return_code = pthread_attr_setstacksize(&custom_attr, stacksz);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_attr_setstacksize error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n    ** Set the thread to be joinable by default\n    */\n    return_code = pthread_attr_setdetachstate(&custom_attr, PTHREAD_CREATE_JOINABLE);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_attr_setdetachstate error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n    ** Test to see if the original main task scheduling priority worked.\n    ** If so, then also set the attributes for this task.  Otherwise attributes\n    ** are left at default.\n    */\n    if (POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        /*\n        ** Set the scheduling inherit attribute to EXPLICIT\n        */\n        return_code = pthread_attr_setinheritsched(&custom_attr, PTHREAD_EXPLICIT_SCHED);\n        if (return_code != 0)\n        {\n            OS_DEBUG(\"pthread_attr_setinheritsched error in OS_TaskCreate, errno = %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n        /*\n        ** Set the scheduling policy\n        ** The best policy is determined during initialization\n        */\n        return_code = pthread_attr_setschedpolicy(&custom_attr, POSIX_GlobalVars.SelectedRtScheduler);\n        if (return_code != 0)\n        {\n            OS_DEBUG(\"pthread_attr_setschedpolity error in OS_TaskCreate: %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n        /*\n        ** Set priority\n        */\n        return_code = pthread_attr_getschedparam(&custom_attr, &priority_holder);\n        if (return_code != 0)\n        {\n            OS_DEBUG(\"pthread_attr_getschedparam error in OS_TaskCreate: %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n        priority_holder.sched_priority = OS_PriorityRemap(priority);\n        return_code                    = pthread_attr_setschedparam(&custom_attr, &priority_holder);\n        if (return_code != 0)\n        {\n            OS_DEBUG(\"pthread_attr_setschedparam error in OS_TaskCreate: %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n    } /* End if user is root */\n\n    /*\n     ** Create thread\n     */\n    return_code = pthread_create(pthr, &custom_attr, entry, entry_arg);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_create error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n     ** Free the resources that are no longer needed\n     ** Since the task is now running - pthread_create() was successful -\n     ** Do not treat anything bad that happens after this point as fatal.\n     ** The task is running, after all - better to leave well enough alone.\n     */\n    return_code = pthread_attr_destroy(&custom_attr);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_attr_destroy error in OS_TaskCreate: %s\\n\", strerror(return_code));\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The value parameter 'stacksz' is modified inside the function (e.g. the statement `stacksz -= stacksz % POSIX_GlobalVars.PageSize;` and earlier assignments like `stacksz = PTHREAD_STACK_MIN;` and `stacksz += POSIX_GlobalVars.PageSize - 1;`). Modifying a non-pointer function parameter violates MISRA C 2023 Rule 17.8. Use a local copy (e.g. `size_t local_stacksz = stacksz;`) and modify that instead.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *fp;\n\n    /* Try to create the logs directory if needed. Ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    fp = fopen(\"/tmp/logs/461.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* If logging fails, do not disturb original behavior. */\n    }\n\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_Posix_InternalTaskCreate_Impl(pthread_t *pthr, osal_priority_t priority, size_t stacksz,\n                                       PthreadFuncPtr_t entry, void *entry_arg)\n{\n    int                return_code = 0;\n    pthread_attr_t     custom_attr;\n    struct sched_param priority_holder;\n\n    /* Log function entry and initial parameter state. */\n    probe_log(\"ENTER: OS_Posix_InternalTaskCreate_Impl: initial stacksz=%zu, priority=%d, pthr=%p, entry=%p, entry_arg=%p\",\n              stacksz, (int)priority, (void *)pthr, (void *)entry, entry_arg);\n\n    /*\n     ** Initialize the pthread_attr structure.\n     ** The structure is used to set the stack and priority\n     */\n    memset(&custom_attr, 0, sizeof(custom_attr));\n    return_code = pthread_attr_init(&custom_attr);\n    if (return_code != 0)\n    {\n        probe_log(\"ERROR: pthread_attr_init failed: %s (errno=%d)\", strerror(return_code), return_code);\n        OS_DEBUG(\"pthread_attr_init error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n     * Adjust the stack size parameter.\n     *\n     * POSIX has additional restrictions/limitations on the stack size of tasks that\n     * other RTOS environments may not have.  Specifically POSIX says that the stack\n     * size must be at least PTHREAD_STACK_MIN and may also need to be a multiple of the\n     * system page size.\n     *\n     * Rounding up means the user might get a bigger stack than they requested, but\n     * that should not break anything aside from consuming extra memory.\n     */\n    probe_log(\"STATE: before adjustment stacksz=%zu, PTHREAD_STACK_MIN=%zu, PageSize=%zu\",\n              stacksz, (size_t)PTHREAD_STACK_MIN, (size_t)POSIX_GlobalVars.PageSize);\n\n    if (stacksz < PTHREAD_STACK_MIN)\n    {\n        probe_log(\"PATH: stacksz < PTHREAD_STACK_MIN (was %zu), setting to PTHREAD_STACK_MIN=%zu\",\n                  stacksz, (size_t)PTHREAD_STACK_MIN);\n        stacksz = PTHREAD_STACK_MIN;\n        probe_log(\"STATE: after enforcing min stacksz=%zu\", stacksz);\n    }\n\n    probe_log(\"ACTION: adding PageSize-1: stacksz (before)=%zu, add=%zu\",\n              stacksz, (size_t)(POSIX_GlobalVars.PageSize - 1));\n    stacksz += POSIX_GlobalVars.PageSize - 1;\n    probe_log(\"STATE: after +PageSize-1 stacksz=%zu\", stacksz);\n\n    probe_log(\"ACTION: rounding down to page multiple: stacksz (before)=%zu, PageSize=%zu\",\n              stacksz, (size_t)POSIX_GlobalVars.PageSize);\n    stacksz -= stacksz % POSIX_GlobalVars.PageSize;\n    probe_log(\"STATE: after rounding stacksz=%zu\", stacksz);\n\n    /*\n    ** Set the Stack Size\n    */\n    probe_log(\"CALL: pthread_attr_setstacksize with stacksz=%zu\", stacksz);\n    return_code = pthread_attr_setstacksize(&custom_attr, stacksz);\n    if (return_code != 0)\n    {\n        probe_log(\"ERROR: pthread_attr_setstacksize failed: %s (errno=%d)\", strerror(return_code), return_code);\n        OS_DEBUG(\"pthread_attr_setstacksize error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n    ** Set the thread to be joinable by default\n    */\n    return_code = pthread_attr_setdetachstate(&custom_attr, PTHREAD_CREATE_JOINABLE);\n    if (return_code != 0)\n    {\n        probe_log(\"ERROR: pthread_attr_setdetachstate failed: %s (errno=%d)\", strerror(return_code), return_code);\n        OS_DEBUG(\"pthread_attr_setdetachstate error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n    ** Test to see if the original main task scheduling priority worked.\n    ** If so, then also set the attributes for this task.  Otherwise attributes\n    ** are left at default.\n    */\n    if (POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        /*\n        ** Set the scheduling inherit attribute to EXPLICIT\n        */\n        return_code = pthread_attr_setinheritsched(&custom_attr, PTHREAD_EXPLICIT_SCHED);\n        if (return_code != 0)\n        {\n            probe_log(\"ERROR: pthread_attr_setinheritsched failed: %s (errno=%d)\", strerror(return_code), return_code);\n            OS_DEBUG(\"pthread_attr_setinheritsched error in OS_TaskCreate, errno = %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n        /*\n        ** Set the scheduling policy\n        ** The best policy is determined during initialization\n        */\n        return_code = pthread_attr_setschedpolicy(&custom_attr, POSIX_GlobalVars.SelectedRtScheduler);\n        if (return_code != 0)\n        {\n            probe_log(\"ERROR: pthread_attr_setschedpolicy failed: %s (errno=%d)\", strerror(return_code), return_code);\n            OS_DEBUG(\"pthread_attr_setschedpolity error in OS_TaskCreate: %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n        /*\n        ** Set priority\n        */\n        return_code = pthread_attr_getschedparam(&custom_attr, &priority_holder);\n        if (return_code != 0)\n        {\n            probe_log(\"ERROR: pthread_attr_getschedparam failed: %s (errno=%d)\", strerror(return_code), return_code);\n            OS_DEBUG(\"pthread_attr_getschedparam error in OS_TaskCreate: %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n        priority_holder.sched_priority = OS_PriorityRemap(priority);\n        probe_log(\"STATE: remapped priority to sched_priority=%d\", priority_holder.sched_priority);\n        return_code                    = pthread_attr_setschedparam(&custom_attr, &priority_holder);\n        if (return_code != 0)\n        {\n            probe_log(\"ERROR: pthread_attr_setschedparam failed: %s (errno=%d)\", strerror(return_code), return_code);\n            OS_DEBUG(\"pthread_attr_setschedparam error in OS_TaskCreate: %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n    } /* End if user is root */\n\n    /*\n     ** Create thread\n     */\n    probe_log(\"CALL: pthread_create (creating thread)\");\n    return_code = pthread_create(pthr, &custom_attr, entry, entry_arg);\n    if (return_code != 0)\n    {\n        probe_log(\"ERROR: pthread_create failed: %s (errno=%d)\", strerror(return_code), return_code);\n        OS_DEBUG(\"pthread_create error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    probe_log(\"INFO: pthread_create succeeded, thread handle @ %p\", (void *)pthr);\n\n    /*\n     ** Free the resources that are no longer needed\n     ** Since the task is now running - pthread_create() was successful -\n     ** Do not treat anything bad that happens after this point as fatal.\n     ** The task is running, after all - better to leave well enough alone.\n     */\n    return_code = pthread_attr_destroy(&custom_attr);\n    if (return_code != 0)\n    {\n        probe_log(\"WARN: pthread_attr_destroy returned error: %s (errno=%d)\", strerror(return_code), return_code);\n        OS_DEBUG(\"pthread_attr_destroy error in OS_TaskCreate: %s\\n\", strerror(return_code));\n    }\n\n    probe_log(\"EXIT: OS_Posix_InternalTaskCreate_Impl returning OS_SUCCESS\");\n\n    return OS_SUCCESS;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_Posix_InternalTaskCreate_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 forbids modifying non\u2011pointer function parameters. In OS_Posix_InternalTaskCreate_Impl the value parameter stacksz is modified multiple times (e.g. if (stacksz < PTHREAD_STACK_MIN) stacksz = PTHREAD_STACK_MIN; stacksz += POSIX_GlobalVars.PageSize - 1; stacksz -= stacksz % POSIX_GlobalVars.PageSize;). That is a direct violation of 17.8. The recommended fix (create a local variable such as size_t local_stacksz = stacksz and modify that, then pass local_stacksz to pthread_attr_setstacksize) would address the violation. (Note: pointer parameters such as pthr may be used to modify the object they point to, but the pointer itself must not be altered \u2014 this function does not modify the pointer variables themselves.)"
}