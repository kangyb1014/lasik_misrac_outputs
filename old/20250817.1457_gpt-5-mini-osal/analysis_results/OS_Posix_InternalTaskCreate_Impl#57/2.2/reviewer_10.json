{
  "user_message": "An agent A claimed that the following OS_Posix_InternalTaskCreate_Impl code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of OS_Posix_InternalTaskCreate_Impl.\n```c\nint32 OS_Posix_InternalTaskCreate_Impl(pthread_t *pthr, osal_priority_t priority, size_t stacksz,\n                                       PthreadFuncPtr_t entry, void *entry_arg)\n{\n    int                return_code = 0;\n    pthread_attr_t     custom_attr;\n    struct sched_param priority_holder;\n\n    /*\n     ** Initialize the pthread_attr structure.\n     ** The structure is used to set the stack and priority\n     */\n    memset(&custom_attr, 0, sizeof(custom_attr));\n    return_code = pthread_attr_init(&custom_attr);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_attr_init error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n     * Adjust the stack size parameter.\n     *\n     * POSIX has additional restrictions/limitations on the stack size of tasks that\n     * other RTOS environments may not have.  Specifically POSIX says that the stack\n     * size must be at least PTHREAD_STACK_MIN and may also need to be a multiple of the\n     * system page size.\n     *\n     * Rounding up means the user might get a bigger stack than they requested, but\n     * that should not break anything aside from consuming extra memory.\n     */\n    if (stacksz < PTHREAD_STACK_MIN)\n    {\n        stacksz = PTHREAD_STACK_MIN;\n    }\n\n    stacksz += POSIX_GlobalVars.PageSize - 1;\n    stacksz -= stacksz % POSIX_GlobalVars.PageSize;\n\n    /*\n    ** Set the Stack Size\n    */\n    return_code = pthread_attr_setstacksize(&custom_attr, stacksz);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_attr_setstacksize error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n    ** Set the thread to be joinable by default\n    */\n    return_code = pthread_attr_setdetachstate(&custom_attr, PTHREAD_CREATE_JOINABLE);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_attr_setdetachstate error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n    ** Test to see if the original main task scheduling priority worked.\n    ** If so, then also set the attributes for this task.  Otherwise attributes\n    ** are left at default.\n    */\n    if (POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        /*\n        ** Set the scheduling inherit attribute to EXPLICIT\n        */\n        return_code = pthread_attr_setinheritsched(&custom_attr, PTHREAD_EXPLICIT_SCHED);\n        if (return_code != 0)\n        {\n            OS_DEBUG(\"pthread_attr_setinheritsched error in OS_TaskCreate, errno = %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n        /*\n        ** Set the scheduling policy\n        ** The best policy is determined during initialization\n        */\n        return_code = pthread_attr_setschedpolicy(&custom_attr, POSIX_GlobalVars.SelectedRtScheduler);\n        if (return_code != 0)\n        {\n            OS_DEBUG(\"pthread_attr_setschedpolity error in OS_TaskCreate: %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n        /*\n        ** Set priority\n        */\n        return_code = pthread_attr_getschedparam(&custom_attr, &priority_holder);\n        if (return_code != 0)\n        {\n            OS_DEBUG(\"pthread_attr_getschedparam error in OS_TaskCreate: %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n        priority_holder.sched_priority = OS_PriorityRemap(priority);\n        return_code                    = pthread_attr_setschedparam(&custom_attr, &priority_holder);\n        if (return_code != 0)\n        {\n            OS_DEBUG(\"pthread_attr_setschedparam error in OS_TaskCreate: %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n    } /* End if user is root */\n\n    /*\n     ** Create thread\n     */\n    return_code = pthread_create(pthr, &custom_attr, entry, entry_arg);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_create error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n     ** Free the resources that are no longer needed\n     ** Since the task is now running - pthread_create() was successful -\n     ** Do not treat anything bad that happens after this point as fatal.\n     ** The task is running, after all - better to leave well enough alone.\n     */\n    return_code = pthread_attr_destroy(&custom_attr);\n    if (return_code != 0)\n    {\n        OS_DEBUG(\"pthread_attr_destroy error in OS_TaskCreate: %s\\n\", strerror(return_code));\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The OS_DEBUG macro is defined as empty (#define OS_DEBUG(__VA_ARGS__)), so the statement OS_DEBUG(\"pthread_attr_setstacksize error in OS_TaskCreate: %s\\n\", strerror(return_code)); produces no code and the call to strerror(return_code) is never executed. This means the operation (the debug print + strerror call) is effectively dead code \u2014 removing that line would not affect program behaviour \u2014 and therefore violates MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/458.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp prefix for easier correlation */\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        struct tm tm_buf;\n        if (localtime_r(&t, &tm_buf) != NULL)\n        {\n            char ts[64];\n            if (strftime(ts, sizeof(ts), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n            {\n                fprintf(f, \"%s \", ts);\n            }\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void probe_err(const char *context, int return_code)\n{\n    /* Capture both numeric code and strerror() message to reproduce the scenario\n     * where the original call to strerror() inside an empty OS_DEBUG macro would\n     * not be executed. Calling strerror here guarantees the message is created\n     * and logged for evidence. */\n    const char *msg = \"(null)\";\n    if (return_code != 0)\n    {\n        msg = strerror(return_code);\n        if (msg == NULL)\n        {\n            msg = \"(strerror returned NULL)\";\n        }\n    }\n    probe_logf(\"PROBE ERROR: %s: return_code=%d, strerror=\\\"%s\\\"\", context, return_code, msg);\n}\n\nint32 OS_Posix_InternalTaskCreate_Impl(pthread_t *pthr, osal_priority_t priority, size_t stacksz,\n                                       PthreadFuncPtr_t entry, void *entry_arg)\n{\n    int                return_code = 0;\n    pthread_attr_t     custom_attr;\n    struct sched_param priority_holder;\n\n    probe_logf(\"ENTER: OS_Posix_InternalTaskCreate_Impl pthr=%p priority=%d stacksz=%zu entry=%p entry_arg=%p\",\n               (void *)pthr, (int)priority, (size_t)stacksz, (void *)entry, entry_arg);\n\n    /*\n     ** Initialize the pthread_attr structure.\n     ** The structure is used to set the stack and priority\n     */\n    memset(&custom_attr, 0, sizeof(custom_attr));\n    return_code = pthread_attr_init(&custom_attr);\n    if (return_code != 0)\n    {\n        /* Probe and preserve original behavior */\n        probe_err(\"pthread_attr_init\", return_code);\n        OS_DEBUG(\"pthread_attr_init error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n     * Adjust the stack size parameter.\n     *\n     * POSIX has additional restrictions/limitations on the stack size of tasks that\n     * other RTOS environments may not have.  Specifically POSIX says that the stack\n     * size must be at least PTHREAD_STACK_MIN and may also need to be a multiple of the\n     * system page size.\n     *\n     * Rounding up means the user might get a bigger stack than they requested, but\n     * that should not break anything aside from consuming extra memory.\n     */\n    probe_logf(\"STACK ADJUST: original stacksz=%zu\", stacksz);\n    if (stacksz < PTHREAD_STACK_MIN)\n    {\n        stacksz = PTHREAD_STACK_MIN;\n    }\n\n    stacksz += POSIX_GlobalVars.PageSize - 1;\n    stacksz -= stacksz % POSIX_GlobalVars.PageSize;\n    probe_logf(\"STACK ADJUSTED: adjusted stacksz=%zu (PageSize=%zu)\", stacksz, (size_t)POSIX_GlobalVars.PageSize);\n\n    /*\n    ** Set the Stack Size\n    */\n    return_code = pthread_attr_setstacksize(&custom_attr, stacksz);\n    if (return_code != 0)\n    {\n        probe_err(\"pthread_attr_setstacksize\", return_code);\n        OS_DEBUG(\"pthread_attr_setstacksize error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n    ** Set the thread to be joinable by default\n    */\n    return_code = pthread_attr_setdetachstate(&custom_attr, PTHREAD_CREATE_JOINABLE);\n    if (return_code != 0)\n    {\n        probe_err(\"pthread_attr_setdetachstate\", return_code);\n        OS_DEBUG(\"pthread_attr_setdetachstate error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n    ** Test to see if the original main task scheduling priority worked.\n    ** If so, then also set the attributes for this task.  Otherwise attributes\n    ** are left at default.\n    */\n    probe_logf(\"PRIORITY PATH: EnableTaskPriorities=%d SelectedRtScheduler=%d\",\n               (int)POSIX_GlobalVars.EnableTaskPriorities,\n               (int)POSIX_GlobalVars.SelectedRtScheduler);\n\n    if (POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        /*\n        ** Set the scheduling inherit attribute to EXPLICIT\n        */\n        return_code = pthread_attr_setinheritsched(&custom_attr, PTHREAD_EXPLICIT_SCHED);\n        if (return_code != 0)\n        {\n            probe_err(\"pthread_attr_setinheritsched\", return_code);\n            OS_DEBUG(\"pthread_attr_setinheritsched error in OS_TaskCreate, errno = %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n        /*\n        ** Set the scheduling policy\n        ** The best policy is determined during initialization\n        */\n        return_code = pthread_attr_setschedpolicy(&custom_attr, POSIX_GlobalVars.SelectedRtScheduler);\n        if (return_code != 0)\n        {\n            probe_err(\"pthread_attr_setschedpolicy\", return_code);\n            OS_DEBUG(\"pthread_attr_setschedpolity error in OS_TaskCreate: %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n        /*\n        ** Set priority\n        */\n        return_code = pthread_attr_getschedparam(&custom_attr, &priority_holder);\n        if (return_code != 0)\n        {\n            probe_err(\"pthread_attr_getschedparam\", return_code);\n            OS_DEBUG(\"pthread_attr_getschedparam error in OS_TaskCreate: %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n        priority_holder.sched_priority = OS_PriorityRemap(priority);\n        probe_logf(\"PRIORITY MAP: requested=%d remapped=%d\", (int)priority, (int)priority_holder.sched_priority);\n        return_code                    = pthread_attr_setschedparam(&custom_attr, &priority_holder);\n        if (return_code != 0)\n        {\n            probe_err(\"pthread_attr_setschedparam\", return_code);\n            OS_DEBUG(\"pthread_attr_setschedparam error in OS_TaskCreate: %s\\n\", strerror(return_code));\n            return OS_ERROR;\n        }\n\n    } /* End if user is root */\n\n    /*\n     ** Create thread\n     */\n    probe_logf(\"CALL pthread_create: pthr=%p attr=%p entry=%p entry_arg=%p\", (void *)pthr, (void *)&custom_attr, (void *)entry, entry_arg);\n    return_code = pthread_create(pthr, &custom_attr, entry, entry_arg);\n    if (return_code != 0)\n    {\n        probe_err(\"pthread_create\", return_code);\n        OS_DEBUG(\"pthread_create error in OS_TaskCreate: %s\\n\", strerror(return_code));\n        return OS_ERROR;\n    }\n\n    /*\n     ** Free the resources that are no longer needed\n     ** Since the task is now running - pthread_create() was successful -\n     ** Do not treat anything bad that happens after this point as fatal.\n     ** The task is running, after all - better to leave well enough alone.\n     */\n    return_code = pthread_attr_destroy(&custom_attr);\n    if (return_code != 0)\n    {\n        /* Non-fatal: log for diagnostics */\n        probe_err(\"pthread_attr_destroy\", return_code);\n        OS_DEBUG(\"pthread_attr_destroy error in OS_TaskCreate: %s\\n\", strerror(return_code));\n    }\n\n    probe_logf(\"EXIT: OS_Posix_InternalTaskCreate_Impl result=%d\", OS_SUCCESS);\n    return OS_SUCCESS;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_Posix_InternalTaskCreate_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A's scenario is not a correct violation of MISRA C 2023 Rule 2.2. Rule 2.2 targets \"dead code\": operations that are executed but could be removed without changing program behaviour. In the reported case the call to strerror(...) appears only as an argument to the OS_DEBUG(...) macro. If OS_DEBUG is defined as an empty macro (e.g. #define OS_DEBUG(...)), the entire macro invocation \u2014 including the strerror(...) expression \u2014 is removed by the preprocessor and therefore is not executed in that build. That means it is not an operation that is executed but redundant; it simply does not exist in the translation unit that is compiled. Note 2 to Rule 2.2 distinguishes unreachable code from dead code; neither situation here meets the rule's definition of executed-but-removable dead code. (If a build enables OS_DEBUG, the strerror call would be executed in that build; its presence in the source therefore cannot be characterized as \"executed dead code\" across all builds.)\n\nIf the real concern is inadvertent removal of side-effecting expressions or inconsistent behaviour across builds, the fix is to avoid putting expressions with side effects in arguments to a macro that may be defined empty, or to change the debug macro pattern so arguments are not evaluated unexpectedly. But as written, the situation described does not violate MISRA C:2023 Rule 2.2."
}