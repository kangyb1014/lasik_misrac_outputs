{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nUtList_Add is declared with a non-const data parameter (void *Data) and is called with &UtTestDataBaseEntry. If UtList_Add only reads (copies) the supplied data into a newly allocated list node (as suggested by UtList_NewNode/UtList_Insert_Before), the parameter should be declared as const void *Data so callers provide a pointer to a const-qualified type when possible. As written the pointer is non-const-qualified \u2192 this violates MISRA C 2023 Rule 8.13. Recommended fix: change UtList_Add (and any internal helpers that do not modify the source) to accept const void *Data.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_AddCommon code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2595.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_AddCommon as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_AddCommon:\n```c\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    UT_BSP_Lock();\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n    UT_BSP_Unlock();\n}\n```\n</target_code>\nPlease provide the modified UtTest_AddCommon code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe logging helper: append logs to /tmp/logs/2595.txt */\nstatic void UtTest_LogAppend(const char *fmt, ...)\n{\n    FILE *fp;\n    va_list ap;\n\n    /* Ensure directory exists; ignore errors if it fails. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    fp = fopen(\"/tmp/logs/2595.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Simple timestamp (seconds since epoch) */\n    (void)fprintf(fp, \"[%lld] \", (long long)time(NULL));\n\n    va_start(ap, fmt);\n    (void)vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    (void)fprintf(fp, \"\\n\");\n    (void)fflush(fp);\n    (void)fclose(fp);\n}\n\n/* Modified UtTest_AddCommon with logging probes.\n * Preserves original logic and behavior; only adds logging before/after key operations.\n */\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    /* Log state before acquiring lock and before calling UtList_Add. */\n    UtTest_LogAppend(\"ENTER: UtTest_AddCommon: TestName='%s'\", (TestName != NULL) ? TestName : \"(null)\");\n\n    /* Log whether function pointers are NULL (avoid converting function pointers to data pointers). */\n    UtTest_LogAppend(\"  Test pointer is %s\", (Test != NULL) ? \"non-NULL\" : \"NULL\");\n    UtTest_LogAppend(\"  Setup pointer is %s\", (Setup != NULL) ? \"non-NULL\" : \"NULL\");\n    UtTest_LogAppend(\"  Teardown pointer is %s\", (Teardown != NULL) ? \"non-NULL\" : \"NULL\");\n\n    /* Log the address of the data being passed to UtList_Add, the size and entry type. */\n    UtTest_LogAppend(\"  Data address (stack) = %p\", (const void *)&UtTestDataBaseEntry);\n    UtTest_LogAppend(\"  Data size = %zu, EntryType = %u\", sizeof(UtTestDataBaseEntry_t), (unsigned)EntryType);\n\n    UT_BSP_Lock();\n\n    UtTest_LogAppend(\"  Acquired lock, calling UtList_Add with Data=%p\", (const void *)&UtTestDataBaseEntry);\n\n    /* Original call retained exactly; important for reproducing the scenario where UtList_Add takes a void * Data. */\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n\n    UtTest_LogAppend(\"  Returned from UtList_Add\");\n\n    UT_BSP_Unlock();\n\n    UtTest_LogAppend(\"EXIT: UtTest_AddCommon\");\n}\n"
}