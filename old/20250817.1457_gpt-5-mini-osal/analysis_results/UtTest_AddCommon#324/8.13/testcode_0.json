{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'Data' is declared as 'void *Data' but in UtList_Add it is only passed to UtList_NewNode (presumably for copying) and not modified. Therefore 'Data' should be declared as 'const void *Data' (and UtList_NewNode's prototype updated accordingly). This violates MISRA C 2023 Rule 8.13 which requires pointers to point to const-qualified types whenever possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_AddCommon code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2595.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_AddCommon as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_AddCommon:\n```c\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    UT_BSP_Lock();\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n    UT_BSP_Unlock();\n}\n```\n</target_code>\nPlease provide the modified UtTest_AddCommon code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper: log state to file for debugging/control-flow tracing. */\nstatic void UtTest_LogState(const char *tag, const void *entry_ptr, const void *list_ptr, size_t size,\n                            const char *TestName, uint32_t EntryType, const char entry_testname[])\n{\n    FILE *f = fopen(\"/tmp/logs/2595.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"--- UtTest_AddCommon: %s ---\\n\", tag);\n    fprintf(f, \"Local entry address: %p\\n\", entry_ptr);\n    fprintf(f, \"DataBasePtr (list head) address: %p\\n\", list_ptr);\n    fprintf(f, \"Entry size: %zu\\n\", size);\n    fprintf(f, \"EntryType: %u\\n\", (unsigned)EntryType);\n    fprintf(f, \"TestName arg: %s\\n\", (TestName != NULL) ? TestName : \"(NULL)\");\n    fprintf(f, \"Copied TestName in entry: %s\\n\", (entry_testname[0] != '\\0') ? entry_testname : \"(empty)\");\n\n    /* Log whether function pointers are NULL or not (avoid casting function pointers to object pointers). */\n    /* The actual struct's function pointers are not printed as addresses to avoid undefined conversions. */\n    fprintf(f, \"Test pointer: %s\\n\", (((const void * const *)entry_ptr)[0] != NULL) ? \"NON-NULL\" : \"NULL\");\n\n    /* Hex dump start of the entry structure for content inspection (safe because entry was zeroed earlier).\n       Only print up to 32 bytes to avoid excessive output. */\n    {\n        const unsigned char *bytes = (const unsigned char *)entry_ptr;\n        size_t to_print = (size < 32u) ? size : 32u;\n        fprintf(f, \"Entry bytes (first %zu):\", to_print);\n        for (size_t i = 0; i < to_print; ++i)\n        {\n            fprintf(f, \" %02X\", (unsigned)bytes[i]);\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fprintf(f, \"--- End %s ---\\n\\n\", tag);\n    fclose(f);\n}\n\n/* Modified UtTest_AddCommon with probes inserted. Preserves original logic/ordering. */\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32_t EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    /* Log state before attempting to add to the list. This helps reproduce/control the scenario where\n       a non-const void * data pointer is passed through UtList_Add and onward. */\n    UtTest_LogState(\"Before Lock\", (const void *)&UtTestDataBaseEntry,\n                    (const void *)UtAssert_Global.DataBasePtr, sizeof(UtTestDataBaseEntry_t), TestName, EntryType,\n                    UtTestDataBaseEntry.TestName);\n\n    UT_BSP_Lock();\n\n    /* Log state while locked, immediately before the list operation. */\n    UtTest_LogState(\"While Locked - Before UtList_Add\", (const void *)&UtTestDataBaseEntry,\n                    (const void *)UtAssert_Global.DataBasePtr, sizeof(UtTestDataBaseEntry_t), TestName, EntryType,\n                    UtTestDataBaseEntry.TestName);\n\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n\n    /* Log state after the list operation (still locked) to capture any changes that may have occurred. */\n    UtTest_LogState(\"While Locked - After UtList_Add\", (const void *)&UtTestDataBaseEntry,\n                    (const void *)UtAssert_Global.DataBasePtr, sizeof(UtTestDataBaseEntry_t), TestName, EntryType,\n                    UtTestDataBaseEntry.TestName);\n\n    UT_BSP_Unlock();\n\n    /* Final log after unlocking. */\n    UtTest_LogState(\"After Unlock\", (const void *)&UtTestDataBaseEntry,\n                    (const void *)UtAssert_Global.DataBasePtr, sizeof(UtTestDataBaseEntry_t), TestName, EntryType,\n                    UtTestDataBaseEntry.TestName);\n}\n"
}