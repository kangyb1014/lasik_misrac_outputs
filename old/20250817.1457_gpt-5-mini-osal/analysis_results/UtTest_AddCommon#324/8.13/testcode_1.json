{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nUtList_Add takes a data pointer as void *Data and forwards it to UtList_NewNode(Data, ...). If the pointed data (e.g. &UtTestDataBaseEntry) is only read/copied and not modified by UtList_Add/UtList_NewNode, the parameter types should be declared as const void * (and propagated to UtList_NewNode). Using plain void * where a const-qualified pointer is possible violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_AddCommon code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2595.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_AddCommon as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_AddCommon:\n```c\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    UT_BSP_Lock();\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n    UT_BSP_Unlock();\n}\n```\n</target_code>\nPlease provide the modified UtTest_AddCommon code.\n",
  "test_code": "void UtTest_AddCommon_Log(const char *Stage, const void *DataPtr, uint32 Size, uint32 EntryType, const char *TestName)\n{\n    /* Probe: log control path and selected state to a file so other agents can reproduce the scenario */\n    FILE *Log = fopen(\"/tmp/logs/2595.txt\", \"a\");\n    if (Log == NULL)\n    {\n        return;\n    }\n\n    /* Log header information */\n    fprintf(Log, \"Stage: %s\\n\", Stage);\n    fprintf(Log, \"  DataPtr: %p\\n\", DataPtr);\n    fprintf(Log, \"  Size: %u\\n\", (unsigned int)Size);\n    fprintf(Log, \"  EntryType: %u\\n\", (unsigned int)EntryType);\n    fprintf(Log, \"  TestName: %s\\n\", (TestName != NULL) ? TestName : \"(null)\");\n\n    /* Log up to the first 64 bytes of the data payload in hex to show contents (read-only) */\n    {\n        const unsigned char *Bytes = (const unsigned char *)DataPtr;\n        uint32 Limit = (Size < 64U) ? Size : 64U;\n        unsigned int i;\n\n        fprintf(Log, \"  DataHex: \");\n        for (i = 0U; i < Limit; ++i)\n        {\n            fprintf(Log, \"%02X\", Bytes[i]);\n            if ((i + 1U) % 16U == 0U)\n            {\n                fprintf(Log, \"\\n           \");\n            }\n            else\n            {\n                fprintf(Log, \" \");\n            }\n        }\n        if (Limit == 0U)\n        {\n            fprintf(Log, \"(empty)\");\n        }\n        fprintf(Log, \"\\n\");\n    }\n\n    fflush(Log);\n    fclose(Log);\n}\n\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    /* Log the local stack entry prior to adding it to the list. Use a const pointer to emphasize\n       that the data is only read/copied by UtList_Add/UtList_NewNode in the violation scenario. */\n    UtTest_AddCommon_Log(\"before_add\", (const void *)&UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType, TestName);\n\n    UT_BSP_Lock();\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n    UT_BSP_Unlock();\n\n    /* Log after the add call to capture post-call state and confirm what was passed. */\n    UtTest_AddCommon_Log(\"after_add\", (const void *)&UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType, TestName);\n}\n"
}