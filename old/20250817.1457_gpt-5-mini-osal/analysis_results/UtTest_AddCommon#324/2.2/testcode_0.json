{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to memset(AllocNode, 0, sizeof(union NodeAllocator)) is executed but redundant: immediately afterwards the Node members are overwritten (Node.Data, Node.DataSize, Node.Next, Node.Prev are all set). Removing that memset would not affect program behaviour (assuming malloc succeeds), so it is an instance of dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_AddCommon code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2594.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_AddCommon as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_AddCommon:\n```c\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    UT_BSP_Lock();\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n    UT_BSP_Unlock();\n}\n```\n</target_code>\nPlease provide the modified UtTest_AddCommon code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe helpers: append logs to /tmp/logs/2594.txt */\nstatic void UtTest_Logf(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/2594.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void UtTest_DumpHex(const void *buf, size_t len)\n{\n    const unsigned char *p = (const unsigned char *)buf;\n    size_t i;\n    FILE *f = fopen(\"/tmp/logs/2594.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n    /* limit the dump to a reasonable amount to avoid huge logs */\n    size_t max = (len > 128) ? 128 : len;\n    for (i = 0; i < max; ++i)\n    {\n        fprintf(f, \"%02X\", p[i]);\n        if (((i + 1) % 16) == 0)\n            fprintf(f, \"\\n\");\n        else\n            fprintf(f, \" \");\n    }\n    if (max % 16 != 0)\n        fprintf(f, \"\\n\");\n    if (len > max)\n        fprintf(f, \"... (total %zu bytes)\\n\", len);\n    fclose(f);\n}\n\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    /* Log entry and incoming parameter values */\n    UtTest_Logf(\"ENTER UtTest_AddCommon: Test=%p, Setup=%p, Teardown=%p, TestName=%s, EntryType=%u\",\n                (void *)Test, (void *)Setup, (void *)Teardown, (TestName ? TestName : \"(NULL)\"), (unsigned)EntryType);\n    UtTest_Logf(\"Local entry addr=%p, sizeof(entry)=%zu\", (void *)&UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry));\n\n    /* Record memory before memset (best-effort; may be uninitialized) */\n    UtTest_Logf(\"Memory snapshot before memset (first up to 128 bytes):\");\n    UtTest_DumpHex(&UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry));\n\n    /* Original initialization - kept to preserve behavior */\n    UtTest_Logf(\"Calling memset(&UtTestDataBaseEntry, 0, %zu)\", sizeof(UtTestDataBaseEntry));\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTest_Logf(\"memset returned\");\n\n    /* Log memory immediately after memset to show it was zeroed */\n    UtTest_Logf(\"Memory snapshot after memset (first up to 128 bytes):\");\n    UtTest_DumpHex(&UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry));\n\n    /* Populate the entry as in original code */\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    /* Log the values after they are set to demonstrate that the memseted bytes were overwritten */\n    UtTest_Logf(\"After populating fields: Test=%p, Setup=%p, Teardown=%p, TestName=%s\",\n                (void *)UtTestDataBaseEntry.Test, (void *)UtTestDataBaseEntry.Setup,\n                (void *)UtTestDataBaseEntry.Teardown,\n                (UtTestDataBaseEntry.TestName[0] != '\\0') ? UtTestDataBaseEntry.TestName : \"(empty)\");\n    UtTest_Logf(\"Memory snapshot after populating (first up to 128 bytes):\");\n    UtTest_DumpHex(&UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry));\n\n    UT_BSP_Lock();\n    UtTest_Logf(\"Calling UtList_Add(DataBasePtr=%p, entry=%p, size=%zu, EntryType=%u)\",\n                (void *)UtAssert_Global.DataBasePtr, (void *)&UtTestDataBaseEntry,\n                sizeof(UtTestDataBaseEntry_t), (unsigned)EntryType);\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n    UtTest_Logf(\"Returned from UtList_Add\");\n    UT_BSP_Unlock();\n\n    UtTest_Logf(\"EXIT UtTest_AddCommon\\n\");\n}\n"
}