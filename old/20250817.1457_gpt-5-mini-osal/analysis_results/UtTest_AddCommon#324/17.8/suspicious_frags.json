{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UtTest_AddCommon:\n```c\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    UT_BSP_Lock();\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n    UT_BSP_Unlock();\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function UtTest_AddCommon:\ntypedef struct\n{\n    void (*Test)(void);\n    void (*Setup)(void);\n    void (*Teardown)(void);\n\n    /* Note - the name entry should be long enough to support a GroupName.TestName pattern,\n     * hence why it uses double the OS_MAX_API_NAME length */\n    char TestName[OS_MAX_API_NAME * 2];\n} UtTestDataBaseEntry_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No function parameters are modified in the provided code. Specific points: \n- The assignments UtTestDataBaseEntry.Test = Test; UtTestDataBaseEntry.Setup = Setup; and UtTestDataBaseEntry.Teardown = Teardown; copy the parameter values into a local structure but do not alter the parameter variables themselves.\n- The TestName parameter is only read (checked for NULL and used as the source in strncpy). The call to strncpy modifies the local array UtTestDataBaseEntry.TestName, not the TestName pointer or the characters pointed to by TestName. (Even if the function being called could modify the pointee, the code here does not write through the TestName pointer.)\n- The EntryType parameter is passed by value to UtList_Add and is not reassigned in this function.\n- Calls to UT_BSP_Lock(), UtList_Add(...) and UT_BSP_Unlock() do not modify the parameter variables in this function.\n\nTherefore there are no fragments in the function that violate MISRA C 2023 Rule 17.8 (modifying a function parameter or reassigning a pointer parameter)."
}