{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe code tests 'if (status < 0)' after calling pthread_mutex_lock. On POSIX systems pthread_mutex_lock returns 0 on success or a positive error number on failure (never negative), so the 'status < 0' branch is effectively unreachable on a conforming implementation. This means the then-branch (BSP_DEBUG(...)) cannot be executed and therefore constitutes unreachable code, violating MISRA C 2023 Rule 2.1. (As a result, error cases with positive errno values would incorrectly follow the 'else' path and execute pthread_setcancelstate even though the mutex was not acquired.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_AddCommon code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2593.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_AddCommon as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_AddCommon:\n```c\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    UT_BSP_Lock();\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n    UT_BSP_Unlock();\n}\n```\n</target_code>\nPlease provide the modified UtTest_AddCommon code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <pthread.h>\n#include <stdint.h>\n\n/* Probe helper: append a log entry with control-flow and state info. */\nstatic void UtTest_LogProbe(const char *stage, const char *testName, uint32_t entryType)\n{\n    FILE *fp = fopen(\"/tmp/logs/2593.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Print stage, test name (or \"(null)\"), entry type and thread id */\n        fprintf(fp, \"UtTest_AddCommon: stage=%s, TestName=%s, EntryType=%u, thread=%lu\\n\",\n                (stage != NULL) ? stage : \"(null)\",\n                (testName != NULL) ? testName : \"(null)\",\n                (unsigned int)entryType,\n                (unsigned long)pthread_self());\n        fclose(fp);\n    }\n}\n\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    /* Log initial state before modifying the local entry */\n    UtTest_LogProbe(\"start\", TestName, EntryType);\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    /* Log just before attempting to lock the BSP */\n    UtTest_LogProbe(\"before_lock\", TestName, EntryType);\n\n    UT_BSP_Lock();\n\n    /* Log immediately after lock call to capture whether control returned from lock */\n    UtTest_LogProbe(\"after_lock\", TestName, EntryType);\n\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n\n    /* Log after adding to the list (while still holding the lock) */\n    UtTest_LogProbe(\"after_add\", TestName, EntryType);\n\n    UT_BSP_Unlock();\n\n    /* Log after unlocking */\n    UtTest_LogProbe(\"after_unlock\", TestName, EntryType);\n}\n"
}