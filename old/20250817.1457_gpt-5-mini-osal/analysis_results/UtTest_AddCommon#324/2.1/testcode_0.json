{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe code tests `if (status < 0)` after calling pthread_mutex_unlock(). POSIX pthread_mutex_unlock() returns 0 on success and a positive error number on failure, so status < 0 can never be true on conforming implementations. Therefore the BSP_DEBUG/error branch is effectively unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtTest_AddCommon code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2593.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtTest_AddCommon as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtTest_AddCommon:\n```c\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    UT_BSP_Lock();\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n    UT_BSP_Unlock();\n}\n```\n</target_code>\nPlease provide the modified UtTest_AddCommon code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <pthread.h>\n#include <errno.h>\n#include <time.h>\n#include <unistd.h>\n\n/* Probe/logging helper: append logs to /tmp/logs/2593.txt */\nstatic void UtTest_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2593.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    localtime_r(&t, &tm_buf);\n    char timestr[64];\n    strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n    fprintf(f, \"%s [pid=%ld tid=%lu] \", timestr, (long)getpid(), (unsigned long)pthread_self());\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\n/* Probe that demonstrates the return behavior of pthread_mutex_unlock on this platform.\n   It creates a local mutex, locks it, unlocks it and logs the returned error code. */\nstatic void UtTest_ProbePthreadUnlockReturn(void)\n{\n    pthread_mutex_t m;\n    int rc;\n\n    rc = pthread_mutex_init(&m, NULL);\n    if (rc != 0)\n    {\n        UtTest_Log(\"Probe: pthread_mutex_init returned %d (errno=%d)\", rc, errno);\n        return;\n    }\n\n    rc = pthread_mutex_lock(&m);\n    if (rc != 0)\n    {\n        UtTest_Log(\"Probe: pthread_mutex_lock returned %d (errno=%d)\", rc, errno);\n        (void)pthread_mutex_destroy(&m);\n        return;\n    }\n\n    /* Call pthread_mutex_unlock and capture its return value explicitly. */\n    rc = pthread_mutex_unlock(&m);\n    UtTest_Log(\"Probe: pthread_mutex_unlock returned %d (errno=%d)\", rc, errno);\n\n    /* Destroy the mutex and log any error from destroy. */\n    rc = pthread_mutex_destroy(&m);\n    if (rc != 0)\n    {\n        UtTest_Log(\"Probe: pthread_mutex_destroy returned %d (errno=%d)\", rc, errno);\n    }\n}\n\n/* Modified UtTest_AddCommon with probes/logging. Preserves original logic and call order. */\nvoid UtTest_AddCommon(void (*Test)(void), void (*Setup)(void), void (*Teardown)(void), const char *TestName,\n                      uint32 EntryType)\n{\n    UtTestDataBaseEntry_t UtTestDataBaseEntry;\n\n    memset(&UtTestDataBaseEntry, 0, sizeof(UtTestDataBaseEntry));\n    UtTestDataBaseEntry.Test     = Test;\n    UtTestDataBaseEntry.Setup    = Setup;\n    UtTestDataBaseEntry.Teardown = Teardown;\n    if (TestName != NULL)\n    {\n        strncpy(UtTestDataBaseEntry.TestName, TestName, sizeof(UtTestDataBaseEntry.TestName) - 1);\n    }\n\n    /* Log the entry being added (control state before acquiring BSP lock). */\n    UtTest_Log(\"AddCommon: preparing to add test entry '%s' entryType=%u Test=%p Setup=%p Teardown=%p\",\n               UtTestDataBaseEntry.TestName,\n               (unsigned)EntryType,\n               (void*)UtTestDataBaseEntry.Test,\n               (void*)UtTestDataBaseEntry.Setup,\n               (void*)UtTestDataBaseEntry.Teardown);\n\n    /* Log just before obtaining BSP lock */\n    UtTest_Log(\"AddCommon: calling UT_BSP_Lock()\");\n    UT_BSP_Lock();\n    UtTest_Log(\"AddCommon: returned from UT_BSP_Lock()\");\n\n    UtList_Add(UtAssert_Global.DataBasePtr, &UtTestDataBaseEntry, sizeof(UtTestDataBaseEntry_t), EntryType);\n    UtTest_Log(\"AddCommon: returned from UtList_Add() (entry added)\");\n\n    UtTest_Log(\"AddCommon: calling UT_BSP_Unlock()\");\n    UT_BSP_Unlock();\n    UtTest_Log(\"AddCommon: returned from UT_BSP_Unlock() -- now running platform unlock probe\");\n\n    /* Probe the platform pthread_mutex_unlock return behavior and log it.\n       This provides evidence whether pthread_mutex_unlock returns negative values on this platform. */\n    UtTest_ProbePthreadUnlockReturn();\n\n    UtTest_Log(\"AddCommon: completed\");\n}\n"
}