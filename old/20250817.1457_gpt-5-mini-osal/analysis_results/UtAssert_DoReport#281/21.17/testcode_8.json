{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling UtAssert_DoReport with File == NULL or with File pointing to a non NUL-terminated character array. The call FileLen = strlen(File); will dereference File (or scan past the allocated object in search of a terminator), causing out-of-bounds access/undefined behavior and thus violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_DoReport code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2255.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_DoReport as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_DoReport:\n```c\nvoid UtAssert_DoReport(const char *File, uint32 LineNum, uint32 SegmentNum, uint32 TestSeq, uint8 MessageType,\n                       const char *SubsysName, const char *ShortDesc)\n{\n    uint32      FileLen;\n    const char *BasePtr;\n    char        ReportBuffer[320];\n\n    FileLen = strlen(File);\n    BasePtr = File + FileLen;\n    while (FileLen > 0)\n    {\n        --BasePtr;\n        --FileLen;\n        if (*BasePtr == '/' || *BasePtr == '\\\\')\n        {\n            ++BasePtr;\n            break;\n        }\n    }\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer), \"%02u.%03u %s:%u - %s\", (unsigned int)SegmentNum,\n             (unsigned int)TestSeq, BasePtr, (unsigned int)LineNum, ShortDesc);\n\n    UT_BSP_DoText(MessageType, ReportBuffer);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_DoReport code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Minimal typedefs to match the original signature */\ntypedef unsigned int uint32;\ntypedef unsigned char uint8;\n\n/* Forward declaration of external routine used by the original code */\nvoid UT_BSP_DoText(uint8 MessageType, const char *ReportBuffer);\n\n/* Probe helper: append log entries about control flow/state to /tmp/logs/2255.txt */\nstatic void UtAssert_LogProbe(const char *stage, const char *File, uint32 FileLen, const char *BasePtr,\n                              uint32 LineNum, uint32 SegmentNum, uint32 TestSeq, uint8 MessageType,\n                              const char *SubsysName, const char *ShortDesc, const char *ReportBuffer)\n{\n    FILE *f = fopen(\"/tmp/logs/2255.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, do not interfere with original behavior */\n        return;\n    }\n\n    /* Record stage and key parameter values. Avoid dereferencing File unless checked by caller. */\n    fprintf(f, \"STAGE=%s\\n\", stage);\n    fprintf(f, \"  File(ptr)=%p\\n\", (const void *)File);\n    fprintf(f, \"  FileLen=%u\\n\", (unsigned int)FileLen);\n    fprintf(f, \"  BasePtr(ptr)=%p\\n\", (const void *)BasePtr);\n    fprintf(f, \"  LineNum=%u SegmentNum=%u TestSeq=%u MessageType=%u\\n\",\n            (unsigned int)LineNum, (unsigned int)SegmentNum, (unsigned int)TestSeq, (unsigned int)MessageType);\n    fprintf(f, \"  SubsysName(ptr)=%p ShortDesc(ptr)=%p\\n\", (const void *)SubsysName, (const void *)ShortDesc);\n\n    if (ReportBuffer != NULL)\n    {\n        /* Log the generated report buffer content safely as a string (original code uses snprintf). */\n        fprintf(f, \"  ReportBuffer=\\\"%s\\\"\\n\", ReportBuffer);\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\nvoid UtAssert_DoReport(const char *File, uint32 LineNum, uint32 SegmentNum, uint32 TestSeq, uint8 MessageType,\n                       const char *SubsysName, const char *ShortDesc)\n{\n    uint32      FileLen;\n    const char *BasePtr;\n    char        ReportBuffer[320];\n\n    /* Log entry: before calling strlen. This captures the pointer value and intent to call strlen. */\n    UtAssert_LogProbe(\"before_strlen\", File, 0u, NULL, LineNum, SegmentNum, TestSeq, MessageType, SubsysName, ShortDesc, NULL);\n\n    /* ORIGINAL BEHAVIOR: vulnerable call retained to allow reproduction of the violation scenario. */\n    FileLen = strlen(File);\n\n    /* Log result of strlen. If File was NULL, execution may not reach here (segfault) \u2014 that is the evidence.\n       If execution continues, log the computed length. */\n    UtAssert_LogProbe(\"after_strlen\", File, FileLen, NULL, LineNum, SegmentNum, TestSeq, MessageType, SubsysName, ShortDesc, NULL);\n\n    BasePtr = File + FileLen;\n    while (FileLen > 0)\n    {\n        --BasePtr;\n        --FileLen;\n        if (*BasePtr == '/' || *BasePtr == '\\\\')\n        {\n            ++BasePtr;\n            break;\n        }\n    }\n\n    /* Log result after base pointer computation (points into File or just past it). */\n    UtAssert_LogProbe(\"after_baseptr\", File, FileLen, BasePtr, LineNum, SegmentNum, TestSeq, MessageType, SubsysName, ShortDesc, NULL);\n\n    snprintf(ReportBuffer, sizeof(ReportBuffer), \"%02u.%03u %s:%u - %s\", (unsigned int)SegmentNum,\n             (unsigned int)TestSeq, BasePtr, (unsigned int)LineNum, ShortDesc);\n\n    /* Log the final formatted report before dispatch. */\n    UtAssert_LogProbe(\"before_UT_BSP_DoText\", File, FileLen, BasePtr, LineNum, SegmentNum, TestSeq, MessageType, SubsysName, ShortDesc, ReportBuffer);\n\n    UT_BSP_DoText(MessageType, ReportBuffer);\n\n    /* Log completion (this may not be reached if earlier undefined behavior occurred). */\n    UtAssert_LogProbe(\"exit\", File, FileLen, BasePtr, LineNum, SegmentNum, TestSeq, MessageType, SubsysName, ShortDesc, ReportBuffer);\n}\n"
}