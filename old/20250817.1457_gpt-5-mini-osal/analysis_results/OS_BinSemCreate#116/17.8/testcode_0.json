{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_BinSemCreate_Impl the value parameter 'initial_value' (type uint32) is assigned to: 'initial_value = 1;'. This modifies a function parameter passed by value, which violates MISRA C 2023 Rule 17.8 (a function parameter should not be modified).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/933.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemCreate:\n```c\nint32 OS_BinSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_bin_sem_internal_record_t *binsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        binsem = OS_OBJECT_TABLE_GET(OS_bin_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, binsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_BinSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemCreate code.\n",
  "test_code": "int32 OS_BinSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_bin_sem_internal_record_t *binsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* --- Probe logging: entry and parameters --- */\n    {\n        FILE *fp = fopen(\"/tmp/logs/933.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"[OS_BinSemCreate] ENTRY: sem_id=%p sem_name=\\\"%s\\\" sem_initial_value=%u options=%u\\n\",\n                    (void *)sem_id, sem_name ? sem_name : \"(null)\", (unsigned int)sem_initial_value, (unsigned int)options);\n            fclose(fp);\n        }\n    }\n\n    /* Save a copy of the bytes representing the caller's local sem_initial_value to detect unexpected memory modification. */\n    unsigned char pre_val[sizeof(sem_initial_value)];\n    unsigned char post_val[sizeof(sem_initial_value)];\n    {\n        unsigned int i;\n        const unsigned char *p = (const unsigned char *)&sem_initial_value;\n        for (i = 0U; i < (unsigned int)sizeof(sem_initial_value); ++i)\n        {\n            pre_val[i] = p[i];\n        }\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    /* Log result of allocation attempt */\n    {\n        FILE *fp = fopen(\"/tmp/logs/933.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"[OS_BinSemCreate] OS_ObjectIdAllocateNew returned %ld\\n\", (long)return_code);\n            fclose(fp);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        binsem = OS_OBJECT_TABLE_GET(OS_bin_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, binsem, obj_name, sem_name);\n\n        /* Log state just before calling the OS-specific implementation */\n        {\n            FILE *fp = fopen(\"/tmp/logs/933.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"[OS_BinSemCreate] BEFORE Impl: token=%lu sem_initial_value=%u options=%u binsem=%p obj_name=\\\"%s\\\"\\n\",\n                        (unsigned long)token, (unsigned int)sem_initial_value, (unsigned int)options,\n                        (void *)binsem, (binsem != NULL) ? (char *)binsem->obj_name : \"(null)\");\n                /* Also log the address of the local parameter to help correlate stack memory */\n                fprintf(fp, \"[OS_BinSemCreate] ADDRESS INFO: &sem_initial_value=%p\\n\", (void *)&sem_initial_value);\n                fclose(fp);\n            }\n        }\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_BinSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* After return from Impl, capture the caller-local bytes for sem_initial_value to detect unexpected modification */\n        {\n            unsigned int i;\n            unsigned char *p = (unsigned char *)&sem_initial_value;\n            for (i = 0U; i < (unsigned int)sizeof(sem_initial_value); ++i)\n            {\n                post_val[i] = p[i];\n            }\n        }\n\n        /* Compare and log any differences in the caller's stack area where sem_initial_value resides. */\n        {\n            FILE *fp = fopen(\"/tmp/logs/933.txt\", \"a\");\n            if (fp != NULL)\n            {\n                unsigned int i;\n                int diff_found = 0;\n                fprintf(fp, \"[OS_BinSemCreate] AFTER Impl: return_code=%ld sem_initial_value=%u\\n\",\n                        (long)return_code, (unsigned int)sem_initial_value);\n                for (i = 0U; i < (unsigned int)sizeof(sem_initial_value); ++i)\n                {\n                    if (pre_val[i] != post_val[i])\n                    {\n                        diff_found = 1;\n                        break;\n                    }\n                }\n\n                if (diff_found)\n                {\n                    fprintf(fp, \"[OS_BinSemCreate] WARNING: caller-local bytes for sem_initial_value changed!\\n\");\n                    fprintf(fp, \"[OS_BinSemCreate] pre_bytes=\");\n                    for (i = 0U; i < (unsigned int)sizeof(sem_initial_value); ++i)\n                    {\n                        fprintf(fp, \"%02X\", (unsigned int)pre_val[i]);\n                    }\n                    fprintf(fp, \" post_bytes=\");\n                    for (i = 0U; i < (unsigned int)sizeof(sem_initial_value); ++i)\n                    {\n                        fprintf(fp, \"%02X\", (unsigned int)post_val[i]);\n                    }\n                    fprintf(fp, \"\\n\");\n                }\n                else\n                {\n                    fprintf(fp, \"[OS_BinSemCreate] caller-local bytes for sem_initial_value unchanged.\\n\");\n                }\n\n                fclose(fp);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    /* Final return logging */\n    {\n        FILE *fp = fopen(\"/tmp/logs/933.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"[OS_BinSemCreate] EXIT: return_code=%ld\\n\", (long)return_code);\n            fclose(fp);\n        }\n    }\n\n    return return_code;\n}\n"
}