{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_CHECK_APINAME expands to OS_CHECK_STRING(sem_name, OS_MAX_API_NAME, ...). If OS_CHECK_STRING uses a <string.h> routine such as strlen() to determine the name length, and the caller passes a non\u2011NUL\u2011terminated char buffer (or a buffer shorter than the data), strlen will read past the end of the object and thus access memory beyond the bounds of sem_name. This would violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/935.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemCreate:\n```c\nint32 OS_BinSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_bin_sem_internal_record_t *binsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        binsem = OS_OBJECT_TABLE_GET(OS_bin_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, binsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_BinSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helper: append structured log messages to /tmp/logs/935.txt */\nstatic void os_binsem_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/935.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_BinSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_bin_sem_internal_record_t *binsem;\n\n    /* Entry probe: record call parameters (do not dereference sem_name) */\n    os_binsem_probe_log(\"ENTER OS_BinSemCreate: sem_id=%p, sem_name=%p, sem_initial_value=%u, options=%u\",\n                        (const void *)sem_id, (const void *)sem_name,\n                        (unsigned)sem_initial_value, (unsigned)options);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    os_binsem_probe_log(\"After OS_CHECK_POINTER: sem_id=%p\", (const void *)sem_id);\n\n    /* Probe just before API-name check. Important: do NOT call strlen or otherwise read the contents\n     * of sem_name here, because the violation scenario is that a non-NUL-terminated buffer may be\n     * passed and reading it would itself access memory beyond the object bounds. Instead, log the\n     * pointer value and the intent to call the API-name check. */\n    os_binsem_probe_log(\"Before OS_CHECK_APINAME: sem_name_ptr=%p (contents not dereferenced here)\",\n                        (const void *)sem_name);\n\n    OS_CHECK_APINAME(sem_name);\n    os_binsem_probe_log(\"After OS_CHECK_APINAME: sem_name_ptr=%p\", (const void *)sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    os_binsem_probe_log(\"After OS_ObjectIdAllocateNew: return_code=%ld, token_addr=%p\",\n                        (long)return_code, (const void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        binsem = OS_OBJECT_TABLE_GET(OS_bin_sem_table, token);\n        os_binsem_probe_log(\"Allocated record: binsem=%p (table entry), token_addr=%p, sem_name_ptr=%p\",\n                            (const void *)binsem, (const void *)&token, (const void *)sem_name);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, binsem, obj_name, sem_name);\n        os_binsem_probe_log(\"After OS_OBJECT_INIT: obj_name field set (sem_name not logged to avoid dereference)\");\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        os_binsem_probe_log(\"Calling OS_BinSemCreate_Impl: token_addr=%p, sem_initial_value=%u, options=%u\",\n                            (const void *)&token, (unsigned)sem_initial_value, (unsigned)options);\n        return_code = OS_BinSemCreate_Impl(&token, sem_initial_value, options);\n        os_binsem_probe_log(\"Returned from OS_BinSemCreate_Impl: return_code=%ld\", (long)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n        os_binsem_probe_log(\"After OS_ObjectIdFinalizeNew: final_return_code=%ld, sem_id=%p\",\n                            (long)return_code, (const void *)sem_id);\n    }\n\n    os_binsem_probe_log(\"EXIT OS_BinSemCreate: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}