{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts a const-qualified pointer to a non-const pointer: (void *)name where name is const char *. This discards the const qualifier and passes a pointer-to-non-const to OS_ObjectIdFindNextMatch, which violates MISRA C 2023 Rule 8.13. Corrective action: change the callee to accept a const void * (or avoid the cast) so the const qualification is preserved.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/931.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemCreate:\n```c\nint32 OS_BinSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_bin_sem_internal_record_t *binsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        binsem = OS_OBJECT_TABLE_GET(OS_bin_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, binsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_BinSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe/log helper - keep this generic to avoid depending on system typedefs.\n * It only uses pointers, strings and unsigned long for numeric printing.\n */\nstatic void OS_BinSemCreate_Probe(const char *event, const void *sem_id_ptr, const char *sem_name, unsigned long sem_initial_value, unsigned long options, const void *token_ptr, int return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/931.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"[OS_BinSemCreate] Event: %s\\n\", event);\n        fprintf(f, \"  sem_id=%p\\n\", sem_id_ptr);\n        fprintf(f, \"  sem_name=%s\\n\", sem_name ? sem_name : \"(null)\");\n        fprintf(f, \"  sem_initial_value=%lu options=%lu\\n\", sem_initial_value, options);\n        fprintf(f, \"  token_ptr=%p return_code=%d\\n\", token_ptr, return_code);\n        fprintf(f, \"--------------------------------------------------\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_BinSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_bin_sem_internal_record_t *binsem;\n\n    /* Log entry with initial parameters (do NOT cast away const; log sem_name as const) */\n    OS_BinSemCreate_Probe(\"entry\", (const void *)sem_id, sem_name, (unsigned long)sem_initial_value, (unsigned long)options, NULL, 0);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    /* Log result of allocation attempt */\n    OS_BinSemCreate_Probe(\"after ObjectIdAllocateNew\", (const void *)sem_id, sem_name, (unsigned long)sem_initial_value, (unsigned long)options, (const void *)&token, (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        binsem = OS_OBJECT_TABLE_GET(OS_bin_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        /* Log state before OS_OBJECT_INIT - name and token are important to reproduce const discard investigations */\n        OS_BinSemCreate_Probe(\"before OS_OBJECT_INIT\", (const void *)sem_id, sem_name, (unsigned long)sem_initial_value, (unsigned long)options, (const void *)&token, (int)return_code);\n\n        OS_OBJECT_INIT(token, binsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        OS_BinSemCreate_Probe(\"before OS_BinSemCreate_Impl\", (const void *)sem_id, sem_name, (unsigned long)sem_initial_value, (unsigned long)options, (const void *)&token, (int)return_code);\n        return_code = OS_BinSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Log result of OS-specific implementation */\n        OS_BinSemCreate_Probe(\"after OS_BinSemCreate_Impl\", (const void *)sem_id, sem_name, (unsigned long)sem_initial_value, (unsigned long)options, (const void *)&token, (int)return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n\n        /* Final state and return code */\n        OS_BinSemCreate_Probe(\"after ObjectIdFinalizeNew\", (const void *)sem_id, sem_name, (unsigned long)sem_initial_value, (unsigned long)options, (const void *)&token, (int)return_code);\n    }\n    else\n    {\n        /* Log early failure path */\n        OS_BinSemCreate_Probe(\"allocate failed - early exit\", (const void *)sem_id, sem_name, (unsigned long)sem_initial_value, (unsigned long)options, (const void *)&token, (int)return_code);\n    }\n\n    return return_code;\n}\n"
}