{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe inline OS_strnlen calls memchr(s, 0, maxlen) where maxlen is provided by the caller (e.g. OS_MAX_PATH_LEN). If the caller supplies a pointer to a string object that is smaller than maxlen bytes (for example a dynamically allocated path of length 10 bytes or a string literal in a smaller array), memchr may read past the end of that object up to maxlen bytes, causing an out-of-bounds access. Example: calling OS_rmdir with path pointing to a 10-byte allocated buffer (null-terminated) causes OS_TranslatePath to call OS_strnlen(path, OS_MAX_PATH_LEN) which invokes memchr(path, 0, OS_MAX_PATH_LEN) and may read beyond the allocated 10+1 bytes \u2014 violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rmdir code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1239.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rmdir as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rmdir:\n```c\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(path, local_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_DirRemove_Impl(local_path);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rmdir code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <ctype.h>\n\n/*\n * Probe logging helpers. Writes human-readable control-flow and state\n * information to /tmp/logs/1239.txt. These helpers intentionally do not\n * dereference caller pointers (like `path`) before the original logic\n * runs to avoid introducing additional undefined behavior.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1239.txt\", \"a\");\n    if (f == NULL) return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/*\n * Dump a buffer as printable chars / hex escapes. This is safe for buffers\n * that we own (like local_path) because we limit the number of bytes to\n * the provided buffer size.\n */\nstatic void probe_dump_buffer(const void *buf, size_t bufsize, size_t max_dump)\n{\n    size_t i, limit = bufsize < max_dump ? bufsize : max_dump;\n    const unsigned char *b = (const unsigned char *)buf;\n    FILE *f = fopen(\"/tmp/logs/1239.txt\", \"a\");\n    if (f == NULL) return;\n    for (i = 0; i < limit; ++i)\n    {\n        unsigned char c = b[i];\n        if (c == '\\0')\n        {\n            fprintf(f, \"\\\\0\");\n            break;\n        }\n        else if (isprint(c))\n        {\n            fputc(c, f);\n        }\n        else\n        {\n            fprintf(f, \"\\\\x%02x\", c);\n        }\n    }\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/*\n * Modified OS_rmdir with logging probes. Original logic is preserved.\n * This function intentionally avoids dereferencing `path` before calling\n * OS_TranslatePath to reduce the chance of introducing new undefined\n * behavior; it logs the pointer value and buffer addresses/sizes and\n * records return codes from OS_TranslatePath and OS_DirRemove_Impl.\n */\nint32 OS_rmdir(const char *path)\n{\n    int32 return_code;\n    char  local_path[OS_MAX_LOCAL_PATH_LEN];\n\n    probe_log(\"OS_rmdir ENTRY: path=%p\", (void *)path);\n    if (path == NULL)\n    {\n        probe_log(\"OS_rmdir: path is NULL\");\n    }\n\n    probe_log(\"OS_rmdir: local_path buffer at %p size=%zu\", (void *)local_path, (size_t)sizeof(local_path));\n\n    /* Call original translation logic */\n    return_code = OS_TranslatePath(path, local_path);\n    probe_log(\"OS_TranslatePath returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"OS_rmdir: local_path after OS_TranslatePath (dump up to 64 bytes):\");\n        probe_dump_buffer(local_path, sizeof(local_path), 64);\n\n        probe_log(\"OS_rmdir: calling OS_DirRemove_Impl with local_path=%p\", (void *)local_path);\n        return_code = OS_DirRemove_Impl(local_path);\n        probe_log(\"OS_DirRemove_Impl returned %d\", (int)return_code);\n    }\n    else\n    {\n        probe_log(\"OS_rmdir: OS_TranslatePath failed, skipping OS_DirRemove_Impl\");\n    }\n\n    probe_log(\"OS_rmdir EXIT with code %d\", (int)return_code);\n    return return_code;\n}\n"
}