{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_Milli2Ticks:\n```c\nint32 OS_Milli2Ticks(uint32 milli_seconds, int *ticks)\n{\n    uint64 num_of_ticks;\n    int32  return_code = OS_SUCCESS;\n\n    num_of_ticks = (((uint64)milli_seconds * OS_SharedGlobalVars.TicksPerSecond) + 999) / 1000;\n\n    /* Check against maximum int32 (limit from some OS's) */\n    if (num_of_ticks <= INT_MAX)\n    {\n        *ticks = (int)num_of_ticks;\n    }\n    else\n    {\n        return_code = OS_ERROR;\n        *ticks      = 0;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_Milli2Ticks:\ntypedef uint32_t  uint32\n...\ntypedef uint64_t  uint64\n...\ntypedef int32_t   int32\n...\nextern OS_SharedGlobalVars_t OS_SharedGlobalVars\n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERROR (-1)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I reviewed the entire function and the related symbol definitions provided. I found no use of compiler- or vendor-specific language extensions. Specifically:\n- The code uses standard typedefs based on <stdint.h> (uint32_t, uint64_t, int32_t) which are standard C.\n- The extern global (OS_SharedGlobalVars) and the member access (OS_SharedGlobalVars.TicksPerSecond) are plain C struct/variable usage, not an extension.\n- Casting ((uint64)milli_seconds * ...) and integer arithmetic/rounding with literals (999, 1000) are standard C operations.\n- Macros OS_SUCCESS and OS_ERROR and the use of INT_MAX are standard preprocessor/macro usage.\n- There are no occurrences of known compiler extensions such as __attribute__, __asm__, __extension__, typeof, __builtin_*, inline assembly, nonstandard keywords, statement-expressions, or other vendor-specific constructs.\n\nTherefore there are no code fragments that need investigation under MISRA C 2023 Rule 1.2 (no language extensions used). If there are other files or nonstandard compiler flags that introduce extensions, those would need separate review, but not this code snippet."
}