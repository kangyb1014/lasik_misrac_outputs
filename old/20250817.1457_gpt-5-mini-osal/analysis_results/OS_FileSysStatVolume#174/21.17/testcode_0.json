{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code computes mplen from filesys->virtual_mountpt then calls strncmp(target, filesys->virtual_mountpt, mplen) and later reads target[mplen] without ensuring target has at least mplen bytes. If the search target is shorter than the virtual_mountpt (for example, filesys->virtual_mountpt = \"/mnt/abcdef\" but the caller supplied target = \"/mnt/ab\"), then mplen > strlen(target). In that case strncmp will read past the end of the target buffer and the access to target[mplen] is out-of-bounds, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStatVolume code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1399.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysStatVolume as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStatVolume:\n```c\nint32 OS_FileSysStatVolume(const char *name, OS_statvfs_t *statbuf)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Check parameters */\n    OS_CHECK_PATHNAME(name);\n    OS_CHECK_POINTER(statbuf);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileSysStatVolume_Impl(&token, statbuf);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysStatVolume code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/*\n * Probe / logging helpers. These append to the log file /tmp/logs/1399.txt.\n * They are lightweight and intentionally do not dereference caller pointers\n * (only print their values) to avoid introducing new undefined behavior.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1399.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n\n    fclose(f);\n}\n\nstatic void probe_dump_bytes(const void *ptr, size_t len)\n{\n    if (ptr == NULL || len == 0)\n    {\n        probe_log(\"probe_dump_bytes: ptr=%p len=%zu (nothing to dump)\", ptr, len);\n        return;\n    }\n\n    FILE *f = fopen(\"/tmp/logs/1399.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    const unsigned char *p = (const unsigned char *)ptr;\n    /* Print a short header then hex bytes (useful for opaque token inspection) */\n    fprintf(f, \"probe_dump_bytes: ptr=%p len=%zu bytes=\", ptr, len);\n    for (size_t i = 0; i < len; ++i)\n    {\n        fprintf(f, \"%02X\", (unsigned int)p[i]);\n    }\n    fprintf(f, \"\\n\");\n\n    fclose(f);\n}\n\n/*\n * Original function with inserted probes to capture control flow and state.\n * The original logic is preserved; probes only log information to a file.\n */\nint32 OS_FileSysStatVolume(const char *name, OS_statvfs_t *statbuf)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    probe_log(\"ENTER: OS_FileSysStatVolume name=%p statbuf=%p\", (const void *)name, (void *)statbuf);\n\n    /* Check parameters (preserve original checks) */\n    probe_log(\"Before OS_CHECK_PATHNAME(name) name=%p\", (const void *)name);\n    OS_CHECK_PATHNAME(name);\n    probe_log(\"After OS_CHECK_PATHNAME(name)\");\n\n    probe_log(\"Before OS_CHECK_POINTER(statbuf) statbuf=%p\", (void *)statbuf);\n    OS_CHECK_POINTER(statbuf);\n    probe_log(\"After OS_CHECK_POINTER(statbuf)\");\n\n    probe_log(\"Calling OS_ObjectIdGetBySearch(mode=OS_LOCK_MODE_GLOBAL, type=LOCAL_OBJID_TYPE, search=OS_FileSys_FindVirtMountPoint, search_arg=%p)\", (const void *)name);\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)name, &token);\n\n    probe_log(\"OS_ObjectIdGetBySearch returned %d\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Dump raw token bytes to help other agents inspect opaque token contents */\n        probe_log(\"Token acquired: token_addr=%p token_size=%zu\", (void *)&token, (size_t)sizeof(token));\n        probe_dump_bytes(&token, sizeof(token));\n\n        probe_log(\"Calling OS_FileSysStatVolume_Impl with token=%p statbuf=%p\", (void *)&token, (void *)statbuf);\n        return_code = OS_FileSysStatVolume_Impl(&token, statbuf);\n        probe_log(\"OS_FileSysStatVolume_Impl returned %d\", return_code);\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"Token released\");\n    }\n\n    probe_log(\"EXIT: OS_FileSysStatVolume returning %d\", return_code);\n\n    return return_code;\n}\n"
}