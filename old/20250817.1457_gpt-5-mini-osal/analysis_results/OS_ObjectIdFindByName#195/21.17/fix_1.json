{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1567.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic int protected_memchr_probe(const char *str, size_t len, int *found)\n{\n    struct sigaction old_segv, old_bus, act;\n    sigjmp_buf env;\n    volatile int sig_caught = 0;\n\n    /* signal handler that longjmps back to the probe */\n    void handler(int sig)\n    {\n        sig_caught = sig;\n        siglongjmp(env, 1);\n    }\n\n    memset(&act, 0, sizeof(act));\n    act.sa_handler = handler;\n    sigemptyset(&act.sa_mask);\n    act.sa_flags = 0;\n\n    /* Install handlers for SIGSEGV and SIGBUS (if available) */\n    sigaction(SIGSEGV, &act, &old_segv);\n#ifdef SIGBUS\n    sigaction(SIGBUS, &act, &old_bus);\n#endif\n\n    if (sigsetjmp(env, 1) == 0)\n    {\n        /* Try the memchr call that the LENGTHCHECK macro could invoke */\n        void *res = memchr((const void *)str, '\\0', len);\n        *found = (res != NULL) ? 1 : 0;\n\n        /* restore handlers */\n        sigaction(SIGSEGV, &old_segv, NULL);\n#ifdef SIGBUS\n        sigaction(SIGBUS, &old_bus, NULL);\n#endif\n\n        return 0; /* completed without signal */\n    }\n    else\n    {\n        /* We landed here because handler longjmp'd */\n        /* restore handlers */\n        sigaction(SIGSEGV, &old_segv, NULL);\n#ifdef SIGBUS\n        sigaction(SIGBUS, &old_bus, NULL);\n#endif\n\n        return sig_caught ? sig_caught : 1;\n    }\n}\n\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Log function entry and key parameter values (pointer addresses only).\n     * Do NOT dereference 'name' here to avoid introducing new UB. */\n    probe_log(\"OS_ObjectIdFindByName ENTRY: idtype=%d, name_ptr=%p, object_id_ptr=%p\",\n              (int)idtype, (const void *)name, (void *)object_id);\n\n    /* If name is non-NULL, attempt a protected memchr probe that may\n     * detect a SIGSEGV/SIGBUS when memchr reads past the caller's\n     * provided buffer. This is used only for logging/evidence. */\n    if (name != NULL)\n    {\n        int found = 0;\n        int sig = protected_memchr_probe(name, (size_t)OS_MAX_API_NAME, &found);\n\n        if (sig == 0)\n        {\n            probe_log(\"protected_memchr_probe: completed without signal; nul_found=%d, probe_len=%d\",\n                      found, (int)OS_MAX_API_NAME);\n        }\n        else\n        {\n            probe_log(\"protected_memchr_probe: signal caught while probing memchr: sig=%d, probe_len=%d, name_ptr=%p\",\n                      sig, (int)OS_MAX_API_NAME, (const void *)name);\n        }\n    }\n    else\n    {\n        probe_log(\"protected_memchr_probe: skipped because name == NULL\");\n    }\n\n    /* Preserve original logic: keep the ARGCHECK and LENGTHCHECK calls\n     * as in the original implementation so behavior is unchanged. */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n\n    probe_log(\"OS_ObjectIdGetByName returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        probe_log(\"Found object: token.obj_id=%d; releasing token\", (int)token.obj_id);\n\n        OS_ObjectIdRelease(&token);\n\n        probe_log(\"Token released\");\n    }\n\n    probe_log(\"OS_ObjectIdFindByName EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpad0j1m46/src/src/os/shared/src/osapi-idmap.c: In function 'probe_log':\n/tmp/tmpad0j1m46/src/src/os/shared/src/osapi-idmap.c:984:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  984 |     vfprintf(f, fmt, ap);\n      |                      ^~\n/tmp/tmpad0j1m46/src/src/os/shared/src/osapi-idmap.c: In function 'protected_memchr_probe':\n/tmp/tmpad0j1m46/src/src/os/shared/src/osapi-idmap.c:992:22: error: storage size of 'old_segv' isn't known\n  992 |     struct sigaction old_segv, old_bus, act;\n      |                      ^~~~~~~~\n/tmp/tmpad0j1m46/src/src/os/shared/src/osapi-idmap.c:992:32: error: storage size of 'old_bus' isn't known\n  992 |     struct sigaction old_segv, old_bus, act;\n      |                                ^~~~~~~\n/tmp/tmpad0j1m46/src/src/os/shared/src/osapi-idmap.c:992:41: error: storage size of 'act' isn't known\n  992 |     struct sigaction old_segv, old_bus, act;\n      |                                         ^~~\n/tmp/tmpad0j1m46/src/src/os/shared/src/osapi-idmap.c:993:5: error: unknown type name 'sigjmp_buf'\n  993 |     sigjmp_buf env;\n      |     ^~~~~~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-idmap.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-idmap.dir/__/__/os/shared/src/osapi-idmap.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3787: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-idmap.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_ObjectIdFindByName as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <signal.h>\n#include <setjmp.h>\n#include <string.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1567.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast to the platform's va_list to avoid type-mismatch with any\n     * project-specific typedefs (e.g. OCS_va_list) used in the build. */\n    vfprintf(f, fmt, (va_list)ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int protected_memchr_probe(const char *str, size_t len, int *found)\n{\n    struct sigaction old_segv, old_bus, act;\n    sigjmp_buf env;\n    volatile int sig_caught = 0;\n\n    /* signal handler that longjmps back to the probe */\n    void handler(int sig)\n    {\n        sig_caught = sig;\n        siglongjmp(env, 1);\n    }\n\n    memset(&act, 0, sizeof(act));\n    act.sa_handler = handler;\n    sigemptyset(&act.sa_mask);\n    act.sa_flags = 0;\n\n    /* Install handlers for SIGSEGV and SIGBUS (if available) */\n    sigaction(SIGSEGV, &act, &old_segv);\n#ifdef SIGBUS\n    sigaction(SIGBUS, &act, &old_bus);\n#endif\n\n    if (sigsetjmp(env, 1) == 0)\n    {\n        /* Try the memchr call that the LENGTHCHECK macro could invoke */\n        void *res = memchr((const void *)str, '\\0', len);\n        *found = (res != NULL) ? 1 : 0;\n\n        /* restore handlers */\n        sigaction(SIGSEGV, &old_segv, NULL);\n#ifdef SIGBUS\n        sigaction(SIGBUS, &old_bus, NULL);\n#endif\n\n        return 0; /* completed without signal */\n    }\n    else\n    {\n        /* We landed here because handler longjmp'd */\n        /* restore handlers */\n        sigaction(SIGSEGV, &old_segv, NULL);\n#ifdef SIGBUS\n        sigaction(SIGBUS, &old_bus, NULL);\n#endif\n\n        return sig_caught ? sig_caught : 1;\n    }\n}\n\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Log function entry and key parameter values (pointer addresses only).\n     * Do NOT dereference 'name' here to avoid introducing new UB. */\n    probe_log(\"OS_ObjectIdFindByName ENTRY: idtype=%d, name_ptr=%p, object_id_ptr=%p\",\n              (int)idtype, (const void *)name, (void *)object_id);\n\n    /* If name is non-NULL, attempt a protected memchr probe that may\n     * detect a SIGSEGV/SIGBUS when memchr reads past the caller's\n     * provided buffer. This is used only for logging/evidence. */\n    if (name != NULL)\n    {\n        int found = 0;\n        int sig = protected_memchr_probe(name, (size_t)OS_MAX_API_NAME, &found);\n\n        if (sig == 0)\n        {\n            probe_log(\"protected_memchr_probe: completed without signal; nul_found=%d, probe_len=%d\",\n                      found, (int)OS_MAX_API_NAME);\n        }\n        else\n        {\n            probe_log(\"protected_memchr_probe: signal caught while probing memchr: sig=%d, probe_len=%d, name_ptr=%p\",\n                      sig, (int)OS_MAX_API_NAME, (const void *)name);\n        }\n    }\n    else\n    {\n        probe_log(\"protected_memchr_probe: skipped because name == NULL\");\n    }\n\n    /* Preserve original logic: keep the ARGCHECK and LENGTHCHECK calls\n     * as in the original implementation so behavior is unchanged. */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n\n    probe_log(\"OS_ObjectIdGetByName returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        probe_log(\"Found object: token.obj_id=%d; releasing token\", (int)token.obj_id);\n\n        OS_ObjectIdRelease(&token);\n\n        probe_log(\"Token released\");\n    }\n\n    probe_log(\"OS_ObjectIdFindByName EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "Fixed compile errors by adding the necessary standard headers: <stdio.h>, <stdarg.h>, <signal.h>, <setjmp.h>, and <string.h> so that types like va_list, struct sigaction, and sigjmp_buf are known. Also cast the va_list passed to vfprintf to (va_list) to avoid a type-mismatch when the build environment uses a project-specific typedef (e.g. OCS_va_list). No other logic was changed."
}