{
  "user_message": "An agent A claimed that the following OS_ObjectIdFindByName code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_ObjectIdFindByName.\n```c\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro LENGTHCHECK expands to memchr(name, '\\0', OS_MAX_API_NAME). memchr will read up to OS_MAX_API_NAME (20) bytes from the address pointed to by name. If the caller passes a pointer to a smaller object (for example: char buf[5] = \"abc\"; or a pointer to a single char), memchr may read beyond the bounds of that object, causing undefined behavior. Therefore this use can access beyond the referenced object bounds (e.g. passing a buffer shorter than 20 bytes), violating MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_log_write(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1567.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] \", (long)t);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void log_probe_before(const char *name)\n{\n    /* Log entry, pointer value and first byte (if any) and configured max length */\n    os_log_write(\"ENTER OS_ObjectIdFindByName name_ptr=%p\", (void *)name);\n\n    if (name != NULL)\n    {\n        /* Only read the first byte to avoid potential overruns when reproducing the reported scenario */\n        unsigned char c = (unsigned char)name[0];\n        os_log_write(\"  name[0]=0x%02x (%c)\", c, (c >= 32 && c < 127) ? (char)c : '.');\n    }\n    else\n    {\n        os_log_write(\"  name is NULL\");\n    }\n\n    /* Log the configured maximum - this macro is expected to be available in the build */\n    os_log_write(\"  OS_MAX_API_NAME=%d\", OS_MAX_API_NAME);\n}\nstatic void log_probe_after(const char *name, int32 return_code, unsigned long obj_id)\n{\n    os_log_write(\"EXIT  OS_ObjectIdFindByName name_ptr=%p return_code=%ld obj_id=%lu\", (void *)name, (long)return_code, obj_id);\n}\n\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Log entry and lightweight state before checks that may trigger the memchr usage */\n    log_probe_before(name);\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log successful lookup and the returned object id */\n        log_probe_after(name, return_code, (unsigned long)token.obj_id);\n    }\n    else\n    {\n        /* Log the failure code; obj_id is not valid in this case */\n        log_probe_after(name, return_code, 0ul);\n    }\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\n[1755444214] ENTER OS_ObjectIdFindByName name_ptr=0x7ffe47973fc0\n[1755444214]   name[0]=0x59 (Y)\n[1755444214]   OS_MAX_API_NAME=20\n[1755444214] ENTER OS_ObjectIdFindByName name_ptr=0x55f3f09936b1\n[1755444214]   name[0]=0x4e (N)\n[1755444214]   OS_MAX_API_NAME=20\n[1755444214] EXIT  OS_ObjectIdFindByName name_ptr=0x55f3f09936b1 return_code=-17 obj_id=0\n[1755444214] ENTER OS_ObjectIdFindByName name_ptr=0x7ffe47973fc0\n[1755444214]   name[0]=0x59 (Y)\n[1755444214]   OS_MAX_API_NAME=20\n[1755444214] ENTER OS_ObjectIdFindByName name_ptr=0x55f3f0995f7d\n[1755444214]   name[0]=0x4e (N)\n[1755444214]   OS_MAX_API_NAME=20\n[1755444214] EXIT  OS_ObjectIdFindByName name_ptr=0x55f3f0995f7d return_code=-17 obj_id=0\n[1755444214] ENTER OS_ObjectIdFindByName name_ptr=0x7ffe47973fc0\n[1755444214]   name[0]=0x59 (Y)\n[1755444214]   OS_MAX_API_NAME=20\n[1755444214] ENTER OS_ObjectIdFindByName name_ptr=0x55f3f09966d9\n[1755444214]   name[0]=0x4e (N)\n[1755444214]   OS_MAX_API_NAME=20\n[1755444214] EXIT  OS_ObjectIdFindByName name_ptr=0x55f3f09966d9 return_code=-17 obj_id=0\n[1755444214] ENTER OS_ObjectIdFindByName name_ptr=0x7ffe47973fc0\n[1755444214]   name[0]=0x59 (Y)\n[1755444214]   OS_MAX_API_NAME=20\n[1755444214] ENTER OS_ObjectIdFindByName name_ptr=0x55f3f0994f50\n[1755444214]   name[0]=0x4e (N)\n[1755444214]   OS_MAX_API_NAME=20\n[1755444214] EXIT  OS_ObjectIdFindByName name_ptr=0x55f3f0994f50 return_code=-17 obj_id=0\n[1755444214] ENTER OS_ObjectIdFindByName name_ptr=0x55f3f0c03df0\n[1755444214]   name[0]=0x58 (X)\n[1755444214]   OS_MAX_API_NAME=20\n[1755444214] ENTER OS_ObjectIdFindByName name_ptr=0x55f3f0997975\n[1755444214]   name[0]=0x4e (N)\n[1755444214]   OS_MAX_API_NAME=20\n[1755444214] EXIT  OS_ObjectIdFindByName name_ptr=0x55f3f0997975 return_code=-17 obj_id=0\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. LENGTHCHECK expanding to memchr(name, '\\0', OS_MAX_API_NAME) causes memchr to read up to OS_MAX_API_NAME bytes from the address in name. A const char * parameter does not guarantee the pointed-to object is that large (caller could pass char buf[5] or a pointer to a single char), so memchr can legally access bytes beyond the bounds of the referenced object, producing undefined behavior. That directly violates MISRA C 2023 Rule 21.17, which forbids uses of <string.h> functions that can access beyond object bounds. The logged runs showing the function accepting various pointers and returning the length/error codes are consistent with the reported risky use; the code as written therefore violates the rule."
}