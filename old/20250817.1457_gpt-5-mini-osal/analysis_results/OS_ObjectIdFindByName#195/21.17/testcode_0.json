{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LENGTHCHECK expands to memchr(name, '\\0', OS_MAX_API_NAME). memchr will read up to OS_MAX_API_NAME (20) bytes from the address pointed to by name. If the caller passes a pointer to a smaller object (for example: char buf[5] = \"abc\"; or a pointer to a single char), memchr may read beyond the bounds of that object, causing undefined behavior. Therefore this use can access beyond the referenced object bounds (e.g. passing a buffer shorter than 20 bytes), violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFindByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1567.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFindByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindByName:\n```c\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFindByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logging helpers - write structured logs to /tmp/logs/1567.txt */\nstatic void os_log_write(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1567.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] \", (long)t);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void log_probe_before(const char *name)\n{\n    /* Log entry, pointer value and first byte (if any) and configured max length */\n    os_log_write(\"ENTER OS_ObjectIdFindByName name_ptr=%p\", (void *)name);\n\n    if (name != NULL)\n    {\n        /* Only read the first byte to avoid potential overruns when reproducing the reported scenario */\n        unsigned char c = (unsigned char)name[0];\n        os_log_write(\"  name[0]=0x%02x (%c)\", c, (c >= 32 && c < 127) ? (char)c : '.');\n    }\n    else\n    {\n        os_log_write(\"  name is NULL\");\n    }\n\n    /* Log the configured maximum - this macro is expected to be available in the build */\n    os_log_write(\"  OS_MAX_API_NAME=%d\", OS_MAX_API_NAME);\n}\n\nstatic void log_probe_after(const char *name, int32 return_code, unsigned long obj_id)\n{\n    os_log_write(\"EXIT  OS_ObjectIdFindByName name_ptr=%p return_code=%ld obj_id=%lu\", (void *)name, (long)return_code, obj_id);\n}\n\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Log entry and lightweight state before checks that may trigger the memchr usage */\n    log_probe_before(name);\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log successful lookup and the returned object id */\n        log_probe_after(name, return_code, (unsigned long)token.obj_id);\n    }\n    else\n    {\n        /* Log the failure code; obj_id is not valid in this case */\n        log_probe_after(name, return_code, 0ul);\n    }\n\n    return return_code;\n}\n"
}