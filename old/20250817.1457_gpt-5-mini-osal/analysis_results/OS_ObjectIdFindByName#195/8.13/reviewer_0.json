{
  "user_message": "An agent A claimed that the following OS_ObjectIdFindByName code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_ObjectIdFindByName.\n```c\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The call casts a const char * to void *: (void *)name in the call to OS_ObjectIdGetBySearch. The function prototype takes a plain void *arg (non-const), so the const qualifier on 'name' is discarded. This requires removing constness to match the parameter and therefore violates MISRA C 2023 Rule 8.13 (the pointer should point to a const-qualified type whenever possible).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Probe: log entry and input state */\n    {\n        FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTRY: OS_ObjectIdFindByName idtype=%d name_ptr=%\" PRIuPTR \" object_id_ptr=%\" PRIuPTR \"\\n\",\n                    (int)idtype,\n                    (uintptr_t)(const void *)name,\n                    (uintptr_t)(const void *)object_id);\n\n            if (name != NULL)\n            {\n                fputs(\"  name=\\\"\", log);\n                /* fputs accepts const char * so this preserves constness */\n                fputs(name, log);\n                fputs(\"\\\"\\n\", log);\n            }\n            else\n            {\n                fputs(\"  name=(null)\\n\", log);\n            }\n\n            fclose(log);\n        }\n    }\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n\n    /* Probe: log result of lookup */\n    {\n        FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"AFTER OS_ObjectIdGetByName return_code=%d\\n\", (int)return_code);\n            if (return_code == OS_SUCCESS)\n            {\n                fprintf(log, \"  token.obj_id=%u\\n\", (unsigned)token.obj_id);\n            }\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        /* Probe: log assignment to caller's object_id */\n        {\n            FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"ASSIGN: *object_id (ptr=%\" PRIuPTR \") = %u\\n\",\n                        (uintptr_t)(const void *)object_id,\n                        (unsigned)*object_id);\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Probe: log release action */\n        {\n            FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n            if (log != NULL)\n            {\n                fputs(\"ACTION: OS_ObjectIdRelease(&token) called\\n\", log);\n                fclose(log);\n            }\n        }\n    }\n\n    /* Probe: final return */\n    {\n        FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"RETURN: OS_ObjectIdFindByName -> %d\\n\", (int)return_code);\n            fputc('\\n', log);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C:2023 Rule 8.13 recommends that pointer types be const-qualified where possible \u2014 in the snippet the parameter is already declared as const char *name, so the function itself complies with that intent. Agent A\u2019s scenario depends on a separate function prototype (OS_ObjectIdGetByName/OS_ObjectIdGetBySearch) that allegedly takes a non-const void * and thus would force removal of constness. That would be a qualifier-discard issue (a conversion that removes const qualification), but it is not a violation of Rule 8.13 itself. Also note the shown code does not contain an explicit (void *)name cast; if the callee actually takes void * (non-const) then the attempt to pass a const char * is a constraint/qualifier mismatch that can fail to compile \u2014 which explains the test failure \u2014 but that is a different class of issue (conversion that discards const) and should be fixed by changing the callee to take a const-qualified pointer (e.g. const char * or const void *). In short: the claim that this code violates MISRA C 2023 Rule 8.13 is incorrect."
}