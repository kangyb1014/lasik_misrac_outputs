{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_ObjectIdGetBySearch takes a void *arg, but callers (e.g. OS_ObjectIdGetByName) pass a const char *name cast to (void *)name. This discards the const qualifier and indicates the function should accept a const-qualified pointer (e.g. const void *arg and matching MatchFunc signature) since the pointed data is not modified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFindByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1563.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFindByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindByName:\n```c\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFindByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/*\n * Probe logging helper: append human-readable trace lines to /tmp/logs/1563.txt.\n * This preserves original logic and only records control flow and key state.\n */\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *fp;\n    va_list ap;\n\n    /* Best-effort create directory; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    fp = fopen(\"/tmp/logs/1563.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging can't be opened, fail silently to avoid changing program behavior. */\n        return;\n    }\n\n    va_start(ap, fmt);\n    (void)vfprintf(fp, fmt, ap);\n    va_end(ap);\n    (void)fputc('\\n', fp);\n\n    (void)fclose(fp);\n}\n\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n    char              namebuf[128];\n\n    /* Capture and sanitize name for logging without modifying original data */\n    if (name != NULL)\n    {\n        /* Copy a truncated, NUL-terminated view for safe logging */\n        (void)strncpy(namebuf, name, sizeof(namebuf) - 1);\n        namebuf[sizeof(namebuf) - 1] = '\\0';\n    }\n    else\n    {\n        (void)strcpy(namebuf, \"(null)\");\n    }\n\n    os_log_probe(\"OS_ObjectIdFindByName ENTRY: idtype=%d name_ptr=%p name_str=\\\"%s\\\"\",\n                 (int)idtype, (const void *)name, namebuf);\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    os_log_probe(\"OS_ObjectIdFindByName: calling OS_ObjectIdGetByName(lock=OS_LOCK_MODE_GLOBAL, idtype=%d, name_ptr=%p)\",\n                 (int)idtype, (const void *)name);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n\n    os_log_probe(\"OS_ObjectIdFindByName: OS_ObjectIdGetByName returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        os_log_probe(\"OS_ObjectIdFindByName: found object_id=%ld (token.obj_id). Releasing token at %p\",\n                     (long)token.obj_id, (void *)&token);\n\n        OS_ObjectIdRelease(&token);\n\n        os_log_probe(\"OS_ObjectIdFindByName: token released\");\n    }\n    else\n    {\n        os_log_probe(\"OS_ObjectIdFindByName: object not found for name_ptr=%p name_str=\\\"%s\\\"\",\n                     (const void *)name, namebuf);\n    }\n\n    os_log_probe(\"OS_ObjectIdFindByName EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}