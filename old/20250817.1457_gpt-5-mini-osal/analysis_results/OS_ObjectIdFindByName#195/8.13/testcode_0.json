{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts a const char * to void *: (void *)name in the call to OS_ObjectIdGetBySearch. The function prototype takes a plain void *arg (non-const), so the const qualifier on 'name' is discarded. This requires removing constness to match the parameter and therefore violates MISRA C 2023 Rule 8.13 (the pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFindByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1563.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFindByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindByName:\n```c\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFindByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Probe: log entry and input state */\n    {\n        FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTRY: OS_ObjectIdFindByName idtype=%d name_ptr=%\" PRIuPTR \" object_id_ptr=%\" PRIuPTR \"\\n\",\n                    (int)idtype,\n                    (uintptr_t)(const void *)name,\n                    (uintptr_t)(const void *)object_id);\n\n            if (name != NULL)\n            {\n                fputs(\"  name=\\\"\", log);\n                /* fputs accepts const char * so this preserves constness */\n                fputs(name, log);\n                fputs(\"\\\"\\n\", log);\n            }\n            else\n            {\n                fputs(\"  name=(null)\\n\", log);\n            }\n\n            fclose(log);\n        }\n    }\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n\n    /* Probe: log result of lookup */\n    {\n        FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"AFTER OS_ObjectIdGetByName return_code=%d\\n\", (int)return_code);\n            if (return_code == OS_SUCCESS)\n            {\n                fprintf(log, \"  token.obj_id=%u\\n\", (unsigned)token.obj_id);\n            }\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        /* Probe: log assignment to caller's object_id */\n        {\n            FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"ASSIGN: *object_id (ptr=%\" PRIuPTR \") = %u\\n\",\n                        (uintptr_t)(const void *)object_id,\n                        (unsigned)*object_id);\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Probe: log release action */\n        {\n            FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n            if (log != NULL)\n            {\n                fputs(\"ACTION: OS_ObjectIdRelease(&token) called\\n\", log);\n                fclose(log);\n            }\n        }\n    }\n\n    /* Probe: final return */\n    {\n        FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"RETURN: OS_ObjectIdFindByName -> %d\\n\", (int)return_code);\n            fputc('\\n', log);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}