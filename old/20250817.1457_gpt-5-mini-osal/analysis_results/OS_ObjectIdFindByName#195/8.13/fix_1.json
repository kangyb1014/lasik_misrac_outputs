{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Probe: log entry and input state */\n    {\n        FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTRY: OS_ObjectIdFindByName idtype=%d name_ptr=%\" PRIuPTR \" object_id_ptr=%\" PRIuPTR \"\\n\",\n                    (int)idtype,\n                    (uintptr_t)(const void *)name,\n                    (uintptr_t)(const void *)object_id);\n\n            if (name != NULL)\n            {\n                fputs(\"  name=\\\"\", log);\n                /* fputs accepts const char * so this preserves constness */\n                fputs(name, log);\n                fputs(\"\\\"\\n\", log);\n            }\n            else\n            {\n                fputs(\"  name=(null)\\n\", log);\n            }\n\n            fclose(log);\n        }\n    }\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n\n    /* Probe: log result of lookup */\n    {\n        FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"AFTER OS_ObjectIdGetByName return_code=%d\\n\", (int)return_code);\n            if (return_code == OS_SUCCESS)\n            {\n                fprintf(log, \"  token.obj_id=%u\\n\", (unsigned)token.obj_id);\n            }\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        /* Probe: log assignment to caller's object_id */\n        {\n            FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"ASSIGN: *object_id (ptr=%\" PRIuPTR \") = %u\\n\",\n                        (uintptr_t)(const void *)object_id,\n                        (unsigned)*object_id);\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Probe: log release action */\n        {\n            FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n            if (log != NULL)\n            {\n                fputs(\"ACTION: OS_ObjectIdRelease(&token) called\\n\", log);\n                fclose(log);\n            }\n        }\n    }\n\n    /* Probe: final return */\n    {\n        FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"RETURN: OS_ObjectIdFindByName -> %d\\n\", (int)return_code);\n            fputc('\\n', log);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmp0jcuzp9k/src/src/os/shared/src/osapi-idmap.c:1:\n/tmp/tmp0jcuzp9k/src/src/os/shared/src/osapi-idmap.c: In function 'OS_ObjectIdFindByName':\n/tmp/tmp0jcuzp9k/src/src/os/shared/src/osapi-idmap.c:981:78: error: expected ')' before 'PRIuPTR'\n  981 |             fprintf(log, \"ENTRY: OS_ObjectIdFindByName idtype=%d name_ptr=%\" PRIuPTR \" object_id_ptr=%\" PRIuPTR \"\\n\",\n      |                                                                              ^~~~~~~\n/tmp/tmp0jcuzp9k/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmp0jcuzp9k/src/src/os/shared/src/osapi-idmap.c:60:1: note: 'PRIuPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   59 | #include \"os-shared-task.h\"\n  +++ |+#include <inttypes.h>\n   60 | \nIn file included from /tmp/tmp0jcuzp9k/src/src/os/shared/src/osapi-idmap.c:1:\n/tmp/tmp0jcuzp9k/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmp0jcuzp9k/src/src/os/shared/src/osapi-idmap.c:981:13: note: in expansion of macro 'fprintf'\n  981 |             fprintf(log, \"ENTRY: OS_ObjectIdFindByName idtype=%d name_ptr=%\" PRIuPTR \" object_id_ptr=%\" PRIuPTR \"\\n\",\n      |             ^~~~~~~\n/tmp/tmp0jcuzp9k/src/src/os/shared/src/osapi-idmap.c:1035:58: error: expected ')' before 'PRIuPTR'\n 1035 |                 fprintf(log, \"ASSIGN: *object_id (ptr=%\" PRIuPTR \") = %u\\n\",\n      |                                                          ^~~~~~~\n/tmp/tmp0jcuzp9k/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmp0jcuzp9k/src/src/os/shared/src/osapi-idmap.c:1035:58: note: 'PRIuPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n 1035 |                 fprintf(log, \"ASSIGN: *object_id (ptr=%\" PRIuPTR \") = %u\\n\",\n      |                                                          ^~~~~~~\n/tmp/tmp0jcuzp9k/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmp0jcuzp9k/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmp0jcuzp9k/src/src/os/shared/src/osapi-idmap.c:1035:17: note: in expansion of macro 'fprintf'\n 1035 |                 fprintf(log, \"ASSIGN: *object_id (ptr=%\" PRIuPTR \") = %u\\n\",\n      |                 ^~~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-idmap.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-idmap.dir/__/__/os/shared/src/osapi-idmap.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3787: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-idmap.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_ObjectIdFindByName as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <inttypes.h>\n\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Probe: log entry and input state */\n    {\n        FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"ENTRY: OS_ObjectIdFindByName idtype=%d name_ptr=%\" PRIuPTR \" object_id_ptr=%\" PRIuPTR \"\\n\",\n                    (int)idtype,\n                    (uintptr_t)(const void *)name,\n                    (uintptr_t)(const void *)object_id);\n\n            if (name != NULL)\n            {\n                fputs(\"  name=\\\"\", log);\n                /* fputs accepts const char * so this preserves constness */\n                fputs(name, log);\n                fputs(\"\\\"\\n\", log);\n            }\n            else\n            {\n                fputs(\"  name=(null)\\n\", log);\n            }\n\n            fclose(log);\n        }\n    }\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n\n    /* Probe: log result of lookup */\n    {\n        FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"AFTER OS_ObjectIdGetByName return_code=%d\\n\", (int)return_code);\n            if (return_code == OS_SUCCESS)\n            {\n                fprintf(log, \"  token.obj_id=%u\\n\", (unsigned)token.obj_id);\n            }\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        /* Probe: log assignment to caller's object_id */\n        {\n            FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"ASSIGN: *object_id (ptr=%\" PRIuPTR \") = %u\\n\",\n                        (uintptr_t)(const void *)object_id,\n                        (unsigned)*object_id);\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Probe: log release action */\n        {\n            FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n            if (log != NULL)\n            {\n                fputs(\"ACTION: OS_ObjectIdRelease(&token) called\\n\", log);\n                fclose(log);\n            }\n        }\n    }\n\n    /* Probe: final return */\n    {\n        FILE *log = fopen(\"/tmp/logs/1563.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"RETURN: OS_ObjectIdFindByName -> %d\\n\", (int)return_code);\n            fputc('\\n', log);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n",
  "explanation": "The compilation error was caused by use of the PRIuPTR macro without including <inttypes.h>. I added #include <inttypes.h> at the top of the file so PRIuPTR (and the related integer format macros) are defined. No other logic was changed."
}