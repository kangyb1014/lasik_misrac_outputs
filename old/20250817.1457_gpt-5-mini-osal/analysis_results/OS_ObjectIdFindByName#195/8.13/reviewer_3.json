{
  "user_message": "An agent A claimed that the following OS_ObjectIdFindByName code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_ObjectIdFindByName.\n```c\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:OS_ObjectIdGetBySearch takes a void *arg, but callers (e.g. OS_ObjectIdGetByName) pass a const char *name cast to (void *)name. This discards the const qualifier and indicates the function should accept a const-qualified pointer (e.g. const void *arg and matching MatchFunc signature) since the pointed data is not modified.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *fp;\n    va_list ap;\n\n    /* Best-effort create directory; ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    fp = fopen(\"/tmp/logs/1563.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging can't be opened, fail silently to avoid changing program behavior. */\n        return;\n    }\n\n    va_start(ap, fmt);\n    (void)vfprintf(fp, fmt, ap);\n    va_end(ap);\n    (void)fputc('\\n', fp);\n\n    (void)fclose(fp);\n}\n\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n    char              namebuf[128];\n\n    /* Capture and sanitize name for logging without modifying original data */\n    if (name != NULL)\n    {\n        /* Copy a truncated, NUL-terminated view for safe logging */\n        (void)strncpy(namebuf, name, sizeof(namebuf) - 1);\n        namebuf[sizeof(namebuf) - 1] = '\\0';\n    }\n    else\n    {\n        (void)strcpy(namebuf, \"(null)\");\n    }\n\n    os_log_probe(\"OS_ObjectIdFindByName ENTRY: idtype=%d name_ptr=%p name_str=\\\"%s\\\"\",\n                 (int)idtype, (const void *)name, namebuf);\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    os_log_probe(\"OS_ObjectIdFindByName: calling OS_ObjectIdGetByName(lock=OS_LOCK_MODE_GLOBAL, idtype=%d, name_ptr=%p)\",\n                 (int)idtype, (const void *)name);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n\n    os_log_probe(\"OS_ObjectIdFindByName: OS_ObjectIdGetByName returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        os_log_probe(\"OS_ObjectIdFindByName: found object_id=%ld (token.obj_id). Releasing token at %p\",\n                     (long)token.obj_id, (void *)&token);\n\n        OS_ObjectIdRelease(&token);\n\n        os_log_probe(\"OS_ObjectIdFindByName: token released\");\n    }\n    else\n    {\n        os_log_probe(\"OS_ObjectIdFindByName: object not found for name_ptr=%p name_str=\\\"%s\\\"\",\n                     (const void *)name, namebuf);\n    }\n\n    os_log_probe(\"OS_ObjectIdFindByName EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_ObjectIdFindByName ENTRY: idtype=4 name_ptr=0x7ffd225844c0 name_str=\"YYYYYYYYYYYYYYYYYYYYYYYYYYYYY\"\nOS_ObjectIdFindByName ENTRY: idtype=4 name_ptr=0x563b6fb2e6b1 name_str=\"NameNotFound\"\nOS_ObjectIdFindByName: calling OS_ObjectIdGetByName(lock=OS_LOCK_MODE_GLOBAL, idtype=4, name_ptr=0x563b6fb2e6b1)\nOS_ObjectIdFindByName: OS_ObjectIdGetByName returned -17\nOS_ObjectIdFindByName: object not found for name_ptr=0x563b6fb2e6b1 name_str=\"NameNotFound\"\nOS_ObjectIdFindByName EXIT: return_code=-17\nOS_ObjectIdFindByName ENTRY: idtype=3 name_ptr=0x7ffd225844c0 name_str=\"YYYYYYYYYYYYYYYYYYYYYYYYYYYYY\"\nOS_ObjectIdFindByName ENTRY: idtype=3 name_ptr=0x563b6fb30f7d name_str=\"NotFound\"\nOS_ObjectIdFindByName: calling OS_ObjectIdGetByName(lock=OS_LOCK_MODE_GLOBAL, idtype=3, name_ptr=0x563b6fb30f7d)\nOS_ObjectIdFindByName: OS_ObjectIdGetByName returned -17\nOS_ObjectIdFindByName: object not found for name_ptr=0x563b6fb30f7d name_str=\"NotFound\"\nOS_ObjectIdFindByName EXIT: return_code=-17\nOS_ObjectIdFindByName ENTRY: idtype=5 name_ptr=0x7ffd225844c0 name_str=\"YYYYYYYYYYYYYYYYYYYYYYYYYYYYY\"\nOS_ObjectIdFindByName ENTRY: idtype=5 name_ptr=0x563b6fb316d9 name_str=\"NotFound\"\nOS_ObjectIdFindByName: calling OS_ObjectIdGetByName(lock=OS_LOCK_MODE_GLOBAL, idtype=5, name_ptr=0x563b6fb316d9)\nOS_ObjectIdFindByName: OS_ObjectIdGetByName returned -17\nOS_ObjectIdFindByName: object not found for name_ptr=0x563b6fb316d9 name_str=\"NotFound\"\nOS_ObjectIdFindByName EXIT: return_code=-17\nOS_ObjectIdFindByName ENTRY: idtype=2 name_ptr=0x7ffd225844c0 name_str=\"YYYYYYYYYYYYYYYYYYYYYYYYYYYYY\"\nOS_ObjectIdFindByName ENTRY: idtype=2 name_ptr=0x563b6fb2ff50 name_str=\"NameNotFound\"\nOS_ObjectIdFindByName: calling OS_ObjectIdGetByName(lock=OS_LOCK_MODE_GLOBAL, idtype=2, name_ptr=0x563b6fb2ff50)\nOS_ObjectIdFindByName: OS_ObjectIdGetByName returned -17\nOS_ObjectIdFindByName: object not found for name_ptr=0x563b6fb2ff50 name_str=\"NameNotFound\"\nOS_ObjectIdFindByName EXIT: return_code=-17\nOS_ObjectIdFindByName ENTRY: idtype=1 name_ptr=0x563b6fd9ed70 name_str=\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\nOS_ObjectIdFindByName ENTRY: idtype=1 name_ptr=0x563b6fb32975 name_str=\"NotFound\"\nOS_ObjectIdFindByName: calling OS_ObjectIdGetByName(lock=OS_LOCK_MODE_GLOBAL, idtype=1, name_ptr=0x563b6fb32975)\nOS_ObjectIdFindByName: OS_ObjectIdGetByName returned -17\nOS_ObjectIdFindByName: object not found for name_ptr=0x563b6fb32975 name_str=\"NotFound\"\nOS_ObjectIdFindByName EXIT: return_code=-17\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. OS_ObjectIdFindByName receives a const char *name and only uses it for lookup (it is not modified). The scenario describes that the lower-level search API (OS_ObjectIdGetBySearch / match callback) takes a void *arg (or match signature uses void *), which forces callers to pass the const char * as a non-const void * (effectively discarding the const qualifier). That is exactly what MISRA C 2023 Rule 8.13 forbids \u2014 pointers should point to a const-qualified type whenever the pointed-to data is not modified. The provided test/logs show the name pointer being forwarded unchanged and not modified, supporting the claim that the pointer could and should be const-qualified throughout the call chain. The correct fix is to change the search API and matching callback signatures to accept const void * (and corresponding const-qualified match function prototype) so the constness is preserved."
}