{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe chain passes a const char * (name) through a non-const void * parameter. OS_ObjectIdGetByName casts (void *)name when calling OS_ObjectIdGetBySearch, and OS_ObjectIdGetBySearch/OS_ObjectIdFindNextMatch accept void *arg (not const void *). This discards the const qualifier and therefore violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFindByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1563.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFindByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindByName:\n```c\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFindByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/*\n * Probe logger: append human-readable trace information to /tmp/logs/1563.txt\n * Designed to be lightweight and not change control flow or logic.\n */\nstatic void probe_write_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1563.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging is not available, silently continue to preserve original behavior. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fclose(fp);\n}\n\n/*\n * OS_ObjectIdFindByName with probes inserted. The original logic is preserved;\n * probes only record parameters, control path milestones, and relevant state.\n */\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Log function entry and input state. */\n    probe_write_log(\"[1563] ENTRY: OS_ObjectIdFindByName idtype=%ld, name_ptr=%p, name=\\\"%s\\\"\\n\",\n                    (long)idtype, (const void *)name, (name != NULL) ? name : \"(null)\");\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    /* Log that argument checks passed. If the macros returned early, no further logs will appear. */\n    probe_write_log(\"[1563] After checks: name_ptr=%p\\n\", (const void *)name);\n\n    probe_write_log(\"[1563] About to call OS_ObjectIdGetByName with idtype=%ld, name_ptr=%p\\n\",\n                    (long)idtype, (const void *)name);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n\n    probe_write_log(\"[1563] Returned from OS_ObjectIdGetByName: return_code=%ld\\n\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        probe_write_log(\"[1563] Match found: token.obj_id=%lu; releasing token\\n\", (unsigned long)token.obj_id);\n\n        OS_ObjectIdRelease(&token);\n\n        probe_write_log(\"[1563] Token released for obj_id=%lu\\n\", (unsigned long)token.obj_id);\n    }\n    else\n    {\n        probe_write_log(\"[1563] No match found for name_ptr=%p name=\\\"%s\\\"\\n\",\n                        (const void *)name, (name != NULL) ? name : \"(null)\");\n    }\n\n    probe_write_log(\"[1563] EXIT: OS_ObjectIdFindByName return_code=%ld\\n\", (long)return_code);\n\n    return return_code;\n}\n"
}