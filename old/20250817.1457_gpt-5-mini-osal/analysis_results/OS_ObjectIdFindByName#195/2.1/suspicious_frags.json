{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindByName:\n```c\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_ObjectIdFindByName:\n#define ARGCHECK(cond, errcode) if(!(cond)){returnerrcode;}\n...\n#define LENGTHCHECK(str, len, errcode) ARGCHECK(memchr(str,'\\0',len),errcode)\n...\nint32 OS_ObjectIdGetByName(OS_lock_mode_t lock_mode, osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    return OS_ObjectIdGetBySearch(lock_mode, idtype, OS_ObjectNameMatch, (void *)name, token);\n}\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef uint32 osal_objtype_t\n...\ntypedef uint32 osal_id_t\n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERR_NAME_NOT_FOUND (-17)\n...\n#define OS_ERR_NAME_TOO_LONG (-13)\n...\n#define OS_MAX_API_NAME 20\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "#define ARGCHECK(cond, errcode) if(!(cond)){returnerrcode;}",
    "#define LENGTHCHECK(str, len, errcode) ARGCHECK(memchr(str,'\\0',len),errcode)",
    "/*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */",
    "LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);",
    "ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);"
  ],
  "explanation": "Other fragments in the function are straightforward control flow and do not, on their face, indicate unreachable code: the call to OS_ObjectIdGetByName and the subsequent if (return_code == OS_SUCCESS) branch are normal conditional execution paths; the assignment *object_id = token.obj_id and the OS_ObjectIdRelease(&token) call are reachable only when OS_ObjectIdGetByName succeeds and thus are not unreachable code. The additional provided definitions (OS_ObjectIdGetByName wrapper, OS_ObjectIdRelease wrapper, typedefs, and constant definitions) are simple wrappers or declarations and do not introduce obvious unreachable code by themselves. Therefore they do not require further investigation with respect to MISRA C Rule 2.1."
}