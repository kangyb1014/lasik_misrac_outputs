{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment in the switch (e.g. TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;) can be executed but then immediately overwritten by the subsequent if (MsgEnabled <= 1) { TermModeBits = OS_BSP_CONSOLEMODE_NORMAL; }. Because the switch and that later test both execute only when (MsgEnabled & 1) is true, for the common case MsgEnabled == 1 the value set in the switch is always replaced before it is used. Therefore the switch assignments (including the shown fragment) are dead code in that scenario and Rule 2.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ExecTput code that contains useful probe functions that print useful logs to a file \"/tmp/logs/50.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_ExecTput as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ExecTput:\n```c\nstatic void OS_BSP_ExecTput(const char *cap, const char *param)\n{\n    pid_t cpid;\n    int   status;\n\n    cpid = fork();\n    if (cpid < 0)\n    {\n        return;\n    }\n    if (cpid == 0)\n    {\n        execlp(\"tput\", \"tput\", cap, param, NULL);\n        exit(EXIT_FAILURE);\n    }\n    waitpid(cpid, &status, 0);\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_ExecTput code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <errno.h>\n\nstatic void OS_BSP_ExecTput(const char *cap, const char *param)\n{\n    pid_t cpid;\n    int   status;\n    FILE *log;\n\n    /* Open log file for append. Non-fatal if it fails. */\n    log = fopen(\"/tmp/logs/50.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_BSP_ExecTput: ENTER cap=\\\"%s\\\" param=\\\"%s\\\"\\n\",\n                (cap != NULL) ? cap : \"(null)\", (param != NULL) ? param : \"(null)\");\n        fflush(log);\n    }\n\n    cpid = fork();\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_BSP_ExecTput: fork() returned %d\\n\", (int)cpid);\n        fflush(log);\n    }\n\n    if (cpid < 0)\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_BSP_ExecTput: fork failed errno=%d\\n\", errno);\n            fclose(log);\n        }\n        return;\n    }\n\n    if (cpid == 0)\n    {\n        /* Child process: log intent and attempt to exec tput. */\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_BSP_ExecTput: child: about to execlp(\\\"tput\\\", \\\"tput\\\", \\\"%s\\\", \\\"%s\\\")\\n\",\n                    (cap != NULL) ? cap : \"(null)\", (param != NULL) ? param : \"(null)\");\n            /* Close before exec to ensure file state is clear in parent if exec succeeds. */\n            fclose(log);\n        }\n\n        execlp(\"tput\", \"tput\", cap, param, NULL);\n\n        /* If execlp returns, it failed. Re-open log to report the error, then exit. */\n        log = fopen(\"/tmp/logs/50.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_BSP_ExecTput: child: execlp failed errno=%d\\n\", errno);\n            fclose(log);\n        }\n\n        exit(EXIT_FAILURE);\n    }\n\n    /* Parent process: wait for child and log its termination status. */\n    waitpid(cpid, &status, 0);\n\n    if (log != NULL)\n    {\n        if (WIFEXITED(status))\n        {\n            fprintf(log, \"OS_BSP_ExecTput: parent: child %d exited with status=%d\\n\", (int)cpid, WEXITSTATUS(status));\n        }\n        else if (WIFSIGNALED(status))\n        {\n            fprintf(log, \"OS_BSP_ExecTput: parent: child %d killed by signal=%d\\n\", (int)cpid, WTERMSIG(status));\n        }\n        else\n        {\n            fprintf(log, \"OS_BSP_ExecTput: parent: child %d changed state status=%d\\n\", (int)cpid, status);\n        }\n        fclose(log);\n    }\n}\n"
}