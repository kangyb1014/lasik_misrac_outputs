{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(OutputMessage) without any check that OutputMessage is non-NULL and points to a NUL-terminated character array. If a caller passes NULL or a char buffer that is not NUL-terminated (or a pointer to a subobject near its end), strlen may read past the bounds of the object, violating Rule 21.17. For example, passing a fixed-size buffer filled exactly to capacity without a terminating '\\0', or passing NULL, will cause out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ExecTput code that contains useful probe functions that print useful logs to a file \"/tmp/logs/55.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_ExecTput as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ExecTput:\n```c\nstatic void OS_BSP_ExecTput(const char *cap, const char *param)\n{\n    pid_t cpid;\n    int   status;\n\n    cpid = fork();\n    if (cpid < 0)\n    {\n        return;\n    }\n    if (cpid == 0)\n    {\n        execlp(\"tput\", \"tput\", cap, param, NULL);\n        exit(EXIT_FAILURE);\n    }\n    waitpid(cpid, &status, 0);\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_ExecTput code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <time.h>\n\nstatic void write_log_entry(const char *stage, const char *cap, const char *param, pid_t pid, int status, int err)\n{\n    int fd = open(\"/tmp/logs/55.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n    if (fd < 0)\n    {\n        return;\n    }\n\n    char buf[512];\n    /*\n     * We purposely avoid printing cap/param as strings (\"%s\") because\n     * that would dereference them and could itself cause out-of-bounds\n     * reads if they are not NUL-terminated or are NULL. Instead we log\n     * pointer values and boolean NULL checks to allow other agents to\n     * reproduce and reason about the scenario without introducing a new\n     * violation here.\n     */\n    time_t t = time(NULL);\n    int n = snprintf(buf, sizeof(buf),\n                     \"[%ld] stage=%s pid=%d cap_ptr=%p cap_is_null=%d param_ptr=%p param_is_null=%d status=%d err=%d\\n\",\n                     (long)t,\n                     stage ? stage : \"(null)\",\n                     (int)pid,\n                     (const void *)cap,\n                     (cap == NULL) ? 1 : 0,\n                     (const void *)param,\n                     (param == NULL) ? 1 : 0,\n                     status,\n                     err);\n    if (n > 0)\n    {\n        if (n > (int)sizeof(buf)) n = (int)sizeof(buf);\n        (void)write(fd, buf, (size_t)n);\n    }\n\n    close(fd);\n}\n\nstatic void OS_BSP_ExecTput(const char *cap, const char *param)\n{\n    pid_t cpid;\n    int   status;\n\n    /* Log entry with pointer values and NULL checks before forking */\n    write_log_entry(\"before_fork\", cap, param, -1, 0, 0);\n\n    cpid = fork();\n    if (cpid < 0)\n    {\n        /* fork failed */\n        write_log_entry(\"fork_failed\", cap, param, -1, 0, errno);\n        return;\n    }\n\n    if (cpid == 0)\n    {\n        /* Child: log state before attempting to exec */\n        write_log_entry(\"child_before_execlp\", cap, param, getpid(), 0, 0);\n\n        execlp(\"tput\", \"tput\", cap, param, NULL);\n\n        /* If execlp returns, it failed. Log errno and exit. */\n        write_log_entry(\"execlp_failed\", cap, param, getpid(), 0, errno);\n        exit(EXIT_FAILURE);\n    }\n\n    /* Parent: wait for child and log after waiting */\n    waitpid(cpid, &status, 0);\n    write_log_entry(\"parent_after_waitpid\", cap, param, cpid, status, 0);\n}\n"
}