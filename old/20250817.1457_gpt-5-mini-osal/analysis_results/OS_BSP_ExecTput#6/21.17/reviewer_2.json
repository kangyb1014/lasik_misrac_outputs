{
  "user_message": "An agent A claimed that the following OS_BSP_ExecTput code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_BSP_ExecTput.\n```c\nstatic void OS_BSP_ExecTput(const char *cap, const char *param)\n{\n    pid_t cpid;\n    int   status;\n\n    cpid = fork();\n    if (cpid < 0)\n    {\n        return;\n    }\n    if (cpid == 0)\n    {\n        execlp(\"tput\", \"tput\", cap, param, NULL);\n        exit(EXIT_FAILURE);\n    }\n    waitpid(cpid, &status, 0);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If OutputMessage is NULL or does not point to a valid null-terminated buffer, the call to strlen(OutputMessage) (performed just before OS_BSP_ConsoleOutput_Impl) will read beyond the bounds of the referenced object. For example, if UT_BSP_DoText is called with OutputMessage == NULL, strlen will dereference a null pointer and access invalid memory, causing a MISRA C 2023 Rule 21.17 violation.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic size_t safe_strnlen(const char *s, size_t max)\n{\n    size_t i;\n    if (s == NULL)\n    {\n        return 0u;\n    }\n    for (i = 0u; (i < max) && (s[i] != '\\0'); ++i)\n    {\n        /* empty */\n    }\n    return i;\n}\nstatic void ensure_log_dir(void)\n{\n    /* Try to create the directory; ignore failure if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0700);\n}\nstatic void append_log(const char *label, const char *cap, const char *param, pid_t cpid, int status, int err)\n{\n    FILE *fp = NULL;\n    ensure_log_dir();\n    fp = fopen(\"/tmp/logs/55.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    /* Timestamp would be useful, but keep it minimal and safe. */\n    (void)fprintf(fp, \"%s: pid=%ld, status=%d, errno=%d\\n\", label, (long)cpid, status, err);\n\n    /* Print pointer addresses and a safe, truncated preview of strings. */\n    (void)fprintf(fp, \"  cap:   %p\", (const void *)cap);\n    if (cap != NULL)\n    {\n        size_t len = safe_strnlen(cap, 256u);\n        (void)fprintf(fp, \" \\\"\");\n        if (len > 0u)\n        {\n            (void)fprintf(fp, \"%.*s\", (int)len, cap);\n        }\n        (void)fprintf(fp, \"\\\"\");\n        if (len == 256u)\n        {\n            (void)fprintf(fp, \"...\");\n        }\n    }\n    else\n    {\n        (void)fprintf(fp, \" <NULL>\");\n    }\n    (void)fprintf(fp, \"\\n\");\n\n    (void)fprintf(fp, \"  param: %p\", (const void *)param);\n    if (param != NULL)\n    {\n        size_t len = safe_strnlen(param, 256u);\n        (void)fprintf(fp, \" \\\"\");\n        if (len > 0u)\n        {\n            (void)fprintf(fp, \"%.*s\", (int)len, param);\n        }\n        (void)fprintf(fp, \"\\\"\");\n        if (len == 256u)\n        {\n            (void)fprintf(fp, \"...\");\n        }\n    }\n    else\n    {\n        (void)fprintf(fp, \" <NULL>\");\n    }\n    (void)fprintf(fp, \"\\n\\n\");\n\n    (void)fclose(fp);\n}\nstatic void append_log_simple(const char *label, const char *cap, const char *param)\n{\n    append_log(label, cap, param, (pid_t)-1, -1, 0);\n}\n\nstatic void OS_BSP_ExecTput(const char *cap, const char *param)\n{\n    pid_t cpid;\n    int status;\n\n    /* Log entry with the pointers (do not dereference them here). */\n    append_log_simple(\"ENTER OS_BSP_ExecTput\", cap, param);\n\n    cpid = fork();\n    if (cpid < 0)\n    {\n        /* Log fork failure with errno */\n        append_log(\"FORK_FAILED\", cap, param, cpid, -1, errno);\n        return;\n    }\n\n    if (cpid == 0)\n    {\n        /* Child: log intent to execlp (child PID is 0 here) */\n        append_log(\"CHILD before execlp\", cap, param, cpid, -1, 0);\n\n        /* Preserve original behavior: attempt to execute tput. */\n        execlp(\"tput\", \"tput\", cap, param, NULL);\n\n        /* If execlp returns, it failed. Log errno and exit with failure. */\n        append_log(\"CHILD execlp_failed\", cap, param, cpid, -1, errno);\n        /* Use _exit to avoid flushing parent stdio state again in child. */\n        _exit(EXIT_FAILURE);\n    }\n\n    /* Parent: wait for child and log the result. */\n    if (waitpid(cpid, &status, 0) == -1)\n    {\n        append_log(\"WAITPID_FAILED\", cap, param, cpid, -1, errno);\n    }\n    else\n    {\n        /* Interpret status for more informative logging. */\n        if (WIFEXITED(status))\n        {\n            int exit_code = WEXITSTATUS(status);\n            append_log(\"CHILD_EXITED\", cap, param, cpid, exit_code, 0);\n        }\n        else if (WIFSIGNALED(status))\n        {\n            int term_sig = WTERMSIG(status);\n            append_log(\"CHILD_SIGNALED\", cap, param, cpid, term_sig, 0);\n        }\n        else\n        {\n            append_log(\"CHILD_UNKNOWN_STATUS\", cap, param, cpid, status, 0);\n        }\n    }\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_BSP_ExecTput. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C:2023 Rule 21.17 concerns use of the string.h functions (memcpy, strlen, strcpy, etc.) and preventing accesses beyond the bounds of objects passed to those functions. The OS_BSP_ExecTput implementation shown does not call any functions from <string.h> \u2014 it calls fork, execlp and waitpid. The scenario described by agent A refers to a call to strlen(OutputMessage) performed elsewhere (e.g. in UT_BSP_DoText / OS_BSP_ConsoleOutput_Impl). If such a strlen is invoked with a NULL or non-terminated pointer, that is indeed a separate potential violation of Rule 21.17 (or another undefined-behavior rule) in that other function, but it is unrelated to OS_BSP_ExecTput. Note also: execlp expects C string pointers (or an early NULL to terminate argv); passing invalid/dangling pointers to execlp would be undefined behavior but is not a 21.17 violation in the code shown. Therefore agent A\u2019s claim that OS_BSP_ExecTput violates MISRA C 2023 Rule 21.17 is incorrect."
}