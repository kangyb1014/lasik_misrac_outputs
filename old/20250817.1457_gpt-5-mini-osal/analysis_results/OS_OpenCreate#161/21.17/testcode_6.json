{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe inline OS_strnlen implementation calls memchr(s, 0, maxlen) with maxlen = OS_MAX_PATH_LEN. If the object referenced by VirtualPath is smaller than OS_MAX_PATH_LEN (for example a caller passes a pointer to a 16\u2011byte buffer while OS_MAX_PATH_LEN is larger), memchr will scan past the end of that object and access out-of-bounds memory. This use of the <string.h> function memchr can therefore violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_OpenCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1295.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_OpenCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_OpenCreate:\n```c\nint32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filedes);\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    return_code = OS_TranslatePath(path, (char *)local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_OpenCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: write control-flow and state information to /tmp/logs/1295.txt.\n * This helper intentionally avoids dereferencing the caller-provided `path`\n * pointer to prevent introducing additional out-of-bounds accesses. It logs\n * pointer values and only prints `local_path` when provided (it is an\n * internal buffer owned by this function and therefore safe to print after\n * translation succeeds).\n */\nstatic void OS_LogProbe(const char *stage, const char *path, const char *local_path, int flags, int access_mode, const void *token_ptr, const void *stream_ptr, int return_code, const void *filedes_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/1295.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"STAGE: %s\\n\", stage);\n    fprintf(f, \"  path_ptr=%p\\n\", (const void *)path);\n    if (local_path != NULL)\n    {\n        /* local_path is an internal buffer allocated on the stack of this function\n         * so it is safe to print when provided. Avoid printing the caller's `path`\n         * contents, which could trigger the reported violation. */\n        fprintf(f, \"  local_path=\\\"%s\\\"\\n\", local_path);\n    }\n    fprintf(f, \"  flags=%d access_mode=%d\\n\", flags, access_mode);\n    fprintf(f, \"  token_ptr=%p stream_ptr=%p filedes_ptr=%p return_code=%d\\n\\n\", token_ptr, stream_ptr, filedes_ptr, return_code);\n\n    fclose(f);\n}\n\nint32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n\n    /* Log entry state (do not dereference `path`) */\n    OS_LogProbe(\"entry\", path, NULL, (int)flags, (int)access_mode, NULL, NULL, -1, (const void *)filedes);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filedes);\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n\n    /* Log after init */\n    OS_LogProbe(\"after_init_filedes\", path, NULL, (int)flags, (int)access_mode, NULL, NULL, -1, (const void *)filedes);\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        OS_LogProbe(\"invalid_access_mode\", path, NULL, (int)flags, (int)access_mode, NULL, NULL, OS_ERROR, (const void *)filedes);\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    OS_LogProbe(\"pre_translate\", path, NULL, (int)flags, (int)access_mode, NULL, NULL, -1, (const void *)filedes);\n    return_code = OS_TranslatePath(path, (char *)local_path);\n\n    /* Log result of translation. Only print local_path if translation succeeded. */\n    OS_LogProbe(\"post_translate\", path, (return_code == OS_SUCCESS) ? local_path : NULL, (int)flags, (int)access_mode, NULL, NULL, return_code, (const void *)filedes);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        OS_LogProbe(\"after_allocate\", path, local_path, (int)flags, (int)access_mode, (const void *)&token, NULL, return_code, (const void *)filedes);\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream_name, path);\n\n            /* Log after init of object */\n            OS_LogProbe(\"after_object_init\", path, local_path, (int)flags, (int)access_mode, (const void *)&token, (const void *)stream, return_code, (const void *)filedes);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n            OS_LogProbe(\"after_impl\", path, local_path, (int)flags, (int)access_mode, (const void *)&token, (const void *)stream, return_code, (const void *)filedes);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n            OS_LogProbe(\"after_finalize\", path, local_path, (int)flags, (int)access_mode, (const void *)&token, (const void *)stream, return_code, (const void *)filedes);\n        }\n    }\n\n    OS_LogProbe(\"exit\", path, (return_code == OS_SUCCESS) ? local_path : NULL, (int)flags, (int)access_mode, NULL, NULL, return_code, (const void *)filedes);\n\n    return return_code;\n}\n"
}