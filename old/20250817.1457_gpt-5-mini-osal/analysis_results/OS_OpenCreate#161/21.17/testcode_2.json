{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe inline OS_strnlen uses memchr(s, 0, maxlen). If the caller supplies an s that refers to an object whose actual storage is smaller than maxlen, memchr will read up to maxlen bytes and thus can access beyond the bounds of the object. For example, OS_TranslatePath calls OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) where VirtualPath is a caller-provided string (not guaranteed to have OS_MAX_PATH_LEN bytes allocated). If VirtualPath actually points to a char buffer of length 16 but OS_MAX_PATH_LEN is 64, memchr may read past the 16-byte object \u2014 violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_OpenCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1295.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_OpenCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_OpenCreate:\n```c\nint32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filedes);\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    return_code = OS_TranslatePath(path, (char *)local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_OpenCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append structured logs to /tmp/logs/1295.txt */\nstatic void OS_Probe_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1295.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n\n    /* Log entry and key parameters (do not dereference `path` to avoid extra reads) */\n    OS_Probe_Log(\"OS_OpenCreate ENTRY: filedes_ptr=%p path_ptr=%p flags=%ld access_mode=%ld OS_MAX_LOCAL_PATH_LEN=%d\",\n                 (void *)filedes, (void *)path, (long)flags, (long)access_mode, (int)OS_MAX_LOCAL_PATH_LEN);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filedes);\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        OS_Probe_Log(\"OS_OpenCreate ABORT: invalid access_mode=%ld\", (long)access_mode);\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    OS_Probe_Log(\"OS_OpenCreate: calling OS_TranslatePath(path_ptr=%p, local_path=%p)\", (void *)path, (void *)local_path);\n    return_code = OS_TranslatePath(path, (char *)local_path);\n    OS_Probe_Log(\"OS_OpenCreate: OS_TranslatePath returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* After successful translation, log the translated path and its safe length (local buffer) */\n        size_t translated_len = strnlen(local_path, sizeof(local_path));\n        OS_Probe_Log(\"OS_OpenCreate: translated local_path='%s' length=%zu (buffer_size=%zu)\",\n                     local_path, translated_len, sizeof(local_path));\n\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        OS_Probe_Log(\"OS_OpenCreate: OS_ObjectIdAllocateNew returned %ld\", (long)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream_name, path);\n            OS_Probe_Log(\"OS_OpenCreate: OS_OBJECT_INIT done. stream_ptr=%p token_addr=%p\", (void *)stream, (void *)&token);\n\n            /* Now call the OS-specific implementation.  */\n            OS_Probe_Log(\"OS_OpenCreate: calling OS_FileOpen_Impl(token_addr=%p, local_path=%p, flags=%ld, access_mode=%ld)\",\n                         (void *)&token, (void *)local_path, (long)flags, (long)access_mode);\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n            OS_Probe_Log(\"OS_OpenCreate: OS_FileOpen_Impl returned %ld\", (long)return_code);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n            OS_Probe_Log(\"OS_OpenCreate: OS_ObjectIdFinalizeNew returned %ld filedes=%p *filedes=%ld\", (long)return_code, (void *)filedes, (long)(*filedes));\n        }\n    }\n    else\n    {\n        OS_Probe_Log(\"OS_OpenCreate: OS_TranslatePath failed with %ld for path_ptr=%p\", (long)return_code, (void *)path);\n    }\n\n    OS_Probe_Log(\"OS_OpenCreate EXIT: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}