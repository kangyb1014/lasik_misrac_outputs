{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1290.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filedes);\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n\n    /* Log entry and initial state */\n    os_log_probe(\"OS_OpenCreate ENTRY: filedes_ptr=%p, initial_filedes=%d, path=\\\"%s\\\", flags=%d, access_mode=%d\",\n                 (void *)filedes, (int)*filedes, path ? path : \"(null)\", (int)flags, (int)access_mode);\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        os_log_probe(\"OS_OpenCreate: invalid access_mode=%d -> returning OS_ERROR\", (int)access_mode);\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    os_log_probe(\"OS_OpenCreate: calling OS_TranslatePath with path=\\\"%s\\\"\", path ? path : \"(null)\");\n    return_code = OS_TranslatePath(path, (char *)local_path);\n    os_log_probe(\"OS_OpenCreate: OS_TranslatePath returned %d, local_path=\\\"%s\\\"\",\n                 (int)return_code, local_path[0] ? local_path : \"(empty)\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        os_log_probe(\"OS_OpenCreate: calling OS_ObjectIdAllocateNew\");\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        os_log_probe(\"OS_OpenCreate: OS_ObjectIdAllocateNew returned %d, token=%d\", (int)return_code, (int)token);\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n            os_log_probe(\"OS_OpenCreate: stream_ptr=%p (token=%d)\", (void *)stream, (int)token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream_name, path);\n            os_log_probe(\"OS_OpenCreate: OS_OBJECT_INIT called for token=%d, stream_name=\\\"%s\\\"\",\n                         (int)token, path ? path : \"(null)\");\n\n            /* Now call the OS-specific implementation.  */\n            os_log_probe(\"OS_OpenCreate: calling OS_FileOpen_Impl with local_path=\\\"%s\\\", flags=%d, access_mode=%d\",\n                         local_path[0] ? local_path : \"(empty)\", (int)flags, (int)access_mode);\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n            os_log_probe(\"OS_OpenCreate: OS_FileOpen_Impl returned %d\", (int)return_code);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n            os_log_probe(\"OS_OpenCreate: OS_ObjectIdFinalizeNew returned %d, final_filedes=%d\",\n                         (int)return_code, filedes ? (int)*filedes : -1);\n        }\n        else\n        {\n            os_log_probe(\"OS_OpenCreate: OS_ObjectIdAllocateNew failed with %d\", (int)return_code);\n        }\n    }\n    else\n    {\n        os_log_probe(\"OS_OpenCreate: OS_TranslatePath failed with %d - skipping allocation/open\", (int)return_code);\n    }\n\n    os_log_probe(\"OS_OpenCreate EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpde8an_44/src/src/os/shared/src/osapi-file.c: In function 'OS_OpenCreate':\n/tmp/tmpde8an_44/src/src/os/shared/src/osapi-file.c:171:9: error: aggregate value used where an integer was expected\n  171 |         os_log_probe(\"OS_OpenCreate: OS_ObjectIdAllocateNew returned %d, token=%d\", (int)return_code, (int)token);\n      |         ^~~~~~~~~~~~\n/tmp/tmpde8an_44/src/src/os/shared/src/osapi-file.c:175:13: error: aggregate value used where an integer was expected\n  175 |             os_log_probe(\"OS_OpenCreate: stream_ptr=%p (token=%d)\", (void *)stream, (int)token);\n      |             ^~~~~~~~~~~~\n/tmp/tmpde8an_44/src/src/os/shared/src/osapi-file.c:180:26: error: aggregate value used where an integer was expected\n  180 |                          (int)token, path ? path : \"(null)\");\n      |                          ^\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:174: CMakeFiles/osal.dir/src/os/shared/src/osapi-file.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_OpenCreate as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Minimal type definitions and external declarations to allow this file to compile. */\ntypedef int32_t int32;\ntypedef uint32_t osal_id_t;\n\n/* Represent the object token as an aggregate type (struct) to match the error context. */\ntypedef struct\n{\n    int32 value;\n} OS_object_token_t;\n\ntypedef struct OS_stream_internal_record_t\n{\n    char stream_name[128];\n    /* other fields omitted */\n} OS_stream_internal_record_t;\n\n/* Constants used by the function */\nenum\n{\n    OS_MAX_LOCAL_PATH_LEN = 256,\n    OS_WRITE_ONLY = 1,\n    OS_READ_ONLY = 2,\n    OS_READ_WRITE = 3,\n    OS_SUCCESS = 0,\n    OS_ERROR = -1,\n    OS_INVALID_POINTER = -2,\n    LOCAL_OBJID_TYPE = 0,\n    OS_OBJECT_ID_UNDEFINED = -1\n};\n\n/* External symbols referenced by the function (not defined here). */nextern void *OS_stream_table;\nextern int32 OS_TranslatePath(const char *path, char *local_path);\nextern int32 OS_ObjectIdAllocateNew(int type, void *arg, OS_object_token_t *token);\nextern int32 OS_ObjectIdFinalizeNew(int32 result, OS_object_token_t *token, osal_id_t *out_id);\nextern int32 OS_FileOpen_Impl(OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode);\nextern OS_stream_internal_record_t *OS_OBJECT_TABLE_GET(void *table, OS_object_token_t token);\nextern void OS_OBJECT_INIT(OS_object_token_t token, OS_stream_internal_record_t *stream, char *stream_name, const char *path);\n\n/* Simple logging helper that appends to a file. */\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1290.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters (expanded instead of macro) */\n    if (filedes == NULL)\n    {\n        return OS_INVALID_POINTER;\n    }\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n\n    /* Log entry and initial state */\n    os_log_probe(\"OS_OpenCreate ENTRY: filedes_ptr=%p, initial_filedes=%d, path=\\\"%s\\\", flags=%d, access_mode=%d\",\n                 (void *)filedes, (int)*filedes, path ? path : \"(null)\", (int)flags, (int)access_mode);\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        os_log_probe(\"OS_OpenCreate: invalid access_mode=%d -> returning OS_ERROR\", (int)access_mode);\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    os_log_probe(\"OS_OpenCreate: calling OS_TranslatePath with path=\\\"%s\\\"\", path ? path : \"(null)\");\n    return_code = OS_TranslatePath(path, (char *)local_path);\n    os_log_probe(\"OS_OpenCreate: OS_TranslatePath returned %d, local_path=\\\"%s\\\"\",\n                 (int)return_code, local_path[0] ? local_path : \"(empty)\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        os_log_probe(\"OS_OpenCreate: calling OS_ObjectIdAllocateNew\");\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        /* Print the token's address instead of casting the aggregate to int */\n        os_log_probe(\"OS_OpenCreate: OS_ObjectIdAllocateNew returned %d, token=%p\", (int)return_code, (const void *)&token);\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n            os_log_probe(\"OS_OpenCreate: stream_ptr=%p (token=%p)\", (void *)stream, (const void *)&token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream->stream_name, path);\n            os_log_probe(\"OS_OpenCreate: OS_OBJECT_INIT called for token=%p, stream_name=\\\"%s\\\"\",\n                         (const void *)&token, path ? path : \"(null)\");\n\n            /* Now call the OS-specific implementation.  */\n            os_log_probe(\"OS_OpenCreate: calling OS_FileOpen_Impl with local_path=\\\"%s\\\", flags=%d, access_mode=%d\",\n                         local_path[0] ? local_path : \"(empty)\", (int)flags, (int)access_mode);\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n            os_log_probe(\"OS_OpenCreate: OS_FileOpen_Impl returned %d\", (int)return_code);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n            os_log_probe(\"OS_OpenCreate: OS_ObjectIdFinalizeNew returned %d, final_filedes=%d\",\n                         (int)return_code, filedes ? (int)*filedes : -1);\n        }\n        else\n        {\n            os_log_probe(\"OS_OpenCreate: OS_ObjectIdAllocateNew failed with %d\", (int)return_code);\n        }\n    }\n    else\n    {\n        os_log_probe(\"OS_OpenCreate: OS_TranslatePath failed with %d - skipping allocation/open\", (int)return_code);\n    }\n\n    os_log_probe(\"OS_OpenCreate EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "The build errors were caused by attempts to cast an aggregate type (OS_object_token_t) to int for printing. I changed the log messages to print the token's address using the %p format and (const void *)&token instead of casting the aggregate to an integer. Additionally, I expanded the OS_CHECK_POINTER macro into an explicit NULL check to avoid undefined macro usage, and added minimal type definitions and extern declarations so the file compiles standalone. No logic flow was altered; only logging and parameter-check code were adjusted to resolve the compilation errors."
}