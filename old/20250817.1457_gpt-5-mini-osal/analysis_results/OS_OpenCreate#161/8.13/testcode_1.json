{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdAllocateNew the parameter 'name' has type 'const char *' but it is passed to OS_ObjectIdFindNextMatch as (void *)name, which discards the const qualifier. This casts away const and allows the callee to receive a non-const pointer to data that was originally const (for example a string literal or other const buffer). That action violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible) because the pointer could/should be const and the code removes that qualification.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_OpenCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1291.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_OpenCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_OpenCreate:\n```c\nint32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filedes);\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    return_code = OS_TranslatePath(path, (char *)local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_OpenCreate code.\n",
  "test_code": "/* Inserted logging helper for OS_OpenCreate control-flow/state tracing. */\n#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\nstatic void os_opencreate_log(const char *stage,\n                              const char *path,\n                              const char *local_path,\n                              int32_t flags,\n                              int32_t access_mode,\n                              int32_t return_code,\n                              const void *token_addr,\n                              const void *stream_ptr,\n                              const void *filedes_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/1291.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print pointer values and string contents where available. */\n        fprintf(f,\n                \"[OS_OpenCreate] %s: path=%p(%s), local_path=%p(%s), flags=%d, access_mode=%d, return_code=%d, token=%p, stream=%p, filedes=%p\\n\",\n                stage,\n                (const void *)path,\n                (path != NULL) ? path : \"(null)\",\n                (const void *)local_path,\n                (local_path != NULL && local_path[0] != '\\0') ? local_path : \"(null)\",\n                (int)flags,\n                (int)access_mode,\n                (int)return_code,\n                token_addr,\n                stream_ptr,\n                filedes_ptr);\n        fclose(f);\n    }\n}\n\nint32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n\n    /* Log entry with initial parameters. Do not use uninitialized return_code here. */\n    os_opencreate_log(\"entry\", path, \"\", flags, access_mode, -9999, NULL, NULL, filedes);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filedes);\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        os_opencreate_log(\"invalid_access_mode\", path, \"\", flags, access_mode, OS_ERROR, NULL, NULL, filedes);\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    return_code = OS_TranslatePath(path, (char *)local_path);\n\n    /* Log result of translation and the translated path buffer. */\n    os_opencreate_log(\"after_translate\", path, local_path, flags, access_mode, return_code, NULL, NULL, filedes);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        os_opencreate_log(\"before_allocate\", path, local_path, flags, access_mode, return_code, NULL, NULL, filedes);\n\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n\n        /* Log result of allocation and token address */\n        os_opencreate_log(\"after_allocate\", path, local_path, flags, access_mode, return_code, (const void *)&token, NULL, filedes);\n\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream_name, path);\n\n            /* Log after initializing the object record (name saved). */\n            os_opencreate_log(\"after_init\", path, local_path, flags, access_mode, return_code, (const void *)&token, (const void *)stream, filedes);\n\n            /* Now call the OS-specific implementation.  */\n            os_opencreate_log(\"before_impl\", path, local_path, flags, access_mode, return_code, (const void *)&token, (const void *)stream, filedes);\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n\n            /* Check result, finalize record, and unlock global table. */\n            os_opencreate_log(\"after_impl\", path, local_path, flags, access_mode, return_code, (const void *)&token, (const void *)stream, filedes);\n\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n\n            /* Final state log */\n            os_opencreate_log(\"final\", path, local_path, flags, access_mode, return_code, (const void *)&token, (const void *)stream, filedes);\n        }\n    }\n\n    return return_code;\n}\n"
}