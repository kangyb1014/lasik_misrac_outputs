{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts a const char * (VirtualPath) to void *: (void *)VirtualPath when calling OS_ObjectIdGetBySearch. This discards the const qualifier on the pointer argument, which violates the requirement that pointers should point to const-qualified types whenever possible. The proper fix is to change the called function prototype to accept a const void * (or otherwise preserve const) and remove the cast.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_OpenCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1291.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_OpenCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_OpenCreate:\n```c\nint32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filedes);\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    return_code = OS_TranslatePath(path, (char *)local_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_OpenCreate code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: write control-flow and state info to /tmp/logs/1291.txt */\nstatic void OS_OpenCreate_Probe(const char *stage, const char *path, const char *local_path, int32 flags, int32 access_mode, int32 return_code, const osal_id_t *filedes)\n{\n    FILE *f = fopen(\"/tmp/logs/1291.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log pointer values and short string snapshots safely. Do not cast away const qualifiers. */\n        fprintf(f, \"OS_OpenCreate: stage=%s\\n\", stage);\n        fprintf(f, \"  path ptr=%p\\n\", (const void *)path);\n        if (path != NULL)\n        {\n            /* Limit the printed path length to avoid huge logs or unintended side-effects. */\n            fprintf(f, \"  path=\");\n            for (size_t i = 0; i < 128 && path[i] != '\\0'; ++i) fputc((int)path[i], f);\n            if (path[0] == '\\0') fprintf(f, \"(empty)\");\n            fprintf(f, \"\\n\");\n        }\n        fprintf(f, \"  local_path ptr=%p\\n\", (const void *)local_path);\n        if (local_path != NULL)\n        {\n            fprintf(f, \"  local_path=\");\n            for (size_t i = 0; i < 128 && local_path[i] != '\\0'; ++i) fputc((int)local_path[i], f);\n            if (local_path[0] == '\\0') fprintf(f, \"(empty)\");\n            fprintf(f, \"\\n\");\n        }\n        fprintf(f, \"  flags=%d, access_mode=%d, return_code=%ld, filedes_ptr=%p\\n\\n\",\n                (int)flags, (int)access_mode, (long)return_code, (const void *)filedes);\n        fclose(f);\n    }\n}\n\nint32 OS_OpenCreate(osal_id_t *filedes, const char *path, int32 flags, int32 access_mode)\n{\n    int32                        return_code;\n    char                         local_path[OS_MAX_LOCAL_PATH_LEN];\n    OS_object_token_t            token;\n    OS_stream_internal_record_t *stream;\n\n    /* Log entry and initial parameters (path is const-qualified) */\n    OS_OpenCreate_Probe(\"entry\", path, NULL, flags, access_mode, 0, filedes);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(filedes);\n\n    /* Initialize file descriptor */\n    *filedes = OS_OBJECT_ID_UNDEFINED;\n\n    /*\n    ** Check for a valid access mode\n    */\n    if (access_mode != OS_WRITE_ONLY && access_mode != OS_READ_ONLY && access_mode != OS_READ_WRITE)\n    {\n        /* Log invalid access_mode decision */\n        OS_OpenCreate_Probe(\"invalid_access_mode\", path, NULL, flags, access_mode, OS_ERROR, filedes);\n        return OS_ERROR;\n    }\n\n    /*\n     * Translate the path\n     */\n    return_code = OS_TranslatePath(path, (char *)local_path);\n\n    /* Log result of path translation and the translated path */\n    OS_OpenCreate_Probe(\"after_translate\", path, local_path, flags, access_mode, return_code, filedes);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n        return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &token);\n\n        /* Log allocation attempt */\n        OS_OpenCreate_Probe(\"after_allocate\", path, local_path, flags, access_mode, return_code, filedes);\n\n        if (return_code == OS_SUCCESS)\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, token);\n\n            /* Reset the table entry and save the name */\n            OS_OBJECT_INIT(token, stream, stream_name, path);\n\n            /* Now call the OS-specific implementation.  */\n            OS_OpenCreate_Probe(\"before_impl\", path, local_path, flags, access_mode, return_code, filedes);\n            return_code = OS_FileOpen_Impl(&token, local_path, flags, access_mode);\n\n            /* Check result, finalize record, and unlock global table. */\n            return_code = OS_ObjectIdFinalizeNew(return_code, &token, filedes);\n\n            /* Log after finalize with final return code and resulting filedes */\n            OS_OpenCreate_Probe(\"after_finalize\", path, local_path, flags, access_mode, return_code, filedes);\n        }\n    }\n\n    /* Final log and return */\n    OS_OpenCreate_Probe(\"exit\", path, (return_code == OS_SUCCESS) ? local_path : NULL, flags, access_mode, return_code, filedes);\n\n    return return_code;\n}\n"
}