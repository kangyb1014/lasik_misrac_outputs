{
  "user_message": "An agent A claimed that the following OS_QueuePut code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_QueuePut.\n```c\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer variable 'impl' is declared as OS_impl_queue_internal_record_t * but in this function it is only used for read-only access (e.g. impl->id is read for mq_timedsend). According to MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type when modification is not required. Declaring it as const OS_impl_queue_internal_record_t *impl (and ensuring OS_OBJECT_TABLE_GET can yield a pointer-to-const) would satisfy the rule.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_QueuePut_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1875.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Log entry and parameters */\n    OS_QueuePut_Log(\"OS_QueuePut ENTRY: queue_id=%llu, data=%p, size=%zu, flags=%u\",\n                     (unsigned long long)queue_id, data, size, (unsigned)flags);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    OS_QueuePut_Log(\"OS_ObjectIdGetById returned %d for queue_id=%llu, token=%p\",\n                     (int)return_code, (unsigned long long)queue_id, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Log the obtained queue pointer and its properties */\n        if (queue != NULL)\n        {\n            OS_QueuePut_Log(\"queue pointer=%p, queue->max_size=%zu\",\n                             (void *)queue, (size_t)queue->max_size);\n        }\n        else\n        {\n            OS_QueuePut_Log(\"queue pointer is NULL for token=%p\", (void *)&token);\n        }\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            OS_QueuePut_Log(\"Selected path: size (%zu) > queue->max_size (%zu) -> returning OS_QUEUE_INVALID_SIZE\",\n                             size, (size_t)queue->max_size);\n\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            OS_QueuePut_Log(\"Selected path: calling OS_QueuePut_Impl with token=%p, data=%p, size=%zu, flags=%u\",\n                             (void *)&token, data, size, (unsigned)flags);\n\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n\n            OS_QueuePut_Log(\"OS_QueuePut_Impl returned %d\", (int)return_code);\n        }\n    }\n    else\n    {\n        OS_QueuePut_Log(\"OS_ObjectIdGetById failed with %d, skipping queue operations\", (int)return_code);\n    }\n\n    OS_QueuePut_Log(\"OS_QueuePut EXIT: returning %d\", (int)return_code);\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_QueuePut ENTRY: queue_id=3735928559, data=0x7ffcd07e5090, size=4, flags=0\nOS_ObjectIdGetById returned -35 for queue_id=3735928559, token=0x7ffcd07e5050\nOS_ObjectIdGetById failed with -35, skipping queue operations\nOS_QueuePut EXIT: returning -35\nOS_QueuePut ENTRY: queue_id=0, data=0x7ffcd07e5090, size=4, flags=0\nOS_ObjectIdGetById returned -35 for queue_id=0, token=0x7ffcd07e5050\nOS_ObjectIdGetById failed with -35, skipping queue operations\nOS_QueuePut EXIT: returning -35\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In OS_QueuePut the local variable 'queue' is declared as a non-const pointer but in this function it is only used for read-only access (e.g. reading queue->max_size) and is never used to modify the pointed-to object or passed to callers that would modify it. MISRA C 2023 Rule 8.13 requires a pointer to point to a const-qualified type whenever possible, so 'queue' should be declared with a const-qualified target type (for example: const OS_queue_internal_record_t *queue). Assigning the result of OS_OBJECT_TABLE_GET (a T*) to a const-qualified pointer (const T*) is allowed in C, so this change is feasible without forcing changes elsewhere. Therefore the reported violation of Rule 8.13 is correct."
}