{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'impl' is declared as OS_impl_queue_internal_record_t * but in this function it is only used for read-only access (e.g. impl->id is read for mq_timedsend). According to MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type when modification is not required. Declaring it as const OS_impl_queue_internal_record_t *impl (and ensuring OS_OBJECT_TABLE_GET can yield a pointer-to-const) would satisfy the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueuePut code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1875.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueuePut as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueuePut:\n```c\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueuePut code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper - appends human-readable logs to /tmp/logs/1875.txt */\nstatic void OS_QueuePut_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1875.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Log entry and parameters */\n    OS_QueuePut_Log(\"OS_QueuePut ENTRY: queue_id=%llu, data=%p, size=%zu, flags=%u\",\n                     (unsigned long long)queue_id, data, size, (unsigned)flags);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    OS_QueuePut_Log(\"OS_ObjectIdGetById returned %d for queue_id=%llu, token=%p\",\n                     (int)return_code, (unsigned long long)queue_id, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Log the obtained queue pointer and its properties */\n        if (queue != NULL)\n        {\n            OS_QueuePut_Log(\"queue pointer=%p, queue->max_size=%zu\",\n                             (void *)queue, (size_t)queue->max_size);\n        }\n        else\n        {\n            OS_QueuePut_Log(\"queue pointer is NULL for token=%p\", (void *)&token);\n        }\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            OS_QueuePut_Log(\"Selected path: size (%zu) > queue->max_size (%zu) -> returning OS_QUEUE_INVALID_SIZE\",\n                             size, (size_t)queue->max_size);\n\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            OS_QueuePut_Log(\"Selected path: calling OS_QueuePut_Impl with token=%p, data=%p, size=%zu, flags=%u\",\n                             (void *)&token, data, size, (unsigned)flags);\n\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n\n            OS_QueuePut_Log(\"OS_QueuePut_Impl returned %d\", (int)return_code);\n        }\n    }\n    else\n    {\n        OS_QueuePut_Log(\"OS_ObjectIdGetById failed with %d, skipping queue operations\", (int)return_code);\n    }\n\n    OS_QueuePut_Log(\"OS_QueuePut EXIT: returning %d\", (int)return_code);\n\n    return return_code;\n}\n"
}