{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'queue' is declared as a non-const pointer (OS_queue_internal_record_t *queue) but is only used for reading (checking queue->max_size). Per MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible. The OS_OBJECT_TABLE_GET macro yields &tbl[...] (a pointer to non-const), but assigning that to a pointer-to-const is allowed; therefore the local declaration should be changed to const OS_queue_internal_record_t *queue to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueuePut code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1875.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueuePut as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueuePut:\n```c\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueuePut code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Small helper to record probing information to a log file. */\n    /* This preserves original behavior and only appends diagnostic info. */\n    void OS_QueuePut_LogState(const OS_object_token_t *token_ptr,\n                              const OS_queue_internal_record_t *queue_ptr,\n                              size_t size_val,\n                              uint32 flags_val,\n                              const char *msg,\n                              int32 code)\n    {\n        FILE *f = fopen(\"/tmp/logs/1875.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_QueuePut: %s\\n\", msg);\n            fprintf(f, \"  token_addr=%p queue_ptr=%p size=%zu flags=%u return_code=%ld\\n\",\n                    (void *)token_ptr, (void *)queue_ptr, size_val, (unsigned)flags_val, (long)code);\n            if (queue_ptr != NULL)\n            {\n                /* max_size is assumed to be size_t-like; print with %%zu */\n                fprintf(f, \"  queue->max_size=%zu\\n\", queue_ptr->max_size);\n            }\n            fclose(f);\n        }\n    }\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Log after resolving the object and obtaining the queue pointer */\n        OS_QueuePut_LogState(&token, queue, size, flags, \"after object lookup and table get\", return_code);\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            return_code = OS_QUEUE_INVALID_SIZE;\n\n            /* Log the invalid size decision so the path is observable */\n            OS_QueuePut_LogState(&token, queue, size, flags, \"size exceeds queue->max_size - returning INVALID_SIZE\", return_code);\n        }\n        else\n        {\n            /* Log that we are about to call the platform-specific implementation */\n            OS_QueuePut_LogState(&token, queue, size, flags, \"calling OS_QueuePut_Impl\", return_code);\n\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n\n            /* Log result from implementation call */\n            OS_QueuePut_LogState(&token, queue, size, flags, \"returned from OS_QueuePut_Impl\", return_code);\n        }\n    }\n\n    return return_code;\n}\n"
}