{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_QueuePut the local pointer 'queue' is only used to read the record (queue->max_size) and is never used to modify the pointed object. Therefore it can and should be declared to point to a const-qualified type (e.g. const OS_queue_internal_record_t *queue) to express read-only access and prevent accidental modification. As written it is a non-const pointer, which violates MISRA C 2023 Rule 8.13. (Fix: change declaration to 'const OS_queue_internal_record_t *queue;')\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueuePut code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1875.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueuePut as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueuePut:\n```c\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueuePut code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <stdint.h>\n\n/* Helper logging function that appends human-readable traces to /tmp/logs/1875.txt */\nstatic void OS_QueuePut_Log(const char *fmt, ...)\n{\n    static int dir_created = 0;\n    if (!dir_created)\n    {\n        /* Try to create the directory once; ignore errors if it already exists. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        dir_created = 1;\n    }\n\n    FILE *f = fopen(\"/tmp/logs/1875.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Log entry and parameters */\n    OS_QueuePut_Log(\"ENTER OS_QueuePut: queue_id=%llu, data=%p, size=%zu, flags=%u\",\n                    (unsigned long long)(uintptr_t)queue_id, data, size, (unsigned)flags);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    OS_QueuePut_Log(\"OS_ObjectIdGetById returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n        OS_QueuePut_Log(\"Resolved queue pointer=%p\", (void *)queue);\n\n        if (queue != NULL)\n        {\n            /* Log the observed max_size for evidence */\n            OS_QueuePut_Log(\"queue->max_size=%zu, requested size=%zu\", (size_t)queue->max_size, size);\n        }\n        else\n        {\n            OS_QueuePut_Log(\"Warning: queue pointer resolved to NULL\");\n        }\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            OS_QueuePut_Log(\"size > queue->max_size -> setting return_code = OS_QUEUE_INVALID_SIZE\");\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            OS_QueuePut_Log(\"Calling OS_QueuePut_Impl with token=%p, data=%p, size=%zu, flags=%u\",\n                            (void *)&token, data, size, (unsigned)flags);\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n            OS_QueuePut_Log(\"OS_QueuePut_Impl returned %d\", (int)return_code);\n        }\n    }\n\n    OS_QueuePut_Log(\"EXIT OS_QueuePut: returning %d\", (int)return_code);\n    return return_code;\n}\n"
}