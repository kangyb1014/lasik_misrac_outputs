{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_QueuePut_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1875.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Log entry and parameters (pointer values and sizes only) */\n    OS_QueuePut_Log(\"ENTRY: OS_QueuePut queue_id=%\" PRIuPTR \" data=%p size=%zu flags=0x%08\" PRIx32,\n                    (uintptr_t)queue_id, data, size, (uint32_t)flags);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    OS_QueuePut_Log(\"OS_ObjectIdGetById returned %d\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Log the looked-up queue pointer and its max size */\n        OS_QueuePut_Log(\"Queue lookup: queue=%p max_size=%zu\", (void *)queue, queue->max_size);\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            OS_QueuePut_Log(\"Size check failed: size=%zu > max_size=%zu -> OS_QUEUE_INVALID_SIZE\", size, queue->max_size);\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            OS_QueuePut_Log(\"Calling OS_QueuePut_Impl with token=%p data=%p size=%zu flags=0x%08\" PRIx32,\n                            (void *)&token, data, size, (uint32_t)flags);\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n            OS_QueuePut_Log(\"OS_QueuePut_Impl returned %d\", return_code);\n        }\n    }\n\n    OS_QueuePut_Log(\"EXIT: OS_QueuePut return_code=%d\", return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpohzkdt_g/src/src/os/shared/src/osapi-queue.c: In function 'OS_QueuePut_Log':\n/tmp/tmpohzkdt_g/src/src/os/shared/src/osapi-queue.c:206:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  206 |     vfprintf(f, fmt, ap);\n      |                      ^~\n/tmp/tmpohzkdt_g/src/src/os/shared/src/osapi-queue.c: In function 'OS_QueuePut':\n/tmp/tmpohzkdt_g/src/src/os/shared/src/osapi-queue.c:220:52: error: expected ')' before 'PRIuPTR'\n  220 |     OS_QueuePut_Log(\"ENTRY: OS_QueuePut queue_id=%\" PRIuPTR \" data=%p size=%zu flags=0x%08\" PRIx32,\n      |                    ~                               ^~~~~~~~\n      |                                                    )\n/tmp/tmpohzkdt_g/src/src/os/shared/src/osapi-queue.c:54:1: note: 'PRIuPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   53 | #include \"os-shared-idmap.h\"\n  +++ |+#include <inttypes.h>\n   54 | \n/tmp/tmpohzkdt_g/src/src/os/shared/src/osapi-queue.c:247:98: error: expected ')' before 'PRIx32'\n  247 |             OS_QueuePut_Log(\"Calling OS_QueuePut_Impl with token=%p data=%p size=%zu flags=0x%08\" PRIx32,\n      |                            ~                                                                     ^~~~~~~\n      |                                                                                                  )\n/tmp/tmpohzkdt_g/src/src/os/shared/src/osapi-queue.c:247:99: note: 'PRIx32' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n  247 |             OS_QueuePut_Log(\"Calling OS_QueuePut_Impl with token=%p data=%p size=%zu flags=0x%08\" PRIx32,\n      |                                                                                                   ^~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-queue.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-queue.dir/__/__/os/shared/src/osapi-queue.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:4097: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-queue.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_QueuePut as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stddef.h>\n#include <stdint.h>\n\nstatic void OS_QueuePut_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1875.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast ap to the system va_list expected by vfprintf to avoid type-mismatch\n     * when the build environment uses a different typedef (e.g., OCS_va_list).\n     */\n    vfprintf(f, fmt, (va_list)ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Log entry and parameters (pointer values and sizes only) */\n    OS_QueuePut_Log(\"ENTRY: OS_QueuePut queue_id=%\" PRIuPTR \" data=%p size=%zu flags=0x%08\" PRIx32,\n                    (uintptr_t)queue_id, data, size, (uint32_t)flags);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    OS_QueuePut_Log(\"OS_ObjectIdGetById returned %d\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        /* Log the looked-up queue pointer and its max size */\n        OS_QueuePut_Log(\"Queue lookup: queue=%p max_size=%zu\", (void *)queue, queue->max_size);\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            OS_QueuePut_Log(\"Size check failed: size=%zu > max_size=%zu -> OS_QUEUE_INVALID_SIZE\", size, queue->max_size);\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            OS_QueuePut_Log(\"Calling OS_QueuePut_Impl with token=%p data=%p size=%zu flags=0x%08\" PRIx32,\n                            (void *)&token, data, size, (uint32_t)flags);\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n            OS_QueuePut_Log(\"OS_QueuePut_Impl returned %d\", return_code);\n        }\n    }\n\n    OS_QueuePut_Log(\"EXIT: OS_QueuePut return_code=%d\", return_code);\n\n    return return_code;\n}\n",
  "explanation": "Two issues prevented compilation:\n\n1) The PRIuPTR and PRIx32 macros are defined in <inttypes.h>. I added an #include <inttypes.h> so the format macros in the logging calls are available.\n\n2) The vfprintf call complained about mismatched va_list types in some build environments where va_list may be typedef'd differently (e.g., OCS_va_list). I cast the local ap to the system va_list expected by vfprintf: vfprintf(f, fmt, (va_list)ap);\n\nThese minimal changes preserve the original logic and allow the code to compile."
}