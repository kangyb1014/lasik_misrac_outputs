{
  "user_message": "An agent A claimed that the following OS_QueuePut code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_QueuePut.\n```c\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In OS_QueuePut the local pointer 'queue' is only used to read the record (queue->max_size) and is never used to modify the pointed object. Therefore it can and should be declared to point to a const-qualified type (e.g. const OS_queue_internal_record_t *queue) to express read-only access and prevent accidental modification. As written it is a non-const pointer, which violates MISRA C 2023 Rule 8.13. (Fix: change declaration to 'const OS_queue_internal_record_t *queue;')\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_QueuePut_Log(const char *fmt, ...)\n{\n    static int dir_created = 0;\n    if (!dir_created)\n    {\n        /* Try to create the directory once; ignore errors if it already exists. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        dir_created = 1;\n    }\n\n    FILE *f = fopen(\"/tmp/logs/1875.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_QueuePut(osal_id_t queue_id, const void *data, size_t size, uint32 flags)\n{\n    OS_object_token_t           token;\n    int32                       return_code;\n    OS_queue_internal_record_t *queue;\n\n    /* Log entry and parameters */\n    OS_QueuePut_Log(\"ENTER OS_QueuePut: queue_id=%llu, data=%p, size=%zu, flags=%u\",\n                    (unsigned long long)(uintptr_t)queue_id, data, size, (unsigned)flags);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(data);\n    OS_CHECK_SIZE(size);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, queue_id, &token);\n    OS_QueuePut_Log(\"OS_ObjectIdGetById returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        queue = OS_OBJECT_TABLE_GET(OS_queue_table, token);\n        OS_QueuePut_Log(\"Resolved queue pointer=%p\", (void *)queue);\n\n        if (queue != NULL)\n        {\n            /* Log the observed max_size for evidence */\n            OS_QueuePut_Log(\"queue->max_size=%zu, requested size=%zu\", (size_t)queue->max_size, size);\n        }\n        else\n        {\n            OS_QueuePut_Log(\"Warning: queue pointer resolved to NULL\");\n        }\n\n        if (size > queue->max_size)\n        {\n            /*\n            ** The buffer that the user is passing in is too large\n            */\n            OS_QueuePut_Log(\"size > queue->max_size -> setting return_code = OS_QUEUE_INVALID_SIZE\");\n            return_code = OS_QUEUE_INVALID_SIZE;\n        }\n        else\n        {\n            OS_QueuePut_Log(\"Calling OS_QueuePut_Impl with token=%p, data=%p, size=%zu, flags=%u\",\n                            (void *)&token, data, size, (unsigned)flags);\n            return_code = OS_QueuePut_Impl(&token, data, size, flags);\n            OS_QueuePut_Log(\"OS_QueuePut_Impl returned %d\", (int)return_code);\n        }\n    }\n\n    OS_QueuePut_Log(\"EXIT OS_QueuePut: returning %d\", (int)return_code);\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nENTER OS_QueuePut: queue_id=3735928559, data=0x7ffda6b68820, size=4, flags=0\nOS_ObjectIdGetById returned -35\nEXIT OS_QueuePut: returning -35\nENTER OS_QueuePut: queue_id=0, data=0x7ffda6b68820, size=4, flags=0\nOS_ObjectIdGetById returned -35\nEXIT OS_QueuePut: returning -35\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the function the local variable \"queue\" is only read (queue->max_size) and never used to modify the referenced record; therefore it can and should be declared to point to a const-qualified type (e.g. const OS_queue_internal_record_t *queue). MISRA C 2023 Rule 8.13 recommends that pointers be const-qualified whenever possible to express read-only access and prevent accidental modification. Changing the declaration to use a pointer-to-const is a valid and safe fix (assigning a non-const object pointer to a pointer-to-const is permitted). The provided runtime logs show the lookup failed and the read path was not exercised at runtime, but that does not change the static-code-level requirement \u2014 the pointer should still be const-qualified where possible."
}