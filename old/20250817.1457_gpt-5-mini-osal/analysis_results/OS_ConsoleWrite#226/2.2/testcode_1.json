{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_Console_CopyOut (called by OS_ConsoleWrite), the local variable 'return_code' is unconditionally assigned 'OS_ERROR' at function start (return_code = OS_ERROR;). The subsequent while(true) loop always assigns return_code to either OS_SUCCESS (on string termination) or OS_QUEUE_FULL (on buffer full) before breaking and the function returns return_code. Therefore the initial assignment is executed but has no effect on the observable behaviour \u2014 removing it would not change program behaviour. This constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleWrite code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1810.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ConsoleWrite as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleWrite:\n```c\nint32 OS_ConsoleWrite(osal_id_t console_id, const char *Str)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_console_internal_record_t *console;\n    size_t                        PendingWritePos;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONSOLE, console_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /*\n         * The entire string should be put to the ring buffer,\n         * or none of it.  Therefore the WritePos in the table\n         * is not updated until complete success.\n         */\n        PendingWritePos = console->WritePos;\n\n        if (console->device_name[0] != 0)\n        {\n            return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos);\n        }\n        if (return_code == OS_SUCCESS)\n        {\n            return_code = OS_Console_CopyOut(console, Str, &PendingWritePos);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* the entire message was successfully written */\n            console->WritePos = PendingWritePos;\n        }\n        else\n        {\n            /* the message did not fit */\n            ++console->OverflowEvents;\n        }\n\n        /*\n         * Notify the underlying console implementation of new data.\n         * This will forward the data to the actual console device.\n         *\n         * This is done while still locked, so it can support\n         * either a synchronous or asynchronous implementation.\n         */\n        if (console->IsAsync)\n        {\n            /* post the sem for the utility task to run */\n            OS_ConsoleWakeup_Impl(&token);\n        }\n        else\n        {\n            /* output directly */\n            OS_ConsoleOutput_Impl(&token);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ConsoleWrite code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/*\n * Probe helper: append a log line to /tmp/logs/1810.txt.\n * Keep this simple and with minimal side-effects.\n */\nstatic void OS_Console_LogProbe(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/1810.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ConsoleWrite(osal_id_t console_id, const char *Str)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_console_internal_record_t *console;\n    size_t                        PendingWritePos;\n\n    OS_Console_LogProbe(\"OS_ConsoleWrite ENTRY: console_id=%u, Str=%p\", (unsigned)console_id, (void *)Str);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONSOLE, console_id, &token);\n\n    OS_Console_LogProbe(\"OS_ObjectIdGetById returned %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /*\n         * The entire string should be put to the ring buffer,\n         * or none of it.  Therefore the WritePos in the table\n         * is not updated until complete success.\n         */\n        PendingWritePos = console->WritePos;\n\n        OS_Console_LogProbe(\"console=%p, WritePos=%zu, device_name[0]=%d, PendingWritePos=%zu\",\n                             (void *)console, console->WritePos, (int)console->device_name[0], PendingWritePos);\n\n        if (console->device_name[0] != 0)\n        {\n            OS_Console_LogProbe(\"About to call OS_Console_CopyOut for device_name (%s), PendingWritePos=%zu\",\n                                 console->device_name, PendingWritePos);\n\n            return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos);\n\n            OS_Console_LogProbe(\"OS_Console_CopyOut(device_name) returned %d, PendingWritePos now=%zu\",\n                                 (int)return_code, PendingWritePos);\n        }\n        if (return_code == OS_SUCCESS)\n        {\n            OS_Console_LogProbe(\"About to call OS_Console_CopyOut for Str=%p, PendingWritePos=%zu\",\n                                 (void *)Str, PendingWritePos);\n\n            return_code = OS_Console_CopyOut(console, Str, &PendingWritePos);\n\n            OS_Console_LogProbe(\"OS_Console_CopyOut(Str) returned %d, PendingWritePos now=%zu\",\n                                 (int)return_code, PendingWritePos);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* the entire message was successfully written */\n            console->WritePos = PendingWritePos;\n            OS_Console_LogProbe(\"Write successful: updated WritePos=%zu\", console->WritePos);\n        }\n        else\n        {\n            /* the message did not fit */\n            ++console->OverflowEvents;\n            OS_Console_LogProbe(\"Write failed: return_code=%d, OverflowEvents=%u\", (int)return_code,\n                                 (unsigned)console->OverflowEvents);\n        }\n\n        /*\n         * Notify the underlying console implementation of new data.\n         * This will forward the data to the actual console device.\n         *\n         * This is done while still locked, so it can support\n         * either a synchronous or asynchronous implementation.\n         */\n        if (console->IsAsync)\n        {\n            /* post the sem for the utility task to run */\n            OS_Console_LogProbe(\"Console is async: calling OS_ConsoleWakeup_Impl\");\n            OS_ConsoleWakeup_Impl(&token);\n        }\n        else\n        {\n            /* output directly */\n            OS_Console_LogProbe(\"Console is sync: calling OS_ConsoleOutput_Impl\");\n            OS_ConsoleOutput_Impl(&token);\n        }\n\n        OS_Console_LogProbe(\"Releasing object token and exiting OS_ConsoleWrite with return_code=%d\", (int)return_code);\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        OS_Console_LogProbe(\"OS_ObjectIdGetById failed, skipping console operations, return_code=%d\", (int)return_code);\n    }\n\n    return return_code;\n}\n"
}