{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);' is executed unconditionally, but 'impl' is only used inside the subsequent 'if (POSIX_GlobalVars.EnableTaskPriorities)' block. If POSIX_GlobalVars.EnableTaskPriorities is false at runtime, the assignment has no effect on program behaviour (the macro and functions used have no observable side effects). Hence the assignment is dead code (it can be removed without changing behaviour when priorities are disabled).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskSetPriority_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/538.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskSetPriority_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskSetPriority_Impl:\n```c\nint32 OS_TaskSetPriority_Impl(const OS_object_token_t *token, osal_priority_t new_priority)\n{\n    int os_priority;\n    int ret;\n\n    OS_impl_task_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    if (POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        /* Change OSAL priority into a priority that will work for this OS */\n        os_priority = OS_PriorityRemap(new_priority);\n\n        /*\n        ** Set priority\n        */\n        ret = pthread_setschedprio(impl->id, os_priority);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_setschedprio: Task ID = %lu, prio = %d, err = %s\\n\",\n                     OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), os_priority, strerror(ret));\n            return OS_ERROR;\n        }\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskSetPriority_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <pthread.h>\n\nint32 OS_TaskSetPriority_Impl(const OS_object_token_t *token, osal_priority_t new_priority)\n{\n    int os_priority;\n    int ret;\n\n    OS_impl_task_internal_record_t *impl;\n\n    /* Original unconditional assignment retained */\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    /* Probe: record that the assignment happened and capture the runtime flag */\n    {\n        FILE *f = fopen(\"/tmp/logs/538.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"[probe] after_assignment: EnableTaskPriorities=%d token_ptr=%p impl_ptr=%p new_priority=%d\\n\",\n                    POSIX_GlobalVars.EnableTaskPriorities ? 1 : 0,\n                    (void *)token,\n                    (void *)impl,\n                    (int)new_priority);\n            fclose(f);\n        }\n    }\n\n    if (POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        /* Change OSAL priority into a priority that will work for this OS */\n        os_priority = OS_PriorityRemap(new_priority);\n\n        /* Probe: log computed OS priority and impl pointer (and id if available) */\n        {\n            FILE *f = fopen(\"/tmp/logs/538.txt\", \"a\");\n            if (f != NULL)\n            {\n                /* Avoid dereferencing impl->id unless we are in the branch (we are) and impl is non-NULL */\n                if (impl != NULL)\n                {\n                    fprintf(f, \"[probe] enter_if: impl_ptr=%p impl_id=%lu os_priority=%d\\n\",\n                            (void *)impl,\n                            (unsigned long)impl->id,\n                            os_priority);\n                }\n                else\n                {\n                    fprintf(f, \"[probe] enter_if: impl_ptr=NULL os_priority=%d\\n\", os_priority);\n                }\n                fclose(f);\n            }\n        }\n\n        /*\n        ** Set priority\n        */\n        ret = pthread_setschedprio(impl->id, os_priority);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_setschedprio: Task ID = %lu, prio = %d, err = %s\\n\",\n                     OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), os_priority, strerror(ret));\n\n            /* Probe: log the failure details */\n            {\n                FILE *f = fopen(\"/tmp/logs/538.txt\", \"a\");\n                if (f != NULL)\n                {\n                    fprintf(f, \"[probe] pthread_setschedprio_failed: token_ptr=%p impl_ptr=%p impl_id=%lu os_priority=%d ret=%d\\n\",\n                            (void *)token,\n                            (void *)impl,\n                            (impl != NULL) ? (unsigned long)impl->id : 0UL,\n                            os_priority,\n                            ret);\n                    fclose(f);\n                }\n            }\n\n            return OS_ERROR;\n        }\n    }\n\n    /* Probe: record normal return path */\n    {\n        FILE *f = fopen(\"/tmp/logs/538.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"[probe] return: OS_SUCCESS token_ptr=%p impl_ptr=%p EnableTaskPriorities=%d\\n\",\n                    (void *)token,\n                    (void *)impl,\n                    POSIX_GlobalVars.EnableTaskPriorities ? 1 : 0);\n            fclose(f);\n        }\n    }\n\n    return OS_SUCCESS;\n}\n"
}