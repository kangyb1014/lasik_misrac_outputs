{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable 'impl' is declared as a pointer to a non-const OS_impl_task_internal_record_t but in this function it is only read (used as impl->id); it is not modified. Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible. Declare it as 'const OS_impl_task_internal_record_t *impl' (assignment from the object table pointer is allowed).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskSetPriority_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/539.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskSetPriority_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskSetPriority_Impl:\n```c\nint32 OS_TaskSetPriority_Impl(const OS_object_token_t *token, osal_priority_t new_priority)\n{\n    int os_priority;\n    int ret;\n\n    OS_impl_task_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    if (POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        /* Change OSAL priority into a priority that will work for this OS */\n        os_priority = OS_PriorityRemap(new_priority);\n\n        /*\n        ** Set priority\n        */\n        ret = pthread_setschedprio(impl->id, os_priority);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_setschedprio: Task ID = %lu, prio = %d, err = %s\\n\",\n                     OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), os_priority, strerror(ret));\n            return OS_ERROR;\n        }\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskSetPriority_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\nint32 OS_TaskSetPriority_Impl(const OS_object_token_t *token, osal_priority_t new_priority)\n{\n    int os_priority;\n    int ret;\n\n    OS_impl_task_internal_record_t *impl;\n\n    /* Probe log: entry */\n    {\n        FILE *log = fopen(\"/tmp/logs/539.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"ENTER OS_TaskSetPriority_Impl: token=%p, object_id=%lu, new_priority=%d\\n\",\n                    (const void *)token,\n                    (unsigned long)OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)),\n                    (int)new_priority);\n            fclose(log);\n        }\n    }\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    /* Probe log: impl resolved */\n    {\n        FILE *log = fopen(\"/tmp/logs/539.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"impl resolved: impl_ptr=%p, impl->id=%lu\\n\",\n                    (const void *)impl,\n                    (unsigned long)(impl ? impl->id : 0));\n            fclose(log);\n        }\n    }\n\n    if (POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        /* Change OSAL priority into a priority that will work for this OS */\n        os_priority = OS_PriorityRemap(new_priority);\n\n        /* Probe log: mapped priority */\n        {\n            FILE *log = fopen(\"/tmp/logs/539.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"EnableTaskPriorities=1: mapped new_priority=%d -> os_priority=%d\\n\",\n                        (int)new_priority, os_priority);\n                fclose(log);\n            }\n        }\n\n        /*\n        ** Set priority\n        */\n        ret = pthread_setschedprio(impl->id, os_priority);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_setschedprio: Task ID = %lu, prio = %d, err = %s\\n\",\n                     OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), os_priority, strerror(ret));\n\n            /* Probe log: error case */\n            {\n                FILE *log = fopen(\"/tmp/logs/539.txt\", \"a\");\n                if (log)\n                {\n                    fprintf(log, \"pthread_setschedprio FAILED: impl_ptr=%p, impl->id=%lu, os_priority=%d, ret=%d, strerror=%s\\n\",\n                            (const void *)impl,\n                            (unsigned long)impl->id,\n                            os_priority,\n                            ret,\n                            strerror(ret));\n                    fclose(log);\n                }\n            }\n\n            return OS_ERROR;\n        }\n\n        /* Probe log: successful setschedprio */\n        {\n            FILE *log = fopen(\"/tmp/logs/539.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"pthread_setschedprio SUCCESS: impl_ptr=%p, impl->id=%lu, os_priority=%d\\n\",\n                        (const void *)impl,\n                        (unsigned long)impl->id,\n                        os_priority);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        /* Probe log: priorities disabled */\n        FILE *log = fopen(\"/tmp/logs/539.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"EnableTaskPriorities=0: no action taken for object_id=%lu\\n\",\n                    (unsigned long)OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)));\n            fclose(log);\n        }\n    }\n\n    /* Probe log: exit success */\n    {\n        FILE *log = fopen(\"/tmp/logs/539.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"EXIT OS_TaskSetPriority_Impl: object_id=%lu, result=OS_SUCCESS\\n\",\n                    (unsigned long)OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)));\n            fclose(log);\n        }\n    }\n\n    return OS_SUCCESS;\n}\n"
}