{
  "user_message": "An agent A claimed that the following OS_TaskSetPriority_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskSetPriority_Impl.\n```c\nint32 OS_TaskSetPriority_Impl(const OS_object_token_t *token, osal_priority_t new_priority)\n{\n    int os_priority;\n    int ret;\n\n    OS_impl_task_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    if (POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        /* Change OSAL priority into a priority that will work for this OS */\n        os_priority = OS_PriorityRemap(new_priority);\n\n        /*\n        ** Set priority\n        */\n        ret = pthread_setschedprio(impl->id, os_priority);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_setschedprio: Task ID = %lu, prio = %d, err = %s\\n\",\n                     OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), os_priority, strerror(ret));\n            return OS_ERROR;\n        }\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'impl' is declared as OS_impl_task_internal_record_t *impl but is only used for read-only access (impl->id is read and not modified). According to Rule 8.13, it should be declared to point to a const-qualified type (e.g. const OS_impl_task_internal_record_t *impl). Thus the use of impl (as seen in the call pthread_setschedprio(impl->id, os_priority)) violates the rule.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_TaskSetPriority_Log(const char *fmt, ...)\n{\n    va_list args;\n    FILE *f = fopen(\"/tmp/logs/539.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timestr[32];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(f, \"%s \", timestr);\n        }\n    }\n\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TaskSetPriority_Impl(const OS_object_token_t *token, osal_priority_t new_priority)\n{\n    int os_priority;\n    int ret;\n\n    OS_impl_task_internal_record_t *impl;\n\n    OS_TaskSetPriority_Log(\"ENTRY: token_ptr=%p, new_priority=%d\", (void *)token, (int)new_priority);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    OS_TaskSetPriority_Log(\"AFTER_LOOKUP: impl_ptr=%p\", (void *)impl);\n\n    /* If impl is available, capture the id for logging (read-only access) */\n    if (impl != NULL)\n    {\n        /* Cast to unsigned long for logging to match existing debug formatting */\n        unsigned long impl_id = (unsigned long)impl->id;\n        OS_TaskSetPriority_Log(\"IMPL_INFO: impl->id=%lu\", impl_id);\n    }\n    else\n    {\n        OS_TaskSetPriority_Log(\"IMPL_INFO: impl is NULL\");\n    }\n\n    if (POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        OS_TaskSetPriority_Log(\"PATH: EnableTaskPriorities=TRUE\");\n\n        /* Change OSAL priority into a priority that will work for this OS */\n        os_priority = OS_PriorityRemap(new_priority);\n\n        OS_TaskSetPriority_Log(\"MAPPED_PRIORITY: new_priority=%d -> os_priority=%d\", (int)new_priority, os_priority);\n\n        /*\n        ** Set priority\n        */\n        OS_TaskSetPriority_Log(\"CALL: pthread_setschedprio(impl->id, %d)\", os_priority);\n        ret = pthread_setschedprio(impl->id, os_priority);\n        OS_TaskSetPriority_Log(\"RETURN: pthread_setschedprio returned %d\", ret);\n        if (ret != 0)\n        {\n            OS_TaskSetPriority_Log(\"ERROR: pthread_setschedprio: Task ID = %lu, prio = %d, err = %s\",\n                                   OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), os_priority, strerror(ret));\n            return OS_ERROR;\n        }\n        else\n        {\n            OS_TaskSetPriority_Log(\"SUCCESS: pthread_setschedprio succeeded for Task ID = %lu, prio = %d\",\n                                   OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), os_priority);\n        }\n    }\n    else\n    {\n        OS_TaskSetPriority_Log(\"PATH: EnableTaskPriorities=FALSE (no-op)\");\n    }\n\n    OS_TaskSetPriority_Log(\"EXIT: returning OS_SUCCESS\");\n    return OS_SUCCESS;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_TaskSetPriority_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_TaskSetPriority_Impl the local variable impl is only used for read-only access (impl->id is read and never modified through impl). MISRA C 2023 Rule 8.13 states that a pointer should point to a const-qualified type whenever possible, so this local pointer should be declared as const OS_impl_task_internal_record_t *impl (or otherwise const-qualified) to reflect that it does not modify the pointed-to object. Changing the declaration is safe here because converting a T * to a const T * is allowed; the function does not perform any writes via impl. Note: if there were subsequent writes through impl or if the macro/other code required a non-const pointer, then adding const would be incorrect \u2014 but in the provided function body as shown the const qualification is possible and the lack of it is a violation of Rule 8.13."
}