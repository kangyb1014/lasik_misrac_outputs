{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable 'impl' is declared as a non-const pointer (OS_impl_task_internal_record_t *impl) but is only used for reading (impl->id) in this function. The assignment impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token) therefore yields a pointer that could and should be to a const-qualified type. Under MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible. To conform, declare impl as const OS_impl_task_internal_record_t *impl (and ensure OS_OBJECT_TABLE_GET returns/accepts a const pointer), i.e. the current code violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskSetPriority_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/539.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskSetPriority_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskSetPriority_Impl:\n```c\nint32 OS_TaskSetPriority_Impl(const OS_object_token_t *token, osal_priority_t new_priority)\n{\n    int os_priority;\n    int ret;\n\n    OS_impl_task_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    if (POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        /* Change OSAL priority into a priority that will work for this OS */\n        os_priority = OS_PriorityRemap(new_priority);\n\n        /*\n        ** Set priority\n        */\n        ret = pthread_setschedprio(impl->id, os_priority);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"pthread_setschedprio: Task ID = %lu, prio = %d, err = %s\\n\",\n                     OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), os_priority, strerror(ret));\n            return OS_ERROR;\n        }\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskSetPriority_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <string.h>\n#include <stdarg.h>\n\n/* Minimal type and helper definitions so this file compiles as a standalone test unit. */\ntypedef int32_t int32;\ntypedef uint32_t OS_object_token_t; /* token is represented as an integer index here */\ntypedef int osal_priority_t;\n\ntypedef struct\n{\n    unsigned long id; /* underlying OS thread/task id */\n    /* other fields omitted for brevity */\n} OS_impl_task_internal_record_t;\n\n/* Simulated object table */\nstatic OS_impl_task_internal_record_t OS_impl_task_table_array[16];\nstatic OS_impl_task_internal_record_t *OS_impl_task_table = OS_impl_task_internal_record_t ( *)0; /* will be initialized in a function below */\n\n/* POSIX_GlobalVars simulation */\nstruct\n{\n    int EnableTaskPriorities;\n} POSIX_GlobalVars = { 1 };\n\n/* Return codes as constants (do not use macros per constraints) */\nstatic const int32 OS_SUCCESS = 0;\nstatic const int32 OS_ERROR = -1;\n\n/* Helper: remap OSAL priority to OS priority (simple passthrough for test) */\nstatic int OS_PriorityRemap(osal_priority_t p)\n{\n    return (int)p;\n}\n\n/* Helper: convert token to object id for debug printing */\nstatic unsigned long OS_ObjectIdFromToken(const OS_object_token_t *token)\n{\n    if (token == NULL) return 0u;\n    return (unsigned long)(*token);\n}\n\nstatic unsigned long OS_ObjectIdToInteger(unsigned long id)\n{\n    return id;\n}\n\n/* Minimal implementation of OS_OBJECT_TABLE_GET to return pointer into our array */\nstatic OS_impl_task_internal_record_t *OS_OBJECT_TABLE_GET(OS_impl_task_internal_record_t *table, OS_object_token_t token)\n{\n    /* guard against out-of-range token for this simple test harness */\n    if (table == NULL) return NULL;\n    if (token >= 16u) return NULL;\n    return &table[token];\n}\n\n/* Minimal pthread_setschedprio stub for test compilation/execution */\nstatic int pthread_setschedprio(unsigned long id, int prio)\n{\n    (void)id;\n    (void)prio;\n    /* For testing, return success (0). To simulate failure, change this to a nonzero errno like EINVAL. */\n    return 0;\n}\n\n/* A small helper to write probe logs to the required file. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/539.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, there's not much we can do; avoid failing the function. */\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Initialize our simulated table once. This function is not the main and may be called by test harness. */\nstatic void __attribute__((constructor)) os_test_init(void)\n{\n    /* Point the table pointer to the static array */\n    OS_impl_task_table = OS_impl_task_table_array;\n\n    /* Populate some predictable entries for testing */\n    for (unsigned i = 0; i < 16u; ++i)\n    {\n        OS_impl_task_table_array[i].id = 1000u + i; /* arbitrary ids */\n    }\n\n    /* Ensure the log file exists and note initialization */\n    probe_log(\"os_test_init: initialized table and populated entries\");\n}\n\n/* Stub OS_DEBUG used by original code; also logs to the probe file for visibility. */\nstatic void OS_DEBUG(const char *fmt, ...)\n{\n    va_list args;\n    va_start(args, fmt);\n\n    /* Write the debug message into the same probe log so it's captured with other traces */\n    FILE *f = fopen(\"/tmp/logs/539.txt\", \"a\");\n    if (f != NULL)\n    {\n        vfprintf(f, fmt, args);\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n\n    va_end(args);\n}\n\n/* Modified OS_TaskSetPriority_Impl with inserted probe logging. */\nint32 OS_TaskSetPriority_Impl(const OS_object_token_t *token, osal_priority_t new_priority)\n{\n    int os_priority;\n    int ret;\n\n    /* NOTE: This pointer is intentionally non-const to match the original code under test. */\n    OS_impl_task_internal_record_t *impl;\n\n    /* Log entry and input state */\n    probe_log(\"ENTER: OS_TaskSetPriority_Impl token=%u new_priority=%d EnableTaskPriorities=%d\",\n              (unsigned)(token ? *token : 0u), (int)new_priority, POSIX_GlobalVars.EnableTaskPriorities);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, (token ? *token : 0u));\n\n    /* Log the obtained impl pointer and its observed fields (if available) */\n    if (impl != NULL)\n    {\n        probe_log(\"impl obtained: impl_ptr=%p impl->id=%lu\", (void *)impl, impl->id);\n    }\n    else\n    {\n        probe_log(\"impl obtained: NULL (invalid token or table)\");\n    }\n\n    if (POSIX_GlobalVars.EnableTaskPriorities)\n    {\n        /* Change OSAL priority into a priority that will work for this OS */\n        os_priority = OS_PriorityRemap(new_priority);\n\n        probe_log(\"remapped priority: os_priority=%d (from new_priority=%d)\", os_priority, (int)new_priority);\n\n        /*\n        ** Set priority\n        */\n        ret = pthread_setschedprio((impl != NULL) ? impl->id : 0ul, os_priority);\n\n        probe_log(\"pthread_setschedprio called: impl_id=%lu os_priority=%d ret=%d\",\n                  (impl != NULL) ? impl->id : 0ul, os_priority, ret);\n\n        if (ret != 0)\n        {\n            /* Log the same debug information the original code would log */\n            OS_DEBUG(\"pthread_setschedprio: Task ID = %lu, prio = %d, err = %s\",\n                     OS_ObjectIdToInteger(OS_ObjectIdFromToken(token)), os_priority, strerror(ret));\n\n            /* Also record this in the probe log for external analysis */\n            probe_log(\"ERROR: pthread_setschedprio failed: token=%u impl_ptr=%p impl->id=%lu os_priority=%d strerror=%s\",\n                      (unsigned)(token ? *token : 0u), (void *)impl, (impl != NULL) ? impl->id : 0ul,\n                      os_priority, strerror(ret));\n\n            return OS_ERROR;\n        }\n    }\n\n    probe_log(\"EXIT: OS_TaskSetPriority_Impl returning OS_SUCCESS for token=%u\", (unsigned)(token ? *token : 0u));\n\n    return OS_SUCCESS;\n}\n"
}