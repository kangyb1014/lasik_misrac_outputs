{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorProcessEntry:\n```c\nint32 OS_ObjectIdIteratorProcessEntry(OS_object_iter_t *iter, int32 (*func)(osal_id_t, void *))\n{\n    int32 status;\n\n    /*\n     * This needs to temporarily unlock the global,\n     * call the handler function, then re-lock.\n     */\n    OS_Unlock_Global(&iter->token);\n    status = func(OS_ObjectIdFromToken(&iter->token), iter->arg);\n    OS_Lock_Global(&iter->token);\n\n    return status;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nOS_Unlock_Global(&iter->token);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation under the usual assumption that OS_Unlock_Global returns normally. The call simply unlocks a global and control continues to call func(), re-lock and return. However, a violation would occur if OS_Unlock_Global were defined so that it does not return (for example implemented as exit()/abort(), longjmp to a location that skips the rest, an infinite loop, or declared with the noreturn attribute). In that case the subsequent calls to func and OS_Lock_Global and the return would be unreachable, violating MISRA C 2023 Rule 2.1."
}