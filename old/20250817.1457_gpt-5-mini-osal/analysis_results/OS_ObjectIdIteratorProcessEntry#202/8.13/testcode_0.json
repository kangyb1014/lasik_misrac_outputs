{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator holds iter->arg as a plain void * and OS_ObjectIdIteratorProcessEntry passes it to a callback declared as int32 (*func)(osal_id_t, void *). If the callback does not need to modify the pointed-to object (which is typical for user 'context' arguments in iterator callbacks), both the iter->arg member and the callback parameter should be const-qualified (const void *). As written the pointer is not const-qualified and therefore violates MISRA C 2023 Rule 8.13 (pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorProcessEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1619.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorProcessEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorProcessEntry:\n```c\nint32 OS_ObjectIdIteratorProcessEntry(OS_object_iter_t *iter, int32 (*func)(osal_id_t, void *))\n{\n    int32 status;\n\n    /*\n     * This needs to temporarily unlock the global,\n     * call the handler function, then re-lock.\n     */\n    OS_Unlock_Global(&iter->token);\n    status = func(OS_ObjectIdFromToken(&iter->token), iter->arg);\n    OS_Lock_Global(&iter->token);\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorProcessEntry code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logging helper - appends structured logs to /tmp/logs/1619.txt */\nstatic void OS_Iterator_LogStage(const char *stage, OS_object_iter_t *iter, int32 (*func)(osal_id_t, void *), const char *note)\n{\n    FILE *fp = fopen(\"/tmp/logs/1619.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Log stage, iterator pointer, token pointer, argument pointer, and whether func is NULL */\n        fprintf(fp, \"stage=%s iter=%p token=%p arg=%p func_nonnull=%d note=%s\\n\",\n                stage,\n                (void *)iter,\n                (void *)&iter->token,\n                (void *)iter->arg,\n                (func != NULL) ? 1 : 0,\n                (note != NULL) ? note : \"\");\n        fclose(fp);\n    }\n}\n\nint32 OS_ObjectIdIteratorProcessEntry(OS_object_iter_t *iter, int32 (*func)(osal_id_t, void *))\n{\n    int32 status;\n\n    /* Log entry and state before unlocking */\n    OS_Iterator_LogStage(\"entry_before_unlock\", iter, func, NULL);\n\n    /*\n     * This needs to temporarily unlock the global,\n     * call the handler function, then re-lock.\n     */\n    OS_Unlock_Global(&iter->token);\n\n    /* Log state immediately after unlocking and before calling the callback */\n    OS_Iterator_LogStage(\"after_unlock_before_call\", iter, func, NULL);\n\n    /* Call the callback exactly as before, preserving original control flow */\n    status = func(OS_ObjectIdFromToken(&iter->token), iter->arg);\n\n    /* Log the return status from the callback and the argument pointer that was passed */\n    {\n        FILE *fp = fopen(\"/tmp/logs/1619.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"callback_return status=%d iter=%p arg=%p\\n\",\n                    (int)status,\n                    (void *)iter,\n                    (void *)iter->arg);\n            fclose(fp);\n        }\n    }\n\n    OS_Lock_Global(&iter->token);\n\n    /* Final log after re-locking */\n    OS_Iterator_LogStage(\"after_lock\", iter, func, NULL);\n\n    return status;\n}\n"
}