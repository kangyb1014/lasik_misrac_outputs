{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void probe_make_log_dir_if_needed(void)\n{\n    /* attempt to create the directory; ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0755);\n}\nstatic void probe_log(const char *fmt, ...)\n{\n    probe_make_log_dir_if_needed();\n    FILE *fp = fopen(\"/tmp/logs/1623.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging; do not alter program control flow on failure */\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    (void)localtime_r(&t, &tm_buf);\n    char timestr[32];\n    if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n    {\n        timestr[0] = '\\0';\n    }\n\n    fprintf(fp, \"%s pid=%d \", timestr, (int)getpid());\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_ObjectIdIteratorProcessEntry(OS_object_iter_t *iter, int32 (*func)(osal_id_t, void *))\n{\n    int32 status;\n\n    /* Log entry and pointer state prior to unlocking. Do not call any\n     * operations that could change behavior (e.g. do not call\n     * OS_ObjectIdFromToken() before the unlock, to preserve original order).\n     */\n    probe_log(\"ENTER: OS_ObjectIdIteratorProcessEntry iter=%p token=%p arg=%p func=%p\",\n              (void *)iter, (void *)&iter->token, (void *)iter->arg, (void *)func);\n\n    probe_log(\"About to OS_Unlock_Global(token=%p)\", (void *)&iter->token);\n\n    /* This mirrors the original critical-section handling exactly. */\n    OS_Unlock_Global(&iter->token);\n\n    /* Now that we have released the global lock, obtain the object id and\n     * call the provided handler. Logging the id is useful evidence: it\n     * shows what identifier was used when the handler (which may dereference\n     * iter->arg) was invoked.\n     */\n    osal_id_t obj_id = OS_ObjectIdFromToken(&iter->token);\n    probe_log(\"After unlock: token=%p resolved_obj_id=%lu calling func(id=%lu, arg=%p)\",\n              (void *)&iter->token,\n              (unsigned long)(uintptr_t)obj_id,\n              (unsigned long)(uintptr_t)obj_id,\n              (void *)iter->arg);\n\n    status = func(obj_id, iter->arg);\n\n    probe_log(\"Handler returned status=%d; about to OS_Lock_Global(token=%p)\", status, (void *)&iter->token);\n\n    OS_Lock_Global(&iter->token);\n\n    probe_log(\"EXIT: OS_ObjectIdIteratorProcessEntry iter=%p token=%p status=%d\",\n              (void *)iter, (void *)&iter->token, status);\n\n    return status;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp_efdd2zo/src/src/os/shared/src/osapi-idmap.c: In function 'probe_log':\n/tmp/tmp_efdd2zo/src/src/os/shared/src/osapi-idmap.c:1333:15: error: storage size of 'tm_buf' isn't known\n 1333 |     struct tm tm_buf;\n      |               ^~~~~~\n/tmp/tmp_efdd2zo/src/src/os/shared/src/osapi-idmap.c:1345:23: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n 1345 |     vfprintf(fp, fmt, ap);\n      |                       ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-idmap.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-idmap.dir/__/__/os/shared/src/osapi-idmap.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3787: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-idmap.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorProcessEntry as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <stdint.h>\n\nstatic void probe_make_log_dir_if_needed(void)\n{\n    /* attempt to create the directory; ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0755);\n}\nstatic void probe_log(const char *fmt, ...)\n{\n    probe_make_log_dir_if_needed();\n    FILE *fp = fopen(\"/tmp/logs/1623.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging; do not alter program control flow on failure */\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    (void)localtime_r(&t, &tm_buf);\n    char timestr[32];\n    if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n    {\n        timestr[0] = '\\0';\n    }\n\n    fprintf(fp, \"%s pid=%d \", timestr, (int)getpid());\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_ObjectIdIteratorProcessEntry(OS_object_iter_t *iter, int32 (*func)(osal_id_t, void *))\n{\n    int32 status;\n\n    /* Log entry and pointer state prior to unlocking. Do not call any\n     * operations that could change behavior (e.g. do not call\n     * OS_ObjectIdFromToken() before the unlock, to preserve original order).\n     */\n    probe_log(\"ENTER: OS_ObjectIdIteratorProcessEntry iter=%p token=%p arg=%p func=%p\",\n              (void *)iter, (void *)&iter->token, (void *)iter->arg, (void *)func);\n\n    probe_log(\"About to OS_Unlock_Global(token=%p)\", (void *)&iter->token);\n\n    /* This mirrors the original critical-section handling exactly. */\n    OS_Unlock_Global(&iter->token);\n\n    /* Now that we have released the global lock, obtain the object id and\n     * call the provided handler. Logging the id is useful evidence: it\n     * shows what identifier was used when the handler (which may dereference\n     * iter->arg) was invoked.\n     */\n    osal_id_t obj_id = OS_ObjectIdFromToken(&iter->token);\n    probe_log(\"After unlock: token=%p resolved_obj_id=%lu calling func(id=%lu, arg=%p)\",\n              (void *)&iter->token,\n              (unsigned long)(uintptr_t)obj_id,\n              (unsigned long)(uintptr_t)obj_id,\n              (void *)iter->arg);\n\n    status = func(obj_id, iter->arg);\n\n    probe_log(\"Handler returned status=%d; about to OS_Lock_Global(token=%p)\", status, (void *)&iter->token);\n\n    OS_Lock_Global(&iter->token);\n\n    probe_log(\"EXIT: OS_ObjectIdIteratorProcessEntry iter=%p token=%p status=%d\",\n              (void *)iter, (void *)&iter->token, status);\n\n    return status;\n}\n",
  "explanation": "The compilation errors were due to missing standard headers. I added the appropriate includes (<time.h> for struct tm and localtime_r, and <stdarg.h> for va_list and va_start/va_end) as well as standard I/O and system headers (<stdio.h>, <sys/stat.h>, <unistd.h>, and <stdint.h>) so types and functions used in the probe_log function are declared. No logic of OS_ObjectIdIteratorProcessEntry was changed."
}