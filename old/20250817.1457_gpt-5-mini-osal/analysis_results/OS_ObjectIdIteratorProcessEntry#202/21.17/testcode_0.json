{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(stream->stream_name, Filename) can read past the bounds of either operand if either string is not NUL-terminated (or if either pointer is invalid). In the shown code only Filename is checked for NULL (OS_CHECK_POINTER) but there is no explicit guarantee in the fragment that stream->stream_name is a valid, NUL-terminated character array of sufficient length. If a stream table entry is uninitialized, corrupted, or its stream_name buffer was completely filled without a terminating '\\0', strcmp will continue reading memory beyond the object bounds to find a terminator \u2014 violating MISRA C 2023 Rule 21.17. A safe remediation is to use a bounded comparison (e.g. strncmp with the known buffer size) or otherwise ensure stream->stream_name is always NUL-terminated before calling strcmp.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdIteratorProcessEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1623.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdIteratorProcessEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdIteratorProcessEntry:\n```c\nint32 OS_ObjectIdIteratorProcessEntry(OS_object_iter_t *iter, int32 (*func)(osal_id_t, void *))\n{\n    int32 status;\n\n    /*\n     * This needs to temporarily unlock the global,\n     * call the handler function, then re-lock.\n     */\n    OS_Unlock_Global(&iter->token);\n    status = func(OS_ObjectIdFromToken(&iter->token), iter->arg);\n    OS_Lock_Global(&iter->token);\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdIteratorProcessEntry code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <stdint.h>\n#include <unistd.h>\n\n/*\n * Probe logging helpers. These are kept static to avoid symbol collisions\n * and to minimize impact on the rest of the system. They write append-only\n * logs to /tmp/logs/1623.txt describing the control flow and key pointer\n * values so other agents can reproduce/debug the reported string-handling\n * issue without changing the original behavior.\n */\nstatic void probe_make_log_dir_if_needed(void)\n{\n    /* attempt to create the directory; ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0755);\n}\n\nstatic void probe_log(const char *fmt, ...)\n{\n    probe_make_log_dir_if_needed();\n    FILE *fp = fopen(\"/tmp/logs/1623.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging; do not alter program control flow on failure */\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    (void)localtime_r(&t, &tm_buf);\n    char timestr[32];\n    if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n    {\n        timestr[0] = '\\0';\n    }\n\n    fprintf(fp, \"%s pid=%d \", timestr, (int)getpid());\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\n/*\n * Original function signature preserved. Only non-intrusive logging probes\n * are added. The ordering of unlock -> call -> lock is kept exactly as in\n * the original implementation to avoid changing program semantics.\n */\nint32 OS_ObjectIdIteratorProcessEntry(OS_object_iter_t *iter, int32 (*func)(osal_id_t, void *))\n{\n    int32 status;\n\n    /* Log entry and pointer state prior to unlocking. Do not call any\n     * operations that could change behavior (e.g. do not call\n     * OS_ObjectIdFromToken() before the unlock, to preserve original order).\n     */\n    probe_log(\"ENTER: OS_ObjectIdIteratorProcessEntry iter=%p token=%p arg=%p func=%p\",\n              (void *)iter, (void *)&iter->token, (void *)iter->arg, (void *)func);\n\n    probe_log(\"About to OS_Unlock_Global(token=%p)\", (void *)&iter->token);\n\n    /* This mirrors the original critical-section handling exactly. */\n    OS_Unlock_Global(&iter->token);\n\n    /* Now that we have released the global lock, obtain the object id and\n     * call the provided handler. Logging the id is useful evidence: it\n     * shows what identifier was used when the handler (which may dereference\n     * iter->arg) was invoked.\n     */\n    osal_id_t obj_id = OS_ObjectIdFromToken(&iter->token);\n    probe_log(\"After unlock: token=%p resolved_obj_id=%lu calling func(id=%lu, arg=%p)\",\n              (void *)&iter->token,\n              (unsigned long)(uintptr_t)obj_id,\n              (unsigned long)(uintptr_t)obj_id,\n              (void *)iter->arg);\n\n    status = func(obj_id, iter->arg);\n\n    probe_log(\"Handler returned status=%d; about to OS_Lock_Global(token=%p)\", status, (void *)&iter->token);\n\n    OS_Lock_Global(&iter->token);\n\n    probe_log(\"EXIT: OS_ObjectIdIteratorProcessEntry iter=%p token=%p status=%d\",\n              (void *)iter, (void *)&iter->token, status);\n\n    return status;\n}\n"
}