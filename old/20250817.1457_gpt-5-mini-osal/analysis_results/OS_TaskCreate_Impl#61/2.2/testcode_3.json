{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(&custom_attr, 0, sizeof(custom_attr)); is redundant because it is immediately followed by pthread_attr_init(&custom_attr), which (on compliant POSIX implementations) fully initializes the pthread_attr_t object. Removing the memset would not change the observable program behaviour (success/error handling or thread creation), so this executed operation is dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskCreate_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/490.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskCreate_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate_Impl:\n```c\nint32 OS_TaskCreate_Impl(const OS_object_token_t *token, uint32 flags)\n{\n    OS_VoidPtrValueWrapper_t        arg;\n    int32                           return_code;\n    OS_impl_task_internal_record_t *impl;\n    OS_task_internal_record_t *     task;\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = OS_ObjectIdFromToken(token);\n\n    task = OS_OBJECT_TABLE_GET(OS_task_table, *token);\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    return_code = OS_Posix_InternalTaskCreate_Impl(&impl->id, task->priority, task->stack_size, OS_PthreadTaskEntry,\n                                                   arg.opaque_arg);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskCreate_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nint32 OS_TaskCreate_Impl(const OS_object_token_t *token, uint32 flags)\n{\n    OS_VoidPtrValueWrapper_t        arg;\n    int32                           return_code;\n    OS_impl_task_internal_record_t *impl;\n    OS_task_internal_record_t *     task;\n    FILE *log = fopen(\"/tmp/logs/490.txt\", \"a\");\n\n    if (log)\n    {\n        fprintf(log, \"[OS_TaskCreate_Impl] entry: token=%p flags=%llu\\n\", (const void *)token, (unsigned long long)flags);\n        fflush(log);\n    }\n\n    if (log)\n    {\n        fprintf(log, \"[OS_TaskCreate_Impl] about to memset(&arg, 0, sizeof(arg)) (size=%zu)\\n\", sizeof(arg));\n        fflush(log);\n    }\n\n    /* Preserve original behavior: still perform the memset (probe evidence of the operation). */\n    memset(&arg, 0, sizeof(arg));\n\n    if (log)\n    {\n        /* log a small prefix of the initialized bytes to prove the memset took place */\n        unsigned char *bytes = (unsigned char *)&arg;\n        size_t n = sizeof(arg) < 32 ? sizeof(arg) : 32;\n        fprintf(log, \"[OS_TaskCreate_Impl] after memset: first %zu bytes:\", n);\n        for (size_t i = 0; i < n; ++i)\n        {\n            fprintf(log, \" %02x\", bytes[i]);\n        }\n        fprintf(log, \"\\n\");\n        fflush(log);\n    }\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = OS_ObjectIdFromToken(token);\n\n    if (log)\n    {\n        fprintf(log, \"[OS_TaskCreate_Impl] after arg.id = OS_ObjectIdFromToken(token): arg.id=%llu\\n\", (unsigned long long)arg.id);\n        fflush(log);\n    }\n\n    task = OS_OBJECT_TABLE_GET(OS_task_table, *token);\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    if (log)\n    {\n        fprintf(log, \"[OS_TaskCreate_Impl] lookup results: task=%p impl=%p\\n\", (void *)task, (void *)impl);\n        if (task)\n        {\n            fprintf(log, \"[OS_TaskCreate_Impl] task->priority=%llu task->stack_size=%llu\\n\",\n                    (unsigned long long)task->priority, (unsigned long long)task->stack_size);\n        }\n        else\n        {\n            fprintf(log, \"[OS_TaskCreate_Impl] task is NULL\\n\");\n        }\n\n        if (impl)\n        {\n            fprintf(log, \"[OS_TaskCreate_Impl] impl->id=%llu\\n\", (unsigned long long)impl->id);\n        }\n        else\n        {\n            fprintf(log, \"[OS_TaskCreate_Impl] impl is NULL\\n\");\n        }\n        fflush(log);\n    }\n\n    return_code = OS_Posix_InternalTaskCreate_Impl(&impl->id, task->priority, task->stack_size, OS_PthreadTaskEntry,\n                                                   arg.opaque_arg);\n\n    if (log)\n    {\n        fprintf(log, \"[OS_TaskCreate_Impl] OS_Posix_InternalTaskCreate_Impl returned %ld\\n\", (long)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}