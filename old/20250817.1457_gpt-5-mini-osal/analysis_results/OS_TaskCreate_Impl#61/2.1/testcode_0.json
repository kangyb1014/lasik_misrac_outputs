{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_PthreadTaskEntry the call OS_TaskEntryPoint(local_arg.id) is documented as \"Never returns\" (it either loops or terminates the thread). The following statement 'return NULL;' can therefore never be executed, i.e. it is unreachable \u2014 this constitutes unreachable code and violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskCreate_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/489.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskCreate_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate_Impl:\n```c\nint32 OS_TaskCreate_Impl(const OS_object_token_t *token, uint32 flags)\n{\n    OS_VoidPtrValueWrapper_t        arg;\n    int32                           return_code;\n    OS_impl_task_internal_record_t *impl;\n    OS_task_internal_record_t *     task;\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = OS_ObjectIdFromToken(token);\n\n    task = OS_OBJECT_TABLE_GET(OS_task_table, *token);\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    return_code = OS_Posix_InternalTaskCreate_Impl(&impl->id, task->priority, task->stack_size, OS_PthreadTaskEntry,\n                                                   arg.opaque_arg);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskCreate_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <stdint.h>\n\n/* Helper probe function to append logs to /tmp/logs/489.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/489.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Try to create the directory and reopen. Ignore errors otherwise. */\n        (void)mkdir(\"/tmp/logs\", 0775);\n        f = fopen(\"/tmp/logs/489.txt\", \"a\");\n        if (f == NULL)\n        {\n            return;\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n    (void)fflush(f);\n    (void)fclose(f);\n}\n\nint32 OS_TaskCreate_Impl(const OS_object_token_t *token, uint32 flags)\n{\n    OS_VoidPtrValueWrapper_t        arg;\n    int32                           return_code;\n    OS_impl_task_internal_record_t *impl;\n    OS_task_internal_record_t *     task;\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = OS_ObjectIdFromToken(token);\n\n    task = OS_OBJECT_TABLE_GET(OS_task_table, *token);\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    /* Probe: record inputs/state before creating the POSIX task. */\n    probe_log(\"[OS_TaskCreate_Impl] token_ptr=%p, token_id=%u, flags=%u\\n\",\n              (void *)token, (unsigned) arg.id, (unsigned) flags);\n    probe_log(\"[OS_TaskCreate_Impl] task_ptr=%p, impl_ptr=%p\\n\",\n              (void *)task, (void *)impl);\n\n    if (task != NULL)\n    {\n        /* Log task fields that are relevant to thread creation */\n        probe_log(\"[OS_TaskCreate_Impl] task->priority=%ld, task->stack_size=%lu\\n\",\n                  (long)task->priority, (unsigned long)task->stack_size);\n    }\n    else\n    {\n        probe_log(\"[OS_TaskCreate_Impl] task is NULL\\n\");\n    }\n\n    if (impl != NULL)\n    {\n        probe_log(\"[OS_TaskCreate_Impl] impl->id=%lu\\n\", (unsigned long)impl->id);\n    }\n    else\n    {\n        probe_log(\"[OS_TaskCreate_Impl] impl is NULL\\n\");\n    }\n\n    probe_log(\"[OS_TaskCreate_Impl] About to call OS_Posix_InternalTaskCreate_Impl with entry=OS_PthreadTaskEntry.\\n\");\n\n    return_code = OS_Posix_InternalTaskCreate_Impl(&impl->id, task->priority, task->stack_size, OS_PthreadTaskEntry,\n                                                   arg.opaque_arg);\n\n    /* Probe: record the return from OS_Posix_InternalTaskCreate_Impl. If OS_PthreadTaskEntry truly never returns\n       then the following log will never be observed. If it is observed, this is evidence that the entry point has\n       returned and thus the \"never returns\" documentation is violated. */\n    probe_log(\"[OS_TaskCreate_Impl] OS_Posix_InternalTaskCreate_Impl returned return_code=%d\\n\", (int)return_code);\n\n    return return_code;\n}\n"
}