{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate_Impl:\n```c\nint32 OS_TaskCreate_Impl(const OS_object_token_t *token, uint32 flags)\n{\n    OS_VoidPtrValueWrapper_t        arg;\n    int32                           return_code;\n    OS_impl_task_internal_record_t *impl;\n    OS_task_internal_record_t *     task;\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = OS_ObjectIdFromToken(token);\n\n    task = OS_OBJECT_TABLE_GET(OS_task_table, *token);\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    return_code = OS_Posix_InternalTaskCreate_Impl(&impl->id, task->priority, task->stack_size, OS_PthreadTaskEntry,\n                                                   arg.opaque_arg);\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_TaskCreate_Impl:\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef union\n{\n    void *           opaque_arg;\n    OS_ArgCallback_t arg_callback_func;\n    osal_id_t        id;\n    osal_index_t     idx;\n} OS_VoidPtrValueWrapper_t\n...\nextern OS_task_internal_record_t OS_task_table[OS_MAX_TASKS]\n...\nOS_impl_task_internal_record_t OS_impl_task_table[OS_MAX_TASKS]\n...\ntypedef struct\n{\n    char            task_name[OS_MAX_API_NAME];\n    size_t          stack_size;\n    osal_priority_t priority;\n    osal_task_entry entry_function_pointer;\n    osal_task_entry delete_hook_pointer;\n    void *          entry_arg;\n    osal_stackptr_t stack_pointer;\n} OS_task_internal_record_t\n...\ntypedef struct\n{\n    pthread_t id;\n} OS_impl_task_internal_record_t\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ntask = OS_OBJECT_TABLE_GET(OS_task_table, *token);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The pointer 'task' is declared as OS_task_internal_record_t * and assigned from OS_OBJECT_TABLE_GET(OS_task_table, *token), but in this function 'task' is only used for reading (e.g. task->priority, task->stack_size). Per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible. Declaring it as const OS_task_internal_record_t *task (while the table can remain non-const) would avoid the violation."
}