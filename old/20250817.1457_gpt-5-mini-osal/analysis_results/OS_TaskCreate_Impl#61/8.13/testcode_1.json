{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'task' is declared as OS_task_internal_record_t * and assigned from OS_OBJECT_TABLE_GET(OS_task_table, *token), but in this function 'task' is only used for reading (e.g. task->priority, task->stack_size). Per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible. Declaring it as const OS_task_internal_record_t *task (while the table can remain non-const) would avoid the violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskCreate_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/491.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskCreate_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate_Impl:\n```c\nint32 OS_TaskCreate_Impl(const OS_object_token_t *token, uint32 flags)\n{\n    OS_VoidPtrValueWrapper_t        arg;\n    int32                           return_code;\n    OS_impl_task_internal_record_t *impl;\n    OS_task_internal_record_t *     task;\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = OS_ObjectIdFromToken(token);\n\n    task = OS_OBJECT_TABLE_GET(OS_task_table, *token);\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    return_code = OS_Posix_InternalTaskCreate_Impl(&impl->id, task->priority, task->stack_size, OS_PthreadTaskEntry,\n                                                   arg.opaque_arg);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskCreate_Impl code.\n",
  "test_code": "int32 OS_TaskCreate_Impl(const OS_object_token_t *token, uint32 flags)\n{\n    OS_VoidPtrValueWrapper_t        arg;\n    int32                           return_code;\n    OS_impl_task_internal_record_t *impl;\n    OS_task_internal_record_t *     task;\n\n    /* Probe log: capture entry and state for MISRA Rule 8.13 investigation */\n    {\n        FILE *log = fopen(\"/tmp/logs/491.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TaskCreate_Impl: entry token=%p flags=%u\\n\", (const void *)token, (unsigned)flags);\n            fclose(log);\n        }\n    }\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = OS_ObjectIdFromToken(token);\n\n    /* Capture object id after conversion */\n    {\n        FILE *log = fopen(\"/tmp/logs/491.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* print as unsigned long long to be resilient to various integer typedefs */\n            fprintf(log, \"  arg.id = %llu\\n\", (unsigned long long)arg.id);\n            fclose(log);\n        }\n    }\n\n    task = OS_OBJECT_TABLE_GET(OS_task_table, *token);\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    /* Log pointers and relevant read-only fields from the task/impl records */\n    {\n        FILE *log = fopen(\"/tmp/logs/491.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"  task_ptr=%p impl_ptr=%p\\n\", (const void *)task, (const void *)impl);\n\n            if (task != NULL)\n            {\n                /* priority and stack_size are observed-only in this function (read-only) */\n                fprintf(log, \"  task->priority=%u task->stack_size=%u\\n\",\n                        (unsigned)task->priority, (unsigned)task->stack_size);\n            }\n            else\n            {\n                fprintf(log, \"  task is NULL\\n\");\n            }\n\n            if (impl != NULL)\n            {\n                fprintf(log, \"  impl->id=%u\\n\", (unsigned)impl->id);\n            }\n            else\n            {\n                fprintf(log, \"  impl is NULL\\n\");\n            }\n\n            fclose(log);\n        }\n    }\n\n    return_code = OS_Posix_InternalTaskCreate_Impl(&impl->id, task->priority, task->stack_size, OS_PthreadTaskEntry,\n                                                   arg.opaque_arg);\n\n    /* Log result before returning */\n    {\n        FILE *log = fopen(\"/tmp/logs/491.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"  OS_Posix_InternalTaskCreate_Impl returned %d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}