{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'task' is declared as OS_task_internal_record_t *task but is only used for read-only access (task->priority, task->stack_size). Per MISRA C 2023 Rule 8.13 it should be declared const OS_task_internal_record_t *task to reflect that the pointee is not modified. Assigning a pointer-to-const from the non-const OS_task_table[] is allowed, so the current non-const declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskCreate_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/491.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskCreate_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskCreate_Impl:\n```c\nint32 OS_TaskCreate_Impl(const OS_object_token_t *token, uint32 flags)\n{\n    OS_VoidPtrValueWrapper_t        arg;\n    int32                           return_code;\n    OS_impl_task_internal_record_t *impl;\n    OS_task_internal_record_t *     task;\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = OS_ObjectIdFromToken(token);\n\n    task = OS_OBJECT_TABLE_GET(OS_task_table, *token);\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    return_code = OS_Posix_InternalTaskCreate_Impl(&impl->id, task->priority, task->stack_size, OS_PthreadTaskEntry,\n                                                   arg.opaque_arg);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskCreate_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <time.h>\n#include <inttypes.h>\n\n/* Probe helpers: log control flow and key state to /tmp/logs/491.txt */\nstatic void ensure_log_dir(void)\n{\n    /* Attempt to create directory if it doesn't exist. Ignore errors if it already exists. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void probe_log_before(uint64_t obj_id, void *task_ptr, void *impl_ptr, uint32_t flags)\n{\n    FILE *f;\n    time_t t = time(NULL);\n\n    ensure_log_dir();\n    f = fopen(\"/tmp/logs/491.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[%ld] ENTER OS_TaskCreate_Impl - obj_id=%\" PRIu64 \", flags=%u, task_ptr=%p, impl_ptr=%p\\n\",\n            (long)t, obj_id, (unsigned)flags, task_ptr, impl_ptr);\n    fclose(f);\n}\n\nstatic void probe_log_after(uint64_t obj_id, void *task_ptr, void *impl_ptr, uint32_t flags, int32_t return_code, unsigned long priority, unsigned long stack_size)\n{\n    FILE *f;\n    time_t t = time(NULL);\n\n    ensure_log_dir();\n    f = fopen(\"/tmp/logs/491.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[%ld] EXIT  OS_TaskCreate_Impl - obj_id=%\" PRIu64 \", flags=%u, task_ptr=%p, impl_ptr=%p, priority=%lu, stack_size=%lu, rc=%\" PRId32 \"\\n\",\n            (long)t, obj_id, (unsigned)flags, task_ptr, impl_ptr, priority, stack_size, return_code);\n    fclose(f);\n}\n\nint32 OS_TaskCreate_Impl(const OS_object_token_t *token, uint32 flags)\n{\n    OS_VoidPtrValueWrapper_t        arg;\n    int32                           return_code;\n    OS_impl_task_internal_record_t *impl;\n    OS_task_internal_record_t *     task;\n\n    memset(&arg, 0, sizeof(arg));\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    arg.id = OS_ObjectIdFromToken(token);\n\n    task = OS_OBJECT_TABLE_GET(OS_task_table, *token);\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    /* Log before invoking the underlying implementation. This captures the object id, pointers and flags. */\n    probe_log_before((uint64_t)arg.id, (void *)task, (void *)impl, flags);\n\n    /* Preserve original behavior: call implementation with the same parameters. */\n    return_code = OS_Posix_InternalTaskCreate_Impl(&impl->id, task->priority, task->stack_size, OS_PthreadTaskEntry,\n                                                   arg.opaque_arg);\n\n    /* Log after call: include the return code and the read-only fields observed on 'task'. */\n    probe_log_after((uint64_t)arg.id, (void *)task, (void *)impl, flags, return_code,\n                    (unsigned long)task->priority, (unsigned long)task->stack_size);\n\n    return return_code;\n}\n"
}