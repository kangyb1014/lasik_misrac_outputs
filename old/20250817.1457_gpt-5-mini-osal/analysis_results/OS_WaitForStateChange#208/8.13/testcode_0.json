{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_WaitForStateChange takes a non-const pointer parameter (OS_object_token_t *token) but only reads from the pointed object (uses token->obj_type). The pointer could and should be declared const OS_object_token_t *token to indicate immutability and satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_WaitForStateChange code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1667.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_WaitForStateChange as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_WaitForStateChange:\n```c\nvoid OS_WaitForStateChange(OS_object_token_t *token, uint32 attempts)\n{\n    osal_key_t          saved_unlock_key;\n    OS_objtype_state_t *objtype;\n\n    /*\n     * This needs to release the lock, to allow other\n     * tasks to make a change to the table.  But to avoid\n     * ownership warnings the key must also be temporarily\n     * cleared too, and restored after waiting.\n     */\n\n    objtype          = &OS_objtype_state[token->obj_type];\n    saved_unlock_key = objtype->owner_key;\n\n    /* temporarily release the table */\n    objtype->owner_key = OS_LOCK_KEY_INVALID;\n\n    /*\n     * The implementation layer takes care of the actual unlock + wait.\n     * This permits use of condition variables where these two actions\n     * are done atomically.\n     */\n    OS_WaitForStateChange_Impl(token->obj_type, attempts);\n\n    /*\n     * After return, this task owns the table again\n     */\n    /* cppcheck-suppress redundantAssignment */\n    objtype->owner_key = saved_unlock_key;\n}\n```\n</target_code>\nPlease provide the modified OS_WaitForStateChange code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <stdlib.h>\n\n/* Minimal standalone type stubs to allow compilation of this test harness.\n * In the real system these types would be provided by the OS abstraction layer.\n */\ntypedef unsigned int uint32;\ntypedef unsigned int osal_key_t;\n\ntypedef struct\n{\n    unsigned int obj_type;\n} OS_object_token_t;\n\ntypedef struct\n{\n    osal_key_t owner_key;\n} OS_objtype_state_t;\n\n/* A sentinel value for an invalid lock key. Use a const variable rather than a macro. */\nstatic const osal_key_t OS_LOCK_KEY_INVALID = (osal_key_t)0u;\n\n/* Provide a small table so indexing by obj_type is safe in this test harness. */\nstatic OS_objtype_state_t OS_objtype_state[16] = { {0} };\n\n/* Implementation-layer wait function stub.\n * The real implementation would block/wait. Here we just log and return.\n */\nvoid OS_WaitForStateChange_Impl(unsigned int obj_type, uint32 attempts)\n{\n    FILE *f = fopen(\"/tmp/logs/1667.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"OS_WaitForStateChange_Impl called: obj_type=%u, attempts=%u\\n\", obj_type, (unsigned)attempts);\n        fclose(f);\n    }\n}\n\n/* Simple logging helper that appends formatted text to the log file. */\nstatic void log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1667.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * OS_WaitForStateChange\n *\n * This function preserves the original logic but adds detailed logging to\n * /tmp/logs/1667.txt so other agents can observe the control flow and the\n * state that demonstrates the reported non-const pointer usage.\n */\nvoid OS_WaitForStateChange(OS_object_token_t *token, uint32 attempts)\n{\n    osal_key_t          saved_unlock_key;\n    OS_objtype_state_t *objtype;\n\n    /* Log function entry and token information (address and obj_type). */\n    if (token == NULL)\n    {\n        log_append(\"OS_WaitForStateChange entry: token=NULL, attempts=%u\", (unsigned)attempts);\n        return;\n    }\n\n    log_append(\"OS_WaitForStateChange entry: token=%p, token->obj_type=%u, attempts=%u\",\n               (void *)token, (unsigned)token->obj_type, (unsigned)attempts);\n\n    /*\n     * This needs to release the lock, to allow other\n     * tasks to make a change to the table.  But to avoid\n     * ownership warnings the key must also be temporarily\n     * cleared too, and restored after waiting.\n     */\n\n    objtype          = &OS_objtype_state[token->obj_type];\n    saved_unlock_key = objtype->owner_key;\n\n    /* Log the saved owner key prior to modification */\n    log_append(\"Read objtype (index=%u) owner_key before release: %u\",\n               (unsigned)token->obj_type, (unsigned)saved_unlock_key);\n\n    /* temporarily release the table */\n    objtype->owner_key = OS_LOCK_KEY_INVALID;\n\n    /* Log the owner_key after it has been set to invalid */\n    log_append(\"objtype (index=%u) owner_key after release set to: %u\",\n               (unsigned)token->obj_type, (unsigned)objtype->owner_key);\n\n    /*\n     * The implementation layer takes care of the actual unlock + wait.\n     * This permits use of condition variables where these two actions\n     * are done atomically.\n     */\n    log_append(\"About to call OS_WaitForStateChange_Impl with obj_type=%u, attempts=%u\",\n               (unsigned)token->obj_type, (unsigned)attempts);\n\n    OS_WaitForStateChange_Impl(token->obj_type, attempts);\n\n    /*\n     * After return, this task owns the table again\n     */\n    /* cppcheck-suppress redundantAssignment */\n    objtype->owner_key = saved_unlock_key;\n\n    /* Log the restoration of the owner_key and function exit */\n    log_append(\"objtype (index=%u) owner_key restored to: %u\",\n               (unsigned)token->obj_type, (unsigned)objtype->owner_key);\n\n    log_append(\"OS_WaitForStateChange exit: token=%p, token->obj_type=%u\",\n               (void *)token, (unsigned)token->obj_type);\n}\n"
}