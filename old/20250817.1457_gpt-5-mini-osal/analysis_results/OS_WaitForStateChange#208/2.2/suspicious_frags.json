{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_WaitForStateChange:\n```c\nvoid OS_WaitForStateChange(OS_object_token_t *token, uint32 attempts)\n{\n    osal_key_t          saved_unlock_key;\n    OS_objtype_state_t *objtype;\n\n    /*\n     * This needs to release the lock, to allow other\n     * tasks to make a change to the table.  But to avoid\n     * ownership warnings the key must also be temporarily\n     * cleared too, and restored after waiting.\n     */\n\n    objtype          = &OS_objtype_state[token->obj_type];\n    saved_unlock_key = objtype->owner_key;\n\n    /* temporarily release the table */\n    objtype->owner_key = OS_LOCK_KEY_INVALID;\n\n    /*\n     * The implementation layer takes care of the actual unlock + wait.\n     * This permits use of condition variables where these two actions\n     * are done atomically.\n     */\n    OS_WaitForStateChange_Impl(token->obj_type, attempts);\n\n    /*\n     * After return, this task owns the table again\n     */\n    /* cppcheck-suppress redundantAssignment */\n    objtype->owner_key = saved_unlock_key;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_WaitForStateChange:\nvoid OS_WaitForStateChange_Impl(osal_objtype_t idtype, uint32 attempts)\n{\n    OS_impl_objtype_lock_t *impl;\n    struct timespec         ts;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n\n    /*\n     * because pthread_cond_timedwait() is also a cancellation point,\n     * this pushes a cleanup handler to ensure that if canceled during this call,\n     * the mutex will be released.\n     */\n    pthread_cleanup_push(OS_Posix_ReleaseTableMutex, &impl->mutex);\n\n    clock_gettime(CLOCK_REALTIME, &ts);\n\n    if (attempts <= 10)\n    {\n        /* Wait an increasing amount of time, starting at 10ms */\n        ts.tv_nsec += attempts * attempts * 10000000;\n        if (ts.tv_nsec >= 1000000000)\n        {\n            ts.tv_nsec -= 1000000000;\n            ++ts.tv_sec;\n        }\n    }\n    else\n    {\n        /* wait 1 second (max for polling) */\n        ++ts.tv_sec;\n    }\n\n    pthread_cond_timedwait(&impl->cond, &impl->mutex, &ts);\n\n    pthread_cleanup_pop(false);\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "objtype->owner_key = OS_LOCK_KEY_INVALID;",
    "saved_unlock_key = objtype->owner_key;",
    "/* cppcheck-suppress redundantAssignment */\n    objtype->owner_key = saved_unlock_key;",
    "pthread_cleanup_pop(false);",
    "pthread_cleanup_push(OS_Posix_ReleaseTableMutex, &impl->mutex);"
  ],
  "explanation": "Other code fragments were not selected because they have observable effects on program behaviour and therefore do not meet the definition of 'dead code'. Specifically:\n\n- The call to OS_WaitForStateChange_Impl(token->obj_type, attempts) and the body of that function (clock_gettime, the attempts-based timeout calculation, and pthread_cond_timedwait) determine timing and synchronization behaviour; removing them would change program execution timing and blocking behavior.\n\n- The retrieval of the objtype pointer (objtype = &OS_objtype_state[token->obj_type];) and the assignment impl = OS_impl_objtype_lock_table[idtype]; are used subsequently and are not redundant initializations.\n\n- The timeout arithmetic (ts.tv_nsec adjustments and ts.tv_sec increments) affects the wakeup time of pthread_cond_timedwait and thus is not removable.\n\n- The pthread cleanup push/pop mechanism is part of correct cancellation semantics: the push registers a handler that will run if the thread is cancelled while blocked, and the pop (with false) removes the handler without executing it in the normal path. While the pop(false) does not call the handler, both calls together implement required cancellation-safety behaviour; other synchronization calls (e.g. mutex/cond usage) are not dead.\n\n- Variable declarations and initializations (e.g. saved_unlock_key, impl, ts) are required for later operations and are not candidates for dead-code removal per MISRA note that initialization is not the same as assignment.\n\nTherefore only the listed fragments are worth investigating further for potential redundant/ineffective assignments or suppression/comments indicating a possibly redundant operation."
}