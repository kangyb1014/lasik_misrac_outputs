{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nvoid UT_ConfigureGenericStubReturnValue(UT_EntryKey_t FuncKey, const void *ValuePtr, size_t ValueSize,\n                                        UT_ValueGenre_t ValueGenre, int32 Counter, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_EntryType_t       ReqEntryType;\n\n    /* Probe helper: append a log record describing current state. */\n    static void UT_Probe_Log(const char *stage, UT_EntryKey_t key, UT_StubTableEntry_t *sp,\n                             UT_EntryType_t reqType, const void *vptr, size_t vsize,\n                             UT_ValueGenre_t vgenre, int32 cnt, const char *tname)\n    {\n        FILE *fp = fopen(\"/tmp/logs/2395.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"[UT_ConfigureGenericStubReturnValue] stage=%s\\n\", stage);\n            fprintf(fp, \"  FuncKey=%u\\n\", (unsigned int)key);\n            fprintf(fp, \"  StubPtr=%p\\n\", (void *)sp);\n            fprintf(fp, \"  ReqEntryType=%d\\n\", (int)reqType);\n            fprintf(fp, \"  ValuePtr=%p\\n\", (const void *)vptr);\n            fprintf(fp, \"  ValueSize=%zu\\n\", vsize);\n            fprintf(fp, \"  ValueGenre=%d\\n\", (int)vgenre);\n            fprintf(fp, \"  Counter=%d\\n\", (int)cnt);\n            fprintf(fp, \"  TypeName=%s\\n\", (tname != NULL) ? tname : \"(null)\");\n            fprintf(fp, \"\\n\");\n            (void)fclose(fp);\n        }\n    }\n\n    /* Initial probe at function entry */\n    UT_Probe_Log(\"entry\", FuncKey, NULL, (UT_EntryType_t)-1, ValuePtr, ValueSize, ValueGenre, Counter, TypeName);\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n    /*\n     * For deferred retval configs, this always adds a new entry.  But\n     * for constant retval configs, it should replace the existing entry if\n     * there is one.\n     */\n    if (Counter > 0)\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED;\n        StubPtr      = NULL;\n    }\n    else\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT;\n        StubPtr      = UT_GetStubEntry(FuncKey, ReqEntryType);\n    }\n\n    /* Probe after selecting the requested entry type */\n    UT_Probe_Log(\"after_reqtype_selection\", FuncKey, StubPtr, ReqEntryType, ValuePtr, ValueSize, ValueGenre, Counter, TypeName);\n\n    if (StubPtr == NULL)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot configure return value - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey = FuncKey;\n\n        StubPtr->EntryType         = ReqEntryType;\n        StubPtr->Data.Rvc.Genre    = ValueGenre;\n        StubPtr->Data.Rvc.Counter  = Counter;\n        StubPtr->Data.Rvc.ActualSz = ValueSize;\n        StubPtr->Data.Rvc.TypeName = TypeName;\n\n        /* Probe right before deciding storage strategy */\n        UT_Probe_Log(\"before_store_choice\", FuncKey, StubPtr, ReqEntryType, ValuePtr, ValueSize, ValueGenre, Counter, TypeName);\n\n        if (ValueGenre == UT_ValueGenre_OPAQUE)\n        {\n            /* For \"unknown\" types the pointer is stored directly - this allows for ANY return type of ANY size,\n             * but requires that the caller maintain the buffer in scope until the test completes */\n\n            /* Log that we are about to perform the potentially-qualifier-discarding assignment */\n            UT_Probe_Log(\"opaque_branch_before_assignment\", FuncKey, StubPtr, ReqEntryType, ValuePtr, ValueSize, ValueGenre, Counter, TypeName);\n\n            StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr;\n\n            /* Log after the assignment to capture the stored pointer value */\n            UT_Probe_Log(\"opaque_branch_after_assignment\", FuncKey, StubPtr, ReqEntryType, StubPtr->Data.Rvc.Buf.IndirectPtr, ValueSize, ValueGenre, Counter, TypeName);\n        }\n        else\n        {\n            /* For any of the recognized typical return types, a copy is made and stored in the state buffer */\n            UT_Probe_Log(\"nonopaque_before_storeretval\", FuncKey, StubPtr, ReqEntryType, ValuePtr, ValueSize, ValueGenre, Counter, TypeName);\n            UT_StoreRetval(&StubPtr->Data.Rvc.Buf, ValuePtr, ValueSize, ValueGenre);\n            UT_Probe_Log(\"nonopaque_after_storeretval\", FuncKey, StubPtr, ReqEntryType, StubPtr->Data.Rvc.Buf.IndirectPtr, ValueSize, ValueGenre, Counter, TypeName);\n        }\n    }\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmprky41k6a/src/ut_assert/src/utstubs.c: In function 'UT_ConfigureGenericStubReturnValue':\n/tmp/tmprky41k6a/src/ut_assert/src/utstubs.c:367:17: error: invalid storage class for function 'UT_Probe_Log'\n  367 |     static void UT_Probe_Log(const char *stage, UT_EntryKey_t key, UT_StubTableEntry_t *sp,\n      |                 ^~~~~~~~~~~~\ngmake[2]: *** [ut_assert/CMakeFiles/ut_assert.dir/build.make:104: ut_assert/CMakeFiles/ut_assert.dir/src/utstubs.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:788: ut_assert/CMakeFiles/ut_assert.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of UT_ConfigureGenericStubReturnValue as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "/* Fixed file-scope placement of UT_Probe_Log and minimal type declarations\n * to allow this translation unit to compile on its own.  No mock functions\n * are defined; external symbols are declared as extern. */\n\n#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Minimal type definitions to match usage in the function */\ntypedef unsigned int UT_EntryKey_t;\ntypedef int UT_EntryType_t;\ntypedef int UT_ValueGenre_t;\ntypedef int32_t int32;\n\n/* Some constants referenced by the code */\nenum {\n    UT_ENTRYTYPE_UNUSED = 0,\n    UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED = 1,\n    UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT = 2\n};\n\nenum {\n    UT_ValueGenre_OPAQUE = 1\n};\n\n/* Minimal stub table entry structure matching the fields used */\ntypedef struct UT_StubTableEntry\n{\n    UT_EntryKey_t FuncKey;\n    UT_EntryType_t EntryType;\n    union\n    {\n        struct\n        {\n            UT_ValueGenre_t Genre;\n            int32 Counter;\n            size_t ActualSz;\n            const char *TypeName;\n            struct\n            {\n                const void *IndirectPtr;\n            } Buf;\n        } Rvc;\n    } Data;\n} UT_StubTableEntry_t;\n\n/* External functions (not defined here) --- keep as extern to avoid mocks */\nextern UT_StubTableEntry_t *UT_GetStubEntry(UT_EntryKey_t key, UT_EntryType_t type);\nextern void UT_StoreRetval(void *buf, const void *val, size_t size, UT_ValueGenre_t genre);\nextern void UtAssert_Abort(const char *msg);\n\n/* Probe helper moved to file scope (was incorrectly declared as static inside a function) */\nstatic void UT_Probe_Log(const char *stage, UT_EntryKey_t key, UT_StubTableEntry_t *sp,\n                         UT_EntryType_t reqType, const void *vptr, size_t vsize,\n                         UT_ValueGenre_t vgenre, int32 cnt, const char *tname)\n{\n    FILE *fp = fopen(\"/tmp/logs/2395.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"[UT_ConfigureGenericStubReturnValue] stage=%s\\n\", stage);\n        fprintf(fp, \"  FuncKey=%u\\n\", (unsigned int)key);\n        fprintf(fp, \"  StubPtr=%p\\n\", (void *)sp);\n        fprintf(fp, \"  ReqEntryType=%d\\n\", (int)reqType);\n        fprintf(fp, \"  ValuePtr=%p\\n\", (const void *)vptr);\n        fprintf(fp, \"  ValueSize=%zu\\n\", vsize);\n        fprintf(fp, \"  ValueGenre=%d\\n\", (int)vgenre);\n        fprintf(fp, \"  Counter=%d\\n\", (int)cnt);\n        fprintf(fp, \"  TypeName=%s\\n\", (tname != NULL) ? tname : \"(null)\");\n        fprintf(fp, \"\\n\");\n        (void)fclose(fp);\n    }\n}\n\nvoid UT_ConfigureGenericStubReturnValue(UT_EntryKey_t FuncKey, const void *ValuePtr, size_t ValueSize,\n                                        UT_ValueGenre_t ValueGenre, int32 Counter, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_EntryType_t       ReqEntryType;\n\n    /* Initial probe at function entry */\n    UT_Probe_Log(\"entry\", FuncKey, NULL, (UT_EntryType_t)-1, ValuePtr, ValueSize, ValueGenre, Counter, TypeName);\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n    /*\n     * For deferred retval configs, this always adds a new entry.  But\n     * for constant retval configs, it should replace the existing entry if\n     * there is one.\n     */\n    if (Counter > 0)\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED;\n        StubPtr      = NULL;\n    }\n    else\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT;\n        StubPtr      = UT_GetStubEntry(FuncKey, ReqEntryType);\n    }\n\n    /* Probe after selecting the requested entry type */\n    UT_Probe_Log(\"after_reqtype_selection\", FuncKey, StubPtr, ReqEntryType, ValuePtr, ValueSize, ValueGenre, Counter, TypeName);\n\n    if (StubPtr == NULL)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot configure return value - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey = FuncKey;\n\n        StubPtr->EntryType         = ReqEntryType;\n        StubPtr->Data.Rvc.Genre    = ValueGenre;\n        StubPtr->Data.Rvc.Counter  = Counter;\n        StubPtr->Data.Rvc.ActualSz = ValueSize;\n        StubPtr->Data.Rvc.TypeName = TypeName;\n\n        /* Probe right before deciding storage strategy */\n        UT_Probe_Log(\"before_store_choice\", FuncKey, StubPtr, ReqEntryType, ValuePtr, ValueSize, ValueGenre, Counter, TypeName);\n\n        if (ValueGenre == UT_ValueGenre_OPAQUE)\n        {\n            /* For \"unknown\" types the pointer is stored directly - this allows for ANY return type of ANY size,\n             * but requires that the caller maintain the buffer in scope until the test completes */\n\n            /* Log that we are about to perform the potentially-qualifier-discarding assignment */\n            UT_Probe_Log(\"opaque_branch_before_assignment\", FuncKey, StubPtr, ReqEntryType, ValuePtr, ValueSize, ValueGenre, Counter, TypeName);\n\n            StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr;\n\n            /* Log after the assignment to capture the stored pointer value */\n            UT_Probe_Log(\"opaque_branch_after_assignment\", FuncKey, StubPtr, ReqEntryType, StubPtr->Data.Rvc.Buf.IndirectPtr, ValueSize, ValueGenre, Counter, TypeName);\n        }\n        else\n        {\n            /* For any of the recognized typical return types, a copy is made and stored in the state buffer */\n            UT_Probe_Log(\"nonopaque_before_storeretval\", FuncKey, StubPtr, ReqEntryType, ValuePtr, ValueSize, ValueGenre, Counter, TypeName);\n            UT_StoreRetval(&StubPtr->Data.Rvc.Buf, ValuePtr, ValueSize, ValueGenre);\n            UT_Probe_Log(\"nonopaque_after_storeretval\", FuncKey, StubPtr, ReqEntryType, StubPtr->Data.Rvc.Buf.IndirectPtr, ValueSize, ValueGenre, Counter, TypeName);\n        }\n    }\n}\n",
  "explanation": "The nested function UT_Probe_Log was declared static inside UT_ConfigureGenericStubReturnValue, which is invalid in standard C. I moved UT_Probe_Log to file scope as a static function. To make this translation unit self-contained for compilation, I added minimal type definitions, constants, and the UT_StubTableEntry_t structure used by the function, and declared external functions (UT_GetStubEntry, UT_StoreRetval, UtAssert_Abort) as extern so they are not mocked or redefined here. The original function logic is preserved."
}