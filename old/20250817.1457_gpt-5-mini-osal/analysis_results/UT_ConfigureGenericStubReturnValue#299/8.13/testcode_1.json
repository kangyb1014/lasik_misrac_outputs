{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts the parameter ValuePtr (type const void *) to (void *const *) and then dereferences it: *((void *const *)ValuePtr). This treats the object referred to by ValuePtr as a pointer-to-non-const (void *), effectively discarding the const qualification on the pointed-at type and assigning that value into Buf->Ptr (void *). That removal of const on the pointee violates the intent of MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ConfigureGenericStubReturnValue code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2395.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ConfigureGenericStubReturnValue as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ConfigureGenericStubReturnValue:\n```c\nvoid UT_ConfigureGenericStubReturnValue(UT_EntryKey_t FuncKey, const void *ValuePtr, size_t ValueSize,\n                                        UT_ValueGenre_t ValueGenre, int32 Counter, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_EntryType_t       ReqEntryType;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n    /*\n     * For deferred retval configs, this always adds a new entry.  But\n     * for constant retval configs, it should replace the existing entry if\n     * there is one.\n     */\n    if (Counter > 0)\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED;\n        StubPtr      = NULL;\n    }\n    else\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT;\n        StubPtr      = UT_GetStubEntry(FuncKey, ReqEntryType);\n    }\n\n    if (StubPtr == NULL)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot configure return value - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey = FuncKey;\n\n        StubPtr->EntryType         = ReqEntryType;\n        StubPtr->Data.Rvc.Genre    = ValueGenre;\n        StubPtr->Data.Rvc.Counter  = Counter;\n        StubPtr->Data.Rvc.ActualSz = ValueSize;\n        StubPtr->Data.Rvc.TypeName = TypeName;\n\n        if (ValueGenre == UT_ValueGenre_OPAQUE)\n        {\n            /* For \"unknown\" types the pointer is stored directly - this allows for ANY return type of ANY size,\n             * but requires that the caller maintain the buffer in scope until the test completes */\n            StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr;\n        }\n        else\n        {\n            /* For any of the recognized typical return types, a copy is made and stored in the state buffer */\n            UT_StoreRetval(&StubPtr->Data.Rvc.Buf, ValuePtr, ValueSize, ValueGenre);\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_ConfigureGenericStubReturnValue code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logger: appends diagnostic information to /tmp/logs/2395.txt\n * This function intentionally avoids casting away const qualifications.\n * It prints pointer values, sizes, integer enums and the first few bytes\n * of the ValuePtr buffer (if any) so callers can later inspect the logs\n * to reproduce scenarios where a const-qualified pointer may be treated\n * as a non-const pointer elsewhere.\n */\nstatic void UT_LogProbe(const char *stage,\n                        const void *FuncKey,\n                        const void *ValuePtr,\n                        size_t ValueSize,\n                        int ValueGenre,\n                        int Counter,\n                        const char *TypeName,\n                        const void *StubPtr,\n                        int ReqEntryType)\n{\n    FILE *f = fopen(\"/tmp/logs/2395.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"STAGE: %s\\n\", stage);\n    fprintf(f, \"  FuncKey: %p\\n\", FuncKey);\n    fprintf(f, \"  ValuePtr: %p\\n\", ValuePtr);\n    fprintf(f, \"  ValueSize: %zu\\n\", ValueSize);\n    fprintf(f, \"  ValueGenre: %d\\n\", ValueGenre);\n    fprintf(f, \"  Counter: %d\\n\", Counter);\n    fprintf(f, \"  TypeName: %s\\n\", TypeName ? TypeName : \"(null)\");\n    fprintf(f, \"  ReqEntryType: %d\\n\", ReqEntryType);\n    fprintf(f, \"  StubPtr: %p\\n\", StubPtr);\n\n    if (ValuePtr != NULL && ValueSize > 0)\n    {\n        const unsigned char *b = (const unsigned char *)ValuePtr; /* keep const */\n        size_t n = ValueSize < 16 ? ValueSize : 16;\n        fprintf(f, \"  ValueBytes[%zu]:\", n);\n        for (size_t i = 0; i < n; ++i)\n        {\n            fprintf(f, \" %02X\", b[i]);\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nvoid UT_ConfigureGenericStubReturnValue(UT_EntryKey_t FuncKey, const void *ValuePtr, size_t ValueSize,\n                                        UT_ValueGenre_t ValueGenre, int32 Counter, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_EntryType_t       ReqEntryType;\n\n    /* Log entry state */\n    UT_LogProbe(\"entry\", (const void *)FuncKey, ValuePtr, ValueSize, (int)ValueGenre, (int)Counter, TypeName, NULL, -1);\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n    /* Log after initial lookup */\n    UT_LogProbe(\"after_initial_unused_lookup\", (const void *)FuncKey, ValuePtr, ValueSize, (int)ValueGenre, (int)Counter, TypeName, (const void *)StubPtr, (int)UT_ENTRYTYPE_UNUSED);\n\n    /*\n     * For deferred retval configs, this always adds a new entry.  But\n     * for constant retval configs, it should replace the existing entry if\n     * there is one.\n     */\n    if (Counter > 0)\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED;\n        StubPtr      = NULL;\n    }\n    else\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT;\n        StubPtr      = UT_GetStubEntry(FuncKey, ReqEntryType);\n    }\n\n    /* Log the requested entry type and current stub pointer */\n    UT_LogProbe(\"after_req_entry_determined\", (const void *)FuncKey, ValuePtr, ValueSize, (int)ValueGenre, (int)Counter, TypeName, (const void *)StubPtr, (int)ReqEntryType);\n\n    if (StubPtr == NULL)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    /* Log after possibly fetching an unused slot */\n    UT_LogProbe(\"after_final_unused_lookup\", (const void *)FuncKey, ValuePtr, ValueSize, (int)ValueGenre, (int)Counter, TypeName, (const void *)StubPtr, (int)ReqEntryType);\n\n    if (StubPtr == NULL)\n    {\n        UT_LogProbe(\"abort_path\", (const void *)FuncKey, ValuePtr, ValueSize, (int)ValueGenre, (int)Counter, TypeName, NULL, (int)ReqEntryType);\n        UtAssert_Abort(\"Cannot configure return value - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        /* Log right before modifying the stub entry */\n        UT_LogProbe(\"about_to_modify_stub\", (const void *)FuncKey, ValuePtr, ValueSize, (int)ValueGenre, (int)Counter, TypeName, (const void *)StubPtr, (int)ReqEntryType);\n\n        StubPtr->FuncKey = FuncKey;\n\n        StubPtr->EntryType         = ReqEntryType;\n        StubPtr->Data.Rvc.Genre    = ValueGenre;\n        StubPtr->Data.Rvc.Counter  = Counter;\n        StubPtr->Data.Rvc.ActualSz = ValueSize;\n        StubPtr->Data.Rvc.TypeName = TypeName;\n\n        if (ValueGenre == UT_ValueGenre_OPAQUE)\n        {\n            /* Log the choice to store the pointer directly. This is the\n             * critical point for the reported violation scenario: the code\n             * stores a pointer-to-const (ValuePtr) directly, and later\n             * code may cast that stored pointer to a non-const pointer type.\n             * We do not perform any cast here; we only log the pointer value\n             * and related metadata so other agents can reproduce the flow.\n             */\n            UT_LogProbe(\"storing_indirect_ptr\", (const void *)FuncKey, ValuePtr, ValueSize, (int)ValueGenre, (int)Counter, TypeName, (const void *)StubPtr, (int)ReqEntryType);\n\n            StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr;\n        }\n        else\n        {\n            /* For any of the recognized typical return types, a copy is made and stored in the state buffer */\n            UT_LogProbe(\"storing_copy_via_UT_StoreRetval\", (const void *)FuncKey, ValuePtr, ValueSize, (int)ValueGenre, (int)Counter, TypeName, (const void *)StubPtr, (int)ReqEntryType);\n\n            UT_StoreRetval(&StubPtr->Data.Rvc.Buf, ValuePtr, ValueSize, ValueGenre);\n        }\n\n        /* Final log after configuration */\n        UT_LogProbe(\"configured\", (const void *)FuncKey, ValuePtr, ValueSize, (int)ValueGenre, (int)Counter, TypeName, (const void *)StubPtr, (int)ReqEntryType);\n    }\n}\n"
}