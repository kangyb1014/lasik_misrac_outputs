{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment copies a const-qualified pointer (ValuePtr has type 'const void *') into the buffer field IndirectPtr. If IndirectPtr is declared as a non-const pointer (e.g. 'void *IndirectPtr;'), this discards the const qualifier and therefore violates MISRA C 2023 Rule 8.13. (If IndirectPtr were declared 'const void *', there would be no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_ConfigureGenericStubReturnValue code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2395.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_ConfigureGenericStubReturnValue as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_ConfigureGenericStubReturnValue:\n```c\nvoid UT_ConfigureGenericStubReturnValue(UT_EntryKey_t FuncKey, const void *ValuePtr, size_t ValueSize,\n                                        UT_ValueGenre_t ValueGenre, int32 Counter, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_EntryType_t       ReqEntryType;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n    /*\n     * For deferred retval configs, this always adds a new entry.  But\n     * for constant retval configs, it should replace the existing entry if\n     * there is one.\n     */\n    if (Counter > 0)\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED;\n        StubPtr      = NULL;\n    }\n    else\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT;\n        StubPtr      = UT_GetStubEntry(FuncKey, ReqEntryType);\n    }\n\n    if (StubPtr == NULL)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot configure return value - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey = FuncKey;\n\n        StubPtr->EntryType         = ReqEntryType;\n        StubPtr->Data.Rvc.Genre    = ValueGenre;\n        StubPtr->Data.Rvc.Counter  = Counter;\n        StubPtr->Data.Rvc.ActualSz = ValueSize;\n        StubPtr->Data.Rvc.TypeName = TypeName;\n\n        if (ValueGenre == UT_ValueGenre_OPAQUE)\n        {\n            /* For \"unknown\" types the pointer is stored directly - this allows for ANY return type of ANY size,\n             * but requires that the caller maintain the buffer in scope until the test completes */\n            StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr;\n        }\n        else\n        {\n            /* For any of the recognized typical return types, a copy is made and stored in the state buffer */\n            UT_StoreRetval(&StubPtr->Data.Rvc.Buf, ValuePtr, ValueSize, ValueGenre);\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_ConfigureGenericStubReturnValue code.\n",
  "test_code": "void UT_ConfigureGenericStubReturnValue(UT_EntryKey_t FuncKey, const void *ValuePtr, size_t ValueSize,\n                                        UT_ValueGenre_t ValueGenre, int32 Counter, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_EntryType_t       ReqEntryType;\n\n    /* Probe helper: append a log record describing current state. */\n    static void UT_Probe_Log(const char *stage, UT_EntryKey_t key, UT_StubTableEntry_t *sp,\n                             UT_EntryType_t reqType, const void *vptr, size_t vsize,\n                             UT_ValueGenre_t vgenre, int32 cnt, const char *tname)\n    {\n        FILE *fp = fopen(\"/tmp/logs/2395.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"[UT_ConfigureGenericStubReturnValue] stage=%s\\n\", stage);\n            fprintf(fp, \"  FuncKey=%u\\n\", (unsigned int)key);\n            fprintf(fp, \"  StubPtr=%p\\n\", (void *)sp);\n            fprintf(fp, \"  ReqEntryType=%d\\n\", (int)reqType);\n            fprintf(fp, \"  ValuePtr=%p\\n\", (const void *)vptr);\n            fprintf(fp, \"  ValueSize=%zu\\n\", vsize);\n            fprintf(fp, \"  ValueGenre=%d\\n\", (int)vgenre);\n            fprintf(fp, \"  Counter=%d\\n\", (int)cnt);\n            fprintf(fp, \"  TypeName=%s\\n\", (tname != NULL) ? tname : \"(null)\");\n            fprintf(fp, \"\\n\");\n            (void)fclose(fp);\n        }\n    }\n\n    /* Initial probe at function entry */\n    UT_Probe_Log(\"entry\", FuncKey, NULL, (UT_EntryType_t)-1, ValuePtr, ValueSize, ValueGenre, Counter, TypeName);\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n    /*\n     * For deferred retval configs, this always adds a new entry.  But\n     * for constant retval configs, it should replace the existing entry if\n     * there is one.\n     */\n    if (Counter > 0)\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED;\n        StubPtr      = NULL;\n    }\n    else\n    {\n        ReqEntryType = UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT;\n        StubPtr      = UT_GetStubEntry(FuncKey, ReqEntryType);\n    }\n\n    /* Probe after selecting the requested entry type */\n    UT_Probe_Log(\"after_reqtype_selection\", FuncKey, StubPtr, ReqEntryType, ValuePtr, ValueSize, ValueGenre, Counter, TypeName);\n\n    if (StubPtr == NULL)\n    {\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot configure return value - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey = FuncKey;\n\n        StubPtr->EntryType         = ReqEntryType;\n        StubPtr->Data.Rvc.Genre    = ValueGenre;\n        StubPtr->Data.Rvc.Counter  = Counter;\n        StubPtr->Data.Rvc.ActualSz = ValueSize;\n        StubPtr->Data.Rvc.TypeName = TypeName;\n\n        /* Probe right before deciding storage strategy */\n        UT_Probe_Log(\"before_store_choice\", FuncKey, StubPtr, ReqEntryType, ValuePtr, ValueSize, ValueGenre, Counter, TypeName);\n\n        if (ValueGenre == UT_ValueGenre_OPAQUE)\n        {\n            /* For \"unknown\" types the pointer is stored directly - this allows for ANY return type of ANY size,\n             * but requires that the caller maintain the buffer in scope until the test completes */\n\n            /* Log that we are about to perform the potentially-qualifier-discarding assignment */\n            UT_Probe_Log(\"opaque_branch_before_assignment\", FuncKey, StubPtr, ReqEntryType, ValuePtr, ValueSize, ValueGenre, Counter, TypeName);\n\n            StubPtr->Data.Rvc.Buf.IndirectPtr = ValuePtr;\n\n            /* Log after the assignment to capture the stored pointer value */\n            UT_Probe_Log(\"opaque_branch_after_assignment\", FuncKey, StubPtr, ReqEntryType, StubPtr->Data.Rvc.Buf.IndirectPtr, ValueSize, ValueGenre, Counter, TypeName);\n        }\n        else\n        {\n            /* For any of the recognized typical return types, a copy is made and stored in the state buffer */\n            UT_Probe_Log(\"nonopaque_before_storeretval\", FuncKey, StubPtr, ReqEntryType, ValuePtr, ValueSize, ValueGenre, Counter, TypeName);\n            UT_StoreRetval(&StubPtr->Data.Rvc.Buf, ValuePtr, ValueSize, ValueGenre);\n            UT_Probe_Log(\"nonopaque_after_storeretval\", FuncKey, StubPtr, ReqEntryType, StubPtr->Data.Rvc.Buf.IndirectPtr, ValueSize, ValueGenre, Counter, TypeName);\n        }\n    }\n}\n"
}