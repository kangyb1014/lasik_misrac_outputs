{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe call pthread_mutex_lock() returns 0 on success or a positive POSIX error number on failure (it does not return negative values). Therefore the condition 'if (status < 0)' can never be true and the BSP_DEBUG(...) branch is unreachable. This constitutes unreachable code and violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Lock_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/17.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Lock_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Lock_Impl:\n```c\nvoid OS_BSP_Lock_Impl(void)\n{\n    int status;\n\n    status = pthread_mutex_lock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_lock: %s\\n\", strerror(status));\n    }\n    else\n    {\n        /*\n         * Temporarily Disable/Defer thread cancellation.\n         * Note that OS_BSP_ConsoleOutput_Impl() calls write() which is a cancellation point.\n         * So if this calling task is canceled, it risks leaving the BSP locked.\n         */\n        pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &OS_BSP_GenericLinuxGlobal.AccessCancelState);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Lock_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdarg.h>\n#include <pthread.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Minimal external declaration to match usage in the original code.\n * The actual definition is expected to be provided elsewhere in the project.\n */\ntypedef struct\n{\n    pthread_mutex_t AccessMutex;\n    int AccessCancelState;\n} OS_BSP_GenericLinuxGlobal_t;\n\nextern OS_BSP_GenericLinuxGlobal_t OS_BSP_GenericLinuxGlobal;\n\n/* Probe logger: append human-readable traces to /tmp/logs/17.txt.\n * Keeps messages short and ensures the /tmp/logs directory exists.\n */\nstatic void OS_BSP_LogProbe(const char *fmt, ...)\n{\n    char buf[512];\n    va_list ap;\n    va_start(ap, fmt);\n    vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n\n    /* Try to create the directory if it doesn't exist. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/17.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Write the formatted probe line and flush. */\n        fprintf(f, \"%s\\n\", buf);\n        fclose(f);\n    }\n}\n\n/* Original function with inserted probes to record control flow and state. */\nvoid OS_BSP_Lock_Impl(void)\n{\n    int status;\n\n    OS_BSP_LogProbe(\"OS_BSP_Lock_Impl: entering\");\n\n    status = pthread_mutex_lock(&OS_BSP_GenericLinuxGlobal.AccessMutex);\n\n    /* Log the raw return status from pthread_mutex_lock and strerror output. */\n    OS_BSP_LogProbe(\"pthread_mutex_lock returned status=%d\", status);\n    /* strerror expects a positive errnum (or errno). We log its output for evidence. */\n    OS_BSP_LogProbe(\"pthread_mutex_lock strerror: %s\", strerror(status));\n\n    if (status < 0)\n    {\n        /* Preserve original behavior: call BSP_DEBUG as before. */\n        BSP_DEBUG(\"pthread_mutex_lock: %s\\n\", strerror(status));\n\n        /* Probe that the negative-status branch was taken (this is the allegedly unreachable branch). */\n        OS_BSP_LogProbe(\"OS_BSP_Lock_Impl: taken branch status < 0 (unreachable-claim)\");\n    }\n    else\n    {\n        /* Log that we are taking the non-error branch and record the previous cancel state. */\n        OS_BSP_LogProbe(\"OS_BSP_Lock_Impl: taking else branch (status >= 0). Current cancel state variable address=%p\", (void *)&OS_BSP_GenericLinuxGlobal.AccessCancelState);\n\n        /* Temporarily Disable/Defer thread cancellation.\n         * Note that OS_BSP_ConsoleOutput_Impl() calls write() which is a cancellation point.\n         * So if this calling task is canceled, it risks leaving the BSP locked.\n         */\n        pthread_setcancelstate(PTHREAD_CANCEL_DISABLE, &OS_BSP_GenericLinuxGlobal.AccessCancelState);\n\n        OS_BSP_LogProbe(\"OS_BSP_Lock_Impl: pthread_setcancelstate called to disable cancellation\");\n    }\n\n    OS_BSP_LogProbe(\"OS_BSP_Lock_Impl: exiting\");\n}\n"
}