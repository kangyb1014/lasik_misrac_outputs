{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation when OS_Console_CopyOut treats console->device_name as a NUL-terminated C string. device_name is declared as char device_name[OS_MAX_API_NAME]; if it happens to be fully filled without a terminating '\\0' (or otherwise not guaranteed NUL-terminated), any use of string.h functions such as strlen, strcpy, strcat, etc., inside OS_Console_CopyOut would read past the bounds of device_name. Likewise, if OS_Console_CopyOut uses memcpy/memmove to copy data into the ring buffer without ensuring the copy length fits within console->BufSize (using PendingWritePos), it could write beyond the buffer bounds. Therefore, the call return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos); can lead to a Rule 21.17 violation in these scenarios.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleOutput_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/623.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ConsoleOutput_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleOutput_Impl:\n```c\nvoid OS_ConsoleOutput_Impl(const OS_object_token_t *token)\n{\n    size_t                        StartPos;\n    size_t                        EndPos;\n    size_t                        WriteSize;\n    OS_console_internal_record_t *console;\n\n    console  = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n    StartPos = console->ReadPos;\n    EndPos   = console->WritePos;\n\n    OS_BSP_Lock_Impl();\n\n    while (StartPos != EndPos)\n    {\n        if (StartPos > EndPos)\n        {\n            /* handle wrap */\n            WriteSize = console->BufSize - StartPos;\n        }\n        else\n        {\n            WriteSize = EndPos - StartPos;\n        }\n\n        OS_BSP_ConsoleOutput_Impl(&console->BufBase[StartPos], WriteSize);\n\n        StartPos += WriteSize;\n        if (StartPos >= console->BufSize)\n        {\n            /* handle wrap */\n            StartPos = 0;\n        }\n    }\n\n    OS_BSP_Unlock_Impl();\n\n    /* Update the global with the new read location */\n    console->ReadPos = StartPos;\n}\n```\n</target_code>\nPlease provide the modified OS_ConsoleOutput_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <stddef.h>\n\n/* Probe logging helpers: append human-readable state to /tmp/logs/623.txt */\nstatic void Probe_LogOpenDirOnce(void)\n{\n    /* Best-effort create directory; ignore errors (e.g. already exists). */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void Probe_LogConsoleState(const OS_console_internal_record_t *console,\n                                  size_t StartPos,\n                                  size_t EndPos,\n                                  size_t WriteSize,\n                                  const char *stage)\n{\n    Probe_LogOpenDirOnce();\n\n    FILE *f = fopen(\"/tmp/logs/623.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not affect normal operation. */\n        return;\n    }\n\n    fprintf(f, \"[OS_ConsoleOutput] stage=%s\\n\", stage);\n    fprintf(f, \"  console=%p, ReadPos=%zu, WritePos=%zu, StartPos=%zu, EndPos=%zu, WriteSize=%zu, BufSize=%zu\\n\",\n            (const void *)console, console->ReadPos, console->WritePos, StartPos, EndPos, WriteSize, console->BufSize);\n\n    /* Log buffer base address and a small peek (up to 32 bytes) at StartPos (but do not read out of bounds). */\n    fprintf(f, \"  BufBase=%p\\n\", (const void *)console->BufBase);\n    if (console->BufBase != NULL && console->BufSize > 0)\n    {\n        size_t max_peek = 32u;\n        size_t avail = console->BufSize;\n        size_t peek = (max_peek < avail) ? max_peek : avail;\n        size_t i;\n\n        /* Determine a safe linear region to print: from StartPos for up to 'peek' bytes, but do not wrap here. */\n        size_t linear = peek;\n        if (StartPos + linear > console->BufSize)\n        {\n            linear = console->BufSize - StartPos;\n        }\n\n        fprintf(f, \"  Buf peek (hex) at StartPos=%zu, len=%zu: \", StartPos, linear);\n        for (i = 0; i < linear; ++i)\n        {\n            unsigned char byte = (unsigned char)console->BufBase[StartPos + i];\n            fprintf(f, \"%02x\", (unsigned)byte);\n            if (i + 1 < linear) fprintf(f, \" \");\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    /* Attempt to log device_name information without assuming NUL-termination.\n       We will scan for a NUL within the array bounds and print a safe textual representation only if found. */\n    {\n        /* This relies on the console structure having device_name as an array member.\n           If not present in this build, these lines will fail to compile; but in the target\n           environment the field is expected to exist per the violation scenario. */\n        size_t name_size = 0u;\n        /* Use a try to obtain size of the array; if device_name is not an array this line will fail to compile. */\n#ifdef __GNUC__\n        /* Silence unused warnings in some builds */\n        (void)name_size;\n#endif\n        /* We do the check in a way that is safe (no reliance on strlen): */\n        {\n            /* Compute size of device_name array at compile-time via sizeof. */\n            size_t array_bytes = 0u;\n            /* Wrap in a block to avoid breakage if member not present in some builds. */\n            /* If device_name is present as an array, sizeof yields its size; else compilation will fail and needs adaptation. */\n            array_bytes = sizeof(console->device_name);\n\n            /* Scan for NUL within bounds. */\n            size_t i;\n            size_t nul_index = array_bytes; /* default: not found */\n            for (i = 0u; i < array_bytes; ++i)\n            {\n                if (console->device_name[i] == '\\0')\n                {\n                    nul_index = i;\n                    break;\n                }\n            }\n\n            if (nul_index < array_bytes)\n            {\n                fprintf(f, \"  device_name: NUL-terminated at index=%zu, length=%zu, text='\",\n                        nul_index, nul_index);\n                /* Safe to print as string since we found NUL within bounds. */\n                fprintf(f, \"%.*s\", (int)nul_index, console->device_name);\n                fprintf(f, \"'\\n\");\n            }\n            else\n            {\n                /* Not NUL-terminated within array bounds. Print a hex prefix to evidence the risk. */\n                size_t hex_print = (array_bytes < 16u) ? array_bytes : 16u;\n                fprintf(f, \"  device_name: NOT NUL-terminated within %zu bytes, printing first %zu bytes (hex): \", array_bytes, hex_print);\n                size_t j;\n                for (j = 0u; j < hex_print; ++j)\n                {\n                    unsigned char c = (unsigned char)console->device_name[j];\n                    fprintf(f, \"%02x\", (unsigned)c);\n                    if (j + 1 < hex_print) fprintf(f, \" \");\n                }\n                fprintf(f, \"\\n\");\n            }\n        }\n    }\n\n    fclose(f);\n}\n\nvoid OS_ConsoleOutput_Impl(const OS_object_token_t *token)\n{\n    size_t                        StartPos;\n    size_t                        EndPos;\n    size_t                        WriteSize;\n    OS_console_internal_record_t *console;\n\n    console  = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n    StartPos = console->ReadPos;\n    EndPos   = console->WritePos;\n\n    /* Log entry state */\n    Probe_LogConsoleState(console, StartPos, EndPos, 0u, \"entry\");\n\n    OS_BSP_Lock_Impl();\n\n    while (StartPos != EndPos)\n    {\n        /* Log loop iteration start */\n        Probe_LogConsoleState(console, StartPos, EndPos, 0u, \"loop-start\");\n\n        if (StartPos > EndPos)\n        {\n            /* handle wrap */\n            WriteSize = console->BufSize - StartPos;\n            Probe_LogConsoleState(console, StartPos, EndPos, WriteSize, \"computed-write-wrap\");\n        }\n        else\n        {\n            WriteSize = EndPos - StartPos;\n            Probe_LogConsoleState(console, StartPos, EndPos, WriteSize, \"computed-write-linear\");\n        }\n\n        /* Log the exact buffer pointer and length we will pass to the BSP output function. */\n        {\n            Probe_LogConsoleState(console, StartPos, EndPos, WriteSize, \"about-to-output\");\n        }\n\n        OS_BSP_ConsoleOutput_Impl(&console->BufBase[StartPos], WriteSize);\n\n        /* Log after output call */\n        Probe_LogConsoleState(console, StartPos, EndPos, WriteSize, \"after-output\");\n\n        StartPos += WriteSize;\n        if (StartPos >= console->BufSize)\n        {\n            /* handle wrap */\n            StartPos = 0;\n            Probe_LogConsoleState(console, StartPos, EndPos, 0u, \"wrapped-to-zero\");\n        }\n    }\n\n    OS_BSP_Unlock_Impl();\n\n    /* Update the global with the new read location */\n    console->ReadPos = StartPos;\n\n    /* Final state log */\n    Probe_LogConsoleState(console, StartPos, EndPos, 0u, \"exit\");\n}\n"
}