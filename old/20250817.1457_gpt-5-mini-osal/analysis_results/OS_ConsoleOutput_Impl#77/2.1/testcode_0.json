{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe test 'if (status < 0)' is effectively dead because pthread_mutex_unlock() returns 0 on success and a positive error number on failure (non-zero errno value). Therefore the 'status < 0' branch (calling BSP_DEBUG) cannot be taken on conforming POSIX implementations, making that branch unreachable. This violates MISRA C 2023 Rule 2.1 (no unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleOutput_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/617.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ConsoleOutput_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleOutput_Impl:\n```c\nvoid OS_ConsoleOutput_Impl(const OS_object_token_t *token)\n{\n    size_t                        StartPos;\n    size_t                        EndPos;\n    size_t                        WriteSize;\n    OS_console_internal_record_t *console;\n\n    console  = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n    StartPos = console->ReadPos;\n    EndPos   = console->WritePos;\n\n    OS_BSP_Lock_Impl();\n\n    while (StartPos != EndPos)\n    {\n        if (StartPos > EndPos)\n        {\n            /* handle wrap */\n            WriteSize = console->BufSize - StartPos;\n        }\n        else\n        {\n            WriteSize = EndPos - StartPos;\n        }\n\n        OS_BSP_ConsoleOutput_Impl(&console->BufBase[StartPos], WriteSize);\n\n        StartPos += WriteSize;\n        if (StartPos >= console->BufSize)\n        {\n            /* handle wrap */\n            StartPos = 0;\n        }\n    }\n\n    OS_BSP_Unlock_Impl();\n\n    /* Update the global with the new read location */\n    console->ReadPos = StartPos;\n}\n```\n</target_code>\nPlease provide the modified OS_ConsoleOutput_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <pthread.h>\n#include <errno.h>\n#include <string.h>\n\n/* Helper to append a timestamped message to the log file */\nstatic void OS_ConsoleOutput_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/617.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tmv;\n\n    /* Use localtime_r if available, otherwise localtime (thread-safety depends on platform). */\n    (void)localtime_r(&t, &tmv);\n\n    char timebuf[64];\n    if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tmv) == 0)\n    {\n        timebuf[0] = '\\0';\n    }\n\n    fprintf(fp, \"%s: \", timebuf);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\n/* Probe function: exercise a local pthread mutex to capture typical return values\n   from pthread_mutex_unlock so that external observers can reproduce the\n   behavior described in the violation scenario without touching system locks. */\nstatic void OS_ConsoleOutput_UnlockProbe(void)\n{\n    pthread_mutex_t probe_mutex;\n    int status;\n\n    if (pthread_mutex_init(&probe_mutex, NULL) != 0)\n    {\n        OS_ConsoleOutput_Log(\"UnlockProbe: pthread_mutex_init failed\");\n        return;\n    }\n\n    /* Lock once and unlock to observe success (expected 0) */\n    status = pthread_mutex_lock(&probe_mutex);\n    OS_ConsoleOutput_Log(\"UnlockProbe: pthread_mutex_lock returned %d (%s)\", status, status == 0 ? \"OK\" : strerror(status));\n\n    status = pthread_mutex_unlock(&probe_mutex);\n    OS_ConsoleOutput_Log(\"UnlockProbe: pthread_mutex_unlock (normal) returned %d (%s)\", status, status == 0 ? \"OK\" : strerror(status));\n\n    /* Attempt to unlock again (undefined for robust mutexes but commonly returns EINVAL or EPERM)\n       to demonstrate a non-zero positive error code from pthread_mutex_unlock on failure. */\n    status = pthread_mutex_unlock(&probe_mutex);\n    OS_ConsoleOutput_Log(\"UnlockProbe: pthread_mutex_unlock (double-unlock) returned %d (%s)\", status, status == 0 ? \"OK\" : strerror(status));\n\n    (void)pthread_mutex_destroy(&probe_mutex);\n}\n\nvoid OS_ConsoleOutput_Impl(const OS_object_token_t *token)\n{\n    size_t                        StartPos;\n    size_t                        EndPos;\n    size_t                        WriteSize;\n    OS_console_internal_record_t *console;\n\n    console  = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n    StartPos = console->ReadPos;\n    EndPos   = console->WritePos;\n\n    OS_ConsoleOutput_Log(\"Entry: token=%p ReadPos=%llu WritePos=%llu BufSize=%llu\", (const void *)token,\n                         (unsigned long long)StartPos, (unsigned long long)EndPos, (unsigned long long)console->BufSize);\n\n    OS_BSP_Lock_Impl();\n    OS_ConsoleOutput_Log(\"After OS_BSP_Lock_Impl\");\n\n    /* Track number of iterations for logging */\n    unsigned int iter_count = 0U;\n\n    while (StartPos != EndPos)\n    {\n        iter_count++;\n\n        if (StartPos > EndPos)\n        {\n            /* handle wrap */\n            WriteSize = console->BufSize - StartPos;\n            OS_ConsoleOutput_Log(\"Loop %u: wrap branch taken: StartPos=%llu EndPos=%llu WriteSize=%llu\",\n                                 iter_count, (unsigned long long)StartPos, (unsigned long long)EndPos, (unsigned long long)WriteSize);\n        }\n        else\n        {\n            WriteSize = EndPos - StartPos;\n            OS_ConsoleOutput_Log(\"Loop %u: linear branch taken: StartPos=%llu EndPos=%llu WriteSize=%llu\",\n                                 iter_count, (unsigned long long)StartPos, (unsigned long long)EndPos, (unsigned long long)WriteSize);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(&console->BufBase[StartPos], WriteSize);\n        OS_ConsoleOutput_Log(\"Loop %u: called OS_BSP_ConsoleOutput_Impl with size %llu\", iter_count, (unsigned long long)WriteSize);\n\n        StartPos += WriteSize;\n        if (StartPos >= console->BufSize)\n        {\n            /* handle wrap */\n            StartPos = 0;\n            OS_ConsoleOutput_Log(\"Loop %u: wrap-around applied, new StartPos=%llu\", iter_count, (unsigned long long)StartPos);\n        }\n    }\n\n    OS_ConsoleOutput_Log(\"Before OS_BSP_Unlock_Impl: iter_count=%u StartPos=%llu\", iter_count, (unsigned long long)StartPos);\n\n    OS_BSP_Unlock_Impl();\n\n    OS_ConsoleOutput_Log(\"After OS_BSP_Unlock_Impl\");\n\n    /* Run a local probe that demonstrates pthread_mutex_unlock return values on success and failure.\n       This does not alter the application's mutexes and preserves original logic. */\n    OS_ConsoleOutput_UnlockProbe();\n\n    /* Update the global with the new read location */\n    console->ReadPos = StartPos;\n    OS_ConsoleOutput_Log(\"Exit: Updated ReadPos=%llu\", (unsigned long long)console->ReadPos);\n}\n"
}