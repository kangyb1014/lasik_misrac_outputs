{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/617.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#ifdef _WIN32\n    localtime_s(&tm_buf, &t);\n#else\n    localtime_r(&t, &tm_buf);\n#endif\n    char timestr[64];\n    (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n    fprintf(f, \"%s - \", timestr);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid OS_ConsoleOutput_Impl(const OS_object_token_t *token)\n{\n    size_t                        StartPos;\n    size_t                        EndPos;\n    size_t                        WriteSize;\n    OS_console_internal_record_t *console;\n\n    /* Resolve the console record from token as before */\n    console  = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n\n    /* Log initial state */\n    if (console != NULL)\n    {\n        log_probe(\"OS_ConsoleOutput_Impl: entry token=%p console=%p ReadPos=%zu WritePos=%zu BufSize=%zu BufBase=%p\",\n                  (void *)token, (void *)console, console->ReadPos, console->WritePos, console->BufSize, (void *)console->BufBase);\n    }\n    else\n    {\n        log_probe(\"OS_ConsoleOutput_Impl: entry token=%p console=~NULL~\", (void *)token);\n    }\n\n    StartPos = console->ReadPos;\n    EndPos   = console->WritePos;\n\n    log_probe(\"Attempting to lock BSP (before OS_BSP_Lock_Impl)\");\n    OS_BSP_Lock_Impl();\n    log_probe(\"Acquired BSP lock (after OS_BSP_Lock_Impl)\");\n\n    while (StartPos != EndPos)\n    {\n        log_probe(\"Loop iteration: StartPos=%zu EndPos=%zu BufSize=%zu\",\n                  StartPos, EndPos, console->BufSize);\n\n        if (StartPos > EndPos)\n        {\n            /* handle wrap */\n            WriteSize = console->BufSize - StartPos;\n            log_probe(\"Wrap branch taken: StartPos > EndPos; WriteSize set to BufSize - StartPos = %zu\",\n                      WriteSize);\n        }\n        else\n        {\n            WriteSize = EndPos - StartPos;\n            log_probe(\"Linear branch taken: WriteSize = EndPos - StartPos = %zu\", WriteSize);\n        }\n\n        /* Log the buffer region about to be written */\n        log_probe(\"Calling OS_BSP_ConsoleOutput_Impl with buffer=%p len=%zu\",\n                  (void *)&console->BufBase[StartPos], WriteSize);\n\n        OS_BSP_ConsoleOutput_Impl(&console->BufBase[StartPos], WriteSize);\n\n        log_probe(\"Returned from OS_BSP_ConsoleOutput_Impl (wrote %zu bytes)\", WriteSize);\n\n        StartPos += WriteSize;\n        if (StartPos >= console->BufSize)\n        {\n            /* handle wrap */\n            StartPos = 0;\n            log_probe(\"Handled wrap: StartPos >= BufSize, resetting StartPos to 0\");\n        }\n        else\n        {\n            log_probe(\"Advanced StartPos to %zu (no wrap)\", StartPos);\n        }\n    }\n\n    log_probe(\"Releasing BSP lock (before OS_BSP_Unlock_Impl)\");\n    OS_BSP_Unlock_Impl();\n    log_probe(\"Released BSP lock (after OS_BSP_Unlock_Impl)\");\n\n    /* Update the global with the new read location */\n    log_probe(\"Updating console->ReadPos from %zu to %zu\", console->ReadPos, StartPos);\n    console->ReadPos = StartPos;\n    log_probe(\"OS_ConsoleOutput_Impl: exit token=%p final_ReadPos=%zu\", (void *)token, console->ReadPos);\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpbapl3iv2/src/src/os/portable/os-impl-console-bsp.c: In function 'log_probe':\n/tmp/tmpbapl3iv2/src/src/os/portable/os-impl-console-bsp.c:72:15: error: storage size of 'tm_buf' isn't known\n   72 |     struct tm tm_buf;\n      |               ^~~~~~\n/tmp/tmpbapl3iv2/src/src/os/portable/os-impl-console-bsp.c:85:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n   85 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/vxworks/CMakeFiles/utobj_coverage-vxworks-console-bsp.dir/build.make:76: unit-test-coverage/vxworks/CMakeFiles/utobj_coverage-vxworks-console-bsp.dir/__/__/os/portable/os-impl-console-bsp.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:2519: unit-test-coverage/vxworks/CMakeFiles/utobj_coverage-vxworks-console-bsp.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_ConsoleOutput_Impl as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stddef.h>\n\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/617.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#ifdef _WIN32\n    localtime_s(&tm_buf, &t);\n#else\n    localtime_r(&t, &tm_buf);\n#endif\n    char timestr[64];\n    (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n    fprintf(f, \"%s - \", timestr);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid OS_ConsoleOutput_Impl(const OS_object_token_t *token)\n{\n    size_t                        StartPos;\n    size_t                        EndPos;\n    size_t                        WriteSize;\n    OS_console_internal_record_t *console;\n\n    /* Resolve the console record from token as before */\n    console  = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n\n    /* Log initial state */\n    if (console != NULL)\n    {\n        log_probe(\"OS_ConsoleOutput_Impl: entry token=%p console=%p ReadPos=%zu WritePos=%zu BufSize=%zu BufBase=%p\",\n                  (void *)token, (void *)console, console->ReadPos, console->WritePos, console->BufSize, (void *)console->BufBase);\n    }\n    else\n    {\n        log_probe(\"OS_ConsoleOutput_Impl: entry token=%p console=~NULL~\", (void *)token);\n    }\n\n    StartPos = console->ReadPos;\n    EndPos   = console->WritePos;\n\n    log_probe(\"Attempting to lock BSP (before OS_BSP_Lock_Impl)\");\n    OS_BSP_Lock_Impl();\n    log_probe(\"Acquired BSP lock (after OS_BSP_Lock_Impl)\");\n\n    while (StartPos != EndPos)\n    {\n        log_probe(\"Loop iteration: StartPos=%zu EndPos=%zu BufSize=%zu\",\n                  StartPos, EndPos, console->BufSize);\n\n        if (StartPos > EndPos)\n        {\n            /* handle wrap */\n            WriteSize = console->BufSize - StartPos;\n            log_probe(\"Wrap branch taken: StartPos > EndPos; WriteSize set to BufSize - StartPos = %zu\",\n                      WriteSize);\n        }\n        else\n        {\n            WriteSize = EndPos - StartPos;\n            log_probe(\"Linear branch taken: WriteSize = EndPos - StartPos = %zu\", WriteSize);\n        }\n\n        /* Log the buffer region about to be written */\n        log_probe(\"Calling OS_BSP_ConsoleOutput_Impl with buffer=%p len=%zu\",\n                  (void *)&console->BufBase[StartPos], WriteSize);\n\n        OS_BSP_ConsoleOutput_Impl(&console->BufBase[StartPos], WriteSize);\n\n        log_probe(\"Returned from OS_BSP_ConsoleOutput_Impl (wrote %zu bytes)\", WriteSize);\n\n        StartPos += WriteSize;\n        if (StartPos >= console->BufSize)\n        {\n            /* handle wrap */\n            StartPos = 0;\n            log_probe(\"Handled wrap: StartPos >= BufSize, resetting StartPos to 0\");\n        }\n        else\n        {\n            log_probe(\"Advanced StartPos to %zu (no wrap)\", StartPos);\n        }\n    }\n\n    log_probe(\"Releasing BSP lock (before OS_BSP_Unlock_Impl)\");\n    OS_BSP_Unlock_Impl();\n    log_probe(\"Released BSP lock (after OS_BSP_Unlock_Impl)\");\n\n    /* Update the global with the new read location */\n    log_probe(\"Updating console->ReadPos from %zu to %zu\", console->ReadPos, StartPos);\n    console->ReadPos = StartPos;\n    log_probe(\"OS_ConsoleOutput_Impl: exit token=%p final_ReadPos=%zu\", (void *)token, console->ReadPos);\n}\n",
  "explanation": "I added the necessary standard headers (<stdio.h>, <stdarg.h>, <time.h>, and <stddef.h>) so that struct tm, the time functions, FILE, and va_list are properly defined. This fixes the 'storage size of tm_buf isn't known' error and ensures the variadic handling (va_list / vfprintf) matches the C library prototypes. No logic in OS_ConsoleOutput_Impl was changed; only the missing includes were added."
}