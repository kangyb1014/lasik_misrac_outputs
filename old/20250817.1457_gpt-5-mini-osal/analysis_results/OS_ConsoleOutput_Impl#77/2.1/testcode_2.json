{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe 'if (status < 0)' branch is effectively unreachable: pthread_mutex_lock returns 0 on success or a non\u2011zero positive error code on failure (POSIX error numbers), so status < 0 cannot occur in conforming implementations. Therefore the BSP_DEBUG(...) branch cannot be executed and constitutes unreachable code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleOutput_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/617.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ConsoleOutput_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleOutput_Impl:\n```c\nvoid OS_ConsoleOutput_Impl(const OS_object_token_t *token)\n{\n    size_t                        StartPos;\n    size_t                        EndPos;\n    size_t                        WriteSize;\n    OS_console_internal_record_t *console;\n\n    console  = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n    StartPos = console->ReadPos;\n    EndPos   = console->WritePos;\n\n    OS_BSP_Lock_Impl();\n\n    while (StartPos != EndPos)\n    {\n        if (StartPos > EndPos)\n        {\n            /* handle wrap */\n            WriteSize = console->BufSize - StartPos;\n        }\n        else\n        {\n            WriteSize = EndPos - StartPos;\n        }\n\n        OS_BSP_ConsoleOutput_Impl(&console->BufBase[StartPos], WriteSize);\n\n        StartPos += WriteSize;\n        if (StartPos >= console->BufSize)\n        {\n            /* handle wrap */\n            StartPos = 0;\n        }\n    }\n\n    OS_BSP_Unlock_Impl();\n\n    /* Update the global with the new read location */\n    console->ReadPos = StartPos;\n}\n```\n</target_code>\nPlease provide the modified OS_ConsoleOutput_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/*\n * Probe logging helper. Appends human-readable logs to /tmp/logs/617.txt.\n * This helper is intentionally small to avoid changing program logic.\n */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/617.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#ifdef _WIN32\n    localtime_s(&tm_buf, &t);\n#else\n    localtime_r(&t, &tm_buf);\n#endif\n    char timestr[64];\n    (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n    fprintf(f, \"%s - \", timestr);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * Original function with logging probes inserted. The logic is preserved;\n * probes do not change program state and are only best-effort observers.\n */\nvoid OS_ConsoleOutput_Impl(const OS_object_token_t *token)\n{\n    size_t                        StartPos;\n    size_t                        EndPos;\n    size_t                        WriteSize;\n    OS_console_internal_record_t *console;\n\n    /* Resolve the console record from token as before */\n    console  = OS_OBJECT_TABLE_GET(OS_console_table, *token);\n\n    /* Log initial state */\n    if (console != NULL)\n    {\n        log_probe(\"OS_ConsoleOutput_Impl: entry token=%p console=%p ReadPos=%zu WritePos=%zu BufSize=%zu BufBase=%p\",\n                  (void *)token, (void *)console, console->ReadPos, console->WritePos, console->BufSize, (void *)console->BufBase);\n    }\n    else\n    {\n        log_probe(\"OS_ConsoleOutput_Impl: entry token=%p console=~NULL~\", (void *)token);\n    }\n\n    StartPos = console->ReadPos;\n    EndPos   = console->WritePos;\n\n    log_probe(\"Attempting to lock BSP (before OS_BSP_Lock_Impl)\");\n    OS_BSP_Lock_Impl();\n    log_probe(\"Acquired BSP lock (after OS_BSP_Lock_Impl)\");\n\n    while (StartPos != EndPos)\n    {\n        log_probe(\"Loop iteration: StartPos=%zu EndPos=%zu BufSize=%zu\",\n                  StartPos, EndPos, console->BufSize);\n\n        if (StartPos > EndPos)\n        {\n            /* handle wrap */\n            WriteSize = console->BufSize - StartPos;\n            log_probe(\"Wrap branch taken: StartPos > EndPos; WriteSize set to BufSize - StartPos = %zu\",\n                      WriteSize);\n        }\n        else\n        {\n            WriteSize = EndPos - StartPos;\n            log_probe(\"Linear branch taken: WriteSize = EndPos - StartPos = %zu\", WriteSize);\n        }\n\n        /* Log the buffer region about to be written */\n        log_probe(\"Calling OS_BSP_ConsoleOutput_Impl with buffer=%p len=%zu\",\n                  (void *)&console->BufBase[StartPos], WriteSize);\n\n        OS_BSP_ConsoleOutput_Impl(&console->BufBase[StartPos], WriteSize);\n\n        log_probe(\"Returned from OS_BSP_ConsoleOutput_Impl (wrote %zu bytes)\", WriteSize);\n\n        StartPos += WriteSize;\n        if (StartPos >= console->BufSize)\n        {\n            /* handle wrap */\n            StartPos = 0;\n            log_probe(\"Handled wrap: StartPos >= BufSize, resetting StartPos to 0\");\n        }\n        else\n        {\n            log_probe(\"Advanced StartPos to %zu (no wrap)\", StartPos);\n        }\n    }\n\n    log_probe(\"Releasing BSP lock (before OS_BSP_Unlock_Impl)\");\n    OS_BSP_Unlock_Impl();\n    log_probe(\"Released BSP lock (after OS_BSP_Unlock_Impl)\");\n\n    /* Update the global with the new read location */\n    log_probe(\"Updating console->ReadPos from %zu to %zu\", console->ReadPos, StartPos);\n    console->ReadPos = StartPos;\n    log_probe(\"OS_ConsoleOutput_Impl: exit token=%p final_ReadPos=%zu\", (void *)token, console->ReadPos);\n}\n"
}