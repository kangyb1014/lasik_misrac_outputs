{
  "user_message": "An agent A claimed that the following OS_TimerGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_TimerGetInfo.\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The variable 'record' is declared as OS_common_record_t * (pointer to mutable data) but is only used to read fields from the global table. The global table object is declared as 'OS_common_record_t *const OS_global_timecb_table' (a const pointer to mutable records), so the pointer returned by OS_OBJECT_TABLE_GET could and should be assigned to a const-qualified pointer. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible (e.g. 'const OS_common_record_t *record'). Therefore this usage violates Rule 8.13. (The same issue also applies to the 'timecb' and 'timebase' pointers which are only read.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_TimerGetInfo_Log(osal_id_t timer_id,\n                                osal_objtype_t objtype,\n                                int32 return_code,\n                                OS_object_token_t *token_ptr,\n                                OS_common_record_t *record,\n                                OS_timecb_internal_record_t *timecb,\n                                OS_timebase_internal_record_t *timebase)\n{\n    FILE *f = fopen(\"/tmp/logs/2203.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"--- OS_TimerGetInfo probe ---\\n\");\n    fprintf(f, \"timer_id (raw) = %llu\\n\", (unsigned long long) (uint64_t) timer_id);\n    fprintf(f, \"objtype = %d\\n\", (int)objtype);\n    fprintf(f, \"return_code = %d\\n\", (int)return_code);\n\n    /* Token: we don't know the internal layout; log the address and raw bytes if available */\n    if (token_ptr != NULL)\n    {\n        fprintf(f, \"token address = %p\\n\", (void *) token_ptr);\n        /* Safely print up to 32 bytes of the token representation */\n        {\n            unsigned char *bytes = (unsigned char *) token_ptr;\n            size_t i;\n            fprintf(f, \"token bytes =\");\n            for (i = 0; i < sizeof(*token_ptr) && i < 32; ++i)\n            {\n                fprintf(f, \" %02x\", (unsigned) bytes[i]);\n            }\n            fprintf(f, \"\\n\");\n        }\n    }\n\n    fprintf(f, \"record ptr = %p\\n\", (void *) record);\n    if (record != NULL)\n    {\n        /* name_entry might not be null-terminated in every implementation, but we print safely */\n        char name_buf[128] = { '\\0' };\n        if (record->name_entry != NULL)\n        {\n            strncpy(name_buf, record->name_entry, sizeof(name_buf) - 1);\n        }\n        fprintf(f, \"record->name_entry = '%s'\\n\", name_buf);\n        fprintf(f, \"record->creator = %llu\\n\", (unsigned long long) (uint64_t) record->creator);\n    }\n\n    fprintf(f, \"timecb ptr = %p\\n\", (void *) timecb);\n    if (timecb != NULL)\n    {\n        fprintf(f, \"timecb->interval_time = %llu\\n\", (unsigned long long) (uint64_t) timecb->interval_time);\n        fprintf(f, \"timecb->timebase_token = (raw)\\n\");\n        /* Print raw bytes of the timebase_token if present */\n        {\n            unsigned char *tb_bytes = (unsigned char *) &timecb->timebase_token;\n            size_t i;\n            fprintf(f, \"timecb->timebase_token bytes =\");\n            for (i = 0; i < sizeof(timecb->timebase_token) && i < 32; ++i)\n            {\n                fprintf(f, \" %02x\", (unsigned) tb_bytes[i]);\n            }\n            fprintf(f, \"\\n\");\n        }\n    }\n\n    fprintf(f, \"timebase ptr = %p\\n\", (void *) timebase);\n    if (timebase != NULL)\n    {\n        fprintf(f, \"timebase->accuracy_usec = %llu\\n\", (unsigned long long) (uint64_t) timebase->accuracy_usec);\n    }\n\n    fprintf(f, \"--- end probe ---\\n\\n\");\n    fclose(f);\n}\n\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n\n    /* Log the context check result early so control path is captured */\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimerGetInfo_Log(timer_id, objtype, OS_ERR_INCORRECT_OBJ_STATE, NULL, NULL, NULL, NULL);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        /* Probe the pointers and the fields that are read; log before we release the token. */\n        OS_TimerGetInfo_Log(timer_id, objtype, return_code, &token, record, timecb, timebase);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        /* Log failure to obtain the object by id */\n        OS_TimerGetInfo_Log(timer_id, objtype, return_code, &token, NULL, NULL, NULL);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_TimerGetInfo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the original OS_TimerGetInfo the local pointers record, timecb and timebase are only used to read fields (strncpy and field reads) and are not used to modify the referenced objects. Per MISRA C 2023 Rule 8.13 these should be declared to point to const-qualified types (e.g. const OS_common_record_t *record; const OS_timecb_internal_record_t *timecb; const OS_timebase_internal_record_t *timebase) to express read-only access.\n\nAssigning the non-const pointer returned by the object-table macro to a const-qualified pointer is allowed (adding const is permitted), so making the change is straightforward. The extra logging code provided by agent A actually introduces non-const-typed parameters (so that probe takes non-const pointers), but that is not part of the original function and does not invalidate the original observation. If the code later needs to write via those pointers or pass them to APIs expecting non-const, then const cannot be used, but in the shown original function const is appropriate."
}