{
  "user_message": "An agent A claimed that the following OS_TimerGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_TimerGetInfo.\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'timecb' is declared as a non-const pointer (OS_timecb_internal_record_t *timecb) but in OS_TimerGetInfo it is only used for reading (timecb->timebase_token and timecb->interval_time). According to MISRA C 2023 Rule 8.13 it should be const-qualified when possible, e.g. const OS_timecb_internal_record_t *timecb; (OS_OBJECT_TABLE_GET returns a non-const address but assigning that to a const-qualified pointer is allowed).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_timer_log_probe(const char *stage,\n                               osal_id_t timer_id,\n                               osal_objtype_t objtype,\n                               int32 return_code,\n                               OS_common_record_t *record,\n                               OS_timecb_internal_record_t *timecb,\n                               OS_timebase_internal_record_t *timebase)\n{\n    FILE *f = fopen(\"/tmp/logs/2203.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"[OS_TimerGetInfo] stage=%s timer_id=%ld objtype=%ld return_code=%ld record=%p timecb=%p timebase=%p\\n\",\n                stage,\n                (long)timer_id,\n                (long)objtype,\n                (long)return_code,\n                (void *)record,\n                (void *)timecb,\n                (void *)timebase);\n\n        if (record != NULL)\n        {\n            /* record->name_entry is expected to be a NUL-terminated string */\n            fprintf(f, \"  record->name_entry=\\\"%s\\\" creator=%ld\\n\",\n                    record->name_entry != NULL ? record->name_entry : \"(null)\",\n                    (long)record->creator);\n        }\n\n        if (timecb != NULL)\n        {\n            /* Avoid casting an aggregate token to an integer. Log the address of the token instead. */\n            fprintf(f, \"  timecb->timebase_token=%p timecb->interval_time=%lu\\n\",\n                    (void *)&timecb->timebase_token,\n                    (unsigned long)timecb->interval_time);\n        }\n\n        if (timebase != NULL)\n        {\n            fprintf(f, \"  timebase->accuracy_usec=%lu\\n\",\n                    (unsigned long)timebase->accuracy_usec);\n        }\n\n        fclose(f);\n    }\n}\n\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry */\n    os_timer_log_probe(\"entry\", timer_id, (osal_objtype_t)0, (int32)-1, NULL, NULL, NULL);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n\n    /* Log after obtaining objtype */\n    os_timer_log_probe(\"after_objtype\", timer_id, objtype, (int32)-1, NULL, NULL, NULL);\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        /* Log the incorrect state return */\n        os_timer_log_probe(\"incorrect_obj_state\", timer_id, objtype, OS_ERR_INCORRECT_OBJ_STATE, NULL, NULL, NULL);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    /* Log after memset */\n    os_timer_log_probe(\"after_memset\", timer_id, objtype, (int32)-1, NULL, NULL, NULL);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    os_timer_log_probe(\"after_getbyid\", timer_id, objtype, return_code, NULL, NULL, NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        /* Log fetched table pointers and key fields (evidence for read-only use of timecb) */\n        os_timer_log_probe(\"after_tables\", timer_id, objtype, return_code, record, timecb, timebase);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log final populated timer_prop values */\n        os_timer_log_probe(\"populated_timer_prop\", timer_id, objtype, return_code, record, timecb, timebase);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_TimerGetInfo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In OS_TimerGetInfo the local pointers (timecb, timebase and even record) are only dereferenced for reading, so they can and should be declared as pointing to const-qualified types to satisfy MISRA C 2023 Rule 8.13. Assigning the non-const result of OS_OBJECT_TABLE_GET to a const-qualified pointer is allowed in C, so there is no technical obstacle to making these pointers const. To fix the violation declare them as e.g. const OS_timecb_internal_record_t *timecb; const OS_timebase_internal_record_t *timebase; const OS_common_record_t *record; (or provide a documented deviation if the project policy prevents this)."
}