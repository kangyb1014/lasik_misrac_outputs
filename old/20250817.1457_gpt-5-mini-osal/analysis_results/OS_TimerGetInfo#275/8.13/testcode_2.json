{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe extern declaration defines a const pointer to a non-const type (OS_common_record_t *const OS_global_timecb_table). The table is only read via OS_OBJECT_TABLE_GET (e.g. in OS_TimerGetInfo), so the pointed-to objects could and should be const-qualified. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible. The declaration should be changed to point to const data (for example: extern const OS_common_record_t * const OS_global_timecb_table;) to avoid allowing modification through this pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetInfo:\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append a single log line to the log file. */\nstatic void OS_TimerGetInfo_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2203.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and parameters */\n    OS_TimerGetInfo_ProbeLog(\"ENTER OS_TimerGetInfo: timer_id=%d, timer_prop=%p\", (int)timer_id, (void *)timer_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    OS_TimerGetInfo_ProbeLog(\"context objtype=%d\", (int)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimerGetInfo_ProbeLog(\"EXIT OS_TimerGetInfo: caller in timer callback context -> OS_ERR_INCORRECT_OBJ_STATE\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n    OS_TimerGetInfo_ProbeLog(\"timer_prop cleared (memset to 0)\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    OS_TimerGetInfo_ProbeLog(\"OS_ObjectIdGetById returned %d, token_addr=%p\", return_code, (void *)&token);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Retrieve table entries (read-only in this function) */\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        OS_TimerGetInfo_ProbeLog(\"record ptr=%p, timecb ptr=%p, timebase ptr=%p\", (void *)record, (void *)timecb, (void *)timebase);\n\n        if (record != NULL)\n        {\n            /* Log readable fields from the record (not modifying them) */\n            OS_TimerGetInfo_ProbeLog(\"record->name_entry=%s\", (record->name_entry != NULL) ? record->name_entry : \"(null)\");\n            OS_TimerGetInfo_ProbeLog(\"record->creator=%u\", (unsigned)record->creator);\n        }\n        else\n        {\n            OS_TimerGetInfo_ProbeLog(\"record is NULL\");\n        }\n\n        if (timecb != NULL)\n        {\n            OS_TimerGetInfo_ProbeLog(\"timecb->interval_time=%"
}