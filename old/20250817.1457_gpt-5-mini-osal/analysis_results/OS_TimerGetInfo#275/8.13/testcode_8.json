{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_TimerGetInfo the local pointer is declared as a non-const: \"OS_timebase_internal_record_t *timebase;\" but the code only reads fields from *timebase (e.g. timebase->accuracy_usec). Since the object is not modified, the pointer should be const-qualified (const OS_timebase_internal_record_t *timebase) to express intent and prevent accidental modification. Assigning the address of the table element (non-const) to a pointer-to-const is allowed, so the current declaration violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetInfo:\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <string.h>\n\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    FILE *log = NULL;\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /* Open log for probes (append so multiple calls accumulate evidence) */\n    log = fopen(\"/tmp/logs/2203.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"--- OS_TimerGetInfo ENTRY ---\\n\");\n        fprintf(log, \"timer_id=%llu, timer_prop=%p\\n\", (unsigned long long)timer_id, (void *)timer_prop);\n    }\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        if (log)\n        {\n            fprintf(log, \"Early return: caller is a timebase callback. objtype=%d\\n\", (int)objtype);\n            fprintf(log, \"--- OS_TimerGetInfo EXIT (incorrect obj state) ---\\n\\n\");\n            fclose(log);\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n    if (log)\n    {\n        fprintf(log, \"Zeroed timer_prop (size=%zu)\\n\", sizeof(OS_timer_prop_t));\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %d\\n\", return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        /* Probe: record timebase_token before dereferencing timecb */\n        if (log)\n        {\n            fprintf(log, \"Obtained token at %p (token storage addr=%p)\\n\", (void *)&token, (void *)&token);\n            fprintf(log, \"record=%p, timecb=%p\\n\", (void *)record, (void *)timecb);\n            if (timecb)\n            {\n                fprintf(log, \"timecb->timebase_token=%llu, timecb->interval_time=%llu\\n\",\n                        (unsigned long long)timecb->timebase_token,\n                        (unsigned long long)timecb->interval_time);\n            }\n        }\n\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        if (log)\n        {\n            fprintf(log, \"timebase=%p\\n\", (void *)timebase);\n            if (record)\n            {\n                /* record->name_entry is expected to be a string; print safely */\n                fprintf(log, \"record->name_entry=\\\"%s\\\"\\n\", record->name_entry ? record->name_entry : \"(null)\");\n                fprintf(log, \"record->creator=%llu\\n\", (unsigned long long)record->creator);\n            }\n            if (timebase)\n            {\n                fprintf(log, \"timebase->accuracy_usec=%llu\\n\", (unsigned long long)timebase->accuracy_usec);\n            }\n        }\n\n        /* Preserve original logic: copy values into timer_prop */\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n\n        if (log)\n        {\n            fprintf(log, \"Filled timer_prop: name=\\\"%s\\\", creator=%llu, interval_time=%u, accuracy=%u\\n\",\n                    timer_prop->name,\n                    (unsigned long long)timer_prop->creator,\n                    (unsigned)timer_prop->interval_time,\n                    (unsigned)timer_prop->accuracy);\n            fprintf(log, \"OS_ObjectIdRelease called\\n\");\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"return_code=%d\\n\", return_code);\n        fprintf(log, \"--- OS_TimerGetInfo EXIT ---\\n\\n\");\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}