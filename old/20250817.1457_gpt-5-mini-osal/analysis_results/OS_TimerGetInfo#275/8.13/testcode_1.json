{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'timebase' is declared as a non-const OS_timebase_internal_record_t * but is only used for read-only access (timebase->accuracy_usec). The assignment timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token); therefore could use a const-qualified pointer (const OS_timebase_internal_record_t *timebase). Declaring it non-const when it could be const violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetInfo:\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logging helper used to capture control flow and state. */\nstatic void OS_TimerGetInfo_Log(const char *label, const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2203.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_TimerGetInfo] %s: \", label);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and parameters */\n    OS_TimerGetInfo_Log(\"ENTRY\", \"timer_id=%llu timer_prop=%p\",\n                        (unsigned long long)(uintptr_t)timer_id, (void *)timer_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    OS_TimerGetInfo_Log(\"CONTEXT\", \"objtype=%d\", (int)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimerGetInfo_Log(\"RETURN\", \"OS_ERR_INCORRECT_OBJ_STATE due to objtype == OS_TIMEBASE\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n    OS_TimerGetInfo_Log(\"STATE\", \"cleared timer_prop at %p\", (void *)timer_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    OS_TimerGetInfo_Log(\"LOOKUP\", \"OS_ObjectIdGetById returned %d, token=%p\",\n                        (int)return_code, (void *)(uintptr_t)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        /* Log the retrieved pointers and key fields used below. */\n        OS_TimerGetInfo_Log(\"RECORD\", \"record=%p name_entry=%.32s creator=%u\",\n                            (void *)record,\n                            (record && record->name_entry) ? record->name_entry : \"(null)\",\n                            (unsigned) (record ? record->creator : 0U));\n\n        OS_TimerGetInfo_Log(\"TIMECB\", \"timecb=%p timebase_token=%p interval_time=%llu\",\n                            (void *)timecb,\n                            (void *)(uintptr_t)(timecb ? timecb->timebase_token : 0U),\n                            (unsigned long long)(timecb ? (unsigned long long)timecb->interval_time : 0ULL));\n\n        OS_TimerGetInfo_Log(\"TIMEBASE\", \"timebase=%p accuracy_usec=%llu\",\n                            (void *)timebase,\n                            (unsigned long long)(timebase ? (unsigned long long)timebase->accuracy_usec : 0ULL));\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n        OS_TimerGetInfo_Log(\"EXIT\", \"success, timer_prop populated for timer_id=%llu\",\n                            (unsigned long long)(uintptr_t)timer_id);\n    }\n    else\n    {\n        OS_TimerGetInfo_Log(\"EXIT\", \"failed to find timer, return_code=%d\", (int)return_code);\n    }\n\n    return return_code;\n}\n"
}