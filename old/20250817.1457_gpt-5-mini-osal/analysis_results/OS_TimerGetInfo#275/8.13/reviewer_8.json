{
  "user_message": "An agent A claimed that the following OS_TimerGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_TimerGetInfo.\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In OS_TimerGetInfo the local pointer is declared as a non-const: \"OS_timebase_internal_record_t *timebase;\" but the code only reads fields from *timebase (e.g. timebase->accuracy_usec). Since the object is not modified, the pointer should be const-qualified (const OS_timebase_internal_record_t *timebase) to express intent and prevent accidental modification. Assigning the address of the table element (non-const) to a pointer-to-const is allowed, so the current declaration violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    FILE *log = NULL;\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /* Open log for probes (append so multiple calls accumulate evidence) */\n    log = fopen(\"/tmp/logs/2203.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"--- OS_TimerGetInfo ENTRY ---\\n\");\n        fprintf(log, \"timer_id=%llu, timer_prop=%p\\n\", (unsigned long long)timer_id, (void *)timer_prop);\n    }\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        if (log)\n        {\n            fprintf(log, \"Early return: caller is a timebase callback. objtype=%d\\n\", (int)objtype);\n            fprintf(log, \"--- OS_TimerGetInfo EXIT (incorrect obj state) ---\\n\\n\");\n            fclose(log);\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n    if (log)\n    {\n        fprintf(log, \"Zeroed timer_prop (size=%zu)\\n\", sizeof(OS_timer_prop_t));\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (log)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %d\\n\", return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        /* Probe: record timebase_token before dereferencing timecb */\n        if (log)\n        {\n            fprintf(log, \"Obtained token at %p (token storage addr=%p)\\n\", (void *)&token, (void *)&token);\n            fprintf(log, \"record=%p, timecb=%p\\n\", (void *)record, (void *)timecb);\n            if (timecb)\n            {\n                /* timecb->timebase_token may be an aggregate type; print its address to avoid invalid integer cast */\n                fprintf(log, \"timecb->timebase_token=%p, timecb->interval_time=%llu\\n\",\n                        (void *)&timecb->timebase_token,\n                        (unsigned long long)timecb->interval_time);\n            }\n        }\n\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        if (log)\n        {\n            fprintf(log, \"timebase=%p\\n\", (void *)timebase);\n            if (record)\n            {\n                /* record->name_entry is expected to be a string; print safely */\n                fprintf(log, \"record->name_entry=\\\"%s\\\"\\n\", record->name_entry ? record->name_entry : \"(null)\");\n                fprintf(log, \"record->creator=%llu\\n\", (unsigned long long)record->creator);\n            }\n            if (timebase)\n            {\n                fprintf(log, \"timebase->accuracy_usec=%llu\\n\", (unsigned long long)timebase->accuracy_usec);\n            }\n        }\n\n        /* Preserve original logic: copy values into timer_prop */\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n\n        if (log)\n        {\n            fprintf(log, \"Filled timer_prop: name=\\\"%s\\\", creator=%llu, interval_time=%u, accuracy=%u\\n\",\n                    timer_prop->name,\n                    (unsigned long long)timer_prop->creator,\n                    (unsigned)timer_prop->interval_time,\n                    (unsigned)timer_prop->accuracy);\n            fprintf(log, \"OS_ObjectIdRelease called\\n\");\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"return_code=%d\\n\", return_code);\n        fprintf(log, \"--- OS_TimerGetInfo EXIT ---\\n\\n\");\n        fclose(log);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_TimerGetInfo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 8.13 recommends that a pointer should point to a const-qualified type whenever the pointed-to object is not modified. In OS_TimerGetInfo the local variable timebase is only used for reads (timebase->accuracy_usec) and is not used to modify the object, so it can and should be declared as const OS_timebase_internal_record_t *timebase to express intent and avoid accidental modification. Assigning the non-const pointer returned by the OS_OBJECT_TABLE_GET macro to a pointer-to-const is allowed, so there is no technical obstacle to adding the const qualifier here. (The same observation applies to the other local pointers that are only read.) If there is some later code that needs to modify the object through this pointer, then const would be inappropriate; but based on the shown function body, the report of a Rule 8.13 violation is correct."
}