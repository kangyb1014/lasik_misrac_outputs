{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'timecb' is declared as a non-const OS_timecb_internal_record_t * and is assigned the address of an entry in OS_timecb_table via OS_OBJECT_TABLE_GET. In OS_TimerGetInfo this pointer is used only for read access (timecb->interval_time) and is not used to modify the table entry, so it should be declared const (e.g. const OS_timecb_internal_record_t *timecb). Because the pointer is not const-qualified despite only being used for read-only access, Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetInfo:\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Open probe log file early so we can record control flow */\n    FILE *logf = fopen(\"/tmp/logs/2203.txt\", \"a\");\n    if (logf)\n    {\n        fprintf(logf, \"OS_TimerGetInfo ENTER: timer_id=%lu, timer_prop=%p\\n\",\n                (unsigned long)timer_id, (void *)timer_prop);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (logf)\n    {\n        fprintf(logf, \"OS_TimerGetInfo: current objtype=%u\\n\", (unsigned)objtype);\n    }\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        if (logf)\n        {\n            fprintf(logf, \"OS_TimerGetInfo EXIT early: incorrect obj state (timer callback context)\\n\");\n            fclose(logf);\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n    if (logf)\n    {\n        fprintf(logf, \"OS_TimerGetInfo: cleared timer_prop (zeroed)\\n\");\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (logf)\n    {\n        fprintf(logf, \"OS_TimerGetInfo: OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        /* Log the pointers we retrieved from the object table */\n        if (logf)\n        {\n            fprintf(logf, \"OS_TimerGetInfo: record=%p, timecb=%p\\n\", (void *)record, (void *)timecb);\n        }\n\n        /* timecb is used only for read access in this function; capture its read-only state */\n        if (timecb != NULL)\n        {\n            if (logf)\n            {\n                fprintf(logf, \"OS_TimerGetInfo: timecb->interval_time=%lu, timecb->timebase_token=%lu\\n\",\n                        (unsigned long)timecb->interval_time,\n                        (unsigned long)timecb->timebase_token);\n            }\n\n            timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n            if (logf)\n            {\n                fprintf(logf, \"OS_TimerGetInfo: timebase=%p\\n\", (void *)timebase);\n            }\n\n            if (timebase != NULL && logf)\n            {\n                fprintf(logf, \"OS_TimerGetInfo: timebase->accuracy_usec=%lu\\n\", (unsigned long)timebase->accuracy_usec);\n            }\n        }\n        else\n        {\n            if (logf)\n            {\n                fprintf(logf, \"OS_TimerGetInfo: timecb is NULL (unexpected)\\n\");\n            }\n            timebase = NULL;\n        }\n\n        /* Preserve original behavior: copy name and populate timer_prop using the same reads */\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        if (logf)\n        {\n            fprintf(logf, \"OS_TimerGetInfo: populated timer_prop: name=\\\"%s\\\", creator=%lu, interval_time=%lu, accuracy=%lu\\n\",\n                    timer_prop->name,\n                    (unsigned long)timer_prop->creator,\n                    (unsigned long)timer_prop->interval_time,\n                    (unsigned long)timer_prop->accuracy);\n        }\n\n        OS_ObjectIdRelease(&token);\n        if (logf)\n        {\n            fprintf(logf, \"OS_TimerGetInfo: released token and exiting with OS_SUCCESS\\n\");\n            fclose(logf);\n        }\n    }\n    else\n    {\n        if (logf)\n        {\n            fprintf(logf, \"OS_TimerGetInfo: exiting with error code %d\\n\", (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}