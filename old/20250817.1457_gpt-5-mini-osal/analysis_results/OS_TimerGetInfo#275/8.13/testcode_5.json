{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'timecb' is declared as a non-const pointer (OS_timecb_internal_record_t *timecb) but in OS_TimerGetInfo it is only used for reading (timecb->timebase_token and timecb->interval_time). According to MISRA C 2023 Rule 8.13 it should be const-qualified when possible, e.g. const OS_timecb_internal_record_t *timecb; (OS_OBJECT_TABLE_GET returns a non-const address but assigning that to a const-qualified pointer is allowed).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2203.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerGetInfo:\n```c\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerGetInfo code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log control flow and state to /tmp/logs/2203.txt */\nstatic void os_timer_log_probe(const char *stage,\n                               osal_id_t timer_id,\n                               osal_objtype_t objtype,\n                               int32 return_code,\n                               OS_common_record_t *record,\n                               OS_timecb_internal_record_t *timecb,\n                               OS_timebase_internal_record_t *timebase)\n{\n    FILE *f = fopen(\"/tmp/logs/2203.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"[OS_TimerGetInfo] stage=%s timer_id=%ld objtype=%ld return_code=%ld record=%p timecb=%p timebase=%p\\n\",\n                stage,\n                (long)timer_id,\n                (long)objtype,\n                (long)return_code,\n                (void *)record,\n                (void *)timecb,\n                (void *)timebase);\n\n        if (record != NULL)\n        {\n            /* record->name_entry is expected to be a NUL-terminated string */\n            fprintf(f, \"  record->name_entry=\\\"%s\\\" creator=%ld\\n\",\n                    record->name_entry != NULL ? record->name_entry : \"(null)\",\n                    (long)record->creator);\n        }\n\n        if (timecb != NULL)\n        {\n            fprintf(f, \"  timecb->timebase_token=%ld timecb->interval_time=%lu\\n\",\n                    (long)timecb->timebase_token,\n                    (unsigned long)timecb->interval_time);\n        }\n\n        if (timebase != NULL)\n        {\n            fprintf(f, \"  timebase->accuracy_usec=%lu\\n\",\n                    (unsigned long)timebase->accuracy_usec);\n        }\n\n        fclose(f);\n    }\n}\n\nint32 OS_TimerGetInfo(osal_id_t timer_id, OS_timer_prop_t *timer_prop)\n{\n    OS_common_record_t *           record;\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry */\n    os_timer_log_probe(\"entry\", timer_id, (osal_objtype_t)0, (int32)-1, NULL, NULL, NULL);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_prop);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n\n    /* Log after obtaining objtype */\n    os_timer_log_probe(\"after_objtype\", timer_id, objtype, (int32)-1, NULL, NULL, NULL);\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        /* Log the incorrect state return */\n        os_timer_log_probe(\"incorrect_obj_state\", timer_id, objtype, OS_ERR_INCORRECT_OBJ_STATE, NULL, NULL, NULL);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    memset(timer_prop, 0, sizeof(OS_timer_prop_t));\n\n    /* Log after memset */\n    os_timer_log_probe(\"after_memset\", timer_id, objtype, (int32)-1, NULL, NULL, NULL);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMECB, timer_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    os_timer_log_probe(\"after_getbyid\", timer_id, objtype, return_code, NULL, NULL, NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record   = OS_OBJECT_TABLE_GET(OS_global_timecb_table, token);\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timecb->timebase_token);\n\n        /* Log fetched table pointers and key fields (evidence for read-only use of timecb) */\n        os_timer_log_probe(\"after_tables\", timer_id, objtype, return_code, record, timecb, timebase);\n\n        strncpy(timer_prop->name, record->name_entry, sizeof(timer_prop->name) - 1);\n        timer_prop->creator       = record->creator;\n        timer_prop->interval_time = (uint32)timecb->interval_time;\n        timer_prop->accuracy      = timebase->accuracy_usec;\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log final populated timer_prop values */\n        os_timer_log_probe(\"populated_timer_prop\", timer_id, objtype, return_code, record, timecb, timebase);\n    }\n\n    return return_code;\n}\n"
}