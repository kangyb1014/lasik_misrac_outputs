{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential out-of-bounds read of the object pointed to by 'target'. The code computes mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt)) and then calls strncmp(target, filesys->virtual_mountpt, mplen). There is no check that the object referenced by 'target' contains at least mplen bytes. If 'target' points to a shorter string/buffer (for example an empty or shorter-than-mplen path), strncmp may attempt to read up to mplen bytes from 'target', resulting in an access beyond the bounds of the object referenced by 'target'. This is a potential violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStatVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/327.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysStatVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStatVolume_Impl:\n```c\nint32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if (statvfs(local->system_mountpt, &stat_buf) != 0)\n    {\n        return OS_ERROR;\n    }\n\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysStatVolume_Impl code.\n",
  "test_code": "int32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n    FILE *log = fopen(\"/tmp/logs/327.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"ENTRY: OS_FileSysStatVolume_Impl token=%p result=%p\\n\", (const void *)token, (void *)result);\n    }\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"Resolved local=%p\\n\", (void *)local);\n        if (local != NULL)\n        {\n            fprintf(log, \"system_mountpt ptr=%p\\n\", (void *)local->system_mountpt);\n            if (local->system_mountpt != NULL)\n            {\n                /* Print the mount point string safely (check for NULL above) */\n                fprintf(log, \"system_mountpt value=\\\"%s\\\"\\n\", local->system_mountpt);\n            }\n            else\n            {\n                fprintf(log, \"system_mountpt value=(null)\\n\");\n            }\n        }\n    }\n\n    if (statvfs(local->system_mountpt, &stat_buf) != 0)\n    {\n        if (log != NULL)\n        {\n            /* Log the failure and errno if available; do not call additional library functions that might mask the original failure */\n            fprintf(log, \"statvfs FAILED for path=%s\\n\", (local && local->system_mountpt) ? local->system_mountpt : \"(null)\");\n            /* errno may be available in the compilation unit; print its integer value if defined */\n#ifdef errno\n            fprintf(log, \"errno=%d\\n\", errno);\n#endif\n            fclose(log);\n        }\n\n        return OS_ERROR;\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"statvfs SUCCESS: f_bsize=%llu f_bfree=%llu f_blocks=%llu\\n\",\n                (unsigned long long)stat_buf.f_bsize,\n                (unsigned long long)stat_buf.f_bfree,\n                (unsigned long long)stat_buf.f_blocks);\n    }\n\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"POPULATED result: block_size=%llu blocks_free=%llu total_blocks=%llu\\n\",\n                (unsigned long long)result->block_size,\n                (unsigned long long)result->blocks_free,\n                (unsigned long long)result->total_blocks);\n        fclose(log);\n    }\n\n    return OS_SUCCESS;\n}\n"
}