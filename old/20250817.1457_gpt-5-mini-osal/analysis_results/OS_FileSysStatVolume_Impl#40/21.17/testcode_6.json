{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes \u2014 OS_CHECK_STRING(fsdevname, sizeof(filesys->device_name), ...) likely invokes string.h routines (e.g. memchr/strnlen) using the destination buffer size as the maximum probe length. If the object pointed to by fsdevname is smaller than sizeof(filesys->device_name) (for example a caller-supplied buffer of 8 bytes) and does not contain a NUL within that smaller allocation, the string routine will be asked to read beyond the bounds of the fsdevname object, producing an out-of-bounds access. This would violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStatVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/327.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysStatVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStatVolume_Impl:\n```c\nint32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if (statvfs(local->system_mountpt, &stat_buf) != 0)\n    {\n        return OS_ERROR;\n    }\n\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysStatVolume_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/statvfs.h>\n\nint32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n    FILE *logf = NULL;\n    time_t tnow;\n\n    /* Preserve original behavior: get the local filesystem record */\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Open probe log (append) to capture control flow and relevant state. */\n    logf = fopen(\"/tmp/logs/327.txt\", \"a\");\n    if (logf != NULL)\n    {\n        tnow = time(NULL);\n        fprintf(logf, \"\\n---- OS_FileSysStatVolume_Impl probe @ %ld ----\\n\", (long)tnow);\n        fprintf(logf, \"token ptr = %p\\n\", (const void *)token);\n        fprintf(logf, \"local record ptr = %p\\n\", (void *)local);\n\n        /* Log mountpoint pointer only (do NOT read beyond its bounds). */\n        if (local != NULL)\n        {\n            fprintf(logf, \"local->system_mountpt ptr = %p\\n\", (const void *)local->system_mountpt);\n\n            /* Note: We deliberately do NOT attempt to read or print the contents of\n             * local->system_mountpt here because doing so could itself cause an\n             * out-of-bounds access if the object is smaller than an assumed size.\n             * This probe logs pointer values and runtime results so that other\n             * tools/agents can reason about potential size mismatches without\n             * introducing additional unsafe reads. */\n        }\n        else\n        {\n            fprintf(logf, \"local is NULL\\n\");\n        }\n\n        fflush(logf);\n    }\n\n    /* Call the original statvfs as before */\n    if (statvfs(local->system_mountpt, &stat_buf) != 0)\n    {\n        /* Log failure details */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"statvfs FAILED: errno=%d (%s)\\n\", errno, strerror(errno));\n            fprintf(logf, \"Returning OS_ERROR\\n\");\n            fclose(logf);\n        }\n\n        return OS_ERROR;\n    }\n\n    /* Log statvfs results prior to assignment */\n    if (logf != NULL)\n    {\n        fprintf(logf, \"statvfs succeeded\\n\");\n        fprintf(logf, \"stat_buf.f_bsize = %llu\\n\", (unsigned long long)stat_buf.f_bsize);\n        fprintf(logf, \"stat_buf.f_bfree = %llu\\n\", (unsigned long long)stat_buf.f_bfree);\n        fprintf(logf, \"stat_buf.f_blocks = %llu\\n\", (unsigned long long)stat_buf.f_blocks);\n        fflush(logf);\n    }\n\n    /* Preserve original assignments */\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"Assigned result->block_size = %llu\\n\", (unsigned long long)result->block_size);\n        fprintf(logf, \"Assigned result->blocks_free = %llu\\n\", (unsigned long long)result->blocks_free);\n        fprintf(logf, \"Assigned result->total_blocks = %llu\\n\", (unsigned long long)result->total_blocks);\n        fprintf(logf, \"Returning OS_SUCCESS\\n\");\n        fclose(logf);\n    }\n\n    return OS_SUCCESS;\n}\n"
}