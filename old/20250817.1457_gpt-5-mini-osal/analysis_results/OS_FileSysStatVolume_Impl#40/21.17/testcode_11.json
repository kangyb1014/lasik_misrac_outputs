{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe OS_CHECK_STRING macro is passed fsvolname and sizeof(filesys->volume_name). If the macro is implemented using string.h functions such as memchr(), strnlen(), or similar that read up to the provided maximum, those functions will attempt to read sizeof(filesys->volume_name) bytes from fsvolname. If the actual object pointed to by fsvolname is shorter (has no NUL within that many bytes) this will read past the bounds of the fsvolname object and therefore violate Rule 21.17. (Note: sizeof(filesys->volume_name) is computed safely \u2014 sizeof does not evaluate the pointer \u2014 but that does not prevent the potential out-of-bounds read by the string function inside the macro.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStatVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/327.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysStatVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStatVolume_Impl:\n```c\nint32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if (statvfs(local->system_mountpt, &stat_buf) != 0)\n    {\n        return OS_ERROR;\n    }\n\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysStatVolume_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <sys/statvfs.h>\n#include <time.h>\n#include <errno.h>\n\n/*\n * Probe helper: append an entry to /tmp/logs/327.txt describing\n * the control flow and state observed in OS_FileSysStatVolume_Impl.\n * This helper avoids reading pointed-to string contents to prevent\n * introducing new out-of-bounds reads; it logs pointer values and\n * numeric metadata instead.\n */\nstatic void probe_log_fs_state(const void *token_ptr,\n                               const void *local_ptr,\n                               const void *mountpt_ptr,\n                               int statvfs_ret,\n                               const struct statvfs *stat_buf,\n                               const void *result_ptr)\n{\n    FILE *fp = NULL;\n    struct tm tm_buf;\n    time_t t = time(NULL);\n    char timestr[64] = {0};\n\n    /* try to create directory if it does not exist; ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    fp = fopen(\"/tmp/logs/327.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* format time */\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n    }\n    else\n    {\n        snprintf(timestr, sizeof(timestr), \"time-%lld\", (long long)t);\n    }\n\n    fprintf(fp, \"[%s] OS_FileSysStatVolume_Impl entry\\n\", timestr);\n    fprintf(fp, \"    token_ptr=%p\\n\", token_ptr);\n    fprintf(fp, \"    local_ptr=%p\\n\", local_ptr);\n    fprintf(fp, \"    system_mountpt_ptr=%p\\n\", mountpt_ptr);\n    fprintf(fp, \"    statvfs_ret=%d\\n\", statvfs_ret);\n\n    if (stat_buf != NULL && statvfs_ret == 0)\n    {\n        /* print the main statvfs fields used by the function */\n        fprintf(fp, \"    statvfs.f_bsize=%llu\\n\", (unsigned long long)stat_buf->f_bsize);\n        fprintf(fp, \"    statvfs.f_bfree=%llu\\n\", (unsigned long long)stat_buf->f_bfree);\n        fprintf(fp, \"    statvfs.f_blocks=%llu\\n\", (unsigned long long)stat_buf->f_blocks);\n    }\n    else if (statvfs_ret != 0)\n    {\n        fprintf(fp, \"    statvfs failed (errno=%d)\\n\", errno);\n    }\n\n    /* It's useful to know where the result structure is located, but\n     * we avoid printing its contents here to prevent any accidental\n     * reading beyond object bounds. Callers will still see the final\n     * result via normal APIs. */\n    fprintf(fp, \"    result_ptr=%p\\n\", result_ptr);\n    fprintf(fp, \"---\\n\");\n\n    fclose(fp);\n}\n\nint32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n\n    /* Log entry and token pointer before dereferencing */\n    probe_log_fs_state((const void *)token, NULL, NULL, /* statvfs not called yet */ -1, NULL, (const void *)result);\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Log after resolving the local record; log the mount point pointer but do not read the string contents. */\n    probe_log_fs_state((const void *)token, (const void *)local, (const void *)local->system_mountpt, -1, NULL, (const void *)result);\n\n    if (statvfs(local->system_mountpt, &stat_buf) != 0)\n    {\n        /* Log failure and errno */\n        probe_log_fs_state((const void *)token, (const void *)local, (const void *)local->system_mountpt, -1, NULL, (const void *)result);\n        return OS_ERROR;\n    }\n\n    /* Log successful statvfs results before populating result */\n    probe_log_fs_state((const void *)token, (const void *)local, (const void *)local->system_mountpt, 0, &stat_buf, (const void *)result);\n\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    /* Log final state after populating result */\n    probe_log_fs_state((const void *)token, (const void *)local, (const void *)local->system_mountpt, 0, &stat_buf, (const void *)result);\n\n    return OS_SUCCESS;\n}\n"
}