{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_OBJECT_TABLE_GET expands to a non-const pointer to an OS_filesys_internal_record_t (&tbl[index]). In OS_FileSysStatVolume_Impl this is used as: local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token); local is declared as OS_filesys_internal_record_t * but is only read (system_mountpt is accessed). Per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible. Here the pointer is not const-qualified (and the macro does not produce a const-qualified pointer), so the rule is violated. A fix is to declare local as const OS_filesys_internal_record_t * (or have the macro return a pointer to const).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStatVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/323.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysStatVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStatVolume_Impl:\n```c\nint32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if (statvfs(local->system_mountpt, &stat_buf) != 0)\n    {\n        return OS_ERROR;\n    }\n\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysStatVolume_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/statvfs.h>\n#include <time.h>\n\n/* Probing/logging helper. Keeps the original logic untouched and only appends\n * observable state to the log file for reproduction/evidence. */\nstatic void OS_FileSysStatVolume_LogProbe(const char *stage,\n                                          const void *token_ptr,\n                                          void *local_ptr,\n                                          int statvfs_ret,\n                                          const struct statvfs *stat_buf,\n                                          const void *result_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/323.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not alter program behavior. */\n        return;\n    }\n\n    time_t now = time(NULL);\n    fprintf(f, \"[%ld] OS_FileSysStatVolume_Impl probe: %s\\n\", (long)now, stage);\n    fprintf(f, \"  token pointer: %p\\n\", token_ptr);\n    fprintf(f, \"  local pointer: %p\\n\", local_ptr);\n    /* Note: local->system_mountpt is accessed in the original function; try to\n     * print it if available. We cast to (const char*) because the original\n     * type is expected to be a C string for mount point paths. */\n    if (local_ptr != NULL)\n    {\n        const char *mountpt = NULL;\n        /* We cannot dereference an unknown structure type safely here in a\n         * portable way other than assuming the member is first or known.\n         * However, the original code uses local->system_mountpt, so cast and\n         * attempt to access it at the expected offset of the member. This\n         * attempts to be minimally invasive by assuming typical layout; if the\n         * access is invalid for the build environment it should be removed.\n         * To avoid undefined behavior in strict builds, we only attempt this\n         * by treating local_ptr as a pointer to a pointer-sized buffer and\n         * copying to 'mountpt' through memcpy. */\n        memcpy(&mountpt, local_ptr, sizeof(mountpt));\n        if (mountpt != NULL)\n        {\n            fprintf(f, \"  local->system_mountpt (as string): '%s'\\n\", mountpt);\n        }\n        else\n        {\n            fprintf(f, \"  local->system_mountpt: (NULL)\\n\");\n        }\n    }\n\n    fprintf(f, \"  statvfs_ret: %d\\n\", statvfs_ret);\n    if (statvfs_ret != 0)\n    {\n        fprintf(f, \"  errno: %d (%s)\\n\", errno, strerror(errno));\n    }\n\n    if (stat_buf != NULL)\n    {\n        fprintf(f, \"  stat_buf.f_bsize: %llu\\n\", (unsigned long long)stat_buf->f_bsize);\n        fprintf(f, \"  stat_buf.f_bfree: %llu\\n\", (unsigned long long)stat_buf->f_bfree);\n        fprintf(f, \"  stat_buf.f_blocks: %llu\\n\", (unsigned long long)stat_buf->f_blocks);\n    }\n\n    if (result_ptr != NULL)\n    {\n        /* We do not know the exact layout of OS_statvfs_t; print pointer only\n         * to avoid introducing assumptions. */\n        fprintf(f, \"  result pointer: %p\\n\", result_ptr);\n    }\n\n    /* Record that 'local' in the original implementation is a non-const\n     * pointer; this is relevant to the MISRA Rule 8.13 scenario. */\n    fprintf(f, \"  note: 'local' declared as non-const pointer in implementation\\n\");\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nint32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n\n    /* Log entry and token pointer before lookup */\n    OS_FileSysStatVolume_LogProbe(\"entry_before_lookup\", token, NULL, 0, NULL, result);\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Log after lookup with the obtained local pointer */\n    OS_FileSysStatVolume_LogProbe(\"after_lookup\", token, local, 0, NULL, result);\n\n    if (statvfs(local->system_mountpt, &stat_buf) != 0)\n    {\n        /* Log the failure case including errno and attempted mount point */\n        OS_FileSysStatVolume_LogProbe(\"statvfs_failed\", token, local, -1, &stat_buf, result);\n        return OS_ERROR;\n    }\n\n    /* Log success case details from statvfs before populating result */\n    OS_FileSysStatVolume_LogProbe(\"statvfs_success_before_fill\", token, local, 0, &stat_buf, result);\n\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    /* Log after populating result */\n    OS_FileSysStatVolume_LogProbe(\"exit_success\", token, local, 0, &stat_buf, result);\n\n    return OS_SUCCESS;\n}\n"
}