{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'local' is used only for reading fields (local->system_mountpt) and is not modified in OS_FileSysStatVolume_Impl, so it should be declared as pointing to a const-qualified type (e.g. const OS_filesys_internal_record_t *local). Assigning the non-const table element to a const pointer is allowed, so the current non-const declaration violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStatVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/323.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysStatVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStatVolume_Impl:\n```c\nint32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if (statvfs(local->system_mountpt, &stat_buf) != 0)\n    {\n        return OS_ERROR;\n    }\n\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysStatVolume_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <sys/statvfs.h>\n#include <stdint.h>\n\n/*\n * Probe helper: append a log line with formatted data to /tmp/logs/323.txt\n */\nstatic void OS_FileSysStatVolume_Log(const char *msg)\n{\n    FILE *fp = fopen(\"/tmp/logs/323.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"%s\\n\", msg);\n        fclose(fp);\n    }\n}\n\nint32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n\n    /* Probe: log entry and token/local resolution */\n    {\n        char buf[512];\n        /* Log token pointer and that we are attempting to fetch table element */\n        snprintf(buf, sizeof(buf), \"OS_FileSysStatVolume_Impl: entry token=%p\", (const void *)token);\n        OS_FileSysStatVolume_Log(buf);\n    }\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Probe: log local pointer and mountpoint (as available) */\n    {\n        char buf[1024];\n        const char *mp = \"(null)\";\n        if (local != NULL)\n        {\n            /* local->system_mountpt is read-only here for logging purposes */\n            mp = local->system_mountpt;\n        }\n        snprintf(buf, sizeof(buf), \"OS_FileSysStatVolume_Impl: local=%p, mountpt='%s'\", (void *)local, mp);\n        OS_FileSysStatVolume_Log(buf);\n    }\n\n    if (statvfs(local->system_mountpt, &stat_buf) != 0)\n    {\n        char buf[256];\n        snprintf(buf, sizeof(buf), \"OS_FileSysStatVolume_Impl: statvfs failed for '%s' errno=%d\", local->system_mountpt, errno);\n        OS_FileSysStatVolume_Log(buf);\n        return OS_ERROR;\n    }\n\n    /* Probe: log raw statvfs fields read */\n    {\n        char buf[256];\n        snprintf(buf, sizeof(buf), \"OS_FileSysStatVolume_Impl: statvfs f_bsize=%lu f_bfree=%lu f_blocks=%lu\",\n                 (unsigned long)stat_buf.f_bsize,\n                 (unsigned long)stat_buf.f_bfree,\n                 (unsigned long)stat_buf.f_blocks);\n        OS_FileSysStatVolume_Log(buf);\n    }\n\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    /* Probe: log resulting OS_statvfs_t values */\n    {\n        char buf[256];\n        snprintf(buf, sizeof(buf), \"OS_FileSysStatVolume_Impl: result block_size=%llu blocks_free=%llu total_blocks=%llu\",\n                 (unsigned long long)result->block_size,\n                 (unsigned long long)result->blocks_free,\n                 (unsigned long long)result->total_blocks);\n        OS_FileSysStatVolume_Log(buf);\n    }\n\n    return OS_SUCCESS;\n}\n"
}