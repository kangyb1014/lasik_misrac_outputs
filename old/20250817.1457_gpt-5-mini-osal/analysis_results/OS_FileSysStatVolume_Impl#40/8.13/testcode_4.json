{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'local' is declared as a non-const pointer (OS_filesys_internal_record_t *local) but is only used to read data (local->system_mountpt). Therefore it could and should be declared as a pointer to const (const OS_filesys_internal_record_t *local). The assignment local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token) returns a pointer into the file-system table and does not require modification, so the current non-const pointer violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStatVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/323.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysStatVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStatVolume_Impl:\n```c\nint32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if (statvfs(local->system_mountpt, &stat_buf) != 0)\n    {\n        return OS_ERROR;\n    }\n\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysStatVolume_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/statvfs.h>\n\n/*\n * Probe/log helper for reproducing the violation scenario.\n * Appends structured logs to /tmp/logs/323.txt so other agents can\n * observe the control flow and the relevant state.\n *\n * Note: types such as OS_object_token_t, OS_filesys_internal_record_t\n * and OS_statvfs_t are assumed to be defined elsewhere in the build.\n */\nstatic void os_filesys_log_state(const char *stage,\n                                 const OS_object_token_t *token,\n                                 OS_filesys_internal_record_t *local,\n                                 int stat_ret,\n                                 const struct statvfs *stat_buf,\n                                 const OS_statvfs_t *result)\n{\n    FILE *f = fopen(\"/tmp/logs/323.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    fprintf(f, \"==== %s ===\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \"token ptr: %p\\n\", (void *)token);\n    fprintf(f, \"local ptr: %p\\n\", (void *)local);\n\n    if (local != NULL)\n    {\n        const char *mp = local->system_mountpt ? local->system_mountpt : \"(null)\";\n        fprintf(f, \"local->system_mountpt: %s\\n\", mp);\n    }\n    else\n    {\n        fprintf(f, \"local is NULL\\n\");\n    }\n\n    fprintf(f, \"statvfs return: %d\\n\", stat_ret);\n\n    if (stat_buf != NULL)\n    {\n        /* cast to unsigned long long for portable printing */\n        fprintf(f, \"statvfs values: f_bsize=%llu, f_bfree=%llu, f_blocks=%llu\\n\",\n                (unsigned long long) stat_buf->f_bsize,\n                (unsigned long long) stat_buf->f_bfree,\n                (unsigned long long) stat_buf->f_blocks);\n    }\n\n    if (result != NULL)\n    {\n        fprintf(f, \"result (after assign) : block_size=%llu, blocks_free=%llu, total_blocks=%llu\\n\",\n                (unsigned long long) result->block_size,\n                (unsigned long long) result->blocks_free,\n                (unsigned long long) result->total_blocks);\n    }\n\n    fprintf(f, \"====================\\n\\n\");\n    fclose(f);\n}\n\nint32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n    int                           stat_ret;\n\n    /* Record the lookup result and mount point before calling statvfs */\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n    os_filesys_log_state(\"after_lookup\", token, local, -1, NULL, NULL);\n\n    /* Call the system statvfs and log its outcome */\n    stat_ret = statvfs(local->system_mountpt, &stat_buf);\n    os_filesys_log_state(\"after_statvfs\", token, local, stat_ret, &stat_buf, NULL);\n\n    if (stat_ret != 0)\n    {\n        /* Log failure path (no modification of original logic) */\n        os_filesys_log_state(\"stat_failed\", token, local, stat_ret, &stat_buf, NULL);\n        return OS_ERROR;\n    }\n\n    /* Preserve original assignments */\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    /* Log the final assigned result so agents can see that local was only read */\n    os_filesys_log_state(\"after_assign\", token, local, stat_ret, &stat_buf, result);\n\n    return OS_SUCCESS;\n}\n"
}