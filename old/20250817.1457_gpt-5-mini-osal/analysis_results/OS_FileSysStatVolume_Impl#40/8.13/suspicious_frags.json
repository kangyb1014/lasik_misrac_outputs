{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStatVolume_Impl:\n```c\nint32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if (statvfs(local->system_mountpt, &stat_buf) != 0)\n    {\n        return OS_ERROR;\n    }\n\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_FileSysStatVolume_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_filesys_internal_record_t OS_filesys_table[OS_MAX_FILE_SYSTEMS]\n...\ntypedef struct\n{\n    char device_name[OS_FS_DEV_NAME_LEN]; /**< The name of the underlying block device, if applicable */\n    char volume_name[OS_FS_VOL_NAME_LEN];\n    char system_mountpt[OS_MAX_LOCAL_PATH_LEN]; /**< The name/prefix where the contents are accessible in the host\n                                                   operating system */\n    char virtual_mountpt[OS_MAX_PATH_LEN]; /**< The name/prefix in the OSAL Virtual File system exposed to applications\n                                            */\n    char *            address;\n    size_t            blocksize;\n    osal_blockcount_t numblocks;\n    uint8             flags;\n    uint8             fstype;\n} OS_filesys_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\ntypedef struct\n{\n    size_t            block_size;   /**< Block size of underlying FS */\n    osal_blockcount_t total_blocks; /**< Total blocks in underlying FS */\n    osal_blockcount_t blocks_free;  /**< Available blocks in underlying FS */\n} OS_statvfs_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "OS_filesys_internal_record_t *local;",
    "char *            address;",
    "extern OS_filesys_internal_record_t OS_filesys_table[OS_MAX_FILE_SYSTEMS]",
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])",
    "local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);"
  ],
  "explanation": "The selected fragments are the places where non-const pointers (or addresses of non-const objects) are obtained or declared and could legitimately be const-qualified for this function\u2019s usage: the local pointer declared in OS_FileSysStatVolume_Impl, the assignment that obtains the table entry via the macro, the macro that yields a non-const pointer to a table element, the global table definition that is the target of that pointer, and the pointer member 'address' inside the record type. Other fragments do not need investigation for MISRA C 2023 Rule 8.13: the function parameter 'const OS_object_token_t *token' is already const-qualified; 'OS_ObjectIndexFromToken(const OS_object_token_t *token)' already takes a const pointer; the output parameter 'OS_statvfs_t *result' must be non-const because it is written; the local struct members declared as arrays (e.g. system_mountpt) are array objects (not pointer declarations) and their array types decaying to pointers at call sites is a separate consideration; use of statvfs(local->system_mountpt, &stat_buf) passes an array as a const char * parameter which is compatible with the API and does not itself indicate a missing const qualification in a pointer declaration elsewhere."
}