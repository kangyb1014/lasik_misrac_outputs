{
  "user_message": "An agent A claimed that the following OS_FileSysStatVolume_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileSysStatVolume_Impl.\n```c\nint32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if (statvfs(local->system_mountpt, &stat_buf) != 0)\n    {\n        return OS_ERROR;\n    }\n\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local variable 'local' is declared as a non-const pointer (OS_filesys_internal_record_t *local) but is only used to read data (local->system_mountpt). Therefore it could and should be declared as a pointer to const (const OS_filesys_internal_record_t *local). The assignment local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token) returns a pointer into the file-system table and does not require modification, so the current non-const pointer violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_filesys_log_state(const char *stage,\n                                 const OS_object_token_t *token,\n                                 OS_filesys_internal_record_t *local,\n                                 int stat_ret,\n                                 const struct statvfs *stat_buf,\n                                 const OS_statvfs_t *result)\n{\n    FILE *f = fopen(\"/tmp/logs/323.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    fprintf(f, \"==== %s ===\\n\", stage ? stage : \"(null)\");\n    fprintf(f, \"token ptr: %p\\n\", (void *)token);\n    fprintf(f, \"local ptr: %p\\n\", (void *)local);\n\n    if (local != NULL)\n    {\n        const char *mp = local->system_mountpt ? local->system_mountpt : \"(null)\";\n        fprintf(f, \"local->system_mountpt: %s\\n\", mp);\n    }\n    else\n    {\n        fprintf(f, \"local is NULL\\n\");\n    }\n\n    fprintf(f, \"statvfs return: %d\\n\", stat_ret);\n\n    if (stat_buf != NULL)\n    {\n        /* cast to unsigned long long for portable printing */\n        fprintf(f, \"statvfs values: f_bsize=%llu, f_bfree=%llu, f_blocks=%llu\\n\",\n                (unsigned long long) stat_buf->f_bsize,\n                (unsigned long long) stat_buf->f_bfree,\n                (unsigned long long) stat_buf->f_blocks);\n    }\n\n    if (result != NULL)\n    {\n        fprintf(f, \"result (after assign) : block_size=%llu, blocks_free=%llu, total_blocks=%llu\\n\",\n                (unsigned long long) result->block_size,\n                (unsigned long long) result->blocks_free,\n                (unsigned long long) result->total_blocks);\n    }\n\n    fprintf(f, \"====================\\n\\n\");\n    fclose(f);\n}\n\nint32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n    int                           stat_ret;\n\n    /* Record the lookup result and mount point before calling statvfs */\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n    os_filesys_log_state(\"after_lookup\", token, local, -1, NULL, NULL);\n\n    /* Call the system statvfs and log its outcome */\n    stat_ret = statvfs(local->system_mountpt, &stat_buf);\n    os_filesys_log_state(\"after_statvfs\", token, local, stat_ret, &stat_buf, NULL);\n\n    if (stat_ret != 0)\n    {\n        /* Log failure path (no modification of original logic) */\n        os_filesys_log_state(\"stat_failed\", token, local, stat_ret, &stat_buf, NULL);\n        return OS_ERROR;\n    }\n\n    /* Preserve original assignments */\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    /* Log the final assigned result so agents can see that local was only read */\n    os_filesys_log_state(\"after_assign\", token, local, stat_ret, &stat_buf, result);\n\n    return OS_SUCCESS;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_FileSysStatVolume_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. In this function the local pointer is only used to read from the record (local->system_mountpt) and the code never modifies the pointee. MISRA C 2023 Rule 8.13 recommends that pointers should point to const-qualified types whenever possible; therefore declaring\n\n    const OS_filesys_internal_record_t *local;\n\nwould be appropriate and remove the apparent violation. The only caveat would be if the macro/API or later code required a modifiable pointer (or the pointer were passed to an API that takes a non-const pointer for legitimate modification), but in the provided function none of that occurs, so the report is correct."
}