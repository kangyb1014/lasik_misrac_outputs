{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct member 'char * address;' is a pointer to a non-const char. Under MISRA C 2023 Rule 8.13, a pointer should be to a const-qualified type whenever possible. If this member is intended to point to immutable data (for example a static device/volume name or read-only memory), it should be declared as 'const char *address;'. As written it violates Rule 8.13 unless there is a documented need to modify the pointed-to data (i.e., a justification/exception).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSysStatVolume_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/323.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSysStatVolume_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStatVolume_Impl:\n```c\nint32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if (statvfs(local->system_mountpt, &stat_buf) != 0)\n    {\n        return OS_ERROR;\n    }\n\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileSysStatVolume_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe function that logs control flow and state to /tmp/logs/323.txt.\n * This function is non-intrusive and preserves original behavior.\n */\nstatic void os_fs_log_volume_probe(const OS_filesys_internal_record_t *local,\n                                   const struct statvfs *stat_buf,\n                                   const char *stage,\n                                   int err)\n{\n    FILE *f = fopen(\"/tmp/logs/323.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging cannot be performed, do not affect original logic */\n    }\n\n    fprintf(f, \"[OS_FileSysStatVolume_Impl] stage=%s\\n\", (stage != NULL) ? stage : \"(null)\");\n\n    if (local == NULL)\n    {\n        fprintf(f, \"  local = NULL\\n\");\n    }\n    else\n    {\n        /* Log pointer value of local and the mount point pointer and contents (if present) */\n        fprintf(f, \"  local ptr=%p\\n\", (const void *)local);\n        fprintf(f, \"  local->system_mountpt ptr=%p\\n\",\n                (const void *)local->system_mountpt);\n\n        if (local->system_mountpt != NULL)\n        {\n            /* Print up to a reasonable length to avoid overly large logs */\n            fprintf(f, \"  local->system_mountpt value=\\\"\");\n\n            /* Print safely: limit to first 512 chars */\n            {\n                const char *s = local->system_mountpt;\n                size_t i;\n                for (i = 0; (s[i] != '\\0') && (i < 512); ++i)\n                {\n                    /* Print character-by-character to avoid buffer assumptions */\n                    fputc((unsigned char)s[i], f);\n                }\n                if (s[i] != '\\0')\n                {\n                    fprintf(f, \"... (truncated)\");\n                }\n            }\n\n            fprintf(f, \"\\\"\\n\");\n        }\n        else\n        {\n            fprintf(f, \"  local->system_mountpt value=(null)\\n\");\n        }\n    }\n\n    if (stat_buf != NULL)\n    {\n        /* Cast to unsigned long long for portable printing */\n        fprintf(f, \"  statvfs: f_bsize=%llu, f_bfree=%llu, f_blocks=%llu\\n\",\n                (unsigned long long)stat_buf->f_bsize,\n                (unsigned long long)stat_buf->f_bfree,\n                (unsigned long long)stat_buf->f_blocks);\n    }\n\n    if (err != 0)\n    {\n        /* Log errno and human-readable message if available */\n        int myerrno = err; /* capture local copy */\n        fprintf(f, \"  errno=%d\\n\", myerrno);\n        /* strerror may return NULL in extreme cases; guard it */\n        {\n            const char *es = strerror(myerrno);\n            fprintf(f, \"  strerror=%s\\n\", (es != NULL) ? es : \"(null)\");\n        }\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Log entry and the state of the local record before calling statvfs */\n    os_fs_log_volume_probe(local, NULL, \"before_statvfs\", 0);\n\n    if (statvfs(local->system_mountpt, &stat_buf) != 0)\n    {\n        /* Log failure and errno for reproduction/evidence */\n        os_fs_log_volume_probe(local, NULL, \"statvfs_failed\", errno);\n        return OS_ERROR;\n    }\n\n    /* Log results from statvfs for evidence */\n    os_fs_log_volume_probe(local, &stat_buf, \"statvfs_succeeded\", 0);\n\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    /* Log final result values written to the result structure */\n    os_fs_log_volume_probe(local, &stat_buf, \"before_return_success\", 0);\n\n    return OS_SUCCESS;\n}\n"
}