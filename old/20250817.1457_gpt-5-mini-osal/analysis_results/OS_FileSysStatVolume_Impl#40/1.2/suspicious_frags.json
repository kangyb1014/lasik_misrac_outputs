{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_FileSysStatVolume_Impl:\n```c\nint32 OS_FileSysStatVolume_Impl(const OS_object_token_t *token, OS_statvfs_t *result)\n{\n    OS_filesys_internal_record_t *local;\n    struct statvfs                stat_buf;\n\n    local = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if (statvfs(local->system_mountpt, &stat_buf) != 0)\n    {\n        return OS_ERROR;\n    }\n\n    result->block_size   = OSAL_SIZE_C(stat_buf.f_bsize);\n    result->blocks_free  = OSAL_BLOCKCOUNT_C(stat_buf.f_bfree);\n    result->total_blocks = OSAL_BLOCKCOUNT_C(stat_buf.f_blocks);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_FileSysStatVolume_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_filesys_internal_record_t OS_filesys_table[OS_MAX_FILE_SYSTEMS]\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    char device_name[OS_FS_DEV_NAME_LEN]; /**< The name of the underlying block device, if applicable */\n    char volume_name[OS_FS_VOL_NAME_LEN];\n    char system_mountpt[OS_MAX_LOCAL_PATH_LEN]; /**< The name/prefix where the contents are accessible in the host\n                                                   operating system */\n    char virtual_mountpt[OS_MAX_PATH_LEN]; /**< The name/prefix in the OSAL Virtual File system exposed to applications\n                                            */\n    char *            address;\n    size_t            blocksize;\n    osal_blockcount_t numblocks;\n    uint8             flags;\n    uint8             fstype;\n} OS_filesys_internal_record_t\n...\n#define OSAL_SIZE_C(X) ((size_t)(X))\n...\n#define OSAL_BLOCKCOUNT_C(X) ((osal_blockcount_t)(X))\n...\ntypedef struct\n{\n    size_t            block_size;   /**< Block size of underlying FS */\n    osal_blockcount_t total_blocks; /**< Total blocks in underlying FS */\n    osal_blockcount_t blocks_free;  /**< Available blocks in underlying FS */\n} OS_statvfs_t\n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERROR (-1)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler language extensions are used in the provided code fragment. The code uses standard C constructs and plain macros only:\n- No use of GCC/clang-specific keywords or builtins (no __attribute__, __builtin_*, __typeof__, __extension__, __asm__, statement-expressions, nested functions, or other vendor intrinsics).\n- The statvfs call and struct statvfs are POSIX library/API usage, which are not language/compiler extensions addressed by MISRA C Rule 1.2 (the rule targets compiler language extensions, not platform libraries).\n- The macros shown (OS_OBJECT_TABLE_GET, OSAL_SIZE_C, OSAL_BLOCKCOUNT_C) expand to standard C expressions and casts; there are no non-standard language constructs in their expansions.\n- The typedefs (int32, osal_blockcount_t, uint8, OS_object_token_t, etc.) are user-defined types, not compiler extensions.\n- The use of taking the address of the macro parameter (OS_OBJECT_TABLE_GET) is standard C behaviour; the macro invocation OS_OBJECT_TABLE_GET(OS_filesys_table, *token) expands to &OS_filesys_table[OS_ObjectIndexFromToken(&( *token ))], which is equivalent to using the original token pointer.\n\nGiven the absence of any vendor-specific language constructs, there are no code fragments requiring further investigation under MISRA C 2023 Rule 1.2."
}