{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe static inline helper OS_ObjectIndexFromToken simply returns token->obj_idx but is not referenced anywhere in the supplied project snippets. If this function is never called in the project, its presence in the source is dead code \u2014 its removal would not affect program behavior. Therefore the project contains dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBasePthreadEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/570.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBasePthreadEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBasePthreadEntry:\n```c\nstatic void *OS_TimeBasePthreadEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n    OS_TimeBase_CallbackThread(local_arg.id);\n\n    return NULL;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBasePthreadEntry code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe logging helper: append text lines to /tmp/logs/570.txt. */\nstatic void OS_ProbeLog(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/570.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only; preserve original behavior if fopen fails */\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic void *OS_TimeBasePthreadEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    OS_ProbeLog(\"OS_TimeBasePthreadEntry: entry (arg=%p)\", arg);\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n\n    /* Log union state after the assignment. We cast id to uintptr_t for portable printing. */\n    OS_ProbeLog(\"OS_TimeBasePthreadEntry: after assignment local_arg.opaque_arg=%p, local_arg.id=%\" PRIuPTR,\n                (void *)local_arg.opaque_arg, (uintptr_t)local_arg.id);\n\n    OS_ProbeLog(\"OS_TimeBasePthreadEntry: calling OS_TimeBase_CallbackThread(id=%\" PRIuPTR \")\",\n                (uintptr_t)local_arg.id);\n\n    OS_TimeBase_CallbackThread(local_arg.id);\n\n    OS_ProbeLog(\"OS_TimeBasePthreadEntry: returned from OS_TimeBase_CallbackThread(id=%\" PRIuPTR \")\",\n                (uintptr_t)local_arg.id);\n\n    OS_ProbeLog(\"OS_TimeBasePthreadEntry: exit (return NULL)\");\n\n    return NULL;\n}\n"
}