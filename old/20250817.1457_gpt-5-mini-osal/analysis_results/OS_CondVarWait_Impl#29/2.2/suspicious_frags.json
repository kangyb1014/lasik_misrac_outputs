{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CondVarWait_Impl:\n```c\nint32 OS_CondVarWait_Impl(const OS_object_token_t *token)\n{\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    /*\n     * note that because pthread_cond_wait is a cancellation point, this needs to\n     * employ the same protection that is in the binsem module.  In the event that\n     * the thread is canceled inside pthread_cond_wait, the mutex will be re-acquired\n     * before the cancellation occurs, leaving the mutex in a locked state.\n     */\n    pthread_cleanup_push(OS_Posix_CondVarReleaseMutex, &impl->mut);\n    status = pthread_cond_wait(&impl->cv, &impl->mut);\n    pthread_cleanup_pop(false);\n\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CondVarWait_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_condvar_internal_record_t OS_impl_condvar_table[OS_MAX_CONDVARS]\n...\ntypedef struct\n{\n    pthread_mutex_t mut;\n    pthread_cond_t  cv;\n} OS_impl_condvar_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nstatic void OS_Posix_CondVarReleaseMutex(void *mut)\n{\n    pthread_mutex_unlock(mut);\n}\n...\n#define OS_ERROR (-1)\n...\n#define OS_SUCCESS (0)\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);",
    "static void OS_Posix_CondVarReleaseMutex(void *mut)\n{\n    pthread_mutex_unlock(mut);\n}",
    "OS_impl_condvar_internal_record_t OS_impl_condvar_table[OS_MAX_CONDVARS]",
    "pthread_cleanup_push(OS_Posix_CondVarReleaseMutex, &impl->mut);",
    "static inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}",
    "pthread_cleanup_pop(false);",
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])"
  ],
  "explanation": "The remaining code fragments (local variable declarations, the call to pthread_cond_wait and the subsequent status check, the struct typedef, and the simple return of OS_SUCCESS/OS_ERROR) are straightforward, executed in the normal control flow, and have observable effects: the condition wait call and its return-value check directly affect program behavior, the struct and array definitions provide the storage referenced by the function, and the token-to-index conversion macro/inline are used to index that storage. Therefore these other parts do not appear as candidates for dead code and need not be investigated further for MISRA C Rule 2.2. The listed fragments above are included because their use of pthread cleanup handlers, the push/pop pairing, the cleanup function, and the macro/index machinery could hide operations that are never executed in practice (or are registered but never invoked) or otherwise constitute executed operations whose removal might not change observed behavior; they should be investigated for possible dead-code concerns."
}