{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe standalone expression-statement 'OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);' expands to an address calculation (&OS_impl_condvar_table[OS_ObjectIndexFromToken(token)]) that has no side-effects and its result is discarded. Removing that statement would not change program behaviour, so it is executed code whose removal would have no effect \u2014 i.e. dead code. This violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarWait_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/234.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarWait_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarWait_Impl:\n```c\nint32 OS_CondVarWait_Impl(const OS_object_token_t *token)\n{\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    /*\n     * note that because pthread_cond_wait is a cancellation point, this needs to\n     * employ the same protection that is in the binsem module.  In the event that\n     * the thread is canceled inside pthread_cond_wait, the mutex will be re-acquired\n     * before the cancellation occurs, leaving the mutex in a locked state.\n     */\n    pthread_cleanup_push(OS_Posix_CondVarReleaseMutex, &impl->mut);\n    status = pthread_cond_wait(&impl->cv, &impl->mut);\n    pthread_cleanup_pop(false);\n\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarWait_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stdarg.h>\n#include <time.h>\n\n/*\n * Probe helper: append a log line to /tmp/logs/234.txt. This helper is designed\n * to be non-intrusive: it only opens the file in append mode, writes a single\n * formatted line, then closes the file. It avoids allocating memory or\n * introducing global state so the original logic is preserved.\n */\nstatic void probe_log_state(const void *token_ptr, uintptr_t token_val, const void *impl_ptr,\n                            const void *mut_ptr, const void *cv_ptr, const char *note, int status)\n{\n    FILE *f = fopen(\"/tmp/logs/234.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_WIN32)\n    /* localtime_s on Windows */\n    localtime_s(&tm_buf, &t);\n#else\n    localtime_r(&t, &tm_buf);\n#endif\n\n    char timestr[64];\n    if (strftime(timestr, sizeof(timestr), \"%Y-%m-%dT%H:%M:%S\", &tm_buf) == 0)\n    {\n        timestr[0] = '\\0';\n    }\n\n    /* status -1 means not known/yet */\n    if (status >= 0)\n    {\n        fprintf(f, \"%s [probe] %s token_ptr=%p token_val=0x%\" PRIxPTR \" impl_ptr=%p mut_ptr=%p cv_ptr=%p status=%d\\n\",\n                timestr, note, token_ptr, token_val, impl_ptr, mut_ptr, cv_ptr, status);\n    }\n    else\n    {\n        fprintf(f, \"%s [probe] %s token_ptr=%p token_val=0x%\" PRIxPTR \" impl_ptr=%p mut_ptr=%p cv_ptr=%p\\n\",\n                timestr, note, token_ptr, token_val, impl_ptr, mut_ptr, cv_ptr);\n    }\n\n    fclose(f);\n}\n\nint32 OS_CondVarWait_Impl(const OS_object_token_t *token)\n{\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    /* Log entry and token information before any operations. Use uintptr_t\n     * to safely print the token value irrespective of its underlying type.\n     */\n    probe_log_state((const void *)token, (uintptr_t)(*token), NULL, NULL, NULL, \"entering OS_CondVarWait_Impl\", -1);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    /* Log the result of the table lookup. This captures the computed address\n     * (the value returned by OS_OBJECT_TABLE_GET). If a standalone\n     * expression-statement of OS_OBJECT_TABLE_GET had existed instead of this\n     * assignment, this log would help demonstrate that the address computation\n     * is discarded by showing what the value would have been.\n     */\n    probe_log_state((const void *)token, (uintptr_t)(*token), (const void *)impl,\n                    (const void *)&impl->mut, (const void *)&impl->cv,\n                    \"after OS_OBJECT_TABLE_GET\", -1);\n\n    /*\n     * note that because pthread_cond_wait is a cancellation point, this needs to\n     * employ the same protection that is in the binsem module.  In the event that\n     * the thread is canceled inside pthread_cond_wait, the mutex will be re-acquired\n     * before the cancellation occurs, leaving the mutex in a locked state.\n     */\n    pthread_cleanup_push(OS_Posix_CondVarReleaseMutex, &impl->mut);\n\n    /* Log just before the blocking wait so the timing and control flow are captured. */\n    probe_log_state((const void *)token, (uintptr_t)(*token), (const void *)impl,\n                    (const void *)&impl->mut, (const void *)&impl->cv,\n                    \"before pthread_cond_wait\", -1);\n\n    status = pthread_cond_wait(&impl->cv, &impl->mut);\n\n    /* Log immediately after the wait returns to capture the status and current state. */\n    probe_log_state((const void *)token, (uintptr_t)(*token), (const void *)impl,\n                    (const void *)&impl->mut, (const void *)&impl->cv,\n                    \"after pthread_cond_wait\", status);\n\n    pthread_cleanup_pop(false);\n\n    if (status != 0)\n    {\n        probe_log_state((const void *)token, (uintptr_t)(*token), (const void *)impl,\n                        (const void *)&impl->mut, (const void *)&impl->cv,\n                        \"exiting OS_CondVarWait_Impl with error\", status);\n        return OS_ERROR;\n    }\n\n    probe_log_state((const void *)token, (uintptr_t)(*token), (const void *)impl,\n                    (const void *)&impl->mut, (const void *)&impl->cv,\n                    \"exiting OS_CondVarWait_Impl success\", 0);\n\n    return OS_SUCCESS;\n}\n"
}