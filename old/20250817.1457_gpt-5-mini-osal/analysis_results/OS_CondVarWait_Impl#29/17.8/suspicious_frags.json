{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CondVarWait_Impl:\n```c\nint32 OS_CondVarWait_Impl(const OS_object_token_t *token)\n{\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    /*\n     * note that because pthread_cond_wait is a cancellation point, this needs to\n     * employ the same protection that is in the binsem module.  In the event that\n     * the thread is canceled inside pthread_cond_wait, the mutex will be re-acquired\n     * before the cancellation occurs, leaving the mutex in a locked state.\n     */\n    pthread_cleanup_push(OS_Posix_CondVarReleaseMutex, &impl->mut);\n    status = pthread_cond_wait(&impl->cv, &impl->mut);\n    pthread_cleanup_pop(false);\n\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CondVarWait_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nOS_impl_condvar_internal_record_t OS_impl_condvar_table[OS_MAX_CONDVARS]\n...\ntypedef struct\n{\n    pthread_mutex_t mut;\n    pthread_cond_t  cv;\n} OS_impl_condvar_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragment modifies the function parameter token (the pointer itself). The macro invocation OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token) only dereferences token to obtain the token object for index extraction; the macro expands to use &(*token) which is equivalent to token and is passed as a const pointer to OS_ObjectIndexFromToken (which only reads token->obj_idx). There are no assignments to token, no pointer arithmetic on token, and no operations that change the pointer value. The rest of the function operates on impl (a table entry pointer returned by the macro) and on its members (mutex/condvar); modifying the object referred to by token would be permitted by the rule but no such modification occurs here either. Therefore no fragments require investigation for Rule 17.8."
}