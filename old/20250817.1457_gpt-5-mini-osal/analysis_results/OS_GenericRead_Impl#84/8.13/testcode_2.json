{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is declared as a non-const pointer (OS_impl_file_internal_record_t *impl) but in this function it is only used for read-only access (impl->selectable and impl->fd are only read). According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible. Therefore 'impl' should be declared as const OS_impl_file_internal_record_t *impl (or the macro result assigned to a const-qualified pointer).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericRead_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/675.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GenericRead_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GenericRead_Impl:\n```c\nint32 OS_GenericRead_Impl(const OS_object_token_t *token, void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_READABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_READABLE) != 0)\n        {\n            os_result = read(impl->fd, buffer, nbytes);\n            if (os_result < 0)\n            {\n                OS_DEBUG(\"read: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GenericRead_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n#include <unistd.h>\n\n/* Probe logging helper - appends human-readable traces to /tmp/logs/675.txt */\nstatic void os_genericread_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/675.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_GenericRead_Impl(const OS_object_token_t *token, void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log initial state: token pointer, buffer, sizes, and retrieved impl pointer and fields */\n    if (impl != NULL)\n    {\n        os_genericread_log(\"OS_GenericRead_Impl ENTRY: token=%p, buffer=%p, nbytes=%zu, timeout=%d, impl=%p, impl->selectable=%d, impl->fd=%d\",\n                           (const void *)token, buffer, nbytes, (int)timeout, (void *)impl,\n                           (int)impl->selectable, (int)impl->fd);\n    }\n    else\n    {\n        os_genericread_log(\"OS_GenericRead_Impl ENTRY: token=%p, buffer=%p, nbytes=%zu, timeout=%d, impl=NULL\",\n                           (const void *)token, buffer, nbytes, (int)timeout);\n    }\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_READABLE;\n\n        /* Log that we are about to check/select */\n        os_genericread_log(\"OS_GenericRead_Impl: nbytes>0, initial operation=0x%08x\", (unsigned)operation);\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            os_genericread_log(\"OS_GenericRead_Impl: impl->selectable is TRUE, calling OS_SelectSingle_Impl\");\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n            os_genericread_log(\"OS_GenericRead_Impl: OS_SelectSingle_Impl returned %d, operation=0x%08x\",\n                               (int)return_code, (unsigned)operation);\n        }\n        else\n        {\n            os_genericread_log(\"OS_GenericRead_Impl: impl->selectable is FALSE, skipping select()\");\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_READABLE) != 0)\n        {\n            os_genericread_log(\"OS_GenericRead_Impl: Proceeding to read from fd=%d (buffer=%p, nbytes=%zu)\",\n                               (int)impl->fd, buffer, nbytes);\n\n            os_result = read(impl->fd, buffer, nbytes);\n            if (os_result < 0)\n            {\n                /* Capture errno and error message for diagnostics */\n                int err = errno;\n                os_genericread_log(\"OS_GenericRead_Impl: read() failed fd=%d errno=%d (%s)\",\n                                   (int)impl->fd, err, strerror(err));\n\n                OS_DEBUG(\"read: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                os_genericread_log(\"OS_GenericRead_Impl: read() succeeded fd=%d bytes_read=%zd\", (int)impl->fd, os_result);\n                return_code = (int32)os_result;\n            }\n        }\n        else\n        {\n            os_genericread_log(\"OS_GenericRead_Impl: Not readable or select failed, return_code=%d, operation=0x%08x\",\n                               (int)return_code, (unsigned)operation);\n        }\n    }\n    else\n    {\n        os_genericread_log(\"OS_GenericRead_Impl: nbytes==0, nothing to read\");\n    }\n\n    os_genericread_log(\"OS_GenericRead_Impl EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}