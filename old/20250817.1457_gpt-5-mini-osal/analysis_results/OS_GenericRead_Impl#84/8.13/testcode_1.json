{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'impl' is declared as OS_impl_file_internal_record_t *impl but is only used for read-only access (checking impl->selectable and reading impl->fd). Per MISRA C 2023 Rule 8.13, such a pointer should be const-qualified when possible (e.g. const OS_impl_file_internal_record_t *impl). Therefore the use of 'if (impl->selectable)' reflects that 'impl' is not const-qualified although it could be, constituting a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericRead_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/675.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GenericRead_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GenericRead_Impl:\n```c\nint32 OS_GenericRead_Impl(const OS_object_token_t *token, void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_READABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_READABLE) != 0)\n        {\n            os_result = read(impl->fd, buffer, nbytes);\n            if (os_result < 0)\n            {\n                OS_DEBUG(\"read: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GenericRead_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/675.txt */\nstatic void OS_GenericRead_Impl_log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    /* Ensure directory exists (ignore errors if it already exists) */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/675.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_GenericRead_Impl(const OS_object_token_t *token, void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log entry and key state: token pointer, impl pointer, nbytes, timeout */\n    OS_GenericRead_Impl_log(\"ENTER OS_GenericRead_Impl: token=%p, impl=%p, nbytes=%zu, timeout=%d\\n\",\n                            (const void *)token, (const void *)impl, nbytes, timeout);\n\n    if (impl != NULL)\n    {\n        /* Log contents of impl that are relevant to read/select decisions */\n        OS_GenericRead_Impl_log(\"impl->selectable=%d, impl->fd=%d\\n\", (int)impl->selectable, (int)impl->fd);\n    }\n    else\n    {\n        OS_GenericRead_Impl_log(\"impl is NULL\\n\");\n    }\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_READABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            OS_GenericRead_Impl_log(\"impl->selectable is true -> calling OS_SelectSingle_Impl(token, &operation, timeout)\\n\");\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n            OS_GenericRead_Impl_log(\"OS_SelectSingle_Impl returned %d, operation=0x%08x\\n\", return_code, (unsigned)operation);\n        }\n        else\n        {\n            OS_GenericRead_Impl_log(\"impl->selectable is false -> skipping select\\n\");\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_READABLE) != 0)\n        {\n            OS_GenericRead_Impl_log(\"Ready to read: calling read(fd=%d, nbytes=%zu)\\n\", (int)impl->fd, nbytes);\n            os_result = read(impl->fd, buffer, nbytes);\n            OS_GenericRead_Impl_log(\"read returned %zd, errno=%d (%s)\\n\", (ssize_t)os_result, errno, strerror(errno));\n\n            if (os_result < 0)\n            {\n                OS_DEBUG(\"read: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n                OS_GenericRead_Impl_log(\"Setting return_code = OS_ERROR (%d) due to read error\\n\", return_code);\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n                OS_GenericRead_Impl_log(\"Read success: bytes_read=%d -> return_code=%d\\n\", (int)return_code, return_code);\n            }\n        }\n        else\n        {\n            OS_GenericRead_Impl_log(\"Not readable or select failed: return_code=%d, operation=0x%08x\\n\", return_code, (unsigned)operation);\n        }\n    }\n    else\n    {\n        OS_GenericRead_Impl_log(\"nbytes is 0 or negative (%zu) -> nothing to read\\n\", nbytes);\n    }\n\n    OS_GenericRead_Impl_log(\"EXIT OS_GenericRead_Impl: return_code=%d\\n\", return_code);\n\n    return return_code;\n}\n"
}