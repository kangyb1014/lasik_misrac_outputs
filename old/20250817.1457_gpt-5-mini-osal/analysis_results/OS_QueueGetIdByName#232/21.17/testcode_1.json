{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_QueueGetIdByName only checks that queue_name is non-NULL (OS_CHECK_POINTER) and then passes it to OS_ObjectIdFindByName. That callee uses LENGTHCHECK/ARGCHECK which likely invoke string functions (e.g. strlen/strcmp). If the caller supplies a non-NULL pointer that is not a NUL-terminated string or points to a buffer shorter than the expected maximum, those string functions can read past the object bounds. Therefore the call can lead to out-of-bounds access by string.h routines.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1863.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGetIdByName:\n```c\nint32 OS_QueueGetIdByName(osal_id_t *queue_id, const char *queue_name)\n{\n    int32 return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_POINTER(queue_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, queue_name, queue_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging helper: writes control-flow and state info to /tmp/logs/1863.txt.\n * It intentionally does NOT dereference queue_name to avoid introducing new out-of-bounds reads.\n */\nstatic void os_log_probe(const char *phase, const void *queue_id_ptr, const void *queue_name_ptr, int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1863.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log: phase, pointer values, and return code (if meaningful). Do not print queue_name as a string. */\n    fprintf(f, \"%s: queue_id=%p queue_name_ptr=%p return_code=%d\\n\",\n            phase, queue_id_ptr, queue_name_ptr, (int)return_code);\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_QueueGetIdByName(osal_id_t *queue_id, const char *queue_name)\n{\n    int32 return_code;\n\n    /* Entry probe */\n    os_log_probe(\"ENTRY\", (const void *)queue_id, (const void *)queue_name, 0);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_POINTER(queue_name);\n\n    /* After parameter checks probe */\n    os_log_probe(\"AFTER_CHECKS\", (const void *)queue_id, (const void *)queue_name, 0);\n\n    /* About to call the resolver that may use string.h routines */\n    os_log_probe(\"BEFORE_CALL\", (const void *)queue_id, (const void *)queue_name, 0);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, queue_name, queue_id);\n\n    /* After call probe: capture the return code from the callee */\n    os_log_probe(\"AFTER_CALL\", (const void *)queue_id, (const void *)queue_name, (int32_t)return_code);\n\n    /* Final return probe */\n    os_log_probe(\"RETURN\", (const void *)queue_id, (const void *)queue_name, (int32_t)return_code);\n\n    return return_code;\n}\n"
}