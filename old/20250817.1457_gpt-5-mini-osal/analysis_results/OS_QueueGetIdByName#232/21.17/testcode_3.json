{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe LENGTHCHECK(name, OS_MAX_API_NAME, ...) macro likely computes the string length (e.g. via strlen) to compare against OS_MAX_API_NAME. Although ARGCHECK(name, ...) ensures name is not NULL, it does not guarantee the pointed-to character array is NUL-terminated within the allowed bounds. If LENGTHCHECK uses strlen (or any other <string.h> function that scans until a NUL), and the caller provides a non-terminated buffer or a pointer whose valid object bound is shorter than the scanned area, the call can read past the object's bounds. This would violate MISRA C:2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1863.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGetIdByName:\n```c\nint32 OS_QueueGetIdByName(osal_id_t *queue_id, const char *queue_name)\n{\n    int32 return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_POINTER(queue_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, queue_name, queue_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logging helpers. These functions write control-flow and state\n * information to /tmp/logs/1863.txt so other agents can reproduce the\n * scenario and inspect the pointers and return values.\n *\n * Note: The original logic of OS_QueueGetIdByName is preserved. The\n * OS_CHECK_POINTER macros and OS_ObjectIdFindByName call are left in\n * place so behavior remains identical when integrated into the OS build.\n */\nstatic void OS_QueueGetIdByName_LogEntry(const osal_id_t *queue_id, const char *queue_name)\n{\n    FILE *f = fopen(\"/tmp/logs/1863.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_QueueGetIdByName ENTRY: queue_id=%p queue_name=%p\\n\",\n                (const void *)queue_id, (const void *)queue_name);\n        fclose(f);\n    }\n}\n\nstatic void OS_QueueGetIdByName_LogAfterChecks(const osal_id_t *queue_id, const char *queue_name)\n{\n    FILE *f = fopen(\"/tmp/logs/1863.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_QueueGetIdByName AFTER_CHECKS: queue_id=%p queue_name=%p\\n\",\n                (const void *)queue_id, (const void *)queue_name);\n        fclose(f);\n    }\n}\n\nstatic void OS_QueueGetIdByName_LogExit(const osal_id_t *queue_id, const char *queue_name, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1863.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Cast return_code to long for printing portability */\n        fprintf(f, \"OS_QueueGetIdByName EXIT: return_code=%ld queue_id=%p queue_name=%p\\n\",\n                (long)return_code, (const void *)queue_id, (const void *)queue_name);\n        fclose(f);\n    }\n}\n\nint32 OS_QueueGetIdByName(osal_id_t *queue_id, const char *queue_name)\n{\n    int32 return_code;\n\n    /* Log entry state (before the existing pointer checks) so callers\n     * that pass non-terminated buffers or invalid pointers are recorded.\n     * This preserves the original control flow and does not change behavior. */\n    OS_QueueGetIdByName_LogEntry((const osal_id_t *)queue_id, queue_name);\n\n    /* Check Parameters (preserve original checks/macros) */\n    OS_CHECK_POINTER(queue_id);\n    OS_CHECK_POINTER(queue_name);\n\n    /* Log state after checks passed (this log will not occur if the\n     * OS_CHECK_POINTER macro causes an early return as in the original). */\n    OS_QueueGetIdByName_LogAfterChecks((const osal_id_t *)queue_id, queue_name);\n\n    /* Original call preserved */\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, queue_name, queue_id);\n\n    /* Log result and final state */\n    OS_QueueGetIdByName_LogExit((const osal_id_t *)queue_id, queue_name, return_code);\n\n    return return_code;\n}\n"
}