{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_TaskDelete_Impl the local variable is declared as a mutable pointer: OS_impl_task_internal_record_t *impl; it is set from OS_OBJECT_TABLE_GET(OS_impl_task_table, *token) and only read (impl->id) \u2014 no modification of the pointed-at record occurs. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible (e.g. const OS_impl_task_internal_record_t *impl). Therefore this use of a non-const pointer when a const-qualified pointer would suffice is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2035.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskDelete:\n```c\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        delete_hook();\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Probe/logging helpers - keep them static to limit scope */\nstatic void os_taskdelete_log_write(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/2035.txt\", \"a\");\n    if (f != NULL)\n    {\n        (void)fputs(msg, f);\n        (void)fputc('\\n', f);\n        (void)fclose(f);\n    }\n}\n\nstatic void os_taskdelete_logf(const char *fmt, ...)\n{\n    char buf[256];\n    va_list ap;\n    va_start(ap, fmt);\n    /* Ensure no overflow; return value ignored intentionally */\n    (void)vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n    os_taskdelete_log_write(buf);\n}\n\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    /* Log entry and input id for reproducibility */\n    os_taskdelete_logf(\"OS_TaskDelete: entry task_id=%lu\", (unsigned long)task_id);\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n\n    os_taskdelete_logf(\"OS_TaskDelete: OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log the retrieved task pointer and the delete hook pointer value */\n        os_taskdelete_logf(\"OS_TaskDelete: task pointer=%p\", (void *)task);\n        os_taskdelete_logf(\"OS_TaskDelete: task->delete_hook_pointer=%p\", (void *)task->delete_hook_pointer);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        /* Log before calling implementation that reportedly contains the non-const pointer */\n        os_taskdelete_logf(\"OS_TaskDelete: calling OS_TaskDelete_Impl with token (implementation may read-only access token->impl)\");\n        return_code = OS_TaskDelete_Impl(&token);\n        os_taskdelete_logf(\"OS_TaskDelete: OS_TaskDelete_Impl returned %ld\", (long)return_code);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        os_taskdelete_logf(\"OS_TaskDelete: OS_ObjectIdFinalizeDelete returned %ld\", (long)return_code);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        os_taskdelete_logf(\"OS_TaskDelete: calling delete_hook at %p\", (void *)delete_hook);\n        delete_hook();\n        os_taskdelete_logf(\"OS_TaskDelete: delete_hook returned\");\n    }\n\n    os_taskdelete_logf(\"OS_TaskDelete: exit return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}