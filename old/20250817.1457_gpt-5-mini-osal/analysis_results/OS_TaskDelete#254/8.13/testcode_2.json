{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'task' is declared as OS_task_internal_record_t *task but is only used to read fields (delete_hook_pointer). The assignment task = OS_OBJECT_TABLE_GET(OS_task_table, token) yields a non-const pointer to the table element even though the function does not modify the record. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible (e.g. const OS_task_internal_record_t *task), or the table access macro/definition should allow obtaining a const-qualified pointer.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2035.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskDelete:\n```c\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        delete_hook();\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Minimal types and stubs to allow compilation of the test unit.  */\ntypedef int32_t int32;\ntypedef uint32_t osal_id_t;\ntypedef void (*osal_task_entry)(void);\n\ntypedef struct\n{\n    int id;\n} OS_object_token_t;\n\ntypedef struct\n{\n    osal_task_entry delete_hook_pointer;\n} OS_task_internal_record_t;\n\n/* Simple table used by the stub OS_OBJECT_TABLE_GET function */\nstatic OS_task_internal_record_t OS_task_table[16] = { {0} };\n\n/* Constants used by the stubs */\nconst int OS_LOCK_MODE_EXCLUSIVE = 1;\nconst int LOCAL_OBJID_TYPE = 2;\nconst int OS_SUCCESS = 0;\n\n/* Stubs for external functions used by OS_TaskDelete.  These are simple\n * implementations so the file is self-contained and can be compiled. */\nint32 OS_ObjectIdGetById(int lock_mode, int objtype, osal_id_t id, OS_object_token_t *token)\n{\n    (void)lock_mode;\n    (void)objtype;\n    if (token == NULL) return -1;\n    token->id = (int)id;\n    return OS_SUCCESS;\n}\n\nOS_task_internal_record_t *OS_OBJECT_TABLE_GET(OS_task_internal_record_t *table, OS_object_token_t token)\n{\n    /* Simple bounds check for the stub table */\n    if (token.id < 0 || (size_t)token.id >= (sizeof(OS_task_table) / sizeof(OS_task_table[0])))\n    {\n        return NULL;\n    }\n    return &table[token.id];\n}\n\nint32 OS_TaskDelete_Impl(OS_object_token_t *token)\n{\n    (void)token;\n    return OS_SUCCESS;\n}\n\nint32 OS_ObjectIdFinalizeDelete(int32 return_code, OS_object_token_t *token)\n{\n    (void)token;\n    return return_code;\n}\n\n/* Logging helper used to emit probe information to the specified log file\n * The function appends lines to \"/tmp/logs/2035.txt\".  */\nstatic void OS_TaskDelete_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2035.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If the log cannot be opened, silently continue to avoid altering\n         * the behavior of the original routine. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\n/* Modified OS_TaskDelete with inserted probes. The original logic is\n * preserved; probes only observe state and control flow and do not\n * change behavior. */\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n\n    OS_TaskDelete_Log(\"OS_TaskDelete: entry, task_id=%u\", (unsigned)task_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    OS_TaskDelete_Log(\"OS_TaskDelete: OS_ObjectIdGetById returned %d, token.id=%d\", (int)return_code, token.id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n        OS_TaskDelete_Log(\"OS_TaskDelete: obtained task pointer=%p from table index=%d\", (void *)task, token.id);\n\n        if (task == NULL)\n        {\n            OS_TaskDelete_Log(\"OS_TaskDelete: task pointer is NULL for token.id=%d\", token.id);\n        }\n        else\n        {\n            /* Save the delete hook, as we do not want to call it while locked */\n            delete_hook = task->delete_hook_pointer;\n            OS_TaskDelete_Log(\"OS_TaskDelete: saved delete_hook_pointer=%p (value will be called after unlock if non-NULL)\", (void *)delete_hook);\n        }\n\n        OS_TaskDelete_Log(\"OS_TaskDelete: calling OS_TaskDelete_Impl for token.id=%d\", token.id);\n        return_code = OS_TaskDelete_Impl(&token);\n        OS_TaskDelete_Log(\"OS_TaskDelete: OS_TaskDelete_Impl returned %d\", (int)return_code);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_TaskDelete_Log(\"OS_TaskDelete: OS_ObjectIdFinalizeDelete returned %d\", (int)return_code);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        OS_TaskDelete_Log(\"OS_TaskDelete: about to call delete_hook %p\", (void *)delete_hook);\n        delete_hook();\n        OS_TaskDelete_Log(\"OS_TaskDelete: returned from delete_hook %p\", (void *)delete_hook);\n    }\n\n    OS_TaskDelete_Log(\"OS_TaskDelete: exit, return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}