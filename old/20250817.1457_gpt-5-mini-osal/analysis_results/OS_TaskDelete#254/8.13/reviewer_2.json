{
  "user_message": "An agent A claimed that the following OS_TaskDelete code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskDelete.\n```c\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        delete_hook();\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'task' is declared as OS_task_internal_record_t *task but is only used to read fields (delete_hook_pointer). The assignment task = OS_OBJECT_TABLE_GET(OS_task_table, token) yields a non-const pointer to the table element even though the function does not modify the record. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible (e.g. const OS_task_internal_record_t *task), or the table access macro/definition should allow obtaining a const-qualified pointer.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\ntypedef int32_t int32;\ntypedef uint32_t osal_id_t;\ntypedef void (*osal_task_entry)(void);\ntypedef struct\n{\n    int id;\n} OS_object_token_t;\ntypedef struct\n{\n    osal_task_entry delete_hook_pointer;\n    /* Extra members that other routines might expect */\n    uint32_t stack_size;\n    int32 priority;\n} OS_task_internal_record_t;\nconst size_t OS_TASK_TABLE_SIZE = 8;\nconst int OS_LOCK_MODE_EXCLUSIVE = 1;\nconst int LOCAL_OBJID_TYPE = 2;\nconst int OS_SUCCESS = 0;\nint32 OS_ObjectIdGetById(int lock_mode, int objtype, osal_id_t id, OS_object_token_t *token)\n{\n    (void)lock_mode;\n    (void)objtype;\n    if (token == NULL) return -1;\n    /* Keep index within bounds of the small test table */\n    token->id = (int)(id % OS_TASK_TABLE_SIZE);\n    return OS_SUCCESS;\n}\nOS_task_internal_record_t *OS_OBJECT_TABLE_GET(OS_task_internal_record_t *table, OS_object_token_t token)\n{\n    (void)table; /* table parameter is ignored here because we reference the global table */\n\n    if (token.id < 0 || (size_t)token.id >= OS_TASK_TABLE_SIZE)\n    {\n        return NULL;\n    }\n    return &OS_task_table[token.id];\n}\nint32 OS_TaskDelete_Impl(OS_object_token_t *token)\n{\n    (void)token;\n    /* In the real OS this would perform internal deletion steps. For the\n     * test harness we simply report success. */\n    return OS_SUCCESS;\n}\nint32 OS_ObjectIdFinalizeDelete(int32 return_code, OS_object_token_t *token)\n{\n    (void)token;\n    return return_code;\n}\nstatic void OS_TaskDelete_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2035.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If the log cannot be opened, silently continue to avoid altering\n         * the behavior of the original routine. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n\n    OS_TaskDelete_Log(\"OS_TaskDelete: entry, task_id=%u\", (unsigned)task_id);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    OS_TaskDelete_Log(\"OS_TaskDelete: OS_ObjectIdGetById returned %d, token.id=%d\", (int)return_code, token.id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n        OS_TaskDelete_Log(\"OS_TaskDelete: obtained task pointer=%p from table index=%d\", (void *)task, token.id);\n\n        if (task == NULL)\n        {\n            OS_TaskDelete_Log(\"OS_TaskDelete: task pointer is NULL for token.id=%d\", token.id);\n        }\n        else\n        {\n            /* Save the delete hook, as we do not want to call it while locked */\n            delete_hook = task->delete_hook_pointer;\n            OS_TaskDelete_Log(\"OS_TaskDelete: saved delete_hook_pointer=%p (value will be called after unlock if non-NULL)\", (void *)delete_hook);\n        }\n\n        OS_TaskDelete_Log(\"OS_TaskDelete: calling OS_TaskDelete_Impl for token.id=%d\", token.id);\n        return_code = OS_TaskDelete_Impl(&token);\n        OS_TaskDelete_Log(\"OS_TaskDelete: OS_TaskDelete_Impl returned %d\", (int)return_code);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_TaskDelete_Log(\"OS_TaskDelete: OS_ObjectIdFinalizeDelete returned %d\", (int)return_code);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        OS_TaskDelete_Log(\"OS_TaskDelete: about to call delete_hook %p\", (void *)delete_hook);\n        delete_hook();\n        OS_TaskDelete_Log(\"OS_TaskDelete: returned from delete_hook %p\", (void *)delete_hook);\n    }\n\n    OS_TaskDelete_Log(\"OS_TaskDelete: exit, return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In OS_TaskDelete the local variable task is only used to read fields (delete_hook_pointer) and is never used to modify the pointed-to OS_task_internal_record_t. MISRA C 2023 Rule 8.13 requires that a pointer should point to a const-qualified type whenever possible, so the local pointer should be declared const OS_task_internal_record_t *task (or the table-access macro should provide a const-qualified pointer). Converting the non-const result of OS_OBJECT_TABLE_GET to a const-qualified pointer is allowed, so there is no technical impediment to making task const. The test harness failing to compile does not change the correctness of this analysis \u2014 the code as shown is non-compliant with Rule 8.13 and should be adjusted as described or justified if mutation is actually required."
}