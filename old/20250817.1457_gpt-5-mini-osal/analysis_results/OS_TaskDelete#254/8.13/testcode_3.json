{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro returns a non-const pointer to an object table entry even when the caller only needs read-only access. Example: in OS_TaskDelete the code does\n    OS_task_internal_record_t *task;\n    task = OS_OBJECT_TABLE_GET(OS_task_table, token);\nand only reads task->delete_hook_pointer. The pointer returned by OS_OBJECT_TABLE_GET could and should be a pointer to const OS_task_internal_record_t (const OS_task_internal_record_t *), but the macro yields a modifiable pointer. This fails MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2035.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskDelete:\n```c\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        delete_hook();\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n\n/*\n * Probe function to log control flow and state for OS_TaskDelete.\n * Logs are appended to /tmp/logs/2035.txt. The function attempts to\n * create the /tmp/logs directory if it does not exist. The logging\n * preserves the original behavior and does not modify program state.\n */\nstatic void OS_TaskDelete_LogProbe(const char *stage,\n                                   const void *task_ptr,\n                                   const void *token_ptr,\n                                   int return_code,\n                                   int delete_hook_nonnull)\n{\n    FILE *f;\n\n    /* Attempt to create the log directory; ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/2035.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not disturb normal flow */\n        return;\n    }\n\n    fprintf(f, \"OS_TaskDelete: stage=%s return_code=%d token_addr=%p task_addr=%p delete_hook_present=%d\\n\",\n            stage, return_code, token_ptr, task_ptr, delete_hook_nonnull);\n\n    fclose(f);\n}\n\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    /* Log entry with task_id known only here (avoid printing id type specifics) */\n    OS_TaskDelete_LogProbe(\"entry\", NULL, NULL, 0, 0);\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log result of ObjectIdGetById and token address */\n    OS_TaskDelete_LogProbe(\"after_getid\", NULL, &token, return_code, 0);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log the task pointer returned by the macro */\n        OS_TaskDelete_LogProbe(\"after_table_get\", (const void *)task, &token, return_code, 0);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        /* Log that we read the delete_hook (only presence/absence) */\n        OS_TaskDelete_LogProbe(\"after_save_delete_hook\", (const void *)task, &token, return_code, delete_hook != NULL);\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Log after calling the implementation */\n        OS_TaskDelete_LogProbe(\"after_impl\", (const void *)task, &token, return_code, delete_hook != NULL);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log after finalize */\n        OS_TaskDelete_LogProbe(\"after_finalize\", (const void *)task, &token, return_code, delete_hook != NULL);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        OS_TaskDelete_LogProbe(\"before_call_delete_hook\", NULL, NULL, return_code, 1);\n\n        delete_hook();\n\n        OS_TaskDelete_LogProbe(\"after_call_delete_hook\", NULL, NULL, return_code, 1);\n    }\n\n    /* Final exit log */\n    OS_TaskDelete_LogProbe(\"exit\", NULL, NULL, return_code, delete_hook != NULL);\n\n    return return_code;\n}\n"
}