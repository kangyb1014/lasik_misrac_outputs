{
  "user_message": "An agent A claimed that the following OS_TaskDelete code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_TaskDelete.\n```c\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        delete_hook();\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro returns a non-const pointer to an object table entry even when the caller only needs read-only access. Example: in OS_TaskDelete the code does\n    OS_task_internal_record_t *task;\n    task = OS_OBJECT_TABLE_GET(OS_task_table, token);\nand only reads task->delete_hook_pointer. The pointer returned by OS_OBJECT_TABLE_GET could and should be a pointer to const OS_task_internal_record_t (const OS_task_internal_record_t *), but the macro yields a modifiable pointer. This fails MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types whenever possible).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_TaskDelete_LogProbe(const char *stage,\n                                   const void *task_ptr,\n                                   const void *token_ptr,\n                                   int return_code,\n                                   int delete_hook_nonnull)\n{\n    FILE *f;\n\n    /* Attempt to create the log directory; ignore errors if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/2035.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not disturb normal flow */\n        return;\n    }\n\n    fprintf(f, \"OS_TaskDelete: stage=%s return_code=%d token_addr=%p task_addr=%p delete_hook_present=%d\\n\",\n            stage, return_code, token_ptr, task_ptr, delete_hook_nonnull);\n\n    fclose(f);\n}\n\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    /* Log entry with task_id known only here (avoid printing id type specifics) */\n    OS_TaskDelete_LogProbe(\"entry\", NULL, NULL, 0, 0);\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log result of ObjectIdGetById and token address */\n    OS_TaskDelete_LogProbe(\"after_getid\", NULL, &token, return_code, 0);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log the task pointer returned by the macro */\n        OS_TaskDelete_LogProbe(\"after_table_get\", (const void *)task, &token, return_code, 0);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        /* Log that we read the delete_hook (only presence/absence) */\n        OS_TaskDelete_LogProbe(\"after_save_delete_hook\", (const void *)task, &token, return_code, delete_hook != NULL);\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Log after calling the implementation */\n        OS_TaskDelete_LogProbe(\"after_impl\", (const void *)task, &token, return_code, delete_hook != NULL);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log after finalize */\n        OS_TaskDelete_LogProbe(\"after_finalize\", (const void *)task, &token, return_code, delete_hook != NULL);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        OS_TaskDelete_LogProbe(\"before_call_delete_hook\", NULL, NULL, return_code, 1);\n\n        delete_hook();\n\n        OS_TaskDelete_LogProbe(\"after_call_delete_hook\", NULL, NULL, return_code, 1);\n    }\n\n    /* Final exit log */\n    OS_TaskDelete_LogProbe(\"exit\", NULL, NULL, return_code, delete_hook != NULL);\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_TaskDelete: stage=entry return_code=0 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=after_getid return_code=-16 token_addr=0x7ffc05f49ed0 task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=exit return_code=-16 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=entry return_code=0 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=after_getid return_code=-16 token_addr=0x7ffc05f49ed0 task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=exit return_code=-16 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=entry return_code=0 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=after_getid return_code=-16 token_addr=0x7ffc05f49ed0 task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=exit return_code=-16 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=entry return_code=0 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=after_getid return_code=-16 token_addr=0x7ffc05f49ed0 task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=exit return_code=-16 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=entry return_code=0 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=after_getid return_code=-16 token_addr=0x7ffc05f49ed0 task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=exit return_code=-16 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=entry return_code=0 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=after_getid return_code=-16 token_addr=0x7ffc05f49ed0 task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=exit return_code=-16 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=entry return_code=0 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=after_getid return_code=-16 token_addr=0x7ffc05f49ed0 task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=exit return_code=-16 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=entry return_code=0 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=after_getid return_code=-16 token_addr=0x7ffc05f49ed0 task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=exit return_code=-16 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=entry return_code=0 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=after_getid return_code=-16 token_addr=0x7ffc05f49ed0 task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=exit return_code=-16 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=entry return_code=0 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=after_getid return_code=-16 token_addr=0x7ffc05f49ed0 task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=exit return_code=-16 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=entry return_code=0 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=after_getid return_code=-16 token_addr=0x7ffc05f49ed0 task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=exit return_code=-16 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=entry return_code=0 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=after_getid return_code=-16 token_addr=0x7ffc05f49ed0 task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=exit return_code=-16 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=entry return_code=0 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=after_getid return_code=-16 token_addr=0x7ffc05f49ed0 task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=exit return_code=-16 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=entry return_code=0 token_addr=(nil) task_addr=(nil) delete_hook_present=0\nOS_TaskDelete: stage=a\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_TaskDelete the local pointer 'task' is declared as a modifiable pointer (OS_task_internal_record_t *task) but is only used for read-only access (reading task->delete_hook_pointer). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible; here it is possible to declare the pointer as const OS_task_internal_record_t *task (or otherwise obtain a const-qualified pointer from OS_OBJECT_TABLE_GET) and thus the current code violates the rule."
}