{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'impl' is declared as a non-const pointer (OS_impl_task_internal_record_t *impl;) even though OS_TaskDelete_Impl only reads from the referenced object (uses impl->id) and does not modify it. Per MISRA C 2023 Rule 8.13 this should be const-qualified (e.g. const OS_impl_task_internal_record_t *impl;) \u2014 assigning the non-const address returned by OS_OBJECT_TABLE_GET to a pointer-to-const is permitted, so changing to const is possible and recommended.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2035.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskDelete:\n```c\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        delete_hook();\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskDelete code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe/log helper: append a line to the log file with relevant state. */\nstatic void OS_TaskDelete_Log(const char *stage,\n                              unsigned long task_id_val,\n                              int32 return_code,\n                              const void *token_addr,\n                              const void *task_ptr,\n                              const void *delete_hook_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/2035.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s: task_id=%lu return_code=%d token_addr=%p task_ptr=%p delete_hook_ptr=%p\\n\",\n                stage, task_id_val, return_code, token_addr, task_ptr, delete_hook_ptr);\n        fclose(f);\n    }\n}\n\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n\n    /* Log entry with provided task_id */\n    OS_TaskDelete_Log(\"ENTER\", (unsigned long)task_id, -1, &token, NULL, NULL);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_TaskDelete_Log(\"AFTER_ObjectIdGetById\", (unsigned long)task_id, return_code, &token, NULL, NULL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Log the task pointer and delete_hook presence */\n        OS_TaskDelete_Log(\"AFTER_TABLE_GET\", (unsigned long)task_id, return_code, &token, (const void *)task, (const void *)task->delete_hook_pointer);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        /* Log just before calling platform-specific delete implementation */\n        OS_TaskDelete_Log(\"BEFORE_Impl\", (unsigned long)task_id, return_code, &token, (const void *)task, (const void *)delete_hook);\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Log after Impl returns */\n        OS_TaskDelete_Log(\"AFTER_Impl\", (unsigned long)task_id, return_code, &token, (const void *)task, (const void *)delete_hook);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log after finalizing delete */\n        OS_TaskDelete_Log(\"AFTER_FinalizeDelete\", (unsigned long)task_id, return_code, &token, (const void *)task, (const void *)delete_hook);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        /* Log right before calling the delete hook */\n        OS_TaskDelete_Log(\"BEFORE_DeleteHook\", (unsigned long)task_id, return_code, &token, NULL, (const void *)delete_hook);\n\n        delete_hook();\n\n        /* Log after calling the delete hook */\n        OS_TaskDelete_Log(\"AFTER_DeleteHook\", (unsigned long)task_id, return_code, &token, NULL, (const void *)delete_hook);\n    }\n\n    /* Final return log */\n    OS_TaskDelete_Log(\"EXIT\", (unsigned long)task_id, return_code, &token, NULL, (const void *)delete_hook);\n\n    return return_code;\n}\n"
}