{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment delete_hook = NULL; is redundant. In the function flow delete_hook is always overwritten when OS_ObjectIdGetById returns OS_SUCCESS, and when that call fails the later conditional (return_code == OS_SUCCESS && delete_hook != NULL) prevents delete_hook from being used. Removing the initialization therefore would not change program behaviour, so the assignment is an executed operation whose removal would not affect behaviour (i.e. dead code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2034.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskDelete:\n```c\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        delete_hook();\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper - writes to /tmp/logs/2034.txt */\nstatic void OS_TaskDelete_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2034.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    fprintf(fp, \"\\n\");\n    va_end(args);\n\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    OS_TaskDelete_Log(\"OS_TaskDelete: entered\");\n\n    /* Original initialization retained to preserve logic */\n    delete_hook = NULL;\n    OS_TaskDelete_Log(\"Initialized delete_hook to NULL\");\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    OS_TaskDelete_Log(\"OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n        OS_TaskDelete_Log(\"Retrieved task record pointer: %p\", (void *)task);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n        if (delete_hook == NULL)\n        {\n            OS_TaskDelete_Log(\"Saved delete_hook_pointer: NULL\");\n        }\n        else\n        {\n            OS_TaskDelete_Log(\"Saved delete_hook_pointer: non-NULL\");\n        }\n\n        return_code = OS_TaskDelete_Impl(&token);\n        OS_TaskDelete_Log(\"OS_TaskDelete_Impl returned %ld\", (long)return_code);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n        OS_TaskDelete_Log(\"OS_ObjectIdFinalizeDelete returned %ld\", (long)return_code);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        OS_TaskDelete_Log(\"About to call delete_hook (non-NULL) and return_code == OS_SUCCESS\");\n        delete_hook();\n        OS_TaskDelete_Log(\"delete_hook() returned\");\n    }\n    else\n    {\n        OS_TaskDelete_Log(\"Not calling delete_hook: return_code=%ld, delete_hook is %s\",\n                          (long)return_code, (delete_hook == NULL) ? \"NULL\" : \"non-NULL\");\n    }\n\n    OS_TaskDelete_Log(\"OS_TaskDelete: exiting with return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}