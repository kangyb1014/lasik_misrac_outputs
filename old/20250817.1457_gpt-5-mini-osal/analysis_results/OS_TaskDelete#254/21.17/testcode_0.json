{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(token, 0, sizeof(*token)) will write sizeof(OS_object_token_t) bytes starting at token. If token is NULL or points to a buffer smaller than sizeof(OS_object_token_t) (e.g. a caller erroneously passes NULL or an undersized object), this memset will write out of bounds. The function does not check the token pointer before dereferencing it, so such a call would violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskDelete code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2039.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskDelete as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskDelete:\n```c\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        delete_hook();\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskDelete code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/*\n * Helper: append diagnostic log lines to /tmp/logs/2039.txt\n * This helper only inspects local addresses and sizes; it does NOT\n * dereference any pointer-valued token as an object pointer (so it\n * avoids causing additional memory accesses that could introduce new issues).\n */\nstatic void OS_TaskDelete_LogState(const char *stage, int32_t return_code, unsigned long task_id, const void *token_addr, size_t token_size, const void *task_ptr, int delete_hook_present)\n{\n    FILE *f = fopen(\"/tmp/logs/2039.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"=== OS_TaskDelete LOG (%s) ===\\n\", stage);\n    fprintf(f, \"task_id=%lu return_code=%d\\n\", task_id, (int)return_code);\n    fprintf(f, \"token_address=%p token_size=%zu\\n\", token_addr, token_size);\n    /* Dump up to 64 bytes of the token object (safe: we only read the local stack object bytes)\n     * This will help other agents see the raw token contents and size used by callers. */\n    {\n        const unsigned char *p = (const unsigned char *)token_addr;\n        size_t i, max = token_size;\n        if (max > 64) max = 64;\n        fprintf(f, \"token_bytes=\");\n        for (i = 0; i < max; ++i)\n        {\n            fprintf(f, \"%02x\", (unsigned)p[i]);\n            if (i + 1 < max) fprintf(f, \".\");\n        }\n        fprintf(f, \" (printed %zu of %zu)\\n\", max, token_size);\n    }\n\n    fprintf(f, \"task_ptr=%p delete_hook_present=%d\\n\", task_ptr, delete_hook_present);\n    fprintf(f, \"===============================\\n\\n\");\n\n    fclose(f);\n}\n\n/*\n * Modified OS_TaskDelete with logging probes. Logic preserved.\n */\nint32 OS_TaskDelete(osal_id_t task_id)\n{\n    int32                      return_code;\n    OS_object_token_t          token;\n    OS_task_internal_record_t *task;\n    osal_task_entry            delete_hook;\n\n    delete_hook = NULL;\n\n    /* Log: about to get the object id */\n    OS_TaskDelete_LogState(\"before_OS_ObjectIdGetById\", -1, (unsigned long)task_id, (const void *)&token, sizeof(token), NULL, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_EXCLUSIVE, LOCAL_OBJID_TYPE, task_id, &token);\n\n    /* Log result of lookup and the raw token bytes/size (useful to detect NULL/zero tokens or odd sizes) */\n    OS_TaskDelete_LogState(\"after_OS_ObjectIdGetById\", return_code, (unsigned long)task_id, (const void *)&token, sizeof(token), NULL, 0);\n\n    if (return_code == OS_SUCCESS)\n    {\n        task = OS_OBJECT_TABLE_GET(OS_task_table, token);\n\n        /* Save the delete hook, as we do not want to call it while locked */\n        delete_hook = task->delete_hook_pointer;\n\n        /* Log before calling implementation (this is where downstream code may call memset on the token) */\n        OS_TaskDelete_LogState(\"before_OS_TaskDelete_Impl\", return_code, (unsigned long)task_id, (const void *)&token, sizeof(token), (const void *)task, (delete_hook != NULL));\n\n        return_code = OS_TaskDelete_Impl(&token);\n\n        /* Complete the operation via the common routine */\n        return_code = OS_ObjectIdFinalizeDelete(return_code, &token);\n\n        /* Log after finalize */\n        OS_TaskDelete_LogState(\"after_finalize\", return_code, (unsigned long)task_id, (const void *)&token, sizeof(token), (const void *)task, (delete_hook != NULL));\n    }\n\n    /*\n    ** Call the thread Delete hook if there is one.\n    */\n    if (return_code == OS_SUCCESS && delete_hook != NULL)\n    {\n        /* Log the fact we are about to call the delete hook */\n        OS_TaskDelete_LogState(\"before_delete_hook_call\", return_code, (unsigned long)task_id, (const void *)&token, sizeof(token), NULL, 1);\n\n        delete_hook();\n\n        /* Log after calling the delete hook */\n        OS_TaskDelete_LogState(\"after_delete_hook_call\", return_code, (unsigned long)task_id, (const void *)&token, sizeof(token), NULL, 0);\n    }\n\n    return return_code;\n}\n"
}