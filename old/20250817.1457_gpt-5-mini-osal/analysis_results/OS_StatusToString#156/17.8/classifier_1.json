{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_StatusToString:\n```c\nchar *OS_StatusToString(osal_status_t status, os_status_string_t *status_string)\n{\n    char *string = NULL;\n\n    if (status_string != NULL)\n    {\n        snprintf(*status_string, sizeof(*status_string), \"%ld\", OS_StatusToInteger(status));\n        string = *status_string;\n    }\n    return string;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nsnprintf(*status_string, sizeof(*status_string), \"%ld\", OS_StatusToInteger(status));\n```\nFocus on the above code fragment and judge whether it violates the rule 17.8 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the pointer parameter status_string itself is not modified; only the object it points to (*status_string) is written by snprintf, which is allowed. A violating scenario would be if the pointer parameter were modified, e.g.:\n\nstatus_string = NULL; // or status_string++; // or status_string = some_other_pointer;\n\nAny direct assignment or increment of status_string in the function would violate MISRA C 2023 Rule 17.8."
}