{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the OS_CHECK_STRING macro uses unbounded string functions (e.g. strlen) on fsvolname, then a non\u2011null\u2011terminated or overly long fsvolname will cause the function to read past the bounds of the caller\u2019s object. For example, if the caller passes a pointer to a character array that does not contain a NUL within sizeof(filesys->volume_name) bytes, strlen(fsvolname) (or any unbounded strcpy/strcat/memcpy using the length) will scan beyond the intended limit and violate MISRA C 2023 Rule 21.17. OS_CHECK_STRING must use a bounded operation (e.g. strnlen/memchr with the provided size) to avoid this violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_initfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1447.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_initfs as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_initfs:\n```c\nint32 OS_initfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, false);\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /*\n         * This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_initfs code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe/log helper functions to capture control flow and state for debugging.\n * Logs are appended to /tmp/logs/1447.txt.\n * These helpers use bounded string operations (strnlen) to avoid unbounded\n * reads when attempting to log string contents.\n */\nstatic void probe_log_append(const char *line)\n{\n    FILE *f = fopen(\"/tmp/logs/1447.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    fprintf(f, \"%s\\n\", line);\n    fclose(f);\n}\n\nstatic void probe_log_ptr(const char *name, const void *ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/1447.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    fprintf(f, \"%s: %p\\n\", name, ptr);\n    fclose(f);\n}\n\nstatic void probe_log_numeric(const char *name, unsigned long value)\n{\n    FILE *f = fopen(\"/tmp/logs/1447.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    fprintf(f, \"%s: %lu\\n\", name, value);\n    fclose(f);\n}\n\n/* Safely log up to 'maxlen' bytes of a NUL-terminated string. If the string\n * does not contain a NUL within the first maxlen bytes the output will be\n * marked as truncated. This uses strnlen to avoid unbounded reads.\n */\nstatic void probe_log_string_limited(const char *name, const char *s, size_t maxlen)\n{\n    FILE *f = fopen(\"/tmp/logs/1447.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    if (s == NULL)\n    {\n        fprintf(f, \"%s: (NULL)\\n\", name);\n        fclose(f);\n        return;\n    }\n\n    size_t len = strnlen(s, maxlen);\n    fprintf(f, \"%s: length=%zu\\n\", name, len);\n\n    /* Write the contents up to len bytes. Mark as truncated if len == maxlen. */\n    if (len > 0)\n    {\n        fwrite(\"value=\\\"\", 1, 8, f);\n        fwrite(s, 1, len, f);\n        if (len == maxlen)\n        {\n            fwrite(\"..(truncated)\", 1, 13, f);\n        }\n        fwrite(\"\\\"\\n\", 1, 2, f);\n    }\n    else\n    {\n        fwrite(\"value=\\\"\\\"\\n\", 1, 9, f);\n    }\n\n    fclose(f);\n}\n\n/* The original function logic is preserved. Inserted probes log entry,\n * parameters (pointer values and limited string snapshots), the return code\n * from OS_FileSys_Initialize, and the final return value. Using a bounded\n * length for string inspection reduces the chance of unbounded reads while\n * providing useful diagnostic information for reproducing the scenario.\n */\nint32 OS_initfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n\n    /* Log entry and parameter pointers */\n    probe_log_append(\"---- OS_initfs ENTRY ----\");\n    probe_log_ptr(\"address\", (const void *)address);\n    probe_log_ptr(\"devname\", (const void *)devname);\n    probe_log_ptr(\"volname\", (const void *)volname);\n    probe_log_numeric(\"blocksize\", (unsigned long)blocksize);\n    probe_log_numeric(\"numblocks\", (unsigned long)numblocks);\n\n    /* Log limited snapshots of the string parameters. Use a conservative\n     * max length to avoid large or unbounded reads. Adjust MAX_SNAP_LEN if\n     * project-specific limits are known (e.g. filesys->volume_name size).\n     */\n    enum { MAX_SNAP_LEN = 256 };\n    probe_log_string_limited(\"devname_snapshot\", devname, MAX_SNAP_LEN);\n    probe_log_string_limited(\"volname_snapshot\", volname, MAX_SNAP_LEN);\n\n    /* Call the original initialization routine */\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, false);\n\n    /* Log the raw return code from the filesystem initializer */\n    {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"OS_FileSys_Initialize returned: %ld\", (long)return_code);\n        probe_log_append(buf);\n    }\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        probe_log_append(\"Mapping historic filesystem-specific error to OS_FS_ERR_DEVICE_NOT_FREE\");\n\n        /*\n         * This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n\n        {\n            char buf[128];\n            snprintf(buf, sizeof(buf), \"Return code adjusted to: %ld\", (long)return_code);\n            probe_log_append(buf);\n        }\n    }\n\n    probe_log_append(\"---- OS_initfs EXIT ----\");\n    return return_code;\n}\n"
}