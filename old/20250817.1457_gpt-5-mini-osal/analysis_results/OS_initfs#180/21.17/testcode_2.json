{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the OS_CHECK_STRING macro inspects or copies the caller-supplied fsdevname using unbounded string.h functions (e.g. strlen, strcpy, or strncpy with the destination size) then a read beyond the bounds of the object referenced by fsdevname can occur. For example, if filesys->device_name is 32 bytes but the caller passes devname pointing to a 10-byte buffer that is not NUL-terminated, a strlen(fsdevname) call will scan past the valid 10 bytes and read out-of-bounds; similarly, using strncpy(..., fsdevname, sizeof(filesys->device_name)) will attempt to read 32 bytes from the 10-byte source and access memory beyond the source object. This would violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_initfs code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1447.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_initfs as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_initfs:\n```c\nint32 OS_initfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, false);\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /*\n         * This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was\n         * already initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_initfs code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Minimal type aliases to keep this translation unit self-contained */\ntypedef int32_t int32;\ntypedef uint64_t osal_blockcount_t;\n\n/* External symbols from the rest of the system. These are declared\n * here as extern so this file compiles without altering the original\n * logic. Definitions are expected to be provided at link time. */\nextern int32 OS_FileSys_Initialize(char *address, const char *devname, const char *volname,\n                                  size_t blocksize, osal_blockcount_t numblocks, int mount_flag);\nextern const int32 OS_ERR_INCORRECT_OBJ_STATE;\nextern const int32 OS_ERR_NO_FREE_IDS;\nextern const int32 OS_FS_ERR_DEVICE_NOT_FREE;\n\n/* Probe/log helper: append structured diagnostic information to the\n * specified log file. This helper intentionally avoids any use of\n * string-handling routines that could read past the bounds of caller\n * buffers (i.e. do not use %s on caller-supplied pointers). Instead\n * it records pointer values and numeric parameters so that an off-line\n * analysis can reproduce the scenario that leads to the violation. */\nstatic void OS_initfs_log_probe(const char *stage,\n                                char *address,\n                                const char *devname,\n                                const char *volname,\n                                size_t blocksize,\n                                osal_blockcount_t numblocks,\n                                int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1447.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, silently continue to preserve\n         * original function behavior. Do not alter return codes. */\n        return;\n    }\n\n    /* Record the stage and basic, safe-to-observe state. We print pointer\n     * values rather than dereferencing caller-supplied character buffers\n     * to avoid any potential read beyond their bounds. */\n    fprintf(f, \"[OS_initfs] %s\\n\", stage);\n    fprintf(f, \"  address=%p\\n\", (void *)address);\n    fprintf(f, \"  devname_ptr=%p\\n\", (const void *)devname);\n    fprintf(f, \"  volname_ptr=%p\\n\", (const void *)volname);\n    fprintf(f, \"  blocksize=%zu\\n\", blocksize);\n    fprintf(f, \"  numblocks=%llu\\n\", (unsigned long long)numblocks);\n    fprintf(f, \"  return_code=%d\\n\", (int)return_code);\n\n    /* Provide hints about potentially problematic caller inputs without\n     * reading from the strings themselves. This allows a post-mortem\n     * to correlate pointer values with memory/layout observed when the\n     * system is reproduced under a debugger or memory-tracing tool. */\n    if (devname == NULL)\n    {\n        fprintf(f, \"  note: devname is NULL\\n\");\n    }\n    if (volname == NULL)\n    {\n        fprintf(f, \"  note: volname is NULL\\n\");\n    }\n\n    fprintf(f, \"---\\n\");\n    fflush(f);\n    fclose(f);\n}\n\n/* The original function logic is preserved. Logging probes are added\n * immediately before and after the call to OS_FileSys_Initialize so that\n * callers that pass non-terminated or undersized buffers can be detected\n * by inspecting the recorded pointer values and sizes. */\nint32 OS_initfs(char *address, const char *devname, const char *volname, size_t blocksize, osal_blockcount_t numblocks)\n{\n    int32 return_code;\n\n    /* Log input state before invoking the filesystem initializer. */\n    OS_initfs_log_probe(\"entry\", address, devname, volname, blocksize, numblocks, 0);\n\n    return_code = OS_FileSys_Initialize(address, devname, volname, blocksize, numblocks, 0);\n\n    /* Log the immediate result so that callers can correlate return codes\n     * with the inputs that produced them. */\n    OS_initfs_log_probe(\"after_OS_FileSys_Initialize\", address, devname, volname, blocksize, numblocks, return_code);\n\n    if (return_code == OS_ERR_INCORRECT_OBJ_STATE || return_code == OS_ERR_NO_FREE_IDS)\n    {\n        /* This is the historic filesystem-specific error code generated when\n         * attempting to mkfs()/initfs() on a filesystem that was already\n         * initialized, or if there were no free slots in the table.\n         *\n         * This code preserved just in case application code was checking for it.\n         */\n        return_code = OS_FS_ERR_DEVICE_NOT_FREE;\n\n        /* Log the path where return_code is remapped so it's visible in logs. */\n        OS_initfs_log_probe(\"mapped_to_OS_FS_ERR_DEVICE_NOT_FREE\", address, devname, volname, blocksize, numblocks, return_code);\n    }\n\n    return return_code;\n}\n"
}