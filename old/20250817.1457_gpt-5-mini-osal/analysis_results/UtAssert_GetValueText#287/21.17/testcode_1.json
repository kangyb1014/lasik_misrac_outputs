{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf Typename is not a properly null-terminated C string (for example it points to a character array whose terminating '\\0' lies beyond the accessible object bounds), the call strchr(Typename, '*') will scan past the object and may read out-of-bounds. Although the code checks Typename != NULL and *Typename != 0, it does not guarantee that Typename is null-terminated or that the buffer length is known, so strchr can access beyond the bounds of the object \u2014 violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GetValueText code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2303.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_GetValueText as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_GetValueText:\n```c\nstatic const char *UtAssert_GetValueText(char *TempBuf, size_t TempSz, UT_IntCheck_t InValue, bool IsUnsigned,\n                                         UtAssert_Radix_t RadixType)\n{\n    if (RadixType == UtAssert_Radix_BOOLEAN)\n    {\n        if (InValue != 0)\n        {\n            snprintf(TempBuf, TempSz, \"true\");\n        }\n        else\n        {\n            snprintf(TempBuf, TempSz, \"false\");\n        }\n    }\n    else if (RadixType == UtAssert_Radix_OCTAL)\n    {\n        snprintf(TempBuf, TempSz, \"0%lo\", (unsigned long)InValue);\n    }\n    else if (RadixType == UtAssert_Radix_HEX)\n    {\n        snprintf(TempBuf, TempSz, \"0x%lx\", (unsigned long)InValue);\n    }\n    else if (IsUnsigned)\n    {\n        snprintf(TempBuf, TempSz, \"%lu\", (unsigned long)InValue);\n    }\n    else\n    {\n        snprintf(TempBuf, TempSz, \"%ld\", (long)InValue);\n    }\n\n    return TempBuf;\n}\n```\n</target_code>\nPlease provide the modified UtAssert_GetValueText code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging function: appends control-flow and state information to /tmp/logs/2303.txt */\nstatic void UtAssert_Log2303_Pre(const char *stage, char *TempBuf, size_t TempSz, UT_IntCheck_t InValue, bool IsUnsigned, UtAssert_Radix_t RadixType)\n{\n    FILE *f = fopen(\"/tmp/logs/2303.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log header info */\n    fprintf(f, \"[UtAssert_GetValueText] %s\\n\", stage);\n    fprintf(f, \"  TempBuf=%p, TempSz=%zu, InValue=%lld, IsUnsigned=%d, RadixType=%d\\n\",\n            (void *)TempBuf, TempSz, (long long)InValue, (int)IsUnsigned, (int)RadixType);\n\n    /* Safely capture a sample of the existing buffer contents without reading out-of-bounds.\n       We copy at most TempSz-1 bytes and limit to 63 characters for logging. */\n    if ((TempBuf != NULL) && (TempSz > 0))\n    {\n        size_t copy_len = TempSz - 1u;\n        if (copy_len > 63u)\n        {\n            copy_len = 63u;\n        }\n\n        char sample[64 + 1];\n        /* memcpy is safe here because we only read up to TempSz-1 bytes which is within the provided buffer size */\n        memcpy(sample, TempBuf, copy_len);\n        sample[copy_len] = '\\0';\n        fprintf(f, \"  PreContentSample(len=%zu): '%s'\\n\", copy_len, sample);\n    }\n    else\n    {\n        fprintf(f, \"  PreContentSample: <no buffer or zero size>\\n\");\n    }\n\n    fclose(f);\n}\n\nstatic void UtAssert_Log2303_Post(char *TempBuf, size_t TempSz)\n{\n    FILE *f = fopen(\"/tmp/logs/2303.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log the formatted result, safely sampling the buffer */\n    if ((TempBuf != NULL) && (TempSz > 0))\n    {\n        size_t copy_len = TempSz - 1u;\n        if (copy_len > 127u)\n        {\n            copy_len = 127u;\n        }\n\n        char sample[128 + 1];\n        memcpy(sample, TempBuf, copy_len);\n        sample[copy_len] = '\\0';\n        fprintf(f, \"  PostContentSample(len=%zu): '%s'\\n\", copy_len, sample);\n    }\n    else\n    {\n        fprintf(f, \"  PostContentSample: <no buffer or zero size>\\n\");\n    }\n\n    fprintf(f, \"[UtAssert_GetValueText] End\\n\\n\");\n    fclose(f);\n}\n\nstatic const char *UtAssert_GetValueText(char *TempBuf, size_t TempSz, UT_IntCheck_t InValue, bool IsUnsigned,\n                                         UtAssert_Radix_t RadixType)\n{\n    /* Log the incoming state before performing formatting */\n    UtAssert_Log2303_Pre(\"Entry\", TempBuf, TempSz, InValue, IsUnsigned, RadixType);\n\n    if (RadixType == UtAssert_Radix_BOOLEAN)\n    {\n        if (InValue != 0)\n        {\n            snprintf(TempBuf, TempSz, \"true\");\n        }\n        else\n        {\n            snprintf(TempBuf, TempSz, \"false\");\n        }\n    }\n    else if (RadixType == UtAssert_Radix_OCTAL)\n    {\n        snprintf(TempBuf, TempSz, \"0%lo\", (unsigned long)InValue);\n    }\n    else if (RadixType == UtAssert_Radix_HEX)\n    {\n        snprintf(TempBuf, TempSz, \"0x%lx\", (unsigned long)InValue);\n    }\n    else if (IsUnsigned)\n    {\n        snprintf(TempBuf, TempSz, \"%lu\", (unsigned long)InValue);\n    }\n    else\n    {\n        snprintf(TempBuf, TempSz, \"%ld\", (long)InValue);\n    }\n\n    /* Log the resulting buffer content after formatting */\n    UtAssert_Log2303_Post(TempBuf, TempSz);\n\n    return TempBuf;\n}\n"
}