{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strncmp(ActualText, UTASSERT_PREFIX, sizeof(UTASSERT_PREFIX) - 1) which will attempt to read up to N bytes from ActualText (N == sizeof(UTASSERT_PREFIX)-1). If ActualText is NULL, points into an object that has fewer than N accessible bytes remaining, or refers to a character sequence that is not N or more bytes long without an earlier terminating NUL within the object, strncmp may read beyond the bounds of the object and thus cause an out-of-bounds access. For example, if UTASSERT_PREFIX is \"UTASSERT_\" (N == 9) and ActualText points to a 4-byte buffer that is not NUL-terminated within those 4 bytes (or points near the end of a small object), strncmp will read past the buffer bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GetValueText code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2303.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_GetValueText as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_GetValueText:\n```c\nstatic const char *UtAssert_GetValueText(char *TempBuf, size_t TempSz, UT_IntCheck_t InValue, bool IsUnsigned,\n                                         UtAssert_Radix_t RadixType)\n{\n    if (RadixType == UtAssert_Radix_BOOLEAN)\n    {\n        if (InValue != 0)\n        {\n            snprintf(TempBuf, TempSz, \"true\");\n        }\n        else\n        {\n            snprintf(TempBuf, TempSz, \"false\");\n        }\n    }\n    else if (RadixType == UtAssert_Radix_OCTAL)\n    {\n        snprintf(TempBuf, TempSz, \"0%lo\", (unsigned long)InValue);\n    }\n    else if (RadixType == UtAssert_Radix_HEX)\n    {\n        snprintf(TempBuf, TempSz, \"0x%lx\", (unsigned long)InValue);\n    }\n    else if (IsUnsigned)\n    {\n        snprintf(TempBuf, TempSz, \"%lu\", (unsigned long)InValue);\n    }\n    else\n    {\n        snprintf(TempBuf, TempSz, \"%ld\", (long)InValue);\n    }\n\n    return TempBuf;\n}\n```\n</target_code>\nPlease provide the modified UtAssert_GetValueText code.\n",
  "test_code": "static void UtAssert_LogMeta(const char *stage, char *TempBuf, size_t TempSz, UT_IntCheck_t InValue, bool IsUnsigned, UtAssert_Radix_t RadixType)\n{\n    FILE *f = fopen(\"/tmp/logs/2303.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    /* Log pointer, size and value metadata. Do not attempt to read TempBuf contents here.\n       This avoids reading uninitialized memory before snprintf populates it. */\n    fprintf(f, \"[META] stage=%s ptr=%p TempSz=%zu InValue(signed)=%lld InValue(unsigned)=%llu IsUnsigned=%d Radix=%d\\n\",\n            stage,\n            (void *)TempBuf,\n            TempSz,\n            (long long)InValue,\n            (unsigned long long)InValue,\n            IsUnsigned ? 1 : 0,\n            (int)RadixType);\n\n    fclose(f);\n}\n\nstatic void UtAssert_LogBuffer(const char *stage, char *TempBuf, size_t TempSz)\n{\n    FILE *f = fopen(\"/tmp/logs/2303.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    if (TempBuf == NULL)\n    {\n        fprintf(f, \"[BUF] stage=%s TempBuf=NULL\\n\", stage);\n        fclose(f);\n        return;\n    }\n\n    if (TempSz == 0)\n    {\n        fprintf(f, \"[BUF] stage=%s TempSz=0 (no space to store string)\\n\", stage);\n        fclose(f);\n        return;\n    }\n\n    /* Print buffer content safely: iterate up to TempSz-1 and stop at NUL. Non-printable\n       characters are emitted as hex escapes for clarity. */\n    fprintf(f, \"[BUF] stage=%s content='\", stage);\n    size_t i;\n    for (i = 0; i < (TempSz - 1) && TempBuf[i] != '\\0'; ++i)\n    {\n        unsigned char c = (unsigned char)TempBuf[i];\n        if (c >= 32 && c < 127)\n        {\n            fputc(c, f);\n        }\n        else\n        {\n            fprintf(f, \"\\\\x%02x\", c);\n        }\n    }\n    fprintf(f, \"'\\n\");\n\n    /* If the string was truncated by TempSz, note that as well. */\n    if (i == (TempSz - 1) && TempBuf[i] != '\\0')\n    {\n        fprintf(f, \"[BUF] stage=%s (string may have been truncated to fit TempSz)\\n\", stage);\n    }\n\n    fclose(f);\n}\n\nstatic const char *UtAssert_GetValueText(char *TempBuf, size_t TempSz, UT_IntCheck_t InValue, bool IsUnsigned,\n                                         UtAssert_Radix_t RadixType)\n{\n    /* Log initial metadata for this call. */\n    UtAssert_LogMeta(\"entry\", TempBuf, TempSz, InValue, IsUnsigned, RadixType);\n\n    if (RadixType == UtAssert_Radix_BOOLEAN)\n    {\n        if (InValue != 0)\n        {\n            UtAssert_LogMeta(\"BOOLEAN-true-before\", TempBuf, TempSz, InValue, IsUnsigned, RadixType);\n            snprintf(TempBuf, TempSz, \"true\");\n            UtAssert_LogBuffer(\"BOOLEAN-true-after\", TempBuf, TempSz);\n        }\n        else\n        {\n            UtAssert_LogMeta(\"BOOLEAN-false-before\", TempBuf, TempSz, InValue, IsUnsigned, RadixType);\n            snprintf(TempBuf, TempSz, \"false\");\n            UtAssert_LogBuffer(\"BOOLEAN-false-after\", TempBuf, TempSz);\n        }\n    }\n    else if (RadixType == UtAssert_Radix_OCTAL)\n    {\n        UtAssert_LogMeta(\"OCTAL-before\", TempBuf, TempSz, InValue, IsUnsigned, RadixType);\n        snprintf(TempBuf, TempSz, \"0%lo\", (unsigned long)InValue);\n        UtAssert_LogBuffer(\"OCTAL-after\", TempBuf, TempSz);\n    }\n    else if (RadixType == UtAssert_Radix_HEX)\n    {\n        UtAssert_LogMeta(\"HEX-before\", TempBuf, TempSz, InValue, IsUnsigned, RadixType);\n        snprintf(TempBuf, TempSz, \"0x%lx\", (unsigned long)InValue);\n        UtAssert_LogBuffer(\"HEX-after\", TempBuf, TempSz);\n    }\n    else if (IsUnsigned)\n    {\n        UtAssert_LogMeta(\"UNSIGNED-before\", TempBuf, TempSz, InValue, IsUnsigned, RadixType);\n        snprintf(TempBuf, TempSz, \"%lu\", (unsigned long)InValue);\n        UtAssert_LogBuffer(\"UNSIGNED-after\", TempBuf, TempSz);\n    }\n    else\n    {\n        UtAssert_LogMeta(\"SIGNED-before\", TempBuf, TempSz, InValue, IsUnsigned, RadixType);\n        snprintf(TempBuf, TempSz, \"%ld\", (long)InValue);\n        UtAssert_LogBuffer(\"SIGNED-after\", TempBuf, TempSz);\n    }\n\n    UtAssert_LogMeta(\"exit\", TempBuf, TempSz, InValue, IsUnsigned, RadixType);\n    return TempBuf;\n}"
}