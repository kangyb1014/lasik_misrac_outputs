{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call memset(NewList, 0, ActualSize) is invoked without checking the result of malloc(). If malloc(ActualSize) returns NULL (out-of-memory) and ActualSize > 0, then memset is called with a NULL pointer and a non\u2011zero size, which is undefined and can result in an out\u2011of\u2011bounds access of the object referenced by the pointer parameter. This violates MISRA C 2023 Rule 21.17. (Additionally, an integer overflow when computing ActualSize could lead to other runtime out\u2011of\u2011bounds writes later in the function, but the direct string.h violation is the unchecked memset on a possibly NULL pointer.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Create code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2335.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_Create as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_Create:\n```c\nUtListHead_t *UtList_Create(uint32 NumTags)\n{\n    struct ListAllocator\n    {\n        UtListHead_t Head;\n        UtListNode_t Tags[];\n    };\n    struct ListAllocator *NewList;\n    UtListNode_t *        TagHead;\n    size_t                ActualSize;\n    uint32                i;\n\n    ActualSize = sizeof(struct ListAllocator) + (sizeof(UtListNode_t) * NumTags);\n    NewList    = (struct ListAllocator *)malloc(ActualSize);\n\n    memset(NewList, 0, ActualSize);\n\n    NewList->Head.Tags         = NewList->Tags;\n    NewList->Head.NumberOfTags = NumTags;\n\n    for (i = 0; i < NumTags; ++i)\n    {\n        TagHead       = &NewList->Head.Tags[i];\n        TagHead->Tag  = i;\n        TagHead->Next = TagHead;\n        TagHead->Prev = TagHead;\n    }\n\n    return &NewList->Head;\n}\n```\n</target_code>\nPlease provide the modified UtList_Create code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Minimal type definitions so this snippet is self-contained and compilable. */\ntypedef uint32_t uint32;\n\ntypedef struct UtListNode\n{\n    uint32 Tag;\n    struct UtListNode *Next;\n    struct UtListNode *Prev;\n} UtListNode_t;\n\ntypedef struct UtListHead\n{\n    UtListNode_t *Tags;\n    uint32 NumberOfTags;\n} UtListHead_t;\n\n/* Logging helper that appends messages to /tmp/logs/2335.txt. */\nstatic void UtList_Log(const char *fmt, ...)\n{\n    /* Ensure directory exists (ignore errors). */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    FILE *f = fopen(\"/tmp/logs/2335.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified UtList_Create with logging probes. Preserves original logic. */\nUtListHead_t *UtList_Create(uint32 NumTags)\n{\n    struct ListAllocator\n    {\n        UtListHead_t Head;\n        UtListNode_t Tags[];\n    };\n    struct ListAllocator *NewList;\n    UtListNode_t *        TagHead;\n    size_t                ActualSize;\n    uint32                i;\n\n    UtList_Log(\"UtList_Create: entered; NumTags=%u\", NumTags);\n\n    ActualSize = sizeof(struct ListAllocator) + (sizeof(UtListNode_t) * NumTags);\n    UtList_Log(\"Computed ActualSize=%zu (sizeof(ListAllocator)=%zu, sizeof(UtListNode_t)=%zu, NumTags=%u)\",\n               ActualSize, sizeof(struct ListAllocator), sizeof(UtListNode_t), NumTags);\n\n    NewList = (struct ListAllocator *)malloc(ActualSize);\n    UtList_Log(\"malloc returned %p\", (void *)NewList);\n\n    /* Probe immediately before the memset that is the potential violation point. */\n    UtList_Log(\"About to call memset(NewList=%p, 0, ActualSize=%zu)\", (void *)NewList, ActualSize);\n\n    memset(NewList, 0, ActualSize);\n\n    UtList_Log(\"memset completed (caller did not check malloc before memset)\");\n\n    NewList->Head.Tags         = NewList->Tags;\n    NewList->Head.NumberOfTags = NumTags;\n\n    UtList_Log(\"Initialized head: Tags=%p NumberOfTags=%u\",\n               (void *)NewList->Head.Tags, NewList->Head.NumberOfTags);\n\n    for (i = 0; i < NumTags; ++i)\n    {\n        TagHead       = &NewList->Head.Tags[i];\n        TagHead->Tag  = i;\n        TagHead->Next = TagHead;\n        TagHead->Prev = TagHead;\n        UtList_Log(\"Initialized Tag[%u] at %p (Tag=%u)\", i, (void *)TagHead, TagHead->Tag);\n    }\n\n    UtList_Log(\"UtList_Create: returning head at %p\", (void *)&NewList->Head);\n    return &NewList->Head;\n}\n"
}