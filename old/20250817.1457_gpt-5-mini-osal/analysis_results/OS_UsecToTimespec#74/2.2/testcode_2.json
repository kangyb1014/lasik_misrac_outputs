{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(&timeout, 0, sizeof(timeout)) is redundant: immediately afterwards both timeout.it_value and timeout.it_interval are fully assigned by OS_UsecToTimespec, which sets tv_sec and tv_nsec for each timespec. Removing the memset would not change program behavior for the shown code, so this operation is dead code under MISRA C 2023 Rule 2.2 (unless there are additional, unspecified fields in struct itimerspec that must be zeroed on some platform).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_UsecToTimespec code that contains useful probe functions that print useful logs to a file \"/tmp/logs/594.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_UsecToTimespec as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_UsecToTimespec:\n```c\nstatic void OS_UsecToTimespec(uint32 usecs, struct timespec *time_spec)\n{\n    if (usecs < 1000000)\n    {\n        time_spec->tv_nsec = (usecs * 1000);\n        time_spec->tv_sec  = 0;\n    }\n    else\n    {\n        time_spec->tv_sec  = usecs / 1000000;\n        time_spec->tv_nsec = (usecs % 1000000) * 1000;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_UsecToTimespec code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\nstatic void OS_UsecToTimespec(uint32 usecs, struct timespec *time_spec)\n{\n    /* Probe: log entry and initial state. Open in append mode so multiple calls are recorded. */\n    FILE *log = fopen(\"/tmp/logs/594.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_UsecToTimespec: entry usecs=%u time_spec=%p\\n\", (unsigned)usecs, (void *)time_spec);\n        if (time_spec != NULL)\n        {\n            /* Log what is currently stored in the timespec prior to modification. */\n            fprintf(log, \"  before: tv_sec=%lld tv_nsec=%lld\\n\",\n                    (long long)time_spec->tv_sec,\n                    (long long)time_spec->tv_nsec);\n        }\n        else\n        {\n            fprintf(log, \"  before: time_spec is NULL\\n\");\n        }\n    }\n\n    if (usecs < 1000000)\n    {\n        if (log) fprintf(log, \"  branch: usecs < 1000000\\n\");\n        time_spec->tv_nsec = (usecs * 1000);\n        time_spec->tv_sec  = 0;\n        if (log) fprintf(log, \"  assigned: tv_sec=%lld tv_nsec=%lld\\n\",\n                         (long long)time_spec->tv_sec,\n                         (long long)time_spec->tv_nsec);\n    }\n    else\n    {\n        if (log) fprintf(log, \"  branch: usecs >= 1000000\\n\");\n        time_spec->tv_sec  = usecs / 1000000;\n        time_spec->tv_nsec = (usecs % 1000000) * 1000;\n        if (log) fprintf(log, \"  assigned: tv_sec=%lld tv_nsec=%lld\\n\",\n                         (long long)time_spec->tv_sec,\n                         (long long)time_spec->tv_nsec);\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_UsecToTimespec: exit time_spec=%p final tv_sec=%lld tv_nsec=%lld\\n\\n\",\n                (void *)time_spec,\n                (long long)time_spec->tv_sec,\n                (long long)time_spec->tv_nsec);\n        fclose(log);\n    }\n}\n"
}