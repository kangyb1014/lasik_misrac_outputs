{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the called function OS_CountSemTimedWait_Impl has the prototype int32 OS_CountSemTimedWait_Impl(OS_object_token_t *token, uint32 msecs) (i.e. the parameter is a pointer to non-const) but the implementation does not modify the pointed-to token, then Rule 8.13 is violated. In that situation the pointer parameter should be qualified as const (const OS_object_token_t *token) or the local variable should be declared const so the pointer points to a const-qualified type.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemTimedWait code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1187.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemTimedWait as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemTimedWait:\n```c\nint32 OS_CountSemTimedWait(osal_id_t sem_id, uint32 msecs)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemTimedWait_Impl(&token, msecs);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemTimedWait code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe helpers: write logs to /tmp/logs/1187.txt */\nstatic void probe_log_header(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1187.txt\", \"a\");\n    if (f == NULL) return;\n    fprintf(f, \"--- %s\\n\", msg);\n    fclose(f);\n}\n\nstatic void probe_log_fmt(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/1187.txt\", \"a\");\n    if (f == NULL) return;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic void probe_log_token_bytes(const char *label, const OS_object_token_t *token)\n{\n    size_t i;\n    const unsigned char *p = (const unsigned char *)token;\n    FILE *f = fopen(\"/tmp/logs/1187.txt\", \"a\");\n    if (f == NULL) return;\n\n    fprintf(f, \"%s: token bytes (size=%zu):\", label, sizeof(*token));\n    for (i = 0; i < sizeof(*token); ++i)\n    {\n        fprintf(f, \" %02X\", (unsigned) p[i]);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CountSemTimedWait(osal_id_t sem_id, uint32 msecs)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and parameters */\n    probe_log_header(\"OS_CountSemTimedWait ENTER\");\n    probe_log_fmt(\"sem_id=0x%08X msecs=%u\\n\", (unsigned) sem_id, (unsigned) msecs);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    probe_log_fmt(\"OS_ObjectIdGetById returned %d\\n\", (int) return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Capture token bytes before calling the implementation */\n        unsigned char before_buf[sizeof(OS_object_token_t)];\n        unsigned char after_buf[sizeof(OS_object_token_t)];\n\n        memcpy(before_buf, &token, sizeof(before_buf));\n        probe_log_token_bytes(\"BEFORE_IMPL\", &token);\n\n        /* Call the implementation as in original logic */\n        return_code = OS_CountSemTimedWait_Impl(&token, msecs);\n\n        /* Capture token bytes after the call to detect any modification */\n        memcpy(after_buf, &token, sizeof(after_buf));\n        probe_log_token_bytes(\"AFTER_IMPL\", &token);\n\n        /* Compare to see whether the implementation modified the token */\n        if (memcmp(before_buf, after_buf, sizeof(before_buf)) == 0)\n        {\n            probe_log_fmt(\"Token unchanged by OS_CountSemTimedWait_Impl\\n\");\n        }\n        else\n        {\n            probe_log_fmt(\"Token CHANGED by OS_CountSemTimedWait_Impl\\n\");\n        }\n\n        probe_log_fmt(\"OS_CountSemTimedWait_Impl returned %d\\n\", (int) return_code);\n    }\n    else\n    {\n        probe_log_fmt(\"Skipping Impl call due to earlier error (code=%d)\\n\", (int) return_code);\n    }\n\n    probe_log_header(\"OS_CountSemTimedWait EXIT\");\n    return return_code;\n}\n"
}