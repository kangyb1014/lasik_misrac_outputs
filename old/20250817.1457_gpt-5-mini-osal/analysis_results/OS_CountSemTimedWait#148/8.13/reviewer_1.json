{
  "user_message": "An agent A claimed that the following OS_CountSemTimedWait code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CountSemTimedWait.\n```c\nint32 OS_CountSemTimedWait(osal_id_t sem_id, uint32 msecs)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_CountSemTimedWait_Impl(&token, msecs);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If the called function OS_CountSemTimedWait_Impl has the prototype int32 OS_CountSemTimedWait_Impl(OS_object_token_t *token, uint32 msecs) (i.e. the parameter is a pointer to non-const) but the implementation does not modify the pointed-to token, then Rule 8.13 is violated. In that situation the pointer parameter should be qualified as const (const OS_object_token_t *token) or the local variable should be declared const so the pointer points to a const-qualified type.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log_header(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1187.txt\", \"a\");\n    if (f == NULL) return;\n    fprintf(f, \"--- %s\\n\", msg);\n    fclose(f);\n}\nstatic void probe_log_fmt(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/1187.txt\", \"a\");\n    if (f == NULL) return;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\nstatic void probe_log_token_bytes(const char *label, const OS_object_token_t *token)\n{\n    size_t i;\n    const unsigned char *p = (const unsigned char *)token;\n    FILE *f = fopen(\"/tmp/logs/1187.txt\", \"a\");\n    if (f == NULL) return;\n\n    fprintf(f, \"%s: token bytes (size=%zu):\", label, sizeof(*token));\n    for (i = 0; i < sizeof(*token); ++i)\n    {\n        fprintf(f, \" %02X\", (unsigned) p[i]);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CountSemTimedWait(osal_id_t sem_id, uint32 msecs)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Log entry and parameters */\n    probe_log_header(\"OS_CountSemTimedWait ENTER\");\n    probe_log_fmt(\"sem_id=0x%08X msecs=%u\\n\", (unsigned) sem_id, (unsigned) msecs);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    probe_log_fmt(\"OS_ObjectIdGetById returned %d\\n\", (int) return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Capture token bytes before calling the implementation */\n        unsigned char before_buf[sizeof(OS_object_token_t)];\n        unsigned char after_buf[sizeof(OS_object_token_t)];\n\n        memcpy(before_buf, &token, sizeof(before_buf));\n        probe_log_token_bytes(\"BEFORE_IMPL\", &token);\n\n        /* Call the implementation as in original logic */\n        return_code = OS_CountSemTimedWait_Impl(&token, msecs);\n\n        /* Capture token bytes after the call to detect any modification */\n        memcpy(after_buf, &token, sizeof(after_buf));\n        probe_log_token_bytes(\"AFTER_IMPL\", &token);\n\n        /* Compare to see whether the implementation modified the token */\n        if (memcmp(before_buf, after_buf, sizeof(before_buf)) == 0)\n        {\n            probe_log_fmt(\"Token unchanged by OS_CountSemTimedWait_Impl\\n\");\n        }\n        else\n        {\n            probe_log_fmt(\"Token CHANGED by OS_CountSemTimedWait_Impl\\n\");\n        }\n\n        probe_log_fmt(\"OS_CountSemTimedWait_Impl returned %d\\n\", (int) return_code);\n    }\n    else\n    {\n        probe_log_fmt(\"Skipping Impl call due to earlier error (code=%d)\\n\", (int) return_code);\n    }\n\n    probe_log_header(\"OS_CountSemTimedWait EXIT\");\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\n--- OS_CountSemTimedWait ENTER\nsem_id=0xDEADBEEF msecs=1000\nOS_ObjectIdGetById returned -35\nSkipping Impl call due to earlier error (code=-35)\n--- OS_CountSemTimedWait EXIT\n--- OS_CountSemTimedWait ENTER\nsem_id=0x00000000 msecs=1000\nOS_ObjectIdGetById returned -35\nSkipping Impl call due to earlier error (code=-35)\n--- OS_CountSemTimedWait EXIT\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. MISRA Rule 8.13 is about using const-qualified pointee types where possible and applies to declarations (for example a function parameter that does not modify the pointee should be declared as a pointer-to-const). In the code shown the caller creates a non-const local variable and passes its address to a function that (as declared) takes a non-const pointer \u2014 those types match, so the caller does not itself violate Rule 8.13. If the implementation/prototype OS_CountSemTimedWait_Impl were declared to take a non-const pointer but in fact does not modify the token, the omission of const belongs in the callee's prototype/definition, not in this caller. You also cannot make the local variable const and pass &token to a function expecting a non-const pointer without changing the callee signature (that would be a qualifier-mismatch). Finally, the provided test log shows the implementation was never invoked (OS_ObjectIdGetById returned an error), so no runtime evidence was produced that the token would be unchanged. The report therefore misattributes a Rule 8.13 violation to this caller; the correct fix (if any) would be to change the implementation/prototype to accept a const pointer, not to change the caller to declare the local as const."
}