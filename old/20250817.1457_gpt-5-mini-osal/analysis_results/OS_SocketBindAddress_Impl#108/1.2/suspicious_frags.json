{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SocketBindAddress_Impl:\n```c\nint32 OS_SocketBindAddress_Impl(const OS_object_token_t *token, const OS_SockAddr_t *Addr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&Addr->AddrData;\n\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    if (addrlen == 0)\n    {\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    os_result = bind(impl->fd, sa, addrlen);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"bind: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SocketBindAddress_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_impl_file_internal_record_t OS_impl_filehandle_table[OS_MAX_NUM_OPEN_FILES]\n...\ntypedef struct\n{\n    int  fd;\n    bool selectable;\n} OS_impl_file_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    size_t            ActualLength; /**< @brief Length of the actual address data */\n    OS_SockAddrData_t AddrData;     /**< @brief Abstract Address data */\n} OS_SockAddr_t\n...\ntypedef int32_t   int32\n...\n#define OS_NETWORK_SUPPORTS_IPV6 \n...\n#define OS_DEBUG(__VA_ARGS__) \n...\n#define OS_ERR_BAD_ADDRESS (-34)\n...\n#define OS_ERROR (-1)\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I reviewed the entire function and the related symbol definitions for occurrences of compiler-specific language extensions (examples to look for: __attribute__ or other __* identifiers, typeof, statement-expressions ({ ... }), inline asm, nested functions, asm, builtin_*, GCC/Clang/MSC specific keywords, nonstandard storage-class specifiers, or other documented compiler extensions). None are present in the provided code. Specific items examined and why they are not MISRA Rule 1.2 violations: \n\n- OS_OBJECT_TABLE_GET(...) macro usage: this is a plain preprocessor macro and its use of & and indexing (&tbl[OS_ObjectIndexFromToken(&(tok))]) is standard C; taking the address of a dereferenced pointer (&(*token)) is valid C and not a compiler extension. \n- Conditional compilation (#ifdef OS_NETWORK_SUPPORTS_IPV6): standard preprocessor usage; the macro is defined in the additional code via #define OS_NETWORK_SUPPORTS_IPV6 which is normal. \n- Casts such as (const struct sockaddr *)&Addr->AddrData and use of sizeof(...) are standard C. \n- Use of POSIX types/macros and functions (socklen_t, AF_INET, AF_INET6, bind, strerror, errno) are platform/OS APIs, not compiler language extensions. \n- Typedefs (int32_t -> int32), struct definitions, extern array declarations, and simple macros (OS_DEBUG, OS_ERR_BAD_ADDRESS, etc.) are standard C constructs. \n\nBecause no compiler-specific extensions or nonstandard language features are present in the provided code, there are no fragments that need to be reported for investigation under MISRA C 2023 Rule 1.2."
}