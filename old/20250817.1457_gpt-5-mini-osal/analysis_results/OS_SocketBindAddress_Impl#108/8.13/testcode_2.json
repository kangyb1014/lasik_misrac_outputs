{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'impl' is declared as OS_impl_file_internal_record_t * but in this function it is only read (used to access impl->fd for bind) and never modified. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible \u2014 e.g. declare as 'const OS_impl_file_internal_record_t *impl' (the macro result can be assigned to a pointer-to-const). Therefore the current non-const pointer violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketBindAddress_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/867.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketBindAddress_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketBindAddress_Impl:\n```c\nint32 OS_SocketBindAddress_Impl(const OS_object_token_t *token, const OS_SockAddr_t *Addr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&Addr->AddrData;\n\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    if (addrlen == 0)\n    {\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    os_result = bind(impl->fd, sa, addrlen);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"bind: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketBindAddress_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <stdint.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/867.txt\n * This function is intentionally small and only reads state; it does not\n * modify program behaviour. It is used to capture the control path and\n * variables relevant to the reported Rule 8.13 scenario. */\nstatic void OS_SocketBindAddress_Log(const OS_object_token_t *token,\n                                     const OS_impl_file_internal_record_t *impl,\n                                     const struct sockaddr *sa,\n                                     socklen_t addrlen,\n                                     int os_result,\n                                     int saved_errno)\n{\n    FILE *fp = fopen(\"/tmp/logs/867.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging fails, do not change program behaviour. */\n        return;\n    }\n\n    fprintf(fp, \"--- OS_SocketBindAddress_Impl log entry ---\\n\");\n    fprintf(fp, \"token ptr: %p\\n\", (const void *)token);\n    fprintf(fp, \"impl ptr: %p\\n\", (const void *)impl);\n    if (impl != NULL)\n    {\n        /* Log the file descriptor stored in the implementation record. */\n        fprintf(fp, \"impl->fd: %d\\n\", impl->fd);\n    }\n    else\n    {\n        fprintf(fp, \"impl is NULL\\n\");\n    }\n\n    if (sa != NULL)\n    {\n        fprintf(fp, \"sa->sa_family: %d\\n\", (int)sa->sa_family);\n    }\n    else\n    {\n        fprintf(fp, \"sa is NULL\\n\");\n    }\n\n    fprintf(fp, \"addrlen: %u\\n\", (unsigned)addrlen);\n    fprintf(fp, \"bind return value: %d\\n\", os_result);\n    if (os_result < 0)\n    {\n        fprintf(fp, \"bind errno: %d (%s)\\n\", saved_errno, strerror(saved_errno));\n    }\n    fprintf(fp, \"-----------------------------------------\\n\\n\");\n\n    fclose(fp);\n}\n\nint32 OS_SocketBindAddress_Impl(const OS_object_token_t *token, const OS_SockAddr_t *Addr)\n{\n    int                             os_result;\n    socklen_t                       addrlen;\n    const struct sockaddr *         sa;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    sa = (const struct sockaddr *)&Addr->AddrData;\n\n    switch (sa->sa_family)\n    {\n        case AF_INET:\n            addrlen = sizeof(struct sockaddr_in);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrlen = sizeof(struct sockaddr_in6);\n            break;\n#endif\n        default:\n            addrlen = 0;\n            break;\n    }\n\n    if (addrlen == 0)\n    {\n        /* Log the early exit reason and current state */\n        OS_SocketBindAddress_Log(token, impl, sa, addrlen, -1, errno);\n        return OS_ERR_BAD_ADDRESS;\n    }\n\n    /* Log state just before calling bind to capture impl and address info */\n    OS_SocketBindAddress_Log(token, impl, sa, addrlen, 0, 0);\n\n    os_result = bind(impl->fd, sa, addrlen);\n    if (os_result < 0)\n    {\n        int saved_errno = errno; /* capture errno for logging */\n        OS_DEBUG(\"bind: %s\\n\", strerror(saved_errno));\n\n        /* Log failure including errno and state */\n        OS_SocketBindAddress_Log(token, impl, sa, addrlen, os_result, saved_errno);\n        return OS_ERROR;\n    }\n\n    /* Log successful bind */\n    OS_SocketBindAddress_Log(token, impl, sa, addrlen, os_result, 0);\n\n    return OS_SUCCESS;\n}\n"
}