{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if OS_SymbolLookup_Static is declared with a non-const parameter for the symbol name (for example: int32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, char *SymbolName, void *arg)). In that case the call staticsym_status = OS_SymbolLookup_Static(SymbolAddress, SymbolName, NULL); passes a const char * (SymbolName) to a non-const char * parameter, discarding the const qualifier and thus violating MISRA C 2023 Rule 8.13. If, however, OS_SymbolLookup_Static's prototype already takes a const char * for the symbol name, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1715.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolLookup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup:\n```c\nint32 OS_SymbolLookup(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32 return_code;\n    int32 staticsym_status;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(SymbolAddress);\n    OS_CHECK_POINTER(SymbolName);\n\n    /*\n     * attempt to find the symbol in the symbol table\n     */\n    return_code = OS_SymbolLookup_Impl(SymbolAddress, SymbolName);\n\n    /*\n     * If the OS call did not find the symbol or the loader is\n     * disabled, then check if a static symbol table is present\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        staticsym_status = OS_SymbolLookup_Static(SymbolAddress, SymbolName, NULL);\n\n        /*\n         * Only overwrite the return code if static lookup was successful.\n         * Otherwise keep the error code from the low level implementation.\n         */\n        if (staticsym_status == OS_SUCCESS)\n        {\n            return_code = staticsym_status;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolLookup code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/*\n * Probe logging helper: append human-readable events to /tmp/logs/1715.txt\n * This function intentionally does not modify any of the input pointers\n * and does not discard const qualifiers. It merely logs pointer values\n * and a short, truncated copy of the symbol name (if present).\n */\nstatic void OS_SymbolLookup_Log(const cpuaddr *SymbolAddress, const char *SymbolName, const char *event, int32 code)\n{\n    FILE *f = fopen(\"/tmp/logs/1715.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, silently continue to preserve original behavior */\n        return;\n    }\n\n    char namebuf[129];\n    namebuf[0] = '\\0';\n    if (SymbolName != NULL)\n    {\n        /* Copy at most 128 chars to avoid excessively long log lines and ensure NUL termination */\n        strncpy(namebuf, SymbolName, sizeof(namebuf) - 1);\n        namebuf[sizeof(namebuf) - 1] = '\\0';\n    }\n\n    /* Log event, returned/inspected codes, pointer values and truncated name */\n    fprintf(f, \"OS_SymbolLookup: event=%s, code=%d, SymbolAddress=%p, SymbolName_ptr=%p, SymbolName=\\\"%s\\\"\\n\",\n            (event != NULL) ? event : \"(null)\", (int)code, (void *)SymbolAddress, (void *)SymbolName,\n            (SymbolName != NULL) ? namebuf : \"(null)\");\n\n    fclose(f);\n}\n\nint32 OS_SymbolLookup(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32 return_code;\n    int32 staticsym_status;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(SymbolAddress);\n    OS_CHECK_POINTER(SymbolName);\n\n    /* Log entry and parameters before calling platform-specific lookup */\n    OS_SymbolLookup_Log(SymbolAddress, SymbolName, \"entry_before_impl\", 0);\n\n    /*\n     * attempt to find the symbol in the symbol table\n     */\n    return_code = OS_SymbolLookup_Impl(SymbolAddress, SymbolName);\n\n    /* Log result from platform-specific implementation */\n    OS_SymbolLookup_Log(SymbolAddress, SymbolName, \"after_impl\", return_code);\n\n    /*\n     * If the OS call did not find the symbol or the loader is\n     * disabled, then check if a static symbol table is present\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log that we will attempt the static lookup. This is the site\n         * that can reveal a qualifier discard if the static prototype\n         * expects a non-const char * while SymbolName is const char *.\n         * We log the pointer and contents so the mismatch can be evidenced. */\n        OS_SymbolLookup_Log(SymbolAddress, SymbolName, \"before_static_call\", return_code);\n\n        staticsym_status = OS_SymbolLookup_Static(SymbolAddress, SymbolName, NULL);\n\n        /* Log the outcome of the static lookup */\n        OS_SymbolLookup_Log(SymbolAddress, SymbolName, \"after_static_call\", staticsym_status);\n\n        /*\n         * Only overwrite the return code if static lookup was successful.\n         * Otherwise keep the error code from the low level implementation.\n         */\n        if (staticsym_status == OS_SUCCESS)\n        {\n            return_code = staticsym_status;\n            OS_SymbolLookup_Log(SymbolAddress, SymbolName, \"static_success_overwrite\", return_code);\n        }\n    }\n\n    /* Final return logging */\n    OS_SymbolLookup_Log(SymbolAddress, SymbolName, \"return\", return_code);\n\n    return return_code;\n}\n"
}