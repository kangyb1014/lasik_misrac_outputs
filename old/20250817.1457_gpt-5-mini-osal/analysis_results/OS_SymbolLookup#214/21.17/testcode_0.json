{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(StaticSym->Name, SymbolName) and strcmp(StaticSym->Module, ModuleName) without guaranteeing that the pointed-to objects are valid, null-terminated strings. Although StaticSym->Name is tested for NULL earlier, there is no check that either StaticSym->Name or SymbolName (or StaticSym->Module when ModuleName != NULL) is a properly terminated buffer of known bounds. If SymbolName is non-NULL but not null-terminated (or if StaticSym->Module is NULL while ModuleName != NULL), strcmp may read beyond the object bounds (or dereference NULL), violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1719.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolLookup as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup:\n```c\nint32 OS_SymbolLookup(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32 return_code;\n    int32 staticsym_status;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(SymbolAddress);\n    OS_CHECK_POINTER(SymbolName);\n\n    /*\n     * attempt to find the symbol in the symbol table\n     */\n    return_code = OS_SymbolLookup_Impl(SymbolAddress, SymbolName);\n\n    /*\n     * If the OS call did not find the symbol or the loader is\n     * disabled, then check if a static symbol table is present\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        staticsym_status = OS_SymbolLookup_Static(SymbolAddress, SymbolName, NULL);\n\n        /*\n         * Only overwrite the return code if static lookup was successful.\n         * Otherwise keep the error code from the low level implementation.\n         */\n        if (staticsym_status == OS_SUCCESS)\n        {\n            return_code = staticsym_status;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolLookup code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe/logging helpers for capturing control flow and state related to\n * OS_SymbolLookup without changing core logic. Logs are appended to\n * /tmp/logs/1719.txt so other agents can reproduce and inspect the\n * sequence of calls and pointer values that may lead to a string\n * handling violation in deeper code (e.g. strcmp usage inside the\n * static symbol lookup implementation).\n *\n * These helpers intentionally avoid dereferencing user-supplied\n * string pointers to prevent introducing new undefined behavior.\n */\nstatic void OS_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1719.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fflush(f);\n    fclose(f);\n}\n\n/* OS_SymbolLookup - instrumented to emit logs about pointer values and\n * control flow while preserving original behavior as much as possible.\n * No pointer dereferences of SymbolName are performed here; only the\n * pointer values and call outcomes are recorded so that subsequent\n * static lookup code (which may call strcmp) can be correlated with\n * the inputs.\n */\nint32 OS_SymbolLookup(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32 return_code;\n    int32 staticsym_status;\n\n    /* Log entry and raw pointer values. Do not dereference SymbolName. */\n    OS_ProbeLog(\"OS_SymbolLookup ENTRY: SymbolAddress=%p, SymbolName=%p\", (void *)SymbolAddress, (const void *)SymbolName);\n\n    /*\n    ** Check parameters (keep original macros/calls intact)\n    */\n    OS_CHECK_POINTER(SymbolAddress);\n    OS_CHECK_POINTER(SymbolName);\n\n    /* Log that parameters passed the null-pointer checks. */\n    OS_ProbeLog(\"OS_SymbolLookup: parameters validated (non-NULL) SymbolAddress=%p, SymbolName=%p\", (void *)SymbolAddress, (const void *)SymbolName);\n\n    /*\n     * attempt to find the symbol in the symbol table\n     */\n    OS_ProbeLog(\"OS_SymbolLookup: calling OS_SymbolLookup_Impl with SymbolName=%p\", (const void *)SymbolName);\n    return_code = OS_SymbolLookup_Impl(SymbolAddress, SymbolName);\n    OS_ProbeLog(\"OS_SymbolLookup: OS_SymbolLookup_Impl returned %d\", (int)return_code);\n\n    /*\n     * If the OS call did not find the symbol or the loader is\n     * disabled, then check if a static symbol table is present\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ProbeLog(\"OS_SymbolLookup: fallback to static lookup with SymbolName=%p, ModuleName=%p (module assumed NULL here)\", (const void *)SymbolName, (const void *)NULL);\n\n        staticsym_status = OS_SymbolLookup_Static(SymbolAddress, SymbolName, NULL);\n\n        OS_ProbeLog(\"OS_SymbolLookup: OS_SymbolLookup_Static returned %d\", (int)staticsym_status);\n\n        /*\n         * Only overwrite the return code if static lookup was successful.\n         * Otherwise keep the error code from the low level implementation.\n         */\n        if (staticsym_status == OS_SUCCESS)\n        {\n            OS_ProbeLog(\"OS_SymbolLookup: static lookup succeeded, overwriting return_code (was %d)\", (int)return_code);\n            return_code = staticsym_status;\n        }\n        else\n        {\n            OS_ProbeLog(\"OS_SymbolLookup: static lookup failed, keeping original return_code=%d\", (int)return_code);\n        }\n    }\n    else\n    {\n        OS_ProbeLog(\"OS_SymbolLookup: symbol found by OS_SymbolLookup_Impl, no static lookup attempted\");\n    }\n\n    OS_ProbeLog(\"OS_SymbolLookup EXIT: returning %d, SymbolAddress=%p, SymbolName=%p\", (int)return_code, (void *)SymbolAddress, (const void *)SymbolName);\n\n    return return_code;\n}\n"
}