{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup:\n```c\nint32 OS_SymbolLookup(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32 return_code;\n    int32 staticsym_status;\n\n    /*\n    ** Check parameters\n    */\n    OS_CHECK_POINTER(SymbolAddress);\n    OS_CHECK_POINTER(SymbolName);\n\n    /*\n     * attempt to find the symbol in the symbol table\n     */\n    return_code = OS_SymbolLookup_Impl(SymbolAddress, SymbolName);\n\n    /*\n     * If the OS call did not find the symbol or the loader is\n     * disabled, then check if a static symbol table is present\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        staticsym_status = OS_SymbolLookup_Static(SymbolAddress, SymbolName, NULL);\n\n        /*\n         * Only overwrite the return code if static lookup was successful.\n         * Otherwise keep the error code from the low level implementation.\n         */\n        if (staticsym_status == OS_SUCCESS)\n        {\n            return_code = staticsym_status;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SymbolLookup:\nint32 OS_SymbolLookup_Impl(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32            status;\n    int32            local_status;\n    OS_object_iter_t iter;\n\n    /* First search global table */\n    status = OS_GenericSymbolLookup_Impl(OSAL_DLSYM_DEFAULT_HANDLE, SymbolAddress, SymbolName);\n\n    /* If not found iterate through module local symbols and break if found */\n    if (status != OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(OS_OBJECT_TYPE_OS_MODULE, &iter);\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            local_status = OS_ModuleSymbolLookup_Impl(&iter.token, SymbolAddress, SymbolName);\n            if (local_status == OS_SUCCESS)\n            {\n                status = local_status;\n                break;\n            }\n        }\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return status;\n}\n...\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n...\nint32 OS_GenericSymbolLookup_Impl(void *dl_handle, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    const char *dlError; /*  Pointer to error string   */\n    void *      Function;\n    int32       status;\n\n    status = OS_ERROR;\n\n    /*\n     * call dlerror() to clear any prior error that might have occurred.\n     */\n    dlerror();\n    Function = dlsym(dl_handle, SymbolName);\n    dlError  = dlerror();\n\n    /*\n     * For the POSIX DL implementation, if the symbol does not exist\n     * then dlerror() is supposed to return non-null.  This is intended\n     * to differentiate between valid symbols which are actually 0/NULL\n     * and invalid symbols that do not exist.\n     *\n     * Some implementations do _not_ implement this detail, and dlerror()\n     * still returns NULL after looking up an invalid symbol name.\n     *\n     * In practice, this is expected to be used for looking up functions\n     * and as such all valid symbols should be non-NULL, so NULL is considered\n     * an error even if the C library doesn't consider this an error.\n     */\n    if (dlError != NULL)\n    {\n        OS_DEBUG(\"Error: %s: %s\\n\", SymbolName, dlError);\n    }\n    else if (Function == NULL)\n    {\n        /* technically not an error per POSIX, but in practice should not happen */\n        OS_DEBUG(\"Error: %s: dlsym() returned NULL\\n\", SymbolName);\n    }\n    else\n    {\n        status = OS_SUCCESS;\n    }\n\n    *SymbolAddress = (cpuaddr)Function;\n\n    return status;\n}\n...\nint32 OS_ModuleSymbolLookup_Impl(const OS_object_token_t *token, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32                             status;\n    OS_impl_module_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n\n    status = OS_GenericSymbolLookup_Impl(impl->dl_handle, SymbolAddress, SymbolName);\n\n    return status;\n}\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\ntypedef uintptr_t cpuaddr\n...\ntypedef int32_t   int32\n...\n#define OS_SUCCESS (0)\n...\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }"
  ],
  "explanation": "Only the usages of strcmp in OS_SymbolLookup_Static are flagged because they invoke string.h string-comparison on pointers that originate outside this function (StaticSym->Name, StaticSym->Module, SymbolName, ModuleName) and thus warrant verification that the referenced objects are valid and NUL-terminated and non-NULL where used. Other code fragments do not use functions from <string.h> (or use bounded/checked APIs) and therefore do not need investigation under MISRA C 2023 Rule 21.17: - OS_SymbolLookup and OS_SymbolLookup_Impl merely forward SymbolName after pointer checks (OS_CHECK_POINTER) and perform lookup logic without calling string.h functions. - OS_GenericSymbolLookup_Impl and OS_ModuleSymbolLookup_Impl use dlsym/dlerror and do not call string.h functions. - The OS_printf implementation uses vsnprintf with explicit bounds checking and manual NUL-termination, protecting against buffer overruns; it does not call functions from <string.h> that are covered by this MISRA rule. - The OS_CHECK_POINTER macro only validates pointer non-nullity (no string.h use). Therefore no other fragments require investigation for Rule 21.17."
}