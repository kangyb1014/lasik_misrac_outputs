{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe OS_DEBUG(\"Error: pthread_mutexattr_settype failed: %s\\n\", strerror(ret)); call is a logging macro that is defined as an empty macro (#define OS_DEBUG(__VA_ARGS__) ). After macro expansion this becomes an empty/null statement that is executed but has no effect; removing it would not change program behaviour, so it is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Posix_TableMutex_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/354.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Posix_TableMutex_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Posix_TableMutex_Init:\n```c\nint32 OS_Posix_TableMutex_Init(osal_objtype_t idtype)\n{\n    int                     ret;\n    int32                   return_code = OS_SUCCESS;\n    pthread_mutexattr_t     mutex_attr;\n    OS_impl_objtype_lock_t *impl;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n    if (impl == NULL)\n    {\n        return OS_SUCCESS;\n    }\n\n    do\n    {\n        /*\n         * initialize the pthread mutex attribute structure with default values\n         */\n        ret = pthread_mutexattr_init(&mutex_attr);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutexattr_init failed: %s\\n\", strerror(ret));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /*\n         * Allow the mutex to use priority inheritance\n         */\n        ret = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutexattr_setprotocol failed: %s\\n\", strerror(ret));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /*\n         * Use normal (faster/non-recursive) mutex implementation\n         * There should not be any instances of OSAL locking its own table more than once.\n         */\n        ret = pthread_mutexattr_settype(&mutex_attr, PTHREAD_MUTEX_NORMAL);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutexattr_settype failed: %s\\n\", strerror(ret));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        ret = pthread_mutex_init(&impl->mutex, &mutex_attr);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutex_init failed: %s\\n\", strerror(ret));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /* create a condition variable with default attributes.\n         * This will be broadcast every time the object table changes */\n        ret = pthread_cond_init(&impl->cond, NULL);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: pthread_cond_init failed: %s\\n\", strerror(ret));\n            return_code = OS_ERROR;\n            break;\n        }\n    } while (0);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_Posix_TableMutex_Init code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe function: append control-flow and state information to a log file.\n * This is intentionally small and non-intrusive so it can be compiled into\n * the existing source file without changing the original logic. */\nstatic void OSAL_probe_log(const char *where, int idtype_val, int ret)\n{\n    FILE *f = fopen(\"/tmp/logs/354.txt\", \"a\");\n    if (f != NULL)\n    {\n        if (ret != 0)\n        {\n            fprintf(f, \"%s: idtype=%d ret=%d strerror=%s\\n\", where, idtype_val, ret, strerror(ret));\n        }\n        else\n        {\n            fprintf(f, \"%s: idtype=%d ret=%d\\n\", where, idtype_val, ret);\n        }\n        fflush(f);\n        fclose(f);\n    }\n}\n\nint32 OS_Posix_TableMutex_Init(osal_objtype_t idtype)\n{\n    int                     ret;\n    int32                   return_code = OS_SUCCESS;\n    pthread_mutexattr_t     mutex_attr;\n    OS_impl_objtype_lock_t *impl;\n\n    impl = OS_impl_objtype_lock_table[idtype];\n    if (impl == NULL)\n    {\n        /* Log the early-return path and state so the behavior can be observed. */\n        OSAL_probe_log(\"impl_is_NULL\", (int)idtype, 0);\n        return OS_SUCCESS;\n    }\n\n    do\n    {\n        /*\n         * initialize the pthread mutex attribute structure with default values\n         */\n        ret = pthread_mutexattr_init(&mutex_attr);\n        if (ret != 0)\n        {\n            /* Log the failure and relevant state before returning */\n            OSAL_probe_log(\"pthread_mutexattr_init_failed\", (int)idtype, ret);\n            OS_DEBUG(\"Error: pthread_mutexattr_init failed: %s\\n\", strerror(ret));\n            return_code = OS_ERROR;\n            break;\n        }\n        else\n        {\n            /* Log successful initialization of the attr structure */\n            OSAL_probe_log(\"pthread_mutexattr_init_ok\", (int)idtype, ret);\n        }\n\n        /*\n         * Allow the mutex to use priority inheritance\n         */\n        ret = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n        if (ret != 0)\n        {\n            OSAL_probe_log(\"pthread_mutexattr_setprotocol_failed\", (int)idtype, ret);\n            OS_DEBUG(\"Error: pthread_mutexattr_setprotocol failed: %s\\n\", strerror(ret));\n            return_code = OS_ERROR;\n            break;\n        }\n        else\n        {\n            OSAL_probe_log(\"pthread_mutexattr_setprotocol_ok\", (int)idtype, ret);\n        }\n\n        /*\n         * Use normal (faster/non-recursive) mutex implementation\n         * There should not be any instances of OSAL locking its own table more than once.\n         */\n        ret = pthread_mutexattr_settype(&mutex_attr, PTHREAD_MUTEX_NORMAL);\n        if (ret != 0)\n        {\n            /* This is the case reported by the other agent; record it in the log. */\n            OSAL_probe_log(\"pthread_mutexattr_settype_failed\", (int)idtype, ret);\n            OS_DEBUG(\"Error: pthread_mutexattr_settype failed: %s\\n\", strerror(ret));\n            return_code = OS_ERROR;\n            break;\n        }\n        else\n        {\n            OSAL_probe_log(\"pthread_mutexattr_settype_ok\", (int)idtype, ret);\n        }\n\n        ret = pthread_mutex_init(&impl->mutex, &mutex_attr);\n        if (ret != 0)\n        {\n            OSAL_probe_log(\"pthread_mutex_init_failed\", (int)idtype, ret);\n            OS_DEBUG(\"Error: pthread_mutex_init failed: %s\\n\", strerror(ret));\n            return_code = OS_ERROR;\n            break;\n        }\n        else\n        {\n            OSAL_probe_log(\"pthread_mutex_init_ok\", (int)idtype, ret);\n        }\n\n        /* create a condition variable with default attributes.\n         * This will be broadcast every time the object table changes */\n        ret = pthread_cond_init(&impl->cond, NULL);\n        if (ret != 0)\n        {\n            OSAL_probe_log(\"pthread_cond_init_failed\", (int)idtype, ret);\n            OS_DEBUG(\"Error: pthread_cond_init failed: %s\\n\", strerror(ret));\n            return_code = OS_ERROR;\n            break;\n        }\n        else\n        {\n            OSAL_probe_log(\"pthread_cond_init_ok\", (int)idtype, ret);\n        }\n    } while (0);\n\n    /* Final state log before returning */\n    OSAL_probe_log(\"returning_from_OS_Posix_TableMutex_Init\", (int)idtype, (return_code == OS_SUCCESS) ? 0 : -1);\n\n    return return_code;\n}\n"
}