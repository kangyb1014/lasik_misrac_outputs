{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_ApplicationShutdown:\n```c\nvoid OS_ApplicationShutdown(uint8 flag)\n{\n    if (flag == true)\n    {\n        OS_SharedGlobalVars.GlobalState = OS_SHUTDOWN_MAGIC_NUMBER;\n    }\n\n    /*\n     * Hook to allow the underlying implementation to do something.\n     * Assuming the main task is sitting in OS_IdleLoop(), this implementation\n     * should do whatever is needed to wake that task up.\n     */\n    OS_ApplicationShutdown_Impl();\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_ApplicationShutdown:\nOS_SharedGlobalVars_t OS_SharedGlobalVars = {\n    .GlobalState     = 0,\n    .PrintfEnabled   = false,\n    .MicroSecPerTick = 0, /* invalid, _must_ be set by implementation init */\n    .TicksPerSecond  = 0, /* invalid, _must_ be set by implementation init */\n    .EventHandler    = NULL,\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    .DebugLevel = 1,\n#endif\n}\n...\n#define OS_SHUTDOWN_MAGIC_NUMBER 0xABADC0DE\n...\ntypedef uint8_t   uint8\n...\nvoid OS_ApplicationShutdown_Impl(void)\n{\n    /*\n     * Raise a signal that is unblocked in OS_IdleLoop(),\n     * which should break it out of the sigsuspend() call.\n     */\n    kill(getpid(), SIGHUP);\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nOS_SharedGlobalVars_t OS_SharedGlobalVars = {\n    .GlobalState     = 0,\n    .PrintfEnabled   = false,\n    .MicroSecPerTick = 0, /* invalid, _must_ be set by implementation init */\n    .TicksPerSecond  = 0, /* invalid, _must_ be set by implementation init */\n    .EventHandler    = NULL,\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    .DebugLevel = 1,\n#endif\n}\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in the shown fragment: this code only initializes a global struct and assigns EventHandler = NULL; it does not declare a pointer type that lacks const qualification. Rule 8.13 concerns pointer declarations/definitions, and the type of EventHandler is not shown here, so you cannot conclude a violation from this fragment alone. (If, however, the OS_SharedGlobalVars_t member EventHandler were declared as a pointer to a non-const type when it is only used for read-only callbacks, that declaration would violate Rule 8.13 \u2014 e.g. using 'void (*EventHandler)(Event_t const *)' would be preferred over 'void (*EventHandler)(Event_t *)'.)"
}