{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGive_Impl:\n```c\nint32 OS_MutSemGive_Impl(const OS_object_token_t *token)\n{\n    int                              status;\n    OS_impl_mutex_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    /*\n     ** Unlock the mutex\n     */\n    status = pthread_mutex_unlock(&(impl->id));\n    if (status != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_MutSemGive_Impl:\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_mutex_internal_record_t OS_impl_mutex_table[OS_MAX_MUTEXES]\n...\ntypedef struct\n{\n    pthread_mutex_t id;\n} OS_impl_mutex_internal_record_t\n...\n#define OS_SEM_FAILURE (-6)\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "status = pthread_mutex_unlock(&(impl->id));",
    "OS_impl_mutex_internal_record_t OS_impl_mutex_table[OS_MAX_MUTEXES]",
    "OS_impl_mutex_internal_record_t *impl;",
    "impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);",
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])"
  ],
  "explanation": "Fragments not listed do not need investigation for Rule 8.13: the function parameter is already a pointer to const (const OS_object_token_t *token) so it meets the rule; the pthread_mutex_unlock API requires a non-const pthread_mutex_t * (so passing a non-const pointer to the mutex is necessary and const-qualification would be inappropriate); the mutex table elements and the mutex member types must be modifiable at runtime (they cannot reasonably be const-qualified); simple constants and return-value macros (OS_SEM_FAILURE, OS_SUCCESS) and basic local variable declarations (int status) do not involve pointer-to-data const-qualification concerns for this rule. These points mean the remaining code fragments do not raise additional Rule 8.13 issues."
}