{
  "user_message": "An agent A claimed that the following UT_Stub_GetReturnValuePtr code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of UT_Stub_GetReturnValuePtr.\n```c\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    return ReturnPtr;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'StubPtr' is declared as 'UT_StubTableEntry_t *StubPtr = NULL;' but within UT_Stub_GetReturnValuePtr it is only used for read-only access (reads of Data.Buff.* and EntryType/FuncKey). According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible (e.g. 'const UT_StubTableEntry_t *StubPtr = NULL;'). Therefore this non-const declaration violates Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void UT_Log_Probe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2563.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    fprintf(fp, \"\\n\");\n    va_end(ap);\n\n    fclose(fp);\n}\n\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    ReturnPtr = NULL;\n\n    UT_Log_Probe(\"[UT_Stub_GetReturnValuePtr] Enter: FuncKey=%lu, ReturnSize=%lu, TypeName=%s\",\n                 (unsigned long)FuncKey, (unsigned long)ReturnSize, (TypeName != NULL) ? TypeName : \"(null)\");\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    UT_Log_Probe(\"[UT_Stub_GetReturnValuePtr] UT_GetStubEntry returned StubPtr=%p\", (void *)StubPtr);\n\n    if (StubPtr == NULL)\n    {\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UT_Log_Probe(\"[UT_Stub_GetReturnValuePtr] ERROR: StubPtr is NULL for FuncKey=%lu\", (unsigned long)FuncKey);\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /* Log buffer internals for diagnostic/evidence purposes */\n        UT_Log_Probe(\"[UT_Stub_GetReturnValuePtr] Buffer BasePtr=%p, Position=%lu, ContentTypeStr=%s\",\n                     ReturnPtr,\n                     (unsigned long)StubPtr->Data.Buff.Position,\n                     (StubPtr->Data.Buff.ContentTypeStr != NULL) ? StubPtr->Data.Buff.ContentTypeStr : \"(null)\");\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            UT_Log_Probe(\"[UT_Stub_GetReturnValuePtr] MISMATCH: expected %s(%lu) got %s(%lu)\",\n                         (TypeName != NULL) ? TypeName : \"(null)\", (unsigned long)ReturnSize,\n                         (StubPtr->Data.Buff.ContentTypeStr != NULL) ? StubPtr->Data.Buff.ContentTypeStr : \"(null)\",\n                         (unsigned long)StubPtr->Data.Buff.Position);\n\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    UT_Log_Probe(\"[UT_Stub_GetReturnValuePtr] Exit: ReturnPtr=%p\", ReturnPtr);\n\n    return ReturnPtr;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\n[UT_Stub_GetReturnValuePtr] Enter: FuncKey=94025912442400, ReturnSize=4, TypeName=int32\n[UT_Stub_GetReturnValuePtr] UT_GetStubEntry returned StubPtr=0x55841d1e4700\n[UT_Stub_GetReturnValuePtr] Buffer BasePtr=0x558451418cb0, Position=4, ContentTypeStr=int32\n[UT_Stub_GetReturnValuePtr] Exit: ReturnPtr=0x558451418cb0\n[UT_Stub_GetReturnValuePtr] Enter: FuncKey=94025912442400, ReturnSize=4, TypeName=int32\n[UT_Stub_GetReturnValuePtr] UT_GetStubEntry returned StubPtr=0x55841d1e4700\n[UT_Stub_GetReturnValuePtr] Buffer BasePtr=0x558451418cb0, Position=4, ContentTypeStr=int32\n[UT_Stub_GetReturnValuePtr] Exit: ReturnPtr=0x558451418cb0\n[UT_Stub_GetReturnValuePtr] Enter: FuncKey=94025912442400, ReturnSize=4, TypeName=int32\n[UT_Stub_GetReturnValuePtr] UT_GetStubEntry returned StubPtr=0x55841d1e4700\n[UT_Stub_GetReturnValuePtr] Buffer BasePtr=0x558451418cb0, Position=4, ContentTypeStr=int32\n[UT_Stub_GetReturnValuePtr] Exit: ReturnPtr=0x558451418cb0\n[UT_Stub_GetReturnValuePtr] Enter: FuncKey=94835601937759, ReturnSize=4, TypeName=int32\n[UT_Stub_GetReturnValuePtr] UT_GetStubEntry returned StubPtr=0x5640a25f95a0\n[UT_Stub_GetReturnValuePtr] Buffer BasePtr=0x5640a85cea80, Position=4, ContentTypeStr=int32\n[UT_Stub_GetReturnValuePtr] Exit: ReturnPtr=0x5640a85cea80\n[UT_Stub_GetReturnValuePtr] Enter: FuncKey=94835601937759, ReturnSize=4, TypeName=int32\n[UT_Stub_GetReturnValuePtr] UT_GetStubEntry returned StubPtr=0x5640a25f95a0\n[UT_Stub_GetReturnValuePtr] Buffer BasePtr=0x5640a85cea80, Position=4, ContentTypeStr=int32\n[UT_Stub_GetReturnValuePtr] Exit: ReturnPtr=0x5640a85cea80\n[UT_Stub_GetReturnValuePtr] Enter: FuncKey=94835601937759, ReturnSize=4, TypeName=int32\n[UT_Stub_GetReturnValuePtr] UT_GetStubEntry returned StubPtr=0x5640a25f95a0\n[UT_Stub_GetReturnValuePtr] Buffer BasePtr=0x5640a85cea80, Position=4, ContentTypeStr=int32\n[UT_Stub_GetReturnValuePtr] Exit: ReturnPtr=0x5640a85cea80\n[UT_Stub_GetReturnValuePtr] Enter: FuncKey=94089798322625, ReturnSize=4, TypeName=int32\n[UT_Stub_GetReturnValuePtr] UT_GetStubEntry returned StubPtr=0x5592fd036480\n[UT_Stub_GetReturnValuePtr] Buffer BasePtr=0x559308871c40, Position=4, ContentTypeStr=int32\n[UT_Stub_GetReturnValuePtr] Exit: ReturnPtr=0x559308871c40\n[UT_Stub_GetReturnValuePtr] Enter: FuncKey=94089798322625, ReturnSize=4, TypeName=int32\n[UT_Stub_GetReturnValuePtr] UT_GetStubEntry returned StubPtr=0x5592fd036480\n[UT_Stub_GetReturnValuePtr] Buffer BasePtr=0x559308871c40, Position=4, ContentTypeStr=int32\n[UT_Stub_GetReturnValuePtr] Exit: ReturnPtr=0x559308871c40\n[UT_Stub_GetReturnValuePtr] Enter: FuncKey=94265278451526, ReturnSize=4, TypeName=int32\n[UT_Stub_GetReturnValuePtr] UT_GetStubEntry returned StubPtr=0x55bbd871a360\n[UT_Stub_GetReturnValuePtr] Buffer BasePtr=0x55bbfb33abd0, Position=4, ContentTypeStr=int32\n[UT_Stub_GetReturnValuePtr] Exit: ReturnPtr=0x55bbfb33abd0\n[UT_Stub_GetReturnValuePtr] Enter: FuncKey=94265278451526, ReturnSize=4, TypeName=int32\n[UT_Stub_GetReturnValuePtr] UT_GetStubEntry returned StubPtr=0x55bbd871a360\n[UT_Stub_GetReturnValuePtr] Buffer BasePtr=0x55bbfb33abd0, Position=4, ContentTypeStr=int32\n[UT_Stub_GetReturnValuePtr] Exit: ReturnPtr=0x55bbfb33abd0\n[UT_Stub_GetReturnValuePtr] Enter: FuncKey=94217058179975, ReturnSize=4, TypeName=osal_id_t\n[UT_Stub_GetReturnValuePtr] UT_GetStubEntry returned StubPtr=0x55b09e4ab740\n[UT_Stub_GetReturnValuePtr] Buffer BasePtr=0x55b0dbcc09a0, Position=4, ContentTypeStr=osal_id_t\n[UT_Stub_GetReturnValuePtr] Exit: ReturnPtr=0x55b0dbcc09a0\n[UT_Stub_GetReturnValuePtr] Enter: FuncKey=94217058171619, ReturnSize=4, TypeName=int32\n[UT_Stub_GetReturnValuePtr] UT_GetStubEntry returned StubPtr=0x55b09e4abaa0\n[UT_Stub_GetReturnValuePtr] Buffer BasePtr=0x55b0dbcc09c0, Position=4, ContentTypeStr=int32\n[UT_Stub_GetReturnValuePtr] Exit: ReturnPtr=0x55b0dbcc09c0\n[UT_Stub_GetReturnValuePtr] Enter: FuncKey=94217058160244, ReturnSize=4, TypeName=int32\n[UT_Stub_GetReturnValuePtr] UT_GetStubEntry returned StubPtr=0x55b09e4a9580\n[UT_Stub_GetReturnValuePtr] Buffer BasePtr=0x55b0dbcc09e0, Position=4, ContentTypeStr=int32\n[UT_Stub_GetReturnValuePtr] Exit: ReturnPtr=0x55b0db\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. In UT_Stub_GetReturnValuePtr the local pointer StubPtr is only used for read-only access (reads of members Data.Buff.* and ContentTypeStr); there are no writes through StubPtr in this function. According to MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so declaring StubPtr as const UT_StubTableEntry_t * would be appropriate. Converting the UT_GetStubEntry() result (UT_StubTableEntry_t *) to const UT_StubTableEntry_t * is permitted and would not change behaviour. Therefore the current non-const declaration violates Rule 8.13."
}