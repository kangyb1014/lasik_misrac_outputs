{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf StubPtr->Data.Buff.ContentTypeStr is declared as a non-const pointer (e.g. 'char *ContentTypeStr'), this is a violation. In the fragment the string is only read (used in strcmp) and should be pointed to by a const-qualified type ('const char *ContentTypeStr'), while TypeName is already 'const char *'. Therefore Rule 8.13 is violated in that scenario.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_GetReturnValuePtr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2563.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_GetReturnValuePtr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_GetReturnValuePtr:\n```c\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    return ReturnPtr;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_GetReturnValuePtr code.\n",
  "test_code": "void *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    /* Logging helper: append a single line to the log file. */\n    /* Keep this minimal to avoid changing program behavior. */\n    /* Note: do not call any functions that may not be available in the\n     * compilation unit; using stdio functions which are expected to be\n     * present in the project environment.\n     */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2563.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"ENTRY: UT_Stub_GetReturnValuePtr(FuncKey=%p, ReturnSize=%lu, TypeName=%p\\n\",\n                    (const void *)FuncKey, (unsigned long)ReturnSize, (const void *)TypeName);\n            if (TypeName != NULL)\n            {\n                fprintf(logf, \"       TypeName_str=\\\"%s\\\"\\n\", TypeName);\n            }\n            else\n            {\n                fprintf(logf, \"       TypeName_str=(null)\\n\");\n            }\n            fclose(logf);\n        }\n    }\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    /* Log the result of UT_GetStubEntry */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2563.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"AFTER_UT_GetStubEntry: StubPtr=%p\\n\", (const void *)StubPtr);\n            fclose(logf);\n        }\n    }\n\n    if (StubPtr == NULL)\n    {\n        /* Log before aborting */\n        {\n            FILE *logf = fopen(\"/tmp/logs/2563.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"ERROR: Return buffer invalid (StubPtr == NULL)\\n\");\n                fclose(logf);\n            }\n        }\n\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /* Log buffer state before validation */\n        {\n            const char *ctype = StubPtr->Data.Buff.ContentTypeStr;\n            FILE *logf = fopen(\"/tmp/logs/2563.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"BUFFER_STATE: BasePtr=%p Position=%lu ContentTypeStr_ptr=%p\\n\",\n                        (const void *)ReturnPtr, (unsigned long)StubPtr->Data.Buff.Position, (const void *)ctype);\n                if (ctype != NULL)\n                {\n                    fprintf(logf, \"              ContentTypeStr=\\\"%s\\\"\\n\", ctype);\n                }\n                else\n                {\n                    fprintf(logf, \"              ContentTypeStr=(null)\\n\");\n                }\n                fclose(logf);\n            }\n        }\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        /* Log the comparison values in a safe manner (avoid calling strcmp on NULL). */\n        {\n            int safe_type_cmp = 1; /* non-zero means different */\n            const char *ctype = StubPtr->Data.Buff.ContentTypeStr;\n            if (TypeName == NULL && ctype == NULL)\n            {\n                safe_type_cmp = 0;\n            }\n            else if (TypeName != NULL && ctype != NULL)\n            {\n                /* safe to call strcmp here for logging purposes */\n                safe_type_cmp = strcmp(TypeName, ctype);\n            }\n\n            FILE *logf = fopen(\"/tmp/logs/2563.txt\", \"a\");\n            if (logf != NULL)\n            {\n                fprintf(logf, \"VALIDATION: expected_size=%lu actual_size=%lu size_match=%s\\n\",\n                        (unsigned long)ReturnSize, (unsigned long)StubPtr->Data.Buff.Position,\n                        (StubPtr->Data.Buff.Position == ReturnSize) ? \"true\" : \"false\");\n                if (TypeName != NULL)\n                {\n                    fprintf(logf, \"            expected_type_ptr=%p expected_type=\\\"%s\\\"\\n\",\n                            (const void *)TypeName, TypeName);\n                }\n                else\n                {\n                    fprintf(logf, \"            expected_type_ptr=(null)\\n\");\n                }\n                if (ctype != NULL)\n                {\n                    fprintf(logf, \"            actual_type_ptr=%p actual_type=\\\"%s\\\"\\n\",\n                            (const void *)ctype, ctype);\n                }\n                else\n                {\n                    fprintf(logf, \"            actual_type_ptr=(null)\\n\");\n                }\n                fprintf(logf, \"            safe_type_compare_result=%d\\n\", safe_type_cmp);\n                fclose(logf);\n            }\n        }\n\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            /* Log the mismatch details before failing the assertion */\n            {\n                const char *ctype = StubPtr->Data.Buff.ContentTypeStr;\n                FILE *logf = fopen(\"/tmp/logs/2563.txt\", \"a\");\n                if (logf != NULL)\n                {\n                    fprintf(logf, \"MISMATCH: expected %p(\\\"%s\\\") size=%lu got %p(\\\"%s\\\") size=%lu\\n\",\n                            (const void *)TypeName, (TypeName != NULL) ? TypeName : \"(null)\", (unsigned long)ReturnSize,\n                            (const void *)ctype, (ctype != NULL) ? ctype : \"(null)\", (unsigned long)StubPtr->Data.Buff.Position);\n                    fclose(logf);\n                }\n            }\n\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    /* Log the pointer being returned */\n    {\n        FILE *logf = fopen(\"/tmp/logs/2563.txt\", \"a\");\n        if (logf != NULL)\n        {\n            fprintf(logf, \"EXIT: returning ReturnPtr=%p\\n\", (const void *)ReturnPtr);\n            fclose(logf);\n        }\n    }\n\n    return ReturnPtr;\n}\n"
}