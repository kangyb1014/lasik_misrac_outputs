{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIn UT_SetDataBuffer, when AllocateCopy is true the code allocates StubPtr->Data.Buff.BasePtr with size BufferSize then calls memcpy(StubPtr->Data.Buff.BasePtr, DataBuffer, BufferSize). There is no check that the source object pointed to by DataBuffer is at least BufferSize bytes long. If the caller provides a DataBuffer whose actual object size is smaller than BufferSize (or BufferSize is otherwise incorrect), memcpy will read beyond the bounds of the source object, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_GetReturnValuePtr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2567.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_GetReturnValuePtr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_GetReturnValuePtr:\n```c\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    return ReturnPtr;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_GetReturnValuePtr code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n    FILE *log = fopen(\"/tmp/logs/2567.txt\", \"a\");\n\n    /* Minimal entry log */\n    if (log)\n    {\n        fprintf(log, \"ENTER: UT_Stub_GetReturnValuePtr: FuncKey=%p ReturnSize=%zu TypeName=\\\"%.200s\\\"\\n\",\n                (void *)(uintptr_t)FuncKey, ReturnSize, (TypeName != NULL) ? TypeName : \"(null)\");\n        fflush(log);\n    }\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        if (log)\n        {\n            fprintf(log, \"ERROR: UT_GetStubEntry returned NULL for FuncKey=%p\\n\", (void *)(uintptr_t)FuncKey);\n            fflush(log);\n            fclose(log);\n        }\n\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /* Log the current stub buffer state before performing checks */\n        if (log)\n        {\n            fprintf(log,\n                    \"INFO: StubPtr=%p BasePtr=%p Position=%zu ReturnSize=%zu ContentTypeStr=\\\"%.200s\\\"\\n\",\n                    (void *)StubPtr,\n                    (void *)StubPtr->Data.Buff.BasePtr,\n                    (size_t)StubPtr->Data.Buff.Position,\n                    ReturnSize,\n                    (StubPtr->Data.Buff.ContentTypeStr != NULL) ? StubPtr->Data.Buff.ContentTypeStr : \"(null)\");\n            fflush(log);\n        }\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            if (log)\n            {\n                fprintf(log,\n                        \"MISMATCH: expected %s(%lu) got %s(%lu) -- FuncKey=%p StubPtr=%p\\n\",\n                        (TypeName != NULL) ? TypeName : \"(null)\", (unsigned long)ReturnSize,\n                        (StubPtr->Data.Buff.ContentTypeStr != NULL) ? StubPtr->Data.Buff.ContentTypeStr : \"(null)\",\n                        (unsigned long)StubPtr->Data.Buff.Position,\n                        (void *)(uintptr_t)FuncKey, (void *)StubPtr);\n                fflush(log);\n                fclose(log);\n            }\n\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"OK: Return buffer validated for FuncKey=%p StubPtr=%p ReturnPtr=%p\\n\",\n                        (void *)(uintptr_t)FuncKey, (void *)StubPtr, ReturnPtr);\n                fflush(log);\n                fclose(log);\n            }\n        }\n    }\n\n    return ReturnPtr;\n}\n"
}