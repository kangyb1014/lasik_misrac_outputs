{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The code does not ensure StubPtr->Data.Buff.Position <= StubPtr->Data.Buff.TotalSize before computing ActualCopy. If Position > TotalSize (e.g. corrupted/mis-maintained state), the subtraction TotalSize - Position underflows producing a very large ActualCopy which may then be clamped to MaxSize and copied starting at BasePtr + Position \u2014 this will write beyond the allocated buffer. Similarly, there is no guarantee that LocalBuffer is at least ActualCopy bytes long, so memcpy could read beyond the source. Therefore the memcpy call can result in accesses beyond the bounds of the objects referenced by its pointer parameters.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_GetReturnValuePtr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2567.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_GetReturnValuePtr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_GetReturnValuePtr:\n```c\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    return ReturnPtr;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_GetReturnValuePtr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n#include <inttypes.h>\n\nstatic void UT_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2567.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    ReturnPtr = NULL;\n\n    UT_Log(\"UT_Stub_GetReturnValuePtr ENTER: FuncKey=%p ReturnSize=%zu TypeName=%s\",\n           (void *)(uintptr_t)FuncKey, ReturnSize, (TypeName ? TypeName : \"(null)\"));\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UT_Log(\"UT_Stub_GetReturnValuePtr: StubPtr == NULL for FuncKey=%p -> aborting\",\n               (void *)(uintptr_t)FuncKey);\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        UT_Log(\"UT_Stub_GetReturnValuePtr: StubPtr=%p BasePtr=%p Position=%zu TotalSize=%zu ContentTypeStr=%s\",\n               (void *)StubPtr, StubPtr->Data.Buff.BasePtr,\n               (size_t)StubPtr->Data.Buff.Position, (size_t)StubPtr->Data.Buff.TotalSize,\n               (StubPtr->Data.Buff.ContentTypeStr ? StubPtr->Data.Buff.ContentTypeStr : \"(null)\"));\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            /* Extra diagnostic logging to help reproduce out-of-bounds scenarios. */\n            size_t pos = (size_t)StubPtr->Data.Buff.Position;\n            size_t total = (size_t)StubPtr->Data.Buff.TotalSize;\n\n            UT_Log(\"UT_Stub_GetReturnValuePtr: MISMATCH detected: expected Type=%s Size=%zu got Type=%s Size=%zu\",\n                   TypeName, ReturnSize,\n                   (StubPtr->Data.Buff.ContentTypeStr ? StubPtr->Data.Buff.ContentTypeStr : \"(null)\"), pos);\n\n            if (pos > total)\n            {\n                /* Compute the wrapped subtraction result to show the potential large ActualCopy value\n                 * that can occur if Position > TotalSize (unsigned underflow). This mirrors the\n                 * computation that could occur elsewhere and provides evidence for the violation.\n                 */\n                size_t underflow_result = total - pos; /* unsigned wrap-around intentionally shown for log */\n                UT_Log(\"UT_Stub_GetReturnValuePtr: ALERT: Position (%zu) > TotalSize (%zu). TotalSize - Position = %zu (wrap-around)\",\n                       pos, total, underflow_result);\n            }\n\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    UT_Log(\"UT_Stub_GetReturnValuePtr EXIT: returning BasePtr=%p\", ReturnPtr);\n\n    return ReturnPtr;\n}\n"
}