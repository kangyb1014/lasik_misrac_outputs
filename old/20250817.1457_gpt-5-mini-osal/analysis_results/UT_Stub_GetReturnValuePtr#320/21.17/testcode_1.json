{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) can dereference pointers without prior validation. If either TypeName or StubPtr->Data.Buff.ContentTypeStr is NULL or not a NUL-terminated string (e.g. ContentTypeStr was never set or was set to a non-terminated buffer), strcmp will read beyond the bounds of the referenced object, causing undefined behaviour. For example, if UT_Stub_GetReturnValuePtr is invoked with TypeName == NULL or if the table entry exists but ContentTypeStr == NULL (or points to a non-terminated buffer), the strcmp call will access memory out of bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_GetReturnValuePtr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2567.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_GetReturnValuePtr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_GetReturnValuePtr:\n```c\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    return ReturnPtr;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_GetReturnValuePtr code.\n",
  "test_code": "void *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n    FILE *logf = NULL;\n\n    /* Open log file for append. If it fails, proceed without logging. */\n    logf = fopen(\"/tmp/logs/2567.txt\", \"a\");\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (logf)\n    {\n        /* Log entry and basic parameters. Avoid dereferencing string pointers here. */\n        fprintf(logf, \"UT_Stub_GetReturnValuePtr ENTER: FuncKey=%llu, ReturnSize=%zu, TypeName_ptr=%p, StubPtr=%p\\n\",\n                (unsigned long long)FuncKey, ReturnSize, (const void *)TypeName, (const void *)StubPtr);\n        fflush(logf);\n    }\n\n    if (StubPtr == NULL)\n    {\n        if (logf)\n        {\n            fprintf(logf, \"UT_Stub_GetReturnValuePtr: StubPtr == NULL -> UtAssert_Abort called\\n\");\n            fclose(logf);\n            logf = NULL;\n        }\n\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        if (logf)\n        {\n            /* Log buffer pointers and sizes but do NOT attempt to read the strings\n             * since that could itself trigger out-of-bounds access. Use pointer\n             * values and numeric sizes to provide evidence for the scenario.\n             */\n            fprintf(logf, \"UT_Stub_GetReturnValuePtr: BasePtr=%p, Position=%zu, ExpectedReturnSize=%zu, ContentTypeStr_ptr=%p, TypeName_ptr=%p\\n\",\n                    (const void *)StubPtr->Data.Buff.BasePtr,\n                    (size_t)StubPtr->Data.Buff.Position,\n                    (size_t)ReturnSize,\n                    (const void *)StubPtr->Data.Buff.ContentTypeStr,\n                    (const void *)TypeName);\n            /* Also indicate NULLness explicitly for quick triage */\n            fprintf(logf, \"UT_Stub_GetReturnValuePtr: TypeName_is_NULL=%d, ContentTypeStr_is_NULL=%d\\n\",\n                    (TypeName == NULL) ? 1 : 0,\n                    (StubPtr->Data.Buff.ContentTypeStr == NULL) ? 1 : 0);\n            fflush(logf);\n        }\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            if (logf)\n            {\n                /* Log that a mismatch was detected and include pointer/size info.\n                 * Do NOT print the string contents to avoid further potential\n                 * out-of-bounds reads; printing pointers is sufficient evidence.\n                 */\n                fprintf(logf, \"UT_Stub_GetReturnValuePtr: Return value mismatch detected. ExpectedType_ptr=%p ExpectedSize=%zu GotType_ptr=%p GotSize=%zu\\n\",\n                        (const void *)TypeName, (size_t)ReturnSize,\n                        (const void *)StubPtr->Data.Buff.ContentTypeStr, (size_t)StubPtr->Data.Buff.Position);\n                fflush(logf);\n                fclose(logf);\n                logf = NULL;\n            }\n\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    if (logf)\n    {\n        fprintf(logf, \"UT_Stub_GetReturnValuePtr EXIT: returning BasePtr=%p\\n\", (const void *)ReturnPtr);\n        fclose(logf);\n    }\n\n    return ReturnPtr;\n}\n"
}