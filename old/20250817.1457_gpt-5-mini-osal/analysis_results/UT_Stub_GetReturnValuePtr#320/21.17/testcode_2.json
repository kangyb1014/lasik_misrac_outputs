{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize) can read beyond the bounds of the object referenced by BufferPtr (or dereference a NULL pointer) because the function does not verify that BufferPtr is non-NULL and points to at least BufferSize bytes. Example: UT_Stub_RegisterReturnType set TotalSize = 8 and UT_Stub_CopyToReturnValue is called with BufferSize = 8 but BufferPtr actually points to a 4-byte local array (or is NULL). memcpy will then read 8 bytes from BufferPtr -> out-of-bounds access of the source buffer (or NULL dereference). Although the code checks the destination size equals BufferSize, it does not validate the source, so Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_GetReturnValuePtr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2567.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_GetReturnValuePtr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_GetReturnValuePtr:\n```c\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    return ReturnPtr;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_GetReturnValuePtr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/2567.txt */\nstatic void UT_Stub_Logf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2567.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not change program behavior; just return */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    /* Log entry and arguments */\n    UT_Stub_Logf(\"ENTER: UT_Stub_GetReturnValuePtr - FuncKey=%lu, ReturnSize=%lu, TypeName_ptr=%p\",\n                 (unsigned long)FuncKey, (unsigned long)ReturnSize, (const void *)TypeName);\n    if (TypeName != NULL)\n    {\n        /* Guarded printing to avoid dereference if NULL */\n        UT_Stub_Logf(\"ENTER: TypeName='%s'\", TypeName);\n    }\n    else\n    {\n        UT_Stub_Logf(\"ENTER: TypeName is NULL\");\n    }\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    UT_Stub_Logf(\"AFTER UT_GetStubEntry: StubPtr=%p\", (const void *)StubPtr);\n\n    if (StubPtr == NULL)\n    {\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UT_Stub_Logf(\"ERROR: StubPtr is NULL -> aborting\");\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        UT_Stub_Logf(\"Stub fields: BasePtr=%p, Position=%lu, ContentTypeStr_ptr=%p\",\n                     (const void *)StubPtr->Data.Buff.BasePtr,\n                     (unsigned long)StubPtr->Data.Buff.Position,\n                     (const void *)StubPtr->Data.Buff.ContentTypeStr);\n\n        if (StubPtr->Data.Buff.ContentTypeStr != NULL)\n        {\n            UT_Stub_Logf(\"Stub ContentTypeStr='%s'\", StubPtr->Data.Buff.ContentTypeStr);\n        }\n        else\n        {\n            UT_Stub_Logf(\"Stub ContentTypeStr is NULL\");\n        }\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        UT_Stub_Logf(\"Checking: Stub Position=%lu vs ReturnSize=%lu, strcmp inputs: TypeName_ptr=%p, ContentTypeStr_ptr=%p\",\n                     (unsigned long)StubPtr->Data.Buff.Position, (unsigned long)ReturnSize,\n                     (const void *)TypeName, (const void *)StubPtr->Data.Buff.ContentTypeStr);\n\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            UT_Stub_Logf(\"MISMATCH: expected %s(%lu) got %s(%lu)\",\n                         (TypeName != NULL) ? TypeName : \"(NULL)\", (unsigned long)ReturnSize,\n                         (StubPtr->Data.Buff.ContentTypeStr != NULL) ? StubPtr->Data.Buff.ContentTypeStr : \"(NULL)\",\n                         (unsigned long)StubPtr->Data.Buff.Position);\n\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n        else\n        {\n            UT_Stub_Logf(\"OK: size and type match. Returning BasePtr=%p\", (const void *)ReturnPtr);\n        }\n    }\n\n    UT_Stub_Logf(\"EXIT: UT_Stub_GetReturnValuePtr -> ReturnPtr=%p\", (const void *)ReturnPtr);\n\n    return ReturnPtr;\n}\n"
}