{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nTwo realistic violation scenarios exist. 1) malloc can return NULL; the code does not check AllocNode before calling memset(AllocNode, 0, sizeof(union NodeAllocator)) and memcpy(AllocNode->Node.Data, Data, DataSize). Passing a NULL pointer to memset/memcpy results in accesses beyond the bounds of the referenced object (undefined behavior), violating Rule 21.17. 2) The size expression sizeof(union NodeAllocator) + DataSize can overflow (wrap) for large DataSize (uint32), causing malloc to allocate fewer bytes than intended; the subsequent memcpy of DataSize bytes will then write beyond the allocated object, again violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Add code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2327.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_Add as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_Add:\n```c\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    if (TagHead != NULL)\n    {\n        NewNode      = UtList_NewNode(Data, DataSize);\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n}\n```\n</target_code>\nPlease provide the modified UtList_Add code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable logs to /tmp/logs/2327.txt */\nstatic void UtList_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2327.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only; do not alter program flow */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Probe wrapper around UtList_NewNode to capture inputs and result without changing behavior */\nstatic UtListNode_t *UtList_NewNode_Probe(void *Data, uint32 DataSize)\n{\n    UtList_Log(\"UtList_NewNode_Probe: called with Data=%p, DataSize=%u\", Data, DataSize);\n    UtListNode_t *node = UtList_NewNode(Data, DataSize);\n    UtList_Log(\"UtList_NewNode_Probe: returned %p\", (void *)node);\n    return node;\n}\n\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    UtList_Log(\"UtList_Add: entry ListHead=%p, Data=%p, DataSize=%u, Tag=%u\", (void *)ListHead, Data, DataSize, Tag);\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    UtList_Log(\"UtList_Add: UtList_GetHead returned TagHead=%p\", (void *)TagHead);\n\n    if (TagHead != NULL)\n    {\n        /* Use probe wrapper so we can log allocation result and inputs */\n        NewNode = UtList_NewNode_Probe(Data, DataSize);\n        UtList_Log(\"UtList_Add: NewNode after UtList_NewNode_Probe = %p\", (void *)NewNode);\n\n        /* Preserve original behavior: still assign Tag and insert. If NewNode is NULL this will reproduce the crash. */\n        NewNode->Tag = Tag;\n        UtList_Log(\"UtList_Add: set NewNode->Tag = %u\", Tag);\n\n        UtList_Insert_Before(TagHead, NewNode);\n        UtList_Log(\"UtList_Add: called UtList_Insert_Before(TagHead=%p, NewNode=%p)\", (void *)TagHead, (void *)NewNode);\n    }\n    else\n    {\n        UtList_Log(\"UtList_Add: TagHead is NULL; nothing to insert\");\n    }\n\n    UtList_Log(\"UtList_Add: exit\");\n}\n"
}