{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to memcpy uses Data and DataSize without validating that the source object pointed to by Data is at least DataSize bytes (and does not check for NULL). If the caller passes a smaller source buffer (e.g. char src[16]; and calls UtList_Add(..., src, 32, Tag)) or passes Data == NULL with DataSize > 0, memcpy will read beyond the bounds of the source object, violating Rule 21.17. The destination is properly allocated with DataSize bytes, but the source is unchecked.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Add code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2327.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_Add as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_Add:\n```c\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    if (TagHead != NULL)\n    {\n        NewNode      = UtList_NewNode(Data, DataSize);\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n}\n```\n</target_code>\nPlease provide the modified UtList_Add code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helper: appends information to /tmp/logs/2327.txt */\nstatic void UtList_Log(const char *msg, UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag, UtListNode_t *TagHead, UtListNode_t *NewNode)\n{\n    FILE *f = fopen(\"/tmp/logs/2327.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"[UtList_Add] %s\\n\", msg);\n        fprintf(f, \"  ListHead=%p, Data=%p, DataSize=%u, Tag=%u\\n\", (void *)ListHead, Data, (unsigned)DataSize, (unsigned)Tag);\n        fprintf(f, \"  TagHead=%p, NewNode=%p\\n\", (void *)TagHead, (void *)NewNode);\n        fclose(f);\n    }\n}\n\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    /* Log entry and parameters */\n    UtList_Log(\"entry\", ListHead, Data, DataSize, Tag, NULL, NULL);\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n\n    /* Log result of getting the tag head */\n    UtList_Log(\"got TagHead\", ListHead, Data, DataSize, Tag, TagHead, NULL);\n\n    if (TagHead != NULL)\n    {\n        /* Log just before allocating a new node (this preserves original behavior) */\n        UtList_Log(\"before NewNode allocation\", ListHead, Data, DataSize, Tag, TagHead, NULL);\n\n        NewNode      = UtList_NewNode(Data, DataSize);\n\n        /* Log after NewNode is returned from allocator */\n        UtList_Log(\"after NewNode allocation\", ListHead, Data, DataSize, Tag, TagHead, NewNode);\n\n        /* Preserve original logic: set tag and insert before TagHead */\n        NewNode->Tag = Tag;\n\n        UtList_Log(\"before insert\", ListHead, Data, DataSize, Tag, TagHead, NewNode);\n        UtList_Insert_Before(TagHead, NewNode);\n        UtList_Log(\"after insert\", ListHead, Data, DataSize, Tag, TagHead, NewNode);\n    }\n    else\n    {\n        UtList_Log(\"TagHead is NULL - no node added\", ListHead, Data, DataSize, Tag, TagHead, NULL);\n    }\n}\n"
}