{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer parameter 'Data' is not const-qualified even though the function body does not modify the object it points to (it only passes Data to UtList_NewNode). Per MISRA C 2023 Rule 8.13, Data should be declared as 'const void *Data' unless underlying callees require a non-const pointer. (The 'ListHead' parameter is correctly non-const because the list is being modified.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Add code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2323.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_Add as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_Add:\n```c\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    if (TagHead != NULL)\n    {\n        NewNode      = UtList_NewNode(Data, DataSize);\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n}\n```\n</target_code>\nPlease provide the modified UtList_Add code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <stdlib.h>\n\n/* Minimal type defs and stubs to allow compilation and execution of the probe-enhanced UtList_Add.\n   These are simple stand-ins and should not change the original function logic. */\n\ntypedef uint32_t uint32;\n\ntypedef struct UtListNode\n{\n    struct UtListNode *Next;\n    uint32 Tag;\n    void *Data;\n    uint32 DataSize;\n} UtListNode_t;\n\ntypedef struct\n{\n    UtListNode_t *Head;\n} UtListHead_t;\n\n/* Simple stub: return the head node for the given list. */\nstatic UtListNode_t *UtList_GetHead(UtListHead_t *ListHead, uint32 Tag)\n{\n    (void)Tag; /* Tag unused in this simplified stub */\n    return (ListHead != NULL) ? ListHead->Head : NULL;\n}\n\n/* Simple stub: allocate a new node and store the Data pointer and size. */\nstatic UtListNode_t *UtList_NewNode(void *Data, uint32 DataSize)\n{\n    UtListNode_t *node = (UtListNode_t *)malloc(sizeof(UtListNode_t));\n    if (node != NULL)\n    {\n        node->Next = NULL;\n        node->Tag = 0u;\n        node->Data = Data;\n        node->DataSize = DataSize;\n    }\n    return node;\n}\n\n/* Simple stub: insert NewNode before TagHead by linking it into the list after TagHead.\n   This is intentionally simple; the goal is to preserve the external behavior observed by UtList_Add. */\nstatic void UtList_Insert_Before(UtListNode_t *TagHead, UtListNode_t *NewNode)\n{\n    if ((TagHead == NULL) || (NewNode == NULL))\n    {\n        return;\n    }\n    /* For this stub, insert NewNode immediately after TagHead. */\n    NewNode->Next = TagHead->Next;\n    TagHead->Next = NewNode;\n}\n\n/* Logging helper: append a log entry describing the flow and state. */\nstatic void UtList_Add_Log(const char *stage, UtListHead_t *ListHead, const void *Data, uint32 DataSize, uint32 Tag, const char *note)\n{\n    FILE *fp = fopen(\"/tmp/logs/2323.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Log the stage, list and pointer state. Use uintptr_t to print pointer values portably. */\n    fprintf(fp, \"Stage: %s\\n\", stage);\n    fprintf(fp, \"  ListHead=%p, ListHead->Head=%p\\n\", (void *)ListHead,\n            (void *)(ListHead ? (void *)ListHead->Head : NULL));\n    fprintf(fp, \"  Data=%p, DataSize=%u, Tag=%u\\n\", (void *)Data, (unsigned)DataSize, (unsigned)Tag);\n    if (note != NULL)\n    {\n        fprintf(fp, \"  Note: %s\\n\", note);\n    }\n    fprintf(fp, \"---\\n\");\n    fclose(fp);\n}\n\n/*\n * Original function UtList_Add with logging probes inserted.\n * The implementation logic is preserved; probes log before/after key steps so callers\n * can observe that Data is passed unmodified to UtList_NewNode (evidence relevant to\n * MISRA Rule 8.13 analysis).\n */\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    /* Log entry into the function and initial state */\n    UtList_Add_Log(\"enter\", ListHead, (const void *)Data, DataSize, Tag, \"entered UtList_Add\");\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n\n    /* Log the result of getting the tag head */\n    if (TagHead != NULL)\n    {\n        UtList_Add_Log(\"before_newnode\", ListHead, (const void *)Data, DataSize, Tag, \"TagHead found, about to create new node\");\n\n        NewNode      = UtList_NewNode(Data, DataSize);\n\n        /* Log after creating new node, including the returned node pointer and the Data pointer passed in */\n        UtList_Add_Log(\"after_newnode\", ListHead, (const void *)Data, DataSize, Tag, NewNode ? \"NewNode allocated\" : \"NewNode allocation failed\");\n\n        if (NewNode != NULL)\n        {\n            NewNode->Tag = Tag;\n\n            /* Log before insertion */\n            UtList_Add_Log(\"before_insert\", ListHead, (const void *)Data, DataSize, Tag, \"about to insert NewNode before TagHead\");\n\n            UtList_Insert_Before(TagHead, NewNode);\n\n            /* Log after insertion */\n            UtList_Add_Log(\"after_insert\", ListHead, (const void *)Data, DataSize, Tag, \"insertion complete\");\n        }\n    }\n    else\n    {\n        /* Log that there was no TagHead for this tag */\n        UtList_Add_Log(\"no_taghead\", ListHead, (const void *)Data, DataSize, Tag, \"no TagHead found; nothing inserted\");\n    }\n\n    /* Log exit */\n    UtList_Add_Log(\"exit\", ListHead, (const void *)Data, DataSize, Tag, \"exiting UtList_Add\");\n}\n"
}