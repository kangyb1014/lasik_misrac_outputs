{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'Data' in UtList_Add is declared as void * and is passed to UtList_NewNode(Data, DataSize). If UtList_NewNode (and other callers) do not modify the buffer pointed to by Data, the pointer should be to a const-qualified type (const void *). Using a non-const void * here violates MISRA C 2023 Rule 8.13. Fix: change the declaration to const void *Data and update UtList_NewNode signature to accept const void *.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtList_Add code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2323.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtList_Add as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtList_Add:\n```c\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    if (TagHead != NULL)\n    {\n        NewNode      = UtList_NewNode(Data, DataSize);\n        NewNode->Tag = Tag;\n        UtList_Insert_Before(TagHead, NewNode);\n    }\n}\n```\n</target_code>\nPlease provide the modified UtList_Add code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n\n/* Helper log function: append messages with timestamp to /tmp/logs/2323.txt */\nstatic void UtList_Logf(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2323.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm *tm_info = localtime(&t);\n    if (tm_info != NULL)\n    {\n        char buf[32];\n        (void)strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", tm_info);\n        fprintf(fp, \"%s \", buf);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', fp);\n    fclose(fp);\n}\n\nvoid UtList_Add(UtListHead_t *ListHead, void *Data, uint32 DataSize, uint32 Tag)\n{\n    UtListNode_t *TagHead;\n    UtListNode_t *NewNode;\n\n    UtList_Logf(\"UtList_Add ENTRY: ListHead=%p Data=%p DataSize=%u Tag=%u\",\n                (void *)ListHead, Data, (unsigned)DataSize, (unsigned)Tag);\n\n    TagHead = UtList_GetHead(ListHead, Tag);\n    UtList_Logf(\"UtList_Add: UtList_GetHead returned TagHead=%p for Tag=%u\",\n                (void *)TagHead, (unsigned)Tag);\n\n    if (TagHead != NULL)\n    {\n        /* Log a preview of the buffer pointed to by Data (up to 16 bytes) */\n        if (Data != NULL && DataSize > 0u)\n        {\n            unsigned int i;\n            const unsigned char *bytes = (const unsigned char *)Data;\n            unsigned int limit = (DataSize > 16u) ? 16u : (unsigned int)DataSize;\n            char hexbuf[16 * 3 + 1];\n            char *p = hexbuf;\n            for (i = 0u; i < limit; ++i)\n            {\n                (void)sprintf(p, \"%02X \", bytes[i]);\n                p += 3; /* two hex chars + space */\n            }\n            *p = '\\0';\n            UtList_Logf(\"UtList_Add: Data preview (%u bytes): %s\", (unsigned)limit, hexbuf);\n        }\n        else\n        {\n            UtList_Logf(\"UtList_Add: Data is NULL or DataSize is 0 (Data=%p DataSize=%u)\",\n                        Data, (unsigned)DataSize);\n        }\n\n        UtList_Logf(\"UtList_Add: Calling UtList_NewNode(Data=%p, DataSize=%u)\",\n                    Data, (unsigned)DataSize);\n        NewNode = UtList_NewNode(Data, DataSize);\n        UtList_Logf(\"UtList_Add: UtList_NewNode returned NewNode=%p\", (void *)NewNode);\n\n        if (NewNode != NULL)\n        {\n            UtList_Logf(\"UtList_Add: Setting NewNode->Tag = %u (was %u)\",\n                        (unsigned)Tag, (unsigned)NewNode->Tag);\n            NewNode->Tag = Tag;\n\n            UtList_Logf(\"UtList_Add: Inserting NewNode=%p before TagHead=%p\",\n                        (void *)NewNode, (void *)TagHead);\n            UtList_Insert_Before(TagHead, NewNode);\n            UtList_Logf(\"UtList_Add: Insert complete for NewNode=%p\", (void *)NewNode);\n        }\n        else\n        {\n            UtList_Logf(\"UtList_Add: NewNode allocation failed (NULL)\");\n        }\n    }\n    else\n    {\n        UtList_Logf(\"UtList_Add: No TagHead found for Tag=%u; no action taken\", (unsigned)Tag);\n    }\n\n    UtList_Logf(\"UtList_Add EXIT: ListHead=%p\", (void *)ListHead);\n}\n"
}