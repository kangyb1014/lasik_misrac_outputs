{
  "user_message": "An agent A claimed that the following OS_CountSemGetIdByName code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_CountSemGetIdByName.\n```c\nint32 OS_CountSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:LENGTHCHECK(name, OS_MAX_API_NAME, ...) likely computes the length of the C string (e.g. via strlen(name)) and compares to OS_MAX_API_NAME. ARGCHECK only ensures name != NULL, it does not guarantee the buffer is null-terminated or that the accessible object is at least OS_MAX_API_NAME+1 bytes long. If LENGTHCHECK uses an unbounded routine such as strlen(name) (or any other <string.h> function that scans until NUL), and the caller supplies a non\u2011terminated or too\u2011short buffer, the scan can read past the end of the object \u2014 violating MISRA C 2023 Rule 21.17. A compliant implementation must use a bounded operation (e.g. strnlen/strnlen_s or otherwise ensure the buffer length is known) or otherwise guarantee the referenced object is NUL-terminated within bounds.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_countsem_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1159.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging, do not change program behavior on failure */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_CountSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Log entry and raw pointer values (do not dereference sem_name to avoid introducing extra reads) */\n    os_countsem_log_probe(\"ENTER OS_CountSemGetIdByName: sem_id=%p, sem_name=%p\", (void *)sem_id, (const void *)sem_name);\n\n    /* Check parameters (preserve original checks) */\n    OS_CHECK_POINTER(sem_id);\n    os_countsem_log_probe(\"After OS_CHECK_POINTER(sem_id): sem_id=%p\", (void *)sem_id);\n\n    OS_CHECK_POINTER(sem_name);\n    os_countsem_log_probe(\"After OS_CHECK_POINTER(sem_name): sem_name=%p\", (const void *)sem_name);\n\n    /* Log intent to call the lookup routine (this is where an unbounded scan such as strlen might occur) */\n    os_countsem_log_probe(\"Calling OS_ObjectIdFindByName with sem_name=%p\", (const void *)sem_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    /* Log result and, if sem_id pointer is non-NULL, the value stored there (best-effort, do not alter behavior) */\n    if (sem_id != NULL)\n    {\n        /* Cast to integer for printing; do not assume size of osal_id_t, present best-effort value */\n        os_countsem_log_probe(\"OS_ObjectIdFindByName returned %ld, *sem_id=%lu\", (long) return_code, (unsigned long) (uintptr_t) *sem_id);\n    }\n    else\n    {\n        os_countsem_log_probe(\"OS_ObjectIdFindByName returned %ld, sem_id was NULL\", (long) return_code);\n    }\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nENTER OS_CountSemGetIdByName: sem_id=(nil), sem_name=0x55e7b14bfee9\nENTER OS_CountSemGetIdByName: sem_id=0x7ffe1794161c, sem_name=(nil)\nAfter OS_CHECK_POINTER(sem_id): sem_id=0x7ffe1794161c\nENTER OS_CountSemGetIdByName: sem_id=0x7ffe1794161c, sem_name=0x7ffe17941620\nAfter OS_CHECK_POINTER(sem_id): sem_id=0x7ffe1794161c\nAfter OS_CHECK_POINTER(sem_name): sem_name=0x7ffe17941620\nCalling OS_ObjectIdFindByName with sem_name=0x7ffe17941620\nOS_ObjectIdFindByName returned -13, *sem_id=0\nENTER OS_CountSemGetIdByName: sem_id=0x7ffe1794161c, sem_name=0x55e7b14bff7d\nAfter OS_CHECK_POINTER(sem_id): sem_id=0x7ffe1794161c\nAfter OS_CHECK_POINTER(sem_name): sem_name=0x55e7b14bff7d\nCalling OS_ObjectIdFindByName with sem_name=0x55e7b14bff7d\nOS_ObjectIdFindByName returned -17, *sem_id=0\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The complained MISRA rule (21.17) concerns unsafe uses of functions from <string.h> that can read beyond the bounds of the object referenced by a pointer parameter. The OS_CountSemGetIdByName implementation shown does not call any <string.h> functions itself \u2014 it only performs pointer checks (via OS_CHECK_POINTER) and forwards sem_name to OS_ObjectIdFindByName. Therefore, OS_CountSemGetIdByName as presented does not itself violate Rule 21.17. If an out\u2011of\u2011bounds string scan occurs it would be because OS_ObjectIdFindByName (or a macro it uses, e.g. LENGTHCHECK) internally invokes an unbounded string routine such as strlen; the correct fix would be in that routine, not in this thin wrapper. The test logs only show pointer values and return codes and do not demonstrate a direct string.h overread performed by OS_CountSemGetIdByName. Consequently the report that OS_CountSemGetIdByName violates MISRA C 2023 Rule 21.17 is not correct."
}