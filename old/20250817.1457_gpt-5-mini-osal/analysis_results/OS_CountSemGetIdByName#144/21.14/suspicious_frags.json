{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CountSemGetIdByName:\n```c\nint32 OS_CountSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CountSemGetIdByName:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n...\nint32 OS_ObjectIdGetByName(OS_lock_mode_t lock_mode, osal_objtype_t idtype, const char *name, OS_object_token_t *token)\n{\n    return OS_ObjectIdGetBySearch(lock_mode, idtype, OS_ObjectNameMatch, (void *)name, token);\n}\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no direct use of the standard library function memcmp in the provided code fragments. MISRA C 2023 Rule 21.14 prohibits using memcmp to compare null-terminated strings; such a violation would be visible only where memcmp is actually called. In the supplied code: \n\n- OS_CountSemGetIdByName only validates pointers (OS_CHECK_POINTER) and forwards the const char * name to OS_ObjectIdFindByName \u2014 there is no string comparison with memcmp here. \n- OS_ObjectIdFindByName performs ARGCHECK(name, ...) and LENGTHCHECK(name, ...), calls OS_ObjectIdGetByName, and returns the result; none of these operations show any memcmp usage in the provided fragments. \n- OS_ObjectIdGetByName simply forwards the name to OS_ObjectIdGetBySearch via OS_ObjectNameMatch; the cast to (void *)name is a parameter-passing detail and does not itself indicate a memcmp. \n- OS_ObjectIdRelease and related calls shown do not perform string comparisons.\n\nBecause memcmp is not present in the visible code, there are no code fragments here that must be investigated for Rule 21.14. Note: other parts of the codebase (for example implementations of OS_ObjectIdGetBySearch, OS_ObjectNameMatch, or any macros not shown) could potentially use memcmp to compare null-terminated strings; those functions/macros are not included in the provided fragments and therefore cannot be flagged here. If you want, provide the code for OS_ObjectIdGetBySearch, OS_ObjectNameMatch, ARGCHECK, LENGTHCHECK, or any other related macros/funcs and I will re-check them specifically for memcmp usage."
}