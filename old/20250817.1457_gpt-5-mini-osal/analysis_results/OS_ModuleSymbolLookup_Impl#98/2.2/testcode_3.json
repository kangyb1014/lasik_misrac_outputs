{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the OS_DEBUG macro is defined as a no-op (e.g. expands to nothing or ((void)0)) in the build used in the project, the logging call OS_DEBUG(\"Error: %s: %s\\n\", SymbolName, dlError); performs no observable action. Removing that statement would not change program behaviour, so it constitutes dead code and violates MISRA C 2023 Rule 2.2. (If, however, OS_DEBUG actually performs logging or other observable side-effects in the built configuration, then the call is not dead and there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleSymbolLookup_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/786.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleSymbolLookup_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleSymbolLookup_Impl:\n```c\nint32 OS_ModuleSymbolLookup_Impl(const OS_object_token_t *token, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32                             status;\n    OS_impl_module_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n\n    status = OS_GenericSymbolLookup_Impl(impl->dl_handle, SymbolAddress, SymbolName);\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleSymbolLookup_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n\n/* Probe logger: append descriptive logs to /tmp/logs/786.txt. */\nstatic void OS_ModuleSymbolLookup_ProbeLog(const char *phase,\n                                          const OS_object_token_t *token,\n                                          OS_impl_module_internal_record_t *impl,\n                                          cpuaddr *SymbolAddress,\n                                          const char *SymbolName,\n                                          int32 status)\n{\n    FILE *fp = fopen(\"/tmp/logs/786.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If logging cannot be performed, do not affect functional behaviour. */\n        return;\n    }\n\n    /* Timestamp for ordering events. */\n    time_t t = time(NULL);\n    char timestr[32] = \"\";\n    if (t != (time_t)(-1))\n    {\n        struct tm tmv;\n        if (localtime_r(&t, &tmv) != NULL)\n        {\n            (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tmv);\n        }\n    }\n\n    fprintf(fp, \"[%s] OS_ModuleSymbolLookup_Impl %s: token_ptr=%p impl_ptr=%p SymbolName=\\\"%s\\\" SymbolAddress_ptr=%p\",\n            timestr[0] ? timestr : \"(no-time)\",\n            phase,\n            (const void *)token,\n            (const void *)impl,\n            (SymbolName != NULL) ? SymbolName : \"(null)\",\n            (const void *)SymbolAddress);\n\n    /* When available, log the returned status and the resolved symbol address value. */\n    if (phase != NULL && (phase[0] == 'a' || phase[0] == 'A')) /* \"after\" phase starts with 'a' */\n    {\n        fprintf(fp, \" status=%ld\", (long)status);\n        if (SymbolAddress != NULL)\n        {\n            fprintf(fp, \" SymbolAddress_value=0x%\" PRIxPTR, (uintptr_t)(*SymbolAddress));\n        }\n    }\n\n    fprintf(fp, \"\\n\");\n    (void)fclose(fp);\n}\n\nint32 OS_ModuleSymbolLookup_Impl(const OS_object_token_t *token, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32                             status;\n    OS_impl_module_internal_record_t *impl;\n\n    /* Preserve original behaviour: look up the implementation record. */\n    impl = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n\n    /* Log state before calling the generic lookup. This log is independent of any OS_DEBUG macro. */\n    OS_ModuleSymbolLookup_ProbeLog(\"before\", token, impl, SymbolAddress, SymbolName, 0);\n\n    /* Perform the original lookup. */\n    status = OS_GenericSymbolLookup_Impl(impl->dl_handle, SymbolAddress, SymbolName);\n\n    /* Log the result and the resolved address (if any). */\n    OS_ModuleSymbolLookup_ProbeLog(\"after\", token, impl, SymbolAddress, SymbolName, status);\n\n    return status;\n}"
}