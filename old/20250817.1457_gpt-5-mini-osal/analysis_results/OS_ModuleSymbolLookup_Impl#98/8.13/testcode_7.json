{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_GenericSymbolLookup_Impl the local variable is declared as \"void *Function;\" but it is only used to hold the result of dlsym(), tested for NULL and then cast to an integer (cpuaddr). The pointed-to object is not modified through this pointer, so it can and should be declared as \"const void *Function;\" to satisfy MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleSymbolLookup_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/787.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleSymbolLookup_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleSymbolLookup_Impl:\n```c\nint32 OS_ModuleSymbolLookup_Impl(const OS_object_token_t *token, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32                             status;\n    OS_impl_module_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n\n    status = OS_GenericSymbolLookup_Impl(impl->dl_handle, SymbolAddress, SymbolName);\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleSymbolLookup_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe/logger helper to record control flow and key state to /tmp/logs/787.txt.\n * This helper intentionally uses const-qualified pointer parameters so it does not\n * modify the objects it observes and avoids introducing new pointer-to-non-const\n * usages.\n */\nstatic void OS_ModuleSymbolLookup_Log(const OS_object_token_t *token,\n                                      const OS_impl_module_internal_record_t *impl,\n                                      const char *SymbolName,\n                                      const cpuaddr *SymbolAddress,\n                                      int32 status,\n                                      int print_value)\n{\n    FILE *f = fopen(\"/tmp/logs/787.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"--- OS_ModuleSymbolLookup_Impl log ---\\n\");\n    fprintf(f, \" token ptr = %p\\n\", (const void *)token);\n    fprintf(f, \" impl ptr  = %p\\n\", (const void *)impl);\n\n    if (impl != NULL)\n    {\n        /* impl->dl_handle is observed but not modified */\n        fprintf(f, \" impl->dl_handle = %p\\n\", (const void *)impl->dl_handle);\n    }\n    else\n    {\n        fprintf(f, \" impl is NULL\\n\");\n    }\n\n    fprintf(f, \" SymbolName = %s\\n\", (SymbolName != NULL) ? SymbolName : \"(null)\");\n\n    if (print_value)\n    {\n        if (SymbolAddress != NULL)\n        {\n            /* Print the resolved symbol address value. Cast via uintptr_t for portability. */\n            fprintf(f, \" SymbolAddress value = 0x%0*llx\\n\",\n                    (int)(2 * sizeof(unsigned long long)), (unsigned long long)(uintptr_t)(*SymbolAddress));\n        }\n        else\n        {\n            fprintf(f, \" SymbolAddress ptr = NULL\\n\");\n        }\n\n        fprintf(f, \" status = %d\\n\", (int)status);\n    }\n    else\n    {\n        fprintf(f, \" (pre-call observation, no SymbolAddress value yet)\\n\");\n    }\n\n    fprintf(f, \"-------------------------------------\\n\\n\");\n    fclose(f);\n}\n\nint32 OS_ModuleSymbolLookup_Impl(const OS_object_token_t *token, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32                             status;\n    OS_impl_module_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n\n    /* Log the entry state before performing the generic lookup. Do not dereference\n     * SymbolAddress here because it is an output parameter and may be uninitialized.\n     */\n    OS_ModuleSymbolLookup_Log(token, impl, SymbolName, NULL, 0, 0);\n\n    status = OS_GenericSymbolLookup_Impl(impl->dl_handle, SymbolAddress, SymbolName);\n\n    /* Log the results after the lookup. This records the returned status and the\n     * resolved address (if any), providing evidence for the symbol resolution\n     * control path described in the violation scenario.\n     */\n    OS_ModuleSymbolLookup_Log(token, impl, SymbolName, (const cpuaddr *)SymbolAddress, status, 1);\n\n    return status;\n}\n"
}