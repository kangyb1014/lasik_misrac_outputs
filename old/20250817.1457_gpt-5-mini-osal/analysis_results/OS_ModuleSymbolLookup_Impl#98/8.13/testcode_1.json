{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'Function' is declared as 'void *Function' and is only used for reading the symbol address; it could be declared 'const void *Function' so that pointers point to const-qualified types when possible. The assignment 'Function = dlsym(dl_handle, SymbolName);' therefore uses a non-const pointer where a const-qualified pointer is possible, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleSymbolLookup_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/787.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleSymbolLookup_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleSymbolLookup_Impl:\n```c\nint32 OS_ModuleSymbolLookup_Impl(const OS_object_token_t *token, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32                             status;\n    OS_impl_module_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n\n    status = OS_GenericSymbolLookup_Impl(impl->dl_handle, SymbolAddress, SymbolName);\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleSymbolLookup_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe logging function: appends control-flow and state information to /tmp/logs/787.txt. */\nstatic void OS_ModuleSymbolLookup_Impl_LogProbe(const OS_object_token_t *token,\n                                                OS_impl_module_internal_record_t *impl,\n                                                cpuaddr *SymbolAddress,\n                                                const char *SymbolName,\n                                                int32 status)\n{\n    FILE *fp = fopen(\"/tmp/logs/787.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* Fallback if the logs directory does not exist. */\n        fp = fopen(\"/tmp/787.txt\", \"a\");\n    }\n\n    if (fp == NULL)\n    {\n        /* If logging is not possible, silently continue to preserve original behavior. */\n        return;\n    }\n\n    /* Log pointers and values that help reproduce the scenario.\n       - token pointer and token value (dereferenced) so callers can see which object was used\n       - impl pointer and its dl_handle value (if available) to show the handle passed to dlsym\n       - SymbolName to show the symbol being looked up\n       - SymbolAddress pointer and resulting value (after lookup)\n       - status returned by the generic lookup implementation\n    */\n    unsigned long token_val = 0UL;\n\n    /* Attempt to capture the token value, matching the original use of *token in the code. */\n    if (token != NULL)\n    {\n        /* Cast through integer types to avoid format mismatches in fprintf. */\n        token_val = (unsigned long)(*token);\n    }\n\n    void *dl_handle = NULL;\n    if (impl != NULL)\n    {\n        /* The implementation record is expected to contain a dl_handle member. Log it as a pointer. */\n        dl_handle = (void *)(impl->dl_handle);\n    }\n\n    /* Current value of the SymbolAddress pointer and the pointed-to value if available. */\n    uintptr_t symaddr_val = 0U;\n    if (SymbolAddress != NULL)\n    {\n        symaddr_val = (uintptr_t)(*SymbolAddress);\n    }\n\n    fprintf(fp,\n            \"OS_ModuleSymbolLookup_Impl ENTER: token_ptr=%p token_val=%lu impl_ptr=%p dl_handle=%p SymbolName=\\\"%s\\\" SymbolAddress_ptr=%p\\n\",\n            (const void *)token,\n            token_val,\n            (const void *)impl,\n            dl_handle,\n            (SymbolName != NULL) ? SymbolName : \"(null)\",\n            (void *)SymbolAddress);\n\n    fprintf(fp,\n            \"OS_ModuleSymbolLookup_Impl EXIT: status=%ld resolved_SymbolAddress_value=0x%\" PRIxPTR \"\\n\",\n            (long)status,\n            symaddr_val);\n\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_ModuleSymbolLookup_Impl(const OS_object_token_t *token, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32                             status;\n    OS_impl_module_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n\n    /* Log pre-call state to help reproduce the scenario where a void* handle is used. */\n    OS_ModuleSymbolLookup_Impl_LogProbe(token, impl, SymbolAddress, SymbolName, -999);\n\n    status = OS_GenericSymbolLookup_Impl(impl->dl_handle, SymbolAddress, SymbolName);\n\n    /* Log post-call state including the returned status and resolved symbol address (if any). */\n    OS_ModuleSymbolLookup_Impl_LogProbe(token, impl, SymbolAddress, SymbolName, status);\n\n    return status;\n}\n"
}