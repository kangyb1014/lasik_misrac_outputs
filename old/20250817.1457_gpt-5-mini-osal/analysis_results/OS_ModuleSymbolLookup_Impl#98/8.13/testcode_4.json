{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'impl' is declared as a non-const pointer (OS_impl_module_internal_record_t *impl) but is only used for read access (impl->dl_handle is only read). It could be declared as const OS_impl_module_internal_record_t *impl = OS_OBJECT_TABLE_GET(...). Therefore a pointer points to a non-const-qualified type when a const-qualified type is possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleSymbolLookup_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/787.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleSymbolLookup_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleSymbolLookup_Impl:\n```c\nint32 OS_ModuleSymbolLookup_Impl(const OS_object_token_t *token, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32                             status;\n    OS_impl_module_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n\n    status = OS_GenericSymbolLookup_Impl(impl->dl_handle, SymbolAddress, SymbolName);\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleSymbolLookup_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe/logger for OS_ModuleSymbolLookup_Impl. Writes execution trace and key state\n   to /tmp/logs/787.txt so other agents can reproduce the scenario. This helper\n   preserves original logic and only observes state (no modifications). */\nstatic void OS_ModuleSymbolLookup_Impl_Log(const OS_object_token_t *token,\n                                           OS_impl_module_internal_record_t *impl,\n                                           const char *SymbolName,\n                                           int32 stage, /* 0=before lookup, 1=after lookup */\n                                           int32 status)\n{\n    FILE *f = fopen(\"/tmp/logs/787.txt\", \"a\");\n    if (!f) return;\n\n    if (stage == 0)\n    {\n        fprintf(f, \"[ModuleSymbolLookup] ENTRY\\n\");\n    }\n    else\n    {\n        fprintf(f, \"[ModuleSymbolLookup] EXIT\\n\");\n    }\n\n    fprintf(f, \"  token_ptr = %p\\n\", (const void *)token);\n    fprintf(f, \"  impl_ptr   = %p\\n\", (void *)impl);\n\n    if (impl != NULL)\n    {\n        /* impl->dl_handle is observed as used by the implementation. Cast to void* for logging.\n           This mirrors the same read access performed below in the real lookup call. */\n        fprintf(f, \"  impl->dl_handle = %p\\n\", (void *)impl->dl_handle);\n    }\n    else\n    {\n        fprintf(f, \"  impl is NULL\\n\");\n    }\n\n    fprintf(f, \"  SymbolName = %s\\n\", SymbolName ? SymbolName : \"(null)\");\n\n    if (stage == 1)\n    {\n        fprintf(f, \"  status = %d\\n\", (int)status);\n    }\n\n    fprintf(f, \"----------------------------------------\\n\");\n    fclose(f);\n}\n\nint32 OS_ModuleSymbolLookup_Impl(const OS_object_token_t *token, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32                             status;\n    OS_impl_module_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n\n    /* Log entry state before performing the lookup. This captures the fact that\n       'impl' is obtained and only read (impl->dl_handle is read below). */\n    OS_ModuleSymbolLookup_Impl_Log(token, impl, SymbolName, 0, 0);\n\n    status = OS_GenericSymbolLookup_Impl(impl->dl_handle, SymbolAddress, SymbolName);\n\n    /* Log exit state including the returned status so callers can trace the flow. */\n    OS_ModuleSymbolLookup_Impl_Log(token, impl, SymbolName, 1, status);\n\n    return status;\n}\n"
}