{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable is declared as 'OS_impl_module_internal_record_t *impl;' but it is only used for read access (assigned from the global OS_impl_module_table and only used to read impl->dl_handle). Per MISRA C 2023 Rule 8.13 it should be const-qualified when possible \u2014 e.g. 'const OS_impl_module_internal_record_t *impl;'. Making it const is feasible: impl->dl_handle would be treated as a top-level const member (void * const) and can still be passed by value to OS_GenericSymbolLookup_Impl(void *), so no API change is required.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleSymbolLookup_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/787.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleSymbolLookup_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleSymbolLookup_Impl:\n```c\nint32 OS_ModuleSymbolLookup_Impl(const OS_object_token_t *token, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32                             status;\n    OS_impl_module_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n\n    status = OS_GenericSymbolLookup_Impl(impl->dl_handle, SymbolAddress, SymbolName);\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleSymbolLookup_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Minimal stub types and data to make this test code compilable and runnable. */\ntypedef uint32_t OS_object_token_t; /* token is treated as an index in this test harness */\ntypedef int32_t int32;\ntypedef uintptr_t cpuaddr;\n\ntypedef struct\n{\n    void *dl_handle; /* opaque handle used by the real implementation */\n} OS_impl_module_internal_record_t;\n\n/* A small table to emulate OS_impl_module_table used by the original code. */\nstatic OS_impl_module_internal_record_t OS_impl_module_table[16];\n\n/* Replace the original macro with a function so this file is self-contained (no macros allowed). */\nstatic OS_impl_module_internal_record_t *OS_OBJECT_TABLE_GET(OS_impl_module_internal_record_t *table, OS_object_token_t token)\n{\n    /* Guard against out-of-bounds access in this test harness. The real system may behave differently. */\n    if (token >= (sizeof(OS_impl_module_table) / sizeof(OS_impl_module_table[0])))\n    {\n        return NULL;\n    }\n    return &table[token];\n}\n\n/* Stub of the real symbol lookup implementation to keep behavior consistent for tests. */\nint32 OS_GenericSymbolLookup_Impl(void *dl_handle, cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    /* For testing, pretend lookup succeeds and returns a fake address derived from the handle. */\n    if (SymbolAddress != NULL)\n    {\n        SymbolAddress[0] = (cpuaddr)(uintptr_t)dl_handle;\n    }\n    (void)SymbolName; /* silence unused-parameter warnings in this stub */\n    return 0; /* success */\n}\n\n/* Helper that appends logs to the required file. */\nstatic void probe_log_printf(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/787.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, do not stop execution; silently return. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\n/* Probe function that records the control path and relevant state for OS_ModuleSymbolLookup_Impl. */\nstatic void probe_record_module_symbol_lookup(const OS_object_token_t *token, OS_impl_module_internal_record_t *impl,\n                                               cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    probe_log_printf(\"ENTER OS_ModuleSymbolLookup_Impl\");\n\n    /* Log token pointer and the token value if available */\n    probe_log_printf(\"  token_ptr=%p\", (void *)token);\n    if (token != NULL)\n    {\n        probe_log_printf(\"  token_value=%"
}