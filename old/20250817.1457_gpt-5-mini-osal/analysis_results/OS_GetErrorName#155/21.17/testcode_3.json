{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe expression is parsed as *(err_name[sizeof(*err_name) - 1]) due to [] binding tighter than unary *. With OS_ERROR_NAME_LENGTH == 35, sizeof(*err_name) == 35 so the code indexes err_name[34] and then writes to its first byte. err_name is a pointer to a single char[35] object (valid index 0 only), so indexing at 34 is out-of-bounds and the write accesses memory beyond the referenced object. This is a buffer-access violation (likely a typo for (*err_name)[sizeof(*err_name)-1] = '\\0'). Therefore the fragment violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GetErrorName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1247.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GetErrorName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GetErrorName:\n```c\nint32 OS_GetErrorName(int32 error_num, os_err_name_t *err_name)\n{\n    int32                        return_code;\n    const OS_ErrorTable_Entry_t *Error;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(err_name);\n\n    Error = OS_GLOBAL_ERROR_NAME_TABLE;\n    while (Error->Name != NULL && Error->Number != error_num)\n    {\n        ++Error;\n    }\n\n    if (Error->Number != error_num)\n    {\n        Error = OS_IMPL_ERROR_NAME_TABLE;\n        while (Error->Name != NULL && Error->Number != error_num)\n        {\n            ++Error;\n        }\n    }\n\n    if (Error->Number == error_num && Error->Name != NULL)\n    {\n        strncpy(*err_name, Error->Name, sizeof(*err_name) - 1);\n        *err_name[sizeof(*err_name) - 1] = 0;\n        return_code                      = OS_SUCCESS;\n    }\n    else\n    {\n        snprintf(*err_name, OS_ERROR_NAME_LENGTH, \"OS_UNKNOWN(%d)\", (int)error_num);\n        return_code = OS_ERROR;\n    }\n\n    (*err_name)[OS_ERROR_NAME_LENGTH - 1] = '\\0';\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GetErrorName code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n#include <stddef.h>\n\n/* Probe helpers to log control flow and state to /tmp/logs/1247.txt */\nstatic void probe_log_bytes(FILE *f, const char *label, const char *p, size_t n)\n{\n    fprintf(f, \"%s: bytes (hex/ascii) up to %zu bytes:\\n\", label, n);\n    for (size_t i = 0; i < n; ++i)\n    {\n        unsigned char uc = (unsigned char)p[i];\n        fprintf(f, \"[%02zu]=0x%02X('%c') \", i, uc, isprint(uc) ? uc : '.');\n        if ((i & 7) == 7)\n            fprintf(f, \"\\n\");\n    }\n    fprintf(f, \"\\n\");\n}\n\nstatic void probe_log_state(const char *stage, int32 error_num, os_err_name_t *err_name, const OS_ErrorTable_Entry_t *Error)\n{\n    FILE *f = fopen(\"/tmp/logs/1247.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"--- OS_GetErrorName probe: %s ---\\n\", stage);\n    fprintf(f, \"error_num = %d\\n\", (int)error_num);\n    fprintf(f, \"err_name ptr = %p\\n\", (void *)err_name);\n\n    /* If err_name is non-NULL, show the referenced buffer pointer and size */\n    if (err_name != NULL)\n    {\n        /* Obtain pointer to first char of the buffer */\n        char *buf = *err_name;\n        fprintf(f, \"*err_name (buffer) ptr = %p\\n\", (void *)buf);\n        fprintf(f, \"sizeof(*err_name) = %zu\\n\", sizeof(*err_name));\n        /* Dump the current contents of the buffer up to its compile-time size */\n        probe_log_bytes(f, \"buffer before/at stage\", buf, sizeof(*err_name));\n    }\n\n    if (Error != NULL)\n    {\n        fprintf(f, \"Error table entry ptr = %p\\n\", (const void *)Error);\n        if (Error->Name != NULL)\n        {\n            fprintf(f, \"Error->Number = %d\\n\", (int)Error->Number);\n            fprintf(f, \"Error->Name ptr = %p\\n\", (const void *)Error->Name);\n            fprintf(f, \"Error->Name string = '%s'\\n\", Error->Name);\n        }\n        else\n        {\n            fprintf(f, \"Error->Name = NULL\\n\");\n        }\n    }\n\n    fprintf(f, \"--- end probe: %s ---\\n\\n\", stage);\n    fclose(f);\n}\n\nint32 OS_GetErrorName(int32 error_num, os_err_name_t *err_name)\n{\n    int32                        return_code;\n    const OS_ErrorTable_Entry_t *Error;\n\n    /* Entry probe */\n    probe_log_state(\"entry\", error_num, err_name, NULL);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(err_name);\n\n    /* Probe after pointer check */\n    probe_log_state(\"after_ptr_check\", error_num, err_name, NULL);\n\n    Error = OS_GLOBAL_ERROR_NAME_TABLE;\n    while (Error->Name != NULL && Error->Number != error_num)\n    {\n        ++Error;\n    }\n\n    /* Probe after searching global table */\n    probe_log_state(\"after_global_search\", error_num, err_name, Error);\n\n    if (Error->Number != error_num)\n    {\n        Error = OS_IMPL_ERROR_NAME_TABLE;\n        while (Error->Name != NULL && Error->Number != error_num)\n        {\n            ++Error;\n        }\n    }\n\n    /* Probe after searching impl table */\n    probe_log_state(\"after_impl_search\", error_num, err_name, Error);\n\n    if (Error->Number == error_num && Error->Name != NULL)\n    {\n        /* Log before strncpy */\n        probe_log_state(\"before_strncpy\", error_num, err_name, Error);\n\n        strncpy(*err_name, Error->Name, sizeof(*err_name) - 1);\n\n        /* Log after strncpy and before the potentially-ambiguous write */\n        probe_log_state(\"after_strncpy_before_buggy_write\", error_num, err_name, Error);\n\n        /* Intentionally keep the original (buggy) expression to reproduce the scenario */\n        *err_name[sizeof(*err_name) - 1] = 0;\n\n        /* Log after the ambiguous write to capture its effects */\n        probe_log_state(\"after_buggy_write\", error_num, err_name, Error);\n\n        return_code                      = OS_SUCCESS;\n    }\n    else\n    {\n        /* Log before snprintf */\n        probe_log_state(\"before_snprintf_unknown\", error_num, err_name, Error);\n\n        snprintf(*err_name, OS_ERROR_NAME_LENGTH, \"OS_UNKNOWN(%d)\", (int)error_num);\n        return_code = OS_ERROR;\n\n        /* Log after snprintf */\n        probe_log_state(\"after_snprintf_unknown\", error_num, err_name, Error);\n    }\n\n    /* Final null-terminate as in original code */\n    (*err_name)[OS_ERROR_NAME_LENGTH - 1] = '\\0';\n\n    /* Final probe before return */\n    probe_log_state(\"final\", error_num, err_name, Error);\n\n    return return_code;\n}\n"
}