{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_GetErrorName:\n```c\nint32 OS_GetErrorName(int32 error_num, os_err_name_t *err_name)\n{\n    int32                        return_code;\n    const OS_ErrorTable_Entry_t *Error;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(err_name);\n\n    Error = OS_GLOBAL_ERROR_NAME_TABLE;\n    while (Error->Name != NULL && Error->Number != error_num)\n    {\n        ++Error;\n    }\n\n    if (Error->Number != error_num)\n    {\n        Error = OS_IMPL_ERROR_NAME_TABLE;\n        while (Error->Name != NULL && Error->Number != error_num)\n        {\n            ++Error;\n        }\n    }\n\n    if (Error->Number == error_num && Error->Name != NULL)\n    {\n        strncpy(*err_name, Error->Name, sizeof(*err_name) - 1);\n        *err_name[sizeof(*err_name) - 1] = 0;\n        return_code                      = OS_SUCCESS;\n    }\n    else\n    {\n        snprintf(*err_name, OS_ERROR_NAME_LENGTH, \"OS_UNKNOWN(%d)\", (int)error_num);\n        return_code = OS_ERROR;\n    }\n\n    (*err_name)[OS_ERROR_NAME_LENGTH - 1] = '\\0';\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_GetErrorName:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nstatic const OS_ErrorTable_Entry_t OS_GLOBAL_ERROR_NAME_TABLE[] = {\n    {OS_SUCCESS, \"OS_SUCCESS\"},\n    {OS_ERROR, \"OS_ERROR\"},\n    {OS_INVALID_POINTER, \"OS_INVALID_POINTER\"},\n    {OS_ERROR_ADDRESS_MISALIGNED, \"OS_ERROR_ADDRESS_MISALIGNED\"},\n    {OS_ERROR_TIMEOUT, \"OS_ERROR_TIMEOUT\"},\n    {OS_INVALID_INT_NUM, \"OS_INVALID_INT_NUM\"},\n    {OS_SEM_FAILURE, \"OS_SEM_FAILURE\"},\n    {OS_SEM_TIMEOUT, \"OS_SEM_TIMEOUT\"},\n    {OS_QUEUE_EMPTY, \"OS_QUEUE_EMPTY\"},\n    {OS_QUEUE_FULL, \"OS_QUEUE_FULL\"},\n    {OS_QUEUE_TIMEOUT, \"OS_QUEUE_TIMEOUT\"},\n    {OS_QUEUE_INVALID_SIZE, \"OS_QUEUE_INVALID_SIZE\"},\n    {OS_QUEUE_ID_ERROR, \"OS_QUEUE_ID_ERROR\"},\n    {OS_ERR_NAME_TOO_LONG, \"OS_ERR_NAME_TOO_LONG\"},\n    {OS_ERR_NO_FREE_IDS, \"OS_ERR_NO_FREE_IDS\"},\n    {OS_ERR_NAME_TAKEN, \"OS_ERR_NAME_TAKEN\"},\n    {OS_ERR_INVALID_ID, \"OS_ERR_INVALID_ID\"},\n    {OS_ERR_NAME_NOT_FOUND, \"OS_ERR_NAME_NOT_FOUND\"},\n    {OS_ERR_SEM_NOT_FULL, \"OS_ERR_SEM_NOT_FULL\"},\n    {OS_ERR_INVALID_PRIORITY, \"OS_ERR_INVALID_PRIORITY\"},\n    {OS_INVALID_SEM_VALUE, \"OS_INVALID_SEM_VALUE\"},\n    {OS_ERR_FILE, \"OS_ERR_FILE\"},\n    {OS_ERR_NOT_IMPLEMENTED, \"OS_ERR_NOT_IMPLEMENTED\"},\n    {OS_TIMER_ERR_INVALID_ARGS, \"OS_TIMER_ERR_INVALID_ARGS\"},\n    {OS_TIMER_ERR_TIMER_ID, \"OS_TIMER_ERR_TIMER_ID\"},\n    {OS_TIMER_ERR_UNAVAILABLE, \"OS_TIMER_ERR_UNAVAILABLE\"},\n    {OS_TIMER_ERR_INTERNAL, \"OS_TIMER_ERR_INTERNAL\"},\n    {OS_ERR_OBJECT_IN_USE, \"OS_ERR_OBJECT_IN_USE\"},\n    {OS_ERR_BAD_ADDRESS, \"OS_ERR_BAD_ADDRESS\"},\n    {OS_ERR_INCORRECT_OBJ_STATE, \"OS_ERR_INCORRECT_OBJ_STATE\"},\n    {OS_ERR_INCORRECT_OBJ_TYPE, \"OS_ERR_INCORRECT_OBJ_TYPE\"},\n    {OS_ERR_STREAM_DISCONNECTED, \"OS_ERR_STREAM_DISCONNECTED\"},\n    {OS_ERR_OPERATION_NOT_SUPPORTED, \"OS_ERR_OPERATION_NOT_SUPPORTED\"},\n    {OS_ERR_INVALID_SIZE, \"OS_ERR_INVALID_SIZE\"},\n    {OS_ERR_OUTPUT_TOO_LARGE, \"OS_ERR_OUTPUT_TOO_LARGE\"},\n    {OS_ERR_INVALID_ARGUMENT, \"OS_ERR_INVALID_ARGUMENT\"},\n    {OS_FS_ERR_PATH_TOO_LONG, \"OS_FS_ERR_PATH_TOO_LONG\"},\n    {OS_FS_ERR_NAME_TOO_LONG, \"OS_FS_ERR_NAME_TOO_LONG\"},\n    {OS_FS_ERR_DRIVE_NOT_CREATED, \"OS_FS_ERR_DRIVE_NOT_CREATED\"},\n    {OS_FS_ERR_DEVICE_NOT_FREE, \"OS_FS_ERR_DEVICE_NOT_FREE\"},\n    {OS_FS_ERR_PATH_INVALID, \"OS_FS_ERR_PATH_INVALID\"},\n\n    {0, NULL} /* End of table marker */\n}\n...\nconst OS_ErrorTable_Entry_t OS_IMPL_ERROR_NAME_TABLE[] = {{0, NULL}}\n...\ntypedef struct\n{\n    int32       Number;\n    const char *Name;\n} OS_ErrorTable_Entry_t\n...\ntypedef char os_err_name_t[OS_ERROR_NAME_LENGTH]\n...\n#define OS_ERROR_NAME_LENGTH 35\n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERROR (-1)\n...\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}\n...\nvoid UT_Stub_RegisterReturnType(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    if (ReturnSize > 0)\n    {\n        /* Check for existing buffer and re-use if same size (should be!) */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n        if (StubPtr != NULL && StubPtr->Data.Buff.TotalSize != ReturnSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n            StubPtr = NULL;\n        }\n\n        if (StubPtr == NULL)\n        {\n            StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n            if (StubPtr == NULL)\n            {\n                UtAssert_Abort(\"Cannot set return buffer - UT_MAX_FUNC_STUBS too low?\");\n            }\n            else\n            {\n                StubPtr->FuncKey           = FuncKey;\n                StubPtr->EntryType         = UT_ENTRYTYPE_RETURN_BUFFER;\n                StubPtr->Data.Buff.BasePtr = malloc(ReturnSize);\n                if (StubPtr->Data.Buff.BasePtr == NULL)\n                {\n                    UtAssert_Abort(\"Cannot allocate data buffer - malloc() failed!\");\n                }\n                else\n                {\n                    memset(StubPtr->Data.Buff.BasePtr, 0, ReturnSize);\n                    StubPtr->ModeFlags |= UT_MODEFLAG_ALLOC_BUF;\n                }\n\n                StubPtr->Data.Buff.TotalSize = ReturnSize;\n            }\n        }\n\n        if (StubPtr != NULL)\n        {\n            StubPtr->Data.Buff.Position       = 0;\n            StubPtr->Data.Buff.ContentTypeStr = TypeName;\n        }\n    }\n}\n...\nvoid UT_Stub_RegisterContextWithMetaData(UT_EntryKey_t FuncKey, const char *Name, UT_StubContext_Arg_Type_t ParamType,\n                                         const void *ParamPtr, size_t ParamSize)\n{\n    UT_StubTableEntry_t * StubPtr;\n    UT_StubArgMetaData_t *MetaPtr;\n\n    /*\n     * First find an existing context entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_CALLBACK_CONTEXT);\n    if (StubPtr == NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n    }\n\n    if (StubPtr == NULL)\n    {\n        UtAssert_Abort(\"Cannot set context - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else\n    {\n        StubPtr->FuncKey   = FuncKey;\n        StubPtr->EntryType = UT_ENTRYTYPE_CALLBACK_CONTEXT;\n        if (StubPtr->Data.Context.ArgCount < UT_STUBCONTEXT_MAXSIZE)\n        {\n            StubPtr->Data.Context.ArgPtr[StubPtr->Data.Context.ArgCount] = ParamPtr;\n\n            MetaPtr       = &StubPtr->Data.Context.Meta[StubPtr->Data.Context.ArgCount];\n            MetaPtr->Size = ParamSize;\n            MetaPtr->Type = ParamType;\n\n            /*\n             * If name was specified, then trim any leading address operator (&)\n             * and/or whitespace, keeping only the actual name part.\n             */\n            if (Name != NULL)\n            {\n                /*\n                 * If the _address_ of the stack variable was actually passed in,\n                 * the mark this as indirect (i.e. hook must dereference ArgPtr\n                 * to get actual parameter value).  Otherwise assume it as direct.\n                 */\n                MetaPtr->Name = Name;\n                while (*MetaPtr->Name != 0)\n                {\n                    if (*MetaPtr->Name == '&')\n                    {\n                        /* this means its a pointer to the value, not the value itself */\n                        if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                        {\n                            MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_INDIRECT;\n                        }\n                    }\n                    else if (*MetaPtr->Name != ' ')\n                    {\n                        /* stop at non-whitespace */\n                        break;\n                    }\n                    ++MetaPtr->Name;\n                }\n\n                if (MetaPtr->Type == UT_STUBCONTEXT_ARG_TYPE_UNSPECIFIED)\n                {\n                    MetaPtr->Type = UT_STUBCONTEXT_ARG_TYPE_DIRECT;\n                }\n            }\n            ++StubPtr->Data.Context.ArgCount;\n        }\n    }\n}\n...\nvoid UT_ExecuteBasicHandler(UT_EntryKey_t FuncKey, const char *FunctionName, UT_HandlerFunc_t DefaultHandler)\n{\n    /* Check if the test case registered a hook, and use the default if not */\n    if (UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_FINAL_HANDLER) == NULL && DefaultHandler != NULL)\n    {\n        UT_SetHandlerFunction(FuncKey, DefaultHandler, NULL);\n    }\n\n    UT_DefaultStubImpl(FunctionName, FuncKey, 0, NULL);\n}\n...\nvoid *UT_Stub_GetReturnValuePtr(UT_EntryKey_t FuncKey, size_t ReturnSize, const char *TypeName)\n{\n    UT_StubTableEntry_t *StubPtr;\n    void *               ReturnPtr;\n\n    ReturnPtr = NULL;\n    StubPtr   = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (StubPtr == NULL)\n    {\n        /* This shouldn't happen, it means the stub tried to use a\n         * return buffer that does not exist.\n         *\n         * It is most likely caused by a mismatch/incompatibility between\n         * stub and handler.  Aborting now is better than segfaulting later,\n         * as the errored call should still be on the stack trace\n         */\n        UtAssert_Abort(\"Return buffer invalid\");\n    }\n    else\n    {\n        ReturnPtr = StubPtr->Data.Buff.BasePtr;\n\n        /*\n         * Sanity check on the size and type name.\n         *\n         * In a generated stub these should always match, but if any patches\n         * were done or if a hand-written stub is used, mistakes could be made.\n         */\n        if (StubPtr->Data.Buff.Position != ReturnSize || strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) != 0)\n        {\n            UtAssert_Failed(\"Return value mismatch, expected %s(%lu) got %s(%lu)\", TypeName, (unsigned long)ReturnSize,\n                            StubPtr->Data.Buff.ContentTypeStr, (unsigned long)StubPtr->Data.Buff.Position);\n        }\n    }\n\n    return ReturnPtr;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstrncpy(*err_name, Error->Name, sizeof(*err_name) - 1);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The strncpy call copies the selected Error->Name into the provided err_name buffer when an error is found. If this call were removed the buffer would not be populated (the function would still return OS_SUCCESS), so program behaviour would change \u2014 therefore the call is not dead code. (Note: there is a separate bug in the next statement due to incorrect operator precedence: '*err_name[sizeof(...)-1] = 0;' is incorrect and should be '(*err_name)[...]=0', but that does not make the strncpy itself dead.)"
}