{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_GetErrorName:\n```c\nint32 OS_GetErrorName(int32 error_num, os_err_name_t *err_name)\n{\n    int32                        return_code;\n    const OS_ErrorTable_Entry_t *Error;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(err_name);\n\n    Error = OS_GLOBAL_ERROR_NAME_TABLE;\n    while (Error->Name != NULL && Error->Number != error_num)\n    {\n        ++Error;\n    }\n\n    if (Error->Number != error_num)\n    {\n        Error = OS_IMPL_ERROR_NAME_TABLE;\n        while (Error->Name != NULL && Error->Number != error_num)\n        {\n            ++Error;\n        }\n    }\n\n    if (Error->Number == error_num && Error->Name != NULL)\n    {\n        strncpy(*err_name, Error->Name, sizeof(*err_name) - 1);\n        *err_name[sizeof(*err_name) - 1] = 0;\n        return_code                      = OS_SUCCESS;\n    }\n    else\n    {\n        snprintf(*err_name, OS_ERROR_NAME_LENGTH, \"OS_UNKNOWN(%d)\", (int)error_num);\n        return_code = OS_ERROR;\n    }\n\n    (*err_name)[OS_ERROR_NAME_LENGTH - 1] = '\\0';\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_GetErrorName:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\ntypedef char os_err_name_t[OS_ERROR_NAME_LENGTH]\n...\n#define OS_ERROR_NAME_LENGTH 35\n...\ntypedef struct\n{\n    int32       Number;\n    const char *Name;\n} OS_ErrorTable_Entry_t\n...\nstatic const OS_ErrorTable_Entry_t OS_GLOBAL_ERROR_NAME_TABLE[] = {\n    {OS_SUCCESS, \"OS_SUCCESS\"},\n    {OS_ERROR, \"OS_ERROR\"},\n    {OS_INVALID_POINTER, \"OS_INVALID_POINTER\"},\n    {OS_ERROR_ADDRESS_MISALIGNED, \"OS_ERROR_ADDRESS_MISALIGNED\"},\n    {OS_ERROR_TIMEOUT, \"OS_ERROR_TIMEOUT\"},\n    {OS_INVALID_INT_NUM, \"OS_INVALID_INT_NUM\"},\n    {OS_SEM_FAILURE, \"OS_SEM_FAILURE\"},\n    {OS_SEM_TIMEOUT, \"OS_SEM_TIMEOUT\"},\n    {OS_QUEUE_EMPTY, \"OS_QUEUE_EMPTY\"},\n    {OS_QUEUE_FULL, \"OS_QUEUE_FULL\"},\n    {OS_QUEUE_TIMEOUT, \"OS_QUEUE_TIMEOUT\"},\n    {OS_QUEUE_INVALID_SIZE, \"OS_QUEUE_INVALID_SIZE\"},\n    {OS_QUEUE_ID_ERROR, \"OS_QUEUE_ID_ERROR\"},\n    {OS_ERR_NAME_TOO_LONG, \"OS_ERR_NAME_TOO_LONG\"},\n    {OS_ERR_NO_FREE_IDS, \"OS_ERR_NO_FREE_IDS\"},\n    {OS_ERR_NAME_TAKEN, \"OS_ERR_NAME_TAKEN\"},\n    {OS_ERR_INVALID_ID, \"OS_ERR_INVALID_ID\"},\n    {OS_ERR_NAME_NOT_FOUND, \"OS_ERR_NAME_NOT_FOUND\"},\n    {OS_ERR_SEM_NOT_FULL, \"OS_ERR_SEM_NOT_FULL\"},\n    {OS_ERR_INVALID_PRIORITY, \"OS_ERR_INVALID_PRIORITY\"},\n    {OS_INVALID_SEM_VALUE, \"OS_INVALID_SEM_VALUE\"},\n    {OS_ERR_FILE, \"OS_ERR_FILE\"},\n    {OS_ERR_NOT_IMPLEMENTED, \"OS_ERR_NOT_IMPLEMENTED\"},\n    {OS_TIMER_ERR_INVALID_ARGS, \"OS_TIMER_ERR_INVALID_ARGS\"},\n    {OS_TIMER_ERR_TIMER_ID, \"OS_TIMER_ERR_TIMER_ID\"},\n    {OS_TIMER_ERR_UNAVAILABLE, \"OS_TIMER_ERR_UNAVAILABLE\"},\n    {OS_TIMER_ERR_INTERNAL, \"OS_TIMER_ERR_INTERNAL\"},\n    {OS_ERR_OBJECT_IN_USE, \"OS_ERR_OBJECT_IN_USE\"},\n    {OS_ERR_BAD_ADDRESS, \"OS_ERR_BAD_ADDRESS\"},\n    {OS_ERR_INCORRECT_OBJ_STATE, \"OS_ERR_INCORRECT_OBJ_STATE\"},\n    {OS_ERR_INCORRECT_OBJ_TYPE, \"OS_ERR_INCORRECT_OBJ_TYPE\"},\n    {OS_ERR_STREAM_DISCONNECTED, \"OS_ERR_STREAM_DISCONNECTED\"},\n    {OS_ERR_OPERATION_NOT_SUPPORTED, \"OS_ERR_OPERATION_NOT_SUPPORTED\"},\n    {OS_ERR_INVALID_SIZE, \"OS_ERR_INVALID_SIZE\"},\n    {OS_ERR_OUTPUT_TOO_LARGE, \"OS_ERR_OUTPUT_TOO_LARGE\"},\n    {OS_ERR_INVALID_ARGUMENT, \"OS_ERR_INVALID_ARGUMENT\"},\n    {OS_FS_ERR_PATH_TOO_LONG, \"OS_FS_ERR_PATH_TOO_LONG\"},\n    {OS_FS_ERR_NAME_TOO_LONG, \"OS_FS_ERR_NAME_TOO_LONG\"},\n    {OS_FS_ERR_DRIVE_NOT_CREATED, \"OS_FS_ERR_DRIVE_NOT_CREATED\"},\n    {OS_FS_ERR_DEVICE_NOT_FREE, \"OS_FS_ERR_DEVICE_NOT_FREE\"},\n    {OS_FS_ERR_PATH_INVALID, \"OS_FS_ERR_PATH_INVALID\"},\n\n    {0, NULL} /* End of table marker */\n}\n...\nconst OS_ErrorTable_Entry_t OS_IMPL_ERROR_NAME_TABLE[] = {{0, NULL}}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "*err_name[sizeof(*err_name) - 1] = 0;",
    "strncpy(*err_name, Error->Name, sizeof(*err_name) - 1);",
    "OS_CHECK_POINTER(err_name);",
    "(*err_name)[OS_ERROR_NAME_LENGTH - 1] = '\\0';",
    "snprintf(*err_name, OS_ERROR_NAME_LENGTH, \"OS_UNKNOWN(%d)\", (int)error_num);"
  ],
  "explanation": "Other fragments do not need investigation for Rule 17.8 because they do not modify function parameters themselves: the Error pointer arithmetic (++Error) and accesses modify or use a local pointer, not a parameter; checks of Error->Name and Error->Number are reads only; assignments to the local variable return_code do not affect parameters; the function parameter error_num is only read (cast for snprintf) and never assigned; therefore no other lines change the parameter variables themselves. The listed fragments should be investigated to ensure the pointer parameter (err_name) itself is not being modified or misused (and that macros used do not have side effects on the parameter)."
}