{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'task_id' and the assignment 'task_id = OS_TaskGetId_Impl();' are redundant. The assignment is an operation that is executed but could be removed by replacing the function body with 'return OS_TaskGetId_Impl();' without changing program behaviour, so this constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemTake code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1778.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemTake as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemTake:\n```c\nint32 OS_MutSemTake(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        return_code = OS_MutSemTake_Impl(&token);\n        if (return_code == OS_SUCCESS)\n        {\n            /* Always set the owner if OS_MutSemTake_Impl() returned success */\n            mutex->last_owner = OS_TaskGetId();\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemTake code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe helper: append a timestamped message to /tmp/logs/1778.txt */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1778.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_WIN32)\n    localtime_s(&tm_buf, &t);\n#else\n    localtime_r(&t, &tm_buf);\n#endif\n\n    char timebuf[64];\n    if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n    {\n        timebuf[0] = '\\0';\n    }\n\n    fprintf(f, \"[%s] \", timebuf);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_MutSemTake(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n\n    /* Log entry */\n    os_probe_log(\"ENTER OS_MutSemTake: sem_id=%u\", (unsigned)sem_id);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    os_probe_log(\"OS_ObjectIdGetById returned %d for sem_id=%u, token=%llu\",\n                 (int)return_code, (unsigned)sem_id, (unsigned long long) (uintptr_t) &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n        os_probe_log(\"Resolved mutex pointer=%p for token=%llu\", (void *)mutex, (unsigned long long) (uintptr_t) &token);\n\n        return_code = OS_MutSemTake_Impl(&token);\n        os_probe_log(\"OS_MutSemTake_Impl returned %d for token=%llu\",\n                     (int)return_code, (unsigned long long) (uintptr_t) &token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Always set the owner if OS_MutSemTake_Impl() returned success */\n            int32 owner = OS_TaskGetId();\n            os_probe_log(\"OS_TaskGetId returned owner=%d; setting mutex->last_owner\", (int)owner);\n            mutex->last_owner = owner;\n        }\n    }\n    else\n    {\n        os_probe_log(\"OS_MutSemTake: parameter check failed with code %d for sem_id=%u\",\n                     (int)return_code, (unsigned)sem_id);\n    }\n\n    os_probe_log(\"EXIT OS_MutSemTake: sem_id=%u returning %d\", (unsigned)sem_id, (int)return_code);\n    return return_code;\n}\n"
}