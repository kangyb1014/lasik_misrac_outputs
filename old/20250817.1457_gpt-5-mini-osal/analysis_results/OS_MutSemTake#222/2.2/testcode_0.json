{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf the mutex->last_owner field is never read by any other code (for example, it is only used for debugging/diagnostics or never referenced), and OS_TaskGetId() has no observable side effects, then the assignment mutex->last_owner = OS_TaskGetId(); is executed but its removal would not affect program behaviour. In that situation the statement is dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemTake code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1778.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemTake as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemTake:\n```c\nint32 OS_MutSemTake(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        return_code = OS_MutSemTake_Impl(&token);\n        if (return_code == OS_SUCCESS)\n        {\n            /* Always set the owner if OS_MutSemTake_Impl() returned success */\n            mutex->last_owner = OS_TaskGetId();\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemTake code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a single line with relevant runtime state to /tmp/logs/1778.txt */\nstatic void os_mutsem_probe_log(const char *event,\n                                unsigned long long sem_id_val,\n                                unsigned long long token_val,\n                                void *mutex_ptr,\n                                int return_code_val,\n                                unsigned long long taskid_val,\n                                int assignment_done)\n{\n    FILE *f = fopen(\"/tmp/logs/1778.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If opening the preferred log file fails, silently return to avoid\n           changing program behaviour. */\n        return;\n    }\n\n    fprintf(f,\n            \"%s: sem_id=%llu token=%llu mutex=%p return_code=%d taskid=%llu assigned=%d\\n\",\n            event,\n            sem_id_val,\n            token_val,\n            mutex_ptr,\n            return_code_val,\n            taskid_val,\n            assignment_done);\n    fclose(f);\n}\n\nint32 OS_MutSemTake(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token = (OS_object_token_t)0; /* initialize for safe logging */\n    int32                       return_code;\n\n    /* Entry probe */\n    os_mutsem_probe_log(\"ENTER\", (unsigned long long)sem_id, (unsigned long long)token, NULL, -1, 0ULL, 0);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log after object id resolution */\n    os_mutsem_probe_log(\"After_ObjectIdGetById\", (unsigned long long)sem_id, (unsigned long long)token, NULL, (int)return_code, 0ULL, 0);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n\n        /* Log mutex pointer obtained */\n        os_mutsem_probe_log(\"Got_Mutex\", (unsigned long long)sem_id, (unsigned long long)token, (void *)mutex, (int)return_code, 0ULL, 0);\n\n        return_code = OS_MutSemTake_Impl(&token);\n\n        /* Log result of implementation call */\n        os_mutsem_probe_log(\"After_Impl\", (unsigned long long)sem_id, (unsigned long long)token, (void *)mutex, (int)return_code, 0ULL, 0);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Always set the owner if OS_MutSemTake_Impl() returned success */\n            /* Capture task id once to avoid multiple calls (which could have side effects) */\n            osal_id_t taskid = OS_TaskGetId();\n\n            /* Log the task id that is about to be assigned */\n            os_mutsem_probe_log(\"Before_Assign_LastOwner\", (unsigned long long)sem_id, (unsigned long long)token, (void *)mutex, (int)return_code, (unsigned long long)taskid, 0);\n\n            mutex->last_owner = taskid;\n\n            /* Verify/Log that assignment occurred (read-back) */\n            os_mutsem_probe_log(\"After_Assign_LastOwner\", (unsigned long long)sem_id, (unsigned long long)token, (void *)mutex, (int)return_code, (unsigned long long)mutex->last_owner, 1);\n        }\n    }\n\n    /* Exit probe */\n    os_mutsem_probe_log(\"EXIT\", (unsigned long long)sem_id, (unsigned long long)token, (void *)( (return_code==OS_SUCCESS) ? (void *)OS_OBJECT_TABLE_GET(OS_mutex_table, token) : NULL), (int)return_code, 0ULL, 0);\n\n    return return_code;\n}\n"
}