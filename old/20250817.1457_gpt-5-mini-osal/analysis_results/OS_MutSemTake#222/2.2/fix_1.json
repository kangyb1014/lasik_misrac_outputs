{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1778.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_WIN32)\n    localtime_s(&tm_buf, &t);\n#else\n    localtime_r(&t, &tm_buf);\n#endif\n\n    char timebuf[64];\n    if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n    {\n        timebuf[0] = '\\0';\n    }\n\n    fprintf(f, \"[%s] \", timebuf);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_MutSemTake(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n\n    /* Log entry */\n    os_probe_log(\"ENTER OS_MutSemTake: sem_id=%u\", (unsigned)sem_id);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    os_probe_log(\"OS_ObjectIdGetById returned %d for sem_id=%u, token=%llu\",\n                 (int)return_code, (unsigned)sem_id, (unsigned long long) (uintptr_t) &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n        os_probe_log(\"Resolved mutex pointer=%p for token=%llu\", (void *)mutex, (unsigned long long) (uintptr_t) &token);\n\n        return_code = OS_MutSemTake_Impl(&token);\n        os_probe_log(\"OS_MutSemTake_Impl returned %d for token=%llu\",\n                     (int)return_code, (unsigned long long) (uintptr_t) &token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Always set the owner if OS_MutSemTake_Impl() returned success */\n            int32 owner = OS_TaskGetId();\n            os_probe_log(\"OS_TaskGetId returned owner=%d; setting mutex->last_owner\", (int)owner);\n            mutex->last_owner = owner;\n        }\n    }\n    else\n    {\n        os_probe_log(\"OS_MutSemTake: parameter check failed with code %d for sem_id=%u\",\n                     (int)return_code, (unsigned)sem_id);\n    }\n\n    os_probe_log(\"EXIT OS_MutSemTake: sem_id=%u returning %d\", (unsigned)sem_id, (int)return_code);\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmploum0auc/src/src/os/shared/src/osapi-mutex.c: In function 'os_probe_log':\n/tmp/tmploum0auc/src/src/os/shared/src/osapi-mutex.c:198:15: error: storage size of 'tm_buf' isn't known\n  198 |     struct tm tm_buf;\n      |               ^~~~~~\n/tmp/tmploum0auc/src/src/os/shared/src/osapi-mutex.c:215:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  215 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-mutex.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-mutex.dir/__/__/os/shared/src/osapi-mutex.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3911: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-mutex.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_MutSemTake as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1778.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_WIN32)\n    localtime_s(&tm_buf, &t);\n#else\n    localtime_r(&t, &tm_buf);\n#endif\n\n    char timebuf[64];\n    if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n    {\n        timebuf[0] = '\\0';\n    }\n\n    fprintf(f, \"[%s] \", timebuf);\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast to the implementation va_list type expected by vfprintf to avoid\n       mismatches with project-specific va_list wrappers (e.g. OCS_va_list). */\n    vfprintf(f, fmt, (va_list)ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_MutSemTake(osal_id_t sem_id)\n{\n    OS_mutex_internal_record_t *mutex;\n    OS_object_token_t           token;\n    int32                       return_code;\n\n    /* Log entry */\n    os_probe_log(\"ENTER OS_MutSemTake: sem_id=%u\", (unsigned)sem_id);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    os_probe_log(\"OS_ObjectIdGetById returned %d for sem_id=%u, token=%llu\",\n                 (int)return_code, (unsigned)sem_id, (unsigned long long) (uintptr_t) &token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        mutex = OS_OBJECT_TABLE_GET(OS_mutex_table, token);\n        os_probe_log(\"Resolved mutex pointer=%p for token=%llu\", (void *)mutex, (unsigned long long) (uintptr_t) &token);\n\n        return_code = OS_MutSemTake_Impl(&token);\n        os_probe_log(\"OS_MutSemTake_Impl returned %d for token=%llu\",\n                     (int)return_code, (unsigned long long) (uintptr_t) &token);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* Always set the owner if OS_MutSemTake_Impl() returned success */\n            int32 owner = OS_TaskGetId();\n            os_probe_log(\"OS_TaskGetId returned owner=%d; setting mutex->last_owner\", (int)owner);\n            mutex->last_owner = owner;\n        }\n    }\n    else\n    {\n        os_probe_log(\"OS_MutSemTake: parameter check failed with code %d for sem_id=%u\",\n                     (int)return_code, (unsigned)sem_id);\n    }\n\n    os_probe_log(\"EXIT OS_MutSemTake: sem_id=%u returning %d\", (unsigned)sem_id, (int)return_code);\n    return return_code;\n}\n",
  "explanation": "Added the necessary standard headers (<stdio.h>, <stdarg.h>, <time.h>, <stdint.h>) so struct tm and va_list are known. To address the va_list type mismatch (project-specific wrappers like OCS_va_list), vfprintf is called with an explicit cast to (va_list)ap. No logic of OS_MutSemTake was changed; only minimal portability/ABI fixes were applied so the code compiles."
}