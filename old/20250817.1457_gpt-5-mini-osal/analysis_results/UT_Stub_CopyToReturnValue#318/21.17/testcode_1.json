{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe destination size is checked, but the function does not validate the source pointer. If BufferPtr is NULL or points to an object smaller than BufferSize (for example: char src[5]; UT_Stub_CopyToReturnValue(key, src, 10)), the call memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize) will read beyond the bounds of the source object (or dereference NULL), violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyToReturnValue code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2551.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyToReturnValue as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyToReturnValue:\n```c\nvoid UT_Stub_CopyToReturnValue(UT_EntryKey_t FuncKey, const void *BufferPtr, size_t BufferSize)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n    if (StubPtr != NULL)\n    {\n        /* If the size does not match, there is a bug */\n        if (StubPtr->Data.Buff.TotalSize != BufferSize)\n        {\n            UtAssert_Abort(\"Size mismatch in setting return value\");\n        }\n        else\n        {\n            memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n            StubPtr->Data.Buff.Position = BufferSize;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyToReturnValue code.\n",
  "test_code": "void UT_Stub_CopyToReturnValue(UT_EntryKey_t FuncKey, const void *BufferPtr, size_t BufferSize)\n{\n    UT_StubTableEntry_t *StubPtr;\n    FILE *log = fopen(\"/tmp/logs/2551.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        /* Log function entry and basic parameters (do not dereference BufferPtr) */\n        fprintf(log, \"UT_Stub_CopyToReturnValue ENTRY: FuncKey=%lu, BufferPtr=%p, BufferSize=%zu\\n\",\n                (unsigned long)FuncKey, BufferPtr, BufferSize);\n        fflush(log);\n    }\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_GetStubEntry returned StubPtr=%p\\n\", (void *)StubPtr);\n        fflush(log);\n    }\n\n    if (StubPtr != NULL)\n    {\n        /* Log stub buffer metadata (safe to read from StubPtr because it is non-NULL) */\n        if (log != NULL)\n        {\n            fprintf(log, \"Stub metadata: TotalSize=%zu, BasePtr=%p, Position=%zu\\n\",\n                    StubPtr->Data.Buff.TotalSize,\n                    (void *)StubPtr->Data.Buff.BasePtr,\n                    StubPtr->Data.Buff.Position);\n            fflush(log);\n        }\n\n        /* If the size does not match, there is a bug */\n        if (StubPtr->Data.Buff.TotalSize != BufferSize)\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"Size mismatch detected: Stub TotalSize=%zu != BufferSize=%zu. Calling UtAssert_Abort.\\n\",\n                        StubPtr->Data.Buff.TotalSize, BufferSize);\n                fflush(log);\n                fclose(log);\n                log = NULL;\n            }\n\n            UtAssert_Abort(\"Size mismatch in setting return value\");\n        }\n        else\n        {\n            if (log != NULL)\n            {\n                /* Log the imminent memcpy call without attempting to read the source buffer */\n                fprintf(log, \"About to memcpy(dst=%p, src=%p, n=%zu)\\n\",\n                        (void *)StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n                fflush(log);\n                fclose(log);\n                log = NULL;\n            }\n\n            memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n            StubPtr->Data.Buff.Position = BufferSize;\n\n            /* Re-open log to record post-copy state */\n            log = fopen(\"/tmp/logs/2551.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"memcpy completed. New Position=%zu\\n\", StubPtr->Data.Buff.Position);\n                fflush(log);\n                fclose(log);\n                log = NULL;\n            }\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"No stub entry found for FuncKey=%lu\\n\", (unsigned long)FuncKey);\n            fflush(log);\n            fclose(log);\n            log = NULL;\n        }\n    }\n}\n"
}