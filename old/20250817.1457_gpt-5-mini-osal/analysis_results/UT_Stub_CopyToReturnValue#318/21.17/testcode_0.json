{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller passes a source pointer that refers to an object smaller than the supplied BufferSize, memcpy will read beyond the source object. For example, if the caller has a local array char src[10] but (incorrectly) passes BufferPtr = src with BufferSize = 20 and there exists a return buffer with TotalSize == 20, the function will pass the size check and perform memcpy(StubPtr->Data.Buff.BasePtr, src, 20), causing reads beyond src's bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyToReturnValue code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2551.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyToReturnValue as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyToReturnValue:\n```c\nvoid UT_Stub_CopyToReturnValue(UT_EntryKey_t FuncKey, const void *BufferPtr, size_t BufferSize)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n    if (StubPtr != NULL)\n    {\n        /* If the size does not match, there is a bug */\n        if (StubPtr->Data.Buff.TotalSize != BufferSize)\n        {\n            UtAssert_Abort(\"Size mismatch in setting return value\");\n        }\n        else\n        {\n            memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n            StubPtr->Data.Buff.Position = BufferSize;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyToReturnValue code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n#include <stdint.h>\n\nstatic void UT_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2551.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nvoid UT_Stub_CopyToReturnValue(UT_EntryKey_t FuncKey, const void *BufferPtr, size_t BufferSize)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    UT_LogProbe(\"ENTER: UT_Stub_CopyToReturnValue - FuncKey=%p, BufferPtr=%p, BufferSize=%zu\",\n                (void *)(uintptr_t)FuncKey, BufferPtr, BufferSize);\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n    UT_LogProbe(\"UT_GetStubEntry -> StubPtr=%p\", (void *)StubPtr);\n\n    if (StubPtr != NULL)\n    {\n        /* Log relevant stub buffer state before performing checks/copy */\n        UT_LogProbe(\"Stub Buff: BasePtr=%p, TotalSize=%zu, Position=%zu\",\n                    StubPtr->Data.Buff.BasePtr,\n                    StubPtr->Data.Buff.TotalSize,\n                    StubPtr->Data.Buff.Position);\n\n        /* If the size does not match, there is a bug */\n        if (StubPtr->Data.Buff.TotalSize != BufferSize)\n        {\n            UT_LogProbe(\"Size mismatch detected: Stub TotalSize=%zu, Provided BufferSize=%zu\",\n                        StubPtr->Data.Buff.TotalSize, BufferSize);\n\n            /* Record that we are aborting with the same abort path as original */\n            UtAssert_Abort(\"Size mismatch in setting return value\");\n        }\n        else\n        {\n            UT_LogProbe(\"About to memcpy: dest=%p, src=%p, size=%zu\",\n                        StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n\n            memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n\n            StubPtr->Data.Buff.Position = BufferSize;\n            UT_LogProbe(\"After memcpy: Position set to %zu\", StubPtr->Data.Buff.Position);\n        }\n    }\n    else\n    {\n        UT_LogProbe(\"No stub entry found (StubPtr == NULL). No action taken.\");\n    }\n\n    UT_LogProbe(\"EXIT: UT_Stub_CopyToReturnValue - FuncKey=%p\", (void *)(uintptr_t)FuncKey);\n}\n"
}