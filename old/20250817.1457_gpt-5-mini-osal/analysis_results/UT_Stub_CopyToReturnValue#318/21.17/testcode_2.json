{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) without checking that either pointer is non-NULL and that they refer to valid null-terminated strings. If TypeName or ContentTypeStr is NULL (for example if UT_Stub_RegisterReturnType was never called for the key, or it was called with a NULL TypeName), or if one of the pointers does not point to a null-terminated buffer, strcmp will access memory beyond the bounds of the referenced object (or dereference NULL). This is a violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyToReturnValue code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2551.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyToReturnValue as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyToReturnValue:\n```c\nvoid UT_Stub_CopyToReturnValue(UT_EntryKey_t FuncKey, const void *BufferPtr, size_t BufferSize)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n    if (StubPtr != NULL)\n    {\n        /* If the size does not match, there is a bug */\n        if (StubPtr->Data.Buff.TotalSize != BufferSize)\n        {\n            UtAssert_Abort(\"Size mismatch in setting return value\");\n        }\n        else\n        {\n            memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n            StubPtr->Data.Buff.Position = BufferSize;\n        }\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyToReturnValue code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <string.h>\n\nvoid UT_Stub_CopyToReturnValue(UT_EntryKey_t FuncKey, const void *BufferPtr, size_t BufferSize)\n{\n    UT_StubTableEntry_t *StubPtr;\n    FILE *log = fopen(\"/tmp/logs/2551.txt\", \"a\");\n\n    if (log != NULL)\n    {\n        fprintf(log, \"--- UT_Stub_CopyToReturnValue called ---\\n\");\n        fprintf(log, \"BufferPtr=%p, BufferSize=%zu\\n\", (void *)BufferPtr, BufferSize);\n    }\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETURN_BUFFER);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_GetStubEntry returned StubPtr=%p\\n\", (void *)StubPtr);\n        fflush(log);\n    }\n\n    if (StubPtr != NULL)\n    {\n        /* Log the relevant fields of the stub to capture state that may\n           be involved in the reported violation elsewhere (e.g. ContentTypeStr).\n           Only pointer values and sizes are logged; no dereference of unknown\n           external buffers is performed beyond what the original function does. */\n        if (log != NULL)\n        {\n            /* Many environments may not have ContentTypeStr; if present, log pointer value. */\n            fprintf(log, \"StubPtr->Data.Buff.BasePtr=%p\\n\", (void *)StubPtr->Data.Buff.BasePtr);\n            fprintf(log, \"StubPtr->Data.Buff.TotalSize=%zu\\n\", StubPtr->Data.Buff.TotalSize);\n            fprintf(log, \"StubPtr->Data.Buff.Position=%zu\\n\", StubPtr->Data.Buff.Position);\n            /* Log content-type pointer if the field exists in the struct layout.\n               This prints the pointer value only and does not read the string. */\n            /* To stay compatible if the field does not exist, wrap in a way that\n               will only refer to it if present in the structure definition at compile time. */\n#ifdef HAVE_CONTENT_TYPE_STR_MEMBER\n            fprintf(log, \"StubPtr->Data.Buff.ContentTypeStr=%p\\n\", (void *)StubPtr->Data.Buff.ContentTypeStr);\n#endif\n            fflush(log);\n        }\n\n        /* If the size does not match, there is a bug */\n        if (StubPtr->Data.Buff.TotalSize != BufferSize)\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"Size mismatch: StubTotal=%zu vs BufferSize=%zu -- calling UtAssert_Abort\\n\",\n                        StubPtr->Data.Buff.TotalSize, BufferSize);\n                fflush(log);\n                fclose(log);\n            }\n\n            UtAssert_Abort(\"Size mismatch in setting return value\");\n        }\n        else\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"Performing memcpy: dest=%p, src=%p, len=%zu\\n\",\n                        (void *)StubPtr->Data.Buff.BasePtr, (void *)BufferPtr, BufferSize);\n                fflush(log);\n            }\n\n            memcpy(StubPtr->Data.Buff.BasePtr, BufferPtr, BufferSize);\n            StubPtr->Data.Buff.Position = BufferSize;\n\n            if (log != NULL)\n            {\n                fprintf(log, \"Memcpy complete. New Position=%zu\\n\", StubPtr->Data.Buff.Position);\n                fflush(log);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"StubPtr is NULL - nothing to copy\\n\");\n            fflush(log);\n            fclose(log);\n        }\n    }\n}\n"
}