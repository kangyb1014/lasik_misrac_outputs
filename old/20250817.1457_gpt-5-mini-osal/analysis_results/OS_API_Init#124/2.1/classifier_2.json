{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_API_Init:\n```c\nint32 OS_API_Init(void)\n{\n    int32          return_code = OS_SUCCESS;\n    osal_objtype_t idtype;\n    uint32         microSecPerSec;\n\n    /*\n     * If OSAL is already initialized, not really a big issue, just return.\n     * This is not typically expected though, so its worth a debug statement.\n     *\n     * However this can validly occur when running tests on some platforms\n     * without a reset/reload between invocations.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_INIT_MAGIC_NUMBER)\n    {\n        OS_DEBUG(\"NOTE: ignored redundant OS_API_Init() call\\n\");\n        return OS_SUCCESS;\n    }\n\n    /* Wipe global state structure to be sure everything is clean */\n    memset(&OS_SharedGlobalVars, 0, sizeof(OS_SharedGlobalVars));\n\n    /* Reset debug to default level if enabled */\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    OS_SharedGlobalVars.DebugLevel = 1;\n#endif\n\n    /* Set flag that says OSAL has been initialized */\n    OS_SharedGlobalVars.GlobalState = OS_INIT_MAGIC_NUMBER;\n\n    /* Initialize the common table that everything shares */\n    return_code = OS_ObjectIdInit();\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    for (idtype = 0; idtype < OS_OBJECT_TYPE_USER; ++idtype)\n    {\n        /* Initialize the implementation first, as the shared layer depends on it */\n        return_code = OS_API_Impl_Init(idtype);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n\n        switch (idtype)\n        {\n            case OS_OBJECT_TYPE_OS_TASK:\n                return_code = OS_TaskAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_QUEUE:\n                return_code = OS_QueueAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_BINSEM:\n                return_code = OS_BinSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_COUNTSEM:\n                return_code = OS_CountSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MUTEX:\n                return_code = OS_MutexAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MODULE:\n                return_code = OS_ModuleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMEBASE:\n                return_code = OS_TimeBaseAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMECB:\n                return_code = OS_TimerCbAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_STREAM:\n                return_code = OS_FileAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_DIR:\n                return_code = OS_DirAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_FILESYS:\n                return_code = OS_FileSysAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONSOLE:\n                return_code = OS_ConsoleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONDVAR:\n                return_code = OS_CondVarAPI_Init();\n                break;\n            default:\n                break;\n        }\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"ID type 0x%x shared layer failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_NetworkAPI_Init();\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketAPI_Init();\n    }\n\n    /*\n     * Confirm that somewhere during initialization,\n     * the time variables got set to something valid\n     */\n    if (return_code == OS_SUCCESS &&\n        (OS_SharedGlobalVars.MicroSecPerTick == 0 || OS_SharedGlobalVars.TicksPerSecond == 0))\n    {\n        OS_DEBUG(\"Implementation failed to initialize tick time globals\\n\");\n        return_code = OS_ERROR;\n    }\n\n    microSecPerSec = OS_SharedGlobalVars.MicroSecPerTick * OS_SharedGlobalVars.TicksPerSecond;\n\n    if (microSecPerSec != 1000000)\n    {\n        OS_DEBUG(\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   \"\n                 \"TicksPerSecond: %ld)\\n\",\n                 (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                 (long)OS_SharedGlobalVars.TicksPerSecond);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /*\n         * Some part of init failed, so set global flag that says OSAL is in shutdown state.\n         *\n         * In particular if certain internal resources (such as the console utility task)\n         * were created, this should cause those tasks to self-exit such that the system\n         * is ultimately returned to the same state it started in.\n         */\n        OS_SharedGlobalVars.GlobalState = OS_SHUTDOWN_MAGIC_NUMBER;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_API_Init:\nOS_SharedGlobalVars_t OS_SharedGlobalVars = {\n    .GlobalState     = 0,\n    .PrintfEnabled   = false,\n    .MicroSecPerTick = 0, /* invalid, _must_ be set by implementation init */\n    .TicksPerSecond  = 0, /* invalid, _must_ be set by implementation init */\n    .EventHandler    = NULL,\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    .DebugLevel = 1,\n#endif\n}\n...\n#define OS_INIT_MAGIC_NUMBER 0xBE57C0DE\n...\n#define OS_SHUTDOWN_MAGIC_NUMBER 0xABADC0DE\n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERROR (-1)\n...\n#define OS_DEBUG(__VA_ARGS__) \n...\ntypedef uint32 osal_objtype_t\n...\ntypedef int32_t   int32\n...\ntypedef uint32_t  uint32\n...\n#define OS_OBJECT_TYPE_USER 0x10\n...\n#define OS_OBJECT_TYPE_OS_TASK 0x01\n...\n#define OS_OBJECT_TYPE_OS_QUEUE 0x02\n...\n#define OS_OBJECT_TYPE_OS_BINSEM 0x04\n...\n#define OS_OBJECT_TYPE_OS_COUNTSEM 0x03\n...\n#define OS_OBJECT_TYPE_OS_MUTEX 0x05\n...\n#define OS_OBJECT_TYPE_OS_MODULE 0x0A\n...\n#define OS_OBJECT_TYPE_OS_TIMEBASE 0x08\n...\n#define OS_OBJECT_TYPE_OS_TIMECB 0x09\n...\n#define OS_OBJECT_TYPE_OS_STREAM 0x06\n...\n#define OS_OBJECT_TYPE_OS_DIR 0x07\n...\n#define OS_OBJECT_TYPE_OS_FILESYS 0x0B\n...\n#define OS_OBJECT_TYPE_OS_CONSOLE 0x0C\n...\n#define OS_OBJECT_TYPE_OS_CONDVAR 0x0D\n...\nint32 OS_ObjectIdInit(void)\n{\n    memset(OS_common_table, 0, sizeof(OS_common_table));\n    memset(OS_objtype_state, 0, sizeof(OS_objtype_state));\n    return OS_SUCCESS;\n}\n...\nint32 OS_API_Impl_Init(osal_objtype_t idtype)\n{\n    int32 return_code;\n\n    return_code = OS_Posix_TableMutex_Init(idtype);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    switch (idtype)\n    {\n        case OS_OBJECT_TYPE_OS_TASK:\n            return_code = OS_Posix_TaskAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_QUEUE:\n            return_code = OS_Posix_QueueAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_BINSEM:\n            return_code = OS_Posix_BinSemAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_COUNTSEM:\n            return_code = OS_Posix_CountSemAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_MUTEX:\n            return_code = OS_Posix_MutexAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_MODULE:\n            return_code = OS_Posix_ModuleAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_TIMEBASE:\n            return_code = OS_Posix_TimeBaseAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_STREAM:\n            return_code = OS_Posix_StreamAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_DIR:\n            return_code = OS_Posix_DirAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_FILESYS:\n            return_code = OS_Posix_FileSysAPI_Impl_Init();\n            break;\n        case OS_OBJECT_TYPE_OS_CONDVAR:\n            return_code = OS_Posix_CondVarAPI_Impl_Init();\n            break;\n        default:\n            break;\n    }\n\n    return return_code;\n}\n...\nint32 OS_TaskAPI_Init(void)\n{\n    memset(OS_task_table, 0, sizeof(OS_task_table));\n    return OS_SUCCESS;\n}\n...\nint32 OS_QueueAPI_Init(void)\n{\n    memset(OS_queue_table, 0, sizeof(OS_queue_table));\n    return OS_SUCCESS;\n}\n...\nint32 OS_BinSemAPI_Init(void)\n{\n    memset(OS_bin_sem_table, 0, sizeof(OS_bin_sem_table));\n    return OS_SUCCESS;\n}\n...\nint32 OS_CountSemAPI_Init(void)\n{\n    memset(OS_count_sem_table, 0, sizeof(OS_count_sem_table));\n    return OS_SUCCESS;\n}\n...\nint32 OS_MutexAPI_Init(void)\n{\n    memset(OS_mutex_table, 0, sizeof(OS_mutex_table));\n    return OS_SUCCESS;\n}\n...\nint32 OS_ModuleAPI_Init(void)\n{\n    memset(OS_module_table, 0, sizeof(OS_module_table));\n    return OS_SUCCESS;\n}\n...\nint32 OS_TimeBaseAPI_Init(void)\n{\n    memset(OS_timebase_table, 0, sizeof(OS_timebase_table));\n    return OS_SUCCESS;\n}\n...\nint32 OS_TimerCbAPI_Init(void)\n{\n    memset(OS_timecb_table, 0, sizeof(OS_timecb_table));\n    return OS_SUCCESS;\n}\n...\nint32 OS_FileAPI_Init(void)\n{\n    memset(OS_stream_table, 0, sizeof(OS_stream_table));\n    return OS_SUCCESS;\n}\n...\nint32 OS_DirAPI_Init(void)\n{\n    memset(OS_dir_table, 0, sizeof(OS_dir_table));\n    return OS_SUCCESS;\n}\n...\nint32 OS_FileSysAPI_Init(void)\n{\n    int32 return_code = OS_SUCCESS;\n\n    memset(OS_filesys_table, 0, sizeof(OS_filesys_table));\n\n    return return_code;\n}\n...\nint32 OS_ConsoleAPI_Init(void)\n{\n    OS_console_internal_record_t *console;\n    int32                         return_code;\n    OS_object_token_t             token;\n\n    memset(&OS_console_table, 0, sizeof(OS_console_table));\n\n    /*\n     * Configure a console device to be used for OS_printf() calls.\n     */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_CONSOLE, OS_PRINTF_CONSOLE_NAME, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, console, device_name, OS_PRINTF_CONSOLE_NAME);\n\n        /*\n         * Initialize the ring buffer pointers\n         */\n        console->BufBase = OS_printf_buffer_mem;\n        console->BufSize = sizeof(OS_printf_buffer_mem);\n        console->IsAsync = OS_CONSOLE_IS_ASYNC;\n\n        return_code = OS_ConsoleCreate_Impl(&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, &OS_SharedGlobalVars.PrintfConsoleId);\n\n        /*\n         * Printf can be enabled by default now that the buffer is configured.\n         */\n        OS_SharedGlobalVars.PrintfEnabled = true;\n    }\n\n    return return_code;\n}\n...\nint32 OS_CondVarAPI_Init(void)\n{\n    memset(OS_condvar_table, 0, sizeof(OS_condvar_table));\n    return OS_SUCCESS;\n}\n...\nint32 OS_NetworkAPI_Init(void)\n{\n    return OS_SUCCESS;\n}\n...\nint32 OS_SocketAPI_Init(void)\n{\n    /*\n     * Placeholder - nothing right now\n     * also serves to make this a non-empty compilation unit for\n     * cases where OS_INCLUDE_NETWORK is off\n     */\n    return OS_SUCCESS;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (return_code != OS_SUCCESS)\n    {\n        /*\n         * Some part of init failed, so set global flag that says OSAL is in shutdown state.\n         *\n         * In particular if certain internal resources (such as the console utility task)\n         * were created, this should cause those tasks to self-exit such that the system\n         * is ultimately returned to the same state it started in.\n         */\n        OS_SharedGlobalVars.GlobalState = OS_SHUTDOWN_MAGIC_NUMBER;\n    }\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated. The final if-block is reachable whenever any initialization step fails. For example, if OS_ConsoleAPI_Init() fails (e.g. OS_ObjectIdAllocateNew() returns an error) or if the implementation fails to set OS_SharedGlobalVars.MicroSecPerTick or TicksPerSecond (triggering the time-check that sets return_code = OS_ERROR), then return_code != OS_SUCCESS and the shown branch executes to set GlobalState = OS_SHUTDOWN_MAGIC_NUMBER."
}