{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe 'default: break;' in the switch is dead code. For any idtype value that does not match a case, control simply falls through to the end of the switch; the break in the default arm is executed but has no effect \u2014 removing it would not change program behaviour. Thus this operation qualifies as dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_API_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/994.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_API_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_API_Init:\n```c\nint32 OS_API_Init(void)\n{\n    int32          return_code = OS_SUCCESS;\n    osal_objtype_t idtype;\n    uint32         microSecPerSec;\n\n    /*\n     * If OSAL is already initialized, not really a big issue, just return.\n     * This is not typically expected though, so its worth a debug statement.\n     *\n     * However this can validly occur when running tests on some platforms\n     * without a reset/reload between invocations.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_INIT_MAGIC_NUMBER)\n    {\n        OS_DEBUG(\"NOTE: ignored redundant OS_API_Init() call\\n\");\n        return OS_SUCCESS;\n    }\n\n    /* Wipe global state structure to be sure everything is clean */\n    memset(&OS_SharedGlobalVars, 0, sizeof(OS_SharedGlobalVars));\n\n    /* Reset debug to default level if enabled */\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    OS_SharedGlobalVars.DebugLevel = 1;\n#endif\n\n    /* Set flag that says OSAL has been initialized */\n    OS_SharedGlobalVars.GlobalState = OS_INIT_MAGIC_NUMBER;\n\n    /* Initialize the common table that everything shares */\n    return_code = OS_ObjectIdInit();\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    for (idtype = 0; idtype < OS_OBJECT_TYPE_USER; ++idtype)\n    {\n        /* Initialize the implementation first, as the shared layer depends on it */\n        return_code = OS_API_Impl_Init(idtype);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n\n        switch (idtype)\n        {\n            case OS_OBJECT_TYPE_OS_TASK:\n                return_code = OS_TaskAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_QUEUE:\n                return_code = OS_QueueAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_BINSEM:\n                return_code = OS_BinSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_COUNTSEM:\n                return_code = OS_CountSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MUTEX:\n                return_code = OS_MutexAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MODULE:\n                return_code = OS_ModuleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMEBASE:\n                return_code = OS_TimeBaseAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMECB:\n                return_code = OS_TimerCbAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_STREAM:\n                return_code = OS_FileAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_DIR:\n                return_code = OS_DirAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_FILESYS:\n                return_code = OS_FileSysAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONSOLE:\n                return_code = OS_ConsoleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONDVAR:\n                return_code = OS_CondVarAPI_Init();\n                break;\n            default:\n                break;\n        }\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"ID type 0x%x shared layer failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_NetworkAPI_Init();\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketAPI_Init();\n    }\n\n    /*\n     * Confirm that somewhere during initialization,\n     * the time variables got set to something valid\n     */\n    if (return_code == OS_SUCCESS &&\n        (OS_SharedGlobalVars.MicroSecPerTick == 0 || OS_SharedGlobalVars.TicksPerSecond == 0))\n    {\n        OS_DEBUG(\"Implementation failed to initialize tick time globals\\n\");\n        return_code = OS_ERROR;\n    }\n\n    microSecPerSec = OS_SharedGlobalVars.MicroSecPerTick * OS_SharedGlobalVars.TicksPerSecond;\n\n    if (microSecPerSec != 1000000)\n    {\n        OS_DEBUG(\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   \"\n                 \"TicksPerSecond: %ld)\\n\",\n                 (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                 (long)OS_SharedGlobalVars.TicksPerSecond);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /*\n         * Some part of init failed, so set global flag that says OSAL is in shutdown state.\n         *\n         * In particular if certain internal resources (such as the console utility task)\n         * were created, this should cause those tasks to self-exit such that the system\n         * is ultimately returned to the same state it started in.\n         */\n        OS_SharedGlobalVars.GlobalState = OS_SHUTDOWN_MAGIC_NUMBER;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_API_Init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper - write logs for control flow and state to /tmp/logs/994.txt */\nstatic void OS_API_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/994.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_API_Init(void)\n{\n    int32          return_code = OS_SUCCESS;\n    osal_objtype_t idtype;\n    uint32         microSecPerSec;\n\n    /* Log entry and current global state */\n    OS_API_LogProbe(\"OS_API_Init: entry - GlobalState=0x%08x\", (unsigned int)OS_SharedGlobalVars.GlobalState);\n\n    /*\n     * If OSAL is already initialized, not really a big issue, just return.\n     * This is not typically expected though, so its worth a debug statement.\n     *\n     * However this can validly occur when running tests on some platforms\n     * without a reset/reload between invocations.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_INIT_MAGIC_NUMBER)\n    {\n        OS_DEBUG(\"NOTE: ignored redundant OS_API_Init() call\\n\");\n        OS_API_LogProbe(\"OS_API_Init: redundant call detected - returning OS_SUCCESS\");\n        return OS_SUCCESS;\n    }\n\n    /* Wipe global state structure to be sure everything is clean */\n    OS_API_LogProbe(\"OS_API_Init: clearing OS_SharedGlobalVars at %p (size=%zu)\", (void *)&OS_SharedGlobalVars, sizeof(OS_SharedGlobalVars));\n    memset(&OS_SharedGlobalVars, 0, sizeof(OS_SharedGlobalVars));\n\n    /* Reset debug to default level if enabled */\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    OS_SharedGlobalVars.DebugLevel = 1;\n#endif\n\n    /* Set flag that says OSAL has been initialized */\n    OS_SharedGlobalVars.GlobalState = OS_INIT_MAGIC_NUMBER;\n    OS_API_LogProbe(\"OS_API_Init: set GlobalState=0x%08x\", (unsigned int)OS_SharedGlobalVars.GlobalState);\n\n    /* Initialize the common table that everything shares */\n    return_code = OS_ObjectIdInit();\n    OS_API_LogProbe(\"OS_API_Init: ObjectIdInit returned %d\", (int)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        OS_API_LogProbe(\"OS_API_Init: aborting due to ObjectIdInit failure: %d\", (int)return_code);\n        return return_code;\n    }\n\n    OS_API_LogProbe(\"OS_API_Init: entering idtype loop (0 .. %u)\", (unsigned int)OS_OBJECT_TYPE_USER);\n    for (idtype = 0; idtype < OS_OBJECT_TYPE_USER; ++idtype)\n    {\n        /* Initialize the implementation first, as the shared layer depends on it */\n        OS_API_LogProbe(\"OS_API_Init: idtype=0x%x - calling OS_API_Impl_Init\", (unsigned int)idtype);\n        return_code = OS_API_Impl_Init(idtype);\n        OS_API_LogProbe(\"OS_API_Init: idtype=0x%x - OS_API_Impl_Init returned %d\", (unsigned int)idtype, (int)return_code);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            OS_API_LogProbe(\"OS_API_Init: idtype=0x%x - OS_API_Impl_Init failed: %d\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n\n        OS_API_LogProbe(\"OS_API_Init: idtype=0x%x - entering switch to initialize shared layer\", (unsigned int)idtype);\n        switch (idtype)\n        {\n            case OS_OBJECT_TYPE_OS_TASK:\n                OS_API_LogProbe(\"OS_API_Init: idtype=OS_TASK - calling OS_TaskAPI_Init\");\n                return_code = OS_TaskAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_QUEUE:\n                OS_API_LogProbe(\"OS_API_Init: idtype=OS_QUEUE - calling OS_QueueAPI_Init\");\n                return_code = OS_QueueAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_BINSEM:\n                OS_API_LogProbe(\"OS_API_Init: idtype=OS_BINSEM - calling OS_BinSemAPI_Init\");\n                return_code = OS_BinSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_COUNTSEM:\n                OS_API_LogProbe(\"OS_API_Init: idtype=OS_COUNTSEM - calling OS_CountSemAPI_Init\");\n                return_code = OS_CountSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MUTEX:\n                OS_API_LogProbe(\"OS_API_Init: idtype=OS_MUTEX - calling OS_MutexAPI_Init\");\n                return_code = OS_MutexAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MODULE:\n                OS_API_LogProbe(\"OS_API_Init: idtype=OS_MODULE - calling OS_ModuleAPI_Init\");\n                return_code = OS_ModuleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMEBASE:\n                OS_API_LogProbe(\"OS_API_Init: idtype=OS_TIMEBASE - calling OS_TimeBaseAPI_Init\");\n                return_code = OS_TimeBaseAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMECB:\n                OS_API_LogProbe(\"OS_API_Init: idtype=OS_TIMECB - calling OS_TimerCbAPI_Init\");\n                return_code = OS_TimerCbAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_STREAM:\n                OS_API_LogProbe(\"OS_API_Init: idtype=OS_STREAM - calling OS_FileAPI_Init\");\n                return_code = OS_FileAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_DIR:\n                OS_API_LogProbe(\"OS_API_Init: idtype=OS_DIR - calling OS_DirAPI_Init\");\n                return_code = OS_DirAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_FILESYS:\n                OS_API_LogProbe(\"OS_API_Init: idtype=OS_FILESYS - calling OS_FileSysAPI_Init\");\n                return_code = OS_FileSysAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONSOLE:\n                OS_API_LogProbe(\"OS_API_Init: idtype=OS_CONSOLE - calling OS_ConsoleAPI_Init\");\n                return_code = OS_ConsoleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONDVAR:\n                OS_API_LogProbe(\"OS_API_Init: idtype=OS_CONDVAR - calling OS_CondVarAPI_Init\");\n                return_code = OS_CondVarAPI_Init();\n                break;\n            default:\n                /* Probe: record when default is reached. This helps demonstrate whether the default arm is ever executed. */\n                OS_API_LogProbe(\"OS_API_Init: idtype=0x%x - default arm reached (no operation)\", (unsigned int)idtype);\n                break;\n        }\n        OS_API_LogProbe(\"OS_API_Init: idtype=0x%x - after switch, return_code=%d\", (unsigned int)idtype, (int)return_code);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"ID type 0x%x shared layer failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            OS_API_LogProbe(\"OS_API_Init: idtype=0x%x - shared layer failed: %d\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_API_LogProbe(\"OS_API_Init: calling OS_NetworkAPI_Init\");\n        return_code = OS_NetworkAPI_Init();\n        OS_API_LogProbe(\"OS_API_Init: OS_NetworkAPI_Init returned %d\", (int)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_API_LogProbe(\"OS_API_Init: calling OS_SocketAPI_Init\");\n        return_code = OS_SocketAPI_Init();\n        OS_API_LogProbe(\"OS_API_Init: OS_SocketAPI_Init returned %d\", (int)return_code);\n    }\n\n    /*\n     * Confirm that somewhere during initialization,\n     * the time variables got set to something valid\n     */\n    if (return_code == OS_SUCCESS &&\n        (OS_SharedGlobalVars.MicroSecPerTick == 0 || OS_SharedGlobalVars.TicksPerSecond == 0))\n    {\n        OS_DEBUG(\"Implementation failed to initialize tick time globals\\n\");\n        OS_API_LogProbe(\"OS_API_Init: tick time globals invalid (MicroSecPerTick=%ld, TicksPerSecond=%ld)\",\n                         (long)OS_SharedGlobalVars.MicroSecPerTick, (long)OS_SharedGlobalVars.TicksPerSecond);\n        return_code = OS_ERROR;\n    }\n\n    microSecPerSec = OS_SharedGlobalVars.MicroSecPerTick * OS_SharedGlobalVars.TicksPerSecond;\n\n    if (microSecPerSec != 1000000)\n    {\n        OS_DEBUG(\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   \"\n                 \"TicksPerSecond: %ld)\\n\",\n                 (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                 (long)OS_SharedGlobalVars.TicksPerSecond);\n        OS_API_LogProbe(\"OS_API_Init: warning microSecPerSec=%lu (MicroSecPerTick=%ld, TicksPerSecond=%ld)\",\n                         (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                         (long)OS_SharedGlobalVars.TicksPerSecond);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /*\n         * Some part of init failed, so set global flag that says OSAL is in shutdown state.\n         *\n         * In particular if certain internal resources (such as the console utility task)\n         * were created, this should cause those tasks to self-exit such that the system\n         * is ultimately returned to the same state it started in.\n         */\n        OS_SharedGlobalVars.GlobalState = OS_SHUTDOWN_MAGIC_NUMBER;\n        OS_API_LogProbe(\"OS_API_Init: initialization failed - set GlobalState=0x%08x\", (unsigned int)OS_SharedGlobalVars.GlobalState);\n    }\n\n    OS_API_LogProbe(\"OS_API_Init: exit returning %d\", (int)return_code);\n    return return_code;\n}\n"
}