{
  "user_message": "An agent A claimed that the following OS_API_Init code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_API_Init.\n```c\nint32 OS_API_Init(void)\n{\n    int32          return_code = OS_SUCCESS;\n    osal_objtype_t idtype;\n    uint32         microSecPerSec;\n\n    /*\n     * If OSAL is already initialized, not really a big issue, just return.\n     * This is not typically expected though, so its worth a debug statement.\n     *\n     * However this can validly occur when running tests on some platforms\n     * without a reset/reload between invocations.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_INIT_MAGIC_NUMBER)\n    {\n        OS_DEBUG(\"NOTE: ignored redundant OS_API_Init() call\\n\");\n        return OS_SUCCESS;\n    }\n\n    /* Wipe global state structure to be sure everything is clean */\n    memset(&OS_SharedGlobalVars, 0, sizeof(OS_SharedGlobalVars));\n\n    /* Reset debug to default level if enabled */\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    OS_SharedGlobalVars.DebugLevel = 1;\n#endif\n\n    /* Set flag that says OSAL has been initialized */\n    OS_SharedGlobalVars.GlobalState = OS_INIT_MAGIC_NUMBER;\n\n    /* Initialize the common table that everything shares */\n    return_code = OS_ObjectIdInit();\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    for (idtype = 0; idtype < OS_OBJECT_TYPE_USER; ++idtype)\n    {\n        /* Initialize the implementation first, as the shared layer depends on it */\n        return_code = OS_API_Impl_Init(idtype);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n\n        switch (idtype)\n        {\n            case OS_OBJECT_TYPE_OS_TASK:\n                return_code = OS_TaskAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_QUEUE:\n                return_code = OS_QueueAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_BINSEM:\n                return_code = OS_BinSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_COUNTSEM:\n                return_code = OS_CountSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MUTEX:\n                return_code = OS_MutexAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MODULE:\n                return_code = OS_ModuleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMEBASE:\n                return_code = OS_TimeBaseAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMECB:\n                return_code = OS_TimerCbAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_STREAM:\n                return_code = OS_FileAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_DIR:\n                return_code = OS_DirAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_FILESYS:\n                return_code = OS_FileSysAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONSOLE:\n                return_code = OS_ConsoleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONDVAR:\n                return_code = OS_CondVarAPI_Init();\n                break;\n            default:\n                break;\n        }\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"ID type 0x%x shared layer failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_NetworkAPI_Init();\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketAPI_Init();\n    }\n\n    /*\n     * Confirm that somewhere during initialization,\n     * the time variables got set to something valid\n     */\n    if (return_code == OS_SUCCESS &&\n        (OS_SharedGlobalVars.MicroSecPerTick == 0 || OS_SharedGlobalVars.TicksPerSecond == 0))\n    {\n        OS_DEBUG(\"Implementation failed to initialize tick time globals\\n\");\n        return_code = OS_ERROR;\n    }\n\n    microSecPerSec = OS_SharedGlobalVars.MicroSecPerTick * OS_SharedGlobalVars.TicksPerSecond;\n\n    if (microSecPerSec != 1000000)\n    {\n        OS_DEBUG(\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   \"\n                 \"TicksPerSecond: %ld)\\n\",\n                 (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                 (long)OS_SharedGlobalVars.TicksPerSecond);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /*\n         * Some part of init failed, so set global flag that says OSAL is in shutdown state.\n         *\n         * In particular if certain internal resources (such as the console utility task)\n         * were created, this should cause those tasks to self-exit such that the system\n         * is ultimately returned to the same state it started in.\n         */\n        OS_SharedGlobalVars.GlobalState = OS_SHUTDOWN_MAGIC_NUMBER;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Violation occurs if OS_DEBUG's prototype accepts a non-const pointer (e.g. void OS_DEBUG(char *fmt, ...)). Passing a string literal to a non-const pointer means the pointer is not const-qualified even though it could and should be (the format string will not be modified). To comply with MISRA C 2023 Rule 8.13 the function should be declared to take a const-qualified pointer (e.g. void OS_DEBUG(const char *fmt, ...)). If OS_DEBUG is already declared as taking const char * (or equivalent), then there is no violation.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_API_Init_LogProbe(const char *event, const char *fmtstr, unsigned long fmtaddr, unsigned int idtype, int32 rc)\n{\n    FILE *fp = fopen(\"/tmp/logs/995.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Write a compact single-line log with relevant state info */\n        fprintf(fp, \"EVENT=%s | fmt=%p | fmt_str=\\\"%s\\\" | idtype=0x%X | rc=%d\\n\",\n                (event != NULL) ? event : \"(null)\", (void *)fmtaddr,\n                (fmtstr != NULL) ? fmtstr : \"(null)\", idtype, (int)rc);\n        fclose(fp);\n    }\n}\n\nint32 OS_API_Init(void)\n{\n    int32          return_code = OS_SUCCESS;\n    osal_objtype_t idtype;\n    uint32         microSecPerSec;\n\n    /* Log entry into OS_API_Init */\n    OS_API_Init_LogProbe(\"entry\", \"OS_API_Init() start\", (unsigned long)(const void *)\"OS_API_Init() start\", 0u, return_code);\n\n    /*\n     * If OSAL is already initialized, not really a big issue, just return.\n     * This is not typically expected though, so its worth a debug statement.\n     *\n     * However this can validly occur when running tests on some platforms\n     * without a reset/reload between invocations.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_INIT_MAGIC_NUMBER)\n    {\n        /* Probe right before calling OS_DEBUG with a string literal */\n        OS_API_Init_LogProbe(\"redundant_init\", \"NOTE: ignored redundant OS_API_Init() call\\\\n\",\n                             (unsigned long)(const void *)\"NOTE: ignored redundant OS_API_Init() call\\\\n\", 0u, return_code);\n\n        OS_DEBUG(\"NOTE: ignored redundant OS_API_Init() call\\n\");\n        return OS_SUCCESS;\n    }\n\n    /* Wipe global state structure to be sure everything is clean */\n    memset(&OS_SharedGlobalVars, 0, sizeof(OS_SharedGlobalVars));\n\n    /* Reset debug to default level if enabled */\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    OS_SharedGlobalVars.DebugLevel = 1;\n#endif\n\n    /* Set flag that says OSAL has been initialized */\n    OS_SharedGlobalVars.GlobalState = OS_INIT_MAGIC_NUMBER;\n\n    /* Initialize the common table that everything shares */\n    return_code = OS_ObjectIdInit();\n    if (return_code != OS_SUCCESS)\n    {\n        OS_API_Init_LogProbe(\"object_table_init_fail\", \"OS_ObjectIdInit() failed\",\n                             (unsigned long)(const void *)\"OS_ObjectIdInit() failed\", 0u, return_code);\n        return return_code;\n    }\n\n    for (idtype = 0; idtype < OS_OBJECT_TYPE_USER; ++idtype)\n    {\n        /* Initialize the implementation first, as the shared layer depends on it */\n        return_code = OS_API_Impl_Init(idtype);\n        if (return_code != OS_SUCCESS)\n        {\n            /* Probe before calling OS_DEBUG with a format literal */\n            OS_API_Init_LogProbe(\"impl_init_fail\",\n                                 \"OS_API_Impl_Init(0x%x) failed to initialize: %d\\\\n\",\n                                 (unsigned long)(const void *)\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\\\n\",\n                                 (unsigned int)idtype, return_code);\n\n            OS_DEBUG(\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n\n        switch (idtype)\n        {\n            case OS_OBJECT_TYPE_OS_TASK:\n                return_code = OS_TaskAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_QUEUE:\n                return_code = OS_QueueAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_BINSEM:\n                return_code = OS_BinSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_COUNTSEM:\n                return_code = OS_CountSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MUTEX:\n                return_code = OS_MutexAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MODULE:\n                return_code = OS_ModuleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMEBASE:\n                return_code = OS_TimeBaseAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMECB:\n                return_code = OS_TimerCbAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_STREAM:\n                return_code = OS_FileAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_DIR:\n                return_code = OS_DirAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_FILESYS:\n                return_code = OS_FileSysAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONSOLE:\n                return_code = OS_ConsoleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONDVAR:\n                return_code = OS_CondVarAPI_Init();\n                break;\n            default:\n                break;\n        }\n        if (return_code != OS_SUCCESS)\n        {\n            /* Probe before calling OS_DEBUG with a format literal */\n            OS_API_Init_LogProbe(\"shared_layer_fail\",\n                                 \"ID type 0x%x shared layer failed to initialize: %d\\\\n\",\n                                 (unsigned long)(const void *)\"ID type 0x%x shared layer failed to initialize: %d\\\\n\",\n                                 (unsigned int)idtype, return_code);\n\n            OS_DEBUG(\"ID type 0x%x shared layer failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_NetworkAPI_Init();\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketAPI_Init();\n    }\n\n    /*\n     * Confirm that somewhere during initialization,\n     * the time variables got set to something valid\n     */\n    if (return_code == OS_SUCCESS &&\n        (OS_SharedGlobalVars.MicroSecPerTick == 0 || OS_SharedGlobalVars.TicksPerSecond == 0))\n    {\n        OS_API_Init_LogProbe(\"tick_time_unset\", \"Implementation failed to initialize tick time globals\\\\n\",\n                             (unsigned long)(const void *)\"Implementation failed to initialize tick time globals\\\\n\", 0u, return_code);\n\n        OS_DEBUG(\"Implementation failed to initialize tick time globals\\n\");\n        return_code = OS_ERROR;\n    }\n\n    microSecPerSec = OS_SharedGlobalVars.MicroSecPerTick * OS_SharedGlobalVars.TicksPerSecond;\n\n    if (microSecPerSec != 1000000)\n    {\n        /* Probe before calling OS_DEBUG with a multi-arg format literal */\n        OS_API_Init_LogProbe(\"microsec_mismatch\",\n                             \"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\\\\n\",\n                             (unsigned long)(const void *)\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\\\\n\",\n                             0u, return_code);\n\n        OS_DEBUG(\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   \"\n                 \"TicksPerSecond: %ld)\\n\",\n                 (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                 (long)OS_SharedGlobalVars.TicksPerSecond);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /*\n         * Some part of init failed, so set global flag that says OSAL is in shutdown state.\n         *\n         * In particular if certain internal resources (such as the console utility task)\n         * were created, this should cause those tasks to self-exit such that the system\n         * is ultimately returned to the same state it started in.\n         */\n        OS_SharedGlobalVars.GlobalState = OS_SHUTDOWN_MAGIC_NUMBER;\n\n        /* Log final failure state */\n        OS_API_Init_LogProbe(\"final_failure\", \"OS_API_Init returning failure\", (unsigned long)(const void *)\"OS_API_Init returning failure\", 0u, return_code);\n    }\n    else\n    {\n        /* Log successful completion */\n        OS_API_Init_LogProbe(\"success\", \"OS_API_Init completed successfully\", (unsigned long)(const void *)\"OS_API_Init completed successfully\", 0u, return_code);\n    }\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nEVENT=entry | fmt=0x5621336b2a68 | fmt_str=\"OS_API_Init() start\" | idtype=0x0 | rc=0\nEVENT=impl_init_fail | fmt=0x5621336b2af8 | fmt_str=\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\" | idtype=0x1 | rc=-1\nEVENT=microsec_mismatch | fmt=0x5621336b2bd0 | fmt_str=\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\\n\" | idtype=0x0 | rc=-1\nEVENT=final_failure | fmt=0x5621336b2c50 | fmt_str=\"OS_API_Init returning failure\" | idtype=0x0 | rc=-1\nEVENT=entry | fmt=0x5613aa996928 | fmt_str=\"OS_API_Init() start\" | idtype=0x0 | rc=0\nEVENT=impl_init_fail | fmt=0x5613aa9969b8 | fmt_str=\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\" | idtype=0x1 | rc=-1\nEVENT=microsec_mismatch | fmt=0x5613aa996a90 | fmt_str=\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\\n\" | idtype=0x0 | rc=-1\nEVENT=final_failure | fmt=0x5613aa996b10 | fmt_str=\"OS_API_Init returning failure\" | idtype=0x0 | rc=-1\nEVENT=entry | fmt=0x559d9ef10978 | fmt_str=\"OS_API_Init() start\" | idtype=0x0 | rc=0\nEVENT=impl_init_fail | fmt=0x559d9ef10a08 | fmt_str=\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\" | idtype=0x1 | rc=-1\nEVENT=microsec_mismatch | fmt=0x559d9ef10ae0 | fmt_str=\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\\n\" | idtype=0x0 | rc=-1\nEVENT=final_failure | fmt=0x559d9ef10b60 | fmt_str=\"OS_API_Init returning failure\" | idtype=0x0 | rc=-1\nEVENT=entry | fmt=0x5602aa6c3d78 | fmt_str=\"OS_API_Init() start\" | idtype=0x0 | rc=0\nEVENT=impl_init_fail | fmt=0x5602aa6c3e08 | fmt_str=\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\" | idtype=0x1 | rc=-1\nEVENT=microsec_mismatch | fmt=0x5602aa6c3ee0 | fmt_str=\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\\n\" | idtype=0x0 | rc=-1\nEVENT=final_failure | fmt=0x5602aa6c3f60 | fmt_str=\"OS_API_Init returning failure\" | idtype=0x0 | rc=-1\nEVENT=entry | fmt=0x55b88862e908 | fmt_str=\"OS_API_Init() start\" | idtype=0x0 | rc=0\nEVENT=impl_init_fail | fmt=0x55b88862e998 | fmt_str=\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\" | idtype=0x1 | rc=-1\nEVENT=microsec_mismatch | fmt=0x55b88862ea70 | fmt_str=\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\\n\" | idtype=0x0 | rc=-1\nEVENT=final_failure | fmt=0x55b88862eaf0 | fmt_str=\"OS_API_Init returning failure\" | idtype=0x0 | rc=-1\nEVENT=entry | fmt=0x55c244b5aa68 | fmt_str=\"OS_API_Init() start\" | idtype=0x0 | rc=0\nEVENT=impl_init_fail | fmt=0x55c244b5aaf8 | fmt_str=\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\" | idtype=0x1 | rc=-1\nEVENT=microsec_mismatch | fmt=0x55c244b5abd0 | fmt_str=\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\\n\" | idtype=0x0 | rc=-1\nEVENT=final_failure | fmt=0x55c244b5ac50 | fmt_str=\"OS_API_Init returning failure\" | idtype=0x0 | rc=-1\nEVENT=entry | fmt=0x560c88fbff88 | fmt_str=\"OS_API_Init() start\" | idtype=0x0 | rc=0\nEVENT=impl_init_fail | fmt=0x560c88fc0018 | fmt_str=\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\" | idtype=0x1 | rc=-1\nEVENT=microsec_mismatch | fmt=0x560c88fc00f0 | fmt_str=\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\\n\" | idtype=0x0 | rc=-1\nEVENT=final_failure | fmt=0x560c88fc0170 | fmt_str=\"OS_API_Init returning failure\" | idtype=0x0 | rc=-1\nEVENT=entry | fmt=0x55ac84bca7b8 | fmt_str=\"OS_API_Init() start\" | idtype=0x0 | rc=0\nEVENT=impl_init_fail | fmt=0x55ac84bca848 | fmt_str=\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\" | idtype=0x1 | rc=-1\nEVENT=microsec_mismatch | fmt=0x55ac84bca920 | fmt_str=\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   TicksPerSecond: %ld)\\n\" | idtype=0x0 | rc=-1\nEVENT=final_failure | fmt=0x55ac84bca9a0 | fmt_str=\"OS_API_Init returning failure\" | idtype=0x0 | rc=-1\nEVENT=entry | fmt=0x55cb26738968 | fmt_str=\"OS_API_Init() start\" | idtype=0x0 | \n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's reasoning is correct. The OS_API_Init implementation passes string literals (e.g. \"NOTE: ignored redundant OS_API_Init() call\\n\") to OS_DEBUG. MISRA C:2023 Rule 8.13 requires that pointers should point to const-qualified types whenever possible; therefore, if OS_DEBUG is declared to take a non-const pointer (for example void OS_DEBUG(char *fmt, ...)) this is a violation \u2014 the parameter should be declared as const char *fmt (or equivalent) because the format string is not modified. The provided test probe output confirms that string literals are being passed (it logs the addresses and contents of the format strings), which supports the scenario. If, however, OS_DEBUG is already declared to accept a const-qualified pointer (e.g. void OS_DEBUG(const char *fmt, ...)), then there is no violation. Given the presented evidence and the conditional described by Agent A, the report is correct."
}