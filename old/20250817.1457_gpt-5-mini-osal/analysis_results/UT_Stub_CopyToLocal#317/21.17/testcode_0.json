{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call can violate Rule 21.17 in multiple ways. Internally, there is no check that StubPtr->Data.Buff.Position <= StubPtr->Data.Buff.TotalSize; if Position > TotalSize the source pointer &BasePtr[Position] is out-of-bounds (and TotalSize - Position underflows), so memcpy may read beyond the source buffer. Externally, the code assumes the caller-supplied MaxSize correctly describes the size of LocalBuffer; if LocalBuffer actually refers to an object smaller than MaxSize (or is NULL) memcpy may write past the destination. The function does not validate these conditions, so the use of memcpy can result in accesses beyond object bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyToLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2543.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyToLocal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyToLocal:\n```c\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyToLocal code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    /* Open log for appending; best-effort logging, do not alter control flow on failure */\n    FILE *log = fopen(\"/tmp/logs/2543.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"UT_Stub_CopyToLocal entry: FuncKey=%p, LocalBuffer=%p, MaxSize=%zu\\n\",\n                (void *)FuncKey, LocalBuffer, MaxSize);\n        fflush(log);\n    }\n\n    if (StubPtr != NULL)\n    {\n        /* Compute how many bytes are available in the stub buffer (preserve original logic) */\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        /* Log detailed state prior to memcpy (do not dereference LocalBuffer) */\n        if (log)\n        {\n            fprintf(log, \"StubPtr=%p, BasePtr=%p, Position=%zu, TotalSize=%zu, ComputedActualCopy=%zu\\n\",\n                    (void *)StubPtr,\n                    (void *)StubPtr->Data.Buff.BasePtr,\n                    StubPtr->Data.Buff.Position,\n                    StubPtr->Data.Buff.TotalSize,\n                    ActualCopy);\n            fprintf(log, \"About to memcpy: dest=%p, src_base=%p, src_index=%zu, bytes=%zu\\n\",\n                    LocalBuffer,\n                    (void *)StubPtr->Data.Buff.BasePtr,\n                    StubPtr->Data.Buff.Position,\n                    ActualCopy);\n            fflush(log);\n        }\n\n        /* Original behavior: perform copy and advance position */\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /* Once the buffer is completely copied then drop this entry. */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            if (log)\n            {\n                fprintf(log, \"Buffer fully consumed: new Position=%zu >= TotalSize=%zu; clearing entry\\n\",\n                        StubPtr->Data.Buff.Position,\n                        StubPtr->Data.Buff.TotalSize);\n                fflush(log);\n            }\n            UT_ClearStubEntry(StubPtr);\n        }\n        else\n        {\n            if (log)\n            {\n                fprintf(log, \"Buffer partially consumed: new Position=%zu, TotalSize=%zu\\n\",\n                        StubPtr->Data.Buff.Position,\n                        StubPtr->Data.Buff.TotalSize);\n                fflush(log);\n            }\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"No stub entry found for FuncKey=%p; returning 0\\n\", (void *)FuncKey);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"UT_Stub_CopyToLocal exit: ActualCopy=%zu\\n\", ActualCopy);\n        fclose(log);\n    }\n\n    return ActualCopy;\n}\n"
}