{
  "user_message": "Target function code is:\n```c\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'UT_Stub_CopyToLocal': {'callees': ['UT_GetStubEntry', 'UT_ClearStubEntry'], 'callers': ['UT_DefaultHandler_OS_BinSemGetInfo', 'UT_DefaultHandler_OS_BinSemGetIdByName', 'UT_DefaultHandler_OS_GetLocalTime', 'UT_DefaultHandler_OS_CountSemGetIdByName', 'UT_DefaultHandler_OS_CountSemGetInfo', 'UT_DefaultHandler_OS_DirectoryRead', 'UT_DefaultHandler_OS_GetErrorName', 'UT_GenericReadStub', 'UT_DefaultHandler_OS_stat', 'UT_DefaultHandler_OS_FDGetInfo', 'UT_DefaultHandler_OS_FileSysStatVolume', 'UT_DefaultHandler_OS_TranslatePath', 'UT_DefaultHandler_OS_HeapGetInfo', 'UT_DefaultHandler_OS_ObjectIdToArrayIndex', 'UT_DefaultHandler_OS_GetResourceName', 'UT_DefaultHandler_OS_ForEachObjectOfType', 'UT_DefaultHandler_OS_ForEachObject', 'UT_DefaultHandler_OS_ModuleInfo', 'UT_DefaultHandler_OS_SymbolLookup', 'UT_DefaultHandler_OS_ModuleSymbolLookup', 'UT_DefaultHandler_OS_MutSemGetIdByName', 'UT_DefaultHandler_OS_MutSemGetInfo', 'UT_DefaultHandler_OS_NetworkGetHostName', 'UT_DefaultHandler_OS_QueueGet', 'UT_DefaultHandler_OS_QueueGetIdByName', 'UT_DefaultHandler_OS_QueueGetInfo', 'UT_DefaultHandler_OS_SocketRecvFrom', 'UT_DefaultHandler_OS_SocketGetIdByName', 'UT_DefaultHandler_OS_SocketGetInfo', 'UT_DefaultHandler_OS_SocketAddrInit', 'UT_DefaultHandler_OS_SocketAddrToString', 'UT_DefaultHandler_OS_SocketAddrFromString', 'UT_DefaultHandler_OS_SocketAddrGetPort', 'UT_DefaultHandler_OS_TaskGetIdByName', 'UT_DefaultHandler_OS_TaskGetInfo', 'UT_DefaultHandler_OS_TaskFindIdBySystemData', 'UT_DefaultHandler_OS_TimerGetIdByName', 'UT_DefaultHandler_OS_TimerGetInfo', 'UT_DefaultHandler_OS_TimeBaseGetIdByName', 'UT_DefaultHandler_OS_TimeBaseGetInfo', 'UT_DefaultHandler_OS_TimeBaseGetFreeRun']}, 'UT_GetStubEntry': {'callees': [], 'callers': ['UT_ConfigureGenericStubReturnValue', 'UT_ClearDeferredRetcode', 'UT_ClearDefaultReturnValue', 'UT_GetStubRetcodeAndCount', 'UT_GetStubCount', 'UT_Stub_RegisterReturnType', 'UT_Stub_GetReturnValuePtr', 'UT_SetDataBuffer', 'UT_GetDataBuffer', 'UT_Stub_CopyToLocal', 'UT_Stub_CopyFromLocal', 'UT_DoSetHookFunction', 'UT_Stub_RegisterContextWithMetaData', 'UT_Stub_CopyToReturnValue', 'UT_Stub_FindRetvalConfig', 'UT_DefaultStubImplWithArgs', 'UT_ExecuteBasicHandler', 'UT_ExecuteVaHandler']}, 'UT_ClearStubEntry': {'callees': [], 'callers': ['UT_ResetState', 'UT_ClearDeferredRetcode', 'UT_ClearDefaultReturnValue', 'UT_Stub_RegisterReturnType', 'UT_Stub_CopyToLocal', 'UT_Stub_CopyFromLocal', 'UT_DoSetHookFunction', 'UT_DefaultStubImplWithArgs']}, 'UT_DefaultHandler_OS_BinSemGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_BinSemGetIdByName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_GetLocalTime': {'callees': ['UT_Hook_GetArgPtr', 'UT_GetStubCount', 'UT_Stub_CopyToLocal', 'OS_TimeAssembleFromNanoseconds'], 'callers': []}, 'UT_DefaultHandler_OS_CountSemGetIdByName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_CountSemGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_DirectoryRead': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_GetErrorName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_GenericReadStub': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_Stub_CopyToReturnValue'], 'callers': ['UT_DefaultHandler_OS_read', 'UT_DefaultHandler_OS_TimedRead']}, 'UT_DefaultHandler_OS_stat': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_FDGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_FileSysStatVolume': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_TranslatePath': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_HeapGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_ObjectIdToArrayIndex': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdDecompose'], 'callers': []}, 'UT_DefaultHandler_OS_GetResourceName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_ForEachObjectOfType': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_ForEachObject': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_ModuleInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_SymbolLookup': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_ModuleSymbolLookup': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_MutSemGetIdByName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_MutSemGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_NetworkGetHostName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_QueueGet': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'OS_ObjectIdToInteger', 'UT_Stub_CopyToReturnValue'], 'callers': []}, 'UT_DefaultHandler_OS_QueueGetIdByName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_QueueGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_SocketRecvFrom': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_Stub_CopyToReturnValue'], 'callers': []}, 'UT_DefaultHandler_OS_SocketGetIdByName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_SocketGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_SocketAddrInit': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_SocketAddrToString': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_SocketAddrFromString': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_SocketAddrGetPort': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal'], 'callers': []}, 'UT_DefaultHandler_OS_TaskGetIdByName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_TaskGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_TaskFindIdBySystemData': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_TimerGetIdByName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_TimerGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_TimeBaseGetIdByName': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_TimeBaseGetInfo': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_ObjIdCompose'], 'callers': []}, 'UT_DefaultHandler_OS_TimeBaseGetFreeRun': {'callees': ['UT_Hook_GetArgPtr', 'UT_Stub_CopyToLocal', 'UT_GetStubCount'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nUse of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters. This rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "UT_StubTableEntry_t (definition)",
    "UT_GetStubEntry (signature and contract for UT_ENTRYTYPE_DATA_BUFFER)",
    "UT_ClearStubEntry (semantics)",
    "Data.Buff.BasePtr element type (e.g., uint8_t/char pointer)",
    "Data.Buff.Position type and invariants",
    "Data.Buff.TotalSize type and invariants",
    "UT_Hook_GetArgPtr (how LocalBuffer and MaxSize are supplied / their size contract)"
  ],
  "explanation": "For a sound MISRA C analysis of the memcpy in UT_Stub_CopyToLocal you must know the concrete types and runtime invariants of the source and destination objects and the behavior of the functions that produce/consume them:\n\n- UT_StubTableEntry_t (definition)\n  - Contains the layout of StubPtr->Data.Buff (BasePtr, Position, TotalSize). Required to determine element types, field types (signed/unsigned) and whether the computed pointer & indexing are well-typed and within object bounds.\n\n- UT_GetStubEntry (signature and contract for UT_ENTRYTYPE_DATA_BUFFER)\n  - UT_Stub_CopyToLocal relies on UT_GetStubEntry to return a valid pointer to a data-buffer entry. Need to know whether UT_GetStubEntry can return entries with NULL BasePtr, or with inconsistent Position/TotalSize values, or whether it guarantees other invariants (e.g., TotalSize >= Position). These affect whether the computed source pointer and ActualCopy are valid and non-wrapping.\n\n- UT_ClearStubEntry (semantics)\n  - Although called after the memcpy, its semantics matter for understanding lifetime/ownership of BasePtr and whether the entry could have been concurrently modified or freed by ClearStubEntry in other contexts. Also useful to confirm intended invariants on Position/TotalSize management.\n\n- Data.Buff.BasePtr element type (e.g., uint8_t * or char *)\n  - Needed to reason about pointer arithmetic (&BasePtr[Position]) and the unit size used for bounds checks (bytes vs elements). Also needed to ensure memcpy source pointer type is compatible.\n\n- Data.Buff.Position type and invariants\n  - If Position is unsigned (size_t) then TotalSize - Position may underflow when Position > TotalSize; the code assumes subtraction yields a valid remaining size. To prove memcpy cannot read out-of-bounds you must know the type and the invariant that Position <= TotalSize on entries returned by UT_GetStubEntry.\n\n- Data.Buff.TotalSize type and invariants\n  - Needed to reason about the subtraction and the upper bound on ActualCopy. Must know whether TotalSize represents bytes and its relation to BasePtr object length.\n\n- UT_Hook_GetArgPtr (how LocalBuffer and MaxSize are supplied / their size contract)\n  - Many callers obtain LocalBuffer and MaxSize via UT_Hook_GetArgPtr (or similar). To ensure the destination of memcpy (LocalBuffer) has at least ActualCopy bytes you must know the caller-side contract: that MaxSize represents the size of the object pointed to by LocalBuffer (or otherwise how LocalBuffer/MaxSize are derived).\n\nHaving these symbols/definitions and their documented invariants allows a precise check that:\n  - the source range &StubPtr->Data.Buff.BasePtr[Position]..[Position+ActualCopy-1] is within the object BasePtr points to, and\n  - the destination LocalBuffer has at least ActualCopy bytes (i.e., ActualCopy <= object size represented by MaxSize), and\n  - the arithmetic TotalSize - Position cannot underflow/wrap producing an incorrect large ActualCopy.\n\nWithout these definitions/semantic guarantees you cannot conclude whether memcpy in UT_Stub_CopyToLocal violates the MISRA bound-access rule."
}