{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf StubPtr->Data.Buff.TotalSize and Position are unsigned (e.g. size_t) and Position > TotalSize, the subtraction underflows producing a very large ActualCopy. Example: TotalSize = 10, Position = 20, MaxSize = 5 yields ActualCopy = (size_t)(10 - 20) -> large value, then ActualCopy is clamped to 5 but memcpy(LocalBuffer, &BasePtr[20], 5) uses &BasePtr[20] which is out-of-bounds. This can lead to accesses beyond the bounds in the subsequent memcpy call, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyToLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2543.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyToLocal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyToLocal:\n```c\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyToLocal code.\n",
  "test_code": "static void UT_Stub_LogProbe(const char *phase, UT_StubTableEntry_t *StubPtr, void *LocalBuffer, size_t MaxSize, size_t ActualBefore, size_t ActualAfter)\n{\n    FILE *f = fopen(\"/tmp/logs/2543.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    if (StubPtr == NULL)\n    {\n        fprintf(f, \"%s: StubPtr == NULL, LocalBuffer=%p, MaxSize=%zu, ActualBefore=%zu, ActualAfter=%zu\\n\",\n                phase, LocalBuffer, MaxSize, ActualBefore, ActualAfter);\n        fclose(f);\n        return;\n    }\n\n    /* Safe logging: only form the copy-source pointer if Position is within bounds (<= TotalSize).\n       This avoids generating new undefined behavior while still recording the crucial state. */\n    size_t total = StubPtr->Data.Buff.TotalSize;\n    size_t pos   = StubPtr->Data.Buff.Position;\n    void *base_ptr = (void *)StubPtr->Data.Buff.BasePtr;\n    void *copy_addr = NULL;\n\n    if (pos <= total)\n    {\n        /* &BasePtr[pos] is only computed when pos is not beyond total to avoid creating an out-of-bounds pointer */\n        copy_addr = (void *)&StubPtr->Data.Buff.BasePtr[pos];\n    }\n\n    fprintf(f, \"%s: StubPtr=%p, BasePtr=%p, CopyAddr=%p, Position=%zu, TotalSize=%zu, LocalBuffer=%p, MaxSize=%zu, ActualBefore=%zu, ActualAfter=%zu\\n\",\n            phase, (void *)StubPtr, base_ptr, copy_addr, pos, total, LocalBuffer, MaxSize, ActualBefore, ActualAfter);\n\n    fclose(f);\n}\n\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    /* Log entry into the function and the obtained StubPtr */\n    UT_Stub_LogProbe(\"ENTRY\", StubPtr, LocalBuffer, MaxSize, 0, 0);\n\n    if (StubPtr != NULL)\n    {\n        /* Compute amount to copy (note: this is the original logic) */\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n\n        /* Log computed value before clamping to MaxSize */\n        UT_Stub_LogProbe(\"COMPUTE_ACTUAL_BEFORE_CLAMP\", StubPtr, LocalBuffer, MaxSize, ActualCopy, ActualCopy);\n\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        /* Log chosen copy size and state just before memcpy. Do not compute out-of-bounds pointer here. */\n        UT_Stub_LogProbe(\"BEFORE_MEMCPY\", StubPtr, LocalBuffer, MaxSize, (size_t)(StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position), ActualCopy);\n\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /* Log state after memcpy */\n        UT_Stub_LogProbe(\"AFTER_MEMCPY\", StubPtr, LocalBuffer, MaxSize, 0, ActualCopy);\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_Stub_LogProbe(\"CLEAR_ENTRY\", StubPtr, LocalBuffer, MaxSize, 0, 0);\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n    else\n    {\n        /* Log that no stub entry was found */\n        UT_Stub_LogProbe(\"NO_STUB\", StubPtr, LocalBuffer, MaxSize, 0, 0);\n    }\n\n    return ActualCopy;\n}\n"
}