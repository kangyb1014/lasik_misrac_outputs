{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf StubPtr->Data.Buff.BasePtr is declared as a pointer to a non-const element type (e.g. uint8_t *BasePtr) but the buffer is only read from (as here, passed as the source to memcpy), then the pointer should be declared to point to a const-qualified type (e.g. const uint8_t *BasePtr). In that case Rule 8.13 is violated. If BasePtr is already declared const (const uint8_t * or similar) then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyToLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2539.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyToLocal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyToLocal:\n```c\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyToLocal code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe/log helper ------------------------------------------------------- */\nstatic void UT_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2539.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Modified UT_Stub_CopyToLocal with probes --------------------------------\n * - preserves original logic and control flow\n * - inserts logging to /tmp/logs/2539.txt to capture the violation scenario\n */\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n\n    UT_LogProbe(\"UT_Stub_CopyToLocal ENTRY: FuncKey=%llu, LocalBuffer=%p, MaxSize=%zu\",\n                (unsigned long long) (uintptr_t) FuncKey, LocalBuffer, MaxSize);\n\n    StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    UT_LogProbe(\"UT_GetStubEntry returned: StubPtr=%p\", (void *)StubPtr);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        UT_LogProbe(\"Computed initial ActualCopy = TotalSize(%zu) - Position(%zu) = %zu\",\n                    StubPtr->Data.Buff.TotalSize,\n                    StubPtr->Data.Buff.Position,\n                    ActualCopy);\n\n        if (MaxSize < ActualCopy)\n        {\n            UT_LogProbe(\"MaxSize(%zu) < ActualCopy(%zu) -> limiting ActualCopy to MaxSize\", MaxSize, ActualCopy);\n            ActualCopy = MaxSize;\n        }\n        else\n        {\n            UT_LogProbe(\"MaxSize(%zu) >= ActualCopy(%zu) -> keep ActualCopy\", MaxSize, ActualCopy);\n        }\n\n        /* Log the source pointer and a short hexdump of the first bytes we will copy. */\n        {\n            const unsigned char *src = (const unsigned char *)&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position];\n            UT_LogProbe(\"About to memcpy from src=%p, Position=%zu, TotalSize=%zu, ActualCopy=%zu\",\n                        (const void *)src,\n                        StubPtr->Data.Buff.Position,\n                        StubPtr->Data.Buff.TotalSize,\n                        ActualCopy);\n\n            /* Dump up to the first 16 bytes for inspection (safe read; identical to memcpy source reads) */\n            size_t dump = (ActualCopy < 16U) ? ActualCopy : 16U;\n            if (dump > 0U)\n            {\n                char hex[3 * 16 + 1];\n                char *p = hex;\n                size_t i;\n\n                for (i = 0U; i < dump; ++i)\n                {\n                    int written = snprintf(p, (size_t)(hex + sizeof(hex) - p), \"%02X \", (unsigned int)src[i]);\n                    if (written <= 0)\n                    {\n                        break;\n                    }\n                    p += written;\n                }\n                *p = '\\0';\n\n                UT_LogProbe(\"Source buffer first %zu bytes: %s\", dump, hex);\n            }\n            else\n            {\n                UT_LogProbe(\"No bytes to dump (dump=%zu)\", dump);\n            }\n        }\n\n        /* Perform the original copy operation */\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        UT_LogProbe(\"memcpy(LocalBuffer=%p, src=%p, ActualCopy=%zu) completed\",\n                    LocalBuffer,\n                    (const void *)&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position],\n                    ActualCopy);\n\n        StubPtr->Data.Buff.Position += ActualCopy;\n        UT_LogProbe(\"Updated Position -> %zu\", StubPtr->Data.Buff.Position);\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_LogProbe(\"Position (%zu) >= TotalSize (%zu): clearing stub entry %p\",\n                        StubPtr->Data.Buff.Position,\n                        StubPtr->Data.Buff.TotalSize,\n                        (void *)StubPtr);\n            UT_ClearStubEntry(StubPtr);\n        }\n        else\n        {\n            UT_LogProbe(\"Position (%zu) < TotalSize (%zu): leaving stub entry intact\",\n                        StubPtr->Data.Buff.Position,\n                        StubPtr->Data.Buff.TotalSize);\n        }\n    }\n    else\n    {\n        UT_LogProbe(\"No stub entry found for FuncKey=%llu\", (unsigned long long) (uintptr_t) FuncKey);\n    }\n\n    UT_LogProbe(\"UT_Stub_CopyToLocal EXIT: ActualCopy=%zu\", ActualCopy);\n\n    return ActualCopy;\n}\n"
}