{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe expression takes the address of an element of StubPtr->Data.Buff.BasePtr and uses it as the source operand to memcpy. If BasePtr is declared as a non-const pointer (for example uint8_t *BasePtr or void *BasePtr) and the buffer is only read (not modified) then this violates MISRA C 2023 Rule 8.13 \u2014 the pointer should be to a const-qualified type (e.g. const uint8_t * or const void *).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CopyToLocal code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2539.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CopyToLocal as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CopyToLocal:\n```c\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (StubPtr != NULL)\n    {\n        ActualCopy = StubPtr->Data.Buff.TotalSize - StubPtr->Data.Buff.Position;\n        if (MaxSize < ActualCopy)\n        {\n            ActualCopy = MaxSize;\n        }\n\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        /*\n         * Once the buffer is completely copied then drop this entry.\n         * The test harness will either refill it or there might be\n         * another entry in the table.\n         */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n\n    return ActualCopy;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CopyToLocal code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <sys/stat.h>\n\nsize_t UT_Stub_CopyToLocal(UT_EntryKey_t FuncKey, void *LocalBuffer, size_t MaxSize)\n{\n    size_t               ActualCopy;\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Ensure log directory exists (ignore error if it already exists) */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *log = fopen(\"/tmp/logs/2539.txt\", \"a\");\n    if (log != NULL)\n    {\n        fprintf(log, \"\\n--- UT_Stub_CopyToLocal ENTRY ---\\n\");\n        fprintf(log, \"LocalBuffer=%p, MaxSize=%zu\\n\", LocalBuffer, MaxSize);\n    }\n\n    ActualCopy = 0;\n    StubPtr    = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_DATA_BUFFER);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"UT_GetStubEntry returned StubPtr=%p\\n\", (void *)StubPtr);\n    }\n\n    if (StubPtr != NULL)\n    {\n        /* Log buffer state before copy */\n        size_t total = StubPtr->Data.Buff.TotalSize;\n        size_t pos   = StubPtr->Data.Buff.Position;\n        void  *basep = (void *)StubPtr->Data.Buff.BasePtr;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"Buffer state: TotalSize=%zu, Position=%zu, BasePtr=%p\\n\", total, pos, basep);\n        }\n\n        ActualCopy = total - pos;\n        if (log != NULL)\n        {\n            fprintf(log, \"Computed initial ActualCopy = TotalSize - Position = %zu\\n\", ActualCopy);\n        }\n\n        if (MaxSize < ActualCopy)\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"MaxSize (%zu) < ActualCopy (%zu) -> limiting ActualCopy to MaxSize\\n\", MaxSize, ActualCopy);\n            }\n            ActualCopy = MaxSize;\n        }\n\n        if (log != NULL)\n        {\n            /* Compute and log the source pointer passed to memcpy */\n            void *src_ptr = (void *)&StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position];\n            fprintf(log, \"Final ActualCopy=%zu, memcpy source address = %p\\n\", ActualCopy, src_ptr);\n\n            /* If possible, print up to the first 16 bytes from the source as hex for evidence (casts to unsigned char *) */\n            if (ActualCopy > 0u)\n            {\n                const unsigned char *bytes = (const unsigned char *)src_ptr;\n                size_t to_print = (ActualCopy < 16u) ? ActualCopy : 16u;\n                fprintf(log, \"Source bytes (up to 16):\");\n                for (size_t i = 0; i < to_print; ++i)\n                {\n                    fprintf(log, \" %02X\", (unsigned)bytes[i]);\n                }\n                if (ActualCopy > to_print)\n                {\n                    fprintf(log, \" ... (%zu more bytes)\", ActualCopy - to_print);\n                }\n                fprintf(log, \"\\n\");\n            }\n        }\n\n        /* Preserve original behavior: perform the copy and advance the position */\n        memcpy(LocalBuffer, &StubPtr->Data.Buff.BasePtr[StubPtr->Data.Buff.Position], ActualCopy);\n        StubPtr->Data.Buff.Position += ActualCopy;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"After memcpy: new Position=%zu\\n\", StubPtr->Data.Buff.Position);\n        }\n\n        /* Once the buffer is completely copied then drop this entry. */\n        if (StubPtr->Data.Buff.Position >= StubPtr->Data.Buff.TotalSize)\n        {\n            if (log != NULL)\n            {\n                fprintf(log, \"Position >= TotalSize -> clearing stub entry %p\\n\", (void *)StubPtr);\n            }\n            UT_ClearStubEntry(StubPtr);\n        }\n    }\n    else\n    {\n        if (log != NULL)\n        {\n            fprintf(log, \"No stub entry found for FuncKey (no action taken).\\n\");\n        }\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"--- UT_Stub_CopyToLocal EXIT: ActualCopy=%zu ---\\n\", ActualCopy);\n        fclose(log);\n    }\n\n    return ActualCopy;\n}\n"
}