{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'record' is only used for read access (accessing record->active_id and passing it to MatchFunc which expects a const OS_common_record_t *). It could be declared as const OS_common_record_t *record; therefore omitting the const qualifier violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFindNextMatch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1579.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFindNextMatch as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindNextMatch:\n```c\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        if (token->obj_idx >= obj_count)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        if (OS_ObjectIdDefined(record->active_id) && MatchFunc(arg, token, record))\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            break;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFindNextMatch code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append formatted logs to /tmp/logs/1579.txt */\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1579.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    /* Log initial state */\n    os_log_probe(\"OS_ObjectIdFindNextMatch start: obj_type=%u base=%p obj_count=%u initial_idx=%u\",\n                 (unsigned)token->obj_type, (void *)base, (unsigned)obj_count, (unsigned)token->obj_idx);\n\n    while (true)\n    {\n        ++token->obj_idx;\n        os_log_probe(\"Loop increment: obj_idx=%u obj_count=%u\", (unsigned)token->obj_idx, (unsigned)obj_count);\n\n        if (token->obj_idx >= obj_count)\n        {\n            os_log_probe(\"Loop break: token->obj_idx (%u) >= obj_count (%u)\", (unsigned)token->obj_idx, (unsigned)obj_count);\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n        os_log_probe(\"Fetched record pointer=%p for idx=%u\", (void *)record, (unsigned)token->obj_idx);\n\n        /* Evaluate the conditions separately so we can log their values without changing logic */\n        int id_defined = OS_ObjectIdDefined(record->active_id) ? 1 : 0;\n        os_log_probe(\"record->active_id=%u id_defined=%d\", (unsigned)record->active_id, id_defined);\n\n        int match_result = 0;\n        if (id_defined)\n        {\n            match_result = MatchFunc(arg, token, record) ? 1 : 0;\n            os_log_probe(\"MatchFunc returned=%d for idx=%u\", match_result, (unsigned)token->obj_idx);\n        }\n\n        if (id_defined && match_result)\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            os_log_probe(\"Match found: obj_id=%u idx=%u record=%p\", (unsigned)record->active_id, (unsigned)token->obj_idx, (void *)record);\n            break;\n        }\n    }\n\n    os_log_probe(\"OS_ObjectIdFindNextMatch exit: return_code=%d token->obj_id=%u final_idx=%u\",\n                 (int)return_code, (unsigned)token->obj_id, (unsigned)token->obj_idx);\n\n    return return_code;\n}\n"
}