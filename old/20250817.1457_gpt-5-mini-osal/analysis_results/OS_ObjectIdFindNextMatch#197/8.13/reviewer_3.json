{
  "user_message": "An agent A claimed that the following OS_ObjectIdFindNextMatch code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_ObjectIdFindNextMatch.\n```c\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        if (token->obj_idx >= obj_count)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        if (OS_ObjectIdDefined(record->active_id) && MatchFunc(arg, token, record))\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            break;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The pointer 'base' is declared as 'OS_common_record_t *base' but is only used to read records (it is assigned from the static OS_common_table and later used via OS_OBJECT_TABLE_GET to obtain records that are passed to MatchFunc which expects a 'const OS_common_record_t *'). Neither 'base' nor the derived 'record' are used to modify the pointed-to objects, so 'base' could and should be declared 'const OS_common_record_t *base' (and likewise 'record' as 'const OS_common_record_t *') to comply with MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_LogProbe_1579(const char *stage,\n                             OS_common_record_t *base,\n                             OS_common_record_t *record,\n                             OS_object_token_t *token,\n                             uint32 obj_count,\n                             int match_result)\n{\n    FILE *f = fopen(\"/tmp/logs/1579.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Guard access to record->active_id in case record is NULL. */\n        unsigned record_active_id = (record != NULL) ? (unsigned)record->active_id : 0u;\n\n        fprintf(f,\n                \"Stage=%s, obj_type=%u, obj_idx=%u, obj_id=%u, obj_count=%u, base=%p, record=%p, record_active_id=%u, match_result=%d\\n\",\n                stage,\n                (unsigned)token->obj_type,\n                (unsigned)token->obj_idx,\n                (unsigned)token->obj_id,\n                (unsigned)obj_count,\n                (void *)base,\n                (void *)record,\n                record_active_id,\n                match_result);\n        fclose(f);\n    }\n}\n\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    /* Log entry state. */\n    OS_LogProbe_1579(\"entry\", base, NULL, token, obj_count, -1);\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        /* Log after increment. */\n        OS_LogProbe_1579(\"after_increment\", base, NULL, token, obj_count, -1);\n\n        if (token->obj_idx >= obj_count)\n        {\n            /* Log that we are breaking due to exceeding count. */\n            OS_LogProbe_1579(\"break_out_of_range\", base, NULL, token, obj_count, -1);\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        /* Log the obtained record pointer and its active_id. */\n        OS_LogProbe_1579(\"after_get_record\", base, record, token, obj_count, -1);\n\n        /* Preserve original short-circuit semantics: only call MatchFunc if the id is defined. */\n        int defined = OS_ObjectIdDefined(record->active_id) ? 1 : 0;\n        int match = 0;\n        if (defined)\n        {\n            match = MatchFunc(arg, token, record) ? 1 : 0;\n        }\n\n        /* Log the evaluation of the predicates. */\n        OS_LogProbe_1579(\"eval_predicates\", base, record, token, obj_count, match);\n\n        if (defined && match)\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n\n            /* Log the successful match and the selected id. */\n            OS_LogProbe_1579(\"found_match\", base, record, token, obj_count, match);\n            break;\n        }\n    }\n\n    /* Log exit state. */\n    OS_LogProbe_1579(\"exit\", base, NULL, token, obj_count, (return_code == OS_SUCCESS) ? 1 : 0);\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nStage=entry, obj_type=0, obj_idx=0, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=after_increment, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=break_out_of_range, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=exit, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=0\nStage=entry, obj_type=0, obj_idx=0, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=after_increment, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=break_out_of_range, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=exit, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=0\nStage=entry, obj_type=0, obj_idx=0, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=after_increment, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=break_out_of_range, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=exit, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=0\nStage=entry, obj_type=0, obj_idx=0, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=after_increment, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=break_out_of_range, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=exit, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=0\nStage=entry, obj_type=0, obj_idx=0, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=after_increment, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=break_out_of_range, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=exit, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=0\nStage=entry, obj_type=0, obj_idx=0, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=after_increment, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=break_out_of_range, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=exit, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=0\nStage=entry, obj_type=0, obj_idx=0, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=after_increment, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=break_out_of_range, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=exit, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=0\nStage=entry, obj_type=0, obj_idx=0, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=after_increment, obj_type=0, obj_idx=1, obj_id=0, obj_count=0, base=0x55d370371300, record=(nil), record_active_id=0, match_result=-1\nStage=break_out_of_range, obj_type=0, o\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In the shown function neither 'base' nor 'record' are used to modify the pointed-to OS_common_record_t objects: 'base' is only set to point into the static OS_common_table and is only used to obtain a record via OS_OBJECT_TABLE_GET, and 'record' is only read (checked with OS_ObjectIdDefined and passed to MatchFunc). Under MISRA C 2023 Rule 8.13 a pointer should be qualified const if it does not allow modification of the referenced object. Both local pointers therefore can and should be declared const OS_common_record_t * to reflect read-only usage and satisfy Rule 8.13."
}