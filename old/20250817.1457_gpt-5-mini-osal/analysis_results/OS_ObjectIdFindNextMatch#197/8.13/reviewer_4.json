{
  "user_message": "An agent A claimed that the following OS_ObjectIdFindNextMatch code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_ObjectIdFindNextMatch.\n```c\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        if (token->obj_idx >= obj_count)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        if (OS_ObjectIdDefined(record->active_id) && MatchFunc(arg, token, record))\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            break;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The pointer 'record' is only used for read access (accessing record->active_id and passing it to MatchFunc which expects a const OS_common_record_t *). It could be declared as const OS_common_record_t *record; therefore omitting the const qualifier violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1579.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    /* Log initial state */\n    os_log_probe(\"OS_ObjectIdFindNextMatch start: obj_type=%u base=%p obj_count=%u initial_idx=%u\",\n                 (unsigned)token->obj_type, (void *)base, (unsigned)obj_count, (unsigned)token->obj_idx);\n\n    while (true)\n    {\n        ++token->obj_idx;\n        os_log_probe(\"Loop increment: obj_idx=%u obj_count=%u\", (unsigned)token->obj_idx, (unsigned)obj_count);\n\n        if (token->obj_idx >= obj_count)\n        {\n            os_log_probe(\"Loop break: token->obj_idx (%u) >= obj_count (%u)\", (unsigned)token->obj_idx, (unsigned)obj_count);\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n        os_log_probe(\"Fetched record pointer=%p for idx=%u\", (void *)record, (unsigned)token->obj_idx);\n\n        /* Evaluate the conditions separately so we can log their values without changing logic */\n        int id_defined = OS_ObjectIdDefined(record->active_id) ? 1 : 0;\n        os_log_probe(\"record->active_id=%u id_defined=%d\", (unsigned)record->active_id, id_defined);\n\n        int match_result = 0;\n        if (id_defined)\n        {\n            match_result = MatchFunc(arg, token, record) ? 1 : 0;\n            os_log_probe(\"MatchFunc returned=%d for idx=%u\", match_result, (unsigned)token->obj_idx);\n        }\n\n        if (id_defined && match_result)\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            os_log_probe(\"Match found: obj_id=%u idx=%u record=%p\", (unsigned)record->active_id, (unsigned)token->obj_idx, (void *)record);\n            break;\n        }\n    }\n\n    os_log_probe(\"OS_ObjectIdFindNextMatch exit: return_code=%d token->obj_id=%u final_idx=%u\",\n                 (int)return_code, (unsigned)token->obj_id, (unsigned)token->obj_idx);\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_ObjectIdFindNextMatch start: obj_type=0 base=0x55b29c6b5300 obj_count=0 initial_idx=0\nLoop increment: obj_idx=1 obj_count=0\nLoop break: token->obj_idx (1) >= obj_count (0)\nOS_ObjectIdFindNextMatch exit: return_code=-17 token->obj_id=0 final_idx=1\nOS_ObjectIdFindNextMatch start: obj_type=0 base=0x55b29c6b5300 obj_count=0 initial_idx=0\nLoop increment: obj_idx=1 obj_count=0\nLoop break: token->obj_idx (1) >= obj_count (0)\nOS_ObjectIdFindNextMatch exit: return_code=-17 token->obj_id=0 final_idx=1\nOS_ObjectIdFindNextMatch start: obj_type=0 base=0x55b29c6b5300 obj_count=0 initial_idx=0\nLoop increment: obj_idx=1 obj_count=0\nLoop break: token->obj_idx (1) >= obj_count (0)\nOS_ObjectIdFindNextMatch exit: return_code=-17 token->obj_id=0 final_idx=1\nOS_ObjectIdFindNextMatch start: obj_type=0 base=0x55b29c6b5300 obj_count=0 initial_idx=0\nLoop increment: obj_idx=1 obj_count=0\nLoop break: token->obj_idx (1) >= obj_count (0)\nOS_ObjectIdFindNextMatch exit: return_code=-17 token->obj_id=0 final_idx=1\nOS_ObjectIdFindNextMatch start: obj_type=0 base=0x55b29c6b5300 obj_count=0 initial_idx=0\nLoop increment: obj_idx=1 obj_count=0\nLoop break: token->obj_idx (1) >= obj_count (0)\nOS_ObjectIdFindNextMatch exit: return_code=-17 token->obj_id=0 final_idx=1\nOS_ObjectIdFindNextMatch start: obj_type=0 base=0x55b29c6b5300 obj_count=0 initial_idx=0\nLoop increment: obj_idx=1 obj_count=0\nLoop break: token->obj_idx (1) >= obj_count (0)\nOS_ObjectIdFindNextMatch exit: return_code=-17 token->obj_id=0 final_idx=1\nOS_ObjectIdFindNextMatch start: obj_type=0 base=0x55b29c6b5300 obj_count=0 initial_idx=0\nLoop increment: obj_idx=1 obj_count=0\nLoop break: token->obj_idx (1) >= obj_count (0)\nOS_ObjectIdFindNextMatch exit: return_code=-17 token->obj_id=0 final_idx=1\nOS_ObjectIdFindNextMatch start: obj_type=0 base=0x55b29c6b5300 obj_count=0 initial_idx=0\nLoop increment: obj_idx=1 obj_count=0\nLoop break: token->obj_idx (1) >= obj_count (0)\nOS_ObjectIdFindNextMatch exit: return_code=-17 token->obj_id=0 final_idx=1\nOS_ObjectIdFindNextMatch start: obj_type=11 base=0x55b29c6b6cf8 obj_count=14 initial_idx=4294967295\nLoop increment: obj_idx=0 obj_count=14\nFetched record pointer=0x55b29c6b6cf8 for idx=0\nrecord->active_id=0 id_defined=0\nLoop increment: obj_idx=1 obj_count=14\nFetched record pointer=0x55b29c6b6d10 for idx=1\nrecord->active_id=0 id_defined=0\nLoop increment: obj_idx=2 obj_count=14\nFetched record pointer=0x55b29c6b6d28 for idx=2\nrecord->active_id=0 id_defined=0\nLoop increment: obj_idx=3 obj_count=14\nFetched record pointer=0x55b29c6b6d40 for idx=3\nrecord->active_id=0 id_defined=0\nLoop increment: obj_idx=4 obj_count=14\nFetched record pointer=0x55b29c6b6d58 for idx=4\nrecord->active_id=0 id_defined=0\nLoop increment: obj_idx=5 obj_count=14\nFetched record pointer=0x55b29c6b6d70 for idx=5\nrecord->active_id=0 id_defined=0\nLoop increment: obj_idx=6 obj_count=14\nFetched record pointer=0x55b29c6b6d88 for idx=6\nrecord->active_id=0 id_defined=0\nLoop increment: obj_idx=7 obj_count=14\nFetched record pointer=0x55b29c6b6da0 for idx=7\nrecord->active_id=0 id_defined=0\nLoop increment: obj_idx=8 obj_count=14\nFetched record pointer=0x55b29c6b6db8 for idx=8\nrecord->active_id=0 id_defined=0\nLoop increment: obj_idx=9 obj_count=14\nFetched record pointer=0x55b29c6b6dd0 for idx=9\nrecord->active_id=0 id_defined=0\nLoop increment: obj_idx=10 obj_count=14\nFetched record pointer=0x55b29c6b6de8 for idx=10\nrecord->active_id=0 id_defined=0\nLoop increment: obj_idx=11 obj_count=14\nFetched record pointer=0x55b29c6b6e00 for idx=11\nrecord->active_id=0 id_defined=0\nLoop increment: obj_idx=12 obj_count=14\nFetched record pointer=0x55b29c6b6e18 for idx=12\nrecord->active_id=0 id_defined=0\nLoop increment: obj_idx=13 obj_count=14\nFetched record pointer=0x55b29c6b6e30 for idx=13\nrecord->active_id=0 id_defined=0\nLoop increment: obj_idx=14 obj_count=14\nLoop break: token->obj_idx (14) >= obj_count (14)\nOS_ObjectIdFindNextMatch exit: return_code=-17 token->obj_id=0 final_idx=14\nOS_ObjectIdFindNextMatch start: obj_type=0 base=0x55b29c6b5300 obj_count=0 initial_idx=0\nLoop increment: obj_idx=1 obj_count=0\nLoop break: tok\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the shown function 'record' is only used for read-only access (reading record->active_id and passing the pointer to MatchFunc). Under MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so 'record' should be declared as const OS_common_record_t *record (or an equivalent const-qualified type). Changing the declaration to a pointer-to-const (and adjusting any macro or prototypes as needed) resolves the violation."
}