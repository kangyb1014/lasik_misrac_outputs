{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'record' is declared as OS_common_record_t * (non-const) but is only used for read-only access and passed to MatchFunc which takes a const OS_common_record_t *. Per MISRA C 2023 Rule 8.13 the pointer should be const-qualified (e.g. const OS_common_record_t *record). Similarly, 'base' could be const as it points into a global table that is not modified here. The assignment 'record = OS_OBJECT_TABLE_GET(base, *token);' therefore violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdFindNextMatch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1579.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdFindNextMatch as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdFindNextMatch:\n```c\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    while (true)\n    {\n        ++token->obj_idx;\n\n        if (token->obj_idx >= obj_count)\n        {\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        if (OS_ObjectIdDefined(record->active_id) && MatchFunc(arg, token, record))\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            break;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdFindNextMatch code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n\nstatic FILE *probe_open_log(void)\n{\n    FILE *f = fopen(\"/tmp/logs/1579.txt\", \"a\");\n    return f;\n}\n\nstatic void probe_log(FILE *f, const char *fmt, ...)\n{\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fflush(f);\n}\n\nint32 OS_ObjectIdFindNextMatch(OS_ObjectMatchFunc_t MatchFunc, void *arg, OS_object_token_t *token)\n{\n    int32               return_code;\n    uint32              obj_count;\n    OS_common_record_t *base;\n    OS_common_record_t *record;\n    FILE               *logf;\n    bool                defined;\n    bool                matched;\n\n    /* Open log for this invocation */\n    logf = probe_open_log();\n    probe_log(logf, \"ENTRY OS_ObjectIdFindNextMatch: token=%p obj_type=%lu obj_idx=%lu obj_id=%lu\\n\",\n              (void *)token,\n              (unsigned long)token->obj_type,\n              (unsigned long)token->obj_idx,\n              (unsigned long)token->obj_id);\n\n    return_code   = OS_ERR_NAME_NOT_FOUND;\n    base          = &OS_common_table[OS_GetBaseForObjectType(token->obj_type)];\n    obj_count     = OS_GetMaxForObjectType(token->obj_type);\n    token->obj_id = OS_OBJECT_ID_UNDEFINED;\n\n    probe_log(logf, \"base=%p obj_count=%lu\\n\", (void *)base, (unsigned long)obj_count);\n\n    while (true)\n    {\n        probe_log(logf, \"loop top: current obj_idx=%lu\\n\", (unsigned long)token->obj_idx);\n\n        ++token->obj_idx;\n\n        probe_log(logf, \"incremented obj_idx=%lu\\n\", (unsigned long)token->obj_idx);\n\n        if (token->obj_idx >= obj_count)\n        {\n            probe_log(logf, \"obj_idx >= obj_count (%lu >= %lu), breaking\\n\",\n                      (unsigned long)token->obj_idx, (unsigned long)obj_count);\n            break;\n        }\n\n        record = OS_OBJECT_TABLE_GET(base, *token);\n\n        probe_log(logf, \"fetched record=%p for obj_idx=%lu\\n\", (void *)record, (unsigned long)token->obj_idx);\n\n        /* Determine defined-ness and match result separately so we can log both */\n        defined = false;\n        matched = false;\n\n        if (record != NULL)\n        {\n            probe_log(logf, \"record->active_id=%lu\\n\", (unsigned long)record->active_id);\n            defined = OS_ObjectIdDefined(record->active_id) ? true : false;\n            probe_log(logf, \"OS_ObjectIdDefined=%d\\n\", defined ? 1 : 0);\n\n            if (defined)\n            {\n                matched = MatchFunc(arg, token, record) ? true : false;\n                probe_log(logf, \"MatchFunc returned=%d\\n\", matched ? 1 : 0);\n            }\n            else\n            {\n                probe_log(logf, \"Skipping MatchFunc because record is not defined\\n\");\n            }\n        }\n        else\n        {\n            probe_log(logf, \"record is NULL, skipping check\\n\");\n        }\n\n        if (defined && matched)\n        {\n            return_code   = OS_SUCCESS;\n            token->obj_id = record->active_id;\n            probe_log(logf, \"MATCH FOUND: token->obj_id set to %lu, returning success\\n\", (unsigned long)token->obj_id);\n            break;\n        }\n    }\n\n    probe_log(logf, \"EXIT OS_ObjectIdFindNextMatch: return_code=%ld token->obj_idx=%lu token->obj_id=%lu\\n\",\n              (long)return_code,\n              (unsigned long)token->obj_idx,\n              (unsigned long)token->obj_id);\n\n    if (logf != NULL)\n    {\n        fclose(logf);\n    }\n\n    return return_code;\n}\n"
}