{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_BSP_Lock_Impl the test `if (status < 0)` can never be true for a conforming POSIX pthreads implementation because pthread_mutex_lock() returns 0 on success or a positive error number on failure. Therefore the BSP_DEBUG branch is effectively unreachable (and error cases will fall through to the else), which violates MISRA C 2023 Rule 2.1 (no unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssertEx code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2225.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssertEx as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssertEx:\n```c\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n```\n</target_code>\nPlease provide the modified UtAssertEx code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/2225.txt */\nstatic void UtAssert_ProbeLog(const char *Fmt, ...)\n{\n    FILE *F = fopen(\"/tmp/logs/2225.txt\", \"a\");\n    if (F == NULL)\n    {\n        return;\n    }\n\n    va_list Args;\n    va_start(Args, Fmt);\n    vfprintf(F, Fmt, Args);\n    va_end(Args);\n\n    fputc('\\n', F);\n    fclose(F);\n}\n\n/* Keep original signature exactly as provided. Insert probes to capture control flow\n   and relevant state so other agents can reproduce the reported scenario. */\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    /* Log entry and input state */\n    UtAssert_ProbeLog(\"ENTER: UtAssertEx - Expression=%d, CaseType=%u, File=%s, Line=%u, MessageFormat=%p\",\n                      (int)Expression, (unsigned)CaseType, File ? File : \"(null)\", (unsigned)Line, (const void *)MessageFormat);\n\n    UT_BSP_Lock();\n\n    UtAssert_ProbeLog(\"AFTER_LOCK: captured lock entry for File=%s Line=%u\", File ? File : \"(null)\", (unsigned)Line);\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    UtAssert_ProbeLog(\"AFTER_INC_TotalTestCases: TotalTestCases=%u\", (unsigned)UT_SegmentCounters.TotalTestCases);\n\n    if (Expression)\n    {\n        /* Log the change to CaseType when expression is true */\n        UtAssert_ProbeLog(\"EXPRESSION_TRUE: original CaseType=%u -> setting to PASS\", (unsigned)CaseType);\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n        UtAssert_ProbeLog(\"INCREMENT_CASECOUNT: CaseType=%u, NewCount=%u\",\n                          (unsigned)CaseType, (unsigned)UT_SegmentCounters.CaseCount[(uint32)CaseType]);\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UtAssert_ProbeLog(\"BEFORE_UNLOCK: TestSegmentCount=%u, TotalTestCases=%u, CurrentSegment=%p\",\n                      (unsigned)TestSegmentCount, (unsigned)TotalTestCases, (const void *)CurrentSegment);\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    /* Log the final formatted message and the eventual report call parameters */\n    UtAssert_ProbeLog(\"FINAL_MESSAGE: %s\", FinalMessage);\n    UtAssert_ProbeLog(\"REPORT_CALL: File=%s, Line=%u, TestSegmentCount=%u, TotalTestCases=%u, CaseType=%u, CurrentSegment=%p\",\n                      File ? File : \"(null)\", (unsigned)Line, (unsigned)TestSegmentCount, (unsigned)TotalTestCases,\n                      (unsigned)CaseType, (const void *)CurrentSegment);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    UtAssert_ProbeLog(\"EXIT: UtAssertEx returning Expression=%d for File=%s Line=%u\", (int)Expression, File ? File : \"(null)\", (unsigned)Line);\n\n    return Expression;\n}\n"
}