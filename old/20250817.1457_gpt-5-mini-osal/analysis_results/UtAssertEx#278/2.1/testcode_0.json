{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_BSP_Unlock_Impl the condition 'if (status < 0)' can never be true because pthread_mutex_unlock() returns 0 on success or a positive error code on failure (POSIX error codes are non\u2011negative). Therefore the then\u2011branch (BSP_DEBUG(\"pthread_mutex_unlock: %s\\n\", strerror(status));) is unreachable. This constitutes unreachable code and thus violates MISRA C 2023 Rule 2.1. A correct check would be 'if (status != 0)' (or 'if (status > 0)') so the error handling path is reachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssertEx code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2225.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssertEx as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssertEx:\n```c\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n```\n</target_code>\nPlease provide the modified UtAssertEx code.\n",
  "test_code": "static void UtAssert_Probe(const char *Stage, bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, uint32 TestSegmentCount, uint32 TotalTestCases, const char *FinalMessage)\n{\n    FILE *f = fopen(\"/tmp/logs/2225.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"--- UtAssert Probe: %s ---\\n\", Stage);\n        fprintf(f, \"Expression=%d CaseType=%u File=%s Line=%u TestSegmentCount=%u TotalTestCases=%u\\n\",\n                Expression ? 1 : 0,\n                (unsigned)CaseType,\n                (File != NULL) ? File : \"(null)\",\n                (unsigned)Line,\n                (unsigned)TestSegmentCount,\n                (unsigned)TotalTestCases);\n        if (FinalMessage != NULL)\n        {\n            /* Limit message output length to avoid overly large log entries */\n            fprintf(f, \"FinalMessage=\\\"%s\\\"\\n\", FinalMessage);\n        }\n        fprintf(f, \"-------------------------------\\n\");\n        fclose(f);\n    }\n}\n\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    /* Probe: before acquiring BSP lock */\n    UtAssert_Probe(\"before_lock\", Expression, CaseType, File, Line, 0u, 0u, \"\");\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    /* Probe: state immediately before unlocking BSP (captures counters and case type) */\n    UtAssert_Probe(\"before_unlock\", Expression, CaseType, File, Line, TestSegmentCount, TotalTestCases, \"\");\n\n    UT_BSP_Unlock();\n\n    /* Probe: immediately after unlocking BSP (helps detect if unlock path executes) */\n    UtAssert_Probe(\"after_unlock\", Expression, CaseType, File, Line, TestSegmentCount, TotalTestCases, \"\");\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    /* Probe: final formatted message prior to reporting */\n    UtAssert_Probe(\"final_message\", Expression, CaseType, File, Line, TestSegmentCount, TotalTestCases, FinalMessage);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    /* Probe: after report (complete control flow for this assertion invocation) */\n    UtAssert_Probe(\"after_report\", Expression, CaseType, File, Line, TestSegmentCount, TotalTestCases, FinalMessage);\n\n    return Expression;\n}"
}