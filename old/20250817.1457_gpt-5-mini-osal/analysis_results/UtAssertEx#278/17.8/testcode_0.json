{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function assigns to the parameter CaseType (CaseType = UTASSERT_CASETYPE_PASS;) which modifies a function parameter. This is a direct violation of MISRA C 2023 Rule 17.8. Fix: make a local copy (e.g., UtAssert_CaseType_t LocalCaseType = CaseType;) and modify/use that local variable instead of assigning to the parameter.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssertEx code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2229.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssertEx as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssertEx:\n```c\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n```\n</target_code>\nPlease provide the modified UtAssertEx code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Minimal type and global definitions to allow compilation and execution of the probe code. */\ntypedef unsigned int uint32;\n\nenum UtAssert_CaseType_e\n{\n    UTASSERT_CASETYPE_PASS = 0,\n    UTASSERT_CASETYPE_FAIL = 1,\n    UTASSERT_CASETYPE_MAX  = 2\n};\ntypedef enum UtAssert_CaseType_e UtAssert_CaseType_t;\n\ntypedef struct\n{\n    uint32 TotalTestCases;\n    uint32 CaseCount[UTASSERT_CASETYPE_MAX];\n} UT_SegmentCounters_t;\n\ntypedef struct\n{\n    uint32 TestSegmentCount;\n} UT_TotalCounters_t;\n\n/* Global counters (stubs) */\nstatic UT_SegmentCounters_t UT_SegmentCounters = {0, {0}};\nstatic UT_TotalCounters_t UT_TotalCounters = {0};\nstatic uint32 CurrentSegment = 0u;\n\n/* BSP lock/unlock stubs */\nstatic void UT_BSP_Lock(void) { /* noop for probe */ }\nstatic void UT_BSP_Unlock(void) { /* noop for probe */ }\n\n/* Minimal report stub (preserve signature) */\nstatic void UtAssert_DoReport(const char *File, uint32 Line, uint32 TestSegmentCount, uint32 TotalTestCases,\n                              UtAssert_CaseType_t CaseType, uint32 Segment, const char *FinalMessage)\n{\n    /* Also write to the same probe log so report calls are captured */\n    FILE *f = fopen(\"/tmp/logs/2229.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"UtAssert_DoReport: File=%s Line=%u TestSeg=%u Total=%u CaseType=%u Segment=%u Message=\\\"%s\\\"\\n\",\n                File ? File : \"(null)\", (unsigned)Line, (unsigned)TestSegmentCount, (unsigned)TotalTestCases,\n                (unsigned)CaseType, (unsigned)Segment, FinalMessage ? FinalMessage : \"\");\n        fclose(f);\n    }\n}\n\n/* Probe helper to log control flow and state to /tmp/logs/2229.txt */\nstatic void LogProbe(const char *stage, bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line)\n{\n    FILE *f = fopen(\"/tmp/logs/2229.txt\", \"a\");\n    if (!f) return;\n    fprintf(f, \"[Probe] Stage=%s Expression=%s CaseType=%u File=%s Line=%u\\n\",\n            stage, Expression ? \"true\" : \"false\", (unsigned)CaseType,\n            File ? File : \"(null)\", (unsigned)Line);\n    fclose(f);\n}\n\nstatic void LogCaseCount(const char *stage, UtAssert_CaseType_t CaseType, uint32 Count)\n{\n    FILE *f = fopen(\"/tmp/logs/2229.txt\", \"a\");\n    if (!f) return;\n    fprintf(f, \"[Probe] Stage=%s CaseType=%u NewCount=%u\\n\", stage, (unsigned)CaseType, (unsigned)Count);\n    fclose(f);\n}\n\nstatic void LogFinal(const char *stage, const char *File, uint32 Line, uint32 TestSegmentCount, uint32 TotalTestCases,\n                     UtAssert_CaseType_t CaseType, uint32 Segment, const char *FinalMessage)\n{\n    FILE *f = fopen(\"/tmp/logs/2229.txt\", \"a\");\n    if (!f) return;\n    fprintf(f, \"[Probe] Stage=%s File=%s Line=%u TestSeg=%u Total=%u CaseType=%u Segment=%u FinalMessage=\\\"%s\\\"\\n\",\n            stage, File ? File : \"(null)\", (unsigned)Line, (unsigned)TestSegmentCount, (unsigned)TotalTestCases,\n            (unsigned)CaseType, (unsigned)Segment, FinalMessage ? FinalMessage : \"\");\n    fclose(f);\n}\n\n/* The target function: UtAssertEx\n   Note: This implementation preserves the original logic, including the assignment to the parameter CaseType\n   (which is the violation scenario we are capturing). Additional probe logging is inserted to capture state\n   before and after the assignment and at other key points. */\n\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    /* Log entry into function with initial parameter values */\n    LogProbe(\"ENTRY\", Expression, CaseType, File, Line);\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        /* Log state immediately before modifying the parameter CaseType (captures the violation) */\n        LogProbe(\"BEFORE_ASSIGN\", Expression, CaseType, File, Line);\n\n        /* This assignment modifies the function parameter (the violation scenario to be evidenced) */\n        CaseType = UTASSERT_CASETYPE_PASS;\n\n        /* Log state immediately after modifying the parameter */\n        LogProbe(\"AFTER_ASSIGN\", Expression, CaseType, File, Line);\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n        /* Log the updated case count for the selected CaseType */\n        LogCaseCount(\"INCREMENT_CASECOUNT\", CaseType, UT_SegmentCounters.CaseCount[(uint32)CaseType]);\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    /* Log the compiled final message and counters before reporting */\n    LogFinal(\"BEFORE_REPORT\", File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    /* Log exit from function including the CaseType that was passed back into report */\n    LogProbe(\"EXIT\", Expression, CaseType, File, Line);\n\n    return Expression;\n}\n"
}