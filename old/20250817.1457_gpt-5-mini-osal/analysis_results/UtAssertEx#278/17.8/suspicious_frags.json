{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UtAssertEx:\n```c\nbool UtAssertEx(bool Expression, UtAssert_CaseType_t CaseType, const char *File, uint32 Line, const char *MessageFormat,\n                ...)\n{\n    va_list va;\n    char    FinalMessage[256];\n    uint32  TestSegmentCount;\n    uint32  TotalTestCases;\n\n    UT_BSP_Lock();\n\n    ++UT_SegmentCounters.TotalTestCases;\n\n    if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }\n\n    if ((uint32)CaseType < UTASSERT_CASETYPE_MAX)\n    {\n        ++UT_SegmentCounters.CaseCount[(uint32)CaseType];\n    }\n\n    TestSegmentCount = 1 + UT_TotalCounters.TestSegmentCount;\n    TotalTestCases   = UT_SegmentCounters.TotalTestCases;\n\n    UT_BSP_Unlock();\n\n    va_start(va, MessageFormat);\n    vsnprintf(FinalMessage, sizeof(FinalMessage), MessageFormat, va);\n    va_end(va);\n\n    UtAssert_DoReport(File, Line, TestSegmentCount, TotalTestCases, CaseType, CurrentSegment, FinalMessage);\n\n    return Expression;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function UtAssertEx:\ntypedef enum\n{\n    UTASSERT_CASETYPE_NONE,    /**< Reserved value, No messages should be used with this */\n    UTASSERT_CASETYPE_ABORT,   /**< Test sequence abort (major failure, cannot continue) */\n    UTASSERT_CASETYPE_FAILURE, /**< Test case failure status messages */\n    UTASSERT_CASETYPE_TSF,     /**< Test Setup Failure (TSF) status messages */\n    UTASSERT_CASETYPE_TTF,     /**< Test Teardown Failure (TTF) status messages */\n    UTASSERT_CASETYPE_MIR,     /**< Manual Inspection Required (MIR) status messages */\n    UTASSERT_CASETYPE_WARN,    /**< Test was unable to run (WARN) status messages (e.g. initial condition wrong) */\n    UTASSERT_CASETYPE_NA,      /**< Test Not Applicable (NA) status messages */\n    UTASSERT_CASETYPE_BEGIN,   /**< Beginning of test status messages */\n    UTASSERT_CASETYPE_END,     /**< End of test status messages */\n    UTASSERT_CASETYPE_INFO,    /**< All other informational status messages */\n    UTASSERT_CASETYPE_PASS,    /**< Test case passed (normal) status messages */\n    UTASSERT_CASETYPE_FLOW,    /**< Other condition checks/messages that record test flow, but are not assertions */\n    UTASSERT_CASETYPE_DEBUG,   /**< Debugging messages */\n    UTASSERT_CASETYPE_MAX      /**< Reserved value, No messages should be used with this */\n} UtAssert_CaseType_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (Expression)\n    {\n        CaseType = UTASSERT_CASETYPE_PASS;\n    }"
  ],
  "explanation": "No other function parameter is modified in this function. 'Expression' and 'Line' are only read; 'File' and 'MessageFormat' are const pointers and are not reassigned (the pointer values are not modified), and the variadic handling (va_start/vsnprintf/va_end) does not modify any parameter. The cast (uint32)CaseType is a temporary value used for indexing and does not alter the parameter. All other state changes are to global counters or local variables (UT_SegmentCounters, UT_TotalCounters, TestSegmentCount, TotalTestCases, FinalMessage), not to the function parameters."
}