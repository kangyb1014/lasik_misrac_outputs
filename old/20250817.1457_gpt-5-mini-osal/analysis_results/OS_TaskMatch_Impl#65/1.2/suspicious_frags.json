{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_TaskMatch_Impl:\n```c\nint32 OS_TaskMatch_Impl(const OS_object_token_t *token)\n{\n    OS_impl_task_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    if (pthread_equal(pthread_self(), impl->id) == 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_TaskMatch_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_task_internal_record_t OS_impl_task_table[OS_MAX_TASKS]\n...\ntypedef struct\n{\n    pthread_t id;\n} OS_impl_task_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERROR (-1)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I examined the entire target function and the related symbol definitions provided. No compiler language extensions (as typically documented by compiler vendors, e.g. __attribute__, __asm__, typeof, statement-expressions, nested functions, __int128, GCC/Clang-specific keywords, MSVC-specific keywords, or other non-standard keywords) are used in the shown code. Specific checks: \n\n- Use of pthread_self() and pthread_equal(): these are POSIX library calls, not compiler language extensions. Their use does not violate Rule 1.2 unless the compiler documents these as language extensions (they are standard POSIX APIs).\n- The OS_OBJECT_TABLE_GET macro and its use with & and array indexing (tbl[...]) are standard preprocessor and C expressions, not language extensions.\n- The static inline function OS_ObjectIndexFromToken: the inline keyword is standard in ISO C99 and later; it is not a compiler extension in standard-conforming modes.\n- The typedefs and identifiers shown (pthread_t, OS_impl_task_internal_record_t, OS_object_token_t, OS_impl_task_table, OS_MAX_TASKS, OS_SUCCESS, OS_ERROR): these are ordinary type and macro names. There is no evidence here of compiler-specific built-in types or extension keywords. If any of these typedefs were implemented using a compiler-specific built-in type (for example a compiler-specific __intXX), that would be an extension \u2014 but no such usage is present in the provided code fragments.\n- The integer return type int32: the code snippet did not show its typedef. If int32 were implemented using a compiler-specific keyword (e.g. __int32) that would be an extension, but no such definition was shown; as presented, it is simply a typedef name and not itself a language extension in the shown code.\n\nTherefore I found no code fragments that require investigation under MISRA C 2023 Rule 1.2. If you can provide any definitions that use compiler-specific keywords (for example typedefs that use __attribute__ or __int128, compiler-specific pragmas, or other non-standard constructs), I can re-evaluate those specific definitions."
}