{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <pthread.h>\n\n/* Probe helper: log control flow and state to /tmp/logs/523.txt. */\nstatic void OS_TaskMatch_Log_State(const void *token_ptr,\n                                   const void *impl_ptr,\n                                   uintptr_t self_val,\n                                   uintptr_t impl_id_val,\n                                   int pthread_equal_result,\n                                   int32_t return_code)\n{\n    FILE *fp = fopen(\"/tmp/logs/523.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Log pointer values, pthread ids (as uintptr_t) and decision outcome. */\n        fprintf(fp,\n                \"OS_TaskMatch_Impl: token=%p, impl=%p, pthread_self=@%\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nFailed to parse the test code.\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_TaskMatch_Impl as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <pthread.h>\n\n/* Probe helper: log control flow and state to /tmp/logs/523.txt. */\nstatic void OS_TaskMatch_Log_State(const void *token_ptr,\n                                   const void *impl_ptr,\n                                   uintptr_t self_val,\n                                   uintptr_t impl_id_val,\n                                   int pthread_equal_result,\n                                   int32_t return_code)\n{\n    FILE *fp = fopen(\"/tmp/logs/523.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Log pointer values, pthread ids (as uintptr_t) and decision outcome. */\n        fprintf(fp,\n                \"OS_TaskMatch_Impl: token=%p, impl=%p, pthread_self=%\" PRIuPTR \n                \", impl_id=%\" PRIuPTR \", pthread_equal=%d, rc=%\" PRId32 \"\\n\",\n                token_ptr,\n                impl_ptr,\n                self_val,\n                impl_id_val,\n                pthread_equal_result,\n                return_code);\n        fclose(fp);\n    }\n}\n",
  "explanation": "The original code snippet was truncated inside the fprintf format string. I completed the function by providing a valid format string that uses the inttypes.h macros (PRIuPTR and PRId32) to print uintptr_t and int32_t values portably, added the missing arguments, and closed the file. No other logic was changed."
}