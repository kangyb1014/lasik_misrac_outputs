{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is declared as a mutable pointer (OS_impl_task_internal_record_t *impl) but in this function it is only used for read access (impl->id is read to compare with pthread_self()). Per MISRA C 2023 Rule 8.13 the pointer should be const-qualified when possible (e.g. const OS_impl_task_internal_record_t *impl).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskMatch_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/523.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskMatch_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskMatch_Impl:\n```c\nint32 OS_TaskMatch_Impl(const OS_object_token_t *token)\n{\n    OS_impl_task_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    if (pthread_equal(pthread_self(), impl->id) == 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskMatch_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <pthread.h>\n\n/*\n * Probe logger for OS_TaskMatch_Impl.\n * Appends a single-line record to /tmp/logs/523.txt describing the\n * token pointer, impl pointer and the result of pthread_equal.\n */\nstatic void OS_TaskMatch_Impl_log(const OS_object_token_t *token, const void *impl_ptr, int pthread_equal_result)\n{\n    FILE *fp = fopen(\"/tmp/logs/523.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Log token pointer, implementation pointer and equality result */\n        fprintf(fp, \"OS_TaskMatch_Impl: token=%p impl=%p pthread_equal=%d\\n\",\n                (const void *)token, impl_ptr, pthread_equal_result);\n        fclose(fp);\n    }\n}\n\nint32 OS_TaskMatch_Impl(const OS_object_token_t *token)\n{\n    OS_impl_task_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    /* Call pthread_equal once and capture the result for logging and decision. */\n    int eq = pthread_equal(pthread_self(), impl->id);\n\n    /* Log relevant state so other agents can reproduce and get evidence. */\n    OS_TaskMatch_Impl_log(token, (const void *)impl, eq);\n\n    if (eq == 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n"
}