{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_OBJECT_TABLE_GET expands to &tbl[...], yielding a pointer to a non-const OS_impl_task_internal_record_t. In OS_TaskMatch_Impl the returned pointer is assigned to OS_impl_task_internal_record_t *impl and only read (impl->id). According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible (i.e. const OS_impl_task_internal_record_t *impl), so returning/using a non-const pointer here violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TaskMatch_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/523.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TaskMatch_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TaskMatch_Impl:\n```c\nint32 OS_TaskMatch_Impl(const OS_object_token_t *token)\n{\n    OS_impl_task_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    if (pthread_equal(pthread_self(), impl->id) == 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_TaskMatch_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <pthread.h>\n\n/* Probe helper: append a log entry describing control flow/state to /tmp/logs/523.txt */\nstatic void OS_TaskMatch_Impl_log_probe(const OS_impl_task_internal_record_t *impl, int pthread_equal_result)\n{\n    FILE *f = fopen(\"/tmp/logs/523.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log the pointer to the impl record and the pthread_equal result.\n       We deliberately avoid making assumptions about the representation of pthread_t\n       to keep this logging portable and not introduce new violations. */\n    fprintf(f, \"OS_TaskMatch_Impl called: impl_ptr=%p, pthread_equal_result=%d\\n\",\n            (void *)impl, pthread_equal_result);\n    fclose(f);\n}\n\nint32 OS_TaskMatch_Impl(const OS_object_token_t *token)\n{\n    OS_impl_task_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_task_table, *token);\n\n    /* Capture the comparison result for logging, then log it. */\n    int eq = pthread_equal(pthread_self(), impl->id);\n    OS_TaskMatch_Impl_log_probe(impl, eq == 0 ? 0 : 1);\n\n    if (eq == 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n"
}