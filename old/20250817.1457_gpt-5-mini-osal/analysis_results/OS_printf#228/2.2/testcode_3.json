{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThis fragment can constitute dead code if the BUGCHECK_VOID macro expands to an evaluative no-op (for example: #define BUGCHECK_VOID(expr) ((void)(expr)) or #define BUGCHECK_VOID(expr) ((void)0) or similar), because the expression would be executed but have no effect and its removal would not change program behaviour. In that case the statement is executed yet redundant and thus violates MISRA C 2023 Rule 2.2. (If, instead, BUGCHECK_VOID expands to a active runtime check that aborts or logs on failure, then it is not dead code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_printf code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1826.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_printf as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_printf:\n```c\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    BUGCHECK_VOID(String != NULL)\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /*\n         * Catch some historical mis-use of the OS_printf() call.\n         *\n         * Typically OS_printf() should NOT be called before OS_API_Init().\n         *\n         * This was never guaranteed to work, particularly on a VxWorks\n         * deployment where the utility task was enabled.\n         *\n         * However, some PSPs do this, particularly those that used POSIX\n         * where it happened to work (because OS_printf just called printf).\n         *\n         * As a workaround, use the OS_DEBUG facility to dump the message,\n         * along with a clue that this API is being used inappropriately.\n         *\n         * If debugging is not enabled, then this message will be silently\n         * discarded.\n         */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_printf code.\n",
  "test_code": "static void OS_printf_probe_log(const char *stage, const char *String, int globalState, int printfEnabled, int consoleId, int actualsz)\n{\n    FILE *f = fopen(\"/tmp/logs/1826.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"[OS_printf_probe] stage=%s, String_ptr=%p\", stage, (const void *)String);\n        if (String != NULL)\n        {\n            /* print a prefix of the string to avoid extremely large logs */\n            fprintf(f, \", String=\\\"%.200s\\\"\", String);\n        }\n        fprintf(f, \", GlobalState=%d, PrintfEnabled=%d, ConsoleId=%d, actualsz=%d\\n\",\n                globalState, printfEnabled, consoleId, actualsz);\n        fclose(f);\n    }\n}\n\nvoid OS_printf(const char *String, ...)\n{\n    va_list va;\n    char    msg_buffer[OS_BUFFER_SIZE];\n    int     actualsz;\n\n    /* Probe: entry */\n    OS_printf_probe_log(\"entry\", String,\n                        (int)OS_SharedGlobalVars.GlobalState,\n                        (int)OS_SharedGlobalVars.PrintfEnabled,\n                        (int)OS_SharedGlobalVars.PrintfConsoleId,\n                        -1);\n\n    /* Probe: before BUGCHECK invocation */\n    OS_printf_probe_log(\"before_bugcheck\", String,\n                        (int)OS_SharedGlobalVars.GlobalState,\n                        (int)OS_SharedGlobalVars.PrintfEnabled,\n                        (int)OS_SharedGlobalVars.PrintfConsoleId,\n                        -1);\n\n    BUGCHECK_VOID(String != NULL)\n\n    /* Probe: after BUGCHECK invocation\n     * If BUGCHECK_VOID aborts/terminates on failure, this log will not appear.\n     * That provides evidence whether BUGCHECK_VOID is an active runtime check or a no-op. */\n    OS_printf_probe_log(\"after_bugcheck\", String,\n                        (int)OS_SharedGlobalVars.GlobalState,\n                        (int)OS_SharedGlobalVars.PrintfEnabled,\n                        (int)OS_SharedGlobalVars.PrintfConsoleId,\n                        -1);\n\n    if (OS_SharedGlobalVars.GlobalState != OS_INIT_MAGIC_NUMBER)\n    {\n        /* Probe: OS not initialized path */\n        OS_printf_probe_log(\"not_initialized\", String,\n                            (int)OS_SharedGlobalVars.GlobalState,\n                            (int)OS_SharedGlobalVars.PrintfEnabled,\n                            (int)OS_SharedGlobalVars.PrintfConsoleId,\n                            -1);\n\n        /* Keep original behavior */\n        OS_DEBUG(\"BUG: OS_printf() called when OSAL not initialized: %s\", String);\n    }\n    else if (OS_SharedGlobalVars.PrintfEnabled)\n    {\n        /* Probe: about to format */\n        OS_printf_probe_log(\"format_start\", String,\n                            (int)OS_SharedGlobalVars.GlobalState,\n                            (int)OS_SharedGlobalVars.PrintfEnabled,\n                            (int)OS_SharedGlobalVars.PrintfConsoleId,\n                            -1);\n\n        /* Format and determine the size of string to write */\n        va_start(va, String);\n        actualsz = vsnprintf(msg_buffer, sizeof(msg_buffer), String, va);\n        va_end(va);\n\n        /* Probe: formatting done (report actualsz) */\n        OS_printf_probe_log(\"format_done\", String,\n                            (int)OS_SharedGlobalVars.GlobalState,\n                            (int)OS_SharedGlobalVars.PrintfEnabled,\n                            (int)OS_SharedGlobalVars.PrintfConsoleId,\n                            actualsz);\n\n        if (actualsz < 0)\n        {\n            /* unlikely: vsnprintf failed */\n            actualsz = 0;\n        }\n        else if (actualsz >= OS_BUFFER_SIZE)\n        {\n            /* truncate */\n            actualsz = OS_BUFFER_SIZE - 1;\n        }\n\n        msg_buffer[actualsz] = 0;\n\n        /* Probe: about to write to console (include truncated message prefix) */\n        OS_printf_probe_log(\"console_write\", msg_buffer,\n                            (int)OS_SharedGlobalVars.GlobalState,\n                            (int)OS_SharedGlobalVars.PrintfEnabled,\n                            (int)OS_SharedGlobalVars.PrintfConsoleId,\n                            actualsz);\n\n        OS_ConsoleWrite(OS_SharedGlobalVars.PrintfConsoleId, msg_buffer);\n\n        /* Probe: after console write */\n        OS_printf_probe_log(\"console_written\", msg_buffer,\n                            (int)OS_SharedGlobalVars.GlobalState,\n                            (int)OS_SharedGlobalVars.PrintfEnabled,\n                            (int)OS_SharedGlobalVars.PrintfConsoleId,\n                            actualsz);\n    }\n}\n"
}