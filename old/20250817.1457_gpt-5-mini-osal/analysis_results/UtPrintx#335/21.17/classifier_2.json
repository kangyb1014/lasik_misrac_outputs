{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UtPrintx:\n```c\nvoid UtPrintx(const void *Memory, uint32 Length)\n{\n    uint32       i;\n    uint32       j;\n    const uint8 *Byte_ptr = Memory;\n    char         OutputLine[80];\n    char *       OutPtr;\n\n    i = 0;\n    while (i < Length)\n    {\n        snprintf(OutputLine, sizeof(OutputLine), \"%16lx: \", (unsigned long)&Byte_ptr[i]);\n        OutPtr = OutputLine;\n        OutPtr += strlen(OutputLine);\n        for (j = 0; j < 16 && i < Length; j++, i++)\n        {\n            sprintf(OutPtr, \"%02X  \", Byte_ptr[i]);\n            OutPtr += 3;\n        }\n\n        UT_BSP_DoText(UTASSERT_CASETYPE_INFO, OutputLine);\n    }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function UtPrintx:\nsize_t size\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nsprintf(OutPtr, \"%02X  \", Byte_ptr[i]);\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "Yes. OutPtr points into OutputLine (80 bytes). Each sprintf(OutPtr, \"%02X  \", Byte_ptr[i]) will write the formatted bytes plus a terminating NUL (for values < 256 the format produces 4 printable chars + NUL = 5 bytes). The code advances OutPtr by only 3 each iteration, and there is no check that the remaining space in OutputLine is sufficient. For example, if snprintf produced a 20\u2011byte prefix and the loop runs 16 times, sprintf would attempt to write 16*5 = 80 bytes starting at index 20 (indices 20..99), which overruns OutputLine (max index 79). Therefore the use of the string/formatting function here can result in accesses beyond the bounds of the object referenced by OutPtr/OutputLine and violates the rule."
}