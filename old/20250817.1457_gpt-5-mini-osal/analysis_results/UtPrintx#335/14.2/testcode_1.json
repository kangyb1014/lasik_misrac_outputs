{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop 'for (j = 0; j < 16 && i < Length; j++, i++)' violates Rule 14.2. The first clause (j = 0) is acceptable, but the third clause modifies two objects (j and i) whereas the third clause shall modify only the loop counter and there shall be only one loop counter. Additionally, the second clause uses i (j < 16 && i < Length) even though i is modified by the loop (in the third clause), which is not permitted.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtPrintx code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2684.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtPrintx as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtPrintx:\n```c\nvoid UtPrintx(const void *Memory, uint32 Length)\n{\n    uint32       i;\n    uint32       j;\n    const uint8 *Byte_ptr = Memory;\n    char         OutputLine[80];\n    char *       OutPtr;\n\n    i = 0;\n    while (i < Length)\n    {\n        snprintf(OutputLine, sizeof(OutputLine), \"%16lx: \", (unsigned long)&Byte_ptr[i]);\n        OutPtr = OutputLine;\n        OutPtr += strlen(OutputLine);\n        for (j = 0; j < 16 && i < Length; j++, i++)\n        {\n            sprintf(OutPtr, \"%02X  \", Byte_ptr[i]);\n            OutPtr += 3;\n        }\n\n        UT_BSP_DoText(UTASSERT_CASETYPE_INFO, OutputLine);\n    }\n}\n```\n</target_code>\nPlease provide the modified UtPrintx code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\nstatic void UtLogf(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2684.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    fputc('\\n', fp);\n    va_end(ap);\n\n    fclose(fp);\n}\n\nvoid UtPrintx(const void *Memory, uint32 Length)\n{\n    uint32       i;\n    uint32       j;\n    const uint8 *Byte_ptr = Memory;\n    char         OutputLine[80];\n    char *       OutPtr;\n\n    /* Log entry */\n    UtLogf(\"UtPrintx: entry Length=%lu\", (unsigned long)Length);\n\n    i = 0;\n    while (i < Length)\n    {\n        snprintf(OutputLine, sizeof(OutputLine), \"%16lx: \", (unsigned long)&Byte_ptr[i]);\n        OutPtr = OutputLine;\n        OutPtr += strlen(OutputLine);\n\n        /* Log for-loop initialization state */\n        UtLogf(\"UtPrintx: while-loop start i=%lu Length=%lu\", (unsigned long)i, (unsigned long)Length);\n\n        for (j = 0; j < 16 && i < Length; j++, i++)\n        {\n            /* Log entering for-loop body: show the condition values and current indices */\n            UtLogf(\"UtPrintx: for-body enter i=%lu j=%lu cond_j=(j<16)=%s cond_i=(i<Length)=%s byte=0x%02X\",\n                    (unsigned long)i,\n                    (unsigned long)j,\n                    (j < 16) ? \"true\" : \"false\",\n                    (i < Length) ? \"true\" : \"false\",\n                    (unsigned int)Byte_ptr[i]);\n\n            sprintf(OutPtr, \"%02X  \", Byte_ptr[i]);\n            OutPtr += 3;\n\n            /* Log state just before the for-loop's third-clause increment occurs (shows values that will be incremented) */\n            UtLogf(\"UtPrintx: for-body before increment i=%lu j=%lu (these will be modified by third clause j++, i++)\",\n                    (unsigned long)i, (unsigned long)j);\n        }\n\n        /* Determine why the for-loop exited and log final values */\n        {\n            int exited_due_to_j = (j >= 16) ? 1 : 0;\n            int exited_due_to_i = (i >= Length) ? 1 : 0;\n            UtLogf(\"UtPrintx: for-exit i=%lu j=%lu exited_due_to_j=%d exited_due_to_i=%d\",\n                    (unsigned long)i, (unsigned long)j, exited_due_to_j, exited_due_to_i);\n        }\n\n        UT_BSP_DoText(UTASSERT_CASETYPE_INFO, OutputLine);\n\n        /* Log after output for this line */\n        UtLogf(\"UtPrintx: after UT_BSP_DoText i=%lu j=%lu\", (unsigned long)i, (unsigned long)j);\n    }\n\n    UtLogf(\"UtPrintx: exit i=%lu Length=%lu\", (unsigned long)i, (unsigned long)Length);\n}\n"
}