{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_CHECK_APINAME performs a null-terminated string-length/validation using <string.h> functions (for example strlen) then a call with timebase_name pointing to a non\u2013null-terminated or undersized buffer will cause the string function to read past the object bounds. Example: calling OS_TimeBaseGetIdByName(timer_id, buf) where buf is a char array not terminated with '\\0' (or shorter than expected) would make strlen invoked by OS_CHECK_APINAME scan beyond buf and thus violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2143.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetIdByName:\n```c\nint32 OS_TimeBaseGetIdByName(osal_id_t *timer_id, const char *timebase_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, timer_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Helper logging probe - appends diagnostic lines to /tmp/logs/2143.txt */\nstatic void os2143_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2143.txt\", \"a\");\n    if (!f)\n    {\n        /* If the log file cannot be opened, silently continue to avoid changing behavior */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_TimeBaseGetIdByName(osal_id_t *timer_id, const char *timebase_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    os2143_log(\"ENTER OS_TimeBaseGetIdByName: timer_id=%p timebase_name=%p\", (void *)timer_id, (const void *)timebase_name);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    os2143_log(\"Passed OS_CHECK_POINTER(timer_id)\");\n\n    os2143_log(\"About to perform OS_CHECK_APINAME(timebase_name) - NOTE: this macro may call string.h functions (e.g., strlen)\");\n    OS_CHECK_APINAME(timebase_name);\n    /* If OS_CHECK_APINAME fails via a return or longjmp, the following log will not appear. */\n    os2143_log(\"Returned from OS_CHECK_APINAME(timebase_name)\");\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    os2143_log(\"OS_TaskGetId_Impl() -> objtype=%d\", (int)objtype);\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        os2143_log(\"Context error: object type is OS_TIMEBASE -> returning OS_ERR_INCORRECT_OBJ_STATE\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    os2143_log(\"Calling OS_ObjectIdFindByName with timebase_name=%p\", (const void *)timebase_name);\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, timer_id);\n    os2143_log(\"OS_ObjectIdFindByName returned %ld\", (long)return_code);\n\n    os2143_log(\"EXIT OS_TimeBaseGetIdByName: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}