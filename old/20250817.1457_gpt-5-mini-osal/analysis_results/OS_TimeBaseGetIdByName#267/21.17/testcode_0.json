{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes timebase_name into OS_ObjectIdFindByName which performs ARGCHECK/LENGTHCHECK and then name-based lookup. If ARGCHECK/LENGTHCHECK (or the subsequent name-match routine) use unbounded string.h functions such as strlen/strcmp/strcpy on the provided pointer, a non\u2013NUL-terminated or undersized buffer will be read/written out of bounds. Example: caller provides char buf[8] filled with 8 non\u2011NUL bytes and passes buf as timebase_name; if LENGTHCHECK is implemented as strlen(name) > OS_MAX_API_NAME (or the name-comparison uses strcmp), strlen/strcmp will read past buf\u2019s bounds, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2143.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetIdByName:\n```c\nint32 OS_TimeBaseGetIdByName(osal_id_t *timer_id, const char *timebase_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, timer_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/*\n * Probe helper to log control flow and minimal, safe state information.\n * This deliberately avoids reading beyond the first byte of the name to\n * prevent introducing new out-of-bounds accesses.\n */\nstatic void OS_TimeBaseGetIdByName_LogProbe(const osal_id_t *timer_id, const char *timebase_name, osal_objtype_t objtype, int32 return_code, const char *stage)\n{\n    FILE *f = fopen(\"/tmp/logs/2143.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"Stage: %s\\n\", stage);\n    fprintf(f, \"  timer_id ptr: %p\\n\", (const void *)timer_id);\n    fprintf(f, \"  timebase_name ptr: %p\\n\", (const void *)timebase_name);\n\n    if (timebase_name == NULL)\n    {\n        fprintf(f, \"  timebase_name: NULL\\n\");\n    }\n    else\n    {\n        /* Safely examine only the first byte to avoid reading past the caller's buffer. */\n        unsigned char first = (unsigned char)timebase_name[0];\n        fprintf(f, \"  timebase_name[0] = 0x%02x (%s)\\n\", first, (first == 0) ? \"NUL\" : \"non-NUL\");\n    }\n\n    fprintf(f, \"  objtype (if known): %d\\n\", (int)objtype);\n    fprintf(f, \"  return_code (if known): %d\\n\", (int)return_code);\n    fprintf(f, \"---\\n\");\n    fclose(f);\n}\n\nint32 OS_TimeBaseGetIdByName(osal_id_t *timer_id, const char *timebase_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Entry probe */\n    OS_TimeBaseGetIdByName_LogProbe(timer_id, timebase_name, (osal_objtype_t)-1, -1, \"entry\");\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        /* Log incorrect object state and return */\n        OS_TimeBaseGetIdByName_LogProbe(timer_id, timebase_name, objtype, OS_ERR_INCORRECT_OBJ_STATE, \"incorrect_obj_state\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /* Log before calling the name lookup routine */\n    OS_TimeBaseGetIdByName_LogProbe(timer_id, timebase_name, objtype, -1, \"before_find_by_name\");\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, timer_id);\n\n    /* Log after calling the name lookup routine, including the returned code. */\n    OS_TimeBaseGetIdByName_LogProbe(timer_id, timebase_name, objtype, return_code, \"after_find_by_name\");\n\n    return return_code;\n}\n"
}