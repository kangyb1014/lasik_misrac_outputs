{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: if LENGTHCHECK(name, OS_MAX_API_NAME, ...) expands to use an unbounded string function such as strlen(name) (e.g. if implemented as if (strlen(name) >= OS_MAX_API_NAME) return error;), then a non\u2011null\u2011terminated 'name' (or a name whose storage is shorter than the scanned bytes) will cause strlen to read past the bounds of the object and thus violate MISRA C 2023 Rule 21.17. (If LENGTHCHECK instead uses a bounded function such as strnlen(name, OS_MAX_API_NAME) or otherwise guarantees the scan cannot exceed the object bounds, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBaseGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2143.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBaseGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBaseGetIdByName:\n```c\nint32 OS_TimeBaseGetIdByName(osal_id_t *timer_id, const char *timebase_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, timer_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBaseGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append a log line to /tmp/logs/2143.txt. Does not inspect the contents\n * of timebase_name (only prints its pointer) to avoid introducing any unbounded string\n * accesses. This preserves original program logic while providing evidence about\n * where execution reaches. */\nstatic void OS_TimeBase_LogProbe(const char *stage, const void *timer_id_ptr, const void *name_ptr, long return_code, int objtype)\n{\n    FILE *f = fopen(\"/tmp/logs/2143.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, do not change program behavior. */\n        return;\n    }\n\n    /* timestamp-ish simple prefix could be added here, but keep minimal to avoid\n     * extra dependencies. */\n    fprintf(f, \"[OS_TimeBaseGetIdByName] %s\\n\", stage);\n    fprintf(f, \"  timer_id ptr = %p\\n\", timer_id_ptr);\n    fprintf(f, \"  timebase_name ptr = %p\\n\", name_ptr);\n    fprintf(f, \"  objtype = %d, tentative_return = %ld\\n\", objtype, return_code);\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_TimeBaseGetIdByName(osal_id_t *timer_id, const char *timebase_name)\n{\n    int32          return_code;\n    osal_objtype_t objtype;\n\n    /* Log entry point before performing any parameter checks. This is important\n     * so that if a parameter-checking macro (e.g. LENGTHCHECK using an unbounded\n     * strlen) causes a fault, the log will show that the function was entered\n     * and what pointer values were passed. The logging intentionally does NOT\n     * dereference or scan the name string to avoid introducing additional\n     * out-of-bounds accesses. */\n    OS_TimeBase_LogProbe(\"enter (before checks)\", (const void *)timer_id, (const void *)timebase_name, -1, 0);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timebase_name);\n\n    /* Log after parameter checks to indicate they passed. If this log entry is\n     * missing but the prior one is present, it suggests a problem inside the\n     * parameter checking macros (e.g. an unbounded scan). */\n    OS_TimeBase_LogProbe(\"after parameter checks\", (const void *)timer_id, (const void *)timebase_name, -1, 0);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n\n    /* Log the computed object type so that callers can see the control flow. */\n    OS_TimeBase_LogProbe(\"after context check (objtype computed)\", (const void *)timer_id, (const void *)timebase_name, -1, (int)objtype);\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        OS_TimeBase_LogProbe(\"early return: incorrect obj state\", (const void *)timer_id, (const void *)timebase_name, (long)OS_ERR_INCORRECT_OBJ_STATE, (int)objtype);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    return_code = OS_ObjectIdFindByName(OS_OBJECT_TYPE_OS_TIMEBASE, timebase_name, timer_id);\n\n    /* Log the result from the name lookup just before returning. */\n    OS_TimeBase_LogProbe(\"before return (after find by name)\", (const void *)timer_id, (const void *)timebase_name, (long)return_code, (int)objtype);\n\n    return return_code;\n}\n"
}