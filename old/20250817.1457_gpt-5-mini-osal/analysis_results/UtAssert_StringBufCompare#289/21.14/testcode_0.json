{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe memcmp call Compare = memcmp(String1, String2, FormatLen1); is used to compare string content when FormatLen1/FormatLen2 were derived from a null terminator. This occurs when String1Max or String2Max equals UTASSERT_STRINGBUF_NULL_TERM (leading to strlen()) or when memchr found '\\0' within the buffer. In those cases memcmp is effectively being used to compare null-terminated strings, which violates MISRA C 2023 Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_StringBufCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2318.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_StringBufCompare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_StringBufCompare:\n```c\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = FormatLen1 - FormatLen2;\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: \\'%s\\' == \\'%s\\'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_StringBufCompare code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n/* Probe logger: append readable state information to /tmp/logs/2318.txt */\nstatic void UtAssert_LogState(const char *stage, const char *file, unsigned long line,\n                              const void *ptr1, size_t ptr1_max, const char *end1_src, size_t format1,\n                              const void *ptr2, size_t ptr2_max, const char *end2_src, size_t format2,\n                              const char *memcmp_info, size_t memcmp_len, int compare)\n{\n    FILE *fp = fopen(\"/tmp/logs/2318.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    fprintf(fp, \"--- UtAssert_StringBufCompare LOG ---\\n\");\n    fprintf(fp, \"Stage: %s\\n\", stage);\n    fprintf(fp, \"Source: %s:%lu\\n\", (file != NULL) ? file : \"(null)\", line);\n    fprintf(fp, \"String1: ptr=%p max=%zu end_src=%s format_len=%zu\\n\", ptr1, ptr1_max,\n            (end1_src != NULL) ? end1_src : \"(null)\", format1);\n    fprintf(fp, \"String2: ptr=%p max=%zu end_src=%s format_len=%zu\\n\", ptr2, ptr2_max,\n            (end2_src != NULL) ? end2_src : \"(null)\", format2);\n    fprintf(fp, \"memcmp_info: %s memcmp_len=%zu compare(before_len_adjust)=%d\\n\", (memcmp_info != NULL) ? memcmp_info : \"(none)\", memcmp_len, compare);\n    fprintf(fp, \"------------------------------------\\n\\n\");\n\n    fclose(fp);\n}\n\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    /* Log state after computing EndPtr1 / FormatLen1 */\n    UtAssert_LogState(\"after_endptr1\", File, (unsigned long)Line,\n                      (const void *)String1, String1Max,\n                      (String1 == NULL) ? \"String1==NULL\" :\n                          (String1Max == UTASSERT_STRINGBUF_NULL_TERM) ? \"strlen\" :\n                          (EndPtr1 != NULL) ? \"memchr\" : \"no-terminator\",\n                      FormatLen1,\n                      (const void *)String2, String2Max, \"(pending)\", 0,\n                      \"(pending)\", 0, 0);\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    /* Log state after computing EndPtr2 / FormatLen2 */\n    UtAssert_LogState(\"after_endptr2\", File, (unsigned long)Line,\n                      (const void *)String1, String1Max,\n                      (String1 == NULL) ? \"String1==NULL\" :\n                          (String1Max == UTASSERT_STRINGBUF_NULL_TERM) ? \"strlen\" :\n                          (EndPtr1 != NULL) ? \"memchr\" : \"no-terminator\",\n                      FormatLen1,\n                      (const void *)String2, String2Max,\n                      (String2 == NULL) ? \"String2==NULL\" :\n                          (String2Max == UTASSERT_STRINGBUF_NULL_TERM) ? \"strlen\" :\n                          (EndPtr2 != NULL) ? \"memchr\" : \"no-terminator\",\n                      FormatLen2,\n                      \"(pending)\", 0, 0);\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n\n        /* Log that no memcmp will be used due to both lengths being zero */\n        UtAssert_LogState(\"cmp_both_empty\", File, (unsigned long)Line,\n                          (const void *)String1, String1Max,\n                          (String1 == NULL) ? \"String1==NULL\" :\n                              (String1Max == UTASSERT_STRINGBUF_NULL_TERM) ? \"strlen\" :\n                              (EndPtr1 != NULL) ? \"memchr\" : \"no-terminator\",\n                          FormatLen1,\n                          (const void *)String2, String2Max,\n                          (String2 == NULL) ? \"String2==NULL\" :\n                              (String2Max == UTASSERT_STRINGBUF_NULL_TERM) ? \"strlen\" :\n                              (EndPtr2 != NULL) ? \"memchr\" : \"no-terminator\",\n                          FormatLen2,\n                          \"no_memcmp_both_zero\", 0, Compare);\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        size_t memcmp_len;\n        const char *memcmp_reason = NULL;\n        if (FormatLen1 < FormatLen2)\n        {\n            memcmp_len = FormatLen1;\n            memcmp_reason = \"use_formatlen1\";\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            memcmp_len = FormatLen2;\n            memcmp_reason = \"use_formatlen2\";\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* Log memcmp invocation details, including whether either length was derived from a null-terminator */\n        UtAssert_LogState(\"before_memcmp\", File, (unsigned long)Line,\n                          (const void *)String1, String1Max,\n                          (String1 == NULL) ? \"String1==NULL\" :\n                              (String1Max == UTASSERT_STRINGBUF_NULL_TERM) ? \"strlen\" :\n                              (EndPtr1 != NULL) ? \"memchr\" : \"no-terminator\",\n                          FormatLen1,\n                          (const void *)String2, String2Max,\n                          (String2 == NULL) ? \"String2==NULL\" :\n                              (String2Max == UTASSERT_STRINGBUF_NULL_TERM) ? \"strlen\" :\n                              (EndPtr2 != NULL) ? \"memchr\" : \"no-terminator\",\n                          FormatLen2,\n                          memcmp_reason, memcmp_len, Compare);\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = (int)((FormatLen1 > FormatLen2) ? 1 : (FormatLen1 < FormatLen2) ? -1 : 0);\n\n            /* Log adjustment due to differing lengths */\n            UtAssert_LogState(\"after_length_adjust\", File, (unsigned long)Line,\n                              (const void *)String1, String1Max,\n                              (String1 == NULL) ? \"String1==NULL\" :\n                                  (String1Max == UTASSERT_STRINGBUF_NULL_TERM) ? \"strlen\" :\n                                  (EndPtr1 != NULL) ? \"memchr\" : \"no-terminator\",\n                              FormatLen1,\n                              (const void *)String2, String2Max,\n                              (String2 == NULL) ? \"String2==NULL\" :\n                                  (String2Max == UTASSERT_STRINGBUF_NULL_TERM) ? \"strlen\" :\n                                  (EndPtr2 != NULL) ? \"memchr\" : \"no-terminator\",\n                              FormatLen2,\n                              \"adjusted_by_length\", memcmp_len, Compare);\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Log the final compare and result before scrubbing/return */\n    UtAssert_LogState(\"final_result\", File, (unsigned long)Line,\n                      (const void *)String1, String1Max,\n                      (String1 == NULL) ? \"String1==NULL\" :\n                          (String1Max == UTASSERT_STRINGBUF_NULL_TERM) ? \"strlen\" :\n                          (EndPtr1 != NULL) ? \"memchr\" : \"no-terminator\",\n                      FormatLen1,\n                      (const void *)String2, String2Max,\n                      (String2 == NULL) ? \"String2==NULL\" :\n                          (String2Max == UTASSERT_STRINGBUF_NULL_TERM) ? \"strlen\" :\n                          (EndPtr2 != NULL) ? \"memchr\" : \"no-terminator\",\n                      FormatLen2,\n                      \"final\", 0, Compare);\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: '%s' == '%s'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n"
}