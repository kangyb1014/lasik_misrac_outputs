{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf String2 points to a buffer smaller than String2Max (for example: char buf[10]; String2 = buf; String2Max = 20) and there is no '\\0' within the actual buffer, memchr(String2, 0, String2Max) will read past the allocated bounds and thus invoke undefined behavior. The code does not enforce that String2Max is no greater than the actual object size, so this call can access beyond the object bounds.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_StringBufCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2319.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_StringBufCompare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_StringBufCompare:\n```c\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = FormatLen1 - FormatLen2;\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: \\'%s\\' == \\'%s\\'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_StringBufCompare code.\n",
  "test_code": "bool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    /* Small logging helper to record relevant state to /tmp/logs/2319.txt. This helper only\n     * prints pointer values, sizes, branch choices, and boolean outcomes. It purposefully\n     * avoids printing string contents to prevent further out-of-bounds reads. */\n    static void UtAssert_LogState(const char *stage, const char *s1, size_t s1max, const char *s2, size_t s2max,\n                                  const char *end1_desc, const void *end1_ptr, size_t fmt1,\n                                  const char *end2_desc, const void *end2_ptr, size_t fmt2,\n                                  int compare, bool result, const char *file, unsigned line)\n    {\n        FILE *f = fopen(\"/tmp/logs/2319.txt\", \"a\");\n        if (f == NULL)\n        {\n            return; /* best effort logging only */\n        }\n\n        fprintf(f, \"--- UtAssert_StringBufCompare log: %s\\n\", (stage != NULL) ? stage : \"(null)\");\n        fprintf(f, \"  File: %s, Line: %u\\n\", (file != NULL) ? file : \"(null)\", line);\n        fprintf(f, \"  String1 ptr: %p, String1Max: %zu\\n\", (const void *)s1, s1max);\n        fprintf(f, \"  String2 ptr: %p, String2Max: %zu\\n\", (const void *)s2, s2max);\n        if (end1_ptr != NULL)\n        {\n            fprintf(f, \"  EndPtr1 (%s): %p, FormatLen1: %zu\\n\", (end1_desc != NULL) ? end1_desc : \"end1\", end1_ptr, fmt1);\n        }\n        else\n        {\n            fprintf(f, \"  EndPtr1 (%s): NULL, FormatLen1: %zu\\n\", (end1_desc != NULL) ? end1_desc : \"end1\", fmt1);\n        }\n\n        if (end2_ptr != NULL)\n        {\n            fprintf(f, \"  EndPtr2 (%s): %p, FormatLen2: %zu\\n\", (end2_desc != NULL) ? end2_desc : \"end2\", end2_ptr, fmt2);\n        }\n        else\n        {\n            fprintf(f, \"  EndPtr2 (%s): NULL, FormatLen2: %zu\\n\", (end2_desc != NULL) ? end2_desc : \"end2\", fmt2);\n        }\n\n        fprintf(f, \"  Compare intermediate value: %d, Result: %s\\n\", compare, result ? \"true\" : \"false\");\n        fprintf(f, \"--- end log for %s\\n\\n\", (stage != NULL) ? stage : \"(null)\");\n        fclose(f);\n    }\n\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Initial logging: entry parameters */\n    UtAssert_LogState(\"entry\", String1, String1Max, String2, String2Max, NULL, NULL, 0, NULL, NULL, 0, 0, false, File,\n                      (unsigned)Line);\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n        UtAssert_LogState(\"string1_null\", String1, String1Max, String2, String2Max, \"string1_null\", EndPtr1, 0, NULL,\n                          NULL, 0, 0, false, File, (unsigned)Line);\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n        FormatLen1 = EndPtr1 - String1;\n        UtAssert_LogState(\"string1_strlen_used\", String1, String1Max, String2, String2Max, \"strlen_end\", EndPtr1,\n                          FormatLen1, NULL, NULL, 0, 0, false, File, (unsigned)Line);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n            UtAssert_LogState(\"string1_memchr_found_null\", String1, String1Max, String2, String2Max, \"memchr_null\",\n                              EndPtr1, FormatLen1, NULL, NULL, 0, 0, false, File, (unsigned)Line);\n        }\n        else\n        {\n            /* memchr returned NULL: no null found within String1Max bytes */\n            FormatLen1 = String1Max;\n            UtAssert_LogState(\"string1_memchr_no_null\", String1, String1Max, String2, String2Max, \"memchr_null\",\n                              EndPtr1, FormatLen1, NULL, NULL, 0, 0, false, File, (unsigned)Line);\n        }\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n        UtAssert_LogState(\"string2_null\", String1, String1Max, String2, String2Max, NULL, NULL, FormatLen1, \"string2_null\",\n                          EndPtr2, 0, 0, false, File, (unsigned)Line);\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n        FormatLen2 = EndPtr2 - String2;\n        UtAssert_LogState(\"string2_strlen_used\", String1, String1Max, String2, String2Max, NULL, NULL, FormatLen1,\n                          \"strlen_end\", EndPtr2, FormatLen2, 0, false, File, (unsigned)Line);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n            UtAssert_LogState(\"string2_memchr_found_null\", String1, String1Max, String2, String2Max, NULL, NULL,\n                              FormatLen1, \"memchr_null\", EndPtr2, FormatLen2, 0, false, File, (unsigned)Line);\n        }\n        else\n        {\n            /* memchr returned NULL: no null found within String2Max bytes. This is the scenario\n             * that can read past the actual object if String2Max > actual buffer size. Log this.\n             */\n            FormatLen2 = String2Max;\n            UtAssert_LogState(\"string2_memchr_no_null_possible_oob\", String1, String1Max, String2, String2Max,\n                              NULL, NULL, FormatLen1, \"memchr_null\", EndPtr2, FormatLen2, 0, false, File,\n                              (unsigned)Line);\n        }\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            Compare = memcmp(String1, String2, FormatLen1);\n            UtAssert_LogState(\"memcmp_used_len1\", String1, String1Max, String2, String2Max, NULL, NULL, FormatLen1,\n                              NULL, NULL, FormatLen2, Compare, false, File, (unsigned)Line);\n        }\n        else\n        {\n            Compare = memcmp(String1, String2, FormatLen2);\n            UtAssert_LogState(\"memcmp_used_len2\", String1, String1Max, String2, String2Max, NULL, NULL, FormatLen1,\n                              NULL, NULL, FormatLen2, Compare, false, File, (unsigned)Line);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = (int)(FormatLen1 - FormatLen2);\n            UtAssert_LogState(\"compare_length_fallback\", String1, String1Max, String2, String2Max, NULL, NULL,\n                              FormatLen1, NULL, NULL, FormatLen2, Compare, false, File, (unsigned)Line);\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Log result before scrub/return */\n    UtAssert_LogState(\"pre_scrub\", String1, String1Max, String2, String2Max, NULL, EndPtr1, FormatLen1, NULL, EndPtr2,\n                      FormatLen2, Compare, Result, File, (unsigned)Line);\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n            UtAssert_LogState(\"found_newline_1\", String1, String1Max, String2, String2Max, \"newline1\", EndPtr1,\n                              FormatLen1, NULL, NULL, FormatLen2, Compare, Result, File, (unsigned)Line);\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n            UtAssert_LogState(\"found_newline_2\", String1, String1Max, String2, String2Max, NULL, NULL, FormatLen1,\n                              \"newline2\", EndPtr2, FormatLen2, Compare, Result, File, (unsigned)Line);\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    UtAssert_LogState(\"final\", String1, String1Max, String2, String2Max, NULL, EndPtr1, FormatLen1, NULL, EndPtr2,\n                      FormatLen2, Compare, Result, File, (unsigned)Line);\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: '%s' == '%s'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n"
}