{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. For example, if String1 is non-NULL and no NUL is found within String1Max bytes (so FormatLen1 gets set to String1Max), and the caller provides String1Max > 255 (ScrubbedString1 has size 256), then memcpy(ScrubbedString1, String1, FormatLen1) will copy more bytes than ScrubbedString1 can hold (and may also read beyond the actual allocation of String1). Another concrete problematic case: String1 == NULL with String1Max > 0 \u21d2 FormatLen1 > 0 and memcpy is called with a NULL source pointer. In these cases the memcpy can access objects out of bounds, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_StringBufCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2319.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_StringBufCompare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_StringBufCompare:\n```c\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = FormatLen1 - FormatLen2;\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: \\'%s\\' == \\'%s\\'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_StringBufCompare code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe logging helper - append-only logging to /tmp/logs/2319.txt */\nstatic void UtAssert_LogProbe(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2319.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Log entry with input state */\n    UtAssert_LogProbe(\"Enter UtAssert_StringBufCompare: String1=%p, String1Max=%zu, String2=%p, String2Max=%zu, File=%p, Line=%u\",\n                      (void *)String1, String1Max, (void *)String2, String2Max, (void *)File, (unsigned)Line);\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n        UtAssert_LogProbe(\"String1 is NULL -> EndPtr1=NULL\");\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n        UtAssert_LogProbe(\"String1Max indicates NULL_TERM -> used strlen; EndPtr1=%p; computed FormatLen1 tentative=%zu\",\n                          (void *)EndPtr1, (size_t)(EndPtr1 - String1));\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n        UtAssert_LogProbe(\"Called memchr on String1: result EndPtr1=%p (may be NULL) with search len=%zu\", (void *)EndPtr1, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n    UtAssert_LogProbe(\"After locating end: FormatLen1=%zu\", FormatLen1);\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n        UtAssert_LogProbe(\"String2 is NULL -> EndPtr2=NULL\");\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n        UtAssert_LogProbe(\"String2Max indicates NULL_TERM -> used strlen; EndPtr2=%p; computed FormatLen2 tentative=%zu\",\n                          (void *)EndPtr2, (size_t)(EndPtr2 - String2));\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n        UtAssert_LogProbe(\"Called memchr on String2: result EndPtr2=%p (may be NULL) with search len=%zu\", (void *)EndPtr2,\n                          String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n    UtAssert_LogProbe(\"After locating end: FormatLen2=%zu\", FormatLen2);\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        UtAssert_LogProbe(\"Preparing to memcmp with lengths FormatLen1=%zu, FormatLen2=%zu\", FormatLen1, FormatLen2);\n        if (FormatLen1 < FormatLen2)\n        {\n            Compare = memcmp(String1, String2, FormatLen1);\n            UtAssert_LogProbe(\"memcmp called with len=%zu (FormatLen1)\", FormatLen1);\n        }\n        else\n        {\n            Compare = memcmp(String1, String2, FormatLen2);\n            UtAssert_LogProbe(\"memcmp called with len=%zu (FormatLen2)\", FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = (int)(FormatLen1 - FormatLen2);\n            UtAssert_LogProbe(\"Content equal for compared prefix; adjusted Compare = FormatLen1 - FormatLen2 = %d\",\n                              Compare);\n        }\n        else\n        {\n            UtAssert_LogProbe(\"memcmp result Compare=%d\", Compare);\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        /* Log the fact that we are about to call memchr on String1 with FormatLen1 */\n        UtAssert_LogProbe(\"About to call memchr(String1, '\\\\n', %zu) with String1=%p\", FormatLen1, (void *)String1);\n        if (String1 == NULL)\n        {\n            UtAssert_LogProbe(\"Warning: String1 is NULL while FormatLen1=%zu -> subsequent memchr/memcpy will be invoked with NULL source\", FormatLen1);\n        }\n        if (FormatLen1 >= sizeof(ScrubbedString1))\n        {\n            UtAssert_LogProbe(\"Warning: FormatLen1=%zu >= ScrubbedString1 size=%zu -> potential overflow on memcpy or null-termination write\",\n                              FormatLen1, sizeof(ScrubbedString1));\n        }\n\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n            UtAssert_LogProbe(\"Found newline in String1 at %p -> new FormatLen1=%zu\", (void *)EndPtr1, FormatLen1);\n        }\n        else\n        {\n            UtAssert_LogProbe(\"No newline found in String1 within first %zu bytes\", FormatLen1);\n        }\n\n        UtAssert_LogProbe(\"About to memcpy ScrubbedString1 from String1: len=%zu, String1=%p\", FormatLen1, (void *)String1);\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n    UtAssert_LogProbe(\"ScrubbedString1 finalized (len=%zu), buffer cap=%zu\", FormatLen1, sizeof(ScrubbedString1));\n\n    if (FormatLen2 > 0)\n    {\n        UtAssert_LogProbe(\"About to call memchr(String2, '\\\\n', %zu) with String2=%p\", FormatLen2, (void *)String2);\n        if (String2 == NULL)\n        {\n            UtAssert_LogProbe(\"Warning: String2 is NULL while FormatLen2=%zu -> subsequent memchr/memcpy will be invoked with NULL source\", FormatLen2);\n        }\n        if (FormatLen2 >= sizeof(ScrubbedString2))\n        {\n            UtAssert_LogProbe(\"Warning: FormatLen2=%zu >= ScrubbedString2 size=%zu -> potential overflow on memcpy or null-termination write\",\n                              FormatLen2, sizeof(ScrubbedString2));\n        }\n\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n            UtAssert_LogProbe(\"Found newline in String2 at %p -> new FormatLen2=%zu\", (void *)EndPtr2, FormatLen2);\n        }\n        else\n        {\n            UtAssert_LogProbe(\"No newline found in String2 within first %zu bytes\", FormatLen2);\n        }\n\n        UtAssert_LogProbe(\"About to memcpy ScrubbedString2 from String2: len=%zu, String2=%p\", FormatLen2, (void *)String2);\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n    UtAssert_LogProbe(\"ScrubbedString2 finalized (len=%zu), buffer cap=%zu\", FormatLen2, sizeof(ScrubbedString2));\n\n    UtAssert_LogProbe(\"Exit UtAssert_StringBufCompare: Result=%d, Compare=%d\", (int)Result, Compare);\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: '%s' == '%s'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n"
}