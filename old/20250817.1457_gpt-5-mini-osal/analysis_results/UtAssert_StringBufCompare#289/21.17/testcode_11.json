{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call memcmp(String1, String2, FormatLen1) can read beyond the bounds of the objects referenced by String1 and/or String2. Concrete violation examples:\n1) String1 == NULL and String1Max == 5 (or any > 0): EndPtr1 is NULL, FormatLen1 becomes 5, then memcmp(NULL, String2, 5) dereferences a NULL pointer \u2014 out-of-bounds/undefined behavior. \n2) String1 points to a buffer shorter than String1Max and is not NUL-terminated within String1Max bytes: EndPtr1 will be NULL and FormatLen1 == String1Max, so memcmp may read past the actual buffer length (UB).\nHence the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_StringBufCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2319.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_StringBufCompare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_StringBufCompare:\n```c\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = FormatLen1 - FormatLen2;\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: \\'%s\\' == \\'%s\\'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_StringBufCompare code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n/* Probe helper: append formatted log to /tmp/logs/2319.txt */\nstatic void UtProbe_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2319.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fflush(fp);\n    fclose(fp);\n}\n\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Log entry and parameters (do not dereference String1/String2) */\n    UtProbe_Log(\"ENTER: UtAssert_StringBufCompare\\n\");\n    UtProbe_Log(\"  String1=%p, String1Max=%zu, String2=%p, String2Max=%zu, CompareType=%d, File=%p, Line=%u\\n\",\n                (const void *)String1, String1Max, (const void *)String2, String2Max, (int)CompareType, (const void *)File,\n                (unsigned)Line);\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n        UtProbe_Log(\"  Path: String1 is NULL -> EndPtr1=NULL\\n\");\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n        UtProbe_Log(\"  Path: String1 non-NULL and NULL_TERM -> used strlen, EndPtr1=%p\\n\", (const void *)EndPtr1);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n        UtProbe_Log(\"  Path: String1 non-NULL and bounded -> memchr(..., size=%zu) returned %p\\n\", String1Max,\n                    (const void *)EndPtr1);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n    UtProbe_Log(\"  After EndPtr1: EndPtr1=%p, FormatLen1=%zu\\n\", (const void *)EndPtr1, FormatLen1);\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n        UtProbe_Log(\"  Path: String2 is NULL -> EndPtr2=NULL\\n\");\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n        UtProbe_Log(\"  Path: String2 non-NULL and NULL_TERM -> used strlen, EndPtr2=%p\\n\", (const void *)EndPtr2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n        UtProbe_Log(\"  Path: String2 non-NULL and bounded -> memchr(..., size=%zu) returned %p\\n\", String2Max,\n                    (const void *)EndPtr2);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n    UtProbe_Log(\"  After EndPtr2: EndPtr2=%p, FormatLen2=%zu\\n\", (const void *)EndPtr2, FormatLen2);\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n        UtProbe_Log(\"  Both formats zero length -> Compare=0\\n\");\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            UtProbe_Log(\"  About to memcmp(String1=%p, String2=%p, len=%zu)\\n\", (const void *)String1,\n                        (const void *)String2, FormatLen1);\n            /* Note: memcmp is only called when pointers may be non-NULL. Guarding logs above reflect that. */\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            UtProbe_Log(\"  About to memcmp(String1=%p, String2=%p, len=%zu)\\n\", (const void *)String1,\n                        (const void *)String2, FormatLen2);\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        UtProbe_Log(\"  memcmp returned %d\\n\", Compare);\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = (int)((FormatLen1 > FormatLen2) ? 1 : ((FormatLen1 < FormatLen2) ? -1 : 0));\n            UtProbe_Log(\"  After length tiebreaker: FormatLen1=%zu, FormatLen2=%zu, Compare=%d\\n\", FormatLen1,\n                        FormatLen2, Compare);\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    UtProbe_Log(\"  Comparison result -> Compare=%d, Result=%d\\n\", Compare, (int)Result);\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        /* Only call memchr if String1 is non-NULL */\n        EndPtr1 = (String1 != NULL) ? memchr(String1, '\\n', FormatLen1) : NULL;\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n            UtProbe_Log(\"  Newline found in String1 at %p -> new FormatLen1=%zu\\n\", (const void *)EndPtr1, FormatLen1);\n        }\n        UtProbe_Log(\"  About to memcpy ScrubbedString1 from %p len=%zu\\n\", (const void *)String1, FormatLen1);\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n    UtProbe_Log(\"  ScrubbedString1='%s'\\n\", ScrubbedString1);\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = (String2 != NULL) ? memchr(String2, '\\n', FormatLen2) : NULL;\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n            UtProbe_Log(\"  Newline found in String2 at %p -> new FormatLen2=%zu\\n\", (const void *)EndPtr2, FormatLen2);\n        }\n        UtProbe_Log(\"  About to memcpy ScrubbedString2 from %p len=%zu\\n\", (const void *)String2, FormatLen2);\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n    UtProbe_Log(\"  ScrubbedString2='%s'\\n\", ScrubbedString2);\n\n    UtProbe_Log(\"EXIT: UtAssert_StringBufCompare -> returning Result=%d\\n\\n\", (int)Result);\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: '\\%s' == '\\%s'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n"
}