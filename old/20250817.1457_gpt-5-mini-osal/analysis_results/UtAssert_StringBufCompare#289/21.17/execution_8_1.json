{
  "result": "success",
  "message": "ENTRY: UtAssert_StringBufCompare(String1=0x7ffc9dc66e0f, String1Max=12, String2=0x7ffc9dc66e1b, String2Max=13, File=/tmp/tmp1z32lc2g/src/src/unit-test-coverage/shared/src/coveragetest-errors.c, Line=63)\nPath: Calling memchr(String1, 0, String1Max) with String1=0x7ffc9dc66e0f, String1Max=12\nmemchr result for NUL: EndPtr1=0x7ffc9dc66e10 (NULL means not found within String1Max)\nComputed FormatLen1=1\nPath: Calling memchr(String2, 0, String2Max) with String2=0x7ffc9dc66e1b, String2Max=13\nmemchr result for NUL: EndPtr2=0x7ffc9dc66e1c (NULL means not found within String2Max)\nComputed FormatLen2=1\nCalling memcmp(String1, String2, 1)\nmemcmp result initial Compare=0\nLengths compared -> FormatLen1=1, FormatLen2=1, Compare adjusted=0\nComparison result -> Compare=0, Result=1\nSearching for newline in String1 using memchr(String1, '\\n', 1)\nNo newline found in String1 within FormatLen1=1\nAbout to memcpy ScrubbedString1 from String1 len=1\nScrubbedString1 length after null-terminate=1\nSearching for newline in String2 using memchr(String2, '\\n', 1)\nNo newline found in String2 within FormatLen2=1\nAbout to memcpy ScrubbedString2 from String2 len=1\nScrubbedString2 length after null-terminate=1\nExiting: calling UtAssertEx with message String: '0' == '0'\nENTRY: UtAssert_StringBufCompare(String1=0x7ffc9dc66e0f, String1Max=12, String2=0x7ffc9dc66e1b, String2Max=13, File=/tmp/tmp1z32lc2g/src/src/unit-test-coverage/shared/src/coveragetest-errors.c, Line=63)\nPath: Calling memchr(String1, 0, String1Max) with String1=0x7ffc9dc66e0f, String1Max=12\nmemchr result for NUL: EndPtr1=0x7ffc9dc66e11 (NULL means not found within String1Max)\nComputed FormatLen1=2\nPath: Calling memchr(String2, 0, String2Max) with String2=0x7ffc9dc66e1b, String2Max=13\nmemchr result for NUL: EndPtr2=0x7ffc9dc66e1d (NULL means not found within String2Max)\nComputed FormatLen2=2\nCalling memcmp(String1, String2, 2)\nmemcmp result initial Compare=0\nLengths compared -> FormatLen1=2, FormatLen2=2, Compare adjusted=0\nComparison result -> Compare=0, Result=1\nSearching for newline in String1 using memchr(String1, '\\n', 2)\nNo newline found in String1 within FormatLen1=2\nAbout to memcpy ScrubbedString1 from String1 len=2\nScrubbedString1 length after null-terminate=2\nSearching for newline in String2 using memchr(String2, '\\n', 2)\nNo newline found in String2 within FormatLen2=2\nAbout to memcpy ScrubbedString2 from String2 len=2\nScrubbedString2 length after null-terminate=2\nExiting: calling UtAssertEx with message String: '-1' == '-1'\nENTRY: UtAssert_StringBufCompare(String1=0x7ffc9dc66e0f, String1Max=12, String2=0x7ffc9dc66e1b, String2Max=13, File=/tmp/tmp1z32lc2g/src/src/unit-test-coverage/shared/src/coveragetest-errors.c, Line=63)\nPath: Calling memchr(String1, 0, String1Max) with String1=0x7ffc9dc66e0f, String1Max=12\nmemchr result for NUL: EndPtr1=0x7ffc9dc66e19 (NULL means not found within String1Max)\nComputed FormatLen1=10\nPath: Calling memchr(String2, 0, String2Max) with String2=0x7ffc9dc66e1b, String2Max=13\nmemchr result for NUL: EndPtr2=0x7ffc9dc66e25 (NULL means not found within String2Max)\nComputed FormatLen2=10\nCalling memcmp(String1, String2, 10)\nmemcmp result initial Compare=0\nLengths compared -> FormatLen1=10, FormatLen2=10, Compare adjusted=0\nComparison result -> Compare=0, Result=1\nSearching for newline in String1 using memchr(String1, '\\n', 10)\nNo newline found in String1 within FormatLen1=10\nAbout to memcpy ScrubbedString1 from String1 len=10\nScrubbedString1 length after null-terminate=10\nSearching for newline in String2 using memchr(String2, '\\n', 10)\nNo newline found in String2 within FormatLen2=10\nAbout to memcpy ScrubbedString2 from String2 len=10\nScrubbedString2 length after null-terminate=10\nExiting: calling UtAssertEx with message String: '2147483647' == '2147483647'\nENTRY: UtAssert_StringBufCompare(String1=0x7ffc9dc66e0f, String1Max=12, String2=0x7ffc9dc66e1b, String2Max=13, File=/tmp/tmp1z32lc2g/src/src/unit-test-coverage/shared/src/coveragetest-errors.c, Line=63)\nPath: Calling memchr(String1, 0, String1Max) with String1=0x7ffc9dc66e0f, String1Max=12\nmemchr result for N"
}