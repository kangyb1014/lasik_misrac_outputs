{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. If FormatLen1 can exceed the size of ScrubbedString1 (256), the write ScrubbedString1[FormatLen1] = 0 can index past the end of the array. Example: caller passes String1Max = 300 and String1 contains no '\\0' in the first 300 bytes (so EndPtr1 == NULL and FormatLen1 == 300). The subsequent memcpy(ScrubbedString1, String1, FormatLen1) and the assignment ScrubbedString1[FormatLen1] = 0 will write beyond the 256-byte buffer, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_StringBufCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2319.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_StringBufCompare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_StringBufCompare:\n```c\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = FormatLen1 - FormatLen2;\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: \\'%s\\' == \\'%s\\'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_StringBufCompare code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n/*\n * Probe logging helpers -- append-only logging to /tmp/logs/2319.txt\n * These functions are intentionally lightweight and do not alter program\n * control flow or data values. They exist only to record the state so that\n * the reported violation scenario can be reproduced and evidenced.\n */\nstatic void ProbeLog(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2319.txt\", \"a\");\n    if (fp == NULL)\n    {\n        /* If we cannot open the file, avoid crashing; just return silently. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fprintf(fp, \"\\n\");\n    fflush(fp);\n    fclose(fp);\n}\n\n/*\n * Modified UtAssert_StringBufCompare with inserted probes. The original logic\n * is preserved. The probes log control flow and intermediate state values to\n * \"/tmp/logs/2319.txt\" so other agents can reproduce the reported overflow\n * scenario (FormatLen1 > sizeof(ScrubbedString1)).\n */\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Log entry and input parameters */\n    ProbeLog(\"ENTER: UtAssert_StringBufCompare: String1=%p, String1Max=%zu, String2=%p, String2Max=%zu, File=%p, Line=%u\",\n             (const void *)String1, String1Max, (const void *)String2, String2Max, (const void *)File, (unsigned)Line);\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n        ProbeLog(\"String1 is NULL\");\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n        ProbeLog(\"String1: used strlen(), EndPtr1=%p, strlen=%zu\", (const void *)EndPtr1, strlen(String1));\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n        ProbeLog(\"String1: used memchr(), EndPtr1=%p\", (const void *)EndPtr1);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n    ProbeLog(\"After end detection: EndPtr1=%p, FormatLen1=%zu\", (const void *)EndPtr1, FormatLen1);\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n        ProbeLog(\"String2 is NULL\");\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n        ProbeLog(\"String2: used strlen(), EndPtr2=%p, strlen=%zu\", (const void *)EndPtr2, strlen(String2));\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n        ProbeLog(\"String2: used memchr(), EndPtr2=%p\", (const void *)EndPtr2);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n    ProbeLog(\"After end detection: EndPtr2=%p, FormatLen2=%zu\", (const void *)EndPtr2, FormatLen2);\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n        ProbeLog(\"Both strings empty: Compare=0\");\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            ProbeLog(\"Comparing first %zu bytes (FormatLen1 < FormatLen2)\", FormatLen1);\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            ProbeLog(\"Comparing first %zu bytes (FormatLen2 <= FormatLen1)\", FormatLen2);\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        ProbeLog(\"memcmp result=%d\", Compare);\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = (int)(FormatLen1 - FormatLen2);\n            ProbeLog(\"Lengths equal for compared prefix; Compare now based on lengths: FormatLen1=%zu, FormatLen2=%zu, Compare=%d\",\n                     FormatLen1, FormatLen2, Compare);\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    ProbeLog(\"Post-compare: Compare=%d, Result=%d\", Compare, (int)Result);\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            ProbeLog(\"Newline found in String1 at %p (offset %zu)\", (const void *)EndPtr1, (size_t)(EndPtr1 - String1));\n            FormatLen1 = EndPtr1 - String1;\n            ProbeLog(\"FormatLen1 truncated to %zu due to newline\", FormatLen1);\n        }\n        /* Probe right before memcpy to capture sizes/addresses */\n        ProbeLog(\"About to memcpy into ScrubbedString1: dest=%p (size %zu), src=%p, length=%zu, buffer_capacity=%zu\",\n                 (void *)ScrubbedString1, sizeof(ScrubbedString1), (const void *)String1, FormatLen1, (size_t)sizeof(ScrubbedString1));\n        memcpy(ScrubbedString1, String1, FormatLen1);\n        ProbeLog(\"memcpy done for ScrubbedString1 (copied %zu bytes)\", FormatLen1);\n    }\n    else\n    {\n        ProbeLog(\"FormatLen1 == 0, no memcpy performed for ScrubbedString1\");\n    }\n\n    /* Probe the potential out-of-bounds write before it happens (evidence log) */\n    ProbeLog(\"About to write null terminator to ScrubbedString1 at index FormatLen1=%zu (valid indices 0..%zu)\",\n             FormatLen1, (size_t)sizeof(ScrubbedString1) - 1);\n    ScrubbedString1[FormatLen1] = 0;\n    ProbeLog(\"Null terminator written to ScrubbedString1 at index %zu\", FormatLen1);\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            ProbeLog(\"Newline found in String2 at %p (offset %zu)\", (const void *)EndPtr2, (size_t)(EndPtr2 - String2));\n            FormatLen2 = EndPtr2 - String2;\n            ProbeLog(\"FormatLen2 truncated to %zu due to newline\", FormatLen2);\n        }\n        ProbeLog(\"About to memcpy into ScrubbedString2: dest=%p (size %zu), src=%p, length=%zu, buffer_capacity=%zu\",\n                 (void *)ScrubbedString2, sizeof(ScrubbedString2), (const void *)String2, FormatLen2, (size_t)sizeof(ScrubbedString2));\n        memcpy(ScrubbedString2, String2, FormatLen2);\n        ProbeLog(\"memcpy done for ScrubbedString2 (copied %zu bytes)\", FormatLen2);\n    }\n    else\n    {\n        ProbeLog(\"FormatLen2 == 0, no memcpy performed for ScrubbedString2\");\n    }\n\n    ProbeLog(\"About to write null terminator to ScrubbedString2 at index FormatLen2=%zu (valid indices 0..%zu)\",\n             FormatLen2, (size_t)sizeof(ScrubbedString2) - 1);\n    ScrubbedString2[FormatLen2] = 0;\n    ProbeLog(\"Null terminator written to ScrubbedString2 at index %zu\", FormatLen2);\n\n    ProbeLog(\"EXIT: UtAssert_StringBufCompare: Result=%d, ScrubbedString1_addr=%p, ScrubbedString2_addr=%p\",\n             (int)Result, (void *)ScrubbedString1, (void *)ScrubbedString2);\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: '%s' == '%s'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n"
}