{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf FormatLen2 can be >= 256 (the size of ScrubbedString2), the memcpy will write past the bounds of ScrubbedString2. For example, call UtAssert_StringBufCompare with String2 pointing to a 300-byte buffer and String2Max = 300 (or with String2Max == SIZE_MAX and strlen(String2) >= 256). Then FormatLen2 becomes 300 (or >=256), and memcpy(ScrubbedString2, String2, FormatLen2) copies more than 256 bytes into ScrubbedString2, causing an out\u2011of\u2011bounds write (and the following ScrubbedString2[FormatLen2] = 0 also writes out of bounds). This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_StringBufCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2319.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_StringBufCompare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_StringBufCompare:\n```c\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = FormatLen1 - FormatLen2;\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: \\'%s\\' == \\'%s\\'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_StringBufCompare code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe logging helper. Appends to /tmp/logs/2319.txt */\nstatic void UtAssert_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2319.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Log entry and parameters (print pointers as %p to avoid dereferencing NULL) */\n    UtAssert_LogProbe(\"ENTRY: UtAssert_StringBufCompare String1=%p String1Max=%zu String2=%p String2Max=%zu CompareType=%d File=%p Line=%lu\\n\",\n                      (const void *)String1, String1Max, (const void *)String2, String2Max, (int)CompareType,\n                      (const void *)File, (unsigned long)Line);\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        UtAssert_LogProbe(\"String1 == NULL\\n\");\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        UtAssert_LogProbe(\"String1Max == UTASSERT_STRINGBUF_NULL_TERM: using strlen() for String1\\n\");\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n    }\n    else\n    {\n        UtAssert_LogProbe(\"Using memchr() for String1 with max=%zu\\n\", String1Max);\n        EndPtr1 = memchr(String1, 0, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    UtAssert_LogProbe(\"After processing String1: EndPtr1=%p FormatLen1=%zu\\n\", (const void *)EndPtr1, FormatLen1);\n\n    if (String2 == NULL)\n    {\n        UtAssert_LogProbe(\"String2 == NULL\\n\");\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        UtAssert_LogProbe(\"String2Max == UTASSERT_STRINGBUF_NULL_TERM: using strlen() for String2\\n\");\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        UtAssert_LogProbe(\"Using memchr() for String2 with max=%zu\\n\", String2Max);\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    UtAssert_LogProbe(\"After processing String2: EndPtr2=%p FormatLen2=%zu\\n\", (const void *)EndPtr2, FormatLen2);\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n        UtAssert_LogProbe(\"Both strings zero-length -> Compare = 0\\n\");\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            UtAssert_LogProbe(\"Comparing first %zu bytes (FormatLen1 < FormatLen2)\\n\", FormatLen1);\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            UtAssert_LogProbe(\"Comparing first %zu bytes (FormatLen1 >= FormatLen2)\\n\", FormatLen2);\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = (int)((FormatLen1 > FormatLen2) ? (FormatLen1 - FormatLen2) : (FormatLen1 - FormatLen2));\n            UtAssert_LogProbe(\"Initial content same -> Compare set to FormatLen1 - FormatLen2 = %d\\n\", Compare);\n        }\n        else\n        {\n            UtAssert_LogProbe(\"memcmp returned Compare = %d\\n\", Compare);\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    UtAssert_LogProbe(\"Comparison result: Compare=%d Result=%d\\n\", Compare, Result ? 1 : 0);\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            size_t old = FormatLen1;\n            FormatLen1 = EndPtr1 - String1;\n            UtAssert_LogProbe(\"Newline found in String1: truncating FormatLen1 from %zu to %zu\\n\", old, FormatLen1);\n        }\n        UtAssert_LogProbe(\"About to memcpy ScrubbedString1: len=%zu buffer_size=256\\n\", FormatLen1);\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n    UtAssert_LogProbe(\"ScrubbedString1 terminated at index %zu\\n\", FormatLen1);\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            size_t old = FormatLen2;\n            FormatLen2 = EndPtr2 - String2;\n            UtAssert_LogProbe(\"Newline found in String2: truncating FormatLen2 from %zu to %zu\\n\", old, FormatLen2);\n        }\n        /* Critical probe: log if FormatLen2 might exceed the local buffer */\n        if (FormatLen2 >= sizeof(ScrubbedString2))\n        {\n            UtAssert_LogProbe(\"WARNING: FormatLen2=%zu >= ScrubbedString2 size=%zu -> potential out-of-bounds write when memcpy is performed\\n\",\n                              FormatLen2, sizeof(ScrubbedString2));\n        }\n        UtAssert_LogProbe(\"About to memcpy ScrubbedString2: len=%zu buffer_size=256\\n\", FormatLen2);\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n    UtAssert_LogProbe(\"ScrubbedString2 terminated at index %zu\\n\", FormatLen2);\n\n    UtAssert_LogProbe(\"Calling UtAssertEx with ScrubbedString1 and ScrubbedString2 (not printing raw contents here)\\n\");\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: '\\%s' == '\\%s'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n"
}