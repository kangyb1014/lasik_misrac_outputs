{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf String1 is NULL but String1Max > 0 (for example: String1 == NULL, String1Max == 5, String2 == \"x\", String2Max == 1), then FormatLen1 is set to 5 and FormatLen2 to 1. The code will take the branch that executes memcmp(String1, String2, FormatLen2), which becomes memcmp(NULL, \"x\", 1). memcmp will attempt to access the object pointed to by String1 (which is NULL) for 1 byte \u2014 this is an out\u2011of\u2011bounds (invalid) access and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_StringBufCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2319.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_StringBufCompare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_StringBufCompare:\n```c\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = FormatLen1 - FormatLen2;\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: \\'%s\\' == \\'%s\\'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_StringBufCompare code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/* Probe helper: append readable diagnostics to /tmp/logs/2319.txt.\n * This helper avoids dereferencing String1/String2; it only logs pointer\n * values and integer state so it is safe in the presence of NULL pointers.\n */\nstatic void UtAssert_LogProbe(const char *stage, const char *String1, size_t String1Max, const char *String2,\n                              size_t String2Max, const char *File, unsigned Line, const char *EndPtr1,\n                              const char *EndPtr2, size_t FormatLen1, size_t FormatLen2, const char *extra)\n{\n    FILE *f = fopen(\"/tmp/logs/2319.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"Stage: %s\\n\", stage != NULL ? stage : \"(null)\");\n    fprintf(f, \"  String1=%p String1Max=%zu\\n\", (const void *)String1, String1Max);\n    fprintf(f, \"  String2=%p String2Max=%zu\\n\", (const void *)String2, String2Max);\n    fprintf(f, \"  File=%s Line=%u\\n\", File ? File : \"(null)\", Line);\n    fprintf(f, \"  EndPtr1=%p EndPtr2=%p\\n\", (const void *)EndPtr1, (const void *)EndPtr2);\n    fprintf(f, \"  FormatLen1=%zu FormatLen2=%zu\\n\", FormatLen1, FormatLen2);\n    if (extra != NULL)\n    {\n        fprintf(f, \"  Extra: %s\\n\", extra);\n    }\n    fprintf(f, \"----------------------------------------\\n\");\n    fclose(f);\n}\n\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Initial entry probe */\n    UtAssert_LogProbe(\"ENTRY\", String1, String1Max, String2, String2Max, File, (unsigned)Line, NULL, NULL, 0, 0,\n                      \"Function entry\");\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n        UtAssert_LogProbe(\"EndPtr1: String1 is NULL\", String1, String1Max, String2, String2Max, File,\n                          (unsigned)Line, EndPtr1, NULL, 0, 0, \"String1 is NULL branch\");\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n        UtAssert_LogProbe(\"EndPtr1: NULL_TERM branch\", String1, String1Max, String2, String2Max, File,\n                          (unsigned)Line, EndPtr1, NULL, (size_t)(EndPtr1 - String1), 0, NULL);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n        UtAssert_LogProbe(\"EndPtr1: memchr branch\", String1, String1Max, String2, String2Max, File,\n                          (unsigned)Line, EndPtr1, NULL, (size_t)(EndPtr1 ? (EndPtr1 - String1) : 0), 0,\n                          \"memchr used to find terminator\");\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    /* Log after computing FormatLen1 */\n    UtAssert_LogProbe(\"After FormatLen1\", String1, String1Max, String2, String2Max, File, (unsigned)Line,\n                      EndPtr1, NULL, FormatLen1, 0, NULL);\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    /* Log after computing FormatLen2 */\n    UtAssert_LogProbe(\"After FormatLen2\", String1, String1Max, String2, String2Max, File, (unsigned)Line,\n                      EndPtr1, EndPtr2, FormatLen1, FormatLen2, NULL);\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            /* Probe before memcmp in this branch */\n            UtAssert_LogProbe(\"Before memcmp (FormatLen1 < FormatLen2)\", String1, String1Max, String2, String2Max,\n                              File, (unsigned)Line, EndPtr1, EndPtr2, FormatLen1, FormatLen2,\n                              \"About to call memcmp with length FormatLen1\");\n\n            /* Special probe for potential NULL with non-zero length */\n            if ((String1 == NULL || String2 == NULL) && FormatLen1 > 0)\n            {\n                UtAssert_LogProbe(\"WARNING: memcmp with NULL and len>0\", String1, String1Max, String2,\n                                  String2Max, File, (unsigned)Line, EndPtr1, EndPtr2, FormatLen1, FormatLen2,\n                                  \"This will invoke memcmp on a NULL pointer if present\");\n            }\n\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            /* Probe before memcmp in this branch */\n            UtAssert_LogProbe(\"Before memcmp (FormatLen1 >= FormatLen2)\", String1, String1Max, String2, String2Max,\n                              File, (unsigned)Line, EndPtr1, EndPtr2, FormatLen1, FormatLen2,\n                              \"About to call memcmp with length FormatLen2\");\n\n            if ((String1 == NULL || String2 == NULL) && FormatLen2 > 0)\n            {\n                UtAssert_LogProbe(\"WARNING: memcmp with NULL and len>0\", String1, String1Max, String2,\n                                  String2Max, File, (unsigned)Line, EndPtr1, EndPtr2, FormatLen1, FormatLen2,\n                                  \"This will invoke memcmp on a NULL pointer if present\");\n            }\n\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = (int)(FormatLen1 - FormatLen2);\n        }\n    }\n\n    /* Log comparison result */\n    {\n        char extraBuf[128];\n        snprintf(extraBuf, sizeof(extraBuf), \"Compare=%d\", Compare);\n        UtAssert_LogProbe(\"After Compare\", String1, String1Max, String2, String2Max, File, (unsigned)Line,\n                          EndPtr1, EndPtr2, FormatLen1, FormatLen2, extraBuf);\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        UtAssert_LogProbe(\"Scrub: before memchr/String1\", String1, String1Max, String2, String2Max, File,\n                          (unsigned)Line, EndPtr1, EndPtr2, FormatLen1, FormatLen2, NULL);\n\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        UtAssert_LogProbe(\"Scrub: before memchr/String2\", String1, String1Max, String2, String2Max, File,\n                          (unsigned)Line, EndPtr1, EndPtr2, FormatLen1, FormatLen2, NULL);\n\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    /* Final probe with scrubbed string pointers and lengths */\n    UtAssert_LogProbe(\"EXIT (before UtAssertEx)\", String1, String1Max, String2, String2Max, File, (unsigned)Line,\n                      EndPtr1, EndPtr2, FormatLen1, FormatLen2, \"About to call UtAssertEx\");\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: '%s' == '%s'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n"
}