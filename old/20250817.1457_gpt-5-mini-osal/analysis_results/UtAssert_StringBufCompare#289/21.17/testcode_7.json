{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf String2 is non-NULL and String2Max == UTASSERT_STRINGBUF_NULL_TERM (SIZE_MAX) but the actual object pointed to by String2 is not NUL-terminated within its allocated bounds (caller mis-specifies the length), strlen(String2) will read past the object's end, causing an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_StringBufCompare code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2319.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_StringBufCompare as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_StringBufCompare:\n```c\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n    }\n    else\n    {\n        EndPtr1 = memchr(String1, 0, String1Max);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n\n    if (String2 == NULL)\n    {\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        EndPtr2 = String2 + strlen(String2);\n    }\n    else\n    {\n        EndPtr2 = memchr(String2, 0, String2Max);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = FormatLen1 - FormatLen2;\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            break;\n        default: /* should never happen */\n            Result = false;\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: \\'%s\\' == \\'%s\\'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n```\n</target_code>\nPlease provide the modified UtAssert_StringBufCompare code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/* Helper probe: append a log entry to /tmp/logs/2319.txt */\nstatic void UtAssert_ProbeLog(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/2319.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nbool UtAssert_StringBufCompare(const char *String1, size_t String1Max, const char *String2, size_t String2Max,\n                               UtAssert_Compare_t CompareType, const char *File, uint32 Line)\n{\n    char        ScrubbedString1[256];\n    char        ScrubbedString2[256];\n    const char *EndPtr1;\n    const char *EndPtr2;\n    size_t      FormatLen1;\n    size_t      FormatLen2;\n    bool        Result;\n    int         Compare;\n\n    /* Log entry: function entry and raw parameters */\n    UtAssert_ProbeLog(\"ENTER: UtAssert_StringBufCompare File=%s Line=%u String1=%p String1Max=%zu String2=%p String2Max=%zu CompareType=%d\",\n                      File ? File : \"(null)\", (unsigned)Line, (const void *)String1, String1Max, (const void *)String2, String2Max, (int)CompareType);\n\n    /* Locate the actual end of both strings */\n    if (String1 == NULL)\n    {\n        UtAssert_ProbeLog(\"String1 is NULL\");\n        EndPtr1 = NULL;\n    }\n    else if (String1Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        UtAssert_ProbeLog(\"String1Max indicates NUL-terminated buffer: will call strlen(String1) on %p\", (const void *)String1);\n        /*\n         * NOTE: it is technically undefined behavior to pass a size to memchr()\n         * that is larger than the actual buffer, even if it is known/guaranteed\n         * to find a match within the actual buffer.  Therefore the regular strlen()\n         * is used instead.\n         */\n        EndPtr1 = String1 + strlen(String1);\n        UtAssert_ProbeLog(\"After strlen(String1): EndPtr1=%p (offset=%zu)\", (const void *)EndPtr1, (EndPtr1 - String1));\n    }\n    else\n    {\n        UtAssert_ProbeLog(\"String1Max is bounded (%zu): will use memchr to search for NUL within bound\", String1Max);\n        EndPtr1 = memchr(String1, 0, String1Max);\n        UtAssert_ProbeLog(\"After memchr(String1,0,String1Max): EndPtr1=%p\", (const void *)EndPtr1);\n    }\n\n    if (EndPtr1 != NULL)\n    {\n        FormatLen1 = EndPtr1 - String1;\n    }\n    else\n    {\n        FormatLen1 = String1Max;\n    }\n    UtAssert_ProbeLog(\"Computed FormatLen1=%zu\", FormatLen1);\n\n    if (String2 == NULL)\n    {\n        UtAssert_ProbeLog(\"String2 is NULL\");\n        EndPtr2 = NULL;\n    }\n    else if (String2Max == UTASSERT_STRINGBUF_NULL_TERM)\n    {\n        /* Probe log warning: this is the scenario reported as risky */\n        UtAssert_ProbeLog(\"String2Max indicates NUL-terminated buffer: will call strlen(String2) on %p\", (const void *)String2);\n        UtAssert_ProbeLog(\"WARNING: If the caller mis-specified the actual allocated length for String2 and it is not NUL-terminated, strlen(String2) may read beyond the object bounds (potential OOB) -- this is the reported violation scenario.\");\n\n        /* Preserve original behavior (call strlen) to allow reproduction of the issue */\n        EndPtr2 = String2 + strlen(String2);\n        UtAssert_ProbeLog(\"After strlen(String2): EndPtr2=%p (offset=%zu)\", (const void *)EndPtr2, (EndPtr2 - String2));\n    }\n    else\n    {\n        UtAssert_ProbeLog(\"String2Max is bounded (%zu): will use memchr to search for NUL within bound\", String2Max);\n        EndPtr2 = memchr(String2, 0, String2Max);\n        UtAssert_ProbeLog(\"After memchr(String2,0,String2Max): EndPtr2=%p\", (const void *)EndPtr2);\n    }\n\n    if (EndPtr2 != NULL)\n    {\n        FormatLen2 = EndPtr2 - String2;\n    }\n    else\n    {\n        FormatLen2 = String2Max;\n    }\n    UtAssert_ProbeLog(\"Computed FormatLen2=%zu\", FormatLen2);\n\n    if (FormatLen1 == 0 && FormatLen2 == 0)\n    {\n        /* Two empty strings are considered equal */\n        UtAssert_ProbeLog(\"Both FormatLen1 and FormatLen2 are 0 -> strings considered equal\");\n        Compare = 0;\n    }\n    else\n    {\n        /* Compare actual content based on the shorter of the two strings */\n        if (FormatLen1 < FormatLen2)\n        {\n            UtAssert_ProbeLog(\"Comparing initial content for length=%zu (FormatLen1 < FormatLen2)\", FormatLen1);\n            Compare = memcmp(String1, String2, FormatLen1);\n        }\n        else\n        {\n            UtAssert_ProbeLog(\"Comparing initial content for length=%zu (FormatLen2 <= FormatLen1)\", FormatLen2);\n            Compare = memcmp(String1, String2, FormatLen2);\n        }\n\n        UtAssert_ProbeLog(\"memcmp result=%d\", Compare);\n\n        /* If initial content was the same, go by whichever is longer */\n        if (Compare == 0)\n        {\n            /*\n             * If String1 is longer, compare should be positive (String1 > String2)\n             * If String2 is longer, compare should be negative (String1 < String2)\n             * If strings are the same length, compare should be 0.\n             */\n            Compare = (int)(FormatLen1 - FormatLen2);\n            UtAssert_ProbeLog(\"Content equal for compared length; Compare set by length difference: FormatLen1=%zu FormatLen2=%zu Compare=%d\",\n                              FormatLen1, FormatLen2, Compare);\n        }\n    }\n\n    switch (CompareType)\n    {\n        case UtAssert_Compare_EQ: /* actual equals reference value */\n            Result = (Compare == 0);\n            UtAssert_ProbeLog(\"CompareType=EQ => Result=%d\", Result);\n            break;\n        case UtAssert_Compare_NEQ: /* actual does not non equal reference value */\n            Result = (Compare != 0);\n            UtAssert_ProbeLog(\"CompareType=NEQ => Result=%d\", Result);\n            break;\n        case UtAssert_Compare_LT: /* actual less than reference (exclusive) */\n            Result = (Compare < 0);\n            UtAssert_ProbeLog(\"CompareType=LT => Result=%d\", Result);\n            break;\n        case UtAssert_Compare_GT: /* actual greater than reference (exclusive)  */\n            Result = (Compare > 0);\n            UtAssert_ProbeLog(\"CompareType=GT => Result=%d\", Result);\n            break;\n        case UtAssert_Compare_LTEQ: /* actual less than or equal to reference (inclusive) */\n            Result = (Compare <= 0);\n            UtAssert_ProbeLog(\"CompareType=LTEQ => Result=%d\", Result);\n            break;\n        case UtAssert_Compare_GTEQ: /* actual greater than reference (inclusive) */\n            Result = (Compare >= 0);\n            UtAssert_ProbeLog(\"CompareType=GTEQ => Result=%d\", Result);\n            break;\n        default: /* should never happen */\n            Result = false;\n            UtAssert_ProbeLog(\"CompareType=UNKNOWN => Result=false\");\n            break;\n    }\n\n    /* Now make \"safe\" copies of the strings */\n    /* Check for a newline within the string, and if present, end the string there instead */\n    if (FormatLen1 > 0)\n    {\n        EndPtr1 = memchr(String1, '\\n', FormatLen1);\n        if (EndPtr1 != NULL)\n        {\n            FormatLen1 = EndPtr1 - String1;\n            UtAssert_ProbeLog(\"Found newline in String1 at %p -> new FormatLen1=%zu\", (const void *)EndPtr1, FormatLen1);\n        }\n        memcpy(ScrubbedString1, String1, FormatLen1);\n        UtAssert_ProbeLog(\"Copied %zu bytes into ScrubbedString1\", FormatLen1);\n    }\n    ScrubbedString1[FormatLen1] = 0;\n    UtAssert_ProbeLog(\"ScrubbedString1='%s'\", ScrubbedString1);\n\n    if (FormatLen2 > 0)\n    {\n        EndPtr2 = memchr(String2, '\\n', FormatLen2);\n        if (EndPtr2 != NULL)\n        {\n            FormatLen2 = EndPtr2 - String2;\n            UtAssert_ProbeLog(\"Found newline in String2 at %p -> new FormatLen2=%zu\", (const void *)EndPtr2, FormatLen2);\n        }\n        memcpy(ScrubbedString2, String2, FormatLen2);\n        UtAssert_ProbeLog(\"Copied %zu bytes into ScrubbedString2\", FormatLen2);\n    }\n    ScrubbedString2[FormatLen2] = 0;\n    UtAssert_ProbeLog(\"ScrubbedString2='%s'\", ScrubbedString2);\n\n    UtAssert_ProbeLog(\"EXIT: Result=%d (returning to UtAssertEx)\", Result);\n\n    return UtAssertEx(Result, UTASSERT_CASETYPE_FAILURE, File, Line, \"String: '%s' == '%s'\", ScrubbedString1,\n                      ScrubbedString2);\n}\n"
}