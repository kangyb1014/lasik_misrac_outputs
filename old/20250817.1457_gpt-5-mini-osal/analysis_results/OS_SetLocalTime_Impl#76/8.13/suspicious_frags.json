{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_SetLocalTime_Impl:\n```c\nint32 OS_SetLocalTime_Impl(const OS_time_t *time_struct)\n{\n    int             Status;\n    int32           ReturnCode;\n    struct timespec TimeSp;\n\n    TimeSp.tv_sec  = OS_TimeGetTotalSeconds(*time_struct);\n    TimeSp.tv_nsec = OS_TimeGetNanosecondsPart(*time_struct);\n\n    Status = clock_settime(OSAL_GETTIME_SOURCE_CLOCK, &TimeSp);\n\n    if (Status == 0)\n    {\n        ReturnCode = OS_SUCCESS;\n    }\n    else\n    {\n        ReturnCode = OS_ERROR;\n    }\n\n    return ReturnCode;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_SetLocalTime_Impl:\ntypedef struct\n{\n    int64 ticks; /**< Ticks elapsed since reference point */\n} OS_time_t\n...\nstatic inline int64 OS_TimeGetTotalSeconds(OS_time_t tm)\n{\n    return (tm.ticks / OS_TIME_TICKS_PER_SECOND);\n}\n...\nstatic inline uint32 OS_TimeGetNanosecondsPart(OS_time_t tm)\n{\n    return (uint32)OS_TimeGetFractionalPart(tm) * OS_TIME_TICK_RESOLUTION_NS;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No pointer declarations in the provided code omit const where it appears possible under MISRA C 2023 Rule 8.13: \n\n- The function parameter is declared as const OS_time_t *time_struct, satisfying the rule for this input pointer.\n- The helper functions (OS_TimeGetTotalSeconds, OS_TimeGetNanosecondsPart) take OS_time_t by value, so there are no pointer parameters to qualify there.\n- The only address-of usage is &TimeSp passed to clock_settime. The POSIX prototype for clock_settime takes a pointer to const struct timespec; passing the address of a non-const local object to a function expecting a pointer to const is allowed and does not indicate a missing const qualification in the code under review (and there is no pointer variable declared that should be const-qualified).\n\nNo other pointer expressions or pointer parameter declarations appear in the provided snippets that could reasonably be qualified as const under Rule 8.13, so there are no suspicious fragments to investigate for this rule."
}