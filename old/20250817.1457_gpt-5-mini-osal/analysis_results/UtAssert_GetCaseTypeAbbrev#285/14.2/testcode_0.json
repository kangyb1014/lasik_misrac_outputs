{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop uses and modifies two counters (j and i). The first clause initializes j, but the third clause increments both j and i (j++, i++), so more than one object is modified as a loop counter. The second clause uses i (j < 16 && i < Length) while i is modified by the loop (in the third clause and effectively part of the loop behaviour), and the third clause does not modify only the single loop counter. This violates the requirements that there be only one loop counter and that the second/third clauses only use/modify the loop counter (and no other objects modified in the loop body).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GetCaseTypeAbbrev code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2284.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_GetCaseTypeAbbrev as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_GetCaseTypeAbbrev:\n```c\nconst char *UtAssert_GetCaseTypeAbbrev(UtAssert_CaseType_t CaseType)\n{\n    const char *AbbrevStr;\n\n    switch (CaseType)\n    {\n        case UTASSERT_CASETYPE_ABORT:\n            AbbrevStr = \"ABORT\";\n            break;\n        case UTASSERT_CASETYPE_FAILURE:\n            AbbrevStr = \"FAIL\";\n            break;\n        case UTASSERT_CASETYPE_MIR:\n            AbbrevStr = \"MIR\";\n            break;\n        case UTASSERT_CASETYPE_TSF:\n            AbbrevStr = \"TSF\";\n            break;\n        case UTASSERT_CASETYPE_TTF:\n            AbbrevStr = \"TTF\";\n            break;\n        case UTASSERT_CASETYPE_WARN:\n            AbbrevStr = \"WARN\";\n            break;\n        case UTASSERT_CASETYPE_NA:\n            AbbrevStr = \"N/A\";\n            break;\n        case UTASSERT_CASETYPE_BEGIN:\n            AbbrevStr = \"BEGIN\";\n            break;\n        case UTASSERT_CASETYPE_END:\n            AbbrevStr = \"END\";\n            break;\n        case UTASSERT_CASETYPE_PASS:\n            AbbrevStr = \"PASS\";\n            break;\n        case UTASSERT_CASETYPE_INFO:\n            AbbrevStr = \"INFO\";\n            break;\n        case UTASSERT_CASETYPE_FLOW:\n            AbbrevStr = \"FLOW\";\n            break;\n        case UTASSERT_CASETYPE_DEBUG:\n            AbbrevStr = \"DEBUG\";\n            break;\n        default:\n            /* do not return NULL, as the result may be directly passed to C library functions */\n            AbbrevStr = \"OTHER\";\n            break;\n    }\n\n    return AbbrevStr;\n}\n```\n</target_code>\nPlease provide the modified UtAssert_GetCaseTypeAbbrev code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: log control flow and state to /tmp/logs/2284.txt */\nstatic void UtAssert_LogCase(int CaseTypeValue, const char *CaseName, const char *AbbrevStr)\n{\n    FILE *fp = fopen(\"/tmp/logs/2284.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"UtAssert_GetCaseTypeAbbrev: CaseType=%d (%s) => Abbrev=\\\"%s\\\"\\n\",\n                CaseTypeValue,\n                (CaseName != NULL) ? CaseName : \"<unknown>\",\n                (AbbrevStr != NULL) ? AbbrevStr : \"<null>\");\n        fclose(fp);\n    }\n}\n\nconst char *UtAssert_GetCaseTypeAbbrev(UtAssert_CaseType_t CaseType)\n{\n    const char *AbbrevStr;\n\n    switch (CaseType)\n    {\n        case UTASSERT_CASETYPE_ABORT:\n            AbbrevStr = \"ABORT\";\n            UtAssert_LogCase((int)CaseType, \"UTASSERT_CASETYPE_ABORT\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_FAILURE:\n            AbbrevStr = \"FAIL\";\n            UtAssert_LogCase((int)CaseType, \"UTASSERT_CASETYPE_FAILURE\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_MIR:\n            AbbrevStr = \"MIR\";\n            UtAssert_LogCase((int)CaseType, \"UTASSERT_CASETYPE_MIR\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_TSF:\n            AbbrevStr = \"TSF\";\n            UtAssert_LogCase((int)CaseType, \"UTASSERT_CASETYPE_TSF\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_TTF:\n            AbbrevStr = \"TTF\";\n            UtAssert_LogCase((int)CaseType, \"UTASSERT_CASETYPE_TTF\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_WARN:\n            AbbrevStr = \"WARN\";\n            UtAssert_LogCase((int)CaseType, \"UTASSERT_CASETYPE_WARN\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_NA:\n            AbbrevStr = \"N/A\";\n            UtAssert_LogCase((int)CaseType, \"UTASSERT_CASETYPE_NA\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_BEGIN:\n            AbbrevStr = \"BEGIN\";\n            UtAssert_LogCase((int)CaseType, \"UTASSERT_CASETYPE_BEGIN\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_END:\n            AbbrevStr = \"END\";\n            UtAssert_LogCase((int)CaseType, \"UTASSERT_CASETYPE_END\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_PASS:\n            AbbrevStr = \"PASS\";\n            UtAssert_LogCase((int)CaseType, \"UTASSERT_CASETYPE_PASS\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_INFO:\n            AbbrevStr = \"INFO\";\n            UtAssert_LogCase((int)CaseType, \"UTASSERT_CASETYPE_INFO\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_FLOW:\n            AbbrevStr = \"FLOW\";\n            UtAssert_LogCase((int)CaseType, \"UTASSERT_CASETYPE_FLOW\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_DEBUG:\n            AbbrevStr = \"DEBUG\";\n            UtAssert_LogCase((int)CaseType, \"UTASSERT_CASETYPE_DEBUG\", AbbrevStr);\n            break;\n        default:\n            /* do not return NULL, as the result may be directly passed to C library functions */\n            AbbrevStr = \"OTHER\";\n            UtAssert_LogCase((int)CaseType, \"default\", AbbrevStr);\n            break;\n    }\n\n    return AbbrevStr;\n}\n"
}