{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe 'default: break;' label in the switch (as shown) is executed when MessageType does not match any case but performs no operation; removing the default:break; (or the default label) would not change program behaviour. Thus this statement is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_GetCaseTypeAbbrev code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2282.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_GetCaseTypeAbbrev as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_GetCaseTypeAbbrev:\n```c\nconst char *UtAssert_GetCaseTypeAbbrev(UtAssert_CaseType_t CaseType)\n{\n    const char *AbbrevStr;\n\n    switch (CaseType)\n    {\n        case UTASSERT_CASETYPE_ABORT:\n            AbbrevStr = \"ABORT\";\n            break;\n        case UTASSERT_CASETYPE_FAILURE:\n            AbbrevStr = \"FAIL\";\n            break;\n        case UTASSERT_CASETYPE_MIR:\n            AbbrevStr = \"MIR\";\n            break;\n        case UTASSERT_CASETYPE_TSF:\n            AbbrevStr = \"TSF\";\n            break;\n        case UTASSERT_CASETYPE_TTF:\n            AbbrevStr = \"TTF\";\n            break;\n        case UTASSERT_CASETYPE_WARN:\n            AbbrevStr = \"WARN\";\n            break;\n        case UTASSERT_CASETYPE_NA:\n            AbbrevStr = \"N/A\";\n            break;\n        case UTASSERT_CASETYPE_BEGIN:\n            AbbrevStr = \"BEGIN\";\n            break;\n        case UTASSERT_CASETYPE_END:\n            AbbrevStr = \"END\";\n            break;\n        case UTASSERT_CASETYPE_PASS:\n            AbbrevStr = \"PASS\";\n            break;\n        case UTASSERT_CASETYPE_INFO:\n            AbbrevStr = \"INFO\";\n            break;\n        case UTASSERT_CASETYPE_FLOW:\n            AbbrevStr = \"FLOW\";\n            break;\n        case UTASSERT_CASETYPE_DEBUG:\n            AbbrevStr = \"DEBUG\";\n            break;\n        default:\n            /* do not return NULL, as the result may be directly passed to C library functions */\n            AbbrevStr = \"OTHER\";\n            break;\n    }\n\n    return AbbrevStr;\n}\n```\n</target_code>\nPlease provide the modified UtAssert_GetCaseTypeAbbrev code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: logs the taken branch and state to /tmp/logs/2282.txt */\nstatic void UtAssert_LogBranch(UtAssert_CaseType_t CaseType, const char *Branch, const char *AbbrevStr)\n{\n    FILE *fp = fopen(\"/tmp/logs/2282.txt\", \"a\");\n    if (fp != NULL)\n    {\n        /* Log numeric value of CaseType, the branch label and the resulting abbreviation */\n        fprintf(fp, \"UtAssert_GetCaseTypeAbbrev: CaseType=%d, Branch=%s, Abbrev=%s\\n\", (int)CaseType, Branch, AbbrevStr);\n        fclose(fp);\n    }\n}\n\nconst char *UtAssert_GetCaseTypeAbbrev(UtAssert_CaseType_t CaseType)\n{\n    const char *AbbrevStr;\n\n    switch (CaseType)\n    {\n        case UTASSERT_CASETYPE_ABORT:\n            AbbrevStr = \"ABORT\";\n            UtAssert_LogBranch(CaseType, \"UTASSERT_CASETYPE_ABORT\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_FAILURE:\n            AbbrevStr = \"FAIL\";\n            UtAssert_LogBranch(CaseType, \"UTASSERT_CASETYPE_FAILURE\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_MIR:\n            AbbrevStr = \"MIR\";\n            UtAssert_LogBranch(CaseType, \"UTASSERT_CASETYPE_MIR\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_TSF:\n            AbbrevStr = \"TSF\";\n            UtAssert_LogBranch(CaseType, \"UTASSERT_CASETYPE_TSF\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_TTF:\n            AbbrevStr = \"TTF\";\n            UtAssert_LogBranch(CaseType, \"UTASSERT_CASETYPE_TTF\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_WARN:\n            AbbrevStr = \"WARN\";\n            UtAssert_LogBranch(CaseType, \"UTASSERT_CASETYPE_WARN\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_NA:\n            AbbrevStr = \"N/A\";\n            UtAssert_LogBranch(CaseType, \"UTASSERT_CASETYPE_NA\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_BEGIN:\n            AbbrevStr = \"BEGIN\";\n            UtAssert_LogBranch(CaseType, \"UTASSERT_CASETYPE_BEGIN\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_END:\n            AbbrevStr = \"END\";\n            UtAssert_LogBranch(CaseType, \"UTASSERT_CASETYPE_END\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_PASS:\n            AbbrevStr = \"PASS\";\n            UtAssert_LogBranch(CaseType, \"UTASSERT_CASETYPE_PASS\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_INFO:\n            AbbrevStr = \"INFO\";\n            UtAssert_LogBranch(CaseType, \"UTASSERT_CASETYPE_INFO\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_FLOW:\n            AbbrevStr = \"FLOW\";\n            UtAssert_LogBranch(CaseType, \"UTASSERT_CASETYPE_FLOW\", AbbrevStr);\n            break;\n        case UTASSERT_CASETYPE_DEBUG:\n            AbbrevStr = \"DEBUG\";\n            UtAssert_LogBranch(CaseType, \"UTASSERT_CASETYPE_DEBUG\", AbbrevStr);\n            break;\n        default:\n            /* do not return NULL, as the result may be directly passed to C library functions */\n            AbbrevStr = \"OTHER\";\n            UtAssert_LogBranch(CaseType, \"DEFAULT\", AbbrevStr);\n            break;\n    }\n\n    return AbbrevStr;\n}\n"
}