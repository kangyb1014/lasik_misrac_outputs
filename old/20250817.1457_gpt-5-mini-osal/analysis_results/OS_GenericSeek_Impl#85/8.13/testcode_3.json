{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is declared as a non-const pointer (OS_impl_file_internal_record_t *impl) but it is only used for read access (impl->fd is read and passed to lseek; no modification of the referred record occurs). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible \u2014 e.g. const OS_impl_file_internal_record_t *impl. (Note: assigning the address of a non-const global table element to a pointer-to-const is allowed.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericSeek_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/683.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GenericSeek_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GenericSeek_Impl:\n```c\nint32 OS_GenericSeek_Impl(const OS_object_token_t *token, int32 offset, uint32 whence)\n{\n    int                             where;\n    off_t                           os_result;\n    int32                           retval;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    switch (whence)\n    {\n        case OS_SEEK_SET:\n            where = SEEK_SET;\n            break;\n        case OS_SEEK_CUR:\n            where = SEEK_CUR;\n            break;\n        case OS_SEEK_END:\n            where = SEEK_END;\n            break;\n        default:\n            return OS_ERROR;\n    }\n\n    os_result = lseek(impl->fd, (off_t)offset, where);\n    if (os_result == (off_t)-1)\n    {\n        if (errno == ESPIPE)\n        {\n            /*\n             * this means the user tried to seek on a pipe, socket,\n             * or other fifo-like handle that doesn't support seeking.\n             *\n             * Use a different error code to differentiate from an\n             * error involving a bad whence/offset\n             */\n            retval = OS_ERR_OPERATION_NOT_SUPPORTED;\n        }\n        else\n        {\n            /*\n             * Most likely the \"whence\" and/or \"offset\" combo was not valid.\n             */\n            OS_DEBUG(\"lseek: %s\\n\", strerror(errno));\n            retval = OS_ERROR;\n        }\n    }\n    else\n    {\n        /*\n         * convert value to int32 type for returning to caller.\n         * Note that this could potentially overflow an int32\n         * for a large file seek.\n         */\n        retval = (int32)os_result;\n    }\n\n    return retval;\n}\n```\n</target_code>\nPlease provide the modified OS_GenericSeek_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <stdint.h>\n\n/* Minimal stubs to make this translation self-contained for testing.\n * These try to preserve the original names and behavior for the purpose\n * of producing logging evidence. They are intentionally simple.\n */\n\ntypedef int32_t int32;\ntypedef uint32_t uint32;\ntypedef int32_t OS_object_token_t;\n\ntypedef struct\n{\n    int fd;\n} OS_impl_file_internal_record_t;\n\n/* A small table of file records for the OS_OBJECT_TABLE_GET stub */\nstatic OS_impl_file_internal_record_t OS_impl_file_table[16];\nstatic void *OS_impl_filehandle_table = (void *)OS_impl_file_table; /* unused placeholder */\n\n/* Replace macro with an inline function for this test harness */\nstatic inline OS_impl_file_internal_record_t *OS_OBJECT_TABLE_GET(void *table, OS_object_token_t token)\n{\n    /* Bound-check token to avoid UB in test harness */\n    int idx = (int)token;\n    if (idx < 0)\n    {\n        idx = 0;\n    }\n    else if (idx >= (int)(sizeof(OS_impl_file_table) / sizeof(OS_impl_file_table[0])))\n    {\n        idx = (int)(sizeof(OS_impl_file_table) / sizeof(OS_impl_file_table[0])) - 1;\n    }\n    return &OS_impl_file_table[idx];\n}\n\n/* Logging helper that appends to /tmp/logs/683.txt */\nstatic void write_log(const char *fmt, ...)\n{\n    /* Try to create the logs directory; ignore errors */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/683.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fflush(f);\n    fclose(f);\n}\n\n/* Provide OS_DEBUG as a function so existing calls compile as-is. */\nstatic void OS_DEBUG(const char *fmt, ...)\n{\n    va_list ap;\n    va_start(ap, fmt);\n    /* Prefix debug messages so they stand out in the log */\n    write_log(\"[OS_DEBUG] \");\n    /* Write the formatted message to the same log file */\n    {\n        char buf[1024];\n        vsnprintf(buf, sizeof(buf), fmt, ap);\n        write_log(\"%s\", buf);\n    }\n    va_end(ap);\n}\n\n/* Typical return codes used by the original function */\nenum\n{\n    OS_ERROR = -1,\n    OS_ERR_OPERATION_NOT_SUPPORTED = -2,\n    OS_SEEK_SET = 0,\n    OS_SEEK_CUR = 1,\n    OS_SEEK_END = 2,\n};\n\n/* The original function with inserted probes/logging to capture control flow\n * and state relevant to the reported Rule 8.13 violation scenario.\n * The logic is preserved; only logging calls were added.\n */\nint32 OS_GenericSeek_Impl(const OS_object_token_t *token, int32 offset, uint32 whence)\n{\n    int                             where;\n    off_t                           os_result;\n    int32                           retval;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Retrieve implementation record (as original code did) */\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Probe: log token and impl pointer state */\n    write_log(\"[probe] OS_GenericSeek_Impl called - token=%d, impl=%p\\n\", (int)*token, (void *)impl);\n    if (impl != NULL)\n    {\n        write_log(\"[probe] impl->fd=%d\\n\", impl->fd);\n    }\n\n    /* Map whence value and log the decision path */\n    write_log(\"[probe] original whence=%u, offset=%d\\n\", (unsigned)whence, (int)offset);\n    switch (whence)\n    {\n        case OS_SEEK_SET:\n            where = SEEK_SET;\n            write_log(\"[probe] whence -> SEEK_SET (where=%d)\\n\", where);\n            break;\n        case OS_SEEK_CUR:\n            where = SEEK_CUR;\n            write_log(\"[probe] whence -> SEEK_CUR (where=%d)\\n\", where);\n            break;\n        case OS_SEEK_END:\n            where = SEEK_END;\n            write_log(\"[probe] whence -> SEEK_END (where=%d)\\n\", where);\n            break;\n        default:\n            write_log(\"[probe] whence invalid -> returning OS_ERROR\\n\");\n            return OS_ERROR;\n    }\n\n    /* Log parameters about to be used for lseek */\n    write_log(\"[probe] calling lseek(fd=%d, offset=%d, where=%d)\\n\", impl->fd, (int)offset, where);\n\n    os_result = lseek(impl->fd, (off_t)offset, where);\n\n    /* Log raw result and errno for diagnosis */\n    write_log(\"[probe] lseek returned os_result=%lld, errno=%d (%s)\\n\", (long long)os_result, errno, strerror(errno));\n\n    if (os_result == (off_t)-1)\n    {\n        if (errno == ESPIPE)\n        {\n            write_log(\"[probe] lseek error path: ESPIPE -> OS_ERR_OPERATION_NOT_SUPPORTED\\n\");\n            retval = OS_ERR_OPERATION_NOT_SUPPORTED;\n        }\n        else\n        {\n            /* Preserve original debug call but also ensure it goes to the file log */\n            OS_DEBUG(\"lseek: %s\\n\", strerror(errno));\n            write_log(\"[probe] lseek error path: other errno -> OS_ERROR\\n\");\n            retval = OS_ERROR;\n        }\n    }\n    else\n    {\n        /* convert value to int32 type for returning to caller.\n         * Note that this could potentially overflow an int32 for a large file seek.\n         */\n        retval = (int32)os_result;\n        write_log(\"[probe] lseek success -> retval=%d\\n\", (int)retval);\n    }\n\n    write_log(\"[probe] returning retval=%d\\n\", (int)retval);\n\n    return retval;\n}\n"
}