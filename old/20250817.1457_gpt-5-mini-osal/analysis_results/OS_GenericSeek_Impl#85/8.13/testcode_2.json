{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'impl' is declared as a mutable pointer (OS_impl_file_internal_record_t *impl) but in OS_GenericSeek_Impl it is only used for read-only access (impl->fd is read). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible \u2014 e.g. declare as 'const OS_impl_file_internal_record_t *impl'. Thus the code fragment 'impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);' contributes to a rule violation because the pointer is not const-qualified even though it could be.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericSeek_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/683.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GenericSeek_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GenericSeek_Impl:\n```c\nint32 OS_GenericSeek_Impl(const OS_object_token_t *token, int32 offset, uint32 whence)\n{\n    int                             where;\n    off_t                           os_result;\n    int32                           retval;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    switch (whence)\n    {\n        case OS_SEEK_SET:\n            where = SEEK_SET;\n            break;\n        case OS_SEEK_CUR:\n            where = SEEK_CUR;\n            break;\n        case OS_SEEK_END:\n            where = SEEK_END;\n            break;\n        default:\n            return OS_ERROR;\n    }\n\n    os_result = lseek(impl->fd, (off_t)offset, where);\n    if (os_result == (off_t)-1)\n    {\n        if (errno == ESPIPE)\n        {\n            /*\n             * this means the user tried to seek on a pipe, socket,\n             * or other fifo-like handle that doesn't support seeking.\n             *\n             * Use a different error code to differentiate from an\n             * error involving a bad whence/offset\n             */\n            retval = OS_ERR_OPERATION_NOT_SUPPORTED;\n        }\n        else\n        {\n            /*\n             * Most likely the \"whence\" and/or \"offset\" combo was not valid.\n             */\n            OS_DEBUG(\"lseek: %s\\n\", strerror(errno));\n            retval = OS_ERROR;\n        }\n    }\n    else\n    {\n        /*\n         * convert value to int32 type for returning to caller.\n         * Note that this could potentially overflow an int32\n         * for a large file seek.\n         */\n        retval = (int32)os_result;\n    }\n\n    return retval;\n}\n```\n</target_code>\nPlease provide the modified OS_GenericSeek_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <string.h>\n#include <unistd.h>\n#include <inttypes.h>\n\n/* Probe helper: append formatted messages to the log file. */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/683.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails, do not alter program behavior; simply return. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_GenericSeek_Impl(const OS_object_token_t *token, int32 offset, uint32 whence)\n{\n    int                             where;\n    off_t                           os_result;\n    int32                           retval;\n    OS_impl_file_internal_record_t *impl;\n\n    os_probe_log(\"ENTER: OS_GenericSeek_Impl token_ptr=%p\", (const void *)token);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Log the impl pointer immediately after retrieval to show how it's used. */\n    if (impl != NULL)\n    {\n        /* Attempt to log the file descriptor field which is later read-only in this function. */\n        os_probe_log(\"impl retrieved: impl_ptr=%p, impl->fd=%d\", (const void *)impl, impl->fd);\n    }\n    else\n    {\n        os_probe_log(\"impl retrieved: impl_ptr=NULL\");\n    }\n\n    switch (whence)\n    {\n        case OS_SEEK_SET:\n            where = SEEK_SET;\n            break;\n        case OS_SEEK_CUR:\n            where = SEEK_CUR;\n            break;\n        case OS_SEEK_END:\n            where = SEEK_END;\n            break;\n        default:\n            os_probe_log(\"invalid whence: %u -> returning OS_ERROR\", (unsigned)whence);\n            return OS_ERROR;\n    }\n\n    os_probe_log(\"whence=%u mapped where=%d offset=%d\", (unsigned)whence, where, (int)offset);\n\n    os_result = lseek(impl->fd, (off_t)offset, where);\n\n    os_probe_log(\"lseek called: fd=%d offset=%d where=%d -> os_result=%jd errno=%d (%s)\",\n                 impl->fd, (int)offset, where, (intmax_t)os_result, errno, strerror(errno));\n\n    if (os_result == (off_t)-1)\n    {\n        if (errno == ESPIPE)\n        {\n            /*\n             * this means the user tried to seek on a pipe, socket,\n             * or other fifo-like handle that doesn't support seeking.\n             *\n             * Use a different error code to differentiate from an\n             * error involving a bad whence/offset\n             */\n            retval = OS_ERR_OPERATION_NOT_SUPPORTED;\n            os_probe_log(\"result: ESPIPE -> retval=%d\", retval);\n        }\n        else\n        {\n            /*\n             * Most likely the \"whence\" and/or \"offset\" combo was not valid.\n             */\n            OS_DEBUG(\"lseek: %s\\n\", strerror(errno));\n            retval = OS_ERROR;\n            os_probe_log(\"result: lseek error (%d: %s) -> retval=%d\", errno, strerror(errno), retval);\n        }\n    }\n    else\n    {\n        /*\n         * convert value to int32 type for returning to caller.\n         * Note that this could potentially overflow an int32\n         * for a large file seek.\n         */\n        retval = (int32)os_result;\n        os_probe_log(\"success: os_result=%jd -> retval=%d\", (intmax_t)os_result, retval);\n    }\n\n    os_probe_log(\"EXIT: OS_GenericSeek_Impl returning retval=%d\", retval);\n\n    return retval;\n}\n"
}