{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if OS_BinSemTake_Impl is declared to take a non-const pointer (e.g. int32 OS_BinSemTake_Impl(OS_object_token_t *token)) but does not modify the token. In that case the parameter should be declared as a pointer to const (const OS_object_token_t *) and passing &token would then satisfy MISRA C 2023 Rule 8.13. If, however, OS_BinSemTake_Impl legitimately modifies the token, then a non-const parameter is appropriate and there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemTake code that contains useful probe functions that print useful logs to a file \"/tmp/logs/979.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemTake as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemTake:\n```c\nint32 OS_BinSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemTake_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemTake code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helpers: write traces to /tmp/logs/979.txt */\nstatic void probe_log_simple(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/979.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s\", msg);\n        fclose(f);\n    }\n}\n\nstatic void probe_log_printf(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/979.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nstatic void probe_dump_token_hex(const char *label, const OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/979.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"%s: token addr=%p sizeof=%zu\\n\", label, (const void *)token, sizeof(*token));\n\n    const unsigned char *p = (const unsigned char *)token;\n    size_t i;\n    for (i = 0U; i < sizeof(*token); ++i)\n    {\n        if ((i % 16U) == 0U)\n        {\n            fprintf(f, \"%08zx: \", i);\n        }\n        fprintf(f, \"%02x \", (unsigned)p[i]);\n        if ((i % 16U) == 15U)\n        {\n            fprintf(f, \"\\n\");\n        }\n    }\n    if ((i % 16U) != 0U)\n    {\n        fprintf(f, \"\\n\");\n    }\n\n    fclose(f);\n}\n\nint32 OS_BinSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Entry log */\n    probe_log_printf(\"OS_BinSemTake: entry\\n\");\n    probe_log_printf(\"OS_BinSemTake: sem_id=%\" PRIdPTR \"\\n\", (intptr_t)sem_id);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    probe_log_printf(\"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Snapshot token state before calling implementation */\n        unsigned char *snapshot = (unsigned char *)malloc(sizeof(token));\n        if (snapshot != NULL)\n        {\n            memcpy(snapshot, &token, sizeof(token));\n        }\n\n        /* Dump before state */\n        probe_dump_token_hex(\"token_before\", &token);\n\n        /* Call implementation (preserve original logic) */\n        return_code = OS_BinSemTake_Impl(&token);\n        probe_log_printf(\"OS_BinSemTake_Impl returned %d\\n\", (int)return_code);\n\n        /* Dump after state */\n        probe_dump_token_hex(\"token_after\", &token);\n\n        /* Compare snapshot to detect any modification to token */\n        if (snapshot != NULL)\n        {\n            const unsigned char *after = (const unsigned char *)&token;\n            size_t i;\n            int changed = 0;\n            FILE *f = fopen(\"/tmp/logs/979.txt\", \"a\");\n            if (f != NULL)\n            {\n                fprintf(f, \"token_diff: checking %zu bytes\\n\", sizeof(token));\n                for (i = 0U; i < sizeof(token); ++i)\n                {\n                    if (snapshot[i] != after[i])\n                    {\n                        if (!changed)\n                        {\n                            fprintf(f, \"token_diff: differences at offsets (hex old->new):\\n\");\n                        }\n                        fprintf(f, \"  0x%04zx: %02x -> %02x\\n\", i, snapshot[i], after[i]);\n                        changed = 1;\n                    }\n                }\n                if (!changed)\n                {\n                    fprintf(f, \"token_diff: no changes detected\\n\");\n                }\n                fclose(f);\n            }\n\n            free(snapshot);\n        }\n    }\n\n    /* Exit log */\n    probe_log_printf(\"OS_BinSemTake: exit returning %d\\n\", (int)return_code);\n\n    return return_code;\n}\n"
}