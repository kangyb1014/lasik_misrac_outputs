{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void probe_log_simple(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/979.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s\", msg);\n        fclose(f);\n    }\n}\nstatic void probe_log_printf(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/979.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\nstatic void probe_dump_token_hex(const char *label, const OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/979.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"%s: token addr=%p sizeof=%zu\\n\", label, (const void *)token, sizeof(*token));\n\n    const unsigned char *p = (const unsigned char *)token;\n    size_t i;\n    for (i = 0U; i < sizeof(*token); ++i)\n    {\n        if ((i % 16U) == 0U)\n        {\n            fprintf(f, \"%08zx: \", i);\n        }\n        fprintf(f, \"%02x \", (unsigned)p[i]);\n        if ((i % 16U) == 15U)\n        {\n            fprintf(f, \"\\n\");\n        }\n    }\n    if ((i % 16U) != 0U)\n    {\n        fprintf(f, \"\\n\");\n    }\n\n    fclose(f);\n}\n\nint32 OS_BinSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Entry log */\n    probe_log_printf(\"OS_BinSemTake: entry\\n\");\n    probe_log_printf(\"OS_BinSemTake: sem_id=%\" PRIdPTR \"\\n\", (intptr_t)sem_id);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    probe_log_printf(\"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Snapshot token state before calling implementation */\n        unsigned char *snapshot = (unsigned char *)malloc(sizeof(token));\n        if (snapshot != NULL)\n        {\n            memcpy(snapshot, &token, sizeof(token));\n        }\n\n        /* Dump before state */\n        probe_dump_token_hex(\"token_before\", &token);\n\n        /* Call implementation (preserve original logic) */\n        return_code = OS_BinSemTake_Impl(&token);\n        probe_log_printf(\"OS_BinSemTake_Impl returned %d\\n\", (int)return_code);\n\n        /* Dump after state */\n        probe_dump_token_hex(\"token_after\", &token);\n\n        /* Compare snapshot to detect any modification to token */\n        if (snapshot != NULL)\n        {\n            const unsigned char *after = (const unsigned char *)&token;\n            size_t i;\n            int changed = 0;\n            FILE *f = fopen(\"/tmp/logs/979.txt\", \"a\");\n            if (f != NULL)\n            {\n                fprintf(f, \"token_diff: checking %zu bytes\\n\", sizeof(token));\n                for (i = 0U; i < sizeof(token); ++i)\n                {\n                    if (snapshot[i] != after[i])\n                    {\n                        if (!changed)\n                        {\n                            fprintf(f, \"token_diff: differences at offsets (hex old->new):\\n\");\n                        }\n                        fprintf(f, \"  0x%04zx: %02x -> %02x\\n\", i, snapshot[i], after[i]);\n                        changed = 1;\n                    }\n                }\n                if (!changed)\n                {\n                    fprintf(f, \"token_diff: no changes detected\\n\");\n                }\n                fclose(f);\n            }\n\n            free(snapshot);\n        }\n    }\n\n    /* Exit log */\n    probe_log_printf(\"OS_BinSemTake: exit returning %d\\n\", (int)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpcl_16vt7/src/src/os/shared/src/osapi-binsem.c: In function 'probe_log_printf':\n/tmp/tmpcl_16vt7/src/src/os/shared/src/osapi-binsem.c:219:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  219 |     vfprintf(f, fmt, ap);\n      |                      ^~\n/tmp/tmpcl_16vt7/src/src/os/shared/src/osapi-binsem.c: In function 'OS_BinSemTake':\n/tmp/tmpcl_16vt7/src/src/os/shared/src/osapi-binsem.c:262:47: error: expected ')' before 'PRIdPTR'\n  262 |     probe_log_printf(\"OS_BinSemTake: sem_id=%\" PRIdPTR \"\\n\", (intptr_t)sem_id);\n      |                     ~                         ^~~~~~~~\n      |                                               )\n/tmp/tmpcl_16vt7/src/src/os/shared/src/osapi-binsem.c:51:1: note: 'PRIdPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   50 | #include \"os-shared-idmap.h\"\n  +++ |+#include <inttypes.h>\n   51 | \ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-binsem.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-binsem.dir/__/__/os/shared/src/osapi-binsem.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3167: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-binsem.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_BinSemTake as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include \"os-shared-idmap.h\"\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\nstatic void probe_log_simple(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/979.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s\", msg);\n        fclose(f);\n    }\n}\nstatic void probe_log_printf(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/979.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n    va_start(ap, fmt);\n    /* Cast to the library's va_list type to avoid mismatched typedef issues in some builds */\n    vfprintf(f, fmt, (va_list)ap);\n    va_end(ap);\n    fclose(f);\n}\nstatic void probe_dump_token_hex(const char *label, const OS_object_token_t *token)\n{\n    FILE *f = fopen(\"/tmp/logs/979.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"%s: token addr=%p sizeof=%zu\\n\", label, (const void *)token, sizeof(*token));\n\n    const unsigned char *p = (const unsigned char *)token;\n    size_t i;\n    for (i = 0U; i < sizeof(*token); ++i)\n    {\n        if ((i % 16U) == 0U)\n        {\n            fprintf(f, \"%08zx: \", i);\n        }\n        fprintf(f, \"%02x \", (unsigned)p[i]);\n        if ((i % 16U) == 15U)\n        {\n            fprintf(f, \"\\n\");\n        }\n    }\n    if ((i % 16U) != 0U)\n    {\n        fprintf(f, \"\\n\");\n    }\n\n    fclose(f);\n}\n\nint32 OS_BinSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Entry log */\n    probe_log_printf(\"OS_BinSemTake: entry\\n\");\n    probe_log_printf(\"OS_BinSemTake: sem_id=%\" PRIdPTR \"\\n\", (intptr_t)sem_id);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    probe_log_printf(\"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Snapshot token state before calling implementation */\n        unsigned char *snapshot = (unsigned char *)malloc(sizeof(token));\n        if (snapshot != NULL)\n        {\n            memcpy(snapshot, &token, sizeof(token));\n        }\n\n        /* Dump before state */\n        probe_dump_token_hex(\"token_before\", &token);\n\n        /* Call implementation (preserve original logic) */\n        return_code = OS_BinSemTake_Impl(&token);\n        probe_log_printf(\"OS_BinSemTake_Impl returned %d\\n\", (int)return_code);\n\n        /* Dump after state */\n        probe_dump_token_hex(\"token_after\", &token);\n\n        /* Compare snapshot to detect any modification to token */\n        if (snapshot != NULL)\n        {\n            const unsigned char *after = (const unsigned char *)&token;\n            size_t i;\n            int changed = 0;\n            FILE *f = fopen(\"/tmp/logs/979.txt\", \"a\");\n            if (f != NULL)\n            {\n                fprintf(f, \"token_diff: checking %zu bytes\\n\", sizeof(token));\n                for (i = 0U; i < sizeof(token); ++i)\n                {\n                    if (snapshot[i] != after[i])\n                    {\n                        if (!changed)\n                        {\n                            fprintf(f, \"token_diff: differences at offsets (hex old->new):\\n\");\n                        }\n                        fprintf(f, \"  0x%04zx: %02x -> %02x\\n\", i, snapshot[i], after[i]);\n                        changed = 1;\n                    }\n                }\n                if (!changed)\n                {\n                    fprintf(f, \"token_diff: no changes detected\\n\");\n                }\n                fclose(f);\n            }\n\n            free(snapshot);\n        }\n    }\n\n    /* Exit log */\n    probe_log_printf(\"OS_BinSemTake: exit returning %d\\n\", (int)return_code);\n\n    return return_code;\n}\n",
  "explanation": "Two small changes to fix the build errors:\n\n- Added #include <inttypes.h> (and other standard headers) so PRIdPTR and related types are declared.\n- Cast the local va_list variable when calling vfprintf: vfprintf(f, fmt, (va_list)ap); this avoids a typedef-mismatch error in environments where the project defines its own va_list alias (e.g. OCS_va_list) while the C library expects the native va_list type.\n\nNo other logic was modified; only headers and the vfprintf call were adjusted to resolve the compilation issues."
}