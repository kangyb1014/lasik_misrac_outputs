{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nViolation: strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) can dereference invalid/non-terminated pointers. For example, if the stub entry was cleared (UT_ClearStubEntry does memset -> ContentTypeStr == NULL) or if the caller passes TypeName == NULL, strcmp will be invoked with a NULL pointer. Also if ContentTypeStr (or TypeName) points to a non-null-terminated buffer or to freed/invalid memory, strcmp may read past the object bounds. In these cases the use of strcmp can access beyond the bounds of the objects referenced by its pointer parameters, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemTake code that contains useful probe functions that print useful logs to a file \"/tmp/logs/983.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemTake as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemTake:\n```c\nint32 OS_BinSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_BinSemTake_Impl(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemTake code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/*\n * Probe logging helper. Writes binary dumps of the sem_id value and the\n * token object bytes plus a stage label and return code to /tmp/logs/983.txt.\n * This function avoids dereferencing any pointers that may be stored inside\n * the token object; it only inspects the raw bytes of provided memory\n * locations, thus preserving original program semantics.\n */\nstatic void probe_log(const char *stage,\n                      const void *sem_id_addr, size_t sem_id_size,\n                      const void *token_ptr, size_t token_size,\n                      int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/983.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_BinSemTake] stage=%s rc=%d sem_id_size=%zu token_size=%zu sem_id_bytes=\",\n            stage, (int)return_code, sem_id_size, token_size);\n\n    /* Dump sem_id bytes (raw representation) */\n    if (sem_id_addr != NULL && sem_id_size > 0)\n    {\n        const unsigned char *p = (const unsigned char *)sem_id_addr;\n        for (size_t i = 0; i < sem_id_size; ++i)\n        {\n            fprintf(f, \"%02x\", p[i]);\n        }\n    }\n    else\n    {\n        fprintf(f, \"(null)\");\n    }\n\n    /* Dump token pointer and raw token bytes (do not dereference any pointers inside) */\n    fprintf(f, \" token_ptr=%p token_bytes=\", token_ptr);\n    if (token_ptr != NULL && token_size > 0)\n    {\n        const unsigned char *q = (const unsigned char *)token_ptr;\n        for (size_t i = 0; i < token_size; ++i)\n        {\n            fprintf(f, \"%02x\", q[i]);\n        }\n    }\n    else\n    {\n        fprintf(f, \"(null)\");\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Forward declarations: the real definitions are provided elsewhere in the system. */\nextern int32 OS_ObjectIdGetById(int lock_mode, int local_type, osal_id_t id, OS_object_token_t *token);\nextern int32 OS_BinSemTake_Impl(OS_object_token_t *token);\n\nint32 OS_BinSemTake(osal_id_t sem_id)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Initial probe: entry state */\n    probe_log(\"entry\", &sem_id, sizeof(sem_id), &token, sizeof(token), 0);\n\n    /* Check Parameters */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_NONE, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Probe after object id lookup to capture returned token bytes and return code */\n    probe_log(\"after_getbyid\", &sem_id, sizeof(sem_id), &token, sizeof(token), return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Probe before calling the implementation to capture exact token passed */\n        probe_log(\"before_impl\", &sem_id, sizeof(sem_id), &token, sizeof(token), return_code);\n\n        return_code = OS_BinSemTake_Impl(&token);\n\n        /* Probe after implementation returns */\n        probe_log(\"after_impl\", &sem_id, sizeof(sem_id), &token, sizeof(token), return_code);\n    }\n\n    /* Final probe: exit state and returned code */\n    probe_log(\"exit\", &sem_id, sizeof(sem_id), &token, sizeof(token), return_code);\n\n    return return_code;\n}\n"
}