{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is declared as a non-const pointer (OS_impl_queue_internal_record_t *impl) but in this function it is only used for read access (impl->id). Per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible \u2014 e.g. const OS_impl_queue_internal_record_t *impl. Therefore the fragment impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token); together with the non-const declaration constitutes a Rule 8.13 violation (unless there is a justified reason that the pointed object must be modifiable in this function).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueDelete_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/427.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueDelete_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueDelete_Impl:\n```c\nint32 OS_QueueDelete_Impl(const OS_object_token_t *token)\n{\n    int32                            return_code;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /* Try to delete and unlink the queue */\n    if (mq_close(impl->id) != 0)\n    {\n        OS_DEBUG(\"OS_QueueDelete Error during mq_close(). errno = %d (%s)\\n\", errno, strerror(errno));\n        return_code = OS_ERROR;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueDelete_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe helpers: write control-flow and state info to /tmp/logs/427.txt */\nstatic void OS_QueueDelete_Probe_Enter(const void *token_ptr, const void *impl_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/427.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"OS_QueueDelete_Impl: ENTER\\n\");\n    fprintf(f, \"  token_ptr=%p\\n\", token_ptr);\n    fprintf(f, \"  impl_ptr=%p\\n\", impl_ptr);\n    fflush(f);\n    fclose(f);\n}\n\nstatic void OS_QueueDelete_Probe_Exit(const void *token_ptr, const void *impl_ptr, int mq_result)\n{\n    FILE *f = fopen(\"/tmp/logs/427.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"OS_QueueDelete_Impl: EXIT\\n\");\n    fprintf(f, \"  token_ptr=%p\\n\", token_ptr);\n    fprintf(f, \"  impl_ptr=%p\\n\", impl_ptr);\n    /* Log mq_close result and errno/message */\n    fprintf(f, \"  mq_close_result=%d\\n\", mq_result);\n    fprintf(f, \"  errno=%d (%s)\\n\", errno, strerror(errno));\n    fflush(f);\n    fclose(f);\n}\n\n/* Original function with added probes. The original logic is preserved. */\nint32 OS_QueueDelete_Impl(const OS_object_token_t *token)\n{\n    int32                            return_code;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /* Probe: record entry and pointers/state available before mq_close */\n    OS_QueueDelete_Probe_Enter((const void *)token, (const void *)impl);\n\n    /* Try to delete and unlink the queue */\n    if (mq_close(impl->id) != 0)\n    {\n        /* Probe: record exit state including error information */\n        OS_QueueDelete_Probe_Exit((const void *)token, (const void *)impl, -1);\n\n        OS_DEBUG(\"OS_QueueDelete Error during mq_close(). errno = %d (%s)\\n\", errno, strerror(errno));\n        return_code = OS_ERROR;\n    }\n    else\n    {\n        /* Probe: record successful exit */\n        OS_QueueDelete_Probe_Exit((const void *)token, (const void *)impl, 0);\n\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n"
}