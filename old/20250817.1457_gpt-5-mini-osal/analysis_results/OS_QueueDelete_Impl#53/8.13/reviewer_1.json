{
  "user_message": "An agent A claimed that the following OS_QueueDelete_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_QueueDelete_Impl.\n```c\nint32 OS_QueueDelete_Impl(const OS_object_token_t *token)\n{\n    int32                            return_code;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /* Try to delete and unlink the queue */\n    if (mq_close(impl->id) != 0)\n    {\n        OS_DEBUG(\"OS_QueueDelete Error during mq_close(). errno = %d (%s)\\n\", errno, strerror(errno));\n        return_code = OS_ERROR;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'impl' is declared as a non-const pointer (OS_impl_queue_internal_record_t *impl) but is only used for read access (impl->id is only read). Therefore 'impl' could be declared to point to a const-qualified type (const OS_impl_queue_internal_record_t *impl). The fragment if (mq_close(impl->id) != 0) reads impl->id and does not modify *impl, so the current non-const pointer declaration violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_QueueDelete_Impl(const OS_object_token_t *token)\n{\n    int32                            return_code;\n    OS_impl_queue_internal_record_t *impl;\n    FILE *logf = fopen(\"/tmp/logs/427.txt\", \"a\");\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER OS_QueueDelete_Impl: token=%p\\n\", (const void *)token);\n        fflush(logf);\n    }\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"impl pointer = %p\\n\", (void *)impl);\n        fflush(logf);\n    }\n\n    /* Try to delete and unlink the queue */\n    if (impl != NULL)\n    {\n        /* Log the id value in a portable way using uintptr_t */\n        if (logf != NULL)\n        {\n            fprintf(logf, \"impl->id = %llu\\n\", (unsigned long long)(uintptr_t)impl->id);\n            fflush(logf);\n        }\n    }\n    else\n    {\n        if (logf != NULL)\n        {\n            fprintf(logf, \"Warning: impl is NULL before mq_close()\\n\");\n            fflush(logf);\n        }\n    }\n\n    {\n        int mqret = mq_close(impl->id);\n\n        if (logf != NULL)\n        {\n            fprintf(logf, \"mq_close returned %d, errno = %d (%s)\\n\", mqret, errno, strerror(errno));\n            fflush(logf);\n        }\n\n        if (mqret != 0)\n        {\n            OS_DEBUG(\"OS_QueueDelete Error during mq_close(). errno = %d (%s)\\n\", errno, strerror(errno));\n            return_code = OS_ERROR;\n        }\n        else\n        {\n            return_code = OS_SUCCESS;\n        }\n    }\n\n    if (logf != NULL)\n    {\n        fprintf(logf, \"EXIT OS_QueueDelete_Impl: return_code = %ld\\n\", (long)return_code);\n        fclose(logf);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_QueueDelete_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In OS_QueueDelete_Impl the local variable impl is only used for read access (impl->id is read and never used to modify the pointed-to object), so per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type (e.g. const OS_impl_queue_internal_record_t *impl). Making impl a pointer-to-const is allowed (assigning a non-const object pointer to a const-qualified pointer is valid), and accessing impl->id to pass its value to mq_close does not prevent adding const. The provided test/logging code (which merely logs and does not exercise the function) does not affect the applicability of the rule. Therefore the report of a Rule 8.13 violation is correct."
}