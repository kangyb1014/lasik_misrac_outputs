{
  "user_message": "An agent A claimed that the following OS_QueueDelete_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_QueueDelete_Impl.\n```c\nint32 OS_QueueDelete_Impl(const OS_object_token_t *token)\n{\n    int32                            return_code;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /* Try to delete and unlink the queue */\n    if (mq_close(impl->id) != 0)\n    {\n        OS_DEBUG(\"OS_QueueDelete Error during mq_close(). errno = %d (%s)\\n\", errno, strerror(errno));\n        return_code = OS_ERROR;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'impl' is declared as 'OS_impl_queue_internal_record_t *impl;' but in the function it is only used for reading (impl->id passed to mq_close) and never modifies the pointed-to object. Per MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type when possible (e.g. 'const OS_impl_queue_internal_record_t *impl;'). Therefore this is a violation.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_QueueDelete_Impl_log(const char *stage, const void *token_ptr, void *impl_ptr, long impl_id, int mq_ret, int errnum)\n{\n    FILE *f = fopen(\"/tmp/logs/427.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(f, \"[%ld] %s: token=%p impl=%p impl->id=%ld mq_ret=%d errno=%d (%s)\\n\",\n                (long)t,\n                stage,\n                token_ptr,\n                impl_ptr,\n                impl_id,\n                mq_ret,\n                errnum,\n                (errnum != 0) ? strerror(errnum) : \"0\");\n        fclose(f);\n    }\n}\n\nint32 OS_QueueDelete_Impl(const OS_object_token_t *token)\n{\n    int32                            return_code;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /* Log state just before attempting mq_close */\n    /* Note: preserve original behavior: we log impl->id in the same manner it is used below. */\n    OS_QueueDelete_Impl_log(\"BEFORE_mq_close\", token, (void *)impl, (long)impl->id, -1, 0);\n\n    /* Try to delete and unlink the queue */\n    if (mq_close(impl->id) != 0)\n    {\n        /* Capture errno immediately after failure for accurate reporting */\n        int saved_errno = errno;\n\n        OS_DEBUG(\"OS_QueueDelete Error during mq_close(). errno = %d (%s)\\n\", saved_errno, strerror(saved_errno));\n\n        /* Log the failure result and errno */\n        OS_QueueDelete_Impl_log(\"AFTER_mq_close_FAILURE\", token, (void *)impl, (long)impl->id, -1, saved_errno);\n\n        return_code = OS_ERROR;\n    }\n    else\n    {\n        /* Log the success result */\n        OS_QueueDelete_Impl_log(\"AFTER_mq_close_SUCCESS\", token, (void *)impl, (long)impl->id, 0, 0);\n\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_QueueDelete_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_QueueDelete_Impl the local pointer impl is only used to read impl->id (passed to mq_close) and is never used to modify the pointed-to object. Per MISRA C 2023 Rule 8.13 a pointer shall point to a const-qualified type whenever possible, so the local declaration should be const OS_impl_queue_internal_record_t *impl; (assigning from the existing non-const result of OS_OBJECT_TABLE_GET is permitted). Changing the declaration to a pointer-to-const removes the violation and documents that the function does not modify the record. The test logging code and empty log do not affect this rule assessment."
}