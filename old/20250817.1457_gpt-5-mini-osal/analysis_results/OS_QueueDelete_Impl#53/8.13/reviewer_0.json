{
  "user_message": "An agent A claimed that the following OS_QueueDelete_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_QueueDelete_Impl.\n```c\nint32 OS_QueueDelete_Impl(const OS_object_token_t *token)\n{\n    int32                            return_code;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /* Try to delete and unlink the queue */\n    if (mq_close(impl->id) != 0)\n    {\n        OS_DEBUG(\"OS_QueueDelete Error during mq_close(). errno = %d (%s)\\n\", errno, strerror(errno));\n        return_code = OS_ERROR;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'impl' is declared as a non-const pointer (OS_impl_queue_internal_record_t *impl) but in this function it is only used for read access (impl->id). Per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible \u2014 e.g. const OS_impl_queue_internal_record_t *impl. Therefore the fragment impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token); together with the non-const declaration constitutes a Rule 8.13 violation (unless there is a justified reason that the pointed object must be modifiable in this function).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_QueueDelete_Probe_Enter(const void *token_ptr, const void *impl_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/427.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"OS_QueueDelete_Impl: ENTER\\n\");\n    fprintf(f, \"  token_ptr=%p\\n\", token_ptr);\n    fprintf(f, \"  impl_ptr=%p\\n\", impl_ptr);\n    fflush(f);\n    fclose(f);\n}\nstatic void OS_QueueDelete_Probe_Exit(const void *token_ptr, const void *impl_ptr, int mq_result)\n{\n    FILE *f = fopen(\"/tmp/logs/427.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"OS_QueueDelete_Impl: EXIT\\n\");\n    fprintf(f, \"  token_ptr=%p\\n\", token_ptr);\n    fprintf(f, \"  impl_ptr=%p\\n\", impl_ptr);\n    /* Log mq_close result and errno/message */\n    fprintf(f, \"  mq_close_result=%d\\n\", mq_result);\n    fprintf(f, \"  errno=%d (%s)\\n\", errno, strerror(errno));\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_QueueDelete_Impl(const OS_object_token_t *token)\n{\n    int32                            return_code;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /* Probe: record entry and pointers/state available before mq_close */\n    OS_QueueDelete_Probe_Enter((const void *)token, (const void *)impl);\n\n    /* Try to delete and unlink the queue */\n    if (mq_close(impl->id) != 0)\n    {\n        /* Probe: record exit state including error information */\n        OS_QueueDelete_Probe_Exit((const void *)token, (const void *)impl, -1);\n\n        OS_DEBUG(\"OS_QueueDelete Error during mq_close(). errno = %d (%s)\\n\", errno, strerror(errno));\n        return_code = OS_ERROR;\n    }\n    else\n    {\n        /* Probe: record successful exit */\n        OS_QueueDelete_Probe_Exit((const void *)token, (const void *)impl, 0);\n\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_QueueDelete_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's assessment is correct. In OS_QueueDelete_Impl the local pointer impl is declared as OS_impl_queue_internal_record_t * but is only used for read access (impl->id and passing its address to probe functions that take const void *). Per MISRA C:2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible; here the pointer can and should be declared const OS_impl_queue_internal_record_t *impl to reflect read-only usage. Changing the declaration to const is safe (assigning a non-const object pointer to a pointer-to-const is allowed). The test probe/logging behaviour and empty log do not affect the const-correctness judgment. Unless there is an external reason that impl must be modifiable in this function (not shown), the reported violation is valid."
}