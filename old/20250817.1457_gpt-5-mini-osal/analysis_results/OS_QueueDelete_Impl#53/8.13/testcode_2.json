{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is declared as 'OS_impl_queue_internal_record_t *impl;' but in the function it is only used for reading (impl->id passed to mq_close) and never modifies the pointed-to object. Per MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type when possible (e.g. 'const OS_impl_queue_internal_record_t *impl;'). Therefore this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueDelete_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/427.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueDelete_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueDelete_Impl:\n```c\nint32 OS_QueueDelete_Impl(const OS_object_token_t *token)\n{\n    int32                            return_code;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /* Try to delete and unlink the queue */\n    if (mq_close(impl->id) != 0)\n    {\n        OS_DEBUG(\"OS_QueueDelete Error during mq_close(). errno = %d (%s)\\n\", errno, strerror(errno));\n        return_code = OS_ERROR;\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueDelete_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <time.h>\n\n/* Probe helper: write a single line to the log file with a timestamp. */\nstatic void OS_QueueDelete_Impl_log(const char *stage, const void *token_ptr, void *impl_ptr, long impl_id, int mq_ret, int errnum)\n{\n    FILE *f = fopen(\"/tmp/logs/427.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        fprintf(f, \"[%ld] %s: token=%p impl=%p impl->id=%ld mq_ret=%d errno=%d (%s)\\n\",\n                (long)t,\n                stage,\n                token_ptr,\n                impl_ptr,\n                impl_id,\n                mq_ret,\n                errnum,\n                (errnum != 0) ? strerror(errnum) : \"0\");\n        fclose(f);\n    }\n}\n\nint32 OS_QueueDelete_Impl(const OS_object_token_t *token)\n{\n    int32                            return_code;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /* Log state just before attempting mq_close */\n    /* Note: preserve original behavior: we log impl->id in the same manner it is used below. */\n    OS_QueueDelete_Impl_log(\"BEFORE_mq_close\", token, (void *)impl, (long)impl->id, -1, 0);\n\n    /* Try to delete and unlink the queue */\n    if (mq_close(impl->id) != 0)\n    {\n        /* Capture errno immediately after failure for accurate reporting */\n        int saved_errno = errno;\n\n        OS_DEBUG(\"OS_QueueDelete Error during mq_close(). errno = %d (%s)\\n\", saved_errno, strerror(saved_errno));\n\n        /* Log the failure result and errno */\n        OS_QueueDelete_Impl_log(\"AFTER_mq_close_FAILURE\", token, (void *)impl, (long)impl->id, -1, saved_errno);\n\n        return_code = OS_ERROR;\n    }\n    else\n    {\n        /* Log the success result */\n        OS_QueueDelete_Impl_log(\"AFTER_mq_close_SUCCESS\", token, (void *)impl, (long)impl->id, 0, 0);\n\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n"
}