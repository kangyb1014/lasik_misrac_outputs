{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function-pointer typedef has a non-const data pointer parameter: typedef bool (*OS_ObjectMatchFunc_t)(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj); The other parameters are const, implying the match callback only reads token/obj. If the callback does not need to modify the data pointed to by 'ref' (and the surrounding code treats it as read-only), then 'ref' should be const-qualified (const void *ref). As written this violates MISRA C 2023 Rule 8.13. Suggested fix: change the typedef to use const void *ref (and change callers accordingly).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetBySearch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1595.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdGetBySearch as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetBySearch:\n```c\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n    else\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdGetBySearch code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper. Appends human-readable traces to /tmp/logs/1595.txt */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1595.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Log entry state: which parameters were provided and pointer values */\n    os_probe_log(\"ENTRY: OS_ObjectIdGetBySearch lock_mode=%d idtype=%u MatchFunc=%s arg=%p token=%p\",\n                 (int)lock_mode, (unsigned)idtype, (MatchFunc != NULL) ? \"present\" : \"NULL\", arg, (void *)token);\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    os_probe_log(\"After TransactionInit: token=%p\", (void *)token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    os_probe_log(\"After FindNextMatch: return_code=%d token=%p\", (int)return_code, (void *)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        os_probe_log(\"Match found. Calling OS_ObjectIdConvertToken (lock_mode=%d)\", (int)lock_mode);\n        return_code = OS_ObjectIdConvertToken(token);\n        os_probe_log(\"After ConvertToken: return_code=%d token=%p\", (int)return_code, (void *)token);\n    }\n    else\n    {\n        os_probe_log(\"No match found (return_code=%d). Calling OS_ObjectIdTransactionCancel\", (int)return_code);\n        OS_ObjectIdTransactionCancel(token);\n        os_probe_log(\"After TransactionCancel: token=%p\", (void *)token);\n    }\n\n    os_probe_log(\"EXIT: OS_ObjectIdGetBySearch return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}