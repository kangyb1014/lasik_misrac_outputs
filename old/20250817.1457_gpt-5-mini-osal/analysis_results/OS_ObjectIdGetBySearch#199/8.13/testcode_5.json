{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdFindNextMatch the local pointer is declared as \"OS_common_record_t *record;\" but the code only reads from the record (checks record->active_id and passes it to MatchFunc which expects a const OS_common_record_t *). Since the pointer is never used to modify the object here it could and should be declared as \"const OS_common_record_t *record;\". This omission violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetBySearch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1595.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdGetBySearch as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetBySearch:\n```c\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n    else\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdGetBySearch code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/1595.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1595.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", fp);\n    fclose(fp);\n}\n\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Log entry and input parameters (pointer values only; do not dereference unknown structures) */\n    probe_log(\"OS_ObjectIdGetBySearch ENTRY: lock_mode=%d, idtype=%d, MatchFunc=%p, arg=%p, token=%p\",\n              (int)lock_mode, (int)idtype, (void *)MatchFunc, arg, (void *)token);\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    probe_log(\"After OS_ObjectIdTransactionInit: token=%p\", (void *)token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    probe_log(\"After OS_ObjectIdFindNextMatch: return_code=%d, token=%p\",\n              (int)return_code, (void *)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"Match found: about to convert token for lock_mode=%d\", (int)lock_mode);\n\n        /* The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n\n        probe_log(\"After OS_ObjectIdConvertToken: return_code=%d, token=%p\",\n                  (int)return_code, (void *)token);\n    }\n    else\n    {\n        probe_log(\"No match found: cancelling transaction (return_code=%d)\", (int)return_code);\n        OS_ObjectIdTransactionCancel(token);\n        probe_log(\"After OS_ObjectIdTransactionCancel: token=%p\", (void *)token);\n    }\n\n    probe_log(\"OS_ObjectIdGetBySearch EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}