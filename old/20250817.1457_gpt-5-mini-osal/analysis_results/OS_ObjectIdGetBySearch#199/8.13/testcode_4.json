{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdFindNextMatch the variable 'base' is declared as 'OS_common_record_t *base;' but it is only used to read entries from the global object table (assigned from &OS_common_table[...] and then passed to OS_OBJECT_TABLE_GET to obtain a record which is used in read-only fashion). Also the MatchFunc callback expects a 'const OS_common_record_t *' parameter. Therefore 'base' (and even 'record') could and should be declared as pointer-to-const (e.g. 'const OS_common_record_t *base;') to express that the function does not modify the objects through this pointer. Not qualifying it const violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetBySearch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1595.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdGetBySearch as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetBySearch:\n```c\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n    else\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdGetBySearch code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe/log helper: append a line to the log file with contextual information. */\nstatic void OS_ObjectIdGetBySearch_log(const char *stage,\n                                       OS_lock_mode_t lock_mode,\n                                       osal_objtype_t idtype,\n                                       OS_ObjectMatchFunc_t MatchFunc,\n                                       void *arg,\n                                       OS_object_token_t *token,\n                                       int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1595.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print a compact, single-line record describing the control point and key state. */\n        fprintf(f, \"%s: lock_mode=%d, idtype=%d, MatchFunc=%p, arg=%p, token=%p, return_code=%d\\n\",\n                stage,\n                (int)lock_mode,\n                (int)idtype,\n                (void *)MatchFunc,\n                arg,\n                (void *)token,\n                (int)return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Log entry with initial parameters */\n    OS_ObjectIdGetBySearch_log(\"ENTER\", lock_mode, idtype, MatchFunc, arg, token, -1);\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    /* Log after transaction init (no return value expected from init routine) */\n    OS_ObjectIdGetBySearch_log(\"AFTER_TRANSACTION_INIT\", lock_mode, idtype, MatchFunc, arg, token, -1);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    /* Log result of FindNextMatch including returned code */\n    OS_ObjectIdGetBySearch_log(\"AFTER_FIND_NEXT_MATCH\", lock_mode, idtype, MatchFunc, arg, token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log before conversion of token */\n        OS_ObjectIdGetBySearch_log(\"BEFORE_CONVERT_TOKEN\", lock_mode, idtype, MatchFunc, arg, token, return_code);\n\n        /* The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n\n        /* Log after conversion with final return code */\n        OS_ObjectIdGetBySearch_log(\"AFTER_CONVERT_TOKEN\", lock_mode, idtype, MatchFunc, arg, token, return_code);\n    }\n    else\n    {\n        /* Log that the transaction is being cancelled */\n        OS_ObjectIdGetBySearch_log(\"BEFORE_TRANSACTION_CANCEL\", lock_mode, idtype, MatchFunc, arg, token, return_code);\n\n        OS_ObjectIdTransactionCancel(token);\n\n        /* Log after cancel */\n        OS_ObjectIdGetBySearch_log(\"AFTER_TRANSACTION_CANCEL\", lock_mode, idtype, MatchFunc, arg, token, return_code);\n    }\n\n    /* Final exit log */\n    OS_ObjectIdGetBySearch_log(\"EXIT\", lock_mode, idtype, MatchFunc, arg, token, return_code);\n\n    return return_code;\n}\n"
}