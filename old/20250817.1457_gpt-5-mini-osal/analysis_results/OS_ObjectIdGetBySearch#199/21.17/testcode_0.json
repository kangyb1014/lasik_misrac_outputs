{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(token, 0, sizeof(*token)) can write to an invalid address if the caller passes an invalid pointer (e.g. token == NULL) or a pointer to a smaller object. There is no check that 'token' is non-NULL and points to at least sizeof(OS_object_token_t) bytes before the memset. Example violation: caller calls OS_ObjectIdGetBySearch(..., NULL) -> OS_ObjectIdTransactionInit executes memset(NULL, 0, sizeof(*token)) which attempts to write through a NULL pointer (out-of-bounds access).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdGetBySearch code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1599.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdGetBySearch as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdGetBySearch:\n```c\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n    else\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdGetBySearch code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging helper. Writes a single line of context to /tmp/logs/1599.txt. */\nstatic void os_1599_log_before(const char *stage, const void *token, unsigned int idtype, int lock_mode, const void *matchfunc, const void *arg)\n{\n    FILE *f = fopen(\"/tmp/logs/1599.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[BEFORE] %s\\n\", stage);\n    fprintf(f, \"  token=%p, idtype=%u, lock_mode=%d, matchfunc=%p, arg=%p\\n\",\n            token, idtype, lock_mode, matchfunc, arg);\n    fclose(f);\n}\n\nstatic void os_1599_log_after(const char *stage, const void *token, int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1599.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[AFTER]  %s\\n\", stage);\n    fprintf(f, \"  token=%p, return_code=%d\\n\", token, (int)return_code);\n    fclose(f);\n}\n\nint32 OS_ObjectIdGetBySearch(OS_lock_mode_t lock_mode, osal_objtype_t idtype, OS_ObjectMatchFunc_t MatchFunc, void *arg,\n                             OS_object_token_t *token)\n{\n    int32 return_code;\n\n    /* Log state immediately before starting the transaction. This captures the\n     * token pointer value (which may be NULL or invalid) without dereferencing it.\n     * This helps reproduce scenarios where OS_ObjectIdTransactionInit writes via\n     * the token pointer (e.g. a memset) and causes an out-of-bounds access. */\n    os_1599_log_before(\"entering OS_ObjectIdTransactionInit\", (const void *)token, (unsigned int)idtype, (int)lock_mode,\n                       (const void *)MatchFunc, arg);\n\n    OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n\n    /* If the program crashes inside OS_ObjectIdTransactionInit (for example due\n     * to a NULL token being passed and then written), the logs above will show\n     * the pointer value and call context recorded just before the crash. */\n    os_1599_log_after(\"returned from OS_ObjectIdTransactionInit\", (const void *)token, 0);\n\n    return_code = OS_ObjectIdFindNextMatch(MatchFunc, arg, token);\n    os_1599_log_after(\"returned from OS_ObjectIdFindNextMatch\", (const void *)token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"lock_mode\" parameter.\n         */\n        os_1599_log_before(\"about to call OS_ObjectIdConvertToken\", (const void *)token, (unsigned int)idtype, (int)lock_mode,\n                           (const void *)MatchFunc, arg);\n\n        return_code = OS_ObjectIdConvertToken(token);\n\n        os_1599_log_after(\"returned from OS_ObjectIdConvertToken\", (const void *)token, return_code);\n    }\n    else\n    {\n        os_1599_log_before(\"about to call OS_ObjectIdTransactionCancel\", (const void *)token, (unsigned int)idtype, (int)lock_mode,\n                           (const void *)MatchFunc, arg);\n\n        OS_ObjectIdTransactionCancel(token);\n\n        os_1599_log_after(\"returned from OS_ObjectIdTransactionCancel\", (const void *)token, 0);\n    }\n\n    os_1599_log_after(\"exiting OS_ObjectIdGetBySearch\", (const void *)token, return_code);\n\n    return return_code;\n}\n"
}