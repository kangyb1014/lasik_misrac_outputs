{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'impl' is declared as a non-const pointer (OS_impl_file_internal_record_t *impl) but is only used for read-only access in OS_GenericWrite_Impl. It could and should be declared as const OS_impl_file_internal_record_t *impl to preserve constness. Therefore the code violates MISRA C 2023 Rule 8.13. (Additionally, the macro call uses *token (token is const OS_object_token_t *); if the macros or functions it expands to/uses accept non-const pointers this would further drop const-qualification and also breach Rule 8.13.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_GenericWrite_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/691.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_GenericWrite_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_GenericWrite_Impl:\n```c\nint32 OS_GenericWrite_Impl(const OS_object_token_t *token, const void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_WRITABLE;\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        if (impl->selectable)\n        {\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_WRITABLE) != 0)\n        {\n            /* on some system libraries for which the write() argument is not\n             * qualified correctly, it needs to be case to a void* here */\n            os_result = write(impl->fd, GENERIC_IO_CONST_DATA_CAST buffer, nbytes);\n            if (os_result < 0)\n            {\n                OS_DEBUG(\"write: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_GenericWrite_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n#include <unistd.h>\n\n/* Probe logging helper: append structured logs to /tmp/logs/691.txt\n * This function preserves errno around logging so it does not affect\n * the behavior of the instrumented function. */\nstatic void probe_log_fmt(const char *fmt, ...)\n{\n    int saved_errno = errno;\n    (void)mkdir(\"/tmp/logs\", 0777); /* ignore error if exists */\n\n    FILE *f = fopen(\"/tmp/logs/691.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fflush(f);\n        fclose(f);\n    }\n\n    errno = saved_errno;\n}\n\nint32 OS_GenericWrite_Impl(const OS_object_token_t *token, const void *buffer, size_t nbytes, int32 timeout)\n{\n    int32                           return_code;\n    ssize_t                         os_result;\n    uint32                          operation;\n    OS_impl_file_internal_record_t *impl;\n\n    probe_log_fmt(\"ENTER OS_GenericWrite_Impl: token=%p, buffer=%p, nbytes=%zu, timeout=%d\\n\",\n                  (const void *)token, buffer, nbytes, timeout);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    probe_log_fmt(\"After OS_OBJECT_TABLE_GET: impl=%p\\n\", (void *)impl);\n\n    return_code = OS_SUCCESS;\n\n    if (nbytes > 0)\n    {\n        operation = OS_STREAM_STATE_WRITABLE;\n\n        probe_log_fmt(\"nbytes>0: initial operation=0x%08x\\n\", (unsigned)operation);\n\n        /*\n         * If filehandle is set with O_NONBLOCK, then must call select() here.\n         *\n         * The \"selectable\" field should be set false for those file handles\n         * which the underlying OS does not support select() on.\n         *\n         * Note that a timeout will not work unless selectable is true.\n         */\n        probe_log_fmt(\"impl->selectable=%d\\n\", (impl != NULL) ? (int)impl->selectable : 0);\n\n        if (impl && impl->selectable)\n        {\n            probe_log_fmt(\"Calling OS_SelectSingle_Impl: token=%p, operation(before)=%08x, timeout=%d\\n\",\n                          (const void *)token, (unsigned)operation, timeout);\n\n            return_code = OS_SelectSingle_Impl(token, &operation, timeout);\n\n            probe_log_fmt(\"OS_SelectSingle_Impl returned %d, operation(after)=%08x\\n\",\n                          return_code, (unsigned)operation);\n        }\n\n        if (return_code == OS_SUCCESS && (operation & OS_STREAM_STATE_WRITABLE) != 0)\n        {\n            /* on some system libraries for which the write() argument is not\n             * qualified correctly, it needs to be case to a void* here */\n            probe_log_fmt(\"About to write: impl->fd=%d, operation=%08x, nbytes=%zu\\n\",\n                          (impl != NULL) ? impl->fd : -1, (unsigned)operation, nbytes);\n\n            os_result = write(impl->fd, GENERIC_IO_CONST_DATA_CAST buffer, nbytes);\n\n            probe_log_fmt(\"write returned %zd, errno=%d (%s)\\n\", os_result, errno, strerror(errno));\n\n            if (os_result < 0)\n            {\n                OS_DEBUG(\"write: %s\\n\", strerror(errno));\n                return_code = OS_ERROR;\n                probe_log_fmt(\"write error -> setting return_code=OS_ERROR (%d)\\n\", return_code);\n            }\n            else\n            {\n                /* type conversion from ssize_t to int32 for return */\n                return_code = (int32)os_result;\n                probe_log_fmt(\"write success -> setting return_code=%d\\n\", return_code);\n            }\n        }\n        else\n        {\n            probe_log_fmt(\"Skipping write: return_code=%d, operation=0x%08x\\n\",\n                          return_code, (unsigned)operation);\n        }\n    }\n    else\n    {\n        probe_log_fmt(\"No bytes to write: nbytes=%zu -> returning OS_SUCCESS=%d\\n\", nbytes, (int)OS_SUCCESS);\n    }\n\n    probe_log_fmt(\"EXIT OS_GenericWrite_Impl: return_code=%d\\n\", return_code);\n\n    return return_code;\n}\n"
}