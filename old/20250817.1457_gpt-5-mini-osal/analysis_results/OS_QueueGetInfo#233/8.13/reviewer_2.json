{
  "user_message": "An agent A claimed that the following OS_QueueGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_QueueGetInfo.\n```c\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro OS_OBJECT_TABLE_GET expands to &tbl[OS_ObjectIndexFromToken(&(tok))], producing a pointer of type OS_common_record_t * (non-const). In OS_QueueGetInfo this is assigned to OS_common_record_t *record and only read, so the pointed-at data could/should be const-qualified. The global table is declared as extern OS_common_record_t *const OS_global_queue_table (the pointer itself is const, not the pointee), but the elements are exposed as modifiable by the macro. The pointer returned by the macro should be const-qualified (const OS_common_record_t *) to prevent modification and satisfy MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_probe_log(const char *fmt, ...)\n{\n    /* Ensure log directory exists; ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/1867.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not affect original logic. */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Entry log */\n    os_probe_log(\"OS_QueueGetInfo ENTRY: queue_id=%llu, queue_prop=%p\",\n                 (unsigned long long)queue_id, (void *)queue_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n    os_probe_log(\"After memset: queue_prop=%p (zeroed)\", (void *)queue_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    os_probe_log(\"OS_ObjectIdGetById returned: %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token raw bytes for debugging (opaque token content) */\n        {\n            unsigned char *b = (unsigned char *)&token;\n            size_t i;\n            /* Limit the dump to a reasonable size to avoid huge logs */\n            size_t dump_len = (sizeof(token) > 32) ? 32 : sizeof(token);\n            char hexbuf[3 * 32 + 1];\n            char *hb = hexbuf;\n            for (i = 0; i < dump_len; ++i)\n            {\n                int written = snprintf(hb, 4, \"%02X \", b[i]);\n                hb += written;\n            }\n            *hb = '\\0';\n            os_probe_log(\"token bytes (first %u): %s\", (unsigned)dump_len, hexbuf);\n        }\n\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n        os_probe_log(\"OS_OBJECT_TABLE_GET returned record pointer: %p\", (void *)record);\n\n        if (record != NULL)\n        {\n            /* Safely copy a representation of the name entry for logging. */\n            char name_preview[64];\n            memset(name_preview, 0, sizeof(name_preview));\n            /* Copy up to sizeof(name_preview)-1 to ensure NUL termination. */\n            memcpy(name_preview, record->name_entry, sizeof(name_preview) - 1);\n\n            /* Log the relevant fields that are read by this function. */\n            os_probe_log(\"record->name_entry (preview): '%s'\", name_preview);\n            os_probe_log(\"record->creator: %llu\", (unsigned long long)record->creator);\n        }\n        else\n        {\n            os_probe_log(\"record is NULL after OS_OBJECT_TABLE_GET\");\n        }\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        os_probe_log(\"Copied name and creator into queue_prop: queue_prop=%p, name='%s', creator=%llu\",\n                     (void *)queue_prop, queue_prop->name, (unsigned long long)queue_prop->creator);\n\n        OS_ObjectIdRelease(&token);\n        os_probe_log(\"OS_ObjectIdRelease called for token\");\n    }\n    else\n    {\n        os_probe_log(\"OS_QueueGetInfo: aborting due to non-success return_code=%d\", (int)return_code);\n    }\n\n    os_probe_log(\"OS_QueueGetInfo EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_QueueGetInfo ENTRY: queue_id=3735928559, queue_prop=0x7ffd63f9fcc0\nAfter memset: queue_prop=0x7ffd63f9fcc0 (zeroed)\nOS_ObjectIdGetById returned: -35\nOS_QueueGetInfo: aborting due to non-success return_code=-35\nOS_QueueGetInfo EXIT: return_code=-35\nOS_QueueGetInfo ENTRY: queue_id=0, queue_prop=0x7ffd63f9fcc0\nAfter memset: queue_prop=0x7ffd63f9fcc0 (zeroed)\nOS_ObjectIdGetById returned: -35\nOS_QueueGetInfo: aborting due to non-success return_code=-35\nOS_QueueGetInfo EXIT: return_code=-35\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 8.13 requires that pointers should point to const-qualified types whenever possible. In OS_QueueGetInfo the local variable is declared as OS_common_record_t *record but the function only reads from the pointed-at data (record->name_entry, record->creator). The OS_OBJECT_TABLE_GET macro expands to &tbl[OS_ObjectIndexFromToken(&(tok))], yielding an lvalue of type OS_common_record_t * (the global is declared as a const pointer to non-const elements: extern OS_common_record_t *const OS_global_queue_table). That exposes a non-const pointer to data that is only read here, so the pointer should instead be declared to point to a const-qualified type (e.g. const OS_common_record_t *record) or the macro/table should be defined to expose const elements. Changing the local declaration (or the macro/table element type) resolves the MISRA 8.13 concern."
}