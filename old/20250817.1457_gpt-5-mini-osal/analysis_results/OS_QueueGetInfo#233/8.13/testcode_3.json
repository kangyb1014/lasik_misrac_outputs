{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'record' (declared as OS_common_record_t *record) is only used for read access; its member 'name_entry' is used as the source argument to strncpy which expects a const char *src. Because the function does not modify the record or its name, the record pointer (and/or the name_entry member) should be const-qualified (for example 'const OS_common_record_t *record' or 'const char name_entry[...]') so that a pointer points to a const-qualified type whenever possible. As written, passing a non-const source to strncpy indicates Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1867.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGetInfo:\n```c\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n    FILE *log = fopen(\"/tmp/logs/1867.txt\", \"a\");\n\n    /* Basic entry log */\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_QueueGetInfo ENTRY: queue_id=%llu, queue_prop=%p\\n\",\n                (unsigned long long)queue_id, (void *)queue_prop);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_QueueGetInfo: queue_prop cleared (sizeof=%zu)\\n\", sizeof(OS_queue_prop_t));\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_QueueGetInfo: record pointer=%p\\n\", (void *)record);\n            if (record != NULL)\n            {\n                /* Log the name bytes as a string and also show a byte-wise preview up to a reasonable limit */\n                fprintf(log, \"OS_QueueGetInfo: record->name_entry (as string)='%s'\\n\", record->name_entry);\n\n                /* Print a hex preview of the first up to 32 bytes of name_entry for cases where it's not NUL-terminated */\n                size_t i;\n                const unsigned char *bytes = (const unsigned char *)record->name_entry;\n                fprintf(log, \"OS_QueueGetInfo: record->name_entry hex preview=\");\n                for (i = 0U; i < 32U && bytes[i] != '\\0'; ++i)\n                {\n                    fprintf(log, \"%02X\", bytes[i]);\n                    if (i < 31U && bytes[i+1] != '\\0')\n                    {\n                        fprintf(log, \" \");\n                    }\n                }\n                fprintf(log, \"\\n\");\n            }\n        }\n\n        /* Preserve original logic: copy the name and set creator */\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_QueueGetInfo: after strncpy queue_prop->name='%s'\\n\", queue_prop->name);\n            fprintf(log, \"OS_QueueGetInfo: queue_prop->creator=%u\\n\", (unsigned)queue_prop->creator);\n        }\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_QueueGetInfo EXIT: return_code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}