{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'record' is declared as OS_common_record_t * but is only used to read fields (record->name_entry and record->creator). It could and should be declared as const OS_common_record_t *record to reflect read-only access. Assigning the result of OS_OBJECT_TABLE_GET (which yields OS_common_record_t *) to a pointer-to-const is allowed, so the current non-const declaration violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1867.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGetInfo:\n```c\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helper that appends logs to /tmp/logs/1867.txt. */\nstatic void OSAL_log_queue_get_info(const char *stage, osal_id_t queue_id, OS_common_record_t *record, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1867.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log basic control-flow information */\n    fprintf(f, \"OS_QueueGetInfo: stage=%s, queue_id=%lu, return_code=%ld, record=%p\\n\",\n            stage, (unsigned long)queue_id, (long)return_code, (void *)record);\n\n    /* If a record pointer is available, log the read-only fields used by the function */\n    if (record != NULL)\n    {\n        /* Protect against missing/invalid strings by printing up to a reasonable length */\n        if (record->name_entry != NULL)\n        {\n            fprintf(f, \"  record->name_entry=\\\"%s\\\"\\n\", record->name_entry);\n        }\n        else\n        {\n            fprintf(f, \"  record->name_entry=(NULL)\\n\");\n        }\n\n        fprintf(f, \"  record->creator=%lu\\n\", (unsigned long)record->creator);\n    }\n\n    fclose(f);\n}\n\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry into function and parameter values */\n    OSAL_log_queue_get_info(\"entry\", queue_id, NULL, -1);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    /* Log just before calling OS_ObjectIdGetById */\n    OSAL_log_queue_get_info(\"before_ObjectIdGetById\", queue_id, NULL, -1);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    /* Log the result of OS_ObjectIdGetById */\n    OSAL_log_queue_get_info(\"after_ObjectIdGetById\", queue_id, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        /* Log the record returned from the object table (reads only) */\n        OSAL_log_queue_get_info(\"after_OBJECT_TABLE_GET\", queue_id, record, return_code);\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /* Log after copying fields into queue_prop */\n        OSAL_log_queue_get_info(\"after_copy_fields\", queue_id, record, return_code);\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing the object token */\n        OSAL_log_queue_get_info(\"after_ObjectIdRelease\", queue_id, record, return_code);\n    }\n\n    /* Log exit from function */\n    OSAL_log_queue_get_info(\"exit\", queue_id, NULL, return_code);\n\n    return return_code;\n}\n"
}