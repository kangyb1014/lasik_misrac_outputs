{
  "user_message": "An agent A claimed that the following OS_QueueGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_QueueGetInfo.\n```c\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The pointer 'record' (declared as OS_common_record_t *record) is only used for read access; its member 'name_entry' is used as the source argument to strncpy which expects a const char *src. Because the function does not modify the record or its name, the record pointer (and/or the name_entry member) should be const-qualified (for example 'const OS_common_record_t *record' or 'const char name_entry[...]') so that a pointer points to a const-qualified type whenever possible. As written, passing a non-const source to strncpy indicates Rule 8.13 is violated.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n    FILE *log = fopen(\"/tmp/logs/1867.txt\", \"a\");\n\n    /* Basic entry log */\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_QueueGetInfo ENTRY: queue_id=%llu, queue_prop=%p\\n\",\n                (unsigned long long)queue_id, (void *)queue_prop);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_QueueGetInfo: queue_prop cleared (sizeof=%zu)\\n\", sizeof(OS_queue_prop_t));\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_ObjectIdGetById returned %d\\n\", (int)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_QueueGetInfo: record pointer=%p\\n\", (void *)record);\n            if (record != NULL)\n            {\n                /* Log the name bytes as a string and also show a byte-wise preview up to a reasonable limit */\n                fprintf(log, \"OS_QueueGetInfo: record->name_entry (as string)='%s'\\n\", record->name_entry);\n\n                /* Print a hex preview of the first up to 32 bytes of name_entry for cases where it's not NUL-terminated */\n                size_t i;\n                const unsigned char *bytes = (const unsigned char *)record->name_entry;\n                fprintf(log, \"OS_QueueGetInfo: record->name_entry hex preview=\");\n                for (i = 0U; i < 32U && bytes[i] != '\\0'; ++i)\n                {\n                    fprintf(log, \"%02X\", bytes[i]);\n                    if (i < 31U && bytes[i+1] != '\\0')\n                    {\n                        fprintf(log, \" \");\n                    }\n                }\n                fprintf(log, \"\\n\");\n            }\n        }\n\n        /* Preserve original logic: copy the name and set creator */\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_QueueGetInfo: after strncpy queue_prop->name='%s'\\n\", queue_prop->name);\n            fprintf(log, \"OS_QueueGetInfo: queue_prop->creator=%u\\n\", (unsigned)queue_prop->creator);\n        }\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (log != NULL)\n    {\n        fprintf(log, \"OS_QueueGetInfo EXIT: return_code=%d\\n\", (int)return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_QueueGetInfo ENTRY: queue_id=3735928559, queue_prop=0x7ffe7f07a760\nOS_QueueGetInfo: queue_prop cleared (sizeof=24)\nOS_ObjectIdGetById returned -35\nOS_QueueGetInfo EXIT: return_code=-35\nOS_QueueGetInfo ENTRY: queue_id=0, queue_prop=0x7ffe7f07a760\nOS_QueueGetInfo: queue_prop cleared (sizeof=24)\nOS_ObjectIdGetById returned -35\nOS_QueueGetInfo EXIT: return_code=-35\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The reported violation is not supported by the provided test output. The runtime log shows OS_ObjectIdGetById failed (returned -35) in every exercised case so the branch that reads from 'record' (and calls strncpy) was never executed \u2014 therefore there is no observed instance in these tests where the non-const pointer is actually used for read-only access. Additionally, passing a char array (or char *) as the source argument to strncpy (which takes a const char *src) is a standard implicit conversion to const and in itself is not a MISRA 8.13 violation. While a static review could recommend declaring 'record' (or the name member) as pointing to const because it is only read when that branch executes, the supplied runtime evidence does not demonstrate a rule breach. Therefore the agent A report is not correct for the observed test results."
}