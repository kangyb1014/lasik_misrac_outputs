{
  "user_message": "An agent A claimed that the following OS_QueueGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_QueueGetInfo.\n```c\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code assigns the address of a global table element to a non-const pointer: record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token); OS_global_queue_table is declared as 'OS_common_record_t *const OS_global_queue_table' (a const pointer to non-const OS_common_record_t). In this function record is only used for read access (reading name_entry and creator), so the pointer could and should be to a const-qualified pointee (e.g. const OS_common_record_t *). The macro and global-table declaration therefore expose a non-const pointee where a const-qualified type is appropriate, violating MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_QueueGetInfo_log(const char *stage, osal_id_t queue_id, OS_object_token_t *token, OS_common_record_t *record, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1867.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Basic line describing the stage and key values */\n    fprintf(f, \"OS_QueueGetInfo: stage=%s queue_id=%lu token_addr=%p record_ptr=%p return=%d\\n\",\n            stage,\n            (unsigned long)queue_id,\n            (void *)token,\n            (void *)record,\n            (int)return_code);\n\n    /* If we have a record, log the fields that are read by the function */\n    if (record != NULL)\n    {\n        /* Protect against non-null-terminated name_entry by limiting output length.\n         * The exact size of name_entry is not known here; use a conservative limit. */\n        char name_buf[128];\n        name_buf[0] = '\\0';\n        if (record->name_entry != NULL)\n        {\n            /* Copy up to sizeof(name_buf)-1 to ensure termination for logging only */\n            strncpy(name_buf, record->name_entry, sizeof(name_buf) - 1);\n            name_buf[sizeof(name_buf) - 1] = '\\0';\n        }\n\n        fprintf(f, \"  record->name_entry=\\\"%s\\\" record->creator=%lu\\n\",\n                name_buf[0] != '\\0' ? name_buf : \"(null)\",\n                (unsigned long)record->creator);\n    }\n\n    fclose(f);\n}\n\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry with initial parameters */\n    OS_QueueGetInfo_log(\"enter\", queue_id, NULL, NULL, 0);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    /* Log result of ObjectIdGetById and token address */\n    OS_QueueGetInfo_log(\"after_ObjectIdGetById\", queue_id, &token, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        /* Log the record pointer and contents read from it prior to using them */\n        OS_QueueGetInfo_log(\"before_copy_fields\", queue_id, &token, record, return_code);\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log just before exit after successful path */\n        OS_QueueGetInfo_log(\"exit_success\", queue_id, &token, record, return_code);\n    }\n    else\n    {\n        /* Log failure path */\n        OS_QueueGetInfo_log(\"exit_failure\", queue_id, &token, NULL, return_code);\n    }\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_QueueGetInfo: stage=enter queue_id=3735928559 token_addr=(nil) record_ptr=(nil) return=0\nOS_QueueGetInfo: stage=after_ObjectIdGetById queue_id=3735928559 token_addr=0x7ffd66f9a740 record_ptr=(nil) return=-35\nOS_QueueGetInfo: stage=exit_failure queue_id=3735928559 token_addr=0x7ffd66f9a740 record_ptr=(nil) return=-35\nOS_QueueGetInfo: stage=enter queue_id=0 token_addr=(nil) record_ptr=(nil) return=0\nOS_QueueGetInfo: stage=after_ObjectIdGetById queue_id=0 token_addr=0x7ffd66f9a740 record_ptr=(nil) return=-35\nOS_QueueGetInfo: stage=exit_failure queue_id=0 token_addr=0x7ffd66f9a740 record_ptr=(nil) return=-35\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The function obtains a pointer to an OS_common_record_t and only reads fields (record->name_entry and record->creator). MISRA C 2023 Rule 8.13 recommends that a pointer should point to a const-qualified type whenever possible; here the local variable record is declared as OS_common_record_t * (non-const pointee) even though it is only used for read access, so it should be declared as const OS_common_record_t *record. The fact that OS_global_queue_table is declared as OS_common_record_t *const (a const pointer to non-const records) means the macro returns a non-const OS_common_record_t *, but assigning that to a const OS_common_record_t * is allowed and would satisfy the rule. The provided runtime logs (which show the lookup failing and record=NULL) do not change the static-typing issue \u2014 the code as written uses a non-const pointer where a const-qualified pointee is appropriate. Therefore the agent A report is correct."
}