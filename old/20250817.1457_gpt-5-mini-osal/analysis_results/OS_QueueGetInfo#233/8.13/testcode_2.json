{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_OBJECT_TABLE_GET expands to &tbl[OS_ObjectIndexFromToken(&(tok))], producing a pointer of type OS_common_record_t * (non-const). In OS_QueueGetInfo this is assigned to OS_common_record_t *record and only read, so the pointed-at data could/should be const-qualified. The global table is declared as extern OS_common_record_t *const OS_global_queue_table (the pointer itself is const, not the pointee), but the elements are exposed as modifiable by the macro. The pointer returned by the macro should be const-qualified (const OS_common_record_t *) to prevent modification and satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1867.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGetInfo:\n```c\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <string.h>\n\n/* Probe helper to append logs to /tmp/logs/1867.txt. This function is intended\n * to be non-intrusive and preserve the original behavior of OS_QueueGetInfo. */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    /* Ensure log directory exists; ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/1867.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not affect original logic. */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Entry log */\n    os_probe_log(\"OS_QueueGetInfo ENTRY: queue_id=%llu, queue_prop=%p\",\n                 (unsigned long long)queue_id, (void *)queue_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n    os_probe_log(\"After memset: queue_prop=%p (zeroed)\", (void *)queue_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    os_probe_log(\"OS_ObjectIdGetById returned: %d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token raw bytes for debugging (opaque token content) */\n        {\n            unsigned char *b = (unsigned char *)&token;\n            size_t i;\n            /* Limit the dump to a reasonable size to avoid huge logs */\n            size_t dump_len = (sizeof(token) > 32) ? 32 : sizeof(token);\n            char hexbuf[3 * 32 + 1];\n            char *hb = hexbuf;\n            for (i = 0; i < dump_len; ++i)\n            {\n                int written = snprintf(hb, 4, \"%02X \", b[i]);\n                hb += written;\n            }\n            *hb = '\\0';\n            os_probe_log(\"token bytes (first %u): %s\", (unsigned)dump_len, hexbuf);\n        }\n\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n        os_probe_log(\"OS_OBJECT_TABLE_GET returned record pointer: %p\", (void *)record);\n\n        if (record != NULL)\n        {\n            /* Safely copy a representation of the name entry for logging. */\n            char name_preview[64];\n            memset(name_preview, 0, sizeof(name_preview));\n            /* Copy up to sizeof(name_preview)-1 to ensure NUL termination. */\n            memcpy(name_preview, record->name_entry, sizeof(name_preview) - 1);\n\n            /* Log the relevant fields that are read by this function. */\n            os_probe_log(\"record->name_entry (preview): '%s'\", name_preview);\n            os_probe_log(\"record->creator: %llu\", (unsigned long long)record->creator);\n        }\n        else\n        {\n            os_probe_log(\"record is NULL after OS_OBJECT_TABLE_GET\");\n        }\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        os_probe_log(\"Copied name and creator into queue_prop: queue_prop=%p, name='%s', creator=%llu\",\n                     (void *)queue_prop, queue_prop->name, (unsigned long long)queue_prop->creator);\n\n        OS_ObjectIdRelease(&token);\n        os_probe_log(\"OS_ObjectIdRelease called for token\");\n    }\n    else\n    {\n        os_probe_log(\"OS_QueueGetInfo: aborting due to non-success return_code=%d\", (int)return_code);\n    }\n\n    os_probe_log(\"OS_QueueGetInfo EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}