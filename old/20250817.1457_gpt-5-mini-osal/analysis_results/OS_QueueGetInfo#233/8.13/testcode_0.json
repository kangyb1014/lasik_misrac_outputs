{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code assigns the address of a global table element to a non-const pointer: record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token); OS_global_queue_table is declared as 'OS_common_record_t *const OS_global_queue_table' (a const pointer to non-const OS_common_record_t). In this function record is only used for read access (reading name_entry and creator), so the pointer could and should be to a const-qualified pointee (e.g. const OS_common_record_t *). The macro and global-table declaration therefore expose a non-const pointee where a const-qualified type is appropriate, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueueGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1867.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueueGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueueGetInfo:\n```c\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueueGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe function: append a log entry describing the current state to /tmp/logs/1867.txt */\nstatic void OS_QueueGetInfo_log(const char *stage, osal_id_t queue_id, OS_object_token_t *token, OS_common_record_t *record, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1867.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Basic line describing the stage and key values */\n    fprintf(f, \"OS_QueueGetInfo: stage=%s queue_id=%lu token_addr=%p record_ptr=%p return=%d\\n\",\n            stage,\n            (unsigned long)queue_id,\n            (void *)token,\n            (void *)record,\n            (int)return_code);\n\n    /* If we have a record, log the fields that are read by the function */\n    if (record != NULL)\n    {\n        /* Protect against non-null-terminated name_entry by limiting output length.\n         * The exact size of name_entry is not known here; use a conservative limit. */\n        char name_buf[128];\n        name_buf[0] = '\\0';\n        if (record->name_entry != NULL)\n        {\n            /* Copy up to sizeof(name_buf)-1 to ensure termination for logging only */\n            strncpy(name_buf, record->name_entry, sizeof(name_buf) - 1);\n            name_buf[sizeof(name_buf) - 1] = '\\0';\n        }\n\n        fprintf(f, \"  record->name_entry=\\\"%s\\\" record->creator=%lu\\n\",\n                name_buf[0] != '\\0' ? name_buf : \"(null)\",\n                (unsigned long)record->creator);\n    }\n\n    fclose(f);\n}\n\nint32 OS_QueueGetInfo(osal_id_t queue_id, OS_queue_prop_t *queue_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry with initial parameters */\n    OS_QueueGetInfo_log(\"enter\", queue_id, NULL, NULL, 0);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(queue_prop);\n\n    memset(queue_prop, 0, sizeof(OS_queue_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, queue_id, &token);\n\n    /* Log result of ObjectIdGetById and token address */\n    OS_QueueGetInfo_log(\"after_ObjectIdGetById\", queue_id, &token, NULL, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_queue_table, token);\n\n        /* Log the record pointer and contents read from it prior to using them */\n        OS_QueueGetInfo_log(\"before_copy_fields\", queue_id, &token, record, return_code);\n\n        strncpy(queue_prop->name, record->name_entry, sizeof(queue_prop->name) - 1);\n        queue_prop->creator = record->creator;\n\n        /*\n         * Currently there are no additional queue details provided by the impl layer -\n         * But this could be added in the future (i.e. current/max depth, msg size, etc)\n         */\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log just before exit after successful path */\n        OS_QueueGetInfo_log(\"exit_success\", queue_id, &token, record, return_code);\n    }\n    else\n    {\n        /* Log failure path */\n        OS_QueueGetInfo_log(\"exit_failure\", queue_id, &token, NULL, return_code);\n    }\n\n    return return_code;\n}\n"
}