{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UtList_Destroy:\n```c\nvoid UtList_Destroy(UtListHead_t *ListHead)\n{\n    uint32 i;\n\n    for (i = 0; i < ListHead->NumberOfTags; ++i)\n    {\n        UtList_Reset(&ListHead->Tags[i]);\n    }\n    free(ListHead);\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n&ListHead->Tags[i]\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated. The expression &ListHead->Tags[i] yields a pointer to a modifiable element of the object referred to by the non-const parameter ListHead; it is passed to UtList_Reset which (by name/intent) presumably modifies/resets the tag prior to free. Making the pointer const would prevent those modifications and would be inappropriate. (If UtList_Reset actually does not modify the tag, then the function signature should use a pointer-to-const and the code could be updated \u2014 that would be a separate violation.)"
}