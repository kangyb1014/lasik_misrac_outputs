{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a string literal (\" \") to OS_BSP_ConsoleOutput_Impl. If that function is declared to take a non-const pointer (e.g. void OS_BSP_ConsoleOutput_Impl(char *Buf, size_t Len)), then the pointer parameter is not const-qualified even though the data is immutable and the function presumably does not modify it. This violates MISRA C 2023 Rule 8.13 \u2014 the parameter should be declared as const char * (or equivalent) so pointers point to const-qualified types whenever possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_DoText code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2707.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_DoText as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_DoText:\n```c\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n        MsgLen = strlen(OutputMessage);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        OS_BSP_Shutdown_Impl();\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_DoText code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append a compact log entry describing the call site and buffer content. */\nstatic void UT_BSP_WriteLog(const char *stage, const char *ptr, size_t len, unsigned int MessageType, unsigned int TermModeBits, unsigned int MsgEnabled)\n{\n    FILE *f = fopen(\"/tmp/logs/2707.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"UT_BSP_DoText: stage=%s MessageType=%u TermModeBits=0x%08x MsgEnabled=%u ptr=%p len=%zu\\n\",\n            stage, MessageType, TermModeBits, MsgEnabled, (const void *)ptr, len);\n\n    if (ptr != NULL && len > 0)\n    {\n        /* Print up to 200 bytes of the buffer, escaping non-printables. */\n        size_t toprint = (len < 200) ? len : 200;\n        fprintf(f, \"  data=\");\n        for (size_t i = 0; i < toprint; ++i)\n        {\n            unsigned char c = (unsigned char)ptr[i];\n            if (c >= 32 && c < 127)\n            {\n                fputc((int)c, f);\n            }\n            else\n            {\n                fprintf(f, \"\\\\x%02x\", c);\n            }\n        }\n        if (len > toprint)\n        {\n            fprintf(f, \"...\");\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fclose(f);\n}\n\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    /* Log entry with basic state */\n    UT_BSP_WriteLog(\"entry\", NULL, 0, (unsigned int)MessageType, (unsigned int)TermModeBits, (unsigned int)MsgEnabled);\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                /* Probe: logging the literal newline being sent */\n                UT_BSP_WriteLog(\"case_BEGIN_pre_newline\", \"\\n\", 1, (unsigned int)MessageType, (unsigned int)TermModeBits, (unsigned int)MsgEnabled);\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        /* Probe: logging the Buffer about to be output */\n        UT_BSP_WriteLog(\"before_buffer_out\", Buffer, strlen(Buffer), (unsigned int)MessageType, (unsigned int)TermModeBits, (unsigned int)MsgEnabled);\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        /* Probe: logging the single space literal being sent */\n        UT_BSP_WriteLog(\"before_space_out\", \" \", 1, (unsigned int)MessageType, (unsigned int)TermModeBits, (unsigned int)MsgEnabled);\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n\n        MsgLen = strlen(OutputMessage);\n\n        /* Probe: logging the OutputMessage pointer and contents (up to MsgLen) BEFORE sending */\n        UT_BSP_WriteLog(\"before_outputmsg\", OutputMessage, MsgLen, (unsigned int)MessageType, (unsigned int)TermModeBits, (unsigned int)MsgEnabled);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            /* Probe: logging the trailing newline literal being sent */\n            UT_BSP_WriteLog(\"before_trailing_newline\", \"\\n\", 1, (unsigned int)MessageType, (unsigned int)TermModeBits, (unsigned int)MsgEnabled);\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n\n        /* Probe: log exit from MsgEnabled block */\n        UT_BSP_WriteLog(\"exit_msg_block\", NULL, 0, (unsigned int)MessageType, (unsigned int)TermModeBits, (unsigned int)MsgEnabled);\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        UT_BSP_WriteLog(\"about_to_shutdown\", NULL, 0, (unsigned int)MessageType, (unsigned int)TermModeBits, (unsigned int)0);\n        OS_BSP_Shutdown_Impl();\n    }\n}\n"
}