{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes a const char * (OutputMessage) to OS_BSP_ConsoleOutput_Impl. If OS_BSP_ConsoleOutput_Impl is declared as taking a non-const pointer (e.g. void OS_BSP_ConsoleOutput_Impl(char *buf, size_t len)), this discards the const qualifier and thus violates MISRA C 2023 Rule 8.13. The remedy is to declare the function parameter as const char * (e.g. void OS_BSP_ConsoleOutput_Impl(const char *buf, size_t len)).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_DoText code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2707.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_DoText as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_DoText:\n```c\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n        MsgLen = strlen(OutputMessage);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        OS_BSP_Shutdown_Impl();\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_DoText code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe functions to log control flow and state for the violation scenario.\n * These functions purposely accept const-qualified pointers so they do not\n * themselves discard const qualifiers (avoiding creating a new Rule 8.13 issue).\n */\nstatic void UT_BSP_EnsureLogDir(void)\n{\n    /* Attempt to create the directory; ignore errors other than non-existence.\n     * If the directory already exists, mkdir will fail and errno will be EEXIST. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void UT_BSP_AppendLog(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *fp;\n\n    UT_BSP_EnsureLogDir();\n    fp = fopen(\"/tmp/logs/2707.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nstatic void UT_BSP_LogEventEntry(uint8 MessageType, const char *OutputMessage, uint32 MsgEnabled)\n{\n    UT_BSP_AppendLog(\"ENTER UT_BSP_DoText: MessageType=%u OutputMessage=%p MsgEnabled=%u\",\n                     (unsigned)MessageType, (const void *)OutputMessage, (unsigned)MsgEnabled);\n\n    if (OutputMessage != NULL)\n    {\n        /* Print a small prefix of the message to avoid huge logs */\n        UT_BSP_AppendLog(\"  OutputMessage[0..63] = '%.*s'\",\n                         64, OutputMessage);\n    }\n    else\n    {\n        UT_BSP_AppendLog(\"  OutputMessage is NULL\");\n    }\n}\n\nstatic void UT_BSP_LogModeCall(const char *who, uint32 ModeBits)\n{\n    UT_BSP_AppendLog(\"MODE CALL %s: ModeBits=0x%08x\", who, (unsigned)ModeBits);\n}\n\nstatic void UT_BSP_LogOutputCall(const char *who, const char *buf, size_t len)\n{\n    /* Log caller, pointer, length and a truncated preview of the buffer contents. */\n    size_t preview = (len > 128) ? 128U : len;\n    UT_BSP_AppendLog(\"OUTPUT CALL %s: buf=%p len=%zu preview='%.*s'\",\n                     who, (const void *)buf, len, (int)preview, (buf != NULL) ? buf : \"(null)\");\n}\n\n/* Original function with probes inserted. */\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    /* Log entry after MsgEnabled is computed so callers can reproduce the scenario. */\n    UT_BSP_LogEventEntry(MessageType, OutputMessage, MsgEnabled);\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                /* log before calling the console output implementation with a string literal */\n                UT_BSP_LogOutputCall(\"Begin-Newline\", \"\\n\", 1);\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            UT_BSP_LogModeCall(\"Pre-SetMode\", TermModeBits);\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        /* Log the Buffer output before calling the implementation */\n        UT_BSP_LogOutputCall(\"Buffer\", Buffer, strlen(Buffer));\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            UT_BSP_LogModeCall(\"Restore-Normal\", OS_BSP_CONSOLEMODE_NORMAL);\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        UT_BSP_LogOutputCall(\"Space\", \" \", 1);\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n\n        MsgLen = strlen(OutputMessage);\n\n        /* Log the potentially problematic call where a const char* is passed to the impl */\n        UT_BSP_LogOutputCall(\"OutputMessage\", OutputMessage, MsgLen);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            UT_BSP_LogOutputCall(\"Trailing-Newline\", \"\\n\", 1);\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        UT_BSP_AppendLog(\"ABORT: invoking OS_BSP_Shutdown_Impl\");\n        OS_BSP_Shutdown_Impl();\n    }\n\n    UT_BSP_AppendLog(\"EXIT UT_BSP_DoText: MessageType=%u\", (unsigned)MessageType);\n}\n"
}