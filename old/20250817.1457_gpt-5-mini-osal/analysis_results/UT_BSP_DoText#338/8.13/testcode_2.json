{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf UtAssert_GetCaseTypeAbbrev returns a non-const char * (i.e. char *), then this call violates MISRA C 2023 Rule 8.13 because the returned pointer is used only for reading (passed to snprintf with %s) and thus the function should return const char *. If UtAssert_GetCaseTypeAbbrev already returns const char *, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_DoText code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2707.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_DoText as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_DoText:\n```c\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n        MsgLen = strlen(OutputMessage);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        OS_BSP_Shutdown_Impl();\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_DoText code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append a formatted log line to /tmp/logs/2707.txt. */\nstatic void UT_BSP_WriteLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2707.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fclose(f);\n}\n\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    UT_BSP_WriteLog(\"ENTER UT_BSP_DoText: MessageType=%u, OutputMessage_ptr=%p, CurrVerbosity=0x%08X, MsgEnabled(shifted)=%u\\n\",\n                    (unsigned)MessageType, (void *)OutputMessage, (unsigned)BSP_UT_Global.CurrVerbosity, (unsigned)MsgEnabled);\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                UT_BSP_WriteLog(\"SWITCH: case %u -> HIGHLIGHT|RED (0x%08X)\\n\", (unsigned)MessageType, (unsigned)TermModeBits);\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                UT_BSP_WriteLog(\"SWITCH: case %u -> HIGHLIGHT|RED|GREEN (0x%08X)\\n\", (unsigned)MessageType, (unsigned)TermModeBits);\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                UT_BSP_WriteLog(\"SWITCH: case %u -> HIGHLIGHT|RED|BLUE (0x%08X)\\n\", (unsigned)MessageType, (unsigned)TermModeBits);\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                UT_BSP_WriteLog(\"SWITCH: case %u -> BEGIN (extra newline printed)\\n\", (unsigned)MessageType);\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                UT_BSP_WriteLog(\"SWITCH: case %u -> HIGHLIGHT|GREEN (0x%08X)\\n\", (unsigned)MessageType, (unsigned)TermModeBits);\n                break;\n            default:\n                UT_BSP_WriteLog(\"SWITCH: case %u -> default (TermModeBits stays 0x%08X)\\n\", (unsigned)MessageType, (unsigned)TermModeBits);\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n            UT_BSP_WriteLog(\"MsgEnabled <= 1, forcing TermModeBits to NORMAL (0x%08X)\\n\", (unsigned)TermModeBits);\n        }\n\n        /* Probe: capture the abbreviation pointer & contents for later inspection. */\n        const char *caseAbbrev = UtAssert_GetCaseTypeAbbrev(MessageType);\n        UT_BSP_WriteLog(\"GetCaseTypeAbbrev called: ptr=%p, str=%s\\n\",\n                        (void *)caseAbbrev,\n                        (caseAbbrev != NULL) ? caseAbbrev : \"(null)\");\n\n        /* Preserve original logic: format into Buffer. */\n        (void)snprintf(Buffer, sizeof(Buffer), \"[%5s]\", caseAbbrev);\n\n        UT_BSP_WriteLog(\"Buffer after snprintf: '%s'\\n\", Buffer);\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n            UT_BSP_WriteLog(\"Console mode set to 0x%08X before printing buffer\\n\", (unsigned)TermModeBits);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n            UT_BSP_WriteLog(\"Console mode restored to NORMAL after printing buffer\\n\");\n        }\n\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n\n        /* Log OutputMessage pointer and safely determine its length for the log. */\n        MsgLen = (OutputMessage != NULL) ? strlen(OutputMessage) : 0;\n        UT_BSP_WriteLog(\"About to print OutputMessage: ptr=%p, MsgLen=%zu, first_chars='%.*s'\\n\",\n                        (void *)OutputMessage,\n                        MsgLen,\n                        (int)((MsgLen < 64) ? MsgLen : 64), /* limit preview length */\n                        (OutputMessage != NULL) ? OutputMessage : \"\");\n\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n            UT_BSP_WriteLog(\"Appended trailing newline to OutputMessage (MsgLen=%zu)\\n\", MsgLen);\n        }\n\n        UT_BSP_Unlock();\n    }\n    else\n    {\n        UT_BSP_WriteLog(\"Message suppressed by verbosity: MessageType=%u, MsgEnabled=%u -> skipping output\\n\",\n                        (unsigned)MessageType, (unsigned)MsgEnabled);\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        UT_BSP_WriteLog(\"MessageType is ABORT: calling OS_BSP_Shutdown_Impl()\\n\");\n        OS_BSP_Shutdown_Impl();\n    }\n}\n"
}