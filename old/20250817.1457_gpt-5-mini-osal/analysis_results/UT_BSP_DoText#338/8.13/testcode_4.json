{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_BSP_ConsoleOutput_Impl is declared with a non-const pointer parameter (for example: void OS_BSP_ConsoleOutput_Impl(char *Buf, size_t Len)), then calling OS_BSP_ConsoleOutput_Impl(\"\\n\", 1) passes a string literal to a non-const pointer, which violates MISRA C 2023 Rule 8.13. The parameter should be declared as const char * if the function does not modify the data.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_BSP_DoText code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2707.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_BSP_DoText as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_BSP_DoText:\n```c\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n        MsgLen = strlen(OutputMessage);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        OS_BSP_Shutdown_Impl();\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_BSP_DoText code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe helper: append a log entry to /tmp/logs/2707.txt */\nstatic void UT_BSP_LogProbe(const char *stage, const char *label, const void *ptr, size_t len,\n                            unsigned int MessageType, unsigned long TermModeBits, unsigned long MsgEnabled,\n                            size_t MsgLen, const char *note)\n{\n    FILE *fp = fopen(\"/tmp/logs/2707.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    fprintf(fp, \"UT_BSP_DoText: stage=%s label=%s ptr=%p len=%zu MessageType=%u TermModeBits=0x%08lx MsgEnabled=%lu MsgLen=%zu note=%s\\n\",\n            stage, label, ptr, len, MessageType, TermModeBits, MsgEnabled, MsgLen, (note ? note : \"(null)\"));\n\n    fclose(fp);\n}\n\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    /* Log entry with initial state */\n    UT_BSP_LogProbe(\"entry\", \"initial\", (const void *)OutputMessage, 0U,\n                    (unsigned int)MessageType, (unsigned long)TermModeBits, (unsigned long)MsgEnabled,\n                    0U, \"entered UT_BSP_DoText\");\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                /* Log that we're about to call ConsoleOutput with a string literal \"\\n\" (possible violation scenario) */\n                UT_BSP_LogProbe(\"switch\", \"BEGIN-literal-newline\", \"\\n\", 1U,\n                                (unsigned int)MessageType, (unsigned long)TermModeBits, (unsigned long)MsgEnabled,\n                                0U, \"calling OS_BSP_ConsoleOutput_Impl with literal \\\"\\\\n\\\"\");\n\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        /* Log Buffer output call */\n        UT_BSP_LogProbe(\"output\", \"prefix-buffer\", Buffer, strlen(Buffer),\n                        (unsigned int)MessageType, (unsigned long)TermModeBits, (unsigned long)MsgEnabled,\n                        0U, \"about to output Buffer\");\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        /* Log single space literal output */\n        UT_BSP_LogProbe(\"output\", \"single-space-literal\", \" \", 1U,\n                        (unsigned int)MessageType, (unsigned long)TermModeBits, (unsigned long)MsgEnabled,\n                        0U, \"about to output single space literal\");\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n\n        MsgLen = strlen(OutputMessage);\n\n        /* Log OutputMessage pointer and length prior to outputting it */\n        UT_BSP_LogProbe(\"output\", \"user-message\", (const void *)OutputMessage, MsgLen,\n                        (unsigned int)MessageType, (unsigned long)TermModeBits, (unsigned long)MsgEnabled,\n                        MsgLen, \"about to output OutputMessage\");\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            /* Log final newline literal output (possible violation scenario) */\n            UT_BSP_LogProbe(\"output\", \"final-newline-literal\", \"\\n\", 1U,\n                            (unsigned int)MessageType, (unsigned long)TermModeBits, (unsigned long)MsgEnabled,\n                            MsgLen, \"about to output trailing newline literal\");\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        UT_BSP_LogProbe(\"exit\", \"shutdown\", (const void *)OutputMessage, 0U,\n                        (unsigned int)MessageType, (unsigned long)TermModeBits, (unsigned long)MsgEnabled,\n                        0U, \"calling OS_BSP_Shutdown_Impl due to ABORT\");\n        OS_BSP_Shutdown_Impl();\n    }\n\n    /* Log normal exit */\n    UT_BSP_LogProbe(\"exit\", \"done\", (const void *)OutputMessage, 0U,\n                    (unsigned int)MessageType, (unsigned long)TermModeBits, (unsigned long)MsgEnabled,\n                    0U, \"leaving UT_BSP_DoText\");\n}\n"
}