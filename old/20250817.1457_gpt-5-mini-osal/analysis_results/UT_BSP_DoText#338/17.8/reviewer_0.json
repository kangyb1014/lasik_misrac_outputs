{
  "user_message": "An agent A claimed that the following UT_BSP_DoText code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of UT_BSP_DoText.\n```c\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n        MsgLen = strlen(OutputMessage);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        OS_BSP_Shutdown_Impl();\n    }\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function OS_BSP_ConsoleOutput_Impl modifies its parameters: the pointer parameter 'Str' is advanced (Str += WriteLen) and the size parameter 'DataLen' is decremented (DataLen -= WriteLen). Rule 17.8 forbids modifying function parameters (the pointer itself must not be changed; only the object it points to may be), so these statements violate the rule.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void UT_BSP_LogConsoleCall(const char *Tag, const char *Str, size_t DataLen)\n{\n    /* Append a concise description of each console output invocation to a file for repro. */\n    FILE *F = fopen(\"/tmp/logs/2709.txt\", \"a\");\n    if (F == NULL)\n    {\n        return; /* best-effort logging; don't affect original logic */\n    }\n\n    fprintf(F, \"[UT_BSP_DoText] %s PTR=%p LEN=%zu\", Tag, (const void *)Str, DataLen);\n\n    if (Str != NULL && DataLen > 0)\n    {\n        /* Print up to 64 bytes of the payload, escaping non-printables */\n        size_t Dump = (DataLen < 64U) ? DataLen : 64U;\n        fprintf(F, \" DATA='\");\n        for (size_t i = 0; i < Dump; ++i)\n        {\n            unsigned char C = (unsigned char)Str[i];\n            if (C >= 0x20U && C < 0x7FU)\n            {\n                fputc((int)C, F);\n            }\n            else\n            {\n                fprintf(F, \"\\\\x%02X\", (unsigned)C);\n            }\n        }\n        if (DataLen > Dump)\n        {\n            fprintf(F, \"...\");\n        }\n        fprintf(F, \"'\");\n    }\n\n    fprintf(F, \"\\n\");\n    fclose(F);\n}\n\nvoid UT_BSP_DoText(uint8 MessageType, const char *OutputMessage)\n{\n    char   Buffer[16];\n    size_t MsgLen;\n    uint32 TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n    uint32 MsgEnabled   = BSP_UT_Global.CurrVerbosity >> MessageType;\n\n    if (MsgEnabled & 1)\n    {\n        UT_BSP_Lock();\n\n        /* Determine if the message type warrants special treatment (color/highlight/etc). */\n        switch (MessageType)\n        {\n            case UTASSERT_CASETYPE_ABORT:\n            case UTASSERT_CASETYPE_FAILURE:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED;\n                break;\n            case UTASSERT_CASETYPE_MIR:\n            case UTASSERT_CASETYPE_WARN:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            case UTASSERT_CASETYPE_TSF:\n            case UTASSERT_CASETYPE_TTF:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_RED | OS_BSP_CONSOLEMODE_BLUE;\n                break;\n            case UTASSERT_CASETYPE_BEGIN:\n                UT_BSP_LogConsoleCall(\"BEGIN-EXTRA-WS\", \"\\n\", 1);\n                OS_BSP_ConsoleOutput_Impl(\"\\n\", 1); /* add a bit of extra whitespace between tests */\n                break;\n            case UTASSERT_CASETYPE_PASS:\n                TermModeBits = OS_BSP_CONSOLEMODE_HIGHLIGHT | OS_BSP_CONSOLEMODE_GREEN;\n                break;\n            default:\n                break;\n        }\n\n        if (MsgEnabled <= 1)\n        {\n            TermModeBits = OS_BSP_CONSOLEMODE_NORMAL;\n        }\n\n        snprintf(Buffer, sizeof(Buffer), \"[%5s]\", UtAssert_GetCaseTypeAbbrev(MessageType));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(TermModeBits);\n        }\n\n        UT_BSP_LogConsoleCall(\"PREFIX\", Buffer, strlen(Buffer));\n        OS_BSP_ConsoleOutput_Impl(Buffer, strlen(Buffer));\n\n        if (TermModeBits != OS_BSP_CONSOLEMODE_NORMAL)\n        {\n            OS_BSP_ConsoleSetMode_Impl(OS_BSP_CONSOLEMODE_NORMAL);\n        }\n\n        UT_BSP_LogConsoleCall(\"SPACE\", \" \", 1);\n        OS_BSP_ConsoleOutput_Impl(\" \", 1);\n        MsgLen = strlen(OutputMessage);\n\n        UT_BSP_LogConsoleCall(\"MSG\", OutputMessage, MsgLen);\n        OS_BSP_ConsoleOutput_Impl(OutputMessage, MsgLen);\n        if (MsgLen == 0 || OutputMessage[MsgLen - 1] != '\\n')\n        {\n            UT_BSP_LogConsoleCall(\"TRAILING-NEWLINE\", \"\\n\", 1);\n            OS_BSP_ConsoleOutput_Impl(\"\\n\", 1);\n        }\n\n        UT_BSP_Unlock();\n    }\n\n    /*\n     * If any ABORT (major failure) message is thrown,\n     * then call a BSP-provided routine to stop the test and possibly dump a core\n     */\n    if (MessageType == UTASSERT_CASETYPE_ABORT)\n    {\n        OS_BSP_Shutdown_Impl();\n    }\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\n[UT_BSP_DoText] BEGIN-EXTRA-WS PTR=0x55da447e8f45 LEN=1 DATA='\\x0A'\n[UT_BSP_DoText] PREFIX PTR=0x7ffd04049c60 LEN=7 DATA='[BEGIN]'\n[UT_BSP_DoText] SPACE PTR=0x55da447e8f63 LEN=1 DATA=' '\n[UT_BSP_DoText] MSG PTR=0x55da447e8ee9 LEN=9 DATA='UNIT TEST'\n[UT_BSP_DoText] TRAILING-NEWLINE PTR=0x55da447e8f45 LEN=1 DATA='\\x0A'\n[UT_BSP_DoText] BEGIN-EXTRA-WS PTR=0x55da447e8f45 LEN=1 DATA='\\x0A'\n[UT_BSP_DoText] PREFIX PTR=0x7ffd04049ba0 LEN=7 DATA='[BEGIN]'\n[UT_BSP_DoText] SPACE PTR=0x55da447e8f63 LEN=1 DATA=' '\n[UT_BSP_DoText] MSG PTR=0x7ffd04049be0 LEN=8 DATA='01 SETUP'\n[UT_BSP_DoText] TRAILING-NEWLINE PTR=0x55da447e8f45 LEN=1 DATA='\\x0A'\n[UT_BSP_DoText] PREFIX PTR=0x7ffd04049bd0 LEN=7 DATA='[  END]'\n[UT_BSP_DoText] SPACE PTR=0x55da447e8f63 LEN=1 DATA=' '\n[UT_BSP_DoText] MSG PTR=0x55da447e8878 LEN=14 DATA='No test cases\\x0A'\n[UT_BSP_DoText] BEGIN-EXTRA-WS PTR=0x55da447e8f45 LEN=1 DATA='\\x0A'\n[UT_BSP_DoText] PREFIX PTR=0x7ffd04049b70 LEN=7 DATA='[BEGIN]'\n[UT_BSP_DoText] SPACE PTR=0x55da447e8f63 LEN=1 DATA=' '\n[UT_BSP_DoText] MSG PTR=0x7ffd04049bb0 LEN=33 DATA='01 OS_VxWorks_BinSemAPI_Impl_Init'\n[UT_BSP_DoText] TRAILING-NEWLINE PTR=0x55da447e8f45 LEN=1 DATA='\\x0A'\n[UT_BSP_DoText] PREFIX PTR=0x7ffd04049840 LEN=7 DATA='[ PASS]'\n[UT_BSP_DoText] SPACE PTR=0x55da447e8f63 LEN=1 DATA=' '\n[UT_BSP_DoText] MSG PTR=0x7ffd040498b0 LEN=96 DATA='01.001 coveragetest-binsem.c:42 - UT_Call_OS_VxWorks_BinSemAPI_I...'\n[UT_BSP_DoText] TRAILING-NEWLINE PTR=0x55da447e8f45 LEN=1 DATA='\\x0A'\n[UT_BSP_DoText] PREFIX PTR=0x7ffd04049ae0 LEN=7 DATA='[ INFO]'\n[UT_BSP_DoText] SPACE PTR=0x55da447e8f63 LEN=1 DATA=' '\n[UT_BSP_DoText] MSG PTR=0x7ffd04049b20 LEN=82 DATA='                       ABORT::0     WARN::0     FLOW::0     DEBU...'\n[UT_BSP_DoText] TRAILING-NEWLINE PTR=0x55da447e8f45 LEN=1 DATA='\\x0A'\n[UT_BSP_DoText] PREFIX PTR=0x7ffd04049ae0 LEN=7 DATA='[  END]'\n[UT_BSP_DoText] SPACE PTR=0x55da447e8f63 LEN=1 DATA=' '\n[UT_BSP_DoText] MSG PTR=0x7ffd04049b20 LEN=102 DATA='01 OS_VxWorks_BinSemAPI_Impl_Init TOTAL::1     PASS::1     FAIL:...'\n[UT_BSP_DoText] TRAILING-NEWLINE PTR=0x55da447e8f45 LEN=1 DATA='\\x0A'\n[UT_BSP_DoText] BEGIN-EXTRA-WS PTR=0x55da447e8f45 LEN=1 DATA='\\x0A'\n[UT_BSP_DoText] PREFIX PTR=0x7ffd04049b70 LEN=7 DATA='[BEGIN]'\n[UT_BSP_DoText] SPACE PTR=0x55da447e8f63 LEN=1 DATA=' '\n[UT_BSP_DoText] MSG PTR=0x7ffd04049bb0 LEN=23 DATA='02 OS_BinSemCreate_Impl'\n[UT_BSP_DoText] TRAILING-NEWLINE PTR=0x55da447e8f45 LEN=1 DATA='\\x0A'\n[UT_BSP_DoText] PREFIX PTR=0x7ffd04049820 LEN=7 DATA='[ PASS]'\n[UT_BSP_DoText] SPACE PTR=0x55da447e8f63 LEN=1 DATA=' '\n[UT_BSP_DoText] MSG PTR=0x7ffd04049890 LEN=90 DATA='02.001 coveragetest-binsem.c:53 - OS_BinSemCreate_Impl(&token, 0...'\n[UT_BSP_DoText] TRAILING-NEWLINE PTR=0x55da447e8f45 LEN=1 DATA='\\x0A'\n[UT_BSP_DoText] PREFIX PTR=0x7ffd04049820 LEN=7 DATA='[ PASS]'\n[UT_BSP_DoText] SPACE PTR=0x55da447e8f63 LEN=1 DATA=' '\n[UT_BSP_DoText] MSG PTR=0x7ffd04049890 LEN=96 DATA='02.002 coveragetest-binsem.c:56 - OS_BinSemCreate_Impl(&token, 0...'\n[UT_BSP_DoText] TRAILING-NEWLINE PTR=0x55da447e8f45 LEN=1 DATA='\\x0A'\n[UT_BSP_DoText] PREFIX PTR=0x7ffd04049ae0 LEN=7 DATA='[ INFO]'\n[UT_BSP_DoText] SPACE PTR=0x55da447e8f63 LEN=1 DATA=' '\n[UT_BSP_DoText] MSG PTR=0x7ffd04049b20 LEN=82 DATA='                       ABORT::0     WARN::0     FLOW::0     DEBU...'\n[UT_BSP_DoText] TRAILING-NEWLINE PTR=0x55da447e8f45 LEN=1 DATA='\\x0A'\n[UT_BSP_DoText] PREFIX PTR=0x7ffd04049ae0 LEN=7 DATA='[  END]'\n[UT_BSP_DoText] SPACE PTR=0x55da447e8f63 LEN=1 DATA=' '\n[UT_BSP_DoText] MSG PTR=0x7ffd04049b20 LEN=92 DATA='02 OS_BinSemCreate_Impl TOTAL::2     PASS::2     FAIL::0     MIR...'\n[UT_BSP_DoText] TRAILING-NEWLINE PTR=0x55da447e8f45 LEN=1 DATA='\\x0A'\n[UT_BSP_DoText] BEGIN-EXTRA-WS PTR=0x55da447e8f45 LEN=1 DATA='\\x0A'\n[UT_BSP_DoText] PREFIX PTR=0x7ffd04049b70 LEN=7 DATA='[BEGIN]'\n[UT_BSP_DoText] SPACE PTR=0x55da447e8f63 LEN=1 DATA=' '\n[UT_BSP_DoText] MSG PTR=0x7ffd04049bb0 LEN=23 DATA='03 OS_BinSemDelete_Impl'\n[UT_BSP_DoText] TRAILING-NEWLINE PTR=0x55da447e8f45 LEN=1 DATA='\\x0A'\n[UT_BSP_DoText] PREFIX PTR=0x7ffd04049820 LEN=7 DATA='[ PASS]'\n[UT_BSP_DoText] SPACE P\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is incorrect. MISRA C:2023 Rule 17.8 forbids modifying a function\u2019s own parameter variables (the pointer value may not be changed; the object pointed-to may be). The UT_BSP_DoText implementation shown does not assign to or otherwise modify its parameters MessageType or OutputMessage \u2014 it only reads them and passes them to other functions. The described parameter modifications (Str += WriteLen; DataLen -= WriteLen) would be a violation if present inside OS_BSP_ConsoleOutput_Impl itself, but that would be a non\u2011compliance in that callee\u2019s implementation, not in UT_BSP_DoText. Modifying formal parameters inside a callee does not make the caller non\u2011compliant. Therefore the report that UT_BSP_DoText violates Rule 17.8 is not correct."
}