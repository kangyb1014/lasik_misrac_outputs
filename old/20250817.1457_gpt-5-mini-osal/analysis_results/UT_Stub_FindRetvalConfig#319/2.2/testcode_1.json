{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn UT_ConfigureGenericStubReturnValue the statement \"StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\" is redundant: immediately afterwards StubPtr is either set to NULL (when Counter>0) or overwritten with UT_GetStubEntry(FuncKey, ReqEntryType) (when Counter<=0). Because the stored value is never used before being overwritten, the call and assignment have no effect on program behavior and can be removed. Therefore this is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_FindRetvalConfig code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2554.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_FindRetvalConfig as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_FindRetvalConfig:\n```c\nUT_StubTableEntry_t *UT_Stub_FindRetvalConfig(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubEntryPtr;\n\n    StubEntryPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED);\n    if (StubEntryPtr != NULL)\n    {\n        /*\n         * The counter on a deferred retval config indicates the number of times it should\n         * be skipped/not used.   Decrement the counter now, and if it is not yet 0, do not\n         * return this yet, and go to a fallback - which could either be a constant value\n         * configuration, or the default fallback of 0.\n         *\n         * By definition, deferred retvals are only used once and then deleted.\n         */\n        --StubEntryPtr->Data.Rvc.Counter;\n\n        if (StubEntryPtr->Data.Rvc.Counter > 0)\n        {\n            StubEntryPtr = NULL;\n        }\n    }\n\n    if (StubEntryPtr == NULL)\n    {\n        StubEntryPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT);\n        if (StubEntryPtr != NULL)\n        {\n            /*\n             * the counter on a constant retval config will track the number of\n             * times the value was actually used, so it is incremented here.  Unlike\n             * deferred retval configs, these values may be used multiple times during\n             * a test.\n             */\n            ++StubEntryPtr->Data.Rvc.Counter;\n        }\n    }\n\n    return StubEntryPtr;\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_FindRetvalConfig code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logger: append simple trace messages to /tmp/logs/2554.txt */\nstatic void UT_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2554.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not affect program behavior */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nUT_StubTableEntry_t *UT_Stub_FindRetvalConfig(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubEntryPtr;\n\n    UT_LogProbe(\"UT_Stub_FindRetvalConfig: entry\");\n\n    StubEntryPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED);\n    UT_LogProbe(\"After UT_GetStubEntry(RETVAL_CONFIG_DEFERRED): StubEntryPtr=%p\", (void *)StubEntryPtr);\n\n    if (StubEntryPtr != NULL)\n    {\n        /*\n         * The counter on a deferred retval config indicates the number of times it should\n         * be skipped/not used.   Decrement the counter now, and if it is not yet 0, do not\n         * return this yet, and go to a fallback - which could either be a constant value\n         * configuration, or the default fallback of 0.\n         *\n         * By definition, deferred retvals are only used once and then deleted.\n         */\n        UT_LogProbe(\"Deferred config: counter before decrement=%d\", StubEntryPtr->Data.Rvc.Counter);\n\n        --StubEntryPtr->Data.Rvc.Counter;\n\n        UT_LogProbe(\"Deferred config: counter after decrement=%d\", StubEntryPtr->Data.Rvc.Counter);\n\n        if (StubEntryPtr->Data.Rvc.Counter > 0)\n        {\n            UT_LogProbe(\"Deferred config: counter > 0, skipping and setting StubEntryPtr=NULL\");\n            StubEntryPtr = NULL;\n        }\n        else\n        {\n            UT_LogProbe(\"Deferred config: counter <= 0, will return this deferred entry and it will be removed by caller\");\n        }\n    }\n\n    if (StubEntryPtr == NULL)\n    {\n        UT_LogProbe(\"Falling back to RETVAL_CONFIG_CONSTANT lookup\");\n        StubEntryPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT);\n        UT_LogProbe(\"After UT_GetStubEntry(RETVAL_CONFIG_CONSTANT): StubEntryPtr=%p\", (void *)StubEntryPtr);\n\n        if (StubEntryPtr != NULL)\n        {\n            /*\n             * the counter on a constant retval config will track the number of\n             * times the value was actually used, so it is incremented here.  Unlike\n             * deferred retval configs, these values may be used multiple times during\n             * a test.\n             */\n            UT_LogProbe(\"Constant config: counter before increment=%d\", StubEntryPtr->Data.Rvc.Counter);\n            ++StubEntryPtr->Data.Rvc.Counter;\n            UT_LogProbe(\"Constant config: counter after increment=%d\", StubEntryPtr->Data.Rvc.Counter);\n        }\n        else\n        {\n            UT_LogProbe(\"No constant retval config found; will return NULL (default fallback)\");\n        }\n    }\n\n    UT_LogProbe(\"UT_Stub_FindRetvalConfig: returning StubEntryPtr=%p\", (void *)StubEntryPtr);\n\n    return StubEntryPtr;\n}\n"
}