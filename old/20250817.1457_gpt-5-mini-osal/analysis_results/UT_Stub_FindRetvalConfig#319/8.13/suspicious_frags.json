{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of UT_Stub_FindRetvalConfig:\n```c\nUT_StubTableEntry_t *UT_Stub_FindRetvalConfig(UT_EntryKey_t FuncKey)\n{\n    UT_StubTableEntry_t *StubEntryPtr;\n\n    StubEntryPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED);\n    if (StubEntryPtr != NULL)\n    {\n        /*\n         * The counter on a deferred retval config indicates the number of times it should\n         * be skipped/not used.   Decrement the counter now, and if it is not yet 0, do not\n         * return this yet, and go to a fallback - which could either be a constant value\n         * configuration, or the default fallback of 0.\n         *\n         * By definition, deferred retvals are only used once and then deleted.\n         */\n        --StubEntryPtr->Data.Rvc.Counter;\n\n        if (StubEntryPtr->Data.Rvc.Counter > 0)\n        {\n            StubEntryPtr = NULL;\n        }\n    }\n\n    if (StubEntryPtr == NULL)\n    {\n        StubEntryPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT);\n        if (StubEntryPtr != NULL)\n        {\n            /*\n             * the counter on a constant retval config will track the number of\n             * times the value was actually used, so it is incremented here.  Unlike\n             * deferred retval configs, these values may be used multiple times during\n             * a test.\n             */\n            ++StubEntryPtr->Data.Rvc.Counter;\n        }\n    }\n\n    return StubEntryPtr;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "StubEntryPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETVAL_CONFIG_CONSTANT);",
    "StubEntryPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_RETVAL_CONFIG_DEFERRED);",
    "--StubEntryPtr->Data.Rvc.Counter;",
    "UT_StubTableEntry_t *StubEntryPtr;",
    "UT_StubTableEntry_t *UT_Stub_FindRetvalConfig(UT_EntryKey_t FuncKey)",
    "++StubEntryPtr->Data.Rvc.Counter;",
    "if (StubEntryPtr->Data.Rvc.Counter > 0)\n        {\n            StubEntryPtr = NULL;\n        }",
    "return StubEntryPtr;"
  ],
  "explanation": "All other fragments in the function are comments, control-flow constructs, or operate on non-pointer scalar types (for example the FuncKey parameter and the Counter members). The only pointer-related entities in this function are the function return type, the local pointer variable StubEntryPtr, the calls that assign to that pointer (UT_GetStubEntry), the places where the pointed-to data is modified (increment/decrement of Counter), and the final return of the pointer \u2014 these are listed above for investigation under MISRA C 2023 Rule 8.13. There are no additional pointer declarations, pointer arithmetic, or other pointer usages in the remaining code that would need separate consideration for const-qualification."
}