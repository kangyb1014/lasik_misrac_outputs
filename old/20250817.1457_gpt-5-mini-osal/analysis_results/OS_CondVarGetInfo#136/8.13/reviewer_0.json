{
  "user_message": "An agent A claimed that the following OS_CondVarGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CondVarGetInfo.\n```c\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The pointer object OS_global_condvar_table is declared as 'extern OS_common_record_t *const OS_global_condvar_table', which makes the pointer itself const but the pointed-to type is not const. In OS_CondVarGetInfo the code only reads from the table (record->name_entry, record->creator) so the table contents could and should be treated as read-only. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible; here it should be declared as 'extern const OS_common_record_t *const OS_global_condvar_table' (or at least 'const OS_common_record_t *') to prevent accidental modification. Therefore this declaration violates Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1091.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void probe_log_entry(const char *stage, unsigned long var_id, const void *condvar_prop, const void *token_addr, const void *record)\n{\n    probe_log_append(\"STAGE=%s var_id=0x%08lx condvar_prop=%p token_addr=%p record=%p\", stage, var_id, condvar_prop, token_addr, record);\n}\n\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    /* Log entry with initial parameters */\n    probe_log_entry(\"entry\", (unsigned long)var_id, (const void *)condvar_prop, (const void *)0, (const void *)0);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    /* Log after clearing output structure */\n    probe_log_entry(\"after_memset\", (unsigned long)var_id, (const void *)condvar_prop, (const void *)0, (const void *)0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log result of ID lookup */\n    probe_log_append(\"after_OS_ObjectIdGetById return_code=%ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        /* Log token address and record pointer */\n        probe_log_entry(\"got_token_and_record\", (unsigned long)var_id, (const void *)condvar_prop, (const void *)&token, (const void *)record);\n\n        /* Log record fields before copying */\n        if (record != NULL)\n        {\n            const char *name_entry = record->name_entry ? record->name_entry : \"<NULL>\";\n            probe_log_append(\"record->name_entry=%s record->creator=0x%08lx\", name_entry, (unsigned long)record->creator);\n        }\n        else\n        {\n            probe_log_append(\"record is NULL\");\n        }\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        /* Log state after copying into condvar_prop */\n        probe_log_append(\"after_copy condvar_prop->name=%s condvar_prop->creator=0x%08lx\", condvar_prop->name, (unsigned long)condvar_prop->creator);\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        /* Log result of implementation-specific call */\n        probe_log_append(\"after_Impl return_code=%ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing token */\n        probe_log_entry(\"after_release\", (unsigned long)var_id, (const void *)condvar_prop, (const void *)&token, (const void *)record);\n    }\n\n    /* Final return value */\n    probe_log_append(\"exit return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_CondVarGetInfo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not proven and therefore not correct as stated. MISRA 8.13 concerns pointer declarations: a pointer should point to a const-qualified type when the pointed-to object is not modified. The provided OS_CondVarGetInfo snippet itself does not show the declaration of OS_global_condvar_table, so you cannot conclude a violation of 8.13 from this function alone. Two important points:\n\n- If the global OS_global_condvar_table is indeed declared as extern OS_common_record_t *const OS_global_condvar_table (i.e., a const pointer to a mutable element), whether that is a MISRA 8.13 violation depends on whether the table elements are ever modified elsewhere. If they are never modified, then the pointee could be const and the global declaration should be changed; if they are modified, the current declaration is appropriate. Agent A did not provide the actual global declaration or whole-program usage to prove it can be const.\n\n- Regardless of the global, the local code could be improved: the local variable record is only used for reads, so declaring it as pointing to const (const OS_common_record_t *record) would better satisfy 8.13 locally. Assigning a non-const pointer to a pointer-to-const is allowed, so this change can be made without changing the global declaration.\n\nBecause the report assumes a specific global declaration and that the table is immutable without providing evidence, the report as given is not correct."
}