{
  "user_message": "An agent A claimed that the following OS_CondVarGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CondVarGetInfo.\n```c\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local variable 'record' is declared as a non-const pointer: 'OS_common_record_t *record;'. In OS_CondVarGetInfo it is only used for read accesses (record->name_entry, record->creator) and never to modify the pointed-to object, so the pointer could and should be const-qualified: 'const OS_common_record_t *record;'. Assigning the result of OS_OBJECT_TABLE_GET (which yields OS_common_record_t *) to a pointer-to-const is allowed; therefore the current declaration violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    /* Probe log: entry and parameter values */\n    {\n        FILE *log = fopen(\"/tmp/logs/1091.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_CondVarGetInfo: entry, var_id=%ld, condvar_prop=%p\\n\", (long)var_id, (void *)condvar_prop);\n            fclose(log);\n        }\n    }\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    /* Probe log: after memset */\n    {\n        FILE *log = fopen(\"/tmp/logs/1091.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_CondVarGetInfo: cleared condvar_prop (zeroed).\\n\");\n            fclose(log);\n        }\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Probe log: result of ID lookup */\n    {\n        FILE *log = fopen(\"/tmp/logs/1091.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_CondVarGetInfo: OS_ObjectIdGetById returned %ld, token=%p\\n\", (long)return_code, (void *)&token);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        /* Probe log: record pointer and fields read from it (evidence for read-only usage) */\n        {\n            FILE *log = fopen(\"/tmp/logs/1091.txt\", \"a\");\n            if (log != NULL)\n            {\n                if (record != NULL)\n                {\n                    /* Log the pointer value and the read-only fields accessed below */\n                    fprintf(log, \"OS_CondVarGetInfo: record=%p, name_entry=\\\"%s\\\", creator=%ld\\n\",\n                            (void *)record,\n                            (record->name_entry != NULL) ? record->name_entry : \"(null)\",\n                            (long)record->creator);\n                }\n                else\n                {\n                    fprintf(log, \"OS_CondVarGetInfo: record is NULL after OS_OBJECT_TABLE_GET\\n\");\n                }\n                fclose(log);\n            }\n        }\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        /* Probe log: state before calling implementation-specific getter */\n        {\n            FILE *log = fopen(\"/tmp/logs/1091.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CondVarGetInfo: about to call OS_CondVarGetInfo_Impl, token=%p, condvar_prop.name=\\\"%s\\\", creator=%ld\\n\",\n                        (void *)&token, condvar_prop->name, (long)condvar_prop->creator);\n                fclose(log);\n            }\n        }\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        /* Probe log: result from implementation-specific getter */\n        {\n            FILE *log = fopen(\"/tmp/logs/1091.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CondVarGetInfo: OS_CondVarGetInfo_Impl returned %ld\\n\", (long)return_code);\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Probe log: after release */\n        {\n            FILE *log = fopen(\"/tmp/logs/1091.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_CondVarGetInfo: token released (%p)\\n\", (void *)&token);\n                fclose(log);\n            }\n        }\n    }\n\n    /* Probe log: exit and return code */\n    {\n        FILE *log = fopen(\"/tmp/logs/1091.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_CondVarGetInfo: exit, return_code=%ld\\n\", (long)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_CondVarGetInfo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In this function the local pointer variable 'record' is only used for read accesses (record->name_entry and record->creator) and is never used to modify the pointee. Under MISRA C 2023 Rule 8.13 a pointer should be to a const-qualified type whenever possible, so declaring it as\n  const OS_common_record_t *record;\nwould be the proper, compliant form. Assigning the result of OS_OBJECT_TABLE_GET (which yields an OS_common_record_t *) to a pointer-to-const is allowed by C (no cast required), so there is no language obstacle to making this change. The provided runtime logging/testing details do not affect this static-rule conclusion. The only caveat would be if other code in this function later required a modifiable record (or the pointer were passed to a non-const API), in which case const would not be possible; that is not the case here."
}