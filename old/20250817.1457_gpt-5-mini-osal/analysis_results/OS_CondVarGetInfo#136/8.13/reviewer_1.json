{
  "user_message": "An agent A claimed that the following OS_CondVarGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CondVarGetInfo.\n```c\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The assignment record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token) yields a pointer of type OS_common_record_t * to entries in OS_global_condvar_table. The table is declared as OS_common_record_t *const (a const pointer to non-const data) and the local variable 'record' is a non-const pointer, yet the code only reads from the record (e.g. strncpy from record->name_entry). According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible (e.g. const OS_common_record_t *record or declare the table as const OS_common_record_t *const), so this is a violation.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_condvar_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1091.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Do not disturb original logic on logging failure */\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Entry log */\n    os_condvar_probe_log(\"ENTER: OS_CondVarGetInfo var_id=%llu condvar_prop=%p\", (unsigned long long) var_id, (void *) condvar_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n    os_condvar_probe_log(\"cleared condvar_prop at %p (size=%zu)\", (void *) condvar_prop, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    os_condvar_probe_log(\"OS_ObjectIdGetById returned %ld\", (long) return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n        os_condvar_probe_log(\"OS_OBJECT_TABLE_GET returned record=%p for token\", (void *) record);\n\n        /* Log record contents that are read below (preserve original reads) */\n        if (record != NULL)\n        {\n            /* Attempt to safely log name and creator; do not modify record */\n            /* Use a defensive max-length when printing name to avoid overly long output */\n            const size_t max_log_len = 256U;\n            size_t name_len = 0U;\n\n            /* Try to determine string length up to max_log_len */\n            if (record->name_entry != NULL)\n            {\n                name_len = strnlen(record->name_entry, max_log_len);\n            }\n\n            if (record->name_entry != NULL)\n            {\n                if (name_len < max_log_len)\n                {\n                    os_condvar_probe_log(\"record->name_entry=\\\"%s\\\" (len=%zu)\", record->name_entry, name_len);\n                }\n                else\n                {\n                    /* Print truncated view if no terminator within max_log_len */\n                    char tmpbuf[257];\n                    memcpy(tmpbuf, record->name_entry, 256);\n                    tmpbuf[256] = '\\0';\n                    os_condvar_probe_log(\"record->name_entry (truncated)=\\\"%s\\\" (>= %zu)\", tmpbuf, max_log_len);\n                }\n            }\n            else\n            {\n                os_condvar_probe_log(\"record->name_entry is NULL\");\n            }\n\n            os_condvar_probe_log(\"record->creator=%u\", (unsigned) record->creator);\n        }\n        else\n        {\n            os_condvar_probe_log(\"Warning: record is NULL despite OS_SUCCESS from OS_ObjectIdGetById\");\n        }\n\n        /* Preserve original behavior: copy name and creator into the output structure */\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        os_condvar_probe_log(\"populated condvar_prop->name=\\\"%s\\\" condvar_prop->creator=%u\", condvar_prop->name, (unsigned) condvar_prop->creator);\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n        os_condvar_probe_log(\"OS_CondVarGetInfo_Impl returned %ld\", (long) return_code);\n\n        OS_ObjectIdRelease(&token);\n        os_condvar_probe_log(\"OS_ObjectIdRelease called for token\");\n    }\n    else\n    {\n        os_condvar_probe_log(\"Exiting early with return_code=%ld\", (long) return_code);\n    }\n\n    os_condvar_probe_log(\"EXIT: OS_CondVarGetInfo returning %ld\", (long) return_code);\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_CondVarGetInfo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct for the code shown. In the function the local pointer record is declared as OS_common_record_t * but is only used for read-only access (strncpy from record->name_entry and reading record->creator). MISRA C 2023 Rule 8.13 advises that pointers should point to const-qualified types whenever possible, so the local declaration should be changed to const OS_common_record_t *record (or the global table's element type made const) to reflect the read-only usage. Converting a non-const pointer to a pointer-to-const is permitted in C, so this change is compatible with the assignment from OS_OBJECT_TABLE_GET. The only caveat is if elsewhere in the omitted code the same local 'record' value is used for modifications or passed to APIs that require a non-const pointer; in that case the change would not be possible and the reported issue would need a documented justification. Given the provided snippet, however, the agent A's violation report is correct."
}