{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_OBJECT_TABLE_GET(tbl, tok) yields a pointer of type OS_common_record_t * (address of tbl[index]). In the call record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token); record is a non-const pointer but the function only reads the record. Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible (e.g. const OS_common_record_t *), so returning/using a non-const pointer for read-only access violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1091.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetInfo:\n```c\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <time.h>\n\n/* Probe logging helper - appends a timestamped message to /tmp/logs/1091.txt */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    char buf[512];\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n\n    FILE *f = fopen(\"/tmp/logs/1091.txt\", \"a\");\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        (void)fprintf(f, \"%ld: %s\\n\", (long)t, buf);\n        (void)fclose(f);\n    }\n}\n\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry and input parameter pointers */\n    os_probe_log(\"ENTER: OS_CondVarGetInfo called with var_id=%lu, condvar_prop=%p\",\n                 (unsigned long) var_id, (void *)condvar_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n    os_probe_log(\"condvar_prop zeroed: size=%zu, addr=%p\",\n                 sizeof(OS_condvar_prop_t), (void *)condvar_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    os_probe_log(\"OS_ObjectIdGetById returned %ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Capture the non-const pointer returned by the table macro and log it */\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n        os_probe_log(\"OS_OBJECT_TABLE_GET returned record pointer %p (non-const), token addr=%p\",\n                     (void *)record, (void *)&token);\n\n        if (record != NULL)\n        {\n            /* Log the fields that will be read from the non-const record to show the read-only usage */\n            /* Guard string access to avoid potential issues if name_entry is not null-terminated */\n            char name_buf[128];\n            name_buf[0] = '\\0';\n            (void)strncpy(name_buf, record->name_entry, sizeof(name_buf) - 1);\n            name_buf[sizeof(name_buf) - 1] = '\\0';\n\n            os_probe_log(\"record->name_entry='%s', record->creator=%ld\",\n                         name_buf, (long)record->creator);\n        }\n        else\n        {\n            os_probe_log(\"record is NULL after OS_OBJECT_TABLE_GET\");\n        }\n\n        /* Preserve original behavior while logging the values being copied */\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->name[sizeof(condvar_prop->name) - 1] = '\\0';\n        condvar_prop->creator = record->creator;\n\n        os_probe_log(\"Populated condvar_prop->name='%s', condvar_prop->creator=%ld\",\n                     condvar_prop->name, (long)condvar_prop->creator);\n\n        os_probe_log(\"Calling OS_CondVarGetInfo_Impl with token addr=%p, condvar_prop=%p\",\n                     (void *)&token, (void *)condvar_prop);\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        os_probe_log(\"OS_CondVarGetInfo_Impl returned %ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n        os_probe_log(\"OS_ObjectIdRelease called for token addr=%p\", (void *)&token);\n    }\n\n    os_probe_log(\"EXIT: OS_CondVarGetInfo returning %ld\", (long)return_code);\n    return return_code;\n}\n"
}