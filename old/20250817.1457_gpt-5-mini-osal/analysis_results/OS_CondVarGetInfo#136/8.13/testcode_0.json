{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer object OS_global_condvar_table is declared as 'extern OS_common_record_t *const OS_global_condvar_table', which makes the pointer itself const but the pointed-to type is not const. In OS_CondVarGetInfo the code only reads from the table (record->name_entry, record->creator) so the table contents could and should be treated as read-only. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible; here it should be declared as 'extern const OS_common_record_t *const OS_global_condvar_table' (or at least 'const OS_common_record_t *') to prevent accidental modification. Therefore this declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1091.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetInfo:\n```c\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n\n/* Helper logging functions - small, self-contained probes that append to /tmp/logs/1091.txt */\nstatic void probe_log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1091.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void probe_log_entry(const char *stage, unsigned long var_id, const void *condvar_prop, const void *token_addr, const void *record)\n{\n    probe_log_append(\"STAGE=%s var_id=0x%08lx condvar_prop=%p token_addr=%p record=%p\", stage, var_id, condvar_prop, token_addr, record);\n}\n\n/* Modified function with probes inserted. Original logic preserved. */\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    /* Log entry with initial parameters */\n    probe_log_entry(\"entry\", (unsigned long)var_id, (const void *)condvar_prop, (const void *)0, (const void *)0);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    /* Log after clearing output structure */\n    probe_log_entry(\"after_memset\", (unsigned long)var_id, (const void *)condvar_prop, (const void *)0, (const void *)0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    /* Log result of ID lookup */\n    probe_log_append(\"after_OS_ObjectIdGetById return_code=%ld\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        /* Log token address and record pointer */\n        probe_log_entry(\"got_token_and_record\", (unsigned long)var_id, (const void *)condvar_prop, (const void *)&token, (const void *)record);\n\n        /* Log record fields before copying */\n        if (record != NULL)\n        {\n            const char *name_entry = record->name_entry ? record->name_entry : \"<NULL>\";\n            probe_log_append(\"record->name_entry=%s record->creator=0x%08lx\", name_entry, (unsigned long)record->creator);\n        }\n        else\n        {\n            probe_log_append(\"record is NULL\");\n        }\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        /* Log state after copying into condvar_prop */\n        probe_log_append(\"after_copy condvar_prop->name=%s condvar_prop->creator=0x%08lx\", condvar_prop->name, (unsigned long)condvar_prop->creator);\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        /* Log result of implementation-specific call */\n        probe_log_append(\"after_Impl return_code=%ld\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after releasing token */\n        probe_log_entry(\"after_release\", (unsigned long)var_id, (const void *)condvar_prop, (const void *)&token, (const void *)record);\n    }\n\n    /* Final return value */\n    probe_log_append(\"exit return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}