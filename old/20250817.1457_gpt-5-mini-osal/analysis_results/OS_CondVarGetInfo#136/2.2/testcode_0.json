{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_CondVarGetInfo_Impl is a no-op stub that always returns OS_SUCCESS and does not modify any state or outputs. It is called from OS_CondVarGetInfo and its return value simply overwrites an already-successful return_code. Removing the call and the stub would not change the observable program behaviour (the condvar_prop fields are already set by the caller before the call, OS_ObjectIdRelease is still invoked afterwards, and the final return_code remains OS_SUCCESS). Therefore this executed no-op constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1090.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetInfo:\n```c\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Helper logging function: append timestamped messages to /tmp/logs/1090.txt */\nstatic void OS_CondVarGetInfo_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1090.txt\", \"a\");\n    va_list ap;\n    time_t t;\n    struct tm tm_buf;\n\n    if (!f)\n    {\n        /* Try to create the directory and reopen. If this fails, give up silently to preserve original behavior. */\n        (void)mkdir(\"/tmp/logs\", 0755);\n        f = fopen(\"/tmp/logs/1090.txt\", \"a\");\n        if (!f)\n        {\n            return;\n        }\n    }\n\n    t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        (void)localtime_r(&t, &tm_buf);\n        fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \",\n                tm_buf.tm_year + 1900,\n                tm_buf.tm_mon + 1,\n                tm_buf.tm_mday,\n                tm_buf.tm_hour,\n                tm_buf.tm_min,\n                tm_buf.tm_sec);\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    OS_CondVarGetInfo_Log(\"ENTER: OS_CondVarGetInfo var_id=%llu condvar_prop=%p\", (unsigned long long)var_id, (void *)condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    /* Log state after zeroing the output structure */\n    OS_CondVarGetInfo_Log(\"after memset: condvar_prop->name=\\\"%s\\\" creator=%llu\",\n                          condvar_prop->name, (unsigned long long)condvar_prop->creator);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n\n    OS_CondVarGetInfo_Log(\"OS_ObjectIdGetById returned %ld (token=%p)\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        /* Log the record contents observed prior to copying */\n        OS_CondVarGetInfo_Log(\"record->name_entry=\\\"%s\\\" record->creator=%llu\",\n                              record->name_entry, (unsigned long long)record->creator);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        /* Log state just before calling the Impl function */\n        OS_CondVarGetInfo_Log(\"before Impl call: condvar_prop->name=\\\"%s\\\" creator=%llu return_code=%ld\",\n                              condvar_prop->name, (unsigned long long)condvar_prop->creator, (long)return_code);\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        /* Log the return from the Impl and the output structure afterwards to detect no-op behavior */\n        OS_CondVarGetInfo_Log(\"after Impl call: return_code=%ld condvar_prop->name=\\\"%s\\\" creator=%llu\",\n                              (long)return_code, condvar_prop->name, (unsigned long long)condvar_prop->creator);\n\n        OS_CondVarGetInfo_Log(\"calling OS_ObjectIdRelease for token=%p\", (void *)&token);\n        OS_ObjectIdRelease(&token);\n    }\n    else\n    {\n        OS_CondVarGetInfo_Log(\"OS_ObjectIdGetById failed with %ld, skipping record lookup and Impl call\", (long)return_code);\n    }\n\n    OS_CondVarGetInfo_Log(\"EXIT: OS_CondVarGetInfo returning %ld\", (long)return_code);\n\n    return return_code;\n}\n"
}