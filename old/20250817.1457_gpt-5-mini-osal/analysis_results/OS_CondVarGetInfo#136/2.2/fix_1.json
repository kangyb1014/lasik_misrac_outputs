{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void os_condvar_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1090.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n\n    /* Try localtime_r when available; fall back to localtime */\n#if defined(_POSIX_THREAD_SAFE_FUNCTIONS)\n    localtime_r(&t, &tm_buf);\n#else\n    {\n        struct tm *tmp = localtime(&t);\n        if (tmp != NULL)\n        {\n            tm_buf = *tmp;\n        }\n        else\n        {\n            memset(&tm_buf, 0, sizeof(tm_buf));\n        }\n    }\n#endif\n\n    char timebuf[64];\n    (void)strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n    fprintf(f, \"%s - \", timebuf);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry and parameters (do not dereference condvar_prop before the check) */\n    os_condvar_log(\"ENTER OS_CondVarGetInfo: var_id=%lu, condvar_prop=%p\", (unsigned long)var_id, (void *)condvar_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n    os_condvar_log(\"memset condvar_prop -> zeroed (size=%zu)\", sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    os_condvar_log(\"OS_ObjectIdGetById returned %ld (token addr=%p)\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n        os_condvar_log(\"record lookup -> record=%p\", (void *)record);\n\n        /* Populate condvar_prop as original code does */\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->name[sizeof(condvar_prop->name) - 1] = '\\0';\n        condvar_prop->creator = record->creator;\n\n        /* Log the state just before calling the Impl function */\n        {\n            /* Copy name to a local buffer to ensure null-termination for logging */\n            char namebuf[sizeof(condvar_prop->name) + 1];\n            memset(namebuf, 0, sizeof(namebuf));\n            strncpy(namebuf, condvar_prop->name, sizeof(namebuf) - 1);\n\n            os_condvar_log(\"Before Impl: return_code=%ld, condvar_prop->name=\\\"%s\\\", condvar_prop->creator=%lu\",\n                            (long)return_code, namebuf, (unsigned long)condvar_prop->creator);\n        }\n\n        /* Probe: call the implementation and capture its return value */\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n        os_condvar_log(\"OS_CondVarGetInfo_Impl returned %ld (token addr=%p)\", (long)return_code, (void *)&token);\n\n        /* Log state after Impl call */\n        {\n            char namebuf[sizeof(condvar_prop->name) + 1];\n            memset(namebuf, 0, sizeof(namebuf));\n            strncpy(namebuf, condvar_prop->name, sizeof(namebuf) - 1);\n\n            os_condvar_log(\"After Impl: return_code=%ld, condvar_prop->name=\\\"%s\\\", condvar_prop->creator=%lu\",\n                            (long)return_code, namebuf, (unsigned long)condvar_prop->creator);\n        }\n\n        OS_ObjectIdRelease(&token);\n        os_condvar_log(\"token released (token addr=%p)\", (void *)&token);\n    }\n    else\n    {\n        os_condvar_log(\"OS_ObjectIdGetById failed, returning %ld\", (long)return_code);\n    }\n\n    os_condvar_log(\"EXIT OS_CondVarGetInfo: returning %ld\", (long)return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp7gzmxp05/src/src/os/shared/src/osapi-condvar.c: In function 'os_condvar_log':\n/tmp/tmp7gzmxp05/src/src/os/shared/src/osapi-condvar.c:304:15: error: storage size of 'tm_buf' isn't known\n  304 |     struct tm tm_buf;\n      |               ^~~~~~\n/tmp/tmp7gzmxp05/src/src/os/shared/src/osapi-condvar.c:314:22: error: invalid use of undefined type 'struct tm'\n  314 |             tm_buf = *tmp;\n      |                      ^\n/tmp/tmp7gzmxp05/src/src/os/shared/src/osapi-condvar.c:330:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  330 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/__/__/os/shared/src/osapi-condvar.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:3353: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-condvar.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_CondVarGetInfo as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <time.h>\n#include <string.h>\n#include <stdarg.h>\n\nstatic void os_condvar_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1090.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n\n    /* Try localtime_r when available; fall back to localtime */\n#if defined(_POSIX_THREAD_SAFE_FUNCTIONS)\n    localtime_r(&t, &tm_buf);\n#else\n    {\n        struct tm *tmp = localtime(&t);\n        if (tmp != NULL)\n        {\n            tm_buf = *tmp;\n        }\n        else\n        {\n            memset(&tm_buf, 0, sizeof(tm_buf));\n        }\n    }\n#endif\n\n    char timebuf[64];\n    (void)strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n    fprintf(f, \"%s - \", timebuf);\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast to the standard va_list expected by vfprintf in case of differing typedefs */\n    vfprintf(f, fmt, (va_list)ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry and parameters (do not dereference condvar_prop before the check) */\n    os_condvar_log(\"ENTER OS_CondVarGetInfo: var_id=%lu, condvar_prop=%p\", (unsigned long)var_id, (void *)condvar_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n    os_condvar_log(\"memset condvar_prop -> zeroed (size=%zu)\", sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    os_condvar_log(\"OS_ObjectIdGetById returned %ld (token addr=%p)\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n        os_condvar_log(\"record lookup -> record=%p\", (void *)record);\n\n        /* Populate condvar_prop as original code does */\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->name[sizeof(condvar_prop->name) - 1] = '\\0';\n        condvar_prop->creator = record->creator;\n\n        /* Log the state just before calling the Impl function */\n        {\n            /* Copy name to a local buffer to ensure null-termination for logging */\n            char namebuf[sizeof(condvar_prop->name) + 1];\n            memset(namebuf, 0, sizeof(namebuf));\n            strncpy(namebuf, condvar_prop->name, sizeof(namebuf) - 1);\n\n            os_condvar_log(\"Before Impl: return_code=%ld, condvar_prop->name=\\\"%s\\\", condvar_prop->creator=%lu\",\n                            (long)return_code, namebuf, (unsigned long)condvar_prop->creator);\n        }\n\n        /* Probe: call the implementation and capture its return value */\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n        os_condvar_log(\"OS_CondVarGetInfo_Impl returned %ld (token addr=%p)\", (long)return_code, (void *)&token);\n\n        /* Log state after Impl call */\n        {\n            char namebuf[sizeof(condvar_prop->name) + 1];\n            memset(namebuf, 0, sizeof(namebuf));\n            strncpy(namebuf, condvar_prop->name, sizeof(namebuf) - 1);\n\n            os_condvar_log(\"After Impl: return_code=%ld, condvar_prop->name=\\\"%s\\\", condvar_prop->creator=%lu\",\n                            (long)return_code, namebuf, (unsigned long)condvar_prop->creator);\n        }\n\n        OS_ObjectIdRelease(&token);\n        os_condvar_log(\"token released (token addr=%p)\", (void *)&token);\n    }\n    else\n    {\n        os_condvar_log(\"OS_ObjectIdGetById failed, returning %ld\", (long)return_code);\n    }\n\n    os_condvar_log(\"EXIT OS_CondVarGetInfo: returning %ld\", (long)return_code);\n\n    return return_code;\n}\n",
  "explanation": "Two issues prevented compilation: struct tm was incomplete (missing <time.h>) and the va_list passed to vfprintf could have a differing typedef. I added the necessary headers (<time.h>, <stdio.h>, <string.h>, <stdarg.h>) so struct tm and va_list are defined. I also cast the va_list when calling vfprintf to (va_list)ap to avoid a typedef mismatch error. No logic of OS_CondVarGetInfo was changed."
}