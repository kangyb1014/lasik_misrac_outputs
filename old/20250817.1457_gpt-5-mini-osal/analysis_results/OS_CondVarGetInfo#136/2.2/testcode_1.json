{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to OS_CondVarGetInfo_Impl(&token, condvar_prop) is dead: the provided implementation simply returns OS_SUCCESS and performs no side effects. Prior to the call return_code is already OS_SUCCESS and condvar_prop has been populated from the record; overwriting return_code with OS_SUCCESS again and invoking a no-op does not change program behaviour. Removing the call would not affect observable behaviour, so this constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CondVarGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1090.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CondVarGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CondVarGetInfo:\n```c\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CondVarGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n#include <time.h>\n\n/* Helper: append a formatted log line to /tmp/logs/1090.txt */\nstatic void os_condvar_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1090.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n\n    /* Try localtime_r when available; fall back to localtime */\n#if defined(_POSIX_THREAD_SAFE_FUNCTIONS)\n    localtime_r(&t, &tm_buf);\n#else\n    {\n        struct tm *tmp = localtime(&t);\n        if (tmp != NULL)\n        {\n            tm_buf = *tmp;\n        }\n        else\n        {\n            memset(&tm_buf, 0, sizeof(tm_buf));\n        }\n    }\n#endif\n\n    char timebuf[64];\n    (void)strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n    fprintf(f, \"%s - \", timebuf);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry and parameters (do not dereference condvar_prop before the check) */\n    os_condvar_log(\"ENTER OS_CondVarGetInfo: var_id=%lu, condvar_prop=%p\", (unsigned long)var_id, (void *)condvar_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n    os_condvar_log(\"memset condvar_prop -> zeroed (size=%zu)\", sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    os_condvar_log(\"OS_ObjectIdGetById returned %ld (token addr=%p)\", (long)return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n        os_condvar_log(\"record lookup -> record=%p\", (void *)record);\n\n        /* Populate condvar_prop as original code does */\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->name[sizeof(condvar_prop->name) - 1] = '\\0';\n        condvar_prop->creator = record->creator;\n\n        /* Log the state just before calling the Impl function */\n        {\n            /* Copy name to a local buffer to ensure null-termination for logging */\n            char namebuf[sizeof(condvar_prop->name) + 1];\n            memset(namebuf, 0, sizeof(namebuf));\n            strncpy(namebuf, condvar_prop->name, sizeof(namebuf) - 1);\n\n            os_condvar_log(\"Before Impl: return_code=%ld, condvar_prop->name=\\\"%s\\\", condvar_prop->creator=%lu\",\n                            (long)return_code, namebuf, (unsigned long)condvar_prop->creator);\n        }\n\n        /* Probe: call the implementation and capture its return value */\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n        os_condvar_log(\"OS_CondVarGetInfo_Impl returned %ld (token addr=%p)\", (long)return_code, (void *)&token);\n\n        /* Log state after Impl call */\n        {\n            char namebuf[sizeof(condvar_prop->name) + 1];\n            memset(namebuf, 0, sizeof(namebuf));\n            strncpy(namebuf, condvar_prop->name, sizeof(namebuf) - 1);\n\n            os_condvar_log(\"After Impl: return_code=%ld, condvar_prop->name=\\\"%s\\\", condvar_prop->creator=%lu\",\n                            (long)return_code, namebuf, (unsigned long)condvar_prop->creator);\n        }\n\n        OS_ObjectIdRelease(&token);\n        os_condvar_log(\"token released (token addr=%p)\", (void *)&token);\n    }\n    else\n    {\n        os_condvar_log(\"OS_ObjectIdGetById failed, returning %ld\", (long)return_code);\n    }\n\n    os_condvar_log(\"EXIT OS_CondVarGetInfo: returning %ld\", (long)return_code);\n\n    return return_code;\n}\n"
}