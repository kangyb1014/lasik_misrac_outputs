{
  "user_message": "An agent A claimed that the following OS_CondVarGetInfo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_CondVarGetInfo.\n```c\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If record->name_entry does not have at least sizeof(condvar_prop->name)-1 bytes available (for example if OS_MAX_API_NAME is 20 but record->name_entry points to a smaller buffer or is not NUL-terminated within the first 19 bytes), then strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1) may read beyond the bounds of record->name_entry. Although the destination is zeroed beforehand (so no overflow on the destination), the call can still over-read the source buffer if the source allocation/termination is smaller than the copied length.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_condvar_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1095.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_CondVarGetInfo(osal_id_t var_id, OS_condvar_prop_t *condvar_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry and parameters */\n    os_condvar_log(\"OS_CondVarGetInfo: ENTER var_id=%ld, condvar_prop=%p\\n\", (long)var_id, (void *)condvar_prop);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(condvar_prop);\n\n    memset(condvar_prop, 0, sizeof(OS_condvar_prop_t));\n    os_condvar_log(\"condvar_prop zeroed: sizeof(OS_condvar_prop_t)=%zu\\n\", sizeof(OS_condvar_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONDVAR, var_id, &token);\n    os_condvar_log(\"OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_condvar_table, token);\n\n        /* Log state before strncpy */\n        os_condvar_log(\"record=%p, record->name_entry=%p, condvar_prop->name_size=%zu\\n\",\n                       (void *)record, (void *)record->name_entry, sizeof(condvar_prop->name));\n\n        /* Log the copy intent (does not change behavior) */\n        os_condvar_log(\"About to call strncpy(dest=condvar_prop->name, src=record->name_entry, n=%zu)\\n\",\n                       (size_t)(sizeof(condvar_prop->name) - 1));\n\n        /* Original operation that may over-read the source in some scenarios */\n        strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1);\n        condvar_prop->creator = record->creator;\n\n        /* Log the result in the destination (destination is zeroed before copy, so accessing it is safe)\n           Use strnlen on the destination to avoid reading beyond its bounds. */\n        size_t name_len = strnlen(condvar_prop->name, sizeof(condvar_prop->name));\n        os_condvar_log(\"After strncpy: condvar_prop->name length (within dest) = %zu\\n\", name_len);\n\n        /* Print the printable portion of the name (bounded by the destination size) */\n        os_condvar_log(\"After strncpy: condvar_prop->name (printable, up to length) = '%.*s'\\n\",\n                       (int)name_len, condvar_prop->name);\n\n        /* Also log the raw bytes in the destination buffer (entire destination) as hex to catch any non-\\0 data\n           that indicates data copied from beyond intended source bounds. */\n        os_condvar_log(\"After strncpy: condvar_prop->name hex:\");\n        for (size_t i = 0; i < sizeof(condvar_prop->name); ++i)\n        {\n            unsigned char b = (unsigned char)condvar_prop->name[i];\n            os_condvar_log(\" %02x\", b);\n        }\n        os_condvar_log(\"\\n\");\n\n        /* Continue with original logic and log the implementation call/result */\n        return_code = OS_CondVarGetInfo_Impl(&token, condvar_prop);\n        os_condvar_log(\"OS_CondVarGetInfo_Impl returned %ld\\n\", (long)return_code);\n\n        OS_ObjectIdRelease(&token);\n        os_condvar_log(\"OS_ObjectIdRelease called for token=%p\\n\", (void *)&token);\n    }\n\n    os_condvar_log(\"OS_CondVarGetInfo: EXIT returning %ld\\n\", (long)return_code);\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_CondVarGetInfo. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The call strncpy(condvar_prop->name, record->name_entry, sizeof(condvar_prop->name) - 1) will cause strncpy to read up to n bytes from the source pointer record->name_entry. If there is no proven guarantee that the object pointed to by record->name_entry has at least n bytes (or is NUL-terminated within n bytes), this can result in reads beyond the bounds of the source object, which violates MISRA C 2023 Rule 21.17. Zeroing the destination beforehand prevents destination overflow but does not prevent an over-read of the source. To be compliant the code must ensure (by type/invariant or explicit length check) that the source object is at least n bytes long or otherwise use an API that is bounded by the actual source size (or copy only up to the source length)."
}