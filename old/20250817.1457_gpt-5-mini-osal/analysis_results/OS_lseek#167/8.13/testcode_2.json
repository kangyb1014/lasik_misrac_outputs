{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the prototype of OS_GenericSeek_Impl is int32 OS_GenericSeek_Impl(OS_object_token_t *token, int32 offset, uint32 whence) and the function does not modify the object pointed to by token, then passing &token here violates MISRA C 2023 Rule 8.13 because the pointer parameter should be declared as pointing to a const-qualified type (const OS_object_token_t *). If, however, the implementation legitimately modifies *token, then the non-const pointer is required and there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_lseek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1339.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_lseek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_lseek:\n```c\nint32 OS_lseek(osal_id_t filedes, int32 offset, uint32 whence)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericSeek_Impl(&token, offset, whence);\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_lseek code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n/* Probe helper that logs a raw byte dump of the token and the return code. */\nstatic void OS_lseek_log_raw(const char *stage, const OS_object_token_t *token, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1339.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only. Do not change control flow. */\n    }\n\n    fprintf(f, \"OS_lseek: %s\\n\", (stage != NULL) ? stage : \"(null)\");\n    fprintf(f, \" return_code=%ld\\n\", (long)return_code);\n    fprintf(f, \" token_address=%p size=%zu\\n\", (void *)token, (size_t)sizeof(OS_object_token_t));\n\n    /* Dump token bytes in hex so other agents can compare before/after */\n    {\n        const unsigned char *bytes = (const unsigned char *)token;\n        size_t i;\n        fprintf(f, \" token_bytes=\");\n        for (i = 0u; i < sizeof(OS_object_token_t); ++i)\n        {\n            fprintf(f, \"%02X\", (unsigned)bytes[i]);\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\n/* Main function with probes inserted but original logic preserved. */\nint32 OS_lseek(osal_id_t filedes, int32 offset, uint32 whence)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log token state immediately after successful get-by-id */\n        OS_lseek_log_raw(\"after_ObjectIdGetById\", &token, return_code);\n\n        /* Save a raw snapshot of the token for later comparison */\n        unsigned char before_snapshot[sizeof(OS_object_token_t)];\n        memcpy(before_snapshot, (const void *)&token, sizeof(before_snapshot));\n\n        /* Call the generic seek implementation (original call preserved) */\n        return_code = OS_GenericSeek_Impl(&token, offset, whence);\n\n        /* Log token state after the implementation call */\n        OS_lseek_log_raw(\"after_GenericSeek_Impl\", &token, return_code);\n\n        /* Compare snapshots and log whether token was modified */\n        {\n            bool changed = false;\n            size_t first_diff = (size_t)-1;\n            size_t i;\n            const unsigned char *after_bytes = (const unsigned char *)&token;\n\n            for (i = 0u; i < sizeof(OS_object_token_t); ++i)\n            {\n                if (before_snapshot[i] != after_bytes[i])\n                {\n                    changed = true;\n                    first_diff = i;\n                    break;\n                }\n            }\n\n            FILE *f = fopen(\"/tmp/logs/1339.txt\", \"a\");\n            if (f != NULL)\n            {\n                if (changed)\n                {\n                    fprintf(f, \"OS_lseek: token MODIFIED by OS_GenericSeek_Impl; first_diff_index=%zu\\n\", first_diff);\n                }\n                else\n                {\n                    fprintf(f, \"OS_lseek: token UNCHANGED by OS_GenericSeek_Impl\\n\");\n                }\n                fprintf(f, \"====\\n\");\n                fclose(f);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n"
}