{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_lseek:\n```c\nint32 OS_lseek(osal_id_t filedes, int32 offset, uint32 whence)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericSeek_Impl(&token, offset, whence);\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated in the shown call: &token is passed as an output parameter so the callee is expected to modify the object, therefore a non-const pointer is appropriate. A specific violation scenario would be if OS_ObjectIdGetById only read from the pointed object (i.e. it does not modify *token) but its parameter is declared as a non-const pointer (OS_object_token_t *), in which case the pointer should be declared to point to a const-qualified type (const OS_object_token_t *) and the current declaration/use would violate Rule 8.13."
}