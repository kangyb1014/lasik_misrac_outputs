{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_DEBUG is implemented as a no-op that still gets executed (for example: #define OS_DEBUG(fmt, ...) ((void)0) or a logging stub that performs no observable side-effect), then the statement OS_DEBUG(\"lseek: %s\\n\", strerror(errno)); constitutes dead code: it is executed but its removal would not affect program behaviour. In that situation Rule 2.2 is violated. If, however, OS_DEBUG actually performs logging/output (i.e. has observable side-effects), then this line is not dead code and Rule 2.2 is not violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_lseek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1338.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_lseek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_lseek:\n```c\nint32 OS_lseek(osal_id_t filedes, int32 offset, uint32 whence)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericSeek_Impl(&token, offset, whence);\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_lseek code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Minimal type definitions to make this testable/compilable. */\ntypedef int32_t int32;\ntypedef uint32_t uint32;\ntypedef int osal_id_t;\n\ntypedef struct\n{\n    int id;\n} OS_object_token_t;\n\n/* Constants as variables (avoid macros per instructions). */\nconst int32 OS_SUCCESS = 0;\nconst int32 OS_ERROR = -1;\nconst int OS_LOCK_MODE_REFCOUNT = 1;\nconst int LOCAL_OBJID_TYPE = 2;\n\n/* Probe logging helper: append human-readable trace to /tmp/logs/1338.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1338.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging fails we silently return to avoid changing behavior. */\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fflush(f);\n    fclose(f);\n}\n\n/* Minimal implementations of the OS helper functions. These are instrumentation\n   stubs that preserve the OS_lseek control flow so the function behaves similarly\n   while emitting detailed logs. */\n\nint32 OS_ObjectIdGetById(int lockmode, int type, osal_id_t id, OS_object_token_t *token)\n{\n    probe_log(\"OS_ObjectIdGetById: lockmode=%d type=%d id=%d\\n\", lockmode, type, id);\n\n    if (token != NULL)\n    {\n        token->id = id; /* preserve token semantics */\n    }\n\n    /* Simple success criterion: non-negative id succeeds, negative fails. */\n    if (id >= 0)\n    {\n        probe_log(\"OS_ObjectIdGetById: success (token.id=%d)\\n\", token ? token->id : -1);\n        return OS_SUCCESS;\n    }\n    else\n    {\n        probe_log(\"OS_ObjectIdGetById: failure (invalid id=%d)\\n\", id);\n        return OS_ERROR;\n    }\n}\n\nint32 OS_GenericSeek_Impl(OS_object_token_t *token, int32 offset, uint32 whence)\n{\n    probe_log(\"OS_GenericSeek_Impl: token.id=%d offset=%d whence=%u\\n\", token ? token->id : -1, offset, whence);\n\n    /* Simulate a seek return value: for testing return the offset as the new position\n       (this is a stub and only intended to provide observable side-effects for logging). */\n    int32 result = offset;\n    probe_log(\"OS_GenericSeek_Impl: returning %d\\n\", result);\n    return result;\n}\n\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    probe_log(\"OS_ObjectIdRelease: token.id=%d\\n\", token ? token->id : -1);\n    if (token != NULL)\n    {\n        token->id = -1; /* mark as released */\n    }\n    probe_log(\"OS_ObjectIdRelease: completed\\n\");\n}\n\n/* Modified OS_lseek with inserted logging probes. Original logic preserved. */\nint32 OS_lseek(osal_id_t filedes, int32 offset, uint32 whence)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    probe_log(\"OS_lseek: entry filedes=%d offset=%d whence=%u\\n\", filedes, offset, whence);\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    probe_log(\"OS_lseek: after OS_ObjectIdGetById return_code=%d\\n\", return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        probe_log(\"OS_lseek: calling OS_GenericSeek_Impl\\n\");\n        return_code = OS_GenericSeek_Impl(&token, offset, whence);\n        probe_log(\"OS_lseek: OS_GenericSeek_Impl returned %d\\n\", return_code);\n        OS_ObjectIdRelease(&token);\n        probe_log(\"OS_lseek: token released\\n\");\n    }\n    else\n    {\n        probe_log(\"OS_lseek: skipping GenericSeek_Impl because ObjectIdGetById failed (code=%d)\\n\", return_code);\n    }\n\n    probe_log(\"OS_lseek: exit return_code=%d\\n\", return_code);\n    return return_code;\n}\n"
}