{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_lseek:\n```c\nint32 OS_lseek(osal_id_t filedes, int32 offset, uint32 whence)\n{\n    OS_object_token_t token;\n    int32             return_code;\n\n    /* Make sure the file descriptor is legit before using it */\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, filedes, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_GenericSeek_Impl(&token, offset, whence);\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_lseek:\ntypedef uint32 osal_id_t\n...\ntypedef int32_t   int32\n...\ntypedef uint32_t  uint32\n...\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_SUCCESS (0)\n...\nint32 OS_ObjectIdGetById(OS_lock_mode_t lock_mode, osal_objtype_t idtype, osal_id_t id, OS_object_token_t *token)\n{\n    int32 return_code;\n\n    return_code = OS_ObjectIdTransactionInit(lock_mode, idtype, token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    return_code = OS_ObjectIdToArrayIndex(idtype, id, &token->obj_idx);\n    if (return_code == OS_SUCCESS)\n    {\n        token->obj_id = id;\n\n        /*\n         * The \"ConvertToken\" routine will return with the global lock\n         * in a state appropriate for returning to the caller, as indicated\n         * by the \"check_mode\" parameter.\n         *\n         * Note If this operation fails, then it always unlocks the global for\n         * all check_mode's other than NONE.\n         */\n        return_code = OS_ObjectIdConvertToken(token);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_ObjectIdTransactionCancel(token);\n    }\n\n    return return_code;\n}\n...\nint32 OS_GenericSeek_Impl(const OS_object_token_t *token, int32 offset, uint32 whence)\n{\n    int                             where;\n    off_t                           os_result;\n    int32                           retval;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    switch (whence)\n    {\n        case OS_SEEK_SET:\n            where = SEEK_SET;\n            break;\n        case OS_SEEK_CUR:\n            where = SEEK_CUR;\n            break;\n        case OS_SEEK_END:\n            where = SEEK_END;\n            break;\n        default:\n            return OS_ERROR;\n    }\n\n    os_result = lseek(impl->fd, (off_t)offset, where);\n    if (os_result == (off_t)-1)\n    {\n        if (errno == ESPIPE)\n        {\n            /*\n             * this means the user tried to seek on a pipe, socket,\n             * or other fifo-like handle that doesn't support seeking.\n             *\n             * Use a different error code to differentiate from an\n             * error involving a bad whence/offset\n             */\n            retval = OS_ERR_OPERATION_NOT_SUPPORTED;\n        }\n        else\n        {\n            /*\n             * Most likely the \"whence\" and/or \"offset\" combo was not valid.\n             */\n            OS_DEBUG(\"lseek: %s\\n\", strerror(errno));\n            retval = OS_ERROR;\n        }\n    }\n    else\n    {\n        /*\n         * convert value to int32 type for returning to caller.\n         * Note that this could potentially overflow an int32\n         * for a large file seek.\n         */\n        retval = (int32)os_result;\n    }\n\n    return retval;\n}\n...\nvoid OS_ObjectIdRelease(OS_object_token_t *token)\n{\n    OS_ObjectIdTransactionFinish(token, NULL);\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nOS_DEBUG(\"lseek: %s\\n\", strerror(errno));\n```\nFocus on the above code fragment and judge whether it violates the rule 1.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the fragment calls the standard library function strerror(errno) and passes it to a debugging macro OS_DEBUG. There is no use of compiler-specific language extensions (no __attribute__, inline asm, compiler builtins, or nonstandard syntax) visible in this line."
}