{
  "user_message": "An agent A claimed that the following OS_QueuePut_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_QueuePut_Impl.\n```c\nint32 OS_QueuePut_Impl(const OS_object_token_t *token, const void *data, size_t size, uint32 flags)\n{\n    int32                            return_code;\n    int                              result;\n    struct timespec                  ts;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /*\n     * NOTE - using a zero timeout here for the same reason that QueueGet does ---\n     * checking the attributes and doing the actual send is non-atomic, and if\n     * two threads call QueuePut() at the same time on a nearly-full queue,\n     * one could block.\n     */\n    memset(&ts, 0, sizeof(ts));\n\n    /* send message */\n    do\n    {\n        result = mq_timedsend(impl->id, data, size, 1, &ts);\n    } while (result == -1 && errno == EINTR);\n\n    if (result == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else if (errno == ETIMEDOUT)\n    {\n        return_code = OS_QUEUE_FULL;\n    }\n    else\n    {\n        /* Something else went wrong */\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In OS_QueuePut_Impl the local variable is declared as OS_impl_queue_internal_record_t *impl and is assigned the address of an element of OS_impl_queue_table. The function only reads from impl (uses impl->id) and does not modify the pointed-to object, so the pointer could and should be to a const-qualified type (const OS_impl_queue_internal_record_t *impl). Therefore the usage violates MISRA C 2023 Rule 8.13. Note: the array declaration itself is not a pointer, but taking its element address produces a non-const pointer that should be const-qualified in this context.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_queueput_log_probe(const void *impl_ptr,\n                                  long impl_id,\n                                  const void *token_ptr,\n                                  const void *data_ptr,\n                                  size_t size,\n                                  unsigned flags,\n                                  int result,\n                                  int err,\n                                  int return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/443.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f,\n                \"OS_QueuePut_Impl: impl=%p impl_id=%ld token=%p data=%p size=%zu flags=%u result=%d errno=%d return=%d\\n\",\n                impl_ptr,\n                impl_id,\n                token_ptr,\n                data_ptr,\n                size,\n                flags,\n                result,\n                err,\n                return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_QueuePut_Impl(const OS_object_token_t *token, const void *data, size_t size, uint32 flags)\n{\n    int32                            return_code;\n    int                              result;\n    struct timespec                  ts;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /* Probe: log acquisition of impl and the id read from it. */\n    /* Read impl->id once for logging without modifying the pointed-to object. */\n    long impl_id_for_log = (long)impl->id;\n    os_queueput_log_probe((const void *)impl, impl_id_for_log, (const void *)token, data, size, (unsigned)flags, -1, errno, -1);\n\n    /*\n     * NOTE - using a zero timeout here for the same reason that QueueGet does ---\n     * checking the attributes and doing the actual send is non-atomic, and if\n     * two threads call QueuePut() at the same time on a nearly-full queue,\n     * one could block.\n     */\n    memset(&ts, 0, sizeof(ts));\n\n    /* send message */\n    do\n    {\n        result = mq_timedsend(impl->id, data, size, 1, &ts);\n    } while (result == -1 && errno == EINTR);\n\n    if (result == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else if (errno == ETIMEDOUT)\n    {\n        return_code = OS_QUEUE_FULL;\n    }\n    else\n    {\n        /* Something else went wrong */\n        return_code = OS_ERROR;\n    }\n\n    /* Probe: log final result, errno and return code so the control path is recorded. */\n    os_queueput_log_probe((const void *)impl, impl_id_for_log, (const void *)token, data, size, (unsigned)flags, result, errno, (int)return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_QueuePut_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_QueuePut_Impl the local variable impl is only used for read-only access (impl->id is read; the code never modifies *impl via this pointer). MISRA C:2023 Rule 8.13 requires that a pointer should point to a const-qualified type whenever possible, so the local declaration should be changed to const OS_impl_queue_internal_record_t *impl. Assigning the (non-const) result of OS_OBJECT_TABLE_GET to a const-qualified pointer is allowed, so the macro does not prevent the fix. The added logging in the test code does not alter the fact that impl is only read, and an empty test log is unrelated to the rule. Therefore Agent A's violation report is correct."
}