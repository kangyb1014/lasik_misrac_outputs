{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_QueuePut_Impl the local variable is declared as OS_impl_queue_internal_record_t *impl and is assigned the address of an element of OS_impl_queue_table. The function only reads from impl (uses impl->id) and does not modify the pointed-to object, so the pointer could and should be to a const-qualified type (const OS_impl_queue_internal_record_t *impl). Therefore the usage violates MISRA C 2023 Rule 8.13. Note: the array declaration itself is not a pointer, but taking its element address produces a non-const pointer that should be const-qualified in this context.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_QueuePut_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/443.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_QueuePut_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_QueuePut_Impl:\n```c\nint32 OS_QueuePut_Impl(const OS_object_token_t *token, const void *data, size_t size, uint32 flags)\n{\n    int32                            return_code;\n    int                              result;\n    struct timespec                  ts;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /*\n     * NOTE - using a zero timeout here for the same reason that QueueGet does ---\n     * checking the attributes and doing the actual send is non-atomic, and if\n     * two threads call QueuePut() at the same time on a nearly-full queue,\n     * one could block.\n     */\n    memset(&ts, 0, sizeof(ts));\n\n    /* send message */\n    do\n    {\n        result = mq_timedsend(impl->id, data, size, 1, &ts);\n    } while (result == -1 && errno == EINTR);\n\n    if (result == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else if (errno == ETIMEDOUT)\n    {\n        return_code = OS_QUEUE_FULL;\n    }\n    else\n    {\n        /* Something else went wrong */\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_QueuePut_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <time.h>\n#include <mqueue.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Helper probe function that appends relevant state information to the log file.\n * This is intentionally implemented to avoid depending on project-specific types\n * in the helper signature; callers extract and pass primitive values where needed.\n */\nstatic void os_queueput_log_probe(const void *impl_ptr,\n                                  long impl_id,\n                                  const void *token_ptr,\n                                  const void *data_ptr,\n                                  size_t size,\n                                  unsigned flags,\n                                  int result,\n                                  int err,\n                                  int return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/443.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f,\n                \"OS_QueuePut_Impl: impl=%p impl_id=%ld token=%p data=%p size=%zu flags=%u result=%d errno=%d return=%d\\n\",\n                impl_ptr,\n                impl_id,\n                token_ptr,\n                data_ptr,\n                size,\n                flags,\n                result,\n                err,\n                return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_QueuePut_Impl(const OS_object_token_t *token, const void *data, size_t size, uint32 flags)\n{\n    int32                            return_code;\n    int                              result;\n    struct timespec                  ts;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /* Probe: log acquisition of impl and the id read from it. */\n    /* Read impl->id once for logging without modifying the pointed-to object. */\n    long impl_id_for_log = (long)impl->id;\n    os_queueput_log_probe((const void *)impl, impl_id_for_log, (const void *)token, data, size, (unsigned)flags, -1, errno, -1);\n\n    /*\n     * NOTE - using a zero timeout here for the same reason that QueueGet does ---\n     * checking the attributes and doing the actual send is non-atomic, and if\n     * two threads call QueuePut() at the same time on a nearly-full queue,\n     * one could block.\n     */\n    memset(&ts, 0, sizeof(ts));\n\n    /* send message */\n    do\n    {\n        result = mq_timedsend(impl->id, data, size, 1, &ts);\n    } while (result == -1 && errno == EINTR);\n\n    if (result == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else if (errno == ETIMEDOUT)\n    {\n        return_code = OS_QUEUE_FULL;\n    }\n    else\n    {\n        /* Something else went wrong */\n        return_code = OS_ERROR;\n    }\n\n    /* Probe: log final result, errno and return code so the control path is recorded. */\n    os_queueput_log_probe((const void *)impl, impl_id_for_log, (const void *)token, data, size, (unsigned)flags, result, errno, (int)return_code);\n\n    return return_code;\n}\n"
}