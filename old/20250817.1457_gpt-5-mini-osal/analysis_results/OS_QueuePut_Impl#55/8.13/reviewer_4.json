{
  "user_message": "An agent A claimed that the following OS_QueuePut_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_QueuePut_Impl.\n```c\nint32 OS_QueuePut_Impl(const OS_object_token_t *token, const void *data, size_t size, uint32 flags)\n{\n    int32                            return_code;\n    int                              result;\n    struct timespec                  ts;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /*\n     * NOTE - using a zero timeout here for the same reason that QueueGet does ---\n     * checking the attributes and doing the actual send is non-atomic, and if\n     * two threads call QueuePut() at the same time on a nearly-full queue,\n     * one could block.\n     */\n    memset(&ts, 0, sizeof(ts));\n\n    /* send message */\n    do\n    {\n        result = mq_timedsend(impl->id, data, size, 1, &ts);\n    } while (result == -1 && errno == EINTR);\n\n    if (result == 0)\n    {\n        return_code = OS_SUCCESS;\n    }\n    else if (errno == ETIMEDOUT)\n    {\n        return_code = OS_QUEUE_FULL;\n    }\n    else\n    {\n        /* Something else went wrong */\n        return_code = OS_ERROR;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'impl' is declared as OS_impl_queue_internal_record_t *impl but is only used for read access (impl->id is read for mq_timedsend) and not used to modify the pointed-to object. Under MISRA C 2023 Rule 8.13 this should be const-qualified (e.g. const OS_impl_queue_internal_record_t *impl) to indicate the object is not modified. Therefore the current declaration violates R8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_queue_put_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/443.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_QueuePut_Impl(const OS_object_token_t *token, const void *data, size_t size, uint32 flags)\n{\n    int32                            return_code;\n    int                              result;\n    struct timespec                  ts;\n    OS_impl_queue_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_queue_table, *token);\n\n    /* Log initial state: token pointer, impl pointer, and (safe-cast) impl->id */\n    os_queue_put_probe(\"OS_QueuePut_Impl ENTRY: token=%p impl=%p\", (const void *)token, (const void *)impl);\n    if (impl != NULL)\n    {\n        /* Print impl->id using an integer-safe cast through intptr_t to avoid UB on different mqd_t representations */\n        os_queue_put_probe(\"impl->id=%lld (casted), data=%p, size=%zu, flags=%\" PRIu32,\n                           (long long)(intptr_t)impl->id, data, size, flags);\n    }\n    else\n    {\n        os_queue_put_probe(\"impl is NULL\");\n    }\n\n    /*\n     * NOTE - using a zero timeout here for the same reason that QueueGet does ---\n     * checking the attributes and doing the actual send is non-atomic, and if\n     * two threads call QueuePut() at the same time on a nearly-full queue,\n     * one could block.\n     */\n    memset(&ts, 0, sizeof(ts));\n\n    /* send message */\n    int attempts = 0;\n    do\n    {\n        attempts++;\n        os_queue_put_probe(\"mq_timedsend attempt %d: id=%lld size=%zu\", attempts, (long long)(intptr_t)impl->id, size);\n\n        result = mq_timedsend(impl->id, data, size, 1, &ts);\n\n        if (result == -1)\n        {\n            os_queue_put_probe(\"mq_timedsend returned -1, errno=%d (%s)\", errno, strerror(errno));\n        }\n        else\n        {\n            os_queue_put_probe(\"mq_timedsend succeeded (result=%d)\", result);\n        }\n    } while (result == -1 && errno == EINTR);\n\n    os_queue_put_probe(\"mq_timedsend final result=%d errno=%d (%s)\", result, errno, strerror(errno));\n\n    if (result == 0)\n    {\n        return_code = OS_SUCCESS;\n        os_queue_put_probe(\"Outcome: OS_SUCCESS (return_code=%d)\", return_code);\n    }\n    else if (errno == ETIMEDOUT)\n    {\n        return_code = OS_QUEUE_FULL;\n        os_queue_put_probe(\"Outcome: OS_QUEUE_FULL (errno=ETIMEDOUT) return_code=%d\", return_code);\n    }\n    else\n    {\n        /* Something else went wrong */\n        return_code = OS_ERROR;\n        os_queue_put_probe(\"Outcome: OS_ERROR (errno=%d) return_code=%d\", errno, return_code);\n    }\n\n    os_queue_put_probe(\"OS_QueuePut_Impl EXIT: return_code=%d\", return_code);\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_QueuePut_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. Rule 8.13 recommends that a pointer should point to a const-qualified type whenever possible. In the shown function the local variable impl is only used for read access (impl->id is read and passed by value to mq_timedsend); there are no modifications to the pointed-to object. Therefore the local pointer could, and per R8.13 should, be declared as pointing-to-const (for example: const OS_impl_queue_internal_record_t *impl). Assigning the non-const pointer returned by OS_OBJECT_TABLE_GET to a pointer-to-const is permitted, and reading members through a pointer-to-const is fine. The empty test log and the added tracing do not invalidate the static observation that the pointer is only used for reads. Unless there are other uses of impl in code paths not shown or API constraints that require a non-const pointer, the agent A's report is correct."
}