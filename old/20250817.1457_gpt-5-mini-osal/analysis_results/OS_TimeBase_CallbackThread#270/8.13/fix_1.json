{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_TimeBase_Log_Internal(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2163.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Add a timestamp for each log entry */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_MSC_VER)\n    localtime_s(&tm_buf, &t);\n#else\n    localtime_r(&t, &tm_buf);\n#endif\n    char timebuf[64];\n    if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n    {\n        timebuf[0] = '\\0';\n    }\n\n    fprintf(f, \"%s - \", timebuf);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void OS_TimeBase_Log_State(const char *label, void *ptr, unsigned long id)\n{\n    OS_TimeBase_Log_Internal(\"%s: ptr=%p id=%lu\", label, ptr, id);\n}\n\nvoid OS_TimeBase_CallbackThread(osal_id_t timebase_id)\n{\n    OS_TimerSync_t                 syncfunc;\n    OS_timebase_internal_record_t *timebase;\n    OS_timecb_internal_record_t *  timecb;\n    OS_common_record_t *           record;\n    OS_object_token_t              token;\n    OS_object_token_t              cb_token;\n    uint32                         tick_time;\n    uint32                         spin_cycles;\n    int32                          saved_wait_time;\n\n    /*\n     * Register this task as a time base handler.\n     * Application code MUST NOT attempt to configure timers from the context of a\n     * timer callback, otherwise deadlock is possible.  Additional checks prevent this.\n     *\n     */\n    OS_TaskRegister_Impl(timebase_id);\n\n    /* Grab the relevant info from the global structure */\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMEBASE, timebase_id, &token) != 0)\n    {\n        /* Something went wrong - abort this thread */\n        OS_TimeBase_Log_Internal(\"OS_ObjectIdGetById failed for timebase_id=%lu - aborting thread\", (unsigned long)timebase_id);\n        return;\n    }\n\n    record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n    timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n    /* Log initial state after table lookup (key to the violation scenario) */\n    OS_TimeBase_Log_Internal(\"Looked up records for timebase_id=%lu\", (unsigned long)timebase_id);\n    OS_TimeBase_Log_State(\"record\", (void *)record, (unsigned long)record->active_id);\n    OS_TimeBase_Log_State(\"timebase\", (void *)timebase, (unsigned long)timebase_id);\n\n    syncfunc    = timebase->external_sync;\n    spin_cycles = 0;\n\n    OS_ObjectIdRelease(&token);\n\n    while (1)\n    {\n        /*\n         * Call the sync function - this will pend for some period of time\n         * and return the amount of elapsed time in units of \"timebase ticks\"\n         */\n        OS_TimeBase_Log_Internal(\"Calling syncfunc for timebase_id=%lu (syncfunc=%p)\", (unsigned long)timebase_id, (void *)syncfunc);\n        tick_time = (*syncfunc)(timebase_id);\n        OS_TimeBase_Log_Internal(\"syncfunc returned tick_time=%u for timebase_id=%lu\", (unsigned)tick_time, (unsigned long)timebase_id);\n\n        /*\n         * The returned tick_time should be nonzero.  If the sync function\n         * returns zero, then it means something went wrong and it is not\n         * known how many ticks have elapsed.\n         *\n         * This can validly occur, for instance, if the underlying wait\n         * operation was interrupted for some reason, e.g. EINTR or EAGAIN\n         * on a POSIX-like OS.\n         *\n         * In some instances it is appropriate to simply call the\n         * function again.  However, since this task typically runs as a\n         * high-priority thread, it is prudent to limit such spinning.\n         */\n        if (tick_time != 0)\n        {\n            /* nominal case - reset counter */\n            spin_cycles = 0;\n        }\n        else if (spin_cycles < OS_TIMEBASE_SPIN_LIMIT)\n        {\n            /* off-nominal but OK for now */\n            ++spin_cycles;\n            OS_TimeBase_Log_Internal(\"spin cycle incremented to %u for timebase_id=%lu\", (unsigned)spin_cycles, (unsigned long)timebase_id);\n        }\n        else\n        {\n            /*\n             * Spin-loop detected.\n             * Just call OS_TaskDelay_Impl() to yield the CPU.\n             * generate a debug warning only on the first time\n             * so the operator knows this is happening.\n             */\n            OS_TaskDelay_Impl(10);\n\n            if (spin_cycles == OS_TIMEBASE_SPIN_LIMIT)\n            {\n                ++spin_cycles;\n                OS_DEBUG(\"WARNING: Timebase Sync Spin Loop detected\\n\");\n                OS_TimeBase_Log_Internal(\"Detected spin loop for timebase_id=%lu\", (unsigned long)timebase_id);\n            }\n        }\n\n        OS_TimeBaseLock_Impl(&token);\n\n        /*\n         * After waiting, check that our ID still matches\n         * If not then it means this time base got deleted....\n         */\n        OS_TimeBase_Log_Internal(\"Comparing timebase_id=%lu to record->active_id=%lu\", (unsigned long)timebase_id, (unsigned long)record->active_id);\n        if (!OS_ObjectIdEqual(timebase_id, record->active_id))\n        {\n            OS_TimeBase_Log_Internal(\"timebase_id mismatch (thread exiting) for timebase_id=%lu\", (unsigned long)timebase_id);\n            OS_TimeBaseUnlock_Impl(&token);\n            break;\n        }\n\n        timebase->freerun_time += tick_time;\n        OS_TimeBase_Log_Internal(\"Updated freerun_time to %lu for timebase_id=%lu\", (unsigned long)timebase->freerun_time, (unsigned long)timebase_id);\n\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timebase->first_cb, &cb_token) == 0)\n        {\n            do\n            {\n                timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, cb_token);\n                saved_wait_time = timecb->wait_time;\n\n                OS_TimeBase_Log_Internal(\"Processing timecb token, timecb=%p saved_wait_time=%d interval_time=%d callback_ptr=%p callback_arg=%p\",\n                                         (void *)timecb, (int)saved_wait_time, (int)timecb->interval_time, (void *)timecb->callback_ptr, (void *)timecb->callback_arg);\n\n                timecb->wait_time -= tick_time;\n                OS_TimeBase_Log_Internal(\"Adjusted timecb->wait_time to %d (after subtracting tick_time=%u)\", (int)timecb->wait_time, (unsigned)tick_time);\n\n                while (timecb->wait_time <= 0)\n                {\n                    timecb->wait_time += timecb->interval_time;\n\n                    /*\n                     * Only allow the \"wait_time\" underflow to go as far negative as one interval time\n                     * This prevents a cb \"interval_time\" of less than the timebase interval_time from\n                     * accumulating infinitely\n                     */\n                    if (timecb->wait_time < -timecb->interval_time)\n                    {\n                        ++timecb->backlog_resets;\n                        timecb->wait_time = -timecb->interval_time;\n                        OS_TimeBase_Log_Internal(\"Backlog reset for timecb=%p backlog_resets=%u new_wait_time=%d\",\n                                                 (void *)timecb, (unsigned)timecb->backlog_resets, (int)timecb->wait_time);\n                    }\n\n                    /*\n                     * Only give the callback if the wait_time actually transitioned from positive to negative.\n                     * This allows one-shot operation where the API sets the \"wait_time\" positive but keeps\n                     * the \"interval_time\" at zero.  With the interval_time at zero the wait time will never\n                     * go positive again unless the API sets it again.\n                     */\n                    if (saved_wait_time > 0 && timecb->callback_ptr != NULL)\n                    {\n                        OS_TimeBase_Log_Internal(\"Invoking callback for timecb=%p id=%lu saved_wait_time=%d\", (void *)timecb, (unsigned long)OS_ObjectIdFromToken(&cb_token), (int)saved_wait_time);\n\n                        /* Preserve original behavior: call the callback */\n                        (*timecb->callback_ptr)(OS_ObjectIdFromToken(&cb_token), timecb->callback_arg);\n\n                        OS_TimeBase_Log_Internal(\"Returned from callback for timecb=%p id=%lu\", (void *)timecb, (unsigned long)OS_ObjectIdFromToken(&cb_token));\n                    }\n\n                    /*\n                     * Do not repeat the loop unless interval_time is configured.\n                     */\n                    if (timecb->interval_time <= 0)\n                    {\n                        OS_TimeBase_Log_Internal(\"Breaking out of timecb loop because interval_time=%d for timecb=%p\", (int)timecb->interval_time, (void *)timecb);\n                        break;\n                    }\n                }\n\n            } while (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->next_cb, &cb_token) ==\n                         OS_SUCCESS &&\n                     !OS_ObjectIdEqual(OS_ObjectIdFromToken(&cb_token), timebase->first_cb));\n        }\n\n        OS_TimeBaseUnlock_Impl(&token);\n    }\n\n    OS_TimeBase_Log_Internal(\"Exiting TimeBase_CallbackThread for timebase_id=%lu\", (unsigned long)timebase_id);\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpyzzix9zk/src/src/os/shared/src/osapi-timebase.c: In function 'OS_TimeBase_Log_Internal':\n/tmp/tmpyzzix9zk/src/src/os/shared/src/osapi-timebase.c:383:15: error: storage size of 'tm_buf' isn't known\n  383 |     struct tm tm_buf;\n      |               ^~~~~~\n/tmp/tmpyzzix9zk/src/src/os/shared/src/osapi-timebase.c:399:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  399 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-timebase.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-timebase.dir/__/__/os/shared/src/osapi-timebase.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:4345: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-timebase.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_TimeBase_CallbackThread as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\nstatic void OS_TimeBase_Log_Internal(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2163.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Add a timestamp for each log entry */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_MSC_VER)\n    localtime_s(&tm_buf, &t);\n#else\n    localtime_r(&t, &tm_buf);\n#endif\n    char timebuf[64];\n    if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0)\n    {\n        timebuf[0] = '\\0';\n    }\n\n    fprintf(f, \"%s - \", timebuf);\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast ap to va_list to match the vfprintf prototype in this build environment */\n    vfprintf(f, fmt, (va_list)ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\nstatic void OS_TimeBase_Log_State(const char *label, void *ptr, unsigned long id)\n{\n    OS_TimeBase_Log_Internal(\"%s: ptr=%p id=%lu\", label, ptr, id);\n}\n\nvoid OS_TimeBase_CallbackThread(osal_id_t timebase_id)\n{\n    OS_TimerSync_t                 syncfunc;\n    OS_timebase_internal_record_t *timebase;\n    OS_timecb_internal_record_t *  timecb;\n    OS_common_record_t *           record;\n    OS_object_token_t              token;\n    OS_object_token_t              cb_token;\n    uint32                         tick_time;\n    uint32                         spin_cycles;\n    int32                          saved_wait_time;\n\n    /*\n     * Register this task as a time base handler.\n     * Application code MUST NOT attempt to configure timers from the context of a\n     * timer callback, otherwise deadlock is possible.  Additional checks prevent this.\n     *\n     */\n    OS_TaskRegister_Impl(timebase_id);\n\n    /* Grab the relevant info from the global structure */\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_TIMEBASE, timebase_id, &token) != 0)\n    {\n        /* Something went wrong - abort this thread */\n        OS_TimeBase_Log_Internal(\"OS_ObjectIdGetById failed for timebase_id=%lu - aborting thread\", (unsigned long)timebase_id);\n        return;\n    }\n\n    record   = OS_OBJECT_TABLE_GET(OS_global_timebase_table, token);\n    timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n    /* Log initial state after table lookup (key to the violation scenario) */\n    OS_TimeBase_Log_Internal(\"Looked up records for timebase_id=%lu\", (unsigned long)timebase_id);\n    OS_TimeBase_Log_State(\"record\", (void *)record, (unsigned long)record->active_id);\n    OS_TimeBase_Log_State(\"timebase\", (void *)timebase, (unsigned long)timebase_id);\n\n    syncfunc    = timebase->external_sync;\n    spin_cycles = 0;\n\n    OS_ObjectIdRelease(&token);\n\n    while (1)\n    {\n        /*\n         * Call the sync function - this will pend for some period of time\n         * and return the amount of elapsed time in units of \"timebase ticks\"\n         */\n        OS_TimeBase_Log_Internal(\"Calling syncfunc for timebase_id=%lu (syncfunc=%p)\", (unsigned long)timebase_id, (void *)syncfunc);\n        tick_time = (*syncfunc)(timebase_id);\n        OS_TimeBase_Log_Internal(\"syncfunc returned tick_time=%u for timebase_id=%lu\", (unsigned)tick_time, (unsigned long)timebase_id);\n\n        /*\n         * The returned tick_time should be nonzero.  If the sync function\n         * returns zero, then it means something went wrong and it is not\n         * known how many ticks have elapsed.\n         *\n         * This can validly occur, for instance, if the underlying wait\n         * operation was interrupted for some reason, e.g. EINTR or EAGAIN\n         * on a POSIX-like OS.\n         *\n         * In some instances it is appropriate to simply call the\n         * function again.  However, since this task typically runs as a\n         * high-priority thread, it is prudent to limit such spinning.\n         */\n        if (tick_time != 0)\n        {\n            /* nominal case - reset counter */\n            spin_cycles = 0;\n        }\n        else if (spin_cycles < OS_TIMEBASE_SPIN_LIMIT)\n        {\n            /* off-nominal but OK for now */\n            ++spin_cycles;\n            OS_TimeBase_Log_Internal(\"spin cycle incremented to %u for timebase_id=%lu\", (unsigned)spin_cycles, (unsigned long)timebase_id);\n        }\n        else\n        {\n            /*\n             * Spin-loop detected.\n             * Just call OS_TaskDelay_Impl() to yield the CPU.\n             * generate a debug warning only on the first time\n             * so the operator knows this is happening.\n             */\n            OS_TaskDelay_Impl(10);\n\n            if (spin_cycles == OS_TIMEBASE_SPIN_LIMIT)\n            {\n                ++spin_cycles;\n                OS_DEBUG(\"WARNING: Timebase Sync Spin Loop detected\\n\");\n                OS_TimeBase_Log_Internal(\"Detected spin loop for timebase_id=%lu\", (unsigned long)timebase_id);\n            }\n        }\n\n        OS_TimeBaseLock_Impl(&token);\n\n        /*\n         * After waiting, check that our ID still matches\n         * If not then it means this time base got deleted....\n         */\n        OS_TimeBase_Log_Internal(\"Comparing timebase_id=%lu to record->active_id=%lu\", (unsigned long)timebase_id, (unsigned long)record->active_id);\n        if (!OS_ObjectIdEqual(timebase_id, record->active_id))\n        {\n            OS_TimeBase_Log_Internal(\"timebase_id mismatch (thread exiting) for timebase_id=%lu\", (unsigned long)timebase_id);\n            OS_TimeBaseUnlock_Impl(&token);\n            break;\n        }\n\n        timebase->freerun_time += tick_time;\n        OS_TimeBase_Log_Internal(\"Updated freerun_time to %lu for timebase_id=%lu\", (unsigned long)timebase->freerun_time, (unsigned long)timebase_id);\n\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timebase->first_cb, &cb_token) == 0)\n        {\n            do\n            {\n                timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, cb_token);\n                saved_wait_time = timecb->wait_time;\n\n                OS_TimeBase_Log_Internal(\"Processing timecb token, timecb=%p saved_wait_time=%d interval_time=%d callback_ptr=%p callback_arg=%p\",\n                                         (void *)timecb, (int)saved_wait_time, (int)timecb->interval_time, (void *)timecb->callback_ptr, (void *)timecb->callback_arg);\n\n                timecb->wait_time -= tick_time;\n                OS_TimeBase_Log_Internal(\"Adjusted timecb->wait_time to %d (after subtracting tick_time=%u)\", (int)timecb->wait_time, (unsigned)tick_time);\n\n                while (timecb->wait_time <= 0)\n                {\n                    timecb->wait_time += timecb->interval_time;\n\n                    /*\n                     * Only allow the \"wait_time\" underflow to go as far negative as one interval time\n                     * This prevents a cb \"interval_time\" of less than the timebase interval_time from\n                     * accumulating infinitely\n                     */\n                    if (timecb->wait_time < -timecb->interval_time)\n                    {\n                        ++timecb->backlog_resets;\n                        timecb->wait_time = -timecb->interval_time;\n                        OS_TimeBase_Log_Internal(\"Backlog reset for timecb=%p backlog_resets=%u new_wait_time=%d\",\n                                                 (void *)timecb, (unsigned)timecb->backlog_resets, (int)timecb->wait_time);\n                    }\n\n                    /*\n                     * Only give the callback if the wait_time actually transitioned from positive to negative.\n                     * This allows one-shot operation where the API sets the \"wait_time\" positive but keeps\n                     * the \"interval_time\" at zero.  With the interval_time at zero the wait time will never\n                     * go positive again unless the API sets it again.\n                     */\n                    if (saved_wait_time > 0 && timecb->callback_ptr != NULL)\n                    {\n                        OS_TimeBase_Log_Internal(\"Invoking callback for timecb=%p id=%lu saved_wait_time=%d\", (void *)timecb, (unsigned long)OS_ObjectIdFromToken(&cb_token), (int)saved_wait_time);\n\n                        /* Preserve original behavior: call the callback */\n                        (*timecb->callback_ptr)(OS_ObjectIdFromToken(&cb_token), timecb->callback_arg);\n\n                        OS_TimeBase_Log_Internal(\"Returned from callback for timecb=%p id=%lu\", (void *)timecb, (unsigned long)OS_ObjectIdFromToken(&cb_token));\n                    }\n\n                    /*\n                     * Do not repeat the loop unless interval_time is configured.\n                     */\n                    if (timecb->interval_time <= 0)\n                    {\n                        OS_TimeBase_Log_Internal(\"Breaking out of timecb loop because interval_time=%d for timecb=%p\", (int)timecb->interval_time, (void *)timecb);\n                        break;\n                    }\n                }\n\n            } while (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->next_cb, &cb_token) ==\n                         OS_SUCCESS &&\n                     !OS_ObjectIdEqual(OS_ObjectIdFromToken(&cb_token), timebase->first_cb));\n        }\n\n        OS_TimeBaseUnlock_Impl(&token);\n    }\n\n    OS_TimeBase_Log_Internal(\"Exiting TimeBase_CallbackThread for timebase_id=%lu\", (unsigned long)timebase_id);\n}\n",
  "explanation": "I added the missing standard headers (<stdio.h>, <stdarg.h>, and <time.h>) so that FILE, va_list, time_t, and struct tm are properly defined. To address the va_list/OCS_va_list mismatch reported by the build, I cast the va_list variable when calling vfprintf: vfprintf(f, fmt, (va_list)ap). These minimal changes preserve the original logic while resolving the compilation errors."
}