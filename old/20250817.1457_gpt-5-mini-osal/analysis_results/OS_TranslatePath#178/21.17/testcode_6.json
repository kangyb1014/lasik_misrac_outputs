{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) is implemented with memchr(VirtualPath, 0, maxlen). If the caller passes a pointer to a character array smaller than OS_MAX_PATH_LEN (for example char buf[16]; passed as VirtualPath) memchr may read up to OS_MAX_PATH_LEN (64) bytes and thus read beyond the actual object bounds. OS_CHECK_POINTER only ensures the pointer is non-NULL, not that the object is at least OS_MAX_PATH_LEN bytes long. Therefore this use can result in out-of-bounds accesses and violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TranslatePath code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1431.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TranslatePath as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TranslatePath:\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TranslatePath code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper: write a concise log line to the specified logfile. */\nstatic void OS_TranslatePath_LogProbe(const char *event, const void *VirtualPath, const void *LocalPath,\n                                      size_t VirtPathLen, size_t SysMountPointLen, size_t VirtPathBegin,\n                                      int32_t return_code, const void *extra_ptr, size_t extra_len)\n{\n    FILE *f = fopen(\"/tmp/logs/1431.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log pointer values and integer state; avoid dereferencing input pointers to prevent UB. */\n    fprintf(f, \"EVENT=%s VP=%p LP=%p vlen=%zu smplen=%zu vbegin=%zu ret=%d extra_ptr=%p extra_len=%zu\\n\",\n            event, VirtualPath, LocalPath, VirtPathLen, SysMountPointLen, VirtPathBegin, (int)return_code, extra_ptr,\n            extra_len);\n\n    fclose(f);\n}\n\n/* Modified OS_TranslatePath with inserted probes. Preserves original logic. */\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /* Log entry and pointer values */\n    OS_TranslatePath_LogProbe(\"entry\", VirtualPath, LocalPath, 0u, 0u, 0u, -1, NULL, 0u);\n\n    /*\n    ** Check length\n    */\n    OS_TranslatePath_LogProbe(\"before_strnlen_VirtualPath\", VirtualPath, LocalPath, 0u, 0u, 0u, -1, NULL, (size_t)OS_MAX_PATH_LEN);\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    OS_TranslatePath_LogProbe(\"after_strnlen_VirtualPath\", VirtualPath, LocalPath, VirtPathLen, 0u, 0u, -1, NULL, (size_t)OS_MAX_PATH_LEN);\n\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        OS_TranslatePath_LogProbe(\"return_path_too_long\", VirtualPath, LocalPath, VirtPathLen, 0u, 0u, OS_FS_ERR_PATH_TOO_LONG, NULL, 0u);\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    OS_TranslatePath_LogProbe(\"after_strrchr\", VirtualPath, LocalPath, VirtPathLen, 0u, 0u, -1, name_ptr, 0u);\n\n    if (name_ptr == NULL)\n    {\n        OS_TranslatePath_LogProbe(\"return_invalid_no_slash\", VirtualPath, LocalPath, VirtPathLen, 0u, 0u, OS_FS_ERR_PATH_INVALID, NULL, 0u);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n\n    /* Before probing the filename length via memchr, log that memchr will scan up to OS_MAX_FILE_NAME bytes */\n    OS_TranslatePath_LogProbe(\"before_memchr_name\", VirtualPath, LocalPath, VirtPathLen, 0u, 0u, -1, name_ptr, (size_t)OS_MAX_FILE_NAME);\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        OS_TranslatePath_LogProbe(\"return_name_too_long\", VirtualPath, LocalPath, VirtPathLen, 0u, 0u, OS_FS_ERR_NAME_TOO_LONG, name_ptr, (size_t)OS_MAX_FILE_NAME);\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        OS_TranslatePath_LogProbe(\"return_invalid_not_start_slash\", VirtualPath, LocalPath, VirtPathLen, 0u, 0u, OS_FS_ERR_PATH_INVALID, NULL, 0u);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    OS_TranslatePath_LogProbe(\"before_ObjectIdGetBySearch\", VirtualPath, LocalPath, VirtPathLen, 0u, 0u, -1, NULL, 0u);\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    OS_TranslatePath_LogProbe(\"after_ObjectIdGetBySearch\", VirtualPath, LocalPath, VirtPathLen, 0u, 0u, return_code, NULL, 0u);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n        OS_TranslatePath_LogProbe(\"obj_search_failed\", VirtualPath, LocalPath, VirtPathLen, 0u, 0u, return_code, NULL, 0u);\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            OS_TranslatePath_LogProbe(\"filesys_mountpoints\", VirtualPath, LocalPath, VirtPathLen, SysMountPointLen, VirtPathBegin, -1, filesys, 0u);\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n                OS_TranslatePath_LogProbe(\"memcpy_system_mountpt\", VirtualPath, LocalPath, VirtPathLen, SysMountPointLen, VirtPathBegin, -1, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n            OS_TranslatePath_LogProbe(\"not_mounted_system\", VirtualPath, LocalPath, VirtPathLen, SysMountPointLen, VirtPathBegin, return_code, filesys, 0u);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n            OS_TranslatePath_LogProbe(\"virtlen_lt_begin\", VirtualPath, LocalPath, VirtPathLen, SysMountPointLen, VirtPathBegin, return_code, NULL, 0u);\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                OS_TranslatePath_LogProbe(\"before_memcpy_virtual_to_local\", VirtualPath, LocalPath, VirtPathLen, SysMountPointLen, VirtPathBegin, -1, &VirtualPath[VirtPathBegin], VirtPathLen);\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n                OS_TranslatePath_LogProbe(\"after_memcpy_virtual_to_local\", VirtualPath, LocalPath, VirtPathLen, SysMountPointLen, VirtPathBegin, OS_SUCCESS, &LocalPath[SysMountPointLen], VirtPathLen + 1u);\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n                OS_TranslatePath_LogProbe(\"final_path_too_long\", VirtualPath, LocalPath, VirtPathLen, SysMountPointLen, VirtPathBegin, return_code, NULL, 0u);\n            }\n        }\n    }\n\n    OS_TranslatePath_LogProbe(\"exit\", VirtualPath, LocalPath, VirtPathLen, SysMountPointLen, VirtPathBegin, return_code, NULL, 0u);\n\n    return return_code;\n}\n"
}