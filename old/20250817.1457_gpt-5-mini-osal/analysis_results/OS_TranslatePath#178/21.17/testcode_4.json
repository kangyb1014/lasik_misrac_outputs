{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code copies SysMountPointLen bytes into the caller-supplied LocalPath without proving LocalPath is at least that large. Although SysMountPointLen is computed safely from sizeof(filesys->system_mountpt), the function does not check the actual size of the object pointed to by LocalPath. For example, if a caller passes a smaller buffer (char LocalPath[8]) while filesys->system_mountpt has 24 bytes (SysMountPointLen == 24 and 24 < OS_MAX_LOCAL_PATH_LEN), memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen) will write 24 bytes into an 8-byte buffer, causing an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TranslatePath code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1431.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TranslatePath as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TranslatePath:\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TranslatePath code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe logging helper: append messages to /tmp/logs/1431.txt */\nstatic void OS_TranslatePath_Log(const char *fmt, ...)\n{\n    FILE *fp;\n    va_list ap;\n\n    /* Ensure directory exists - ignore errors if it already does. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    fp = fopen(\"/tmp/logs/1431.txt\", \"a\");\n    if (!fp)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fflush(fp);\n    fclose(fp);\n}\n\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /* Log entry and pointers (do not dereference pointers here) */\n    OS_TranslatePath_Log(\"ENTER OS_TranslatePath: VirtualPath=%p LocalPath=%p\\n\",\n                         (const void *)VirtualPath, (const void *)LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    OS_TranslatePath_Log(\"After strnlen: VirtPathLen=%zu\\n\", VirtPathLen);\n\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        OS_TranslatePath_Log(\"Path too long: VirtPathLen=%zu >= OS_MAX_PATH_LEN\\n\", VirtPathLen);\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    OS_TranslatePath_Log(\"strrchr result: name_ptr=%p\\n\", (const void *)name_ptr);\n    if (name_ptr == NULL)\n    {\n        OS_TranslatePath_Log(\"Invalid path: no '/' present\\n\");\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    OS_TranslatePath_Log(\"name_ptr advanced: name_ptr=%p\\n\", (const void *)name_ptr);\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        OS_TranslatePath_Log(\"Name too long: no null terminator within OS_MAX_FILE_NAME bytes\\n\");\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        OS_TranslatePath_Log(\"Invalid path: VirtualPath[0] != '/' (char=0x%02x)\\n\", (unsigned char)VirtualPath[0]);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    OS_TranslatePath_Log(\"OS_ObjectIdGetBySearch returned %d\\n\", return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TranslatePath_Log(\"No mount point found for VirtualPath=%p -> returning OS_FS_ERR_PATH_INVALID\\n\",\n                             (const void *)VirtualPath);\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n        OS_TranslatePath_Log(\"Found filesys record at %p, flags=0x%08x\\n\",\n                             (const void *)filesys, (unsigned)filesys->flags);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n            OS_TranslatePath_Log(\"Computed SysMountPointLen=%zu VirtPathBegin=%zu\\n\",\n                                 SysMountPointLen, VirtPathBegin);\n\n            /* Probe: Log the parameters that will be used for the memcpy */\n            OS_TranslatePath_Log(\"About to memcpy initial mount point: LocalPath=%p system_mountpt=%p bytes=%zu\\n\",\n                                 (const void *)LocalPath, (const void *)filesys->system_mountpt, SysMountPointLen);\n\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n                OS_TranslatePath_Log(\"Performed memcpy(LocalPath, system_mountpt, %zu)\\n\", SysMountPointLen);\n            }\n            else\n            {\n                OS_TranslatePath_Log(\"Skipping memcpy: SysMountPointLen (%zu) >= OS_MAX_LOCAL_PATH_LEN\\n\", SysMountPointLen);\n            }\n        }\n        else\n        {\n            OS_TranslatePath_Log(\"Filesystem not mounted system: flags=0x%08x -> OS_ERR_INCORRECT_OBJ_STATE\\n\",\n                                 (unsigned)filesys->flags);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_TranslatePath_Log(\"Released object token\\n\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            OS_TranslatePath_Log(\"Invalid path: VirtPathLen (%zu) < VirtPathBegin (%zu)\\n\", VirtPathLen, VirtPathBegin);\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            OS_TranslatePath_Log(\"Appending VirtPathLen=%zu to LocalPath (SysMountPointLen=%zu)\\n\", VirtPathLen, SysMountPointLen);\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                OS_TranslatePath_Log(\"About to memcpy virtual remainder: dest=&LocalPath[%zu] src=&VirtualPath[%zu] bytes=%zu\\n\",\n                                     SysMountPointLen, VirtPathBegin, VirtPathLen);\n\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n\n                OS_TranslatePath_Log(\"Performed memcpy for virtual remainder and set terminator at index %zu\\n\",\n                                     SysMountPointLen + VirtPathLen);\n\n                /* Safe to log LocalPath now because it has been null-terminated by the code above */\n                OS_TranslatePath_Log(\"Final LocalPath (truncated to 512 chars for log): %.512s\\n\", LocalPath);\n            }\n            else\n            {\n                OS_TranslatePath_Log(\"Resulting path too long: SysMountPointLen (%zu) + VirtPathLen (%zu) >= OS_MAX_LOCAL_PATH_LEN\\n\",\n                                     SysMountPointLen, VirtPathLen);\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    OS_TranslatePath_Log(\"EXIT OS_TranslatePath: return_code=%d\\n\", return_code);\n    return return_code;\n}\n"
}