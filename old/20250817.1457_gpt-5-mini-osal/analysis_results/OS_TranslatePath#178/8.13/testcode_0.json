{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_TranslatePath passes a const char * (VirtualPath) to OS_ObjectIdGetBySearch which declares the parameter as void *arg and is called with an explicit cast (void *)VirtualPath. The match function OS_FileSys_FindVirtMountPoint treats its ref parameter as a const char * (casts to const char *), so the API discards the const qualifier on the argument. This is a concrete violation of MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TranslatePath code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1427.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TranslatePath as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TranslatePath:\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TranslatePath code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Probe logging helper - append messages to /tmp/logs/1427.txt */\nstatic void OS_TranslatePath_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1427.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /* Log entry and pointers (note: casting away const happens later when calling search) */\n    OS_TranslatePath_Log(\"ENTER: OS_TranslatePath VirtualPath=%p LocalPath=%p\", (const void *)VirtualPath, (void *)LocalPath);\n    if (VirtualPath != NULL)\n    {\n        /* print a short preview of the virtual path content */\n        char preview[65];\n        size_t i;\n        for (i = 0; i < 64 && VirtualPath[i] != '\\0'; ++i)\n        {\n            preview[i] = VirtualPath[i];\n        }\n        preview[i] = '\\0';\n        OS_TranslatePath_Log(\"VirtualPath preview: '%s'\", preview);\n    }\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    OS_TranslatePath_Log(\"After strnlen: VirtPathLen=%zu\", VirtPathLen);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        OS_TranslatePath_Log(\"ERROR: path too long (len=%zu >= %d)\", VirtPathLen, OS_MAX_PATH_LEN);\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    OS_TranslatePath_Log(\"strrchr returned name_ptr=%p\", (const void *)name_ptr);\n    if (name_ptr == NULL)\n    {\n        OS_TranslatePath_Log(\"ERROR: no '/' in path\");\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    OS_TranslatePath_Log(\"name_ptr advanced to %p (points to '%c' if not '\\0')\", (const void *)name_ptr, (name_ptr && *name_ptr) ? *name_ptr : '\\0');\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        OS_TranslatePath_Log(\"ERROR: file name too long (no NUL within %d bytes)\", OS_MAX_FILE_NAME);\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        OS_TranslatePath_Log(\"ERROR: path does not start with '/'; first char='%c'\", VirtualPath[0]);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    /* Log that the call will cast away const qualification to pass to search API */\n    OS_TranslatePath_Log(\"Calling OS_ObjectIdGetBySearch with VirtualPath cast to (void*): %p (const discarded)\", (const void *)VirtualPath);\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    OS_TranslatePath_Log(\"OS_ObjectIdGetBySearch returned %d\", return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TranslatePath_Log(\"ERROR: OS_ObjectIdGetBySearch failed -> marking path invalid\");\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n        OS_TranslatePath_Log(\"filesys pointer from token=%p\", (void *)filesys);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            OS_TranslatePath_Log(\"Mounted system: system_mountpt='%s' len=%zu, virtual_mountpt='%s' len=%zu\", filesys->system_mountpt, SysMountPointLen, filesys->virtual_mountpt, VirtPathBegin);\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n                OS_TranslatePath_Log(\"Copied system_mountpt to LocalPath (len=%zu)\", SysMountPointLen);\n            }\n        }\n        else\n        {\n            OS_TranslatePath_Log(\"ERROR: filesystem not mounted system (flags=0x%08x)\", (unsigned)filesys->flags);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_TranslatePath_Log(\"Released token\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_TranslatePath_Log(\"Proceeding to final path assembly: VirtPathLen=%zu VirtPathBegin=%zu SysMountPointLen=%zu\", VirtPathLen, VirtPathBegin, SysMountPointLen);\n        if (VirtPathLen < VirtPathBegin)\n        {\n            OS_TranslatePath_Log(\"ERROR: VirtPathLen < VirtPathBegin => invalid\");\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n                OS_TranslatePath_Log(\"Final LocalPath='%s' (total_len=%zu)\", LocalPath, SysMountPointLen + VirtPathLen);\n            }\n            else\n            {\n                OS_TranslatePath_Log(\"ERROR: final local path too long (sys=%zu virt=%zu max=%d)\", SysMountPointLen, VirtPathLen, OS_MAX_LOCAL_PATH_LEN);\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    OS_TranslatePath_Log(\"EXIT: OS_TranslatePath returning %d\", return_code);\n    return return_code;\n}\n"
}