{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation: the code casts a const-qualified pointer to non-const (losing const qualification). VirtualPath is declared as const char * but is passed as (void *)VirtualPath to OS_ObjectIdGetBySearch which accepts a void *arg (non-const). This removes the const qualifier and therefore violates MISRA C 2023 Rule 8.13. Note: OS_FileSys_FindVirtMountPoint treats the argument as a const char * (const char *target = (const char *)ref), showing the intent that the argument should be const. Recommended fix: change OS_ObjectIdGetBySearch (and the match-function type) to take a const void * (and OS_FileSys_FindVirtMountPoint to take a const void *ref).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TranslatePath code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1427.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TranslatePath as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TranslatePath:\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TranslatePath code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helper: append formatted log lines to /tmp/logs/1427.txt */\nstatic void OS_TranslatePath_Log(const char *format, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1427.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, format);\n    vfprintf(f, format, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /* Log entry and pointer values */\n    OS_TranslatePath_Log(\"OS_TranslatePath ENTRY: VirtualPath=%p, LocalPath=%p\", (const void *)VirtualPath, (void *)LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    OS_TranslatePath_Log(\"After strnlen: VirtPathLen=%zu\", VirtPathLen);\n\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        OS_TranslatePath_Log(\"ERROR: Path too long (VirtPathLen=%zu >= OS_MAX_PATH_LEN=%d)\", VirtPathLen, OS_MAX_PATH_LEN);\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    OS_TranslatePath_Log(\"strrchr returned name_ptr=%p\", (const void *)name_ptr);\n    if (name_ptr == NULL)\n    {\n        OS_TranslatePath_Log(\"ERROR: No '/' found in VirtualPath -> invalid path\");\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    OS_TranslatePath_Log(\"name_ptr advanced to %p (points to '%c')\", (const void *)name_ptr, *name_ptr);\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        OS_TranslatePath_Log(\"ERROR: File name too long (no \\0 within OS_MAX_FILE_NAME bytes)\");\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        OS_TranslatePath_Log(\"ERROR: VirtualPath does not start with '/' (first char='%c')\", VirtualPath[0]);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    OS_TranslatePath_Log(\"About to call OS_ObjectIdGetBySearch: casting const char* to void* and passing VirtualPath=%p\", (const void *)VirtualPath);\n\n    /*\n     * NOTE: This is the call that was reported to remove const qualification of the\n     * VirtualPath argument. We log the pointer value and a short preview of the string\n     * so that other agents can reproduce and have evidence of the cast and usage.\n     */\n    {\n        /* Log a preview of the VirtualPath content (up to 64 bytes) */\n        size_t preview_len = (VirtPathLen < 64u) ? VirtPathLen : 64u;\n        char preview[65];\n        if (preview_len > 0 && preview_len < sizeof(preview))\n        {\n            memcpy(preview, VirtualPath, preview_len);\n            preview[preview_len] = '\\0';\n        }\n        else\n        {\n            preview[0] = '\\0';\n        }\n        OS_TranslatePath_Log(\"VirtualPath preview: '%s' (len=%zu)\", preview, VirtPathLen);\n    }\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    OS_TranslatePath_Log(\"OS_ObjectIdGetBySearch returned return_code=%ld, token_addr=%p\", (long)return_code, (void *)&token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TranslatePath_Log(\"OS_ObjectIdGetBySearch failed -> treating as OS_FS_ERR_PATH_INVALID\");\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n        OS_TranslatePath_Log(\"Got filesys pointer=%p\", (void *)filesys);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            OS_TranslatePath_Log(\"Mounted system: flags=0x%08x, system_mountpt='%s', virtual_mountpt='%s'\", (unsigned int)filesys->flags,\n                                  filesys->system_mountpt, filesys->virtual_mountpt);\n            OS_TranslatePath_Log(\"Computed lengths: SysMountPointLen=%zu, VirtPathBegin=%zu\", SysMountPointLen, VirtPathBegin);\n\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n                OS_TranslatePath_Log(\"Copied system_mountpt to LocalPath (bytes=%zu)\", SysMountPointLen);\n            }\n        }\n        else\n        {\n            OS_TranslatePath_Log(\"ERROR: filesys not mounted system (flags=0x%08x) -> OS_ERR_INCORRECT_OBJ_STATE\", (unsigned int)filesys->flags);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n        OS_TranslatePath_Log(\"Released token at addr=%p\", (void *)&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            OS_TranslatePath_Log(\"ERROR: VirtPathLen (%zu) < VirtPathBegin (%zu) -> invalid path\", VirtPathLen, VirtPathBegin);\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            OS_TranslatePath_Log(\"After subtracting VirtPathBegin: new VirtPathLen=%zu\", VirtPathLen);\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n                OS_TranslatePath_Log(\"Final LocalPath assembled: '%s' (total_len=%zu)\", LocalPath, SysMountPointLen + VirtPathLen);\n            }\n            else\n            {\n                OS_TranslatePath_Log(\"ERROR: Local path too long (SysMountPointLen=%zu + VirtPathLen=%zu >= OS_MAX_LOCAL_PATH_LEN=%d)\", SysMountPointLen, VirtPathLen, OS_MAX_LOCAL_PATH_LEN);\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    OS_TranslatePath_Log(\"OS_TranslatePath EXIT: return_code=%ld\", (long)return_code);\n\n    return return_code;\n}\n"
}