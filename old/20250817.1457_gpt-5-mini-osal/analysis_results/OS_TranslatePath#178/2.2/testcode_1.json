{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'VirtPathBegin = VirtPathLen;' is redundant (dead) because VirtPathBegin is never used in a code path where that initial value matters: after this assignment the code either (a) fails OS_ObjectIdGetBySearch and returns an error (so VirtPathBegin is never used), (b) succeeds and then, when the filesystem is in the correct mounted state, VirtPathBegin is overwritten with OS_strnlen(filesys->virtual_mountpt, ... ) before any use, or (c) succeeds but the filesystem is not in the correct state and the function sets an error and later returns without using VirtPathBegin. Therefore removing the assignment would not affect program behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TranslatePath code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1426.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TranslatePath as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TranslatePath:\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TranslatePath code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logging helper - appends to the log file. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1426.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /* Probes: entry */\n    probe_log(\"ENTER OS_TranslatePath: VirtualPath=%p, LocalPath=%p\", (void *)VirtualPath, (void *)LocalPath);\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    probe_log(\"After OS_strnlen: VirtPathLen=%zu\", VirtPathLen);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        probe_log(\"Returning OS_FS_ERR_PATH_TOO_LONG: VirtPathLen=%zu >= OS_MAX_PATH_LEN=%d\", VirtPathLen, OS_MAX_PATH_LEN);\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    probe_log(\"After strrchr: name_ptr=%p\", (void *)name_ptr);\n    if (name_ptr == NULL)\n    {\n        probe_log(\"Returning OS_FS_ERR_PATH_INVALID: no '/' found in VirtualPath\");\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    probe_log(\"After advancing name_ptr -> %p\", (void *)name_ptr);\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        probe_log(\"Returning OS_FS_ERR_NAME_TOO_LONG: filename exceeds OS_MAX_FILE_NAME=%d\", OS_MAX_FILE_NAME);\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    /* Probe: before initial assignment to VirtPathBegin */\n    probe_log(\"Before initial VirtPathBegin assignment: VirtPathLen=%zu, VirtPathBegin(uninit)=%zu\", VirtPathLen, (size_t)0);\n    VirtPathBegin    = VirtPathLen;\n    probe_log(\"After initial VirtPathBegin assignment: VirtPathBegin=%zu\", VirtPathBegin);\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        probe_log(\"Returning OS_FS_ERR_PATH_INVALID: VirtualPath[0] != '/' (was '%c')\", VirtualPath[0]);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    probe_log(\"Calling OS_ObjectIdGetBySearch with VirtualPath=%s\", VirtualPath);\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    probe_log(\"OS_ObjectIdGetBySearch returned %d\", return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"OS_ObjectIdGetBySearch failed -> setting return_code = OS_FS_ERR_PATH_INVALID\");\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n        probe_log(\"Obtained filesys pointer=%p, flags=0x%08x\", (void *)filesys, (unsigned int)filesys->flags);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            probe_log(\"Mounted system: system_mountpt_len=%zu\", SysMountPointLen);\n\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            probe_log(\"Overwriting VirtPathBegin from initial=%zu to virtual_mountpt_len=%zu\", VirtPathLen, VirtPathBegin);\n\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                probe_log(\"Memcpy LocalPath[0..%zu) <- system_mountpt[0..%zu)\", SysMountPointLen, SysMountPointLen);\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n            else\n            {\n                probe_log(\"SysMountPointLen (%zu) >= OS_MAX_LOCAL_PATH_LEN (%d)\", SysMountPointLen, OS_MAX_LOCAL_PATH_LEN);\n            }\n        }\n        else\n        {\n            probe_log(\"Filesystem not in correct state: flags=0x%08x -> setting return_code = OS_ERR_INCORRECT_OBJ_STATE\", (unsigned int)filesys->flags);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n        probe_log(\"Released object token\");\n    }\n\n    probe_log(\"Before final assembly: return_code=%d, VirtPathLen=%zu, VirtPathBegin=%zu, SysMountPointLen=%zu\",\n              return_code, VirtPathLen, VirtPathBegin, SysMountPointLen);\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            probe_log(\"Invalid: VirtPathLen (%zu) < VirtPathBegin (%zu) -> OS_FS_ERR_PATH_INVALID\", VirtPathLen, VirtPathBegin);\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            probe_log(\"Adjusted VirtPathLen after subtracting VirtPathBegin: VirtPathLen=%zu\", VirtPathLen);\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                probe_log(\"Memcpy LocalPath[%zu..%zu) <- VirtualPath[%zu..%zu)\", SysMountPointLen, SysMountPointLen + VirtPathLen,\n                          VirtPathBegin, VirtPathBegin + VirtPathLen);\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n                probe_log(\"Final LocalPath length=%zu (SysMountPointLen %zu + VirtPathLen %zu)\", SysMountPointLen + VirtPathLen, SysMountPointLen, VirtPathLen);\n            }\n            else\n            {\n                probe_log(\"Resulting path too long: SysMountPointLen (%zu) + VirtPathLen (%zu) >= OS_MAX_LOCAL_PATH_LEN (%d)\", SysMountPointLen, VirtPathLen, OS_MAX_LOCAL_PATH_LEN);\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    probe_log(\"EXIT OS_TranslatePath: return_code=%d\", return_code);\n    return return_code;\n}\n"
}