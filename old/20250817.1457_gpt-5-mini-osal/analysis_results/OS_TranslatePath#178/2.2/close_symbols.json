{
  "user_message": "Target function code is:\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'OS_TranslatePath': {'callees': ['OS_printf', 'OS_strnlen', 'OS_ObjectIdGetBySearch', 'OS_ObjectIndexFromToken', 'OS_ObjectIdRelease', 'UT_Stub_RegisterReturnType', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteBasicHandler', 'UT_Stub_GetReturnValuePtr'], 'callers': ['OS_mkdir', 'OS_DirectoryOpen', 'OS_rmdir', 'OS_OpenCreate', 'OS_chmod', 'OS_stat', 'OS_remove', 'OS_rename', 'OS_ModuleLoad', 'OS_SymbolTableDump']}, 'OS_printf': {'callees': ['OS_printf', 'OS_ConsoleWrite', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteVaHandler'], 'callers': ['OS_BinSemCreate', 'OS_BinSemGetIdByName', 'OS_BinSemGetInfo', 'OS_GetLocalTime', 'OS_SetLocalTime', 'OS_RegisterEventHandler', 'OS_CondVarCreate', 'OS_CondVarTimedWait', 'OS_CondVarGetIdByName', 'OS_CondVarGetInfo', 'OS_CountSemCreate', 'OS_CountSemGetIdByName', 'OS_CountSemGetInfo', 'OS_DirectoryOpen', 'OS_DirectoryRead', 'OS_GetErrorName', 'OS_OpenCreate', 'OS_TimedRead', 'OS_TimedWrite', 'OS_stat', 'OS_cp', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_CloseFileByName', 'OS_FileSys_Initialize', 'OS_FileSysAddFixedMap', 'OS_rmfs', 'OS_mount', 'OS_unmount', 'OS_FileSysStatVolume', 'OS_chkfs', 'OS_FS_GetPhysDriveName', 'OS_GetFsInfo', 'OS_TranslatePath', 'OS_HeapGetInfo', 'OS_GetResourceName', 'OS_ObjectIdToArrayIndex', 'OS_ModuleLoad', 'OS_ModuleInfo', 'OS_SymbolLookup', 'OS_ModuleSymbolLookup', 'OS_SymbolTableDump', 'OS_MutSemCreate', 'OS_MutSemGetIdByName', 'OS_MutSemGetInfo', 'OS_NetworkGetHostName', 'OS_printf', 'OS_QueueCreate', 'OS_QueueGet', 'OS_QueuePut', 'OS_QueueGetIdByName', 'OS_QueueGetInfo', 'OS_SelectSingle', 'OS_SelectFdZero', 'OS_SelectFdAdd', 'OS_SelectFdClear', 'OS_SelectFdIsSet', 'OS_ShellOutputToFile', 'OS_SocketOpen', 'OS_SocketBindAddress', 'OS_SocketAccept', 'OS_SocketConnect', 'OS_SocketShutdown', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketGetIdByName', 'OS_SocketGetInfo', 'OS_SocketAddrInit', 'OS_SocketAddrToString', 'OS_SocketAddrFromString', 'OS_SocketAddrGetPort', 'OS_SocketAddrSetPort', 'OS_TaskCreate', 'OS_TaskGetIdByName', 'OS_TaskGetInfo', 'OS_TaskFindIdBySystemData', 'OS_TimeBaseCreate', 'OS_TimeBaseGetIdByName', 'OS_TimeBaseGetInfo', 'OS_TimeBaseGetFreeRun', 'OS_DoTimerAdd', 'OS_TimerCreate', 'OS_TimerGetIdByName', 'OS_TimerGetInfo']}, 'OS_strnlen': {'callees': [], 'callers': ['OS_FileSysStartVolume_Impl', 'OS_FileSys_FindVirtMountPoint', 'OS_TranslatePath', 'OS_GetResourceName', 'OS_CreateSocketName']}, 'OS_ObjectIdGetBySearch': {'callees': ['OS_ObjectIdTransactionInit', 'OS_ObjectIdFindNextMatch', 'OS_ObjectIdConvertToken', 'OS_ObjectIdTransactionCancel'], 'callers': ['OS_unmount', 'OS_FileSysStatVolume', 'OS_chkfs', 'OS_FS_GetPhysDriveName', 'OS_TranslatePath', 'OS_ObjectIdGetByName', 'OS_TaskFindIdBySystemData']}, 'OS_ObjectIndexFromToken': {'callees': [], 'callers': ['OS_BinSemCreate_Impl', 'OS_BinSemDelete_Impl', 'OS_BinSemGive_Impl', 'OS_BinSemFlush_Impl', 'OS_GenericBinSemTake_Impl', 'OS_BinSemGetInfo_Impl', 'OS_ConsoleWakeup_Impl', 'OS_ConsoleTask_Entry', 'OS_ConsoleCreate_Impl', 'OS_CondVarCreate_Impl', 'OS_CondVarDelete_Impl', 'OS_CondVarUnlock_Impl', 'OS_CondVarLock_Impl', 'OS_CondVarSignal_Impl', 'OS_CondVarBroadcast_Impl', 'OS_CondVarWait_Impl', 'OS_CondVarTimedWait_Impl', 'OS_CountSemCreate_Impl', 'OS_CountSemDelete_Impl', 'OS_CountSemGive_Impl', 'OS_CountSemTake_Impl', 'OS_CountSemTimedWait_Impl', 'OS_CountSemGetInfo_Impl', 'OS_FileSysStartVolume_Impl', 'OS_FileSysMountVolume_Impl', 'OS_FileSysStatVolume_Impl', 'OS_MutSemCreate_Impl', 'OS_MutSemDelete_Impl', 'OS_MutSemGive_Impl', 'OS_MutSemTake_Impl', 'OS_QueueCreate_Impl', 'OS_QueueDelete_Impl', 'OS_QueueGet_Impl', 'OS_QueuePut_Impl', 'OS_TaskCreate_Impl', 'OS_TaskDetach_Impl', 'OS_TaskMatch_Impl', 'OS_TaskDelete_Impl', 'OS_TaskSetPriority_Impl', 'OS_TaskIdMatchSystemData_Impl', 'OS_TimeBaseLock_Impl', 'OS_TimeBaseUnlock_Impl', 'OS_TimeBase_SigWaitImpl', 'OS_TimeBaseCreate_Impl', 'OS_TimeBaseSet_Impl', 'OS_TimeBaseDelete_Impl', 'OS_ConsoleOutput_Impl', 'OS_SelectSingle_Impl', 'OS_GenericClose_Impl', 'OS_GenericSeek_Impl', 'OS_GenericRead_Impl', 'OS_GenericWrite_Impl', 'OS_FileOpen_Impl', 'OS_DirOpen_Impl', 'OS_DirClose_Impl', 'OS_DirRead_Impl', 'OS_DirRewind_Impl', 'OS_ModuleLoad_Impl', 'OS_ModuleUnload_Impl', 'OS_ModuleSymbolLookup_Impl', 'OS_SetSocketDefaultFlags_Impl', 'OS_SocketOpen_Impl', 'OS_SocketBindAddress_Impl', 'OS_SocketListen_Impl', 'OS_SocketConnect_Impl', 'OS_SocketShutdown_Impl', 'OS_SocketAccept_Impl', 'OS_SocketRecvFrom_Impl', 'OS_SocketSendTo_Impl', 'OS_BinSemCreate', 'OS_BinSemGetInfo', 'OS_CondVarCreate', 'OS_CondVarGetInfo', 'OS_CountSemCreate', 'OS_CountSemGetInfo', 'OS_DirectoryOpen', 'OS_OpenCreate', 'OS_rename', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_CloseFileByName', 'OS_FileSys_FindVirtMountPoint', 'OS_FileSys_Initialize', 'OS_FileSysAddFixedMap', 'OS_mount', 'OS_unmount', 'OS_FS_GetPhysDriveName', 'OS_TranslatePath', 'OS_ObjectIdFindNextMatch', 'OS_ObjectIdIteratorGetNext', 'OS_ModuleLoad', 'OS_ModuleUnload', 'OS_ModuleInfo', 'OS_ModuleSymbolLookup', 'OS_MutSemCreate', 'OS_MutSemGive', 'OS_MutSemTake', 'OS_MutSemGetInfo', 'OS_ConsoleAPI_Init', 'OS_ConsoleWrite', 'OS_QueueCreate', 'OS_QueueGet', 'OS_QueuePut', 'OS_QueueGetInfo', 'OS_CreateSocketName', 'OS_SocketOpen', 'OS_SocketListen', 'OS_SocketBindAddress', 'OS_SocketAccept', 'OS_SocketConnect', 'OS_SocketShutdown', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketGetInfo', 'OS_TaskPrepare', 'OS_TaskCreate', 'OS_TaskDelete', 'OS_TaskSetPriority', 'OS_TaskGetInfo', 'OS_TaskInstallDeleteHandler', 'OS_TimeBaseCreate', 'OS_TimeBaseSet', 'OS_TimeBaseGetInfo', 'OS_TimeBaseGetFreeRun', 'OS_TimeBase_CallbackThread', 'OS_DoTimerAdd', 'OS_TimerSet', 'OS_TimerDelete', 'OS_TimerGetInfo']}, 'OS_ObjectIdRelease': {'callees': ['OS_ObjectIdTransactionFinish'], 'callers': ['OS_ConsoleTask_Entry', 'OS_BinSemGetInfo', 'OS_CondVarGetInfo', 'OS_CountSemGetInfo', 'OS_DirectoryRead', 'OS_TimedRead', 'OS_TimedWrite', 'OS_lseek', 'OS_FDGetInfo', 'OS_mount', 'OS_unmount', 'OS_FileSysStatVolume', 'OS_chkfs', 'OS_FS_GetPhysDriveName', 'OS_TranslatePath', 'OS_ObjectIdFindByName', 'OS_GetResourceName', 'OS_ModuleInfo', 'OS_ModuleSymbolLookup', 'OS_MutSemGetInfo', 'OS_ConsoleWrite', 'OS_QueueGetInfo', 'OS_SelectSingle', 'OS_ShellOutputToFile', 'OS_SocketListen', 'OS_SocketBindAddress', 'OS_SocketAccept', 'OS_SocketConnect', 'OS_SocketShutdown', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketGetInfo', 'OS_TaskPrepare', 'OS_TaskSetPriority', 'OS_TaskGetInfo', 'OS_TaskInstallDeleteHandler', 'OS_TaskFindIdBySystemData', 'OS_TimeBaseSet', 'OS_TimeBaseGetInfo', 'OS_TimeBase_CallbackThread', 'OS_DoTimerAdd', 'OS_TimerSet', 'OS_TimerDelete', 'OS_TimerGetInfo']}, 'UT_Stub_RegisterReturnType': {'callees': ['UT_GetStubEntry', 'UT_ClearStubEntry', 'UtAssert_Abort'], 'callers': ['OS_BinSemCreate', 'OS_BinSemDelete', 'OS_BinSemFlush', 'OS_BinSemGetIdByName', 'OS_BinSemGetInfo', 'OS_BinSemGive', 'OS_BinSemTake', 'OS_BinSemTimedWait', 'OS_GetLocalTime', 'OS_SetLocalTime', 'OS_API_Init', 'OS_RegisterEventHandler', 'OS_CondVarBroadcast', 'OS_CondVarCreate', 'OS_CondVarDelete', 'OS_CondVarGetIdByName', 'OS_CondVarGetInfo', 'OS_CondVarLock', 'OS_CondVarSignal', 'OS_CondVarTimedWait', 'OS_CondVarUnlock', 'OS_CondVarWait', 'OS_CountSemCreate', 'OS_CountSemDelete', 'OS_CountSemGetIdByName', 'OS_CountSemGetInfo', 'OS_CountSemGive', 'OS_CountSemTake', 'OS_CountSemTimedWait', 'OS_DirectoryClose', 'OS_DirectoryOpen', 'OS_DirectoryRead', 'OS_DirectoryRewind', 'OS_mkdir', 'OS_rmdir', 'OS_GetErrorName', 'OS_StatusToString', 'OS_CloseAllFiles', 'OS_CloseFileByName', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_OpenCreate', 'OS_TimedRead', 'OS_TimedWrite', 'OS_chmod', 'OS_close', 'OS_cp', 'OS_lseek', 'OS_mv', 'OS_read', 'OS_remove', 'OS_rename', 'OS_stat', 'OS_write', 'OS_FS_GetPhysDriveName', 'OS_FileSysAddFixedMap', 'OS_FileSysStatVolume', 'OS_GetFsInfo', 'OS_TranslatePath', 'OS_chkfs', 'OS_initfs', 'OS_mkfs', 'OS_mount', 'OS_rmfs', 'OS_unmount', 'OS_HeapGetInfo', 'OS_ConvertToArrayIndex', 'OS_GetResourceName', 'OS_IdentifyObject', 'OS_ObjectIdToArrayIndex', 'OS_ModuleInfo', 'OS_ModuleLoad', 'OS_ModuleSymbolLookup', 'OS_ModuleUnload', 'OS_SymbolLookup', 'OS_SymbolTableDump', 'OS_MutSemCreate', 'OS_MutSemDelete', 'OS_MutSemGetIdByName', 'OS_MutSemGetInfo', 'OS_MutSemGive', 'OS_MutSemTake', 'OS_NetworkGetHostName', 'OS_NetworkGetID', 'OS_QueueCreate', 'OS_QueueDelete', 'OS_QueueGet', 'OS_QueueGetIdByName', 'OS_QueueGetInfo', 'OS_QueuePut', 'OS_SelectFdAdd', 'OS_SelectFdClear', 'OS_SelectFdIsSet', 'OS_SelectFdZero', 'OS_SelectMultiple', 'OS_SelectSingle', 'OS_ShellOutputToFile', 'OS_SocketAccept', 'OS_SocketAddrFromString', 'OS_SocketAddrGetPort', 'OS_SocketAddrInit', 'OS_SocketAddrSetPort', 'OS_SocketAddrToString', 'OS_SocketBind', 'OS_SocketBindAddress', 'OS_SocketConnect', 'OS_SocketGetIdByName', 'OS_SocketGetInfo', 'OS_SocketListen', 'OS_SocketOpen', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketShutdown', 'OS_TaskCreate', 'OS_TaskDelay', 'OS_TaskDelete', 'OS_TaskFindIdBySystemData', 'OS_TaskGetId', 'OS_TaskGetIdByName', 'OS_TaskGetInfo', 'OS_TaskInstallDeleteHandler', 'OS_TaskSetPriority', 'OS_TimerAdd', 'OS_TimerCreate', 'OS_TimerDelete', 'OS_TimerGetIdByName', 'OS_TimerGetInfo', 'OS_TimerSet', 'OS_TimeBaseCreate', 'OS_TimeBaseDelete', 'OS_TimeBaseGetFreeRun', 'OS_TimeBaseGetIdByName', 'OS_TimeBaseGetInfo', 'OS_TimeBaseSet', 'OS_GetBuildNumber', 'OS_GetVersionCodeName', 'OS_GetVersionString']}, 'UT_Stub_RegisterContextWithMetaData': {'callees': ['UT_GetStubEntry', 'UtAssert_Abort'], 'callers': ['OS_BinSemCreate', 'OS_BinSemDelete', 'OS_BinSemFlush', 'OS_BinSemGetIdByName', 'OS_BinSemGetInfo', 'OS_BinSemGive', 'OS_BinSemTake', 'OS_BinSemTimedWait', 'OS_GetLocalTime', 'OS_SetLocalTime', 'OS_ApplicationExit', 'OS_ApplicationShutdown', 'OS_RegisterEventHandler', 'OS_CondVarBroadcast', 'OS_CondVarCreate', 'OS_CondVarDelete', 'OS_CondVarGetIdByName', 'OS_CondVarGetInfo', 'OS_CondVarLock', 'OS_CondVarSignal', 'OS_CondVarTimedWait', 'OS_CondVarUnlock', 'OS_CondVarWait', 'OS_CountSemCreate', 'OS_CountSemDelete', 'OS_CountSemGetIdByName', 'OS_CountSemGetInfo', 'OS_CountSemGive', 'OS_CountSemTake', 'OS_CountSemTimedWait', 'OS_DirectoryClose', 'OS_DirectoryOpen', 'OS_DirectoryRead', 'OS_DirectoryRewind', 'OS_mkdir', 'OS_rmdir', 'OS_GetErrorName', 'OS_StatusToString', 'OS_CloseFileByName', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_OpenCreate', 'OS_TimedRead', 'OS_TimedWrite', 'OS_chmod', 'OS_close', 'OS_cp', 'OS_lseek', 'OS_mv', 'OS_read', 'OS_remove', 'OS_rename', 'OS_stat', 'OS_write', 'OS_FS_GetPhysDriveName', 'OS_FileSysAddFixedMap', 'OS_FileSysStatVolume', 'OS_GetFsInfo', 'OS_TranslatePath', 'OS_chkfs', 'OS_initfs', 'OS_mkfs', 'OS_mount', 'OS_rmfs', 'OS_unmount', 'OS_HeapGetInfo', 'OS_ConvertToArrayIndex', 'OS_ForEachObject', 'OS_ForEachObjectOfType', 'OS_GetResourceName', 'OS_IdentifyObject', 'OS_ObjectIdToArrayIndex', 'OS_ModuleInfo', 'OS_ModuleLoad', 'OS_ModuleSymbolLookup', 'OS_ModuleUnload', 'OS_SymbolLookup', 'OS_SymbolTableDump', 'OS_MutSemCreate', 'OS_MutSemDelete', 'OS_MutSemGetIdByName', 'OS_MutSemGetInfo', 'OS_MutSemGive', 'OS_MutSemTake', 'OS_NetworkGetHostName', 'OS_printf', 'OS_QueueCreate', 'OS_QueueDelete', 'OS_QueueGet', 'OS_QueueGetIdByName', 'OS_QueueGetInfo', 'OS_QueuePut', 'OS_SelectFdAdd', 'OS_SelectFdClear', 'OS_SelectFdIsSet', 'OS_SelectFdZero', 'OS_SelectMultiple', 'OS_SelectSingle', 'OS_ShellOutputToFile', 'OS_SocketAccept', 'OS_SocketAddrFromString', 'OS_SocketAddrGetPort', 'OS_SocketAddrInit', 'OS_SocketAddrSetPort', 'OS_SocketAddrToString', 'OS_SocketBind', 'OS_SocketBindAddress', 'OS_SocketConnect', 'OS_SocketGetIdByName', 'OS_SocketGetInfo', 'OS_SocketListen', 'OS_SocketOpen', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketShutdown', 'OS_TaskCreate', 'OS_TaskDelay', 'OS_TaskDelete', 'OS_TaskFindIdBySystemData', 'OS_TaskGetIdByName', 'OS_TaskGetInfo', 'OS_TaskInstallDeleteHandler', 'OS_TaskSetPriority', 'OS_TimerAdd', 'OS_TimerCreate', 'OS_TimerDelete', 'OS_TimerGetIdByName', 'OS_TimerGetInfo', 'OS_TimerSet', 'OS_TimeBaseCreate', 'OS_TimeBaseDelete', 'OS_TimeBaseGetFreeRun', 'OS_TimeBaseGetIdByName', 'OS_TimeBaseGetInfo', 'OS_TimeBaseSet']}, 'UT_ExecuteBasicHandler': {'callees': ['UT_GetStubEntry', 'UT_SetHandlerFunction', 'UT_DefaultStubImpl'], 'callers': ['OS_BinSemCreate', 'OS_BinSemDelete', 'OS_BinSemFlush', 'OS_BinSemGetIdByName', 'OS_BinSemGetInfo', 'OS_BinSemGive', 'OS_BinSemTake', 'OS_BinSemTimedWait', 'OS_GetLocalTime', 'OS_SetLocalTime', 'OS_API_Init', 'OS_API_Teardown', 'OS_ApplicationExit', 'OS_ApplicationShutdown', 'OS_DeleteAllObjects', 'OS_IdleLoop', 'OS_RegisterEventHandler', 'OS_CondVarBroadcast', 'OS_CondVarCreate', 'OS_CondVarDelete', 'OS_CondVarGetIdByName', 'OS_CondVarGetInfo', 'OS_CondVarLock', 'OS_CondVarSignal', 'OS_CondVarTimedWait', 'OS_CondVarUnlock', 'OS_CondVarWait', 'OS_CountSemCreate', 'OS_CountSemDelete', 'OS_CountSemGetIdByName', 'OS_CountSemGetInfo', 'OS_CountSemGive', 'OS_CountSemTake', 'OS_CountSemTimedWait', 'OS_DirectoryClose', 'OS_DirectoryOpen', 'OS_DirectoryRead', 'OS_DirectoryRewind', 'OS_mkdir', 'OS_rmdir', 'OS_GetErrorName', 'OS_StatusToString', 'OS_CloseAllFiles', 'OS_CloseFileByName', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_OpenCreate', 'OS_TimedRead', 'OS_TimedWrite', 'OS_chmod', 'OS_close', 'OS_cp', 'OS_lseek', 'OS_mv', 'OS_read', 'OS_remove', 'OS_rename', 'OS_stat', 'OS_write', 'OS_FS_GetPhysDriveName', 'OS_FileSysAddFixedMap', 'OS_FileSysStatVolume', 'OS_GetFsInfo', 'OS_TranslatePath', 'OS_chkfs', 'OS_initfs', 'OS_mkfs', 'OS_mount', 'OS_rmfs', 'OS_unmount', 'OS_HeapGetInfo', 'OS_ConvertToArrayIndex', 'OS_ForEachObject', 'OS_ForEachObjectOfType', 'OS_GetResourceName', 'OS_IdentifyObject', 'OS_ObjectIdToArrayIndex', 'OS_ModuleInfo', 'OS_ModuleLoad', 'OS_ModuleSymbolLookup', 'OS_ModuleUnload', 'OS_SymbolLookup', 'OS_SymbolTableDump', 'OS_MutSemCreate', 'OS_MutSemDelete', 'OS_MutSemGetIdByName', 'OS_MutSemGetInfo', 'OS_MutSemGive', 'OS_MutSemTake', 'OS_NetworkGetHostName', 'OS_NetworkGetID', 'OS_printf_disable', 'OS_printf_enable', 'OS_QueueCreate', 'OS_QueueDelete', 'OS_QueueGet', 'OS_QueueGetIdByName', 'OS_QueueGetInfo', 'OS_QueuePut', 'OS_SelectFdAdd', 'OS_SelectFdClear', 'OS_SelectFdIsSet', 'OS_SelectFdZero', 'OS_SelectMultiple', 'OS_SelectSingle', 'OS_ShellOutputToFile', 'OS_SocketAccept', 'OS_SocketAddrFromString', 'OS_SocketAddrGetPort', 'OS_SocketAddrInit', 'OS_SocketAddrSetPort', 'OS_SocketAddrToString', 'OS_SocketBind', 'OS_SocketBindAddress', 'OS_SocketConnect', 'OS_SocketGetIdByName', 'OS_SocketGetInfo', 'OS_SocketListen', 'OS_SocketOpen', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketShutdown', 'OS_TaskCreate', 'OS_TaskDelay', 'OS_TaskDelete', 'OS_TaskExit', 'OS_TaskFindIdBySystemData', 'OS_TaskGetId', 'OS_TaskGetIdByName', 'OS_TaskGetInfo', 'OS_TaskInstallDeleteHandler', 'OS_TaskSetPriority', 'OS_TimerAdd', 'OS_TimerCreate', 'OS_TimerDelete', 'OS_TimerGetIdByName', 'OS_TimerGetInfo', 'OS_TimerSet', 'OS_TimeBaseCreate', 'OS_TimeBaseDelete', 'OS_TimeBaseGetFreeRun', 'OS_TimeBaseGetIdByName', 'OS_TimeBaseGetInfo', 'OS_TimeBaseSet', 'OS_GetBuildNumber', 'OS_GetVersionCodeName', 'OS_GetVersionNumber', 'OS_GetVersionString']}, 'UT_Stub_GetReturnValuePtr': {'callees': ['UT_GetStubEntry', 'UtAssert_Abort', 'UtAssert_GetContext'], 'callers': ['OS_BinSemCreate', 'OS_BinSemDelete', 'OS_BinSemFlush', 'OS_BinSemGetIdByName', 'OS_BinSemGetInfo', 'OS_BinSemGive', 'OS_BinSemTake', 'OS_BinSemTimedWait', 'OS_GetLocalTime', 'OS_SetLocalTime', 'OS_API_Init', 'OS_RegisterEventHandler', 'OS_CondVarBroadcast', 'OS_CondVarCreate', 'OS_CondVarDelete', 'OS_CondVarGetIdByName', 'OS_CondVarGetInfo', 'OS_CondVarLock', 'OS_CondVarSignal', 'OS_CondVarTimedWait', 'OS_CondVarUnlock', 'OS_CondVarWait', 'OS_CountSemCreate', 'OS_CountSemDelete', 'OS_CountSemGetIdByName', 'OS_CountSemGetInfo', 'OS_CountSemGive', 'OS_CountSemTake', 'OS_CountSemTimedWait', 'OS_DirectoryClose', 'OS_DirectoryOpen', 'OS_DirectoryRead', 'OS_DirectoryRewind', 'OS_mkdir', 'OS_rmdir', 'OS_GetErrorName', 'OS_StatusToString', 'OS_CloseAllFiles', 'OS_CloseFileByName', 'OS_FDGetInfo', 'OS_FileOpenCheck', 'OS_OpenCreate', 'OS_TimedRead', 'OS_TimedWrite', 'OS_chmod', 'OS_close', 'OS_cp', 'OS_lseek', 'OS_mv', 'OS_read', 'OS_remove', 'OS_rename', 'OS_stat', 'OS_write', 'OS_FS_GetPhysDriveName', 'OS_FileSysAddFixedMap', 'OS_FileSysStatVolume', 'OS_GetFsInfo', 'OS_TranslatePath', 'OS_chkfs', 'OS_initfs', 'OS_mkfs', 'OS_mount', 'OS_rmfs', 'OS_unmount', 'OS_HeapGetInfo', 'OS_ConvertToArrayIndex', 'OS_GetResourceName', 'OS_IdentifyObject', 'OS_ObjectIdToArrayIndex', 'OS_ModuleInfo', 'OS_ModuleLoad', 'OS_ModuleSymbolLookup', 'OS_ModuleUnload', 'OS_SymbolLookup', 'OS_SymbolTableDump', 'OS_MutSemCreate', 'OS_MutSemDelete', 'OS_MutSemGetIdByName', 'OS_MutSemGetInfo', 'OS_MutSemGive', 'OS_MutSemTake', 'OS_NetworkGetHostName', 'OS_NetworkGetID', 'OS_QueueCreate', 'OS_QueueDelete', 'OS_QueueGet', 'OS_QueueGetIdByName', 'OS_QueueGetInfo', 'OS_QueuePut', 'OS_SelectFdAdd', 'OS_SelectFdClear', 'OS_SelectFdIsSet', 'OS_SelectFdZero', 'OS_SelectMultiple', 'OS_SelectSingle', 'OS_ShellOutputToFile', 'OS_SocketAccept', 'OS_SocketAddrFromString', 'OS_SocketAddrGetPort', 'OS_SocketAddrInit', 'OS_SocketAddrSetPort', 'OS_SocketAddrToString', 'OS_SocketBind', 'OS_SocketBindAddress', 'OS_SocketConnect', 'OS_SocketGetIdByName', 'OS_SocketGetInfo', 'OS_SocketListen', 'OS_SocketOpen', 'OS_SocketRecvFrom', 'OS_SocketSendTo', 'OS_SocketShutdown', 'OS_TaskCreate', 'OS_TaskDelay', 'OS_TaskDelete', 'OS_TaskFindIdBySystemData', 'OS_TaskGetId', 'OS_TaskGetIdByName', 'OS_TaskGetInfo', 'OS_TaskInstallDeleteHandler', 'OS_TaskSetPriority', 'OS_TimerAdd', 'OS_TimerCreate', 'OS_TimerDelete', 'OS_TimerGetIdByName', 'OS_TimerGetInfo', 'OS_TimerSet', 'OS_TimeBaseCreate', 'OS_TimeBaseDelete', 'OS_TimeBaseGetFreeRun', 'OS_TimeBaseGetIdByName', 'OS_TimeBaseGetInfo', 'OS_TimeBaseSet', 'OS_GetBuildNumber', 'OS_GetVersionCodeName', 'OS_GetVersionString']}, 'OS_mkdir': {'callees': ['OS_TranslatePath', 'OS_DirCreate_Impl', 'UT_Stub_RegisterReturnType', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteBasicHandler', 'UT_Stub_GetReturnValuePtr'], 'callers': []}, 'OS_DirectoryOpen': {'callees': ['OS_printf', 'OS_TranslatePath', 'OS_ObjectIdAllocateNew', 'OS_ObjectIndexFromToken', 'OS_ObjectIdGlobalFromToken', 'OS_DirOpen_Impl', 'OS_ObjectIdFinalizeNew', 'UT_Stub_RegisterReturnType', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteBasicHandler', 'UT_Stub_GetReturnValuePtr'], 'callers': []}, 'OS_rmdir': {'callees': ['OS_TranslatePath', 'OS_DirRemove_Impl', 'UT_Stub_RegisterReturnType', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteBasicHandler', 'UT_Stub_GetReturnValuePtr'], 'callers': []}, 'OS_OpenCreate': {'callees': ['OS_printf', 'OS_TranslatePath', 'OS_ObjectIdAllocateNew', 'OS_ObjectIndexFromToken', 'OS_ObjectIdGlobalFromToken', 'OS_FileOpen_Impl', 'OS_ObjectIdFinalizeNew', 'UT_Stub_RegisterReturnType', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteBasicHandler', 'UT_Stub_GetReturnValuePtr'], 'callers': ['OS_cp']}, 'OS_chmod': {'callees': ['OS_TranslatePath', 'OS_FileChmod_Impl', 'UT_Stub_RegisterReturnType', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteBasicHandler', 'UT_Stub_GetReturnValuePtr'], 'callers': []}, 'OS_stat': {'callees': ['OS_printf', 'OS_TranslatePath', 'OS_FileStat_Impl', 'UT_Stub_RegisterReturnType', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteBasicHandler', 'UT_Stub_GetReturnValuePtr'], 'callers': []}, 'OS_remove': {'callees': ['OS_TranslatePath', 'OS_FileRemove_Impl', 'UT_Stub_RegisterReturnType', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteBasicHandler', 'UT_Stub_GetReturnValuePtr'], 'callers': ['OS_mv']}, 'OS_rename': {'callees': ['OS_TranslatePath', 'OS_FileRename_Impl', 'OS_ObjectIdIterateActive', 'OS_ObjectIndexFromToken', 'OS_ObjectIdIteratorDestroy', 'UT_Stub_RegisterReturnType', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteBasicHandler', 'UT_Stub_GetReturnValuePtr'], 'callers': ['OS_mv']}, 'OS_ModuleLoad': {'callees': ['OS_printf', 'OS_TranslatePath', 'OS_ObjectIdAllocateNew', 'OS_ObjectIndexFromToken', 'OS_ObjectIdGlobalFromToken', 'OS_ModuleLoad_Static', 'OS_ModuleLoad_Impl', 'OS_ObjectIdFinalizeNew', 'UT_Stub_RegisterReturnType', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteBasicHandler', 'UT_Stub_GetReturnValuePtr'], 'callers': []}, 'OS_SymbolTableDump': {'callees': ['OS_printf', 'OS_TranslatePath', 'OS_ObjectIdTransactionInit', 'OS_SymbolTableDump_Impl', 'OS_ObjectIdTransactionCancel', 'UT_Stub_RegisterReturnType', 'UT_Stub_RegisterContextWithMetaData', 'UT_ExecuteBasicHandler', 'UT_Stub_GetReturnValuePtr'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA project shall not contain dead code. Any operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "OS_CHECK_POINTER",
    "OS_strnlen",
    "OS_MAX_PATH_LEN",
    "strrchr",
    "memchr",
    "OS_MAX_FILE_NAME",
    "OS_MAX_LOCAL_PATH_LEN",
    "memcpy",
    "OS_ObjectIdGetBySearch",
    "OS_LOCK_MODE_GLOBAL",
    "LOCAL_OBJID_TYPE",
    "OS_FileSys_FindVirtMountPoint",
    "OS_object_token_t",
    "OS_ObjectIdRelease",
    "OS_OBJECT_TABLE_GET",
    "OS_filesys_table",
    "OS_filesys_internal_record_t",
    "OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM",
    "OS_SUCCESS",
    "OS_FS_ERR_PATH_TOO_LONG",
    "OS_FS_ERR_PATH_INVALID",
    "OS_FS_ERR_NAME_TOO_LONG",
    "OS_ERR_INCORRECT_OBJ_STATE"
  ],
  "explanation": "For determining whether any executed operation in OS_TranslatePath is dead code we must know the semantics, ranges and side-effects of the symbols that control its branches and observable behavior. Each listed symbol is required for the following reasons:\n\n- OS_CHECK_POINTER: Macro invoked at function start. Its behavior (returning an error, aborting, or doing nothing) determines whether the early parameter-check code can be removed without changing behavior.\n\n- OS_strnlen: Used to compute VirtPathLen, SysMountPointLen and VirtPathBegin with bounded length semantics. Its exact semantics (limit behavior) affects whether length checks/assignments and subsequent branches are ever executed.\n\n- OS_MAX_PATH_LEN: Constant used with OS_strnlen and compared to VirtPathLen. If its value makes the >= test impossible/always true this affects reachability of the \"path too long\" branch.\n\n- strrchr: Finds the last '/'; its return value controls the \"no slash -> invalid path\" branch. Knowing its behavior is necessary to determine if that branch ever executes.\n\n- memchr: Used to check for a terminating NUL within the file-name portion; its semantics control the \"name too long\" branch.\n\n- OS_MAX_FILE_NAME: Bound used with memchr; its value determines whether the name-length check can succeed/fail.\n\n- OS_MAX_LOCAL_PATH_LEN: Compared against SysMountPointLen and (SysMountPointLen + VirtPathLen). Its value controls whether the local-path-length checks/branches can ever be triggered.\n\n- memcpy: Copies system mount point and remainder of path to LocalPath; understanding whether these copies are observable (side-effects) is needed to decide if they are removable.\n\n- OS_ObjectIdGetBySearch: Central call to obtain the filesys token. Its possible return values and side-effects determine whether the code inside the success branch (table access, flag checks, copies) can execute at all.\n\n- OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint: Parameters/generic callback used by OS_ObjectIdGetBySearch. The semantics of the search callback (how it matches VirtualPath to a filesystem) affect which return paths are possible and therefore whether downstream code is live.\n\n- OS_object_token_t: Type of token returned/used; needed to reason about the validity of OS_OBJECT_TABLE_GET and OS_ObjectIdRelease operations (i.e., whether the table lookup is valid and has side-effects).\n\n- OS_ObjectIdRelease: Called to release the token; it can have side-effects (resource management) so its presence/absence could affect observable behavior and therefore whether its invocation is dead.\n\n- OS_OBJECT_TABLE_GET: Macro used to obtain the filesys record from OS_filesys_table using the token. Its expansion/semantics are necessary to determine whether accessing filesys is valid and whether that operation has observable effects.\n\n- OS_filesys_table: Global table accessed by OS_OBJECT_TABLE_GET; its contents (how virtual/system mount points and flags are populated) determine which branches (mounted-system vs incorrect-state) are reachable.\n\n- OS_filesys_internal_record_t: The structure type of the table entries; its fields (flags, system_mountpt, virtual_mountpt) and their sizes are used for flag testing, length computations and memcpy sizes \u2014 all relevant to reachability and observability of code.\n\n- OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM: Flag tested to decide whether to copy system mount point or return incorrect state. If this flag is always/never set for entries the alternative path could be dead.\n\n- OS_SUCCESS: Return-code constant indicating success from OS_ObjectIdGetBySearch. Needed to reason about which branches run and whether the success path (which does most work) can be eliminated.\n\n- OS_FS_ERR_PATH_TOO_LONG, OS_FS_ERR_PATH_INVALID, OS_FS_ERR_NAME_TOO_LONG, OS_ERR_INCORRECT_OBJ_STATE: All return-code constants assigned in different branches. To decide whether a return statement (and surrounding code) is removable we must know whether these return codes are actually reachable/observable.\n\nCollectively these symbols provide the runtime semantics (macro behaviors, length bounds, flags, table contents and object lookup outcomes) required to determine whether any executed operations in OS_TranslatePath are semantically dead (i.e., could be removed without changing program behavior)."
}