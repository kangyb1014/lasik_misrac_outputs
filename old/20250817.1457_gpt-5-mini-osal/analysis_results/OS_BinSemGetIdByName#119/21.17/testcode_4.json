{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential violation: if LENGTHCHECK(name, OS_MAX_API_NAME, ...) internally uses an unbounded string scan (e.g. strlen(name)) then a caller that supplies a non\u2013NUL-terminated buffer (or a buffer whose NUL is beyond its allocated size) will cause the string scan to read past the bounds of the object referenced by name. ARGCHECK only ensures name != NULL and does not prevent a buffer overrun. Example: caller provides a char buf[OS_MAX_API_NAME] that is not NUL-terminated; LENGTHCHECK calling strlen(buf) will continue reading past buf until a NUL is found, causing an out-of-bounds access and therefore a violation of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetIdByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/959.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetIdByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetIdByName:\n```c\nint32 OS_BinSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetIdByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logging helper. Keeps signature generic (void pointers) to avoid\n * introducing dependencies on project-specific typedefs in this snippet.\n * Logs control-flow stages and pointer values to /tmp/logs/959.txt.\n */\nstatic void OS_BinSem_ProbeLog(const char *stage, const void *sem_id_ptr, const void *sem_name_ptr, int return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/959.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log stage and pointer values. Do NOT dereference sem_name_ptr here to\n     * avoid introducing additional out-of-bounds accesses. The presence of a\n     * crash between the \"after_checks\" and \"after_find\" entries will serve\n     * as evidence that a function called thereafter performed an unsafe scan.\n     */\n    fprintf(f, \"[OS_BinSemGetIdByName] stage=%s sem_id_ptr=%p sem_name_ptr=%p return_code=%d\\n\",\n            stage, sem_id_ptr, sem_name_ptr, return_code);\n\n    /* Provide a short human-readable hint for testers about what was (not)\n     * inspected: we intentionally avoid reading sem_name_ptr bytes here.\n     */\n    if (sem_name_ptr != NULL)\n    {\n        fprintf(f, \"    note=sem_name pointer non-NULL; contents not dereferenced to avoid additional UB.\\n\");\n    }\n    else\n    {\n        fprintf(f, \"    note=sem_name pointer is NULL.\\n\");\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\n/* Original function with minimal instrumentation. The original logic is\n * preserved; instrumentation logs before parameter checks, after checks,\n * and after the call to OS_ObjectIdFindByName. This allows reproducing a\n * crash or evidence if a string-scan-based LENGTHCHECK inside the called\n * function reads out-of-bounds (the log will show that the call was made\n * and whether control returned).\n */\nint32 OS_BinSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Entry probe */\n    OS_BinSem_ProbeLog(\"entry\", (const void *)sem_id, (const void *)sem_name, -1);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    /* After checks probe */\n    OS_BinSem_ProbeLog(\"after_checks\", (const void *)sem_id, (const void *)sem_name, -1);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    /* After call probe - if the process crashes inside\n     * OS_ObjectIdFindByName (for example due to an unbounded strlen on a\n     * non-NUL-terminated buffer), this line will not be reached and the log\n     * will show that failure point.\n     */\n    OS_BinSem_ProbeLog(\"after_find\", (const void *)sem_id, (const void *)sem_name, return_code);\n\n    return return_code;\n}\n"
}