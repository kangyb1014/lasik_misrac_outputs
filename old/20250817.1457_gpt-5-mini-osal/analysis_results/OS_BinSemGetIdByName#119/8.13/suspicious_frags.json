{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetIdByName:\n```c\nint32 OS_BinSemGetIdByName(osal_id_t *sem_id, const char *sem_name)\n{\n    int32 return_code;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_POINTER(sem_name);\n\n    return_code = OS_ObjectIdFindByName(LOCAL_OBJID_TYPE, sem_name, sem_id);\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_BinSemGetIdByName:\ntypedef uint32 osal_id_t\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\nint32 OS_ObjectIdFindByName(osal_objtype_t idtype, const char *name, osal_id_t *object_id)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /*\n     * As this is an internal-only function, calling it with NULL is allowed.\n     * This is required by the file/dir/socket API since these DO allow multiple\n     * instances of the same name.\n     */\n    ARGCHECK(name, OS_ERR_NAME_NOT_FOUND);\n    LENGTHCHECK(name, OS_MAX_API_NAME, OS_ERR_NAME_TOO_LONG);\n\n    return_code = OS_ObjectIdGetByName(OS_LOCK_MODE_GLOBAL, idtype, name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        *object_id = token.obj_id;\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragments require investigation for MISRA C 2023 Rule 8.13 (pointer should point to a const-qualified type whenever possible).\n\nReasons:\n- OS_BinSemGetIdByName parameters: sem_name is declared as const char * (already const-qualified). sem_id is an output parameter (osal_id_t *); it is written to via the downstream call and therefore must not be const.\n- OS_ObjectIdFindByName signature: name is const char * (already const-qualified). object_id is an output parameter (osal_id_t *); the function assigns *object_id = token.obj_id, so it must be non-const.\n- The local token (OS_object_token_t token) is a non-pointer local object; taking its address (&token) is used to populate the token via OS_ObjectIdGetByName, so a non-const pointer is appropriate.\n- Macros (OS_CHECK_POINTER, ARGCHECK, LENGTHCHECK, BUGCHECK) are used for checks and do not introduce pointer-type declarations that could/should be const-qualified; they merely evaluate expressions or operate on pointers passed in. Passing a const-qualified pointer (e.g., sem_name) to these macros is permissible because the macros do not attempt to modify the pointee.\n\nGiven the shown code and how each pointer is used (input/read-only vs output/written), there are no pointers that could be made const without preventing required writes. Therefore no suspicious fragments for Rule 8.13 were found."
}