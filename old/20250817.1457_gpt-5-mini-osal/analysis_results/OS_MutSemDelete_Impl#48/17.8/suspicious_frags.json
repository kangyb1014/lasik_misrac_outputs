{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_MutSemDelete_Impl:\n```c\nint32 OS_MutSemDelete_Impl(const OS_object_token_t *token)\n{\n    int                              status;\n    OS_impl_mutex_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    status = pthread_mutex_destroy(&(impl->id)); /* 0 = success */\n\n    if (status != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_MutSemDelete_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nOS_impl_mutex_internal_record_t OS_impl_mutex_table[OS_MAX_MUTEXES]\n...\ntypedef struct\n{\n    pthread_mutex_t id;\n} OS_impl_mutex_internal_record_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragment in the provided function appears to modify the function parameter token (either the pointer value or the object it points to). Specific reasons:\n- The function parameter is declared as const OS_object_token_t *token, so attempts to modify the pointed-to object would be a compile-time error.\n- There is no assignment to token (no token = ... or similar) in the function body, so the pointer itself is not modified.\n- The macro invocation OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token) expands to taking the address of the dereferenced token (effectively &(*token) -> token) and then calling OS_ObjectIndexFromToken with that pointer. Taking the address or dereferencing for read-only access does not modify the parameter.\n- OS_ObjectIndexFromToken accepts a const OS_object_token_t * and only reads token->obj_idx; it does not modify the token object or pointer.\n- The rest of the code (indexing the global OS_impl_mutex_table and calling pthread_mutex_destroy on impl->id) operates on the mutex table and the mutex object, not on the function parameter.\n\nBecause no operations that could alter the pointer parameter or its pointee occur, there are no fragments requiring further investigation for Rule 17.8."
}