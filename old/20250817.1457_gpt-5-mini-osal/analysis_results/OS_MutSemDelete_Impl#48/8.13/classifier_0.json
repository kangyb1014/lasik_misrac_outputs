{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_MutSemDelete_Impl:\n```c\nint32 OS_MutSemDelete_Impl(const OS_object_token_t *token)\n{\n    int                              status;\n    OS_impl_mutex_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    status = pthread_mutex_destroy(&(impl->id)); /* 0 = success */\n\n    if (status != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_MutSemDelete_Impl:\ntypedef struct\n{\n    pthread_mutex_t id;\n} OS_impl_mutex_internal_record_t\n...\nOS_impl_mutex_internal_record_t OS_impl_mutex_table[OS_MAX_MUTEXES]\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\ntypedef struct OS_object_token OS_object_token_t\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The macro takes the address of its tok parameter (&(tok)). If the macro is invoked with a non-const lvalue of type OS_object_token_t (for example: OS_object_token_t mytok; OS_OBJECT_TABLE_GET(tbl, mytok);), the expression &(tok) yields a value of type OS_object_token_t * (pointer to non-const). That produces a non-const pointer where a pointer to a const-qualified type would be preferable, violating MISRA C 2023 Rule 8.13. (Note: the specific call in OS_MutSemDelete_Impl uses *token where token is const OS_object_token_t *, so that particular call does not violate the rule, but the macro itself allows a violating usage.)"
}