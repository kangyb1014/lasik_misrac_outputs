{
  "user_message": "An agent A claimed that the following OS_MutSemDelete_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_MutSemDelete_Impl.\n```c\nint32 OS_MutSemDelete_Impl(const OS_object_token_t *token)\n{\n    int                              status;\n    OS_impl_mutex_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    status = pthread_mutex_destroy(&(impl->id)); /* 0 = success */\n\n    if (status != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro takes the address of its tok parameter (&(tok)). If the macro is invoked with a non-const lvalue of type OS_object_token_t (for example: OS_object_token_t mytok; OS_OBJECT_TABLE_GET(tbl, mytok);), the expression &(tok) yields a value of type OS_object_token_t * (pointer to non-const). That produces a non-const pointer where a pointer to a const-qualified type would be preferable, violating MISRA C 2023 Rule 8.13. (Note: the specific call in OS_MutSemDelete_Impl uses *token where token is const OS_object_token_t *, so that particular call does not violate the rule, but the macro itself allows a violating usage.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/387.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        fprintf(f, \"[%ld] \", (long)t);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_MutSemDelete_Impl(const OS_object_token_t *token)\n{\n    int                              status;\n    OS_impl_mutex_internal_record_t *impl;\n\n    /* Log entry and token pointer value. Avoid creating non-const pointers. */\n    os_probe_log(\"Entered OS_MutSemDelete_Impl: token_ptr=%p\", (const void *)token);\n\n    if (token == NULL)\n    {\n        os_probe_log(\"token is NULL -> returning failure\");\n        return OS_SEM_FAILURE;\n    }\n\n    /* Safely capture and log a compact representation of *token without assuming its concrete type.\n       Copy up to sizeof(uint64_t) bytes from the token object to produce a reproducible hex sample. */\n    {\n        uint64_t sample = 0ULL;\n        size_t tok_bytes = sizeof(*token);\n        size_t to_copy = tok_bytes < sizeof(sample) ? tok_bytes : sizeof(sample);\n        memcpy(&sample, token, to_copy);\n        os_probe_log(\"token sample (first %zu bytes) = 0x%llx\", to_copy, (unsigned long long)sample);\n    }\n\n    /* Original lookup. Keep unchanged so behavior is preserved. */\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    os_probe_log(\"After OS_OBJECT_TABLE_GET: impl_ptr=%p\", (void *)impl);\n\n    if (impl == NULL)\n    {\n        os_probe_log(\"impl is NULL -> returning failure\");\n        return OS_SEM_FAILURE;\n    }\n\n    /* Log address of the underlying pthread mutex object (impl->id) without taking non-const addresses\n       of caller-supplied token. This helps correlate the control path and state when the macro is used. */\n    os_probe_log(\"impl->id address = %p\", (void *)&(impl->id));\n\n    status = pthread_mutex_destroy(&(impl->id)); /* 0 = success */\n\n    os_probe_log(\"pthread_mutex_destroy returned status=%d\", status);\n\n    if (status != 0)\n    {\n        os_probe_log(\"pthread_mutex_destroy failed -> returning OS_SEM_FAILURE\");\n        return OS_SEM_FAILURE;\n    }\n\n    os_probe_log(\"pthread_mutex_destroy succeeded -> returning OS_SUCCESS\");\n    return OS_SUCCESS;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_MutSemDelete_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct for the shown function. In OS_MutSemDelete_Impl the parameter is declared as const OS_object_token_t *token, and the call uses *token. That yields a const-qualified lvalue; if the macro takes the address of that expression it will produce a pointer to const, so this particular use does not create a non-const pointer and does not violate MISRA C 2023 Rule 8.13. Rule 8.13 is about preferring pointers to const where modification is not required; it applies to pointer declarations/usages. The agent\u2019s scenario describes a potential problem in the macro definition (or in other uses of the macro with a non-const lvalue), not a violation in OS_MutSemDelete_Impl itself. Also, without the macro\u2019s definition you cannot demonstrate that the macro necessarily produces a non-const pointer in all contexts. The test harness/logging shown does not change that fact. If there is concern, the macro should be reviewed and (if appropriate) changed to accept/produce const-qualified pointers, but the reported violation for OS_MutSemDelete_Impl is incorrect."
}