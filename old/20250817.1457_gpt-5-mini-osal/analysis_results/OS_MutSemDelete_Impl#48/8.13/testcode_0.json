{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro takes the address of its tok parameter (&(tok)). If the macro is invoked with a non-const lvalue of type OS_object_token_t (for example: OS_object_token_t mytok; OS_OBJECT_TABLE_GET(tbl, mytok);), the expression &(tok) yields a value of type OS_object_token_t * (pointer to non-const). That produces a non-const pointer where a pointer to a const-qualified type would be preferable, violating MISRA C 2023 Rule 8.13. (Note: the specific call in OS_MutSemDelete_Impl uses *token where token is const OS_object_token_t *, so that particular call does not violate the rule, but the macro itself allows a violating usage.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemDelete_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/387.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemDelete_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemDelete_Impl:\n```c\nint32 OS_MutSemDelete_Impl(const OS_object_token_t *token)\n{\n    int                              status;\n    OS_impl_mutex_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    status = pthread_mutex_destroy(&(impl->id)); /* 0 = success */\n\n    if (status != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemDelete_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe helper: append logs to /tmp/logs/387.txt. Keeps original logic unchanged. */\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/387.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    if (t != (time_t)-1)\n    {\n        fprintf(f, \"[%ld] \", (long)t);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_MutSemDelete_Impl(const OS_object_token_t *token)\n{\n    int                              status;\n    OS_impl_mutex_internal_record_t *impl;\n\n    /* Log entry and token pointer value. Avoid creating non-const pointers. */\n    os_probe_log(\"Entered OS_MutSemDelete_Impl: token_ptr=%p\", (const void *)token);\n\n    if (token == NULL)\n    {\n        os_probe_log(\"token is NULL -> returning failure\");\n        return OS_SEM_FAILURE;\n    }\n\n    /* Safely capture and log a compact representation of *token without assuming its concrete type.\n       Copy up to sizeof(uint64_t) bytes from the token object to produce a reproducible hex sample. */\n    {\n        uint64_t sample = 0ULL;\n        size_t tok_bytes = sizeof(*token);\n        size_t to_copy = tok_bytes < sizeof(sample) ? tok_bytes : sizeof(sample);\n        memcpy(&sample, token, to_copy);\n        os_probe_log(\"token sample (first %zu bytes) = 0x%llx\", to_copy, (unsigned long long)sample);\n    }\n\n    /* Original lookup. Keep unchanged so behavior is preserved. */\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    os_probe_log(\"After OS_OBJECT_TABLE_GET: impl_ptr=%p\", (void *)impl);\n\n    if (impl == NULL)\n    {\n        os_probe_log(\"impl is NULL -> returning failure\");\n        return OS_SEM_FAILURE;\n    }\n\n    /* Log address of the underlying pthread mutex object (impl->id) without taking non-const addresses\n       of caller-supplied token. This helps correlate the control path and state when the macro is used. */\n    os_probe_log(\"impl->id address = %p\", (void *)&(impl->id));\n\n    status = pthread_mutex_destroy(&(impl->id)); /* 0 = success */\n\n    os_probe_log(\"pthread_mutex_destroy returned status=%d\", status);\n\n    if (status != 0)\n    {\n        os_probe_log(\"pthread_mutex_destroy failed -> returning OS_SEM_FAILURE\");\n        return OS_SEM_FAILURE;\n    }\n\n    os_probe_log(\"pthread_mutex_destroy succeeded -> returning OS_SUCCESS\");\n    return OS_SUCCESS;\n}\n"
}