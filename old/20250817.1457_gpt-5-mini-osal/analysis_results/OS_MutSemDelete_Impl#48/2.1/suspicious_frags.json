{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_MutSemDelete_Impl:\n```c\nint32 OS_MutSemDelete_Impl(const OS_object_token_t *token)\n{\n    int                              status;\n    OS_impl_mutex_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    status = pthread_mutex_destroy(&(impl->id)); /* 0 = success */\n\n    if (status != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_MutSemDelete_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_mutex_internal_record_t OS_impl_mutex_table[OS_MAX_MUTEXES]\n...\ntypedef struct\n{\n    pthread_mutex_t id;\n} OS_impl_mutex_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\n#define OS_SEM_FAILURE (-6)\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "OS_impl_mutex_internal_record_t OS_impl_mutex_table[OS_MAX_MUTEXES]",
    "status = pthread_mutex_destroy(&(impl->id)); /* 0 = success */",
    "if (status != 0)\n    {\n        return OS_SEM_FAILURE;\n    }",
    "impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);",
    "static inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}",
    "return OS_SUCCESS;",
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])",
    "typedef struct\n{\n    pthread_mutex_t id;\n} OS_impl_mutex_internal_record_t",
    "int32 OS_MutSemDelete_Impl(const OS_object_token_t *token)"
  ],
  "explanation": "The listed fragments are the program points that affect control flow or the mapping from the token to the table entry and therefore can cause code paths to be executed or never executed. In particular: the macro OS_OBJECT_TABLE_GET (its address-of usage and index computation), the OS_ObjectIndexFromToken inline (directly reads token->obj_idx), the object table declaration and the record type (which supply impl and impl->id), the pthread_mutex_destroy call and the subsequent conditional/returns determine which return path is taken. Other lines in the provided code do not introduce additional control-flow constructs or compile-time constant conditions that could create unreachable code and therefore do not need further investigation for MISRA Rule 2.1 in this context (e.g. the macro constants OS_SEM_FAILURE and OS_SUCCESS, the local variable declarations, and the basic function prologue/epilogue)."
}