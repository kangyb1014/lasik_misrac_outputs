{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_MutSemDelete_Impl:\n```c\nint32 OS_MutSemDelete_Impl(const OS_object_token_t *token)\n{\n    int                              status;\n    OS_impl_mutex_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_mutex_table, *token);\n\n    status = pthread_mutex_destroy(&(impl->id)); /* 0 = success */\n\n    if (status != 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_MutSemDelete_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_mutex_internal_record_t OS_impl_mutex_table[OS_MAX_MUTEXES]\n...\ntypedef struct\n{\n    pthread_mutex_t id;\n} OS_impl_mutex_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\n#define OS_SEM_FAILURE (-6)\n...\n#define OS_SUCCESS (0)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The inline function contains a single return statement (return token->obj_idx;) and is invoked via the OS_OBJECT_TABLE_GET macro in the shown code path (OS_OBJECT_TABLE_GET(..., *token) -> OS_ObjectIndexFromToken(&(tok))). There is no code present that can never be executed (no statements after an unconditional return, no mutually exclusive conditions that prevent reachability). Therefore Rule 2.1 is not violated. Note: dereferencing a NULL token would be undefined behavior at runtime, but that is not an instance of unreachable code."
}