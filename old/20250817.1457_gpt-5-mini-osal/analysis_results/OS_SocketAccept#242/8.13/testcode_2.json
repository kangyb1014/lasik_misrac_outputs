{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'sock' is declared as OS_stream_internal_record_t *sock and is used only for read access in this function (e.g. if (sock->socket_type != OS_SocketType_STREAM)). According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible. In this function 'sock' could be declared as const OS_stream_internal_record_t *sock (the OS_OBJECT_TABLE_GET result can be assigned to a pointer-to-const), avoiding accidental modification and satisfying the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAccept code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1939.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAccept as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAccept:\n```c\nint32 OS_SocketAccept(osal_id_t sock_id, osal_id_t *connsock_id, OS_SockAddr_t *Addr, int32 timeout)\n{\n    OS_common_record_t *         sock_record;\n    OS_common_record_t *         conn_record;\n    OS_stream_internal_record_t *sock;\n    OS_stream_internal_record_t *conn;\n    OS_object_token_t            sock_token;\n    OS_object_token_t            conn_token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n    OS_CHECK_POINTER(connsock_id);\n\n    /*\n     * Note: setting \"connrecord\" here avoids a false warning\n     * from static analysis tools about the value being\n     * possibly used uninitialized (it cannot be, because\n     * return_code is checked, and return_code is only\n     * set to OS_SUCCESS when connrecord is also initialized)\n     */\n    conn_record = NULL;\n    sock_record = NULL;\n    sock        = NULL;\n    conn        = NULL;\n    memset(&sock_token, 0, sizeof(sock_token));\n    memset(&conn_token, 0, sizeof(conn_token));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &sock_token);\n    if (return_code == OS_SUCCESS)\n    {\n        sock_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, sock_token);\n        sock        = OS_OBJECT_TABLE_GET(OS_stream_table, sock_token);\n\n        if (sock->socket_type != OS_SocketType_STREAM)\n        {\n            /* Socket must be of the STREAM variety */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((sock->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != OS_STREAM_STATE_BOUND)\n        {\n            /* Socket must be bound but not connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Now create a unique ID for the connection */\n            return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &conn_token);\n            if (return_code == OS_SUCCESS)\n            {\n                conn_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, conn_token);\n                conn        = OS_OBJECT_TABLE_GET(OS_stream_table, conn_token);\n\n                /* Incr the refcount to record the fact that an operation is pending on this */\n                memset(conn, 0, sizeof(OS_stream_internal_record_t));\n\n                conn->socket_domain = sock->socket_domain;\n                conn->socket_type   = sock->socket_type;\n\n                OS_SocketAddrInit_Impl(Addr, sock->socket_domain);\n\n                return_code = OS_SocketAccept_Impl(&sock_token, &conn_token, Addr, timeout);\n\n                if (return_code == OS_SUCCESS)\n                {\n                    /* Generate an entry name based on the remote address */\n                    OS_CreateSocketName(&conn_token, Addr, sock_record->name_entry);\n                    conn_record->name_entry = conn->stream_name;\n                    conn->stream_state |= OS_STREAM_STATE_CONNECTED;\n                }\n\n                return_code = OS_ObjectIdFinalizeNew(return_code, &conn_token, connsock_id);\n            }\n        }\n\n        OS_ObjectIdRelease(&sock_token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAccept code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Helper logging function to capture control flow and state information.\n * Appends logs to /tmp/logs/1939.txt. Uses only read access to the\n * structures passed in to avoid affecting logic.\n */\nstatic void OS_SocketAccept_LogState(const char *stage,\n                                     const void *sock_ptr,\n                                     const void *conn_ptr,\n                                     const void *sock_record_ptr,\n                                     const void *conn_record_ptr,\n                                     const void *sock_token_ptr,\n                                     const void *conn_token_ptr,\n                                     int32_t return_code,\n                                     unsigned long socket_domain,\n                                     unsigned long socket_type,\n                                     unsigned long stream_state)\n{\n    FILE *f = fopen(\"/tmp/logs/1939.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_SocketAccept] stage=%s return_code=%d\\n\", stage, (int)return_code);\n    fprintf(f, \"  sock_ptr=%p conn_ptr=%p\\n\", sock_ptr, conn_ptr);\n    fprintf(f, \"  sock_record_ptr=%p conn_record_ptr=%p\\n\", sock_record_ptr, conn_record_ptr);\n    fprintf(f, \"  sock_token_ptr=%p conn_token_ptr=%p\\n\", sock_token_ptr, conn_token_ptr);\n    fprintf(f, \"  socket_domain=%lu socket_type=%lu stream_state=0x%lx\\n\",\n            socket_domain, socket_type, stream_state);\n    fprintf(f, \"----------------------------------------\\n\");\n\n    fclose(f);\n}\n\nint32 OS_SocketAccept(osal_id_t sock_id, osal_id_t *connsock_id, OS_SockAddr_t *Addr, int32 timeout)\n{\n    OS_common_record_t *         sock_record;\n    OS_common_record_t *         conn_record;\n    OS_stream_internal_record_t *sock;\n    OS_stream_internal_record_t *conn;\n    OS_object_token_t            sock_token;\n    OS_object_token_t            conn_token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n    OS_CHECK_POINTER(connsock_id);\n\n    /*\n     * Note: setting \"connrecord\" here avoids a false warning\n     * from static analysis tools about the value being\n     * possibly used uninitialized (it cannot be, because\n     * return_code is checked, and return_code is only\n     * set to OS_SUCCESS when connrecord is also initialized)\n     */\n    conn_record = NULL;\n    sock_record = NULL;\n    sock        = NULL;\n    conn        = NULL;\n    memset(&sock_token, 0, sizeof(sock_token));\n    memset(&conn_token, 0, sizeof(conn_token));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &sock_token);\n    if (return_code == OS_SUCCESS)\n    {\n        sock_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, sock_token);\n        sock        = OS_OBJECT_TABLE_GET(OS_stream_table, sock_token);\n\n        /* Log state immediately after retrieving the socket */\n        OS_SocketAccept_LogState(\"after_get\",\n                                 (const void *)sock,\n                                 (const void *)conn,\n                                 (const void *)sock_record,\n                                 (const void *)conn_record,\n                                 (const void *)&sock_token,\n                                 (const void *)&conn_token,\n                                 return_code,\n                                 (unsigned long)sock->socket_domain,\n                                 (unsigned long)sock->socket_type,\n                                 (unsigned long)sock->stream_state);\n\n        if (sock->socket_type != OS_SocketType_STREAM)\n        {\n            /* Socket must be of the STREAM variety */\n            /* Log incorrect type */\n            OS_SocketAccept_LogState(\"incorrect_type\",\n                                     (const void *)sock,\n                                     (const void *)conn,\n                                     (const void *)sock_record,\n                                     (const void *)conn_record,\n                                     (const void *)&sock_token,\n                                     (const void *)&conn_token,\n                                     OS_ERR_INCORRECT_OBJ_TYPE,\n                                     (unsigned long)sock->socket_domain,\n                                     (unsigned long)sock->socket_type,\n                                     (unsigned long)sock->stream_state);\n\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((sock->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != OS_STREAM_STATE_BOUND)\n        {\n            /* Socket must be bound but not connected */\n            /* Log incorrect state */\n            OS_SocketAccept_LogState(\"incorrect_state\",\n                                     (const void *)sock,\n                                     (const void *)conn,\n                                     (const void *)sock_record,\n                                     (const void *)conn_record,\n                                     (const void *)&sock_token,\n                                     (const void *)&conn_token,\n                                     OS_ERR_INCORRECT_OBJ_STATE,\n                                     (unsigned long)sock->socket_domain,\n                                     (unsigned long)sock->socket_type,\n                                     (unsigned long)sock->stream_state);\n\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Now create a unique ID for the connection */\n            /* Log before allocation */\n            OS_SocketAccept_LogState(\"before_allocate_conn\",\n                                     (const void *)sock,\n                                     (const void *)conn,\n                                     (const void *)sock_record,\n                                     (const void *)conn_record,\n                                     (const void *)&sock_token,\n                                     (const void *)&conn_token,\n                                     return_code,\n                                     (unsigned long)sock->socket_domain,\n                                     (unsigned long)sock->socket_type,\n                                     (unsigned long)sock->stream_state);\n\n            return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &conn_token);\n            if (return_code == OS_SUCCESS)\n            {\n                conn_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, conn_token);\n                conn        = OS_OBJECT_TABLE_GET(OS_stream_table, conn_token);\n\n                /* Incr the refcount to record the fact that an operation is pending on this */\n                memset(conn, 0, sizeof(OS_stream_internal_record_t));\n\n                /* Log after conn memset (should be zeroed) */\n                OS_SocketAccept_LogState(\"after_memset_conn\",\n                                         (const void *)sock,\n                                         (const void *)conn,\n                                         (const void *)sock_record,\n                                         (const void *)conn_record,\n                                         (const void *)&sock_token,\n                                         (const void *)&conn_token,\n                                         return_code,\n                                         (unsigned long)0,\n                                         (unsigned long)0,\n                                         (unsigned long)0);\n\n                conn->socket_domain = sock->socket_domain;\n                conn->socket_type   = sock->socket_type;\n\n                /* Log after copying domain/type */\n                OS_SocketAccept_LogState(\"after_copy_domain_type\",\n                                         (const void *)sock,\n                                         (const void *)conn,\n                                         (const void *)sock_record,\n                                         (const void *)conn_record,\n                                         (const void *)&sock_token,\n                                         (const void *)&conn_token,\n                                         return_code,\n                                         (unsigned long)conn->socket_domain,\n                                         (unsigned long)conn->socket_type,\n                                         (unsigned long)conn->stream_state);\n\n                OS_SocketAddrInit_Impl(Addr, sock->socket_domain);\n\n                return_code = OS_SocketAccept_Impl(&sock_token, &conn_token, Addr, timeout);\n\n                /* Log the result of the platform accept implementation */\n                OS_SocketAccept_LogState(\"after_impl\",\n                                         (const void *)sock,\n                                         (const void *)conn,\n                                         (const void *)sock_record,\n                                         (const void *)conn_record,\n                                         (const void *)&sock_token,\n                                         (const void *)&conn_token,\n                                         return_code,\n                                         (unsigned long)sock->socket_domain,\n                                         (unsigned long)sock->socket_type,\n                                         (unsigned long)sock->stream_state);\n\n                if (return_code == OS_SUCCESS)\n                {\n                    /* Generate an entry name based on the remote address */\n                    OS_CreateSocketName(&conn_token, Addr, sock_record->name_entry);\n                    conn_record->name_entry = conn->stream_name;\n                    conn->stream_state |= OS_STREAM_STATE_CONNECTED;\n\n                    /* Log after successful connection */\n                    OS_SocketAccept_LogState(\"connected\",\n                                             (const void *)sock,\n                                             (const void *)conn,\n                                             (const void *)sock_record,\n                                             (const void *)conn_record,\n                                             (const void *)&sock_token,\n                                             (const void *)&conn_token,\n                                             return_code,\n                                             (unsigned long)conn->socket_domain,\n                                             (unsigned long)conn->socket_type,\n                                             (unsigned long)conn->stream_state);\n                }\n\n                return_code = OS_ObjectIdFinalizeNew(return_code, &conn_token, connsock_id);\n\n                /* Log after finalizing the new object id */\n                OS_SocketAccept_LogState(\"after_finalize\",\n                                         (const void *)sock,\n                                         (const void *)conn,\n                                         (const void *)sock_record,\n                                         (const void *)conn_record,\n                                         (const void *)&sock_token,\n                                         (const void *)&conn_token,\n                                         return_code,\n                                         (unsigned long)conn->socket_domain,\n                                         (unsigned long)conn->socket_type,\n                                         (unsigned long)conn->stream_state);\n            }\n        }\n\n        OS_ObjectIdRelease(&sock_token);\n    }\n\n    /* Final log before returning */\n    OS_SocketAccept_LogState(\"exit\",\n                             (const void *)sock,\n                             (const void *)conn,\n                             (const void *)sock_record,\n                             (const void *)conn_record,\n                             (const void *)&sock_token,\n                             (const void *)&conn_token,\n                             return_code,\n                             (unsigned long)(sock ? sock->socket_domain : 0),\n                             (unsigned long)(sock ? sock->socket_type : 0),\n                             (unsigned long)(sock ? sock->stream_state : 0));\n\n    return return_code;\n}\n"
}