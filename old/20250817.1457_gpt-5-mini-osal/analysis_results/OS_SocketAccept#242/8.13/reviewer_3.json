{
  "user_message": "An agent A claimed that the following OS_SocketAccept code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketAccept.\n```c\nint32 OS_SocketAccept(osal_id_t sock_id, osal_id_t *connsock_id, OS_SockAddr_t *Addr, int32 timeout)\n{\n    OS_common_record_t *         sock_record;\n    OS_common_record_t *         conn_record;\n    OS_stream_internal_record_t *sock;\n    OS_stream_internal_record_t *conn;\n    OS_object_token_t            sock_token;\n    OS_object_token_t            conn_token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n    OS_CHECK_POINTER(connsock_id);\n\n    /*\n     * Note: setting \"connrecord\" here avoids a false warning\n     * from static analysis tools about the value being\n     * possibly used uninitialized (it cannot be, because\n     * return_code is checked, and return_code is only\n     * set to OS_SUCCESS when connrecord is also initialized)\n     */\n    conn_record = NULL;\n    sock_record = NULL;\n    sock        = NULL;\n    conn        = NULL;\n    memset(&sock_token, 0, sizeof(sock_token));\n    memset(&conn_token, 0, sizeof(conn_token));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &sock_token);\n    if (return_code == OS_SUCCESS)\n    {\n        sock_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, sock_token);\n        sock        = OS_OBJECT_TABLE_GET(OS_stream_table, sock_token);\n\n        if (sock->socket_type != OS_SocketType_STREAM)\n        {\n            /* Socket must be of the STREAM variety */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((sock->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != OS_STREAM_STATE_BOUND)\n        {\n            /* Socket must be bound but not connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Now create a unique ID for the connection */\n            return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &conn_token);\n            if (return_code == OS_SUCCESS)\n            {\n                conn_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, conn_token);\n                conn        = OS_OBJECT_TABLE_GET(OS_stream_table, conn_token);\n\n                /* Incr the refcount to record the fact that an operation is pending on this */\n                memset(conn, 0, sizeof(OS_stream_internal_record_t));\n\n                conn->socket_domain = sock->socket_domain;\n                conn->socket_type   = sock->socket_type;\n\n                OS_SocketAddrInit_Impl(Addr, sock->socket_domain);\n\n                return_code = OS_SocketAccept_Impl(&sock_token, &conn_token, Addr, timeout);\n\n                if (return_code == OS_SUCCESS)\n                {\n                    /* Generate an entry name based on the remote address */\n                    OS_CreateSocketName(&conn_token, Addr, sock_record->name_entry);\n                    conn_record->name_entry = conn->stream_name;\n                    conn->stream_state |= OS_STREAM_STATE_CONNECTED;\n                }\n\n                return_code = OS_ObjectIdFinalizeNew(return_code, &conn_token, connsock_id);\n            }\n        }\n\n        OS_ObjectIdRelease(&sock_token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer variable 'sock' is declared as OS_stream_internal_record_t * but in this function it is only used for read-only access (sock->socket_type, sock->stream_state, sock->socket_domain). According to MISRA C 2023 Rule 8.13 it should be const-qualified (e.g. const OS_stream_internal_record_t *sock). Thus the assignment sock = OS_OBJECT_TABLE_GET(OS_stream_table, sock_token) violates Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_SocketAccept_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1939.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketAccept(osal_id_t sock_id, osal_id_t *connsock_id, OS_SockAddr_t *Addr, int32 timeout)\n{\n    OS_common_record_t *         sock_record;\n    OS_common_record_t *         conn_record;\n    OS_stream_internal_record_t *sock;\n    OS_stream_internal_record_t *conn;\n    OS_object_token_t            sock_token;\n    OS_object_token_t            conn_token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n    OS_CHECK_POINTER(connsock_id);\n\n    /* Log entry and parameters */\n    OS_SocketAccept_log(\"Enter OS_SocketAccept: sock_id=%ld, connsock_id=%p, Addr=%p, timeout=%ld\",\n                        (long)sock_id, (void *)connsock_id, (void *)Addr, (long)timeout);\n\n    /*\n     * Note: setting \"connrecord\" here avoids a false warning\n     * from static analysis tools about the value being\n     * possibly used uninitialized (it cannot be, because\n     * return_code is checked, and return_code is only\n     * set to OS_SUCCESS when connrecord is also initialized)\n     */\n    conn_record = NULL;\n    sock_record = NULL;\n    sock        = NULL;\n    conn        = NULL;\n    memset(&sock_token, 0, sizeof(sock_token));\n    memset(&conn_token, 0, sizeof(conn_token));\n\n    OS_SocketAccept_log(\"After init: sock_record=%p, sock=%p, conn_record=%p, conn=%p, sock_token_addr=%p, conn_token_addr=%p\",\n                        (void *)sock_record, (void *)sock, (void *)conn_record, (void *)conn, (void *)&sock_token, (void *)&conn_token);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &sock_token);\n    OS_SocketAccept_log(\"OS_ObjectIdGetById returned %ld for sock_id=%ld (sock_token_addr=%p)\", (long)return_code, (long)sock_id, (void *)&sock_token);\n    if (return_code == OS_SUCCESS)\n    {\n        sock_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, sock_token);\n        sock        = OS_OBJECT_TABLE_GET(OS_stream_table, sock_token);\n\n        OS_SocketAccept_log(\"After table lookup: sock_record=%p, sock=%p\", (void *)sock_record, (void *)sock);\n\n        if (sock != NULL)\n        {\n            /* Log the fields that are read-only in this function to capture the violation scenario */\n            OS_SocketAccept_log(\"sock fields: socket_type=%u, stream_state=0x%X, socket_domain=%u\",\n                                (unsigned int)sock->socket_type,\n                                (unsigned int)sock->stream_state,\n                                (unsigned int)sock->socket_domain);\n        }\n        else\n        {\n            OS_SocketAccept_log(\"sock is NULL, skipping field logs\");\n        }\n\n        if (sock->socket_type != OS_SocketType_STREAM)\n        {\n            /* Socket must be of the STREAM variety */\n            OS_SocketAccept_log(\"Socket type mismatch: expected %u (STREAM) got %u\",\n                                (unsigned int)OS_SocketType_STREAM,\n                                (unsigned int)sock->socket_type);\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((sock->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != OS_STREAM_STATE_BOUND)\n        {\n            /* Socket must be bound but not connected */\n            OS_SocketAccept_log(\"Socket state mismatch: stream_state=0x%X (required BOUND only)\", (unsigned int)sock->stream_state);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Now create a unique ID for the connection */\n            OS_SocketAccept_log(\"Preparing to allocate new conn token\");\n            return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &conn_token);\n            OS_SocketAccept_log(\"OS_ObjectIdAllocateNew returned %ld (conn_token_addr=%p)\", (long)return_code, (void *)&conn_token);\n            if (return_code == OS_SUCCESS)\n            {\n                conn_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, conn_token);\n                conn        = OS_OBJECT_TABLE_GET(OS_stream_table, conn_token);\n\n                OS_SocketAccept_log(\"After conn table lookup: conn_record=%p, conn=%p\", (void *)conn_record, (void *)conn);\n\n                /* Incr the refcount to record the fact that an operation is pending on this */\n                memset(conn, 0, sizeof(OS_stream_internal_record_t));\n\n                /* Copy read-only fields from sock into conn. Log values before/after to show the read-only usage of 'sock' */\n                OS_SocketAccept_log(\"Before copy: conn->socket_domain=%u, conn->socket_type=%u (about to copy from sock)\",\n                                    (unsigned int)conn->socket_domain, (unsigned int)conn->socket_type);\n\n                conn->socket_domain = sock->socket_domain;\n                conn->socket_type   = sock->socket_type;\n\n                OS_SocketAccept_log(\"After copy: conn->socket_domain=%u, conn->socket_type=%u (copied from sock: domain=%u type=%u)\",\n                                    (unsigned int)conn->socket_domain, (unsigned int)conn->socket_type,\n                                    (unsigned int)sock->socket_domain, (unsigned int)sock->socket_type);\n\n                OS_SocketAddrInit_Impl(Addr, sock->socket_domain);\n                OS_SocketAccept_log(\"Called OS_SocketAddrInit_Impl with domain=%u\", (unsigned int)sock->socket_domain);\n\n                return_code = OS_SocketAccept_Impl(&sock_token, &conn_token, Addr, timeout);\n                OS_SocketAccept_log(\"OS_SocketAccept_Impl returned %ld\", (long)return_code);\n\n                if (return_code == OS_SUCCESS)\n                {\n                    /* Generate an entry name based on the remote address */\n                    OS_CreateSocketName(&conn_token, Addr, sock_record->name_entry);\n                    conn_record->name_entry = conn->stream_name;\n                    conn->stream_state |= OS_STREAM_STATE_CONNECTED;\n\n                    OS_SocketAccept_log(\"Accept succeeded: conn->stream_state=0x%X, conn_record->name_entry=%p, conn->stream_name=%p\",\n                                        (unsigned int)conn->stream_state, (void *)conn_record->name_entry, (void *)conn->stream_name);\n                }\n\n                return_code = OS_ObjectIdFinalizeNew(return_code, &conn_token, connsock_id);\n                OS_SocketAccept_log(\"OS_ObjectIdFinalizeNew returned %ld, connsock_id_out=%p (value may be set)\", (long)return_code, (void *)connsock_id);\n            }\n        }\n\n        OS_ObjectIdRelease(&sock_token);\n        OS_SocketAccept_log(\"Released sock_token and about to return with return_code=%ld\", (long)return_code);\n    }\n    else\n    {\n        OS_SocketAccept_log(\"OS_ObjectIdGetById failed for sock_id=%ld with code=%ld\", (long)sock_id, (long)return_code);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_SocketAccept. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In OS_SocketAccept the local variable 'sock' is only read from (socket_type, stream_state, socket_domain) and never used to modify the pointed object; therefore it can and should be declared as a pointer-to-const (e.g. const OS_stream_internal_record_t *sock) to satisfy MISRA C 2023 Rule 8.13. Assigning the non-const result of OS_OBJECT_TABLE_GET to a const-qualified pointer is a valid conversion in C, so making 'sock' const would not require unsafe casts. Note that 'conn' cannot be made const because it is written to. The empty test log is unrelated to the static rule-check \u2014 it just means the test run didn't exercise the function \u2014 it does not invalidate the correctness of the rule violation reported by agent A."
}