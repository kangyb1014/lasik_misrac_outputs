{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer sock_record is declared as a non-const pointer (OS_common_record_t *sock_record) but is only used for read-only access in OS_SocketAccept (e.g. sock_record->name_entry is read when building the connection name). According to MISRA C 2023 Rule 8.13 the pointer should have been declared to point to a const-qualified type (const OS_common_record_t *sock_record) to reflect and enforce read-only usage.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAccept code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1939.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAccept as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAccept:\n```c\nint32 OS_SocketAccept(osal_id_t sock_id, osal_id_t *connsock_id, OS_SockAddr_t *Addr, int32 timeout)\n{\n    OS_common_record_t *         sock_record;\n    OS_common_record_t *         conn_record;\n    OS_stream_internal_record_t *sock;\n    OS_stream_internal_record_t *conn;\n    OS_object_token_t            sock_token;\n    OS_object_token_t            conn_token;\n    int32                        return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n    OS_CHECK_POINTER(connsock_id);\n\n    /*\n     * Note: setting \"connrecord\" here avoids a false warning\n     * from static analysis tools about the value being\n     * possibly used uninitialized (it cannot be, because\n     * return_code is checked, and return_code is only\n     * set to OS_SUCCESS when connrecord is also initialized)\n     */\n    conn_record = NULL;\n    sock_record = NULL;\n    sock        = NULL;\n    conn        = NULL;\n    memset(&sock_token, 0, sizeof(sock_token));\n    memset(&conn_token, 0, sizeof(conn_token));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &sock_token);\n    if (return_code == OS_SUCCESS)\n    {\n        sock_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, sock_token);\n        sock        = OS_OBJECT_TABLE_GET(OS_stream_table, sock_token);\n\n        if (sock->socket_type != OS_SocketType_STREAM)\n        {\n            /* Socket must be of the STREAM variety */\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((sock->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != OS_STREAM_STATE_BOUND)\n        {\n            /* Socket must be bound but not connected */\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Now create a unique ID for the connection */\n            return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &conn_token);\n            if (return_code == OS_SUCCESS)\n            {\n                conn_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, conn_token);\n                conn        = OS_OBJECT_TABLE_GET(OS_stream_table, conn_token);\n\n                /* Incr the refcount to record the fact that an operation is pending on this */\n                memset(conn, 0, sizeof(OS_stream_internal_record_t));\n\n                conn->socket_domain = sock->socket_domain;\n                conn->socket_type   = sock->socket_type;\n\n                OS_SocketAddrInit_Impl(Addr, sock->socket_domain);\n\n                return_code = OS_SocketAccept_Impl(&sock_token, &conn_token, Addr, timeout);\n\n                if (return_code == OS_SUCCESS)\n                {\n                    /* Generate an entry name based on the remote address */\n                    OS_CreateSocketName(&conn_token, Addr, sock_record->name_entry);\n                    conn_record->name_entry = conn->stream_name;\n                    conn->stream_state |= OS_STREAM_STATE_CONNECTED;\n                }\n\n                return_code = OS_ObjectIdFinalizeNew(return_code, &conn_token, connsock_id);\n            }\n        }\n\n        OS_ObjectIdRelease(&sock_token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAccept code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe logging helper: append a line to /tmp/logs/1939.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1939.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketAccept(osal_id_t sock_id, osal_id_t *connsock_id, OS_SockAddr_t *Addr, int32 timeout)\n{\n    OS_common_record_t *         sock_record;\n    OS_common_record_t *         conn_record;\n    OS_stream_internal_record_t *sock;\n    OS_stream_internal_record_t *conn;\n    OS_object_token_t            sock_token;\n    OS_object_token_t            conn_token;\n    int32                        return_code;\n\n    /* Log entry and parameters */\n    probe_log(\"OS_SocketAccept ENTRY: sock_id=%lu, connsock_id=%p, Addr=%p, timeout=%ld\",\n              (unsigned long)sock_id, (void *)connsock_id, (void *)Addr, (long)timeout);\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(Addr);\n    OS_CHECK_POINTER(connsock_id);\n\n    /*\n     * Note: setting \"connrecord\" here avoids a false warning\n     * from static analysis tools about the value being\n     * possibly used uninitialized (it cannot be, because\n     * return_code is checked, and return_code is only\n     * set to OS_SUCCESS when connrecord is also initialized)\n     */\n    conn_record = NULL;\n    sock_record = NULL;\n    sock        = NULL;\n    conn        = NULL;\n    memset(&sock_token, 0, sizeof(sock_token));\n    memset(&conn_token, 0, sizeof(conn_token));\n\n    probe_log(\"Initial state after init: conn_record=%p, sock_record=%p, sock=%p, conn=%p\",\n              (void *)conn_record, (void *)sock_record, (void *)sock, (void *)conn);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, LOCAL_OBJID_TYPE, sock_id, &sock_token);\n    probe_log(\"OS_ObjectIdGetById returned %ld for sock_id=%lu\", (long)return_code, (unsigned long)sock_id);\n\n    if (return_code == OS_SUCCESS)\n    {\n        sock_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, sock_token);\n        sock        = OS_OBJECT_TABLE_GET(OS_stream_table, sock_token);\n\n        /* Log the retrieved records and key fields */\n        probe_log(\"Retrieved sock_record=%p, sock=%p\", (void *)sock_record, (void *)sock);\n        if (sock != NULL)\n        {\n            probe_log(\"sock->socket_type=%ld, sock->socket_domain=%ld, sock->stream_state=0x%lx, sock->stream_name=%p\",\n                      (long)sock->socket_type, (long)sock->socket_domain, (unsigned long)sock->stream_state, (void *)sock->stream_name);\n        }\n        if (sock_record != NULL)\n        {\n            probe_log(\"sock_record->name_entry=%p\", (void *)sock_record->name_entry);\n        }\n\n        if (sock->socket_type != OS_SocketType_STREAM)\n        {\n            /* Socket must be of the STREAM variety */\n            probe_log(\"Decision: incorrect object type: socket_type=%ld\", (long)sock->socket_type);\n            return_code = OS_ERR_INCORRECT_OBJ_TYPE;\n        }\n        else if ((sock->stream_state & (OS_STREAM_STATE_BOUND | OS_STREAM_STATE_CONNECTED)) != OS_STREAM_STATE_BOUND)\n        {\n            /* Socket must be bound but not connected */\n            probe_log(\"Decision: incorrect object state: stream_state=0x%lx\", (unsigned long)sock->stream_state);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n        else\n        {\n            /* Now create a unique ID for the connection */\n            probe_log(\"Attempting to allocate new conn object id\");\n            return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, NULL, &conn_token);\n            probe_log(\"OS_ObjectIdAllocateNew returned %ld\", (long)return_code);\n            if (return_code == OS_SUCCESS)\n            {\n                conn_record = OS_OBJECT_TABLE_GET(OS_global_stream_table, conn_token);\n                conn        = OS_OBJECT_TABLE_GET(OS_stream_table, conn_token);\n\n                probe_log(\"Allocated conn_record=%p, conn=%p\", (void *)conn_record, (void *)conn);\n\n                /* Incr the refcount to record the fact that an operation is pending on this */\n                memset(conn, 0, sizeof(OS_stream_internal_record_t));\n\n                conn->socket_domain = sock->socket_domain;\n                conn->socket_type   = sock->socket_type;\n\n                probe_log(\"After conn init: conn->socket_domain=%ld, conn->socket_type=%ld\",\n                          (long)conn->socket_domain, (long)conn->socket_type);\n\n                OS_SocketAddrInit_Impl(Addr, sock->socket_domain);\n                probe_log(\"Called OS_SocketAddrInit_Impl with Addr=%p, domain=%ld\", (void *)Addr, (long)sock->socket_domain);\n\n                return_code = OS_SocketAccept_Impl(&sock_token, &conn_token, Addr, timeout);\n                probe_log(\"OS_SocketAccept_Impl returned %ld\", (long)return_code);\n\n                if (return_code == OS_SUCCESS)\n                {\n                    /* Generate an entry name based on the remote address */\n                    /* Log the read-only usage of sock_record->name_entry prior to call */\n                    probe_log(\"About to call OS_CreateSocketName: conn_token=%p, Addr=%p, sock_record->name_entry=%p\",\n                              (void *)&conn_token, (void *)Addr, (void *)(sock_record ? sock_record->name_entry : NULL));\n\n                    OS_CreateSocketName(&conn_token, Addr, sock_record->name_entry);\n\n                    probe_log(\"OS_CreateSocketName completed. sock_record->name_entry=%p, conn->stream_name=%p\",\n                              (void *)(sock_record ? sock_record->name_entry : NULL), (void *)conn->stream_name);\n\n                    conn_record->name_entry = conn->stream_name;\n                    probe_log(\"Assigned conn_record->name_entry=%p from conn->stream_name=%p\",\n                              (void *)conn_record->name_entry, (void *)conn->stream_name);\n\n                    conn->stream_state |= OS_STREAM_STATE_CONNECTED;\n                    probe_log(\"Set conn->stream_state to 0x%lx\", (unsigned long)conn->stream_state);\n                }\n\n                return_code = OS_ObjectIdFinalizeNew(return_code, &conn_token, connsock_id);\n                probe_log(\"OS_ObjectIdFinalizeNew returned %ld, connsock_id=%p (out)\", (long)return_code, (void *)connsock_id);\n            }\n        }\n\n        OS_ObjectIdRelease(&sock_token);\n        probe_log(\"Released sock_token and exiting critical section for sock_id=%lu\", (unsigned long)sock_id);\n    }\n\n    probe_log(\"OS_SocketAccept EXIT: return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}