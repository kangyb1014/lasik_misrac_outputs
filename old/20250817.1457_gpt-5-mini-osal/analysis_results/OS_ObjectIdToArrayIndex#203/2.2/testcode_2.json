{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to OS_ObjectIdToSerialNumber_Impl(object_id) is executed unconditionally but its result (obj_index) is not used in the path where the function returns an error. For example, if idtype != OS_OBJECT_TYPE_UNDEFINED and actual_type != idtype, the function sets return_code = OS_ERR_INVALID_ID and never uses obj_index. Similarly, if OS_GetMaxForObjectType(actual_type) == 0 the previously computed obj_index is unused. Because OS_ObjectIdToSerialNumber_Impl is a pure computation (no observable side effects), removing that call in these error paths would not change program behaviour, so the operation constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ObjectIdToArrayIndex code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1626.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ObjectIdToArrayIndex as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ObjectIdToArrayIndex:\n```c\nint32 OS_ObjectIdToArrayIndex(osal_objtype_t idtype, osal_id_t object_id, osal_index_t *ArrayIndex)\n{\n    uint32         max_id;\n    uint32         obj_index;\n    osal_objtype_t actual_type;\n    int32          return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(ArrayIndex);\n\n    obj_index   = OS_ObjectIdToSerialNumber_Impl(object_id);\n    actual_type = OS_ObjectIdToType_Impl(object_id);\n\n    /*\n     * If requested by the caller, enforce that the ID is of the correct type.\n     * If the caller passed OS_OBJECT_TYPE_UNDEFINED, then anything is allowed.\n     */\n    if (idtype != OS_OBJECT_TYPE_UNDEFINED && actual_type != idtype)\n    {\n        return_code = OS_ERR_INVALID_ID;\n    }\n    else\n    {\n        max_id = OS_GetMaxForObjectType(actual_type);\n        if (max_id == 0)\n        {\n            return_code = OS_ERR_INVALID_ID;\n        }\n        else\n        {\n            return_code = OS_SUCCESS;\n            *ArrayIndex = OSAL_INDEX_C(obj_index % max_id);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ObjectIdToArrayIndex code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logging helper - appends execution info to /tmp/logs/1626.txt */\nstatic void OS_ObjectIdToArrayIndex_LogState(const char *stage,\n                                             osal_objtype_t idtype,\n                                             osal_id_t object_id,\n                                             uint32 obj_index,\n                                             osal_objtype_t actual_type,\n                                             uint32 max_id,\n                                             int32 return_code,\n                                             int used_obj_index)\n{\n    FILE *f = fopen(\"/tmp/logs/1626.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print all values as unsigned long long where appropriate to avoid\n         * depending on specific typedefs/formatters in the build environment.\n         */\n        fprintf(f,\n                \"%s: idtype=%llu, object_id=%llu, obj_index=%llu, actual_type=%llu, max_id=%llu, return_code=%lld, used=%d\\n\",\n                stage,\n                (unsigned long long) idtype,\n                (unsigned long long) object_id,\n                (unsigned long long) obj_index,\n                (unsigned long long) actual_type,\n                (unsigned long long) max_id,\n                (long long) return_code,\n                used_obj_index);\n        fclose(f);\n    }\n}\n\nint32 OS_ObjectIdToArrayIndex(osal_objtype_t idtype, osal_id_t object_id, osal_index_t *ArrayIndex)\n{\n    uint32         max_id;\n    uint32         obj_index;\n    osal_objtype_t actual_type;\n    int32          return_code;\n\n    /* Check Parameters */\n    OS_CHECK_POINTER(ArrayIndex);\n\n    obj_index   = OS_ObjectIdToSerialNumber_Impl(object_id);\n    actual_type = OS_ObjectIdToType_Impl(object_id);\n\n    /* Log state immediately after computing serial number and type */\n    OS_ObjectIdToArrayIndex_LogState(\"after_id_and_type\",\n                                    idtype,\n                                    object_id,\n                                    obj_index,\n                                    actual_type,\n                                    0u,\n                                    0,\n                                    0);\n\n    /*\n     * If requested by the caller, enforce that the ID is of the correct type.\n     * If the caller passed OS_OBJECT_TYPE_UNDEFINED, then anything is allowed.\n     */\n    if (idtype != OS_OBJECT_TYPE_UNDEFINED && actual_type != idtype)\n    {\n        return_code = OS_ERR_INVALID_ID;\n\n        /* Log the mismatch branch and note that obj_index was not used here */\n        OS_ObjectIdToArrayIndex_LogState(\"idtype_mismatch\",\n                                        idtype,\n                                        object_id,\n                                        obj_index,\n                                        actual_type,\n                                        0u,\n                                        return_code,\n                                        0);\n    }\n    else\n    {\n        max_id = OS_GetMaxForObjectType(actual_type);\n\n        /* Log the retrieved max_id */\n        OS_ObjectIdToArrayIndex_LogState(\"after_max_retrieved\",\n                                        idtype,\n                                        object_id,\n                                        obj_index,\n                                        actual_type,\n                                        max_id,\n                                        0,\n                                        0);\n\n        if (max_id == 0)\n        {\n            return_code = OS_ERR_INVALID_ID;\n\n            /* Log the max==0 branch and note that obj_index was not used here */\n            OS_ObjectIdToArrayIndex_LogState(\"max_zero\",\n                                            idtype,\n                                            object_id,\n                                            obj_index,\n                                            actual_type,\n                                            max_id,\n                                            return_code,\n                                            0);\n        }\n        else\n        {\n            return_code = OS_SUCCESS;\n            *ArrayIndex = OSAL_INDEX_C(obj_index % max_id);\n\n            /* Log the success path and that obj_index was used to compute the index */\n            OS_ObjectIdToArrayIndex_LogState(\"success\",\n                                            idtype,\n                                            object_id,\n                                            obj_index,\n                                            actual_type,\n                                            max_id,\n                                            return_code,\n                                            1);\n        }\n    }\n\n    /* Final return logging for completeness */\n    OS_ObjectIdToArrayIndex_LogState(\"returning\",\n                                    idtype,\n                                    object_id,\n                                    obj_index,\n                                    actual_type,\n                                    (uint32) ( ( (idtype != OS_OBJECT_TYPE_UNDEFINED && actual_type != idtype) || (OS_GetMaxForObjectType(actual_type) == 0) ) ? 0u : OS_GetMaxForObjectType(actual_type) ),\n                                    return_code,\n                                    ((return_code == OS_SUCCESS) ? 1 : 0));\n\n    return return_code;\n}"
}