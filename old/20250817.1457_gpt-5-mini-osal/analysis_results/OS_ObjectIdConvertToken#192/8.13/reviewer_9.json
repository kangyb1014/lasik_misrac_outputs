{
  "user_message": "An agent A claimed that the following OS_ObjectIdConvertToken code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_ObjectIdConvertToken.\n```c\nint32 OS_ObjectIdConvertToken(OS_object_token_t *token)\n{\n    int32               return_code = OS_ERROR;\n    uint32              attempts    = 0;\n    OS_common_record_t *obj;\n    osal_id_t           expected_id;\n\n    obj         = OS_ObjectIdGlobalFromToken(token);\n    expected_id = OS_ObjectIdFromToken(token);\n\n    /*\n     * Upon entry the ID from the token must be valid\n     */\n    if (!OS_ObjectIdIsValid(expected_id))\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /*\n     * If lock mode is RESERVED, then the ID in the record should\n     * already be set to OS_OBJECT_ID_RESERVED.  This is for very\n     * specific use cases where a secondary task needs to access an\n     * object during its creation/deletion.\n     *\n     * For all typical modes the ID in the record should be equal\n     * to the token ID.\n     */\n    if (token->lock_mode == OS_LOCK_MODE_RESERVED)\n    {\n        expected_id = OS_OBJECT_ID_RESERVED;\n    }\n\n    while (true)\n    {\n        /* Validate the integrity of the ID.  As the \"active_id\" is a single\n         * integer, we can do this check regardless of whether global is locked or not. */\n        if (OS_ObjectIdEqual(obj->active_id, expected_id))\n        {\n            /*\n             * Got an ID match...\n             */\n            if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE)\n            {\n                /*\n                 * For EXCLUSIVE mode, overwrite the ID to be RESERVED now -- this\n                 * makes any future ID checks or lock attempts in other tasks fail to match.\n                 */\n                if (!OS_ObjectIdEqual(expected_id, OS_OBJECT_ID_RESERVED))\n                {\n                    expected_id    = OS_OBJECT_ID_RESERVED;\n                    obj->active_id = expected_id;\n                }\n\n                /*\n                 * Also confirm that reference count is zero\n                 * If not zero, will need to wait for other tasks to release.\n                 */\n                if (obj->refcount == 0)\n                {\n                    return_code = OS_SUCCESS;\n                    break;\n                }\n            }\n            else\n            {\n                /*\n                 * Nothing else to test for this lock type\n                 */\n                return_code = OS_SUCCESS;\n                break;\n            }\n        }\n        else if (token->lock_mode == OS_LOCK_MODE_NONE || !OS_ObjectIdEqual(obj->active_id, OS_OBJECT_ID_RESERVED))\n        {\n            /* Not an ID match and not RESERVED - fail out */\n            return_code = OS_ERR_INVALID_ID;\n            break;\n        }\n\n        /*\n         * If we get this far, it means there is contention for access to the object.\n         *  a) we want to some type of lock but the ID is currently RESERVED\n         *  b) the refcount is too high - need to wait for release\n         *\n         * In this case we will UNLOCK the global object again so that the holder\n         * can relinquish it.  We'll try again a few times before giving up hope.\n         */\n        ++attempts;\n        if (attempts >= 5)\n        {\n            return_code = OS_ERR_OBJECT_IN_USE;\n            break;\n        }\n\n        /*\n         * Call the impl layer to wait for some sort of change to occur.\n         */\n        OS_WaitForStateChange(token, attempts);\n    }\n\n    /*\n     * Determine if the global table needs to be unlocked now.\n     *\n     * If lock_mode is OS_LOCK_MODE_NONE, then the table was never locked\n     * to begin with, and therefore never needs to be unlocked.\n     */\n    if (token->lock_mode != OS_LOCK_MODE_NONE)\n    {\n        if (return_code == OS_SUCCESS)\n        {\n            /* always increment the refcount, which means a task is actively\n             * using or modifying this record. */\n            ++obj->refcount;\n\n            /*\n             * On a successful operation, the global is unlocked if it is\n             * a REFCOUNT or EXCLUSIVE lock.  Note for EXCLUSIVE, because the ID\n             * was overwritten to OS_OBJECT_ID_RESERVED, other tasks will not be\n             * able to access the object because the ID will not match, so the\n             * table can be unlocked while the remainder of the create/delete process\n             * continues.\n             *\n             * For OS_LOCK_MODE_GLOBAL the global lock should be maintained and\n             * returned to the caller.\n             */\n            if (token->lock_mode == OS_LOCK_MODE_REFCOUNT || token->lock_mode == OS_LOCK_MODE_EXCLUSIVE)\n            {\n                OS_Unlock_Global(token);\n            }\n        }\n        else if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE && OS_ObjectIdEqual(expected_id, OS_OBJECT_ID_RESERVED))\n        {\n            /*\n             * On failure, if the active_id was overwritten, then set\n             * it back to the original value which is in the token.\n             * (note it had to match initially before overwrite)\n             */\n            obj->active_id = OS_ObjectIdFromToken(token);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function parameter 'OS_object_token_t *token' is only read in this fragment (token->lock_mode is inspected) and nowhere in the function is any field of the token modified. Therefore the pointer could/should be declared as pointing to a const-qualified type (const OS_object_token_t *token). By not declaring it const, the code violates MISRA C 2023 Rule 8.13. (Note: if any of the callees such as OS_WaitForStateChange or OS_Unlock_Global modify the token or require a non-const pointer, then const cannot be used and there is no violation.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_ObjectIdConvertToken_log(const char *stage, OS_object_token_t *token, OS_common_record_t *obj,\n                                        uint32 attempts, int32 return_code, osal_id_t expected_id)\n{\n    FILE *f = fopen(\"/tmp/logs/1539.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Print pointer values and key fields. Use casts to integer types for portability. */\n        fprintf(f, \"Stage=%s token=%p lock_mode=%d token_id=%llu obj=%p obj_active_id=%llu obj_refcount=%u attempts=%u return_code=%d expected_id=%llu\\n\",\n                stage,\n                (void *)token,\n                (int)token->lock_mode,\n                (unsigned long long)OS_ObjectIdFromToken(token),\n                (void *)obj,\n                (unsigned long long)obj->active_id,\n                (unsigned int)obj->refcount,\n                (unsigned int)attempts,\n                (int)return_code,\n                (unsigned long long)expected_id);\n        fclose(f);\n    }\n}\n\nint32 OS_ObjectIdConvertToken(OS_object_token_t *token)\n{\n    int32               return_code = OS_ERROR;\n    uint32              attempts    = 0;\n    OS_common_record_t *obj;\n    osal_id_t           expected_id;\n\n    obj         = OS_ObjectIdGlobalFromToken(token);\n    expected_id = OS_ObjectIdFromToken(token);\n\n    /* Log initial entry state */\n    OS_ObjectIdConvertToken_log(\"entry\", token, obj, attempts, return_code, expected_id);\n\n    /*\n     * Upon entry the ID from the token must be valid\n     */\n    if (!OS_ObjectIdIsValid(expected_id))\n    {\n        OS_ObjectIdConvertToken_log(\"invalid_id_on_entry\", token, obj, attempts, OS_ERR_INCORRECT_OBJ_STATE, expected_id);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /*\n     * If lock mode is RESERVED, then the ID in the record should\n     * already be set to OS_OBJECT_ID_RESERVED.  This is for very\n     * specific use cases where a secondary task needs to access an\n     * object during its creation/deletion.\n     *\n     * For all typical modes the ID in the record should be equal\n     * to the token ID.\n     */\n    if (token->lock_mode == OS_LOCK_MODE_RESERVED)\n    {\n        expected_id = OS_OBJECT_ID_RESERVED;\n        OS_ObjectIdConvertToken_log(\"reserved_mode_overwrite_expected\", token, obj, attempts, return_code, expected_id);\n    }\n\n    while (true)\n    {\n        /* Log state at start of loop iteration */\n        OS_ObjectIdConvertToken_log(\"loop_start\", token, obj, attempts, return_code, expected_id);\n\n        /* Validate the integrity of the ID.  As the \"active_id\" is a single\n         * integer, we can do this check regardless of whether global is locked or not. */\n        if (OS_ObjectIdEqual(obj->active_id, expected_id))\n        {\n            /*\n             * Got an ID match...\n             */\n            OS_ObjectIdConvertToken_log(\"id_match\", token, obj, attempts, return_code, expected_id);\n\n            if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE)\n            {\n                /*\n                 * For EXCLUSIVE mode, overwrite the ID to be RESERVED now -- this\n                 * makes any future ID checks or lock attempts in other tasks fail to match.\n                 */\n                if (!OS_ObjectIdEqual(expected_id, OS_OBJECT_ID_RESERVED))\n                {\n                    expected_id    = OS_OBJECT_ID_RESERVED;\n                    obj->active_id = expected_id;\n                    OS_ObjectIdConvertToken_log(\"exclusive_overwrite_reserved\", token, obj, attempts, return_code, expected_id);\n                }\n\n                /*\n                 * Also confirm that reference count is zero\n                 * If not zero, will need to wait for other tasks to release.\n                 */\n                if (obj->refcount == 0)\n                {\n                    return_code = OS_SUCCESS;\n                    OS_ObjectIdConvertToken_log(\"exclusive_refcount_zero_success\", token, obj, attempts, return_code, expected_id);\n                    break;\n                }\n                else\n                {\n                    OS_ObjectIdConvertToken_log(\"exclusive_refcount_nonzero_wait\", token, obj, attempts, return_code, expected_id);\n                }\n            }\n            else\n            {\n                /*\n                 * Nothing else to test for this lock type\n                 */\n                return_code = OS_SUCCESS;\n                OS_ObjectIdConvertToken_log(\"nonexclusive_success\", token, obj, attempts, return_code, expected_id);\n                break;\n            }\n        }\n        else if (token->lock_mode == OS_LOCK_MODE_NONE || !OS_ObjectIdEqual(obj->active_id, OS_OBJECT_ID_RESERVED))\n        {\n            /* Not an ID match and not RESERVED - fail out */\n            return_code = OS_ERR_INVALID_ID;\n            OS_ObjectIdConvertToken_log(\"invalid_id_no_reserved\", token, obj, attempts, return_code, expected_id);\n            break;\n        }\n\n        /*\n         * If we get this far, it means there is contention for access to the object.\n         *  a) we want to some type of lock but the ID is currently RESERVED\n         *  b) the refcount is too high - need to wait for release\n         *\n         * In this case we will UNLOCK the global object again so that the holder\n         * can relinquish it.  We'll try again a few times before giving up hope.\n         */\n        ++attempts;\n        OS_ObjectIdConvertToken_log(\"contention_increment_attempts\", token, obj, attempts, return_code, expected_id);\n\n        if (attempts >= 5)\n        {\n            return_code = OS_ERR_OBJECT_IN_USE;\n            OS_ObjectIdConvertToken_log(\"attempts_exceeded\", token, obj, attempts, return_code, expected_id);\n            break;\n        }\n\n        /*\n         * Call the impl layer to wait for some sort of change to occur.\n         */\n        OS_ObjectIdConvertToken_log(\"before_wait_for_state_change\", token, obj, attempts, return_code, expected_id);\n        OS_WaitForStateChange(token, attempts);\n        OS_ObjectIdConvertToken_log(\"after_wait_for_state_change\", token, obj, attempts, return_code, expected_id);\n    }\n\n    /*\n     * Determine if the global table needs to be unlocked now.\n     *\n     * If lock_mode is OS_LOCK_MODE_NONE, then the table was never locked\n     * to begin with, and therefore never needs to be unlocked.\n     */\n    if (token->lock_mode != OS_LOCK_MODE_NONE)\n    {\n        if (return_code == OS_SUCCESS)\n        {\n            /* always increment the refcount, which means a task is actively\n             * using or modifying this record. */\n            ++obj->refcount;\n            OS_ObjectIdConvertToken_log(\"success_increment_refcount\", token, obj, attempts, return_code, expected_id);\n\n            /*\n             * On a successful operation, the global is unlocked if it is\n             * a REFCOUNT or EXCLUSIVE lock.  Note for EXCLUSIVE, because the ID\n             * was overwritten to OS_OBJECT_ID_RESERVED, other tasks will not be\n             * able to access the object because the ID will not match, so the\n             * table can be unlocked while the remainder of the create/delete process\n             * continues.\n             *\n             * For OS_LOCK_MODE_GLOBAL the global lock should be maintained and\n             * returned to the caller.\n             */\n            if (token->lock_mode == OS_LOCK_MODE_REFCOUNT || token->lock_mode == OS_LOCK_MODE_EXCLUSIVE)\n            {\n                OS_ObjectIdConvertToken_log(\"about_to_unlock_global\", token, obj, attempts, return_code, expected_id);\n                OS_Unlock_Global(token);\n                OS_ObjectIdConvertToken_log(\"after_unlock_global\", token, obj, attempts, return_code, expected_id);\n            }\n        }\n        else if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE && OS_ObjectIdEqual(expected_id, OS_OBJECT_ID_RESERVED))\n        {\n            /*\n             * On failure, if the active_id was overwritten, then set\n             * it back to the original value which is in the token.\n             * (note it had to match initially before overwrite)\n             */\n            obj->active_id = OS_ObjectIdFromToken(token);\n            OS_ObjectIdConvertToken_log(\"restore_active_id_on_failure\", token, obj, attempts, return_code, expected_id);\n        }\n    }\n\n    OS_ObjectIdConvertToken_log(\"exit\", token, obj, attempts, return_code, expected_id);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_ObjectIdConvertToken. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent\u2019s observation (that OS_object_token_t *token is only read within this function body) is correct, but that alone does not prove a MISRA 8.13 violation. MISRA 8.13 requires pointers to be const-qualified whenever possible across their use; whether it is \u201cpossible\u201d here depends on the prototypes of the callees and any other uses of token. In this function token is never written to, however token is passed to other functions (OS_ObjectIdGlobalFromToken, OS_ObjectIdFromToken, OS_WaitForStateChange, OS_Unlock_Global). If any of those functions require a non-const pointer (their declarations do not accept const OS_object_token_t *), then this function cannot change its parameter to const without changing those prototypes/callers and so there is no violation. The agent acknowledged that caveat but did not show the callee prototypes to prove they accept a const pointer. Therefore the report as stated is not proven correct. Recommendation: inspect the prototypes of the called functions \u2014 if they all accept const OS_object_token_t * (and no other use of this function requires a modifiable token), then change the parameter to const to satisfy MISRA 8.13; otherwise no change is possible and there is no violation."
}