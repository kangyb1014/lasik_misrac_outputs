{
  "user_message": "An agent A claimed that the following OS_ObjectIdConvertToken code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_ObjectIdConvertToken.\n```c\nint32 OS_ObjectIdConvertToken(OS_object_token_t *token)\n{\n    int32               return_code = OS_ERROR;\n    uint32              attempts    = 0;\n    OS_common_record_t *obj;\n    osal_id_t           expected_id;\n\n    obj         = OS_ObjectIdGlobalFromToken(token);\n    expected_id = OS_ObjectIdFromToken(token);\n\n    /*\n     * Upon entry the ID from the token must be valid\n     */\n    if (!OS_ObjectIdIsValid(expected_id))\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /*\n     * If lock mode is RESERVED, then the ID in the record should\n     * already be set to OS_OBJECT_ID_RESERVED.  This is for very\n     * specific use cases where a secondary task needs to access an\n     * object during its creation/deletion.\n     *\n     * For all typical modes the ID in the record should be equal\n     * to the token ID.\n     */\n    if (token->lock_mode == OS_LOCK_MODE_RESERVED)\n    {\n        expected_id = OS_OBJECT_ID_RESERVED;\n    }\n\n    while (true)\n    {\n        /* Validate the integrity of the ID.  As the \"active_id\" is a single\n         * integer, we can do this check regardless of whether global is locked or not. */\n        if (OS_ObjectIdEqual(obj->active_id, expected_id))\n        {\n            /*\n             * Got an ID match...\n             */\n            if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE)\n            {\n                /*\n                 * For EXCLUSIVE mode, overwrite the ID to be RESERVED now -- this\n                 * makes any future ID checks or lock attempts in other tasks fail to match.\n                 */\n                if (!OS_ObjectIdEqual(expected_id, OS_OBJECT_ID_RESERVED))\n                {\n                    expected_id    = OS_OBJECT_ID_RESERVED;\n                    obj->active_id = expected_id;\n                }\n\n                /*\n                 * Also confirm that reference count is zero\n                 * If not zero, will need to wait for other tasks to release.\n                 */\n                if (obj->refcount == 0)\n                {\n                    return_code = OS_SUCCESS;\n                    break;\n                }\n            }\n            else\n            {\n                /*\n                 * Nothing else to test for this lock type\n                 */\n                return_code = OS_SUCCESS;\n                break;\n            }\n        }\n        else if (token->lock_mode == OS_LOCK_MODE_NONE || !OS_ObjectIdEqual(obj->active_id, OS_OBJECT_ID_RESERVED))\n        {\n            /* Not an ID match and not RESERVED - fail out */\n            return_code = OS_ERR_INVALID_ID;\n            break;\n        }\n\n        /*\n         * If we get this far, it means there is contention for access to the object.\n         *  a) we want to some type of lock but the ID is currently RESERVED\n         *  b) the refcount is too high - need to wait for release\n         *\n         * In this case we will UNLOCK the global object again so that the holder\n         * can relinquish it.  We'll try again a few times before giving up hope.\n         */\n        ++attempts;\n        if (attempts >= 5)\n        {\n            return_code = OS_ERR_OBJECT_IN_USE;\n            break;\n        }\n\n        /*\n         * Call the impl layer to wait for some sort of change to occur.\n         */\n        OS_WaitForStateChange(token, attempts);\n    }\n\n    /*\n     * Determine if the global table needs to be unlocked now.\n     *\n     * If lock_mode is OS_LOCK_MODE_NONE, then the table was never locked\n     * to begin with, and therefore never needs to be unlocked.\n     */\n    if (token->lock_mode != OS_LOCK_MODE_NONE)\n    {\n        if (return_code == OS_SUCCESS)\n        {\n            /* always increment the refcount, which means a task is actively\n             * using or modifying this record. */\n            ++obj->refcount;\n\n            /*\n             * On a successful operation, the global is unlocked if it is\n             * a REFCOUNT or EXCLUSIVE lock.  Note for EXCLUSIVE, because the ID\n             * was overwritten to OS_OBJECT_ID_RESERVED, other tasks will not be\n             * able to access the object because the ID will not match, so the\n             * table can be unlocked while the remainder of the create/delete process\n             * continues.\n             *\n             * For OS_LOCK_MODE_GLOBAL the global lock should be maintained and\n             * returned to the caller.\n             */\n            if (token->lock_mode == OS_LOCK_MODE_REFCOUNT || token->lock_mode == OS_LOCK_MODE_EXCLUSIVE)\n            {\n                OS_Unlock_Global(token);\n            }\n        }\n        else if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE && OS_ObjectIdEqual(expected_id, OS_OBJECT_ID_RESERVED))\n        {\n            /*\n             * On failure, if the active_id was overwritten, then set\n             * it back to the original value which is in the token.\n             * (note it had to match initially before overwrite)\n             */\n            obj->active_id = OS_ObjectIdFromToken(token);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function parameter 'token' is declared as OS_object_token_t *token but is only read (token->lock_mode and OS_ObjectIdFromToken/OS_ObjectIdGlobalFromToken are used); the conditional 'else if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE && OS_ObjectIdEqual(expected_id, OS_OBJECT_ID_RESERVED))' therefore operates on a pointer that could be const-qualified. The parameter should be declared const OS_object_token_t *token (and related callees adjusted if necessary).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_ObjectIdConvertToken_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1539.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint32 OS_ObjectIdConvertToken(OS_object_token_t *token)\n{\n    int32               return_code = OS_ERROR;\n    uint32              attempts    = 0;\n    OS_common_record_t *obj;\n    osal_id_t           expected_id;\n\n    OS_ObjectIdConvertToken_Log(\"ENTRY: OS_ObjectIdConvertToken token=%p\", (void *)token);\n\n    obj         = OS_ObjectIdGlobalFromToken(token);\n    expected_id = OS_ObjectIdFromToken(token);\n\n    OS_ObjectIdConvertToken_Log(\"After ID extraction: obj=%p, expected_id=%u\", (void *)obj, (unsigned)expected_id);\n\n    /*\n     * Upon entry the ID from the token must be valid\n     */\n    if (!OS_ObjectIdIsValid(expected_id))\n    {\n        OS_ObjectIdConvertToken_Log(\"Invalid expected_id=%u - returning OS_ERR_INCORRECT_OBJ_STATE\", (unsigned)expected_id);\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /*\n     * If lock mode is RESERVED, then the ID in the record should\n     * already be set to OS_OBJECT_ID_RESERVED.  This is for very\n     * specific use cases where a secondary task needs to access an\n     * object during its creation/deletion.\n     *\n     * For all typical modes the ID in the record should be equal\n     * to the token ID.\n     */\n    if (token->lock_mode == OS_LOCK_MODE_RESERVED)\n    {\n        OS_ObjectIdConvertToken_Log(\"Token lock mode RESERVED - overriding expected_id (was %u) to OS_OBJECT_ID_RESERVED\", (unsigned)expected_id);\n        expected_id = OS_OBJECT_ID_RESERVED;\n    }\n\n    while (true)\n    {\n        /* Validate the integrity of the ID.  As the \"active_id\" is a single\n         * integer, we can do this check regardless of whether global is locked or not. */\n        OS_ObjectIdConvertToken_Log(\"Loop start: attempts=%u, obj=%p, obj->active_id=%u, expected_id=%u, obj->refcount=%u, token->lock_mode=%d\",\n                                   (unsigned)attempts, (void *)obj, (unsigned)obj->active_id, (unsigned)expected_id, (unsigned)obj->refcount, (int)token->lock_mode);\n\n        if (OS_ObjectIdEqual(obj->active_id, expected_id))\n        {\n            /*\n             * Got an ID match...\n             */\n            OS_ObjectIdConvertToken_Log(\"ID match: obj->active_id=%u equals expected_id=%u\", (unsigned)obj->active_id, (unsigned)expected_id);\n\n            if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE)\n            {\n                OS_ObjectIdConvertToken_Log(\"Token lock mode EXCLUSIVE - checking for overwrite conditions\");\n\n                /*\n                 * For EXCLUSIVE mode, overwrite the ID to be RESERVED now -- this\n                 * makes any future ID checks or lock attempts in other tasks fail to match.\n                 */\n                if (!OS_ObjectIdEqual(expected_id, OS_OBJECT_ID_RESERVED))\n                {\n                    OS_ObjectIdConvertToken_Log(\"Overwriting active_id: previous expected_id=%u -> OS_OBJECT_ID_RESERVED\", (unsigned)expected_id);\n                    expected_id    = OS_OBJECT_ID_RESERVED;\n                    obj->active_id = expected_id;\n                    OS_ObjectIdConvertToken_Log(\"active_id overwritten: obj->active_id=%u\", (unsigned)obj->active_id);\n                }\n\n                /*\n                 * Also confirm that reference count is zero\n                 * If not zero, will need to wait for other tasks to release.\n                 */\n                if (obj->refcount == 0)\n                {\n                    OS_ObjectIdConvertToken_Log(\"refcount==0 - success for EXCLUSIVE\");\n                    return_code = OS_SUCCESS;\n                    break;\n                }\n                else\n                {\n                    OS_ObjectIdConvertToken_Log(\"refcount=%u - need to wait for release\", (unsigned)obj->refcount);\n                }\n            }\n            else\n            {\n                /*\n                 * Nothing else to test for this lock type\n                 */\n                OS_ObjectIdConvertToken_Log(\"Lock mode not EXCLUSIVE - success\");\n                return_code = OS_SUCCESS;\n                break;\n            }\n        }\n        else if (token->lock_mode == OS_LOCK_MODE_NONE || !OS_ObjectIdEqual(obj->active_id, OS_OBJECT_ID_RESERVED))\n        {\n            /* Not an ID match and not RESERVED - fail out */\n            OS_ObjectIdConvertToken_Log(\"ID mismatch and not reserved - obj->active_id=%u, expected_id=%u, token->lock_mode=%d -> returning OS_ERR_INVALID_ID\",\n                                       (unsigned)obj->active_id, (unsigned)expected_id, (int)token->lock_mode);\n            return_code = OS_ERR_INVALID_ID;\n            break;\n        }\n\n        /*\n         * If we get this far, it means there is contention for access to the object.\n         *  a) we want to some type of lock but the ID is currently RESERVED\n         *  b) the refcount is too high - need to wait for release\n         *\n         * In this case we will UNLOCK the global object again so that the holder\n         * can relinquish it.  We'll try again a few times before giving up hope.\n         */\n        ++attempts;\n        OS_ObjectIdConvertToken_Log(\"Contention detected - incremented attempts to %u\", (unsigned)attempts);\n        if (attempts >= 5)\n        {\n            OS_ObjectIdConvertToken_Log(\"Attempts >= 5 - returning OS_ERR_OBJECT_IN_USE\");\n            return_code = OS_ERR_OBJECT_IN_USE;\n            break;\n        }\n\n        /*\n         * Call the impl layer to wait for some sort of change to occur.\n         */\n        OS_ObjectIdConvertToken_Log(\"Calling OS_WaitForStateChange(token=%p, attempts=%u)\", (void *)token, (unsigned)attempts);\n        OS_WaitForStateChange(token, attempts);\n        OS_ObjectIdConvertToken_Log(\"Returned from OS_WaitForStateChange(token=%p)\", (void *)token);\n    }\n\n    /*\n     * Determine if the global table needs to be unlocked now.\n     *\n     * If lock_mode is OS_LOCK_MODE_NONE, then the table was never locked\n     * to begin with, and therefore never needs to be unlocked.\n     */\n    OS_ObjectIdConvertToken_Log(\"Post-loop: return_code=%d, token->lock_mode=%d\", (int)return_code, (int)token->lock_mode);\n\n    if (token->lock_mode != OS_LOCK_MODE_NONE)\n    {\n        if (return_code == OS_SUCCESS)\n        {\n            /* always increment the refcount, which means a task is actively\n             * using or modifying this record. */\n            ++obj->refcount;\n            OS_ObjectIdConvertToken_Log(\"Incremented refcount: now %u\", (unsigned)obj->refcount);\n\n            /*\n             * On a successful operation, the global is unlocked if it is\n             * a REFCOUNT or EXCLUSIVE lock.  Note for EXCLUSIVE, because the ID\n             * was overwritten to OS_OBJECT_ID_RESERVED, other tasks will not be\n             * able to access the object because the ID will not match, so the\n             * table can be unlocked while the remainder of the create/delete process\n             * continues.\n             *\n             * For OS_LOCK_MODE_GLOBAL the global lock should be maintained and\n             * returned to the caller.\n             */\n            if (token->lock_mode == OS_LOCK_MODE_REFCOUNT || token->lock_mode == OS_LOCK_MODE_EXCLUSIVE)\n            {\n                OS_ObjectIdConvertToken_Log(\"Calling OS_Unlock_Global(token=%p) for lock_mode=%d\", (void *)token, (int)token->lock_mode);\n                OS_Unlock_Global(token);\n            }\n        }\n        else if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE && OS_ObjectIdEqual(expected_id, OS_OBJECT_ID_RESERVED))\n        {\n            /*\n             * On failure, if the active_id was overwritten, then set\n             * it back to the original value which is in the token.\n             * (note it had to match initially before overwrite)\n             */\n            osal_id_t original = OS_ObjectIdFromToken(token);\n            OS_ObjectIdConvertToken_Log(\"Failure path for EXCLUSIVE: restoring obj->active_id from %u to original %u\", (unsigned)obj->active_id, (unsigned)original);\n            obj->active_id = original;\n        }\n    }\n\n    OS_ObjectIdConvertToken_Log(\"EXIT: OS_ObjectIdConvertToken returning %d\", (int)return_code);\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_ObjectIdConvertToken. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A\u2019s report is essentially correct: within OS_ObjectIdConvertToken the parameter token is only read (token->lock_mode is inspected and accessor functions are called), and there are no writes to *token in this function. Under MISRA C:2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so the parameter ought to be declared const OS_object_token_t *token if that is feasible.\n\nCaveat: whether this can actually be changed depends on the signatures of the functions called with token (OS_ObjectIdGlobalFromToken, OS_ObjectIdFromToken, OS_WaitForStateChange, OS_Unlock_Global). If any of those take a non-const OS_object_token_t * and/or legitimately modify the token, then changing this prototype alone would not be possible without changing those callees as well. If the callees do not modify the token (or their prototypes can be made to accept const), the function should be updated to take a const pointer to satisfy Rule 8.13. The absence of test log output does not affect the static observation that token is only read in this function."
}