{
  "user_message": "An agent A claimed that the following OS_ObjectIdConvertToken code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_ObjectIdConvertToken.\n```c\nint32 OS_ObjectIdConvertToken(OS_object_token_t *token)\n{\n    int32               return_code = OS_ERROR;\n    uint32              attempts    = 0;\n    OS_common_record_t *obj;\n    osal_id_t           expected_id;\n\n    obj         = OS_ObjectIdGlobalFromToken(token);\n    expected_id = OS_ObjectIdFromToken(token);\n\n    /*\n     * Upon entry the ID from the token must be valid\n     */\n    if (!OS_ObjectIdIsValid(expected_id))\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /*\n     * If lock mode is RESERVED, then the ID in the record should\n     * already be set to OS_OBJECT_ID_RESERVED.  This is for very\n     * specific use cases where a secondary task needs to access an\n     * object during its creation/deletion.\n     *\n     * For all typical modes the ID in the record should be equal\n     * to the token ID.\n     */\n    if (token->lock_mode == OS_LOCK_MODE_RESERVED)\n    {\n        expected_id = OS_OBJECT_ID_RESERVED;\n    }\n\n    while (true)\n    {\n        /* Validate the integrity of the ID.  As the \"active_id\" is a single\n         * integer, we can do this check regardless of whether global is locked or not. */\n        if (OS_ObjectIdEqual(obj->active_id, expected_id))\n        {\n            /*\n             * Got an ID match...\n             */\n            if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE)\n            {\n                /*\n                 * For EXCLUSIVE mode, overwrite the ID to be RESERVED now -- this\n                 * makes any future ID checks or lock attempts in other tasks fail to match.\n                 */\n                if (!OS_ObjectIdEqual(expected_id, OS_OBJECT_ID_RESERVED))\n                {\n                    expected_id    = OS_OBJECT_ID_RESERVED;\n                    obj->active_id = expected_id;\n                }\n\n                /*\n                 * Also confirm that reference count is zero\n                 * If not zero, will need to wait for other tasks to release.\n                 */\n                if (obj->refcount == 0)\n                {\n                    return_code = OS_SUCCESS;\n                    break;\n                }\n            }\n            else\n            {\n                /*\n                 * Nothing else to test for this lock type\n                 */\n                return_code = OS_SUCCESS;\n                break;\n            }\n        }\n        else if (token->lock_mode == OS_LOCK_MODE_NONE || !OS_ObjectIdEqual(obj->active_id, OS_OBJECT_ID_RESERVED))\n        {\n            /* Not an ID match and not RESERVED - fail out */\n            return_code = OS_ERR_INVALID_ID;\n            break;\n        }\n\n        /*\n         * If we get this far, it means there is contention for access to the object.\n         *  a) we want to some type of lock but the ID is currently RESERVED\n         *  b) the refcount is too high - need to wait for release\n         *\n         * In this case we will UNLOCK the global object again so that the holder\n         * can relinquish it.  We'll try again a few times before giving up hope.\n         */\n        ++attempts;\n        if (attempts >= 5)\n        {\n            return_code = OS_ERR_OBJECT_IN_USE;\n            break;\n        }\n\n        /*\n         * Call the impl layer to wait for some sort of change to occur.\n         */\n        OS_WaitForStateChange(token, attempts);\n    }\n\n    /*\n     * Determine if the global table needs to be unlocked now.\n     *\n     * If lock_mode is OS_LOCK_MODE_NONE, then the table was never locked\n     * to begin with, and therefore never needs to be unlocked.\n     */\n    if (token->lock_mode != OS_LOCK_MODE_NONE)\n    {\n        if (return_code == OS_SUCCESS)\n        {\n            /* always increment the refcount, which means a task is actively\n             * using or modifying this record. */\n            ++obj->refcount;\n\n            /*\n             * On a successful operation, the global is unlocked if it is\n             * a REFCOUNT or EXCLUSIVE lock.  Note for EXCLUSIVE, because the ID\n             * was overwritten to OS_OBJECT_ID_RESERVED, other tasks will not be\n             * able to access the object because the ID will not match, so the\n             * table can be unlocked while the remainder of the create/delete process\n             * continues.\n             *\n             * For OS_LOCK_MODE_GLOBAL the global lock should be maintained and\n             * returned to the caller.\n             */\n            if (token->lock_mode == OS_LOCK_MODE_REFCOUNT || token->lock_mode == OS_LOCK_MODE_EXCLUSIVE)\n            {\n                OS_Unlock_Global(token);\n            }\n        }\n        else if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE && OS_ObjectIdEqual(expected_id, OS_OBJECT_ID_RESERVED))\n        {\n            /*\n             * On failure, if the active_id was overwritten, then set\n             * it back to the original value which is in the token.\n             * (note it had to match initially before overwrite)\n             */\n            obj->active_id = OS_ObjectIdFromToken(token);\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function parameter 'token' is declared as OS_object_token_t * but in this fragment (and the function as shown) it is only accessed for reading (token->lock_mode, OS_ObjectIdFromToken(token), OS_ObjectIdGlobalFromToken(token), passed to helpers that conceptually only need read access). Therefore the pointer could and should be declared to point to a const-qualified type (e.g. const OS_object_token_t *token). The current non-const declaration violates MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_ObjectIdConvertToken_Log(const OS_object_token_t *token,\n                                       const OS_common_record_t *obj,\n                                       osal_id_t expected_id,\n                                       int32 return_code,\n                                       uint32 attempts,\n                                       const char *stage)\n{\n    FILE *f = fopen(\"/tmp/logs/1539.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    /* Record key state items useful to reproduce the violation scenario */\n    fprintf(f, \"Stage: %s\\n\", stage);\n    fprintf(f, \"  token ptr: %p\\n\", (const void *)token);\n    /* Use the accessor to get the ID associated with the token (may be read-only) */\n    fprintf(f, \"  token id: 0x%08x\\n\", (unsigned)OS_ObjectIdFromToken((OS_object_token_t *)token));\n    fprintf(f, \"  token lock_mode: %u\\n\", (unsigned)token->lock_mode);\n    fprintf(f, \"  expected_id: 0x%08x\\n\", (unsigned)expected_id);\n    fprintf(f, \"  obj ptr: %p\\n\", (const void *)obj);\n    if (obj != NULL)\n    {\n        fprintf(f, \"  obj->active_id: 0x%08x\\n\", (unsigned)obj->active_id);\n        fprintf(f, \"  obj->refcount: %u\\n\", (unsigned)obj->refcount);\n    }\n    fprintf(f, \"  attempts: %u\\n\", (unsigned)attempts);\n    fprintf(f, \"  return_code (incoming): %d\\n\", (int)return_code);\n    fprintf(f, \"\\n\");\n\n    fclose(f);\n}\n\nint32 OS_ObjectIdConvertToken(OS_object_token_t *token)\n{\n    int32               return_code = OS_ERROR;\n    uint32              attempts    = 0;\n    OS_common_record_t *obj;\n    osal_id_t           expected_id;\n\n    obj         = OS_ObjectIdGlobalFromToken(token);\n    expected_id = OS_ObjectIdFromToken(token);\n\n    /* Log initial state */\n    OS_ObjectIdConvertToken_Log(token, obj, expected_id, return_code, attempts, \"entry\");\n\n    /*\n     * Upon entry the ID from the token must be valid\n     */\n    if (!OS_ObjectIdIsValid(expected_id))\n    {\n        /* Log invalid ID case */\n        OS_ObjectIdConvertToken_Log(token, obj, expected_id, OS_ERR_INCORRECT_OBJ_STATE, attempts, \"invalid_token_id\");\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /*\n     * If lock mode is RESERVED, then the ID in the record should\n     * already be set to OS_OBJECT_ID_RESERVED.  This is for very\n     * specific use cases where a secondary task needs to access an\n     * object during its creation/deletion.\n     *\n     * For all typical modes the ID in the record should be equal\n     * to the token ID.\n     */\n    if (token->lock_mode == OS_LOCK_MODE_RESERVED)\n    {\n        expected_id = OS_OBJECT_ID_RESERVED;\n        OS_ObjectIdConvertToken_Log(token, obj, expected_id, return_code, attempts, \"reserved_mode_adjust_expected_id\");\n    }\n\n    while (true)\n    {\n        /* Log each loop entry */\n        OS_ObjectIdConvertToken_Log(token, obj, expected_id, return_code, attempts, \"loop_top\");\n\n        /* Validate the integrity of the ID.  As the \"active_id\" is a single\n         * integer, we can do this check regardless of whether global is locked or not. */\n        if (OS_ObjectIdEqual(obj->active_id, expected_id))\n        {\n            /*\n             * Got an ID match...\n             */\n            if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE)\n            {\n                /*\n                 * For EXCLUSIVE mode, overwrite the ID to be RESERVED now -- this\n                 * makes any future ID checks or lock attempts in other tasks fail to match.\n                 */\n                if (!OS_ObjectIdEqual(expected_id, OS_OBJECT_ID_RESERVED))\n                {\n                    expected_id    = OS_OBJECT_ID_RESERVED;\n                    obj->active_id = expected_id;\n\n                    OS_ObjectIdConvertToken_Log(token, obj, expected_id, return_code, attempts, \"exclusive_overwrite_to_reserved\");\n                }\n\n                /*\n                 * Also confirm that reference count is zero\n                 * If not zero, will need to wait for other tasks to release.\n                 */\n                if (obj->refcount == 0)\n                {\n                    return_code = OS_SUCCESS;\n                    OS_ObjectIdConvertToken_Log(token, obj, expected_id, return_code, attempts, \"exclusive_refcount_zero_success\");\n                    break;\n                }\n                else\n                {\n                    OS_ObjectIdConvertToken_Log(token, obj, expected_id, return_code, attempts, \"exclusive_refcount_nonzero_wait\");\n                }\n            }\n            else\n            {\n                /*\n                 * Nothing else to test for this lock type\n                 */\n                return_code = OS_SUCCESS;\n                OS_ObjectIdConvertToken_Log(token, obj, expected_id, return_code, attempts, \"nonexclusive_match_success\");\n                break;\n            }\n        }\n        else if (token->lock_mode == OS_LOCK_MODE_NONE || !OS_ObjectIdEqual(obj->active_id, OS_OBJECT_ID_RESERVED))\n        {\n            /* Not an ID match and not RESERVED - fail out */\n            return_code = OS_ERR_INVALID_ID;\n            OS_ObjectIdConvertToken_Log(token, obj, expected_id, return_code, attempts, \"id_mismatch_fail\");\n            break;\n        }\n\n        /*\n         * If we get this far, it means there is contention for access to the object.\n         *  a) we want to some type of lock but the ID is currently RESERVED\n         *  b) the refcount is too high - need to wait for release\n         *\n         * In this case we will UNLOCK the global object again so that the holder\n         * can relinquish it.  We'll try again a few times before giving up hope.\n         */\n        ++attempts;\n        if (attempts >= 5)\n        {\n            return_code = OS_ERR_OBJECT_IN_USE;\n            OS_ObjectIdConvertToken_Log(token, obj, expected_id, return_code, attempts, \"attempts_exhausted\");\n            break;\n        }\n\n        OS_ObjectIdConvertToken_Log(token, obj, expected_id, return_code, attempts, \"waiting_for_state_change_before_block\");\n\n        /*\n         * Call the impl layer to wait for some sort of change to occur.\n         */\n        OS_WaitForStateChange(token, attempts);\n\n        OS_ObjectIdConvertToken_Log(token, obj, expected_id, return_code, attempts, \"after_wait_for_state_change\");\n    }\n\n    /*\n     * Determine if the global table needs to be unlocked now.\n     *\n     * If lock_mode is OS_LOCK_MODE_NONE, then the table was never locked\n     * to begin with, and therefore never needs to be unlocked.\n     */\n    if (token->lock_mode != OS_LOCK_MODE_NONE)\n    {\n        if (return_code == OS_SUCCESS)\n        {\n            /* always increment the refcount, which means a task is actively\n             * using or modifying this record. */\n            ++obj->refcount;\n\n            OS_ObjectIdConvertToken_Log(token, obj, expected_id, return_code, attempts, \"success_increment_refcount_before_unlock_decision\");\n\n            /*\n             * On a successful operation, the global is unlocked if it is\n             * a REFCOUNT or EXCLUSIVE lock.  Note for EXCLUSIVE, because the ID\n             * was overwritten to OS_OBJECT_ID_RESERVED, other tasks will not be\n             * able to access the object because the ID will not match, so the\n             * table can be unlocked while the remainder of the create/delete process\n             * continues.\n             *\n             * For OS_LOCK_MODE_GLOBAL the global lock should be maintained and\n             * returned to the caller.\n             */\n            if (token->lock_mode == OS_LOCK_MODE_REFCOUNT || token->lock_mode == OS_LOCK_MODE_EXCLUSIVE)\n            {\n                OS_ObjectIdConvertToken_Log(token, obj, expected_id, return_code, attempts, \"calling_OS_Unlock_Global\");\n                OS_Unlock_Global(token);\n                OS_ObjectIdConvertToken_Log(token, obj, expected_id, return_code, attempts, \"after_OS_Unlock_Global\");\n            }\n        }\n        else if (token->lock_mode == OS_LOCK_MODE_EXCLUSIVE && OS_ObjectIdEqual(expected_id, OS_OBJECT_ID_RESERVED))\n        {\n            /*\n             * On failure, if the active_id was overwritten, then set\n             * it back to the original value which is in the token.\n             * (note it had to match initially before overwrite)\n             */\n            obj->active_id = OS_ObjectIdFromToken(token);\n            OS_ObjectIdConvertToken_Log(token, obj, expected_id, return_code, attempts, \"restore_active_id_on_failure\");\n        }\n    }\n\n    OS_ObjectIdConvertToken_Log(token, obj, expected_id, return_code, attempts, \"exit\");\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_ObjectIdConvertToken. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Summary: In the body of OS_ObjectIdConvertToken the parameter token is only read (token->lock_mode, passed to OS_ObjectIdFromToken/OS_ObjectIdGlobalFromToken/OS_WaitForStateChange/OS_Unlock_Global). That suggests that, logically, the pointer could be declared as const OS_object_token_t * to better satisfy MISRA C 2023 Rule 8.13 (pointer should point to const-qualified type whenever possible).\n\nWhy I do NOT mark the report as definitely correct: whether this is an actual MISRA violation depends on the whole code base (the prototypes of the helper functions). If any of the called functions (OS_ObjectIdFromToken, OS_ObjectIdGlobalFromToken, OS_WaitForStateChange, OS_Unlock_Global, etc.) expect a non-const OS_object_token_t * then you cannot change this function's signature to take a const pointer without also changing those callee prototypes (or inserting casts). The test logging in the supplied test_code even shows a cast OS_ObjectIdFromToken((OS_object_token_t *)token) \u2014 which implies OS_ObjectIdFromToken currently takes a non-const pointer. In that situation, declaring token const here would either force casts at each call site (which is poor practice and could itself violate MISRA rules about discarding qualifiers) or require changing the callee APIs to accept const. Therefore you cannot conclude a standalone violation of Rule 8.13 from the fragment alone.\n\nRecommendation: Inspect the declarations of the helper functions called with token. If those helpers do not modify the token, update their parameter types to const OS_object_token_t * and then change OS_ObjectIdConvertToken to take const OS_object_token_t *. Avoid casting away const. If some helpers do need to modify the token, then the current non-const parameter is appropriate and there is no violation.\n\nConclusion: The agent A correctly observed that token is only read in this function and that, conceptually, making it const would satisfy Rule 8.13. However, because the function forwards token to other functions whose prototypes currently appear to require non-const pointers (as evidenced by the test code cast), you cannot determine a definite MISRA violation from this fragment alone. The report as stated (that this function violates Rule 8.13) is therefore not conclusively correct without examining the callee prototypes and broader code base."
}