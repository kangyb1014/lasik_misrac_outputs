{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf CurrentSegment is not guaranteed to contain a NUL terminator within its array (for example it was filled exactly to its size by a prior strncpy or other operation that did not append '\\0'), then strcpy(Local_SegmentName, CurrentSegment) will read past the bounds of CurrentSegment while searching for the terminator and may write past Local_SegmentName. This results in out\u2011of\u2011bounds accesses and thus violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_EndTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2271.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_EndTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_EndTest:\n```c\nvoid UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    UT_BSP_Lock();\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n}\n```\n</target_code>\nPlease provide the modified UtAssert_EndTest code.\n",
  "test_code": "void UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    /* Probe/log variables */\n    FILE *probe_file = NULL;\n    size_t seg_size = sizeof(CurrentSegment);\n    size_t i;\n    ssize_t nul_index = -1;\n\n    UT_BSP_Lock();\n\n    /* Open probe log file early while locked so log reflects protected state */\n    probe_file = fopen(\"/tmp/logs/2271.txt\", \"a\");\n    if (probe_file != NULL)\n    {\n        fprintf(probe_file, \"--- UtAssert_EndTest ENTER (locked) ---\\n\");\n    }\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n\n    if (probe_file != NULL)\n    {\n        fprintf(probe_file, \"SegmentValid=%u\\n\", (unsigned int)SegmentValid);\n        fprintf(probe_file, \"UT_SegmentCounters.TotalTestCases=%lu\\n\",\n                (unsigned long)UT_SegmentCounters.TotalTestCases);\n        fprintf(probe_file, \"UT_SegmentCounters.TestSegmentCount=%lu\\n\",\n                (unsigned long)UT_SegmentCounters.TestSegmentCount);\n        fprintf(probe_file, \"UT_TotalCounters.TotalTestCases=%lu\\n\",\n                (unsigned long)UT_TotalCounters.TotalTestCases);\n        fprintf(probe_file, \"UT_TotalCounters.TestSegmentCount=%lu\\n\",\n                (unsigned long)UT_TotalCounters.TestSegmentCount);\n        for (i = 0; i < (size_t)UTASSERT_CASETYPE_MAX; ++i)\n        {\n            fprintf(probe_file, \"UT_SegmentCounters.CaseCount[%zu]=%lu\\n\",\n                    i, (unsigned long)UT_SegmentCounters.CaseCount[i]);\n        }\n\n        fprintf(probe_file, \"sizeof(CurrentSegment)=%zu\\n\", seg_size);\n\n        /* Inspect CurrentSegment for NUL terminator inside its array bounds */\n        for (i = 0; i < seg_size; ++i)\n        {\n            if ((unsigned char)CurrentSegment[i] == (unsigned char)'\\0')\n            {\n                nul_index = (ssize_t)i;\n                break;\n            }\n        }\n\n        if (nul_index >= 0)\n        {\n            fprintf(probe_file, \"CurrentSegment contains NUL at index %zd\\n\", nul_index);\n        }\n        else\n        {\n            fprintf(probe_file, \"CurrentSegment does NOT contain NUL within its buffer (size=%zu)\\n\", seg_size);\n        }\n\n        /* Dump CurrentSegment bytes as hex (bounded to buffer size) so logs show exact contents */\n        fprintf(probe_file, \"CurrentSegment hex dump (up to %zu bytes):\\n\", seg_size);\n        for (i = 0; i < seg_size; ++i)\n        {\n            fprintf(probe_file, \"%02X\", (unsigned int)(unsigned char)CurrentSegment[i]);\n            if ((i + 1) % 32 == 0)\n                fprintf(probe_file, \"\\n\");\n            else if ((i + 1) % 4 == 0)\n                fprintf(probe_file, \" \");\n        }\n        fprintf(probe_file, \"\\n\");\n    }\n\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        if (probe_file != NULL)\n        {\n            fprintf(probe_file, \"About to call strcpy(Local_SegmentName, CurrentSegment)\\n\");\n            if (nul_index < 0)\n            {\n                fprintf(probe_file, \"WARNING: No NUL found in CurrentSegment; strcpy may read past bounds -> potential overflow.\\n\");\n            }\n        }\n\n        strcpy(Local_SegmentName, CurrentSegment);\n\n        if (probe_file != NULL)\n        {\n            /* Log resulting Local_SegmentName safely (bounded) */\n            fprintf(probe_file, \"Local_SegmentName (bounded to %zu bytes):\\n\", sizeof(Local_SegmentName));\n            /* Use precision to avoid reading past buffer in case of missing NUL */\n            fprintf(probe_file, \"%.*s\\n\", (int)sizeof(Local_SegmentName), Local_SegmentName);\n            fprintf(probe_file, \"--- End of logged state before clearing UT_SegmentCounters ---\\n\\n\");\n            fclose(probe_file);\n            probe_file = NULL;\n        }\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n\n    /* Final probe after unlocking to indicate function exit (re-open file briefly) */\n    probe_file = fopen(\"/tmp/logs/2271.txt\", \"a\");\n    if (probe_file != NULL)\n    {\n        fprintf(probe_file, \"--- UtAssert_EndTest EXIT (unlocked) ---\\n\\n\");\n        fclose(probe_file);\n    }\n}\n"
}