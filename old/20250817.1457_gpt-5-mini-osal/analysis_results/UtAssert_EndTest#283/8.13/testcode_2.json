{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nViolation occurs if UT_BSP_DoText has a non-const parameter (e.g. prototype UT_BSP_DoText(uint32, char *)). Passing the string literal \"No test cases\\n\" to a char * parameter means the pointer should instead be to a const-qualified type (const char *), so Rule 8.13 would be violated. If, however, UT_BSP_DoText is declared to take a const char * for the text argument, there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_EndTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2267.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_EndTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_EndTest:\n```c\nvoid UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    UT_BSP_Lock();\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n}\n```\n</target_code>\nPlease provide the modified UtAssert_EndTest code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdbool.h>\n#include <string.h>\n\n/* Probe helper: append a message to the log file for later inspection. */\nstatic void UtAssert_AppendLog(const char *tag, const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/2267.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"%s: %s\\n\", tag, msg);\n        fclose(f);\n    }\n}\n\n/* Probe helper: log a pointer and the textual content (safe as const).\n * We intentionally take the text parameter as const char * so we don't introduce\n * an additional pointer-to-non-const violation. */\nstatic void UtAssert_LogLiteralPointer(const char *tag, const char *text)\n{\n    FILE *f = fopen(\"/tmp/logs/2267.txt\", \"a\");\n    if (f)\n    {\n        fprintf(f, \"%s: pointer=%p, text=\\\"%s\\\"\\n\", (const void *)tag, (const void *)text, text);\n        fclose(f);\n    }\n}\n\n/* Preserve original function logic; insert probes to capture state/control flow. */\nvoid UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    UT_BSP_Lock();\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n\n    /* Log decision about segment validity */\n    UtAssert_AppendLog(\"UtAssert_EndTest.enter\", \"entered\");\n    UtAssert_AppendLog(\"SegmentValid\", SegmentValid ? \"true\" : \"false\");\n\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n\n        /* Log the aggregate counters before the summation loop completes */\n        {\n            FILE *f = fopen(\"/tmp/logs/2267.txt\", \"a\");\n            if (f)\n            {\n                fprintf(f, \"Before loop: UT_SegmentCounters.TotalTestCases=%lu, UT_TotalCounters.TotalTestCases=%lu\\n\",\n                        (unsigned long)UT_SegmentCounters.TotalTestCases,\n                        (unsigned long)UT_TotalCounters.TotalTestCases);\n                fclose(f);\n            }\n        }\n\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n\n            /* Log each case count accumulation step */\n            {\n                FILE *f = fopen(\"/tmp/logs/2267.txt\", \"a\");\n                if (f)\n                {\n                    fprintf(f, \"Accumulate Case[%u]: segment=%lu, total=%lu\\n\",\n                            (unsigned)Ct,\n                            (unsigned long)UT_SegmentCounters.CaseCount[Ct],\n                            (unsigned long)UT_TotalCounters.CaseCount[Ct]);\n                    fclose(f);\n                }\n            }\n        }\n\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /* Log copied local counters */\n        {\n            FILE *f = fopen(\"/tmp/logs/2267.txt\", \"a\");\n            if (f)\n            {\n                fprintf(f, \"Local_SegmentCounters.TotalTestCases=%lu, TestSegmentCount=%lu\\n\",\n                        (unsigned long)Local_SegmentCounters.TotalTestCases,\n                        (unsigned long)Local_SegmentCounters.TestSegmentCount);\n                fclose(f);\n            }\n        }\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n\n        /* Log the copied segment name */\n        {\n            FILE *f = fopen(\"/tmp/logs/2267.txt\", \"a\");\n            if (f)\n            {\n                fprintf(f, \"Local_SegmentName=\\\"%s\\\"\\n\", Local_SegmentName);\n                fclose(f);\n            }\n        }\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n\n        /* Log that we reported a test segment */\n        UtAssert_AppendLog(\"Action\", \"Reported test segment\");\n    }\n    else\n    {\n        /*\n         * Probe: log that we are about to call UT_BSP_DoText with a string literal.\n         * This records the pointer and text content so agents can inspect whether\n         * the call site uses a non-const parameter for the literal (violation scenario).\n         */\n        UtAssert_LogLiteralPointer(\"UT_BSP_DoText.call_literal\", \"No test cases\\n\");\n\n        /* Original call preserved exactly as before */\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n\n        /* Log completion of the call for clarity */\n        UtAssert_AppendLog(\"Action\", \"Called UT_BSP_DoText with literal\");\n    }\n\n    UtAssert_AppendLog(\"UtAssert_EndTest.exit\", \"exiting\");\n}\n"
}