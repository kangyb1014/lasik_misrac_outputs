{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf CurrentSegment is declared without const (for example: 'char CurrentSegment[]' or 'char *CurrentSegment'), then passing it as the source argument to strcpy uses it only for reading and thus it should be declared as const char[...] or const char * according to MISRA C 2023 Rule 8.13. In that case the rule is violated. (If CurrentSegment is already declared const-qualified, there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UtAssert_EndTest code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2267.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UtAssert_EndTest as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UtAssert_EndTest:\n```c\nvoid UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    UT_BSP_Lock();\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n        strcpy(Local_SegmentName, CurrentSegment);\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n}\n```\n</target_code>\nPlease provide the modified UtAssert_EndTest code.\n",
  "test_code": "void UtAssert_EndTest(void)\n{\n    uint32                 Ct;\n    bool                   SegmentValid;\n    UtAssert_TestCounter_t Local_SegmentCounters;\n    char                   Local_SegmentName[sizeof(CurrentSegment)];\n\n    /* Probe: log entry and initial state */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2267.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"UtAssert_EndTest ENTRY\\n\");\n            fprintf(fp, \"  Address of CurrentSegment: %p\\n\", (void *)CurrentSegment);\n            fprintf(fp, \"  sizeof(CurrentSegment): %zu\\n\", (size_t)sizeof(CurrentSegment));\n            fprintf(fp, \"  UT_TotalCounters.TotalTestCases (before): %u\\n\", (unsigned)UT_TotalCounters.TotalTestCases);\n            fprintf(fp, \"  UT_SegmentCounters.TotalTestCases (before): %u\\n\", (unsigned)UT_SegmentCounters.TotalTestCases);\n            fclose(fp);\n        }\n    }\n\n    UT_BSP_Lock();\n\n    SegmentValid = (UT_SegmentCounters.TotalTestCases > 0);\n\n    /* Probe: log result of SegmentValid decision */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2267.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"  SegmentValid = %s\\n\", (SegmentValid ? \"true\" : \"false\"));\n            fclose(fp);\n        }\n    }\n\n    if (SegmentValid)\n    {\n        ++UT_TotalCounters.TestSegmentCount;\n        UT_SegmentCounters.TestSegmentCount = UT_TotalCounters.TestSegmentCount;\n        UT_TotalCounters.TotalTestCases += UT_SegmentCounters.TotalTestCases;\n        for (Ct = 0; Ct < UTASSERT_CASETYPE_MAX; ++Ct)\n        {\n            UT_TotalCounters.CaseCount[Ct] += UT_SegmentCounters.CaseCount[Ct];\n        }\n        memcpy(&Local_SegmentCounters, &UT_SegmentCounters, sizeof(Local_SegmentCounters));\n\n        /*\n         * note, strcpy is OK because both are fixed size buffers of the same size,\n         * and the null termination on CurrentSegment was locally enforced already\n         */\n\n        /* Probe: log state immediately before strcpy */\n        {\n            FILE *fp = fopen(\"/tmp/logs/2267.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"  Before strcpy:\\n\");\n                /* Log the raw content of CurrentSegment as read-only evidence */\n                fprintf(fp, \"    CurrentSegment (as string): \\\"%s\\\"\\n\", CurrentSegment);\n                fprintf(fp, \"    CurrentSegment (address): %p\\n\", (void *)CurrentSegment);\n                fprintf(fp, \"    Local_SegmentName buffer size: %zu\\n\", (size_t)sizeof(Local_SegmentName));\n                fclose(fp);\n            }\n        }\n\n        strcpy(Local_SegmentName, CurrentSegment);\n\n        /* Probe: log state immediately after strcpy */\n        {\n            FILE *fp = fopen(\"/tmp/logs/2267.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"  After strcpy:\\n\");\n                fprintf(fp, \"    Local_SegmentName (as string): \\\"%s\\\"\\n\", Local_SegmentName);\n                fprintf(fp, \"    Local_SegmentName (address): %p\\n\", (void *)Local_SegmentName);\n                fclose(fp);\n            }\n        }\n    }\n\n    memset(&UT_SegmentCounters, 0, sizeof(UT_SegmentCounters));\n\n    /* Probe: log that segment counters were cleared */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2267.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"  UT_SegmentCounters cleared.\\n\");\n            fprintf(fp, \"  UT_SegmentCounters.TotalTestCases (after clear): %u\\n\", (unsigned)UT_SegmentCounters.TotalTestCases);\n            fclose(fp);\n        }\n    }\n\n    UT_BSP_Unlock();\n\n    if (SegmentValid)\n    {\n        /* Probe: log that we will call report with Local_SegmentName and counters */\n        {\n            FILE *fp = fopen(\"/tmp/logs/2267.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"  Calling UtAssert_DoTestSegmentReport with Local_SegmentName=\\\"%s\\\"\\n\", Local_SegmentName);\n                fprintf(fp, \"  Local_SegmentCounters.TotalTestCases = %u\\n\", (unsigned)Local_SegmentCounters.TotalTestCases);\n                fclose(fp);\n            }\n        }\n\n        UtAssert_DoTestSegmentReport(Local_SegmentName, &Local_SegmentCounters);\n    }\n    else\n    {\n        /* Probe: log the no test cases path */\n        {\n            FILE *fp = fopen(\"/tmp/logs/2267.txt\", \"a\");\n            if (fp != NULL)\n            {\n                fprintf(fp, \"  No test cases path taken.\\n\");\n                fclose(fp);\n            }\n        }\n\n        UT_BSP_DoText(UTASSERT_CASETYPE_END, \"No test cases\\n\");\n    }\n\n    /* Probe: log exit */\n    {\n        FILE *fp = fopen(\"/tmp/logs/2267.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"UtAssert_EndTest EXIT\\n\\n\");\n            fclose(fp);\n        }\n    }\n}\n"
}