{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment SysMountPointLen = 0; is executed but has no effect on program behaviour. When return_code == OS_SUCCESS (the only case where SysMountPointLen is later used), SysMountPointLen is overwritten in the branch where (filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0 via SysMountPointLen = OS_strnlen(...). If that branch is not taken, return_code is set to an error and the later code that uses SysMountPointLen is not reached. Therefore removing the initial assignment would not change program behaviour, making it dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirCreate_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/730.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirCreate_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirCreate_Impl:\n```c\nint32 OS_DirCreate_Impl(const char *local_path, uint32 access)\n{\n    struct stat st;\n    int32       return_code;\n\n    if (mkdir(local_path, S_IFDIR | S_IRWXU | S_IRWXG | S_IRWXO) < 0)\n    {\n        return_code = OS_ERROR;\n\n        if (errno == EEXIST)\n        {\n            /* Success if already exists and is a directory */\n            if (stat(local_path, &st) == 0 && S_ISDIR(st.st_mode))\n            {\n                return_code = OS_SUCCESS;\n            }\n        }\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DirCreate_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\nint32 OS_DirCreate_Impl(const char *local_path, uint32 access)\n{\n    struct stat st;\n    int32       return_code;\n    FILE *log = fopen(\"/tmp/logs/730.txt\", \"a\");\n\n    if (log)\n    {\n        fprintf(log, \"OS_DirCreate_Impl ENTRY: local_path='%s' access=%u\\n\",\n                (local_path != NULL) ? local_path : \"(null)\", (unsigned)access);\n        fflush(log);\n    }\n\n    if (mkdir(local_path, S_IFDIR | S_IRWXU | S_IRWXG | S_IRWXO) < 0)\n    {\n        /* Capture errno immediately after mkdir to avoid it being overwritten by logging calls */\n        int saved_errno = errno;\n\n        if (log)\n        {\n            fprintf(log, \"mkdir FAILED: errno=%d (%s)\\n\", saved_errno, strerror(saved_errno));\n            fflush(log);\n        }\n\n        return_code = OS_ERROR;\n\n        if (saved_errno == EEXIST)\n        {\n            if (log)\n            {\n                fprintf(log, \"errno == EEXIST, calling stat() to determine if path is a directory\\n\");\n                fflush(log);\n            }\n\n            int stat_res = stat(local_path, &st);\n            if (stat_res == 0 && S_ISDIR(st.st_mode))\n            {\n                if (log)\n                {\n                    fprintf(log, \"stat succeeded and path is a directory (mode=0%o). Setting return_code=OS_SUCCESS\\n\", st.st_mode);\n                    fflush(log);\n                }\n                return_code = OS_SUCCESS;\n            }\n            else\n            {\n                if (log)\n                {\n                    if (stat_res != 0)\n                    {\n                        fprintf(log, \"stat failed: errno=%d (%s)\\n\", errno, strerror(errno));\n                    }\n                    else\n                    {\n                        fprintf(log, \"stat succeeded but path is not a directory (mode=0%o)\\n\", st.st_mode);\n                    }\n                    fflush(log);\n                }\n            }\n        }\n    }\n    else\n    {\n        if (log)\n        {\n            fprintf(log, \"mkdir SUCCEEDED\\n\");\n            fflush(log);\n        }\n        return_code = OS_SUCCESS;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_DirCreate_Impl EXIT: return_code=%d\\n\\n\", return_code);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}