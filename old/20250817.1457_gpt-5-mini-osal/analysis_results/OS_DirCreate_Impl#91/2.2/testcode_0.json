{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'VirtPathBegin = VirtPathLen;' is overwritten before any use in all successful paths. After OS_ObjectIdGetBySearch succeeds, VirtPathBegin is assigned from OS_strnlen(filesys->virtual_mountpt, ...) when the filesystem is mounted; if the filesystem isn't mounted the function sets an error and the later block that would use VirtPathBegin is skipped. Thus the initial assignment has no effect on program behaviour and can be removed without changing functionality.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DirCreate_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/730.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DirCreate_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DirCreate_Impl:\n```c\nint32 OS_DirCreate_Impl(const char *local_path, uint32 access)\n{\n    struct stat st;\n    int32       return_code;\n\n    if (mkdir(local_path, S_IFDIR | S_IRWXU | S_IRWXG | S_IRWXO) < 0)\n    {\n        return_code = OS_ERROR;\n\n        if (errno == EEXIST)\n        {\n            /* Success if already exists and is a directory */\n            if (stat(local_path, &st) == 0 && S_ISDIR(st.st_mode))\n            {\n                return_code = OS_SUCCESS;\n            }\n        }\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DirCreate_Impl code.\n",
  "test_code": "#include <sys/types.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <errno.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n\n/*\n * Probe logging helper - appends textual logs to /tmp/logs/730.txt\n * Keeps original logic intact; only side-effect is logging.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/730.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_DirCreate_Impl(const char *local_path, uint32 access)\n{\n    struct stat st;\n    int32       return_code;\n\n    probe_log(\"OS_DirCreate_Impl ENTER: local_path='%s' access=%u\", local_path ? local_path : \"(null)\", (unsigned)access);\n\n    if (mkdir(local_path, S_IFDIR | S_IRWXU | S_IRWXG | S_IRWXO) < 0)\n    {\n        probe_log(\"mkdir() failed for '%s' errno=%d (%s)\", local_path ? local_path : \"(null)\", errno, strerror(errno));\n\n        return_code = OS_ERROR;\n\n        if (errno == EEXIST)\n        {\n            probe_log(\"errno==EEXIST -> check existing path with stat() for '%s'\", local_path ? local_path : \"(null)\");\n\n            /* Success if already exists and is a directory */\n            if (stat(local_path, &st) == 0 && S_ISDIR(st.st_mode))\n            {\n                probe_log(\"stat() succeeded for '%s': st_mode=0%o (S_ISDIR=%d)\", local_path ? local_path : \"(null)\", (unsigned)st.st_mode, S_ISDIR(st.st_mode));\n\n                return_code = OS_SUCCESS;\n            }\n            else\n            {\n                if (errno != 0)\n                {\n                    probe_log(\"stat() failed for '%s' errno=%d (%s)\", local_path ? local_path : \"(null)\", errno, strerror(errno));\n                }\n                else\n                {\n                    /* stat returned non-zero or not a directory */\n                    probe_log(\"stat() result for '%s' indicates not a directory or returned non-zero\", local_path ? local_path : \"(null)\");\n                }\n            }\n        }\n    }\n    else\n    {\n        probe_log(\"mkdir() succeeded for '%s'\", local_path ? local_path : \"(null)\");\n\n        return_code = OS_SUCCESS;\n    }\n\n    probe_log(\"OS_DirCreate_Impl EXIT: local_path='%s' return_code=%d\", local_path ? local_path : \"(null)\", (int)return_code);\n\n    return return_code;\n}\n"
}