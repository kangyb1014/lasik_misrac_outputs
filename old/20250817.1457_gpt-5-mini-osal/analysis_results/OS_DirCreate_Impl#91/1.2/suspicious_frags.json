{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_DirCreate_Impl:\n```c\nint32 OS_DirCreate_Impl(const char *local_path, uint32 access)\n{\n    struct stat st;\n    int32       return_code;\n\n    if (mkdir(local_path, S_IFDIR | S_IRWXU | S_IRWXG | S_IRWXO) < 0)\n    {\n        return_code = OS_ERROR;\n\n        if (errno == EEXIST)\n        {\n            /* Success if already exists and is a directory */\n            if (stat(local_path, &st) == 0 && S_ISDIR(st.st_mode))\n            {\n                return_code = OS_SUCCESS;\n            }\n        }\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_DirCreate_Impl:\ntypedef int32_t   int32\n...\ntypedef uint32_t  uint32\n...\n#define OS_ERROR (-1)\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler language extensions are used in the provided code fragment. Specifically:\n- There are no GCC/Clang/other compiler-specific tokens such as __attribute__, __asm, __builtin_*, __typeof__, __extension__ or similar.\n- No inline assembly, statement-expressions, nested functions, or other non-standard control-flow/definition constructs appear.\n- The typedefs (int32/uint32 based on int32_t/uint32_t) use standard <stdint.h> types and are not compiler extensions.\n- Use of mkdir(), stat(), errno, EEXIST, S_ISDIR and S_IFDIR are POSIX APIs/macros, not compiler language extensions. While S_IFDIR in the mkdir mode argument may be semantically questionable, it is not a compiler language extension and therefore outside the scope of MISRA C 2023 Rule 1.2 as stated.\n- The OS_ERROR/OS_SUCCESS macros are ordinary preprocessor definitions and not language extensions.\n\nTherefore there are no code fragments that need to be investigated for MISRA C 2023 Rule 1.2 (language extensions). If headers are missing or POSIX usage is undesired for other MISRA rules, those are separate concerns not covered by Rule 1.2."
}