{
  "user_message": "An agent A claimed that the following OS_TimeBase_SigWaitImpl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_TimeBase_SigWaitImpl.\n```c\nstatic uint32 OS_TimeBase_SigWaitImpl(osal_id_t obj_id)\n{\n    int                                 ret;\n    OS_object_token_t                   token;\n    OS_impl_timebase_internal_record_t *impl;\n    OS_timebase_internal_record_t *     timebase;\n    uint32                              interval_time;\n    int                                 sig;\n\n    interval_time = 0;\n\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMEBASE, obj_id, &token) == OS_SUCCESS)\n    {\n        impl     = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        ret = sigwait(&impl->sigset, &sig);\n\n        if (ret != 0)\n        {\n            /*\n             * the sigwait call failed.\n             * returning 0 will cause the process to repeat.\n             */\n        }\n        else if (impl->reset_flag == 0)\n        {\n            /*\n             * Normal steady-state behavior.\n             * interval_time reflects the configured interval time.\n             */\n            interval_time = timebase->nominal_interval_time;\n        }\n        else\n        {\n            /*\n             * Reset/First interval behavior.\n             * timer_set() was invoked since the previous interval occurred (if any).\n             * interval_time reflects the configured start time.\n             */\n            interval_time    = timebase->nominal_start_time;\n            impl->reset_flag = 0;\n        }\n    }\n\n    return interval_time;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer variable 'timebase' is declared as OS_timebase_internal_record_t * but in this function it is only used for read access (reading nominal_interval_time and nominal_start_time). Per MISRA C 2023 Rule 8.13 it should be declared to point to a const-qualified type (const OS_timebase_internal_record_t *) to indicate no modification is intended. The macro OS_OBJECT_TABLE_GET returns the address of a non-const table element, but assigning that to a pointer-to-const is allowed. Therefore the current code violates Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_TimeBase_LogState(osal_id_t obj_id,\n                                 OS_impl_timebase_internal_record_t *impl,\n                                 OS_timebase_internal_record_t *timebase,\n                                 int ret,\n                                 int sig,\n                                 uint32 interval_time,\n                                 const char *location)\n{\n    FILE *f = fopen(\"/tmp/logs/587.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"Location: %s\\n\", location);\n        /* obj_id printed as an integer-sized pointer value for portability */\n        fprintf(f, \"obj_id=(uintptr_t)=%\" PRIuPTR \"\\n\", (uintptr_t)obj_id);\n        fprintf(f, \"impl_ptr=%p, timebase_ptr=%p\\n\", (void *)impl, (void *)timebase);\n\n        if (impl != NULL)\n        {\n            fprintf(f, \"impl->reset_flag=%d\\n\", (int)impl->reset_flag);\n        }\n        else\n        {\n            fprintf(f, \"impl is NULL\\n\");\n        }\n\n        if (timebase != NULL)\n        {\n            fprintf(f, \"timebase->nominal_interval_time=%u, timebase->nominal_start_time=%u\\n\",\n                    (unsigned)timebase->nominal_interval_time,\n                    (unsigned)timebase->nominal_start_time);\n        }\n        else\n        {\n            fprintf(f, \"timebase is NULL\\n\");\n        }\n\n        fprintf(f, \"sigwait_ret=%d, sig=%d, chosen_interval_time=%u\\n\\n\",\n                ret, sig, (unsigned)interval_time);\n\n        fclose(f);\n    }\n}\n\nstatic uint32 OS_TimeBase_SigWaitImpl(osal_id_t obj_id)\n{\n    int                                 ret;\n    OS_object_token_t                   token;\n    OS_impl_timebase_internal_record_t *impl;\n    OS_timebase_internal_record_t *     timebase;\n    uint32                              interval_time;\n    int                                 sig;\n\n    interval_time = 0;\n\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMEBASE, obj_id, &token) == OS_SUCCESS)\n    {\n        impl     = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log state just after obtaining the object references, before sigwait. */\n        OS_TimeBase_LogState(obj_id, impl, timebase, -1, 0, interval_time, \"after_getbyid_before_sigwait\");\n\n        ret = sigwait(&impl->sigset, &sig);\n\n        /* Log state immediately after sigwait returns. */\n        OS_TimeBase_LogState(obj_id, impl, timebase, ret, sig, interval_time, \"after_sigwait\");\n\n        if (ret != 0)\n        {\n            /*\n             * the sigwait call failed.\n             * returning 0 will cause the process to repeat.\n             */\n\n            /* Log the choice to return 0 due to sigwait failure. */\n            OS_TimeBase_LogState(obj_id, impl, timebase, ret, sig, interval_time, \"sigwait_failed_returning_0\");\n        }\n        else if (impl->reset_flag == 0)\n        {\n            /*\n             * Normal steady-state behavior.\n             * interval_time reflects the configured interval time.\n             */\n            interval_time = timebase->nominal_interval_time;\n\n            /* Log the steady-state branch and the value read from timebase. */\n            OS_TimeBase_LogState(obj_id, impl, timebase, ret, sig, interval_time, \"steady_state_interval_selected\");\n        }\n        else\n        {\n            /*\n             * Reset/First interval behavior.\n             * timer_set() was invoked since the previous interval occurred (if any).\n             * interval_time reflects the configured start time.\n             */\n            interval_time    = timebase->nominal_start_time;\n            impl->reset_flag = 0;\n\n            /* Log the reset branch and the value read from timebase, and the reset_flag change. */\n            OS_TimeBase_LogState(obj_id, impl, timebase, ret, sig, interval_time, \"reset_interval_selected_and_reset_flag_cleared\");\n        }\n    }\n    else\n    {\n        /* Log that ObjectIdGetById failed and interval_time will remain 0. */\n        OS_TimeBase_LogState(obj_id, NULL, NULL, -1, 0, interval_time, \"objectidgetbyid_failed\");\n    }\n\n    /* Final log before return to capture the returned interval_time. */\n    OS_TimeBase_LogState(obj_id, NULL, NULL, 0, 0, interval_time, \"returning_interval_time\");\n\n    return interval_time;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_TimeBase_SigWaitImpl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In this function the local variable timebase is only used for read access (reading nominal_interval_time and nominal_start_time) and is never used to modify the referenced object. Per MISRA C:2023 Rule 8.13, a pointer should point to a const-qualified type whenever possible. Declaring timebase as const OS_timebase_internal_record_t * would express the read-only intent and is allowed even though OS_OBJECT_TABLE_GET returns a pointer to a non-const object (conversion from T * to const T * is permitted). Note that impl cannot be made const because impl->reset_flag is modified. The empty test log is irrelevant to the rule check. Therefore the report that this code violates Rule 8.13 is correct."
}