{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'timebase' is only used for reads (accessing timebase->nominal_interval_time and timebase->nominal_start_time) and is never used to modify the pointed object. Therefore it could and should be declared as a pointer to a const-qualified type (e.g. const OS_timebase_internal_record_t *timebase). Assigning the address of the non-const OS_timebase_table element to a const-qualified pointer is allowed, so the current non-const declaration violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBase_SigWaitImpl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/587.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBase_SigWaitImpl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBase_SigWaitImpl:\n```c\nstatic uint32 OS_TimeBase_SigWaitImpl(osal_id_t obj_id)\n{\n    int                                 ret;\n    OS_object_token_t                   token;\n    OS_impl_timebase_internal_record_t *impl;\n    OS_timebase_internal_record_t *     timebase;\n    uint32                              interval_time;\n    int                                 sig;\n\n    interval_time = 0;\n\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMEBASE, obj_id, &token) == OS_SUCCESS)\n    {\n        impl     = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        ret = sigwait(&impl->sigset, &sig);\n\n        if (ret != 0)\n        {\n            /*\n             * the sigwait call failed.\n             * returning 0 will cause the process to repeat.\n             */\n        }\n        else if (impl->reset_flag == 0)\n        {\n            /*\n             * Normal steady-state behavior.\n             * interval_time reflects the configured interval time.\n             */\n            interval_time = timebase->nominal_interval_time;\n        }\n        else\n        {\n            /*\n             * Reset/First interval behavior.\n             * timer_set() was invoked since the previous interval occurred (if any).\n             * interval_time reflects the configured start time.\n             */\n            interval_time    = timebase->nominal_start_time;\n            impl->reset_flag = 0;\n        }\n    }\n\n    return interval_time;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBase_SigWaitImpl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append formatted logs to /tmp/logs/587.txt */\nstatic void OS_TimeBase_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/587.txt\", \"a\");\n    if (f != NULL)\n    {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fputc('\\n', f);\n        (void)fclose(f);\n    }\n}\n\nstatic uint32 OS_TimeBase_SigWaitImpl(osal_id_t obj_id)\n{\n    int                                 ret;\n    OS_object_token_t                   token;\n    OS_impl_timebase_internal_record_t *impl;\n    OS_timebase_internal_record_t *     timebase;\n    uint32                              interval_time;\n    int                                 sig;\n\n    interval_time = 0;\n\n    OS_TimeBase_LogProbe(\"OS_TimeBase_SigWaitImpl: entry obj_id=%lu\", (unsigned long)obj_id);\n\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMEBASE, obj_id, &token) == OS_SUCCESS)\n    {\n        impl     = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        OS_TimeBase_LogProbe(\"ObjectIdGetById: token=%lu, impl=%p, timebase=%p\", (unsigned long)token, (void *)impl, (void *)timebase);\n\n        /* Log nominal values seen via the timebase pointer */\n        if (timebase != NULL)\n        {\n            OS_TimeBase_LogProbe(\"timebase values: nominal_interval_time=%lu, nominal_start_time=%lu\", (unsigned long)timebase->nominal_interval_time, (unsigned long)timebase->nominal_start_time);\n        }\n        else\n        {\n            OS_TimeBase_LogProbe(\"timebase is NULL\");\n        }\n\n        ret = sigwait(&impl->sigset, &sig);\n\n        OS_TimeBase_LogProbe(\"sigwait returned ret=%d\", ret);\n\n        if (ret != 0)\n        {\n            /*\n             * the sigwait call failed.\n             * returning 0 will cause the process to repeat.\n             */\n            OS_TimeBase_LogProbe(\"sigwait failed: ret=%d, returning interval_time=%lu\", ret, (unsigned long)interval_time);\n        }\n        else if (impl->reset_flag == 0)\n        {\n            /*\n             * Normal steady-state behavior.\n             * interval_time reflects the configured interval time.\n             */\n            OS_TimeBase_LogProbe(\"sig received=%d, reset_flag=0 -> steady-state\", sig);\n            if (timebase != NULL)\n            {\n                interval_time = timebase->nominal_interval_time;\n                OS_TimeBase_LogProbe(\"using nominal_interval_time=%lu\", (unsigned long)interval_time);\n            }\n            else\n            {\n                OS_TimeBase_LogProbe(\"timebase NULL in steady-state branch; interval_time remains %lu\", (unsigned long)interval_time);\n            }\n        }\n        else\n        {\n            /*\n             * Reset/First interval behavior.\n             * timer_set() was invoked since the previous interval occurred (if any).\n             * interval_time reflects the configured start time.\n             */\n            OS_TimeBase_LogProbe(\"sig received=%d, reset_flag=%d -> reset/first-interval branch\", sig, impl->reset_flag);\n            if (timebase != NULL)\n            {\n                interval_time    = timebase->nominal_start_time;\n                OS_TimeBase_LogProbe(\"using nominal_start_time=%lu\", (unsigned long)interval_time);\n            }\n            else\n            {\n                OS_TimeBase_LogProbe(\"timebase NULL in reset branch; interval_time remains %lu\", (unsigned long)interval_time);\n            }\n\n            impl->reset_flag = 0;\n            OS_TimeBase_LogProbe(\"reset_flag cleared; impl->reset_flag now=%d\", impl->reset_flag);\n        }\n    }\n    else\n    {\n        OS_TimeBase_LogProbe(\"OS_ObjectIdGetById failed for obj_id=%lu; returning interval_time=%lu\", (unsigned long)obj_id, (unsigned long)interval_time);\n    }\n\n    OS_TimeBase_LogProbe(\"OS_TimeBase_SigWaitImpl: exit interval_time=%lu\", (unsigned long)interval_time);\n\n    return interval_time;\n}\n"
}