{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'timebase' is declared as OS_timebase_internal_record_t * but in this function it is only used for read access (reading nominal_interval_time and nominal_start_time). Per MISRA C 2023 Rule 8.13 it should be declared to point to a const-qualified type (const OS_timebase_internal_record_t *) to indicate no modification is intended. The macro OS_OBJECT_TABLE_GET returns the address of a non-const table element, but assigning that to a pointer-to-const is allowed. Therefore the current code violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBase_SigWaitImpl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/587.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBase_SigWaitImpl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBase_SigWaitImpl:\n```c\nstatic uint32 OS_TimeBase_SigWaitImpl(osal_id_t obj_id)\n{\n    int                                 ret;\n    OS_object_token_t                   token;\n    OS_impl_timebase_internal_record_t *impl;\n    OS_timebase_internal_record_t *     timebase;\n    uint32                              interval_time;\n    int                                 sig;\n\n    interval_time = 0;\n\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMEBASE, obj_id, &token) == OS_SUCCESS)\n    {\n        impl     = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        ret = sigwait(&impl->sigset, &sig);\n\n        if (ret != 0)\n        {\n            /*\n             * the sigwait call failed.\n             * returning 0 will cause the process to repeat.\n             */\n        }\n        else if (impl->reset_flag == 0)\n        {\n            /*\n             * Normal steady-state behavior.\n             * interval_time reflects the configured interval time.\n             */\n            interval_time = timebase->nominal_interval_time;\n        }\n        else\n        {\n            /*\n             * Reset/First interval behavior.\n             * timer_set() was invoked since the previous interval occurred (if any).\n             * interval_time reflects the configured start time.\n             */\n            interval_time    = timebase->nominal_start_time;\n            impl->reset_flag = 0;\n        }\n    }\n\n    return interval_time;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBase_SigWaitImpl code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe/logging helper to capture control flow and state for debugging. */\nstatic void OS_TimeBase_LogState(osal_id_t obj_id,\n                                 OS_impl_timebase_internal_record_t *impl,\n                                 OS_timebase_internal_record_t *timebase,\n                                 int ret,\n                                 int sig,\n                                 uint32 interval_time,\n                                 const char *location)\n{\n    FILE *f = fopen(\"/tmp/logs/587.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"Location: %s\\n\", location);\n        /* obj_id printed as an integer-sized pointer value for portability */\n        fprintf(f, \"obj_id=(uintptr_t)=%\" PRIuPTR \"\\n\", (uintptr_t)obj_id);\n        fprintf(f, \"impl_ptr=%p, timebase_ptr=%p\\n\", (void *)impl, (void *)timebase);\n\n        if (impl != NULL)\n        {\n            fprintf(f, \"impl->reset_flag=%d\\n\", (int)impl->reset_flag);\n        }\n        else\n        {\n            fprintf(f, \"impl is NULL\\n\");\n        }\n\n        if (timebase != NULL)\n        {\n            fprintf(f, \"timebase->nominal_interval_time=%u, timebase->nominal_start_time=%u\\n\",\n                    (unsigned)timebase->nominal_interval_time,\n                    (unsigned)timebase->nominal_start_time);\n        }\n        else\n        {\n            fprintf(f, \"timebase is NULL\\n\");\n        }\n\n        fprintf(f, \"sigwait_ret=%d, sig=%d, chosen_interval_time=%u\\n\\n\",\n                ret, sig, (unsigned)interval_time);\n\n        fclose(f);\n    }\n}\n\nstatic uint32 OS_TimeBase_SigWaitImpl(osal_id_t obj_id)\n{\n    int                                 ret;\n    OS_object_token_t                   token;\n    OS_impl_timebase_internal_record_t *impl;\n    OS_timebase_internal_record_t *     timebase;\n    uint32                              interval_time;\n    int                                 sig;\n\n    interval_time = 0;\n\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMEBASE, obj_id, &token) == OS_SUCCESS)\n    {\n        impl     = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log state just after obtaining the object references, before sigwait. */\n        OS_TimeBase_LogState(obj_id, impl, timebase, -1, 0, interval_time, \"after_getbyid_before_sigwait\");\n\n        ret = sigwait(&impl->sigset, &sig);\n\n        /* Log state immediately after sigwait returns. */\n        OS_TimeBase_LogState(obj_id, impl, timebase, ret, sig, interval_time, \"after_sigwait\");\n\n        if (ret != 0)\n        {\n            /*\n             * the sigwait call failed.\n             * returning 0 will cause the process to repeat.\n             */\n\n            /* Log the choice to return 0 due to sigwait failure. */\n            OS_TimeBase_LogState(obj_id, impl, timebase, ret, sig, interval_time, \"sigwait_failed_returning_0\");\n        }\n        else if (impl->reset_flag == 0)\n        {\n            /*\n             * Normal steady-state behavior.\n             * interval_time reflects the configured interval time.\n             */\n            interval_time = timebase->nominal_interval_time;\n\n            /* Log the steady-state branch and the value read from timebase. */\n            OS_TimeBase_LogState(obj_id, impl, timebase, ret, sig, interval_time, \"steady_state_interval_selected\");\n        }\n        else\n        {\n            /*\n             * Reset/First interval behavior.\n             * timer_set() was invoked since the previous interval occurred (if any).\n             * interval_time reflects the configured start time.\n             */\n            interval_time    = timebase->nominal_start_time;\n            impl->reset_flag = 0;\n\n            /* Log the reset branch and the value read from timebase, and the reset_flag change. */\n            OS_TimeBase_LogState(obj_id, impl, timebase, ret, sig, interval_time, \"reset_interval_selected_and_reset_flag_cleared\");\n        }\n    }\n    else\n    {\n        /* Log that ObjectIdGetById failed and interval_time will remain 0. */\n        OS_TimeBase_LogState(obj_id, NULL, NULL, -1, 0, interval_time, \"objectidgetbyid_failed\");\n    }\n\n    /* Final log before return to capture the returned interval_time. */\n    OS_TimeBase_LogState(obj_id, NULL, NULL, 0, 0, interval_time, \"returning_interval_time\");\n\n    return interval_time;\n}\n"
}