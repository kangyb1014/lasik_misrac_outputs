{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer variable 'timebase' is declared as OS_timebase_internal_record_t * but is only used for read access (reading nominal_start_time and nominal_interval_time). It could be declared as a pointer to const (const OS_timebase_internal_record_t *timebase) to prevent modification. Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBase_SigWaitImpl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/587.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBase_SigWaitImpl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBase_SigWaitImpl:\n```c\nstatic uint32 OS_TimeBase_SigWaitImpl(osal_id_t obj_id)\n{\n    int                                 ret;\n    OS_object_token_t                   token;\n    OS_impl_timebase_internal_record_t *impl;\n    OS_timebase_internal_record_t *     timebase;\n    uint32                              interval_time;\n    int                                 sig;\n\n    interval_time = 0;\n\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMEBASE, obj_id, &token) == OS_SUCCESS)\n    {\n        impl     = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        ret = sigwait(&impl->sigset, &sig);\n\n        if (ret != 0)\n        {\n            /*\n             * the sigwait call failed.\n             * returning 0 will cause the process to repeat.\n             */\n        }\n        else if (impl->reset_flag == 0)\n        {\n            /*\n             * Normal steady-state behavior.\n             * interval_time reflects the configured interval time.\n             */\n            interval_time = timebase->nominal_interval_time;\n        }\n        else\n        {\n            /*\n             * Reset/First interval behavior.\n             * timer_set() was invoked since the previous interval occurred (if any).\n             * interval_time reflects the configured start time.\n             */\n            interval_time    = timebase->nominal_start_time;\n            impl->reset_flag = 0;\n        }\n    }\n\n    return interval_time;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBase_SigWaitImpl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe function to log control flow and relevant state to /tmp/logs/587.txt */\nstatic void OS_TimeBase_LogProbe(const char *stage, osal_id_t obj_id,\n                                 OS_impl_timebase_internal_record_t *impl,\n                                 OS_timebase_internal_record_t *timebase,\n                                 int ret, int sig, uint32 interval_time)\n{\n    FILE *f = fopen(\"/tmp/logs/587.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Safely obtain values guarded by NULL checks */\n        int reset_flag_val = -1;\n        unsigned long long nominal_interval = 0ULL;\n        unsigned long long nominal_start = 0ULL;\n\n        if (impl != NULL)\n        {\n            reset_flag_val = impl->reset_flag;\n        }\n\n        if (timebase != NULL)\n        {\n            nominal_interval = (unsigned long long)timebase->nominal_interval_time;\n            nominal_start    = (unsigned long long)timebase->nominal_start_time;\n        }\n\n        fprintf(f,\n                \"Stage=%s, obj_id=%llu, impl=%p, timebase=%p, ret=%d, sig=%d, reset_flag=%d, nominal_interval=%llu, nominal_start=%llu, interval_time=%llu\\n\",\n                stage,\n                (unsigned long long)obj_id,\n                (void *)impl,\n                (void *)timebase,\n                ret,\n                sig,\n                reset_flag_val,\n                nominal_interval,\n                nominal_start,\n                (unsigned long long)interval_time);\n        fclose(f);\n    }\n}\n\nstatic uint32 OS_TimeBase_SigWaitImpl(osal_id_t obj_id)\n{\n    int                                 ret;\n    OS_object_token_t                   token;\n    OS_impl_timebase_internal_record_t *impl;\n    OS_timebase_internal_record_t *     timebase;\n    uint32                              interval_time;\n    int                                 sig;\n\n    interval_time = 0;\n\n    /* Log entry state */\n    OS_TimeBase_LogProbe(\"entry\", obj_id, NULL, NULL, 0, 0, interval_time);\n\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMEBASE, obj_id, &token) == OS_SUCCESS)\n    {\n        impl     = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        /* Log after successfully obtaining object table entries */\n        OS_TimeBase_LogProbe(\"after_get\", obj_id, impl, timebase, 0, 0, interval_time);\n\n        ret = sigwait(&impl->sigset, &sig);\n\n        /* Log result of sigwait */\n        OS_TimeBase_LogProbe(\"after_sigwait\", obj_id, impl, timebase, ret, sig, interval_time);\n\n        if (ret != 0)\n        {\n            /*\n             * the sigwait call failed.\n             * returning 0 will cause the process to repeat.\n             */\n            OS_TimeBase_LogProbe(\"sigwait_failed\", obj_id, impl, timebase, ret, sig, interval_time);\n        }\n        else if (impl->reset_flag == 0)\n        {\n            /*\n             * Normal steady-state behavior.\n             * interval_time reflects the configured interval time.\n             */\n            interval_time = timebase->nominal_interval_time;\n\n            /* Log steady-state selection */\n            OS_TimeBase_LogProbe(\"steady_state_after\", obj_id, impl, timebase, ret, sig, interval_time);\n        }\n        else\n        {\n            /*\n             * Reset/First interval behavior.\n             * timer_set() was invoked since the previous interval occurred (if any).\n             * interval_time reflects the configured start time.\n             */\n            /* Log reset-before values */\n            OS_TimeBase_LogProbe(\"reset_before\", obj_id, impl, timebase, ret, sig, interval_time);\n\n            interval_time    = timebase->nominal_start_time;\n            impl->reset_flag = 0;\n\n            /* Log reset-after values */\n            OS_TimeBase_LogProbe(\"reset_after\", obj_id, impl, timebase, ret, sig, interval_time);\n        }\n    }\n\n    /* Log exit value */\n    OS_TimeBase_LogProbe(\"exit\", obj_id, NULL, NULL, 0, 0, interval_time);\n\n    return interval_time;\n}\n"
}