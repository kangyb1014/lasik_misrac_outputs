{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'timebase' is declared as OS_timebase_internal_record_t * but is only used for read access (interval_time = timebase->nominal_interval_time). According to MISRA C 2023 Rule 8.13, a pointer that is used only to read should be const-qualified. Thus 'timebase' should be declared as const OS_timebase_internal_record_t *timebase (assigning &OS_timebase_table[...] to a const-qualified pointer is allowed).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimeBase_SigWaitImpl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/587.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimeBase_SigWaitImpl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimeBase_SigWaitImpl:\n```c\nstatic uint32 OS_TimeBase_SigWaitImpl(osal_id_t obj_id)\n{\n    int                                 ret;\n    OS_object_token_t                   token;\n    OS_impl_timebase_internal_record_t *impl;\n    OS_timebase_internal_record_t *     timebase;\n    uint32                              interval_time;\n    int                                 sig;\n\n    interval_time = 0;\n\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMEBASE, obj_id, &token) == OS_SUCCESS)\n    {\n        impl     = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        ret = sigwait(&impl->sigset, &sig);\n\n        if (ret != 0)\n        {\n            /*\n             * the sigwait call failed.\n             * returning 0 will cause the process to repeat.\n             */\n        }\n        else if (impl->reset_flag == 0)\n        {\n            /*\n             * Normal steady-state behavior.\n             * interval_time reflects the configured interval time.\n             */\n            interval_time = timebase->nominal_interval_time;\n        }\n        else\n        {\n            /*\n             * Reset/First interval behavior.\n             * timer_set() was invoked since the previous interval occurred (if any).\n             * interval_time reflects the configured start time.\n             */\n            interval_time    = timebase->nominal_start_time;\n            impl->reset_flag = 0;\n        }\n    }\n\n    return interval_time;\n}\n```\n</target_code>\nPlease provide the modified OS_TimeBase_SigWaitImpl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/*\n * Probe logging helper. Appends human-readable logs to /tmp/logs/587.txt.\n * This helper is intentionally lightweight and does not alter program logic.\n */\nstatic void OS_TimeBase_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/587.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timestr[32];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(f, \"%s - \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic uint32 OS_TimeBase_SigWaitImpl(osal_id_t obj_id)\n{\n    int                                 ret;\n    OS_object_token_t                   token;\n    OS_impl_timebase_internal_record_t *impl;\n    OS_timebase_internal_record_t *     timebase;\n    uint32                              interval_time;\n    int                                 sig;\n\n    interval_time = 0;\n\n    OS_TimeBase_ProbeLog(\"Entry: obj_id=%u\", (unsigned) obj_id);\n\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMEBASE, obj_id, &token) == OS_SUCCESS)\n    {\n        impl     = OS_OBJECT_TABLE_GET(OS_impl_timebase_table, token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, token);\n\n        OS_TimeBase_ProbeLog(\n            \"Object lookup success: token=%u, impl_ptr=%p, timebase_ptr=%p, impl->reset_flag=%d\",\n            (unsigned) token, (void *)impl, (void *)timebase, (impl != NULL) ? impl->reset_flag : -1);\n\n        ret = sigwait(&impl->sigset, &sig);\n\n        OS_TimeBase_ProbeLog(\"sigwait returned: ret=%d, sig=%d\", ret, sig);\n\n        if (ret != 0)\n        {\n            /*\n             * the sigwait call failed.\n             * returning 0 will cause the process to repeat.\n             */\n            OS_TimeBase_ProbeLog(\"Branch: sigwait failure -> will return interval_time=%u\", (unsigned)interval_time);\n        }\n        else if (impl->reset_flag == 0)\n        {\n            /*\n             * Normal steady-state behavior.\n             * interval_time reflects the configured interval time.\n             */\n            interval_time = timebase->nominal_interval_time;\n\n            OS_TimeBase_ProbeLog(\n                \"Branch: steady-state -> interval_time set from timebase->nominal_interval_time=%u\",\n                (unsigned)timebase->nominal_interval_time);\n        }\n        else\n        {\n            /*\n             * Reset/First interval behavior.\n             * timer_set() was invoked since the previous interval occurred (if any).\n             * interval_time reflects the configured start time.\n             */\n            interval_time    = timebase->nominal_start_time;\n            impl->reset_flag = 0;\n\n            OS_TimeBase_ProbeLog(\n                \"Branch: reset -> interval_time set from timebase->nominal_start_time=%u, reset_flag cleared\",\n                (unsigned)timebase->nominal_start_time);\n        }\n\n        OS_TimeBase_ProbeLog(\n            \"Post-branch state: impl_ptr=%p, timebase_ptr=%p, impl->reset_flag=%d, interval_time=%u, nominal_interval_time=%u, nominal_start_time=%u\",\n            (void *)impl,\n            (void *)timebase,\n            impl->reset_flag,\n            (unsigned)interval_time,\n            (unsigned)timebase->nominal_interval_time,\n            (unsigned)timebase->nominal_start_time);\n    }\n    else\n    {\n        OS_TimeBase_ProbeLog(\"Object lookup failed for obj_id=%u; returning interval_time=%u\", (unsigned)obj_id, (unsigned)interval_time);\n    }\n\n    OS_TimeBase_ProbeLog(\"Exit: returning interval_time=%u for obj_id=%u\", (unsigned)interval_time, (unsigned)obj_id);\n\n    return interval_time;\n}\n"
}