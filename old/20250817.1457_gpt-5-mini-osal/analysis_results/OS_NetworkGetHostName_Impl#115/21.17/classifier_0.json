{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_NetworkGetHostName_Impl:\n```c\nint32 OS_NetworkGetHostName_Impl(char *host_name, size_t name_len)\n{\n    int32 return_code;\n\n    if (gethostname(host_name, name_len) < 0)\n    {\n        return_code = OS_ERROR;\n    }\n    else\n    {\n        /*\n         * posix does not say that the name is always\n         * null terminated, so its worthwhile to ensure it\n         */\n        host_name[name_len - 1] = 0;\n        return_code             = OS_SUCCESS;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nhost_name[name_len - 1] = 0;\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The code writes to host_name[name_len - 1] without checking that name_len > 0 (or that host_name points to at least name_len bytes). If name_len == 0 this indexes host_name at size_t underflow (very large index) and causes an out-of-bounds write. Therefore the fragment can violate the bound-access requirement of Rule 21.17."
}