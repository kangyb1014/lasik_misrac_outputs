{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe function directly assigns to the value parameter 'initial_value' (initial_value = 1;), modifying a non-pointer function parameter inside the function. This is a direct violation of MISRA C 2023 Rule 17.8. Use a local copy (e.g. uint32 local_initial = initial_value; and modify local_initial) or avoid modifying the parameter to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemCreate_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/77.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemCreate_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemCreate_Impl:\n```c\nint32 OS_BinSemCreate_Impl(const OS_object_token_t *token, uint32 initial_value, uint32 options)\n{\n    int                               ret;\n    int                               attr_created;\n    int                               mutex_created;\n    int                               cond_created;\n    int32                             return_code;\n    pthread_mutexattr_t               mutex_attr;\n    OS_impl_binsem_internal_record_t *sem;\n\n    /*\n     * This preserves a bit of pre-existing functionality that was particular to binary sems:\n     * if the initial value is greater than 1 it just silently used 1 without error.\n     * (by contrast the counting semaphore will return an error)\n     */\n    if (initial_value > 1)\n    {\n        initial_value = 1;\n    }\n\n    attr_created  = 0;\n    mutex_created = 0;\n    cond_created  = 0;\n    sem           = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n    memset(sem, 0, sizeof(*sem));\n\n    do\n    {\n        /*\n         ** Initialize the pthread mutex attribute structure with default values\n         */\n        ret = pthread_mutexattr_init(&mutex_attr);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutexattr_init failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        /* After this point, the attr object should be destroyed before return */\n        attr_created = 1;\n\n        /*\n         ** Use priority inheritance\n         */\n        ret = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutexattr_setprotocol failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        /*\n         ** Initialize the mutex that is used with the condition variable\n         */\n        ret = pthread_mutex_init(&(sem->id), &mutex_attr);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutex_init failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        mutex_created = 1;\n\n        /*\n         ** Initialize the condition variable\n         */\n        ret = pthread_cond_init(&(sem->cv), NULL);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: pthread_cond_init failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        cond_created = 1;\n\n        /*\n         * Check sem call, avoids unreachable destroy logic\n         */\n        ret = pthread_cond_signal(&(sem->cv));\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: initial pthread_cond_signal failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        /*\n         ** fill out the proper OSAL table fields\n         */\n\n        sem->current_value = initial_value;\n\n        return_code = OS_SUCCESS;\n    } while (0);\n\n    /* Clean up resources if the operation failed */\n    if (return_code != OS_SUCCESS)\n    {\n        if (mutex_created)\n        {\n            pthread_mutex_destroy(&(sem->id));\n        }\n        if (cond_created)\n        {\n            pthread_cond_destroy(&(sem->cv));\n        }\n    }\n\n    if (attr_created)\n    {\n        /* Done with the attribute object -\n         * this call is a no-op in linux - but for other implementations if\n         * the create call allocated something this should free it\n         */\n        pthread_mutexattr_destroy(&mutex_attr);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemCreate_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <pthread.h>\n\nstatic void os_binsem_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/77.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_BinSemCreate_Impl(const OS_object_token_t *token, uint32 initial_value, uint32 options)\n{\n    int                               ret;\n    int                               attr_created;\n    int                               mutex_created;\n    int                               cond_created;\n    int32                             return_code;\n    pthread_mutexattr_t               mutex_attr;\n    OS_impl_binsem_internal_record_t *sem;\n\n    /* Log entry and parameter state */\n    os_binsem_log(\"ENTRY: OS_BinSemCreate_Impl token=%p initial_value=%u options=%u\", (void *)token, (unsigned)initial_value, (unsigned)options);\n\n    /*\n     * This preserves a bit of pre-existing functionality that was particular to binary sems:\n     * if the initial value is greater than 1 it just silently used 1 without error.\n     * (by contrast the counting semaphore will return an error)\n     */\n    if (initial_value > 1)\n    {\n        os_binsem_log(\"PARAM_MODIFY: initial_value > 1 detected, original=%u - modifying parameter to 1\", (unsigned)initial_value);\n        initial_value = 1;\n        os_binsem_log(\"PARAM_MODIFY_DONE: initial_value now=%u\", (unsigned)initial_value);\n    }\n    else\n    {\n        os_binsem_log(\"PARAM_NO_CHANGE: initial_value=%u (no modification)\", (unsigned)initial_value);\n    }\n\n    attr_created  = 0;\n    mutex_created = 0;\n    cond_created  = 0;\n    sem           = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n    memset(sem, 0, sizeof(*sem));\n\n    do\n    {\n        /*\n         ** Initialize the pthread mutex attribute structure with default values\n         */\n        ret = pthread_mutexattr_init(&mutex_attr);\n        if (ret != 0)\n        {\n            os_binsem_log(\"ERROR: pthread_mutexattr_init failed: %s (ret=%d)\", strerror(ret), ret);\n            OS_DEBUG(\"Error: pthread_mutexattr_init failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        /* After this point, the attr object should be destroyed before return */\n        attr_created = 1;\n        os_binsem_log(\"STATE: mutex attr created (attr_created=1)\");\n\n        /*\n         ** Use priority inheritance\n         */\n        ret = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n        if (ret != 0)\n        {\n            os_binsem_log(\"ERROR: pthread_mutexattr_setprotocol failed: %s (ret=%d)\", strerror(ret), ret);\n            OS_DEBUG(\"Error: pthread_mutexattr_setprotocol failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n        os_binsem_log(\"STATE: mutex attr protocol set to PTHREAD_PRIO_INHERIT\");\n\n        /*\n         ** Initialize the mutex that is used with the condition variable\n         */\n        ret = pthread_mutex_init(&(sem->id), &mutex_attr);\n        if (ret != 0)\n        {\n            os_binsem_log(\"ERROR: pthread_mutex_init failed: %s (ret=%d)\", strerror(ret), ret);\n            OS_DEBUG(\"Error: pthread_mutex_init failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        mutex_created = 1;\n        os_binsem_log(\"STATE: mutex initialized (mutex_created=1) sem=%p\", (void *)&(sem->id));\n\n        /*\n         ** Initialize the condition variable\n         */\n        ret = pthread_cond_init(&(sem->cv), NULL);\n        if (ret != 0)\n        {\n            os_binsem_log(\"ERROR: pthread_cond_init failed: %s (ret=%d)\", strerror(ret), ret);\n            OS_DEBUG(\"Error: pthread_cond_init failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        cond_created = 1;\n        os_binsem_log(\"STATE: cond var initialized (cond_created=1) sem=%p\", (void *)&(sem->cv));\n\n        /*\n         * Check sem call, avoids unreachable destroy logic\n         */\n        ret = pthread_cond_signal(&(sem->cv));\n        if (ret != 0)\n        {\n            os_binsem_log(\"ERROR: initial pthread_cond_signal failed: %s (ret=%d)\", strerror(ret), ret);\n            OS_DEBUG(\"Error: initial pthread_cond_signal failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        os_binsem_log(\"STATE: initial pthread_cond_signal succeeded\");\n\n        /*\n         ** fill out the proper OSAL table fields\n         */\n\n        sem->current_value = initial_value;\n        os_binsem_log(\"STATE: sem->current_value set to %u (sem=%p)\", (unsigned)sem->current_value, (void *)sem);\n\n        return_code = OS_SUCCESS;\n        os_binsem_log(\"STATE: creation succeeded, return_code=OS_SUCCESS\");\n    } while (0);\n\n    /* Clean up resources if the operation failed */\n    if (return_code != OS_SUCCESS)\n    {\n        os_binsem_log(\"CLEANUP: creation failed, return_code=%d, cleaning up resources\", (int)return_code);\n        if (mutex_created)\n        {\n            pthread_mutex_destroy(&(sem->id));\n            os_binsem_log(\"CLEANUP: destroyed mutex (mutex_created was 1)\");\n        }\n        if (cond_created)\n        {\n            pthread_cond_destroy(&(sem->cv));\n            os_binsem_log(\"CLEANUP: destroyed cond var (cond_created was 1)\");\n        }\n    }\n    else\n    {\n        os_binsem_log(\"FINAL: creation completed successfully, sem=%p current_value=%u\", (void *)sem, (unsigned)sem->current_value);\n    }\n\n    if (attr_created)\n    {\n        /* Done with the attribute object -\n         * this call is a no-op in linux - but for other implementations if\n         * the create call allocated something this should free it\n         */\n        pthread_mutexattr_destroy(&mutex_attr);\n        os_binsem_log(\"FINAL: destroyed mutex attr (attr_created was 1)\");\n    }\n\n    os_binsem_log(\"EXIT: OS_BinSemCreate_Impl returning %d\", (int)return_code);\n\n    return return_code;\n}\n"
}