{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_OBJECT_TABLE_GET returns NULL or an otherwise invalid pointer (for example because *token is out-of-range or the table entry is not allocated), the call memset(sem, 0, sizeof(*sem)) will attempt to write sizeof(*sem) bytes starting at an invalid address and thus access memory beyond the bounds of the referenced object. This also applies if sem does not actually point to an object at least sizeof(*sem) bytes in size.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemCreate_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/79.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemCreate_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemCreate_Impl:\n```c\nint32 OS_BinSemCreate_Impl(const OS_object_token_t *token, uint32 initial_value, uint32 options)\n{\n    int                               ret;\n    int                               attr_created;\n    int                               mutex_created;\n    int                               cond_created;\n    int32                             return_code;\n    pthread_mutexattr_t               mutex_attr;\n    OS_impl_binsem_internal_record_t *sem;\n\n    /*\n     * This preserves a bit of pre-existing functionality that was particular to binary sems:\n     * if the initial value is greater than 1 it just silently used 1 without error.\n     * (by contrast the counting semaphore will return an error)\n     */\n    if (initial_value > 1)\n    {\n        initial_value = 1;\n    }\n\n    attr_created  = 0;\n    mutex_created = 0;\n    cond_created  = 0;\n    sem           = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n    memset(sem, 0, sizeof(*sem));\n\n    do\n    {\n        /*\n         ** Initialize the pthread mutex attribute structure with default values\n         */\n        ret = pthread_mutexattr_init(&mutex_attr);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutexattr_init failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        /* After this point, the attr object should be destroyed before return */\n        attr_created = 1;\n\n        /*\n         ** Use priority inheritance\n         */\n        ret = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutexattr_setprotocol failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        /*\n         ** Initialize the mutex that is used with the condition variable\n         */\n        ret = pthread_mutex_init(&(sem->id), &mutex_attr);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutex_init failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        mutex_created = 1;\n\n        /*\n         ** Initialize the condition variable\n         */\n        ret = pthread_cond_init(&(sem->cv), NULL);\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: pthread_cond_init failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        cond_created = 1;\n\n        /*\n         * Check sem call, avoids unreachable destroy logic\n         */\n        ret = pthread_cond_signal(&(sem->cv));\n        if (ret != 0)\n        {\n            OS_DEBUG(\"Error: initial pthread_cond_signal failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        /*\n         ** fill out the proper OSAL table fields\n         */\n\n        sem->current_value = initial_value;\n\n        return_code = OS_SUCCESS;\n    } while (0);\n\n    /* Clean up resources if the operation failed */\n    if (return_code != OS_SUCCESS)\n    {\n        if (mutex_created)\n        {\n            pthread_mutex_destroy(&(sem->id));\n        }\n        if (cond_created)\n        {\n            pthread_cond_destroy(&(sem->cv));\n        }\n    }\n\n    if (attr_created)\n    {\n        /* Done with the attribute object -\n         * this call is a no-op in linux - but for other implementations if\n         * the create call allocated something this should free it\n         */\n        pthread_mutexattr_destroy(&mutex_attr);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemCreate_Impl code.\n",
  "test_code": "int32 OS_BinSemCreate_Impl(const OS_object_token_t *token, uint32 initial_value, uint32 options)\n{\n    int                               ret;\n    int                               attr_created;\n    int                               mutex_created;\n    int                               cond_created;\n    int32                             return_code;\n    pthread_mutexattr_t               mutex_attr;\n    OS_impl_binsem_internal_record_t *sem;\n    FILE *log = NULL;\n\n    /* Open log for appending; best-effort only (do not change control flow) */\n    log = fopen(\"/tmp/logs/79.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"OS_BinSemCreate_Impl ENTRY: token_ptr=%p\\n\", (void *)token);\n        fflush(log);\n    }\n\n    /*\n     * This preserves a bit of pre-existing functionality that was particular to binary sems:\n     * if the initial value is greater than 1 it just silently used 1 without error.\n     * (by contrast the counting semaphore will return an error)\n     */\n    if (initial_value > 1)\n    {\n        initial_value = 1;\n        if (log)\n        {\n            fprintf(log, \"Adjusted initial_value to 1\\n\");\n            fflush(log);\n        }\n    }\n\n    attr_created  = 0;\n    mutex_created = 0;\n    cond_created  = 0;\n    sem           = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* Probe: record the pointer returned by OS_OBJECT_TABLE_GET and planned memset size. */\n    if (log)\n    {\n        fprintf(log, \"OS_OBJECT_TABLE_GET returned sem=%p, sizeof(*sem)=%zu\\n\", (void *)sem, sizeof(*sem));\n        if (sem == NULL)\n        {\n            fprintf(log, \"WARNING: sem is NULL -- the upcoming memset(sem,...) will dereference a NULL pointer and can crash.\\n\");\n        }\n        else\n        {\n            fprintf(log, \"Info: sem appears non-NULL; memset will write zeros to that address.\\n\");\n        }\n        fflush(log);\n    }\n\n    /* Intentionally preserve original behavior: perform the same memset as original code. */\n    memset(sem, 0, sizeof(*sem));\n\n    if (log)\n    {\n        /* If the memset succeeded (i.e. sem was valid), record that the memory was zeroed. */\n        fprintf(log, \"memset completed for sem=%p (note: if sem was invalid this process may have crashed before this line).\\n\", (void *)sem);\n        fflush(log);\n    }\n\n    do\n    {\n        /*\n         ** Initialize the pthread mutex attribute structure with default values\n         */\n        ret = pthread_mutexattr_init(&mutex_attr);\n        if (ret != 0)\n        {\n            if (log)\n            {\n                fprintf(log, \"Error: pthread_mutexattr_init failed: %s (ret=%d)\\n\", strerror(ret), ret);\n                fflush(log);\n            }\n            OS_DEBUG(\"Error: pthread_mutexattr_init failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        /* After this point, the attr object should be destroyed before return */\n        attr_created = 1;\n\n        /*\n         ** Use priority inheritance\n         */\n        ret = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n        if (ret != 0)\n        {\n            if (log)\n            {\n                fprintf(log, \"Error: pthread_mutexattr_setprotocol failed: %s (ret=%d)\\n\", strerror(ret), ret);\n                fflush(log);\n            }\n            OS_DEBUG(\"Error: pthread_mutexattr_setprotocol failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        /*\n         ** Initialize the mutex that is used with the condition variable\n         */\n        ret = pthread_mutex_init(&(sem->id), &mutex_attr);\n        if (ret != 0)\n        {\n            if (log)\n            {\n                fprintf(log, \"Error: pthread_mutex_init failed for sem=%p: %s (ret=%d)\\n\", (void *)sem, strerror(ret), ret);\n                fflush(log);\n            }\n            OS_DEBUG(\"Error: pthread_mutex_init failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        mutex_created = 1;\n\n        /*\n         ** Initialize the condition variable\n         */\n        ret = pthread_cond_init(&(sem->cv), NULL);\n        if (ret != 0)\n        {\n            if (log)\n            {\n                fprintf(log, \"Error: pthread_cond_init failed for sem=%p: %s (ret=%d)\\n\", (void *)sem, strerror(ret), ret);\n                fflush(log);\n            }\n            OS_DEBUG(\"Error: pthread_cond_init failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        cond_created = 1;\n\n        /*\n         * Check sem call, avoids unreachable destroy logic\n         */\n        ret = pthread_cond_signal(&(sem->cv));\n        if (ret != 0)\n        {\n            if (log)\n            {\n                fprintf(log, \"Error: initial pthread_cond_signal failed for sem=%p: %s (ret=%d)\\n\", (void *)sem, strerror(ret), ret);\n                fflush(log);\n            }\n            OS_DEBUG(\"Error: initial pthread_cond_signal failed: %s\\n\", strerror(ret));\n            return_code = OS_SEM_FAILURE;\n            break;\n        }\n\n        /*\n         ** fill out the proper OSAL table fields\n         */\n\n        sem->current_value = initial_value;\n\n        if (log)\n        {\n            fprintf(log, \"Success: sem=%p initialized with current_value=%u\\n\", (void *)sem, (unsigned)initial_value);\n            fflush(log);\n        }\n\n        return_code = OS_SUCCESS;\n    } while (0);\n\n    /* Clean up resources if the operation failed */\n    if (return_code != OS_SUCCESS)\n    {\n        if (mutex_created)\n        {\n            if (log)\n            {\n                fprintf(log, \"Cleaning up: destroying mutex for sem=%p\\n\", (void *)sem);\n                fflush(log);\n            }\n            pthread_mutex_destroy(&(sem->id));\n        }\n        if (cond_created)\n        {\n            if (log)\n            {\n                fprintf(log, \"Cleaning up: destroying cond for sem=%p\\n\", (void *)sem);\n                fflush(log);\n            }\n            pthread_cond_destroy(&(sem->cv));\n        }\n    }\n\n    if (attr_created)\n    {\n        /* Done with the attribute object -\n         * this call is a no-op in linux - but for other implementations if\n         * the create call allocated something this should free it\n         */\n        pthread_mutexattr_destroy(&mutex_attr);\n        if (log)\n        {\n            fprintf(log, \"Destroyed mutex attribute object\\n\");\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_BinSemCreate_Impl EXIT: sem=%p return_code=%d attr_created=%d mutex_created=%d cond_created=%d\\n\",\n                (void *)sem, (int)return_code, attr_created, mutex_created, cond_created);\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}