{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_Posix_TimeBaseAPI_Impl_Init:\n```c\nint32 OS_Posix_TimeBaseAPI_Impl_Init(void)\n{\n    int                 status;\n    osal_index_t        idx;\n    pthread_mutexattr_t mutex_attr;\n    struct timespec     clock_resolution;\n    int32               return_code;\n\n    return_code = OS_SUCCESS;\n\n    do\n    {\n        /*\n        ** Mark all timers as available\n        */\n        memset(OS_impl_timebase_table, 0, sizeof(OS_impl_timebase_table));\n\n        /*\n        ** get the resolution of the selected clock\n        */\n        status = clock_getres(OS_PREFERRED_CLOCK, &clock_resolution);\n        if (status != 0)\n        {\n            OS_DEBUG(\"failed in clock_getres: %s\\n\", strerror(errno));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /*\n        ** Convert to microseconds\n        ** Note that the resolution MUST be in the sub-second range, if not then\n        ** it looks like the POSIX timer API in the C library is broken.\n        ** Note for any flavor of RTOS we would expect <= 1ms.  Even a \"desktop\"\n        ** linux or development system should be <= 100ms absolute worst-case.\n        */\n        if (clock_resolution.tv_sec > 0)\n        {\n            return_code = OS_TIMER_ERR_INTERNAL;\n            break;\n        }\n\n        /* Round to the nearest microsecond */\n        POSIX_GlobalVars.ClockAccuracyNsec = (uint32)(clock_resolution.tv_nsec);\n\n        /*\n        ** initialize the attribute with default values\n        */\n        status = pthread_mutexattr_init(&mutex_attr);\n        if (status != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutexattr_init failed: %s\\n\", strerror(status));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /*\n        ** Allow the mutex to use priority inheritance\n        */\n        status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n        if (status != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutexattr_setprotocol failed: %s\\n\", strerror(status));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        for (idx = 0; idx < OS_MAX_TIMEBASES; ++idx)\n        {\n            /*\n            ** create the timebase sync mutex\n            ** This gives a mechanism to synchronize updates to the timer chain with the\n            ** expiration of the timer and processing the chain.\n            */\n            status = pthread_mutex_init(&OS_impl_timebase_table[idx].handler_mutex, &mutex_attr);\n            if (status != 0)\n            {\n                OS_DEBUG(\"Error: Mutex could not be created: %s\\n\", strerror(status));\n                return_code = OS_ERROR;\n                break;\n            }\n        }\n\n        /*\n         * Pre-calculate the clock tick to microsecond conversion factor.\n         */\n        OS_SharedGlobalVars.TicksPerSecond = sysconf(_SC_CLK_TCK);\n        if (OS_SharedGlobalVars.TicksPerSecond <= 0)\n        {\n            OS_DEBUG(\"Error: Unable to determine OS ticks per second: %s\\n\", strerror(errno));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /*\n         * Calculate microseconds per tick\n         *  - If the ratio is not an integer, this will round to the nearest integer value\n         *  - This is used internally for reporting accuracy,\n         *  - TicksPerSecond values over 2M will return zero\n         */\n        OS_SharedGlobalVars.MicroSecPerTick =\n            (1000000 + (OS_SharedGlobalVars.TicksPerSecond / 2)) / OS_SharedGlobalVars.TicksPerSecond;\n    } while (0);\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_Posix_TimeBaseAPI_Impl_Init:\nosal_index_t                        idx\n...\ntypedef uint32 osal_index_t\n...\n#define OS_MAX_TIMEBASES 5\n...\nOS_impl_timebase_internal_record_t OS_impl_timebase_table[OS_MAX_TIMEBASES]\n...\npthread_mutexattr_t mutex_attr\n...\nint                                 status\n...\n#define OS_DEBUG(__VA_ARGS__) \n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nfor (idx = 0; idx < OS_MAX_TIMEBASES; ++idx)\n        {\n            /*\n            ** create the timebase sync mutex\n            ** This gives a mechanism to synchronize updates to the timer chain with the\n            ** expiration of the timer and processing the chain.\n            */\n            status = pthread_mutex_init(&OS_impl_timebase_table[idx].handler_mutex, &mutex_attr);\n            if (status != 0)\n            {\n                OS_DEBUG(\"Error: Mutex could not be created: %s\\n\", strerror(status));\n                return_code = OS_ERROR;\n                break;\n            }\n        }\n```\nFocus on the above code fragment and judge whether it violates the rule 14.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The for loop 'for (idx = 0; idx < OS_MAX_TIMEBASES; ++idx)' is well-formed: (1) the first clause initializes the single loop counter idx; (2) the second clause uses only the loop counter and the constant OS_MAX_TIMEBASES and has no persistent side effects; (3) the third clause (++idx) modifies only the loop counter; and (4) the loop counter is not modified inside the loop body. No MISRA C 2023 Rule 14.2 violation is present."
}