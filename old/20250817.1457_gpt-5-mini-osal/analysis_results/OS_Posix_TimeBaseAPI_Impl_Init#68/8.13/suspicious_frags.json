{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_Posix_TimeBaseAPI_Impl_Init:\n```c\nint32 OS_Posix_TimeBaseAPI_Impl_Init(void)\n{\n    int                 status;\n    osal_index_t        idx;\n    pthread_mutexattr_t mutex_attr;\n    struct timespec     clock_resolution;\n    int32               return_code;\n\n    return_code = OS_SUCCESS;\n\n    do\n    {\n        /*\n        ** Mark all timers as available\n        */\n        memset(OS_impl_timebase_table, 0, sizeof(OS_impl_timebase_table));\n\n        /*\n        ** get the resolution of the selected clock\n        */\n        status = clock_getres(OS_PREFERRED_CLOCK, &clock_resolution);\n        if (status != 0)\n        {\n            OS_DEBUG(\"failed in clock_getres: %s\\n\", strerror(errno));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /*\n        ** Convert to microseconds\n        ** Note that the resolution MUST be in the sub-second range, if not then\n        ** it looks like the POSIX timer API in the C library is broken.\n        ** Note for any flavor of RTOS we would expect <= 1ms.  Even a \"desktop\"\n        ** linux or development system should be <= 100ms absolute worst-case.\n        */\n        if (clock_resolution.tv_sec > 0)\n        {\n            return_code = OS_TIMER_ERR_INTERNAL;\n            break;\n        }\n\n        /* Round to the nearest microsecond */\n        POSIX_GlobalVars.ClockAccuracyNsec = (uint32)(clock_resolution.tv_nsec);\n\n        /*\n        ** initialize the attribute with default values\n        */\n        status = pthread_mutexattr_init(&mutex_attr);\n        if (status != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutexattr_init failed: %s\\n\", strerror(status));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /*\n        ** Allow the mutex to use priority inheritance\n        */\n        status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n        if (status != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutexattr_setprotocol failed: %s\\n\", strerror(status));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        for (idx = 0; idx < OS_MAX_TIMEBASES; ++idx)\n        {\n            /*\n            ** create the timebase sync mutex\n            ** This gives a mechanism to synchronize updates to the timer chain with the\n            ** expiration of the timer and processing the chain.\n            */\n            status = pthread_mutex_init(&OS_impl_timebase_table[idx].handler_mutex, &mutex_attr);\n            if (status != 0)\n            {\n                OS_DEBUG(\"Error: Mutex could not be created: %s\\n\", strerror(status));\n                return_code = OS_ERROR;\n                break;\n            }\n        }\n\n        /*\n         * Pre-calculate the clock tick to microsecond conversion factor.\n         */\n        OS_SharedGlobalVars.TicksPerSecond = sysconf(_SC_CLK_TCK);\n        if (OS_SharedGlobalVars.TicksPerSecond <= 0)\n        {\n            OS_DEBUG(\"Error: Unable to determine OS ticks per second: %s\\n\", strerror(errno));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /*\n         * Calculate microseconds per tick\n         *  - If the ratio is not an integer, this will round to the nearest integer value\n         *  - This is used internally for reporting accuracy,\n         *  - TicksPerSecond values over 2M will return zero\n         */\n        OS_SharedGlobalVars.MicroSecPerTick =\n            (1000000 + (OS_SharedGlobalVars.TicksPerSecond / 2)) / OS_SharedGlobalVars.TicksPerSecond;\n    } while (0);\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_Posix_TimeBaseAPI_Impl_Init:\nOS_impl_timebase_internal_record_t OS_impl_timebase_table[OS_MAX_TIMEBASES]\n...\n#define OS_MAX_TIMEBASES 5\n...\n#define OS_PREFERRED_CLOCK CLOCK_MONOTONIC\n...\nextern OS_SharedGlobalVars_t OS_SharedGlobalVars\n...\nextern POSIX_GlobalVars_t POSIX_GlobalVars\n...\ntypedef uint32_t  uint32\n...\ntypedef uint32 osal_index_t\n...\ntypedef int32_t   int32\n...\n#define OS_DEBUG(__VA_ARGS__) \n...\n#define OS_SUCCESS (0)\n...\n#define OS_ERROR (-1)\n...\n#define OS_TIMER_ERR_INTERNAL (-32)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "OS_DEBUG(\"Error: pthread_mutexattr_setprotocol failed: %s\\n\", strerror(status));",
    "OS_DEBUG(\"Error: Mutex could not be created: %s\\n\", strerror(status));",
    "OS_DEBUG(\"Error: pthread_mutexattr_init failed: %s\\n\", strerror(status));",
    "status = pthread_mutex_init(&OS_impl_timebase_table[idx].handler_mutex, &mutex_attr);",
    "OS_DEBUG(\"Error: Unable to determine OS ticks per second: %s\\n\", strerror(errno));",
    "OS_DEBUG(\"failed in clock_getres: %s\\n\", strerror(errno));"
  ],
  "explanation": "MISRA C 2023 Rule 8.13 asks that pointers point to const-qualified types wherever possible. The code contains multiple uses of strerror(...) whose prototype returns char * (a non-const pointer to a read-only message); these calls should be inspected to determine whether the returned pointer should be treated as pointing to const data (and whether const-qualified types should be used). Also the call to pthread_mutex_init(&OS_impl_timebase_table[idx].handler_mutex, &mutex_attr) should be reviewed because the attr parameter of pthread_mutex_init is declared as const pthread_mutexattr_t * \u2014 ensure the usage and qualification of mutex_attr is appropriate. Other pointer uses in the function (memset(OS_impl_timebase_table,...), clock_getres(OS_PREFERRED_CLOCK, &clock_resolution), pthread_mutexattr_init(&mutex_attr), pthread_mutexattr_setprotocol(&mutex_attr)) involve objects that are written/initialized by those calls and therefore cannot be const-qualified, so they do not need further investigation for this rule. No pointer variables are declared in this function that are candidates for being made const beyond the fragments listed above."
}