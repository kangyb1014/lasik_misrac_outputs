{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe OS_DEBUG(...) invocation expands to nothing (OS_DEBUG is defined empty). After preprocessing the source becomes an empty/null statement (no side-effects \u2014 strerror(errno) is not evaluated), so the statement is executed but removing it would not change program behavior. This constitutes dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Posix_TimeBaseAPI_Impl_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/546.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Posix_TimeBaseAPI_Impl_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Posix_TimeBaseAPI_Impl_Init:\n```c\nint32 OS_Posix_TimeBaseAPI_Impl_Init(void)\n{\n    int                 status;\n    osal_index_t        idx;\n    pthread_mutexattr_t mutex_attr;\n    struct timespec     clock_resolution;\n    int32               return_code;\n\n    return_code = OS_SUCCESS;\n\n    do\n    {\n        /*\n        ** Mark all timers as available\n        */\n        memset(OS_impl_timebase_table, 0, sizeof(OS_impl_timebase_table));\n\n        /*\n        ** get the resolution of the selected clock\n        */\n        status = clock_getres(OS_PREFERRED_CLOCK, &clock_resolution);\n        if (status != 0)\n        {\n            OS_DEBUG(\"failed in clock_getres: %s\\n\", strerror(errno));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /*\n        ** Convert to microseconds\n        ** Note that the resolution MUST be in the sub-second range, if not then\n        ** it looks like the POSIX timer API in the C library is broken.\n        ** Note for any flavor of RTOS we would expect <= 1ms.  Even a \"desktop\"\n        ** linux or development system should be <= 100ms absolute worst-case.\n        */\n        if (clock_resolution.tv_sec > 0)\n        {\n            return_code = OS_TIMER_ERR_INTERNAL;\n            break;\n        }\n\n        /* Round to the nearest microsecond */\n        POSIX_GlobalVars.ClockAccuracyNsec = (uint32)(clock_resolution.tv_nsec);\n\n        /*\n        ** initialize the attribute with default values\n        */\n        status = pthread_mutexattr_init(&mutex_attr);\n        if (status != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutexattr_init failed: %s\\n\", strerror(status));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /*\n        ** Allow the mutex to use priority inheritance\n        */\n        status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n        if (status != 0)\n        {\n            OS_DEBUG(\"Error: pthread_mutexattr_setprotocol failed: %s\\n\", strerror(status));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        for (idx = 0; idx < OS_MAX_TIMEBASES; ++idx)\n        {\n            /*\n            ** create the timebase sync mutex\n            ** This gives a mechanism to synchronize updates to the timer chain with the\n            ** expiration of the timer and processing the chain.\n            */\n            status = pthread_mutex_init(&OS_impl_timebase_table[idx].handler_mutex, &mutex_attr);\n            if (status != 0)\n            {\n                OS_DEBUG(\"Error: Mutex could not be created: %s\\n\", strerror(status));\n                return_code = OS_ERROR;\n                break;\n            }\n        }\n\n        /*\n         * Pre-calculate the clock tick to microsecond conversion factor.\n         */\n        OS_SharedGlobalVars.TicksPerSecond = sysconf(_SC_CLK_TCK);\n        if (OS_SharedGlobalVars.TicksPerSecond <= 0)\n        {\n            OS_DEBUG(\"Error: Unable to determine OS ticks per second: %s\\n\", strerror(errno));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /*\n         * Calculate microseconds per tick\n         *  - If the ratio is not an integer, this will round to the nearest integer value\n         *  - This is used internally for reporting accuracy,\n         *  - TicksPerSecond values over 2M will return zero\n         */\n        OS_SharedGlobalVars.MicroSecPerTick =\n            (1000000 + (OS_SharedGlobalVars.TicksPerSecond / 2)) / OS_SharedGlobalVars.TicksPerSecond;\n    } while (0);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_Posix_TimeBaseAPI_Impl_Init code.\n",
  "test_code": "int32 OS_Posix_TimeBaseAPI_Impl_Init(void)\n{\n    int                 status;\n    osal_index_t        idx;\n    pthread_mutexattr_t mutex_attr;\n    struct timespec     clock_resolution;\n    int32               return_code;\n\n    /* Probe log file for control-flow/state tracing */\n    FILE *probe_log = fopen(\"/tmp/logs/546.txt\", \"a\");\n    if (probe_log)\n    {\n        fprintf(probe_log, \"\\n---- OS_Posix_TimeBaseAPI_Impl_Init ENTRY ----\\n\");\n    }\n\n    return_code = OS_SUCCESS;\n\n    do\n    {\n        /*\n        ** Mark all timers as available\n        */\n        memset(OS_impl_timebase_table, 0, sizeof(OS_impl_timebase_table));\n        if (probe_log)\n        {\n            fprintf(probe_log, \"memset: OS_impl_timebase_table zeroed\\n\");\n        }\n\n        /*\n        ** get the resolution of the selected clock\n        */\n        status = clock_getres(OS_PREFERRED_CLOCK, &clock_resolution);\n        if (status != 0)\n        {\n            /* Capture errno and strerror for evidence. Note: original code calls OS_DEBUG which may be defined empty. */\n            int saved_errno = errno;\n            const char *errstr = strerror(saved_errno);\n            if (probe_log)\n            {\n                fprintf(probe_log, \"clock_getres failed: status=%d, errno=%d, strerror=\\\"%s\\\"\\n\",\n                        status, saved_errno, (errstr ? errstr : \"(null)\"));\n                fprintf(probe_log, \"Note: original source called OS_DEBUG(..., strerror(errno)); if OS_DEBUG expands to nothing then strerror would not be evaluated.\\n\");\n            }\n\n            OS_DEBUG(\"failed in clock_getres: %s\\n\", strerror(errno));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        if (probe_log)\n        {\n            fprintf(probe_log, \"clock_getres succeeded: tv_sec=%ld, tv_nsec=%ld\\n\",\n                    (long)clock_resolution.tv_sec, (long)clock_resolution.tv_nsec);\n        }\n\n        /*\n        ** Convert to microseconds\n        ** Note that the resolution MUST be in the sub-second range, if not then\n        ** it looks like the POSIX timer API in the C library is broken.\n        ** Note for any flavor of RTOS we would expect <= 1ms.  Even a \"desktop\"\n        ** linux or development system should be <= 100ms absolute worst-case.\n        */\n        if (clock_resolution.tv_sec > 0)\n        {\n            if (probe_log)\n            {\n                fprintf(probe_log, \"clock_resolution.tv_sec > 0 -> internal error, setting return_code=OS_TIMER_ERR_INTERNAL\\n\");\n            }\n            return_code = OS_TIMER_ERR_INTERNAL;\n            break;\n        }\n\n        /* Round to the nearest microsecond */\n        POSIX_GlobalVars.ClockAccuracyNsec = (uint32)(clock_resolution.tv_nsec);\n        if (probe_log)\n        {\n            fprintf(probe_log, \"ClockAccuracyNsec set to %u nsec\\n\", POSIX_GlobalVars.ClockAccuracyNsec);\n        }\n\n        /*\n        ** initialize the attribute with default values\n        */\n        status = pthread_mutexattr_init(&mutex_attr);\n        if (status != 0)\n        {\n            /* pthread functions return error codes, capture and log them */\n            const char *errstr = strerror(status);\n            if (probe_log)\n            {\n                fprintf(probe_log, \"pthread_mutexattr_init failed: status=%d, strerror=\\\"%s\\\"\\n\",\n                        status, (errstr ? errstr : \"(null)\"));\n            }\n\n            OS_DEBUG(\"Error: pthread_mutexattr_init failed: %s\\n\", strerror(status));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        if (probe_log)\n        {\n            fprintf(probe_log, \"pthread_mutexattr_init succeeded\\n\");\n        }\n\n        /*\n        ** Allow the mutex to use priority inheritance\n        */\n        status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n        if (status != 0)\n        {\n            const char *errstr = strerror(status);\n            if (probe_log)\n            {\n                fprintf(probe_log, \"pthread_mutexattr_setprotocol failed: status=%d, strerror=\\\"%s\\\"\\n\",\n                        status, (errstr ? errstr : \"(null)\"));\n            }\n\n            OS_DEBUG(\"Error: pthread_mutexattr_setprotocol failed: %s\\n\", strerror(status));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        if (probe_log)\n        {\n            fprintf(probe_log, \"pthread_mutexattr_setprotocol succeeded\\n\");\n        }\n\n        for (idx = 0; idx < OS_MAX_TIMEBASES; ++idx)\n        {\n            /*\n            ** create the timebase sync mutex\n            ** This gives a mechanism to synchronize updates to the timer chain with the\n            ** expiration of the timer and processing the chain.\n            */\n            status = pthread_mutex_init(&OS_impl_timebase_table[idx].handler_mutex, &mutex_attr);\n            if (status != 0)\n            {\n                const char *errstr = strerror(status);\n                if (probe_log)\n                {\n                    fprintf(probe_log, \"pthread_mutex_init failed at idx=%u: status=%d, strerror=\\\"%s\\\"\\n\",\n                            (unsigned)idx, status, (errstr ? errstr : \"(null)\"));\n                }\n\n                OS_DEBUG(\"Error: Mutex could not be created: %s\\n\", strerror(status));\n                return_code = OS_ERROR;\n                break;\n            }\n            else if (probe_log)\n            {\n                fprintf(probe_log, \"pthread_mutex_init succeeded at idx=%u\\n\", (unsigned)idx);\n            }\n        }\n\n        /* If loop broke out due to mutex init failure, propagate break */\n        if (return_code != OS_SUCCESS)\n        {\n            /* ensure we note this before breaking out of do/while */\n            if (probe_log)\n            {\n                fprintf(probe_log, \"Exiting loop due to earlier error, return_code=%d\\n\", return_code);\n            }\n            break;\n        }\n\n        /*\n         * Pre-calculate the clock tick to microsecond conversion factor.\n         */\n        OS_SharedGlobalVars.TicksPerSecond = sysconf(_SC_CLK_TCK);\n        if (probe_log)\n        {\n            fprintf(probe_log, \"sysconf(_SC_CLK_TCK) returned %ld\\n\", (long)OS_SharedGlobalVars.TicksPerSecond);\n        }\n\n        if (OS_SharedGlobalVars.TicksPerSecond <= 0)\n        {\n            int saved_errno = errno;\n            const char *errstr = strerror(saved_errno);\n            if (probe_log)\n            {\n                fprintf(probe_log, \"TicksPerSecond invalid: %ld, errno=%d, strerror=\\\"%s\\\"\\n\",\n                        (long)OS_SharedGlobalVars.TicksPerSecond, saved_errno, (errstr ? errstr : \"(null)\"));\n            }\n\n            OS_DEBUG(\"Error: Unable to determine OS ticks per second: %s\\n\", strerror(errno));\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /*\n         * Calculate microseconds per tick\n         *  - If the ratio is not an integer, this will round to the nearest integer value\n         *  - This is used internally for reporting accuracy,\n         *  - TicksPerSecond values over 2M will return zero\n         */\n        OS_SharedGlobalVars.MicroSecPerTick =\n            (1000000 + (OS_SharedGlobalVars.TicksPerSecond / 2)) / OS_SharedGlobalVars.TicksPerSecond;\n\n        if (probe_log)\n        {\n            fprintf(probe_log, \"MicroSecPerTick calculated: %lu\\n\", (unsigned long)OS_SharedGlobalVars.MicroSecPerTick);\n        }\n    } while (0);\n\n    if (probe_log)\n    {\n        fprintf(probe_log, \"FINAL return_code=%d, TicksPerSecond=%ld, MicroSecPerTick=%lu\\n\",\n                return_code,\n                (long)OS_SharedGlobalVars.TicksPerSecond,\n                (unsigned long)OS_SharedGlobalVars.MicroSecPerTick);\n        fprintf(probe_log, \"---- OS_Posix_TimeBaseAPI_Impl_Init EXIT ----\\n\");\n        fclose(probe_log);\n    }\n\n    return return_code;\n}\n"
}