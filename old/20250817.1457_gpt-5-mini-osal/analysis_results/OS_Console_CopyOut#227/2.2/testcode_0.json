{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe initial assignment \"return_code = OS_ERROR;\" is dead because every path that exits the while(true) loop assigns return_code (either OS_SUCCESS when the string terminator is found, or OS_QUEUE_FULL on buffer full) before the break. The value set by the initial assignment is never observed; removing it would not change program behaviour, so this statement violates Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_Console_CopyOut code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1818.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_Console_CopyOut as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_Console_CopyOut:\n```c\nstatic int32 OS_Console_CopyOut(OS_console_internal_record_t *console, const char *Str, size_t *NextWritePos)\n{\n    const char *pmsg;\n    size_t      WriteOffset;\n    int32       return_code;\n\n    return_code = OS_ERROR;\n    pmsg        = Str;\n    WriteOffset = *NextWritePos;\n    while (true)\n    {\n        if (*pmsg == 0)\n        {\n            /* String is complete */\n            *NextWritePos = WriteOffset;\n            return_code   = OS_SUCCESS;\n            break;\n        }\n        console->BufBase[WriteOffset] = *pmsg;\n        WriteOffset                   = WriteOffset + 1;\n        if (WriteOffset >= console->BufSize)\n        {\n            WriteOffset = 0;\n        }\n\n        if (WriteOffset == console->ReadPos)\n        {\n            /* out of space */\n            return_code = OS_QUEUE_FULL;\n            break;\n        }\n\n        ++pmsg;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_Console_CopyOut code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helper to log to /tmp/logs/1818.txt. This preserves original logic; it only appends\n   human-readable traces of control flow and key state variables. */\nstatic void OS_Console_LogProbe(const char *msg)\n{\n    FILE *f;\n    /* Ensure directory exists; ignore errors if it already does. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/1818.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Logging is best-effort and must not affect original control flow. */\n    }\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\nstatic void OS_Console_LogState(const char *stage, const void *pmsg, int curchar, size_t WriteOffset, size_t ReadPos, size_t BufSize, int return_code, size_t NextWritePosVal)\n{\n    FILE *f;\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/1818.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    fprintf(f, \"[OS_Console_CopyOut] %s: pmsg=%p char=0x%02X ('%c') WriteOffset=%zu ReadPos=%zu BufSize=%zu return_code=%d NextWritePos=*NextWritePos=%zu\\n\",\n            stage, pmsg, (unsigned)(curchar & 0xFF), (curchar >= 32 && curchar < 127) ? (char)curchar : '?', WriteOffset, ReadPos, BufSize, return_code, NextWritePosVal);\n    fclose(f);\n}\n\n/* Original function with logging probes inserted. */\nstatic int32 OS_Console_CopyOut(OS_console_internal_record_t *console, const char *Str, size_t *NextWritePos)\n{\n    const char *pmsg;\n    size_t      WriteOffset;\n    int32       return_code;\n\n    /* Log entry */\n    {\n        char buf[256];\n        size_t nextVal = (NextWritePos != NULL) ? *NextWritePos : (size_t)0;\n        int firstchar = (Str && Str[0]) ? (int)Str[0] : 0;\n        snprintf(buf, sizeof(buf), \"ENTRY: Str=%p first_char=0x%02X NextWritePos_ptr=%p initial_NextWritePos=%zu\", (const void*)Str, (unsigned)(firstchar & 0xFF), (const void*)NextWritePos, nextVal);\n        OS_Console_LogProbe(buf);\n    }\n\n    return_code = OS_ERROR;\n    /* Log the initial assignment which the violation report claims is dead. */\n    OS_Console_LogState(\"after_initial_assign\", (const void*)Str, (Str && Str[0]) ? (int)Str[0] : 0, (size_t)0, (size_t)0, (size_t)0, (int)return_code, (NextWritePos != NULL) ? *NextWritePos : 0);\n\n    pmsg        = Str;\n    WriteOffset = *NextWritePos;\n    while (true)\n    {\n        /* Log top-of-loop state */\n        OS_Console_LogState(\"loop_top\", (const void*)pmsg, (pmsg && *pmsg) ? (int)(*pmsg) : 0, WriteOffset, console->ReadPos, console->BufSize, (int)return_code, *NextWritePos);\n\n        if (*pmsg == 0)\n        {\n            /* String is complete */\n            *NextWritePos = WriteOffset;\n            return_code   = OS_SUCCESS;\n            OS_Console_LogState(\"string_complete_assigned_success\", (const void*)pmsg, 0, WriteOffset, console->ReadPos, console->BufSize, (int)return_code, *NextWritePos);\n            break;\n        }\n        console->BufBase[WriteOffset] = *pmsg;\n        OS_Console_LogState(\"wrote_char\", (const void*)pmsg, (int)(*pmsg), WriteOffset, console->ReadPos, console->BufSize, (int)return_code, *NextWritePos);\n\n        WriteOffset                   = WriteOffset + 1;\n        if (WriteOffset >= console->BufSize)\n        {\n            WriteOffset = 0;\n            OS_Console_LogState(\"wrapped_writeoffset\", (const void*)pmsg, (int)(*pmsg), WriteOffset, console->ReadPos, console->BufSize, (int)return_code, *NextWritePos);\n        }\n\n        if (WriteOffset == console->ReadPos)\n        {\n            /* out of space */\n            return_code = OS_QUEUE_FULL;\n            OS_Console_LogState(\"buffer_full_assigned_queue_full\", (const void*)pmsg, (int)(*pmsg), WriteOffset, console->ReadPos, console->BufSize, (int)return_code, *NextWritePos);\n            break;\n        }\n\n        ++pmsg;\n    }\n\n    /* Log exit state and the returned code */\n    OS_Console_LogState(\"exit\", (const void*)pmsg, (pmsg && *pmsg) ? (int)(*pmsg) : 0, WriteOffset, console->ReadPos, console->BufSize, (int)return_code, *NextWritePos);\n\n    return return_code;\n}\n"
}