{
  "user_message": "An agent A claimed that the following OS_FileSys_FindVirtMountPoint code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileSys_FindVirtMountPoint.\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The parameter ref is declared as void *ref (non-const) but is immediately cast to const char * and only read (used with strncmp and indexing). The pointer should be declared const (e.g. const void *ref or const char *ref) to reflect that the function does not modify the pointed-to data.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\ntypedef int OS_object_token_t;\nstruct OS_common_record\n{\n    /* placeholder for the real common record */\n    int dummy;\n};\ntypedef struct OS_common_record\n{\n    /* placeholder for the real common record */\n    int dummy;\n} OS_common_record_t;\nstruct OS_filesys_internal_record\n{\n    uint32_t flags;\n    char     virtual_mountpt[64];\n};\ntypedef struct OS_filesys_internal_record\n{\n    uint32_t flags;\n    char     virtual_mountpt[64];\n} OS_filesys_internal_record_t;\nstatic const uint32_t OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL = 0x1u;\nstatic size_t OS_strnlen(const char *s, size_t maxlen)\n{\n    /* Use the C library strnlen if available; otherwise fall back. */\n#if defined(__STDC_LIB_EXT1__) || defined(_GNU_SOURCE) || defined(__APPLE__)\n    return strnlen(s, maxlen);\n#else\n    size_t i;\n    for (i = 0; i < maxlen && s[i] != '\\0'; ++i) {}\n    return i;\n#endif\n}\nstatic OS_filesys_internal_record_t *OS_object_table_get(OS_filesys_internal_record_t *table,\n                                                         OS_object_token_t token)\n{\n    if (token < 0)\n    {\n        /* Guard: return first entry if invalid token */\n        return &table[0];\n    }\n\n    /* Bound token to table size for safety in this test harness. */\n    if ((size_t)token >= (sizeof(OS_filesys_table) / sizeof(OS_filesys_table[0])))\n    {\n        return &table[0];\n    }\n\n    return &table[token];\n}\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1403.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    /* Log entry and key inputs. Do not modify data. */\n    log_probe(\"ENTER: OS_FileSys_FindVirtMountPoint ref=%p token=%p obj=%p\", ref, (void *)token, (const void *)obj);\n\n    /* Obtain the filesys record from the table (replaces the original macro). */\n    filesys = OS_object_table_get(OS_filesys_table, *token);\n\n    log_probe(\"filesys addr=%p flags=0x%08x virtual_mountpt=\\\"%s\\\"\",\n              (void *)filesys, (unsigned)filesys->flags, filesys->virtual_mountpt);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        log_probe(\"EXIT: not mounted virtual (flags=0x%08x) -> false\", (unsigned)filesys->flags);\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    log_probe(\"computed mplen=%zu sizeof(virtual_mountpt)=%zu\", mplen, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* Log which condition caused the mismatch for reproducibility. */\n        if (mplen == 0)\n        {\n            log_probe(\"EXIT: mplen==0 -> false\");\n        }\n        else if (mplen >= sizeof(filesys->virtual_mountpt))\n        {\n            log_probe(\"EXIT: mplen >= sizeof(virtual_mountpt) (%zu >= %zu) -> false\", mplen, sizeof(filesys->virtual_mountpt));\n        }\n        else\n        {\n            /* Log a safe prefix of target as evidence (avoid reading beyond). */\n            char targ_preview[80];\n            size_t copylen = (mplen < (sizeof(targ_preview) - 1)) ? mplen : (sizeof(targ_preview) - 1);\n            if (target != NULL)\n            {\n                memcpy(targ_preview, target, copylen);\n            }\n            targ_preview[copylen] = '\\0';\n            log_probe(\"EXIT: strncmp mismatch (target_prefix=\\\"%s\\\") -> false\", targ_preview);\n        }\n\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    bool result = (target[mplen] == '/' || target[mplen] == 0);\n\n    log_probe(\"FINAL CHECK: target[%zu] = '\\%c' (0x%02x) -> result=%s\",\n              mplen,\n              (target[mplen] == 0) ? '0' : target[mplen],\n              (unsigned char)target[mplen],\n              result ? \"true\" : \"false\");\n\n    log_probe(\"EXIT: OS_FileSys_FindVirtMountPoint -> %s\", result ? \"true\" : \"false\");\n\n    return result;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In the provided code the parameter ref is declared as void * (non-const) but is only used for read-only operations (it is immediately cast to const char * and only passed to strncmp and indexed). MISRA C 2023 Rule 8.13 requires pointer types to be const-qualified whenever possible; here the pointed-to object is not modified, so the parameter should be declared with a const qualifier (for example const void *ref or const char *ref). The only caveat is an external API/ callback signature requirement: if the function must match an existing non-const prototype (e.g. a generic iterator callback) then the non-const declaration may be necessary and the violation can be justified/documented. Absent such a constraint, the code violates Rule 8.13 and should be changed."
}