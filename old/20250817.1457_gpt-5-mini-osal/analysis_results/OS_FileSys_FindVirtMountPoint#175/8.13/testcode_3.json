{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter ref is declared as void *ref (non-const) but is immediately cast to const char * and only read (used with strncmp and indexing). The pointer should be declared const (e.g. const void *ref or const char *ref) to reflect that the function does not modify the pointed-to data.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_FindVirtMountPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1403.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_FindVirtMountPoint:\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_FindVirtMountPoint code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdarg.h>\n\n/* Minimal type stubs and table to make this function compilable and executable\n * in isolation for testing purposes. These are simple stand-ins and are not\n * intended to mirror the full original environment. */\n\ntypedef int OS_object_token_t;\n\ntypedef struct\n{\n    /* placeholder for the real common record */\n    int dummy;\n} OS_common_record_t;\n\ntypedef struct\n{\n    uint32_t flags;\n    char     virtual_mountpt[64];\n} OS_filesys_internal_record_t;\n\n/* Simple in-memory table for filesys records used by the helper accessor. */\nstatic OS_filesys_internal_record_t OS_filesys_table[16];\n\n/* Flag bit used in the original logic. */\nstatic const uint32_t OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL = 0x1u;\n\n/* Small wrapper around strnlen to match the original usage. */\nstatic size_t OS_strnlen(const char *s, size_t maxlen)\n{\n    return strnlen(s, maxlen);\n}\n\n/* Helper accessor that replaces the macro OS_OBJECT_TABLE_GET used in the\n * original code. Kept as a function to avoid introducing macros. */\nstatic OS_filesys_internal_record_t *OS_object_table_get(OS_filesys_internal_record_t *table,\n                                                         OS_object_token_t token)\n{\n    if (token < 0)\n    {\n        /* Guard: return first entry if invalid token */\n        return &table[0];\n    }\n\n    /* Bound token to table size for safety in this test harness. */\n    if ((size_t)token >= (sizeof(OS_filesys_table) / sizeof(OS_filesys_table[0])))\n    {\n        return &table[0];\n    }\n\n    return &table[token];\n}\n\n/* Simple logging probe that appends textual information to /tmp/logs/1403.txt.\n * It is intentionally lightweight and safe: if the file cannot be opened it\n * silently returns. */\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1403.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified function with logging probes inserted. The original logic is\n * preserved exactly; probes only record control flow and state. */\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    /* Log entry and key inputs. Do not modify data. */\n    log_probe(\"ENTER: OS_FileSys_FindVirtMountPoint ref=%p token=%p obj=%p\", ref, (void *)token, (const void *)obj);\n\n    /* Obtain the filesys record from the table (replaces the original macro). */\n    filesys = OS_object_table_get(OS_filesys_table, *token);\n\n    log_probe(\"filesys addr=%p flags=0x%08x virtual_mountpt=\\\"%s\\\"\",\n              (void *)filesys, (unsigned)filesys->flags, filesys->virtual_mountpt);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        log_probe(\"EXIT: not mounted virtual (flags=0x%08x) -> false\", (unsigned)filesys->flags);\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    log_probe(\"computed mplen=%zu sizeof(virtual_mountpt)=%zu\", mplen, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* Log which condition caused the mismatch for reproducibility. */\n        if (mplen == 0)\n        {\n            log_probe(\"EXIT: mplen==0 -> false\");\n        }\n        else if (mplen >= sizeof(filesys->virtual_mountpt))\n        {\n            log_probe(\"EXIT: mplen >= sizeof(virtual_mountpt) (%zu >= %zu) -> false\", mplen, sizeof(filesys->virtual_mountpt));\n        }\n        else\n        {\n            /* Log a safe prefix of target as evidence (avoid reading beyond). */\n            char targ_preview[80];\n            size_t copylen = (mplen < (sizeof(targ_preview) - 1)) ? mplen : (sizeof(targ_preview) - 1);\n            if (target != NULL)\n            {\n                memcpy(targ_preview, target, copylen);\n            }\n            targ_preview[copylen] = '\\0';\n            log_probe(\"EXIT: strncmp mismatch (target_prefix=\\\"%s\\\") -> false\", targ_preview);\n        }\n\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    bool result = (target[mplen] == '/' || target[mplen] == 0);\n\n    log_probe(\"FINAL CHECK: target[%zu] = '\\%c' (0x%02x) -> result=%s\",\n              mplen,\n              (target[mplen] == 0) ? '0' : target[mplen],\n              (unsigned char)target[mplen],\n              result ? \"true\" : \"false\");\n\n    log_probe(\"EXIT: OS_FileSys_FindVirtMountPoint -> %s\", result ? \"true\" : \"false\");\n\n    return result;\n}\n"
}