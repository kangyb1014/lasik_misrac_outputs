{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter ref is declared as void * (non-const) and is then cast to const char *: const char *target = (const char *)ref; MISRA 8.13 expects pointers to be const-qualified when possible. The correct approach is to declare the parameter as const void *ref (or const char *ref) and then use const char *target = ref; \u2014 this avoids the cast and ensures the pointer is const-qualified throughout.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_FindVirtMountPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1403.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_FindVirtMountPoint:\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_FindVirtMountPoint code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdbool.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdarg.h>\n\n/* Minimal type stubs to make this function compilable for testing. */\ntypedef uint32_t OS_object_token_t;\ntypedef struct OS_common_record { int dummy; } OS_common_record_t;\n\n/* Internal filesys record used by OS_FileSys_FindVirtMountPoint. */\ntypedef struct\n{\n    uint32_t flags;\n    char     virtual_mountpt[64];\n} OS_filesys_internal_record_t;\n\n/* A small table to emulate OS_filesys_table. In real code this would be provided by the OS. */\nstatic OS_filesys_internal_record_t OS_filesys_table[16];\n\n/* Constant indicating a virtual mount flag (use a const variable, not a macro). */\nstatic const uint32_t OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL = 1u;\n\n/* Replacement for the OS_OBJECT_TABLE_GET macro from the original code. */\nstatic OS_filesys_internal_record_t *OS_OBJECT_TABLE_GET(OS_filesys_internal_record_t *table, OS_object_token_t idx)\n{\n    /* For safety clamp index into table size. */\n    if (idx >= (sizeof(OS_filesys_table) / sizeof(OS_filesys_table[0])))\n    {\n        return NULL;\n    }\n    return &table[idx];\n}\n\n/* Simple bounded strlen replica for portability (same semantics as strnlen). */\nstatic size_t OS_strnlen(const char *s, size_t maxlen)\n{\n    const char *end = (const char *)memchr(s, '\\0', maxlen);\n    return (end != NULL) ? (size_t)(end - s) : maxlen;\n}\n\n/* Lightweight logging helper that appends messages to /tmp/logs/1403.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/1403.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* If we cannot open the log file, do not alter program flow. */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', fp);\n    fclose(fp);\n}\n\n/*\n * Modified OS_FileSys_FindVirtMountPoint with logging probes to capture the\n * control flow and the state relevant to the MISRA 8.13 violation scenario.\n * The function signature is intentionally unchanged (void *ref) to reproduce\n * the reported situation where a non-const pointer is cast to const char *.\n */\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref; /* intentional cast to reproduce scenario */\n    size_t                        mplen;\n\n    /* Log entry and pointer information */\n    probe_log(\"ENTER: OS_FileSys_FindVirtMountPoint ref=%p token=%p obj=%p\", ref, (const void *)token, (const void *)obj);\n    probe_log(\"CAST: ref (void*) -> target (const char*) address=%p\", (const void *)target);\n\n    /* Fetch filesys from table */\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n    probe_log(\"LOOKUP: token value=%u filesys_ptr=%p\", (unsigned int)(*token), (const void *)filesys);\n\n    if (filesys == NULL)\n    {\n        probe_log(\"FAIL: filesys lookup returned NULL\");\n        return false;\n    }\n\n    /* Log filesys state */\n    probe_log(\"FILESYS: flags=0x%08X virtual_mountpt=\\\"%s\\\"\", (unsigned int)filesys->flags, filesys->virtual_mountpt);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        probe_log(\"CHECK: not mounted virtual (flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0 -> returning false\");\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n    probe_log(\"MPLEN: computed mplen=%zu (sizeof(virtual_mountpt)=%zu)\", mplen, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        probe_log(\"SUBSTRING CHECK: failed (mplen==0 || mplen>=size || strncmp != 0) -> returning false. target_prefix=\\\"%.*s\\\"\",\n                  (int)mplen, target);\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     */\n    {\n        char next_char = target[mplen];\n        bool result = (next_char == '/' || next_char == 0);\n        probe_log(\"FINAL CHECK: target[%zu]=0x%02X ('%c') -> returning %s\",\n                  mplen,\n                  (unsigned int)(unsigned char)next_char,\n                  (next_char >= 32 && next_char < 127) ? next_char : '?',\n                  result ? \"true\" : \"false\");\n        return result;\n    }\n}\n"
}