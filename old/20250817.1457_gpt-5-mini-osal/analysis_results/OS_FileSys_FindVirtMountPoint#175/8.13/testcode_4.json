{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'filesys' is declared as a mutable pointer (OS_filesys_internal_record_t *filesys) but in OS_FileSys_FindVirtMountPoint it is only used for reading (flags and virtual_mountpt). Since it points into the global OS_filesys_table and no modification is performed, it should be a pointer to const (const OS_filesys_internal_record_t *filesys). Assigning the non-const return of OS_OBJECT_TABLE_GET to a const-qualified pointer is allowed, so the current non-const declaration violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_FindVirtMountPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1403.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_FindVirtMountPoint:\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_FindVirtMountPoint code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helper: append diagnostic information to a log file for reproduction.\n * This function intentionally does not change any program state; it only\n * reads the objects and writes traces to /tmp/logs/1403.txt so other agents\n * can observe the control flow and values leading to the decision points.\n */\nstatic void OS_FileSys_FindVirtMountPoint_log(const char *stage,\n                                              const void *filesys_ptr,\n                                              unsigned long flags,\n                                              const char *virtual_mountpt,\n                                              size_t virtual_size,\n                                              const char *target,\n                                              size_t mplen)\n{\n    FILE *f = fopen(\"/tmp/logs/1403.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging only */\n    }\n\n    fprintf(f, \"[OS_FileSys_FindVirtMountPoint] stage=%s\\n\", stage);\n    fprintf(f, \"  filesys_ptr=%p flags=0x%08lx\\n\", filesys_ptr, flags);\n    fprintf(f, \"  virtual_mountpt='%s' (maxsize=%zu)\\n\",\n            (virtual_mountpt != NULL) ? virtual_mountpt : \"(null)\", virtual_size);\n    fprintf(f, \"  target='%s' mplen=%zu\\n\",\n            (target != NULL) ? target : \"(null)\", mplen);\n    fprintf(f, \"----\\n\");\n\n    fclose(f);\n}\n\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    /* Fetch record from global table (same as original logic) */\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Log state immediately after obtaining the filesys pointer */\n    OS_FileSys_FindVirtMountPoint_log(\"after_get\",\n                                      (const void *)filesys,\n                                      (unsigned long)filesys->flags,\n                                      filesys->virtual_mountpt,\n                                      sizeof(filesys->virtual_mountpt),\n                                      target,\n                                      0u);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        OS_FileSys_FindVirtMountPoint_log(\"not_mounted_virtual\",\n                                          (const void *)filesys,\n                                          (unsigned long)filesys->flags,\n                                          filesys->virtual_mountpt,\n                                          sizeof(filesys->virtual_mountpt),\n                                          target,\n                                          0u);\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /* Log after computing the mount point length */\n    OS_FileSys_FindVirtMountPoint_log(\"after_mplen\",\n                                      (const void *)filesys,\n                                      (unsigned long)filesys->flags,\n                                      filesys->virtual_mountpt,\n                                      sizeof(filesys->virtual_mountpt),\n                                      target,\n                                      mplen);\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* Log which condition caused the non-match */\n        OS_FileSys_FindVirtMountPoint_log(\n            (mplen == 0) ? \"mplen_zero\" :\n            (mplen >= sizeof(filesys->virtual_mountpt)) ? \"mplen_too_large\" :\n            \"strncmp_mismatch\",\n            (const void *)filesys,\n            (unsigned long)filesys->flags,\n            filesys->virtual_mountpt,\n            sizeof(filesys->virtual_mountpt),\n            target,\n            mplen);\n\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    {\n        bool result = (target[mplen] == '/' || target[mplen] == 0);\n        OS_FileSys_FindVirtMountPoint_log(result ? \"final_match\" : \"final_no_match\",\n                                          (const void *)filesys,\n                                          (unsigned long)filesys->flags,\n                                          filesys->virtual_mountpt,\n                                          sizeof(filesys->virtual_mountpt),\n                                          target,\n                                          mplen);\n        return result;\n    }\n}\n"
}