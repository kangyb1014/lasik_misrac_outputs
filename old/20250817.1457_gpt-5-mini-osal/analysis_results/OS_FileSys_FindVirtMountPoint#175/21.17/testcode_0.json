{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. If filesys->virtual_mountpt is a shorter NUL-terminated string of length mplen (0 < mplen < sizeof(filesys->virtual_mountpt)) but the provided target buffer is shorter than mplen, the call strncmp(target, filesys->virtual_mountpt, mplen) will read up to mplen bytes from target and can access beyond the bounds of the target object. Example: filesys->virtual_mountpt == \"abcd\" (mplen == 4) and target points to the string \"ab\\0\" (allocated length 3). strncmp(target, ..., 4) will read target[2] and target[3] out of bounds (and the subsequent access target[mplen] is also out-of-bounds). This violates MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_FindVirtMountPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1407.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_FindVirtMountPoint:\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_FindVirtMountPoint code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdbool.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe / logging helper. Appends human-readable logs to /tmp/logs/1407.txt. */\nstatic void OS_FileSys_LogProbe(const char *fmt, ...)\n{\n    va_list args;\n    FILE *f = fopen(\"/tmp/logs/1407.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    va_end(args);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\n/*\n * Modified OS_FileSys_FindVirtMountPoint with inserted logging probes.\n * The original control flow and logic are preserved. Logging is placed\n * around the key operations that can lead to the out-of-bounds access\n * described in the violation scenario.\n */\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Log entry and basic state */\n    OS_FileSys_LogProbe(\"ENTER: OS_FileSys_FindVirtMountPoint; filesys=%p, token=%p, ref(target)=%p\",\n                        (void *)filesys, (const void *)token, (const void *)ref);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        OS_FileSys_LogProbe(\"EXIT: not a virtual mount (flags=0x%08x)\", (unsigned)filesys->flags);\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /* Log computed mount point length and the mount point string (safe: within array bound) */\n    OS_FileSys_LogProbe(\"virtual_mountpt=<%s>, sizeof= %zu, mplen=%zu\",\n                        filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt), mplen);\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt))\n    {\n        OS_FileSys_LogProbe(\"mplen check failed: mplen==%zu or mplen>=sizeof => not a match\", mplen);\n        return false;\n    }\n\n    /*\n     * Log that we are about to compare target against virtual_mountpt with n = mplen.\n     * This documents that strncmp will attempt to read mplen bytes from target.\n     */\n    OS_FileSys_LogProbe(\"About to call strncmp(target=%p, virtual_mountpt, n=%zu)\", (const void *)target, mplen);\n\n    /* Perform the original comparison (this is the call that may read up to mplen bytes from target). */\n    int cmp = strncmp(target, filesys->virtual_mountpt, mplen);\n\n    OS_FileSys_LogProbe(\"strncmp returned %d (0 means match for first %zu bytes)\", cmp, mplen);\n\n    if (cmp != 0)\n    {\n        OS_FileSys_LogProbe(\"not a substring: cmp!=0 => no match\");\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    /* Read the character at target[mplen] once (same as original), log it and compute return. */\n    char ch = target[mplen]; /* NOTE: this access is present in the original code and may be out-of-bounds */\n    bool result = (ch == '/' || ch == 0);\n\n    OS_FileSys_LogProbe(\"target[%zu] char=0x%02x ('%c' if printable), final result=%s\",\n                        mplen, (unsigned char)ch, (ch >= 32 && ch < 127) ? ch : '?', result ? \"true\" : \"false\");\n\n    OS_FileSys_LogProbe(\"EXIT: OS_FileSys_FindVirtMountPoint returning %s\", result ? \"true\" : \"false\");\n\n    return result;\n}\n"
}