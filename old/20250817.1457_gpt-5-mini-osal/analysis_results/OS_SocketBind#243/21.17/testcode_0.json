{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call to strcmp(TypeName, StubPtr->Data.Buff.ContentTypeStr) has no null or length checks for either operand. If either pointer is NULL or points to a non\u2011NUL\u2011terminated buffer (for example, a caller passed NULL as TypeName or a previously registered ContentTypeStr is NULL or not terminated), strcmp will read beyond the bounds (or dereference NULL), causing out\u2011of\u2011bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketBind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1951.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketBind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketBind:\n```c\nint32 OS_SocketBind(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    int32 return_code;\n\n    return_code = OS_SocketBindAddress(sock_id, Addr);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketListen(sock_id);\n        if (return_code == OS_ERR_INCORRECT_OBJ_TYPE)\n        {\n            /* This one is OK, it happens if the socket is a datagram/connectionless\n             * type that does not need to listen().  For backward compatibility, report\n             * success to the caller.\n             */\n            return_code = OS_SUCCESS;\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketBind code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n\n/* Probe logging helper: append control-flow and state information to the log file.\n * This helper intentionally does NOT dereference Addr or other pointers to avoid\n * introducing any additional out-of-bounds/undefined behavior. It only records\n * pointer values and nullness along with return codes and stages.\n */\nstatic void OS_ProbeLog(const char *stage, osal_id_t sock_id, const OS_SockAddr_t *Addr, long rc)\n{\n    FILE *f = fopen(\"/tmp/logs/1951.txt\", \"a\");\n    if (!f)\n    {\n        return; /* Logging is best-effort; do not change program behavior if logging fails */\n    }\n\n    time_t now = time(NULL);\n    fprintf(f, \"%ld: OS_SocketBind stage=%s sock_id=%ld Addr=%p Addr_is_null=%d rc=%ld\\n\",\n            (long)now,\n            stage,\n            (long)sock_id,\n            (void *)Addr,\n            (Addr == NULL) ? 1 : 0,\n            rc);\n\n    fclose(f);\n}\n\nint32 OS_SocketBind(osal_id_t sock_id, const OS_SockAddr_t *Addr)\n{\n    int32 return_code;\n\n    /* Log entry and initial arguments */\n    OS_ProbeLog(\"entry\", sock_id, Addr, -1);\n\n    return_code = OS_SocketBindAddress(sock_id, Addr);\n\n    /* Log result of OS_SocketBindAddress */\n    OS_ProbeLog(\"after_bind_address\", sock_id, Addr, (long)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* About to attempt listen(); record this decision */\n        OS_ProbeLog(\"before_listen_call\", sock_id, Addr, (long)return_code);\n\n        return_code = OS_SocketListen(sock_id);\n\n        /* Log result of OS_SocketListen */\n        OS_ProbeLog(\"after_listen_call\", sock_id, Addr, (long)return_code);\n\n        if (return_code == OS_ERR_INCORRECT_OBJ_TYPE)\n        {\n            /* This one is OK, it happens if the socket is a datagram/connectionless\n             * type that does not need to listen().  For backward compatibility, report\n             * success to the caller.\n             */\n            OS_ProbeLog(\"incorrect_obj_type_converting_to_success\", sock_id, Addr, (long)return_code);\n\n            return_code = OS_SUCCESS;\n\n            /* Log the conversion to success */\n            OS_ProbeLog(\"converted_to_success\", sock_id, Addr, (long)return_code);\n        }\n    }\n\n    /* Final return code log */\n    OS_ProbeLog(\"exit\", sock_id, Addr, (long)return_code);\n\n    return return_code;\n}\n"
}