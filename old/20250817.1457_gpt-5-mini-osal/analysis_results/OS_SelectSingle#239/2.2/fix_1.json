{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nint32 OS_SelectSingle(osal_id_t objid, uint32 *StateFlags, int32 msecs)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Log entry with key parameters to help reproduce the violation scenario. */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1914.txt\", \"a\");\n        if (logf)\n        {\n            time_t now = time(NULL);\n            fprintf(logf, \"[%ld] OS_SelectSingle ENTRY: objid=%\" PRIuPTR \", StateFlags=%p, msecs=%d\\n\",\n                    (long)now, (uintptr_t)objid, (void *)StateFlags, (int)msecs);\n            fclose(logf);\n        }\n    }\n\n    /* check parameters */\n    OS_CHECK_POINTER(StateFlags);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_STREAM, objid, &token);\n\n    /* Log the result of object lookup */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1914.txt\", \"a\");\n        if (logf)\n        {\n            time_t now = time(NULL);\n            fprintf(logf, \"[%ld] OS_ObjectIdGetById returned %d for objid=%\" PRIuPTR \"; token_addr=%p\\n\",\n                    (long)now, (int)return_code, (uintptr_t)objid, (void *)&token);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log state before calling implementation */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1914.txt\", \"a\");\n            if (logf)\n            {\n                time_t now = time(NULL);\n                /* Attempt to log the current StateFlags value if readable */\n                if (StateFlags != NULL)\n                {\n                    fprintf(logf, \"[%ld] Calling OS_SelectSingle_Impl: msecs=%d, StateFlags(before)=%#x\\n\",\n                            (long)now, (int)msecs, (unsigned int)*StateFlags);\n                }\n                else\n                {\n                    fprintf(logf, \"[%ld] Calling OS_SelectSingle_Impl: msecs=%d, StateFlags=NULL\\n\",\n                            (long)now, (int)msecs);\n                }\n                fclose(logf);\n            }\n        }\n\n        return_code = OS_SelectSingle_Impl(&token, StateFlags, msecs);\n\n        /* Log result after implementation call and the state of StateFlags */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1914.txt\", \"a\");\n            if (logf)\n            {\n                time_t now = time(NULL);\n                if (StateFlags != NULL)\n                {\n                    fprintf(logf, \"[%ld] OS_SelectSingle_Impl returned %d; StateFlags(after)=%#x\\n\",\n                            (long)now, (int)return_code, (unsigned int)*StateFlags);\n                }\n                else\n                {\n                    fprintf(logf, \"[%ld] OS_SelectSingle_Impl returned %d; StateFlags=NULL\\n\",\n                            (long)now, (int)return_code);\n                }\n                fclose(logf);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after release and before return */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1914.txt\", \"a\");\n            if (logf)\n            {\n                time_t now = time(NULL);\n                fprintf(logf, \"[%ld] OS_ObjectIdRelease done; returning %d\\n\", (long)now, (int)return_code);\n                fclose(logf);\n            }\n        }\n    }\n    else\n    {\n        /* Log early failure path */\n        FILE *logf = fopen(\"/tmp/logs/1914.txt\", \"a\");\n        if (logf)\n        {\n            time_t now = time(NULL);\n            fprintf(logf, \"[%ld] OS_SelectSingle early return with code %d\\n\", (long)now, (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from /tmp/tmpx361f0vb/src/src/os/shared/src/osapi-select.c:1:\n/tmp/tmpx361f0vb/src/src/os/shared/src/osapi-select.c: In function 'OS_SelectSingle':\n/tmp/tmpx361f0vb/src/src/os/shared/src/osapi-select.c:78:66: error: expected ')' before 'PRIuPTR'\n   78 |             fprintf(logf, \"[%ld] OS_SelectSingle ENTRY: objid=%\" PRIuPTR \", StateFlags=%p, msecs=%d\\n\",\n      |                                                                  ^~~~~~~\n/tmp/tmpx361f0vb/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpx361f0vb/src/src/os/shared/src/osapi-select.c:53:1: note: 'PRIuPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   52 | #include \"os-shared-select.h\"\n  +++ |+#include <inttypes.h>\n   53 | \nIn file included from /tmp/tmpx361f0vb/src/src/os/shared/src/osapi-select.c:1:\n/tmp/tmpx361f0vb/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmpx361f0vb/src/src/os/shared/src/osapi-select.c:78:13: note: in expansion of macro 'fprintf'\n   78 |             fprintf(logf, \"[%ld] OS_SelectSingle ENTRY: objid=%\" PRIuPTR \", StateFlags=%p, msecs=%d\\n\",\n      |             ^~~~~~~\n/tmp/tmpx361f0vb/src/src/os/shared/src/osapi-select.c:95:78: error: expected ')' before 'PRIuPTR'\n   95 |             fprintf(logf, \"[%ld] OS_ObjectIdGetById returned %d for objid=%\" PRIuPTR \"; token_addr=%p\\n\",\n      |                                                                              ^~~~~~~\n/tmp/tmpx361f0vb/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpx361f0vb/src/src/os/shared/src/osapi-select.c:95:78: note: 'PRIuPTR' is defined in header '<inttypes.h>'; did you forget to '#include <inttypes.h>'?\n   95 |             fprintf(logf, \"[%ld] OS_ObjectIdGetById returned %d for objid=%\" PRIuPTR \"; token_addr=%p\\n\",\n      |                                                                              ^~~~~~~\n/tmp/tmpx361f0vb/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:34: note: in definition of macro 'fprintf'\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                  ^~~~~~~~~~~\n/tmp/tmpx361f0vb/src/src/unit-test-coverage/ut-stubs/override_inc/stdio.h:45:33: note: to match this '('\n   45 | #define fprintf(...) OCS_fprintf(__VA_ARGS__)\n      |                                 ^\n/tmp/tmpx361f0vb/src/src/os/shared/src/osapi-select.c:95:13: note: in expansion of macro 'fprintf'\n   95 |             fprintf(logf, \"[%ld] OS_ObjectIdGetById returned %d for objid=%\" PRIuPTR \"; token_addr=%p\\n\",\n      |             ^~~~~~~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-select.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-select.dir/__/__/os/shared/src/osapi-select.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:4159: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-select.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SelectSingle as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <inttypes.h>\n\nint32 OS_SelectSingle(osal_id_t objid, uint32 *StateFlags, int32 msecs)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Log entry with key parameters to help reproduce the violation scenario. */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1914.txt\", \"a\");\n        if (logf)\n        {\n            time_t now = time(NULL);\n            fprintf(logf, \"[%ld] OS_SelectSingle ENTRY: objid=%\" PRIuPTR \", StateFlags=%p, msecs=%d\\n\",\n                    (long)now, (uintptr_t)objid, (void *)StateFlags, (int)msecs);\n            fclose(logf);\n        }\n    }\n\n    /* check parameters */\n    OS_CHECK_POINTER(StateFlags);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_STREAM, objid, &token);\n\n    /* Log the result of object lookup */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1914.txt\", \"a\");\n        if (logf)\n        {\n            time_t now = time(NULL);\n            fprintf(logf, \"[%ld] OS_ObjectIdGetById returned %d for objid=%\" PRIuPTR \"; token_addr=%p\\n\",\n                    (long)now, (int)return_code, (uintptr_t)objid, (void *)&token);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log state before calling implementation */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1914.txt\", \"a\");\n            if (logf)\n            {\n                time_t now = time(NULL);\n                /* Attempt to log the current StateFlags value if readable */\n                if (StateFlags != NULL)\n                {\n                    fprintf(logf, \"[%ld] Calling OS_SelectSingle_Impl: msecs=%d, StateFlags(before)=%#x\\n\",\n                            (long)now, (int)msecs, (unsigned int)*StateFlags);\n                }\n                else\n                {\n                    fprintf(logf, \"[%ld] Calling OS_SelectSingle_Impl: msecs=%d, StateFlags=NULL\\n\",\n                            (long)now, (int)msecs);\n                }\n                fclose(logf);\n            }\n        }\n\n        return_code = OS_SelectSingle_Impl(&token, StateFlags, msecs);\n\n        /* Log result after implementation call and the state of StateFlags */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1914.txt\", \"a\");\n            if (logf)\n            {\n                time_t now = time(NULL);\n                if (StateFlags != NULL)\n                {\n                    fprintf(logf, \"[%ld] OS_SelectSingle_Impl returned %d; StateFlags(after)=%#x\\n\",\n                            (long)now, (int)return_code, (unsigned int)*StateFlags);\n                }\n                else\n                {\n                    fprintf(logf, \"[%ld] OS_SelectSingle_Impl returned %d; StateFlags=NULL\\n\",\n                            (long)now, (int)return_code);\n                }\n                fclose(logf);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after release and before return */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1914.txt\", \"a\");\n            if (logf)\n            {\n                time_t now = time(NULL);\n                fprintf(logf, \"[%ld] OS_ObjectIdRelease done; returning %d\\n\", (long)now, (int)return_code);\n                fclose(logf);\n            }\n        }\n    }\n    else\n    {\n        /* Log early failure path */\n        FILE *logf = fopen(\"/tmp/logs/1914.txt\", \"a\");\n        if (logf)\n        {\n            time_t now = time(NULL);\n            fprintf(logf, \"[%ld] OS_SelectSingle early return with code %d\\n\", (long)now, (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n",
  "explanation": "The compile errors were caused by use of the PRIuPTR printf macro without including <inttypes.h>. I added #include <inttypes.h> at the top of the file. No other logic was changed; the function and all logging remain the same."
}