{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe memset(&ts_end, 0, sizeof(ts_end)); call is in the else branch taken when msecs <= 0. In those cases ts_end is never subsequently read: for msecs < 0 tvptr is set to NULL (ts_end unused) and for msecs == 0 tv is used (ts_end unused). Removing the memset would not change program behaviour, so this executed assignment is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SelectSingle code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1914.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SelectSingle as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SelectSingle:\n```c\nint32 OS_SelectSingle(osal_id_t objid, uint32 *StateFlags, int32 msecs)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* check parameters */\n    OS_CHECK_POINTER(StateFlags);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_STREAM, objid, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SelectSingle_Impl(&token, StateFlags, msecs);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SelectSingle code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdint.h>\n#include <inttypes.h>\n\nint32 OS_SelectSingle(osal_id_t objid, uint32 *StateFlags, int32 msecs)\n{\n    int32             return_code;\n    OS_object_token_t token;\n\n    /* Log entry with key parameters to help reproduce the violation scenario. */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1914.txt\", \"a\");\n        if (logf)\n        {\n            time_t now = time(NULL);\n            fprintf(logf, \"[%ld] OS_SelectSingle ENTRY: objid=%\" PRIuPTR \", StateFlags=%p, msecs=%d\\n\",\n                    (long)now, (uintptr_t)objid, (void *)StateFlags, (int)msecs);\n            fclose(logf);\n        }\n    }\n\n    /* check parameters */\n    OS_CHECK_POINTER(StateFlags);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_STREAM, objid, &token);\n\n    /* Log the result of object lookup */\n    {\n        FILE *logf = fopen(\"/tmp/logs/1914.txt\", \"a\");\n        if (logf)\n        {\n            time_t now = time(NULL);\n            fprintf(logf, \"[%ld] OS_ObjectIdGetById returned %d for objid=%\" PRIuPTR \"; token_addr=%p\\n\",\n                    (long)now, (int)return_code, (uintptr_t)objid, (void *)&token);\n            fclose(logf);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Log state before calling implementation */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1914.txt\", \"a\");\n            if (logf)\n            {\n                time_t now = time(NULL);\n                /* Attempt to log the current StateFlags value if readable */\n                if (StateFlags != NULL)\n                {\n                    fprintf(logf, \"[%ld] Calling OS_SelectSingle_Impl: msecs=%d, StateFlags(before)=%#x\\n\",\n                            (long)now, (int)msecs, (unsigned int)*StateFlags);\n                }\n                else\n                {\n                    fprintf(logf, \"[%ld] Calling OS_SelectSingle_Impl: msecs=%d, StateFlags=NULL\\n\",\n                            (long)now, (int)msecs);\n                }\n                fclose(logf);\n            }\n        }\n\n        return_code = OS_SelectSingle_Impl(&token, StateFlags, msecs);\n\n        /* Log result after implementation call and the state of StateFlags */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1914.txt\", \"a\");\n            if (logf)\n            {\n                time_t now = time(NULL);\n                if (StateFlags != NULL)\n                {\n                    fprintf(logf, \"[%ld] OS_SelectSingle_Impl returned %d; StateFlags(after)=%#x\\n\",\n                            (long)now, (int)return_code, (unsigned int)*StateFlags);\n                }\n                else\n                {\n                    fprintf(logf, \"[%ld] OS_SelectSingle_Impl returned %d; StateFlags=NULL\\n\",\n                            (long)now, (int)return_code);\n                }\n                fclose(logf);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after release and before return */\n        {\n            FILE *logf = fopen(\"/tmp/logs/1914.txt\", \"a\");\n            if (logf)\n            {\n                time_t now = time(NULL);\n                fprintf(logf, \"[%ld] OS_ObjectIdRelease done; returning %d\\n\", (long)now, (int)return_code);\n                fclose(logf);\n            }\n        }\n    }\n    else\n    {\n        /* Log early failure path */\n        FILE *logf = fopen(\"/tmp/logs/1914.txt\", \"a\");\n        if (logf)\n        {\n            time_t now = time(NULL);\n            fprintf(logf, \"[%ld] OS_SelectSingle early return with code %d\\n\", (long)now, (int)return_code);\n            fclose(logf);\n        }\n    }\n\n    return return_code;\n}\n"
}