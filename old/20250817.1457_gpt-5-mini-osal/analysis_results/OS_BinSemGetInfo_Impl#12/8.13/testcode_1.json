{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_BinSemGetInfo_Impl the local variable 'sem' is declared as a non-const pointer (OS_impl_binsem_internal_record_t *sem) but is only used to read the semaphore state (sem->current_value). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. The code fragment 'sem_prop->value = sem->current_value;' reads from the object only, so 'sem' could and should be declared as 'const OS_impl_binsem_internal_record_t *sem' to satisfy the rule. (Conversion from &OS_impl_bin_sem_table[...] to a pointer-to-const is allowed.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/99.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetInfo_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo_Impl:\n```c\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* put the info into the structure */\n    sem_prop->value = sem->current_value;\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetInfo_Impl code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logger: append control-flow and state info to /tmp/logs/99.txt */\nstatic void os_log_probe_binsem_getinfo(const OS_object_token_t *token,\n                                       const OS_impl_binsem_internal_record_t *sem,\n                                       const OS_bin_sem_prop_t *sem_prop)\n{\n    FILE *f = fopen(\"/tmp/logs/99.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_BinSemGetInfo_Impl called\\n\");\n        if (token != NULL)\n        {\n            fprintf(f, \" token ptr: %p\\n\", (const void *)token);\n        }\n        if (sem != NULL)\n        {\n            /* log the semaphore internal pointer and the value we read */\n            fprintf(f, \" sem ptr: %p\\n\", (const void *)sem);\n            fprintf(f, \" sem->current_value: %d\\n\", (int)sem->current_value);\n        }\n        if (sem_prop != NULL)\n        {\n            fprintf(f, \" sem_prop ptr: %p\\n\", (const void *)sem_prop);\n        }\n        fprintf(f, \"-- end OS_BinSemGetInfo_Impl probe --\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* log control flow and state before reading value */\n    /* pass sem as const to the probe to indicate it is only being observed */\n    os_log_probe_binsem_getinfo(token, (const OS_impl_binsem_internal_record_t *)sem, sem_prop);\n\n    /* put the info into the structure */\n    sem_prop->value = sem->current_value;\n    return OS_SUCCESS;\n}\n"
}