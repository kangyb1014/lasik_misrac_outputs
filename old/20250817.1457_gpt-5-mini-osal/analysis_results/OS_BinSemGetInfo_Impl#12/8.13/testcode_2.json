{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_BinSemGetInfo_Impl the local pointer variable is declared as a mutable pointer: \"OS_impl_binsem_internal_record_t *sem\" even though the function only reads from the object (sem->current_value). Per MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type whenever possible (for example: \"const OS_impl_binsem_internal_record_t *sem\").\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/99.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetInfo_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo_Impl:\n```c\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* put the info into the structure */\n    sem_prop->value = sem->current_value;\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetInfo_Impl code.\n",
  "test_code": "#include <stdio.h>\n\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n    FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n\n    if (log)\n    {\n        fprintf(log, \"ENTER: OS_BinSemGetInfo_Impl token=%p sem_prop=%p\\n\", (void *)token, (void *)sem_prop);\n    }\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    if (log)\n    {\n        fprintf(log, \"After lookup: sem=%p\\n\", (void *)sem);\n        if (sem)\n        {\n            /* Log the current_value read from the sem object to capture state */\n            fprintf(log, \"sem->current_value=%ld\\n\", (long)sem->current_value);\n        }\n        else\n        {\n            fprintf(log, \"sem is NULL (lookup returned NULL)\\n\");\n        }\n    }\n\n    /* put the info into the structure (preserve original behavior) */\n    sem_prop->value = sem->current_value;\n\n    if (log)\n    {\n        fprintf(log, \"Assigned sem_prop->value=%ld - returning OS_SUCCESS\\n\", (long)sem_prop->value);\n        fclose(log);\n    }\n\n    return OS_SUCCESS;\n}\n"
}