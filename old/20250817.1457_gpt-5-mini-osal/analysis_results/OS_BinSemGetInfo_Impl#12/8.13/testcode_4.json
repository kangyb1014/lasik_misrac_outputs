{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer sem is declared as a non-const OS_impl_binsem_internal_record_t * and is assigned from OS_OBJECT_TABLE_GET(...). In OS_BinSemGetInfo_Impl the code only reads sem->current_value (no modification), so sem could and should be declared as a pointer to const (const OS_impl_binsem_internal_record_t *sem). The macro also yields a non-const pointer to the table element. Therefore Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/99.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetInfo_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo_Impl:\n```c\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* put the info into the structure */\n    sem_prop->value = sem->current_value;\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetInfo_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Minimal type definitions for the test harness. These mimic the real types\n   sufficiently for compiling and exercising OS_BinSemGetInfo_Impl. */\n\ntypedef struct\n{\n    uint32_t id;\n} OS_object_token_t;\n\ntypedef struct\n{\n    int32_t value;\n} OS_bin_sem_prop_t;\n\ntypedef struct\n{\n    int32_t current_value;\n} OS_impl_binsem_internal_record_t;\n\n/* The real system defines this table elsewhere. For the test harness we\n   provide a small table so OS_OBJECT_TABLE_GET can return a valid pointer. */\nstatic OS_impl_binsem_internal_record_t OS_impl_bin_sem_table[4] =\n{\n    { .current_value = 0 },\n    { .current_value = 1 },\n    { .current_value = 2 },\n    { .current_value = 3 }\n};\n\n/* In the production code OS_OBJECT_TABLE_GET is a macro. For the purposes\n   of this test harness we implement it as a function so the code remains\n   compilable and executable without defining macros. */\n\n/* Note: This function intentionally returns a non-const pointer to mirror\n   the scenario described by the reporting agent (the pointer in the\n   implementation is non-const even though the function only reads it). */\nstatic OS_impl_binsem_internal_record_t *OS_OBJECT_TABLE_GET(void *table, OS_object_token_t token)\n{\n    (void)table; /* ignored in this harness, we use the static table above */\n\n    if (token.id < (sizeof(OS_impl_bin_sem_table) / sizeof(OS_impl_bin_sem_table[0])))\n    {\n        return &OS_impl_bin_sem_table[token.id];\n    }\n\n    /* Out of range: return a pointer to element 0 to keep behavior simple. */\n    return &OS_impl_bin_sem_table[0];\n}\n\n/* Keep the original function signature. Insert logging to /tmp/logs/99.txt\n   to capture control flow and state for the violation scenario. */\nint32_t OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n    FILE *logf = NULL;\n    int32_t retval = 0; /* OS_SUCCESS is 0 in this harness */\n\n    /* Probe: log function entry and token information */\n    logf = fopen(\"/tmp/logs/99.txt\", \"a\");\n    if (logf != NULL)\n    {\n        fprintf(logf, \"ENTER: OS_BinSemGetInfo_Impl\\n\");\n        if (token != NULL)\n        {\n            fprintf(logf, \" token->id = %u\\n\", (unsigned)token->id);\n        }\n        else\n        {\n            fprintf(logf, \" token = NULL\\n\");\n        }\n    }\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* Log pointer and pointed-to state before reading */\n    if (logf != NULL)\n    {\n        fprintf(logf, \" sem (pointer) = %p\\n\", (void *)sem);\n        if (sem != NULL)\n        {\n            fprintf(logf, \" sem->current_value (before) = %d\\n\", (int)sem->current_value);\n        }\n        else\n        {\n            fprintf(logf, \" sem = NULL\\n\");\n        }\n    }\n\n    /* put the info into the structure (preserve original logic) */\n    sem_prop->value = sem->current_value;\n\n    /* Log the result of the assignment and exit */\n    if (logf != NULL)\n    {\n        fprintf(logf, \" sem_prop (pointer) = %p\\n\", (void *)sem_prop);\n        fprintf(logf, \" sem_prop->value (after) = %d\\n\", (int)sem_prop->value);\n        fprintf(logf, \"EXIT: OS_BinSemGetInfo_Impl returning %d\\n\", (int)retval);\n        fclose(logf);\n    }\n\n    return retval;\n}\n"
}