{
  "user_message": "An agent A claimed that the following OS_BinSemGetInfo_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_BinSemGetInfo_Impl.\n```c\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* put the info into the structure */\n    sem_prop->value = sem->current_value;\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In OS_BinSemGetInfo_Impl the local variable 'sem' is declared as a non-const pointer (OS_impl_binsem_internal_record_t *sem) but is only used to read the semaphore state (sem->current_value). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. The code fragment 'sem_prop->value = sem->current_value;' reads from the object only, so 'sem' could and should be declared as 'const OS_impl_binsem_internal_record_t *sem' to satisfy the rule. (Conversion from &OS_impl_bin_sem_table[...] to a pointer-to-const is allowed.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_log_probe_binsem_getinfo(const OS_object_token_t *token,\n                                       const OS_impl_binsem_internal_record_t *sem,\n                                       const OS_bin_sem_prop_t *sem_prop)\n{\n    FILE *f = fopen(\"/tmp/logs/99.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"OS_BinSemGetInfo_Impl called\\n\");\n        if (token != NULL)\n        {\n            fprintf(f, \" token ptr: %p\\n\", (const void *)token);\n        }\n        if (sem != NULL)\n        {\n            /* log the semaphore internal pointer and the value we read */\n            fprintf(f, \" sem ptr: %p\\n\", (const void *)sem);\n            fprintf(f, \" sem->current_value: %d\\n\", (int)sem->current_value);\n        }\n        if (sem_prop != NULL)\n        {\n            fprintf(f, \" sem_prop ptr: %p\\n\", (const void *)sem_prop);\n        }\n        fprintf(f, \"-- end OS_BinSemGetInfo_Impl probe --\\n\");\n        fclose(f);\n    }\n}\n\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* log control flow and state before reading value */\n    /* pass sem as const to the probe to indicate it is only being observed */\n    os_log_probe_binsem_getinfo(token, (const OS_impl_binsem_internal_record_t *)sem, sem_prop);\n\n    /* put the info into the structure */\n    sem_prop->value = sem->current_value;\n    return OS_SUCCESS;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_BinSemGetInfo_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the shown function the local pointer sem is only used to read the semaphore state (sem->current_value) and is never used to modify the pointed object. According to MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so declaring sem as const OS_impl_binsem_internal_record_t *sem (or otherwise obtaining a pointer-to-const from the object table) would satisfy the rule. The OS_OBJECT_TABLE_GET result can be converted to pointer-to-const, so there is no technical impediment in the shown fragment. (A possible counter-case would be if sem were later used with APIs that require a non-const pointer, but that is not true in the presented code.)"
}