{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer is declared as a non-const: 'OS_impl_binsem_internal_record_t *sem;'. In the function it is only used to read data (sem->current_value) and is never used to modify the pointed object, so per MISRA C 2023 Rule 8.13 it should be declared as a pointer to const, e.g. 'const OS_impl_binsem_internal_record_t *sem;'. Assigning the table element (returned as a non-const pointer by OS_OBJECT_TABLE_GET) to a 'const' pointer is allowed, and the member current_value remains volatile, so qualifying the pointer as const is appropriate. Therefore the current declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/99.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetInfo_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo_Impl:\n```c\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* put the info into the structure */\n    sem_prop->value = sem->current_value;\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetInfo_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helper: write control-flow and state info to /tmp/logs/99.txt */\nstatic void OS_BinSemGetInfo_LogProbe(const char *stage,\n                                      const OS_impl_binsem_internal_record_t *sem,\n                                      const OS_object_token_t *token,\n                                      const OS_bin_sem_prop_t *sem_prop)\n{\n    FILE *f = fopen(\"/tmp/logs/99.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* best-effort logging; do not alter main logic on failure */\n    }\n\n    fprintf(f, \"[OS_BinSemGetInfo_Impl] %s\\n\", stage);\n    fprintf(f, \"  token ptr = %p\\n\", (void *)token);\n    fprintf(f, \"  sem ptr   = %p\\n\", (void *)sem);\n\n    if (sem != NULL)\n    {\n        /* current_value is assumed to be an integer-like scalar; use long long to safely capture typical integer sizes */\n        fprintf(f, \"  sem->current_value = %lld\\n\", (long long)sem->current_value);\n    }\n    else\n    {\n        fprintf(f, \"  sem is NULL\\n\");\n    }\n\n    if (sem_prop != NULL)\n    {\n        fprintf(f, \"  sem_prop ptr = %p\\n\", (void *)sem_prop);\n        /* sem_prop->value mirrors sem->current_value after assignment; print if available */\n        fprintf(f, \"  sem_prop->value = %lld\\n\", (long long)sem_prop->value);\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    /* log entry state */\n    OS_BinSemGetInfo_LogProbe(\"entry (before table lookup)\", NULL, token, sem_prop);\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* log after lookup, before using sem */\n    OS_BinSemGetInfo_LogProbe(\"after table lookup (before reading current_value)\", sem, token, sem_prop);\n\n    /* put the info into the structure */\n    sem_prop->value = sem->current_value;\n\n    /* log after assignment to capture final state */\n    OS_BinSemGetInfo_LogProbe(\"after assignment (exit)\", sem, token, sem_prop);\n\n    return OS_SUCCESS;\n}\n"
}