{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe macro expands to a non-const pointer to a table element and the code assigns that to a non-const sem pointer even though the function only reads from the record. Specifically, sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token) yields an OS_impl_binsem_internal_record_t * (non-const). The function only reads sem->current_value, so sem (and/or the macro return type) should be a pointer to const-qualified type (const OS_impl_binsem_internal_record_t *) to comply with MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BinSemGetInfo_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/99.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BinSemGetInfo_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo_Impl:\n```c\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* put the info into the structure */\n    sem_prop->value = sem->current_value;\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_BinSemGetInfo_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe logging helper - appends structured logs to /tmp/logs/99.txt */\nstatic void os_binsem_log_probe(const char *stage,\n                                const void *token_ptr,\n                                uintptr_t token_val,\n                                const void *sem_ptr,\n                                int32_t sem_current_value,\n                                const void *sem_prop_ptr,\n                                int32_t sem_prop_before)\n{\n    FILE *f = fopen(\"/tmp/logs/99.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot open the file, do not change program behavior */\n        return;\n    }\n\n    /* Log timestamp-like marker via pointer addresses and stage */\n    (void)fprintf(f, \"[%s] token_ptr=%\" PRIuPTR \", token_val=%\" PRIuPTR \", sem_ptr=%\" PRIuPTR \", sem->current_value=%d, sem_prop_ptr=%\" PRIuPTR \", sem_prop_before=%d\\n\",\n                  stage,\n                  (uintptr_t)token_ptr,\n                  token_val,\n                  (uintptr_t)sem_ptr,\n                  sem_current_value,\n                  (uintptr_t)sem_prop_ptr,\n                  sem_prop_before);\n\n    (void)fclose(f);\n}\n\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    /* Log entry with token pointer/address. token may not be an integer type; capture its raw pointer\n     * and attempt to also record its value-sized representation for additional evidence. */\n    os_binsem_log_probe(\"ENTRY\", token, (uintptr_t)(*token), NULL, 0, sem_prop, (int32_t)sem_prop->value);\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* Log after table lookup to capture the sem pointer and the current_value observed. */\n    os_binsem_log_probe(\"AFTER_LOOKUP\", token, (uintptr_t)(*token), sem, (int32_t)sem->current_value, sem_prop, (int32_t)sem_prop->value);\n\n    /* put the info into the structure */\n    sem_prop->value = sem->current_value;\n\n    /* Log after writing the property to show before/after state and evidence for read-only usage */\n    os_binsem_log_probe(\"AFTER_WRITE\", token, (uintptr_t)(*token), sem, (int32_t)sem->current_value, sem_prop, (int32_t)sem_prop->value);\n\n    return OS_SUCCESS;\n}\n"
}