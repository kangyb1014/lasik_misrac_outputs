{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_BinSemGetInfo_Impl:\n```c\nint32 OS_BinSemGetInfo_Impl(const OS_object_token_t *token, OS_bin_sem_prop_t *sem_prop)\n{\n    OS_impl_binsem_internal_record_t *sem;\n\n    sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token);\n\n    /* put the info into the structure */\n    sem_prop->value = sem->current_value;\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_BinSemGetInfo_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nOS_impl_binsem_internal_record_t OS_impl_bin_sem_table[OS_MAX_BIN_SEMAPHORES]\n...\ntypedef struct\n{\n    pthread_mutex_t       id;\n    pthread_cond_t        cv;\n    volatile sig_atomic_t flush_request;\n    volatile sig_atomic_t current_value;\n} OS_impl_binsem_internal_record_t\n...\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n    int32     value;\n} OS_bin_sem_prop_t\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No suspicious fragments found w.r.t. MISRA C 2023 Rule 17.8. Reasoning:\n- The function parameters are: const OS_object_token_t *token and OS_bin_sem_prop_t *sem_prop. The code does not assign to either parameter identifier (no statements like token = ... or sem_prop = ...).\n- The only write is sem_prop->value = sem->current_value; this modifies the object pointed to by sem_prop, which is allowed by the rule (the object referred to by a pointer parameter may be modified; the pointer itself shall not be modified).\n- The macro call sem = OS_OBJECT_TABLE_GET(OS_impl_bin_sem_table, *token) expands to take the address of the token object (OS_ObjectIndexFromToken(&(*token))), which does not modify the function parameter token; it merely reads the token to obtain an index. OS_ObjectIndexFromToken accepts a const pointer and only reads token->obj_idx.\n- All other operations (reading sem->current_value, assigning to local sem) do not modify function parameter variables.\nTherefore there are no code fragments in the provided function that appear to violate Rule 17.8."
}