{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_SocketListen_Impl the local pointer impl is only used for read access (impl->fd) and is not used to modify the pointed-to object. Therefore it could and should be declared const OS_impl_file_internal_record_t *impl; declaring it as a non-const pointer when no modification is required violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketListen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/883.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketListen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketListen_Impl:\n```c\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_result = listen(impl->fd, 10);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"listen: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketListen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe helper: write control-flow and state information to a log file. */\nstatic void OS_SocketListen_ProbeLog(const void *token_ptr,\n                                    const void *impl_ptr,\n                                    int fd,\n                                    const char *phase)\n{\n    FILE *f = fopen(\"/tmp/logs/883.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log token and impl pointer values, the fd value read from impl, errno and a phase tag. */\n    fprintf(f, \"[%s] token=%p impl=%p fd=%d errno=%d (%s)\\n\",\n            (phase != NULL) ? phase : \"unknown\",\n            token_ptr,\n            impl_ptr,\n            fd,\n            errno,\n            (errno == 0) ? \"none\" : strerror(errno));\n\n    fclose(f);\n}\n\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Probe before calling listen: record token pointer, impl pointer and impl->fd. */\n    OS_SocketListen_ProbeLog((const void *)token,\n                             (const void *)impl,\n                             (impl != NULL) ? impl->fd : -1,\n                             \"before_listen\");\n\n    os_result = listen(impl->fd, 10);\n\n    /* Probe immediately after listen to capture result and errno. */\n    OS_SocketListen_ProbeLog((const void *)token,\n                             (const void *)impl,\n                             (impl != NULL) ? impl->fd : -1,\n                             \"after_listen\");\n\n    if (os_result < 0)\n    {\n        /* Additional probe on error path for easier reproduction. */\n        OS_SocketListen_ProbeLog((const void *)token,\n                                 (const void *)impl,\n                                 (impl != NULL) ? impl->fd : -1,\n                                 \"listen_error\");\n\n        OS_DEBUG(\"listen: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    /* Final probe on success path. */\n    OS_SocketListen_ProbeLog((const void *)token,\n                             (const void *)impl,\n                             (impl != NULL) ? impl->fd : -1,\n                             \"listen_success\");\n\n    return OS_SUCCESS;\n}\n"
}