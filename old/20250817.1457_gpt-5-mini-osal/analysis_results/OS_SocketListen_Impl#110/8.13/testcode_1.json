{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'impl' is declared as a non-const pointer (OS_impl_file_internal_record_t *impl) but in this function it is only used for read-only access (impl->fd is read to call listen). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible (e.g. const OS_impl_file_internal_record_t *impl). Therefore this code fragment violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketListen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/883.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketListen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketListen_Impl:\n```c\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_result = listen(impl->fd, 10);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"listen: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketListen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <time.h>\n\n/* Probe helper: append diagnostic information to /tmp/logs/883.txt\n * This function attempts to be non-intrusive and preserves the\n * original behavior of OS_SocketListen_Impl. It only logs values\n * observed during execution so other agents can reproduce the\n * control flow and state relevant to the reported Rule 8.13 issue.\n */\nstatic void OS_SocketListen_Impl_log_probe(const OS_object_token_t *token,\n                                           OS_impl_file_internal_record_t *impl,\n                                           int os_result_stage,\n                                           const char *stage_description)\n{\n    FILE *f = fopen(\"/tmp/logs/883.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be opened, do not interfere with original logic. */\n        return;\n    }\n\n    time_t t = time(NULL);\n    char timestr[32] = \"\";\n    if (t != (time_t)-1)\n    {\n        struct tm tm_buf;\n        if (localtime_r(&t, &tm_buf) != NULL)\n        {\n            strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n        }\n    }\n\n    /* Log core diagnostic fields. We intentionally log the pointer values\n     * and the fd value read from the impl record to provide evidence that\n     * the local pointer is only used for read-only access in this function.\n     */\n    fprintf(f, \"[%s] OS_SocketListen_Impl: %s\\n\", timestr[0] ? timestr : \"(no-time)\", stage_description);\n    fprintf(f, \"  token ptr = %p\\n\", (const void *)token);\n    fprintf(f, \"  impl ptr  = %p\\n\", (const void *)impl);\n\n    /* The implementation reads impl->fd (read-only). Log it for evidence.\n     * This mirrors the original behavior which also reads impl->fd.\n     */\n    if (impl != NULL)\n    {\n        /* Cast to long long for portable printing of integer file descriptors. */\n        fprintf(f, \"  impl->fd  = %lld\\n\", (long long)impl->fd);\n    }\n    else\n    {\n        fprintf(f, \"  impl->fd  = (impl is NULL)\\n\");\n    }\n\n    fprintf(f, \"  os_result_stage = %d\\n\", os_result_stage);\n    if (os_result_stage < 0)\n    {\n        fprintf(f, \"  errno = %d (%s)\\n\", errno, strerror(errno));\n    }\n\n    fprintf(f, \"---\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Probe: log entry and the token/impl pointers before calling listen. */\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n    OS_SocketListen_Impl_log_probe(token, impl, 0, \"ENTRY: before listen\");\n\n    os_result = listen(impl->fd, 10);\n\n    /* Probe: log result of listen and errno if error. */\n    OS_SocketListen_Impl_log_probe(token, impl, os_result, \"AFTER listen call\");\n\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"listen: %s\\n\", strerror(errno));\n        /* Additional probe to record the error path. */\n        OS_SocketListen_Impl_log_probe(token, impl, os_result, \"LISTEN_FAILED: returning OS_ERROR\");\n        return OS_ERROR;\n    }\n\n    /* Probe: successful exit. */\n    OS_SocketListen_Impl_log_probe(token, impl, os_result, \"SUCCESS: returning OS_SUCCESS\");\n\n    return OS_SUCCESS;\n}\n"
}