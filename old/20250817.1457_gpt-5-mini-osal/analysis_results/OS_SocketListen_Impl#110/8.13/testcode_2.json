{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strerror(errno) which returns a pointer of type char * (non-const) and passes it directly to OS_DEBUG. The pointer to the message is therefore not const-qualified. To conform with MISRA C 2023 Rule 8.13 the result should be stored/used via a const-qualified pointer (e.g. const char *msg = strerror(errno); OS_DEBUG(\"listen: %s\\n\", msg);) or use a variant that returns a const-qualified string.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketListen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/883.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketListen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketListen_Impl:\n```c\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_result = listen(impl->fd, 10);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"listen: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketListen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_result = listen(impl->fd, 10);\n    if (os_result < 0)\n    {\n        /* Probe logging: capture control flow and state to /tmp/logs/883.txt\n         * This log records the token pointer, file descriptor, listen result,\n         * errno, the pointer returned by strerror and the message text itself.\n         * The original OS_DEBUG call is preserved to avoid changing program behavior.\n         */\n        FILE *log = fopen(\"/tmp/logs/883.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* token may be an opaque type; log its pointer value for tracing */\n            fprintf(log, \"OS_SocketListen_Impl ENTRY: token=%p fd=%d listen_result=%d errno=%d\\n\",\n                    (const void *)token, impl->fd, os_result, errno);\n\n            /* Record the pointer returned by strerror and the message it points to.\n             * This demonstrates the violation scenario: strerror() yields a non-const\n             * char * buffer (pointer address printed) which is then used directly\n             * in OS_DEBUG below.\n             */\n            fprintf(log, \"strerror ptr=%p msg=\\\"%s\\\"\\n\",\n                    (void *)strerror(errno), strerror(errno));\n\n            fclose(log);\n        }\n\n        /* Preserve original behavior (the reported violation): passing strerror(errno) directly */\n        OS_DEBUG(\"listen: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n"
}