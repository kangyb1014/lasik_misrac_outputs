{
  "user_message": "An agent A claimed that the following OS_SocketListen_Impl code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketListen_Impl.\n```c\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_result = listen(impl->fd, 10);\n    if (os_result < 0)\n    {\n        OS_DEBUG(\"listen: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code calls strerror(errno) which returns a pointer of type char * (non-const) and passes it directly to OS_DEBUG. The pointer to the message is therefore not const-qualified. To conform with MISRA C 2023 Rule 8.13 the result should be stored/used via a const-qualified pointer (e.g. const char *msg = strerror(errno); OS_DEBUG(\"listen: %s\\n\", msg);) or use a variant that returns a const-qualified string.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_SocketListen_Impl(const OS_object_token_t *token)\n{\n    int                             os_result;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    os_result = listen(impl->fd, 10);\n    if (os_result < 0)\n    {\n        /* Probe logging: capture control flow and state to /tmp/logs/883.txt\n         * This log records the token pointer, file descriptor, listen result,\n         * errno, the pointer returned by strerror and the message text itself.\n         * The original OS_DEBUG call is preserved to avoid changing program behavior.\n         */\n        FILE *log = fopen(\"/tmp/logs/883.txt\", \"a\");\n        if (log != NULL)\n        {\n            /* token may be an opaque type; log its pointer value for tracing */\n            fprintf(log, \"OS_SocketListen_Impl ENTRY: token=%p fd=%d listen_result=%d errno=%d\\n\",\n                    (const void *)token, impl->fd, os_result, errno);\n\n            /* Record the pointer returned by strerror and the message it points to.\n             * This demonstrates the violation scenario: strerror() yields a non-const\n             * char * buffer (pointer address printed) which is then used directly\n             * in OS_DEBUG below.\n             */\n            fprintf(log, \"strerror ptr=%p msg=\\\"%s\\\"\\n\",\n                    (void *)strerror(errno), strerror(errno));\n\n            fclose(log);\n        }\n\n        /* Preserve original behavior (the reported violation): passing strerror(errno) directly */\n        OS_DEBUG(\"listen: %s\\n\", strerror(errno));\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_SocketListen_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. MISRA C 2023 Rule 8.13 recommends that pointer types used in the program be const-qualified where possible. The reported code does not declare any pointer variable to the strerror result \u2014 it merely uses the function call expression strerror(errno) as an argument to a logging macro. The non-const qualification is imposed by the strerror API itself (standard C declares strerror as returning char *). The rule is concerned with pointer declarations in your code; you could, if you wished to adhere more closely, capture the result into a const-qualified pointer (for example: const char *msg = strerror(errno); OS_DEBUG(\"listen: %s\\n\", msg);). That would be a recommended change, but the existing code (using the library function's non-const return value directly) is not a clear MISRA 8.13 violation in the sense that you cannot change the library prototype and no non-const pointer object is declared in your code. Therefore the agent A report is not correct."
}