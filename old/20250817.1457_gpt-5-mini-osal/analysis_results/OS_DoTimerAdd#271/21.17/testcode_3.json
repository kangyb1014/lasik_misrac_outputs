{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_CHECK_APINAME expands to OS_CHECK_STRING(timer_name, OS_MAX_API_NAME, ...). If OS_CHECK_STRING uses standard <string.h> functions that assume a NUL-terminated C string (for example strlen or strcmp) then a caller-supplied timer_name that is not NUL-terminated within its allocated bounds can cause those functions to read past the end of the object. Concrete violating scenario: the caller passes a pointer to a buffer that lacks a terminating '\\0' (e.g. char name[3] = {'A','B','C'};) into OS_DoTimerAdd; OS_CHECK_APINAME could call strlen(name) (or similar), which will scan beyond the 3-byte buffer and access out-of-bounds memory, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_DoTimerAdd code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2175.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_DoTimerAdd as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_DoTimerAdd:\n```c\nstatic int32 OS_DoTimerAdd(osal_id_t *timer_id, const char *timer_name, osal_id_t timebase_ref_id,\n                           OS_ArgCallback_t callback_ptr, void *callback_arg, uint32 flags)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              timebase_token;\n    OS_object_token_t              timecb_token;\n    OS_object_token_t              listcb_token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timecb_internal_record_t *  list_timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Check parameters\n     *\n     * Note \"callback_arg\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /*\n     * Check that the timebase reference is valid\n     * If successful, then after this statement, we MUST decrement the refcount\n     * if we leave this routine with an error.\n     */\n    return_code =\n        OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_TIMEBASE, timebase_ref_id, &timebase_token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMECB, timer_name, &timecb_token);\n    if (return_code == OS_SUCCESS)\n    {\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, timecb_token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timebase_token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(timecb_token, timecb, timer_name, timer_name);\n\n        /*\n         * transfer ownership so the refcount obtained earlier is now\n         * associated with the timecb object, and will be retained until\n         * the object is deleted.\n         */\n        OS_ObjectIdTransferToken(&timebase_token, &timecb->timebase_token);\n\n        timecb->callback_ptr = callback_ptr;\n        timecb->callback_arg = callback_arg;\n        timecb->flags        = flags;\n        timecb->prev_cb      = OS_ObjectIdFromToken(&timecb_token);\n        timecb->next_cb      = OS_ObjectIdFromToken(&timecb_token);\n\n        /*\n         * Now we need to add it to the time base callback ring, so take the\n         * timebase-specific lock to prevent a tick from being processed at this moment.\n         */\n        OS_TimeBaseLock_Impl(&timebase_token);\n\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timebase->first_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n\n            timecb->next_cb = OS_ObjectIdFromToken(&listcb_token);\n            timecb->prev_cb = list_timecb->prev_cb;\n\n            if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->prev_cb, &listcb_token) ==\n                OS_SUCCESS)\n            {\n                list_timecb->prev_cb = OS_ObjectIdFromToken(&timecb_token);\n                list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n                list_timecb->next_cb = OS_ObjectIdFromToken(&timecb_token);\n            }\n        }\n\n        timebase->first_cb = OS_ObjectIdFromToken(&timecb_token);\n\n        OS_TimeBaseUnlock_Impl(&timebase_token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &timecb_token, timer_id);\n    }\n    else\n    {\n        OS_ObjectIdRelease(&timebase_token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_DoTimerAdd code.\n",
  "test_code": "static int32 OS_DoTimerAdd(osal_id_t *timer_id, const char *timer_name, osal_id_t timebase_ref_id,\n                           OS_ArgCallback_t callback_ptr, void *callback_arg, uint32 flags)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              timebase_token;\n    OS_object_token_t              timecb_token;\n    OS_object_token_t              listcb_token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timecb_internal_record_t *  list_timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /* Log entry and parameter state */\n    {\n        FILE *log = fopen(\"/tmp/logs/2175.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DoTimerAdd ENTER: timer_id=%p timer_name=%p timebase_ref_id=%llu callback_ptr=%p callback_arg=%p flags=0x%08x\\n\",\n                    (void *)timer_id, (const void *)timer_name, (unsigned long long)timebase_ref_id,\n                    (void *)callback_ptr, callback_arg, (unsigned)flags);\n            fclose(log);\n        }\n    }\n\n    /*\n     * Check parameters\n     *\n     * Note \"callback_arg\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(timer_id);\n\n    /* Log immediately before name/API check so that callers that cause a failure can be correlated */\n    {\n        FILE *log = fopen(\"/tmp/logs/2175.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DoTimerAdd: About to call OS_CHECK_APINAME for timer_name=%p\\n\", (const void *)timer_name);\n            fclose(log);\n        }\n    }\n\n    OS_CHECK_APINAME(timer_name);\n\n    /* Log after APINAME check */\n    {\n        FILE *log = fopen(\"/tmp/logs/2175.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DoTimerAdd: Returned from OS_CHECK_APINAME for timer_name=%p\\n\", (const void *)timer_name);\n            fclose(log);\n        }\n    }\n\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n\n    /* Log object type result */\n    {\n        FILE *log = fopen(\"/tmp/logs/2175.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DoTimerAdd: OS_TaskGetId_Impl returned objtype=%d\\n\", (int)objtype);\n            fclose(log);\n        }\n    }\n\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        /* Log early return due to incorrect object state */\n        FILE *log = fopen(\"/tmp/logs/2175.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DoTimerAdd: Early return OS_ERR_INCORRECT_OBJ_STATE\\n\");\n            fclose(log);\n        }\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /*\n     * Check that the timebase reference is valid\n     * If successful, then after this statement, we MUST decrement the refcount\n     * if we leave this routine with an error.\n     */\n    return_code =\n        OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_TIMEBASE, timebase_ref_id, &timebase_token);\n\n    /* Log result of timebase lookup */\n    {\n        FILE *log = fopen(\"/tmp/logs/2175.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DoTimerAdd: OS_ObjectIdGetById(timebase) returned %d, timebase_token=%p\\n\", (int)return_code, (void *)&timebase_token);\n            fclose(log);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log failure and return */\n        FILE *log = fopen(\"/tmp/logs/2175.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DoTimerAdd: Timebase lookup failed with return_code=%d - returning\\n\", (int)return_code);\n            fclose(log);\n        }\n        return return_code;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMECB, timer_name, &timecb_token);\n\n    /* Log allocation result */\n    {\n        FILE *log = fopen(\"/tmp/logs/2175.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DoTimerAdd: OS_ObjectIdAllocateNew returned %d, timecb_token=%p\\n\", (int)return_code, (void *)&timecb_token);\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, timecb_token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timebase_token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(timecb_token, timecb, timer_name, timer_name);\n\n        /*\n         * transfer ownership so the refcount obtained earlier is now\n         * associated with the timecb object, and will be retained until\n         * the object is deleted.\n         */\n        OS_ObjectIdTransferToken(&timebase_token, &timecb->timebase_token);\n\n        timecb->callback_ptr = callback_ptr;\n        timecb->callback_arg = callback_arg;\n        timecb->flags        = flags;\n        timecb->prev_cb      = OS_ObjectIdFromToken(&timecb_token);\n        timecb->next_cb      = OS_ObjectIdFromToken(&timecb_token);\n\n        /*\n         * Now we need to add it to the time base callback ring, so take the\n         * timebase-specific lock to prevent a tick from being processed at this moment.\n         */\n        OS_TimeBaseLock_Impl(&timebase_token);\n\n        /* Log after acquiring timebase lock */\n        {\n            FILE *log = fopen(\"/tmp/logs/2175.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_DoTimerAdd: Acquired timebase lock; timebase=%p first_cb=%llu\\n\",\n                        (void *)timebase, (unsigned long long)timebase->first_cb);\n                fclose(log);\n            }\n        }\n\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timebase->first_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n\n            timecb->next_cb = OS_ObjectIdFromToken(&listcb_token);\n            timecb->prev_cb = list_timecb->prev_cb;\n\n            if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->prev_cb, &listcb_token) ==\n                OS_SUCCESS)\n            {\n                list_timecb->prev_cb = OS_ObjectIdFromToken(&timecb_token);\n                list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n                list_timecb->next_cb = OS_ObjectIdFromToken(&timecb_token);\n            }\n        }\n\n        timebase->first_cb = OS_ObjectIdFromToken(&timecb_token);\n\n        OS_TimeBaseUnlock_Impl(&timebase_token);\n\n        /* Log just before finalization */\n        {\n            FILE *log = fopen(\"/tmp/logs/2175.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_DoTimerAdd: Released timebase lock; preparing to finalize timecb - timecb_token=%p\\n\", (void *)&timecb_token);\n                fclose(log);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &timecb_token, timer_id);\n\n        /* Log finalize result */\n        {\n            FILE *log = fopen(\"/tmp/logs/2175.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"OS_DoTimerAdd: OS_ObjectIdFinalizeNew returned %d; final timer_id=%p\\n\", (int)return_code, (void *)timer_id);\n                fclose(log);\n            }\n        }\n    }\n    else\n    {\n        /* Log release path where allocation failed */\n        FILE *log = fopen(\"/tmp/logs/2175.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DoTimerAdd: Allocation failed, releasing timebase token %p and returning %d\\n\", (void *)&timebase_token, (int)return_code);\n            fclose(log);\n        }\n        OS_ObjectIdRelease(&timebase_token);\n    }\n\n    /* Final return log */\n    {\n        FILE *log = fopen(\"/tmp/logs/2175.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_DoTimerAdd EXIT: return_code=%d\\n\", (int)return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}