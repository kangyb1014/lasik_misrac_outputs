{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of UtList_DeleteNode:\n```c\nvoid UtList_DeleteNode(UtListNode_t *DeleteNode)\n{\n    UtList_Extract(DeleteNode);\n\n    /* non-data/header nodes shouldn't be free()'ed */\n    if (DeleteNode->Data != NULL)\n    {\n        free(DeleteNode);\n    }\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (DeleteNode->Data != NULL)\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The fragment itself does not show the declaration of Data, and merely reads it (compares to NULL), so by itself it does not violate Rule 8.13. However, a specific violation scenario would be: if UtListNode_t is declared as\n\n    typedef struct { void *Data; /* ... */ } UtListNode_t;\n\nand the Data pointer is never used to modify the pointee (only read/passed to functions that do not modify it), then Data should be declared as a pointer to a const-qualified type (for example, const void *Data). In that case the non-const declaration would violate MISRA C 2023 Rule 8.13."
}