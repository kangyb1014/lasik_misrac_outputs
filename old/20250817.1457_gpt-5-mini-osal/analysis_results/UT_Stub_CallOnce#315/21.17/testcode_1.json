{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strlen(OutputMessage) is not protected against OutputMessage being NULL or not NUL\u2011terminated. If UT_BSP_DoText is ever invoked with OutputMessage == NULL (or with a char buffer that is not NUL\u2011terminated), strlen will read beyond the object (or dereference NULL), causing undefined behavior. For example, a caller invoking UT_BSP_DoText(UTASSERT_CASETYPE_X, NULL) or passing a non\u2011terminated buffer would trigger an out\u2011of\u2011bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_Stub_CallOnce code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2527.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_Stub_CallOnce as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_Stub_CallOnce:\n```c\nvoid UT_Stub_CallOnce(void (*Func)(void))\n{\n    UT_StubTableEntry_t *StubPtr;\n    UT_StubTableEntry_t *OnceEnt;\n    UT_EntryKey_t        FuncKey;\n    int32                i;\n\n    if (Func == NULL)\n    {\n        return;\n    }\n\n    FuncKey = (UT_EntryKey_t)Func;\n    OnceEnt = NULL;\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (StubPtr->EntryType == UT_ENTRYTYPE_UNUSED && OnceEnt == NULL)\n        {\n            OnceEnt = StubPtr;\n        }\n        else if (StubPtr->EntryType == UT_ENTRYTYPE_CALL_ONCE && StubPtr->FuncKey == FuncKey)\n        {\n            OnceEnt = StubPtr;\n            break;\n        }\n        ++StubPtr;\n    }\n\n    if (OnceEnt == NULL)\n    {\n        /* should never happen -- UT_MAX_FUNC_STUBS needs increase if it does */\n        UtAssert_Abort(\"Cannot do CallOnce - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else if (OnceEnt->EntryType == UT_ENTRYTYPE_UNUSED)\n    {\n        OnceEnt->EntryType = UT_ENTRYTYPE_CALL_ONCE;\n        OnceEnt->FuncKey   = FuncKey;\n\n        Func();\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_Stub_CallOnce code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nvoid UT_Stub_CallOnce(void (*Func)(void))\n{\n    FILE *logf = fopen(\"/tmp/logs/2527.txt\", \"a\");\n\n    if (logf)\n    {\n        fprintf(logf, \"UT_Stub_CallOnce: Enter - Func=%p\\n\", (void *)Func);\n        fflush(logf);\n    }\n\n    UT_StubTableEntry_t *StubPtr;\n    UT_StubTableEntry_t *OnceEnt;\n    UT_EntryKey_t        FuncKey;\n    int32                i;\n\n    if (Func == NULL)\n    {\n        if (logf)\n        {\n            fprintf(logf, \"UT_Stub_CallOnce: Func is NULL, returning early\\n\");\n            fclose(logf);\n        }\n        return;\n    }\n\n    FuncKey = (UT_EntryKey_t)Func;\n    if (logf)\n    {\n        /* Print FuncKey as an opaque pointer-sized value to aid debugging */\n        fprintf(logf, \"UT_Stub_CallOnce: Computed FuncKey=%p\\n\", (void *)(uintptr_t)FuncKey);\n        fflush(logf);\n    }\n\n    OnceEnt = NULL;\n    StubPtr = UT_StubTable;\n    for (i = 0; i < UT_MAX_FUNC_STUBS; ++i)\n    {\n        if (logf)\n        {\n            if (StubPtr->EntryType == UT_ENTRYTYPE_UNUSED)\n            {\n                /* Avoid reading uninitialized FuncKey when entry is UNUSED */\n                fprintf(logf, \"UT_Stub_CallOnce: idx=%d EntryType=UNUSED\\n\", i);\n            }\n            else\n            {\n                fprintf(logf, \"UT_Stub_CallOnce: idx=%d EntryType=%d FuncKey=%p\\n\", i, StubPtr->EntryType,\n                        (void *)(uintptr_t)StubPtr->FuncKey);\n            }\n            fflush(logf);\n        }\n\n        if (StubPtr->EntryType == UT_ENTRYTYPE_UNUSED && OnceEnt == NULL)\n        {\n            OnceEnt = StubPtr;\n            if (logf)\n            {\n                fprintf(logf, \"UT_Stub_CallOnce: Recorded first UNUSED slot at idx=%d (OnceEnt set)\\n\", i);\n                fflush(logf);\n            }\n        }\n        else if (StubPtr->EntryType == UT_ENTRYTYPE_CALL_ONCE && StubPtr->FuncKey == FuncKey)\n        {\n            OnceEnt = StubPtr;\n            if (logf)\n            {\n                fprintf(logf, \"UT_Stub_CallOnce: Found existing CALL_ONCE entry at idx=%d\\n\", i);\n                fflush(logf);\n            }\n            break;\n        }\n        ++StubPtr;\n    }\n\n    if (OnceEnt == NULL)\n    {\n        if (logf)\n        {\n            fprintf(logf, \"UT_Stub_CallOnce: OnceEnt is NULL - cannot proceed, aborting\\n\");\n            fclose(logf);\n        }\n        UtAssert_Abort(\"Cannot do CallOnce - UT_MAX_FUNC_STUBS too low?\");\n    }\n    else if (OnceEnt->EntryType == UT_ENTRYTYPE_UNUSED)\n    {\n        if (logf)\n        {\n            fprintf(logf, \"UT_Stub_CallOnce: Initializing OnceEnt: setting EntryType->CALL_ONCE, FuncKey=%p\\n\",\n                    (void *)(uintptr_t)FuncKey);\n            fflush(logf);\n            /* Close log before calling Func to ensure file is flushed and unlocked for other processes */\n            fclose(logf);\n            logf = NULL;\n        }\n\n        OnceEnt->EntryType = UT_ENTRYTYPE_CALL_ONCE;\n        OnceEnt->FuncKey   = FuncKey;\n\n        /* Log the invocation point (file was closed above to avoid holding it during callback) */\n        Func();\n    }\n    else\n    {\n        if (logf)\n        {\n            fprintf(logf, \"UT_Stub_CallOnce: OnceEnt already CALL_ONCE - nothing to do\\n\");\n            fclose(logf);\n        }\n    }\n}\n"
}