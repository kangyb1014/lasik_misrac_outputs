{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment Conv.opaque_arg = NULL is immediately overwritten by the next statement Conv.timer_callback_func = callback_ptr and never used in between. Because the union member write to timer_callback_func replaces the prior opaque_arg value and the value passed to OS_DoTimerAdd is Conv.opaque_arg after the overwrite, the initial NULL assignment has no effect on program behaviour and is therefore dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2178.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerCreate:\n```c\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimeBaseDelete(timebase_ref_id);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerCreate code.\n",
  "test_code": "#include <stdio.h>\n\nstatic void OS_TimerCreate_Log(const char *stage, osal_id_t timebase_ref_id, const OS_Timer_ArgWrapper_t *conv,\n                                OS_TimerCallback_t callback_ptr, int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/2178.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log relevant state: timebase id, union member values, callback pointer and return code */\n    fprintf(f, \"[OS_TimerCreate] %s: timebase_ref_id=%lu, conv.opaque_arg=%p, conv.timer_callback_func=%p, callback_ptr=%p, return_code=%ld\\n\",\n            stage,\n            (unsigned long)timebase_ref_id,\n            (void *)conv->opaque_arg,\n            (void *)conv->timer_callback_func,\n            (void *)callback_ptr,\n            (long)return_code);\n\n    fclose(f);\n}\n\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    if (return_code != OS_SUCCESS)\n    {\n        /* Log failure to create timebase */\n        OS_TimerCreate_Log(\"timebase_create_failed\", 0, &Conv, callback_ptr, return_code);\n        return return_code;\n    }\n\n    /* Log successful timebase creation (Conv not yet initialized) */\n    OS_TimerCreate_Log(\"timebase_created_before_init\", timebase_ref_id, &Conv, callback_ptr, return_code);\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    /* Log after setting opaque_arg to NULL */\n    OS_TimerCreate_Log(\"after_set_opaque_null\", timebase_ref_id, &Conv, callback_ptr, return_code);\n\n    Conv.timer_callback_func = callback_ptr;\n    /* Log after setting timer_callback_func (this overwrites the union) */\n    OS_TimerCreate_Log(\"after_set_timer_callback\", timebase_ref_id, &Conv, callback_ptr, return_code);\n\n    /* Log the state immediately before calling OS_DoTimerAdd to capture what is passed */\n    OS_TimerCreate_Log(\"before_DoTimerAdd\", timebase_ref_id, &Conv, callback_ptr, return_code);\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    /* Log result of OS_DoTimerAdd */\n    OS_TimerCreate_Log(\"after_DoTimerAdd\", timebase_ref_id, &Conv, callback_ptr, return_code);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimerCreate_Log(\"DoTimerAdd_failed_deleting_timebase\", timebase_ref_id, &Conv, callback_ptr, return_code);\n        OS_TimeBaseDelete(timebase_ref_id);\n        OS_TimerCreate_Log(\"timebase_deleted\", timebase_ref_id, &Conv, callback_ptr, return_code);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n        OS_TimerCreate_Log(\"success_accuracy_set\", timebase_ref_id, &Conv, callback_ptr, return_code);\n    }\n\n    return return_code;\n}\n"
}