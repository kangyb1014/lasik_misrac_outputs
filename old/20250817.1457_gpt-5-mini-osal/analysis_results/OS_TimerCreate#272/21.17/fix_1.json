{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_TimerCreate_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2183.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(__STDC_LIB_EXT1__)\n    /* Use localtime_s if available (bounds-checking variant) */\n    localtime_s(&tm_buf, &t);\n#else\n    /* Fallback to localtime_r when available, otherwise localtime (not ideal but OK for logging) */\n# ifdef _POSIX_THREADS\n    localtime_r(&t, &tm_buf);\n# else\n    {\n        struct tm *tmp = localtime(&t);\n        if (tmp != NULL)\n        {\n            tm_buf = *tmp;\n        }\n    }\n# endif\n#endif\n\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d - \", tm_buf.tm_year + 1900, tm_buf.tm_mon + 1,\n            tm_buf.tm_mday, tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /* Log entry and initial parameter state (do NOT dereference timer_name) */\n    OS_TimerCreate_Log(\"ENTER: OS_TimerCreate called. timer_id=%p, timer_name=%p, accuracy=%p, callback_ptr=%p\",\n                       (void *)timer_id, (const void *)timer_name, (void *)accuracy, (void *)callback_ptr);\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n\n    /* Probe: about to invoke API name check. If this macro uses an unbounded string routine\n     * (e.g. strlen) and timer_name points to a non-NUL-terminated buffer, the process may crash\n     * or exhibit undefined behavior during this call. If that happens, logs written after this\n     * point will not appear, which provides evidence of the scanning beyond the buffer.\n     */\n    OS_TimerCreate_Log(\"BEFORE: OS_CHECK_APINAME(timer_name) invoked. timer_name=%p\", (const void *)timer_name);\n\n    OS_CHECK_APINAME(timer_name);\n\n    /* If execution continues, the check did not crash the process */\n    OS_TimerCreate_Log(\"AFTER: OS_CHECK_APINAME returned successfully. timer_name=%p\", (const void *)timer_name);\n\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    OS_TimerCreate_Log(\"OS_TimeBaseCreate returned %ld. timebase_ref_id=%ld\", (long)return_code, (long)timebase_ref_id);\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimerCreate_Log(\"EXIT: OS_TimeBaseCreate failed with %ld, returning.\", (long)return_code);\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    OS_TimerCreate_Log(\"BEFORE: OS_DoTimerAdd invoked. timer_id=%p, timer_name=%p, timebase_ref_id=%ld, callback_ptr=%p\",\n                       (void *)timer_id, (const void *)timer_name, (long)timebase_ref_id, (void *)callback_ptr);\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    OS_TimerCreate_Log(\"OS_DoTimerAdd returned %ld. timer_id=%p\", (long)return_code, (void *)timer_id);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimerCreate_Log(\"OS_DoTimerAdd failed (%ld). Deleting timebase %ld.\", (long)return_code, (long)timebase_ref_id);\n        OS_TimeBaseDelete(timebase_ref_id);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n        OS_TimerCreate_Log(\"SUCCESS: Timer created. accuracy set to %u\", (unsigned)*accuracy);\n    }\n\n    OS_TimerCreate_Log(\"EXIT: OS_TimerCreate returning %ld\", (long)return_code);\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpe22yyinm/src/src/os/shared/src/osapi-time.c: In function 'OS_TimerCreate_Log':\n/tmp/tmpe22yyinm/src/src/os/shared/src/osapi-time.c:246:15: error: storage size of 'tm_buf' isn't known\n  246 |     struct tm tm_buf;\n      |               ^~~~~~\n/tmp/tmpe22yyinm/src/src/os/shared/src/osapi-time.c:259:22: error: invalid use of undefined type 'struct tm'\n  259 |             tm_buf = *tmp;\n      |                      ^\n/tmp/tmpe22yyinm/src/src/os/shared/src/osapi-time.c:270:22: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  270 |     vfprintf(f, fmt, ap);\n      |                      ^~\ngmake[2]: *** [unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-time.dir/build.make:76: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-time.dir/__/__/os/shared/src/osapi-time.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:4407: unit-test-coverage/shared/CMakeFiles/utobj_coverage-shared-time.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_TimerCreate as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Minimal type aliases to allow this translation unit to compile. */\ntypedef int32_t int32;\ntypedef uint32_t uint32;\ntypedef int32 osal_id_t;\n\n/* Timer callback type (signature not important for compilation here) */\ntypedef void (*OS_TimerCallback_t)(void *);\n\n/* Argument wrapper used by the timer code */\ntypedef struct\n{\n    void *opaque_arg;\n    OS_TimerCallback_t timer_callback_func;\n} OS_Timer_ArgWrapper_t;\n\n/* External symbols and APIs that are provided elsewhere in the project. */\nextern int32 OS_TimeBaseCreate(osal_id_t *timebase_id, const char *name, void *options);\nextern int32 OS_DoTimerAdd(osal_id_t *timer_id, const char *timer_name, osal_id_t timebase_ref_id,\n                           void (*callback)(void *), void *arg, int flags);\nextern int32 OS_TimeBaseDelete(osal_id_t timebase_ref_id);\nextern void OS_Timer_NoArgCallback(void *arg);\n\n/* Shared globals declared elsewhere */\nextern struct\n{\n    uint32 MicroSecPerTick;\n} OS_SharedGlobalVars;\n\n/* Flag value -- declared as an enum so we don't use macros here */\nenum { TIMECB_FLAG_DEDICATED_TIMEBASE = 1 };\n\n/* These checks are provided by the surrounding code base; declare them so this file compiles. */\nextern void OS_CHECK_POINTER(const void *ptr);\nextern void OS_CHECK_APINAME(const char *name);\n\n/* Logging helper (keeps original logic). */\nstatic void OS_TimerCreate_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2183.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(__STDC_LIB_EXT1__)\n    /* Use localtime_s if available (bounds-checking variant) */\n    (void)localtime_s(&tm_buf, &t);\n#else\n    /* Fallback to localtime_r when available, otherwise localtime (not ideal but OK for logging) */\n# ifdef _POSIX_THREADS\n    (void)localtime_r(&t, &tm_buf);\n# else\n    {\n        struct tm *tmp = localtime(&t);\n        if (tmp != NULL)\n        {\n            tm_buf = *tmp;\n        }\n    }\n# endif\n#endif\n\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d - \", tm_buf.tm_year + 1900, tm_buf.tm_mon + 1,\n            tm_buf.tm_mday, tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /* Log entry and initial parameter state (do NOT dereference timer_name) */\n    OS_TimerCreate_Log(\"ENTER: OS_TimerCreate called. timer_id=%p, timer_name=%p, accuracy=%p, callback_ptr=%p\",\n                       (void *)timer_id, (const void *)timer_name, (void *)accuracy, (void *)callback_ptr);\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n\n    /* Probe: about to invoke API name check. If this macro uses an unbounded string routine\n     * (e.g. strlen) and timer_name points to a non-NUL-terminated buffer, the process may crash\n     * or exhibit undefined behavior during this call. If that happens, logs written after this\n     * point will not appear, which provides evidence of the scanning beyond the buffer.\n     */\n    OS_TimerCreate_Log(\"BEFORE: OS_CHECK_APINAME(timer_name) invoked. timer_name=%p\", (const void *)timer_name);\n\n    OS_CHECK_APINAME(timer_name);\n\n    /* If execution continues, the check did not crash the process */\n    OS_TimerCreate_Log(\"AFTER: OS_CHECK_APINAME returned successfully. timer_name=%p\", (const void *)timer_name);\n\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    OS_TimerCreate_Log(\"OS_TimeBaseCreate returned %ld. timebase_ref_id=%ld\", (long)return_code, (long)timebase_ref_id);\n\n    if (return_code != 0)\n    {\n        OS_TimerCreate_Log(\"EXIT: OS_TimeBaseCreate failed with %ld, returning.\", (long)return_code);\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    OS_TimerCreate_Log(\"BEFORE: OS_DoTimerAdd invoked. timer_id=%p, timer_name=%p, timebase_ref_id=%ld, callback_ptr=%p\",\n                       (void *)timer_id, (const void *)timer_name, (long)timebase_ref_id, (void *)callback_ptr);\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    OS_TimerCreate_Log(\"OS_DoTimerAdd returned %ld. timer_id=%p\", (long)return_code, (void *)timer_id);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != 0)\n    {\n        OS_TimerCreate_Log(\"OS_DoTimerAdd failed (%ld). Deleting timebase %ld.\", (long)return_code, (long)timebase_ref_id);\n        OS_TimeBaseDelete(timebase_ref_id);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n        OS_TimerCreate_Log(\"SUCCESS: Timer created. accuracy set to %u\", (unsigned)*accuracy);\n    }\n\n    OS_TimerCreate_Log(\"EXIT: OS_TimerCreate returning %ld\", (long)return_code);\n    return return_code;\n}\n",
  "explanation": "Fixed compile errors by including the proper standard headers (<stdio.h>, <stdarg.h>, <time.h>, <stdint.h>, <stddef.h>) so struct tm and va_list are defined. Added minimal typedefs and extern declarations for the types and functions referenced by the code (int32/uint32/osal_id_t, OS_TimerCallback_t, OS_Timer_ArgWrapper_t, OS_TimeBaseCreate, OS_DoTimerAdd, OS_TimeBaseDelete, OS_Timer_NoArgCallback, OS_SharedGlobalVars, OS_CHECK_POINTER, OS_CHECK_APINAME). Declared TIMECB_FLAG_DEDICATED_TIMEBASE as an enum constant instead of a macro. These changes preserve the original logic while ensuring the translation unit compiles cleanly without adding mock implementations or macros."
}