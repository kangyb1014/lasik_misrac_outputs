{
  "user_message": "An agent A claimed that the following OS_TimerCreate code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_TimerCreate.\n```c\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimeBaseDelete(timebase_ref_id);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If a caller passes a non-NULL 'name' that is not NUL-terminated within the expected maximum API name length (or otherwise exceeds the expected buffer bounds) then OS_ObjectIdFindNextMatch/OS_ObjectNameMatch will likely call standard string functions (e.g. strcmp/strlen/strncmp) on that pointer. Because OS_ObjectIdAllocateNew does not itself validate the string length or termination before passing (void *)name into OS_ObjectIdFindNextMatch, those string.h calls can read past the bounds of the object referenced by 'name' and thus violate MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2183.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    fprintf(f, \"[OS_TimerCreate] \");\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    probe_log(\"ENTRY: timer_id=%p, timer_name=%p, accuracy=%p, callback_ptr=%p\",\n              (void *)timer_id, (void *)timer_name, (void *)accuracy, (void *)callback_ptr);\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    probe_log(\"PARAMS_VALIDATED: timer_id=%p, timer_name=%p, callback_ptr=%p\",\n              (void *)timer_id, (void *)timer_name, (void *)callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    probe_log(\"Calling OS_TimeBaseCreate with timer_name=%p\", (void *)timer_name);\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    probe_log(\"OS_TimeBaseCreate returned %ld, timebase_ref_id=%lu\",\n              (long)return_code, (unsigned long)timebase_ref_id);\n\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"Timebase creation failed, returning %ld\", (long)return_code);\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    probe_log(\"About to call OS_DoTimerAdd: timer_id_ptr=%p, timer_name=%p, timebase_ref_id=%lu, callback_ptr=%p\",\n              (void *)timer_id, (void *)timer_name, (unsigned long)timebase_ref_id, (void *)Conv.timer_callback_func);\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    probe_log(\"OS_DoTimerAdd returned %ld, timer_id=%p\", (long)return_code, (void *)timer_id);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        probe_log(\"OS_DoTimerAdd failed (%ld). Deleting timebase %lu\", (long)return_code, (unsigned long)timebase_ref_id);\n        OS_TimeBaseDelete(timebase_ref_id);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n        probe_log(\"Timer created successfully. timer_id=%p, assigned accuracy=%u\", (void *)timer_id, (unsigned int)*accuracy);\n    }\n\n    probe_log(\"EXIT: returning %ld\", (long)return_code);\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_TimerCreate. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The reported violation is not supported by the provided code as-is. Rule 21.17 concerns direct use of the <string.h> functions in a way that can read beyond the bounds of the object referenced by the pointer parameter. The OS_TimerCreate implementation itself does not call any string.h functions; it validates the API name via the OS_CHECK_APINAME(timer_name) macro before passing timer_name to other internal functions (OS_TimeBaseCreate / OS_DoTimerAdd). In a well-formed OSAL implementation OS_CHECK_APINAME enforces that the name pointer is a valid NUL-terminated string within the allowed API-name length, which prevents downstream calls from invoking string.h functions on a non-terminated/overlong buffer. Agent A\u2019s scenario names a real risk only if (a) OS_CHECK_APINAME is missing or does not actually guarantee NUL-termination/length limits, or (b) there exists some caller that skips name validation and calls the downstream routines directly. Those are issues in the downstream code or in missing validation, not a direct violation by this OS_TimerCreate body. Because the shown OS_TimerCreate does perform the API-name check before forwarding the pointer, the claim that OS_TimerCreate itself violates MISRA C 2023 Rule 21.17 is not correct (unless OS_CHECK_APINAME is ineffective, which would require further inspection)."
}