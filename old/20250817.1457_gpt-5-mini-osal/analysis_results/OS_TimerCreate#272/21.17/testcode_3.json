{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_CHECK_APINAME (which expands to OS_CHECK_STRING(str, OS_MAX_API_NAME, ...)) uses an unbounded string function such as strlen on timer_name, and timer_name points to a non\u2011NUL\u2011terminated buffer (or to a buffer smaller than OS_MAX_API_NAME without a terminating '\\0'), the string routine will scan past the end of that object and access out of bounds. For example, passing a pointer to a char array of length N < OS_MAX_API_NAME that is not NUL terminated will cause strlen(timer_name) to read beyond the array. This would violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2183.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerCreate:\n```c\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimeBaseDelete(timebase_ref_id);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/*\n * Probe logging helper - appends to /tmp/logs/2183.txt\n * Keeps logging code minimal and avoids reading the timer_name contents\n * to prevent introducing new out-of-bounds accesses.\n */\nstatic void OS_TimerCreate_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2183.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(__STDC_LIB_EXT1__)\n    /* Use localtime_s if available (bounds-checking variant) */\n    localtime_s(&tm_buf, &t);\n#else\n    /* Fallback to localtime_r when available, otherwise localtime (not ideal but OK for logging) */\n# ifdef _POSIX_THREADS\n    localtime_r(&t, &tm_buf);\n# else\n    {\n        struct tm *tmp = localtime(&t);\n        if (tmp != NULL)\n        {\n            tm_buf = *tmp;\n        }\n    }\n# endif\n#endif\n\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d - \", tm_buf.tm_year + 1900, tm_buf.tm_mon + 1,\n            tm_buf.tm_mday, tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Original function preserved as much as possible; added logging probes. */\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /* Log entry and initial parameter state (do NOT dereference timer_name) */\n    OS_TimerCreate_Log(\"ENTER: OS_TimerCreate called. timer_id=%p, timer_name=%p, accuracy=%p, callback_ptr=%p\",\n                       (void *)timer_id, (const void *)timer_name, (void *)accuracy, (void *)callback_ptr);\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n\n    /* Probe: about to invoke API name check. If this macro uses an unbounded string routine\n     * (e.g. strlen) and timer_name points to a non-NUL-terminated buffer, the process may crash\n     * or exhibit undefined behavior during this call. If that happens, logs written after this\n     * point will not appear, which provides evidence of the scanning beyond the buffer.\n     */\n    OS_TimerCreate_Log(\"BEFORE: OS_CHECK_APINAME(timer_name) invoked. timer_name=%p\", (const void *)timer_name);\n\n    OS_CHECK_APINAME(timer_name);\n\n    /* If execution continues, the check did not crash the process */\n    OS_TimerCreate_Log(\"AFTER: OS_CHECK_APINAME returned successfully. timer_name=%p\", (const void *)timer_name);\n\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    OS_TimerCreate_Log(\"OS_TimeBaseCreate returned %ld. timebase_ref_id=%ld\", (long)return_code, (long)timebase_ref_id);\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimerCreate_Log(\"EXIT: OS_TimeBaseCreate failed with %ld, returning.\", (long)return_code);\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    OS_TimerCreate_Log(\"BEFORE: OS_DoTimerAdd invoked. timer_id=%p, timer_name=%p, timebase_ref_id=%ld, callback_ptr=%p\",\n                       (void *)timer_id, (const void *)timer_name, (long)timebase_ref_id, (void *)callback_ptr);\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    OS_TimerCreate_Log(\"OS_DoTimerAdd returned %ld. timer_id=%p\", (long)return_code, (void *)timer_id);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimerCreate_Log(\"OS_DoTimerAdd failed (%ld). Deleting timebase %ld.\", (long)return_code, (long)timebase_ref_id);\n        OS_TimeBaseDelete(timebase_ref_id);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n        OS_TimerCreate_Log(\"SUCCESS: Timer created. accuracy set to %u\", (unsigned)*accuracy);\n    }\n\n    OS_TimerCreate_Log(\"EXIT: OS_TimerCreate returning %ld\", (long)return_code);\n    return return_code;\n}\n"
}