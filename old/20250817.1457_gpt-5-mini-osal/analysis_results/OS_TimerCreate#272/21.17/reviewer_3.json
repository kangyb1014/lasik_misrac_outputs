{
  "user_message": "An agent A claimed that the following OS_TimerCreate code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_TimerCreate.\n```c\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimeBaseDelete(timebase_ref_id);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If OS_CHECK_APINAME (which expands to OS_CHECK_STRING(str, OS_MAX_API_NAME, ...)) uses an unbounded string function such as strlen on timer_name, and timer_name points to a non\u2011NUL\u2011terminated buffer (or to a buffer smaller than OS_MAX_API_NAME without a terminating '\\0'), the string routine will scan past the end of that object and access out of bounds. For example, passing a pointer to a char array of length N < OS_MAX_API_NAME that is not NUL terminated will cause strlen(timer_name) to read beyond the array. This would violate MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\ntypedef int32_t int32;\ntypedef uint32_t uint32;\ntypedef int32 osal_id_t;\ntypedef void (*OS_TimerCallback_t)(void *);\nextern int32 OS_TimeBaseCreate(osal_id_t *timebase_id, const char *name, void *options);\nextern int32 OS_TimeBaseDelete(osal_id_t timebase_ref_id);\nextern struct\n{\n    uint32 MicroSecPerTick;\n} OS_SharedGlobalVars;\nextern void OS_CHECK_POINTER(const void *ptr);\nextern void OS_CHECK_APINAME(const char *name);\nstatic void OS_TimerCreate_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2183.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(__STDC_LIB_EXT1__)\n    /* Use localtime_s if available (bounds-checking variant) */\n    (void)localtime_s(&tm_buf, &t);\n#else\n    /* Fallback to localtime_r when available, otherwise localtime (not ideal but OK for logging) */\n# ifdef _POSIX_THREADS\n    (void)localtime_r(&t, &tm_buf);\n# else\n    {\n        struct tm *tmp = localtime(&t);\n        if (tmp != NULL)\n        {\n            tm_buf = *tmp;\n        }\n    }\n# endif\n#endif\n\n    fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d - \", tm_buf.tm_year + 1900, tm_buf.tm_mon + 1,\n            tm_buf.tm_mday, tm_buf.tm_hour, tm_buf.tm_min, tm_buf.tm_sec);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /* Log entry and initial parameter state (do NOT dereference timer_name) */\n    OS_TimerCreate_Log(\"ENTER: OS_TimerCreate called. timer_id=%p, timer_name=%p, accuracy=%p, callback_ptr=%p\",\n                       (void *)timer_id, (const void *)timer_name, (void *)accuracy, (void *)callback_ptr);\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n\n    /* Probe: about to invoke API name check. If this macro uses an unbounded string routine\n     * (e.g. strlen) and timer_name points to a non-NUL-terminated buffer, the process may crash\n     * or exhibit undefined behavior during this call. If that happens, logs written after this\n     * point will not appear, which provides evidence of the scanning beyond the buffer.\n     */\n    OS_TimerCreate_Log(\"BEFORE: OS_CHECK_APINAME(timer_name) invoked. timer_name=%p\", (const void *)timer_name);\n\n    OS_CHECK_APINAME(timer_name);\n\n    /* If execution continues, the check did not crash the process */\n    OS_TimerCreate_Log(\"AFTER: OS_CHECK_APINAME returned successfully. timer_name=%p\", (const void *)timer_name);\n\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    OS_TimerCreate_Log(\"OS_TimeBaseCreate returned %ld. timebase_ref_id=%ld\", (long)return_code, (long)timebase_ref_id);\n\n    if (return_code != 0)\n    {\n        OS_TimerCreate_Log(\"EXIT: OS_TimeBaseCreate failed with %ld, returning.\", (long)return_code);\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    OS_TimerCreate_Log(\"BEFORE: OS_DoTimerAdd invoked. timer_id=%p, timer_name=%p, timebase_ref_id=%ld, callback_ptr=%p\",\n                       (void *)timer_id, (const void *)timer_name, (long)timebase_ref_id, (void *)callback_ptr);\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    OS_TimerCreate_Log(\"OS_DoTimerAdd returned %ld. timer_id=%p\", (long)return_code, (void *)timer_id);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != 0)\n    {\n        OS_TimerCreate_Log(\"OS_DoTimerAdd failed (%ld). Deleting timebase %ld.\", (long)return_code, (long)timebase_ref_id);\n        OS_TimeBaseDelete(timebase_ref_id);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n        OS_TimerCreate_Log(\"SUCCESS: Timer created. accuracy set to %u\", (unsigned)*accuracy);\n    }\n\n    OS_TimerCreate_Log(\"EXIT: OS_TimerCreate returning %ld\", (long)return_code);\n    return return_code;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "OS_TimerCreate itself does not call any <string.h> routines \u2014 it simply passes the timer_name pointer to the macro OS_CHECK_APINAME. Therefore a MISRA 21.17 violation cannot be determined from this function alone: the potential out\u2011of\u2011bounds string access would come from the implementation of OS_CHECK_APINAME/OS_CHECK_STRING, not from OS_TimerCreate.\n\nThe scenario described by agent A is plausible: if OS_CHECK_APINAME (or OS_CHECK_STRING) internally uses an unbounded routine such as strlen on timer_name and a caller can pass a non\u2011NUL terminated buffer (or a buffer shorter than OS_MAX_API_NAME without '\\0'), then that macro could read past the object bounds and would violate MISRA C 2023 Rule 21.17. Conversely, if the macro uses a bounded routine (e.g. strnlen/strnlen_s or an explicit length\u2011limited loop) or there is a documented API precondition that timer_name must be a NUL\u2011terminated string of limited length that callers always satisfy, then there is no violation in practice.\n\nConclusion: the report is not provably correct based on the supplied code. To confirm either way you must inspect the definition of OS_CHECK_APINAME/OS_CHECK_STRING. Recommended fixes (if the macro currently uses unbounded string functions): replace with a bounds\u2011limited check (strnlen/strnlen_s or manual loop with maximum length), or change the API to accept a length argument or otherwise enforce/validate that callers pass a properly NUL\u2011terminated buffer before calling the macro."
}