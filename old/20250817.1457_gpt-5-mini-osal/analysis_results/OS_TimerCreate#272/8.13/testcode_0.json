{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'callback_arg' in OS_DoTimerAdd is declared as void * but is only stored and passed through (never modified). According to MISRA C 2023 Rule 8.13 it should be a pointer to a const-qualified type (e.g. const void *callback_arg), and the related members (timecb->callback_arg, OS_Timer_ArgWrapper_t.opaque_arg, and the callback invocation parameter) should be updated accordingly.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TimerCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TimerCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TimerCreate:\n```c\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimeBaseDelete(timebase_ref_id);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TimerCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helper: write diagnostic information to /tmp/logs/2179.txt\n * This function intentionally keeps logic separate and does not change\n * the behavior of OS_TimerCreate. It only appends human-readable\n * diagnostic entries to the log file so that the control flow and\n * key state can be inspected to reproduce the reported violation.\n */\nstatic void OS_TimerCreate_LogProbe(const char *stage,\n                                    const void *timer_id_ptr,\n                                    const char *timer_name,\n                                    const void *accuracy_ptr,\n                                    const void *callback_ptr,\n                                    const void *timebase_ref_id_ptr,\n                                    const void *opaque_arg,\n                                    int32 return_code)\n{\n    /* Ensure the log directory exists (best effort). Ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/2179.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* If logging fails, do not affect program logic. */\n    }\n\n    fprintf(f, \"[OS_TimerCreate] stage=%s\\n\", stage);\n    fprintf(f, \"  timer_id_ptr=%p\\n\", timer_id_ptr);\n    fprintf(f, \"  timer_name=%s\\n\", (timer_name != NULL) ? timer_name : \"(null)\");\n    fprintf(f, \"  accuracy_ptr=%p\\n\", accuracy_ptr);\n    if (accuracy_ptr != NULL)\n    {\n        /* Do not dereference accuracy_ptr here unless caller has already\n         * validated it. We will only attempt to read if non-NULL to give\n         * additional context; this mirrors the checks in the function. */\n        fprintf(f, \"  *accuracy (raw)=%u\\n\", *(const unsigned int *)accuracy_ptr);\n    }\n    fprintf(f, \"  callback_ptr=%p\\n\", callback_ptr);\n    fprintf(f, \"  timebase_ref_id_ptr=%p\\n\", timebase_ref_id_ptr);\n    fprintf(f, \"  opaque_arg=%p\\n\", opaque_arg);\n    fprintf(f, \"  return_code=%d\\n\", (int)return_code);\n    fprintf(f, \"---\\n\");\n\n    fclose(f);\n}\n\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /* Log entry with initial pointers and callback value */\n    OS_TimerCreate_LogProbe(\"entry\", (const void *)timer_id, timer_name, (const void *)accuracy,\n                            (const void *)callback_ptr, NULL, NULL, 0);\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n\n    /* Log after time base creation attempt */\n    OS_TimerCreate_LogProbe(\"after_TimeBaseCreate\", (const void *)timer_id, timer_name,\n                            (const void *)accuracy, (const void *)callback_ptr,\n                            (const void *)&timebase_ref_id, NULL, return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    /* Log the prepared Conv contents before calling OS_DoTimerAdd */\n    OS_TimerCreate_LogProbe(\"before_DoTimerAdd\", (const void *)timer_id, timer_name,\n                            (const void *)accuracy, (const void *)callback_ptr,\n                            (const void *)&timebase_ref_id, (const void *)Conv.opaque_arg, 0);\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    /* Log the result of OS_DoTimerAdd and the actual timer_id returned */\n    OS_TimerCreate_LogProbe(\"after_DoTimerAdd\", (const void *)timer_id, timer_name,\n                            (const void *)accuracy, (const void *)callback_ptr,\n                            (const void *)&timebase_ref_id, (const void *)Conv.opaque_arg, return_code);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimeBaseDelete(timebase_ref_id);\n\n        /* Log that the timebase was deleted due to failure */\n        OS_TimerCreate_LogProbe(\"timebase_deleted_on_failure\", (const void *)timer_id, timer_name,\n                                (const void *)accuracy, (const void *)callback_ptr,\n                                (const void *)&timebase_ref_id, (const void *)Conv.opaque_arg, return_code);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n\n        /* Log the successful accuracy update and final state */\n        OS_TimerCreate_LogProbe(\"success_final\", (const void *)timer_id, timer_name,\n                                (const void *)accuracy, (const void *)callback_ptr,\n                                (const void *)&timebase_ref_id, (const void *)Conv.opaque_arg, return_code);\n    }\n\n    return return_code;\n}\n"
}