{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_TimerCreate:\n```c\nint32 OS_TimerCreate(osal_id_t *timer_id, const char *timer_name, uint32 *accuracy, OS_TimerCallback_t callback_ptr)\n{\n    int32                 return_code;\n    osal_id_t             timebase_ref_id;\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n    ** Check Parameters.  Although DoTimerAdd will also\n    ** check this stuff, also doing it here avoids unnecessarily\n    ** creating and deleting a timebase object in case something is bad.\n    */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(accuracy);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Create our dedicated time base object to drive this timer\n     */\n    return_code = OS_TimeBaseCreate(&timebase_ref_id, timer_name, NULL);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /*\n     * Create the actual timer object based off our dedicated time base\n     * The TIMECB_FLAG_DEDICATED_TIMEBASE flag is used to mark this object\n     * that the time base object attached to it was automatically created for it\n     *\n     * Although this passes a function pointer through the \"void*\" argument\n     * to the callback function (technically a no-no), this should be safe\n     * because it is already verified by a CompileTimeAssert that\n     * sizeof(OS_TimerCallback_t) <= sizeof(void*) on this platform.\n     */\n    Conv.opaque_arg          = NULL;\n    Conv.timer_callback_func = callback_ptr;\n\n    return_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);\n\n    /*\n     * If returning from this call unsuccessfully, then we need to delete the\n     * dedicated timebase object that we just created earlier.\n     */\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TimeBaseDelete(timebase_ref_id);\n    }\n    else\n    {\n        *accuracy = OS_SharedGlobalVars.MicroSecPerTick;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_TimerCreate:\ntypedef union\n{\n    OS_TimerCallback_t timer_callback_func;\n    void *             opaque_arg;\n} OS_Timer_ArgWrapper_t\n...\ntypedef void (*OS_TimerCallback_t)(osal_id_t timer_id)\n...\nstatic int32 OS_DoTimerAdd(osal_id_t *timer_id, const char *timer_name, osal_id_t timebase_ref_id,\n                           OS_ArgCallback_t callback_ptr, void *callback_arg, uint32 flags)\n{\n    int32                          return_code;\n    osal_objtype_t                 objtype;\n    OS_object_token_t              timebase_token;\n    OS_object_token_t              timecb_token;\n    OS_object_token_t              listcb_token;\n    OS_timecb_internal_record_t *  timecb;\n    OS_timecb_internal_record_t *  list_timecb;\n    OS_timebase_internal_record_t *timebase;\n\n    /*\n     * Check parameters\n     *\n     * Note \"callback_arg\" is not checked, because in certain configurations it can be validly null.\n     */\n    OS_CHECK_POINTER(timer_id);\n    OS_CHECK_APINAME(timer_name);\n    OS_CHECK_POINTER(callback_ptr);\n\n    /*\n     * Check our context.  Not allowed to use the timer API from a timer callback.\n     * Just interested in the object type returned.\n     */\n    objtype = OS_ObjectIdToType_Impl(OS_TaskGetId_Impl());\n    if (objtype == OS_OBJECT_TYPE_OS_TIMEBASE)\n    {\n        return OS_ERR_INCORRECT_OBJ_STATE;\n    }\n\n    /*\n     * Check that the timebase reference is valid\n     * If successful, then after this statement, we MUST decrement the refcount\n     * if we leave this routine with an error.\n     */\n    return_code =\n        OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_TIMEBASE, timebase_ref_id, &timebase_token);\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(OS_OBJECT_TYPE_OS_TIMECB, timer_name, &timecb_token);\n    if (return_code == OS_SUCCESS)\n    {\n        timecb   = OS_OBJECT_TABLE_GET(OS_timecb_table, timecb_token);\n        timebase = OS_OBJECT_TABLE_GET(OS_timebase_table, timebase_token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(timecb_token, timecb, timer_name, timer_name);\n\n        /*\n         * transfer ownership so the refcount obtained earlier is now\n         * associated with the timecb object, and will be retained until\n         * the object is deleted.\n         */\n        OS_ObjectIdTransferToken(&timebase_token, &timecb->timebase_token);\n\n        timecb->callback_ptr = callback_ptr;\n        timecb->callback_arg = callback_arg;\n        timecb->flags        = flags;\n        timecb->prev_cb      = OS_ObjectIdFromToken(&timecb_token);\n        timecb->next_cb      = OS_ObjectIdFromToken(&timecb_token);\n\n        /*\n         * Now we need to add it to the time base callback ring, so take the\n         * timebase-specific lock to prevent a tick from being processed at this moment.\n         */\n        OS_TimeBaseLock_Impl(&timebase_token);\n\n        if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timebase->first_cb, &listcb_token) ==\n            OS_SUCCESS)\n        {\n            list_timecb = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n\n            timecb->next_cb = OS_ObjectIdFromToken(&listcb_token);\n            timecb->prev_cb = list_timecb->prev_cb;\n\n            if (OS_ObjectIdGetById(OS_LOCK_MODE_NONE, OS_OBJECT_TYPE_OS_TIMECB, timecb->prev_cb, &listcb_token) ==\n                OS_SUCCESS)\n            {\n                list_timecb->prev_cb = OS_ObjectIdFromToken(&timecb_token);\n                list_timecb          = OS_OBJECT_TABLE_GET(OS_timecb_table, listcb_token);\n                list_timecb->next_cb = OS_ObjectIdFromToken(&timecb_token);\n            }\n        }\n\n        timebase->first_cb = OS_ObjectIdFromToken(&timecb_token);\n\n        OS_TimeBaseUnlock_Impl(&timebase_token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &timecb_token, timer_id);\n    }\n    else\n    {\n        OS_ObjectIdRelease(&timebase_token);\n    }\n\n    return return_code;\n}\n...\nstatic void OS_Timer_NoArgCallback(osal_id_t objid, void *arg)\n{\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n     * Note - did not write this as simply *((OS_SimpleCallback_t)arg) because\n     * technically you cannot cast a void * to a function pointer.\n     */\n    Conv.opaque_arg = arg;\n    (*Conv.timer_callback_func)(objid);\n}\n...\n#define CompileTimeAssert(Condition, Message) typedefcharMessage[(Condition)?1:-1]\n...\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\n#define OS_CHECK_APINAME(str) OS_CHECK_STRING(str,OS_MAX_API_NAME,OS_ERR_NAME_TOO_LONG)\n...\n#define TIMECB_FLAG_DEDICATED_TIMEBASE 0x1\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "Conv.opaque_arg          = NULL;\nConv.timer_callback_func = callback_ptr;\n\nreturn_code = OS_DoTimerAdd(timer_id, timer_name, timebase_ref_id, OS_Timer_NoArgCallback, Conv.opaque_arg,\n                                TIMECB_FLAG_DEDICATED_TIMEBASE);",
    "static void OS_Timer_NoArgCallback(osal_id_t objid, void *arg)\n{\n    OS_Timer_ArgWrapper_t Conv;\n\n    /*\n     * Note - did not write this as simply *((OS_SimpleCallback_t)arg) because\n     * technically you cannot cast a void * to a function pointer.\n     */\n    Conv.opaque_arg = arg;\n    (*Conv.timer_callback_func)(objid);\n}",
    "typedef union\n{\n    OS_TimerCallback_t timer_callback_func;\n    void *             opaque_arg;\n} OS_Timer_ArgWrapper_t"
  ],
  "explanation": "Other code fragments do not appear to rely on compiler-specific language extensions. The rest of the function and helper routines use standard C constructs (function calls, pointer checks via macros, object/table manipulation, and standard typedefs). No occurrences of common compiler extensions were found elsewhere (no __attribute__, __asm__, typeof, nested functions, statement-expressions, label-as-value, or other vendor builtins). The CompileTimeAssert macro uses a conventional typedef-array trick to force a compile-time error and is not a compiler extension. Therefore only the fragments that perform conversion/transport of a function pointer via a void* (the union typedef and its usage in OS_TimerCreate and OS_Timer_NoArgCallback) need investigation for potential use of nonstandard or implementation-defined behavior."
}