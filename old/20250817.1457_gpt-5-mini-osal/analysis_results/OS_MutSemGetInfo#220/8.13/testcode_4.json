{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'record' is declared as OS_common_record_t * and is assigned from OS_OBJECT_TABLE_GET which yields an OS_common_record_t * (the global table is OS_common_record_t *const). In OS_MutSemGetInfo the code only reads fields from the record (record->name_entry, record->creator) and does not modify the object, so 'record' could and should be declared to point to a const-qualified type (e.g. const OS_common_record_t *record). Because the pointer is not const-qualified despite being used only for read access, this violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1763.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetInfo:\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logging helper. Appends control-flow and state information to file. */\nstatic void OS_MutSemGetInfo_Log(const char *stage,\n                                 unsigned long sem_id_val,\n                                 const void *record_ptr,\n                                 const void *token_addr,\n                                 long return_code_val,\n                                 const char *name_entry,\n                                 unsigned long creator_val)\n{\n    FILE *f = fopen(\"/tmp/logs/1763.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"[OS_MutSemGetInfo] %s\\n\", stage);\n        fprintf(f, \"  sem_id=%lu, return_code=%ld, record_ptr=%p, token_addr=%p\\n\",\n                sem_id_val, return_code_val, record_ptr, token_addr);\n        if (name_entry != NULL)\n        {\n            fprintf(f, \"  record->name_entry=\\\"%s\\\"\\n\", name_entry);\n        }\n        fprintf(f, \"  record->creator=%lu\\n\", creator_val);\n        fclose(f);\n    }\n}\n\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry */\n    OS_MutSemGetInfo_Log(\"entry\", (unsigned long)sem_id, NULL, NULL, 0L, NULL, 0UL);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log after object id lookup */\n    OS_MutSemGetInfo_Log(\"after OS_ObjectIdGetById\", (unsigned long)sem_id, NULL, &token, (long)return_code, NULL, 0UL);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        /* Log the record pointer and its readable fields before use. */\n        OS_MutSemGetInfo_Log(\"object found\",\n                              (unsigned long)sem_id,\n                              (const void *)record,\n                              (const void *)&token,\n                              (long)return_code,\n                              (record != NULL) ? record->name_entry : \"(null)\",\n                              (record != NULL) ? (unsigned long)record->creator : 0UL);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        /* Log after implementation call */\n        OS_MutSemGetInfo_Log(\"after OS_MutSemGetInfo_Impl\",\n                              (unsigned long)sem_id,\n                              (const void *)record,\n                              (const void *)&token,\n                              (long)return_code,\n                              (record != NULL) ? record->name_entry : \"(null)\",\n                              (record != NULL) ? (unsigned long)record->creator : 0UL);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    /* Log exit */\n    OS_MutSemGetInfo_Log(\"exit\", (unsigned long)sem_id, (const void *)record, (const void *)&token, (long)return_code,\n                         (record != NULL) ? record->name_entry : \"(null)\",\n                         (record != NULL) ? (unsigned long)record->creator : 0UL);\n\n    return return_code;\n}\n"
}