{
  "user_message": "An agent A claimed that the following OS_MutSemGetInfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_MutSemGetInfo.\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The macro OS_OBJECT_TABLE_GET(tbl, tok) expands to &tbl[OS_ObjectIndexFromToken(&(tok))], producing a pointer of type OS_common_record_t * (non-const). In OS_MutSemGetInfo the returned pointer is assigned to record (OS_common_record_t *record) and only read (record->name_entry, record->creator). Since the table entries are only accessed for reading here, the pointer could and should be const-qualified (e.g. const OS_common_record_t *). Therefore the macro (and/or the local pointer) does not use const where possible, violating MISRA C 2023 Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n    FILE *fp = NULL;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    /* Log entry and input state */\n    fp = fopen(\"/tmp/logs/1763.txt\", \"a\");\n    if (fp)\n    {\n        fprintf(fp, \"ENTRY: OS_MutSemGetInfo called: sem_id=%llu, mut_prop=%p\\n\",\n                (unsigned long long)sem_id, (void *)mut_prop);\n        fclose(fp);\n    }\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    fp = fopen(\"/tmp/logs/1763.txt\", \"a\");\n    if (fp)\n    {\n        fprintf(fp, \"STATE: mut_prop zeroed (size=%zu)\\n\", sizeof(OS_mut_sem_prop_t));\n        fclose(fp);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    fp = fopen(\"/tmp/logs/1763.txt\", \"a\");\n    if (fp)\n    {\n        fprintf(fp, \"AFTER OS_ObjectIdGetById: return_code=%ld, token_addr=%p\\n\",\n                (long)return_code, (void *)&token);\n        fclose(fp);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        /* Obtain record (note: this yields a non-const pointer to table entry) */\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        fp = fopen(\"/tmp/logs/1763.txt\", \"a\");\n        if (fp)\n        {\n            fprintf(fp, \"RECORD: record_ptr=%p\\n\", (void *)record);\n            if (record != NULL)\n            {\n                /* Log the readable fields that will be used */\n                /* Guard name read to avoid potential issues with non-null-terminated data */\n                fprintf(fp, \"RECORD FIELDS: name_entry=\\\"%s\\\", creator=%llu\\n\",\n                        (record->name_entry != NULL) ? record->name_entry : \"(null)\",\n                        (unsigned long long)record->creator);\n            }\n            fclose(fp);\n        }\n\n        /* Preserve original behavior: copy name and creator into mut_prop */\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        fp = fopen(\"/tmp/logs/1763.txt\", \"a\");\n        if (fp)\n        {\n            fprintf(fp, \"COPIED TO OUTPUT: mut_prop->name=\\\"%s\\\", mut_prop->creator=%llu\\n\",\n                    mut_prop->name, (unsigned long long)mut_prop->creator);\n            fclose(fp);\n        }\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        fp = fopen(\"/tmp/logs/1763.txt\", \"a\");\n        if (fp)\n        {\n            fprintf(fp, \"AFTER OS_MutSemGetInfo_Impl: return_code=%ld\\n\", (long)return_code);\n            fclose(fp);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        fp = fopen(\"/tmp/logs/1763.txt\", \"a\");\n        if (fp)\n        {\n            fprintf(fp, \"AFTER OS_ObjectIdRelease: token_addr=%p released\\n\", (void *)&token);\n            fclose(fp);\n        }\n    }\n    else\n    {\n        fp = fopen(\"/tmp/logs/1763.txt\", \"a\");\n        if (fp)\n        {\n            fprintf(fp, \"ERROR PATH: OS_ObjectIdGetById failed with code=%ld\\n\", (long)return_code);\n            fclose(fp);\n        }\n    }\n\n    fp = fopen(\"/tmp/logs/1763.txt\", \"a\");\n    if (fp)\n    {\n        fprintf(fp, \"EXIT: OS_MutSemGetInfo returning %ld\\n\", (long)return_code);\n        fclose(fp);\n    }\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nENTRY: OS_MutSemGetInfo called: sem_id=3735928559, mut_prop=0x7fffa363c540\nSTATE: mut_prop zeroed (size=24)\nAFTER OS_ObjectIdGetById: return_code=-35, token_addr=0x7fffa363c4f0\nERROR PATH: OS_ObjectIdGetById failed with code=-35\nEXIT: OS_MutSemGetInfo returning -35\nENTRY: OS_MutSemGetInfo called: sem_id=0, mut_prop=0x7fffa363c540\nSTATE: mut_prop zeroed (size=24)\nAFTER OS_ObjectIdGetById: return_code=-35, token_addr=0x7fffa363c4f0\nERROR PATH: OS_ObjectIdGetById failed with code=-35\nEXIT: OS_MutSemGetInfo returning -35\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In OS_MutSemGetInfo the variable record is declared as OS_common_record_t * but is only used for read-only accesses (record->name_entry, record->creator). Per MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type whenever possible. Declaring the local pointer as const OS_common_record_t *record (or otherwise ensuring a const-qualified access path, e.g. a const-qualified macro variant) would resolve the violation. The fact that the provided runtime log did not reach the success path does not change the static code issue: the pointer declaration is not const-qualified although it could be."
}