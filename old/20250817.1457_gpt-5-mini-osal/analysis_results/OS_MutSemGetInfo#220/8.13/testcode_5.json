{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable is declared as a pointer to a non-const object: 'OS_common_record_t *record;'. It is assigned from the global table via OS_OBJECT_TABLE_GET and only used for read access (copying record->name_entry and record->creator). Per MISRA C 2023 Rule 8.13 it should be const-qualified (e.g. 'const OS_common_record_t *record;') because the pointer can (and should) point to a const-qualified type whenever possible. The global table itself is 'extern OS_common_record_t *const OS_global_mutex_table' (a const pointer to mutable elements), so the current declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1763.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetInfo:\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helper: append a formatted message to the persistent log file */\nstatic void osal_probe_log(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/1763.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s\", msg);\n        fflush(f);\n        fclose(f);\n    }\n}\n\n/* Helper to log a buffer of bytes (used for token raw bytes) */\nstatic void osal_probe_log_bytes(const void *buf, size_t len)\n{\n    const unsigned char *b = (const unsigned char *)buf;\n    FILE *f = fopen(\"/tmp/logs/1763.txt\", \"a\");\n    if (f != NULL)\n    {\n        size_t i;\n        for (i = 0; i < len; ++i)\n        {\n            fprintf(f, \"%02X\", b[i]);\n            /* Limit the amount of data per line to avoid extremely long logs */\n            if ((i % 32) == 31)\n                fprintf(f, \" \");\n        }\n        fprintf(f, \"\\n\");\n        fflush(f);\n        fclose(f);\n    }\n}\n\n/* Modified function with probes inserted. Original logic preserved. */\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Log entry and parameters */\n    {\n        char buf[256];\n        snprintf(buf, sizeof(buf),\n                 \"OS_MutSemGetInfo ENTRY: sem_id=%lu, mut_prop=%p\\n\",\n                 (unsigned long)sem_id, (void *)mut_prop);\n        osal_probe_log(buf);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"OS_MutSemGetInfo: after memset(mut_prop).\\n\");\n        osal_probe_log(buf);\n    }\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    {\n        char buf[256];\n        snprintf(buf, sizeof(buf), \"OS_MutSemGetInfo: OS_ObjectIdGetById returned %ld\\n\", (long)return_code);\n        osal_probe_log(buf);\n\n        /* Log token raw bytes to provide evidence of the token value/state */\n        osal_probe_log(\"OS_MutSemGetInfo: token raw bytes: \");\n        osal_probe_log_bytes(&token, sizeof(token));\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        /* Log pointer & contents of the retrieved record for read-only evidence */\n        {\n            FILE *f = fopen(\"/tmp/logs/1763.txt\", \"a\");\n            if (f != NULL)\n            {\n                fprintf(f, \"OS_MutSemGetInfo: record=%p\\n\", (void *)record);\n                if (record != NULL)\n                {\n                    /* copy name safely for logging */\n                    char name_copy[64] = {0};\n                    strncpy(name_copy, record->name_entry, sizeof(name_copy) - 1);\n                    fprintf(f, \"OS_MutSemGetInfo: record->name_entry=\\\"%s\\\"\\n\", name_copy);\n\n                    /* creator is logged as an unsigned long to capture its value */\n                    fprintf(f, \"OS_MutSemGetInfo: record->creator=%lu\\n\", (unsigned long)record->creator);\n                }\n                else\n                {\n                    fprintf(f, \"OS_MutSemGetInfo: record is NULL\\n\");\n                }\n                fflush(f);\n                fclose(f);\n            }\n        }\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        {\n            char buf[128];\n            snprintf(buf, sizeof(buf), \"OS_MutSemGetInfo: populated mut_prop from record (name=%s, creator=%lu)\\n\",\n                     mut_prop->name, (unsigned long)mut_prop->creator);\n            osal_probe_log(buf);\n        }\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        {\n            char buf[128];\n            snprintf(buf, sizeof(buf), \"OS_MutSemGetInfo: OS_MutSemGetInfo_Impl returned %ld\\n\", (long)return_code);\n            osal_probe_log(buf);\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        osal_probe_log(\"OS_MutSemGetInfo: token released\\n\");\n    }\n    else\n    {\n        osal_probe_log(\"OS_MutSemGetInfo: returning error without accessing record\\n\");\n    }\n\n    {\n        char buf[128];\n        snprintf(buf, sizeof(buf), \"OS_MutSemGetInfo EXIT: return_code=%ld\\n\", (long)return_code);\n        osal_probe_log(buf);\n    }\n\n    return return_code;\n}\n"
}