{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe function OS_MutSemGetInfo_Impl(const OS_object_token_t *token, OS_mut_sem_prop_t *mut_prop) is invoked from OS_MutSemGetInfo but its body only returns OS_SUCCESS and has no side effects. Because the call only yields a constant return value, removing the call (or replacing it with return_code = OS_SUCCESS) would not change program behaviour. The function is therefore executed but redundant and constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1762.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetInfo:\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/1762.txt */\nstatic void os_mutsem_probe(const char *stage,\n                            osal_id_t sem_id,\n                            const OS_object_token_t *token,\n                            OS_common_record_t *record,\n                            const OS_mut_sem_prop_t *mut_prop,\n                            int32 return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1762.txt\", \"a\");\n    if (!f)\n    {\n        /* If logging cannot be performed, do not affect program flow. */\n        return;\n    }\n\n    /* Basic header for this probe event */\n    fprintf(f, \"[OS_MutSemGetInfo] stage=%s, sem_id=%lu, return_code=%d\\n\",\n            stage, (unsigned long)sem_id, (int)return_code);\n\n    /* Token: print pointer address (content layout is internal) */\n    fprintf(f, \"  token_ptr=%p\\n\", (const void *)token);\n\n    /* If a record is available, log relevant fields used by the function */\n    if (record != NULL)\n    {\n        /* Guard string print against NULL */\n        const char *name_entry = record->name_entry ? record->name_entry : \"(null)\";\n        fprintf(f, \"  record_ptr=%p, record->name_entry=\\\"%s\\\", record->creator=%ld\\n\",\n                (void *)record, name_entry, (long)record->creator);\n    }\n\n    /* If a mut_prop buffer is available, log its fields before/after the Impl call */\n    if (mut_prop != NULL)\n    {\n        const char *prop_name = mut_prop->name ? mut_prop->name : \"(null)\";\n        fprintf(f, \"  mut_prop_ptr=%p, mut_prop->name=\\\"%s\\\", mut_prop->creator=%ld\\n\",\n                (const void *)mut_prop, prop_name, (long)mut_prop->creator);\n    }\n\n    fclose(f);\n}\n\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    /* Log entry and initial pointer state */\n    os_mutsem_probe(\"entry\", sem_id, NULL, NULL, mut_prop, 0);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    /* Log after clearing the output structure */\n    os_mutsem_probe(\"after_memset\", sem_id, NULL, NULL, mut_prop, 0);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of ObjectIdGetById and token address */\n    os_mutsem_probe(\"after_ObjectIdGetById\", sem_id, &token, NULL, mut_prop, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->name[sizeof(mut_prop->name) - 1] = '\\0';\n        mut_prop->creator = record->creator;\n\n        /* Log state immediately before calling the Impl function */\n        os_mutsem_probe(\"before_Impl\", sem_id, &token, record, mut_prop, return_code);\n\n        /* Original call preserved: may be a no-op in some implementations */\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        /* Log state immediately after calling the Impl function to capture any changes\n           (this is the critical evidence for the reported dead-code scenario) */\n        os_mutsem_probe(\"after_Impl\", sem_id, &token, record, mut_prop, return_code);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after release for completeness */\n        os_mutsem_probe(\"after_Release\", sem_id, &token, record, mut_prop, return_code);\n    }\n\n    /* Final exit log */\n    os_mutsem_probe(\"exit\", sem_id, NULL, NULL, mut_prop, return_code);\n\n    return return_code;\n}\n"
}