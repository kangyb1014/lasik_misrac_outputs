{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nOS_MutSemGetInfo_Impl, as provided, is a no-op that always returns OS_SUCCESS and does not modify mut_prop. In OS_MutSemGetInfo the variable return_code is already OS_SUCCESS on entry to the if-block, and the subsequent call and assignment `return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);` therefore have no effect on the observable behaviour (returned value or mut_prop contents). Removing that call/assignment would not change program behaviour given the supplied implementation, so this constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_MutSemGetInfo code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1762.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_MutSemGetInfo as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetInfo:\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_MutSemGetInfo code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <sys/stat.h>\n\n/* Probe helper: append structured logs to /tmp/logs/1762.txt */\nstatic void OS_MutSemGetInfo_Log(const char *stage, osal_id_t sem_id, int32 return_code, const OS_mut_sem_prop_t *mut_prop)\n{\n    FILE *f = fopen(\"/tmp/logs/1762.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Try to create the directory once and retry */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/1762.txt\", \"a\");\n    }\n\n    if (f != NULL)\n    {\n        /* Print a short header about the control point */\n        fprintf(f, \"[OS_MutSemGetInfo] stage=%s sem_id=%ld return_code=%ld\\n\",\n                stage, (long)sem_id, (long)return_code);\n\n        if (mut_prop != NULL)\n        {\n            /* Print name (bounded) and creator. Use sizeof to avoid overruns. */\n            fprintf(f, \"  mut_prop->name=\\\"\");\n            /* Print up to sizeof(name) characters, stopping at NUL if present */\n            for (size_t i = 0; i < sizeof(mut_prop->name); ++i)\n            {\n                char c = mut_prop->name[i];\n                if (c == '\\0') break;\n                fputc((int)c, f);\n            }\n            fprintf(f, \"\\\"\\n\");\n            fprintf(f, \"  mut_prop->creator=%ld\\n\", (long)mut_prop->creator);\n        }\n\n        fclose(f);\n    }\n}\n\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    /* Log entry state before modification */\n    OS_MutSemGetInfo_Log(\"entry_before_memset\", sem_id, -1, mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    /* Log after memset to capture initialization */\n    OS_MutSemGetInfo_Log(\"after_memset\", sem_id, -1, mut_prop);\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n\n    /* Log result of ObjectIdGetById */\n    OS_MutSemGetInfo_Log(\"after_ObjectIdGetById\", sem_id, return_code, mut_prop);\n\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        /* Log state after copying name and creator, before calling Impl */\n        OS_MutSemGetInfo_Log(\"after_copy_before_Impl\", sem_id, return_code, mut_prop);\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        /* Log state after calling Impl to capture whether Impl changed anything */\n        OS_MutSemGetInfo_Log(\"after_Impl_call\", sem_id, return_code, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n\n        /* Log after release to capture final state within the if-block */\n        OS_MutSemGetInfo_Log(\"after_release\", sem_id, return_code, mut_prop);\n    }\n\n    /* Log final return code and mut_prop before returning */\n    OS_MutSemGetInfo_Log(\"exit\", sem_id, return_code, mut_prop);\n\n    return return_code;\n}\n"
}