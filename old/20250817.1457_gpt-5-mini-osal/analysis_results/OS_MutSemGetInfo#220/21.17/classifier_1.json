{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_MutSemGetInfo:\n```c\nint32 OS_MutSemGetInfo(osal_id_t sem_id, OS_mut_sem_prop_t *mut_prop)\n{\n    OS_common_record_t *record;\n    int32               return_code;\n    OS_object_token_t   token;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(mut_prop);\n\n    memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, sem_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        record = OS_OBJECT_TABLE_GET(OS_global_mutex_table, token);\n\n        strncpy(mut_prop->name, record->name_entry, sizeof(mut_prop->name) - 1);\n        mut_prop->creator = record->creator;\n\n        return_code = OS_MutSemGetInfo_Impl(&token, mut_prop);\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_MutSemGetInfo:\n#define OS_CHECK_POINTER(ptr) BUGCHECK((ptr)!=NULL,OS_INVALID_POINTER)\n...\ntypedef struct\n{\n    char      name[OS_MAX_API_NAME];\n    osal_id_t creator;\n} OS_mut_sem_prop_t\n...\ntypedef struct OS_common_record OS_common_record_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nextern OS_common_record_t *const OS_global_mutex_table\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\ntypedef struct OS_object_token OS_object_token_t\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmemset(mut_prop, 0, sizeof(OS_mut_sem_prop_t));\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The memset call itself is safe in normal usage because mut_prop has type OS_mut_sem_prop_t * and the size argument is sizeof(OS_mut_sem_prop_t). Therefore the rule is not violated here. A concrete violation scenario would be if the caller passed a pointer that does not reference an object of that size (for example: char buf[8]; OS_MutSemGetInfo(id, (OS_mut_sem_prop_t *)buf);) \u2014 then memset(mut_prop, 0, sizeof(OS_mut_sem_prop_t)) would write past buf and violate Rule 21.17."
}