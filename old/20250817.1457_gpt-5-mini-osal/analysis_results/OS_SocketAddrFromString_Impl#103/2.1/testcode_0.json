{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe 'break;' statement immediately following 'return OS_ERR_BAD_ADDRESS;' in the switch default case is unreachable. Once 'return' executes the function exits, so the subsequent 'break;' can never be executed \u2014 this is unreachable code and thus violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAddrFromString_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/825.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAddrFromString_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAddrFromString_Impl:\n```c\nint32 OS_SocketAddrFromString_Impl(OS_SockAddr_t *Addr, const char *string)\n{\n    void *                  addrbuffer;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    /* This function is defined as returning 1 on success, not 0 */\n    if (inet_pton(Accessor->sa.sa_family, string, addrbuffer) != 1)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAddrFromString_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logging function - writes control flow and state to /tmp/logs/825.txt */\nstatic void OS_SocketAddrFromString_Impl_log(const char *event, int family, const char *str, const void *addrbuf)\n{\n    FILE *f = fopen(\"/tmp/logs/825.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Guard against NULL string */\n        fprintf(f, \"%s: family=%d, string=\\\"%s\\\", addrbuf=%p\\n\",\n                event,\n                family,\n                (str != NULL) ? str : \"(null)\",\n                addrbuf);\n        fclose(f);\n    }\n}\n\nint32 OS_SocketAddrFromString_Impl(OS_SockAddr_t *Addr, const char *string)\n{\n    void *                  addrbuffer;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    /* Log entry with the sa_family and input string */\n    OS_SocketAddrFromString_Impl_log(\"ENTER\", (int)Accessor->sa.sa_family, string, NULL);\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            /* Log that AF_INET path was taken and the buffer address */\n            OS_SocketAddrFromString_Impl_log(\"CASE AF_INET\", (int)Accessor->sa.sa_family, string, addrbuffer);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            /* Log that AF_INET6 path was taken and the buffer address */\n            OS_SocketAddrFromString_Impl_log(\"CASE AF_INET6\", (int)Accessor->sa.sa_family, string, addrbuffer);\n            break;\n#endif\n        default:\n            /* Log that default path is taken and that function will return */\n            OS_SocketAddrFromString_Impl_log(\"DEFAULT - bad address, returning OS_ERR_BAD_ADDRESS\", (int)Accessor->sa.sa_family, string, NULL);\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    /* This function is defined as returning 1 on success, not 0 */\n    OS_SocketAddrFromString_Impl_log(\"BEFORE_INET_PTON\", (int)Accessor->sa.sa_family, string, addrbuffer);\n    if (inet_pton(Accessor->sa.sa_family, string, addrbuffer) != 1)\n    {\n        /* Log inet_pton failure */\n        OS_SocketAddrFromString_Impl_log(\"INET_PTON_FAILED\", (int)Accessor->sa.sa_family, string, addrbuffer);\n        return OS_ERROR;\n    }\n\n    /* Log success */\n    OS_SocketAddrFromString_Impl_log(\"SUCCESS\", (int)Accessor->sa.sa_family, string, addrbuffer);\n\n    return OS_SUCCESS;\n}\n"
}