{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_Posix_QueueAPI_Impl_Init:\n```c\nint32 OS_Posix_QueueAPI_Impl_Init(void)\n{\n    memset(OS_impl_queue_table, 0, sizeof(OS_impl_queue_table));\n\n    /*\n     * Automatic truncation is dependent on the OSAL_CONFIG_DEBUG_PERMISSIVE_MODE compile-time define - so\n     * creating a too-large message queue on a target without OSAL_CONFIG_DEBUG_PERMISSIVE_MODE will fail\n     * with an OS error as intended.\n     */\n#ifdef OSAL_CONFIG_DEBUG_PERMISSIVE_MODE\n    /*\n     * Use the BSP-provided limit\n     */\n    POSIX_GlobalVars.TruncateQueueDepth = OS_BSP_Global.MaxQueueDepth;\n#else\n    /*\n     * Initialize this to zero to indicate no limit\n     */\n    POSIX_GlobalVars.TruncateQueueDepth = OSAL_BLOCKCOUNT_C(0);\n#endif\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_Posix_QueueAPI_Impl_Init:\nOS_impl_queue_internal_record_t OS_impl_queue_table[OS_MAX_QUEUES]\n...\nextern POSIX_GlobalVars_t POSIX_GlobalVars\n...\nextern OS_BSP_GlobalData_t OS_BSP_Global\n...\n#define OSAL_BLOCKCOUNT_C(X) ((osal_blockcount_t)(X))\n...\ntypedef int32_t   int32\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No language extensions are present in the provided code fragment. Specific checks performed:\n\n- The function signature (int32 OS_Posix_QueueAPI_Impl_Init(void)) uses a typedef alias for a fixed-width integer (int32_t via int32); fixed-width integer types are standard C (C99) and not compiler-specific extensions.\n- The call to memset and the use of standard return value OS_SUCCESS are normal C and standard library usage.\n- Preprocessor directives (#ifdef / #else / #endif) are standard C preprocessor features; conditional compilation using OSAL_CONFIG_DEBUG_PERMISSIVE_MODE is not a language extension.\n- The macro OSAL_BLOCKCOUNT_C(X) defined as a cast ((osal_blockcount_t)(X)) is a plain macro and a standard C cast expression, not a compiler-specific extension.\n- Accesses to structure members (POSIX_GlobalVars.TruncateQueueDepth, OS_BSP_Global.MaxQueueDepth) and the array definition OS_impl_queue_table[OS_MAX_QUEUES] use standard C syntax; using a macro for the array size is standard practice.\n- No GCC/Clang/MSVC-specific builtins or attributes (for example __attribute__, __declspec, typeof, __builtin_*, __extension__, asm, or other compiler-specific tokens) are used.\n\nTherefore there are no code fragments that need to be investigated for MISRA C 2023 Rule 1.2 (use of language extensions). If there are other files or build-specific macros that inject compiler-specific constructs (e.g., via included headers or build flags), those would need to be reviewed separately, but within the provided fragment and related symbol definitions nothing indicates a language extension."
}