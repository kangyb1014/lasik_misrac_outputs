{
  "user_message": "An agent A claimed that the following OS_CountSemCreate code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of OS_CountSemCreate.\n```c\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:OS_ObjectIdAllocateNew only checks (name != NULL) before passing the pointer to OS_ObjectIdFindNextMatch/OS_ObjectNameMatch. If the caller supplies a non-NULL char buffer that is not NUL-terminated or whose length exceeds the actual object bounds, the subsequent matcher implementation (which typically uses string.h functions such as strcmp/strlen/strncpy) can read beyond the buffer and thus violate MISRA C 2023 Rule 21.17. Note: in the specific call from OS_CountSemCreate the sem_name was previously validated by OS_CHECK_APINAME, so that call site is safe, but OS_ObjectIdAllocateNew itself does not enforce string bounds and therefore a general violation scenario exists.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_1143_LogEntry(const char *stage, const char *sem_name_ptr, const void *token_addr, int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1143.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log stage, pointer values and return code. Do not dereference sem_name_ptr. */\n        fprintf(f, \"[OS_1143] stage=%s sem_name_ptr=%p token_addr=%p return_code=%d\\n\",\n                stage,\n                (const void *)sem_name_ptr,\n                token_addr,\n                (int)return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Log entry into the API and the sem_name pointer (do not dereference) */\n    OS_1143_LogEntry(\"entry\", sem_name, &token, 0);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    OS_1143_LogEntry(\"before_ObjectIdAllocateNew\", sem_name, &token, 0);\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    OS_1143_LogEntry(\"after_ObjectIdAllocateNew\", sem_name, &token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_1143_LogEntry(\"before_OBJECT_INIT\", sem_name, &token, return_code);\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n        OS_1143_LogEntry(\"after_OBJECT_INIT\", sem_name, &token, return_code);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        OS_1143_LogEntry(\"before_Impl\", sem_name, &token, return_code);\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n        OS_1143_LogEntry(\"after_Impl\", sem_name, &token, return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        OS_1143_LogEntry(\"before_ObjectIdFinalizeNew\", sem_name, &token, return_code);\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n        OS_1143_LogEntry(\"after_ObjectIdFinalizeNew\", sem_name, &token, return_code);\n    }\n\n    OS_1143_LogEntry(\"exit\", sem_name, &token, return_code);\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\n[OS_1143] stage=entry sem_name_ptr=0x5556e162aa6a token_addr=0x7fffc4fbe560 return_code=0\n[OS_1143] stage=before_ObjectIdAllocateNew sem_name_ptr=0x5556e162aa6a token_addr=0x7fffc4fbe560 return_code=0\n[OS_1143] stage=after_ObjectIdAllocateNew sem_name_ptr=0x5556e162aa6a token_addr=0x7fffc4fbe560 return_code=-1\n[OS_1143] stage=exit sem_name_ptr=0x5556e162aa6a token_addr=0x7fffc4fbe560 return_code=-1\n[OS_1143] stage=entry sem_name_ptr=0x5556e162aa6a token_addr=0x7fffc4fbe560 return_code=0\n[OS_1143] stage=before_ObjectIdAllocateNew sem_name_ptr=0x5556e162aa6a token_addr=0x7fffc4fbe560 return_code=0\n[OS_1143] stage=after_ObjectIdAllocateNew sem_name_ptr=0x5556e162aa6a token_addr=0x7fffc4fbe560 return_code=-35\n[OS_1143] stage=exit sem_name_ptr=0x5556e162aa6a token_addr=0x7fffc4fbe560 return_code=-35\n[OS_1143] stage=entry sem_name_ptr=0x5556e162c8fc token_addr=0x7fffc4fbe4e0 return_code=0\n[OS_1143] stage=entry sem_name_ptr=(nil) token_addr=0x7fffc4fbe4e0 return_code=0\n[OS_1143] stage=entry sem_name_ptr=0x7fffc4fbe5a0 token_addr=0x7fffc4fbe4e0 return_code=0\n[OS_1143] stage=entry sem_name_ptr=0x7fffc4fbe580 token_addr=0x7fffc4fbe4e0 return_code=0\n[OS_1143] stage=before_ObjectIdAllocateNew sem_name_ptr=0x7fffc4fbe580 token_addr=0x7fffc4fbe4e0 return_code=0\n[OS_1143] stage=after_ObjectIdAllocateNew sem_name_ptr=0x7fffc4fbe580 token_addr=0x7fffc4fbe4e0 return_code=-35\n[OS_1143] stage=exit sem_name_ptr=0x7fffc4fbe580 token_addr=0x7fffc4fbe4e0 return_code=-35\n[OS_1143] stage=entry sem_name_ptr=0x5556e162cad5 token_addr=0x7fffc4fbe4e0 return_code=0\n[OS_1143] stage=before_ObjectIdAllocateNew sem_name_ptr=0x5556e162cad5 token_addr=0x7fffc4fbe4e0 return_code=0\n[OS_1143] stage=after_ObjectIdAllocateNew sem_name_ptr=0x5556e162cad5 token_addr=0x7fffc4fbe4e0 return_code=-35\n[OS_1143] stage=exit sem_name_ptr=0x5556e162cad5 token_addr=0x7fffc4fbe4e0 return_code=-35\n[OS_1143] stage=entry sem_name_ptr=0x5556e162cb8c token_addr=0x7fffc4fbe4e0 return_code=0\n[OS_1143] stage=before_ObjectIdAllocateNew sem_name_ptr=0x5556e162cb8c token_addr=0x7fffc4fbe4e0 return_code=0\n[OS_1143] stage=after_ObjectIdAllocateNew sem_name_ptr=0x5556e162cb8c token_addr=0x7fffc4fbe4e0 return_code=-35\n[OS_1143] stage=exit sem_name_ptr=0x5556e162cb8c token_addr=0x7fffc4fbe4e0 return_code=-35\n[OS_1143] stage=entry sem_name_ptr=0x5556e162cc32 token_addr=0x7fffc4fbe590 return_code=0\n[OS_1143] stage=before_ObjectIdAllocateNew sem_name_ptr=0x5556e162cc32 token_addr=0x7fffc4fbe590 return_code=0\n[OS_1143] stage=after_ObjectIdAllocateNew sem_name_ptr=0x5556e162cc32 token_addr=0x7fffc4fbe590 return_code=-35\n[OS_1143] stage=exit sem_name_ptr=0x5556e162cc32 token_addr=0x7fffc4fbe590 return_code=-35\n[OS_1143] stage=entry sem_name_ptr=0x5556e162cce8 token_addr=0x7fffc4fbe590 return_code=0\n[OS_1143] stage=before_ObjectIdAllocateNew sem_name_ptr=0x5556e162cce8 token_addr=0x7fffc4fbe590 return_code=0\n[OS_1143] stage=after_ObjectIdAllocateNew sem_name_ptr=0x5556e162cce8 token_addr=0x7fffc4fbe590 return_code=-35\n[OS_1143] stage=exit sem_name_ptr=0x5556e162cce8 token_addr=0x7fffc4fbe590 return_code=-35\n[OS_1143] stage=entry sem_name_ptr=0x5556e162cda0 token_addr=0x7fffc4fbe590 return_code=0\n[OS_1143] stage=before_ObjectIdAllocateNew sem_name_ptr=0x5556e162cda0 token_addr=0x7fffc4fbe590 return_code=0\n[OS_1143] stage=after_ObjectIdAllocateNew sem_name_ptr=0x5556e162cda0 token_addr=0x7fffc4fbe590 return_code=-35\n[OS_1143] stage=exit sem_name_ptr=0x5556e162cda0 token_addr=0x7fffc4fbe590 return_code=-35\n[OS_1143] stage=entry sem_name_ptr=0x5556e162ce6b token_addr=0x7fffc4fbe590 return_code=0\n[OS_1143] stage=before_ObjectIdAllocateNew sem_name_ptr=0x5556e162ce6b token_addr=0x7fffc4fbe590 return_code=0\n[OS_1143] stage=after_ObjectIdAllocateNew sem_name_ptr=0x5556e162ce6b token_addr=0x7fffc4fbe590 return_code=-35\n[OS_1143] stage=exit sem_name_ptr=0x5556e162ce6b token_addr=0x7fffc4fbe590 return_code=-35\n[OS_1143] stage=entry sem_name_ptr=0x5556e162ce6b token_addr=0x7fffc4fbe590 return_code=0\n[OS_1143] stage=before_ObjectIdAllocateNew sem_name_ptr=0x5556e162ce6b token_addr=0x7fffc4fbe590 return_code=0\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 21.17 prohibits passing character pointers to string.h routines when those routines can read past the referenced object bounds (e.g. due to missing NUL terminator or insufficient allocated length). Agent A's scenario describes such a risk inside OS_ObjectIdAllocateNew/OS_ObjectNameMatch if those routines only check (name != NULL) and then call strcmp/strlen/etc. Unchecked use there would indeed violate 21.17.\n\nHowever, the code under review (OS_CountSemCreate) itself performs OS_CHECK_APINAME(sem_name) before calling OS_ObjectIdAllocateNew. That macro is intended to validate the API-supplied name (i.e. that the pointer is non-NULL and that the name is a properly-formed NUL-terminated API name within allowed bounds). Given that OS_CountSemCreate does this validation, the specific call site in OS_CountSemCreate does not present a 21.17 violation \u2014 any out-of-bounds reads would be a defect in OS_ObjectIdAllocateNew (or the matcher implementations) if they assume only (name != NULL) and do not themselves ensure a bounded, NUL-terminated string.\n\nThe provided test log shows ObjectIdAllocateNew returning error codes but provides no evidence of actual overread or invocation of string.h on unterminated/unbounded buffers originating from OS_CountSemCreate. Therefore the report that OS_CountSemCreate violates MISRA C 2023 Rule 21.17 is not correct; the real concern (if present) would be in OS_ObjectIdAllocateNew/OS_ObjectNameMatch implementations, not in OS_CountSemCreate.\n"
}