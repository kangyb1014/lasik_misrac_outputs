{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf OS_CHECK_APINAME (via OS_CHECK_STRING) uses unbounded string functions such as strlen/strcmp on the sem_name parameter, a non\u2011NUL\u2011terminated or overly long sem_name can cause an out\u2011of\u2011bounds read. For example, if a caller passes a char buffer of size OS_MAX_API_NAME that is not NUL\u2011terminated, an implementation that calls strlen(sem_name) (or other unbounded <string.h> routines) will read past the buffer boundary, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1143.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemCreate:\n```c\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Probe: log entry and parameters (avoid reading sem_name contents to prevent OOB) */\n    {\n        FILE *log = fopen(\"/tmp/logs/1143.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"ENTER OS_CountSemCreate\\n\");\n            fprintf(log, \"  sem_id ptr = %p\\n\", (const void *)sem_id);\n            fprintf(log, \"  sem_name ptr = %p\\n\", (const void *)sem_name);\n            fprintf(log, \"  sem_initial_value = %u, options = %u\\n\", (unsigned)sem_initial_value, (unsigned)options);\n            fprintf(log, \"  Note: sem_name contents NOT dereferenced here to avoid introducing OOB reads.\\n\");\n            fclose(log);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    /* Probe: log result of allocation attempt and token raw bytes */\n    {\n        FILE *log = fopen(\"/tmp/logs/1143.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"After OS_ObjectIdAllocateNew: return_code = %d\\n\", (int)return_code);\n\n            /* Safely dump token raw bytes rather than attempting to interpret fields (avoids changing semantics). */\n            fprintf(log, \"  token address = %p, sizeof(token) = %zu\\n\", (void *)&token, sizeof(token));\n            const unsigned char *tbytes = (const unsigned char *)&token;\n            fprintf(log, \"  token raw:\");\n            for (size_t i = 0; i < sizeof(token); ++i)\n            {\n                fprintf(log, \" %02x\", (unsigned)tbytes[i]);\n            }\n            fprintf(log, \"\\n\");\n            fclose(log);\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Probe: log the table pointer and object name pointer */\n        {\n            FILE *log = fopen(\"/tmp/logs/1143.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"  Allocated token success path.\\n\");\n                fprintf(log, \"  countsem ptr = %p\\n\", (const void *)countsem);\n                fprintf(log, \"  About to initialize object table entry with sem_name ptr = %p\\n\", (const void *)sem_name);\n                fclose(log);\n            }\n        }\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Probe: log result of OS-specific create */\n        {\n            FILE *log = fopen(\"/tmp/logs/1143.txt\", \"a\");\n            if (log)\n            {\n                fprintf(log, \"  After OS_CountSemCreate_Impl: return_code = %d\\n\", (int)return_code);\n                fclose(log);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    /* Probe: log exit return value */\n    {\n        FILE *log = fopen(\"/tmp/logs/1143.txt\", \"a\");\n        if (log)\n        {\n            fprintf(log, \"EXIT OS_CountSemCreate: return_code = %d\\n\", (int)return_code);\n            fprintf(log, \"--------------------------------------------------\\n\");\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}