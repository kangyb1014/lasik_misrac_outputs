{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_ObjectIdAllocateNew only checks (name != NULL) before passing the pointer to OS_ObjectIdFindNextMatch/OS_ObjectNameMatch. If the caller supplies a non-NULL char buffer that is not NUL-terminated or whose length exceeds the actual object bounds, the subsequent matcher implementation (which typically uses string.h functions such as strcmp/strlen/strncpy) can read beyond the buffer and thus violate MISRA C 2023 Rule 21.17. Note: in the specific call from OS_CountSemCreate the sem_name was previously validated by OS_CHECK_APINAME, so that call site is safe, but OS_ObjectIdAllocateNew itself does not enforce string bounds and therefore a general violation scenario exists.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1143.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemCreate:\n```c\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/*\n * Probe/logging helpers for capturing control flow and state related to\n * potential string-buffer issues around OS_ObjectIdAllocateNew.\n * Logs are appended to /tmp/logs/1143.txt\n *\n * Note: These helpers avoid reading the contents of the sem_name buffer\n * to prevent introducing additional out-of-bounds reads. They only log\n * pointer values and return codes so agents can trace the control flow\n * that leads to the matcher code which may perform unsafe string ops.\n */\nstatic void OS_1143_LogEntry(const char *stage, const char *sem_name_ptr, const void *token_addr, int32_t return_code)\n{\n    FILE *f = fopen(\"/tmp/logs/1143.txt\", \"a\");\n    if (f != NULL)\n    {\n        /* Log stage, pointer values and return code. Do not dereference sem_name_ptr. */\n        fprintf(f, \"[OS_1143] stage=%s sem_name_ptr=%p token_addr=%p return_code=%d\\n\",\n                stage,\n                (const void *)sem_name_ptr,\n                token_addr,\n                (int)return_code);\n        fclose(f);\n    }\n}\n\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Log entry into the API and the sem_name pointer (do not dereference) */\n    OS_1143_LogEntry(\"entry\", sem_name, &token, 0);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    OS_1143_LogEntry(\"before_ObjectIdAllocateNew\", sem_name, &token, 0);\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    OS_1143_LogEntry(\"after_ObjectIdAllocateNew\", sem_name, &token, return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_1143_LogEntry(\"before_OBJECT_INIT\", sem_name, &token, return_code);\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n        OS_1143_LogEntry(\"after_OBJECT_INIT\", sem_name, &token, return_code);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        OS_1143_LogEntry(\"before_Impl\", sem_name, &token, return_code);\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n        OS_1143_LogEntry(\"after_Impl\", sem_name, &token, return_code);\n\n        /* Check result, finalize record, and unlock global table. */\n        OS_1143_LogEntry(\"before_ObjectIdFinalizeNew\", sem_name, &token, return_code);\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n        OS_1143_LogEntry(\"after_ObjectIdFinalizeNew\", sem_name, &token, return_code);\n    }\n\n    OS_1143_LogEntry(\"exit\", sem_name, &token, return_code);\n    return return_code;\n}\n"
}