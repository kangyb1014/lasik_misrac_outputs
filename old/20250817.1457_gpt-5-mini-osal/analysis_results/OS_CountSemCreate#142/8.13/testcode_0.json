{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call OS_ObjectIdFindNextMatch(OS_ObjectNameMatch, (void *)name, token) casts the parameter 'name' (declared const char *) to void *, discarding the const qualifier. This removes const from a pointer that could/should remain const; the function should accept a const void * (or the call should not cast away const). This violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CountSemCreate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/1139.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CountSemCreate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CountSemCreate:\n```c\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CountSemCreate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper - append-only file used to capture control flow and state. */\nstatic void OS_CountSemCreate_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/1139.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CountSemCreate(osal_id_t *sem_id, const char *sem_name, uint32 sem_initial_value, uint32 options)\n{\n    int32                           return_code;\n    OS_object_token_t               token;\n    OS_count_sem_internal_record_t *countsem;\n\n    /* Log entry and parameters (including addresses to help reproduce const-discard scenarios) */\n    OS_CountSemCreate_ProbeLog(\"ENTRY: OS_CountSemCreate sem_id_ptr=%p, sem_name_ptr=%p, sem_name=\\\"%s\\\", sem_initial_value=%u, options=%u\",\n                               (const void *)sem_id,\n                               (const void *)sem_name,\n                               (sem_name != NULL) ? sem_name : \"(null)\",\n                               (unsigned)sem_initial_value,\n                               (unsigned)options);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(sem_id);\n    OS_CHECK_APINAME(sem_name);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, sem_name, &token);\n\n    /* Log result of allocation attempt including token address (use address of local token as a probe marker) */\n    OS_CountSemCreate_ProbeLog(\"After OS_ObjectIdAllocateNew: return_code=%d, token_addr=%p, sem_name_ptr=%p, sem_name=\\\"%s\\\"\",\n                               (int)return_code,\n                               (void *)&token,\n                               (const void *)sem_name,\n                               (sem_name != NULL) ? sem_name : \"(null)\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        countsem = OS_OBJECT_TABLE_GET(OS_count_sem_table, token);\n\n        /* Log the pointer retrieved from the object table */\n        OS_CountSemCreate_ProbeLog(\"OS_OBJECT_TABLE_GET: countsem_ptr=%p\", (void *)countsem);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, countsem, obj_name, sem_name);\n\n        /* Log state just before calling the OS-specific implementation. This captures the sem_name (const char *) and token. */\n        OS_CountSemCreate_ProbeLog(\"Before OS_CountSemCreate_Impl: token_addr=%p, sem_initial_value=%u, options=%u, sem_name_ptr=%p, sem_name=\\\"%s\\\"\",\n                                   (void *)&token,\n                                   (unsigned)sem_initial_value,\n                                   (unsigned)options,\n                                   (const void *)sem_name,\n                                   (sem_name != NULL) ? sem_name : \"(null)\");\n\n        /* Now call the OS-specific implementation.  This reads info from the table. */\n        return_code = OS_CountSemCreate_Impl(&token, sem_initial_value, options);\n\n        /* Log result of OS-specific implementation */\n        OS_CountSemCreate_ProbeLog(\"After OS_CountSemCreate_Impl: return_code=%d, token_addr=%p\", (int)return_code, (void *)&token);\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, sem_id);\n\n        /* Log result of finalization including resulting sem_id value if set. */\n        if (sem_id != NULL)\n        {\n            /* sem_id type unknown, print as uintptr_t for evidence */\n            OS_CountSemCreate_ProbeLog(\"After OS_ObjectIdFinalizeNew: final_return_code=%d, sem_id_ptr=%p, sem_id_value=%lu\",\n                                       (int)return_code,\n                                       (void *)sem_id,\n                                       (unsigned long)(uintptr_t)(*sem_id));\n        }\n        else\n        {\n            OS_CountSemCreate_ProbeLog(\"After OS_ObjectIdFinalizeNew: final_return_code=%d, sem_id_ptr=(null)\", (int)return_code);\n        }\n    }\n    else\n    {\n        OS_CountSemCreate_ProbeLog(\"OS_ObjectIdAllocateNew failed: return_code=%d\", (int)return_code);\n    }\n\n    OS_CountSemCreate_ProbeLog(\"EXIT: OS_CountSemCreate returning %d\", (int)return_code);\n\n    return return_code;\n}\n"
}