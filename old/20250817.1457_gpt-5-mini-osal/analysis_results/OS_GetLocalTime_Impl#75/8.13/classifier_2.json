{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_GetLocalTime_Impl:\n```c\nint32 OS_GetLocalTime_Impl(OS_time_t *time_struct)\n{\n    int             Status;\n    int32           ReturnCode;\n    struct timespec TimeSp;\n\n    Status = clock_gettime(OSAL_GETTIME_SOURCE_CLOCK, &TimeSp);\n\n    if (Status == 0)\n    {\n        *time_struct = OS_TimeAssembleFromNanoseconds(TimeSp.tv_sec, TimeSp.tv_nsec);\n        ReturnCode   = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"Error calling clock_gettime: %s\\n\", strerror(errno));\n        ReturnCode = OS_ERROR;\n    }\n\n    return ReturnCode;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nOS_DEBUG(\"Error calling clock_gettime: %s\\n\", strerror(errno));\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated. The fragment calls the library function strerror(errno) which has a library-defined signature that returns char * (non-const) \u2014 the code does not declare a pointer variable that should have been const-qualified. Rule 8.13 concerns pointer declarations in your code; you cannot change the library's return type here. If you wanted to make intent explicit you could assign the result to a const char * (e.g. const char *msg = strerror(errno)) before passing it to OS_DEBUG, but the current usage does not itself violate MISRA C 2023 Rule 8.13."
}