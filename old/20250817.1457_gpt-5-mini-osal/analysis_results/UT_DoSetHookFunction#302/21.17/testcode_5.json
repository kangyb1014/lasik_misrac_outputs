{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls MsgLen = strlen(OutputMessage) (string.h) without validating that OutputMessage is non-NULL and points to a null-terminated buffer. If OutputMessage is NULL or not null-terminated, strlen(OutputMessage) can read past the object bounds and thus result in out-of-bounds access; subsequently the test OutputMessage[MsgLen - 1] would also be invalid when MsgLen was derived from a past-the-bounds read. Although the '||' short-circuits to prevent indexing when MsgLen==0, this does not prevent the prior unsafe call to strlen.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DoSetHookFunction code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2423.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DoSetHookFunction as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DoSetHookFunction:\n```c\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_DoSetHookFunction code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <sys/stat.h>\n\n/* Probe logging function to record control flow and state for debugging.\n * Writes append-only logs to /tmp/logs/2423.txt. Does not dereference\n * user-provided pointers (only logs their addresses) to avoid introducing\n * new out-of-bounds accesses. */\nstatic void UT_LogHookEvent(const char *stage, UT_EntryKey_t FuncKey, UT_EntryType_t EntryType,\n                            UT_HookFuncPtr_t Value, void *UserObj, bool IsVarg, UT_StubTableEntry_t *StubPtr)\n{\n    FILE *f = fopen(\"/tmp/logs/2423.txt\", \"a\");\n    if (!f)\n    {\n        /* Try to create the log directory and reopen. Ignore errors. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/2423.txt\", \"a\");\n    }\n\n    if (f)\n    {\n        fprintf(f, \"UT_DoSetHookFunction: %s\\n\", stage);\n        /* Print key/state information. Cast numeric types to unsigned long long\n         * to avoid dependence on exact typedefs. Log pointer addresses only. */\n        fprintf(f, \"  FuncKey=%llu EntryType=%llu Value.Addr=%p UserObj=%p IsVarg=%d StubPtr=%p\\n\",\n                (unsigned long long)FuncKey,\n                (unsigned long long)EntryType,\n                (void*)Value.Addr,\n                UserObj,\n                (int)IsVarg,\n                (void*)StubPtr);\n        fflush(f);\n        fclose(f);\n    }\n}\n\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Log entry with input state */\n    UT_LogHookEvent(\"entry\", FuncKey, EntryType, Value, UserObj, IsVarg, NULL);\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n\n    /* Log after initial lookup */\n    UT_LogHookEvent(\"after initial lookup\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        UT_LogHookEvent(\"attempting force-fail lookup (need unused slot)\", FuncKey, EntryType, Value, UserObj, IsVarg, NULL);\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        /* Log after force-fail lookup */\n        UT_LogHookEvent(\"after force-fail lookup\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n        if (StubPtr == NULL)\n        {\n            /* Log that we are about to abort so evidence is captured */\n            UT_LogHookEvent(\"about to abort - no stub slots available\", FuncKey, EntryType, Value, UserObj, IsVarg, NULL);\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_LogHookEvent(\"clearing entry\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        UT_LogHookEvent(\"setting entry (before)\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n        UT_LogHookEvent(\"setting entry (after)\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n    }\n}\n"
}