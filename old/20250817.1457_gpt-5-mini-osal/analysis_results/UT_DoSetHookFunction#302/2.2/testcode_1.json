{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignment 'Counter = 0;' at the start of the fragment is dead code. It is executed unconditionally but has no effect on program behaviour: when a stub is found it is immediately overwritten by 'Counter = StubPtr->Data.Rc.Count', and when no stub is found the code calls UtAssert_Abort (program abort) so the initial assignment does not influence later behaviour. Removing this assignment would not change program behaviour, which violates MISRA C 2023 Rule 2.2 (no dead code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DoSetHookFunction code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2418.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DoSetHookFunction as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DoSetHookFunction:\n```c\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_DoSetHookFunction code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/2418.txt */\nstatic void UT_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2418.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Log entry state */\n    UT_LogProbe(\"ENTRY: FuncKey=%llu EntryType=%llu Value.Addr=%p UserObj=%p IsVarg=%d\",\n                (unsigned long long)(uintptr_t)FuncKey,\n                (unsigned long long)(uintptr_t)EntryType,\n                (void *)Value.Addr,\n                UserObj,\n                (int)IsVarg);\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    UT_LogProbe(\"After initial lookup: StubPtr=%p\", (void *)StubPtr);\n\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        UT_LogProbe(\"No existing stub and Value.Addr != NULL: searching for unused slot\");\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        UT_LogProbe(\"After search for unused slot: StubPtr=%p\", (void *)StubPtr);\n        if (StubPtr == NULL)\n        {\n            /* Log just before aborting so caller can see this path */\n            UT_LogProbe(\"About to abort: Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_LogProbe(\"Deleting entry: StubPtr=%p FuncKey=%llu EntryType=%llu\",\n                    (void *)StubPtr,\n                    (unsigned long long)(uintptr_t)FuncKey,\n                    (unsigned long long)(uintptr_t)EntryType);\n        UT_ClearStubEntry(StubPtr);\n        UT_LogProbe(\"After delete: StubPtr=%p\", (void *)StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        UT_LogProbe(\"Setting entry (before): StubPtr=%p FuncKey=%llu EntryType=%llu Value.Addr=%p UserObj=%p IsVarg=%d\",\n                    (void *)StubPtr,\n                    (unsigned long long)(uintptr_t)FuncKey,\n                    (unsigned long long)(uintptr_t)EntryType,\n                    (void *)Value.Addr,\n                    UserObj,\n                    (int)IsVarg);\n\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n\n        UT_LogProbe(\"Setting entry (after): StubPtr=%p FuncKey=%llu EntryType=%llu\",\n                    (void *)StubPtr,\n                    (unsigned long long)(uintptr_t)FuncKey,\n                    (unsigned long long)(uintptr_t)EntryType);\n    }\n\n    UT_LogProbe(\"EXIT: FuncKey=%llu EntryType=%llu StubPtr=%p\",\n                (unsigned long long)(uintptr_t)FuncKey,\n                (unsigned long long)(uintptr_t)EntryType,\n                (void *)StubPtr);\n}\n"
}