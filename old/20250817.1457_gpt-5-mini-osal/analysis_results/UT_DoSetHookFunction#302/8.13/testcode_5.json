{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function takes a pointer parameter 'void *UserObj' which is not const-qualified even though the function does not modify the pointee (it only stores the pointer in StubPtr->Data.Cb.CallbackArg). According to MISRA C 2023 Rule 8.13 this should be declared as 'const void *UserObj'. Additionally, the UT_HookFuncPtr_t union contains pointer members (e.g. Addr) that are not const-qualified; if those pointers are not used to modify the pointees they too should be const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DoSetHookFunction code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2419.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DoSetHookFunction as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DoSetHookFunction:\n```c\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_DoSetHookFunction code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/2419.txt */\nstatic void UT_AppendLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2419.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void UT_LogEntryPoint(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj, bool IsVarg)\n{\n    /* Log the incoming parameters and immediate state */\n    UT_AppendLog(\"ENTER UT_DoSetHookFunction: FuncKey=%llu EntryType=%llu Value.Addr=%p UserObj=%p IsVarg=%d\",\n                 (unsigned long long)FuncKey,\n                 (unsigned long long)EntryType,\n                 (void *)Value.Addr,\n                 UserObj,\n                 (int)IsVarg);\n\n    /* Note about const-qualification (for auditors) - record that UserObj is passed as non-const */\n    UT_AppendLog(\"NOTE: UserObj parameter is non-const (type: void *). Value.Addr member is non-const pointer (if used).\");\n}\n\nstatic void UT_LogAfterFind(UT_StubTableEntry_t *StubPtr)\n{\n    UT_AppendLog(\"After UT_GetStubEntry: StubPtr=%p\", (void *)StubPtr);\n}\n\nstatic void UT_LogBeforeClear(UT_StubTableEntry_t *StubPtr)\n{\n    UT_AppendLog(\"Clearing stub entry at %p\", (void *)StubPtr);\n}\n\nstatic void UT_LogBeforeSet(UT_StubTableEntry_t *StubPtr, UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj, bool IsVarg)\n{\n    UT_AppendLog(\"Setting stub at %p: new FuncKey=%llu EntryType=%llu Value.Addr=%p UserObj=%p IsVarg=%d\",\n                 (void *)StubPtr,\n                 (unsigned long long)FuncKey,\n                 (unsigned long long)EntryType,\n                 (void *)Value.Addr,\n                 UserObj,\n                 (int)IsVarg);\n}\n\nstatic void UT_LogAfterSet(UT_StubTableEntry_t *StubPtr)\n{\n    /* Attempt to log stored fields to capture the exact stored state */\n    if (StubPtr != NULL)\n    {\n        UT_AppendLog(\"After set: StubPtr=%p Stored.FuncKey=%llu Stored.EntryType=%llu Stored.CallbackArg=%p Stored.Ptr=%p Stored.IsVarg=%d\",\n                     (void *)StubPtr,\n                     (unsigned long long)StubPtr->FuncKey,\n                     (unsigned long long)StubPtr->EntryType,\n                     (void *)StubPtr->Data.Cb.CallbackArg,\n                     (void *)StubPtr->Data.Cb.Ptr.Addr,\n                     (int)StubPtr->Data.Cb.IsVarg);\n    }\n    else\n    {\n        UT_AppendLog(\"After set: StubPtr is NULL\");\n    }\n}\n\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Log entry */\n    UT_LogEntryPoint(FuncKey, EntryType, Value, UserObj, IsVarg);\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    UT_LogAfterFind(StubPtr);\n\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        UT_AppendLog(\"No existing stub and Value.Addr != NULL - searching for UNUSED slot\");\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        UT_LogAfterFind(StubPtr);\n        if (StubPtr == NULL)\n        {\n            UT_AppendLog(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low? About to abort\");\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_LogBeforeClear(StubPtr);\n        UT_ClearStubEntry(StubPtr);\n        UT_AppendLog(\"Cleared stub entry at %p\", (void *)StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        UT_LogBeforeSet(StubPtr, FuncKey, EntryType, Value, UserObj, IsVarg);\n\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n\n        /* Log the stored state for later analysis */\n        UT_LogAfterSet(StubPtr);\n    }\n}\n"
}