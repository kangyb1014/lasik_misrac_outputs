{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe union has a non-const data pointer member: 'void * Addr'. This member is used to hold hook/callback addresses (read-only references to code/data) and could be const-qualified (e.g., 'const void * Addr') to prevent modification through the pointer. Since at least one pointer in the union can reasonably and safely be made to point to a const-qualified type, Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DoSetHookFunction code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2419.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DoSetHookFunction as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DoSetHookFunction:\n```c\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_DoSetHookFunction code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append formatted log lines to /tmp/logs/2419.txt */\nstatic void UT_AppendLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/2419.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nstatic void UT_LogPointerLabel(const char *label, const void *p)\n{\n    UT_AppendLog(\"%s: %p\", label, p);\n}\n\nstatic void UT_LogKeyAndType(const char *prefix, unsigned long key, unsigned long type)\n{\n    UT_AppendLog(\"%s FuncKey=0x%lx EntryType=0x%lx\", prefix, key, type);\n}\n\nstatic void UT_LogBool(const char *label, int b)\n{\n    UT_AppendLog(\"%s: %s\", label, b ? \"true\" : \"false\");\n}\n\nstatic void UT_LogStubEntryState(UT_StubTableEntry_t *StubPtr)\n{\n    if (StubPtr == NULL)\n    {\n        UT_AppendLog(\"StubPtr: NULL\");\n        return;\n    }\n\n    /* Attempt to log key fields; cast to unsigned long for portability in logs */\n    UT_AppendLog(\"StubPtr: %p\", (void *)StubPtr);\n    UT_AppendLog(\"  ->FuncKey=0x%lx\", (unsigned long)StubPtr->FuncKey);\n    UT_AppendLog(\"  ->EntryType=0x%lx\", (unsigned long)StubPtr->EntryType);\n    UT_AppendLog(\"  ->Data.Cb.CallbackArg=%p\", (void *)StubPtr->Data.Cb.CallbackArg);\n    UT_AppendLog(\"  ->Data.Cb.Ptr=%p\", (void *)StubPtr->Data.Cb.Ptr);\n    UT_AppendLog(\"  ->Data.Cb.IsVarg=%d\", (int)StubPtr->Data.Cb.IsVarg);\n}\n\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    UT_AppendLog(\"ENTER UT_DoSetHookFunction\");\n    UT_LogKeyAndType(\"Inputs\", (unsigned long)FuncKey, (unsigned long)EntryType);\n    UT_LogPointerLabel(\"Value.Addr\", (const void *)Value.Addr);\n    UT_LogPointerLabel(\"UserObj\", UserObj);\n    UT_LogBool(\"IsVarg\", IsVarg);\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    UT_AppendLog(\"After first UT_GetStubEntry call\");\n    UT_LogStubEntryState(StubPtr);\n\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        UT_AppendLog(\"No existing entry found and Value.Addr != NULL -> looking for unused slot\");\n\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        UT_AppendLog(\"After second UT_GetStubEntry (unused) call\");\n        UT_LogStubEntryState(StubPtr);\n\n        if (StubPtr == NULL)\n        {\n            UT_AppendLog(\"ERROR: No unused slot found - about to abort\");\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_AppendLog(\"Deleting existing entry (Value.Addr == NULL && StubPtr != NULL)\");\n        UT_LogStubEntryState(StubPtr);\n\n        UT_ClearStubEntry(StubPtr);\n\n        UT_AppendLog(\"After UT_ClearStubEntry\");\n        UT_LogStubEntryState(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        UT_AppendLog(\"Setting entry (StubPtr != NULL && Value.Addr != NULL)\");\n        UT_AppendLog(\"Before assignment:\");\n        UT_LogStubEntryState(StubPtr);\n\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n\n        UT_AppendLog(\"After assignment:\");\n        UT_LogStubEntryState(StubPtr);\n\n        /* Explicitly log the observed Value.Addr to highlight potential const-qualification issue */\n        UT_AppendLog(\"Observed hook address (Value.Addr) = %p\", (const void *)Value.Addr);\n    }\n\n    UT_AppendLog(\"EXIT UT_DoSetHookFunction\");\n}\n"
}