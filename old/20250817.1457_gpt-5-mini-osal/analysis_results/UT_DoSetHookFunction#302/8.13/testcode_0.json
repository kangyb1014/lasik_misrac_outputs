{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe union member UT_HookFuncPtr_t::Addr is declared as void * but is only used for inspection/storage (checked against NULL and copied), not for modifying pointee data. According to MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so Addr should be const void * (or otherwise const-qualified) if it is not intended to allow modification through the pointer. The conditional if (StubPtr == NULL && Value.Addr != NULL) therefore uses a non-const pointer where a const-qualified pointer would be appropriate \u2014 this constitutes a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DoSetHookFunction code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2419.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DoSetHookFunction as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DoSetHookFunction:\n```c\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_DoSetHookFunction code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe helper: append a log entry describing the current state to /tmp/logs/2419.txt */\nstatic void UT_LogHookEvent(const char *event, UT_EntryKey_t FuncKey, UT_EntryType_t EntryType,\n                            UT_HookFuncPtr_t Value, void *UserObj, bool IsVarg, UT_StubTableEntry_t *StubPtr)\n{\n    FILE *fp = fopen(\"/tmp/logs/2419.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* Best effort logging; do not interfere with normal flow */\n    }\n\n    /* Log the event and relevant state. Cast keys/types to uintptr_t for portable integer printing. */\n    fprintf(fp, \"Event: %s\\n\", event);\n    fprintf(fp, \"  FuncKey   = 0x%\" PRIxPTR \"\\n\", (uintptr_t)FuncKey);\n    fprintf(fp, \"  EntryType = 0x%\" PRIxPTR \"\\n\", (uintptr_t)EntryType);\n    fprintf(fp, \"  StubPtr   = %p\\n\", (void *)StubPtr);\n    fprintf(fp, \"  Value.Addr= %p\\n\", (void *)Value.Addr);\n    fprintf(fp, \"  UserObj   = %p\\n\", UserObj);\n    fprintf(fp, \"  IsVarg    = %d\\n\", (IsVarg) ? 1 : 0);\n    fprintf(fp, \"----------------------------------------\\n\");\n    fflush(fp);\n    fclose(fp);\n}\n\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Log entry into the function with initial parameters */\n    UT_LogHookEvent(\"UT_DoSetHookFunction - enter\", FuncKey, EntryType, Value, UserObj, IsVarg, NULL);\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n\n    /* Log result of initial lookup */\n    UT_LogHookEvent(\"UT_DoSetHookFunction - after initial lookup\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        UT_LogHookEvent(\"UT_DoSetHookFunction - need to create force fail entry (no existing stub)\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        /* Log result of unused-slot lookup */\n        UT_LogHookEvent(\"UT_DoSetHookFunction - after lookup for unused slot\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n\n        if (StubPtr == NULL)\n        {\n            UT_LogHookEvent(\"UT_DoSetHookFunction - aborting: no slot available\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_LogHookEvent(\"UT_DoSetHookFunction - deleting entry (Value.Addr == NULL)\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        UT_LogHookEvent(\"UT_DoSetHookFunction - setting entry (store values)\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n\n        /* Log after storing */\n        UT_LogHookEvent(\"UT_DoSetHookFunction - after storing entry\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n    }\n\n    /* Final log to capture exit state */\n    UT_LogHookEvent(\"UT_DoSetHookFunction - exit\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n}\n"
}