{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter UserObj is declared as void * and is assigned into StubPtr->Data.Cb.CallbackArg (also a non-const pointer). The code does not modify the pointed-to object, so both the parameter and the stored CallbackArg could and should be const-qualified (e.g. const void *). Therefore this use omits a const qualification and violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified UT_DoSetHookFunction code that contains useful probe functions that print useful logs to a file \"/tmp/logs/2419.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of UT_DoSetHookFunction as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of UT_DoSetHookFunction:\n```c\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n        if (StubPtr == NULL)\n        {\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_ClearStubEntry(StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n    }\n}\n```\n</target_code>\nPlease provide the modified UT_DoSetHookFunction code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging helper - appends control flow and state to /tmp/logs/2419.txt */\nstatic void UT_LogProbe(const char *stage, UT_EntryKey_t FuncKey, UT_EntryType_t EntryType,\n                        UT_HookFuncPtr_t Value, void *UserObj, bool IsVarg, UT_StubTableEntry_t *StubPtr)\n{\n    FILE *f = fopen(\"/tmp/logs/2419.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Log a short human readable stage description */\n    fprintf(f, \"---- UT_DoSetHookFunction: %s ----\\n\", stage);\n\n    /* Log key state values - cast to unsigned long for portable printing of integer enums */\n    fprintf(f, \"FuncKey=%lu EntryType=%lu Value.Addr=%p UserObj=%p IsVarg=%d StubPtr=%p\\n\",\n            (unsigned long)FuncKey,\n            (unsigned long)EntryType,\n            (void *)Value.Addr,\n            UserObj,\n            (int)IsVarg,\n            (void *)StubPtr);\n\n    /* Add a separator and flush/close */\n    fprintf(f, \"----------------------------------------\\n\");\n    fclose(f);\n}\n\nstatic void UT_DoSetHookFunction(UT_EntryKey_t FuncKey, UT_EntryType_t EntryType, UT_HookFuncPtr_t Value, void *UserObj,\n                                 bool IsVarg)\n{\n    UT_StubTableEntry_t *StubPtr;\n\n    /* Log entry to function with initial parameter values */\n    UT_LogProbe(\"Enter - initial parameters\", FuncKey, EntryType, Value, UserObj, IsVarg, NULL);\n\n    /*\n     * First find an existing hook entry for the function.\n     * In case one is already set we do not duplicate\n     */\n    StubPtr = UT_GetStubEntry(FuncKey, EntryType);\n\n    /* Log result of initial search */\n    UT_LogProbe(\"After first UT_GetStubEntry\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n\n    if (StubPtr == NULL && Value.Addr != NULL)\n    {\n        /* Creating force fail entry - repeat search and grab any unused slot */\n        UT_LogProbe(\"No existing entry and Value non-NULL - searching for unused slot\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n\n        StubPtr = UT_GetStubEntry(FuncKey, UT_ENTRYTYPE_UNUSED);\n\n        /* Log result of unused-slot search */\n        UT_LogProbe(\"After second UT_GetStubEntry (unused slot)\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n\n        if (StubPtr == NULL)\n        {\n            /* Log right before abort so evidence exists in the logs */\n            UT_LogProbe(\"Abort condition - no slot available to set hook\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n            UtAssert_Abort(\"Cannot set hook function - UT_MAX_FUNC_STUBS too low?\");\n        }\n    }\n\n    if (Value.Addr == NULL && StubPtr != NULL)\n    {\n        /* Caller wants to delete the entry */\n        UT_LogProbe(\"Deleting entry - calling UT_ClearStubEntry\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n        UT_ClearStubEntry(StubPtr);\n        /* Log after deletion */\n        UT_LogProbe(\"Deleted entry - after UT_ClearStubEntry\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n    }\n    else if (StubPtr != NULL && Value.Addr != NULL)\n    {\n        /* Caller wants to set the entry */\n        UT_LogProbe(\"Setting entry - about to populate StubPtr fields\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n\n        StubPtr->FuncKey             = FuncKey;\n        StubPtr->EntryType           = EntryType;\n        StubPtr->Data.Cb.CallbackArg = UserObj;\n        StubPtr->Data.Cb.Ptr         = Value;\n        StubPtr->Data.Cb.IsVarg      = IsVarg;\n\n        /* Log after populating fields - capture stored pointer values to demonstrate assignment of UserObj */\n        UT_LogProbe(\"Set entry - after populating StubPtr\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n    }\n\n    /* Final exit log */\n    UT_LogProbe(\"Exit UT_DoSetHookFunction\", FuncKey, EntryType, Value, UserObj, IsVarg, StubPtr);\n}\n"
}