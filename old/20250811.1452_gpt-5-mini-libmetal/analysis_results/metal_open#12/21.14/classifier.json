{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified metal_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/102.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of metal_open as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of metal_open:\n```c\nint metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\tif (!path || !strlen(path))\n\t\treturn -EINVAL;\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\treturn fd < 0 ? -errno : fd;\n}\n```\n</target_code>\nJudge whether the above metal_open code violates the rule 21.14 or not.",
  "is_rule_violated": false,
  "scenario": "No violation in the provided code. metal_open checks for a NULL or empty path using strlen(path) and does not call memcmp. A concrete violation scenario would be if the code used memcmp to compare null-terminated strings, for example: if (!path || memcmp(path, \"\", 1) == 0) or if (memcmp(path, \"some\", strlen(\"some\")) == 0) to determine string equality. Using memcmp to compare null-terminated strings would violate MISRA C 2023 Rule 21.14.",
  "test_code": ""
}