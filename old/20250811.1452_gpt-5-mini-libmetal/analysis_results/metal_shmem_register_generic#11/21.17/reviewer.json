{
  "user_message": "An agent A claimed that the following metal_shmem_register_generic code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of metal_shmem_register_generic.\n```c\nint metal_shmem_register_generic(struct metal_generic_shmem *shmem)\n{\n\t/* Make sure that we can be found. */\n\tmetal_assert(shmem->name && strlen(shmem->name) != 0);\n\n\t/* Statically registered shmem regions cannot have a destructor. */\n\tmetal_assert(!shmem->io.ops.close);\n\n\tmetal_list_add_tail(&_metal.common.generic_shmem_list,\n\t\t\t    &shmem->node);\n\treturn 0;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If shmem->name is non-NULL but does not point to a NUL-terminated character array (for example it points to a small buffer without a terminating '\\0' or to memory where no '\\0' exists within the accessible bounds), the call to strlen(shmem->name) may read past the valid object bounds and thus violate MISRA C 2023 Rule 21.17. A concrete violation scenario is: a caller sets shmem->name to point to a fixed-size buffer that contains characters but no terminating NUL; metal_shmem_register_generic then calls strlen and may access out-of-bounds memory while searching for the terminator.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nvoid probe_non_terminated_name(void)\n{\n    struct metal_generic_shmem s;\n    /* Buffer intentionally without a terminating '\\0' to provoke the condition. */\n    char buf[4] = { 'A', 'B', 'C', 'D' };\n\n    s.name = buf; /* non-NULL but not NUL-terminated */\n    s.io.ops.close = NULL;\n\n    FILE *f = fopen(\"/tmp/logs/95.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"probe_non_terminated_name: calling metal_shmem_register_generic with non-terminated buffer at %p (size 4)\\n\", (void *)buf);\n        fclose(f);\n    }\n\n    /* This call may read beyond buf while strlen searches for '\\0'. */\n    /* It will either abort via metal_assert or exhibit out-of-bounds access during strlen. */\n    (void) metal_shmem_register_generic(&s);\n}\nvoid probe_null_terminated_name(void)\n{\n    struct metal_generic_shmem s;\n    s.name = \"OK\";\n    s.io.ops.close = NULL;\n\n    FILE *f = fopen(\"/tmp/logs/95.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"probe_null_terminated_name: calling metal_shmem_register_generic with \\\"OK\\\"\\n\");\n        fclose(f);\n    }\n\n    (void) metal_shmem_register_generic(&s);\n}\n\nint metal_shmem_register_generic(struct metal_generic_shmem *shmem)\n{\n    FILE *f = fopen(\"/tmp/logs/95.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"enter: metal_shmem_register_generic, shmem=%p\\n\", (void *)shmem);\n        if (shmem != NULL) {\n            fprintf(f, \"  shmem->name=%p\\n\", (void *)shmem->name);\n            if (shmem->name != NULL) {\n                /* Log first few bytes (if accessible) for diagnostic purposes. */\n                size_t i;\n                fprintf(f, \"  first bytes: \");\n                for (i = 0u; i < 4u; ++i) {\n                    /* Be careful not to read past if name is NULL; we only index when non-NULL.\n                       Note: reading *shmem->name + offsets may still be out-of-bounds if the\n                       caller provided a non-terminated buffer; that is the scenario this\n                       probe is intended to reveal when executed. */\n                    unsigned char c = (unsigned char) shmem->name[i];\n                    fprintf(f, \"%02X \", (unsigned) c);\n                }\n                fprintf(f, \"\\n\");\n            }\n        }\n        fclose(f);\n    }\n\n    /* Make sure that we can be found. */\n    metal_assert(shmem->name && strlen(shmem->name) != 0);\n\n    /* Statically registered shmem regions cannot have a destructor. */\n    metal_assert(!shmem->io.ops.close);\n\n    metal_list_add_tail(NULL, &shmem->node);\n    return 0;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. MISRA C:2023 Rule 21.17 prohibits use of <string.h> functions in ways that may access beyond the bounds of the objects referenced by their pointer parameters. In the code, the call strlen(shmem->name) is only guarded by a NULL check via the && short-circuit: that prevents a NULL dereference but does not guarantee that shmem->name points to a NUL-terminated character array within its valid bounds. If a caller supplies a non-terminated buffer (exactly the scenario A described), strlen will scan past the buffer looking for a terminating '\\0', which can read out-of-bounds and invoke undefined behavior. That is precisely what Rule 21.17 prohibits unless there is an external, documented and enforced precondition that shmem->name always points to a valid NUL-terminated string. To comply with the rule you must either (a) ensure by API contract and static/analysis evidence that shmem->name is always a NUL-terminated string, or (b) change the code to use a bounded operation (e.g., use a known maximum length with strnlen/memchr or require and check a length field) or otherwise validate termination within the object\u2019s bounds before calling strlen. Because the code as shown does not establish such a bound or precondition in-code, the reported violation is correct."
}