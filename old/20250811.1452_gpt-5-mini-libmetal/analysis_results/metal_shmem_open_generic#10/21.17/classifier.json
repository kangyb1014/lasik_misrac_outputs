{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified metal_shmem_open_generic code that contains useful probe functions that print useful logs to a file \"/tmp/logs/87.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of metal_shmem_open_generic as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open_generic:\n```c\nint metal_shmem_open_generic(const char *name, size_t size,\n\t\t\t     struct metal_io_region **result)\n{\n\tstruct metal_generic_shmem *shmem;\n\tstruct metal_list *node;\n\n\tmetal_list_for_each(&_metal.common.generic_shmem_list, node) {\n\t\tshmem = metal_container_of(node, struct metal_generic_shmem, node);\n\t\tif (strcmp(shmem->name, name) != 0)\n\t\t\tcontinue;\n\t\tif (size <= metal_io_region_size(&shmem->io)) {\n\t\t\t*result = &shmem->io;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn -ENOENT;\n}\n```\n</target_code>\nJudge whether the above metal_shmem_open_generic code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "Violation occurs when either shmem->name or the caller-supplied name is not a NUL-terminated C string (for example, when shmem->name is stored in a fixed-size char array that is completely filled with characters and lacks a terminating '\\0'). The call to strcmp(shmem->name, name) will read characters until a NUL is found; if none exists within the bounds of the underlying object, strcmp will access memory beyond the object bounds and cause undefined behavior (contravening MISRA C 2023 Rule 21.17).",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <errno.h>\n#include <stdint.h>\n\nstruct metal_list {\n    struct metal_list *next;\n    struct metal_list *prev;\n};\n\nstruct metal_io_region {\n    size_t size;\n};\n\nstatic inline size_t metal_io_region_size(const struct metal_io_region *io)\n{\n    return io->size;\n}\n\nstruct metal_generic_shmem {\n    struct metal_list node;\n    char name[16];\n    struct metal_io_region io;\n};\n\n/* Minimal global object to mimic original list head */\nstruct {\n    struct {\n        struct metal_list generic_shmem_list;\n    } common;\n} _metal;\n\nstatic inline struct metal_generic_shmem *metal_container_of(struct metal_list *node)\n{\n    return (struct metal_generic_shmem *)((char *)node - offsetof(struct metal_generic_shmem, node));\n}\n\n/* The instrumented version of metal_shmem_open_generic. It preserves the original logic\n   but logs control path and state information to /tmp/logs/87.txt to illustrate the\n   scenario where strcmp could read beyond object bounds (i.e., when strings are not\n   NUL-terminated within their objects). */\nint metal_shmem_open_generic(const char *name, size_t size,\n                             struct metal_io_region **result)\n{\n    FILE *log = fopen(\"/tmp/logs/87.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"enter metal_shmem_open_generic: name=%p size=%zu\\n\", (const void *)name, size);\n    }\n\n    struct metal_list *node;\n    struct metal_generic_shmem *shmem;\n\n    /* Iterate the list similarly to metal_list_for_each */\n    for (node = _metal.common.generic_shmem_list.next;\n         node != &_metal.common.generic_shmem_list;\n         node = node->next) {\n\n        shmem = metal_container_of(node);\n\n        if (log) {\n            size_t bufsz = sizeof(shmem->name);\n            /* Check for NUL within the known buffer bounds to detect a potential issue. */\n            size_t i;\n            int nul_found = 0;\n            for (i = 0u; i < bufsz; ++i) {\n                if (shmem->name[i] == '\\0') {\n                    nul_found = 1;\n                    break;\n                }\n            }\n            fprintf(log, \"shmem=%p shmem->name=%p bufsz=%zu nul_within_buf=%d\\n\",\n                    (void *)shmem, (void *)shmem->name, bufsz, nul_found);\n            if (nul_found) {\n                /* strlen is safe here because we confirmed a NUL inside bounds */\n                fprintf(log, \"shmem name (len=%zu): '%s'\\n\", strlen(shmem->name), shmem->name);\n            } else {\n                fprintf(log, \"shmem name: (no NUL within %zu bytes)\\n\", bufsz);\n            }\n            if (name != NULL) {\n                /* We can log the pointer for the caller-supplied name but we do not attempt\n                   to probe it for NUL here to avoid changing behaviour beyond observation. */\n                fprintf(log, \"caller name pointer=%p\\n\", (const void *)name);\n            }\n        }\n\n        /* Original comparison that can lead to reads beyond object bounds if either\n           argument is not NUL-terminated within its object. */\n        if (strcmp(shmem->name, name) != 0) {\n            if (log) fprintf(log, \"strcmp != 0, continue\\n\");\n            continue;\n        }\n\n        if (size <= metal_io_region_size(&shmem->io)) {\n            if (log) fprintf(log, \"match found and size fits: %zu <= %zu, returning result\\n\",\n                             size, metal_io_region_size(&shmem->io));\n            *result = &shmem->io;\n            if (log) fclose(log);\n            return 0;\n        }\n\n        if (log) fprintf(log, \"match found but size too large\\n\");\n    }\n\n    if (log) {\n        fprintf(log, \"no matching shmem found, returning -ENOENT\\n\");\n        fclose(log);\n    }\n\n    return -ENOENT;\n}\n"
}