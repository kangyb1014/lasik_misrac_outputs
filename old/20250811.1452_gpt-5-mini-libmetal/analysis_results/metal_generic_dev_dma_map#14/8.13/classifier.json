{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified metal_generic_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/115.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of metal_generic_dev_dma_map as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_map:\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\nJudge whether the above metal_generic_dev_dma_map code violates the rule 8.13 or not.",
  "is_rule_violated": true,
  "scenario": "The parameter sg_in is not const-qualified even though the function does not modify the objects via sg_in. According to MISRA C 2023 Rule 8.13, sg_in should be declared as const struct metal_sg *sg_in since it is only read (copied) and never modified by this function.",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Minimal types so this translation unit is self-contained. */\nstruct metal_bus { int dummy; };\nstruct metal_device { int dummy; };\n\n/* Use an enum constant instead of a macro for the DMA direction value. */\nenum { METAL_DMA_DEV_W = 1 };\n\nstruct metal_sg {\n    void *virt;\n    size_t len;\n};\n\n/* Minimal no-op cache operations to allow compilation and execution.\n   These are simple implementations to keep the translation unit linkable.\n   They do not change program semantics relevant to the tested function. */\nstatic void metal_cache_flush(void *addr, size_t len)\n{\n    (void)addr;\n    (void)len;\n}\n\nstatic void metal_cache_invalidate(void *addr, size_t len)\n{\n    (void)addr;\n    (void)len;\n}\n\n/*\n * Modified metal_generic_dev_dma_map with probes that log control path and\n * state information to /tmp/logs/115.txt. The original logic is preserved.\n * Note: sg_in remains a non-const pointer as in the original code to\n * demonstrate the Rule 8.13 violation scenario (it should be const).\n */\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                             struct metal_device *device,\n                             uint32_t dir,\n                             struct metal_sg *sg_in,\n                             int nents_in,\n                             struct metal_sg *sg_out)\n{\n    int i;\n    FILE *log = fopen(\"/tmp/logs/115.txt\", \"w\");\n\n    /* Preserve unused parameter casts from original code */\n    (void)bus;\n    (void)device;\n\n    if (log != NULL) {\n        fprintf(log, \"metal_generic_dev_dma_map called\\n\");\n        fprintf(log, \"  this=%p, bus=%p, device=%p\\n\", (void *)metal_generic_dev_dma_map, (void *)bus, (void *)device);\n        fprintf(log, \"  dir=%u, nents_in=%d, sg_in=%p, sg_out=%p\\n\", (unsigned)dir, nents_in, (void *)sg_in, (void *)sg_out);\n    }\n\n    if (sg_out != sg_in) {\n        if (log != NULL) {\n            fprintf(log, \"  sg_out != sg_in: performing memcpy of %d entries (size=%zu)\\n\",\n                    nents_in, (size_t)nents_in * sizeof(struct metal_sg));\n        }\n        memcpy(sg_out, sg_in, nents_in * (sizeof(struct metal_sg)));\n    } else {\n        if (log != NULL) {\n            fprintf(log, \"  sg_out == sg_in: skipping memcpy\\n\");\n        }\n    }\n\n    for (i = 0; i < nents_in; i++) {\n        if (log != NULL) {\n            fprintf(log, \"  entry[%d]: virt=%p, len=%zu\\n\", i, sg_out[i].virt, sg_out[i].len);\n        }\n\n        if (dir == METAL_DMA_DEV_W) {\n            if (log != NULL) {\n                fprintf(log, \"    dir == METAL_DMA_DEV_W: calling metal_cache_flush on entry %d\\n\", i);\n            }\n            metal_cache_flush(sg_out[i].virt, sg_out[i].len);\n        }\n\n        if (log != NULL) {\n            fprintf(log, \"    calling metal_cache_invalidate on entry %d\\n\", i);\n        }\n        metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n    }\n\n    if (log != NULL) {\n        fprintf(log, \"  returning %d\\n\", nents_in);\n        fclose(log);\n    }\n\n    return nents_in;\n}\n"
}