{
  "user_message": "An agent A claimed that the following metal_generic_dev_dma_map code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of metal_generic_dev_dma_map.\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:A caller provides sg_in pointing to an array of nents_in elements but passes sg_out that points to a smaller buffer (fewer than nents_in elements). The function unconditionally calls memcpy(sg_out, sg_in, nents_in * sizeof(struct metal_sg)) when sg_out != sg_in, causing a write beyond the bounds of the object referenced by sg_out (heap/stack overflow). Example: nents_in = 4, sg_out points to an array of 2 struct metal_sg elements -> memcpy copies 4 elements into space for 2, overflow occurs.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstruct metal_device;\nstruct metal_sg;\nstatic void metal_log_state(const char *stage,\n                            const struct metal_sg *sg_in,\n                            const struct metal_sg *sg_out,\n                            int nents_in,\n                            uint32_t dir)\n{\n    FILE *f = fopen(\"/tmp/logs/119.txt\", \"a\");\n    if (f != NULL) {\n        fprintf(f, \"Stage: %s\\n\", stage);\n        fprintf(f, \"  sg_in = %p, sg_out = %p, nents_in = %d, dir = %u\\n\",\n                (const void *)sg_in, (const void *)sg_out, nents_in, (unsigned)dir);\n        if (sg_in != NULL) {\n            int i;\n            /* Note: sg_in is an opaque forward-declared type here; the real\n             * definition in the project's headers matches what callers use.\n             * We treat it as an array of that type via pointer arithmetic\n             * solely for logging, mirroring original logic.\n             */\n            for (i = 0; i < nents_in; ++i) {\n                /* Log each entry reported by caller (may read out-of-bounds if caller passed wrong nents_in) */\n                const void *virt = *((const void **)((const char *)sg_in + (size_t)i * sizeof(struct metal_sg)));\n                size_t len = *((const size_t *)((const char *)sg_in + (size_t)i * sizeof(struct metal_sg) + sizeof(void *)));\n                fprintf(f, \"    in[%d]: virt=%p, len=%zu\\n\",\n                        i, virt, len);\n            }\n        }\n        if (sg_out != NULL) {\n            int i;\n            for (i = 0; i < nents_in; ++i) {\n                const void *virt = *((const void **)((const char *)sg_out + (size_t)i * sizeof(struct metal_sg)));\n                size_t len = *((const size_t *)((const char *)sg_out + (size_t)i * sizeof(struct metal_sg) + sizeof(void *)));\n                fprintf(f, \"    out[%d]: virt=%p, len=%zu\\n\",\n                        i, virt, len);\n            }\n        }\n        fprintf(f, \"---\\n\");\n        fclose(f);\n    }\n}\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                              struct metal_device *device,\n                              uint32_t dir,\n                              struct metal_sg *sg_in,\n                              int nents_in,\n                              struct metal_sg *sg_out)\n{\n    int i;\n    (void)bus;\n    (void)device;\n\n    /* Log state before potential copy */\n    metal_log_state(\"before_copy\", sg_in, sg_out, nents_in, dir);\n\n    if (sg_out != sg_in) {\n        /* Log intention to copy and the byte count */\n        FILE *f = fopen(\"/tmp/logs/119.txt\", \"a\");\n        if (f != NULL) {\n            size_t bytes = (size_t)nents_in * sizeof(struct metal_sg);\n            fprintf(f, \"memcpy will copy %zu bytes from %p to %p\\n\",\n                    bytes, (const void *)sg_in, (const void *)sg_out);\n            fclose(f);\n        }\n        memcpy(sg_out, sg_in, (size_t)nents_in * sizeof(struct metal_sg));\n\n        /* Log state after copy */\n        metal_log_state(\"after_copy\", sg_in, sg_out, nents_in, dir);\n    }\n\n    for (i = 0; i < nents_in; i++) {\n        /* Log each iteration and action */\n        FILE *f = fopen(\"/tmp/logs/119.txt\", \"a\");\n        if (f != NULL) {\n            const void *virt = *((const void **)((const char *)sg_out + (size_t)i * sizeof(struct metal_sg)));\n            size_t len = *((const size_t *)((const char *)sg_out + (size_t)i * sizeof(struct metal_sg) + sizeof(void *)));\n            fprintf(f, \"loop idx=%d: virt=%p, len=%zu\\n\",\n                    i, virt, len);\n            fclose(f);\n        }\n\n        /* Call the platform cache helpers provided by the project's headers.\n         * They are not redeclared here to avoid conflicts with the real\n         * inline implementations.\n         */\n        if (dir == (uint32_t)1) {\n            /* METAL_DMA_DEV_W is defined in the project's headers; compare to 1\n             * here only when the header macro is not visible during a standalone\n             * compile. In the real build the header will define METAL_DMA_DEV_W\n             * and the comparison will match exactly.\n             */\n            extern void metal_cache_flush(void *addr, unsigned int len);\n            void *virt_ptr = *((void **)((char *)sg_out + (size_t)i * sizeof(struct metal_sg)));\n            unsigned int len_ui = (unsigned int)*((size_t *)((char *)sg_out + (size_t)i * sizeof(struct metal_sg) + sizeof(void *)));\n            metal_cache_flush(virt_ptr, len_ui);\n        }\n        extern void metal_cache_invalidate(void *addr, unsigned int len);\n        void *virt_ptr2 = *((void **)((char *)sg_out + (size_t)i * sizeof(struct metal_sg)));\n        unsigned int len_ui2 = (unsigned int)*((size_t *)((char *)sg_out + (size_t)i * sizeof(struct metal_sg) + sizeof(void *)));\n        metal_cache_invalidate(virt_ptr2, len_ui2);\n    }\n\n    /* Final state log */\n    metal_log_state(\"done\", sg_in, sg_out, nents_in, dir);\n\n    return nents_in;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The call memcpy(sg_out, sg_in, (size_t)nents_in * sizeof(struct metal_sg)) is made unconditionally when sg_out != sg_in, and the function does not validate that the object pointed to by sg_out is large enough to receive nents_in elements. If a caller passes an sg_out buffer with fewer than nents_in elements the memcpy can write past the bounds of sg_out, which is exactly the out-of-bounds access prohibited by MISRA C 2023 Rule 21.17. The provided scenario (e.g. nents_in = 4 while sg_out points to only 2 elements) is valid and demonstrates the violation. To fix this, the function must ensure the destination object is large enough (for example by taking and checking an sg_out length parameter or copying only the minimum safe number of bytes) before calling memcpy."
}