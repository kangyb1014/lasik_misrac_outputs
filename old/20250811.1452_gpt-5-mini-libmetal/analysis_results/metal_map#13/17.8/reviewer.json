{
  "user_message": "An agent A claimed that the following metal_map code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of metal_map.\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function metal_map modifies non-pointer parameters 'flags' and 'fd' (e.g. 'flags |= MAP_SHARED;', 'fd = -1;', and 'flags = MAP_PRIVATE | MAP_ANONYMOUS;'). Rule 17.8 prohibits modifying function parameters (the pointer object referred to by a pointer parameter may be modified, but non-pointer parameters shall not be altered). Modifying 'fd' and 'flags' therefore violates MISRA C 2023 Rule 17.8.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/109.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    log_probe(\"ENTER metal_map: fd=%d, offset=%ld, size=%zu, expand=%d, flags=0x%x\\n\",\n              fd, (long)offset, size, expand, flags);\n\n    flags |= MAP_SHARED;\n    log_probe(\"After flags |= MAP_SHARED -> flags=0x%x\\n\", flags);\n\n    if (fd < 0) {\n        /* Original logic sets fd to -1 and switches flags to anonymous private */\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n        log_probe(\"Branch fd<0: set fd=%d, flags=0x%x (MAP_PRIVATE|MAP_ANONYMOUS)\\n\",\n                  fd, flags);\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat statbuf;\n\n        log_probe(\"Branch expand: reqsize=%ld\\n\", (long)reqsize);\n\n        error = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n        log_probe(\"After flock LOCK_EX: error=%d\\n\", error);\n\n        if (!error)\n            error = fstat(fd, &statbuf);\n        log_probe(\"After fstat: error=%d, st_size=%ld\\n\", error, (long)statbuf.st_size);\n\n        if (!error && statbuf.st_size < reqsize) {\n            error = ftruncate(fd, reqsize);\n            log_probe(\"After ftruncate to %ld: error=%d\\n\", (long)reqsize, error);\n        }\n\n        if (!error)\n            flock(fd, LOCK_UN);\n        log_probe(\"After flock LOCK_UN (if held): error=%d\\n\", error);\n\n        if (error)\n            return -errno;\n    }\n\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    if (mem == MAP_FAILED) {\n        log_probe(\"mmap failed: errno=%d\\n\", errno);\n        return -errno;\n    }\n    log_probe(\"mmap succeeded: mem=%p, assigning to *result\\n\", mem);\n    *result = mem;\n    log_probe(\"EXIT metal_map: return 0, *result=%p\\n\", *result);\n    return 0;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for metal_map. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states that a function parameter should not be modified (the exception being the object referred to by a pointer parameter can be modified via the pointer, but the pointer itself shall not be modified). In metal_map the non-pointer parameters are modified: \"flags\" is updated (flags |= MAP_SHARED; and later flags = MAP_PRIVATE | MAP_ANONYMOUS;) and \"fd\" is assigned (fd = -1;). Those are direct modifications of value parameters and therefore violate Rule 17.8. The assignment to *result (i.e. *result = mem) is allowed by the rule because it modifies the object referred to by the pointer parameter, not the pointer itself. A simple remediation is to copy parameters into local variables (e.g. int fd_local = fd; int flags_local = flags;) and modify those instead."
}