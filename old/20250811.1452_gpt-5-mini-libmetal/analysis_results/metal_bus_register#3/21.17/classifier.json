{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified metal_bus_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/31.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of metal_bus_register as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\nJudge whether the above metal_bus_register code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "Violation occurs when bus->name points to a non-null pointer that does not contain a terminating '\\0' within its allocated bounds (i.e. not a proper C string). The call to strlen(bus->name) will then read beyond the bounds of the object referenced by bus->name, potentially causing out-of-bounds access, undefined behavior or a crash. The function performs only a null-pointer check and relies on bus->name being a valid NUL-terminated string; if that contract is not held by the caller, Rule 21.17 is violated.",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Minimal struct declaration matching usage in metal_bus_register */\nstruct metal_list { void *p; };\nstruct metal_node { void *p; };\n\nstruct metal_bus {\n    char *name;\n    struct metal_list devices;\n    struct metal_node node;\n};\n\n/* External functions used by metal_bus_register; declarations only. */\nextern int metal_bus_find(const char *name, void *arg);\nextern void metal_list_init(struct metal_list *list);\nextern void metal_list_add_tail(void *head, struct metal_node *node);\nextern void metal_log(int level, const char *fmt, ...);\n\n/* Probe logger: append control path and state to /tmp/logs/31.txt */\nstatic void probe_log_state(const char *stage, const struct metal_bus *bus, size_t strlen_val)\n{\n    FILE *f = fopen(\"/tmp/logs/31.txt\", \"a\");\n    if (f == NULL) {\n        /* If the log cannot be opened, do not change control flow of original logic. */\n        return;\n    }\n    /* Log stage, pointer value and strlen result (0 if not computed). */\n    fprintf(f, \"stage=%s, bus_ptr=%p\", stage, (const void *)bus);\n    if (bus != NULL) {\n        fprintf(f, \", name_ptr=%p\", (const void *)bus->name);\n    }\n    fprintf(f, \", strlen=%zu\\n\", strlen_val);\n    fclose(f);\n}\n\nint metal_bus_register(struct metal_bus *bus)\n{\n    size_t name_len = 0u;\n    /* Log entry with current pointer state before any string handling */\n    probe_log_state(\"entry\", bus, 0u);\n\n    if (!bus || !bus->name) {\n        probe_log_state(\"null_check_failed\", bus, 0u);\n        return -EINVAL;\n    }\n\n    /*\n     * Original logic calls strlen(bus->name) to detect empty string. This\n     * relies on bus->name pointing to a NUL-terminated buffer. If that\n     * contract is not met by the caller, strlen may read beyond the\n     * bounds of the referenced object -> Rule 21.17 violation.\n     * We preserve the original call so behavior remains as in the target code.\n     */\n    name_len = strlen(bus->name);\n    probe_log_state(\"after_strlen\", bus, name_len);\n\n    if (name_len == 0u)\n        return -EINVAL;\n    if (metal_bus_find(bus->name, NULL) == 0)\n        return -EEXIST;\n    metal_list_init(&bus->devices);\n    metal_list_add_tail(&_metal.common.bus_list, &bus->node);\n    metal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n    probe_log_state(\"success\", bus, name_len);\n    return 0;\n}\n\n/* Declarations for symbols referenced above to allow compilation in isolation. */\nextern struct { struct { void *bus_list; } common; } _metal;\nextern const int METAL_LOG_DEBUG;"
}