{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified metal_register_generic_device code that contains useful probe functions that print useful logs to a file \"/tmp/logs/62.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of metal_register_generic_device as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of metal_register_generic_device:\n```c\nint metal_register_generic_device(struct metal_device *device)\n{\n\tif (!device->name || !strlen(device->name) ||\n\t    device->num_regions > METAL_MAX_DEVICE_REGIONS)\n\t\treturn -EINVAL;\n\n\tdevice->bus = &metal_generic_bus;\n\tmetal_list_add_tail(&_metal.common.generic_device_list,\n\t\t\t    &device->node);\n\treturn 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_register_generic_device:\n#define METAL_MAX_DEVICE_REGIONS 32\n</additional code>\nJudge whether the above metal_register_generic_device code violates the rule 21.14 or not.",
  "is_rule_violated": false,
  "scenario": "No violation in the provided code. The function uses strlen to test for an empty string and does not call memcmp. A specific violation scenario would be if the empty-string check were implemented using memcmp on a null-terminated C string, for example replacing the check '!strlen(device->name)' with 'memcmp(device->name, \"\", 1) == 0' or 'memcmp(device->name, \"\", strlen(device->name) + 1) == 0'. Using memcmp to compare null-terminated strings in this way would violate MISRA C 2023 Rule 21.14.",
  "test_code": ""
}