{
  "user_message": "An agent A claimed that the following metal_uio_dev_dma_map code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop count and optionally loop flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with essentially Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement..\n</misra_rule>\n<target_code>\nHere is the original code of metal_uio_dev_dma_map.\n```c\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n\t\t\t\t struct linux_device *ldev,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg_in,\n\t\t\t\t int nents_in,\n\t\t\t\t struct metal_sg *sg_out)\n{\n\tint i, j;\n\tvoid *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n\tstruct metal_io_region *io;\n\n\t(void)lbus;\n\t(void)dir;\n\n\t/* Check if the the input virt address is MMIO address */\n\tfor (i = 0; i < nents_in; i++) {\n\t\tvaddr_sg_lo = sg_in[i].virt;\n\t\tvaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\t\tfor (j = 0, io = ldev->device.regions;\n\t\t     j < (int)ldev->device.num_regions; j++, io++) {\n\t\t\tvaddr_lo = io->virt;\n\t\t\tvaddr_hi = vaddr_lo + io->size;\n\t\t\tif (vaddr_sg_lo >= vaddr_lo &&\n\t\t\t    vaddr_sg_hi <= vaddr_hi) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == (int)ldev->device.num_regions) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n\t\t\t__func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n\t\t\treturn -EINVAL;\n\t\t}\n\t}\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\treturn nents_in;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The inner for-loop uses two objects in its loop control (j and io). The first clause initializes both j and io, and the third clause increments both (j++, io++). MISRA C 2023 Rule 14.2 requires there be only one loop counter and that the third clause modify only that loop counter. Modifying io in the third clause (an object that is not the sole loop counter) violates Rule 14.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n                 struct linux_device *ldev,\n                 uint32_t dir,\n                 struct metal_sg *sg_in,\n                 int nents_in,\n                 struct metal_sg *sg_out)\n{\n    int i, j;\n    void *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n    struct metal_io_region *io;\n    FILE *log = fopen(\"/tmp/logs/124.txt\", \"a\");\n\n    (void)lbus;\n    (void)dir;\n\n    if (log) {\n        fprintf(log, \"metal_uio_dev_dma_map: enter nents_in=%d\\n\", nents_in);\n    }\n\n    /* Check if the the input virt address is MMIO address */\n    for (i = 0; i < nents_in; i++) {\n        vaddr_sg_lo = sg_in[i].virt;\n        vaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n        if (log) {\n            fprintf(log, \"outer: i=%d, sg.virt=%p, sg.len=%d, vaddr_sg_lo=%p, vaddr_sg_hi=%p\\n\",\n                    i, sg_in[i].virt, sg_in[i].len, vaddr_sg_lo, vaddr_sg_hi);\n        }\n        for (j = 0, io = ldev->device.regions;\n             j < (int)ldev->device.num_regions; j++, io++) {\n            vaddr_lo = io->virt;\n            vaddr_hi = vaddr_lo + io->size;\n            if (log) {\n                fprintf(log, \"  inner: j=%d, io=%p, vaddr_lo=%p, vaddr_hi=%p\\n\",\n                        j, (void *)io, vaddr_lo, vaddr_hi);\n            }\n            if (vaddr_sg_lo >= vaddr_lo &&\n                vaddr_sg_hi <= vaddr_hi) {\n                if (log) {\n                    fprintf(log, \"  inner: match at j=%d, breaking\\n\", j);\n                }\n                break;\n            }\n        }\n        if (j == (int)ldev->device.num_regions) {\n            if (log) {\n                fprintf(log, \"no region match for sg[%d]: virt=%p len=%d, returning -EINVAL\\n\",\n                        i, vaddr_sg_lo, sg_in[i].len);\n                fclose(log);\n            }\n            /* use project's metal_log (do not redeclare it here) */\n            metal_log(0,\n              \"%s,%s: input address isn't MMIO addr: %p,%d.\\n\",\n            __func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n            return -EINVAL;\n        }\n    }\n    if (sg_out != sg_in)\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\n    if (log) {\n        fprintf(log, \"metal_uio_dev_dma_map: exit returning %d\\n\", nents_in);\n        fclose(log);\n    }\n    return nents_in;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The inner for statement \"for (j = 0, io = ldev->device.regions; j < (int)ldev->device.num_regions; j++, io++)\" initializes and updates two separate objects (j and io). MISRA C 2023 Rule 14.2 requires there be only one loop counter and that the third clause modify only that loop counter. Here the third clause modifies io in addition to j, and the first clause also sets a non\u2011counter object (io) alongside the counter. Both facts violate the rule. A compliant form would use a single loop counter (e.g. initialize io outside the for, compute io from j inside the loop, or increment io inside the loop body in a manner consistent with the rule)."
}