{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified metal_io_block_set code that contains useful probe functions that print useful logs to a file \"/tmp/logs/34.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of metal_io_block_set as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of metal_io_block_set:\n```c\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n\t       unsigned char value, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tint retlen = len;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_set) {\n\t\t(*io->ops.block_set)(\n\t\t\tio, offset, value, memory_order_seq_cst, len);\n\t} else {\n\t\tunsigned int cint = value;\n\t\tunsigned int i;\n\n\t\tfor (i = 1; i < sizeof(int); i++)\n\t\t\tcint |= ((unsigned int)value << (CHAR_BIT * i));\n\n\t\tfor (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = cint;\n\t\tfor (; len != 0; ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_io_block_set:\nstruct metal_io_region {\n\tvoid\t\t\t*virt;      /**< base virtual address */\n\tconst metal_phys_addr_t\t*physmap;   /**< table of base physical address\n\t\t\t\t\t\t of each of the pages in the I/O\n\t\t\t\t\t\t region */\n\tsize_t\t\t\tsize;       /**< size of the I/O region */\n\tunsigned long\t\tpage_shift; /**< page shift of I/O region */\n\tmetal_phys_addr_t\tpage_mask;  /**< page mask of I/O region */\n\tunsigned int\t\tmem_flags;  /**< memory attribute of the\n\t\t\t\t\t\t I/O region */\n\tstruct metal_io_ops\tops;        /**< I/O region operations */\n}\n</additional code>\nJudge whether the above metal_io_block_set code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "The initial assignment 'int retlen = len;' at function entry is dead: it is executed but its value is always overwritten (retlen = len;) before any use, so removing the initial assignment would not affect program behavior.",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <limits.h>\n#include <errno.h>\n#include <stdatomic.h>\n\n/* Declarations matching the surrounding code (no mocks). */\ntypedef uintptr_t metal_phys_addr_t;\n\nstruct metal_io_ops {\n    void (*block_set)(struct metal_io_region *, unsigned long, unsigned char, memory_order, int);\n};\n\nstruct metal_io_region {\n    void            *virt;      /**< base virtual address */\n    const metal_phys_addr_t *physmap;\n    size_t          size;       /**< size of the I/O region */\n    unsigned long   page_shift;\n    metal_phys_addr_t page_mask;\n    unsigned int    mem_flags;\n    struct metal_io_ops ops;\n};\n\n/* External function provided elsewhere in the project. */\nextern unsigned char *metal_io_virt(struct metal_io_region *io, unsigned long offset);\n\n/* Helper: append a log line describing control path and key state. */\nstatic void __attribute__((noinline)) log_state(const char *tag,\n                                                struct metal_io_region *io,\n                                                unsigned long offset,\n                                                unsigned char value,\n                                                int len,\n                                                int retlen,\n                                                unsigned int ptr_mod)\n{\n    FILE *f = fopen(\"/tmp/logs/34.txt\", \"a\");\n    if (f) {\n        /* keep output concise but informative */\n        fprintf(f, \"%s: io=%p offset=%lu value=%u len=%d retlen=%d ptr_mod=%u size=%zu\\n\",\n                tag, (void *)io, offset, (unsigned int)value, len, retlen, ptr_mod,\n                (io != NULL) ? io->size : (size_t)0);\n        fclose(f);\n    }\n}\n\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n           unsigned char value, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    int retlen = len; /* <-- this assignment is the dead operation: overwritten before use */\n\n    /* Log after the initial assignment to demonstrate it occurs. */\n    log_state(\"after_initial_assignment\", io, offset, value, len, retlen, 0);\n\n    if (!ptr)\n    {\n        log_state(\"null_ptr_return\", io, offset, value, len, retlen, 0);\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size)\n        len = io->size - offset;\n    retlen = len; /* overwrites the initial value */\n\n    /* Log after the trimming and the write of retlen to show overwrite. */\n    log_state(\"after_trim_and_retlen_overwrite\", io, offset, value, len, retlen,\n              (unsigned int)((uintptr_t)ptr % sizeof(int)));\n\n    if (io->ops.block_set) {\n        log_state(\"using_ops_block_set\", io, offset, value, len, retlen,\n                  (unsigned int)((uintptr_t)ptr % sizeof(int)));\n        (*io->ops.block_set)(\n            io, offset, value, memory_order_seq_cst, len);\n    } else {\n        unsigned int cint = value;\n        unsigned int i;\n\n        for (i = 1; i < sizeof(int); i++)\n            cint |= ((unsigned int)value << (CHAR_BIT * i));\n\n        for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n            *(unsigned char *)ptr = (unsigned char) value;\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                        len -= sizeof(int))\n            *(unsigned int *)ptr = cint;\n        for (; len != 0; ptr++, len--)\n            *(unsigned char *)ptr = (unsigned char) value;\n        atomic_thread_fence(memory_order_seq_cst);\n    }\n\n    /* Final log before return to record the effective return length. */\n    log_state(\"returning\", io, offset, value, len, retlen,\n              (unsigned int)0);\n    return retlen;\n}\n"
}