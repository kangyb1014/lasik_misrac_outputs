{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified metal_io_block_set code that contains useful probe functions that print useful logs to a file \"/tmp/logs/37.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of metal_io_block_set as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of metal_io_block_set:\n```c\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n\t       unsigned char value, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tint retlen = len;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_set) {\n\t\t(*io->ops.block_set)(\n\t\t\tio, offset, value, memory_order_seq_cst, len);\n\t} else {\n\t\tunsigned int cint = value;\n\t\tunsigned int i;\n\n\t\tfor (i = 1; i < sizeof(int); i++)\n\t\t\tcint |= ((unsigned int)value << (CHAR_BIT * i));\n\n\t\tfor (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = cint;\n\t\tfor (; len != 0; ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nJudge whether the above metal_io_block_set code violates the rule 17.8 or not.",
  "is_rule_violated": true,
  "scenario": "The parameter 'len' is modified inside the function: it is reassigned when (offset + len) > io->size and then decremented in loops. Rule 17.8 forbids modifying function parameters (the pointer itself must not be modified and value parameters should not be reassigned).",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <limits.h>\n#include <errno.h>\n#include <stdatomic.h>\n\nstruct metal_io_region;\n\nstruct metal_io_ops {\n    void (*block_set)(struct metal_io_region *io, unsigned long offset,\n                      unsigned char value, int order, int len);\n};\n\nstruct metal_io_region {\n    unsigned long size;\n    struct metal_io_ops ops;\n};\n\nextern unsigned char *metal_io_virt(struct metal_io_region *io, unsigned long offset);\n\n/* Logging helper: does not modify any of its parameters. */\nstatic void log_state(const char *stage, const struct metal_io_region *io,\n                      unsigned long offset, unsigned char value, int len,\n                      int retlen, const void *ptr, const char *branch)\n{\n    FILE *f = fopen(\"/tmp/logs/37.txt\", \"a\");\n    if (f) {\n        (void)fprintf(f,\n                      \"[%s] io=%p size=%lu offset=%lu value=%u len=%d retlen=%d ptr=%p branch=%s\\n\",\n                      stage,\n                      (const void *)io,\n                      (io != (const struct metal_io_region *)0) ? io->size : 0UL,\n                      offset,\n                      (unsigned int)value,\n                      len,\n                      retlen,\n                      ptr,\n                      (branch != (const char *)0) ? branch : \"none\");\n        (void)fclose(f);\n    }\n}\n\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n           unsigned char value, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    int retlen = len;\n\n    log_state(\"enter\", io, offset, value, len, retlen, ptr, \"start\");\n\n    if (!ptr) {\n        log_state(\"null_ptr\", io, offset, value, len, retlen, ptr, \"return -ERANGE\");\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size)\n        len = io->size - offset; /* <-- parameter 'len' is modified here (Rule 17.8 violation) */\n    retlen = len;\n    log_state(\"after_bounds_check\", io, offset, value, len, retlen, ptr,\n              (io->ops.block_set) ? \"use_block_set\" : \"use_memset_emulation\");\n    if (io->ops.block_set) {\n        (*io->ops.block_set)(\n            io, offset, value, (int)memory_order_seq_cst, len);\n        log_state(\"block_set_called\", io, offset, value, len, retlen, ptr, \"block_set\");\n    } else {\n        unsigned int cint = value;\n        unsigned int i;\n\n        for (i = 1; i < sizeof(int); i++)\n            cint |= ((unsigned int)value << (CHAR_BIT * i));\n\n        log_state(\"memset_emulation_start\", io, offset, value, len, retlen, ptr, \"align_loop\");\n        for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n            *(unsigned char *)ptr = (unsigned char) value;\n        log_state(\"memset_emulation_after_align\", io, offset, value, len, retlen, ptr, \"word_loop\");\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                        len -= sizeof(int))\n            *(unsigned int *)ptr = cint;\n        log_state(\"memset_emulation_after_words\", io, offset, value, len, retlen, ptr, \"tail_loop\");\n        for (; len != 0; ptr++, len--)\n            *(unsigned char *)ptr = (unsigned char) value;\n        atomic_thread_fence(memory_order_seq_cst);\n        log_state(\"memset_emulation_end\", io, offset, value, len, retlen, ptr, \"done\");\n    }\n    log_state(\"exit\", io, offset, value, len, retlen, ptr, \"return_retlen\");\n    return retlen;\n}\n"
}