{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop count and optionally loop flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with essentially Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified metal_io_block_set code that contains useful probe functions that print useful logs to a file \"/tmp/logs/36.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of metal_io_block_set as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of metal_io_block_set:\n```c\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n\t       unsigned char value, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tint retlen = len;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_set) {\n\t\t(*io->ops.block_set)(\n\t\t\tio, offset, value, memory_order_seq_cst, len);\n\t} else {\n\t\tunsigned int cint = value;\n\t\tunsigned int i;\n\n\t\tfor (i = 1; i < sizeof(int); i++)\n\t\t\tcint |= ((unsigned int)value << (CHAR_BIT * i));\n\n\t\tfor (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = cint;\n\t\tfor (; len != 0; ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_io_block_set:\nstruct metal_io_region {\n\tvoid\t\t\t*virt;      /**< base virtual address */\n\tconst metal_phys_addr_t\t*physmap;   /**< table of base physical address\n\t\t\t\t\t\t of each of the pages in the I/O\n\t\t\t\t\t\t region */\n\tsize_t\t\t\tsize;       /**< size of the I/O region */\n\tunsigned long\t\tpage_shift; /**< page shift of I/O region */\n\tmetal_phys_addr_t\tpage_mask;  /**< page mask of I/O region */\n\tunsigned int\t\tmem_flags;  /**< memory attribute of the\n\t\t\t\t\t\t I/O region */\n\tstruct metal_io_ops\tops;        /**< I/O region operations */\n}\n</additional code>\nJudge whether the above metal_io_block_set code violates the rule 14.2 or not.",
  "is_rule_violated": true,
  "scenario": "Violation occurs in the fallback path where the for loops are not well-formed per MISRA C 2023 Rule 14.2. Specifically: (1) The loop \"for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\" has an empty first clause, a second clause that depends on both ptr and len (both objects modified in the loop via the third clause and body), and a third clause that modifies two objects (ptr and len). This breaks the requirement that there shall be only one loop counter and that the third clause shall modify only the loop counter. (2) The subsequent loop \"for (; len >= (int)sizeof(int); ptr += sizeof(int), len -= sizeof(int))\" likewise modifies two objects in the third clause (ptr and len) and uses len in the second clause while len is modified in the body/third clause. These constructs violate Rule 14.2 because there is more than one loop counter and the second/third clauses use/modify objects that are also modified in the loop body.",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <errno.h>\n#include <limits.h>\n#include <stdatomic.h>\n\n/* Minimal definition of metal_phys_addr_t substituted for compilation */\ntypedef unsigned long metal_phys_addr_t;\n\nstruct metal_io_ops {\n    /* block_set prototype as used in the call (keeps simple integer memory-order param) */\n    void (*block_set)(struct metal_io_region *io, unsigned long offset,\n                      unsigned char value, int memory_order, int len);\n};\n\nstruct metal_io_region {\n    void            *virt;      /**< base virtual address */\n    const metal_phys_addr_t *physmap;   /**< physical page map */\n    size_t          size;       /**< size of the I/O region */\n    unsigned long   page_shift; /**/\n    metal_phys_addr_t page_mask;  /**/\n    unsigned int    mem_flags;  /**/ \n    struct metal_io_ops ops;    /**< I/O region operations */\n};\n\n/* external function provided elsewhere; do not mock */\nextern unsigned char *metal_io_virt(struct metal_io_region *io, unsigned long offset);\n\n/* Simple logging helper that appends to /tmp/logs/36.txt */\nstatic void log_to_file(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/36.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n    (void)fputc('\\n', f);\n    (void)fclose(f);\n}\n\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n           unsigned char value, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    int retlen = len;\n\n    log_to_file(\"ENTER: offset=%lu value=0x%02x len=%d\", offset, (unsigned int)value, len);\n\n    if (!ptr) {\n        log_to_file(\"PTR_NULL: returning -ERANGE\");\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size)\n        len = io->size - offset;\n    retlen = len;\n\n    log_to_file(\"ADJUSTED: retlen=%d len=%d io->size=%zu ptr=%p\", retlen, len, io->size, (void *)ptr);\n\n    if (io->ops.block_set) {\n        log_to_file(\"USING_OPS_BLOCK_SET: delegating to io->ops.block_set\");\n        (*io->ops.block_set)(\n            io, offset, value, (int)memory_order_seq_cst, len);\n    } else {\n        unsigned int cint = value;\n        unsigned int i;\n\n        /* Build repeated byte pattern in cint */\n        for (i = 1; i < sizeof(int); i++)\n            cint |= ((unsigned int)value << (CHAR_BIT * i));\n\n        log_to_file(\"FALLBACK: built cint=0x%08x\", cint);\n\n        /* First align the pointer to sizeof(int) boundary */\n        log_to_file(\"ALIGN_LOOP_START: ptr=%p len=%d sizeof(int)=%zu\", (void *)ptr, len, sizeof(int));\n        for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--) {\n            /* log current state inside alignment loop */\n            log_to_file(\"ALIGN_ITER: ptr=%p len=%d writing byte 0x%02x\", (void *)ptr, len, (unsigned int)value);\n            *(unsigned char *)ptr = (unsigned char) value;\n        }\n\n        /* Write full words while possible */\n        log_to_file(\"WORD_LOOP_START: ptr=%p len=%d\", (void *)ptr, len);\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                        len -= sizeof(int)) {\n            log_to_file(\"WORD_ITER: ptr=%p len=%d writing word 0x%08x\", (void *)ptr, len, cint);\n            *(unsigned int *)ptr = cint;\n        }\n\n        /* Tail bytes */\n        log_to_file(\"TAIL_LOOP_START: ptr=%p len=%d\", (void *)ptr, len);\n        for (; len != 0; ptr++, len--) {\n            log_to_file(\"TAIL_ITER: ptr=%p len=%d writing byte 0x%02x\", (void *)ptr, len, (unsigned int)value);\n            *(unsigned char *)ptr = (unsigned char) value;\n        }\n\n        atomic_thread_fence(memory_order_seq_cst);\n        log_to_file(\"FALLBACK_DONE: retlen=%d\", retlen);\n    }\n    return retlen;\n}\n"
}