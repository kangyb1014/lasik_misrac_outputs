{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_TRACE macro is defined empty (#define LFS_TRACE(__VA_ARGS__)). The statement LFS_TRACE(\"lfs_dir_rewind -> %d\", err); therefore expands to an empty statement that is executed but has no effect; removing that statement would not affect program behaviour. This constitutes dead code in the project and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/282.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_rewind:\n```c\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/*\n * Probe logging helper: append information about control flow and state to\n * /tmp/logs/282.txt so that the execution of paths that would otherwise\n * be optimized away (e.g. empty LFS_TRACE) can be observed.\n *\n * This helper preserves the behavior of lfs_dir_rewind and only adds\n * side-effect logging to a file. It is intentionally lightweight and\n * returns silently if the log file cannot be opened.\n */\nstatic void lfs_probe_log(const char *stage, void *lfs_ptr, void *dir_ptr, int err) {\n    FILE *f = fopen(\"/tmp/logs/282.txt\", \"a\");\n    if (!f) {\n        return; /* Do not affect original control flow if logging fails */\n    }\n    time_t t = time(NULL);\n    fprintf(f, \"%ld %s: lfs=%p dir=%p err=%d\\n\", (long)t, stage, lfs_ptr, dir_ptr, err);\n    fclose(f);\n}\n\n/*\n * Original function logic preserved. Added probe logs at key points to\n * record control flow and runtime state relevant to the reported\n * violation scenario (the empty LFS_TRACE expansion).\n */\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log result of lock attempt */\n    lfs_probe_log(\"after_lock_attempt\", (void*)lfs, (void*)dir, err);\n    if (err) {\n        /* Log early return due to lock failure */\n        lfs_probe_log(\"lock_failed_return\", (void*)lfs, (void*)dir, err);\n        return err;\n    }\n\n    /* Original trace kept for compatibility (may be a no-op macro). */\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    /* Log just before calling the internal implementation */\n    lfs_probe_log(\"before_rewind_call\", (void*)lfs, (void*)dir, 0);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    /* Log result returned from the internal implementation */\n    lfs_probe_log(\"after_rewind_call\", (void*)lfs, (void*)dir, err);\n\n    /* Original trace kept (may expand to nothing). We still produce logs\n       so callers can observe that this branch was executed and with what\n       return code. */\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n\n    /* Log around unlock to capture that we reach unlock and the final err */\n    lfs_probe_log(\"before_unlock\", (void*)lfs, (void*)dir, err);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"after_unlock\", (void*)lfs, (void*)dir, err);\n\n    return err;\n}\n"
}