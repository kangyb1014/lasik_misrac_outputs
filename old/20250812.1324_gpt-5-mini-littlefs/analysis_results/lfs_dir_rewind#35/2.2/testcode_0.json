{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg,0). The (void)cfg sub-expression is evaluated but has no observable effect for the typical use (cfg is just a pointer/member access like lfs->cfg). In lfs_dir_rewind the call err = LFS_LOCK(lfs->cfg) will always yield 0 and the (void)cfg evaluation does not alter program state; removing the (void)cfg expression (or replacing the macro with just 0) would not change program behaviour. Therefore the (void)cfg operation is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/282.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_rewind:\n```c\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe helper: append a single-line log entry to the required file.\n   Keep this as a small, self-contained function so it can be dropped into\n   the existing compilation unit without changing surrounding code. */\nstatic void lfs_probe_log_rewind(const char *stage, const void *lfs, const void *dir, const void *cfg, int err) {\n    FILE *f = fopen(\"/tmp/logs/282.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log the control point, pointers and return code so other agents can\n       reproduce and observe the behaviour of LFS_LOCK and related state. */\n    fprintf(f, \"%s: lfs=%p dir=%p cfg=%p err=%d\\n\", stage, lfs, dir, cfg, err);\n    fclose(f);\n}\n\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    /* Evaluate cfg once into a temporary so we can both call LFS_LOCK and\n       later record the exact pointer value that was evaluated. This keeps\n       the original logic of calling LFS_LOCK with the evaluated expression\n       while allowing us to log the evaluated value for evidence. */\n    void *cfgptr = (void*)lfs->cfg;\n\n    int err = LFS_LOCK(cfgptr);\n\n    /* Record that we attempted the lock and what it returned. This produces\n       evidence that LFS_LOCK returned 0 and shows the cfg pointer that was\n       evaluated (supporting the dead-code analysis of (void)cfg inside the\n       macro). */\n    lfs_probe_log_rewind(\"after_lock\", (void*)lfs, (void*)dir, cfgptr, err);\n\n    if (err) {\n        /* Log the early return path too. */\n        lfs_probe_log_rewind(\"early_return_lock_failed\", (void*)lfs, (void*)dir, cfgptr, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n\n    /* Log before unlocking so post-mortem can see result and that unlock\n       is about to be performed. */\n    lfs_probe_log_rewind(\"before_unlock\", (void*)lfs, (void*)dir, cfgptr, err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log entry with return value. */\n    lfs_probe_log_rewind(\"return\", (void*)lfs, (void*)dir, cfgptr, err);\n\n    return err;\n}\n"
}