{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to LFS_UNLOCK(lfs->cfg) is dead code in this project configuration. The macro is defined as '#define LFS_UNLOCK(cfg) ((void)cfg)', so the statement expands to an expression with no side-effect. Removing the LFS_UNLOCK call would not change program behaviour, therefore it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/282.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_rewind:\n```c\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: appends human-readable traces to /tmp/logs/282.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/282.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_dir_rewind] \");\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log failure to acquire lock and return as original code */\n        lfs_probe_log(\"LFS_LOCK returned error %d; lfs=%p dir=%p cfg=%p\",\n                      err, (void*)lfs, (void*)dir, (void*)lfs->cfg);\n        return err;\n    }\n\n    /* Log entry and key state before performing the rewind */\n    lfs_probe_log(\"entered lfs_dir_rewind; lfs=%p dir=%p cfg=%p\",\n                  (void*)lfs, (void*)dir, (void*)lfs->cfg);\n\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    lfs_probe_log(\"lfs_dir_rewind_ returned %d for dir=%p\", err, (void*)dir);\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n\n    /* Capture cfg pointer before and after calling LFS_UNLOCK to provide\n       evidence whether LFS_UNLOCK has any observable effect in this build\n       configuration (the reported violation scenario states it expands to\n       ((void)cfg), i.e. a no-op). */\n    void *cfg_before = (void*)lfs->cfg;\n    lfs_probe_log(\"about to call LFS_UNLOCK; cfg_before=%p\", cfg_before);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    void *cfg_after = (void*)lfs->cfg;\n    lfs_probe_log(\"after LFS_UNLOCK; cfg_after=%p\", cfg_after);\n\n    if (cfg_before == cfg_after) {\n        lfs_probe_log(\"observation: cfg pointer unchanged by LFS_UNLOCK (possible no-op)\");\n    } else {\n        lfs_probe_log(\"observation: cfg pointer changed by LFS_UNLOCK\");\n    }\n\n    return err;\n}\n"
}