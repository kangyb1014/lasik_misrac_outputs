{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of lfs_dir_rewind:\n```c\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nLFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated for this fragment as written. The cast (void*)lfs and (void*)dir does not introduce a non-const pointer when the function parameters are declared as non-const; Rule 8.13 concerns pointer declarations pointing to const-qualified types where possible. This fragment only passes addresses to a trace routine and does not itself declare a pointer that should be const. \n\nWhen it would be a violation: if the parameters could/should be declared as pointers to const (e.g. const lfs_t *lfs or const lfs_dir_t *dir) but are not, or if you cast away const qualification (e.g. (void*)some_const_ptr) thereby discarding const, that would breach Rule 8.13."
}