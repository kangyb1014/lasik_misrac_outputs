{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe expression (void*)(uintptr_t)cfg->sync takes cfg->sync (accessed through a const struct lfs_config *cfg, so the member is const-qualified) and casts it first to an integer type and then to void*. This sequence removes the const qualifier (and changes a function-pointer type to a non-const data pointer type), thereby discarding const qualification where a const-qualified pointer could and should be used. This violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/219.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mount:\n```c\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helper: logs control flow and state to /tmp/logs/219.txt */\nstatic void lfs_mount_probe_pre(const struct lfs_config *cfg, const lfs_t *lfs) {\n    FILE *f = fopen(\"/tmp/logs/219.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"[lfs_mount PRE] lfs=%p cfg=%p cfg->context=%p\\n\",\n            (const void*)lfs, (const void*)cfg, cfg->context);\n\n    /* Log pointer-like members as uintptr_t and as void* after the cast used in the code. */\n    fprintf(f, \"  cfg->read:  as uintptr_t=0x%\" PRIxPTR \", casted to void*=%p\\n\",\n            (uintptr_t)cfg->read, (void*)(uintptr_t)cfg->read);\n    fprintf(f, \"  cfg->prog:  as uintptr_t=0x%\" PRIxPTR \", casted to void*=%p\\n\",\n            (uintptr_t)cfg->prog, (void*)(uintptr_t)cfg->prog);\n    fprintf(f, \"  cfg->erase: as uintptr_t=0x%\" PRIxPTR \", casted to void*=%p\\n\",\n            (uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->erase);\n    fprintf(f, \"  cfg->sync:  as uintptr_t=0x%\" PRIxPTR \", casted to void*=%p\\n\",\n            (uintptr_t)cfg->sync, (void*)(uintptr_t)cfg->sync);\n\n    fprintf(f, \"  cfg sizes: read_size=%\" PRIu32 \", prog_size=%\" PRIu32 \", block_size=%\" PRIu32 \", block_count=%\" PRIu32 \"\\n\",\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count);\n    fprintf(f, \"  other cfg: block_cycles=%\" PRId32 \", cache_size=%\" PRIu32 \", lookahead_size=%\" PRIu32 \"\\n\",\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size);\n    fprintf(f, \"  buffers: read_buffer=%p prog_buffer=%p lookahead_buffer=%p\\n\",\n            (void*)cfg->read_buffer, (void*)cfg->prog_buffer, (void*)cfg->lookahead_buffer);\n    fprintf(f, \"  limits: name_max=%\" PRIu32 \", file_max=%\" PRIu32 \", attr_max=%\" PRIu32 \"\\n\",\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    fclose(f);\n}\n\nstatic void lfs_mount_probe_post(const struct lfs_config *cfg, const lfs_t *lfs, int err) {\n    FILE *f = fopen(\"/tmp/logs/219.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_mount POST] lfs=%p cfg=%p -> err=%d\\n\",\n            (const void*)lfs, (const void*)cfg, err);\n    fprintf(f, \"  (after mount_) cfg->sync as uintptr_t=0x%\" PRIxPTR \", casted to void*=%p\\n\",\n            (uintptr_t)cfg->sync, (void*)(uintptr_t)cfg->sync);\n    fclose(f);\n}\n\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Insert pre-call probe to record values and the exact cast used in the reported violation. */\n    lfs_mount_probe_pre(cfg, lfs);\n\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_mount_(lfs, cfg);\n\n    /* Insert post-call probe to record the return and reaffirm the casted pointer values. */\n    lfs_mount_probe_post(cfg, lfs, err);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n"
}