{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe expression (void*)cfg casts a const struct lfs_config * to a plain void * thereby discarding the const qualifier. This removes const qualification from a pointer to an object that is declared const and thus violates MISRA C 2023 Rule 8.13. Fixes include passing (const void*)cfg and adjusting the tracing API to accept const void * (or otherwise avoid casting away const).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/219.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mount:\n```c\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/*\n * Probe helper: append concise state and control-flow information to\n * /tmp/logs/219.txt. This uses integer representations of pointers\n * (uintptr_t) to avoid casting away const qualifiers for cfg.\n *\n * NOTE: This helper preserves the original logic of lfs_mount and only\n * emits additional diagnostics to the log file so other agents can\n * reproduce and observe the scenario where cfg is cast in the tracing\n * call.\n */\nstatic void lfs_mount_probe(const void *lfs, const void *cfg, const struct lfs_config *ccfg, const char *stage, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/219.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"[lfs_mount probe] stage=%s\\n\", stage);\n    fprintf(f, \"  lfs=0x%\" PRIxPTR \"\\n\", (uintptr_t)lfs);\n    /* cfg is const - log its address without casting away const */\n    fprintf(f, \"  cfg=0x%\" PRIxPTR \" (const)\\n\", (uintptr_t)cfg);\n\n    if (ccfg != NULL) {\n        fprintf(f, \"  cfg->context=0x%\" PRIxPTR \"\\n\", (uintptr_t)ccfg->context);\n        fprintf(f, \"  sizes: read_size=%\" PRIu32 \", prog_size=%\" PRIu32 \", block_size=%\" PRIu32 \", block_count=%\" PRIu32 \"\\n\",\n                ccfg->read_size, ccfg->prog_size, ccfg->block_size, ccfg->block_count);\n        fprintf(f, \"  other: block_cycles=%\" PRId32 \", cache_size=%\" PRIu32 \", lookahead_size=%\" PRIu32 \"\\n\",\n                ccfg->block_cycles, ccfg->cache_size, ccfg->lookahead_size);\n        fprintf(f, \"  buffers: read_buffer=0x%\" PRIxPTR \", prog_buffer=0x%\" PRIxPTR \", lookahead_buffer=0x%\" PRIxPTR \"\\n\",\n                (uintptr_t)ccfg->read_buffer, (uintptr_t)ccfg->prog_buffer, (uintptr_t)ccfg->lookahead_buffer);\n        fprintf(f, \"  name_max=%\" PRIu32 \", file_max=%\" PRIu32 \", attr_max=%\" PRIu32 \"\\n\",\n                ccfg->name_max, ccfg->file_max, ccfg->attr_max);\n    }\n\n    fprintf(f, \"  err=%d\\n\", err);\n\n    /* Call out the specific cast that is the subject of the MISRA concern */\n    fprintf(f, \"  NOTE: original code performs a cast (void*)cfg when calling LFS_TRACE,\\n\");\n    fprintf(f, \"        which discards the const qualifier of cfg (evidence for Rule 8.13).\\n\");\n\n    fclose(f);\n}\n\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    /* Probe: entry */\n    lfs_mount_probe(lfs, cfg, cfg, \"entry\", 0);\n\n    int err = LFS_LOCK(cfg);\n\n    /* Probe: after lock attempt (log lock return value) */\n    lfs_mount_probe(lfs, cfg, cfg, \"after_lock\", err);\n\n    if (err) {\n        /* Log the early return due to lock failure */\n        lfs_mount_probe(lfs, cfg, cfg, \"return_after_lock_failure\", err);\n        return err;\n    }\n\n    /* Original tracing call (kept to preserve original logic).  This call\n     * contains the (void*)cfg cast reported by the other agent. We do not\n     * change it here so that observers can reproduce the exact scenario. */\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Preserve original call to core mount implementation */\n    err = lfs_mount_(lfs, cfg);\n\n    /* Probe: after core mount has completed */\n    lfs_mount_probe(lfs, cfg, cfg, \"after_lfs_mount_\", err);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n"
}