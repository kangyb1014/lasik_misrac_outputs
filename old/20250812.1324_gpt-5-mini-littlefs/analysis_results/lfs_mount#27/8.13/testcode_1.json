{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\ncfg is declared as pointer to const struct (const struct lfs_config *cfg). Accessing cfg->read yields a pointer member of a const-qualified object. The expression (void*)(uintptr_t)cfg->read first converts the pointer to an integer and then back to void*, discarding the const qualification (i.e. creating a pointer to a non-const type). This removal of const qualification violates MISRA C 2023 Rule 8.13, which requires pointers to point to const-qualified types whenever possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/219.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mount:\n```c\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/*\n * Probe helpers to log control flow and state for lfs_mount.\n * Logs are appended to /tmp/logs/219.txt so other agents can reproduce\n * and gather evidence for the reported pointer-const qualification issue.\n *\n * These helpers avoid casting back to pointer types that would discard\n * const qualification; pointers are converted to integer (uintptr_t)\n * for safe printing.\n */\nstatic void lfs_mount_probe_state(const struct lfs_config *cfg, const char *stage) {\n    FILE *f = fopen(\"/tmp/logs/219.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Basic identity info */\n    fprintf(f, \"[lfs_mount][%s] cfg=%p\\n\", stage, (const void*)cfg);\n\n    if (cfg) {\n        fprintf(f, \"[lfs_mount][%s] context=%p\\n\", stage, cfg->context);\n        /* Print function pointer members as integers to avoid casting back to non-const pointers */\n        fprintf(f, \"[lfs_mount][%s] read=0x%\" PRIxPTR \", prog=0x%\" PRIxPTR \", erase=0x%\" PRIxPTR \", sync=0x%\" PRIxPTR \"\\n\",\n                stage,\n                (uintptr_t)cfg->read, (uintptr_t)cfg->prog,\n                (uintptr_t)cfg->erase, (uintptr_t)cfg->sync);\n\n        /* Print key numerical configuration fields */\n        fprintf(f, \"[lfs_mount][%s] read_size=%\" PRIu32 \", prog_size=%\" PRIu32 \", block_size=%\" PRIu32 \", block_count=%\" PRIu32 \"\\n\",\n                stage,\n                cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count);\n\n        fprintf(f, \"[lfs_mount][%s] block_cycles=%\" PRId32 \", cache_size=%\" PRIu32 \", lookahead_size=%\" PRIu32 \"\\n\",\n                stage,\n                cfg->block_cycles, cfg->cache_size, cfg->lookahead_size);\n\n        fprintf(f, \"[lfs_mount][%s] read_buffer=%p, prog_buffer=%p, lookahead_buffer=%p\\n\",\n                stage, cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer);\n\n        fprintf(f, \"[lfs_mount][%s] name_max=%\" PRIu32 \", file_max=%\" PRIu32 \", attr_max=%\" PRIu32 \"\\n\",\n                stage,\n                cfg->name_max, cfg->file_max, cfg->attr_max);\n    }\n\n    fclose(f);\n}\n\nstatic void lfs_mount_probe_result(int err) {\n    FILE *f = fopen(\"/tmp/logs/219.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_mount][result] err=%d\\n\", err);\n    fclose(f);\n}\n\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        /* Log early failure to lock */\n        lfs_mount_probe_result(err);\n        return err;\n    }\n\n    /* Log state prior to the original trace that contains the problematic cast */\n    lfs_mount_probe_state(cfg, \"before_trace\");\n\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Log state immediately after the original trace to capture any changes */\n    lfs_mount_probe_state(cfg, \"after_trace\");\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n\n    /* Log result before unlocking so any information is preserved even if unlock fails */\n    lfs_mount_probe_result(err);\n\n    LFS_UNLOCK(cfg);\n    return err;\n}\n"
}