{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nlfs_cache_zero is expected to zero the program cache buffer (likely via memset). lfs_init assigns lfs->pcache.buffer either to user-supplied cfg->prog_buffer or to an internally allocated buffer of size cfg->cache_size, but there is no verification that a user-supplied prog_buffer is at least cfg->cache_size. If lfs_cache_zero calls memset(lfs->pcache.buffer, 0, lfs->cfg->cache_size) (or similar string.h routine), a user-provided buffer smaller than cache_size will be written past its bounds, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/223.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mount:\n```c\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <errno.h>\n\n/* Helper logging function that appends human-readable logs to /tmp/logs/223.txt.\n   It attempts to create the /tmp/logs directory if it does not exist. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = NULL;\n    /* Try to create the directory; ignore errors other than failure to create when it does not exist. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/223.txt\", \"a\");\n    if (f == NULL) {\n        /* If we cannot open the file, abort logging silently to avoid changing program logic. */\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n    (void)fputc('\\n', f);\n    (void)fclose(f);\n}\n\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    /* Log lock attempt and result */\n    lfs_probe_log(\"lfs_mount: LFS_LOCK returned %d for cfg=%p\", err, (void*)cfg);\n    if (err) {\n        /* Log early return due to lock failure */\n        lfs_probe_log(\"lfs_mount: early return due to lock error %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Probe log capturing configuration and pointers relevant to the reported violation scenario. */\n    lfs_probe_log(\"lfs_mount: entering lfs_mount_ with lfs=%p cfg=%p\", (void*)lfs, (void*)cfg);\n    lfs_probe_log(\"lfs_mount: cfg->prog_buffer=%p, cfg->cache_size=%u, cfg->prog_size=%u, cfg->read_buffer=%p, cfg->read_size=%u\", \n                  (void*)cfg->prog_buffer, (unsigned)cfg->cache_size, (unsigned)cfg->prog_size,\n                  (void*)cfg->read_buffer, (unsigned)cfg->read_size);\n\n    /* Additional diagnostic: if the user-supplied prog_buffer is NULL or suspiciously small we log that fact.\n       Note: we cannot determine the actual allocated size of prog_buffer here, so we only log the provided pointers\n       and the intended cache_size so an external reproducer can compare the two. */\n    if (cfg->prog_buffer == NULL) {\n        lfs_probe_log(\"lfs_mount: cfg->prog_buffer is NULL\");\n    } else {\n        lfs_probe_log(\"lfs_mount: cfg->prog_buffer non-NULL (address %p), intended cache_size=%u\", (void*)cfg->prog_buffer, (unsigned)cfg->cache_size);\n    }\n\n    err = lfs_mount_(lfs, cfg);\n\n    lfs_probe_log(\"lfs_mount: lfs_mount_ returned %d (lfs=%p, cfg=%p)\", err, (void*)lfs, (void*)cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n"
}