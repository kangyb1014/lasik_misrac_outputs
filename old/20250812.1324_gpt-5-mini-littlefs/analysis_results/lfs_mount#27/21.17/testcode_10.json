{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code passes fcrc.size (read from disk metadata) directly to lfs_bd_crc without validating that it does not exceed the remaining bytes in the block (lfs->cfg->block_size - dir->off). If a corrupted or malicious on-disk fcrc.size is larger than the available data, lfs_bd_crc may attempt to read/process past the block boundary and internally call string functions (e.g. memcpy/memcmp) on buffers sized to the block or cache, causing accesses beyond the referenced object bounds. For example, if fcrc.size > lfs->cfg->block_size - dir->off, lfs_bd_crc could copy more bytes than the cache/buffer holds, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/223.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mount:\n```c\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe helper: append structured logs to /tmp/logs/223.txt. */\nstatic void lfs_mount_probe(const char *stage, void *lfs, const struct lfs_config *cfg, int err) {\n    FILE *fp = fopen(\"/tmp/logs/223.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    /* Log stage, error (if any), and key cfg state that may affect buffer/size checks.\n       Keep formatting simple and avoid introducing new behavior. */\n    fprintf(fp, \"[lfs_mount] stage=%s err=%d lfs=%p cfg=%p\\n\", stage, err, lfs, (const void*)cfg);\n    if (cfg) {\n        fprintf(fp, \"  cfg->context=%p\\n\", (const void*)cfg->context);\n        fprintf(fp, \"  callbacks: read=%p prog=%p erase=%p sync=%p\\n\",\n                (const void*)(uintptr_t)cfg->read,\n                (const void*)(uintptr_t)cfg->prog,\n                (const void*)(uintptr_t)cfg->erase,\n                (const void*)(uintptr_t)cfg->sync);\n        fprintf(fp, \"  sizes: read_size=%\" PRIu32 \" prog_size=%\" PRIu32 \" block_size=%\" PRIu32 \" block_count=%\" PRIu32 \"\\n\",\n                cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count);\n        fprintf(fp, \"  other: block_cycles=%\" PRId32 \" cache_size=%\" PRIu32 \" lookahead_size=%\" PRIu32 \"\\n\",\n                cfg->block_cycles, cfg->cache_size, cfg->lookahead_size);\n        fprintf(fp, \"  buffers: read_buffer=%p prog_buffer=%p lookahead_buffer=%p\\n\",\n                cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer);\n        fprintf(fp, \"  limits: name_max=%\" PRIu32 \" file_max=%\" PRIu32 \" attr_max=%\" PRIu32 \"\\n\",\n                cfg->name_max, cfg->file_max, cfg->attr_max);\n    }\n    fclose(fp);\n}\n\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        /* Log lock failure and return as original code did */\n        lfs_mount_probe(\"lock_failed\", lfs, cfg, err);\n        return err;\n    }\n\n    /* Log entry and configuration state for later analysis of any out-of-bounds reads */\n    lfs_mount_probe(\"enter\", lfs, cfg, 0);\n\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}\")\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Call into core mount routine and log its entry/exit result. The original logic is preserved. */\n    lfs_mount_probe(\"before_mount_\", lfs, cfg, 0);\n    err = lfs_mount_(lfs, cfg);\n    lfs_mount_probe(\"after_mount_\", lfs, cfg, err);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n\n    /* Final exit log. */\n    lfs_mount_probe(\"exit\", lfs, cfg, err);\n    return err;\n}\n"
}