{
  "result": "success",
  "message": "[probe] ENTER lfs_mount: lfs=0x7ffc7fbebca8 cfg=0x7ffc7fbebbb0\n[probe] NOTE: will call LFS_LOCK(cfg) now. To avoid changing original behavior we do not dereference cfg before the lock.\n[probe] LFS_LOCK(cfg) returned: 0\n[probe] Post-LFS_LOCK inspection: cfg=0x7ffc7fbebbb0 checksum=6243\n[probe] cfg->context=0x7ffc7fbec590, cfg->read=0x556285ff10a8, cfg->prog=0x556285ff138c, cfg->erase=0x556285ff18b6, cfg->sync=0x556285ff1cb7\n[probe] numeric sizes: read_size=16, prog_size=16, block_size=512\n[probe] lfs_mount_ returned: 0\n[probe] Calling LFS_UNLOCK(cfg) and returning.\n[probe] ENTER lfs_mount: lfs=0x7ffc7fbebca8 cfg=0x7ffc7fbebbb0\n[probe] NOTE: will call LFS_LOCK(cfg) now. To avoid changing original behavior we do not dereference cfg before the lock.\n[probe] LFS_LOCK(cfg) returned: 0\n[probe] Post-LFS_LOCK inspection: cfg=0x7ffc7fbebbb0 checksum=6243\n[probe] cfg->context=0x7ffc7fbec590, cfg->read=0x556285ff10a8, cfg->prog=0x556285ff138c, cfg->erase=0x556285ff18b6, cfg->sync=0x556285ff1cb7\n[probe] numeric sizes: read_size=16, prog_size=16, block_size=512\n[probe] lfs_mount_ returned: 0\n[probe] Calling LFS_UNLOCK(cfg) and returning.\n[probe] ENTER lfs_mount: lfs=0x7ffc7fbebca8 cfg=0x7ffc7fbebbb0\n[probe] NOTE: will call LFS_LOCK(cfg) now. To avoid changing original behavior we do not dereference cfg before the lock.\n[probe] LFS_LOCK(cfg) returned: 0\n[probe] Post-LFS_LOCK inspection: cfg=0x7ffc7fbebbb0 checksum=6243\n[probe] cfg->context=0x7ffc7fbec590, cfg->read=0x556285ff10a8, cfg->prog=0x556285ff138c, cfg->erase=0x556285ff18b6, cfg->sync=0x556285ff1cb7\n[probe] numeric sizes: read_size=16, prog_size=16, block_size=512\n[probe] lfs_mount_ returned: 0\n[probe] Calling LFS_UNLOCK(cfg) and returning.\n[probe] ENTER lfs_mount: lfs=0x7ffc7fbebca8 cfg=0x7ffc7fbebbb0\n[probe] NOTE: will call LFS_LOCK(cfg) now. To avoid changing original behavior we do not dereference cfg before the lock.\n[probe] LFS_LOCK(cfg) returned: 0\n[probe] Post-LFS_LOCK inspection: cfg=0x7ffc7fbebbb0 checksum=6213\n[probe] cfg->context=0x7ffc7fbec590, cfg->read=0x556285ff10a8, cfg->prog=0x556285ff138c, cfg->erase=0x556285ff18b6, cfg->sync=0x556285ff1cb7\n[probe] numeric sizes: read_size=1, prog_size=1, block_size=512\n[probe] lfs_mount_ returned: 0\n[probe] Calling LFS_UNLOCK(cfg) and returning.\n[probe] ENTER lfs_mount: lfs=0x7ffc7fbebca8 cfg=0x7ffc7fbebbb0\n[probe] NOTE: will call LFS_LOCK(cfg) now. To avoid changing original behavior we do not dereference cfg before the lock.\n[probe] LFS_LOCK(cfg) returned: 0\n[probe] Post-LFS_LOCK inspection: cfg=0x7ffc7fbebbb0 checksum=6213\n[probe] cfg->context=0x7ffc7fbec590, cfg->read=0x556285ff10a8, cfg->prog=0x556285ff138c, cfg->erase=0x556285ff18b6, cfg->sync=0x556285ff1cb7\n[probe] numeric sizes: read_size=1, prog_size=1, block_size=512\n[probe] lfs_mount_ returned: 0\n[probe] Calling LFS_UNLOCK(cfg) and returning.\n[probe] ENTER lfs_mount: lfs=0x7ffc7fbebca8 cfg=0x7ffc7fbebbb0\n[probe] NOTE: will call LFS_LOCK(cfg) now. To avoid changing original behavior we do not dereference cfg before the lock.\n[probe] LFS_LOCK(cfg) returned: 0\n[probe] Post-LFS_LOCK inspection: cfg=0x7ffc7fbebbb0 checksum=6213\n[probe] cfg->context=0x7ffc7fbec590, cfg->read=0x556285ff10a8, cfg->prog=0x556285ff138c, cfg->erase=0x556285ff18b6, cfg->sync=0x556285ff1cb7\n[probe] numeric sizes: read_size=1, prog_size=1, block_size=512\n[probe] lfs_mount_ returned: 0\n[probe] Calling LFS_UNLOCK(cfg) and returning.\n[probe] ENTER lfs_mount: lfs=0x7ffc7fbebca8 cfg=0x7ffc7fbebbb0\n[probe] NOTE: will call LFS_LOCK(cfg) now. To avoid changing original behavior we do not dereference cfg before the lock.\n[probe] LFS_LOCK(cfg) returned: 0\n[probe] Post-LFS_LOCK inspection: cfg=0x7ffc7fbebbb0 checksum=6153\n[probe] cfg->context=0x7ffc7fbec590, cfg->read=0x556285ff10a8, cfg->prog=0x556285ff138c, cfg->erase=0x556285ff18b6, cfg->sync=0x556285ff1cb7\n[probe] numeric sizes: read_size=512, prog_size=512, block_size=512\n[probe] lfs_mount_ returned: 0\n[probe] Calling LFS_UNLOCK(cfg) and returning.\n[probe] ENTER lfs_mount: lfs=0x7ffc7fbebca8 cfg=0x7ffc7fbebbb0\n[probe] NOTE: will call LFS_LOCK(cfg) no"
}