{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call LFS_UNLOCK(cfg) expands to the macro ((void)cfg) (see provided definitions). This performs no observable action or side-effect; removing the call would not change program behaviour, so the statement is dead code in the project build shown.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/218.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mount:\n```c\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n\n/* Probe helper: append human-readable state to /tmp/logs/218.txt */\nstatic void lfs_probe_log_cfg(const char *stage, const struct lfs_config *cfg, int err) {\n    FILE *f = fopen(\"/tmp/logs/218.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    if (cfg == NULL) {\n        fprintf(f, \"stage=%s: cfg=NULL, err=%d\\n\", stage, err);\n        fclose(f);\n        return;\n    }\n\n    /* Log pointer values and numeric fields from cfg. Use casts for pointers. */\n    fprintf(f,\n        \"stage=%s: cfg=%p, err=%d, context=%p, read=%p, prog=%p, erase=%p, sync=%p, \"\n        \"read_size=%\" PRIu32 \", prog_size=%\" PRIu32 \", block_size=%\" PRIu32 \", \"\n        \"block_count=%\" PRIu32 \", block_cycles=%\" PRId32 \", cache_size=%\" PRIu32 \", \"\n        \"lookahead_size=%\" PRIu32 \", read_buffer=%p, prog_buffer=%p, lookahead_buffer=%p, \"\n        \"name_max=%\" PRIu32 \", file_max=%\" PRIu32 \", attr_max=%\" PRIu32 \"\\n\",\n        stage,\n        (void*)cfg,\n        err,\n        cfg->context,\n        (void*)(uintptr_t)cfg->read,\n        (void*)(uintptr_t)cfg->prog,\n        (void*)(uintptr_t)cfg->erase,\n        (void*)(uintptr_t)cfg->sync,\n        cfg->read_size,\n        cfg->prog_size,\n        cfg->block_size,\n        cfg->block_count,\n        cfg->block_cycles,\n        cfg->cache_size,\n        cfg->lookahead_size,\n        cfg->read_buffer,\n        cfg->prog_buffer,\n        cfg->lookahead_buffer,\n        cfg->name_max,\n        cfg->file_max,\n        cfg->attr_max\n    );\n\n    fclose(f);\n}\n\n/* Keep original function logic; add probes to demonstrate effect (or lack of effect)\n   of LFS_UNLOCK(cfg). */\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    /* Log entry and cfg pointer */\n    lfs_probe_log_cfg(\"entry\", cfg, 0);\n\n    int err = LFS_LOCK(cfg);\n\n    /* Log result of lock */\n    lfs_probe_log_cfg(\"after_lock\", cfg, err);\n\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Log state immediately before calling internal mount */\n    lfs_probe_log_cfg(\"before_mount_\", cfg, 0);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n\n    /* Log state before calling LFS_UNLOCK to capture any change */\n    lfs_probe_log_cfg(\"before_unlock\", cfg, err);\n\n    /* Preserve original unlock call (may be a no-op macro). */\n    LFS_UNLOCK(cfg);\n\n    /* Log state after calling LFS_UNLOCK to show whether any observable change occurred. */\n    lfs_probe_log_cfg(\"after_unlock\", cfg, err);\n\n    return err;\n}\n"
}