{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to the comma expression ((void)cfg, 0). In the statement int err = LFS_LOCK(cfg); this executes (void)cfg (a no-op used only to silence unused-parameter warnings) and then initializes err to 0. The initialization to 0 is required for correct behaviour (the subsequent if (err) test), but the (void)cfg sub-expression has no runtime effect \u2014 removing the (void)cfg would not change program behaviour. Therefore an operation is executed whose removal would not affect behaviour (dead code). Note: in thread-safe builds LFS_LOCK may instead call cfg->lock(cfg), which would not be dead; but with the provided definition ((void)cfg,0) the (void)cfg sub-expression is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_mount code that contains useful probe functions that print useful logs to a file \"/tmp/logs/218.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_mount as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_mount:\n```c\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_mount code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Probe helper: compute a simple checksum of the bytes of the config\n   Used only for logging and comparison (non-invasive after LFS_LOCK). */\nstatic uint32_t lfs_cfg_checksum(const struct lfs_config *cfg) {\n    if (cfg == NULL) {\n        return 0u;\n    }\n\n    const unsigned char *p = (const unsigned char *)cfg;\n    size_t n = sizeof(*cfg);\n    uint32_t sum = 0u;\n    for (size_t i = 0; i < n; i++) {\n        sum += (uint32_t)p[i];\n    }\n    return sum;\n}\n\nint lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {\n    FILE *f = fopen(\"/tmp/logs/218.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"[probe] ENTER lfs_mount: lfs=%p cfg=%p\\n\", (void*)lfs, (void*)cfg);\n        fprintf(f, \"[probe] NOTE: will call LFS_LOCK(cfg) now. To avoid changing original behavior we do not dereference cfg before the lock.\\n\");\n        fflush(f);\n    }\n\n    /* Preserve original order: call LFS_LOCK first. */\n    int err = LFS_LOCK(cfg);\n\n    if (f) {\n        fprintf(f, \"[probe] LFS_LOCK(cfg) returned: %d\\n\", err);\n        fflush(f);\n    }\n\n    /* If lock failed, preserve original behavior and return immediately. */\n    if (err) {\n        if (f) {\n            fprintf(f, \"[probe] Early return due to LFS_LOCK failure: %d\\n\", err);\n            fclose(f);\n        }\n        return err;\n    }\n\n    /* After successful LFS_LOCK we may safely inspect cfg (matches original behavior). */\n    if (f) {\n        uint32_t checksum = lfs_cfg_checksum(cfg);\n        fprintf(f, \"[probe] Post-LFS_LOCK inspection: cfg=%p checksum=%u\\n\", (void*)cfg, (unsigned)checksum);\n\n        /* Log a few important observable pointers/fields similar to original tracing\n           without changing program logic. We follow the original lfs_mount trace layout. */\n        fprintf(f, \"[probe] cfg->context=%p, cfg->read=%p, cfg->prog=%p, cfg->erase=%p, cfg->sync=%p\\n\",\n                cfg ? cfg->context : NULL,\n                cfg ? (void*)(uintptr_t)cfg->read : NULL,\n                cfg ? (void*)(uintptr_t)cfg->prog : NULL,\n                cfg ? (void*)(uintptr_t)cfg->erase : NULL,\n                cfg ? (void*)(uintptr_t)cfg->sync : NULL);\n        fprintf(f, \"[probe] numeric sizes: read_size=%\" PRIu32 \", prog_size=%\" PRIu32 \", block_size=%\" PRIu32 \"\\n\",\n                cfg ? cfg->read_size : 0u, cfg ? cfg->prog_size : 0u, cfg ? cfg->block_size : 0u);\n        fflush(f);\n    }\n\n    /* Original trace (preserve exactly as much as possible). */\n    LFS_TRACE(\"lfs_mount(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Call the real mount implementation. */\n    err = lfs_mount_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_mount -> %d\", err);\n\n    if (f) {\n        fprintf(f, \"[probe] lfs_mount_ returned: %d\\n\", err);\n        fprintf(f, \"[probe] Calling LFS_UNLOCK(cfg) and returning.\\n\");\n        fclose(f);\n    }\n\n    LFS_UNLOCK(cfg);\n    return err;\n}\n"
}