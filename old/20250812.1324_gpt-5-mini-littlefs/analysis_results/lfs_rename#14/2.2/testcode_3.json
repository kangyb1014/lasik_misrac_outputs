{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to ((void)cfg). In lfs_rename this becomes the statement ((void)lfs->cfg); which merely evaluates and discards the expression with no side-effects. Removing that statement would not change program behaviour, so it constitutes executed but effectless (dead) code in the project and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/114.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_rename:\n```c\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logger: append human-readable trace to /tmp/logs/114.txt */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/114.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n\n    /* Probe: log the cfg expression value before calling LFS_UNLOCK. */\n    /* This evaluates the same expression as LFS_UNLOCK(lfs->cfg) without altering program logic. */\n    void *probe_cfg_before = (void*)lfs->cfg;\n    lfs_log_probe(\n        \"[probe] lfs_rename ENTER unlock: lfs=%p, cfg_before=%p, err=%d, oldpath=\\\"%s\\\", newpath=\\\"%s\\\"\\n\",\n        (void*)lfs,\n        probe_cfg_before,\n        err,\n        (oldpath != NULL) ? oldpath : \"(null)\",\n        (newpath != NULL) ? newpath : \"(null)\"\n    );\n\n    /* Original unlock call retained to preserve behavior. */\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe: log the cfg expression value after calling LFS_UNLOCK to demonstrate it is unchanged. */\n    void *probe_cfg_after = (void*)lfs->cfg;\n    lfs_log_probe(\n        \"[probe] lfs_rename AFTER unlock: lfs=%p, cfg_after=%p\\n\",\n        (void*)lfs,\n        probe_cfg_after\n    );\n\n    return err;\n}\n"
}