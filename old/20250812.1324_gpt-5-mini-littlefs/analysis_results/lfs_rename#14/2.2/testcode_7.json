{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro is defined as ((void)cfg,0), so LFS_LOCK(lfs->cfg) has no side-effects and always yields 0. Thus the statement int err = LFS_LOCK(lfs->cfg); merely assigns the constant 0 to err and the immediately following check if (err) { return err; } can never be true. These executed operations (the no-op lock and the conditional return) can be removed without changing program behaviour in this build, which constitutes dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/114.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_rename:\n```c\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append structured logs to /tmp/logs/114.txt\n   This helper is kept local (static) and does not change the behavior\n   of lfs_rename aside from emitting observational logs. */\nstatic void lfs_probe_log(const char *tag, const char *oldpath, const char *newpath, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/114.txt\", \"a\");\n    if (f) {\n        /* Simple, safe formatting. Avoid complex library calls to minimize\n           impact on the system under test. */\n        fprintf(f, \"%s: oldpath=\\\"%s\\\" newpath=\\\"%s\\\" err=%d\\n\",\n                tag, oldpath ? oldpath : \"(null)\", newpath ? newpath : \"(null)\", err);\n        fclose(f);\n    }\n}\n\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    /* Preserve original logic: call LFS_LOCK exactly once and keep the\n       subsequent conditional check. Insert observational logging around it\n       to capture the value returned by LFS_LOCK and the control path. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the immediate result of LFS_LOCK. This will let observers\n       determine whether LFS_LOCK is a no-op (returns 0) in the current\n       build/configuration. */\n    lfs_probe_log(\"after LFS_LOCK\", oldpath, newpath, err);\n\n    if (err) {\n        /* Log the early-return path when LFS_LOCK indicates an error. */\n        lfs_probe_log(\"LFS_LOCK returned non-zero, returning\", oldpath, newpath, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    /* Log that we are about to call the underlying rename implementation. */\n    lfs_probe_log(\"calling lfs_rename_\", oldpath, newpath, 0);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    /* Log the result of the rename operation. */\n    lfs_probe_log(\"after lfs_rename_\", oldpath, newpath, err);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log before returning to capture the final return value and\n       to demonstrate that the earlier LFS_LOCK check did not cause an\n       early exit in this run (if LFS_LOCK is effectively a no-op). */\n    lfs_probe_log(\"before return from lfs_rename\", oldpath, newpath, err);\n\n    return err;\n}\n"
}