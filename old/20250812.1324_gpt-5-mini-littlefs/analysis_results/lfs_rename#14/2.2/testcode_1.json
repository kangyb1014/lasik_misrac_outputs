{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro expands to ((void)cfg,0). The (void)cfg sub-expression is executed but has no effect for the typical argument lfs->cfg (no side effects). Removing that cast (or replacing the macro with plain 0) would not change program behaviour in the shown usage, so the executed (void)cfg constitutes dead code. (If the cfg expression had side effects or was volatile this could be different, but in the provided code it is not.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/114.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_rename:\n```c\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helper: append a single line to the log file. */\nstatic void probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/114.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {\n    /* Log entry and the incoming pointers/paths. */\n    probe_log(\"ENTER lfs_rename: lfs=%p oldpath=%s newpath=%s\",\n              (void*)lfs,\n              oldpath ? oldpath : \"(null)\",\n              newpath ? newpath : \"(null)\");\n\n    /* Record the address of the cfg member so we can later show it is\n       unchanged by the LFS_LOCK expansion. We intentionally take the\n       address of the member to avoid assumptions about its type while\n       still demonstrating the evaluation of the cfg expression. This\n       mirrors the fact that the LFS_LOCK macro evaluates its cfg\n       operand (in the reported scenario as (void)cfg). */\n    void *cfg_addr = (void*)&lfs->cfg;\n    probe_log(\"PRE-LFS_LOCK: &lfs->cfg=%p\", cfg_addr);\n\n    /* Call the original lock and capture its return value. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result of lock and re-check the recorded cfg address. If the\n       (void)cfg sub-expression had side-effects on the cfg storage, we\n       might observe a change; in the reported scenario no change is\n       expected. */\n    probe_log(\"POST-LFS_LOCK: err=%d &lfs->cfg=%p\", err, cfg_addr);\n\n    if (err) {\n        probe_log(\"LFS_LOCK returned non-zero (%d); returning early\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_rename(%p, \\\"%s\\\", \\\"%s\\\")\", (void*)lfs, oldpath, newpath);\n\n    err = lfs_rename_(lfs, oldpath, newpath);\n\n    LFS_TRACE(\"lfs_rename -> %d\", err);\n\n    probe_log(\"PRE-LFS_UNLOCK: about to call LFS_UNLOCK(&lfs->cfg) &lfs->cfg=%p\", cfg_addr);\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"POST-LFS_UNLOCK: returned from LFS_UNLOCK, &lfs->cfg=%p\", cfg_addr);\n\n    probe_log(\"EXIT lfs_rename: err=%d\", err);\n    return err;\n}\n"
}