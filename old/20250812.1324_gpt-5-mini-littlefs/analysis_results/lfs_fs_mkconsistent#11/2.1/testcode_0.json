{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_fs_mkconsistent the macro LFS_LOCK(cfg) is defined as ((void)cfg,0), so err is always 0. Therefore the conditional branch if (err) { return err; } can never be taken and the statement 'return err;' is unreachable. This constitutes unreachable code in the project, violating MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_mkconsistent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/89.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_mkconsistent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_mkconsistent:\n```c\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_mkconsistent code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe helper: append control-flow and state information to /tmp/logs/89.txt */\nstatic void lfs_probe_log(const char *stage, void *lfs_ptr, void *cfg_ptr, int err) {\n    FILE *f = fopen(\"/tmp/logs/89.txt\", \"a\");\n    if (f) {\n        fprintf(f, \"%s: lfs=%p cfg=%p err=%d\\n\", stage, lfs_ptr, cfg_ptr, err);\n        fclose(f);\n    }\n}\n\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    /* Preserve original locking logic */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe immediately after attempting to lock. This will show if LFS_LOCK\n       always returns 0 (as in the reported scenario). */\n    lfs_probe_log(\"after_lock\", (void*)lfs, (void*)(lfs ? lfs->cfg : NULL), err);\n\n    if (err) {\n        /* Log the branch that is reported as unreachable in the scenario. */\n        lfs_probe_log(\"early_return_due_to_lock_error\", (void*)lfs,\n                      (void*)(lfs ? lfs->cfg : NULL), err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    /* Probe after the internal consistency operation to record its result. */\n    lfs_probe_log(\"after_mkconsistent_\", (void*)lfs, (void*)(lfs ? lfs->cfg : NULL), err);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final probe before returning to capture final state and return value. */\n    lfs_probe_log(\"before_return\", (void*)lfs, (void*)(lfs ? lfs->cfg : NULL), err);\n\n    return err;\n}\n"
}