{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg), so calls like LFS_UNLOCK(lfs->cfg) in lfs_fs_mkconsistent evaluate to a no-op (only a cast-to-void of a non-volatile read). Removing that call would not change program behaviour for this build configuration, so the executed operation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_mkconsistent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/90.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_mkconsistent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_mkconsistent:\n```c\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_mkconsistent code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <time.h>\n\n/* Helper: append a formatted log line to /tmp/logs/90.txt. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/90.txt\", \"a\");\n    if (!f) return;\n\n    /* timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n#if defined(_MSC_VER)\n    localtime_s(&tm_buf, &t);\n#else\n    localtime_r(&t, &tm_buf);\n#endif\n    char timestr[64];\n    if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) == 0) {\n        timestr[0] = '\\0';\n    }\n\n    fprintf(f, \"%s \", timestr);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Probe wrapper around LFS_UNLOCK to log before/after without changing behavior. */\nstatic void lfs_probe_unlock_call(void *cfg_ptr) {\n    /* Log pointer value only; avoid dereferencing to prevent side-effects. */\n    lfs_probe_log(\"probe: LFS_UNLOCK called with cfg=%p (pre)\", cfg_ptr);\n    /* Actual unlock is performed by the macro in the original code; we do not call any unlock here. */\n    /* The real call site will invoke LFS_UNLOCK(cfg) right after this logging. */\n    lfs_probe_log(\"probe: LFS_UNLOCK will return to caller after macro expansion for cfg=%p\", cfg_ptr);\n}\n\n/* Modified function with inserted probes. Keeps original logic/order. */\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log outcome of lock attempt and pointers for later inspection. */\n    lfs_probe_log(\"enter: lfs_fs_mkconsistent: lfs=%p cfg=%p lock_err=%d\", (void*)lfs, (void*)lfs->cfg, err);\n\n    if (err) {\n        lfs_probe_log(\"exit-early: lfs_fs_mkconsistent returning err=%d (lock failed)\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n\n    /* Probe immediately before calling the (potentially no-op) unlock macro. */\n    lfs_probe_unlock_call((void*)lfs->cfg);\n\n    /* Original unlock call retained to preserve behavior. */\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe after unlock to show control flow returned here and capture pointer again. */\n    lfs_probe_log(\"return: lfs_fs_mkconsistent: lfs=%p cfg=%p err=%d\", (void*)lfs, (void*)lfs->cfg, err);\n\n    return err;\n}\n"
}