{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg), so the statement LFS_UNLOCK(lfs->cfg); performs no observable action or side-effect. It is executed but removing it would not affect program behaviour in the provided project, therefore it constitutes dead code and violates MISRA C 2023 Rule 2.2. (If in other build configurations LFS_UNLOCK expands to a real unlock operation, that would change the assessment, but for the supplied project this is a no-op.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_mkconsistent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/90.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_mkconsistent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_mkconsistent:\n```c\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_mkconsistent code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append a simple log entry to /tmp/logs/90.txt\n * Keeps original logic unchanged; only records control flow and state.\n */\nstatic void lfs_probe_log(const char *tag, const void *lfs, const void *cfg, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/90.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Basic log: tag, lfs pointer, cfg pointer, err value */\n    fprintf(f, \"%s: lfs=%p cfg=%p err=%d\\n\", tag, lfs, cfg, err);\n    fclose(f);\n}\n\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log failure to acquire lock */\n        lfs_probe_log(\"lfs_fs_mkconsistent: lock_failed\", (void*)lfs, (void*)lfs->cfg, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    /* Log entry into the function after successful lock */\n    lfs_probe_log(\"lfs_fs_mkconsistent: entered\", (void*)lfs, (void*)lfs->cfg, err);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n\n    /* Log just before calling LFS_UNLOCK so we can observe that the unlock call occurs\n       and capture the cfg pointer and the current error state. This helps reproduce\n       the scenario where LFS_UNLOCK(cfg) is a no-op. */\n    lfs_probe_log(\"lfs_fs_mkconsistent: before_unlock\", (void*)lfs, (void*)lfs->cfg, err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log immediately after unlock to show no observable change in state (cfg pointer, err). */\n    lfs_probe_log(\"lfs_fs_mkconsistent: after_unlock\", (void*)lfs, (void*)lfs->cfg, err);\n\n    return err;\n}\n"
}