{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_TRACE macro is defined as an empty replacement (#define LFS_TRACE(__VA_ARGS__)), so the line LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs); preprocesses to an empty statement (';'). This empty, executed statement has no effect and could be removed without changing program behaviour, meeting the definition of dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_mkconsistent code that contains useful probe functions that print useful logs to a file \"/tmp/logs/90.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_mkconsistent as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_mkconsistent:\n```c\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_mkconsistent code.\n",
  "test_code": "#include <stdio.h>\n\nint lfs_fs_mkconsistent(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Open probe log for control-flow and state recordings. Continue silently if open fails. */\n    FILE *probe = fopen(\"/tmp/logs/90.txt\", \"a\");\n    if (probe) {\n        fprintf(probe, \"ENTRY: lfs_fs_mkconsistent: lfs=%p, lock_err=%d\\n\", (void*)lfs, err);\n        fflush(probe);\n    }\n\n    if (err) {\n        if (probe) {\n            fprintf(probe, \"EARLY_EXIT: lfs_fs_mkconsistent returning lock error %d\\n\", err);\n            fclose(probe);\n        }\n        return err;\n    }\n\n    /* Probe immediately before the original LFS_TRACE call. This records the intent of a trace call\n       even if the LFS_TRACE macro expands to nothing (empty replacement). */\n    if (probe) {\n        fprintf(probe, \"TRACE_POINT: about to invoke LFS_TRACE(\\\"lfs_fs_mkconsistent(%p)\\\")\\n\", (void*)lfs);\n        fflush(probe);\n    }\n\n    /* Original trace call preserved to keep logic identical. If LFS_TRACE is an empty macro,\n       this will be an executed empty statement (the issue reported). */\n    LFS_TRACE(\"lfs_fs_mkconsistent(%p)\", (void*)lfs);\n\n    err = lfs_fs_mkconsistent_(lfs);\n\n    /* Record result from the internal consistency function. */\n    if (probe) {\n        fprintf(probe, \"POST_MKCONSISTENT_: err=%d\\n\", err);\n        fflush(probe);\n    }\n\n    /* Probe the second original LFS_TRACE call location. */\n    if (probe) {\n        fprintf(probe, \"TRACE_POINT: about to invoke LFS_TRACE(\\\"lfs_fs_mkconsistent -> %d\\\")\\n\", err);\n        fflush(probe);\n    }\n    LFS_TRACE(\"lfs_fs_mkconsistent -> %d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    if (probe) {\n        fprintf(probe, \"EXIT: lfs_fs_mkconsistent unlocked and returning %d\\n\", err);\n        fclose(probe);\n    }\n\n    return err;\n}\n"
}