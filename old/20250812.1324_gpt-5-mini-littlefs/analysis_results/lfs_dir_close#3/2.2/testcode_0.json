{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg, 0). In lfs_dir_close this becomes int err = ((void)lfs->cfg, 0); the (void)lfs->cfg operand is evaluated but has no observable effect (cfg is just a pointer, not volatile and evaluation has no side\u2011effects). Removing that operand (or replacing the whole macro with 0) would not affect program behaviour, so the operation is dead code. (The same reasoning applies to the LFS_UNLOCK(cfg) macro ((void)cfg) used as an expression statement.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/26.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_close:\n```c\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Small helper to append probe logs for reproducing the evaluation/side-effect behavior\n   related to LFS_LOCK(lfs->cfg) and LFS_UNLOCK(lfs->cfg). Writes to /tmp/logs/26.txt. */\nstatic void append_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/26.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    /* Log entry and the cfg pointer value before invoking the lock macro. This\n       captures the pointer evaluated by the LFS_LOCK macro ((void)cfg, 0). */\n    append_log(\"ENTRY lfs_dir_close: lfs=%p dir=%p cfg=%p\",\n               (void*)lfs, (void*)dir, (void*)lfs->cfg);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log immediately after the lock attempt to capture the return value and\n       to show that evaluating lfs->cfg had no observable state change (pointer unchanged). */\n    append_log(\"AFTER LFS_LOCK: err=%d cfg=%p\",\n               err, (void*)lfs->cfg);\n\n    if (err) {\n        append_log(\"EXIT lfs_dir_close (lock failed): err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    /* Log result of the internal close and cfg pointer again. */\n    append_log(\"AFTER lfs_dir_close_: err=%d cfg=%p\",\n               err, (void*)lfs->cfg);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n\n    append_log(\"BEFORE LFS_UNLOCK: cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    append_log(\"AFTER LFS_UNLOCK: cfg=%p final_err=%d\", (void*)lfs->cfg, err);\n\n    return err;\n}\n"
}