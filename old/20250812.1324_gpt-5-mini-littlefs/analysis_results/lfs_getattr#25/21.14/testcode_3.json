{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_dir_find, suffix points into the null\u2011terminated path buffer. The code uses memcmp(suffix, \"..\", 2) to test whether the two characters at that location are '.' '.' \u2014 i.e. to compare a substring of a C string against the string literal \"..\". This is using memcmp to perform a string comparison on data derived from a null\u2011terminated string, which falls under MISRA C 2023 Rule 21.14 (memcmp shall not be used to compare null terminated strings).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_getattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/206.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_getattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_getattr:\n```c\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_getattr code.\n",
  "test_code": "static void lfs_probe_log_enter(lfs_t *lfs, const char *path) {\n    FILE *f = fopen(\"/tmp/logs/206.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"--- lfs_getattr probe ENTER ---\\n\");\n    fprintf(f, \"lfs=%p, path=%p\\n\", (void*)lfs, (const void*)path);\n\n    if (path == NULL) {\n        fprintf(f, \"path is NULL\\n\\n\");\n        fclose(f);\n        return;\n    }\n\n    /* log the path contents up to a reasonable limit */\n    size_t maxlen = 1024;\n    size_t len = 0;\n    for (; len < maxlen && path[len] != '\\0'; ++len) {\n        /* nothing */\n    }\n    fprintf(f, \"path_length=%zu\\n\", len);\n    fprintf(f, \"path=\\\"\");\n    for (size_t i = 0; i < len; ++i) {\n        unsigned char c = (unsigned char)path[i];\n        /* print printable characters directly, otherwise as hex */\n        if (c >= 0x20 && c <= 0x7e) {\n            fputc(c, f);\n        } else {\n            fprintf(f, \"\\\\x%02x\", c);\n        }\n    }\n    fprintf(f, \"\\\"\\n\");\n\n    /* find and log occurrences of the substring \"..\" within the path buffer */\n    for (size_t i = 0; i + 1 < len; ++i) {\n        if (path[i] == '.' && path[i+1] == '.') {\n            fprintf(f, \"found \"\"..\"\" at offset %zu, substring_ptr=%p, chars=(%c,%c)\\n\",\n                    i, (const void*)(path + i), path[i], path[i+1]);\n            fprintf(f, \" char_addresses: %p, %p\\n\",\n                    (const void*)&path[i], (const void*)&path[i+1]);\n        }\n    }\n\n    /* log null terminator address if within our scanned range */\n    if (len < maxlen) {\n        fprintf(f, \"null_terminator_at=%p\\n\", (const void*)(path + len));\n    } else {\n        fprintf(f, \"path may be longer than %zu, null terminator not logged\\n\", maxlen);\n    }\n\n    fprintf(f, \"--- end ENTER ---\\n\\n\");\n    fclose(f);\n}\n\nstatic void lfs_probe_log_exit(lfs_t *lfs, const char *path, long res) {\n    FILE *f = fopen(\"/tmp/logs/206.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"--- lfs_getattr probe EXIT ---\\n\");\n    fprintf(f, \"lfs=%p, path=%p, result=%ld\\n\", (void*)lfs, (const void*)path, res);\n    if (path == NULL) {\n        fprintf(f, \"path is NULL\\n\\n\");\n        fclose(f);\n        return;\n    }\n\n    /* repeat a minimal set of checks to correlate state on exit */\n    size_t maxlen = 1024;\n    size_t len = 0;\n    for (; len < maxlen && path[len] != '\\0'; ++len) { /* nothing */ }\n    fprintf(f, \"path_length=%zu\\n\", len);\n    for (size_t i = 0; i + 1 < len; ++i) {\n        if (path[i] == '.' && path[i+1] == '.') {\n            fprintf(f, \"found \"\"..\"\" at offset %zu, substring_ptr=%p\\n\",\n                    i, (const void*)(path + i));\n        }\n    }\n    if (len < maxlen) {\n        fprintf(f, \"null_terminator_at=%p\\n\", (const void*)(path + len));\n    }\n    fprintf(f, \"--- end EXIT ---\\n\\n\");\n    fclose(f);\n}\n\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    /* preserve original trace */\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    /* probe state before calling into the underlying implementation\n       This records the path buffer layout and locations of any \"..\" substrings\n       so that callers can reproduce scenarios where memcmp might be used\n       on a substring of a null-terminated string. */\n    lfs_probe_log_enter(lfs, path);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    /* probe state after the call, including the result for correlation */\n    lfs_probe_log_exit(lfs, path, (long)res);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}