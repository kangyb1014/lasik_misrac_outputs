{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller provides a path pointer that is not to a null-terminated C string (for example a pointer into a buffer whose accessible extent does not include the terminating '\\0'), strspn(name, \"/\") will scan forward looking for a non-\"/\" or a '\\0' and can read beyond the bounds of the object. The code does only a check of *name == '\\0' (to detect an immediately empty string) but does not otherwise guarantee a terminator within the accessible object, so strspn may access out-of-bounds memory.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_getattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/207.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_getattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_getattr:\n```c\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_getattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <signal.h>\n#include <setjmp.h>\n#include <time.h>\n\n/*\n * Probe helpers to capture information about the `path` pointer.\n * Use a SIGSEGV handler + sigsetjmp/siglongjmp to avoid crashing when\n * probing invalid/unterminated pointers. The probe writes logs to\n * /tmp/logs/207.txt. This preserves original logic of lfs_getattr\n * while providing evidence for out-of-bounds string access attempts.\n */\nstatic sigjmp_buf lfs_probe_jmp;\n\nstatic void lfs_probe_segv_handler(int sig) {\n    (void)sig;\n    siglongjmp(lfs_probe_jmp, 1);\n}\n\nstatic void lfs_probe_path(void *lfs_ptr, const char *path) {\n    FILE *f = fopen(\"/tmp/logs/207.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    time_t t = time(NULL);\n    fprintf(f, \"--- probe start: %ld ---\\n\", (long)t);\n    fprintf(f, \"lfs=%p path=%p\\n\", lfs_ptr, (void*)path);\n\n    if (path == NULL) {\n        fprintf(f, \"path is NULL\\n\");\n        fprintf(f, \"--- probe end ---\\n\\n\");\n        fclose(f);\n        return;\n    }\n\n    /* Install temporary SIGSEGV handler */\n    struct sigaction newact, oldact;\n    newact.sa_handler = lfs_probe_segv_handler;\n    sigemptyset(&newact.sa_mask);\n    newact.sa_flags = 0;\n    sigaction(SIGSEGV, &newact, &oldact);\n\n    /* Try to read the first byte and a small prefix (up to 64 bytes).\n     * If any read triggers a SIGSEGV, the handler will longjmp back\n     * and we will record where the fault occurred.\n     */\n    if (sigsetjmp(lfs_probe_jmp, 1) == 0) {\n        /* Outer guard succeeded. Now progressively read bytes. */\n        char buf[65];\n        size_t i;\n        for (i = 0; i < 64; i++) {\n            /* Each read is guarded so a fault at any offset is caught. */\n            if (sigsetjmp(lfs_probe_jmp, 1) != 0) {\n                fprintf(f, \"segfault while reading path at offset %zu\\n\", i);\n                break;\n            }\n            char c = path[i];\n            buf[i] = (c >= 32 && c < 127) ? c : ((c == '\\0') ? '\\0' : '?');\n            if (c == '\\0') {\n                i++; /* include terminator */\n                break;\n            }\n        }\n        buf[(i < sizeof(buf)) ? i : (sizeof(buf)-1)] = '\\0';\n        fprintf(f, \"probe: prefix (up to 64 bytes) = \\\"%s\\\"\\n\", buf);\n\n        /* Log the first byte raw value if readable */\n        if (buf[0] != '\\0') {\n            unsigned char fb = (unsigned char)buf[0];\n            fprintf(f, \"probe: first_byte=0x%02x ('%c')\\n\",\n                    fb, (fb >= 32 && fb < 127) ? fb : '?');\n        } else {\n            fprintf(f, \"probe: first_byte='\\\\0' (empty string)\\n\");\n        }\n    } else {\n        /* A SIGSEGV happened even before the first read. */\n        fprintf(f, \"segfault while attempting to read path[0]\\n\");\n    }\n\n    /* Restore old signal handler */\n    sigaction(SIGSEGV, &oldact, NULL);\n\n    fprintf(f, \"--- probe end ---\\n\\n\");\n    fclose(f);\n}\n\n/* Modified lfs_getattr with probes. Preserves original logic. */\nlfs_ssize_t lfs_getattr(lfs_t *lfs, const char *path,\n        uint8_t type, void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Probe the path pointer and surrounding accessible bytes before\n     * proceeding. This captures evidence if `path` is not a valid\n     * null-terminated string or points near an inaccessible page.\n     */\n    lfs_probe_path((void*)lfs, path);\n\n    LFS_TRACE(\"lfs_getattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_ssize_t res = lfs_getattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_getattr -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}