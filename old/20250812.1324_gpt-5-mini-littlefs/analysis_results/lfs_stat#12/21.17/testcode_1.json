{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call lfs_dir_find receives the user-supplied path without validating it. If the caller passes path == NULL or a char buffer that is not null-terminated, strcspn(name, \"/\") will read bytes beyond the bounds of the object (scanning until it finds '\\0' or '/'), causing an out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe logging helper. Appends concise state information to /tmp/logs/103.txt.\n   This helper intentionally does NOT dereference 'path' to avoid introducing\n   additional out-of-bounds accesses; it only records the pointer value and\n   whether it is NULL. */\nstatic void lfs_probe_log(const char *stage, const void *lfs, const char *path, const void *info, int err) {\n    FILE *f = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Print a single-line record for easy parsing; include stage, pointers, and err. */\n    fprintf(f, \"%s: lfs=%p path=%p info=%p err=%d\\n\", stage, (const void*)lfs, (const void*)path, (const void*)info, err);\n    if (path == NULL) {\n        fprintf(f, \"  NOTE: path == NULL\\n\");\n    } else {\n        fprintf(f, \"  NOTE: path != NULL (contents not read to avoid UB)\\n\");\n    }\n    fclose(f);\n}\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    /* Log entering and the pointer state before taking the lock. */\n    lfs_probe_log(\"enter_before_lock\", (void*)lfs, path, (void*)info, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log result of lock attempt. */\n    lfs_probe_log(\"after_lock\", (void*)lfs, path, (void*)info, err);\n\n    if (err) {\n        /* If locking failed, record and return as original logic does. */\n        lfs_probe_log(\"return_lock_failed\", (void*)lfs, path, (void*)info, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    /* Log just before delegating to lfs_stat_. This records the pointer passed\n       into the function that the other agent flagged as vulnerable. */\n    lfs_probe_log(\"before_lfs_stat_\", (void*)lfs, path, (void*)info, 0);\n\n    err = lfs_stat_(lfs, path, info);\n\n    /* Log the outcome from lfs_stat_. */\n    lfs_probe_log(\"after_lfs_stat_\", (void*)lfs, path, (void*)info, err);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final exit log. */\n    lfs_probe_log(\"exit\", (void*)lfs, path, (void*)info, err);\n    return err;\n}\n"
}