{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg). Calls like LFS_UNLOCK(lfs->cfg); only evaluate the expression and discard the result; they produce no side-effects for a plain field access. Removing these calls would not change program behaviour in the presented code (e.g. in lfs_stat), so they constitute dead code and violate MISRA C 2023 Rule 2.2. (Note: if the cfg expression had observable side-effects \u2014 e.g. a volatile access or a function call \u2014 then the evaluation would be meaningful; that is not the case here where cfg is a simple lfs->cfg field access.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/98.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a simple event line to /tmp/logs/98.txt. */\nstatic void lfs_probe_log_state(const char *stage, lfs_t *lfs, const char *path, struct lfs_info *info, int err) {\n    FILE *f = fopen(\"/tmp/logs/98.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log stage, pointers and error value. Keep formatting simple and safe. */\n    fprintf(f, \"%s: lfs=%p path=%s info=%p err=%d\\n\",\n            stage,\n            (void*)lfs,\n            path ? path : \"(null)\",\n            (void*)info,\n            err);\n    fclose(f);\n}\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log state immediately after attempting lock. */\n    lfs_probe_log_state(\"after_lock\", lfs, path, info, err);\n    if (err) {\n        /* Log that we are returning due to lock error. */\n        lfs_probe_log_state(\"return_on_lock_error\", lfs, path, info, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    /* Log before delegating to the internal implementation. */\n    lfs_probe_log_state(\"before_lfs_stat_\", lfs, path, info, err);\n    err = lfs_stat_(lfs, path, info);\n    /* Log after the internal call returns. */\n    lfs_probe_log_state(\"after_lfs_stat_\", lfs, path, info, err);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    /* Log immediately before and after the unlock to capture any effect. */\n    lfs_probe_log_state(\"before_unlock\", lfs, path, info, err);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log_state(\"after_unlock\", lfs, path, info, err);\n    return err;\n}"
}