{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn the provided project LFS_LOCK is defined as ((void)cfg,0) (a no-op that always evaluates to 0). Therefore the statement 'int err = LFS_LOCK(lfs->cfg);' always initializes err to 0, and the subsequent 'if (err) { return err; }' can never be taken. The evaluation produces no side-effects in this build, so removing the assignment and the associated check would not affect program behaviour \u2014 this constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/98.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/98.txt. */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/98.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    /* Preserve original lock call exactly as in the target code. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of the lock and key state (pointers and path). */\n    lfs_log_probe(\"[probe] lfs_stat: after LFS_LOCK -> err=%d, lfs=%p, path=%s, info=%p\",\n                  err, (void*)lfs, (path != NULL) ? path : \"(null)\", (void*)info);\n\n    if (err) {\n        /* Log the early-return path when lock indicates an error. */\n        lfs_log_probe(\"[probe] lfs_stat: early return due to lock error: %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    lfs_log_probe(\"[probe] lfs_stat: calling lfs_stat_(lfs, path, info)\");\n    err = lfs_stat_(lfs, path, info);\n    lfs_log_probe(\"[probe] lfs_stat: lfs_stat_ returned %d\", err);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_log_probe(\"[probe] lfs_stat: after LFS_UNLOCK, returning %d\", err);\n    return err;\n}\n"
}