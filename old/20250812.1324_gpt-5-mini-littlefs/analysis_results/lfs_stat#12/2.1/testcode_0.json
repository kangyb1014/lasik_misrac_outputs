{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nViolation: In the provided configuration LFS_LOCK is defined as ((void)cfg,0), so err is always 0. Therefore the branch 'if (err) { return err; }' is never taken and the 'return err;' path is unreachable. (Note: with LFS_THREADSAFE enabled LFS_LOCK may call a function and make the branch reachable, but as given the code contains unreachable code.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/97.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_stat:\n```c\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append logs to /tmp/logs/97.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/97.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of the lock and the key state information */\n    lfs_probe_log(\"lfs_stat: LFS_LOCK returned %d, lfs=%p, path=\\\"%s\\\", info=%p\",\n                  err, (void*)lfs, (path != NULL) ? path : \"(null)\", (void*)info);\n\n    if (err) {\n        /* Log early-return path so callers can see evidence that this branch was taken */\n        lfs_probe_log(\"lfs_stat: early return due to lock error %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_stat(%p, \\\"%s\\\", %p)\", (void*)lfs, path, (void*)info);\n\n    lfs_probe_log(\"lfs_stat: calling lfs_stat_ with lfs=%p, path=\\\"%s\\\", info=%p\",\n                  (void*)lfs, (path != NULL) ? path : \"(null)\", (void*)info);\n\n    err = lfs_stat_(lfs, path, info);\n\n    lfs_probe_log(\"lfs_stat: lfs_stat_ returned %d\", err);\n\n    LFS_TRACE(\"lfs_stat -> %d\", err);\n\n    lfs_probe_log(\"lfs_stat: calling LFS_UNLOCK for lfs=%p\", (void*)lfs);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"lfs_stat: return %d\", err);\n    return err;\n}\n"
}