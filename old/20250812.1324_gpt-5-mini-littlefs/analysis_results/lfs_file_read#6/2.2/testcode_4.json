{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nLFS_TRACE is defined as an empty macro (#define LFS_TRACE(__VA_ARGS__) ), so the invocation\n\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\", (void*)lfs, (void*)file, buffer, size);\n\nexpands to a null statement (effectively just a lone semicolon). That null statement is executed but has no effect; removing the entire invocation (or the semicolon) would not change program behaviour. Therefore this is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/50.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_read:\n```c\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_read code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe functions: append human-readable runtime evidence to /tmp/logs/50.txt.\n   These functions are intentionally passive (no effect on filesystem state\n   other than logging) and do not alter the logic or return values of\n   lfs_file_read. */\nstatic void lfs_probe_log_enter(void *lfs, void *file, void *buffer, uint32_t size) {\n    FILE *f = fopen(\"/tmp/logs/50.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[PROBE] ENTER lfs_file_read: lfs=%p file=%p buffer=%p size=%\" PRIu32 \"\\n\",\n            lfs, file, buffer, size);\n    /* Indicate the location where LFS_TRACE is invoked in source. This helps\n       a reviewer correlate the probe log with the source code line that\n       contains the (possibly empty) LFS_TRACE call. */\n    fprintf(f, \"[PROBE] LFS_TRACE_INVOCATION_POINT: about to invoke LFS_TRACE (source location hint)\\n\");\n    fclose(f);\n}\n\nstatic void lfs_probe_log_after(void *lfs, void *file, void *buffer, uint32_t size, int32_t res) {\n    FILE *f = fopen(\"/tmp/logs/50.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[PROBE] AFTER lfs_file_read_: lfs=%p file=%p buffer=%p size=%\" PRIu32 \" res=%\" PRId32 \"\\n\",\n            lfs, file, buffer, size, res);\n    /* Indicate the location of the second LFS_TRACE invocation as well. */\n    fprintf(f, \"[PROBE] LFS_TRACE_INVOCATION_POINT: after lfs_file_read_ and before LFS_UNLOCK\\n\");\n    fclose(f);\n}\n\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the early-return scenario so the control-flow evidence is captured. */\n        FILE *f = fopen(\"/tmp/logs/50.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"[PROBE] LFS_LOCK failed: err=%d returning early from lfs_file_read\\n\", err);\n            fclose(f);\n        }\n        return err;\n    }\n\n    /* Probe before the LFS_TRACE call so that the presence of the LFS_TRACE\n       invocation and its parameters are recorded even if LFS_TRACE expands to\n       an empty macro (i.e. produces no runtime output). */\n    lfs_probe_log_enter((void*)lfs, (void*)file, buffer, (uint32_t)size);\n\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    /* Probe after the internal read to capture the returned result and the\n       control path that reaches the second LFS_TRACE invocation. */\n    lfs_probe_log_after((void*)lfs, (void*)file, buffer, (uint32_t)size, (int32_t)res);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}