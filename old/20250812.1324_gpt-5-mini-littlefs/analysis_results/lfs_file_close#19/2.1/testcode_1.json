{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to the constant expression ((void)cfg, 0). In lfs_file_close this makes 'int err = LFS_LOCK(lfs->cfg);' always set err to 0, so the subsequent 'if (err) { return err; }' branch can never be taken. That branch (and any other code guarded solely by the value returned from LFS_LOCK) is therefore unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/153.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close:\n```c\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: logs control flow and key state to /tmp/logs/153.txt. */\nstatic void lfs_file_close_probe(const char *note, lfs_t *lfs, lfs_file_t *file, int err) {\n    FILE *f = fopen(\"/tmp/logs/153.txt\", \"a\");\n    if (f) {\n        /* Log pointers and the current err value. Cast to void* for portability. */\n        fprintf(f, \"%s: lfs=%p file=%p cfg=%p err=%d\\n\",\n                note, (void*)lfs, (void*)file, (void*)(lfs ? lfs->cfg : NULL), err);\n        fclose(f);\n    }\n}\n\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe immediately after acquiring the lock (or evaluating the lock macro). */\n    lfs_file_close_probe(\"after LFS_LOCK\", lfs, file, err);\n\n    if (err) {\n        /* Probe the early-return path so callers can see that this branch was taken. */\n        lfs_file_close_probe(\"early return due to lock error\", lfs, file, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n\n    /* Probe the state just before unlock to record the return value and state. */\n    lfs_file_close_probe(\"before unlock\", lfs, file, err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe after unlock to record that unlock was executed. */\n    lfs_file_close_probe(\"after unlock\", lfs, file, err);\n\n    return err;\n}"
}