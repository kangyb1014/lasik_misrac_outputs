{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 14.2.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop declares a single loop counter pointer 'p' (OK), but the second clause '*p' and the third clause 'p = &(*p)->next' both access the object pointed to by 'p' (i.e. *p). The loop body assigns '*p = (*p)->next', which modifies that same object. MISRA C 2023 Rule 14.2 prohibits the second and third clauses from using objects (other than the loop counter) that are modified in the loop body. Therefore this for loop violates Rule 14.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/156.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close:\n```c\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe function: append formatted logs to /tmp/logs/156.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/156.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    lfs_probe_log(\"ENTER lfs_file_close: lfs=%p, file=%p\", (void*)lfs, (void*)file);\n\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_probe_log(\"After LFS_LOCK: err=%d\", err);\n    if (err) {\n        lfs_probe_log(\"LFS_LOCK failed, returning err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n\n    /* Log relevant pointers/state that are safe to read here */\n    lfs_probe_log(\"lfs->cfg=%p, lfs->mlist=%p, file=%p\", (void*)lfs->cfg, (void*)lfs->mlist, (void*)file);\n\n    /* Preserve original assertion and behaviour */\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_probe_log(\"Calling lfs_file_close_ (about to enter internal close)\");\n    err = lfs_file_close_(lfs, file);\n    lfs_probe_log(\"Returned from lfs_file_close_: err=%d\", err);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"After LFS_UNLOCK: returning err=%d\", err);\n\n    return err;\n}\n"
}