{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nYes. The call is wrapped in LFS_ASSERT which is typically a debug-only macro that expands to nothing (e.g. ((void)0)) in production builds. The function lfs_mlist_isopen() is a pure query with no side-effects (it only traverses and returns a bool). Therefore the assertion call can be removed by the preprocessor/linker without changing program behaviour in release builds, which constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/154.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close:\n```c\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdbool.h>\n\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n\n    /* Probe: evaluate the assertion expression once and log its value\n       to allow reproduction of whether the call is present at runtime.\n       This preserves the original control flow as much as possible;\n       the value is then passed to LFS_ASSERT so the assertion (if\n       enabled) checks the same pre-evaluated value. */\n    int lfs_mlist_isopen_val = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file) ? 1 : 0;\n\n    FILE *probe_f = fopen(\"/tmp/logs/154.txt\", \"a\");\n    if (probe_f) {\n        fprintf(probe_f, \"ENTRY: lfs_file_close lfs=%p file=%p lfs_mlist_isopen=%d\\n\",\n                (void*)lfs, (void*)file, lfs_mlist_isopen_val);\n        fclose(probe_f);\n    }\n\n    /* Original assertion retained; using the pre-evaluated value ensures\n       consistent behavior when assertions are enabled. If LFS_ASSERT is\n       compiled out in release builds, the pre-evaluation above will still\n       run and be recorded in the probe log, providing evidence of the\n       potential dead-code scenario. */\n    LFS_ASSERT(lfs_mlist_isopen_val);\n\n    err = lfs_file_close_(lfs, file);\n\n    probe_f = fopen(\"/tmp/logs/154.txt\", \"a\");\n    if (probe_f) {\n        fprintf(probe_f, \"EXIT: lfs_file_close lfs=%p file=%p err=%d\\n\",\n                (void*)lfs, (void*)file, err);\n        fclose(probe_f);\n    }\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}