{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe only apparent call site for lfs_mlist_isopen is inside an LFS_ASSERT in lfs_file_close. If the LFS_ASSERT macro is compiled out (e.g. in production/release builds), the static function becomes an unreferenced function whose removal would not affect program behaviour. In that build configuration it is dead code and thus violates MISRA C 2023 Rule 2.2. (If LFS_ASSERT is active and the function is actually executed, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/154.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close:\n```c\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe helper: append human-readable debug logs to /tmp/logs/154.txt.\n * Kept minimal and side-effect free (best-effort logging). Does not change\n * original control flow or return values.\n */\nstatic void lfs_debug_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/154.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n/*\n * Probe wrapper around lfs_mlist_isopen. We call the real function and\n * log that it was executed and its result. This wrapper preserves the\n * original semantics: it returns the same integer value as the wrapped\n * function.\n *\n * IMPORTANT: If LFS_ASSERT is compiled out such that its argument is not\n * evaluated, this wrapper will not be called. The absence of the log\n * entry for this wrapper in /tmp/logs/154.txt is exactly the runtime\n * evidence that the function call was compiled out (i.e. the function\n * became unreferenced/dead in that build).\n */\nstatic int lfs_mlist_isopen_probe(void *mlist, struct lfs_mlist *file) {\n    int res = lfs_mlist_isopen(mlist, file);\n    lfs_debug_log(\"probe: lfs_mlist_isopen executed: mlist=%p file=%p res=%d\",\n                  mlist, (void*)file, res);\n    return res;\n}\n\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        lfs_debug_log(\"lfs_file_close: LFS_LOCK failed: err=%d lfs=%p file=%p\",\n                      err, (void*)lfs, (void*)file);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n\n    /*\n     * Log around the assertion so that reviewers can see whether the\n     * assertion argument ran (the probe inside the assertion will log\n     * if it ran). If the assertion macro is compiled out, the probe's\n     * log will be absent; the surrounding logs still appear and provide\n     * evidence of the missing call.\n     */\n    lfs_debug_log(\"lfs_file_close: about to evaluate LFS_ASSERT for file=%p\", (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen_probe(lfs->mlist, (struct lfs_mlist*)file));\n    lfs_debug_log(\"lfs_file_close: finished LFS_ASSERT evaluation for file=%p\", (void*)file);\n\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    lfs_debug_log(\"lfs_file_close: lfs_file_close_ returned err=%d for file=%p\", err, (void*)file);\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_debug_log(\"lfs_file_close: unlocked cfg and returning err=%d for file=%p\", err, (void*)file);\n\n    return err;\n}\n"
}