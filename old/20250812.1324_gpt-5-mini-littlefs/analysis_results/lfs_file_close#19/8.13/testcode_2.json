{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe fragment casts a non\u2011const lfs_file_t * to a plain struct lfs_mlist *: LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file)); This either discards const qualification (if lfs_file_t or the target parameter is const-qualified) or fails to use a const-qualified pointer where possible. If lfs_mlist_isopen should only inspect the object, its parameter should be const (const struct lfs_mlist *), and this call should pass (const struct lfs_mlist *)file (or better, change the function prototype). As written the code violates MISRA C 2023 Rule 8.13 by not using a const-qualified pointer where appropriate.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/155.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_close as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_close:\n```c\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_close code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: appends formatted messages to /tmp/logs/155.txt */\nstatic void probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/155.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    probe_log(\"ENTER lfs_file_close: lfs=%p, file=%p\", (void*)lfs, (void*)file);\n\n    int err = LFS_LOCK(lfs->cfg);\n    probe_log(\"LFS_LOCK returned: %d\", err);\n    if (err) {\n        probe_log(\"LFS_LOCK failed, returning: %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n\n    /* Capture and log result of lfs_mlist_isopen to provide evidence for\n       the cast and the assertion check that is relevant to MISRA Rule 8.13. */\n    int isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    probe_log(\"lfs_mlist_isopen called with mlist=%p, file=%p -> %d\",\n              (void*)lfs->mlist, (void*)file, isopen);\n\n    LFS_ASSERT(isopen);\n    probe_log(\"LFS_ASSERT passed for file=%p (isopen=%d)\", (void*)file, isopen);\n\n    err = lfs_file_close_(lfs, file);\n    probe_log(\"lfs_file_close_ returned: %d\", err);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    probe_log(\"About to call LFS_UNLOCK on cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"EXIT lfs_file_close returning: %d\", err);\n\n    return err;\n}\n"
}