{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of lfs_file_close:\n```c\nint lfs_file_close(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_close(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_close_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nLFS_UNLOCK(lfs->cfg);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Likely not violated: lfs->cfg is passed to LFS_UNLOCK which is expected to change the lock state stored in the configuration (i.e. mutate data), so the parameter should be non-const and no const-qualification opportunity is being missed. (If, contrary to that expectation, LFS_UNLOCK\u2019s implementation does not modify the pointed-to object and its prototype currently takes a non-const pointer, then this would violate Rule 8.13 \u2014 the parameter should be const-qualified in that case.)"
}