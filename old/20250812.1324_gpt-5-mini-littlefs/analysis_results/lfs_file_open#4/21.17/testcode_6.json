{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nlfs_file_opencfg_ assigns file->cache.buffer = file->cfg->buffer (a caller-supplied buffer) without checking its length, then calls lfs_cache_zero(lfs, &file->cache). If lfs_cache_zero uses a string.h function such as memset(file->cache.buffer, 0, lfs->cfg->cache_size) (a common implementation), this will write lfs->cfg->cache_size bytes into the caller buffer. If the caller-supplied buffer is smaller than lfs->cfg->cache_size, the memset will access beyond the buffer bounds (out-of-bounds write). Because the definition of lfs_cache_zero is not shown, this is a plausible violation scenario of MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/39.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_open:\n```c\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_open code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper to log control flow and key pointers/state to a file for repro. */\nstatic void lfs_file_open_log(const char *stage, lfs_t *lfs, lfs_file_t *file, const char *path, int flags, int err) {\n    FILE *fp = fopen(\"/tmp/logs/39.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    /* Log the stage, pointers, path, flags and returned error. Cast pointers to void* for portability. */\n    fprintf(fp, \"[lfs_file_open] stage=%s lfs=%p file=%p path=\\\"%s\\\" flags=0x%X err=%d cfg=%p\\n\",\n            stage,\n            (void*)lfs,\n            (void*)file,\n            (path != NULL) ? path : \"(null)\",\n            (unsigned)flags,\n            err,\n            (void*)(lfs ? lfs->cfg : NULL));\n    fclose(fp);\n}\n\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log after acquiring the lock (or failing to). This captures the cfg pointer used for locking. */\n    lfs_file_open_log(\"after_lock\", lfs, file, path, flags, err);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n\n    /* Log just before the open implementation is invoked. This helps capture the input state. */\n    lfs_file_open_log(\"before_lfs_file_open_\", lfs, file, path, flags, 0);\n\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    /* Log after the open implementation returns. This captures the error code and any pointer changes\n       that the implementation may have performed (addresses are recorded above). */\n    lfs_file_open_log(\"after_lfs_file_open_\", lfs, file, path, flags, err);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}