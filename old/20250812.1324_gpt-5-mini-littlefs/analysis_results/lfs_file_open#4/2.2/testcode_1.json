{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_UNLOCK(lfs->cfg) macro expands to ((void)lfs->cfg); which evaluates the expression and discards it. It has no side effects for the given lfs->cfg (plain member access) and therefore its execution does not affect program behaviour; removing the statement would not change behaviour. Thus this statement is dead code in the current configuration and violates MISRA C 2023 Rule 2.2. (If LFS_UNLOCK were defined to perform a real unlock in another configuration, it would not be dead, but in the provided definitions it is.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/34.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_open:\n```c\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Probe helper: logs control flow and a hex-dump of lfs->cfg to /tmp/logs/34.txt\n   Keeps the original logic intact; only appends logging calls. */\nstatic void lfs_file_open_probe(lfs_t *lfs, lfs_file_t *file, const char *path,\n        int flags, int err, const char *stage) {\n    FILE *f = fopen(\"/tmp/logs/34.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"[lfs_file_open] stage=%s\\n\", stage);\n    fprintf(f, \"  lfs=%p, file=%p, path=\\\"%s\\\", flags=0x%08x, err=%d\\n\",\n            (void*)lfs, (void*)file, (path? path : \"(null)\"), (unsigned)flags, err);\n\n    /* Dump the bytes of lfs->cfg (up to a reasonable limit) so callers can\n       observe whether LFS_UNLOCK has any observable effect on its contents. */\n    {\n        const unsigned char *p = (const unsigned char*)&lfs->cfg;\n        size_t cfg_size = sizeof lfs->cfg;\n        size_t dump = cfg_size;\n        if (dump > 64) dump = 64; /* limit output */\n\n        fprintf(f, \"  cfg_addr=%p, cfg_size=%zu, cfg_bytes=\", (const void*)&lfs->cfg, cfg_size);\n        for (size_t i = 0; i < dump; i++) {\n            fprintf(f, \"%02x\", (unsigned)p[i]);\n        }\n        if (cfg_size > dump) fprintf(f, \"..(truncated)\");\n        fprintf(f, \"\\n\");\n    }\n\n    fclose(f);\n}\n\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log that lock failed and returning early */\n        lfs_file_open_probe(lfs, file, path, flags, err, \"after_lock_error\");\n        return err;\n    }\n\n    /* Log state after successfully acquiring lock */\n    lfs_file_open_probe(lfs, file, path, flags, 0, \"after_lock\");\n\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n\n    /* Log state immediately before the unlock (this is the point of interest\n       for the reported dead-code: the subsequent LFS_UNLOCK may be a no-op). */\n    lfs_file_open_probe(lfs, file, path, flags, err, \"before_unlock\");\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log state immediately after the unlock so observers can compare the\n       cfg bytes and determine whether LFS_UNLOCK had any effect. */\n    lfs_file_open_probe(lfs, file, path, flags, err, \"after_unlock\");\n\n    return err;\n}"
}