{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to lfs_mlist_isopen is only used inside LFS_ASSERT which is defined as assert(test). The function lfs_mlist_isopen has no observable side-effects (it only scans and returns a bool). Therefore the operation is effectively only for debugging: removing the assert (or compiling with NDEBUG so assert expands to ((void)0)) would not change program behaviour in normal operation. This constitutes dead code per MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/34.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_open:\n```c\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdbool.h>\n#include <assert.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Minimal stubs to allow compilation of this translation unit.\n   In the real project these are provided elsewhere. */\n\ntypedef struct lfs { void *cfg; void *mlist; } lfs_t;\ntypedef struct lfs_file_t { void *p; } lfs_file_t;\n\n/* Original helper functions (stubbed for test build) */\nint LFS_LOCK(void *cfg) { (void)cfg; return 0; }\nvoid LFS_UNLOCK(void *cfg) { (void)cfg; }\nvoid LFS_TRACE(const char *fmt, ...) {\n    va_list ap; va_start(ap, fmt);\n    vfprintf(stderr, fmt, ap);\n    fprintf(stderr, \"\\n\");\n    va_end(ap);\n}\n\n/* The real implementation scans an internal list and returns whether the file is open.\n   For testing we provide a deterministic stub. */\nbool lfs_mlist_isopen(void *mlist, void *file) {\n    (void)mlist; (void)file;\n    /* stub: pretend file is not open */\n    return false;\n}\n\n/* The real open implementation used inside lfs_file_open. Stub returns success. */\nint lfs_file_open_(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    (void)lfs; (void)file; (void)path; (void)flags;\n    return 0;\n}\n\n/* Probe function: calls the original lfs_mlist_isopen, and logs the call/result\n   to /tmp/logs/34.txt. Importantly, this probe is placed inside the assert below,\n   so it will only be executed when assertions are enabled (i.e. when assert()\n   evaluates its argument). This reproduces the violation scenario where the\n   check is only present in debugging builds. */\nstatic bool lfs_probe_mlist_isopen(void *mlist, void *file) {\n    bool res = lfs_mlist_isopen(mlist, file);\n\n    FILE *f = fopen(\"/tmp/logs/34.txt\", \"a\");\n    if (f) {\n        time_t t = time(NULL);\n        struct tm tm;\n        localtime_r(&t, &tm);\n        char buf[64];\n        strftime(buf, sizeof(buf), \"%Y-%m-%d %H:%M:%S\", &tm);\n        fprintf(f, \"%s: lfs_probe_mlist_isopen(mlist=%p, file=%p) -> %d\\n\",\n                buf, mlist, file, (int)res);\n        fclose(f);\n    }\n\n    return res;\n}\n\n/* Modified lfs_file_open: original logic preserved as much as possible.\n   The only change is that the call to lfs_mlist_isopen inside the assertion\n   is replaced by lfs_probe_mlist_isopen so the probe can log the evaluation\n   when assertions are enabled. If assertions are disabled (NDEBUG), the probe\n   is not called, showing that the check is only present for debugging. */\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n\n    /* Use the probe inside the assertion so it mirrors the original behavior:\n       when assertions are enabled, the probe (and underlying lfs_mlist_isopen)\n       runs and logs; when assertions are disabled, this call is not present. */\n    assert(!lfs_probe_mlist_isopen(lfs->mlist, (void*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}