{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_mlist_isopen does not modify the list or nodes, so its pointer parameters should be const-qualified. The parameters are declared as struct lfs_mlist *head and struct lfs_mlist *node but only read the pointers; they could be declared const struct lfs_mlist *head and const struct lfs_mlist *node (and the loop rewritten as for (const struct lfs_mlist *p = head; p; p = p->next) ...) to avoid discarding const. As written the code violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/35.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_open:\n```c\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_open code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe function to log control flow and state for lfs_file_open\n * Writes human-readable logs to /tmp/logs/35.txt. This function\n * is read-only with respect to the LFS state and preserves original\n * logic of lfs_file_open. */\nstatic void lfs_file_open_probe(const void *lfs_ptr,\n                                const void *mlist_ptr,\n                                const void *node_ptr,\n                                const void *file_ptr,\n                                const char *path,\n                                int flags) {\n    FILE *f = fopen(\"/tmp/logs/35.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[probe] enter lfs_file_open:\\n\");\n    fprintf(f, \"  lfs=%p\\n\", lfs_ptr);\n    fprintf(f, \"  mlist=%p\\n\", mlist_ptr);\n    fprintf(f, \"  node (file as mlist node)=%p\\n\", node_ptr);\n    fprintf(f, \"  file=%p\\n\", file_ptr);\n    fprintf(f, \"  path=\\\"%s\\\"\\n\", path ? path : \"(null)\");\n    fprintf(f, \"  flags=0x%x\\n\", (unsigned)flags);\n    fprintf(f, \"  note: LFS_ASSERT will check: !lfs_mlist_isopen(mlist, node)\\n\\n\");\n    fclose(f);\n}\n\nint lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log lock failure */\n        FILE *f = fopen(\"/tmp/logs/35.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"[lfs_file_open] LFS_LOCK failed: err=%d, lfs=%p\\n\", err, (void*)lfs);\n            fclose(f);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_open(%p, %p, \\\"%s\\\", %x)\",\n            (void*)lfs, (void*)file, path, (unsigned)flags);\n\n    /* Probe: record parameters and the pointers passed to lfs_mlist_isopen.\n     * We pass raw void* pointers to avoid introducing new type dependencies. */\n    lfs_file_open_probe((const void*)lfs,\n                        (const void*)lfs->mlist,\n                        (const void*)file, /* node (file as list node) */\n                        (const void*)file,\n                        path,\n                        flags);\n\n    /* Preserve original assert check. */\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_open_(lfs, file, path, flags);\n\n    /* Log result of the underlying open operation. */\n    {\n        FILE *f = fopen(\"/tmp/logs/35.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"[lfs_file_open] lfs_file_open_ returned: err=%d, lfs=%p, file=%p, path=\\\"%s\\\"\\n\",\n                    err, (void*)lfs, (void*)file, path ? path : \"(null)\");\n            fclose(f);\n        }\n    }\n\n    LFS_TRACE(\"lfs_file_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final return log after unlock to capture end state. */\n    {\n        FILE *f = fopen(\"/tmp/logs/35.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"[lfs_file_open] return err=%d\\n\\n\", err);\n            fclose(f);\n        }\n    }\n\n    return err;\n}\n"
}