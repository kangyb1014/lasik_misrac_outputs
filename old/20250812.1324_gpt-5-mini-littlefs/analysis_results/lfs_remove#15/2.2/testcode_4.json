{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIf LFS_ASSERT is a macro that evaluates its argument at runtime but does not affect program state (for example defined as ((void)(expr)) or similar), then the statement LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) < 0x1ff || orphans <= 0); performs an evaluation with no side-effects. That evaluation is executed but removing the call would not change program behaviour, so it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/122.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_remove:\n```c\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_remove code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/*\n * Probe logging helpers. These are intentionally small wrappers that\n * do not change the logic of lfs_remove; they only append observations\n * to /tmp/logs/122.txt to help reproduce/control-flow and state\n * information related to the reported assertion evaluation scenario.\n *\n * NOTE: These helpers avoid dereferencing lfs internals so they will\n * compile even if the full structure of lfs_t is not visible here.\n */\nstatic void lfs_probe_ensure_dir(void) {\n    /* attempt to create directory; ignore error if it already exists */\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\nstatic void lfs_probe_log(const char *stage, const void *lfs_ptr, const char *path, int err) {\n    lfs_probe_ensure_dir();\n\n    FILE *f = fopen(\"/tmp/logs/122.txt\", \"a\");\n    if (f == NULL) {\n        /* best-effort logging only; do not change behaviour if logging fails */\n        return;\n    }\n\n    /* Write a useful, minimal record of the control path and state: */\n    fprintf(f, \"[lfs_remove] stage=%s lfs=%p path=\\\"%s\\\" err=%d\\n\",\n            stage, lfs_ptr, (path ? path : \"(null)\"), err);\n    fflush(f);\n    fclose(f);\n}\n\n/*\n * Modified lfs_remove: preserves original control flow and behaviour,\n * but adds probe logging before and after the call to lfs_remove_.\n */\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the failure to acquire the lock; does not alter behaviour */\n        lfs_probe_log(\"LOCK_FAILED\", (const void*)lfs, path, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    /* Log entry state just before delegating to lfs_remove_.\n     * This can help show the values present when any runtime-evaluated\n     * assertions inside lfs_remove_ are executed. */\n    lfs_probe_log(\"ENTRY\", (const void*)lfs, path, 0);\n\n    err = lfs_remove_(lfs, path);\n\n    /* Log result and exit state immediately after lfs_remove_. */\n    lfs_probe_log(\"EXIT\", (const void*)lfs, path, err);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}