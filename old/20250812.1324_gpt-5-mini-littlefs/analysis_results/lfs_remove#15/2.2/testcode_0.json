{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg,0). The left operand (void)cfg is evaluated each time LFS_LOCK is used (e.g. int err = LFS_LOCK(lfs->cfg); in lfs_remove) but has no side effects and can be removed without changing program behavior. This constitutes executed dead code (a no-op operation), violating MISRA C 2023 Rule 2.2. (Similarly, LFS_UNLOCK(cfg) defined as ((void)cfg) is an executed no-op and also triggers the same issue.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/122.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_remove:\n```c\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_remove code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe helper to append logs for control flow/state to /tmp/logs/122.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/122.txt\", \"a\");\n    if (f == NULL) {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n    (void)fputc('\\n', f);\n    (void)fclose(f);\n}\n\nint lfs_remove(lfs_t *lfs, const char *path) {\n    /* Log entry and provided arguments */\n    lfs_probe_log(\"ENTER lfs_remove: lfs=%p, path=\\\"%s\\\"\", (void*)lfs, (path != NULL) ? path : \"(null)\");\n\n    /* Preserve original logic: call LFS_LOCK as before. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Record that LFS_LOCK was invoked and capture the evaluated cfg pointer\n       for evidence that the cfg operand is evaluated (even if it is a no-op).\n       Note: this performs an additional read of lfs->cfg for logging purposes.\n       In typical usage lfs->cfg is a plain pointer read and has no side effects. */\n    lfs_probe_log(\"AFTER LFS_LOCK: returned=%d, evaluated lfs->cfg=%p\", err, (void*)(lfs ? lfs->cfg : NULL));\n\n    if (err) {\n        lfs_probe_log(\"lfs_remove: early return due to lock error: %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n\n    /* Log before unlocking and then unlock (preserve original call). */\n    lfs_probe_log(\"BEFORE LFS_UNLOCK: about to call LFS_UNLOCK(lfs->cfg), current err=%d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"AFTER LFS_UNLOCK: completed LFS_UNLOCK(lfs->cfg)\");\n\n    lfs_probe_log(\"EXIT lfs_remove: returning %d\", err);\n    return err;\n}\n"
}