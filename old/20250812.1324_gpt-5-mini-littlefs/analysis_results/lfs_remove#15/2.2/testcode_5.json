{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call to LFS_LOCK(lfs->cfg) and the subsequent if (err) check are dead in this build because LFS_LOCK is defined as ((void)cfg,0) which always returns 0. The LFS_TRACE macros expand to nothing and LFS_UNLOCK(cfg) is defined as ((void)cfg) (a pure no-op). These executed operations (assignment from LFS_LOCK, the always-false branch, the trace calls and the unlock evaluation) have no effect on program behaviour in the provided configuration, so they constitute dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/122.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_remove:\n```c\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_remove code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append human-readable trace to /tmp/logs/122.txt. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/122.txt\", \"a\");\n    if (!f) {\n        return; /* best-effort logging only; do not change program flow */\n    }\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint lfs_remove(lfs_t *lfs, const char *path) {\n    /* Log entry and input state */\n    lfs_probe_log(\"ENTRY lfs_remove: lfs=%p path=\\\"%s\\\"\", (void*)lfs, path ? path : \"(null)\");\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log lock result and cfg pointer to show whether LFS_LOCK is a no-op */\n    lfs_probe_log(\"AFTER LFS_LOCK: err=%d cfg=%p\", err, (void*)lfs->cfg);\n\n    if (err) {\n        lfs_probe_log(\"LOCK failed: returning err=%d\", err);\n        return err;\n    }\n\n    /* Preserve original trace point, and also record it to file. */\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n    lfs_probe_log(\"TRACE point: about to call lfs_remove_ with path=\\\"%s\\\"\", path ? path : \"(null)\");\n\n    err = lfs_remove_(lfs, path);\n\n    /* Log return from internal remove */\n    lfs_probe_log(\"AFTER lfs_remove_: err=%d\", err);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    lfs_probe_log(\"TRACE point: before LFS_UNLOCK, cfg=%p\", (void*)lfs->cfg);\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"AFTER LFS_UNLOCK\");\n\n    lfs_probe_log(\"EXIT lfs_remove: returning err=%d\", err);\n    return err;\n}\n"
}