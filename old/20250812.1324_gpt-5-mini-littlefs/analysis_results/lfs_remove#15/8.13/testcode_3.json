{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes &lfs->gstate to a function that appears to only inspect the state. If the function lfs_gstate_hasorphans is declared to take a non-const pointer (e.g. lfs_gstate_hasorphans(lfs_gstate_t *g)), but it does not modify the pointed-to object, then the pointer parameter should be const-qualified (const lfs_gstate_t *g). In that case the current use violates MISRA C 2023 Rule 8.13. Change the function prototype to take a const pointer if no mutation is required.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/123.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_remove as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_remove:\n```c\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_remove code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe helpers: append useful logs to /tmp/logs/123.txt\n   These functions are designed to be non-intrusive and preserve\n   the original logic of lfs_remove. They only inspect pointers\n   and simple values and do not modify any filesystem state. */\nstatic void lfs_probe_append(const char *msg) {\n    FILE *f = fopen(\"/tmp/logs/123.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n}\n\nstatic void lfs_probe_enter(void *lfs_ptr, const char *path, void *cfg_ptr, void *gstate_addr) {\n    FILE *f = fopen(\"/tmp/logs/123.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"ENTER lfs_remove: lfs=%p, path=\\\"%s\\\", cfg=%p, &gstate=%p\\n\",\n            lfs_ptr, path ? path : \"(null)\", cfg_ptr, gstate_addr);\n    fclose(f);\n}\n\nstatic void lfs_probe_before_call(void *lfs_ptr, const char *path, void *gstate_addr) {\n    FILE *f = fopen(\"/tmp/logs/123.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"BEFORE lfs_remove_: will call lfs_remove_(lfs=%p, path=\\\"%s\\\"); gstate addr=%p\\n\",\n            lfs_ptr, path ? path : \"(null)\", gstate_addr);\n    fclose(f);\n}\n\nstatic void lfs_probe_after_call(void *lfs_ptr, const char *path, int err, void *gstate_addr) {\n    FILE *f = fopen(\"/tmp/logs/123.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"AFTER  lfs_remove_: lfs=%p, path=\\\"%s\\\", err=%d, gstate addr=%p\\n\",\n            lfs_ptr, path ? path : \"(null)\", err, gstate_addr);\n    fclose(f);\n}\n\n/* Modified lfs_remove with probes inserted. The original logic is preserved. */\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Original trace preserved */\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    /* Probe: log entering and state info, including address of gstate\n       This helps reproduce the scenario where &lfs->gstate is passed\n       to another function (e.g. lfs_gstate_hasorphans). */\n    lfs_probe_enter((void*)lfs, path, (void*)lfs->cfg, (void*)&lfs->gstate);\n\n    /* Probe just before delegating to the internal implementation */\n    lfs_probe_before_call((void*)lfs, path, (void*)&lfs->gstate);\n\n    err = lfs_remove_(lfs, path);\n\n    /* Probe after call: record return value and current gstate address\n       (to show it was not intentionally mutated by callers that only inspect it). */\n    lfs_probe_after_call((void*)lfs, path, err, (void*)&lfs->gstate);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}