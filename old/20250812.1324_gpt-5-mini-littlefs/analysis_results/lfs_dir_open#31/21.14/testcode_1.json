{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nThe expression `memcmp(suffix, \"..\", 2) == 0` compares a path substring against the null-terminated string literal \"..\". MISRA C 2023 Rule 21.14 forbids using memcmp to compare null-terminated strings (even when a length is supplied). This line therefore violates Rule 21.14.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/254.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open:\n```c\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe logger: append diagnostic information to /tmp/logs/254.txt\n * This function is intentionally lightweight to avoid interfering with\n * original logic. It never changes program state beyond writing logs. */\nstatic void lfs_dir_probe_log(const char *event, void *lfs_ptr, void *dir_ptr, const char *path, int err) {\n    FILE *f = fopen(\"/tmp/logs/254.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Defensive printing of possibly-NULL path */\n    if (path) {\n        fprintf(f, \"%s: lfs=%p dir=%p path=\\\"%s\\\" err=%d\\n\", event, lfs_ptr, dir_ptr, path, err);\n    } else {\n        fprintf(f, \"%s: lfs=%p dir=%p path=(null) err=%d\\n\", event, lfs_ptr, dir_ptr, err);\n    }\n    fclose(f);\n}\n\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log lock failure and return as original logic does */\n        lfs_dir_probe_log(\"lfs_dir_open: lock_failed\", (void*)lfs, (void*)dir, path, err);\n        return err;\n    }\n\n    /* Log that we have acquired the lock and are entering the function */\n    lfs_dir_probe_log(\"lfs_dir_open: enter_locked\", (void*)lfs, (void*)dir, path, -1);\n\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    /* Log just before calling the internal implementation */\n    lfs_dir_probe_log(\"lfs_dir_open: before_lfs_dir_open_\", (void*)lfs, (void*)dir, path, -1);\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    /* Capture the result of the internal call for reproducibility */\n    lfs_dir_probe_log(\"lfs_dir_open: after_lfs_dir_open_\", (void*)lfs, (void*)dir, path, err);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log that we've unlocked and are about to return */\n    lfs_dir_probe_log(\"lfs_dir_open: exit_unlocked\", (void*)lfs, (void*)dir, path, err);\n\n    return err;\n}\n"
}