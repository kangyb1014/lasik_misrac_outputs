{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro is defined as ((void)cfg,0), so LFS_LOCK(lfs->cfg) always evaluates to 0 and has no side effects. Therefore the statement int err = LFS_LOCK(lfs->cfg); only assigns a constant 0 and the subsequent if (err) { return err; } can never be taken; removing the LFS_LOCK call/assignment (or replacing it with err = 0) would not change program behaviour in this build, so this operation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/250.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open:\n```c\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logging helper: appends diagnostic lines to /tmp/logs/250.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/250.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Simple timestamp */\n    time_t t = time(NULL);\n    struct tm *tm = localtime(&t);\n    if (tm) {\n        fprintf(f, \"%04d-%02d-%02d %02d:%02d:%02d \",\n                tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n                tm->tm_hour, tm->tm_min, tm->tm_sec);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    lfs_probe_log(\"ENTER lfs_dir_open: lfs=%p, dir=%p, path=\\\"%s\\\"\",\n                  (void*)lfs, (void*)dir, path ? path : \"(null)\");\n\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_probe_log(\"After LFS_LOCK: err=%d\", err);\n\n    if (err) {\n        lfs_probe_log(\"LFS_LOCK returned non-zero, returning %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    lfs_probe_log(\"Calling lfs_dir_open_ (lfs=%p, dir=%p, path=\\\"%s\\\")\",\n                  (void*)lfs, (void*)dir, path ? path : \"(null)\");\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    lfs_probe_log(\"lfs_dir_open_ returned %d\", err);\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"Exiting lfs_dir_open with %d\", err);\n    return err;\n}\n"
}