{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_ASSERT macro expands to assert(test). When the project is built with NDEBUG defined, the standard assert macro expands to a no-op ((void)0). Calls such as LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir)); in lfs_dir_open therefore compile to code that has no effect; removing those calls would not change program behaviour (lfs_mlist_isopen has no side effects). This constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/250.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open:\n```c\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <stdint.h>\n\n/* Probe logging helper - writes state to /tmp/logs/250.txt. */\nstatic void lfs_dir_open_probe_log(const void *lfs, const void *dir, const char *path, int isopen, int ndebug, int lock_err) {\n    FILE *f = fopen(\"/tmp/logs/250.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] lfs_dir_open probe: lfs=%p dir=%p path=\\\"%s\\\" isopen=%d NDEBUG=%d lock_err=%d\\n\",\n            (long)t, lfs, dir, path ? path : \"(null)\", isopen, ndebug, lock_err);\n    fclose(f);\n}\n\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n\n    /*\n     * Capture the state of lfs_mlist_isopen for logging. We evaluate it into\n     * a local variable so we can both log the value and still use the\n     * (possibly enabled) assertion in the same way as the original code.\n     * Note: calling lfs_mlist_isopen here reproduces the check performed by\n     * the original LFS_ASSERT when assertions are enabled; when assertions\n     * are disabled this call will execute where previously there would be\n     * no call. The function is expected to have no side effects.\n     */\n    int isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir);\n\n    int ndebug = 0;\n#ifdef NDEBUG\n    ndebug = 1;\n#endif\n\n    /* Log the probe data so other agents can reproduce the scenario. */\n    lfs_dir_open_probe_log((void*)lfs, (void*)dir, path, isopen, ndebug, err);\n\n    LFS_ASSERT(!isopen);\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}