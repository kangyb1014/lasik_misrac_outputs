{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg, 0) and is invoked in lfs_dir_open as 'int err = LFS_LOCK(lfs->cfg); if (err) { return err; }'. The (void)cfg cast has no side\u2011effects and the comma operator yields the constant 0, so the call always produces 0 and the error branch is never taken. Removing the call (and the subsequent check) would not change program behaviour, therefore the operation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/250.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_open:\n```c\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/250.txt. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/250.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Modified lfs_dir_open with lightweight probes that do not change logic. */\nint lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {\n    lfs_probe_log(\"ENTER lfs_dir_open: lfs=%p dir=%p path=\\\"%s\\\"\",\n                  (void*)lfs, (void*)dir, path ? path : \"(null)\");\n\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_probe_log(\"LFS_LOCK(cfg=%p) -> %d\", (void*)lfs->cfg, err);\n    if (err) {\n        lfs_probe_log(\"lfs_dir_open: taking error branch after LFS_LOCK, returning %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_open(%p, %p, \\\"%s\\\")\", (void*)lfs, (void*)dir, path);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));\n\n    lfs_probe_log(\"Calling lfs_dir_open_: lfs=%p dir=%p path=\\\"%s\\\" mlist=%p\",\n                  (void*)lfs, (void*)dir, path ? path : \"(null)\", (void*)lfs->mlist);\n\n    err = lfs_dir_open_(lfs, dir, path);\n\n    lfs_probe_log(\"lfs_dir_open_ returned %d\", err);\n    LFS_TRACE(\"lfs_dir_open -> %d\", err);\n\n    lfs_probe_log(\"Calling LFS_UNLOCK(cfg=%p)\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"Returned from LFS_UNLOCK(cfg=%p)\", (void*)lfs->cfg);\n\n    lfs_probe_log(\"EXIT lfs_dir_open: returning %d\", err);\n    return err;\n}\n"
}