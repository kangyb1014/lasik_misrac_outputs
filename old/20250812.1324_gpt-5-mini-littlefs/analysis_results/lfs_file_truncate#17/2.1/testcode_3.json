{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe branch if (err) { return err; } is unreachable because LFS_LOCK(cfg) is defined as ((void)cfg, 0), so err is always 0 and the condition can never be true. The return inside the if can never be executed, violating MISRA C 2023 Rule 2.1 (no unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/137.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate:\n```c\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe logger: append human-readable logs to /tmp/logs/137.txt */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/137.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: record result of lock and pointers/sizes to reproduce scenario */\n    lfs_log_probe(\"lfs_file_truncate: entered, lfs=%p, file=%p, cfg=%p, size=%\" PRIu32 \", LFS_LOCK returned=%d\",\n            (void*)lfs, (void*)file, (void*)lfs->cfg, size, err);\n\n    if (err) {\n        /* Probe: record the fact that the error branch was taken */\n        lfs_log_probe(\"lfs_file_truncate: early return taken due to err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    /* Probe: record return value from the internal truncate implementation */\n    lfs_log_probe(\"lfs_file_truncate: lfs_file_truncate_ returned=%d\", err);\n\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe: record that unlock was called and final return value */\n    lfs_log_probe(\"lfs_file_truncate: LFS_UNLOCK called for cfg=%p, returning=%d\",\n            (void*)lfs->cfg, err);\n\n    return err;\n}\n"
}