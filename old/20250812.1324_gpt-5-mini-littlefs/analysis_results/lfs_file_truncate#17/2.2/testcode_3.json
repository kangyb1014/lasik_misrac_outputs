{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to the no-op expression ((void)cfg). In lfs_file_truncate the statement LFS_UNLOCK(lfs->cfg); is executed but has no effect; removing that statement (or the macro definition) would not change program behaviour in the current project configuration, so this is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/138.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate:\n```c\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe helper: append a single-line log to /tmp/logs/138.txt. */\nstatic void lfs_log_probe(const char *label, lfs_t *lfs, lfs_file_t *file, lfs_off_t size, int err)\n{\n    FILE *fp = fopen(\"/tmp/logs/138.txt\", \"a\");\n    if (!fp) {\n        return;\n    }\n    /* Log control path and key state: pointers, size and error code. */\n    fprintf(fp, \"%s: lfs=%p file=%p size=%\" PRIu32 \" err=%d cfg=%p\\n\",\n            label, (void*)lfs, (void*)file, (uint32_t)size, err,\n            /* lfs may be NULL in theory; avoid dereferencing then. */\n            (void*)(lfs ? lfs->cfg : NULL));\n    fclose(fp);\n}\n\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_log_probe(\"AFTER_LFS_LOCK\", lfs, file, size, err);\n    if (err) {\n        /* Log the early return cause and preserve original behavior. */\n        lfs_log_probe(\"RETURN_ON_LOCK_ERR\", lfs, file, size, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n    lfs_log_probe(\"BEFORE_LFS_UNLOCK\", lfs, file, size, err);\n    LFS_UNLOCK(lfs->cfg);\n    /* Record that the unlock call was executed along with cfg pointer. */\n    lfs_log_probe(\"AFTER_LFS_UNLOCK\", lfs, file, size, err);\n    return err;\n}\n"
}