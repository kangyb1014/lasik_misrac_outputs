{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe helper lfs_mlist_isopen is declared as static bool lfs_mlist_isopen(struct lfs_mlist *head, struct lfs_mlist *node) but its implementation only reads the list (it does not modify *head or *node). According to MISRA C 2023 Rule 8.13, these parameters should be const-qualified (const struct lfs_mlist *head, const struct lfs_mlist *node). The call LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file)); therefore uses a non-const pointer where a const-qualified pointer would be appropriate, and the explicit cast hides that missing const qualification.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/139.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate:\n```c\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n/* Probe logger: appends human-readable diagnostic lines to /tmp/logs/139.txt. */\nstatic void lfs_probe_vlog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/139.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log early return from lock failure */\n        lfs_probe_vlog(\"lfs_file_truncate: LFS_LOCK failed, err=%d, lfs=%p file=%p size=%llu\",\n                err, (void*)lfs, (void*)file, (unsigned long long)size);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n\n    /* Probe the call that is implicated in the const-qualification issue.\n       We call lfs_mlist_isopen for logging purposes (it only reads state in\n       the reported scenario), then still perform the original LFS_ASSERT\n       call exactly as in the original code to preserve behavior. */\n    if (lfs != (lfs_t*)0 && lfs->mlist != (struct lfs_mlist*)0) {\n        bool probe_isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n        lfs_probe_vlog(\"Probe: lfs_mlist_isopen(lfs->mlist=%p, (struct lfs_mlist*)file=%p) -> %d\",\n                (void*)lfs->mlist, (void*)file, probe_isopen ? 1 : 0);\n    } else {\n        lfs_probe_vlog(\"Probe: lfs or lfs->mlist is NULL (lfs=%p, lfs->mlist=%p)\",\n                (void*)lfs, (void*)(lfs ? lfs->mlist : NULL));\n    }\n\n    /* Preserve original assertion (including the cast) so behavior is unchanged. */\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    lfs_probe_vlog(\"lfs_file_truncate: lfs=%p file=%p size=%llu -> err=%d\",\n            (void*)lfs, (void*)file, (unsigned long long)size, err);\n\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}