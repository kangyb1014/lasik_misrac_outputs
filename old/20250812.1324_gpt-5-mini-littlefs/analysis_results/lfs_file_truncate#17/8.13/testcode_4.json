{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes the address of a temporary byte literal &(uint8_t){0} to lfs_file_write_. If the lfs_file_write_ prototype accepts a non-const pointer (e.g. uint8_t * or void *buffer), that prototype allows modification of the pointed data even though the caller (and the usage) intends read-only data. The parameter should be declared as a pointer to const (e.g. const void * or const uint8_t *) to reflect that the buffer is not modified. In that case Rule 8.13 is violated by the non-const parameter declaration (not by the call itself).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/139.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate:\n```c\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper: appends messages to /tmp/logs/139.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/139.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log lock result and entry state */\n    lfs_probe_log(\"ENTER lfs_file_truncate: lfs=%p file=%p size=%\" PRIu32 \" lock_err=%d\",\n            (void*)lfs, (void*)file, size, err);\n    if (err) {\n        lfs_probe_log(\"lfs_file_truncate: early return due to lock error=%d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n\n    /* Probe the is-open check so callers can see preconditions that may\n       lead to calls that pass temporary buffers (e.g. &(uint8_t){0}). */\n    int isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    lfs_probe_log(\"lfs_file_truncate: lfs_mlist_isopen=%d\", isopen);\n\n    LFS_ASSERT(isopen);\n\n    lfs_probe_log(\"lfs_file_truncate: invoking lfs_file_truncate_ with lfs=%p file=%p size=%\" PRIu32,\n            (void*)lfs, (void*)file, size);\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    lfs_probe_log(\"EXIT lfs_file_truncate: return=%d lfs=%p file=%p size=%\" PRIu32,\n            err, (void*)lfs, (void*)file, size);\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}