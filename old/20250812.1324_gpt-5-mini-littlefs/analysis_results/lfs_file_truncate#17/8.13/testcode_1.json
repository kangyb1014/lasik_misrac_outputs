{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_mlist_isopen takes both head and node as non-const pointers but only inspects/comparess the list elements (no modification). According to MISRA C 2023 Rule 8.13, these parameters should be const-qualified (e.g. const struct lfs_mlist *head, const struct lfs_mlist *node). The explicit cast (struct lfs_mlist*)node in the comparison also masks const-correctness. A simple fix is to iterate with a const pointer (for (const struct lfs_mlist *p = head; p; p = p->next) ...) and make both parameters const.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_truncate code that contains useful probe functions that print useful logs to a file \"/tmp/logs/139.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_truncate as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_truncate:\n```c\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_truncate code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdarg.h>\n\n/* Probe helper: append structured logs to /tmp/logs/139.txt */\nstatic void probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/139.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fflush(f);\n    fclose(f);\n}\n\nint lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        probe_log(\"lfs_file_truncate: LFS_LOCK failed: err=%d, lfs=%p, file=%p, size=%\" PRIu32, err, (void*)lfs, (void*)file, size);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_truncate(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, size);\n\n    /*\n     * Probe: record the exact pointers and the explicit cast used in the\n     * original assertion. This captures the control flow and the state that\n     * is relevant to the reported MISRA Rule 8.13 scenario (non-const\n     * pointers used only for inspection and an explicit cast masking\n     * const-correctness).\n     */\n    probe_log(\"lfs_file_truncate: entering, lfs=%p, file=%p, size=%\" PRIu32,\n            (void*)lfs, (void*)file, size);\n    probe_log(\"lfs_file_truncate: about to check open-list: head=%p, node(as-cast)=%p, node(original)=%p\",\n            (void*)lfs->mlist, (void*)((struct lfs_mlist*)file), (void*)file);\n\n    /*\n     * Call lfs_mlist_isopen once so we can log its return value. The original\n     * code asserted on the direct call; preserve the assertion but evaluate\n     * the function separately to capture evidence without changing behavior.\n     */\n    int is_open = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    probe_log(\"lfs_file_truncate: lfs_mlist_isopen returned %d for head=%p node(as-cast)=%p node(original)=%p\",\n            is_open, (void*)lfs->mlist, (void*)((struct lfs_mlist*)file), (void*)file);\n\n    LFS_ASSERT(is_open);\n\n    err = lfs_file_truncate_(lfs, file, size);\n\n    probe_log(\"lfs_file_truncate: lfs_file_truncate_ returned %d, lfs=%p, file=%p, size=%\" PRIu32,\n            err, (void*)lfs, (void*)file, size);\n\n    LFS_TRACE(\"lfs_file_truncate -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}