{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn this project LFS_LOCK(cfg) is defined as ((void)cfg, 0). Therefore err is always set to 0 immediately before the fragment if (err) { return err; } so the body (return err;) can never be executed. Removing that branch would not change program behaviour for the supplied project configuration, so the branch body constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_traverse code that contains useful probe functions that print useful logs to a file \"/tmp/logs/82.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_traverse as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_traverse:\n```c\nint lfs_fs_traverse(lfs_t *lfs, int (*cb)(void *, lfs_block_t), void *data) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_traverse(%p, %p, %p)\",\n            (void*)lfs, (void*)(uintptr_t)cb, data);\n\n    err = lfs_fs_traverse_(lfs, cb, data, true);\n\n    LFS_TRACE(\"lfs_fs_traverse -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_traverse code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helper: append formatted probe messages to /tmp/logs/82.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/82.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_fs_traverse(lfs_t *lfs, int (*cb)(void *, lfs_block_t), void *data) {\n    /* Preserve original locking and behaviour */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: record result of lock and pointer-state available here */\n    lfs_probe_log(\"lfs_fs_traverse: after LFS_LOCK -> err=%d, lfs=%p, cb=%p, data=%p\",\n            err, (void*)lfs, (void*)(uintptr_t)cb, data);\n\n    if (err) {\n        /* Probe: record that the early return branch was taken (if it ever is) */\n        lfs_probe_log(\"lfs_fs_traverse: early return due to lock error: %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_traverse(%p, %p, %p)\",\n            (void*)lfs, (void*)(uintptr_t)cb, data);\n\n    /* Probe: record that we are about to call lfs_fs_traverse_ */\n    lfs_probe_log(\"lfs_fs_traverse: calling lfs_fs_traverse_ (pre)\");\n    err = lfs_fs_traverse_(lfs, cb, data, true);\n    /* Probe: record return value from lfs_fs_traverse_ */\n    lfs_probe_log(\"lfs_fs_traverse: returned from lfs_fs_traverse_ -> err=%d\", err);\n\n    LFS_TRACE(\"lfs_fs_traverse -> %d\", err);\n\n    /* Probe: record unlocking action */\n    lfs_probe_log(\"lfs_fs_traverse: calling LFS_UNLOCK for lfs=%p\", (void*)lfs);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"lfs_fs_traverse: final return -> %d\", err);\n\n    return err;\n}\n"
}