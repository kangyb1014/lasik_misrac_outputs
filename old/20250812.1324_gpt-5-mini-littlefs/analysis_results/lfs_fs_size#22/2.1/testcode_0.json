{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe branch if (err) { return err; } is unreachable because LFS_LOCK(lfs->cfg) is defined as ((void)cfg, 0), so err is always 0 and the conditional can never be true with the provided definition.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/177.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_size:\n```c\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe function: append logs to /tmp/logs/177.txt. Keeps behaviour unchanged. */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/177.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry state: pointer to lfs, address of cfg member, and lock return. */\n    lfs_log_probe(\"ENTRY: lfs_fs_size lfs=%p cfg_addr=%p LFS_LOCK_return=%d\",\n                  (void*)lfs, (void*)&lfs->cfg, err);\n\n    if (err) {\n        /* Log the (supposed) branch taken and returned error. */\n        lfs_log_probe(\"BRANCH: if (err) taken, returning err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    /* Log the result from the underlying implementation. */\n    lfs_log_probe(\"CALL: lfs_fs_size_ returned res=%\" PRId32, res);\n\n    LFS_TRACE(\"lfs_fs_size -> %\" PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log unlock and exit value. */\n    lfs_log_probe(\"EXIT: lfs_fs_size returning res=%\" PRId32, res);\n    return res;\n}\n"
}