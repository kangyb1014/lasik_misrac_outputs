{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis routine takes a non-const pointer (lfs_t *lfs) even though the function appears to only read from lfs (calls LFS_TRACE and lfs_fs_size_ and only uses lfs->cfg for locking). If lfs_fs_size_ and the LFS_LOCK/LFS_UNLOCK macros do not modify the lfs object (or can accept a pointer-to-const to the cfg), then the parameter should be declared const (const lfs_t *lfs). In that case the current declaration violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_size:\n```c\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/*\n * Probe helper: append a formatted log line to /tmp/logs/179.txt.\n * Keep this isolated to avoid changing the original logic.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/179.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    /* Log entry and attempt to acquire lock */\n    probe_log(\"ENTER lfs_fs_size: lfs=%p\", (void*)lfs);\n\n    int err = LFS_LOCK(lfs->cfg);\n    probe_log(\"AFTER LFS_LOCK: lfs=%p, lock_err=%d, cfg=%p\", (void*)lfs, err, (void*)lfs->cfg);\n\n    if (err) {\n        /* Log that we are returning early due to lock error */\n        probe_log(\"EARLY RETURN lfs_fs_size: lfs=%p, lock_err=%d\", (void*)lfs, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n    probe_log(\"BEFORE CALL lfs_fs_size_: lfs=%p, cfg=%p\", (void*)lfs, (void*)lfs->cfg);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    probe_log(\"AFTER CALL lfs_fs_size_: lfs=%p, res=%lld\", (void*)lfs, (long long)res);\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    probe_log(\"EXIT lfs_fs_size: lfs=%p, res=%lld\", (void*)lfs, (long long)res);\n    return res;\n}\n"
}