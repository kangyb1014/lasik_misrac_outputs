{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of lfs_fs_size:\n```c\nlfs_ssize_t lfs_fs_size(lfs_t *lfs) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_size(%p)\", (void*)lfs);\n\n    lfs_ssize_t res = lfs_fs_size_(lfs);\n\n    LFS_TRACE(\"lfs_fs_size -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nLFS_UNLOCK(lfs->cfg);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not enough context to prove a violation in this fragment. The call LFS_UNLOCK(lfs->cfg) is typically expected to modify the cfg (release a lock in the configuration object), so taking a non-const pointer is appropriate and does not violate Rule 8.13. A concrete violation scenario would be: if the LFS_UNLOCK implementation only reads from the cfg object and does not modify any of its contents, but its prototype (or the member lfs->cfg) is non-const \u2014 e.g. void LFS_UNLOCK(lfs_cfg_t *cfg) while it only performs read-only operations \u2014 then Rule 8.13 would be violated because the parameter should be a pointer to const (const lfs_cfg_t *)."
}