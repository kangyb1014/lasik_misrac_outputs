{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nLFS_LOCK is defined as ((void)cfg,0), so err is always 0. The conditional if (err) { return err; } can never be taken in this build, and removing that conditional (and the unused error-return path) would not change program behaviour. Therefore the error-path is effectively dead and Rule 2.2 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/258.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read:\n```c\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n\n/* Probe logger: append human-readable logs for control flow/state to /tmp/logs/258.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/258.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    time_t t = time(NULL);\n    fprintf(f, \"[%ld] \", (long)t);\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log the result of the lock and the relevant state to help reproduce the scenario */\n    lfs_probe_log(\"Entered lfs_dir_read: lfs=%p dir=%p info=%p, LFS_LOCK returned err=%d, cfg=%p\",\n            (void*)lfs, (void*)dir, (void*)info, err, (void*)lfs->cfg);\n\n    if (err) {\n        /* Log that the error branch is taken and the function will return early */\n        lfs_probe_log(\"lfs_dir_read: error path taken, returning err=%d\", err);\n        return err;\n    }\n    /* Log that the error branch was not taken */\n    lfs_probe_log(\"lfs_dir_read: error path NOT taken (err=%d), proceeding to body\", err);\n\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    lfs_probe_log(\"lfs_dir_read: lfs_dir_read_ returned err=%d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"lfs_dir_read: LFS_UNLOCK called (cfg=%p)\", (void*)lfs->cfg);\n\n    lfs_probe_log(\"lfs_dir_read: returning err=%d\", err);\n    return err;\n}\n"
}