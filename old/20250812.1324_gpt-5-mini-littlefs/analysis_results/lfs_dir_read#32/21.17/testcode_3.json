{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nstrcpy(info->name, \"..\") copies three bytes (two '.' + '\\0') into info->name which is declared as char name[LFS_NAME_MAX+1]. If LFS_NAME_MAX < 2 (so info->name has fewer than 3 bytes available) the call will write beyond the bounds of info->name. The code does not check or guarantee LFS_NAME_MAX >= 2 before this strcpy, so in that configuration this use of strcpy can overflow the buffer and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read:\n```c\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe logger that appends human-readable traces to /tmp/logs/263.txt */\nstatic void lfs_log_probe(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/263.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        lfs_log_probe(\"lfs_dir_read: LFS_LOCK failed err=%d cfg=%p\", err, (void*)lfs->cfg);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    /* Entry probe: pointers and compile-time constants if available */\n    lfs_log_probe(\"lfs_dir_read: entry lfs=%p dir=%p info=%p\", (void*)lfs, (void*)dir, (void*)info);\n\n#ifdef LFS_NAME_MAX\n    lfs_log_probe(\"lfs_dir_read: LFS_NAME_MAX=%d, expected name capacity=%d\", LFS_NAME_MAX, (int)(LFS_NAME_MAX + 1));\n#else\n    lfs_log_probe(\"lfs_dir_read: LFS_NAME_MAX not defined at compile time\");\n#endif\n\n    if (info == NULL) {\n        lfs_log_probe(\"lfs_dir_read: info is NULL\");\n    } else {\n        /* sizeof on the pointed-to type is evaluated at compile time and does not dereference the pointer */\n        lfs_log_probe(\"lfs_dir_read: sizeof(*info)=%zu\", sizeof(*info));\n\n        /* Try to log size of the name member without writing to it. This relies on the struct definition being available in the TU. */\n        lfs_log_probe(\"lfs_dir_read: sizeof(info->name)=%zu\", sizeof info->name);\n\n        /* Safely sample up to the available compile-time size of the name array, without overrunning it. */\n        size_t _name_sz = sizeof info->name;\n        if (_name_sz > 0) {\n            size_t _loglen = _name_sz < 64 ? _name_sz : 64;\n            char _buf[65];\n            size_t i;\n            /* Copy bytes from the object's name array up to _loglen. This uses the compile-time known size to avoid out-of-bounds reads. */\n            for (i = 0; i < _loglen; i++) {\n                _buf[i] = info->name[i];\n            }\n            _buf[_loglen] = '\\0';\n            lfs_log_probe(\"lfs_dir_read: info->name (first %zu bytes) as string: \\\"%s\\\"\", _loglen, _buf);\n\n            /* Also log a hex representation of the sampled bytes for unambiguous evidence. */\n            char _hex[65 * 2 + 1];\n            size_t p = 0;\n            for (i = 0; i < _loglen && p + 3 < sizeof _hex; i++) {\n                p += snprintf(&_hex[p], sizeof _hex - p, \"%02x\", (unsigned char)_buf[i]);\n            }\n            _hex[p] = '\\0';\n            lfs_log_probe(\"lfs_dir_read: info->name (first %zu bytes) hex: %s\", _loglen, _hex);\n        } else {\n            lfs_log_probe(\"lfs_dir_read: info->name has compile-time size 0 (flexible array or unknown)\");\n        }\n    }\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    lfs_log_probe(\"lfs_dir_read: lfs_dir_read_ returned %d\", err);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}