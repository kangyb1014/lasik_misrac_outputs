{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call memset(info, 0, sizeof(*info)) writes sizeof(struct lfs_info) bytes starting at info. If the caller passes info==NULL or a pointer to an object smaller than struct lfs_info (for example a smaller heap buffer or a pointer to just the name member), this will write beyond the bounds and cause UB. The function performs no null/size validation, so such out\u2011of\u2011bounds accesses are possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read:\n```c\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_read code.\n",
  "test_code": "#include <stdio.h>\n#include <time.h>\n#include <unistd.h>\n\n/* Probe logging helper. Appends concise, timestamped records to /tmp/logs/263.txt\n   Does not change program logic; used only to capture control flow and state. */\nstatic void lfs_probe_log(const char *stage, lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info, int err) {\n    FILE *f = fopen(\"/tmp/logs/263.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    time_t t = time(NULL);\n    pid_t pid = getpid();\n    /* sizeof(struct lfs_info) is evaluated at compile time and is safe even if info==NULL */\n    fprintf(f, \"[%ld] pid=%d %s: lfs=%p dir=%p info=%p info_size=%zu info_is_null=%d err=%d\\n\",\n            (long)t, (int)pid, stage,\n            (void*)lfs, (void*)dir, (void*)info,\n            (size_t)sizeof(struct lfs_info), (info == NULL) ? 1 : 0, err);\n    fflush(f);\n    fclose(f);\n}\n\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log failure to acquire lock and return as original logic */\n        lfs_probe_log(\"lfs_dir_read:lock_failed\", lfs, dir, info, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    /* Log state before delegating to lfs_dir_read_. This ensures that if\n       lfs_dir_read_ performs an out-of-bounds write (e.g. via memset(info, ...))\n       we have a pre-call record showing whether info was NULL and the\n       expected size of the target object. */\n    lfs_probe_log(\"lfs_dir_read:before_call\", lfs, dir, info, -1);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    /* Log the result and state after the call. If lfs_dir_read_ crashes due\n       to invalid info, the pre-call record above will remain available. */\n    lfs_probe_log(\"lfs_dir_read:after_call\", lfs, dir, info, err);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}