{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nstrcpy(info->name, \".\") writes two bytes ('.' + '\\0') into info->name which has size LFS_NAME_MAX+1. If LFS_NAME_MAX < 1 (for example LFS_NAME_MAX == 0, so name[] has length 1) this call overruns the buffer. The prior memset(info,0,sizeof(*info)) does not prevent this out\u2011of\u2011bounds write.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/263.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_read as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_read:\n```c\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_read code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper \u2014 appends human-readable traces to /tmp/logs/263.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/263.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Probe state about the info pointer relevant to the reported scenario. */\nstatic void lfs_probe_info_state(struct lfs_info *info) {\n    lfs_probe_log(\"[probe] info ptr=%p\", (void*)info);\n#ifdef LFS_NAME_MAX\n    lfs_probe_log(\"[probe] LFS_NAME_MAX=%d\", (int)LFS_NAME_MAX);\n    lfs_probe_log(\"[probe] assumed name buffer size = LFS_NAME_MAX+1 = %d\", (int)(LFS_NAME_MAX + 1));\n    if ((int)(LFS_NAME_MAX) < 1) {\n        lfs_probe_log(\"[probe][WARNING] LFS_NAME_MAX < 1: strcpy(info->name, \\\".\\\") will write 2 bytes and may overflow name buffer\");\n    } else {\n        lfs_probe_log(\"[probe] LFS_NAME_MAX >= 1: strcpy(info->name, \\\".\\\") should fit within name buffer (LFS_NAME_MAX+1 >= 2)\");\n    }\n#else\n    lfs_probe_log(\"[probe] LFS_NAME_MAX is not defined in this translation unit\");\n#endif\n}\n\nint lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_read(%p, %p, %p)\",\n            (void*)lfs, (void*)dir, (void*)info);\n\n    /* Probe: log entry and relevant state before delegating to lfs_dir_read_. */\n    lfs_probe_log(\"[probe] entering lfs_dir_read: lfs=%p, dir=%p, info=%p\", (void*)lfs, (void*)dir, (void*)info);\n    lfs_probe_info_state(info);\n\n    err = lfs_dir_read_(lfs, dir, info);\n\n    /* Probe: log outcome and state after the call (to catch cases where internal code caused overflow). */\n    lfs_probe_log(\"[probe] lfs_dir_read_ returned %d\", err);\n    lfs_probe_info_state(info);\n\n    LFS_TRACE(\"lfs_dir_read -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}