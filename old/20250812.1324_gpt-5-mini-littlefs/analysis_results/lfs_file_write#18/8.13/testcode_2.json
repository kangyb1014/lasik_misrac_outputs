{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call casts an lfs_file_t* to a non-const struct lfs_mlist* and passes it to lfs_mlist_isopen: LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file)); If lfs_mlist_isopen only inspects the list entry (does not modify it), its parameter should be declared as const struct lfs_mlist * and the call should pass (const struct lfs_mlist *)file (or no cast). By using a non-const pointer here the code fails to qualify the pointed-to type as const where possible, allowing modification through that pointer and thus violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/147.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_write:\n```c\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_write code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe logging helper: append human-readable probes to /tmp/logs/147.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/147.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        lfs_probe_log(\"lfs_file_write: LFS_LOCK failed -> %d (lfs=%p)\", err, (void*)lfs);\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n\n    /* Probe: record the control-flow point and pointer information before the assertion.\n       This captures the cast from lfs_file_t* to struct lfs_mlist* that is reported as a violation. */\n    lfs_probe_log(\"lfs_file_write: before LFS_ASSERT - lfs=%p, file=%p, buffer=%p, size=%\"PRIu32,\n            (void*)lfs, (void*)file, buffer, size);\n\n    /* Log both the existing non-const cast (as used in the original code) and a const-qualified cast\n       to make it explicit in the probe output which qualification is being discarded in the call. */\n    lfs_probe_log(\"lfs_file_write: cast (struct lfs_mlist*)file -> %p\",\n            (void*)(struct lfs_mlist*)file);\n    lfs_probe_log(\"lfs_file_write: cast (const struct lfs_mlist*)file -> %p\",\n            (const void*)(const struct lfs_mlist*)file);\n\n    /* Preserve original assertion call and behavior exactly. */\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_probe_log(\"lfs_file_write: passed LFS_ASSERT (lfs=%p, file=%p)\", (void*)lfs, (void*)file);\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n    lfs_probe_log(\"lfs_file_write: lfs_file_write_ returned %\"PRId32, res);\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"lfs_file_write: LFS_UNLOCK called (lfs=%p)\", (void*)lfs);\n    return res;\n}\n"
}