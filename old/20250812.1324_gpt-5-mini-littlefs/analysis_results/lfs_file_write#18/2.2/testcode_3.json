{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to the expression ((void)cfg). In lfs_file_write the call LFS_UNLOCK(lfs->cfg) therefore evaluates to a void-cast of lfs->cfg which has no effect at run-time. Removing that call (and the macro definition) would not change program behaviour (assuming the cfg expression has no observable side-effects such as volatile accesses). Hence the executed no-op constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/146.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_write:\n```c\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_write code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/146.txt. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/146.txt\", \"a\");\n    if (f == NULL) {\n        return; /* best-effort logging, do not alter program flow */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    lfs_probe_log(\"ENTRY lfs_file_write: lfs=%p, file=%p, buffer=%p, size=%llu\",\n            (void*)lfs, (void*)file, buffer, (unsigned long long)size);\n\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_probe_log(\"LFS_LOCK returned: %d\", err);\n    if (err) {\n        lfs_probe_log(\"EXIT lfs_file_write early with err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_probe_log(\"Before lfs_file_write_: cfg=%p, file=%p\", (void*)lfs->cfg, (void*)file);\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    lfs_probe_log(\"lfs_file_write_ returned: res=%lld\", (long long)res);\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n\n    /* Log cfg pointer immediately before and after the unlock call so that\n       other agents can observe that the LFS_UNLOCK invocation itself performs\n       no observable change to the cfg pointer (as in the reported scenario). */\n    lfs_probe_log(\"Before LFS_UNLOCK: cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"After  LFS_UNLOCK: cfg=%p\", (void*)lfs->cfg);\n\n    lfs_probe_log(\"EXIT lfs_file_write with res=%lld\", (long long)res);\n    return res;\n}\n"
}