{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg, 0). The (void)cfg expression is executed but has no effect, and the macro always yields 0, so any runtime effect of invoking LFS_LOCK is a no-op. Removal of the (void)cfg expression (or replacing the macro with 0) would not change program behaviour in this project configuration. Therefore the macro introduces executed dead code (and it also makes the subsequent error branch effectively never taken), violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/146.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_write:\n```c\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_write code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logger to capture control flow and state for the LFS_LOCK scenario.\n   Appends human-readable events to /tmp/logs/146.txt. */\nstatic void lfs_probe_log(const char *event, const void *lfs_ptr,\n        const void *file_ptr, const void *buffer_ptr, unsigned long size, int err) {\n    FILE *f = fopen(\"/tmp/logs/146.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log event name, pointers and numeric values useful to reproduce the scenario. */\n    fprintf(f, \"%s: lfs=%p file=%p buffer=%p size=%lu err=%d\\n\",\n            event, lfs_ptr, file_ptr, buffer_ptr, size, err);\n    fclose(f);\n}\n\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    /* Log entry and the state before calling LFS_LOCK. */\n    lfs_probe_log(\"ENTRY_BEFORE_LOCK\", (const void*)lfs, (const void*)file, buffer,\n            (unsigned long)size, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the return value from LFS_LOCK and related state. This helps show\n       that LFS_LOCK yields 0 in the current configuration (evidence for the\n       executed no-op). */\n    lfs_probe_log(\"AFTER_LOCK\", (const void*)lfs, (const void*)file, buffer,\n            (unsigned long)size, err);\n\n    if (err) {\n        /* If the macro ever returned a non-zero error, this branch would be taken.\n           Log this to capture whether the error branch is reachable. */\n        lfs_probe_log(\"LOCK_ERROR_BRANCH\", (const void*)lfs, (const void*)file, buffer,\n                (unsigned long)size, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Log immediately before delegating to the real write implementation. */\n    lfs_probe_log(\"BEFORE_WRITE_CALL\", (const void*)lfs, (const void*)file, buffer,\n            (unsigned long)size, 0);\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    /* Log the result of the write operation. */\n    lfs_probe_log(\"AFTER_WRITE_CALL\", (const void*)lfs, (const void*)file, buffer,\n            (unsigned long)size, (int)res);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log before returning to capture that the function completed normally. */\n    lfs_probe_log(\"BEFORE_RETURN\", (const void*)lfs, (const void*)file, buffer,\n            (unsigned long)size, (int)res);\n\n    return res;\n}\n"
}