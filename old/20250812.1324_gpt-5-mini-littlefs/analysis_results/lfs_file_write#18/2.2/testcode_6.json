{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn this project LFS_LOCK is defined as ((void)cfg, 0). That makes int err = LFS_LOCK(lfs->cfg); always set err to 0, so the subsequent if (err) { return err; } branch will never be taken. The return statement inside the if is therefore an executed-but-useless operation (it cannot affect program behaviour given the current definition of LFS_LOCK) and is dead code. If LFS_LOCK were to return non-zero in other build configurations this would not be dead, but with the provided definition the code violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_write code that contains useful probe functions that print useful logs to a file \"/tmp/logs/146.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_write as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_write:\n```c\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_write code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/146.txt\n * This helper preserves program behaviour and only performs side-effect\n * logging so other agents can reproduce and gather evidence of the\n * LFS_LOCK-related control flow. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/146.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nlfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,\n        const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the immediate result of the lock and the inputs to the function.\n     * This captures the scenario where LFS_LOCK is defined as ((void)cfg, 0)\n     * and therefore err == 0 always. */\n    lfs_probe_log(\"[probe] lfs_file_write ENTRY: lfs=%p, file=%p, buffer=%p, size=%\" PRIu32 \", err=%d\",\n            (void*)lfs, (void*)file, buffer, (uint32_t)size, err);\n\n    if (err) {\n        /* Log branch taken when lock indicates error (should not happen with\n         * the provided LFS_LOCK definition). We keep the original behaviour. */\n        lfs_probe_log(\"[probe] lfs_file_write: LFS_LOCK returned non-zero err=%d; returning immediately\",\n                err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_write(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Log just before calling the internal write implementation so we can\n     * correlate the call to the result. */\n    lfs_probe_log(\"[probe] lfs_file_write: calling lfs_file_write_ (err=%d)\", err);\n\n    lfs_ssize_t res = lfs_file_write_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_write -> %\"PRId32, res);\n\n    /* Log the result and note the unlock that follows. */\n    lfs_probe_log(\"[probe] lfs_file_write: lfs_file_write_ returned res=%\" PRId32 \"; calling LFS_UNLOCK\",\n            res);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"[probe] lfs_file_write EXIT: returning res=%\" PRId32, res);\n    return res;\n}\n"
}