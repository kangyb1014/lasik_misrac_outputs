{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro is defined as ((void)cfg,0), so the statement int err = LFS_LOCK(lfs->cfg); always assigns 0 to err. Consequently the subsequent conditional if (err) { return err; } can never be taken and the early-return path (and the initial assignment from LFS_LOCK) has no effect on program behaviour in this project configuration. Removing the LFS_LOCK call/assignment and the conditional would not change behaviour, so this constitutes dead code under MISRA C:2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_setattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/170.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_setattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_setattr:\n```c\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_setattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/170.txt */\nstatic void lfs_probe_logf(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/170.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    (void)fputc('\\n', f);\n    (void)fclose(f);\n}\n\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log the result of the lock attempt and cfg pointer to reproduce the scenario */\n    lfs_probe_logf(\"lfs_setattr: LFS_LOCK returned %d for cfg=%p\", err, (void*)lfs->cfg);\n\n    if (err) {\n        /* Log early return path so logs demonstrate whether this branch can be taken */\n        lfs_probe_logf(\"lfs_setattr: early return due to LFS_LOCK err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    /* Log arguments before delegating to the internal implementation */\n    lfs_probe_logf(\"lfs_setattr: calling lfs_setattr_(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path ? path : \"(null)\", type, buffer, (uint32_t)size);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    /* Log return value from the internal call */\n    lfs_probe_logf(\"lfs_setattr: lfs_setattr_ returned %d\", err);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log that unlock was called */\n    lfs_probe_logf(\"lfs_setattr: LFS_UNLOCK called for cfg=%p\", (void*)lfs->cfg);\n\n    return err;\n}\n"
}