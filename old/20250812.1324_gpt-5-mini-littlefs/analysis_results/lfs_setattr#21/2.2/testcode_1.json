{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK(cfg) macro expands to ((void)cfg,0). The (void)cfg expression and the comma operator are evaluated at runtime but have no observable effect (they only discard cfg and yield 0). Removing the macro call (or replacing it with the literal 0) would not change program behaviour, so the executed operation is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_setattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/170.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_setattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_setattr:\n```c\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_setattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helper: append state and control-path information to /tmp/logs/170.txt\n * This helper is intentionally small and side-effecting only through file I/O\n * so it does not change the control-flow or return values of lfs_setattr. */\nstatic void lfs_probe_log(const char *label, lfs_t *lfs, int err) {\n    FILE *f = fopen(\"/tmp/logs/170.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Log basic addresses and the lock result */\n    fprintf(f, \"%s: lfs=%p, cfg=%p, err=%d\\n\", label, (void*)lfs,\n            (void*)(lfs ? lfs->cfg : NULL), err);\n\n    /* If cfg appears valid, dump the first up to 8 bytes (hex) to show it is unchanged\n     * between before/after the lock call. This provides evidence that evaluating\n     * (void)cfg has no observable effect on cfg's contents or address. */\n    if (lfs && lfs->cfg) {\n        const unsigned char *p = (const unsigned char *)lfs->cfg;\n        fprintf(f, \"%s: cfg_first8=\", label);\n        for (size_t i = 0; i < 8; i++) {\n            /* Protect against unlikely invalid read by guarding with a try to keep simple; \n             * in most environments cfg points to a struct with at least 8 bytes. */\n            fprintf(f, \"%02x\", (unsigned int)p[i]);\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fclose(f);\n}\n\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    /* Log state before attempting the lock */\n    lfs_probe_log(\"lfs_setattr:before_lock\", lfs, -1);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log state immediately after the lock attempt to capture the return value\n     * and to show that cfg/address/content are not modified by the lock expression. */\n    lfs_probe_log(\"lfs_setattr:after_lock\", lfs, err);\n\n    if (err) {\n        lfs_probe_log(\"lfs_setattr:return_on_lock_err\", lfs, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_probe_log(\"lfs_setattr:before_setattr_\", lfs, 0);\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n    lfs_probe_log(\"lfs_setattr:after_setattr_\", lfs, err);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"lfs_setattr:after_unlock\", lfs, err);\n    return err;\n}\n"
}