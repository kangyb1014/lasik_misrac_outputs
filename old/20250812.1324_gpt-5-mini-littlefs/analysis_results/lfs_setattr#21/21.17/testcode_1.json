{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code only checks size against lfs->attr_max (filesystem limit) but does not validate that the caller-provided buffer actually contains at least size bytes. If a caller passes a buffer that is smaller than size (for example a 4-byte array) but size is <= lfs->attr_max (for example size = 10, lfs->attr_max = 100), a later copy (e.g. memcpy/memmove) that uses the buffer and size will read beyond the bounds of the buffer, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_setattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/175.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_setattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_setattr:\n```c\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_setattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe helper to capture control flow and relevant state for Rule 21.17 analysis.\n * Appends human-readable logs to \"/tmp/logs/175.txt\". Does not modify program logic.\n */\nstatic void lfs_setattr_probe_pre(const void *lfs_ptr, const char *path,\n        unsigned int type, const void *buffer, unsigned long size)\n{\n    FILE *f = fopen(\"/tmp/logs/175.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"[lfs_setattr] PRE: lfs=%p path=\\\"%s\\\" type=%u buffer=%p size=%lu\\n\",\n            lfs_ptr, path ? path : \"(null)\", type, buffer, size);\n    fclose(f);\n}\n\nstatic void lfs_setattr_probe_post(const void *lfs_ptr, const char *path,\n        unsigned int type, const void *buffer, unsigned long size, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/175.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"[lfs_setattr] POST: lfs=%p path=\\\"%s\\\" type=%u buffer=%p size=%lu err=%d\\n\",\n            lfs_ptr, path ? path : \"(null)\", type, buffer, size, err);\n    fclose(f);\n}\n\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    /* Insert probes that log state relevant to the potential Rule 21.17 violation.\n     * Do NOT dereference the caller-provided buffer. Only log its pointer and size,\n     * and the filesystem attribute limit (attr_max) when available.\n     */\n    lfs_setattr_probe_pre((const void*)lfs, path, (unsigned)type, buffer, (unsigned long)size);\n\n    /* If possible, also log the attr_max to help reproduce the scenario. */\n    {\n        FILE *f = fopen(\"/tmp/logs/175.txt\", \"a\");\n        if (f) {\n            if (lfs && lfs->cfg) {\n                fprintf(f, \"[lfs_setattr] FS state: cfg=%p attr_max=%lu\\n\",\n                        (void*)lfs->cfg, (unsigned long)lfs->attr_max);\n            } else {\n                fprintf(f, \"[lfs_setattr] FS state: cfg=%p\\n\", (void*)(lfs ? lfs->cfg : NULL));\n            }\n            fclose(f);\n        }\n    }\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    lfs_setattr_probe_post((const void*)lfs, path, (unsigned)type, buffer, (unsigned long)size, err);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}