{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nlfs_setattr forwards the caller-supplied (buffer, size) to lfs_commitattr -> lfs_dir_commit which will copy 'size' bytes from buffer into internal storage. The code only checks size <= lfs->attr_max but does not validate that 'buffer' points to at least 'size' bytes (nor that buffer != NULL when size > 0). If a caller passes a buffer with fewer than 'size' bytes (or NULL with size > 0), the downstream use of memcpy/memmove/etc. will read beyond the bounds of the object referenced by 'buffer' and thus violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_setattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/175.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_setattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_setattr:\n```c\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_setattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe logging helper that appends human-readable traces to /tmp/logs/175.txt.\n   This helper avoids dereferencing potentially NULL pointers (e.g. path, buffer)\n   and only logs their pointer values and sizes so it is safe to call from\n   production code without changing behavior. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/175.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    /* Log entry with safe guards: do not dereference path or buffer. */\n    lfs_probe_log(\"ENTER lfs_setattr: lfs=%p path=%s type=%u buffer=%p size=%llu\",\n            (void*)lfs, (path ? path : \"(null)\"), (unsigned)type,\n            buffer, (unsigned long long)size);\n\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_probe_log(\"LFS_LOCK returned %d\", err);\n    if (err) {\n        lfs_probe_log(\"EXIT lfs_setattr (lock error) err=%d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    lfs_probe_log(\"Calling lfs_setattr_: lfs=%p path=%s type=%u buffer=%p size=%llu\",\n            (void*)lfs, (path ? path : \"(null)\"), (unsigned)type,\n            buffer, (unsigned long long)size);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    lfs_probe_log(\"lfs_setattr_ returned %d\", err);\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"LFS_UNLOCK called, returning %d\", err);\n    return err;\n}\n"
}