{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts the non-const lfs_file_t * (file) to a non-const struct lfs_mlist * when calling lfs_mlist_isopen: LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file)); If lfs_mlist_isopen only inspects the list (does not modify the object) the parameter and the cast should use a pointer to const (const struct lfs_mlist *). As written a non-const pointer is used (and the explicit cast hides the correct const qualification), so the pointer is not const-qualified where it could/should be \u2014 violating MISRA C 2023 Rule 8.13. If lfs_mlist_isopen is declared non-const, that declaration itself would also violate Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/59.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_seek:\n```c\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/* Probe helper: append a formatted log line to /tmp/logs/59.txt\n   Keep this small and non-intrusive so original logic is preserved. */\nstatic void lfs_probe_log(const char *tag, void *lfs_ptr, void *file_ptr,\n        int32_t off, int whence, void *mlist_ptr, void *cast_ptr) {\n    FILE *fp = fopen(\"/tmp/logs/59.txt\", \"a\");\n    if (fp) {\n        fprintf(fp, \"%s: lfs=%p file=%p off=%\" PRId32 \" whence=%d mlist=%p casted_file=%p\\n\",\n                tag, lfs_ptr, file_ptr, off, whence, mlist_ptr, cast_ptr);\n        fclose(fp);\n    }\n}\n\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Log entry into the function with parameters */\n    lfs_probe_log(\"ENTER\", (void*)lfs, (void*)file, (int32_t)off, whence,\n                  (void*)lfs->mlist, (void*)file);\n\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n\n    /* Log just before the open-check and the cast that is under scrutiny. */\n    lfs_probe_log(\"BEFORE_MLIST_ISOPEN\", (void*)lfs, (void*)file,\n                  (int32_t)off, whence, (void*)lfs->mlist,\n                  (void*)(struct lfs_mlist*)file);\n\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Log immediately after the assertion to capture that the check passed. */\n    lfs_probe_log(\"AFTER_MLIST_ISOPEN\", (void*)lfs, (void*)file,\n                  (int32_t)off, whence, (void*)lfs->mlist,\n                  (void*)(struct lfs_mlist*)file);\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n\n    /* Log exit with result */\n    lfs_probe_log(\"EXIT\", (void*)lfs, (void*)file, (int32_t)res, whence,\n                  (void*)lfs->mlist, (void*)file);\n\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}