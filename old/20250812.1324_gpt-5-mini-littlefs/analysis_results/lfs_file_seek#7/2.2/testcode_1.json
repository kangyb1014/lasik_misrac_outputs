{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro expands to ((void)cfg, 0), so every call (e.g. int err = LFS_LOCK(lfs->cfg);) always yields 0 and has no observable effect. The subsequent check if (err) { return err; } can never be true, and the lock/unlock sequence becomes a no-op; removing the LFS_LOCK call and the related if (err) test would not change program behaviour. Therefore the macro invocation constitutes executed code whose removal would not affect behaviour \u2014 dead code violating MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/58.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_seek:\n```c\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/58.txt\n   We keep this separate from existing tracing macros so it does not\n   change program behaviour. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/58.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    /* Capture the return of the lock operation so we can observe\n       whether it is always zero (no-op) in the build under test. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log cfg pointer and the numeric result of the lock invocation. */\n    lfs_probe_log(\"PROBE: LFS_LOCK called: cfg=%p, returned err=%d\",\n            (void*)lfs->cfg, err);\n\n    if (err) {\n        /* Log the early-return path so that we can show whether this\n           branch is ever taken. */\n        lfs_probe_log(\"PROBE: lfs_file_seek early return: lfs=%p, file=%p, off=%\" PRId32 \", whence=%d, err=%d\",\n                (void*)lfs, (void*)file, off, whence, err);\n        return err;\n    }\n\n    /* Preserve existing trace and assertion behavior. */\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\" PRId32 \", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Record that we are about to call the underlying implementation. */\n    lfs_probe_log(\"PROBE: calling lfs_file_seek_: lfs=%p, file=%p, off=%\" PRId32 \", whence=%d\",\n            (void*)lfs, (void*)file, off, whence);\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\" PRId32, res);\n\n    /* Log the result before unlocking so we can correlate values. */\n    lfs_probe_log(\"PROBE: lfs_file_seek_ returned res=%\" PRId32 \", lfs=%p, file=%p\",\n            res, (void*)lfs, (void*)file);\n\n    lfs_probe_log(\"PROBE: calling LFS_UNLOCK: cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"PROBE: returned from LFS_UNLOCK: cfg=%p\", (void*)lfs->cfg);\n\n    return res;\n}\n"
}