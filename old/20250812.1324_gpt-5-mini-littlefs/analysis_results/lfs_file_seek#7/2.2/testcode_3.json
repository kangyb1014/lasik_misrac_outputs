{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res); is compiled with LFS_TRACE defined as an empty macro (#define LFS_TRACE(__VA_ARGS__)). After preprocessing this becomes an empty statement (a no-op) that is executed but has no effect and can be removed without changing program behaviour, so it constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/58.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_seek:\n```c\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\"PRId32\", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    LFS_TRACE(\"lfs_file_seek -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe logging utility: append human-readable traces to /tmp/logs/58.txt.\n   Kept as a simple function so it can be compiled into the project without\n   changing the original lfs_file_seek logic. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/58.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nlfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the lock failure so the control path is captured. */\n        lfs_probe_log(\"lfs_file_seek: LFS_LOCK failed err=%d lfs=%p file=%p off=%\" PRId32 \" whence=%d\",\n                err, (void*)lfs, (void*)file, off, whence);\n        return err;\n    }\n\n    /* Original tracing call (may be an empty macro in some builds). */\n    LFS_TRACE(\"lfs_file_seek(%p, %p, %\" PRId32 \", %d)\",\n            (void*)lfs, (void*)file, off, whence);\n\n    /* Probe: explicitly log entry to ensure evidence even if LFS_TRACE is empty. */\n    lfs_probe_log(\"lfs_file_seek: entry lfs=%p file=%p off=%\" PRId32 \" whence=%d\",\n            (void*)lfs, (void*)file, off, whence);\n\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_seek_(lfs, file, off, whence);\n\n    /* Original tracing call (may be an empty macro in some builds). */\n    LFS_TRACE(\"lfs_file_seek -> %\" PRId32, res);\n\n    /* Probe: explicitly log the return value and context to capture the\n       scenario where the LFS_TRACE macro is defined empty (no-op). */\n    lfs_probe_log(\"lfs_file_seek: exit res=%\" PRId32 \" lfs=%p file=%p\",\n            res, (void*)lfs, (void*)file);\n\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}