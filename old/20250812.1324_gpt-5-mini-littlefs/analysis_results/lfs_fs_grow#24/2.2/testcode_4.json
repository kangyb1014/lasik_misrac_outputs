{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro used here is defined as ((void)cfg,0), so LFS_LOCK(lfs->cfg) always evaluates to 0. As a result err is always 0 and the if (err) { return err; } branch can never be taken in this build. Removing the assignment/check would not change program behaviour for this configuration, so this code is effectively dead. (If LFS_LOCK is defined differently in other configurations to perform real locking and return error codes, then the code is required for those builds; but in the provided project configuration the construct constitutes dead code and thus violates Rule 2.2.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/194.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_grow code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe helper: append human-readable logs to /tmp/logs/194.txt. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/194.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    /* Log entry and input state */\n    lfs_probe_log(\"ENTER lfs_fs_grow: lfs=%p, block_count=%\" PRIu32, (void*)lfs, block_count);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Capture the return from LFS_LOCK to show whether locking is a no-op (0) or returned an error */\n    lfs_probe_log(\"After LFS_LOCK: err=%d\", err);\n\n    if (err) {\n        /* Log the early-return control path so a post-build inspection can see this branch was taken */\n        lfs_probe_log(\"Early return from lfs_fs_grow due to lock error: %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n    lfs_probe_log(\"Calling lfs_fs_grow_ with block_count=%\" PRIu32, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    /* Log return value from internal grow function */\n    lfs_probe_log(\"Returned from lfs_fs_grow_: err=%d\", err);\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"Exiting lfs_fs_grow: err=%d\", err);\n\n    return err;\n}\n"
}