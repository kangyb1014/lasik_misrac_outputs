{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg,0). The (void)cfg sub-expression is executed but has no effect (it only discards the value of cfg). Removing that cast (or the entire evaluation when cfg has no side-effects) would not change program behaviour in the provided usage (e.g. LFS_LOCK(lfs->cfg) in lfs_fs_grow), so this constitutes dead code under MISRA C 2023 Rule 2.2. (The matching LFS_UNLOCK(cfg) ((void)cfg) is the same pattern and likewise contains an executed no-op.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/194.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_grow code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper that logs control flow and key state to /tmp/logs/194.txt.\n   Uses only void* and unsigned long long to avoid depending on project types. */\nstatic void lfs_probe_log(const char *msg, const void *lfs_ptr,\n    unsigned long long block_count, const void *cfg_ptr, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/194.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"%s: lfs=%p, block_count=%llu, cfg=%p, err=%d\\n\",\n        msg, lfs_ptr, block_count, cfg_ptr, err);\n    fclose(f);\n}\n\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    /* Safely obtain cfg pointer for logging without dereferencing lfs if NULL. */\n    void *cfg_ptr = NULL;\n    if (lfs) {\n        cfg_ptr = (void*)lfs->cfg;\n    }\n\n    /* Log entry and the cfg pointer before taking the lock. */\n    lfs_probe_log(\"ENTRY before LFS_LOCK\", (void*)lfs,\n        (unsigned long long)block_count, cfg_ptr, -1);\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result of LFS_LOCK and cfg again to capture that the (void)cfg sub-expression executed. */\n    lfs_probe_log(\"AFTER LFS_LOCK\", (void*)lfs,\n        (unsigned long long)block_count, cfg_ptr, err);\n\n    if (err) {\n        lfs_probe_log(\"RETURN early due to lock error\", (void*)lfs,\n            (unsigned long long)block_count, cfg_ptr, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    lfs_probe_log(\"BEFORE lfs_fs_grow_\", (void*)lfs,\n        (unsigned long long)block_count, cfg_ptr, err);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    lfs_probe_log(\"AFTER lfs_fs_grow_\", (void*)lfs,\n        (unsigned long long)block_count, cfg_ptr, err);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_log(\"AFTER LFS_UNLOCK\", (void*)lfs,\n        (unsigned long long)block_count, cfg_ptr, err);\n\n    return err;\n}\n"
}