{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to the expression ((void)cfg), which in the shown configuration produces an executed no-op statement when invoked (e.g. LFS_UNLOCK(lfs->cfg) in lfs_fs_grow). Removing that statement would not change program behaviour (the cast-to-void has no side-effects for a plain pointer), so it constitutes dead code under MISRA C 2023 Rule 2.2. (Note: if cfg evaluation had side-effects, or in other build configurations the macro expands to real unlock code, it would not be dead; but in the provided code it is a no-op.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/194.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_grow code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe logging helper that appends human-readable traces to /tmp/logs/194.txt.\n   Keeps the original logic intact and only adds logging calls. */\nstatic void lfs_probe_write(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/194.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Modified lfs_fs_grow with probes. Original logic preserved. */\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log entry and result of lock attempt. This captures the control flow into\n       the function and whether locking failed immediately. */\n    lfs_probe_write(\"[probe] ENTER lfs_fs_grow: lfs=%p block_count=%\" PRIu32 \" LFS_LOCK_err=%d cfg_ptr=%p\",\n                    (void*)lfs, block_count, err, (void*)lfs->cfg);\n\n    if (err) {\n        lfs_probe_write(\"[probe] EXIT lfs_fs_grow: early return due to LFS_LOCK error=%d\", err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    lfs_probe_write(\"[probe] after lfs_fs_grow_: err=%d\", err);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n\n    /* Probe immediately before and after calling LFS_UNLOCK to capture the\n       fact that an unlock invocation is executed. In configurations where\n       LFS_UNLOCK expands to a no-op ((void)cfg), these logs will show the\n       call site was reached and that the cfg pointer value was observed but\n       no side-effects are visible in the surrounding state. */\n    lfs_probe_write(\"[probe] about to call LFS_UNLOCK(cfg=%p)\", (void*)lfs->cfg);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_probe_write(\"[probe] returned from LFS_UNLOCK; cfg still=%p\", (void*)lfs->cfg);\n    return err;\n}\n"
}