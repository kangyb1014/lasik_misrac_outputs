{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe parameter 'block_count' (a non-pointer scalar) is potentially modified via its address when passed to lfs_fs_traverse_: lfs_fs_traverse_(lfs, lfs_shrink_checkblock, &block_count, true). This changes the parameter variable itself (when LFS_SHRINKNONRELOCATING is defined), violating Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/197.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_grow code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/* Probe helper to log control flow and state to /tmp/logs/197.txt */\nstatic void lfs_probe_log_state(const char *stage, const lfs_t *lfs,\n                                lfs_size_t block_count, const void *addr,\n                                int err) {\n    FILE *f = fopen(\"/tmp/logs/197.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log stage, pointer to lfs, value of block_count, address of block_count, and err */\n    fprintf(f, \"%s: lfs=%p block_count=%\" PRIu32 \" addr_block_count=%p err=%d\\n\",\n            stage, (void*)lfs, block_count, addr, err);\n    fflush(f);\n    fclose(f);\n}\n\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    /* Log the incoming parameter state and its address before calling the internal function.\n       This captures the original value and location so we can detect if the callee\n       modifies the parameter via its address (the violation scenario). */\n    lfs_probe_log_state(\"lfs_fs_grow - before lfs_fs_grow_\", lfs, block_count, &block_count, 0);\n\n    /* Keep a local copy of the original value for easy comparison after the call. */\n    lfs_size_t orig_block_count = block_count;\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    /* Log the state after the call to observe any changes to the parameter's value\n       or to provide evidence that it was modified via its address. */\n    lfs_probe_log_state(\"lfs_fs_grow - after lfs_fs_grow_\", lfs, block_count, &block_count, err);\n\n    /* Additional note in the log if the value changed (helps reproduce the violation). */\n    if (block_count != orig_block_count) {\n        lfs_probe_log_state(\"lfs_fs_grow - DETECTED_MODIFICATION\", lfs, block_count, &block_count, err);\n    }\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}