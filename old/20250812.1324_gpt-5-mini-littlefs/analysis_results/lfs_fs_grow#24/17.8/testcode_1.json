{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_fs_grow_ the parameter 'block_count' is passed by address (&block_count) to lfs_fs_traverse_ (err = lfs_fs_traverse_(lfs, lfs_shrink_checkblock, &block_count, true);). That allows the called function (or the callback lfs_shrink_checkblock) to modify the object referred to by the parameter, which results in modifying the function parameter 'block_count' itself. This constitutes a violation of MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/197.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_grow code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe helper: append logs to /tmp/logs/197.txt */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/197.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Trace entry as original code */\n    LFS_TRACE(\"lfs_fs_grow(%p, %\" PRIu32 \")\", (void*)lfs, block_count);\n\n    /* Probe: record incoming value and address of the parameter so callers\n       / other agents can observe whether the object referred to by this\n       parameter gets modified by callees. We do not modify block_count. */\n    lfs_probe_log(\"[probe] enter lfs_fs_grow: lfs=%p, block_count=%\" PRIu32 \", addr=%p\",\n                  (void*)lfs, block_count, (void*)&block_count);\n\n    /* Call the underlying implementation (preserve original logic) */\n    err = lfs_fs_grow_(lfs, block_count);\n\n    /* Probe: record return value and the post-call value/address of the\n       parameter to capture any changes to the object referred to (if any).\n       This helps reproduce scenarios where a callee takes the address of\n       its own parameter and that object is modified further down the call\n       chain. */\n    lfs_probe_log(\"[probe] exit lfs_fs_grow: err=%d, block_count=%\" PRIu32 \", addr=%p\",\n                  err, block_count, (void*)&block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}