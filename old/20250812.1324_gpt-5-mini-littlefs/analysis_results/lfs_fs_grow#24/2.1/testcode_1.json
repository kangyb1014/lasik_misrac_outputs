{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn the provided configuration LFS_LOCK is defined as ((void)cfg,0), so int err = LFS_LOCK(lfs->cfg); always sets err to 0. Therefore the conditional if (err) { return err; } can never be true and the return statement inside that branch is statically unreachable. This is a violation of MISRA C 2023 Rule 2.1 (unreachable code) for this project configuration.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_grow code that contains useful probe functions that print useful logs to a file \"/tmp/logs/193.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_grow as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_grow:\n```c\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_grow code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Probe logger: append human-readable traces to /tmp/logs/193.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    /* Try to create the directory once; ignore errors. */\n    static int dir_created = 0;\n    if (!dir_created) {\n        (void)mkdir(\"/tmp/logs\", 0777);\n        dir_created = 1;\n    }\n\n    FILE *f = fopen(\"/tmp/logs/193.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_fs_grow(lfs_t *lfs, lfs_size_t block_count) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Record the lock result and input state so callers can observe the\n       scenario where LFS_LOCK expands to an expression that yields 0. */\n    probe_log(\"lfs_fs_grow ENTRY: lfs=%p block_count=%\" PRIu32 \" LFS_LOCK returned %d\",\n              (void*)lfs, block_count, err);\n\n    if (err) {\n        /* Preserve original behavior: return immediately on lock error.\n           Also log that this branch was taken (in configurations where it can be). */\n        probe_log(\"lfs_fs_grow: LFS_LOCK reported err=%d, returning early\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_grow(%p, %\"PRIu32\")\", (void*)lfs, block_count);\n\n    err = lfs_fs_grow_(lfs, block_count);\n\n    LFS_TRACE(\"lfs_fs_grow -> %d\", err);\n\n    probe_log(\"lfs_fs_grow: lfs_fs_grow_ returned %d, unlocking and returning\", err);\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"lfs_fs_grow EXIT: returning %d\", err);\n    return err;\n}\n"
}