{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_TRACE macro is defined as an empty replacement. Calls such as\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\nwill expand to a null statement (a bare ';') in the compiled code. Those null statements are executed but do nothing, and removing them would not change program behaviour \u2014 therefore they constitute dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/266.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek:\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Probe helper to record control flow and state to /tmp/logs/266.txt */\nstatic void probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/266.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the failure to acquire the lock and return as original code does */\n        probe_log(\"lfs_dir_seek: LFS_LOCK failed lfs=%p err=%d\", (void*)lfs, err);\n        return err;\n    }\n\n    /* Log entry with parameter state. Cast off to unsigned long long for safe printing. */\n    probe_log(\"lfs_dir_seek ENTRY: lfs=%p dir=%p off=%llu\", (void*)lfs, (void*)dir, (unsigned long long)off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    /* Log result of the internal seek */\n    probe_log(\"lfs_dir_seek RESULT: err=%d lfs=%p dir=%p off=%llu\", err, (void*)lfs, (void*)dir, (unsigned long long)off);\n\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}