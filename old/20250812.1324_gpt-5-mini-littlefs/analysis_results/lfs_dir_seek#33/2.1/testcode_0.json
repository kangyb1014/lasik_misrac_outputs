{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nIn the provided project LFS_LOCK is defined as #define LFS_LOCK(cfg) ((void)cfg,0). Therefore err is always 0 and the branch if (err) { return err; } can never be taken. That makes the return statement unreachable in this translation unit, violating MISRA C 2023 Rule 2.1 (no unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/265.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek:\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <inttypes.h>\n\n/* Probe function to log control flow and state to /tmp/logs/265.txt */\nstatic void lfs_dir_seek_probe(const char *event, lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off, int err)\n{\n    /* Try to create directory if it doesn't exist. Ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/265.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Log a single line with event, pointers, offset and error value. */\n    fprintf(f, \"%s: lfs=%p dir=%p off=%\" PRIu32 \" err=%d\\n\",\n            event, (void*)lfs, (void*)dir, off, err);\n    fclose(f);\n}\n\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log result of LFS_LOCK and the immediate control decision. */\n    lfs_dir_seek_probe(\"after_lock\", lfs, dir, off, err);\n\n    if (err) {\n        /* If this branch is taken, record it and return the error as before. */\n        lfs_dir_seek_probe(\"branch_taken_return\", lfs, dir, off, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    /* Log just before delegating to the internal seek implementation. */\n    lfs_dir_seek_probe(\"before_seek_call\", lfs, dir, off, 0);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    /* Log the result of the internal seek and the final control path. */\n    lfs_dir_seek_probe(\"after_seek_call\", lfs, dir, off, err);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    lfs_dir_seek_probe(\"after_unlock\", lfs, dir, off, err);\n\n    return err;\n}\n"
}