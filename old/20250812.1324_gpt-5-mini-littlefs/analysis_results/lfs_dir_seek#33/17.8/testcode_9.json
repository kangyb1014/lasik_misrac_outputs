{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe value parameter 'off' (type lfs_off_t) is modified inside lfs_dir_seek_: e.g. 'off -= dir->pos;' and 'off -= diff;'. Rule 17.8 forbids modifying function parameters, so changing the scalar parameter 'off' violates the rule. (Modifications to the object pointed to by 'dir' are allowed; the pointer itself is not reassigned.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/269.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek:\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the lock failure and parameters so we can reproduce control flow */\n        FILE *f = fopen(\"/tmp/logs/269.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"lfs_dir_seek: LFS_LOCK failed -> err=%d lfs=%p dir=%p off=%llu\\n\",\n                    err, (void*)lfs, (void*)dir, (unsigned long long)off);\n            fclose(f);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    /* Probe: log entry state before calling the internal function.\n       We MUST NOT modify the function parameter 'off' here. */\n    {\n        FILE *f = fopen(\"/tmp/logs/269.txt\", \"a\");\n        if (f) {\n            unsigned long long dirpos = 0;\n            int have_dirpos = 0;\n            if (dir) {\n                /* avoid dereferencing a NULL dir */\n                dirpos = (unsigned long long)dir->pos;\n                have_dirpos = 1;\n            }\n            fprintf(f, \"ENTER lfs_dir_seek: lfs=%p dir=%p have_dirpos=%d dir->pos=%llu off=%llu\\n\",\n                    (void*)lfs, (void*)dir, have_dirpos, dirpos, (unsigned long long)off);\n            fclose(f);\n        }\n    }\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    /* Probe: log exit state after the internal call so callers can correlate\n       how the state (e.g. dir->pos) changed relative to the original 'off'.\n       Note: we do not and must not try to observe internal modification of the\n       value parameter 'off' directly (it's passed by value). This logging\n       captures external state that helps reproduce scenarios where the\n       internal implementation may have modified its local copy of 'off'. */\n    {\n        FILE *f = fopen(\"/tmp/logs/269.txt\", \"a\");\n        if (f) {\n            unsigned long long dirpos = 0;\n            int have_dirpos = 0;\n            if (dir) {\n                dirpos = (unsigned long long)dir->pos;\n                have_dirpos = 1;\n            }\n            fprintf(f, \"EXIT  lfs_dir_seek: err=%d lfs=%p dir=%p have_dirpos=%d dir->pos=%llu off=%llu\\n\",\n                    err, (void*)lfs, (void*)dir, have_dirpos, dirpos, (unsigned long long)off);\n            fclose(f);\n        }\n    }\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}