{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_dir_seek_(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) the value parameter 'off' is modified (e.g. off -= dir->pos; off -= diff;). MISRA C 2023 Rule 17.8 forbids modifying function parameters; modifying the object pointed to by a pointer parameter is allowed, but altering the value parameter 'off' is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/269.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek:\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Probe helper: append logs to /tmp/logs/269.txt. */\nstatic void lfs_dir_seek_probe_log(const char *phase, void *lfs_ptr, void *dir_ptr, uint32_t off_val, int err)\n{\n    FILE *f = NULL;\n    /* Try to ensure the directory exists. Ignore errors if it already does. */\n    (void)mkdir(\"/tmp/logs\", 0755);\n\n    f = fopen(\"/tmp/logs/269.txt\", \"a\");\n    if (!f) {\n        /* If opening the file fails, give up on logging to avoid affecting behavior. */\n        return;\n    }\n\n    time_t t = time(NULL);\n    char timestr[32] = \"\";\n    if (t != (time_t)-1) {\n        struct tm tmv;\n        if (localtime_r(&t, &tmv)) {\n            strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tmv);\n        }\n    }\n\n    fprintf(f, \"[%s] %s: lfs=%p dir=%p off=%\" PRIu32 \" err=%d\\n\",\n            timestr, phase, lfs_ptr, dir_ptr, off_val, err);\n\n    /* Dump a small hex snapshot of the dir object to capture pre/post state. */\n    if (dir_ptr) {\n        unsigned char *p = (unsigned char*)dir_ptr;\n        size_t i;\n        size_t dump = sizeof(*( (void*)0 ));\n        /* We don't know the exact type here at compile-time in this snippet, so\n           safely limit the dump to a conservative number of bytes to avoid\n           reading beyond valid memory in some contexts. */\n        (void)dump; /* suppress unused warning if sizeof expression isn't used */\n\n        /* Limit the number of bytes to print; this keeps logs readable. */\n        size_t maxbytes = 64;\n        /* Attempt to print up to maxbytes of memory starting at dir_ptr. */\n        fprintf(f, \"  dir memory (hex, up to %zu bytes):\", maxbytes);\n        for (i = 0; i < maxbytes; i++) {\n            /* Attempt to safely read bytes; if reading invalid memory would occur\n               this could crash. In typical use within the filesystem code the\n               dir pointer is valid. */\n            fprintf(f, \" %02x\", (unsigned)p[i]);\n        }\n        fprintf(f, \"\\n\");\n    }\n\n    fclose(f);\n}\n\n/* Modified wrapper that preserves original logic but adds probes. */\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    /* Probe: log entry state before calling lfs_dir_seek_. Do not modify 'off'. */\n    lfs_dir_seek_probe_log(\"ENTRY\", (void*)lfs, (void*)dir, (uint32_t)off, 0);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    /* Probe: log exit state after calling lfs_dir_seek_. This captures\n       dir object memory and the return error code. */\n    lfs_dir_seek_probe_log(\"EXIT\", (void*)lfs, (void*)dir, (uint32_t)off, err);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}