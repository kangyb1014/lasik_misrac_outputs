{
  "user_message": "An agent A claimed that the following lfs_dir_seek code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of lfs_dir_seek.\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In lfs_dir_seek_(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) the value parameter 'off' is modified (e.g. off -= dir->pos; off -= diff;). MISRA C 2023 Rule 17.8 prohibits modifying function parameters. (Pointer parameters lfs and dir are not reassigned; modifying the object pointed-to is permitted.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void lfs_dir_seek_log(const char *phase, void *lfs_ptr, void *dir_ptr,\n        uint32_t off_val, uint32_t dir_pos_val, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/269.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"[lfs_dir_seek] %s: lfs=%p dir=%p off=%\" PRIu32 \" dir->pos=%\" PRIu32 \" err=%d\\n\",\n            phase, lfs_ptr, dir_ptr, off_val, dir_pos_val, err);\n    fclose(f);\n}\n\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    /* Preserve original locking logic */\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the lock failure and return early */\n        lfs_dir_seek_log(\"lock-failed\", (void*)lfs, (void*)dir,\n                (uint32_t)off, (uint32_t)(dir ? dir->pos : 0), err);\n        return err;\n    }\n\n    /* Log entry state before calling the inner function. We do not modify 'off' here. */\n    lfs_dir_seek_log(\"enter\", (void*)lfs, (void*)dir,\n            (uint32_t)off, (uint32_t)(dir ? dir->pos : 0), 0);\n\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    /* Call the original implementation. We intentionally keep the call unchanged. */\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    /* Log state after the call so callers can observe any changes to 'dir' or other visible state. */\n    lfs_dir_seek_log(\"after-call\", (void*)lfs, (void*)dir,\n            (uint32_t)off, (uint32_t)(dir ? dir->pos : 0), err);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for lfs_dir_seek. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C 2023 Rule 17.8 forbids modifying a function parameter variable. The rule allows modification of the object referred to by a pointer parameter, but not reassignment of pointer parameters themselves and not modifying by-value scalar parameters.\n\nIn the code you provided, lfs_dir_seek (the wrapper) does not modify its parameter off, so it does not violate 17.8. However the scenario reported by agent A refers to the inner function lfs_dir_seek_ and claims it performs operations such as off -= dir->pos; off -= diff;. Those statements directly modify the by-value scalar parameter off inside lfs_dir_seek_. That is a clear violation of MISRA C 2023 Rule 17.8.\n\nI cannot inspect lfs_dir_seek_ here (its source was not included), but if it indeed contains the modifications to the parameter off as shown in the scenario, then agent A's report is correct. Recommended fixes: do not modify the parameter variable \u2014 copy the parameter into a local variable (e.g. lfs_off_t rel = off;) and modify that, or change the API to use an output parameter if the caller must observe the change, or mark the parameter const to prevent accidental modification.\n\nSummary: the wrapper lfs_dir_seek is fine; the reported violation applies to lfs_dir_seek_ if it modifies its by-value parameter off, and in that case the report is correct."
}