{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn lfs_dir_seek_ the value parameter 'off' (type lfs_off_t) is modified with 'off -= diff;'. MISRA C 2023 Rule 17.8 prohibits modifying function parameters (except objects pointed to by pointer parameters). Modifying the non\u2011pointer parameter 'off' therefore violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_seek code that contains useful probe functions that print useful logs to a file \"/tmp/logs/269.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_seek as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_seek:\n```c\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_seek code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/*\n * Probe function to log control flow and state for lfs_dir_seek.\n * Appends a single line describing the phase, pointers and the off value\n * to /tmp/logs/269.txt. Keeps original function logic unchanged.\n */\nstatic void lfs_dir_seek_probe(const char *phase, lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off, int err) {\n    FILE *f = fopen(\"/tmp/logs/269.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log phase, pointers and the off value and any error code */\n    fprintf(f, \"%s: lfs=%p dir=%p off=%\" PRIu32 \" err=%d\\n\",\n            phase, (void*)lfs, (void*)dir, off, err);\n    fclose(f);\n}\n\nint lfs_dir_seek(lfs_t *lfs, lfs_dir_t *dir, lfs_off_t off) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log that the lock failed and the parameters seen at entry */\n        lfs_dir_seek_probe(\"lock-failed\", lfs, dir, off, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_seek(%p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)dir, off);\n\n    /* Log state immediately before calling the internal function. */\n    lfs_dir_seek_probe(\"before-call\", lfs, dir, off, 0);\n\n    err = lfs_dir_seek_(lfs, dir, off);\n\n    /* Log state immediately after calling the internal function. */\n    lfs_dir_seek_probe(\"after-call\", lfs, dir, off, err);\n\n    LFS_TRACE(\"lfs_dir_seek -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}