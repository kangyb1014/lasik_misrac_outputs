{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_path_namelen calls strcspn(path, \"/\") which scans the string until a '/' or the terminating '\\0'. If the caller passes a path that is not NUL-terminated (for example: char buf[3] = {'a','b','c'} without a terminating '\\0'), strcspn will continue reading past the end of the object and thus access out-of-bounds. Similarly, if path points to a bounded buffer whose length is known but not guaranteed to contain a terminator, this use can read beyond the object. Therefore the use of strcspn here can result in accesses beyond object bounds when path is not guaranteed to be a NUL-terminated string.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/215.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: write information to /tmp/logs/215.txt\n * This helper intentionally does NOT dereference the `path` pointer\n * as a C string (no %s) to avoid introducing additional\n * out-of-bounds accesses. It logs pointer values and cfg fields\n * so an external agent can correlate the pointer address with\n * the offending buffer provided by the caller. */\nstatic void lfs_log_probe(const char *stage, void *lfs, void *file,\n        const char *path, int flags, const void *cfg, const void *cfg_buffer,\n        const void *cfg_attrs, unsigned long cfg_attr_count, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/215.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"[lfs_file_opencfg] stage=%s\\n\", stage);\n    fprintf(f, \"  lfs=%p, file=%p, path=%p, flags=0x%x, cfg=%p\\n\",\n            lfs, file, (const void*)path, flags, cfg);\n    fprintf(f, \"  cfg->buffer=%p, cfg->attrs=%p, cfg->attr_count=%lu\\n\",\n            cfg_buffer, cfg_attrs, cfg_attr_count);\n\n    /* Do not attempt to print *path as a C-string here. If callers\n     * pass non-NUL-terminated buffers this would cause OOB reads.\n     * Agents reproducing the issue can correlate the logged pointer\n     * address with the buffer they passed in to demonstrate the\n     * strcspn / NUL-termination issue. */\n\n    if (err >= 0) {\n        fprintf(f, \"  result=%d\\n\", err);\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the early-return result and parameters */\n        lfs_log_probe(\"LOCK_FAILED\", lfs, file, path, flags,\n                cfg, cfg ? cfg->buffer : NULL, cfg ? cfg->attrs : NULL,\n                cfg ? (unsigned long)cfg->attr_count : 0, err);\n        return err;\n    }\n\n    /* Log entry with safe information (no %s on path) */\n    lfs_log_probe(\"ENTRY\", lfs, file, path, flags,\n            cfg, cfg ? cfg->buffer : NULL, cfg ? cfg->attrs : NULL,\n            cfg ? (unsigned long)cfg->attr_count : 0, -1);\n\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Log immediately before calling the underlying implementation */\n    lfs_log_probe(\"BEFORE_CALL\", lfs, file, path, flags,\n            cfg, cfg ? cfg->buffer : NULL, cfg ? cfg->attrs : NULL,\n            cfg ? (unsigned long)cfg->attr_count : 0, -1);\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    /* Log the result and parameters after the call */\n    lfs_log_probe(\"EXIT\", lfs, file, path, flags,\n            cfg, cfg ? cfg->buffer : NULL, cfg ? cfg->attrs : NULL,\n            cfg ? (unsigned long)cfg->attr_count : 0, err);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}