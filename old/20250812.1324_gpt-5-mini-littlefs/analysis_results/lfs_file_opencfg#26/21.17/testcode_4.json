{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. lfs_cache_zero calls memset(pcache->buffer, 0xff, lfs->cfg->cache_size) without checking that pcache->buffer is non-NULL and that the object pointed to by pcache->buffer is at least lfs->cfg->cache_size bytes. For example, if a caller supplies a lfs_file_config with buffer pointing to a smaller buffer than lfs->cfg->cache_size (or pcache->buffer is NULL in other code paths), this memset will write beyond the bounds of the object and thus violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/215.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nstatic void lfs_probe_log(const char *stage, lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags, const struct lfs_file_config *cfg, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/215.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Basic call information */\n    fprintf(f, \"[%s] lfs_file_opencfg entry: stage=%s lfs=%p file=%p path=%s flags=0x%x cfg=%p err=%d\\n\",\n            __func__, stage, (void*)lfs, (void*)file, (path ? path : \"(null)\"), flags, (void*)cfg, err);\n\n    if (cfg) {\n        fprintf(f, \"  cfg->buffer=%p, cfg->attrs=%p, cfg->attr_count=%llu\\n\",\n                (void*)cfg->buffer, (void*)cfg->attrs,\n                (unsigned long long)cfg->attr_count);\n    } else {\n        fprintf(f, \"  cfg is NULL\\n\");\n    }\n\n    if (lfs && lfs->cfg) {\n        /* print cache_size or 0 if not available */\n        fprintf(f, \"  lfs->cfg=%p, cache_size=%llu\\n\",\n                (void*)lfs->cfg, (unsigned long long)lfs->cfg->cache_size);\n    } else if (lfs) {\n        fprintf(f, \"  lfs->cfg is NULL\\n\");\n    }\n\n    fflush(f);\n    fclose(f);\n}\n\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the early error path */\n        lfs_probe_log(\"lock_failed\", lfs, file, path, flags, cfg, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Probe before delegating to the internal implementation */\n    lfs_probe_log(\"before_internal\", lfs, file, path, flags, cfg, 0);\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    /* Probe after the internal call to capture returned error and state */\n    lfs_probe_log(\"after_internal\", lfs, file, path, flags, cfg, err);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}