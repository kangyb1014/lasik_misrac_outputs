{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro is defined as ((void)cfg,0), so int err = LFS_LOCK(lfs->cfg); sets err to 0 constant. The subsequent if (err) { return err; } condition is always false, making the return statement unreachable in this build/configuration.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/209.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <inttypes.h>\n\n/* Probe logging helper\n * Appends diagnostic lines to /tmp/logs/209.txt. Designed to be lightweight and\n * not to alter original logic. */\nstatic void probe_log(const char *tag, lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags, const struct lfs_file_config *cfg, int err) {\n    FILE *f = fopen(\"/tmp/logs/209.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    fprintf(f, \"[%s] lfs=%p file=%p path=%p\\n\", tag, (void*)lfs, (void*)file, (void*)path);\n    if (path) {\n        /* print path with possible non-printable protection is out of scope; keep simple */\n        fprintf(f, \"  path_str=\\\"%s\\\"\\n\", path);\n    }\n    fprintf(f, \"  flags=0x%x err=%d\\n\", flags, err);\n    if (cfg) {\n        fprintf(f, \"  cfg=%p .buffer=%p .attrs=%p .attr_count=%\" PRIu32 \"\\n\",\n                (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    } else {\n        fprintf(f, \"  cfg=(null)\\n\");\n    }\n\n    fclose(f);\n}\n\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    /* Preserve original lock call exactly */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: record result of LFS_LOCK and surrounding state. This will help\n     * reproduce the situation where LFS_LOCK evaluates to a constant 0 and\n     * the subsequent if (err) branch is never taken. */\n    probe_log(\"after_LFS_LOCK\", lfs, file, path, flags, cfg, err);\n\n    if (err) {\n        /* Log the fact we're taking the early return due to lock failure. */\n        probe_log(\"early_return_due_to_lock\", lfs, file, path, flags, cfg, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Probe: about to call the internal implementation. */\n    probe_log(\"before_lfs_file_opencfg_\", lfs, file, path, flags, cfg, -1);\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    /* Probe: record the return value from internal implementation. */\n    probe_log(\"after_lfs_file_opencfg_\", lfs, file, path, flags, cfg, err);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final probe before returning to capture final state. */\n    probe_log(\"final_return\", lfs, file, path, flags, cfg, err);\n\n    return err;\n}\n"
}