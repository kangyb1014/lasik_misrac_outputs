{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts a non-const lfs_file_t * to a non-const struct lfs_mlist * when calling lfs_mlist_isopen. The operation is an assertion/check (should not modify the object), so the pointer should be to a const-qualified type. This usage therefore violates the intent of MISRA C 2023 Rule 8.13. For example, if lfs_mlist_isopen does not modify the mlist object, its prototype should be changed to accept a const struct lfs_mlist * and the call should be: lfs_mlist_isopen(lfs->mlist, (const struct lfs_mlist *)file) (or better, use a proper typed const pointer without casts).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/211.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n\n    /* Probe logging: record the pointers and the cast that is performed\n       to provide evidence for the pointer-to-const concern described in\n       the violation scenario. Logs appended to /tmp/logs/211.txt. */\n    {\n        FILE *probe_fp = fopen(\"/tmp/logs/211.txt\", \"a\");\n        if (probe_fp) {\n            fprintf(probe_fp, \"--- lfs_file_opencfg probe ---\\n\");\n            fprintf(probe_fp, \"lfs=%p, file=%p, path=\\\"%s\\\", flags=0x%x\\n\",\n                    (void*)lfs, (void*)file, path ? path : \"(null)\", (unsigned)flags);\n            if (cfg) {\n                fprintf(probe_fp, \"cfg=%p, cfg->buffer=%p, cfg->attrs=%p, cfg->attr_count=%\" PRIu32 \"\\n\",\n                        (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n            } else {\n                fprintf(probe_fp, \"cfg=(null)\\n\");\n            }\n            fprintf(probe_fp, \"mlist pointer = %p\\n\", (void*)lfs->mlist);\n            fprintf(probe_fp, \"About to call lfs_mlist_isopen(mlist=%p, (struct lfs_mlist*)file=%p)\\n\",\n                    (void*)lfs->mlist, (void*)file);\n            fclose(probe_fp);\n        }\n    }\n\n    /* Capture the result of the check once, log it, and then assert as\n       before. This preserves the original control flow while providing\n       evidence of the cast and the outcome of the check. */\n    int mlist_is_open = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    {\n        FILE *probe_fp = fopen(\"/tmp/logs/211.txt\", \"a\");\n        if (probe_fp) {\n            fprintf(probe_fp, \"lfs_mlist_isopen returned %d for file=%p (treated as struct lfs_mlist*)\\n\",\n                    mlist_is_open, (void*)file);\n            if (mlist_is_open) {\n                fprintf(probe_fp, \"NOTE: Assertion will fail (file appears open in mlist)\\n\");\n            } else {\n                fprintf(probe_fp, \"Assertion should pass (file not open in mlist)\\n\");\n            }\n            fprintf(probe_fp, \"--- end probe ---\\n\\n\");\n            fclose(probe_fp);\n        }\n    }\n\n    LFS_ASSERT(!mlist_is_open);\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}