{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.14.\nHere is the comment from the agent.\n<violation scenario>\nIn the fragment if (sufflen == 1 && memcmp(suffix, \".\", 1) == 0) { ... } else if (sufflen == 2 && memcmp(suffix, \"..\", 2) == 0) { ... } the code uses memcmp to compare characters from 'suffix', which is a pointer into the null-terminated path string, against the string literals \".\" and \"..\". This is effectively using memcmp to compare null-terminated strings (or portions thereof), which violates MISRA C 2023 Rule 21.14. Prefer explicit character comparisons (e.g. suffix[0]=='.' and suffix[1]=='.') or a string function intended for N-character string comparisons instead of memcmp.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_opencfg code that contains useful probe functions that print useful logs to a file \"/tmp/logs/214.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_opencfg as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_opencfg:\n```c\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_opencfg code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe function to log control flow and state to /tmp/logs/214.txt.\n   This attempts to capture the scenario where a suffix of a path is\n   compared against \".\" or \"..\" (which elsewhere was reported to use\n   memcmp). The probe uses explicit character inspection and avoids\n   using memcmp so as not to introduce the same violation. */\nstatic void lfs_log_214_probe(const char *path) {\n    FILE *f = fopen(\"/tmp/logs/214.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    if (path == NULL) {\n        fprintf(f, \"PROBE: path=NULL\\n\");\n        fclose(f);\n        return;\n    }\n\n    /* Find last path component (suffix) by scanning for last '/'. */\n    const char *suffix = path;\n    const char *p = path;\n    for (; *p != '\\0'; p++) {\n        if (*p == '/') {\n            suffix = p + 1;\n        }\n    }\n\n    /* Compute suffix length without using library string functions. */\n    size_t sufflen = 0;\n    const char *q = suffix;\n    while (*q != '\\0') {\n        sufflen++;\n        q++;\n    }\n\n    /* Inspect up to first two characters safely. */\n    int first = (sufflen > 0) ? (int)(unsigned char)suffix[0] : -1;\n    int second = (sufflen > 1) ? (int)(unsigned char)suffix[1] : -1;\n\n    /* Conditions that would match '.' and '..' using explicit checks. */\n    int is_dot = (sufflen == 1 && first == (int)'.');\n    int is_dotdot = (sufflen == 2 && first == (int)'.' && second == (int)'.');\n\n    /* Truncate path output to avoid huge logs; print suffix up to 128 chars. */\n    char suffix_preview[129];\n    size_t i;\n    for (i = 0; i < 128 && suffix[i] != '\\0'; i++) {\n        suffix_preview[i] = suffix[i];\n    }\n    suffix_preview[i] = '\\0';\n\n    fprintf(f, \"PROBE: path_ptr=%p path_preview=\\\"%s\\\" suffix_ptr=%p suffix_preview=\\\"%s\\\" sufflen=%zu first=%d second=%d is_dot=%d is_dotdot=%d\\n\",\n            (const void*)path, path, (const void*)suffix, suffix_preview, sufflen, first, second, is_dot, is_dotdot);\n\n    fclose(f);\n}\n\nint lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,\n        const char *path, int flags,\n        const struct lfs_file_config *cfg) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Insert probe after acquiring lock to capture stable state. */\n    lfs_log_214_probe(path);\n\n    LFS_TRACE(\"lfs_file_opencfg(%p, %p, \\\"%s\\\", %x, %p {\"\n                 \".buffer=%p, .attrs=%p, .attr_count=%\"PRIu32\"})\",\n            (void*)lfs, (void*)file, path, (unsigned)flags,\n            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);\n    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_opencfg_(lfs, file, path, flags, cfg);\n\n    LFS_TRACE(\"lfs_file_opencfg -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}