{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement \"(void)lfs;\" is an evaluated expression statement with no side\u2011effects. Removing it does not change program behaviour (it only suppresses an \"unused parameter\" diagnostic), so it meets the definition of dead code and therefore violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/274.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_tell:\n```c\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_tell code.\n",
  "test_code": "/* Added probe logging to capture control flow and state for lfs_dir_tell */\n#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Note: keep includes minimal and local to this snippet. The real project\n * may already include these headers.\n */\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/274.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fflush(f);\n    fclose(f);\n}\n\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    /* Log entry and pointers to capture the call site and parameters */\n    probe_log(\"ENTER lfs_dir_tell: lfs=%p, dir=%p\", (void*)lfs, (void*)dir);\n\n    int err = LFS_LOCK(lfs->cfg);\n    probe_log(\"LFS_LOCK returned: %d\", err);\n    if (err) {\n        probe_log(\"lfs_dir_tell early return due to lock error: %d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n    probe_log(\"lfs_dir_tell_ returned: %lld\", (long long)res);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    probe_log(\"About to call LFS_UNLOCK for lfs=%p\", (void*)lfs);\n\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"EXIT lfs_dir_tell: returning %lld\", (long long)res);\n    return res;\n}\n"
}