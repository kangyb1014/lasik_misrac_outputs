{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nGiven the provided macro definition LFS_LOCK(cfg) ((void)cfg,0), the expression LFS_LOCK(lfs->cfg) always yields 0. Thus the assignment int err = LFS_LOCK(lfs->cfg); followed by if (err) { return err; } will never take the branch \u2014 the assignment and conditional are executed but their removal (or replacing them with no-op) would not change program behaviour in this configuration, so this constitutes dead code and violates MISRA C 2023 Rule 2.2. (Note: if LFS_LOCK is replaced in other build configurations by a real locking function that can return non-zero or has side-effects, then the code would not be dead in those builds.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/274.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_tell:\n```c\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_tell code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helper: append formatted messages to /tmp/logs/274.txt.\n   This preserves original function behavior even if logging fails. */\nstatic void lfs_log_probe(const char *fmt, ...)\n{\n    /* Ensure log directory exists. Ignore any failure to avoid changing program behavior. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/274.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Write a simple header to make entries easier to scan. */\n    (void)fprintf(f, \"[lfs_dir_tell probe] \");\n    (void)vfprintf(f, fmt, ap);\n    (void)fprintf(f, \"\\n\");\n    va_end(ap);\n\n    (void)fclose(f);\n}\n\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: record result of LFS_LOCK and context. This helps demonstrate\n       the scenario where the macro always yields 0 and the conditional is never taken. */\n    lfs_log_probe(\"LFS_LOCK returned %d; lfs=%p, dir=%p, cfg=%p\",\n                  err, (void*)lfs, (void*)dir, (void*)lfs->cfg);\n\n    if (err) {\n        lfs_log_probe(\"if (err) branch taken: returning err=%d\", err);\n        return err;\n    }\n    lfs_log_probe(\"if (err) branch NOT taken (err==0); continuing\");\n\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    lfs_log_probe(\"lfs_dir_tell_ returned res=%lld\", (long long)res);\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n\n    lfs_log_probe(\"Calling LFS_UNLOCK for cfg=%p\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_log_probe(\"Returned from LFS_UNLOCK\");\n\n    return res;\n}\n"
}