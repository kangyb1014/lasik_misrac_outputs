{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_TRACE macro is defined as an empty replacement, so all call sites like LFS_TRACE(\"lfs_dir_tell(%p, %p)\", ...) expand to an empty token sequence leaving a null statement (';') in the compiled code. Those null statements are executed but have no effect and could be removed without changing program behaviour, i.e. they constitute dead code (example: the two LFS_TRACE calls in lfs_dir_tell).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/274.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_tell:\n```c\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_tell code.\n",
  "test_code": "#include <stdio.h>\n#include <sys/stat.h>\n#include <errno.h>\n\n/* Helper probe functions to log control flow and state for lfs_dir_tell.\n   Writes logs to /tmp/logs/274.txt. These functions intentionally do not\n   change any program logic; they only append information useful for\n   reproducing the reported violation scenario. */\nstatic void lfs_log_ensure_dir(void) {\n    struct stat st;\n    if (stat(\"/tmp/logs\", &st) != 0) {\n        /* attempt to create directory if it doesn't exist; ignore errors */\n        (void)mkdir(\"/tmp/logs\", 0755);\n    }\n}\n\nstatic void lfs_log_printf(const char *fmt, ...) {\n    lfs_log_ensure_dir();\n    FILE *f = fopen(\"/tmp/logs/274.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\n/* Modified lfs_dir_tell with probes inserted where LFS_TRACE was originally\n   used. The original logic is preserved: locking, calling the internal\n   implementation, unlocking, and returning the result. */\n#include <stdarg.h>\n\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    /* Probe replacing LFS_TRACE(\"lfs_dir_tell(%p, %p)\", ...) */\n    lfs_log_printf(\"PROBE: lfs_dir_tell ENTER: lfs=%p, dir=%p\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    /* Probe replacing LFS_TRACE(\"lfs_dir_tell -> %"
}