{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nFunction parameters 'lfs_t *lfs' and 'lfs_dir_t *dir' are only read (lfs_dir_tell calls LFS_LOCK(lfs->cfg) and lfs_dir_tell_ uses (void)lfs; returns dir->pos) and neither the function nor the helper modify the objects pointed to. Therefore both parameters could be declared as pointers to const (e.g. 'const lfs_t *lfs' and 'const lfs_dir_t *dir'), but they are not. This violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/275.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_tell:\n```c\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_tell code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe logger for lfs_dir_tell to record control flow and state for debugging.\n   Writes to /tmp/logs/275.txt. Keeps original logic intact and only adds logging. */\nstatic void lfs_dir_tell_probe(const lfs_t *lfs, const lfs_dir_t *dir,\n                               const char *stage, int err, int have_res, lfs_soff_t res)\n{\n    FILE *f = fopen(\"/tmp/logs/275.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log stage, pointer values and error/result information. */\n    fprintf(f, \"%s: lfs=%p dir=%p err=%d\", stage, (const void*)lfs, (const void*)dir, err);\n    if (have_res) {\n        /* Use fixed-width conversion for portability. */\n        fprintf(f, \" res=%\" PRId64, (int64_t)res);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Log after attempting the lock so callers can see the lock outcome and pointers. */\n    lfs_dir_tell_probe(lfs, dir, \"lfs_dir_tell:after_lock_attempt\", err, 0, 0);\n    if (err) {\n        /* Log the early return path that demonstrates the function returning the lock error. */\n        lfs_dir_tell_probe(lfs, dir, \"lfs_dir_tell:lock_failed_return\", err, 0, 0);\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    /* Log immediately before calling the helper to capture the inputs. */\n    lfs_dir_tell_probe(lfs, dir, \"lfs_dir_tell:before_lfs_dir_tell_\", 0, 0, 0);\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    /* Log the result returned by the helper and pointers to show that inputs were only read. */\n    lfs_dir_tell_probe(lfs, dir, \"lfs_dir_tell:after_lfs_dir_tell_\", 0, 1, res);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log before returning to capture the final state and returned value. */\n    lfs_dir_tell_probe(lfs, dir, \"lfs_dir_tell:before_return\", 0, 1, res);\n    return res;\n}\n"
}