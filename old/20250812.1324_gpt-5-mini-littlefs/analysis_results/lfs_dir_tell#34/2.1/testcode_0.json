{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) is defined as ((void)cfg, 0), so err is a compile-time constant 0. Therefore the condition if (err) is always false and the return inside that branch is unreachable in the provided project configuration, violating MISRA C 2023 Rule 2.1 (no unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_dir_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/273.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_dir_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_dir_tell:\n```c\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_dir_tell code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <inttypes.h>\n\n/*\n * Probe logging helpers writing to /tmp/logs/273.txt\n * These are non-intrusive and preserve original function logic.\n */\nstatic FILE *probe_file(void) {\n    static FILE *f = NULL;\n    if (f == NULL) {\n        /* Try to create directory; ignore errors if it already exists */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/273.txt\", \"a\");\n        if (f != NULL) {\n            /* line buffered to flush on newline */\n            (void)setvbuf(f, NULL, _IOLBF, 0);\n        }\n    }\n    return f;\n}\n\nstatic void probe_log(const char *fmt, ...) {\n    FILE *f = probe_file();\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    (void)fputc('\\n', f);\n    va_end(ap);\n    (void)fflush(f);\n}\n\n/* Original function with inserted probes. */\nlfs_soff_t lfs_dir_tell(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: record entry, pointers and lock result */\n    probe_log(\"lfs_dir_tell: ENTRY lfs=%p dir=%p LFS_LOCK returned err=%d\",\n              (void*)lfs, (void*)dir, err);\n\n    if (err) {\n        /* Probe: record unreachable (in given configuration) branch if taken */\n        probe_log(\"lfs_dir_tell: BRANCH err!=0 taken, returning err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_tell(%p, %p)\", (void*)lfs, (void*)dir);\n\n    lfs_soff_t res = lfs_dir_tell_(lfs, dir);\n\n    /* Probe: record result of lfs_dir_tell_ */\n    probe_log(\"lfs_dir_tell: after lfs_dir_tell_ res=%\" PRId32, res);\n\n    LFS_TRACE(\"lfs_dir_tell -> %\"PRId32, res);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Probe: record exit */\n    probe_log(\"lfs_dir_tell: EXIT returning res=%\" PRId32, res);\n\n    return res;\n}\n"
}