{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe first parameter is declared as lfs_t *lfs even though the function only appears to read from the lfs object (calls like lfs_ctz_index(lfs, \u2026) and lfs_bd_read(lfs, \u2026) suggest read-only usage). If the function does not modify the lfs object, the parameter should be const-qualified (const lfs_t *lfs). Declaring it non-const when it can be const violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_ctz_traverse code that contains useful probe functions that print useful logs to a file \"/tmp/logs/11.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_ctz_traverse as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_ctz_traverse:\n```c\nstatic int lfs_ctz_traverse(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        int (*cb)(void*, lfs_block_t), void *data) {\n    if (size == 0) {\n        return 0;\n    }\n\n    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n\n    while (true) {\n        int err = cb(data, head);\n        if (err) {\n            return err;\n        }\n\n        if (index == 0) {\n            return 0;\n        }\n\n        lfs_block_t heads[2];\n        int count = 2 - (index & 1);\n        err = lfs_bd_read(lfs,\n                pcache, rcache, count*sizeof(head),\n                head, 0, &heads, count*sizeof(head));\n        heads[0] = lfs_fromle32(heads[0]);\n        heads[1] = lfs_fromle32(heads[1]);\n        if (err) {\n            return err;\n        }\n\n        for (int i = 0; i < count-1; i++) {\n            err = cb(data, heads[i]);\n            if (err) {\n                return err;\n            }\n        }\n\n        head = heads[count-1];\n        index -= count;\n    }\n}\n```\n</target_code>\nPlease provide the modified lfs_ctz_traverse code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helper - appends logs to /tmp/logs/11.txt */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/11.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_ctz_traverse(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        int (*cb)(void*, lfs_block_t), void *data) {\n    lfs_probe_log(\"ENTER lfs_ctz_traverse: lfs=%p pcache=%p rcache=%p head=%lu size=%lu\",\n            (void*)lfs, (const void*)pcache, (void*)rcache, (unsigned long)head, (unsigned long)size);\n\n    if (size == 0) {\n        lfs_probe_log(\"EXIT lfs_ctz_traverse: size==0 -> return 0\");\n        return 0;\n    }\n\n    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n    lfs_probe_log(\"computed index from lfs_ctz_index: index=%ld\", (long)index);\n\n    while (true) {\n        lfs_probe_log(\"calling cb(data=%p, head=%lu)\", data, (unsigned long)head);\n        int err = cb(data, head);\n        lfs_probe_log(\"cb returned err=%d for head=%lu\", err, (unsigned long)head);\n        if (err) {\n            lfs_probe_log(\"EXIT lfs_ctz_traverse: callback error -> return %d\", err);\n            return err;\n        }\n\n        if (index == 0) {\n            lfs_probe_log(\"index==0 -> traversal complete -> return 0\");\n            return 0;\n        }\n\n        lfs_block_t heads[2];\n        int count = 2 - (index & 1);\n        lfs_probe_log(\"about to lfs_bd_read: count=%d head=%lu read_bytes=%lu\",\n                count, (unsigned long)head, (unsigned long)(count * sizeof(head)));\n        err = lfs_bd_read(lfs,\n                pcache, rcache, count*sizeof(head),\n                head, 0, &heads, count*sizeof(head));\n        lfs_probe_log(\"lfs_bd_read returned err=%d\", err);\n\n        /* convert from little-endian as original code */\n        heads[0] = lfs_fromle32(heads[0]);\n        heads[1] = lfs_fromle32(heads[1]);\n        lfs_probe_log(\"read heads after fromle32: heads[0]=%lu heads[1]=%lu\",\n                (unsigned long)heads[0], (unsigned long)heads[1]);\n\n        if (err) {\n            lfs_probe_log(\"EXIT lfs_ctz_traverse: bd_read error -> return %d\", err);\n            return err;\n        }\n\n        for (int i = 0; i < count-1; i++) {\n            lfs_probe_log(\"calling cb for heads[%d]=%lu\", i, (unsigned long)heads[i]);\n            err = cb(data, heads[i]);\n            lfs_probe_log(\"cb returned err=%d for heads[%d]=%lu\", err, i, (unsigned long)heads[i]);\n            if (err) {\n                lfs_probe_log(\"EXIT lfs_ctz_traverse: callback error -> return %d\", err);\n                return err;\n            }\n        }\n\n        head = heads[count-1];\n        index -= count;\n        lfs_probe_log(\"updated head=%lu index=%ld -> continue loop\", (unsigned long)head, (long)index);\n    }\n}\n"
}