{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe callback parameter cb is declared as int (*cb)(void*, lfs_block_t) and lfs_ctz_traverse takes void *data and passes it to cb (int err = cb(data, head);). The function does not modify data, so the context pointer could and should be const-qualified. Thus the non-const void* used for the callback/context violates MISRA C 2023 Rule 8.13. A fix is to change the callback and parameter to use const void * (e.g. int (*cb)(const void*, lfs_block_t) and const void *data) and adjust callers accordingly.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_ctz_traverse code that contains useful probe functions that print useful logs to a file \"/tmp/logs/11.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_ctz_traverse as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_ctz_traverse:\n```c\nstatic int lfs_ctz_traverse(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        int (*cb)(void*, lfs_block_t), void *data) {\n    if (size == 0) {\n        return 0;\n    }\n\n    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n\n    while (true) {\n        int err = cb(data, head);\n        if (err) {\n            return err;\n        }\n\n        if (index == 0) {\n            return 0;\n        }\n\n        lfs_block_t heads[2];\n        int count = 2 - (index & 1);\n        err = lfs_bd_read(lfs,\n                pcache, rcache, count*sizeof(head),\n                head, 0, &heads, count*sizeof(head));\n        heads[0] = lfs_fromle32(heads[0]);\n        heads[1] = lfs_fromle32(heads[1]);\n        if (err) {\n            return err;\n        }\n\n        for (int i = 0; i < count-1; i++) {\n            err = cb(data, heads[i]);\n            if (err) {\n                return err;\n            }\n        }\n\n        head = heads[count-1];\n        index -= count;\n    }\n}\n```\n</target_code>\nPlease provide the modified lfs_ctz_traverse code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/*\n * Probe/log helper: append a formatted message to /tmp/logs/11.txt.\n * Kept minimal and separate from logic to preserve original behavior.\n */\nstatic void lfs_ctz_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/11.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int lfs_ctz_traverse(lfs_t *lfs,\n        const lfs_cache_t *pcache, lfs_cache_t *rcache,\n        lfs_block_t head, lfs_size_t size,\n        int (*cb)(void*, lfs_block_t), void *data) {\n    lfs_ctz_log(\"ENTER lfs_ctz_traverse: size=%llu head=%llu cb=%p data=%p\",\n            (unsigned long long)size, (unsigned long long)head, (void*)cb, data);\n\n    if (size == 0) {\n        lfs_ctz_log(\"size==0 -> return 0\");\n        return 0;\n    }\n\n    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});\n    lfs_ctz_log(\"computed index=%lld (for size-1=%llu)\", (long long)index, (unsigned long long)(size-1));\n\n    while (true) {\n        lfs_ctz_log(\"about to call cb: data=%p head=%llu index=%lld\",\n                data, (unsigned long long)head, (long long)index);\n        int err = cb(data, head);\n        lfs_ctz_log(\"cb returned err=%d for head=%llu\", err, (unsigned long long)head);\n        if (err) {\n            lfs_ctz_log(\"cb returned error -> return %d\", err);\n            return err;\n        }\n\n        if (index == 0) {\n            lfs_ctz_log(\"index==0 -> return 0\");\n            return 0;\n        }\n\n        lfs_block_t heads[2];\n        int count = 2 - (index & 1);\n        lfs_ctz_log(\"reading heads: head=%llu count=%d index=%lld\",\n                (unsigned long long)head, count, (long long)index);\n\n        err = lfs_bd_read(lfs,\n                pcache, rcache, count*sizeof(head),\n                head, 0, &heads, count*sizeof(head));\n\n        /* Log raw values before endian conversion if helpful */\n        lfs_ctz_log(\"lfs_bd_read returned err=%d\", err);\n        if (err) {\n            lfs_ctz_log(\"lfs_bd_read error -> return %d\", err);\n            return err;\n        }\n\n        heads[0] = lfs_fromle32(heads[0]);\n        heads[1] = lfs_fromle32(heads[1]);\n        lfs_ctz_log(\"heads after le->host: heads[0]=%llu heads[1]=%llu\",\n                (unsigned long long)heads[0], (unsigned long long)heads[1]);\n\n        for (int i = 0; i < count-1; i++) {\n            lfs_ctz_log(\"about to call cb in loop: i=%d data=%p head=%llu\", i, data, (unsigned long long)heads[i]);\n            err = cb(data, heads[i]);\n            lfs_ctz_log(\"cb(loop) returned err=%d for head=%llu\", err, (unsigned long long)heads[i]);\n            if (err) {\n                lfs_ctz_log(\"cb(loop) returned error -> return %d\", err);\n                return err;\n            }\n        }\n\n        head = heads[count-1];\n        lfs_ctz_log(\"next head=%llu\", (unsigned long long)head);\n        index -= count;\n        lfs_ctz_log(\"next index=%lld\", (long long)index);\n    }\n}\n"
}