{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer member 'struct lfs1 *lfs1;' is not const-qualified. If this pointer is only used for read-only access (i.e. lfs_t does not modify the pointed-to lfs1 object through this pointer), then per MISRA C 2023 Rule 8.13 it should be declared as 'const struct lfs1 *lfs1;'. Without evidence that the pointee is modified, the non-const declaration constitutes a violation (use const whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_removeattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/243.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_removeattr as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_removeattr:\n```c\nint lfs_removeattr(lfs_t *lfs, const char *path, uint8_t type) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_removeattr(%p, \\\"%s\\\", %\"PRIu8\")\", (void*)lfs, path, type);\n\n    err = lfs_removeattr_(lfs, path, type);\n\n    LFS_TRACE(\"lfs_removeattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_removeattr code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe helper functions to log control flow and relevant state to a file.\n   These do not modify program state, only append diagnostic information to\n   /tmp/logs/243.txt. They are intentionally minimal and preserve the logic\n   and ordering of the original lfs_removeattr function. */\n\nstatic void probe_log_state(const char *stage, lfs_t *lfs, const char *path, uint8_t type, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/243.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    /* Log the stage, lfs pointer, provided path, type, and last error code. */\n    fprintf(f, \"[lfs_removeattr] stage=%s\\n\", stage);\n    fprintf(f, \"[lfs_removeattr] lfs=%p\\n\", (void*)lfs);\n    fprintf(f, \"[lfs_removeattr] path=%s\\n\", (path != NULL) ? path : \"(null)\");\n    fprintf(f, \"[lfs_removeattr] type=%\" PRIu8 \"\\n\", type);\n    fprintf(f, \"[lfs_removeattr] err=%d\\n\", err);\n\n    /* Try to log the lfs->cfg pointer value (safe because original code\n       accesses lfs->cfg for locking). If lfs is NULL we skip accessing it. */\n    if (lfs != NULL) {\n        /* Use a volatile read to avoid any compiler optimization that might\n           otherwise attempt to transform accesses (keeps this strictly read-only). */\n        volatile void *cfgptr = (volatile void *)lfs->cfg;\n        fprintf(f, \"[lfs_removeattr] lfs->cfg=%p\\n\", (void*)cfgptr);\n    }\n\n    fprintf(f, \"---\\n\");\n    fclose(f);\n}\n\nint lfs_removeattr(lfs_t *lfs, const char *path, uint8_t type)\n{\n    /* Preserve original lock ordering and behavior. */\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log the early-return error condition. */\n        probe_log_state(\"lock_failed\", lfs, path, type, err);\n        return err;\n    }\n\n    /* Log state immediately after acquiring the lock. */\n    probe_log_state(\"after_lock\", lfs, path, type, 0);\n\n    LFS_TRACE(\"lfs_removeattr(%p, \\\"%s\\\", %\"PRIu8\")\", (void*)lfs, path, type);\n\n    /* Call the underlying implementation and capture its return value. */\n    err = lfs_removeattr_(lfs, path, type);\n\n    /* Log the state after calling the underlying function and before unlock. */\n    probe_log_state(\"after_call_before_unlock\", lfs, path, type, err);\n\n    LFS_TRACE(\"lfs_removeattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final log after unlock to capture the complete control flow for this call. */\n    probe_log_state(\"after_unlock\", lfs, path, type, err);\n\n    return err;\n}\n"
}