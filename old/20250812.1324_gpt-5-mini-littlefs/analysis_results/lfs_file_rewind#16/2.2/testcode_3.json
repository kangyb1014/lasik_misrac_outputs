{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg), which yields no side-effects. The statement LFS_UNLOCK(lfs->cfg); therefore executes an expression that does nothing; removing that statement would not change program behaviour in the given project configuration. This constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/130.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_rewind:\n```c\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_rewind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Probe logging helpers. These preserve original behavior and only log\n   control flow/state to /tmp/logs/130.txt for auditing the LFS_UNLOCK\n   behavior. They intentionally take generic void* pointers so they do\n   not depend on internal type definitions. */\nstatic void lfs_probe_log_raw(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/130.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nstatic void lfs_probe_log_event(const char *event, const void *lfs, const void *file, const void *cfg, int err)\n{\n    /* Log a compact record with event name, pointers and error code. */\n    lfs_probe_log_raw(\"%s: lfs=%p file=%p cfg=%p err=%d\", event, lfs, file, cfg, err);\n}\n\n/* Modified lfs_file_rewind with probes added. Original logic preserved. */\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log failed lock path */\n        lfs_probe_log_event(\"lfs_file_rewind: lock_failed\", (void*)lfs, (void*)file, (void*)lfs->cfg, err);\n        return err;\n    }\n\n    /* Log successful lock and entry to function */\n    lfs_probe_log_event(\"lfs_file_rewind: locked\", (void*)lfs, (void*)file, (void*)lfs->cfg, 0);\n\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    /* Log result of internal rewind operation before unlocking */\n    lfs_probe_log_event(\"lfs_file_rewind: before_unlock\", (void*)lfs, (void*)file, (void*)lfs->cfg, err);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n\n    /* Keep original unlock call (may be a no-op macro). Log immediately\n       before and after to capture the fact that unlock was invoked and\n       that no observable state change occurred in this build/config. */\n    lfs_probe_log_event(\"lfs_file_rewind: unlock_invoked\", (void*)lfs, (void*)file, (void*)lfs->cfg, err);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log_event(\"lfs_file_rewind: unlock_returned\", (void*)lfs, (void*)file, (void*)lfs->cfg, err);\n\n    return err;\n}\n"
}