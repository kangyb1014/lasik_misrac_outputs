{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg,0). The subexpression (void)cfg has no side\u2011effects and is executed only to discard the parameter; removing that expression (or replacing LFS_LOCK(cfg) with 0) does not change program behaviour. For example in lfs_file_rewind(), err is always assigned 0 and the (void)cfg cast is superfluous. Because an operation is executed whose removal would not affect behavior, this constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/130.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_rewind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_rewind:\n```c\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_rewind code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append logs about control flow and state to /tmp/logs/130.txt */\nstatic void lfs_log_state(const char *stage, lfs_t *lfs, lfs_file_t *file, int err) {\n    FILE *f = fopen(\"/tmp/logs/130.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log the stage, pointers, and error value. This helps demonstrate that\n       LFS_LOCK(lfs->cfg) yields err == 0 and that (void)cfg within the macro\n       does not change program state. */\n    fprintf(f, \"stage=%s, lfs=%p, cfg=%p, file=%p, err=%d\\n\",\n            stage, (void*)lfs, (void*)(lfs ? lfs->cfg : NULL), (void*)file, err);\n    fclose(f);\n}\n\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log immediately after attempting the lock to capture the return value\n       produced by the LFS_LOCK macro (reported to expand to ((void)cfg,0)). */\n    lfs_log_state(\"after_lock\", lfs, file, err);\n\n    if (err) {\n        /* Log the early return path so the logs show that removal of the\n           (void)cfg subexpression would not change behavior (err is already\n           non-zero in this branch). */\n        lfs_log_state(\"early_return\", lfs, file, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    /* Log before calling the underlying implementation */\n    lfs_log_state(\"before_rewind_\", lfs, file, err);\n    err = lfs_file_rewind_(lfs, file);\n\n    /* Log after the underlying implementation returns */\n    lfs_log_state(\"after_rewind_\", lfs, file, err);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final state after unlocking */\n    lfs_log_state(\"after_unlock\", lfs, file, err);\n    return err;\n}\n"
}