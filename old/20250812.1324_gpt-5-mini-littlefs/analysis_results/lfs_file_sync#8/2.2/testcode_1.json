{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe LFS_LOCK macro expands to ((void)cfg,0). The sub-expression (void)cfg is evaluated at runtime but has no effect (it only suppresses unused-parameter warnings). Removing that evaluation would not change program behaviour, so it constitutes dead code according to MISRA C 2023 Rule 2.2. (The companion LFS_UNLOCK(cfg) defined as ((void)cfg) is the same issue.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/66.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n#include <stdlib.h>\n\n/* Minimal types so this translation unit compiles for testing the probe\n   instrumentation. These should match the real project definitions. */\ntypedef struct lfs {\n    void *cfg;\n    void *mlist;\n} lfs_t;\n\ntypedef struct lfs_file {\n    void *dummy;\n} lfs_file_t;\n\n/* Forward declarations / stubs for project functions used by lfs_file_sync.\n   In the real project these will be provided elsewhere. */\nint lfs_file_sync_(lfs_t *lfs, lfs_file_t *file);\nint lfs_mlist_isopen(void *mlist, struct lfs_mlist *file);\n\n/* Provide a simple logging helper that appends human-readable records to\n   /tmp/logs/66.txt so other agents can inspect control flow and state. */\nstatic void probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/66.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    time_t t = time(NULL);\n    struct tm tm;\n#if defined(_WIN32)\n    localtime_s(&tm, &t);\n#else\n    localtime_r(&t, &tm);\n#endif\n    char timestr[64];\n    strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm);\n\n    fprintf(f, \"%s - \", timestr);\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Lightweight implementations of LFS_TRACE and LFS_ASSERT used by the\n   instrumented function. These only log so they don't change behavior. */\nstatic void LFS_TRACE(const char *fmt, ...) {\n    va_list ap;\n    va_start(ap, fmt);\n    /* Forward to probe_log so all traces go to the same file. */\n    char buf[512];\n    vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n    probe_log(\"TRACE: %s\", buf);\n}\n\nstatic void LFS_ASSERT(int cond) {\n    if (!cond) {\n        probe_log(\"ASSERT FAILED\");\n        /* Do not abort to avoid changing control flow; just log. */\n    }\n}\n\n/* Minimal stub for lfs_mlist_isopen used by the assertion above. */\nstruct lfs_mlist { int unused; };\nint lfs_mlist_isopen(void *mlist, struct lfs_mlist *file) {\n    (void)mlist; (void)file;\n    /* For the purposes of this probe build, consider the file always open. */\n    return 1;\n}\n\n/* Provide a simple stub of the real lfs_file_sync_ so this unit can be\n   compiled/linked for testing the instrumentation. The real implementation\n   lives in the project and will replace this. */\nint lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {\n    (void)lfs; (void)file;\n    probe_log(\"INSIDE: lfs_file_sync_ called (stub)\");\n    return 0;\n}\n\n/* The instrumented lfs_file_sync function. This preserves the original\n   control flow while adding probe logs to /tmp/logs/66.txt so the reported\n   dead-code evaluation of the LFS_LOCK/LFS_UNLOCK macros can be observed.\n\n   Note: The original project uses macros LFS_LOCK(cfg) and LFS_UNLOCK(cfg).\n   According to the reported violation these expand to ((void)cfg,0) and\n   ((void)cfg) respectively. To keep this snippet self-contained we inline\n   those expansions here rather than introducing new macros. */\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    /* Log entry and the pointers involved. */\n    probe_log(\"ENTER: lfs_file_sync(lfs=%p, file=%p); cfg=%p\", (void*)lfs, (void*)file, lfs ? lfs->cfg : NULL);\n\n    /* Emulate the LFS_LOCK macro expansion: ((void)cfg, 0)\n       This evaluates (void)lfs->cfg at runtime but yields 0. */\n    probe_log(\"BEFORE LFS_LOCK: about to evaluate (void)cfg subexpression\");\n    int err = ((void)lfs->cfg, 0);\n    probe_log(\"AFTER LFS_LOCK: err=%d (note: LFS_LOCK evaluates (void)cfg which has no effect)\", err);\n\n    if (err) {\n        probe_log(\"EXIT (early): returned err=%d before sync\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n\n    /* Emulate LFS_UNLOCK(cfg) which expands to ((void)cfg) in the reported\n       macro definition. We log before and after so the evaluation is visible\n       in the probe logs. */\n    probe_log(\"BEFORE LFS_UNLOCK: evaluating (void)cfg subexpression\");\n    (void)lfs->cfg; /* LFS_UNLOCK(lfs->cfg) expanded inline */\n    probe_log(\"AFTER LFS_UNLOCK: (void)cfg evaluated (no effect)\");\n\n    probe_log(\"EXIT: lfs_file_sync returning %d\", err);\n    return err;\n}\n"
}