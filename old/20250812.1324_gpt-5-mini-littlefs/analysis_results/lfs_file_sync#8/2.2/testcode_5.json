{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg) and is used in lfs_file_sync (LFS_UNLOCK(lfs->cfg);). That expansion evaluates the cfg expression and discards the result, performing no action. Removing the LFS_UNLOCK call would not change program behaviour (given lfs->cfg has no side-effects), so the call is an executed no-op and therefore constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/66.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n\n/* Probe helper: append a formatted log line to /tmp/logs/66.txt\n   Creates the directory /tmp/logs if necessary. */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/66.txt\", \"a\");\n    if (!f) {\n        /* try to create directory, ignore errors */\n        (void)mkdir(\"/tmp/logs\", 0755);\n        f = fopen(\"/tmp/logs/66.txt\", \"a\");\n        if (!f) {\n            return;\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    fprintf(f, \"[lfs_file_sync] \");\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        lfs_probe_log(\"lock failed: err=%d, lfs=%p, file=%p\", err, (void*)lfs, (void*)file);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n\n    /* Probe the cfg expression once and reuse the evaluated value.\n       This mirrors the original single evaluation in the code under\n       test and allows us to log the value that LFS_UNLOCK will see.\n       Casting to void* for logging only; this does not change the\n       original control flow or semantics (LFS_UNLOCK is a no-op). */\n    void *cfg_probe = (void*)(lfs->cfg);\n\n    lfs_probe_log(\"about to LFS_UNLOCK: err=%d, cfg=%p, lfs=%p, file=%p\",\n                  err, cfg_probe, (void*)lfs, (void*)file);\n\n    /* Original call that the other agent reported as a no-op. We pass\n       the evaluated value so we do not re-evaluate any potentially\n       side-effecting expression. */\n    LFS_UNLOCK(cfg_probe);\n\n    lfs_probe_log(\"after LFS_UNLOCK: err=%d, cfg=%p\", err, cfg_probe);\n\n    return err;\n}\n"
}