{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file)) passes non-const pointers to lfs_mlist_isopen, whose definition only reads its arguments. The parameters of lfs_mlist_isopen (struct lfs_mlist *head, struct lfs_mlist *node) could and should be const-qualified (const struct lfs_mlist *...) and the explicit cast of file to a non-const struct lfs_mlist* hides this. This is a violation of MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/67.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <stdint.h>\n\n/* Minimal type stubs to make this test file self-contained and compilable.\n   In the real project these types are defined elsewhere; these definitions\n   are only to allow building this test harness. */\nstruct lfs_mlist { struct lfs_mlist *next; };\ntypedef struct lfs_mlist lfs_mlist_t;\n\ntypedef struct lfs {\n    void *cfg;\n    struct lfs_mlist *mlist;\n} lfs_t;\n\ntypedef struct lfs_file {\n    int dummy;\n} lfs_file_t;\n\n/* Logging helper that appends messages to /tmp/logs/67.txt */\nstatic void write_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/67.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n/* Minimal stubs for environment functions used by lfs_file_sync. */\nint LFS_LOCK(void *cfg) {\n    write_log(\"LFS_LOCK called with cfg=%p\", cfg);\n    /* Simulate success */\n    return 0;\n}\n\nvoid LFS_UNLOCK(void *cfg) {\n    write_log(\"LFS_UNLOCK called with cfg=%p\", cfg);\n}\n\nvoid LFS_TRACE(const char *fmt, ...) {\n    va_list ap;\n    va_start(ap, fmt);\n    /* Write trace messages to the same log file for reproducibility */\n    FILE *f = fopen(\"/tmp/logs/67.txt\", \"a\");\n    if (f) {\n        vfprintf(f, fmt, ap);\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n    va_end(ap);\n}\n\nvoid LFS_ASSERT(int cond) {\n    write_log(\"LFS_ASSERT evaluated: %s\", cond ? \"true\" : \"false\");\n    /* Do not abort in this test harness; just log the result. */\n}\n\n/* Implementation of lfs_mlist_isopen that logs inputs and performs a\n   simple pointer-in-list check. This helps reproduce the scenario where\n   a lfs_file_t* is cast to struct lfs_mlist* when calling this function. */\nint lfs_mlist_isopen(struct lfs_mlist *head, struct lfs_mlist *node) {\n    write_log(\"lfs_mlist_isopen called with head=%p node=%p\", (void*)head, (void*)node);\n    struct lfs_mlist *cur = head;\n    while (cur) {\n        if (cur == node) {\n            write_log(\"lfs_mlist_isopen: node %p found in list\", (void*)node);\n            return 1;\n        }\n        cur = cur->next;\n    }\n    write_log(\"lfs_mlist_isopen: node %p NOT found in list\", (void*)node);\n    return 0;\n}\n\n/* Minimal placeholder for the underlying sync operation. Logs entry and\n   returns success (0). */\nint lfs_file_sync_(lfs_t *lfs, lfs_file_t *file) {\n    write_log(\"lfs_file_sync_ called with lfs=%p file=%p\", (void*)lfs, (void*)file);\n    return 0;\n}\n\n/* Modified lfs_file_sync preserving original logic but adding probes to\n   capture the control path and state information relevant to the\n   MISRA Rule 8.13 violation scenario. Logs include the address of the\n   lfs->mlist, the original file pointer, and the pointer obtained by\n   casting the file to struct lfs_mlist*. */\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        write_log(\"lfs_file_sync: LFS_LOCK failed with err=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n\n    /* Probe: record that we are about to call lfs_mlist_isopen and that\n       the code performs a cast of file to struct lfs_mlist*. This helps\n       reproduce the violation scenario where a non-const pointer is\n       passed to a function that only needs a const-qualified pointer. */\n    write_log(\"Probe: preparing to call lfs_mlist_isopen with head=%p\", (void*)lfs->mlist);\n    write_log(\"Probe: original file pointer = %p\", (void*)file);\n    write_log(\"Probe: casting file to (struct lfs_mlist*) -> %p\", (void*)((struct lfs_mlist*)file));\n\n    /* Call once and capture the result so we can both assert and log it. */\n    int isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    write_log(\"Probe: lfs_mlist_isopen returned %d\", isopen);\n\n    LFS_ASSERT(isopen);\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    write_log(\"lfs_file_sync: returning err=%d\", err);\n    return err;\n}\n"
}