{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_mlist_isopen declares its parameters as non-const: 'struct lfs_mlist *head' and 'struct lfs_mlist *node', but the function only reads from these objects (it only traverses and compares pointers). Per MISRA C 2023 Rule 8.13 the pointers should be to const-qualified types when possible. Example fix: change the signature to 'static bool lfs_mlist_isopen(const struct lfs_mlist *head, const struct lfs_mlist *node)' and iterate with 'for (const struct lfs_mlist *p = head; p; p = p->next) { if (p == node) return true; }'.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_sync code that contains useful probe functions that print useful logs to a file \"/tmp/logs/67.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_sync as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_sync:\n```c\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_sync code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\n/* Probe helpers: write reproducible logs for the reported MISRA Rule 8.13 scenario.\n * These functions are intentionally conservative (static, no side-effects on LFS state)\n * and only read pointers to produce a trace file at /tmp/logs/67.txt.\n * They preserve the original logic of lfs_file_sync and do not modify any program state.\n */\nstatic void probe_mlist_traverse(const struct lfs_mlist *head,\n                                 const struct lfs_mlist *node,\n                                 const char *context)\n{\n    FILE *f = fopen(\"/tmp/logs/67.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    fprintf(f, \"[probe] context=%s head=%p node=%p\\n\", context, (void*)head, (void*)node);\n\n    const struct lfs_mlist *p = head;\n    int idx = 0;\n    while (p != NULL) {\n        /* We assume struct lfs_mlist has a member 'next' as used elsewhere in the codebase. */\n        fprintf(f, \"  visit idx=%d ptr=%p next=%p\\n\", idx, (void*)p, (void*)p->next);\n        if (p == node) {\n            fprintf(f, \"  match at idx=%d ptr=%p\\n\", idx, (void*)p);\n            break;\n        }\n        p = p->next;\n        idx++;\n    }\n    if (p == NULL) {\n        fprintf(f, \"  result=not-found\\n\");\n    } else {\n        fprintf(f, \"  result=found\\n\");\n    }\n\n    fclose(f);\n}\n\nstatic void probe_file_sync_result(lfs_t *lfs, lfs_file_t *file, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/67.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    fprintf(f, \"[probe] lfs_file_sync result: lfs=%p file=%p err=%d\\n\", (void*)lfs, (void*)file, err);\n    fclose(f);\n}\n\nint lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_sync(%p, %p)\", (void*)lfs, (void*)file);\n\n    /* Probe the mlist traversal with const-qualified pointers to record the access pattern.\n     * This produces evidence that the function only reads the mlist (it traverses and\n     * compares pointers), supporting the observation that the pointers could be const.\n     * Note: we do not replace the original assert call, preserving behavior exactly. */\n    probe_mlist_traverse((const struct lfs_mlist*)lfs->mlist,\n                         (const struct lfs_mlist*)file,\n                         \"pre-assert\");\n\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    err = lfs_file_sync_(lfs, file);\n\n    /* Log the result of the sync to the probe log for reproducibility */\n    probe_file_sync_result(lfs, file, err);\n\n    LFS_TRACE(\"lfs_file_sync -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}