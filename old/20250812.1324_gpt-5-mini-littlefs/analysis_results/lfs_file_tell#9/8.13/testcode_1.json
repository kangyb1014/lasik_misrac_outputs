{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts a lfs_file_t * to (struct lfs_mlist *) when calling lfs_mlist_isopen: LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file)); If lfs_mlist_isopen only inspects the passed object (does not modify it), its parameter should be declared as const struct lfs_mlist * and the call should pass a const-qualified pointer (or no cast). Casting to a non-const pointer (or using a function that takes a non-const pointer) prevents using a const-qualified type and therefore violates MISRA C 2023 Rule 8.13. (If, instead, lfs_mlist_isopen legitimately modifies the object, then there is no violation.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/75.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_tell as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_tell:\n```c\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_tell code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe helper: append a log line to /tmp/logs/75.txt capturing pointers and state. */\nstatic void lfs_probe_log(const char *stage, void *lfs_ptr, void *file_ptr, void *cast_ptr, int isopen)\n{\n    FILE *f = fopen(\"/tmp/logs/75.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log stage, raw pointers and the result of lfs_mlist_isopen (if available). */\n    fprintf(f, \"%s: lfs=%p, file=%p, file_as_mlist=%p, isopen=%d\\n\",\n            stage, lfs_ptr, file_ptr, cast_ptr, isopen);\n    fclose(f);\n}\n\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n\n    /*\n     * Probe: record that we are about to call lfs_mlist_isopen and the\n     * pointer values involved. We call lfs_mlist_isopen exactly once and\n     * record its return value so that we do not change program semantics\n     * (in case the function has side effects).\n     */\n    void *file_as_mlist = (void*)(struct lfs_mlist*)file; /* preserve the original cast */\n    lfs_probe_log(\"before_lfs_mlist_isopen\", (void*)lfs, (void*)file, file_as_mlist, -1);\n\n    int isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n\n    /* Log the result of the check. */\n    lfs_probe_log(\"after_lfs_mlist_isopen\", (void*)lfs, (void*)file, file_as_mlist, isopen);\n\n    /* Preserve original assertion behavior but use the stored result so the\n     * check is only performed once (avoids hidden side-effects).\n     */\n    LFS_ASSERT(isopen);\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n"
}