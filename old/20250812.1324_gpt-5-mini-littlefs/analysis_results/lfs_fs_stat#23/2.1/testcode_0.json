{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nWith the provided macro definition #define LFS_LOCK(cfg) ((void)cfg,0), the assignment int err = LFS_LOCK(lfs->cfg); always sets err to 0. Therefore the test if (err) { return err; } can never be true and its return statement (the body of the if) is unreachable. This constitutes a violation of MISRA C 2023 Rule 2.1 (unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/185.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_stat:\n```c\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n\n/* Forward declarations to keep this snippet compilable when built\n   as a standalone translation unit for testing. In the real project\n   these types are fully defined elsewhere. */\ntypedef struct lfs lfs_t;\nstruct lfs_fsinfo;\n\n/* Probe logger: append human-readable trace lines to /tmp/logs/185.txt\n   Do not change program logic \u2014 only record control flow and state. */\nstatic void lfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/185.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n/* The original function with probes inserted. The original logic is\n   preserved; probes only append diagnostics to the log file. */\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    lfs_probe_log(\"ENTER lfs_fs_stat: lfs=%p fsinfo=%p\", (void*)lfs, (void*)fsinfo);\n\n    int err = LFS_LOCK(lfs->cfg);\n    lfs_probe_log(\"AFTER LFS_LOCK: err=%d (cfg=%p)\", err, (void*)lfs->cfg);\n\n    if (err) {\n        /* This branch is reported as unreachable when LFS_LOCK expands to ((void)cfg,0).\n           We still log here so that if it ever executes (different macro), evidence is captured. */\n        lfs_probe_log(\"IF-block taken: returning err=%d\", err);\n        return err;\n    }\n    lfs_probe_log(\"IF-block not taken: continuing\");\n\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n    lfs_probe_log(\"AFTER lfs_fs_stat_: err=%d\", err);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    lfs_probe_log(\"BEFORE LFS_UNLOCK (cfg=%p)\", (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"AFTER LFS_UNLOCK: returning err=%d\", err);\n    return err;\n}\n"
}