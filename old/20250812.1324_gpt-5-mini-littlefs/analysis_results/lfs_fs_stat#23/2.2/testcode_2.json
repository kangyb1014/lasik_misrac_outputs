{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn static uint32_t lfs_fs_disk_version(lfs_t *lfs) the statement '(void)lfs;' is an expression-statement with no side effects. It is executed but its removal would not affect program behaviour (it only suppresses an unused-parameter warning), so it constitutes dead code under MISRA C 2023 Rule 2.2. (Fix: remove the no-op or conditionally reference the parameter only when needed, e.g. use the parameter in code under the existing #ifdef or omit the name in the prototype.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/186.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_stat:\n```c\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_stat code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\n/* Probe helper: append concise control-flow/state logs for lfs_fs_stat to /tmp/logs/186.txt.\n   This helper purposely does not inspect internals of lfs_t or struct lfs_fsinfo (unknown here),\n   to avoid introducing dependencies. It logs pointer values, an error code, and a textual stage.\n*/\nstatic void lfs_fs_stat_probe(const char *stage, lfs_t *lfs, struct lfs_fsinfo *fsinfo, int err) {\n    FILE *f = fopen(\"/tmp/logs/186.txt\", \"a\");\n    if (f == NULL) {\n        return; /* best-effort logging only */\n    }\n    /* Print stage, function, pointer values and error code. Cast pointers to void* for portability. */\n    fprintf(f, \"[lfs_fs_stat] stage=%s func=%s lfs=%p fsinfo=%p err=%d\\n\",\n            stage, __func__, (void *)lfs, (void *)fsinfo, err);\n    fclose(f);\n}\n\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    /* Log entry with initial pointers (err unknown until we call lock). */\n    lfs_fs_stat_probe(\"entry_prelock\", lfs, fsinfo, 0);\n\n    int err = LFS_LOCK(lfs->cfg);\n    /* Record the result of the lock attempt. */\n    lfs_fs_stat_probe(\"after_lock\", lfs, fsinfo, err);\n\n    if (err) {\n        /* Preserve original behaviour: return immediately on lock error, but log this control path. */\n        lfs_fs_stat_probe(\"return_lock_error\", lfs, fsinfo, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n    lfs_fs_stat_probe(\"before_lfs_fs_stat_\", lfs, fsinfo, 0);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    lfs_fs_stat_probe(\"after_lfs_fs_stat_\", lfs, fsinfo, err);\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n\n    LFS_UNLOCK(lfs->cfg);\n    lfs_fs_stat_probe(\"exit_postunlock\", lfs, fsinfo, err);\n    return err;\n}\n"
}