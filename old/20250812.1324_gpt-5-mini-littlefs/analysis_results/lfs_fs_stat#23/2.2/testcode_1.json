{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) is defined as ((void)cfg), which expands to a no-op. The statement LFS_UNLOCK(lfs->cfg); is executed but has no effect; removing this statement would not change program behaviour in the current project configuration, therefore it is dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_fs_stat code that contains useful probe functions that print useful logs to a file \"/tmp/logs/186.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_fs_stat as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_fs_stat:\n```c\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_fs_stat code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe logger: writes lightweight execution traces to /tmp/logs/186.txt */\nstatic void lfs_probe_log(const char *stage, lfs_t *lfs, struct lfs_fsinfo *fsinfo, int err) {\n    FILE *f = fopen(\"/tmp/logs/186.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log control point, pointers and error/status value */\n    fprintf(f, \"[%s] lfs=%p fsinfo=%p err=%d\\n\", stage, (void*)lfs, (void*)fsinfo, err);\n    /* If lfs is available, log the cfg pointer (subject of LFS_LOCK/LFS_UNLOCK) */\n    if (lfs) {\n        fprintf(f, \"[%s] lfs->cfg=%p\\n\", stage, (void*)lfs->cfg);\n    }\n    fclose(f);\n}\n\nint lfs_fs_stat(lfs_t *lfs, struct lfs_fsinfo *fsinfo) {\n    int err = LFS_LOCK(lfs->cfg);\n    /* Probe after attempting lock */\n    lfs_probe_log(\"after_lock\", lfs, fsinfo, err);\n\n    if (err) {\n        /* Log the early return caused by lock failure */\n        lfs_probe_log(\"lock_failed_return\", lfs, fsinfo, err);\n        return err;\n    }\n    LFS_TRACE(\"lfs_fs_stat(%p, %p)\", (void*)lfs, (void*)fsinfo);\n\n    err = lfs_fs_stat_(lfs, fsinfo);\n\n    LFS_TRACE(\"lfs_fs_stat -> %d\", err);\n\n    /* Log immediately before the unlock call so we can observe that the call is executed */\n    lfs_probe_log(\"before_unlock\", lfs, fsinfo, err);\n\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log immediately after the unlock call to capture that no observable state changed */\n    lfs_probe_log(\"after_unlock\", lfs, fsinfo, err);\n\n    return err;\n}\n"
}