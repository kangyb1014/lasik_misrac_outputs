{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_LOCK(cfg) expands to ((void)cfg, 0). The left operand (void)cfg is evaluated at runtime but has no side-effects and its removal (replacing the macro with 0) would not change program behaviour (it only suppresses an unused-parameter warning). Thus the (void)cfg operation is an executed operation whose removal would not affect program behaviour \u2014 dead code according to MISRA C 2023 Rule 2.2. Example: in lfs_format the statement int err = LFS_LOCK(cfg); executes (void)cfg but this has no effect on behaviour, so it constitutes dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format code that contains useful probe functions that print useful logs to a file \"/tmp/logs/106.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format:\n```c\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_format code.\n",
  "test_code": "/* Probe-enhanced version of lfs_format to capture evaluation of LFS_LOCK(cfg) and related state.\n * Writes logs to /tmp/logs/106.txt. This file must be writable by the running process.\n * Preserves original control flow and behavior: LFS_LOCK behavior is preserved (returns 0),\n * and LFS_UNLOCK is still called at function exit.\n *\n * NOTE: This snippet intentionally adds small probe functions and replaces the single\n * occurrence of LFS_LOCK(cfg) with lfs_lock_probe(cfg) to record that cfg is evaluated\n * and to capture state before/after the operation. The core logic (err value and\n * subsequent calls) is kept unchanged.\n */\n\n#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\nstatic void lfs_log_state(const char *stage, const void *lfs, const struct lfs_config *cfg, int err) {\n    FILE *f = fopen(\"/tmp/logs/106.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"STAGE: %s\\n\", stage);\n    fprintf(f, \"  lfs=%p, cfg=%p, err=%d\\n\", lfs, (const void*)cfg, err);\n\n    if (cfg) {\n        /* Print a selection of fields that reflect configuration/state. Casts to\n         * uintptr_t / unsigned long are used to avoid requiring specific integer\n         * width format specifiers here; these casts are diagnostic only. */\n        fprintf(f, \"  context=%p\\n\", cfg->context);\n        fprintf(f, \"  read=%p, prog=%p, erase=%p, sync=%p\\n\",\n                (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n                (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync);\n        fprintf(f, \"  read_size=%lu, prog_size=%lu, block_size=%lu, block_count=%lu\\n\",\n                (unsigned long)cfg->read_size, (unsigned long)cfg->prog_size,\n                (unsigned long)cfg->block_size, (unsigned long)cfg->block_count);\n        fprintf(f, \"  block_cycles=%ld, cache_size=%lu, lookahead_size=%lu\\n\",\n                (long)cfg->block_cycles, (unsigned long)cfg->cache_size,\n                (unsigned long)cfg->lookahead_size);\n        fprintf(f, \"  read_buffer=%p, prog_buffer=%p, lookahead_buffer=%p\\n\",\n                cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer);\n        fprintf(f, \"  name_max=%lu, file_max=%lu, attr_max=%lu\\n\",\n                (unsigned long)cfg->name_max, (unsigned long)cfg->file_max,\n                (unsigned long)cfg->attr_max);\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Replacement for LFS_LOCK(cfg) that preserves its effect (evaluates cfg and returns 0)\n * while also logging that the evaluation occurred and capturing surrounding state.\n */\nstatic int lfs_lock_probe(const struct lfs_config *cfg) {\n    /* Log immediately before evaluating/observing cfg */\n    lfs_log_state(\"lfs_lock_probe: before evaluating cfg\", NULL, cfg, 0);\n\n    /* Emulate the original macro expansion \"(void)cfg, 0\" by explicitly evaluating\n     * (void)cfg so any evaluation happens here as well (for demonstration). */\n    (void)cfg;\n\n    /* Log immediately after the (void)cfg evaluation */\n    lfs_log_state(\"lfs_lock_probe: after evaluating cfg (void cast executed)\", NULL, cfg, 0);\n\n    /* The original LFS_LOCK returns 0; preserve that. */\n    return 0;\n}\n\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    /* Replace use of macro LFS_LOCK(cfg) with probe function to capture that cfg\n     * is evaluated and to produce evidence that the (void)cfg operation occurred. */\n    int err = lfs_lock_probe(cfg);\n    if (err) {\n        /* Log early return path */\n        lfs_log_state(\"lfs_format: early return after lock\", lfs, cfg, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Log before delegating to the real formatting routine */\n    lfs_log_state(\"lfs_format: before lfs_format_\", lfs, cfg, 0);\n\n    err = lfs_format_(lfs, cfg);\n\n    /* Log the result of lfs_format_ */\n    lfs_log_state(\"lfs_format: after lfs_format_\", lfs, cfg, err);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n\n    /* Final exit log */\n    lfs_log_state(\"lfs_format: exit\", lfs, cfg, err);\n\n    return err;\n}\n"
}