{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf struct lfs_config declares the member lookahead_buffer as a non-const pointer (for example: uint8_t *lookahead_buffer or void *lookahead_buffer), then using cfg->lookahead_buffer from a const struct lfs_config * indicates the pointed-to data is not intended to be modified by callers. In that case the pointer type should be const-qualified (e.g. const uint8_t * or const void *) and thus the current declaration would violate MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format code that contains useful probe functions that print useful logs to a file \"/tmp/logs/107.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format:\n```c\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_format code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n\n/* Probe helper to log control flow and state for lfs_format. */\nstatic void lfs_format_probe_log(const struct lfs_config *cfg, const char *stage, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/107.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log stage, error code, and key fields that demonstrate the violation scenario. */\n    fprintf(f, \"--- lfs_format probe: %s ---\\n\", stage);\n    fprintf(f, \"cfg pointer: %p\\n\", (void*)cfg);\n    if (cfg != NULL) {\n        fprintf(f, \"  context: %p\\n\", cfg->context);\n        fprintf(f, \"  read: %p, prog: %p, erase: %p, sync: %p\\n\",\n                (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n                (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync);\n        fprintf(f, \"  sizes: read_size=%\" PRIu32 \", prog_size=%\" PRIu32 \", block_size=%\" PRIu32 \", block_count=%\" PRIu32 \"\\n\",\n                cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count);\n        fprintf(f, \"  block_cycles=%\" PRId32 \", cache_size=%\" PRIu32 \", lookahead_size=%\" PRIu32 \"\\n\",\n                cfg->block_cycles, cfg->cache_size, cfg->lookahead_size);\n        /* This is the key field for the reported MISRA Rule 8.13 violation scenario. */\n        fprintf(f, \"  read_buffer=%p, prog_buffer=%p, lookahead_buffer=%p\\n\",\n                cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer);\n        fprintf(f, \"  name_max=%\" PRIu32 \", file_max=%\" PRIu32 \", attr_max=%\" PRIu32 \"\\n\",\n                cfg->name_max, cfg->file_max, cfg->attr_max);\n        /* Provide information useful to other agents: whether lookahead_buffer is NULL. */\n        fprintf(f, \"  lookahead_buffer_is_null=%d\\n\", (cfg->lookahead_buffer == NULL));\n    }\n    fprintf(f, \"  err=%d\\n\", err);\n    fprintf(f, \"--- end probe: %s ---\\n\\n\", stage);\n    fclose(f);\n}\n\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    /* Log after attempting to acquire the lock. */\n    lfs_format_probe_log(cfg, \"after_lock\", err);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Log right before calling the internal formatter. */\n    lfs_format_probe_log(cfg, \"before_lfs_format_\", 0);\n\n    err = lfs_format_(lfs, cfg);\n\n    /* Log after the internal formatter returned, capturing the result and state. */\n    lfs_format_probe_log(cfg, \"after_lfs_format_\", err);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n\n    /* Final log after unlock to capture unlocked state. */\n    lfs_format_probe_log(cfg, \"after_unlock\", err);\n\n    return err;\n}\n"
}