{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe member read_buffer is being accessed via a const struct lfs_config * (cfg), but the member itself is apparently a non-const pointer (e.g. declared as void *read_buffer in struct lfs_config). If the buffer is not intended to be modified by the API (it is only read), then read_buffer should be declared as const void *read_buffer. In that case cfg->read_buffer (and the struct member's type) violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format code that contains useful probe functions that print useful logs to a file \"/tmp/logs/107.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format:\n```c\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_format code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stddef.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/* Probe helper: append detailed logs to /tmp/logs/107.txt. */\nstatic void lfs_format_probe(lfs_t *lfs, const struct lfs_config *cfg,\n                             const char *stage, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/107.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n\n    /* Basic control-flow information */\n    (void)fprintf(f, \"[lfs_format_probe] stage=%s, lfs=%p, cfg=%p, err=%d\\n\",\n                  stage, (void*)lfs, (const void*)cfg, err);\n\n    if (cfg != NULL) {\n        /* Log function pointers and context (cast similar to original LFS_TRACE) */\n        (void)fprintf(f,\n            \"  context=%p, read=%p, prog=%p, erase=%p, sync=%p\\n\",\n            (void*)cfg->context,\n            (void*)(uintptr_t)cfg->read,\n            (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase,\n            (void*)(uintptr_t)cfg->sync);\n\n        /* Log sizes and counts */\n        (void)fprintf(f,\n            \"  read_size=%\" PRIu32 \", prog_size=%\" PRIu32 \", block_size=%\" PRIu32 \", block_count=%\" PRIu32 \"\\n\",\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count);\n\n        (void)fprintf(f,\n            \"  block_cycles=%\" PRId32 \", cache_size=%\" PRIu32 \", lookahead_size=%\" PRIu32 \"\\n\",\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size);\n\n        /*\n         * Important for the MISRA 8.13 investigation: log the pointer values\n         * of the buffer members. Note we cast read_buffer to const void *\n         * when printing to avoid any attempt to modify it and to reflect\n         * that it is being observed via a const struct pointer.\n         */\n        (void)fprintf(f,\n            \"  read_buffer=%p, prog_buffer=%p, lookahead_buffer=%p\\n\",\n            (const void*)cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer);\n\n        (void)fprintf(f,\n            \"  name_max=%\" PRIu32 \", file_max=%\" PRIu32 \", attr_max=%\" PRIu32 \"\\n\",\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n    }\n\n    (void)fclose(f);\n}\n\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        /* Log lock failure and early return */\n        lfs_format_probe(lfs, cfg, \"lock_failed\", err);\n        return err;\n    }\n\n    /* Log entry state before proceeding (preserves original behavior) */\n    lfs_format_probe(lfs, cfg, \"entry\", 0);\n\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Log just before calling the internal formatter */\n    lfs_format_probe(lfs, cfg, \"before_lfs_format_\", 0);\n\n    err = lfs_format_(lfs, cfg);\n\n    /* Log result and exit state after formatting */\n    lfs_format_probe(lfs, cfg, \"after_lfs_format_\", err);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n"
}