{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the caller supplies cfg->lookahead_buffer that is shorter than cfg->lookahead_size, the assignment lfs->lookahead.buffer = cfg->lookahead_buffer followed by memset(lfs->lookahead.buffer, 0, lfs->cfg->lookahead_size) (in lfs_format_/lfs_init path) will write past the end of the provided buffer. There is no check in the code that the caller-provided buffer is at least lookahead_size, so a too-small provided buffer can cause out-of-bounds access via memset (a <string.h> function).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format code that contains useful probe functions that print useful logs to a file \"/tmp/logs/111.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format:\n```c\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_format code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Probe logging helper for lfs_format. This function appends runtime\n   state necessary to reproduce the lookahead buffer size/pointer\n   scenario to /tmp/logs/111.txt. It intentionally does NOT dereference\n   cfg->lookahead_buffer to avoid introducing new out-of-bounds reads. */\nstatic void lfs_format_probe_log(lfs_t *lfs, const struct lfs_config *cfg,\n                                 int lock_err, const char *stage_note) {\n    FILE *f = fopen(\"/tmp/logs/111.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n\n    fprintf(f, \"--- lfs_format probe (%s) ---\\n\", stage_note ? stage_note : \"\");\n    fprintf(f, \"lfs=%p, cfg=%p, lock_err=%d\\n\", (void*)lfs, (void*)cfg, lock_err);\n    if (cfg) {\n        /* Print pointer-valued fields and numeric sizes. Avoid dereferencing\n           pointer buffers to prevent any accidental out-of-bounds access. */\n        fprintf(f, \"cfg->context=%p\\n\", cfg->context);\n        fprintf(f, \"cfg->read=%p, cfg->prog=%p, cfg->erase=%p, cfg->sync=%p\\n\",\n                (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n                (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync);\n        fprintf(f, \"cfg->read_size=%"
}