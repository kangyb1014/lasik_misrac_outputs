{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf cfg->prog_buffer is non-NULL but points to a user-supplied buffer smaller than cfg->cache_size, then lfs_cache_zero (likely implemented with memset(lfs->pcache.buffer, 0, lfs->cfg->cache_size)) will write up to cfg->cache_size bytes into that buffer. This can access beyond the bounds of the user buffer and thus violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_format code that contains useful probe functions that print useful logs to a file \"/tmp/logs/111.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_format as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_format:\n```c\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    int err = LFS_LOCK(cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"})\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    err = lfs_format_(lfs, cfg);\n\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n    return err;\n}\n```\n</target_code>\nPlease provide the modified lfs_format code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <stdarg.h>\n\n/*\n * Probing helper: append formatted logs to /tmp/logs/111.txt.\n * Kept minimal and safe (no dereference of user buffers).\n */\nstatic void lfs_probe_log(const char *fmt, ...) {\n    FILE *f = fopen(\"/tmp/logs/111.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {\n    /* Log entry and key cfg fields before acquiring lock */\n    lfs_probe_log(\"ENTER lfs_format: lfs=%p cfg=%p\", (void*)lfs, (void*)cfg);\n    if (cfg) {\n        lfs_probe_log(\n            \"cfg: context=%p, read=%p, prog=%p, erase=%p, sync=%p\",\n            (void*)cfg->context,\n            (void*)(uintptr_t)cfg->read,\n            (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase,\n            (void*)(uintptr_t)cfg->sync);\n        lfs_probe_log(\n            \"sizes: read_size=%\" PRIu32 \", prog_size=%\" PRIu32 \", block_size=%\" PRIu32 \", block_count=%\" PRIu32,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count);\n        lfs_probe_log(\n            \"other: block_cycles=%\" PRId32 \", cache_size=%\" PRIu32 \", lookahead_size=%\" PRIu32,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size);\n        lfs_probe_log(\n            \"buffers: read_buffer=%p, prog_buffer=%p, lookahead_buffer=%p\",\n            (void*)cfg->read_buffer, (void*)cfg->prog_buffer, (void*)cfg->lookahead_buffer);\n        lfs_probe_log(\n            \"limits: name_max=%\" PRIu32 \", file_max=%\" PRIu32 \", attr_max=%\" PRIu32,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n        /* Probe specifically for the reported violation scenario.\n         * We do NOT dereference cfg->prog_buffer to avoid UB. We only\n         * record the pointer value and the cache_size that would be used\n         * by memset/memcpy-like operations. This helps reproduce the\n         * scenario (user-supplied buffer smaller than cache_size) without\n         * introducing new violations.\n         */\n        if (cfg->prog_buffer != NULL) {\n            lfs_probe_log(\"Probe: prog_buffer != NULL (ptr=%p). cfg->cache_size=%\" PRIu32,\n                (void*)cfg->prog_buffer, cfg->cache_size);\n        } else {\n            lfs_probe_log(\"Probe: prog_buffer == NULL\");\n        }\n    } else {\n        lfs_probe_log(\"cfg == NULL\");\n    }\n\n    int err = LFS_LOCK(cfg);\n    lfs_probe_log(\"LFS_LOCK returned %d\", err);\n    if (err) {\n        lfs_probe_log(\"EXIT lfs_format early: lock error=%d\", err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_format(%p, %p {.context=%p, \"\n                \".read=%p, .prog=%p, .erase=%p, .sync=%p, \"\n                \".read_size=%\"PRIu32\", .prog_size=%\"PRIu32\", \"\n                \".block_size=%\"PRIu32\", .block_count=%\"PRIu32\", \"\n                \".block_cycles=%\"PRId32\", .cache_size=%\"PRIu32\", \"\n                \".lookahead_size=%\"PRIu32\", .read_buffer=%p, \"\n                \".prog_buffer=%p, .lookahead_buffer=%p, \"\n                \".name_max=%\"PRIu32\", .file_max=%\"PRIu32\", \"\n                \".attr_max=%\"PRIu32\"}\",\n            (void*)lfs, (void*)cfg, cfg->context,\n            (void*)(uintptr_t)cfg->read, (void*)(uintptr_t)cfg->prog,\n            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,\n            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,\n            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,\n            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,\n            cfg->name_max, cfg->file_max, cfg->attr_max);\n\n    /* Log right before calling lfs_format_ so we capture the exact state\n     * that might lead to an out-of-bounds write inside string.h functions\n     * used by the implementation (e.g. memset with cfg->cache_size).\n     */\n    lfs_probe_log(\"Before lfs_format_: cfg->prog_buffer=%p, cfg->cache_size=%\" PRIu32,\n        (void*)(cfg ? cfg->prog_buffer : NULL), (cfg ? cfg->cache_size : 0));\n\n    err = lfs_format_(lfs, cfg);\n\n    lfs_probe_log(\"After lfs_format_: returned %d\", err);\n    LFS_TRACE(\"lfs_format -> %d\", err);\n    LFS_UNLOCK(cfg);\n\n    lfs_probe_log(\"EXIT lfs_format: returning %d\", err);\n    return err;\n}\n"
}