{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro LFS_UNLOCK(cfg) expands to the expression ((void)cfg), which when used in lfs_file_size() becomes an evaluated-and-discarded expression statement that has no side effects. Removing the LFS_UNLOCK(lfs->cfg); call (or replacing the macro with nothing) would not change program behaviour in this configuration, so the executed operation is dead code. (Note: if the cfg expression had side effects or the macro were defined differently in other builds, this would not apply.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/42.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Helper: simple rolling checksum over memory to detect changes. */\nstatic unsigned long lfs_mem_checksum(const void *ptr, size_t size) {\n    const unsigned char *p = (const unsigned char *)ptr;\n    unsigned long s = 1469598103934665603UL; /* some non-zero seed */\n    for (size_t i = 0; i < size; i++) {\n        s ^= (unsigned long)p[i];\n        s *= 1099511628211UL;\n    }\n    return s;\n}\n\n/* Helper: append a probe record to the log file. */\nstatic void lfs_log_probe(const char *phase, lfs_t *lfs, lfs_file_t *file,\n                          int err, lfs_soff_t res,\n                          unsigned long checksum_before, unsigned long checksum_after) {\n    FILE *f = fopen(\"/tmp/logs/42.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    /* Log phase, pointers, error, result and checksums of the lfs object. */\n    fprintf(f, \"%s: lfs=%p file=%p err=%d res=%lld cs_before=0x%08lx cs_after=0x%08lx\\n\",\n            phase,\n            (void*)lfs,\n            (void*)file,\n            err,\n            (long long)res,\n            checksum_before,\n            checksum_after);\n    fclose(f);\n}\n\n/* Modified lfs_file_size with probes inserted. */\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log that the lock failed and return path was taken. */\n        lfs_log_probe(\"lfs_file_size: lock_failed\", lfs, file, err, 0, 0UL, 0UL);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Capture checksum of the lfs object before calling the internal function.\n       This lets us detect whether subsequent operations (including LFS_UNLOCK)\n       modify the lfs object's memory. */\n    unsigned long cs_before = lfs_mem_checksum((const void*)lfs, sizeof(*lfs));\n\n    lfs_log_probe(\"lfs_file_size: before_size_call\", lfs, file, 0, 0, cs_before, 0UL);\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n\n    /* Capture checksum immediately before unlock. */\n    unsigned long cs_before_unlock = lfs_mem_checksum((const void*)lfs, sizeof(*lfs));\n    lfs_log_probe(\"lfs_file_size: before_unlock\", lfs, file, 0, res, cs_before, cs_before_unlock);\n\n    /* The macro LFS_UNLOCK(cfg) expands to ((void)cfg) in the reported configuration.\n       We keep the call in place but log checksum after the call to show that it\n       produces no observable change to the lfs object (i.e. it is executed but\n       has no effect). */\n    LFS_UNLOCK(lfs->cfg);\n\n    unsigned long cs_after_unlock = lfs_mem_checksum((const void*)lfs, sizeof(*lfs));\n    lfs_log_probe(\"lfs_file_size: after_unlock\", lfs, file, 0, res, cs_before_unlock, cs_after_unlock);\n\n    return res;\n}\n"
}