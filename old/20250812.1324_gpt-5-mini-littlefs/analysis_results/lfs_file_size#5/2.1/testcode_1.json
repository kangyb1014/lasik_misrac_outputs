{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe branch if (err) { return err; } is unreachable because LFS_LOCK(lfs->cfg) is defined as ((void)cfg, 0), so err is always 0. The condition can never be true, making the return-in-if path unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/41.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size code.\n",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n\n/* Probe logging function: appends control-flow and state info to /tmp/logs/41.txt */\nstatic void lfs_probe_log_state(const char *stage,\n                                void *lfs_ptr,\n                                void *file_ptr,\n                                int err,\n                                long long res_val)\n{\n    FILE *fp = fopen(\"/tmp/logs/41.txt\", \"a\");\n    if (!fp) {\n        /* best-effort logging, do not alter program behavior if logging fails */\n        return;\n    }\n    fprintf(fp, \"[lfs_file_size] stage=%s, lfs=%p, file=%p, err=%d, res=%lld\\n\",\n            stage, lfs_ptr, file_ptr, err, res_val);\n    fclose(fp);\n}\n\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    /* Preserve original logic: call the lock and capture its return. */\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: log immediately after taking the lock and the returned err value. */\n    lfs_probe_log_state(\"after_lock\", (void*)lfs, (void*)file, err, 0);\n\n    /* Original branch: if err, return err. Keep identical behavior but add a probe inside\n       so that if this (reported unreachable) path is ever taken, it will be logged. */\n    if (err) {\n        lfs_probe_log_state(\"err_nonzero_before_return\", (void*)lfs, (void*)file, err, 0);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    /* Call the underlying implementation and capture the result for logging. */\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    /* Probe: log the result before unlocking so the sequence is fully recorded. */\n    lfs_probe_log_state(\"before_unlock\", (void*)lfs, (void*)file, 0, (long long)res);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final probe after unlocking and before returning. */\n    lfs_probe_log_state(\"after_unlock_and_return\", (void*)lfs, (void*)file, 0, (long long)res);\n\n    return res;\n}\n"
}