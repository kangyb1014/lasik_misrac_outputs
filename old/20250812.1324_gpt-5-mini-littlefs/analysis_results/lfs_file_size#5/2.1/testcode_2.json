{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe branch \"if (err) { return err; }\" is unreachable because LFS_LOCK(lfs->cfg) is defined as ((void)cfg, 0), so err is always 0 and the condition can never be true. The return inside that branch can never be executed, which constitutes unreachable code and thus violates MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/41.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <inttypes.h>\n\n/* Minimal stub/type definitions so this file is self-contained and compilable. */\ntypedef uint32_t lfs_soff_t;\ntypedef struct lfs { void *cfg; void *mlist; } lfs_t;\ntypedef struct lfs_file { int dummy; } lfs_file_t;\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/41.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/41.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n/* Stubs for the LFS helpers used by the original function. */\n/* Implemented as functions (not macros) to keep this file self-contained. */\nint LFS_LOCK(void *cfg) {\n    /* Match the reported scenario: lock macro expands to '((void)cfg, 0)'.\n       Return 0 to indicate success (so the if (err) branch should not be taken). */\n    (void)cfg;\n    probe_log(\"LFS_LOCK called with cfg=%p -> returning 0\", cfg);\n    return 0;\n}\n\nvoid LFS_UNLOCK(void *cfg) {\n    (void)cfg;\n    probe_log(\"LFS_UNLOCK called with cfg=%p\", cfg);\n}\n\nvoid LFS_TRACE(const char *fmt, ...){\n    /* Mirror traces into the same log for correlation. */\n    va_list ap;\n    va_start(ap, fmt);\n    /* Use a temporary buffer to format the trace line. */\n    char buf[512];\n    vsnprintf(buf, sizeof(buf), fmt, ap);\n    va_end(ap);\n    probe_log(\"LFS_TRACE: %s\", buf);\n}\n\nvoid LFS_ASSERT(int cond) {\n    /* Minimal assert stub: log the assertion check. */\n    probe_log(\"LFS_ASSERT: condition is %s\", cond ? \"true\" : \"false\");\n}\n\n/* Minimal implementations to allow the original function to call them. */\nint lfs_mlist_isopen(void *mlist, void *m) {\n    (void)mlist; (void)m;\n    probe_log(\"lfs_mlist_isopen called (stub) -> returning true\");\n    return 1;\n}\n\nlfs_soff_t lfs_file_size_(lfs_t *lfs, lfs_file_t *file) {\n    (void)lfs; (void)file;\n    probe_log(\"lfs_file_size_ called (stub) -> returning 12345\");\n    return (lfs_soff_t)12345;\n}\n\n/* Modified lfs_file_size with inserted probe logging. */\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    probe_log(\"ENTER lfs_file_size: lfs=%p file=%p\", (void*)lfs, (void*)file);\n\n    int err = LFS_LOCK(lfs->cfg);\n    probe_log(\"After LFS_LOCK: err=%d, cfg=%p\", err, (void*)lfs->cfg);\n\n    if (err) {\n        probe_log(\"if (err) branch taken: err=%d -> returning err\", err);\n        return err;\n    }\n    probe_log(\"if (err) branch NOT taken (err==0)\");\n\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\" PRIu32, res);\n    probe_log(\"Before LFS_UNLOCK: res=%\" PRIu32 \", cfg=%p\", res, (void*)lfs->cfg);\n    LFS_UNLOCK(lfs->cfg);\n    probe_log(\"EXIT lfs_file_size: returning res=%\" PRIu32, res);\n    return res;\n}\n"
}