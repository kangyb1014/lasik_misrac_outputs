{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function lfs_file_size takes pointers lfs_t *lfs and lfs_file_t *file but does not modify the objects they point to (only reads them, calls LFS_LOCK/LFS_UNLOCK on lfs->cfg, calls lfs_file_size_(lfs, file) and checks membership via lfs_mlist_isopen). Per MISRA C 2023 Rule 8.13, these parameters should be const-qualified (const lfs_t *lfs, const lfs_file_t *file) if they are not modified. The current declaration therefore violates the rule. Note: to fully apply the const qualification you may also need to update downstream APIs (e.g. lfs_mlist_isopen, lfs_file_size_) so they accept const pointers and to remove any casts that would otherwise discard constness.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified lfs_file_size code that contains useful probe functions that print useful logs to a file \"/tmp/logs/43.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of lfs_file_size as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of lfs_file_size:\n```c\nlfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nPlease provide the modified lfs_file_size code.\n",
  "test_code": "lfs_soff_t lfs_file_size(lfs_t *lfs, lfs_file_t *file) {\n    /* Probe: log entry with pointer values */\n    {\n        FILE *f = fopen(\"/tmp/logs/43.txt\", \"a\");\n        if (f) {\n            (void)fprintf(f, \"[lfs_file_size] ENTRY: lfs=%p, file=%p\\n\", (void*)lfs, (void*)file);\n            (void)fclose(f);\n        }\n    }\n\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: log result of lock */\n    {\n        FILE *f = fopen(\"/tmp/logs/43.txt\", \"a\");\n        if (f) {\n            (void)fprintf(f, \"[lfs_file_size] LFS_LOCK returned: %d\\n\", err);\n            (void)fclose(f);\n        }\n    }\n\n    if (err) {\n        /* Log early return on lock failure */\n        FILE *f = fopen(\"/tmp/logs/43.txt\", \"a\");\n        if (f) {\n            (void)fprintf(f, \"[lfs_file_size] EARLY RETURN (lock error): %d\\n\", err);\n            (void)fclose(f);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_size(%p, %p)\", (void*)lfs, (void*)file);\n\n    /* Capture membership check state for logging, but preserve the original assertion */\n    int isopen = lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file);\n    {\n        FILE *f = fopen(\"/tmp/logs/43.txt\", \"a\");\n        if (f) {\n            (void)fprintf(f, \"[lfs_file_size] lfs_mlist_isopen returned: %d\\n\", isopen);\n            (void)fclose(f);\n        }\n    }\n\n    LFS_ASSERT(isopen);\n\n    lfs_soff_t res = lfs_file_size_(lfs, file);\n\n    /* Log result of lfs_file_size_ */\n    {\n        FILE *f = fopen(\"/tmp/logs/43.txt\", \"a\");\n        if (f) {\n            /* Use a generic integer format to avoid depending on PRIu32 here */\n            (void)fprintf(f, \"[lfs_file_size] lfs_file_size_ returned: %lld\\n\", (long long)res);\n            (void)fclose(f);\n        }\n    }\n\n    LFS_TRACE(\"lfs_file_size -> %\"PRIu32, res);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log unlock and exit */\n    {\n        FILE *f = fopen(\"/tmp/logs/43.txt\", \"a\");\n        if (f) {\n            (void)fprintf(f, \"[lfs_file_size] UNLOCK done, returning: %lld\\n\", (long long)res);\n            (void)fclose(f);\n        }\n    }\n\n    return res;\n}\n"
}