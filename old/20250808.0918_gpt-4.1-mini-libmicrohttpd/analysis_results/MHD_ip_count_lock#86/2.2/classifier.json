{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified MHD_ip_count_lock code that contains useful probe functions that print useful logs to a file \"/tmp/logs/690.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of MHD_ip_count_lock as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of MHD_ip_count_lock:\n```c\nstatic void\nMHD_ip_count_lock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  (void) daemon;\n#endif\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_ip_count_lock:\n#define mhd_assert(ignore) ((void)0)\n...\n#define MHD_mutex_lock_chk_(pmutex) do{if(!MHD_mutex_lock_(pmutex))MHD_PANIC(_(\"Failed to lock mutex.\\n\"));\\\n}while(0)\n...\n#define MHD_USE_POSIX_THREADS 1\n</additional code>\nJudge whether the above MHD_ip_count_lock code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "The function MHD_ip_count_lock contains a conditional compilation block with an else clause that executes the statement '(void) daemon;' when neither MHD_USE_POSIX_THREADS nor MHD_USE_W32_THREADS is defined. This statement is executed but has no effect on program behavior, thus constituting dead code as its removal does not change the behavior of the program.",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n\nstatic void MHD_ip_count_lock(struct MHD_Daemon *daemon)\n{\n  FILE *fp = fopen(\"/tmp/logs/690.txt\", \"a\");\n  if (fp == NULL) return;\n\n  fprintf(fp, \"Entering MHD_ip_count_lock\\n\");\n  if (NULL == daemon->master) {\n    fprintf(fp, \"Assertion passed: daemon->master is NULL\\n\");\n  } else {\n    fprintf(fp, \"Assertion failed: daemon->master is not NULL\\n\");\n  }\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  fprintf(fp, \"Using threads: locking mutex.\\n\");\n  MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  fprintf(fp, \"No thread support defined: executing '(void) daemon;' statement (dead code).\\n\");\n  (void) daemon;  /* Dead code scenario */\n#endif\n\n  fprintf(fp, \"Exiting MHD_ip_count_lock\\n\");\n  fclose(fp);\n}\n\n// Dummy definitions to make the code snippet complete and compilable\nstruct MHD_Daemon {\n  void *master;\n  int per_ip_connection_mutex;\n};\n\nint MHD_mutex_lock_chk_(int *pmutex) {\n  fprintf(stderr, \"Mutex locked\\n\");\n  (void)pmutex; \n  return 1;\n}\n"
}