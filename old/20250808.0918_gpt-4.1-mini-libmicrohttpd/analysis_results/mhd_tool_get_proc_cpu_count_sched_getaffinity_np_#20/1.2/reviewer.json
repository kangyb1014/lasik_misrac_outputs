{
  "user_message": "An agent A claimed that the following mhd_tool_get_proc_cpu_count_sched_getaffinity_np_ code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of mhd_tool_get_proc_cpu_count_sched_getaffinity_np_.\n```c\nstatic int\nmhd_tool_get_proc_cpu_count_sched_getaffinity_np_ (void)\n{\n  int ret = -1;\n#if defined(HAVE_SCHED_GETAFFINITY_NP) && defined(HAVE_GETPID)\n  /* NetBSD style */\n  cpuset_t *cpuset_ptr;\n  cpuset_ptr = cpuset_create ();\n  if (NULL != cpuset_ptr)\n  {\n    if (0 == sched_getaffinity_np (getpid (), cpuset_size (cpuset_ptr),\n                                   cpuset_ptr))\n    {\n      cpuid_t cpu_num;\n#if defined(HAVE_SYSCONF) && defined(HAVE_DECL__SC_NPROCESSORS_CONF)\n      unsigned int max_num = 0;\n      long sc_value;\n      sc_value = sysconf (_SC_NPROCESSORS_ONLN);\n      if (0 < sc_value)\n        max_num = (unsigned int) sc_value;\n      if (0 < max_num)\n      {\n        ret = 0;\n        for (cpu_num = 0; cpu_num < max_num; ++cpu_num)\n          if (0 < cpuset_isset (cpu_num, cpuset_ptr))\n            ++ret;\n      }\n      else /* Combined with the next 'if' */\n#endif /* HAVE_SYSCONF && HAVE_DECL__SC_NPROCESSORS_CONF */\n      if (1)\n      {\n        int res;\n        cpu_num = 0;\n        ret = 0;\n        do\n        {\n          res = cpuset_isset (cpu_num++, cpuset_ptr);\n          if (0 < res)\n            ++ret;\n        } while (0 <= res);\n      }\n#ifdef __NetBSD__\n      if (0 == ret)\n      {\n        /* On NetBSD \"unset\" affinity (exactly zero CPUs) means\n           \"all CPUs are available\". */\n        ret = mhd_tool_get_sys_cpu_count_sysctl_ ();\n      }\n#endif /* __NetBSD__ */\n    }\n    cpuset_destroy (cpuset_ptr);\n  }\n#endif /* HAVE_SCHED_GETAFFINITY_NP && HAVE_GETPID */\n  if (0 >= ret)\n    return -1;\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function uses __NetBSD__ predefined macro as a compiler extension to conditionally compile code specifically for NetBSD OS.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic int mhd_tool_get_sys_cpu_count_sysctl_(void)\n{\n    /* Dummy implementation matching the original for completeness */\n    return 4;\n}\nstatic int mhd_tool_get_proc_cpu_count_sched_getaffinity_np_(void)\n{\n#if defined(HAVE_SCHED_GETAFFINITY_NP) && defined(HAVE_GETPID)\n    cpuset_t *cpuset_ptr;\n    int ret = -1;\n    cpuset_ptr = cpuset_create();\n    if (NULL != cpuset_ptr)\n    {\n        if (0 == sched_getaffinity_np(getpid(), cpuset_size(cpuset_ptr), cpuset_ptr))\n        {\n            cpuid_t cpu_num;\n#if defined(HAVE_SYSCONF) && defined(HAVE_DECL__SC_NPROCESSORS_CONF)\n            unsigned int max_num = 0;\n            long sc_value;\n            sc_value = sysconf(_SC_NPROCESSORS_ONLN);\n            if (0 < sc_value)\n                max_num = (unsigned int) sc_value;\n            if (0 < max_num)\n            {\n                ret = 0;\n                for (cpu_num = 0; cpu_num < max_num; ++cpu_num)\n                {\n                    if (0 < cpuset_isset(cpu_num, cpuset_ptr))\n                        ++ret;\n                }\n            }\n            else\n#endif\n            {\n                int res;\n                cpu_num = 0;\n                ret = 0;\n                do\n                {\n                    res = cpuset_isset(cpu_num++, cpuset_ptr);\n                    if (0 < res)\n                        ++ret;\n                } while (0 <= res);\n            }\n#ifdef __NetBSD__\n            if (0 == ret)\n            {\n                ret = mhd_tool_get_sys_cpu_count_sysctl_();\n            }\n#endif\n        }\n        cpuset_destroy(cpuset_ptr);\n    }\n    if (0 >= ret)\n        return -1;\n    return ret;\n#else\n    /* If sched_getaffinity_np or getpid is not available, return dummy value */\n    return 4;\n#endif\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 rule 1.2 states that language extensions should not be used. This means that explicitly compiler-provided language extensions that go beyond the standard C language as defined by the ISO C standard are disallowed. The use of predefined macros such as __NetBSD__ is a common technique for conditional compilation to target specific platforms. These macros themselves are not language extensions; they are preprocessor defines commonly provided by the compiler or build system to indicate the target OS or platform. They do not extend the language, but simply enable selection of code based on environment. Therefore, using the __NetBSD__ macro in preprocessor conditionals is not a violation of MISRA C 2023 Rule 1.2. Furthermore, the code does not use any non-standard syntax or compiler-specific language features; it uses standard C constructs and standard preprocessor conditionals. The agent A's claim that the use of __NetBSD__ macro constitutes a language extension violation is incorrect. Hence, the report is not correct."
}