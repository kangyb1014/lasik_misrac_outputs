{
  "user_message": "An agent A claimed that the following ahc_cb code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_cb.\n```c\nstatic enum MHD_Result\nahc_cb (void *cls, struct MHD_Connection *con, const char *url,\n        const char *method, const char *version, const char *upload_data,\n        size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    *req_cls = (void *) 1;\n    return MHD_YES;\n  }\n  *req_cls = NULL;\n  upg_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONNECTION);\n  if (MHD_NO == is_websocket_request (con, upg_header, con_header))\n  {\n    return send_chat_page (con);\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp (version, MHD_HTTP_VERSION_1_1)))\n  {\n    return send_bad_request (con);\n  }\n  ws_version_header =\n    MHD_lookup_connection_value (con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp (ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    return send_upgrade_required (con);\n  }\n  ret = MHD_lookup_connection_value_n (con, MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                       strlen (\n                                         MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                       &ws_key_header, &key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    return send_bad_request (con);\n  }\n  ret = ws_get_accept_value (ws_key_header, &ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    return ret;\n  }\n  res = MHD_create_response_for_upgrade (&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                               ws_ac_value))\n  {\n    free (ws_ac_value);\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  free (ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function ahc_cb contains an assignment '*req_cls = NULL;' immediately after the first if block, where '*req_cls' was just checked for NULL and set to a non-null value. This assignment is executed but its removal does not affect the overall program behavior because '*req_cls' is overwritten and its value is not used thereafter. Therefore, this assignment constitutes dead code that violates MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic enum MHD_Result\nahc_cb(void *cls, struct MHD_Connection *con, const char *url,\n       const char *method, const char *version, const char *upload_data,\n       size_t *upload_data_size, void **req_cls)\n{\n  FILE *log = fopen(\"/tmp/logs/490.txt\", \"a\");\n  if (log != NULL)\n    fprintf(log, \"ahc_cb: Start\\n\");\n\n  struct MHD_Response *res;\n  const char *upg_header;\n  const char *con_header;\n  const char *ws_version_header;\n  const char *ws_key_header;\n  char *ws_ac_value;\n  enum MHD_Result ret;\n  size_t key_size;\n\n  (void) cls;\n  (void) url;\n  (void) upload_data;\n  (void) upload_data_size;\n\n  if (NULL == *req_cls)\n  {\n    *req_cls = (void *) 1;\n    if (log != NULL)\n    {\n      fprintf(log, \"ahc_cb: *req_cls was NULL, set to non-NULL and returning MHD_YES\\n\");\n      fclose(log);\n    }\n    return MHD_YES;\n  }\n\n  upg_header = MHD_lookup_connection_value(con, MHD_HEADER_KIND,\n                                          MHD_HTTP_HEADER_UPGRADE);\n  con_header = MHD_lookup_connection_value(con, MHD_HEADER_KIND,\n                                          MHD_HTTP_HEADER_CONNECTION);\n  if (MHD_NO == is_websocket_request(con, upg_header, con_header))\n  {\n    if (log != NULL) fprintf(log, \"ahc_cb: Not websocket, sending chat page\\n\");\n    if (log != NULL) fclose(log);\n    return send_chat_page(con);\n  }\n  if ((0 != strcmp(method, MHD_HTTP_METHOD_GET))\n      || (0 != strcmp(version, MHD_HTTP_VERSION_1_1)))\n  {\n    if (log != NULL) fprintf(log, \"ahc_cb: Method or version incorrect, sending bad request\\n\");\n    if (log != NULL) fclose(log);\n    return send_bad_request(con);\n  }\n  ws_version_header =\n    MHD_lookup_connection_value(con, MHD_HEADER_KIND,\n                                 MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION);\n  if ((NULL == ws_version_header)\n      || (0 != strcmp(ws_version_header, WS_SEC_WEBSOCKET_VERSION)))\n  {\n    if (log != NULL) fprintf(log, \"ahc_cb: WS version header invalid, sending upgrade required\\n\");\n    if (log != NULL) fclose(log);\n    return send_upgrade_required(con);\n  }\n  ret = MHD_lookup_connection_value_n(con, MHD_HEADER_KIND,\n                                      MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY,\n                                      strlen(\n                                        MHD_HTTP_HEADER_SEC_WEBSOCKET_KEY),\n                                      &ws_key_header, &key_size);\n  if ((MHD_NO == ret) || (key_size != WS_KEY_LEN))\n  {\n    if (log != NULL) fprintf(log, \"ahc_cb: WS key header invalid key_size=%zu, sending bad request\\n\", key_size);\n    if (log != NULL) fclose(log);\n    return send_bad_request(con);\n  }\n  ret = ws_get_accept_value(ws_key_header, &ws_ac_value);\n  if (MHD_NO == ret)\n  {\n    if (log != NULL) fprintf(log, \"ahc_cb: Failed to get accept value, returning MHD_NO\\n\");\n    if (log != NULL) fclose(log);\n    return ret;\n  }\n  res = MHD_create_response_for_upgrade(&uh_cb, NULL);\n  if (MHD_YES !=\n      MHD_add_response_header(res, MHD_HTTP_HEADER_SEC_WEBSOCKET_ACCEPT,\n                              ws_ac_value))\n  {\n    free(ws_ac_value);\n    MHD_destroy_response(res);\n    if (log != NULL) fprintf(log, \"ahc_cb: Failed to add response header Sec-WebSocket-Accept, returning MHD_NO\\n\");\n    if (log != NULL) fclose(log);\n    return MHD_NO;\n  }\n  free(ws_ac_value);\n  if (MHD_YES !=\n      MHD_add_response_header(res, MHD_HTTP_HEADER_UPGRADE, WS_UPGRADE_VALUE))\n  {\n    MHD_destroy_response(res);\n    if (log != NULL) fprintf(log, \"ahc_cb: Failed to add response header Upgrade, returning MHD_NO\\n\");\n    if (log != NULL) fclose(log);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response(con, MHD_HTTP_SWITCHING_PROTOCOLS, res);\n  MHD_destroy_response(res);\n\n  if (log != NULL)\n  {\n    fprintf(log, \"ahc_cb: Finished with return code %d\\n\", ret);\n    fclose(log);\n  }\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 2.2 prohibits dead code, defined as operations that are executed but whose removal would not affect program behavior. In the given code, the line '*req_cls = NULL;' follows an early return block that sets '*req_cls' to a non-null value if it was initially NULL, and the early return prevents this later assignment from executing in that case. If that first if block is not entered, the code always assigns '*req_cls = NULL;' before proceeding to process the HTTP headers and return a result. Given the function's prototype and typical usage, '*req_cls' likely serves to track the state of a request across multiple calls. Overwriting '*req_cls' with NULL here is meaningful as it indicates the request state is reset after the initial call and before processing continues. The assignment affects subsequent behavior because '*req_cls' is used by the calling framework or subsequent invocations to determine the request state. Therefore, the removal of this assignment would change program behavior, meaning the assignment is not dead code. Agent A's claim that '*req_cls = NULL;' constitutes dead code is incorrect because it has a semantic effect that influences program behavior outside the function. Hence, there is no violation of Rule 2.2 based on this assignment."
}