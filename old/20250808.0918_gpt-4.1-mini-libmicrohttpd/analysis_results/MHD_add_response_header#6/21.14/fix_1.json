{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  FILE *log_file = fopen(\"/tmp/logs/54.txt\", \"a\");\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"Entered MHD_add_response_header: header=\\\"%s\\\", content=\\\"%s\\\"\\n\", header, content);\n  }\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    if (log_file != NULL)\n      fprintf(log_file, \"Calling add_response_header_connection\\n\");\n    enum MHD_Result res = add_response_header_connection (response, content);\n    if (log_file != NULL)\n      fprintf(log_file, \"Returned from add_response_header_connection: %d\\n\", res);\n    if (log_file != NULL)\n      fclose(log_file);\n    return res;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      if (log_file != NULL)\n        fprintf(log_file, \"Transfer-Encoding content not chunked: reject\\n\");\n      if (log_file != NULL)\n        fclose(log_file);\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      if (log_file != NULL)\n        fprintf(log_file, \"Transfer-Encoding chunked already set: accept\\n\");\n      if (log_file != NULL)\n        fclose(log_file);\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      if (log_file != NULL)\n        fprintf(log_file, \"Has Content-Length header without insanity flag: reject\\n\");\n      if (log_file != NULL)\n        fclose(log_file);\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      if (log_file != NULL)\n        fprintf(log_file, \"Added Transfer-Encoding chunked header\\n\");\n      if (log_file != NULL)\n        fclose(log_file);\n      return MHD_YES;\n    }\n    if (log_file != NULL)\n      fprintf(log_file, \"Failed to add Transfer-Encoding chunked header\\n\");\n    if (log_file != NULL)\n      fclose(log_file);\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      if (log_file != NULL)\n        fprintf(log_file, \"Added Date header\\n\");\n      if (log_file != NULL)\n        fclose(log_file);\n      return MHD_YES;\n    }\n    if (log_file != NULL)\n      fprintf(log_file, \"Failed to add Date header\\n\");\n    if (log_file != NULL)\n      fclose(log_file);\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        if (log_file != NULL)\n          fprintf(log_file, \"Added Content-Length header\\n\");\n        if (log_file != NULL)\n          fclose(log_file);\n        return MHD_YES;\n      }\n    }\n    if (log_file != NULL)\n      fprintf(log_file, \"Failed to add Content-Length header or not allowed\\n\");\n    if (log_file != NULL)\n      fclose(log_file);\n    return MHD_NO;\n  }\n\n  if (log_file != NULL)\n    fprintf(log_file, \"Adding general response entry header\\n\");\n  enum MHD_Result res = add_response_entry (response,\n                                           MHD_HEADER_KIND,\n                                           header,\n                                           content);\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"Returned from add_response_entry: %d\\n\", res);\n    fclose(log_file);\n  }\n  return res;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmps03zvnbi/src/build-aux/missing: line 81: makeinfo: command not found\nWARNING: 'makeinfo' is missing on your system.\n         You should only need it if you modified a '.texi' file, or\n         any other file indirectly affecting the aspect of the manual.\n         You might want to install the Texinfo package:\n         <https://www.gnu.org/software/texinfo/>\n         The spurious makeinfo call might also be the consequence of\n         using a buggy 'make' (AIX, DU, IRIX), in which case you might\n         want to install GNU make:\n         <https://www.gnu.org/software/make/>\nmake[3]: *** [Makefile:543: libmicrohttpd.info] Error 127\nmake[2]: *** [Makefile:764: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  FILE *log_file = fopen(\"/tmp/logs/54.txt\", \"a\");\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"Entered MHD_add_response_header: header=\\\"%s\\\", content=\\\"%s\\\"\\n\", header, content);\n  }\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    if (log_file != NULL)\n      fprintf(log_file, \"Calling add_response_header_connection\\n\");\n    enum MHD_Result res = add_response_header_connection (response, content);\n    if (log_file != NULL)\n      fprintf(log_file, \"Returned from add_response_header_connection: %d\\n\", res);\n    if (log_file != NULL)\n      fclose(log_file);\n    return res;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      if (log_file != NULL)\n        fprintf(log_file, \"Transfer-Encoding content not chunked: reject\\n\");\n      if (log_file != NULL)\n        fclose(log_file);\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      if (log_file != NULL)\n        fprintf(log_file, \"Transfer-Encoding chunked already set: accept\\n\");\n      if (log_file != NULL)\n        fclose(log_file);\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      if (log_file != NULL)\n        fprintf(log_file, \"Has Content-Length header without insanity flag: reject\\n\");\n      if (log_file != NULL)\n        fclose(log_file);\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      if (log_file != NULL)\n        fprintf(log_file, \"Added Transfer-Encoding chunked header\\n\");\n      if (log_file != NULL)\n        fclose(log_file);\n      return MHD_YES;\n    }\n    if (log_file != NULL)\n      fprintf(log_file, \"Failed to add Transfer-Encoding chunked header\\n\");\n    if (log_file != NULL)\n      fclose(log_file);\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ (\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      if (log_file != NULL)\n        fprintf(log_file, \"Added Date header\\n\");\n      if (log_file != NULL)\n        fclose(log_file);\n      return MHD_YES;\n    }\n    if (log_file != NULL)\n      fprintf(log_file, \"Failed to add Date header\\n\");\n    if (log_file != NULL)\n      fclose(log_file);\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        if (log_file != NULL)\n          fprintf(log_file, \"Added Content-Length header\\n\");\n        if (log_file != NULL)\n          fclose(log_file);\n        return MHD_YES;\n      }\n    }\n    if (log_file != NULL)\n      fprintf(log_file, \"Failed to add Content-Length header or not allowed\\n\");\n    if (log_file != NULL)\n      fclose(log_file);\n    return MHD_NO;\n  }\n\n  if (log_file != NULL)\n    fprintf(log_file, \"Adding general response entry header\\n\");\n  enum MHD_Result res = add_response_entry (response,\n                                           MHD_HEADER_KIND,\n                                           header,\n                                           content);\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"Returned from add_response_entry: %d\\n\", res);\n    fclose(log_file);\n  }\n  return res;\n}\n",
  "explanation": "The original build error is related to a missing 'makeinfo' tool during the build process, which is unrelated to the provided C code snippet. Therefore, no changes were needed to fix the logic of 'MHD_add_response_header'. \n\nHowever, to ensure the provided code snippet can compile successfully in isolation, I have fixed a syntactical issue: the original snippet contained an unnecessary backslash line continuation inside a macro argument (at the line containing MHD_STATICSTR_LEN_ ( \\ MHD_HTTP_HEADER_DATE)), which might cause compilation errors depending on context. I removed this backslash to correctly pass the argument.\n\nFurther, I preserved all original code logic, indentations, and comments to maintain the original functionality. No other changes were made since the code seems logically sound and the reported build error is external to this source code."
}