{
  "user_message": "An agent A claimed that the following try_ready_normal_body code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer..\n</misra_rule>\n<target_code>\nHere is the original code of try_ready_normal_body.\n```c\nstatic enum MHD_Result\ntry_ready_normal_body (struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n\n  response = connection->rp.response;\n  mhd_assert (connection->rp.props.send_reply_body);\n\n  if ( (0 == response->total_size) ||\n                     /* TODO: replace the next check with assert */\n       (connection->rp.rsp_write_position == response->total_size) )\n    return MHD_YES;  /* 0-byte response is always ready */\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n\n    if (NULL != connection->rp.resp_iov.iov)\n      return MHD_YES;\n    copy_size = response->data_iovcnt * sizeof(MHD_iovec_);\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_ (connection,\n                                                                copy_size);\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      MHD_mutex_unlock_chk_ (&response->mutex);\n      /* not enough memory */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (out of memory).\"));\n      return MHD_NO;\n    }\n    memcpy (connection->rp.resp_iov.iov,\n            response->data_iov,\n            copy_size);\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n    return MHD_YES;\n  }\n  if (NULL == response->crc)\n    return MHD_YES;\n  if ( (response->data_start <=\n        connection->rp.rsp_write_position) &&\n       (response->data_size + response->data_start >\n        connection->rp.rsp_write_position) )\n    return MHD_YES; /* response already ready */\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    /* will use sendfile, no need to bother response crc */\n    return MHD_YES;\n  }\n#endif /* _MHD_HAVE_SENDFILE */\n\n  ret = response->crc (response->crc_cls,\n                       connection->rp.rsp_write_position,\n                       (char *) response->data,\n                       (size_t) MHD_MIN ((uint64_t) response->data_buffer_size,\n                                         response->total_size\n                                         - connection->rp.rsp_write_position));\n  if (0 > ret)\n  {\n    /* either error or http 1.0 transfer, close socket! */\n    /* TODO: do not update total size, check whether response\n     * was really with unknown size */\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n      MHD_connection_close_ (connection,\n                             MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    else\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection (application reported \" \\\n                                 \"error generating data).\"));\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  if (0 == ret)\n  {\n    connection->state = MHD_CONNECTION_NORMAL_BODY_UNREADY;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return MHD_NO;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In the function try_ready_normal_body, the pointer response->data, which is passed to the response->crc callback function, is cast from a possibly const qualified pointer to a non-const char pointer (char *). If response->crc modifies the data pointed to by this pointer, then the pointer should not be const-qualified. However, since the original pointer is const-qualified but forcibly cast away with a (char *) cast, this violates Rule 8.13, which mandates pointers should point to const-qualified type whenever possible and must not point to const-qualified type if the function modifies the pointed object. Casting away const and passing a pointer that may modify data is a direct violation of this rule.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstruct {\n    struct MHD_Response *response;\n    size_t rsp_write_position;\n    struct {\n        MHD_iovec_ *iov;\n        size_t cnt;\n        size_t sent;\n    } resp_iov;\n    int resp_sender;\n} rp;\nvoid MHD_mutex_unlock_chk_(int *mutex) {\n    (void)mutex;\n    /* no-op */\n}\nvoid CONNECTION_CLOSE_ERROR(struct MHD_Connection *connection, const char *msg) {\n    (void)connection;\n    (void)msg;\n    /* no-op */\n}\nstatic enum MHD_Result\ntry_ready_normal_body_with_log(struct MHD_Connection *connection)\n{\n  ssize_t ret;\n  struct MHD_Response *response;\n  FILE *log_file = fopen(\"/tmp/logs/707.txt\", \"a\");\n\n  response = connection->rp.response;\n  if (log_file)\n    fprintf(log_file, \"Entered try_ready_normal_body_with_log\\n\");\n\n  if ((0 == response->total_size) ||\n      (connection->rp.rsp_write_position == response->total_size))\n  {\n    if (log_file)\n      fprintf(log_file, \"Response total size 0 or fully written, returning MHD_YES\\n\");\n    if (log_file) fclose(log_file);\n    return MHD_YES;\n  }\n  if (NULL != response->data_iov)\n  {\n    size_t copy_size;\n\n    if (NULL != connection->rp.resp_iov.iov)\n    {\n      if (log_file)\n        fprintf(log_file, \"resp_iov.iov already set, returning MHD_YES\\n\");\n      if (log_file) fclose(log_file);\n      return MHD_YES;\n    }\n    copy_size = response->data_iovcnt * sizeof(MHD_iovec_);\n    connection->rp.resp_iov.iov = MHD_connection_alloc_memory_(connection, copy_size);\n    if (NULL == connection->rp.resp_iov.iov)\n    {\n      if (log_file) fprintf(log_file, \"Memory allocation failed, closing connection\\n\");\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n      MHD_mutex_unlock_chk_(&response->mutex);\n#endif\n      CONNECTION_CLOSE_ERROR(connection, \"Closing connection (out of memory).\");\n      if (log_file) fclose(log_file);\n      return MHD_NO;\n    }\n    memcpy(connection->rp.resp_iov.iov, response->data_iov, copy_size);\n    connection->rp.resp_iov.cnt = response->data_iovcnt;\n    connection->rp.resp_iov.sent = 0;\n    if (log_file) fprintf(log_file, \"Copied data_iov to resp_iov.iov, returning MHD_YES\\n\");\n    if (log_file) fclose(log_file);\n    return MHD_YES;\n  }\n  if (NULL == response->crc)\n  {\n    if (log_file) fprintf(log_file, \"No crc callback, returning MHD_YES\\n\");\n    if (log_file) fclose(log_file);\n    return MHD_YES;\n  }\n  if ((response->data_start <= connection->rp.rsp_write_position) &&\n      (response->data_size + response->data_start > connection->rp.rsp_write_position))\n  {\n    if (log_file) fprintf(log_file, \"Response already ready, returning MHD_YES\\n\");\n    if (log_file) fclose(log_file);\n    return MHD_YES;\n  }\n#if defined(_MHD_HAVE_SENDFILE)\n  if (MHD_resp_sender_sendfile == connection->rp.resp_sender)\n  {\n    if (log_file) fprintf(log_file, \"Using sendfile, returning MHD_YES\\n\");\n    if (log_file) fclose(log_file);\n    return MHD_YES;\n  }\n#endif\n\n  if (log_file) fprintf(log_file, \"Calling crc callback with non-const cast of response->data\\n\");\n  ret = response->crc(response->crc_cls,\n                      connection->rp.rsp_write_position,\n                      (char *)response->data,\n                      (size_t)MHD_MIN((uint64_t)response->data_buffer_size,\n                                      response->total_size - connection->rp.rsp_write_position));\n  \n  if (0 > ret)\n  {\n    if (log_file) fprintf(log_file, \"crc callback returned error %zd, closing connection\\n\", ret);\n    response->total_size = connection->rp.rsp_write_position;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_(&response->mutex);\n#endif\n    if (MHD_CONTENT_READER_END_OF_STREAM == ret)\n      MHD_connection_close_(connection, MHD_REQUEST_TERMINATED_COMPLETED_OK);\n    else\n      CONNECTION_CLOSE_ERROR(connection, \"Closing connection (application reported error generating data).\");\n    if (log_file) fclose(log_file);\n    return MHD_NO;\n  }\n  response->data_start = connection->rp.rsp_write_position;\n  response->data_size = (size_t) ret;\n  if (0 == ret)\n  {\n    connection->state = 0; /* Assuming MHD_CONNECTION_NORMAL_BODY_UNREADY = 0 */\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_(&response->mutex);\n#endif\n    if (log_file) fprintf(log_file, \"crc callback returned 0, returning MHD_NO\\n\");\n    if (log_file) fclose(log_file);\n    return MHD_NO;\n  }\n  if (log_file) fprintf(log_file, \"crc callback successful, returning MHD_YES\\n\");\n  if (log_file) fclose(log_file);\n  return MHD_YES;\n}\n\nvoid *MHD_connection_alloc_memory_(struct MHD_Connection *conn, size_t size) {\n    (void)conn;\n    return malloc(size);\n}\nvoid MHD_connection_close_(struct MHD_Connection *connection, int reason) {\n    (void)connection;\n    (void)reason;\n    /* no-op */\n}\n\n```\nThe test code failed to parse, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C 2023 Rule 8.13 mandates that a pointer should point to a const-qualified type whenever possible, and that a pointer should not point to a const-qualified type if the pointer is used by a function that modifies the pointed-to object. In the provided code, the pointer response->data is passed to the crc function pointer after explicitly casting it to (char *), which removes any const qualification it might have. Since the original type of response->data is not shown fully here, it is implied to be a pointer to a const-qualified type (e.g., const char *). Casting away const and passing the pointer to a function that might modify the data is effectively breaking the rule, as this may invoke undefined behavior and violates the const-correctness principles outlined by MISRA. Therefore, the scenario that the agent A describes is a legitimate violation of Rule 8.13, assuming that response->crc may modify the data. The forced cast away of const is a direct breach of the rule, and so the report is correct."
}