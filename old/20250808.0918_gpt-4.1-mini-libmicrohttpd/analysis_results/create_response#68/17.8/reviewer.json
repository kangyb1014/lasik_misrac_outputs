{
  "user_message": "An agent A claimed that the following create_response code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of create_response.\n```c\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  request = *req_cls;\n  if (NULL == request)\n  {\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      return MHD_NO;\n    }\n    *req_cls = request;\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        return MHD_NO; /* internal error */\n      }\n    }\n    return MHD_YES;\n  }\n  if (NULL == request->session)\n  {\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      return MHD_NO; /* internal error */\n    }\n  }\n  session = request->session;\n  session->start = time (NULL);\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    /* evaluate POST data */\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n      return MHD_NO;\n    if (0 != *upload_data_size)\n    {\n      *upload_data_size = 0;\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    MHD_destroy_post_processor (request->pp);\n    request->pp = NULL;\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n    if (NULL != request->post_url)\n      url = request->post_url;\n  }\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    i = 0;\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n      i++;\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n    if (ret != MHD_YES)\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n    return ret;\n  }\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function parameter 'method' is of type 'const char *' indicating it should not be modified. However, inside the function, there is an assignment 'method = MHD_HTTP_METHOD_GET;' which modifies the pointer parameter itself, violating the MISRA C 2023 Rule 17.8 that states a function parameter should not be modified.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  FILE *log_file = fopen(\"/tmp/logs/549.txt\", \"a\");\n  if (log_file == NULL) {\n    /* fallback if log file cannot be opened */\n    log_file = stdout;\n  }\n\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n  (void) cls;\n  (void) version;\n\n  fprintf(log_file, \"Entry: create_response\\n\");\n  fprintf(log_file, \"Initial method pointer: %p\\n\", (void *)method);\n\n  request = *req_cls;\n  if (NULL == request)\n  {\n    fprintf(log_file, \"Request NULL, allocating new request\\n\");\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      fprintf(stderr, \"calloc error: %s\\n\", strerror (errno));\n      fprintf(log_file, \"calloc failed, returning MHD_NO\\n\");\n      fclose(log_file);\n      return MHD_NO;\n    }\n    *req_cls = request;\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      fprintf(log_file, \"Setting up post processor for URL: %s\\n\", url);\n      request->pp = MHD_create_post_processor (connection, 1024, &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        fprintf(stderr, \"Failed to setup post processor for `%s'\\n\", url);\n        fprintf(log_file, \"Post processor setup failed, returning MHD_NO\\n\");\n        fclose(log_file);\n        return MHD_NO;\n      }\n    }\n    fprintf(log_file, \"Returning MHD_YES after request setup\\n\");\n    fclose(log_file);\n    return MHD_YES;\n  }\n\n  if (NULL == request->session)\n  {\n    fprintf(log_file, \"Session NULL, getting session for URL: %s\\n\", url);\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      fprintf(stderr, \"Failed to setup session for `%s'\\n\", url);\n      fprintf(log_file, \"Session setup failed, returning MHD_NO\\n\");\n      fclose(log_file);\n      return MHD_NO;\n    }\n  }\n\n  session = request->session;\n  session->start = time (NULL);\n\n  /* Use a local method variable instead of modifying input parameter */\n  const char *local_method = method;\n\n  if (0 == strcmp (local_method, MHD_HTTP_METHOD_POST))\n  {\n    fprintf(log_file, \"POST method detected\\n\");\n    if (MHD_YES != MHD_post_process (request->pp, upload_data, *upload_data_size))\n    {\n      fprintf(log_file, \"MHD_post_process failed, returning MHD_NO\\n\");\n      fclose(log_file);\n      return MHD_NO;\n    }\n    if (0 != *upload_data_size)\n    {\n      *upload_data_size = 0;\n      fprintf(log_file, \"upload_data_size non-zero after post process, returning MHD_YES\\n\");\n      fclose(log_file);\n      return MHD_YES;\n    }\n    MHD_destroy_post_processor (request->pp);\n    request->pp = NULL;\n\n    /* Violation removed: do not modify the input pointer directly */\n    fprintf(log_file, \"Modifying local_method pointer from %p to MHD_HTTP_METHOD_GET %p\\n\", (void *)local_method, (void *)MHD_HTTP_METHOD_GET);\n    local_method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n\n    if (NULL != request->post_url)\n      url = request->post_url;\n  }\n\n  fclose(log_file);\n\n  /* Rest of the function unchanged ... */\n  /* For brevity, not re-implementing the full function here */\n  return MHD_YES;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C 2023 Rule 17.8 states that a function parameter should not be modified. In the provided original code, the function parameter 'method' is declared as 'const char *method', indicating that the pointer itself should not be modified (and the data pointed to should not be modified either). However, in the code, there is an assignment: 'method = MHD_HTTP_METHOD_GET;'. This modifies the pointer parameter itself by changing it to point to another string literal. Although the pointer is passed by value, reassigning the pointer variable inside the function is considered modifying the parameter variable itself, which is prohibited by Rule 17.8. The agent A's scenario correctly identifies this violation. Their attempted fix to assign the value to a local variable 'local_method' instead of 'method' complies with the rule, confirming that the original code violates Rule 17.8. Therefore, the report by agent A is correct."
}