{
  "user_message": "An agent A claimed that the following is_websocket_request code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of is_websocket_request.\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function is_websocket_request contains a void cast of the 'con' parameter to silence a compiler warning because 'con' is unused. This operation does not affect program behavior but is executed, constituting dead code as per MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstruct MHD_Connection {};\nstatic void log_state(const char *msg) {\n    FILE *fp = fopen(\"/tmp/logs/482.txt\", \"a\");\n    if (fp != NULL) {\n        fprintf(fp, \"%s\\n\", msg);\n        fclose(fp);\n    }\n}\n\nstatic MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n  const char *WS_UPGRADE_VALUE = \"websocket\";\n  char log_msg[128];\n\n  (void) con;  /* Unused. Silent compiler warning. */\n  log_state(\"(void) con; cast executed: void cast of 'con' to silence compiler warning - possible dead code\");\n\n  snprintf(log_msg, sizeof(log_msg), \"upg_header=%p, con_header=%p\", (void *)upg_header, (void *)con_header);\n  log_state(log_msg);\n\n  if ((upg_header != NULL) && (con_header != NULL) &&\n      (0 == strcmp(upg_header, WS_UPGRADE_VALUE)) &&\n      (NULL != strstr(con_header, \"Upgrade\"))) {\n    log_state(\"Conditions met: returning MHD_YES\");\n    return MHD_YES;\n  } else {\n    log_state(\"Conditions not met: returning MHD_NO\");\n    return MHD_NO;\n  }\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The cast to void applied to the parameter 'con' in the function is_websocket_request is a well-known and standard idiom in C to explicitly mark a variable as intentionally unused, suppressing compiler warnings. This operation does not produce any executable code that affects the program's runtime behavior; it effectively acts as a no-op. According to MISRA C 2023 Rule 2.2, dead code is any operation that is executed but whose removal would not affect program behavior. However, the void cast of an unused parameter is not an operation in the sense of executable code; it is a compile-time directive for the compiler. Per MISRA note 3, initialization is not considered as dead code similarly here, the void cast is a harmless directive rather than an executable statement with side-effects or behavior. Therefore, the use of (void) con; to silence unused parameter warnings does not constitute dead code violating rule 2.2. Also, the failed attempt at a test code does not provide evidence of a violation and is irrelevant to the interpretation of the void cast. Hence, Agent A's report that the void cast is dead code leading to violation of MISRA C 2023 Rule 2.2 is incorrect."
}