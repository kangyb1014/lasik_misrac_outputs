{
  "user_message": "An agent A claimed that the following MHD_get_connection_values code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_connection_values.\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code uses the '_MHD_EXTERN' macro defined as '__attribute__((visibility(\"default\")))extern', which is a GCC compiler-specific extension attribute. This use of a compiler-specific attribute constitutes a language extension violating MISRA C 2023 Rule 1.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nenum MHD_ValueKind {\n  MHD_HEADER_KIND = 1\n};\ntypedef int (*MHD_KeyValueIterator)(void *cls, enum MHD_ValueKind kind, const char *key, const char *value);\nstruct RQ {\n  struct MHD_HTTP_Req_Header *headers_received;\n};\n\nint\nMHD_get_connection_values(struct MHD_Connection *connection,\n                          enum MHD_ValueKind kind,\n                          MHD_KeyValueIterator iterator,\n                          void *iterator_cls)\n{\n  FILE *log_file = fopen(\"/tmp/logs/104.txt\", \"a\");\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"Entering MHD_get_connection_values with connection=%p, kind=%d\\n\", (void*)connection, kind);\n  }\n\n  if (NULL == connection)\n  {\n    if (log_file != NULL)\n    {\n      fprintf(log_file, \"Connection is NULL, returning -1\\n\");\n      fclose(log_file);\n    }\n    return -1;\n  }\n\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (log_file != NULL)\n    {\n      fprintf(log_file, \"Checking header '%s' with kind=%d\\n\", pos->header, pos->kind);\n    }\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ((NULL != iterator) &&\n          (MHD_NO == iterator(iterator_cls, pos->kind, pos->header, pos->value)))\n      {\n        if (log_file != NULL)\n        {\n          fprintf(log_file, \"Iterator returned MHD_NO; returning ret=%d\\n\", ret);\n          fclose(log_file);\n        }\n        return ret;\n      }\n    }\n  }\n\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"Completed iteration; returning ret=%d\\n\", ret);\n    fclose(log_file);\n  }\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The provided code uses the macro '_MHD_EXTERN' which is defined as '__attribute__((visibility(\"default\")))extern'. This attribute syntax '__attribute__((...))' is a GCC compiler-specific extension, not part of standard C. According to MISRA C 2023 Rule 1.2, language extensions should not be used unless explicitly allowed. Since this explicit GCC attribute is a language extension, its use violates Rule 1.2. The agent A's report that this code violates MISRA C 2023 Rule 1.2 is correct. The failure of the test code to compile may be due to problems with the test setup but does not negate the fact that the original code uses a language extension causing the rule violation."
}