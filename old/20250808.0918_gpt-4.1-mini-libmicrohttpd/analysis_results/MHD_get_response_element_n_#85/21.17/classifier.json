{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified MHD_get_response_element_n_ code that contains useful probe functions that print useful logs to a file \"/tmp/logs/687.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of MHD_get_response_element_n_ as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of MHD_get_response_element_n_:\n```c\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos;\n  }\n  return NULL;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_get_response_element_n_:\nbool\nMHD_str_equal_caseless_bin_n_ (const char *const str1,\n                               const char *const str2,\n                               size_t len)\n{\n  size_t i;\n\n  for (i = 0; i < len; ++i)\n  {\n    const char c1 = str1[i];\n    const char c2 = str2[i];\n    if (charsequalcaseless (c1, c2))\n      continue;\n    else\n      return 0;\n  }\n  return ! 0;\n}\n...\n#define mhd_assert(ignore) ((void)0)\n</additional code>\nJudge whether the above MHD_get_response_element_n_ code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "If the key_len parameter is greater than the actual length of the key string (which is expected to be null-terminated), then passing key and key_len to MHD_str_equal_caseless_bin_n_ may result in out-of-bounds read from key, violating Rule 21.17. Specifically, the loop inside MHD_str_equal_caseless_bin_n_ accesses str2[i] up to len without bounds checking, so if key_len is larger than the allocated length of key, this causes an access beyond the bounds of key.",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\nstruct MHD_HTTP_Res_Header {\n    size_t header_size;\n    enum MHD_ValueKind {\n        MHD_KIND_EXAMPLE = 0\n    } kind;\n    const char *header;\n    struct MHD_HTTP_Res_Header *next;\n};\n\nstruct MHD_Response {\n    struct MHD_HTTP_Res_Header *first_header;\n};\n\nint charsequalcaseless(char a, char b) {\n    if (a >= 'A' && a <= 'Z') {\n        a += 'a' - 'A';\n    }\n    if (b >= 'A' && b <= 'Z') {\n        b += 'a' - 'A';\n    }\n    return a == b;\n}\n\nint MHD_str_equal_caseless_bin_n_(const char *const str1,\n                                  const char *const str2,\n                                  size_t len)\n{\n    size_t i;\n    FILE *log = fopen(\"/tmp/logs/687.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"MHD_str_equal_caseless_bin_n_: start comparison len=%zu\\n\", len);\n    }\n    for (i = 0; i < len; ++i)\n    {\n        const char c1 = str1[i];\n        const char c2 = str2[i];\n        if (log) {\n            fprintf(log, \"Compare char %zu: '%c'(0x%02X) vs '%c'(0x%02X)\\n\", i, c1, (unsigned char)c1, c2, (unsigned char)c2);\n        }\n        if (charsequalcaseless(c1, c2))\n            continue;\n        else {\n            if (log) {\n                fprintf(log, \"Chars differ at position %zu\\n\", i);\n                fclose(log);\n            }\n            return 0;\n        }\n    }\n    if (log) {\n        fprintf(log, \"Strings equal for length %zu\\n\", len);\n        fclose(log);\n    }\n    return 1;\n}\n\n#define mhd_assert(ignore) ((void)0)\n\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_(struct MHD_Response *response,\n                           enum MHD_ValueKind kind,\n                           const char *key,\n                           size_t key_len)\n{\n    struct MHD_HTTP_Res_Header *pos;\n    FILE *log = fopen(\"/tmp/logs/687.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"MHD_get_response_element_n_: called with key_len=%zu\\n\", key_len);\n    }\n\n    mhd_assert(NULL != key);\n    mhd_assert(0 != key[0]);\n    mhd_assert(0 != key_len);\n\n    for (pos = response->first_header;\n         NULL != pos;\n         pos = pos->next)\n    {\n        if (log) {\n            fprintf(log, \"Checking header with size %zu, kind %d\\n\", pos->header_size, (int)pos->kind);\n        }\n        if ((pos->header_size == key_len) &&\n            (kind == pos->kind) &&\n            (MHD_str_equal_caseless_bin_n_(pos->header, key, pos->header_size)))\n        {\n            if (log) {\n                fprintf(log, \"Found matching header at %p\\n\", (void *)pos);\n                fclose(log);\n            }\n            return pos;\n        }\n    }\n    if (log) {\n        fprintf(log, \"No matching header found\\n\");\n        fclose(log);\n    }\n    return NULL;\n}\n"
}