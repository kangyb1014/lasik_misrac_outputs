{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified ws_receive_frame code that contains useful probe functions that print useful logs to a file \"/tmp/logs/31.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of ws_receive_frame as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of ws_receive_frame:\n```c\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function ws_receive_frame:\n#define WS_FIN 128\n...\n#define WS_OPCODE_TEXT_FRAME 1\n...\n#define WS_OPCODE_CON_CLOSE_FRAME 8\n</additional code>\nJudge whether the above ws_receive_frame code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "If the calculated indices idx_first_mask, idx_first_data, or data_length lead to accesses beyond the bounds of the 'frame' buffer (e.g., when *length is less than expected based on the mask length), then accessing frame[idx_first_mask + i] or frame[i] in the loops can cause out-of-bounds reads, violating Rule 21.17. For example, if *length is smaller than idx_first_data + data_length, the code will read beyond the frame buffer.",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  FILE *log = fopen(\"/tmp/logs/31.txt\", \"a\");\n  if (log != NULL)\n  {\n    fprintf(log, \"ws_receive_frame called with length = %zd\\n\", *length);\n    fprintf(log, \"frame[0] = 0x%02X\\n\", frame[0]);\n  }\n\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (128 | 1)) /* WS_FIN | WS_OPCODE_TEXT_FRAME */\n  {\n    *type = 1; /* WS_OPCODE_TEXT_FRAME */\n    if (log) fprintf(log, \"Text frame detected\\n\");\n\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (log) fprintf(log, \"mask byte=0x%02X, flength=%u\\n\", mask, flength);\n\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n      if (log) fprintf(log, \"Extended payload length 16-bit, idx_first_mask=4\\n\");\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n      if (log) fprintf(log, \"Extended payload length 64-bit, idx_first_mask=10\\n\");\n    }\n\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    if (log) fprintf(log, \"idx_first_data=%u\\n\", idx_first_data);\n\n    if ((size_t)(*length) < idx_first_data) \n    {\n      if (log) fprintf(log, \"Error: Frame length %zd is less than expected index first data %u - possible out of bounds\\n\", *length, idx_first_data);\n      fclose(log);\n      return NULL;\n    }\n\n    data_length = (size_t) *length - idx_first_data;\n    if (log) fprintf(log, \"data_length=%zu\\n\", data_length);\n\n    if ((size_t)(*length) < idx_first_data + 4)\n    {\n      if (log) fprintf(log, \"Error: Frame length %zd less than idx_first_data + 4, can't read masks - out of bounds\\n\", *length);\n      fclose(log);\n      return NULL;\n    }\n\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        if (log) fprintf(log, \"Decoding byte frame[%d]=0x%02X with mask 0x%02X\\n\", i, frame[i], masks[j % 4]);\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n    else\n    {\n      if (log) fprintf(log, \"Failed to allocate msg buffer of size %zu\\n\", data_length + 1);\n    }\n  }\n  else if (frame[0] == (128 | 8)) /* WS_FIN | WS_OPCODE_CON_CLOSE_FRAME */\n  {\n    *type = 8; /* WS_OPCODE_CON_CLOSE_FRAME */\n    if (log) fprintf(log, \"Connection close frame detected\\n\");\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n    if (log) fprintf(log, \"Other frame type: %d\\n\", *type);\n  }\n  if (log) fclose(log);\n  return msg;\n}\n"
}