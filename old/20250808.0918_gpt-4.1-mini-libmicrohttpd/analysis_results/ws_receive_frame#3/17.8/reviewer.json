{
  "user_message": "An agent A claimed that the following ws_receive_frame code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of ws_receive_frame.\n```c\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function ws_receive_frame modifies the pointer parameter '*length' by assigning '*length = (ssize_t) data_length;', which violates MISRA C 2023 Rule 17.8 because the pointer parameter itself is modified.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  FILE *log = fopen(\"/tmp/logs/29.txt\", \"a\");\n  if (log == NULL) {\n    /* Proceed without logging if file cannot be opened */\n  }\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    if (log) fprintf(log, \"Entered text frame processing\\n\");\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n      if (log) fprintf(log, \"Payload length indicator is 126, idx_first_mask set to 4\\n\");\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n      if (log) fprintf(log, \"Payload length indicator is 127, idx_first_mask set to 10\\n\");\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    if (log) fprintf(log, \"idx_first_data calculated as %u\\n\", idx_first_data);\n\n    data_length = (size_t) *length - idx_first_data;\n    if (log) fprintf(log, \"Data length calculated as %zu\\n\", data_length);\n\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = (unsigned char*)malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      if (log) fprintf(log, \"Allocated message buffer\\n\");\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n\n      if (log) fprintf(log, \"Modifying *length from %zd to %zu - violation of Rule 17.8\\n\", *length, data_length);\n      *length = (ssize_t) data_length; /* Pointer parameter modified - violation */\n\n      msg[j] = '\\0';\n    }\n    else\n    {\n      if (log) fprintf(log, \"Failed to allocate message buffer\\n\");\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    if (log) fprintf(log, \"Frame is connection close frame\\n\");\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    if (log) fprintf(log, \"Frame is other type: %d\\n\", frame[0] & 0x0F);\n    *type = frame[0] & 0x0F;\n  }\n  if (log != NULL) fclose(log);\n  return msg;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 17.8 states that a function parameter should not be modified. Specifically, if the parameter is a pointer, the pointer itself must not be modified (i.e., it should not be reassigned), but the object it points to may be modified. In the given code, ws_receive_frame has a parameter ssize_t *length. The code modifies the object pointed to by length via the assignment '*length = (ssize_t) data_length;'. This is allowed under the rule, as the pointer itself is not modified, only the pointed-to object is changed.\n\nAgent A's claim that this violates Rule 17.8 because the pointer parameter itself is modified is incorrect: the pointer variable 'length' remains unchanged; only '*length' is changed. Therefore, the code complies with Rule 17.8.\n\nThe additional logging code does not demonstrate a violation since modifying the pointed-to object is permitted. The compilation failure of the test code is unrelated to MISRA rule compliance. Hence, the reported violation is not valid."
}