{
  "user_message": "An agent A claimed that the following process_value code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of process_value.\n```c\nstatic void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  /* 'value_start' and 'value_end' must be either both non-NULL or both NULL */\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n  /* move remaining input from previous round into processing buffer */\n  if (0 != pp->xbuf_pos)\n    memcpy (xbuf,\n            pp->xbuf,\n            pp->xbuf_pos);\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n  if ( (NULL != last_escape) &&\n       (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    memcpy (pp->xbuf,\n            last_escape,\n            (size_t) (value_end - last_escape));\n    value_end = last_escape;\n  }\n  while ( (value_start != value_end) ||\n          (pp->must_ikvi) ||\n          (xoff > 0) )\n  {\n    size_t delta = (size_t) (value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    mhd_assert (value_end >= value_start);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n    /* move (additional) input into processing buffer */\n    if (0 != delta)\n    {\n      memcpy (&xbuf[xoff],\n              value_start,\n              delta);\n      xoff += delta;\n      value_start += delta;\n    }\n    /* find if escape sequence is at the end of the processing buffer;\n       if so, exclude those from processing (reduce delta to point at\n       end of processed region) */\n    if ( (xoff > 0) &&\n         ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 1;\n      }\n    }\n    else if ( (xoff > 1) &&\n              ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        /* move escape sequence into buffer for next function invocation */\n        memcpy (pp->xbuf,\n                &xbuf[xoff],\n                2);\n        pp->xbuf_pos = 2;\n      }\n      else\n      {\n        /* just skip escape sequence for next loop iteration */\n        delta = xoff;\n        clen = 2;\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n    /* unescape */\n    xbuf[xoff] = '\\0';        /* 0-terminate in preparation */\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n    }\n    /* finally: call application! */\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      if (MHD_NO == pp->ikvi (pp->cls,\n                              MHD_POSTDATA_KIND,\n                              (const char *) &pp[1],      /* key */\n                              NULL,\n                              NULL,\n                              NULL,\n                              xbuf,\n                              pp->value_offset,\n                              xoff))\n      {\n        pp->state = PP_Error;\n        return;\n      }\n    }\n    pp->value_offset += xoff;\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';        /* undo 0-termination */\n      memmove (xbuf,\n               &xbuf[delta],\n               clen);\n    }\n    xoff = clen;\n  }\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In the function process_value, the parameter 'value_end' which is a pointer parameter, is modified inside the function (e.g., \"value_end = last_escape;\"). According to MISRA C 2023 Rule 17.8, the pointer parameter itself shall not be modified, though the object referred to by the pointer may be modified. Modifying 'value_end' violates this rule.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic size_t MHD_http_unescape (char *val)\n{\n  // For demonstration, return strlen; static to avoid multiple definition\n  return strlen(val);\n}\n\nstatic void\nprocess_value (struct MHD_PostProcessor *pp,\n               const char *value_start,\n               const char *value_end,\n               const char *last_escape)\n{\n  FILE *log_file = fopen(\"/tmp/logs/653.txt\", \"a\");\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"Entered process_value\\n\");\n    fprintf(log_file, \"Initial value_start=%p, value_end=%p, last_escape=%p\\n\", (const void *)value_start, (const void *)value_end, (const void *)last_escape);\n  }\n\n  char xbuf[XBUF_SIZE + 1];\n  size_t xoff;\n\n  mhd_assert (pp->xbuf_pos < sizeof (xbuf));\n  mhd_assert ( (NULL == value_start) || (NULL != value_end) );\n  mhd_assert ( (NULL != value_start) || (NULL == value_end) );\n  mhd_assert ( (NULL == last_escape) || (NULL != value_start) );\n\n  if (0 != pp->xbuf_pos)\n    memcpy (xbuf, pp->xbuf, pp->xbuf_pos);\n  xoff = pp->xbuf_pos;\n  pp->xbuf_pos = 0;\n\n  if ( (NULL != last_escape) && (((size_t) (value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    mhd_assert (value_end >= last_escape);\n    pp->xbuf_pos = (size_t) (value_end - last_escape);\n    memcpy (pp->xbuf, last_escape, (size_t) (value_end - last_escape));\n    if (log_file != NULL) fprintf(log_file, \"Modifying value_end from %p to %p as per last_escape\\n\", (const void *)value_end, (const void *)last_escape);\n    /* Make a local copy of value_end to avoid modifying parameter */\n    /* So use local variable new_value_end */\n  }\n\n  /* Use a local variable for value_end to avoid modifying parameter inside the function */\n  const char *local_value_end = value_end;\n  if ( (NULL != last_escape) && (((size_t) (local_value_end - last_escape)) < sizeof (pp->xbuf)) )\n  {\n    local_value_end = last_escape;\n  }\n\n  if (log_file != NULL)\n    fprintf(log_file, \"After possible modification, value_end=%p\\n\", (const void *)local_value_end);\n\n  while ( (value_start != local_value_end) || (pp->must_ikvi) || (xoff > 0) )\n  {\n    size_t delta = (size_t) (local_value_end - value_start);\n    bool cut = false;\n    size_t clen = 0;\n\n    mhd_assert (local_value_end >= value_start);\n\n    if (delta > XBUF_SIZE - xoff)\n      delta = XBUF_SIZE - xoff;\n\n    if (0 != delta)\n    {\n      memcpy (&xbuf[xoff], value_start, delta);\n      xoff += delta;\n      value_start += delta;\n    }\n\n    if (log_file != NULL)\n      fprintf(log_file, \"Loop iteration: delta=%zu, xoff=%zu\\n\", delta, xoff);\n\n    if ( (xoff > 0) && ('%' == xbuf[xoff - 1]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff--;\n      if (cut)\n      {\n        pp->xbuf[0] = '%';\n        pp->xbuf_pos = 1;\n      }\n      else\n      {\n        delta = xoff;\n        clen = 1;\n      }\n    }\n    else if ( (xoff > 1) && ('%' == xbuf[xoff - 2]) )\n    {\n      cut = (xoff != XBUF_SIZE);\n      xoff -= 2;\n      if (cut)\n      {\n        memcpy (pp->xbuf, &xbuf[xoff], 2);\n        pp->xbuf_pos = 2;\n      }\n      else\n      {\n        delta = xoff;\n        clen = 2;\n      }\n    }\n    mhd_assert (xoff < sizeof (xbuf));\n\n    xbuf[xoff] = '\\0';\n    if (0 != xoff)\n    {\n      MHD_unescape_plus (xbuf);\n      xoff = MHD_http_unescape (xbuf);\n    }\n\n    if (pp->must_ikvi || (0 != xoff) )\n    {\n      pp->must_ikvi = false;\n      // Skipping call to ikvi for testing\n    }\n\n    pp->value_offset += xoff;\n    if (cut)\n      break;\n    if (0 != clen)\n    {\n      xbuf[delta] = '%';\n      memmove (xbuf, &xbuf[delta], clen);\n    }\n    xoff = clen;\n  }\n\n  if (log_file != NULL)\n  {\n    fprintf(log_file, \"Exiting process_value\\n\");\n    fclose(log_file);\n  }\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C 2023 Rule 17.8 states that a function parameter should not be modified. In particular, if the parameter is a pointer, the pointer itself should not be changed within the function, although the object pointed to may be modified. In the provided 'process_value' code, the parameter 'value_end' is indeed reassigned within the function (specifically, with the statement 'value_end = last_escape;'). This constitutes modifying the pointer parameter as such, which is prohibited under Rule 17.8. Thus, the agent A's claim accurately identifies a violation of Rule 17.8. The test code intended to avoid this modification by using a local variable was not successfully compiled or run, but the original code clearly modifies the pointer parameter. Therefore, the report by agent A is correct."
}