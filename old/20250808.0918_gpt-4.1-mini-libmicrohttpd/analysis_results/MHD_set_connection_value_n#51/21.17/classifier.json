{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified MHD_set_connection_value_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/415.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of MHD_set_connection_value_n as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_set_connection_value_n:\nstatic enum MHD_Result\nMHD_set_connection_value_n_nocheck_ (struct MHD_Connection *connection,\n                                     enum MHD_ValueKind kind,\n                                     const char *key,\n                                     size_t key_size,\n                                     const char *value,\n                                     size_t value_size)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  pos = MHD_connection_alloc_memory_ (connection,\n                                      sizeof (struct MHD_HTTP_Res_Header));\n  if (NULL == pos)\n    return MHD_NO;\n  pos->header = key;\n  pos->header_size = key_size;\n  pos->value = value;\n  pos->value_size = value_size;\n  pos->kind = kind;\n  pos->next = NULL;\n  /* append 'pos' to the linked list of headers */\n  if (NULL == connection->rq.headers_received_tail)\n  {\n    connection->rq.headers_received = pos;\n    connection->rq.headers_received_tail = pos;\n  }\n  else\n  {\n    connection->rq.headers_received_tail->next = pos;\n    connection->rq.headers_received_tail = pos;\n  }\n  return MHD_YES;\n}\n</additional code>\nJudge whether the above MHD_set_connection_value_n code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "If the key or value pointers point to strings containing embedded null characters, the calls to strlen(key) or strlen(value) will read beyond the 'key_size' or 'value_size' bounds, potentially violating memory safety and MISRA C 2023 Rule 21.17 by accessing beyond allocated object bounds.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  FILE *log_file = fopen(\"/tmp/logs/415.txt\", \"a\");\n  if (log_file == NULL) {\n    /* If file cannot be opened, continue without logging */\n  }\n\n  if (log_file != NULL) {\n    fprintf(log_file, \"Entering MHD_set_connection_value_n\\n\");\n    fprintf(log_file, \"kind = %d\\n\", (int)kind);\n    fprintf(log_file, \"key pointer = %p, key_size = %zu\\n\", (void *)key, key_size);\n    fprintf(log_file, \"value pointer = %p, value_size = %zu\\n\", (void *)value, value_size);\n  }\n\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n  {\n    if (log_file != NULL) {\n      size_t key_strlen = key ? strlen(key) : 0;\n      size_t value_strlen = value ? strlen(value) : 0;\n      fprintf(log_file, \"Violation detected: strlen(key) = %zu vs key_size = %zu\\n\", key_strlen, key_size);\n      fprintf(log_file, \"Violation detected: strlen(value) = %zu vs value_size = %zu\\n\", value_strlen, value_size);\n      fprintf(log_file, \"Returning MHD_NO due to binary zero not allowed except GET arguments\\n\");\n      fclose(log_file);\n    }\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n  }\n\n  if (log_file != NULL) {\n    fprintf(log_file, \"Validation passed, calling MHD_set_connection_value_n_nocheck_\\n\");\n    fclose(log_file);\n  }\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n\n"
}