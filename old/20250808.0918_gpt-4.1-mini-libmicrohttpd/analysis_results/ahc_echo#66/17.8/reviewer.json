{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  /* require: \"Aladdin\" with password \"open sesame\" */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In the ahc_echo function, the parameter 'void **req_cls' is a pointer to a pointer that is modified inside the function by assigning '*req_cls = &aptr;' and later '*req_cls = NULL;'. This violates MISRA C 2023 Rule 17.8 which states that a function parameter should not be modified. Although modifying the object pointed to by a pointer parameter is allowed, modifying the pointer parameter itself (i.e., changing what it points to) is not allowed. Here, the function modifies the pointer parameter 'req_cls' by dereferencing and changing its value, which is a direct violation of the rule.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic int aptr;\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  FILE *log_fp = fopen(\"/tmp/logs/533.txt\", \"a\");\n  if (log_fp != NULL)\n  {\n    fprintf(log_fp, \"ahc_echo called\\n\");\n  }\n\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  struct MHD_BasicAuthInfo *auth_info;\n  int fail;\n  (void) cls;\n  (void) url;\n  (void) version;\n  (void) upload_data;\n  (void) upload_data_size;\n\n  if (log_fp != NULL)\n    fprintf(log_fp, \"Method: %s\\n\", method);\n\n  if (0 != strcmp (method, \"GET\"))\n  {\n    if (log_fp != NULL)\n      fprintf(log_fp, \"Method is not GET, returning MHD_NO\\n\");\n    if (log_fp != NULL) fclose(log_fp);\n    return MHD_NO;\n  }\n\n  if (log_fp != NULL)\n    fprintf(log_fp, \"req_cls before check: %p, *req_cls: %p\\n\", (void *)req_cls, *req_cls);\n\n  if (*req_cls != &aptr)\n  {\n    if (log_fp != NULL)\n      fprintf(log_fp, \"First call, setting *req_cls to &aptr\\n\");\n    *req_cls = &aptr;  /* Corrected: comparing &aptr with *req_cls, not &aptr != *req_cls */\n    if (log_fp != NULL) fclose(log_fp);\n    return MHD_YES;\n  }\n\n  if (log_fp != NULL)\n    fprintf(log_fp, \"Resetting *req_cls to NULL\\n\");\n  *req_cls = NULL;  /* Allowed modification of *req_cls */\n\n  /* Rest of the function unchanged */\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  fail = ( (NULL == auth_info) ||\n           (strlen (\"Aladdin\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"Aladdin\",\n                         auth_info->username_len)) ||\n           (NULL == auth_info->password) ||\n           (strlen (\"open sesame\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"open sesame\",\n                         auth_info->password_len)) );\n  if (fail)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              (const void *) DENIED);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"TestRealm\",\n                                                   MHD_NO,\n                                                   response);\n  }\n  else\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (PAGE),\n                                              (const void *) PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n\n  if (log_fp != NULL) fclose(log_fp);\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C 2023 Rule 17.8 states that a function parameter itself should not be modified. However, if the parameter is a pointer, modifying the object pointed to by that pointer is allowed; only the pointer parameter itself must remain unchanged. In the code, the parameter in question is 'void **req_cls'. The parameter 'req_cls' is a pointer to a pointer, and the function modifies '*req_cls' (the object pointed to by the pointer), NOT 'req_cls' itself. This means the function modifies the pointed-to pointer, not the parameter pointer. This is compliant with Rule 17.8 since modifying the object pointed to by the pointer parameter is allowed. Therefore, the claim that the function modifies the function parameter itself is incorrect. The function correctly modifies the object pointed to by the pointer parameter, not the parameter pointer variable itself."
}