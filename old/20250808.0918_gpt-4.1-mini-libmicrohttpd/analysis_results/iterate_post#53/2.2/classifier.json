{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified iterate_post code that contains useful probe functions that print useful logs to a file \"/tmp/logs/426.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of iterate_post as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of iterate_post:\n```c\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n        return MHD_NO;\n\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n    }\n    else\n      con_info->answerstring = NULL;\n\n    return MHD_NO;\n  }\n\n  return MHD_YES;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function iterate_post:\nenum MHD_ValueKind\n{\n\n  /**\n   * Response header\n   * @deprecated\n   */\n  MHD_RESPONSE_HEADER_KIND = 0,\n#define MHD_RESPONSE_HEADER_KIND \\\n  _MHD_DEPR_IN_MACRO ( \\\n    \"Value MHD_RESPONSE_HEADER_KIND is deprecated and not used\") \\\n  MHD_RESPONSE_HEADER_KIND\n\n  /**\n   * HTTP header (request/response).\n   */\n  MHD_HEADER_KIND = 1,\n\n  /**\n   * Cookies.  Note that the original HTTP header containing\n   * the cookie(s) will still be available and intact.\n   */\n  MHD_COOKIE_KIND = 2,\n\n  /**\n   * POST data.  This is available only if a content encoding\n   * supported by MHD is used (currently only URL encoding),\n   * and only if the posted content fits within the available\n   * memory pool.  Note that in that case, the upload data\n   * given to the #MHD_AccessHandlerCallback will be\n   * empty (since it has already been processed).\n   */\n  MHD_POSTDATA_KIND = 4,\n\n  /**\n   * GET (URI) arguments.\n   */\n  MHD_GET_ARGUMENT_KIND = 8,\n\n  /**\n   * HTTP footer (only for HTTP 1.1 chunked encodings).\n   */\n  MHD_FOOTER_KIND = 16\n}\n...\nstruct connection_info_struct\n{\n  int connectiontype;\n  char *answerstring;\n  struct MHD_PostProcessor *postprocessor;\n}\n...\n#define MAXNAMESIZE 20\n...\n#define MAXANSWERSIZE 512\n...\n#define GREETINGPAGE \"<html><body><h1>Welcome, %s!</center></h1></body></html>\"\n</additional code>\nJudge whether the above iterate_post code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "The code contains a piece of dead code: the else branch setting con_info->answerstring = NULL when (size > MAXNAMESIZE) or size == 0. This assignment is executed but has no effect on program behavior, as the else branch is immediately followed by return MHD_NO, and the answerstring set in the if branch is only meaningful. The subsequent code does not utilise answerstring set to NULL, indicating potential dead code assignment.",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n\ntypedef enum MHD_Result { MHD_NO = 0, MHD_YES = 1 } MHD_Result;\n\nenum MHD_ValueKind\n{\n  MHD_POSTDATA_KIND = 4\n};\n\n#define MAXNAMESIZE 20\n#define MAXANSWERSIZE 512\n#define GREETINGPAGE \"<html><body><h1>Welcome, %s!</center></h1></body></html>\"\n\nstruct connection_info_struct\n{\n  int connectiontype;\n  char *answerstring;\n  void *postprocessor;\n};\n\nstatic MHD_Result iterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  FILE *log = fopen(\"/tmp/logs/426.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"iterate_post called with key='%s', size=%zu\\n\", key, size);\n  }\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      if (log)\\n        fprintf(log, \"Condition: size valid\\n\");\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n      {\n        if (log) fprintf(log, \"Memory allocation failed\\n\");\n        if (log) fclose(log);\n        return MHD_NO;\n      }\n\n      snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n      if (log)\n        fprintf(log, \"Assigned answerstring with greeting\\n\");\n    }\n    else\n    {\n      if (log)\n        fprintf(log, \"Condition: size invalid. Assigning con_info->answerstring = NULL (dead code)\\n\");\n      con_info->answerstring = NULL; // Dead code assignment\n    }\n\n    if (log)\n      fprintf(log, \"Returning MHD_NO\\n\");\n    if (log) fclose(log);\n    return MHD_NO;\n  }\n\n  if (log)\n    fprintf(log, \"Returning MHD_YES\\n\");\n  if (log) fclose(log);\n  return MHD_YES;\n}\n"
}