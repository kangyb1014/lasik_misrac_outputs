{
  "user_message": "An agent A claimed that the following add_response_header_connection code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of add_response_header_connection.\n```c\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  /** the length of the \"Connection\" key */\n  static const size_t key_len =\n    MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len; /**< the length of the @a value */\n  size_t old_value_len; /**< the length of the existing \"Connection\" value */\n  size_t buf_size;  /**< the size of the buffer */\n  size_t norm_len;  /**< the length of the normalised value */\n  char *buf;        /**< the temporal buffer */\n  struct MHD_HTTP_Res_Header *hdr; /**< existing \"Connection\" header */\n  bool value_has_close; /**< the @a value has \"close\" token */\n  bool already_has_close; /**< existing \"Connection\" header has \"close\" token */\n  size_t pos = 0;   /**< position of addition in the @a buf */\n\n  if ( (NULL != strchr (value, '\\r')) ||\n       (NULL != strchr (value, '\\n')) )\n    return MHD_NO;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR))\n  {\n    hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                       key, key_len);\n    already_has_close =\n      (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5)));\n    mhd_assert (NULL != hdr);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    mhd_assert (NULL == MHD_get_response_element_n_ (response,\n                                                     MHD_HEADER_KIND,\n                                                     key, key_len));\n    mhd_assert (0 == (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n  }\n  if (NULL != hdr)\n    old_value_len = hdr->value_size + 2; /* additional size for \", \" */\n  else\n    old_value_len = 0;\n\n  value_len = strlen (value);\n  if (value_len >= SSIZE_MAX)\n    return MHD_NO;\n  /* Additional space for normalisation and zero-termination */\n  norm_len = value_len + value_len / 2 + 1;\n  if (norm_len >= SSIZE_MAX)\n    return MHD_NO;\n  buf_size = old_value_len + (size_t) norm_len;\n\n  buf = malloc (buf_size);\n  if (NULL == buf)\n    return MHD_NO;\n  if (1)\n  { /* local scope */\n    ssize_t norm_len_s = (ssize_t) norm_len;\n    /* Remove \"close\" token (if any), it will be moved to the front */\n    value_has_close = MHD_str_remove_token_caseless_ (value, value_len, \"close\",\n                                                      MHD_STATICSTR_LEN_ ( \\\n                                                        \"close\"),\n                                                      buf + old_value_len,\n                                                      &norm_len_s);\n    mhd_assert (0 <= norm_len_s);\n    if (0 > norm_len_s)\n    {\n      /* Must never happen with realistic sizes */\n      free (buf);\n      return MHD_NO;\n    }\n    else\n      norm_len = (size_t) norm_len_s;\n  }\n#ifdef UPGRADE_SUPPORT\n  if ( (NULL != response->upgrade_handler) && value_has_close)\n  { /* The \"close\" token cannot be used with connection \"upgrade\" */\n    free (buf);\n    return MHD_NO;\n  }\n#endif /* UPGRADE_SUPPORT */\n  if (0 != norm_len)\n    MHD_str_remove_tokens_caseless_ (buf + old_value_len, &norm_len,\n                                     \"keep-alive\",\n                                     MHD_STATICSTR_LEN_ (\"keep-alive\"));\n  if (0 == norm_len)\n  { /* New value is empty after normalisation */\n    if (! value_has_close)\n    { /* The new value had no tokens */\n      free (buf);\n      return MHD_NO;\n    }\n    if (already_has_close)\n    { /* The \"close\" token is already present, nothing to modify */\n      free (buf);\n      return MHD_YES;\n    }\n  }\n  /* Add \"close\" token if required */\n  if (value_has_close && ! already_has_close)\n  {\n    /* Need to insert \"close\" token at the first position */\n    mhd_assert (buf_size >= old_value_len + norm_len   \\\n                + MHD_STATICSTR_LEN_ (\"close, \") + 1);\n    if (0 != norm_len)\n      memmove (buf + MHD_STATICSTR_LEN_ (\"close, \") + old_value_len,\n               buf + old_value_len, norm_len + 1);\n    memcpy (buf, \"close\", MHD_STATICSTR_LEN_ (\"close\"));\n    pos += MHD_STATICSTR_LEN_ (\"close\");\n  }\n  /* Add old value tokens (if any) */\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    memcpy (buf + pos, hdr->value,\n            hdr->value_size);\n    pos += hdr->value_size;\n  }\n  /* Add new value token (if any) */\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    /* The new value tokens must be already at the correct position */\n    mhd_assert ((value_has_close && ! already_has_close) ? \\\n                (MHD_STATICSTR_LEN_ (\"close, \") + old_value_len == pos) : \\\n                (old_value_len == pos));\n    pos += norm_len;\n  }\n  mhd_assert (buf_size > pos);\n  buf[pos] = 0; /* Null terminate the result */\n\n  if (NULL == hdr)\n  {\n    struct MHD_HTTP_Res_Header *new_hdr; /**< new \"Connection\" header */\n    /* Create new response header entry */\n    new_hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header));\n    if (NULL != new_hdr)\n    {\n      new_hdr->header = malloc (key_len + 1);\n      if (NULL != new_hdr->header)\n      {\n        memcpy (new_hdr->header, key, key_len + 1);\n        new_hdr->header_size = key_len;\n        new_hdr->value = buf;\n        new_hdr->value_size = pos;\n        new_hdr->kind = MHD_HEADER_KIND;\n        if (value_has_close)\n          response->flags_auto = (MHD_RAF_HAS_CONNECTION_HDR\n                                  | MHD_RAF_HAS_CONNECTION_CLOSE);\n        else\n          response->flags_auto = MHD_RAF_HAS_CONNECTION_HDR;\n        _MHD_insert_header_first (response, new_hdr);\n        return MHD_YES;\n      }\n      free (new_hdr);\n    }\n    free (buf);\n    return MHD_NO;\n  }\n\n  /* Update existing header entry */\n  free (hdr->value);\n  hdr->value = buf;\n  hdr->value_size = pos;\n  if (value_has_close && ! already_has_close)\n    response->flags_auto |= MHD_RAF_HAS_CONNECTION_CLOSE;\n  return MHD_YES;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If the 'value_len' and 'norm_len' calculations or the buffer size calculation (buf_size) are incorrect or do not exactly match the sizes required for the manipulated strings, subsequent calls to memcpy or memmove on 'buf' may result in access beyond the bounds of the allocated buffer 'buf'. For example, if the 'norm_len' underestimated the required buffer size or the length parameters passed to memcpy/memmove are larger than the actual allocated size, buffer overruns may occur violating MISRA C Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nstatic enum MHD_Result\nadd_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  FILE *log = fopen(\"/tmp/logs/63.txt\", \"a\");\n  static const char *key = MHD_HTTP_HEADER_CONNECTION;\n  static const size_t key_len = MHD_STATICSTR_LEN_(MHD_HTTP_HEADER_CONNECTION);\n  size_t value_len;\n  size_t old_value_len;\n  size_t buf_size;\n  size_t norm_len;\n  char *buf;\n  struct MHD_HTTP_Res_Header *hdr;\n  bool value_has_close;\n  bool already_has_close;\n  size_t pos = 0;\n\n  if ((NULL != strchr(value, '\\r')) || (NULL != strchr(value, '\\n')))\n  {\n    fprintf(log, \"Invalid characters in value\\n\");\n    fclose(log);\n    return MHD_NO;\n  }\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)))\n  {\n    hdr = MHD_get_response_element_n_(response, MHD_HEADER_KIND, key, key_len);\n    already_has_close = (0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_CLOSE));\n    fprintf(log, \"Existing header found. Already has close: %d\\n\", already_has_close);\n  }\n  else\n  {\n    hdr = NULL;\n    already_has_close = false;\n    fprintf(log, \"No existing header found.\\n\");\n  }\n\n  if (NULL != hdr)\n  {\n    old_value_len = hdr->value_size + 2;\n    fprintf(log, \"Old value length (including ) extra: %zu\\n\", old_value_len);\n  }\n  else\n  {\n    old_value_len = 0;\n    fprintf(log, \"Old value length: 0\\n\");\n  }\n\n  value_len = strlen(value);\n  fprintf(log, \"Value length: %zu\\n\", value_len);\n  if (value_len >= SSIZE_MAX)\n  {\n    fprintf(log, \"Value length >= SSIZE_MAX, aborting.\\n\");\n    fclose(log);\n    return MHD_NO;\n  }\n\n  norm_len = value_len + value_len / 2 + 1;\n  fprintf(log, \"Normalized length: %zu\\n\", norm_len);\n  if (norm_len >= SSIZE_MAX)\n  {\n    fprintf(log, \"Normalized length >= SSIZE_MAX, aborting.\\n\");\n    fclose(log);\n    return MHD_NO;\n  }\n\n  buf_size = old_value_len + (size_t)norm_len;\n  fprintf(log, \"Buffer size: %zu\\n\", buf_size);\n\n  buf = malloc(buf_size);\n  if (NULL == buf)\n  {\n    fprintf(log, \"Memory allocation failed.\\n\");\n    fclose(log);\n    return MHD_NO;\n  }\n\n  ssize_t norm_len_s = (ssize_t)norm_len;\n  value_has_close = MHD_str_remove_token_caseless_(value, value_len, \"close\",\n                                                    MHD_STATICSTR_LEN_(\"close\"),\n                                                    buf + old_value_len,\n                                                    &norm_len_s);\n  fprintf(log, \"Value has close: %d, norm_len_s: %zd\\n\", value_has_close, norm_len_s);\n  if (norm_len_s < 0)\n  {\n    fprintf(log, \"Normalization length error.\\n\");\n    free(buf);\n    fclose(log);\n    return MHD_NO;\n  }\n  norm_len = (size_t)norm_len_s;\n\n#ifdef UPGRADE_SUPPORT\n  if ((NULL != response->upgrade_handler) && value_has_close)\n  {\n    fprintf(log, \"Upgrade handler present with 'close' token, aborting.\\n\");\n    free(buf);\n    fclose(log);\n    return MHD_NO;\n  }\n#endif\n\n  if (0 != norm_len)\n  {\n    MHD_str_remove_tokens_caseless_(buf + old_value_len, &norm_len, \"keep-alive\",\n                                   MHD_STATICSTR_LEN_(\"keep-alive\"));\n    fprintf(log, \"Tokens \\\"keep-alive\\\" removed if present. New norm_len: %zu\\n\", norm_len);\n  }\n\n  if ((norm_len == 0) && !value_has_close)\n  {\n    fprintf(log, \"Normalized value empty and no close token.\\n\");\n    free(buf);\n    fclose(log);\n    return MHD_NO;\n  }\n\n  if (value_has_close && !already_has_close)\n  {\n    mhd_assert(buf_size >= old_value_len + norm_len + MHD_STATICSTR_LEN_(\"close, \") + 1);\n    if (0 != norm_len)\n    {\n      memmove(buf + MHD_STATICSTR_LEN_(\"close, \") + old_value_len,\n              buf + old_value_len, norm_len + 1);\n      fprintf(log, \"Shifting tokens to insert 'close, '.\\n\");\n    }\n    memcpy(buf, \"close\", MHD_STATICSTR_LEN_(\"close\"));\n    pos += MHD_STATICSTR_LEN_(\"close\");\n    fprintf(log, \"Inserted 'close' token at buffer start, pos: %zu\\n\", pos);\n  }\n\n  if (0 != old_value_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    memcpy(buf + pos, hdr->value, hdr->value_size);\n    pos += hdr->value_size;\n    fprintf(log, \"Copied old header value at pos %zu, new pos %zu\\n\", pos - hdr->value_size, pos);\n  }\n\n  if (0 != norm_len)\n  {\n    if (0 != pos)\n    {\n      buf[pos++] = ',';\n      buf[pos++] = ' ';\n    }\n    mhd_assert(((value_has_close && !already_has_close) ?\n                (MHD_STATICSTR_LEN_(\"close, \") + old_value_len == pos) :\n                (old_value_len == pos)));\n    pos += norm_len;\n    fprintf(log, \"Added new normalized tokens at pos %zu, new pos %zu\\n\", pos - norm_len, pos);\n  }\n\n  mhd_assert(buf_size > pos);\n  buf[pos] = 0;\n  fprintf(log, \"Final buffer null-terminated at pos %zu. Buffer size: %zu\\n\", pos, buf_size);\n\n  // Other logic unchanged ...\n\n  fclose(log);\n  return MHD_YES;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Rule 21.17 requires that string handling functions (like memcpy, memmove) must not access memory beyond the bounds of the objects referenced by their pointer parameters. In the provided code, careful calculations are done for buffer size (buf_size) including old_value_len (which already includes an extra 2 bytes), norm_len (including additional space for normalization and zero termination), and the placement of tokens. There are multiple assertions (mhd_assert) checking buffer sizes before memory operations. The code also ensures that when inserting the \"close\" token, the buffer size is sufficient (via an assertion) and memmove is used properly for shifting contents including the terminating zero (norm_len+1) which should be within allocated buffer bounds. The original code appears to respect buffer bounds through size calculations and assertions. The scenario by agent A hypothesizes potential boundary miscalculations leading to buffer overruns; however, these are mitigated by the existing size checks and the approach, which includes generous buffer sizing (value_len + value_len/2 + 1). The agent\u2019s test code did not produce runtime evidence due to compilation failure, leaving no empirical demonstration of violation. Therefore, without concrete evidence and given the buffer size calculations and assertions present in the code, the claim that the code violates MISRA C 2023 Rule 21.17 is not substantiated. Hence, the report is incorrect."
}