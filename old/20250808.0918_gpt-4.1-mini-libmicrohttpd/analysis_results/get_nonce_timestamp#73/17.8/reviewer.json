{
  "user_message": "An agent A claimed that the following get_nonce_timestamp code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of get_nonce_timestamp.\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function get_nonce_timestamp modifies the parameter 'noncelen' when it is zero, which violates MISRA C 2023 Rule 17.8 that a function parameter should not be modified.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic int toxdigitvalue(char c) {\n    if (c >= '0' && c <= '9') return c - '0';\n    if (c >= 'a' && c <= 'f') return c - 'a' + 10;\n    if (c >= 'A' && c <= 'F') return c - 'A' + 10;\n    return -1;\n}\n\nstatic bool get_nonce_timestamp(const char *const nonce, size_t noncelen, uint64_t *const ptimestamp) {\n    FILE *log = fopen(\"/tmp/logs/589.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"Entered get_nonce_timestamp with noncelen=%zu\\n\", noncelen);\n    }\n\n    size_t effective_noncelen = noncelen;\n\n    if (0 == noncelen) {\n        if (log) fprintf(log, \"noncelen is 0, modifying effective_noncelen from 0 to strlen(nonce)\\n\");\n        effective_noncelen = strlen(nonce);\n        if (log) fprintf(log, \"effective_noncelen modified to %zu\\n\", effective_noncelen);\n    }\n\n#ifdef MHD_MD5_SUPPORT\n    if (log) fprintf(log, \"Checking NONCE_STD_LEN(MD5_DIGEST_SIZE) != effective_noncelen: %zu != %zu\\n\", NONCE_STD_LEN(MD5_DIGEST_SIZE), effective_noncelen);\n    if (NONCE_STD_LEN(MD5_DIGEST_SIZE) != effective_noncelen) {\n        if (log) fprintf(log, \"Condition failed for MD5_SUPPORT, returning false\\n\");\n        if (log) fclose(log);\n        return false;\n    }\n#endif\n\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n    if (log) fprintf(log, \"Checking NONCE_STD_LEN(SHA256_SHA512_256_DIGEST_SIZE) != effective_noncelen: %zu != %zu\\n\", NONCE_STD_LEN(SHA256_SHA512_256_DIGEST_SIZE), effective_noncelen);\n    if (NONCE_STD_LEN(SHA256_SHA512_256_DIGEST_SIZE) != effective_noncelen) {\n        if (log) fprintf(log, \"Condition failed for SHA256/SHA512_256_SUPPORT, returning false\\n\");\n        if (log) fclose(log);\n        return false;\n    }\n#endif\n\n    size_t ret = MHD_strx_to_uint64_n_(nonce + effective_noncelen - TIMESTAMP_CHARS_LEN, TIMESTAMP_CHARS_LEN, ptimestamp);\n    if (log) fprintf(log, \"MHD_strx_to_uint64_n_ returned %zu, expected %zu\\n\", ret, (size_t)TIMESTAMP_CHARS_LEN);\n\n    if (log) fclose(log);\n\n    if (ret != (size_t)TIMESTAMP_CHARS_LEN) return false;\n    return true;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C 2023 Rule 17.8 specifies that a function parameter itself should not be modified. In the provided code, the parameter 'noncelen' is passed by value to the function get_nonce_timestamp, and in the code, the line 'if (0 == noncelen) noncelen = strlen(nonce);' modifies the local copy of the parameter. Since 'noncelen' is a value parameter, modifying it within the function only changes the local copy, not the caller's variable.\n\nThe rule focuses on prohibiting modification of the actual parameter entity. For pointer parameters, the object pointed to by the pointer can be modified but the pointer itself should not. For value parameters, they should not be modified.\n\nIn this case, modifying the parameter 'noncelen' (a value parameter) is indeed a direct modification of a parameter, violating MISRA C 2023 Rule 17.8. This is exactly what agent A described.\n\nThe test code based on that logic that attempts to print logs and uses a separate 'effective_noncelen' variable avoids modifying 'noncelen' directly, which adheres to the rule better, confirming the original code's violation.\n\nTherefore, the agent A's report is correct in that modifying the parameter 'noncelen' violates MISRA C 2023 Rule 17.8."
}