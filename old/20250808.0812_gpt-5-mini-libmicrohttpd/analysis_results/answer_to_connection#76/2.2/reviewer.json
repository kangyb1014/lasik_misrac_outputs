{
  "user_message": "An agent A claimed that the following answer_to_connection code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of answer_to_connection.\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_BasicAuthInfo *auth_info;\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;\n  if (NULL == *req_cls)\n  {\n    *req_cls = connection;\n    return MHD_YES;\n  }\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  if (NULL == auth_info)\n  {\n    static const char *page =\n      \"<html><body>Authorization required</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n  }\n  else if ((strlen (\"root\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"root\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"pa$$w0rd\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"pa$$w0rd\",\n                         auth_info->password_len)))\n  {\n    static const char *page =\n      \"<html><body>Wrong username or password</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n  }\n  else\n  {\n    static const char *page = \"<html><body>A secret.</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The explicit (void) parameter casts at the start of answer_to_connection are executed no-op operations whose removal would not affect program behaviour. Those casts constitute dead code under MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstruct MHD_Connection { int _dummy; };\nstruct MHD_Response {\n  char *data;\n  size_t size;\n};\nstruct MHD_BasicAuthInfo {\n  const char *username;\n  size_t username_len;\n  const char *password;\n  size_t password_len;\n};\nstruct MHD_BasicAuthInfo *\nMHD_basic_auth_get_username_password3(struct MHD_Connection *connection)\n{\n  (void)connection;\n  /* Return NULL to simulate \"no credentials provided\" by default. */\n  return NULL;\n}\nstruct MHD_Response *\nMHD_create_response_from_buffer_static(size_t len, const char *buf)\n{\n  struct MHD_Response *resp = (struct MHD_Response *)malloc(sizeof(*resp));\n  if (!resp) return NULL;\n  resp->data = (char *)malloc(len + 1);\n  if (!resp->data) { free(resp); return NULL; }\n  memcpy(resp->data, buf, len);\n  resp->data[len] = '\\0';\n  resp->size = len;\n  return resp;\n}\nenum MHD_Result\nMHD_queue_basic_auth_required_response3(struct MHD_Connection *connection,\n                                       const char *realm,\n                                       enum MHD_Result should_close,\n                                       struct MHD_Response *response)\n{\n  (void)connection; (void)realm; (void)should_close;\n  /* In a real server this would enqueue the response. Here, free the\n     provided response and return success. */\n  (void) response;\n  return MHD_YES;\n}\nenum MHD_Result\nMHD_queue_response(struct MHD_Connection *connection,\n                   int status_code,\n                   struct MHD_Response *response)\n{\n  (void)connection; (void)status_code; (void)response;\n  return MHD_YES;\n}\nvoid MHD_free(struct MHD_BasicAuthInfo *info)\n{\n  if (!info) return;\n  /* username/password point to externally-managed buffers in real API;\n     here we only free the container if it was allocated. */\n  free(info);\n}\nvoid MHD_destroy_response(struct MHD_Response *response)\n{\n  if (!response) return;\n  free(response->data);\n  free(response);\n}\nstatic void mhd_log(const char *fmt, ...)\n{\n  va_list ap;\n  FILE *f = fopen(\"/tmp/logs/610.txt\", \"a\");\n  if (f == NULL)\n    return;\n  va_start(ap, fmt);\n  (void) vfprintf(f, fmt, ap);\n  va_end(ap);\n  (void) fputc('\\n', f);\n  (void) fclose(f);\n}\n\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_BasicAuthInfo *auth_info;\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  /* The following explicit casts to void are executed no-ops that silence\n     compiler warnings about unused parameters. Their removal would not\n     change program behaviour; they therefore constitute dead code. */\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  mhd_log(\"answer_to_connection: entry method=%s req_cls=%p\", method,\n          (void *) *req_cls);\n\n  if (0 != strcmp (method, \"GET\"))\n  {\n    mhd_log(\"answer_to_connection: rejected non-GET method=%s\", method);\n    return MHD_NO;\n  }\n  if (NULL == *req_cls)\n  {\n    *req_cls = connection;\n    mhd_log(\"answer_to_connection: first call, stored req_cls=%p\", (void *) *req_cls);\n    return MHD_YES;\n  }\n  auth_info = MHD_basic_auth_get_username_password3 (connection);\n  if (NULL == auth_info)\n  {\n    static const char *page =\n      \"<html><body>Authorization required</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n    mhd_log(\"answer_to_connection: no auth_info, queued auth required response ret=%d\", (int) ret);\n  }\n  else if ((strlen (\"root\") != auth_info->username_len) ||\n           (0 != memcmp (auth_info->username, \"root\",\n                         auth_info->username_len)) ||\n           /* The next check against NULL is optional,\n            * if 'password' is NULL then 'password_len' is always zero. */\n           (NULL == auth_info->password) ||\n           (strlen (\"pa$$w0rd\") != auth_info->password_len) ||\n           (0 != memcmp (auth_info->password, \"pa$$w0rd\",\n                         auth_info->password_len)))\n  {\n    static const char *page =\n      \"<html><body>Wrong username or password</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_basic_auth_required_response3 (connection,\n                                                   \"admins\",\n                                                   MHD_YES,\n                                                   response);\n    mhd_log(\"answer_to_connection: auth_info present but credentials invalid; uname_len=%zu pwd_len=%zu ret=%d\",\n            auth_info->username_len, auth_info->password_len, (int) ret);\n  }\n  else\n  {\n    static const char *page = \"<html><body>A secret.</body></html>\";\n    response = MHD_create_response_from_buffer_static (strlen (page), page);\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    mhd_log(\"answer_to_connection: auth success for user='%.*s' ret=%d\",\n            (int) auth_info->username_len, auth_info->username, (int) ret);\n  }\n  if (NULL != auth_info)\n    MHD_free (auth_info);\n  MHD_destroy_response (response);\n  mhd_log(\"answer_to_connection: exit ret=%d\", (int) ret);\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The (void) parameter casts are the usual idiom to explicitly discard unused parameters; they evaluate the operand (so they are not pure textual comments) and can matter in corner cases (e.g. when the operand is volatile or when timing of evaluation matters per Rule 2.2 note 1). More importantly, MISRA\u2019s notion of \u201cdead code\u201d targets executed operations whose removal would not affect program behaviour; the explicit discards communicate intent, suppress compiler diagnostics and \u2014 in general \u2014 can affect behaviour in edge cases, so they should not be treated as dead code in this context. Thus flagging those (void) casts as a Rule 2.2 violation is incorrect."
}