{
  "user_message": "Target function code is:\n```c\nstatic enum MHD_Result\nanswer_to_connection (void *cls, struct MHD_Connection *connection,\n                      const char *url, const char *method,\n                      const char *version, const char *upload_data,\n                      size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n\n  if (NULL == *req_cls)\n  {\n    struct connection_info_struct *con_info;\n\n    con_info = malloc (sizeof (struct connection_info_struct));\n    if (NULL == con_info)\n      return MHD_NO;\n    con_info->answerstring = NULL;\n\n    if (0 == strcmp (method, \"POST\"))\n    {\n      con_info->postprocessor =\n        MHD_create_post_processor (connection, POSTBUFFERSIZE,\n                                   iterate_post, (void *) con_info);\n\n      if (NULL == con_info->postprocessor)\n      {\n        free (con_info);\n        return MHD_NO;\n      }\n\n      con_info->connectiontype = POST;\n    }\n    else\n      con_info->connectiontype = GET;\n\n    *req_cls = (void *) con_info;\n\n    return MHD_YES;\n  }\n\n  if (0 == strcmp (method, \"GET\"))\n  {\n    return send_page (connection, askpage);\n  }\n\n  if (0 == strcmp (method, \"POST\"))\n  {\n    struct connection_info_struct *con_info = *req_cls;\n\n    if (*upload_data_size != 0)\n    {\n      if (MHD_YES !=\n          MHD_post_process (con_info->postprocessor,\n                            upload_data,\n                            *upload_data_size))\n        return MHD_NO;\n      *upload_data_size = 0;\n\n      return MHD_YES;\n    }\n    else if (NULL != con_info->answerstring)\n      return send_page (connection, con_info->answerstring);\n  }\n\n  return send_page (connection, errorpage);\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'answer_to_connection': {'callees': ['MHD_create_response_from_buffer_static', 'MHD_add_response_header', 'MHD_queue_response', 'MHD_destroy_response', 'MHD_get_connection_values', 'MHD_create_response_from_fd_at_offset64', 'MHD_basic_auth_get_username_password3', 'MHD_queue_basic_auth_required_response3', 'MHD_free', 'MHD_create_post_processor', 'send_page', 'MHD_post_process'], 'callers': []}, 'MHD_create_response_from_buffer_static': {'callees': ['MHD_create_response_from_buffer_with_free_callback_cls'], 'callers': ['transmit_error_response_len', 'main', 'ahc_echo', 'answer_to_connection', 'serve_simple_form', 'not_found_page', 'create_response', 'reply_with_page_not_found', 'reply_with_auth_required', 'reply_with_forbidden', 'reply_with_area1_pages', 'reply_with_area2_pages', 'reply_with_main_page', 'reply_with_method_not_supported', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'create_response_object', 'answer_unique_tiny_response', 'answer_unique_dyn_response', 'send_page']}, 'MHD_add_response_header': {'callees': ['MHD_str_equal_caseless_', 'add_response_header_connection', 'add_response_entry', 'MHD_get_response_element_n_'], 'callers': ['MHD_create_response_for_upgrade', 'MHD_queue_basic_auth_required_response3', 'ahc_echo', 'answer_to_connection', 'add_session_cookie', 'serve_simple_form', 'fill_v1_form', 'fill_v1_v2_form', 'not_found_page', 'mark_as_html', 'generate_page', 'reply_with_page_not_found', 'reply_with_auth_required', 'reply_with_forbidden', 'reply_with_area1_pages', 'reply_with_area2_pages', 'reply_with_main_page', 'reply_with_method_not_supported', 'send_upgrade_required', 'ahc_cb', 'send_page']}, 'MHD_queue_response': {'callees': ['MHD_DLOG', 'is_reply_body_needed', 'MHD_increment_response_rc', 'MHD_connection_handle_idle', 'MHD_update_last_activity_'], 'callers': ['transmit_error_response_len', 'queue_auth_required_response3_inner', 'MHD_queue_basic_auth_required_response3', 'ahc_echo', 'answer_to_connection', 'serve_simple_form', 'fill_v1_form', 'fill_v1_v2_form', 'not_found_page', 'create_response', 'return_directory_response', 'generate_page', 'reply_with_page_not_found', 'reply_with_forbidden', 'reply_with_area1_pages', 'reply_with_area2_pages', 'reply_with_main_page', 'reply_with_method_not_supported', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'ahc_cb', 'answer_shared_response', 'answer_single_response', 'answer_unique_empty_response', 'answer_unique_tiny_response', 'answer_unique_dyn_response', 'send_page']}, 'MHD_destroy_response': {'callees': ['__builtin_unreachable'], 'callers': ['MHD_connection_close_', 'transmit_error_response_len', 'cleanup_connection', 'connection_reset', 'MHD_connection_handle_idle', 'thread_main_handle_connection', 'MHD_cleanup_connections', 'MHD_create_response_for_upgrade', 'main', 'ahc_echo', 'answer_to_connection', 'serve_simple_form', 'fill_v1_form', 'fill_v1_v2_form', 'not_found_page', 'create_response', 'update_cached_response', 'generate_page', 'reply_with_page_not_found', 'reply_with_auth_required', 'reply_with_forbidden', 'reply_with_area1_pages', 'reply_with_area2_pages', 'reply_with_main_page', 'reply_with_method_not_supported', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'ahc_cb', 'init_data', 'deinit_data', 'answer_unique_empty_response', 'answer_unique_tiny_response', 'answer_unique_dyn_response', 'send_page']}, 'MHD_get_connection_values': {'callees': [], 'callers': ['answer_to_connection']}, 'MHD_create_response_from_fd_at_offset64': {'callees': ['MHD_create_response_from_callback'], 'callers': ['MHD_create_response_from_fd_at_offset', 'MHD_create_response_from_fd', 'MHD_create_response_from_fd64', 'answer_to_connection']}, 'MHD_basic_auth_get_username_password3': {'callees': ['MHD_get_rq_bauth_params_', 'MHD_base64_to_bin_n', 'MHD_DLOG'], 'callers': ['MHD_basic_auth_get_username_password', 'ahc_echo', 'answer_to_connection']}, 'MHD_queue_basic_auth_required_response3': {'callees': ['MHD_DLOG', 'MHD_str_quote', 'MHD_add_response_header', 'MHD_queue_response'], 'callers': ['MHD_queue_basic_auth_fail_response', 'ahc_echo', 'answer_to_connection']}, 'MHD_free': {'callees': [], 'callers': ['ahc_echo', 'answer_to_connection']}, 'MHD_create_post_processor': {'callees': ['__builtin_unreachable', 'MHD_lookup_connection_value_n', 'MHD_str_equal_caseless_n_'], 'callers': ['create_response', 'generate_page', 'answer_to_connection']}, 'send_page': {'callees': ['MHD_create_response_from_buffer_static', 'MHD_queue_response', 'MHD_destroy_response', 'MHD_add_response_header'], 'callers': ['answer_to_connection']}, 'MHD_post_process': {'callees': ['MHD_str_equal_caseless_n_', 'post_process_urlencoded', 'post_process_multipart'], 'callers': ['create_response', 'generate_page', 'answer_to_connection']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct connection_info_struct",
    "connection_info_struct.answerstring",
    "connection_info_struct.postprocessor",
    "connection_info_struct.connectiontype",
    "iterate_post",
    "MHD_create_post_processor",
    "POSTBUFFERSIZE",
    "MHD_post_process",
    "send_page",
    "enum MHD_Result",
    "MHD_YES",
    "MHD_NO",
    "malloc",
    "free",
    "strcmp"
  ],
  "explanation": "For each symbol: \n- struct connection_info_struct: The full struct definition is needed to check whether any field uses compiler extensions (flexible array members, bit\u2011fields with implementation\u2011specific widths, attributes like __attribute__, or other non\u2011standard constructs) that would make this function rely on language extensions when allocating or accessing the struct.\n- connection_info_struct.answerstring: The type of this field (e.g., char *, array, or extension) must be known to ensure no extension is used when it is tested (NULL comparison) and later passed to send_page.\n- connection_info_struct.postprocessor: The exact type of this field (often an opaque pointer or function pointer) must be checked to see if it uses non\u2011standard function pointer types or attributes (calling conventions, GCC attributes) that are language extensions.\n- connection_info_struct.connectiontype: The enum/typedef used here must be inspected to ensure it is a standard enum/constant and not defined using compiler extensions.\n- iterate_post: The callback prototype passed to MHD_create_post_processor must be examined to ensure it is declared in standard C (not K&R style, nested function, or using compiler extensions such as typeof in its signature).\n- MHD_create_post_processor: This symbol may be a macro or wrapper; its declaration/definition must be inspected to ensure it does not expand to compiler extensions (statement expressions, GNU typeof, inline assembly, or attributes that change semantics).\n- POSTBUFFERSIZE: As a macro used in the call, its definition must be checked for any use of compiler extensions in the macro body/expression.\n- MHD_post_process: Its declaration/definition must be checked for use of non\u2011standard function prototypes, attributes or other extensions because it is directly invoked with library data here.\n- send_page: The send_page symbol is called multiple times; its declaration/definition could be a macro or inline function that uses extensions\u2014inspect it to ensure the call site in answer_to_connection is standard C.\n- enum MHD_Result: The enum type (and its header) must be inspected to ensure it is defined in standard C and not using compiler\u2011specific features.\n- MHD_YES / MHD_NO: These constants/macros must be checked to see whether they are plain enum constants/macros or expand to something using extensions.\n- malloc / free / strcmp: The prototypes from the standard library should be confirmed (via headers included in the translation unit) to ensure no non\u2011standard replacements or macros are in effect that use compiler extensions; also to confirm usage here obeys standard prototypes (returns, parameter types).\n\nIn short, any macro, typedef, enum, struct or function prototype referenced directly in this function can hide compiler\u2011specific constructs. The listed symbols are the minimal ones whose definitions must be inspected to determine whether the target function relies on language extensions in violation of the MISRA rule."
}