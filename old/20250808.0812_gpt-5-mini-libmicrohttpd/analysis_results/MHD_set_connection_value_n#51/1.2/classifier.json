{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified MHD_set_connection_value_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/408.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of MHD_set_connection_value_n as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_set_connection_value_n:\n#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern\n</additional code>\nJudge whether the above MHD_set_connection_value_n code violates the rule 1.2 or not.",
  "is_rule_violated": true,
  "scenario": "The code uses the macro _MHD_EXTERN which expands to the GNU compiler attribute __attribute__((visibility(\"default\"))) (a compiler-specific extension). Use of this attribute is a language extension (documented in GCC/clang docs) and thus violates MISRA C 2023 Rule 1.2 that disallows language extensions.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Minimal declarations to allow compilation of the probe-enhanced function.\n   These are declarations only (no mock definitions) so the file can be\n   compiled without linking. Do not add or redefine macros here. */\n\nstruct MHD_Connection;\n\n/* Result codes, matching the original semantics used by the function. */\nenum MHD_Result { MHD_NO = 0, MHD_YES = 1 };\n\n/* Value kind constants; include the GET_ARGUMENT_KIND used in the check. */\nenum MHD_ValueKind { MHD_GET_ARGUMENT_KIND = 1, MHD_OTHER_KIND = 2 };\n\n/* Prototype for the nocheck variant used by the original function.  No\n   definition is provided here (not a mock). */\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n_nocheck_ (struct MHD_Connection *connection,\n                                    enum MHD_ValueKind kind,\n                                    const char *key,\n                                    size_t key_size,\n                                    const char *value,\n                                    size_t value_size);\n\n/* Helper probe that logs control-path and state information to the file\n   /tmp/logs/408.txt. This preserves the original logic and only adds\n   observational side-effects (file logging). */\nstatic void log_probe(const char *stage,\n                      enum MHD_ValueKind kind,\n                      const char *key,\n                      size_t key_size,\n                      const char *value,\n                      size_t value_size)\n{\n  FILE *f = fopen(\"/tmp/logs/408.txt\", \"a\");\n  if (f != NULL)\n  {\n    size_t key_len = key ? strlen(key) : 0;\n    size_t value_len = value ? strlen(value) : 0;\n    /* Log pointer values, computed lengths and supplied sizes and stage */\n    fprintf(f,\n            \"%s: kind=%d, key=%p, key_len=%zu, key_size=%zu, value=%p, value_len=%zu, value_size=%zu\\n\",\n            stage,\n            (int)kind,\n            (const void *)key,\n            key_len,\n            key_size,\n            (const void *)value,\n            value_len,\n            value_size);\n    fclose(f);\n  }\n}\n\n/* Probe-enhanced version of the original function. Logic preserved; probes\n   are purely observational and do not alter control flow or return values. */\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  /* Log entry state */\n  log_probe(\"entry\", kind, key, key_size, value, value_size);\n\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n  {\n    log_probe(\"return_MHD_NO\", kind, key, key_size, value, value_size);\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n  }\n\n  /* Before delegating to the nocheck function, log the state */\n  log_probe(\"delegating_to_nocheck\", kind, key, key_size, value, value_size);\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n"
}