{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_set_connection_value_n': {'callees': ['MHD_set_connection_value_n_nocheck_'], 'callers': ['connection_add_header']}, 'MHD_set_connection_value_n_nocheck_': {'callees': ['MHD_connection_alloc_memory_'], 'callers': ['MHD_set_connection_value_n', 'MHD_set_connection_value', 'parse_cookies_string', 'get_req_headers']}, 'connection_add_header': {'callees': ['MHD_set_connection_value_n', 'MHD_DLOG', 'transmit_error_response_len'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_EXTERN",
    "MHD_set_connection_value_n_nocheck_ (prototype/definition)",
    "enum MHD_Result (definition)",
    "enum MHD_ValueKind (definition)",
    "MHD_GET_ARGUMENT_KIND (macro/constant)",
    "MHD_NO (macro/enum constant)",
    "strlen (declaration/definition from <string.h>)",
    "size_t (typedef from <stddef.h> or headers)"
  ],
  "explanation": "To determine whether the target function uses any compiler language extensions you must inspect all macros, typedefs and called-function declarations that could hide non\u2011standard constructs (attributes, compiler\u2011specific keywords, asm, linkage specifiers, etc.). For each symbol: \n\n- _MHD_EXTERN: This macro is on the function declaration and commonly expands to compiler-specific linkage/attribute directives (for example __attribute__((...)), __declspec(...), extern \"C\", visibility annotations). You must see its exact expansion to detect extensions.\n\n- MHD_set_connection_value_n_nocheck_ (prototype/definition): The callee\u2019s prototype/definition may carry attributes or nonstandard keywords (inline, __attribute__, asm labels) that could be inherited by or required by the caller. Inspecting it reveals any extension usage in the function signature or implementation.\n\n- enum MHD_Result (definition): The return type might be defined in a header using nonstandard extensions (e.g. unusual underlying type declarations, macros wrapping the enum, or attributes attached to the enum). Verify the actual enum definition.\n\n- enum MHD_ValueKind (definition): The enum for kind is used in comparisons; its definition could include extension constructs or be implemented as a macro or typedef that uses compiler extensions. Inspect it to ensure no extensions are present.\n\n- MHD_GET_ARGUMENT_KIND (macro/constant): This symbol is compared against kind; it may be a macro that expands to an expression using extensions (e.g. GCC statement expressions, typeof, compound literals, or attributes). You must inspect its expansion.\n\n- MHD_NO (macro/enum constant): The function returns MHD_NO in one branch. MHD_NO might be a macro that expands to a nonstandard construct (casts, attributes, inline functions). Confirm its definition is standard C.\n\n- strlen (declaration/definition from <string.h>): Although strlen is a standard library function, on some platforms it is implemented as a macro or an inline function using compiler intrinsics or builtins (e.g. __builtin_strlen). To assert no language extensions are used you should check how strlen is provided in the target build (the header or platform-provided definition).\n\n- size_t (typedef from <stddef.h> or headers): size_t is a typedef that should be standard, but some platforms may typedef it with extension constructs or rely on compiler builtin types. Checking its definition ensures no nonstandard typedefs are used in parameter types.\n\nInspecting these symbols (the macros, typedefs, enums and callee prototype/definition) lets you detect any hidden use of compiler extensions in the function signature, return/parameter types, macros used in expressions, or in the called function's declaration that could constitute a MISRA violation for language extensions."
}