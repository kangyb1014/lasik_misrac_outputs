{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified MHD_set_connection_value_n code that contains useful probe functions that print useful logs to a file \"/tmp/logs/415.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of MHD_set_connection_value_n as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of MHD_set_connection_value_n:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  if ( (MHD_GET_ARGUMENT_KIND != kind) &&\n       ( ((key ? strlen (key) : 0) != key_size) ||\n         ((value ? strlen (value) : 0) != value_size) ) )\n    return MHD_NO; /* binary zero is allowed only in GET arguments */\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n```\n</target_code>\nJudge whether the above MHD_set_connection_value_n code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "Calling strlen on 'key' or 'value' can read past the provided object bounds if those buffers are not null-terminated within key_size/value_size. Example: passing a char buffer of length key_size that contains no terminating '\\0' will cause strlen(key) to read beyond the buffer \u2014 a violation of MISRA C 2023 Rule 21.17.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Minimal type definitions to allow compilation. These are not mock functions. */\nstruct MHD_Connection;\n\nenum MHD_Result { MHD_NO = 0, MHD_YES = 1 };\nenum MHD_ValueKind { MHD_GET_ARGUMENT_KIND = 0, MHD_OTHER_KIND = 1 };\n\n/* Prototype of the external function (no definition here). */\nenum MHD_Result MHD_set_connection_value_n_nocheck_ (struct MHD_Connection *connection,\n                                                     enum MHD_ValueKind kind,\n                                                     const char *key,\n                                                     size_t key_size,\n                                                     const char *value,\n                                                     size_t value_size);\n\n/* Instrumented version preserving original logic as closely as possible.\n   Logs control path and state to /tmp/logs/415.txt to demonstrate the\n   potential out-of-bounds read when strlen is used on non-terminated buffers. */\n\nenum MHD_Result\nMHD_set_connection_value_n (struct MHD_Connection *connection,\n                            enum MHD_ValueKind kind,\n                            const char *key,\n                            size_t key_size,\n                            const char *value,\n                            size_t value_size)\n{\n  FILE *fp = fopen(\"/tmp/logs/415.txt\", \"a\");\n  if (fp != NULL)\n  {\n    fprintf(fp, \"ENTER: MHD_set_connection_value_n connection=%p kind=%d key=%p key_size=%zu value=%p value_size=%zu\\n\",\n            (void *)connection, (int)kind, (const void *)key, key_size, (const void *)value, value_size);\n  }\n\n  /* Preserve original short-circuit semantics: only call strlen for value\n     if key check passed (to avoid introducing additional reads). */\n  if (MHD_GET_ARGUMENT_KIND != kind)\n  {\n    size_t key_len = 0u;\n\n    if (key)\n    {\n      /* This strlen call is the potential out-of-bounds access described in the scenario. */\n      key_len = strlen(key);\n    }\n\n    if (fp != NULL)\n    {\n      fprintf(fp, \"CHECK: key %p computed_len=%zu expected_size=%zu\\n\", (const void *)key, key_len, key_size);\n    }\n\n    if (key_len != key_size)\n    {\n      if (fp != NULL)\n      {\n        fprintf(fp, \"VIOLATION_PATH: returning MHD_NO due to key length mismatch (key_len=%zu != key_size=%zu)\\n\", key_len, key_size);\n        fclose(fp);\n      }\n      return MHD_NO; /* binary zero is allowed only in GET arguments */\n    }\n\n    {\n      size_t value_len = 0u;\n\n      if (value)\n      {\n        /* This strlen call is the other potential out-of-bounds access. */\n        value_len = strlen(value);\n      }\n\n      if (fp != NULL)\n      {\n        fprintf(fp, \"CHECK: value %p computed_len=%zu expected_size=%zu\\n\", (const void *)value, value_len, value_size);\n      }\n\n      if (value_len != value_size)\n      {\n        if (fp != NULL)\n        {\n          fprintf(fp, \"VIOLATION_PATH: returning MHD_NO due to value length mismatch (value_len=%zu != value_size=%zu)\\n\", value_len, value_size);\n          fclose(fp);\n        }\n        return MHD_NO; /* binary zero is allowed only in GET arguments */\n      }\n    }\n  }\n\n  if (fp != NULL)\n  {\n    fprintf(fp, \"PASS_PATH: calling MHD_set_connection_value_n_nocheck_\\n\");\n    fclose(fp);\n  }\n\n  return MHD_set_connection_value_n_nocheck_ (connection,\n                                              kind,\n                                              key,\n                                              key_size,\n                                              value,\n                                              value_size);\n}\n"
}