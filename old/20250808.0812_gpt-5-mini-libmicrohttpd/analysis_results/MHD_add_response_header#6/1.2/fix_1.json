{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\n_MHD_EXTERN enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  FILE *log = fopen(\"/tmp/logs/48.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"MHD_add_response_header called: header=%p content=%p\\n\",\n            (void *)header, (void *)content);\n    fprintf(log, \"response=%p flags_auto=%llu flags=%llu\\n\",\n            (void *)response,\n            (unsigned long long) (response ? response->flags_auto : 0ULL),\n            (unsigned long long) (response ? response->flags : 0ULL));\n  }\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    if (log) fprintf(log, \"branch: Connection -> add_response_header_connection\\n\");\n    enum MHD_Result r = add_response_header_connection (response, content);\n    if (log) fprintf(log, \"add_response_header_connection returned=%d\\n\", r);\n    if (log) fclose(log);\n    return r;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (log) fprintf(log, \"branch: Transfer-Encoding\\n\");\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      if (log) fprintf(log, \"Transfer-Encoding content != chunked -> MHD_NO\\n\");\n      if (log) fclose(log);\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      if (log) fprintf(log, \"Already has chunked -> MHD_YES\\n\");\n      if (log) fclose(log);\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      if (log) fprintf(log, \"Has Content-Length and no Insanity flag -> MHD_NO\\n\");\n      if (log) fclose(log);\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      if (log) fprintf(log, \"add_response_entry succeeded -> set HAS_TRANS_ENC_CHUNKED -> MHD_YES\\n\");\n      if (log) fclose(log);\n      return MHD_YES;\n    }\n    if (log) fprintf(log, \"add_response_entry failed -> MHD_NO\\n\");\n    if (log) fclose(log);\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (log) fprintf(log, \"branch: Date\\n\");\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         MHD_STATICSTR_LEN_ ( \\\n                                           MHD_HTTP_HEADER_DATE));\n      mhd_assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n      if (log) fprintf(log, \"existing Date header removed\\n\");\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      if (log) fprintf(log, \"add_response_entry succeeded -> set HAS_DATE_HDR -> MHD_YES\\n\");\n      if (log) fclose(log);\n      return MHD_YES;\n    }\n    if (log) fprintf(log, \"add_response_entry failed for Date -> MHD_NO\\n\");\n    if (log) fclose(log);\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    if (log) fprintf(log, \"branch: Content-Length\\n\");\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        if (log) fprintf(log, \"add_response_entry succeeded -> set HAS_CONTENT_LENGTH -> MHD_YES\\n\");\n        if (log) fclose(log);\n        return MHD_YES;\n      }\n    }\n    if (log) fprintf(log, \"Content-Length not added or failed -> MHD_NO\\n\");\n    if (log) fclose(log);\n    return MHD_NO;\n  }\n\n  if (log) fprintf(log, \"branch: default -> add_response_entry\\n\");\n  enum MHD_Result r = add_response_entry (response,\n                                         MHD_HEADER_KIND,\n                                         header,\n                                         content);\n  if (log) fprintf(log, \"add_response_entry returned=%d\\n\", r);\n  if (log) fclose(log);\n  return r;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpszvkkl4y/src/build-aux/missing: line 81: makeinfo: command not found\nWARNING: 'makeinfo' is missing on your system.\n         You should only need it if you modified a '.texi' file, or\n         any other file indirectly affecting the aspect of the manual.\n         You might want to install the Texinfo package:\n         <https://www.gnu.org/software/texinfo/>\n         The spurious makeinfo call might also be the consequence of\n         using a buggy 'make' (AIX, DU, IRIX), in which case you might\n         want to install GNU make:\n         <https://www.gnu.org/software/make/>\nmake[3]: *** [Makefile:543: libmicrohttpd.info] Error 127\nmake[2]: *** [Makefile:764: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of MHD_add_response_header as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\n/* Minimal types/constants/prototypes so this translation unit compiles.\n   These are NOT implementations of the referenced functions (no mocks),\n   only declarations so the function below compiles as part of a larger build. */\n\n/* Result enum used by the function */\nenum MHD_Result { MHD_NO = 0, MHD_YES = 1 };\n\n/* Minimal response structure with the fields accessed in the function */\nstruct MHD_Response {\n  unsigned long long flags_auto;\n  unsigned long long flags;\n};\n\n/* Minimal header structure used when removing existing headers */\nstruct MHD_HTTP_Res_Header {\n  char *header;\n  char *value;\n};\n\n/* Header-name constants as string literals (so sizeof(...) works below) */\nstatic const char MHD_HTTP_HEADER_CONNECTION[] = \"Connection\";\nstatic const char MHD_HTTP_HEADER_TRANSFER_ENCODING[] = \"Transfer-Encoding\";\nstatic const char MHD_HTTP_HEADER_DATE[] = \"Date\";\nstatic const char MHD_HTTP_HEADER_CONTENT_LENGTH[] = \"Content-Length\";\n\n/* Flag constants used in the logic */\nstatic const unsigned long long MHD_RAF_HAS_TRANS_ENC_CHUNKED = 1ULL << 0;\nstatic const unsigned long long MHD_RAF_HAS_CONTENT_LENGTH = 1ULL << 1;\nstatic const unsigned long long MHD_RAF_HAS_DATE_HDR = 1ULL << 2;\nstatic const unsigned long long MHD_RF_INSANITY_HEADER_CONTENT_LENGTH = 1ULL << 3;\nstatic const unsigned long long MHD_RF_HEAD_ONLY_RESPONSE = 1ULL << 4;\n\n/* Placeholder for header kind constant */\nstatic const int MHD_HEADER_KIND = 0;\n\n/* Declarations of functions from the original codebase (no definitions here) */\nint MHD_str_equal_caseless_(const char *a, const char *b);\nenum MHD_Result add_response_header_connection(struct MHD_Response *response, const char *content);\nenum MHD_Result add_response_entry(struct MHD_Response *response, int kind, const char *header, const char *content);\nstruct MHD_HTTP_Res_Header *MHD_get_response_element_n_(struct MHD_Response *response, int kind, const char *key, size_t keylen);\nvoid _MHD_remove_header(struct MHD_Response *response, struct MHD_HTTP_Res_Header *hdr);\n\n/* The (fixed) function. Removed the _MHD_EXTERN prefix, replaced MHD_STATICSTR_LEN_\n   with sizeof(...)-1 and replaced mhd_assert with standard assert(). */\nenum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  FILE *log = fopen(\"/tmp/logs/48.txt\", \"a\");\n  if (log)\n  {\n    fprintf(log, \"MHD_add_response_header called: header=%p content=%p\\n\",\n            (void *)header, (void *)content);\n    fprintf(log, \"response=%p flags_auto=%llu flags=%llu\\n\",\n            (void *)response,\n            (unsigned long long) (response ? response->flags_auto : 0ULL),\n            (unsigned long long) (response ? response->flags : 0ULL));\n  }\n\n  if (MHD_str_equal_caseless_ (header, MHD_HTTP_HEADER_CONNECTION))\n  {\n    if (log) fprintf(log, \"branch: Connection -> add_response_header_connection\\n\");\n    enum MHD_Result r = add_response_header_connection (response, content);\n    if (log) fprintf(log, \"add_response_header_connection returned=%d\\n\", r);\n    if (log) fclose(log);\n    return r;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_TRANSFER_ENCODING))\n  {\n    if (log) fprintf(log, \"branch: Transfer-Encoding\\n\");\n    if (! MHD_str_equal_caseless_ (content, \"chunked\"))\n    {\n      if (log) fprintf(log, \"Transfer-Encoding content != chunked -> MHD_NO\\n\");\n      if (log) fclose(log);\n      return MHD_NO;   /* Only \"chunked\" encoding is allowed */\n    }\n    if (0 != (response->flags_auto & MHD_RAF_HAS_TRANS_ENC_CHUNKED))\n    {\n      if (log) fprintf(log, \"Already has chunked -> MHD_YES\\n\");\n      if (log) fclose(log);\n      return MHD_YES;  /* Already has \"chunked\" encoding header */\n    }\n    if ( (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH)) &&\n         (0 == (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) )\n    {\n      if (log) fprintf(log, \"Has Content-Length and no Insanity flag -> MHD_NO\\n\");\n      if (log) fclose(log);\n      return MHD_NO; /* Has \"Content-Length\" header and no \"Insanity\" flag */\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_TRANS_ENC_CHUNKED;\n      if (log) fprintf(log, \"add_response_entry succeeded -> set HAS_TRANS_ENC_CHUNKED -> MHD_YES\\n\");\n      if (log) fclose(log);\n      return MHD_YES;\n    }\n    if (log) fprintf(log, \"add_response_entry failed -> MHD_NO\\n\");\n    if (log) fclose(log);\n    return MHD_NO;\n  }\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_DATE))\n  {\n    if (log) fprintf(log, \"branch: Date\\n\");\n    if (0 != (response->flags_auto & MHD_RAF_HAS_DATE_HDR))\n    {\n      struct MHD_HTTP_Res_Header *hdr;\n      hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                         MHD_HTTP_HEADER_DATE,\n                                         (sizeof(MHD_HTTP_HEADER_DATE) - 1));\n      assert (NULL != hdr);\n      _MHD_remove_header (response, hdr);\n      if (NULL != hdr->value)\n        free (hdr->value);\n      free (hdr->header);\n      free (hdr);\n      if (log) fprintf(log, \"existing Date header removed\\n\");\n    }\n    if (MHD_NO != add_response_entry (response,\n                                      MHD_HEADER_KIND,\n                                      header,\n                                      content))\n    {\n      response->flags_auto |= MHD_RAF_HAS_DATE_HDR;\n      if (log) fprintf(log, \"add_response_entry succeeded -> set HAS_DATE_HDR -> MHD_YES\\n\");\n      if (log) fclose(log);\n      return MHD_YES;\n    }\n    if (log) fprintf(log, \"add_response_entry failed for Date -> MHD_NO\\n\");\n    if (log) fclose(log);\n    return MHD_NO;\n  }\n\n  if (MHD_str_equal_caseless_ (header,\n                               MHD_HTTP_HEADER_CONTENT_LENGTH))\n  {\n    if (log) fprintf(log, \"branch: Content-Length\\n\");\n    /* Generally MHD sets automatically correct \"Content-Length\" always when\n     * needed.\n     * Custom \"Content-Length\" header is allowed only in special cases. */\n    if ( (0 != (MHD_RF_INSANITY_HEADER_CONTENT_LENGTH & response->flags)) ||\n         ((0 != (MHD_RF_HEAD_ONLY_RESPONSE & response->flags)) &&\n          (0 == (response->flags_auto & (MHD_RAF_HAS_TRANS_ENC_CHUNKED\n                                         | MHD_RAF_HAS_CONTENT_LENGTH)))) )\n    {\n      if (MHD_NO != add_response_entry (response,\n                                        MHD_HEADER_KIND,\n                                        header,\n                                        content))\n      {\n        response->flags_auto |= MHD_RAF_HAS_CONTENT_LENGTH;\n        if (log) fprintf(log, \"add_response_entry succeeded -> set HAS_CONTENT_LENGTH -> MHD_YES\\n\");\n        if (log) fclose(log);\n        return MHD_YES;\n      }\n    }\n    if (log) fprintf(log, \"Content-Length not added or failed -> MHD_NO\\n\");\n    if (log) fclose(log);\n    return MHD_NO;\n  }\n\n  if (log) fprintf(log, \"branch: default -> add_response_entry\\n\");\n  enum MHD_Result r = add_response_entry (response,\n                                         MHD_HEADER_KIND,\n                                         header,\n                                         content);\n  if (log) fprintf(log, \"add_response_entry returned=%d\\n\", r);\n  if (log) fclose(log);\n  return r;\n}\n",
  "explanation": "I made the function self-contained so it compiles as a translation unit: removed the _MHD_EXTERN prefix, added necessary headers, and provided minimal type and constant definitions (structs, enums and header-name strings). I declared external functions that the routine calls rather than defining them (no mock functions). I replaced the MHD_STATICSTR_LEN_ macro use with (sizeof(...) - 1) and replaced the mhd_assert call with standard assert(). These changes preserve the original logic while ensuring the code compiles."
}