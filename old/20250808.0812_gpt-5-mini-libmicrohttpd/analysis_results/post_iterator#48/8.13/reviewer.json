{
  "user_message": "An agent A claimed that the following post_iterator code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer..\n</misra_rule>\n<target_code>\nHere is the original code of post_iterator.\n```c\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    if (off >= sizeof(session->value_1) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    if (off >= sizeof(session->value_2) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'request' is declared as a non-const pointer (struct Request *request = cls;) even though post_iterator does not modify the Request object itself. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible (e.g. const struct Request *request). Thus the code violates Rule 8.13.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstruct MHD_PostProcessor;\nenum MHD_ValueKind { MHD_VALUES, MHD_UNKNOWN };\nstatic void\nlog_probe (const char *event,\n           const char *key,\n           const struct Session *session,\n           uint64_t off,\n           size_t size)\n{\n  FILE *fp = fopen (\"/tmp/logs/387.txt\", \"a\");\n  if (fp == NULL)\n  {\n    return; /* Best-effort logging only. */\n  }\n\n  fprintf (fp, \"event=%s key=%s off=%\" PRIu64 \" size=%zu sid=%s\\n\",\n           (event != NULL) ? event : \"(null)\",\n           (key != NULL) ? key : \"(null)\",\n           off,\n           size,\n           (session != NULL) ? session->sid : \"(null)\");\n\n  if (session != NULL)\n  {\n    /* Print snapshots of the current buffers (truncated to be safe). */\n    /* value_1 and value_2 are non-const arrays in this test code, so\n       it's safe to ensure NUL-termination. */\n    ((struct Session *)session)->value_1[sizeof ((struct Session *)session)->value_1 - 1] = '\\0';\n    ((struct Session *)session)->value_2[sizeof ((struct Session *)session)->value_2 - 1] = '\\0';\n    fprintf (fp, \"  value_1=\\\"%s\\\"\\n  value_2=\\\"%s\\\"\\n\",\n             session->value_1,\n             session->value_2);\n  }\n  fclose (fp);\n}\n\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls; /* <-- non-const pointer that could be const */\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  log_probe (\"ENTER\", key, session, off, size);\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    log_probe (\"DONE\", key, session, off, size);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    if (off >= sizeof(session->value_1) - 1)\n    {\n      log_probe (\"V1_DISCARD_EXTRA\", key, session, off, size);\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    log_probe (\"V1_WRITTEN\", key, session, off, size);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    if (off >= sizeof(session->value_2) - 1)\n    {\n      log_probe (\"V2_DISCARD_EXTRA\", key, session, off, size);\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    log_probe (\"V2_WRITTEN\", key, session, off, size);\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  log_probe (\"UNSUPPORTED\", key, session, off, size);\n  return MHD_YES;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. In post_iterator the local pointer 'request' is only used to read the Request object (to obtain request->session) and the function does not modify the Request object itself. MISRA C 2023 Rule 8.13 directs that a pointer should point to a const-qualified type whenever possible. Therefore declaring the local variable as const struct Request *request = cls; would be more compliant. Making request const does not prevent modifying the Session object reachable via the session pointer (you still can obtain a non-const struct Session * from the member and modify that), so the change is safe for the shown code. (The test harness failing to compile is unrelated to the rule \u2014 it likely lacks required type/feature definitions or headers \u2014 but does not invalidate the correctness of the rule violation assessment.)"
}