{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified post_iterator code that contains useful probe functions that print useful logs to a file \"/tmp/logs/386.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of post_iterator as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of post_iterator:\n```c\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    if (off >= sizeof(session->value_1) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    if (off >= sizeof(session->value_2) - 1)\n      return MHD_YES; /* Discard extra data */\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  return MHD_YES;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function post_iterator:\nconst char *value\n</additional code>\nJudge whether the above post_iterator code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "The explicit (void) expressions for unused parameters ( (void) kind; (void) filename; (void) content_type; (void) transfer_encoding; ) are executed but have no effect; removing them does not change the runtime behaviour. These no-op expression statements therefore constitute dead code according to MISRA C 2023 Rule 2.2.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Minimal required types to allow compilation of the instrumented function. */\nenum MHD_Result { MHD_NO = 0, MHD_YES = 1 };\nenum MHD_ValueKind { MHD_VALUE_KIND = 0 };\n\nstruct Session\n{\n  char sid[64];\n  char value_1[256];\n  char value_2[256];\n};\n\nstruct Request\n{\n  struct Session *session;\n};\n\n/* Probe function that logs control path and state to /tmp/logs/386.txt. */\nstatic void\nlog_probe (const char *tag,\n           const struct Request *request,\n           const char *key,\n           const char *data,\n           uint64_t off,\n           size_t size)\n{\n  FILE *f = fopen(\"/tmp/logs/386.txt\", \"a\");\n  if (f == NULL)\n    return;\n  fprintf (f,\n           \"%s: key=\\\"%s\\\" off=%llu size=%zu sid=\\\"%s\\\" v1=\\\"%s\\\" v2=\\\"%s\\\" data=\\\"%s\\\"\\n\",\n           tag,\n           key ? key : \"(null)\",\n           (unsigned long long) off,\n           size,\n           (request && request->session) ? request->session->sid : \"(null)\",\n           (request && request->session) ? request->session->value_1 : \"(null)\",\n           (request && request->session) ? request->session->value_2 : \"(null)\",\n           data ? data : \"(null)\");\n  fclose (f);\n}\n\n/* Instrumented version of post_iterator preserving original logic.\n   The instrumentation logs entry, which branch was taken and state info.\n   Original no-op (void) statements are kept; these are the dead-code items\n   highlighted in the scenario. */\nstatic enum MHD_Result\npost_iterator (void *cls,\n               enum MHD_ValueKind kind,\n               const char *key,\n               const char *filename,\n               const char *content_type,\n               const char *transfer_encoding,\n               const char *data, uint64_t off, size_t size)\n{\n  struct Request *request = cls;\n  struct Session *session = request->session;\n\n  /* These explicit casts to void are no-op expression statements. */\n  (void) kind;              /* Unused. Silent compiler warning. */\n  (void) filename;          /* Unused. Silent compiler warning. */\n  (void) content_type;      /* Unused. Silent compiler warning. */\n  (void) transfer_encoding; /* Unused. Silent compiler warning. */\n\n  /* Log entry and parameter state so the presence/execution of the no-op\n     statements and control flow can be observed in /tmp/logs/386.txt. */\n  log_probe (\"ENTRY\", request, key, data, off, size);\n\n  if (0 == strcmp (\"DONE\", key))\n  {\n    fprintf (stdout,\n             \"Session `%s' submitted `%s', `%s'\\n\",\n             session->sid,\n             session->value_1,\n             session->value_2);\n    log_probe (\"BRANCH_DONE\", request, key, data, off, size);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v1\", key))\n  {\n    if (off >= sizeof(session->value_1) - 1)\n    {\n      log_probe (\"BRANCH_V1_DISCARD\", request, key, data, off, size);\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_1))\n      size = (size_t) (sizeof (session->value_1) - off - 1); /* crop extra data */\n    memcpy (&session->value_1[off],\n            data,\n            size);\n    session->value_1[size + off] = '\\0';\n    log_probe (\"BRANCH_V1_WRITE\", request, key, data, off, size);\n    return MHD_YES;\n  }\n  if (0 == strcmp (\"v2\", key))\n  {\n    if (off >= sizeof(session->value_2) - 1)\n    {\n      log_probe (\"BRANCH_V2_DISCARD\", request, key, data, off, size);\n      return MHD_YES; /* Discard extra data */\n    }\n    if (size + off >= sizeof(session->value_2))\n      size = (size_t) (sizeof (session->value_2) - off - 1); /* crop extra data */\n    memcpy (&session->value_2[off],\n            data,\n            size);\n    session->value_2[size + off] = '\\0';\n    log_probe (\"BRANCH_V2_WRITE\", request, key, data, off, size);\n    return MHD_YES;\n  }\n  fprintf (stderr,\n           \"Unsupported form value `%s'\\n\",\n           key);\n  log_probe (\"BRANCH_UNSUPPORTED\", request, key, data, off, size);\n  return MHD_YES;\n}\n"
}