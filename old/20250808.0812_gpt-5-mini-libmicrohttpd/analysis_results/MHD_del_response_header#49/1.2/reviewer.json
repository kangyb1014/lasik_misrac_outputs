{
  "user_message": "An agent A claimed that the following MHD_del_response_header code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_del_response_header.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  if ( (NULL == header) ||\n       (NULL == content) )\n    return MHD_NO;\n  header_len = strlen (header);\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n    return del_response_header_connection (response, content);\n\n  content_len = strlen (content);\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header,\n                      pos->header,\n                      header_len)) &&\n        (0 == memcmp (content,\n                      pos->value,\n                      content_len)))\n    {\n      _MHD_remove_header (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n      if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_TRANSFER_ENCODING) ==\n            header_len) &&\n           MHD_str_equal_caseless_bin_n_ (header,\n                                          MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                          header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_DATE) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_DATE,\n                                               header_len) )\n        response->flags_auto &=\n          ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      else if ( (MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_CONTENT_LENGTH) ==\n                 header_len) &&\n                MHD_str_equal_caseless_bin_n_ (header,\n                                               MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                               header_len) )\n      {\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n          response->flags_auto &=\n            ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n      }\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code uses the _MHD_EXTERN macro in the function declaration. In the provided additional code that macro expands to __attribute__((visibility(\"default\"))) extern \u2014 a compiler-specific attribute (GCC/Clang extension). Because __attribute__((...)) is a language/compiler extension explicitly documented by compilers, Rule 1.2 is violated.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic int charsequalcaseless (char a, char b)\n{\n  return (int) (tolower ((unsigned char) a) == tolower ((unsigned char) b));\n}\nstatic void mhd_remove_header_impl (struct MHD_Response *presponse,\n                                struct MHD_HTTP_Res_Header *phdr)\n{\n  if (NULL == presponse || NULL == phdr)\n    return;\n\n  if (NULL == phdr->prev)\n  {\n    /* phdr is first */\n    presponse->first_header = phdr->next;\n  }\n  else\n  {\n    phdr->prev->next = phdr->next;\n  }\n\n  if (NULL == phdr->next)\n  {\n    /* phdr is last */\n    presponse->last_header = phdr->prev;\n  }\n  else\n  {\n    phdr->next->prev = phdr->prev;\n  }\n}\nstatic void append_log(const char *msg)\n{\n  /* Try to create directory /tmp/logs if not present; ignore errors. */\n  mkdir(\"/tmp/logs\", 0777);\n  FILE *f = fopen(\"/tmp/logs/392.txt\", \"a\");\n  if (f)\n  {\n    fprintf(f, \"%s\\n\", msg);\n    fclose(f);\n  }\n}\n\nenum MHD_Result\nMHD_del_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *content)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t header_len;\n  size_t content_len;\n\n  append_log(\"MHD_del_response_header: entry\");\n\n  if ((NULL == header) || (NULL == content))\n  {\n    append_log(\"MHD_del_response_header: null header or content -> MHD_NO\");\n    return MHD_NO;\n  }\n  header_len = strlen (header);\n  {\n    char buf[128];\n    snprintf(buf, sizeof(buf), \"MHD_del_response_header: header='%s' header_len=%zu\", header, header_len);\n    append_log(buf);\n  }\n\n  if ((0 != (response->flags_auto & MHD_RAF_HAS_CONNECTION_HDR)) &&\n      (strlen(MHD_HTTP_HEADER_CONNECTION) == header_len) &&\n      MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONNECTION,\n                                     header_len))\n  {\n    append_log(\"MHD_del_response_header: special-case Connection header -> del_response_header_connection\");\n    return del_response_header_connection (response, content);\n  }\n\n  content_len = strlen (content);\n  {\n    char buf[128];\n    snprintf(buf, sizeof(buf), \"MHD_del_response_header: content='%s' content_len=%zu\", content, content_len);\n    append_log(buf);\n  }\n\n  pos = response->first_header;\n  while (NULL != pos)\n  {\n    if ((header_len == pos->header_size) &&\n        (content_len == pos->value_size) &&\n        (0 == memcmp (header, pos->header, header_len)) &&\n        (0 == memcmp (content, pos->value, content_len)))\n    {\n      append_log(\"MHD_del_response_header: matching header found -> remove and free\");\n      /* call the renamed internal remover to avoid macro collision */\n      mhd_remove_header_impl (response, pos);\n      free (pos->header);\n      free (pos->value);\n      free (pos);\n\n      if ((strlen(MHD_HTTP_HEADER_TRANSFER_ENCODING) == header_len) &&\n          MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_TRANSFER_ENCODING, header_len))\n      {\n        append_log(\"MHD_del_response_header: cleared TRANS_ENC_CHUNKED flag\");\n        response->flags_auto &= ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_TRANS_ENC_CHUNKED);\n      }\n      else if ((strlen(MHD_HTTP_HEADER_DATE) == header_len) &&\n               MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_DATE, header_len))\n      {\n        append_log(\"MHD_del_response_header: cleared DATE_HDR flag\");\n        response->flags_auto &= ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_DATE_HDR);\n      }\n      else if ((strlen(MHD_HTTP_HEADER_CONTENT_LENGTH) == header_len) &&\n               MHD_str_equal_caseless_bin_n_ (header, MHD_HTTP_HEADER_CONTENT_LENGTH, header_len))\n      {\n        append_log(\"MHD_del_response_header: handling CONTENT_LENGTH removal\");\n        if (NULL == MHD_get_response_element_n_ (response,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                                 header_len))\n        {\n          append_log(\"MHD_del_response_header: no other Content-Length header -> cleared CONTENT_LENGTH flag\");\n          response->flags_auto &= ~((enum MHD_ResponseAutoFlags) MHD_RAF_HAS_CONTENT_LENGTH);\n        }\n      }\n      append_log(\"MHD_del_response_header: returning MHD_YES\");\n      return MHD_YES;\n    }\n    pos = pos->next;\n  }\n  append_log(\"MHD_del_response_header: no matching header -> MHD_NO\");\n  return MHD_NO;\n}\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  if (NULL == key || 0 == key_len)\n    return NULL;\n  for (pos = response->first_header; NULL != pos; pos = pos->next)\n  {\n    if ((pos->header_size == key_len) && (kind == pos->kind) &&\n        MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size))\n      return pos;\n  }\n  return NULL;\n}\nstatic enum MHD_Result\ndel_response_header_connection (struct MHD_Response *response,\n                                const char *value)\n{\n  struct MHD_HTTP_Res_Header *hdr;\n  hdr = MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONNECTION,\n                                     strlen(MHD_HTTP_HEADER_CONNECTION));\n  if (NULL == hdr)\n  {\n    append_log(\"del_response_header_connection: no Connection header -> MHD_NO\");\n    return MHD_NO;\n  }\n\n  /* For the purposes of this probe we simplify token removal: if value equals hdr->value exactly, remove. */\n  if (strlen(value) != hdr->value_size || 0 != memcmp(hdr->value, value, hdr->value_size))\n  {\n    append_log(\"del_response_header_connection: token not found -> MHD_NO\");\n    return MHD_NO;\n  }\n\n  /* Remove header entirely. */\n  mhd_remove_header_impl (response, hdr);\n  free (hdr->value);\n  free (hdr->header);\n  free (hdr);\n  response->flags_auto &= ~((enum MHD_ResponseAutoFlags) (MHD_RAF_HAS_CONNECTION_HDR | MHD_RAF_HAS_CONNECTION_CLOSE));\n  append_log(\"del_response_header_connection: removed Connection header -> MHD_YES\");\n  return MHD_YES;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. The code uses the macro _MHD_EXTERN in the function declaration; if that macro expands to __attribute__((visibility(\"default\"))) extern (the GNU/Clang attribute syntax), then a compiler-specific language extension is being used. MISRA C 2023 Rule 1.2 prohibits use of language/compiler extensions that are explicitly documented as extensions. The GNU __attribute__ construct is a documented compiler extension, so this use violates Rule 1.2. (If in a different configuration _MHD_EXTERN expands to a standard token such as plain extern, there would be no violation; the violation only applies when the attribute expansion is present.)"
}