{
  "user_message": "An agent A claimed that the following get_rq_uname code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n.\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_uname.\n```c\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  mhd_assert (buf_size >= buf_used);\n  return buf_used;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Violation occurs when an extended-notation username is used: get_rq_uname produces a null-terminated username (uname_info->username) and later digest_auth_check_all_inner obtains r_uname via get_rq_extended_uname_copy_z (also null-terminated). The code in digest_auth_check_all_inner then uses memcmp(username, r_uname, username_len) to compare these null-terminated strings \u2014 this use of memcmp to compare null-terminated strings violates MISRA C 2023 Rule 21.14.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstruct MHD_Param {\n  const char *str;\n  size_t len;\n};\nstruct MHD_RqDAuth {\n  /* For the simple test harness we provide two representations used by\n     the function: username (as a param-like struct) and username_ext\n     which is a nested structure with a value member (matching the\n     original code's usage). */\n  struct MHD_Param username;\n  struct { struct MHD_Param value; } username_ext;\n};\nstatic void\nmhd_assert (int cond)\n{\n  if (!cond)\n    abort ();\n}\nstatic void\nlog_to_file (const char *msg)\n{\n  FILE *f = fopen (\"/tmp/logs/22.txt\", \"a\");\n  if (NULL != f)\n  {\n    fprintf (f, \"%s\\n\", msg);\n    fclose (f);\n  }\n}\nstatic void\nlog_fmt (const char *prefix, int uname_type, size_t buf_size, size_t buf_used,\n         size_t uname_len, size_t userhash_hex_len, size_t userhash_bin_len)\n{\n  FILE *f = fopen (\"/tmp/logs/22.txt\", \"a\");\n  if (NULL != f)\n  {\n    fprintf (f, \"%s: uname_type=%d buf_size=%zu buf_used=%zu uname_len=%zu userhash_hex_len=%zu userhash_bin_len=%zu\\n\",\n             prefix, uname_type, buf_size, buf_used, uname_len, userhash_hex_len, userhash_bin_len);\n    fclose (f);\n  }\n}\n\nstatic enum MHD_DigestAuthUsernameType\nget_rq_uname_type (const struct MHD_RqDAuth *params)\n{\n  if (params == NULL)\n    return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  if (params->username.str != NULL && params->username.len > 0)\n    return MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n  if (params->username_ext.value.str != NULL && params->username_ext.value.len > 0)\n    return MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n  return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n}\nstatic size_t\nget_rq_param_unquoted_copy_z (const struct MHD_Param *p, char *dest)\n{\n  if (p == NULL || p->str == NULL || dest == NULL)\n    return 0;\n  /* Copy up to p->len bytes and ensure NUL termination. */\n  memcpy (dest, p->str, p->len);\n  dest[p->len] = '\\0';\n  return p->len;\n}\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *str, size_t len, char *dest, size_t dest_size)\n{\n  if (str == NULL || dest == NULL)\n    return -1;\n  /* Need room for len bytes plus terminating NUL. */\n  if (dest_size < len + 1)\n    return -1;\n  memcpy (dest, str, len);\n  dest[len] = '\\0';\n  return (ssize_t) len;\n}\nstatic size_t\nget_rq_uname (const struct MHD_RqDAuth *params,\n              enum MHD_DigestAuthUsernameType uname_type,\n              struct MHD_DigestAuthUsernameInfo *uname_info,\n              uint8_t *buf,\n              size_t buf_size)\n{\n  size_t buf_used;\n\n  buf_used = 0;\n  mhd_assert (get_rq_uname_type (params) == uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_INVALID != uname_type);\n  mhd_assert (MHD_DIGEST_AUTH_UNAME_TYPE_MISSING != uname_type);\n\n  uname_info->username = NULL;\n  uname_info->username_len = 0;\n  uname_info->userhash_hex = NULL;\n  uname_info->userhash_hex_len = 0;\n  uname_info->userhash_bin = NULL;\n\n  /* Log entry */\n  {\n    char buflog[256];\n    (void) snprintf (buflog, sizeof (buflog), \"get_rq_uname entry: uname_type=%d buf_size=%zu\",\n                    (int) uname_type, buf_size);\n    log_to_file (buflog);\n  }\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD == uname_type)\n  {\n    uname_info->username = (char *) (buf + buf_used);\n    uname_info->username_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->username);\n    buf_used += uname_info->username_len + 1;\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n\n    /* Log standard path */\n    log_fmt (\"get_rq_uname:STANDARD\", (int) uname_type, buf_size, buf_used,\n             uname_info->username_len, 0U, 0U);\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == uname_type)\n  {\n    size_t res;\n\n    uname_info->userhash_hex = (char *) (buf + buf_used);\n    uname_info->userhash_hex_len =\n      get_rq_param_unquoted_copy_z (&params->username,\n                                    uname_info->userhash_hex);\n    buf_used += uname_info->userhash_hex_len + 1;\n    uname_info->userhash_bin = (uint8_t *) (buf + buf_used);\n    res = MHD_hex_to_bin (uname_info->userhash_hex,\n                          uname_info->userhash_hex_len,\n                          uname_info->userhash_bin);\n    if (res != uname_info->userhash_hex_len / 2)\n    {\n      uname_info->userhash_bin = NULL;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n\n      log_fmt (\"get_rq_uname:USERHASH_INVALID\", (int) uname_type, buf_size, buf_used,\n               0U, uname_info->userhash_hex_len, 0U);\n    }\n    else\n    {\n      /* Avoid pointers outside allocated region when the size is zero */\n      if (0 == res)\n        uname_info->userhash_bin = (uint8_t *) uname_info->username;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH;\n      buf_used += res;\n\n      log_fmt (\"get_rq_uname:USERHASH_OK\", (int) uname_type, buf_size, buf_used,\n               0U, uname_info->userhash_hex_len, res);\n    }\n  }\n  else if (MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED == uname_type)\n  {\n    ssize_t res;\n    res = get_rq_extended_uname_copy_z (params->username_ext.value.str,\n                                        params->username_ext.value.len,\n                                        (char *) (buf + buf_used),\n                                        buf_size - buf_used);\n    if (0 > res)\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    else\n    {\n      uname_info->username = (char *) (buf + buf_used);\n      uname_info->username_len = (size_t) res;\n      uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n      buf_used += uname_info->username_len + 1;\n\n      /* Log extended path and the produced username length */\n      {\n        char buflog[256];\n        (void) snprintf (buflog, sizeof (buflog),\n                        \"get_rq_uname:EXTENDED uname_len=%zu buf_used=%zu\",\n                        uname_info->username_len, buf_used);\n        log_to_file (buflog);\n      }\n    }\n  }\n  else\n  {\n    mhd_assert (0);\n    uname_info->uname_type = MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n    log_to_file (\"get_rq_uname:UNKNOWN_TYPE -> INVALID\");\n  }\n  mhd_assert (buf_size >= buf_used);\n\n  /* Log final state */\n  {\n    char buflog[256];\n    (void) snprintf (buflog, sizeof (buflog), \"get_rq_uname exit: buf_used=%zu uname_type=%d uname_len=%zu\",\n                    buf_used, (int) uname_info->uname_type, uname_info->username_len);\n    log_to_file (buflog);\n  }\n\n  return buf_used;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 21.14 forbids using the standard function memcmp to compare null-terminated strings. The supplied get_rq_uname implementation does not call memcmp; it only constructs and returns NUL-terminated strings (and lengths). Creating or returning NUL-terminated strings is not a violation. If digest_auth_check_all_inner later calls memcmp(username, r_uname, username_len) to compare those NUL-terminated strings, the violation would be at that memcmp call site, not inside get_rq_uname. The agent A did not provide the digest_auth_check_all_inner code (and their test harness failed to compile), so there is no direct evidence that a memcmp on NUL-terminated strings actually occurs. Therefore the report that get_rq_uname itself violates MISRA Rule 21.14 is incorrect. (Note: if another function indeed uses memcmp to compare NUL-terminated strings, that call would violate 21.14 and should be replaced by strcmp/strncmp or another appropriate string comparison.)"
}