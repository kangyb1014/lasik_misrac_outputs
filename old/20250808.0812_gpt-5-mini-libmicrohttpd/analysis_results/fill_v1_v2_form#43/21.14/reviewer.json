{
  "user_message": "An agent A claimed that the following fill_v1_v2_form code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n.\n</misra_rule>\n<target_code>\nHere is the original code of fill_v1_v2_form.\n```c\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  int reply_len;\n  (void) cls; /* Unused */\n\n  /* Emulate 'asprintf' */\n  reply_len = snprintf (NULL, 0, FORM_V1_V2, session->value_1,\n                        session->value_2);\n  if (0 > reply_len)\n    return MHD_NO; /* Internal error */\n\n  reply = (char *) malloc ((size_t) ((size_t) reply_len + 1));\n  if (NULL == reply)\n    return MHD_NO; /* Out-of-memory error */\n\n  if (reply_len != snprintf (reply,\n                             (size_t) ((size_t) reply_len + 1),\n                             FORM_V1_V2,\n                             session->value_1,\n                             session->value_2))\n  {\n    free (reply);\n    return MHD_NO; /* printf error */\n  }\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback ((size_t) reply_len,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL != response)\n  {\n    add_session_cookie (session, response);\n    if (MHD_YES !=\n        MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_CONTENT_TYPE,\n                                 mime))\n    {\n      fprintf (stderr,\n               \"Failed to set content type header!\\n\");\n      /* return response without content type anyway ... */\n    }\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    MHD_destroy_response (response);\n  }\n  else\n  {\n    free (reply);\n    ret = MHD_NO;\n  }\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:When a response already has a \"Connection\" header, add_response_header_connection uses mhd_assert with memcmp: mhd_assert (already_has_close == (0 == memcmp (hdr->value, \"close\", 5))); hdr->value is a null-terminated header string (terminated earlier via buf[pos] = 0). Using memcmp to compare that null-terminated string to the literal \"close\" (a null-terminated string literal) constitutes comparing null-terminated strings with memcmp, which violates MISRA C 2023 Rule 21.14.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstruct MHD_Response { /* opaque for this test code */ };\nconst char MHD_HTTP_HEADER_CONTENT_TYPE[] = \"Content-Type\";\nconst int MHD_HTTP_OK = 200;\nstruct MHD_Response *\nMHD_create_response_from_buffer_with_free_callback (size_t size,\n                                                     void *buffer,\n                                                     void (*free_callback) (void *));\nenum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header, const char *value);\nenum MHD_Result\nMHD_queue_response (struct MHD_Connection *connection,\n                    int status_code, struct MHD_Response *response);\nvoid\nMHD_destroy_response (struct MHD_Response *response);\nconst char FORM_V1_V2[] =\n  \"<html>\\n\"\n  \"<body>\\n\"\n  \"<h1>Form</h1>\\n\"\n  \"<p>Value 1: %s</p>\\n\"\n  \"<p>Value 2: %s</p>\\n\"\n  \"</body>\\n\"\n  \"</html>\\n\";\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/350.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fclose (f);\n}\n\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret = MHD_NO;\n  char *reply;\n  struct MHD_Response *response;\n  int reply_len;\n  (void) cls; /* Unused */\n\n  /* Log entry and session values (safe-check for NULL) */\n  log_probe (\"enter: fill_v1_v2_form\\n\");\n  log_probe (\"session=%p, value_1=%s, value_2=%s, mime=%s\\n\",\n             (void *) session,\n             (session && session->value_1) ? session->value_1 : \"(null)\",\n             (session && session->value_2) ? session->value_2 : \"(null)\",\n             (mime) ? mime : \"(null)\");\n\n  /* Emulate 'asprintf' */\n  reply_len = snprintf (NULL, 0, FORM_V1_V2,\n                        (session && session->value_1) ? session->value_1 : \"\",\n                        (session && session->value_2) ? session->value_2 : \"\");\n  log_probe (\"snprintf(NULL,0) -> reply_len=%d\\n\", reply_len);\n  if (0 > reply_len)\n  {\n    log_probe (\"error: snprintf returned negative -> MHD_NO\\n\");\n    return MHD_NO; /* Internal error */\n  }\n\n  reply = (char *) malloc ((size_t) ((size_t) reply_len + 1));\n  log_probe (\"malloc(%zu) -> reply=%p\\n\",\n             (size_t) ((size_t) reply_len + 1), (void *) reply);\n  if (NULL == reply)\n  {\n    log_probe (\"error: malloc returned NULL -> MHD_NO\\n\");\n    return MHD_NO; /* Out-of-memory error */\n  }\n\n  if (reply_len != snprintf (reply,\n                             (size_t) ((size_t) reply_len + 1),\n                             FORM_V1_V2,\n                             (session && session->value_1) ? session->value_1 : \"\",\n                             (session && session->value_2) ? session->value_2 : \"\"))\n  {\n    log_probe (\"error: snprintf wrote unexpected number of bytes -> free and MHD_NO\\n\");\n    free (reply);\n    return MHD_NO; /* printf error */\n  }\n  log_probe (\"formatted reply (len=%d) -> %p\\n\", reply_len, (void *) reply);\n\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback ((size_t) reply_len,\n                                                        (void *) reply,\n                                                        &free);\n  log_probe (\"created response -> %p\\n\", (void *) response);\n  if (NULL != response)\n  {\n    add_session_cookie (session, response);\n    log_probe (\"added session cookie\\n\");\n    if (MHD_YES !=\n        MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_CONTENT_TYPE,\n                                 mime))\n    {\n      fprintf (stderr,\n               \"Failed to set content type header!\\n\");\n      log_probe (\"warning: failed to set content type header\\n\");\n      /* return response without content type anyway ... */\n    }\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_OK,\n                              response);\n    log_probe (\"queued response -> ret=%d\\n\", (int) ret);\n    MHD_destroy_response (response);\n    log_probe (\"destroyed response\\n\");\n  }\n  else\n  {\n    free (reply);\n    log_probe (\"response creation failed, freed reply and returning MHD_NO\\n\");\n    ret = MHD_NO;\n  }\n  log_probe (\"exit: fill_v1_v2_form -> ret=%d\\n\", (int) ret);\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The presented fill_v1_v2_form function contains no use of memcmp (or any string comparison calls). It only calls MHD_add_response_header (and other library/helper functions). If an internal function such as add_response_header_connection uses memcmp to compare a null-terminated header string to \"close\", that internal function would be the locus of a Rule 21.14 violation \u2014 not fill_v1_v2_form itself. The agent\u2019s scenario therefore describes a plausible MISRA violation, but it is misattributed: the violation would be in the header-handling code (MHD_add_response_header / add_response_header_connection), not in the shown fill_v1_v2_form code. Also, the supplied test code did not compile so no runtime evidence was produced. Hence the report that fill_v1_v2_form violates MISRA C 2023 Rule 21.14 is not correct."
}