{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  /* Only one user has access to the page */\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) method;            /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    *req_cls = &already_called_marker;\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  /* No need to call MHD_digest_auth_get_username3() as the only\n   * one user has an access. The username match is checked by\n   * MHD_digest_auth_check3() function. */\n  res_e = MHD_digest_auth_check3 (\n    connection,\n    realm,\n    username,\n    password,\n    0, 0,\n    MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n    MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION);\n  if (res_e != MHD_DAUTH_OK)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_auth_required_response3 (\n      connection,\n      realm,\n      MY_OPAQUE_STR,\n      NULL,\n      response,\n      (res_e == MHD_DAUTH_NONCE_STALE) ? MHD_YES : MHD_NO,\n      MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n      MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION,\n      MHD_NO,\n      MHD_YES);\n\n    MHD_destroy_response (response);\n    return ret;\n  }\n  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The series of explicit void-cast statements used solely to silence compiler warnings (e.g. (void) cls; (void) url; etc.) are executed statements that have no effect on program behaviour. Their removal would not change runtime behaviour, so they constitute dead code per MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstruct MHD_Connection;\nstruct MHD_Response;\nenum MHD_DigestAuthResult { MHD_DAUTH_OK = 0, MHD_DAUTH_NONCE_STALE = 1 };\nstatic const int MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT = 0;\nstatic const int MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION = 0;\nstatic const int MHD_NO_INT = 0;\nstatic const int MHD_YES_INT = 1;\nstatic const char DENIED[] = \"Denied\";\nstatic const char PAGE[] = \"Hello\";\nstatic const char MY_OPAQUE_STR[] = \"opaque\";\nextern enum MHD_DigestAuthResult MHD_digest_auth_check3(\n  struct MHD_Connection *connection,\n  const char *realm,\n  const char *username,\n  const char *password,\n  int a, int b,\n  int qop,\n  int algo);\nextern struct MHD_Response *MHD_create_response_from_buffer_static(size_t size, const char *buf);\nextern enum MHD_Result MHD_queue_auth_required_response3(\n  struct MHD_Connection *connection,\n  const char *realm,\n  const char *opaque,\n  void *something,\n  struct MHD_Response *response,\n  int stale,\n  int qop,\n  int algo,\n  int no1,\n  int yes2);\nextern void MHD_destroy_response(struct MHD_Response *response);\nextern enum MHD_Result MHD_queue_response(struct MHD_Connection *connection, int status_code, struct MHD_Response *response);\nstatic void\nprobe_log_event (const char *event, const void *connection, const void *req_cls_ptr, const void *marker_addr, int res_code)\n{\n  FILE *f = fopen(\"/tmp/logs/506.txt\", \"a\");\n  if (NULL != f)\n  {\n    /* Print a compact record: event name, pointers and auth result code. */\n    (void) fprintf (f, \"%s: connection=%p, req_cls_value=%p, marker_addr=%p, res=%d\\n\",\n                    event, connection, req_cls_ptr, marker_addr, res_code);\n    (void) fclose (f);\n  }\n}\n\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  struct MHD_Response *response;\n  /* Only one user has access to the page */\n  static const char *username = \"testuser\";\n  static const char *password = \"testpass\";\n  static const char *realm = \"test@example.com\";\n  enum MHD_DigestAuthResult res_e;\n  enum MHD_Result ret;\n  static int already_called_marker;\n\n  /* Log entry and the current value of *req_cls (may be NULL/garbage as per original logic). */\n  probe_log_event (\"entry\", connection, (req_cls != NULL) ? *req_cls : NULL, &already_called_marker, -1);\n\n  /* Original explicit void casts used to silence compiler warnings. These\n     statements are executed but have no runtime effect other than suppressing\n     warnings; removal would not change behaviour. We keep them to preserve the\n     original logic but log that the code-path passed them. */\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) method;            /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  /* Log that the unused-parameter suppression statements were executed. */\n  probe_log_event (\"after_unused_suppressions\", connection, (req_cls != NULL) ? *req_cls : NULL, &already_called_marker, -1);\n\n  if (&already_called_marker != *req_cls)\n  { /* Called for the first time, request not fully read yet */\n    *req_cls = &already_called_marker;\n    /* Log the fact that we're returning early to wait for the full request. */\n    probe_log_event (\"first_time_wait\", connection, *req_cls, &already_called_marker, -1);\n    /* Wait for complete request */\n    return MHD_YES;\n  }\n\n  /* No need to call MHD_digest_auth_get_username3() as the only\n   * one user has an access. The username match is checked by\n   * MHD_digest_auth_check3() function. */\n  probe_log_event (\"before_auth_check\", connection, *req_cls, &already_called_marker, -1);\n  res_e = MHD_digest_auth_check3 (\n    connection,\n    realm,\n    username,\n    password,\n    0, 0,\n    MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n    MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION);\n  probe_log_event (\"after_auth_check\", connection, *req_cls, &already_called_marker, (int) res_e);\n\n  if (res_e != MHD_DAUTH_OK)\n  {\n    response =\n      MHD_create_response_from_buffer_static (strlen (DENIED),\n                                              DENIED);\n    if (NULL == response)\n      return MHD_NO;\n    ret = MHD_queue_auth_required_response3 (\n      connection,\n      realm,\n      MY_OPAQUE_STR,\n      NULL,\n      response,\n      (res_e == MHD_DAUTH_NONCE_STALE) ? MHD_YES : MHD_NO,\n      MHD_DIGEST_AUTH_MULT_QOP_ANY_NON_INT,\n      MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION,\n      MHD_NO_INT,\n      MHD_YES_INT);\n\n    /* Log the auth-failure path and the result being returned. */\n    probe_log_event (\"auth_required_queued\", connection, *req_cls, &already_called_marker, (int) ret);\n\n    MHD_destroy_response (response);\n    return ret;\n  }\n  response = MHD_create_response_from_buffer_static (strlen (PAGE), PAGE);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n\n  /* Log successful response path. */\n  probe_log_event (\"response_queued\", connection, *req_cls, &already_called_marker, (int) ret);\n\n  MHD_destroy_response (response);\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C 2023 Rule 2.2 targets truly dead code whose removal would not affect the program\u2019s observable behaviour. The explicit (void) parameter casts in ahc_echo are a standard, deliberate idiom to document and suppress \u201cunused parameter\u201d diagnostics. They are not ordinary dead code in the sense that they carry intent (documentation) and can affect compilation and generated code (and therefore potentially timing or side\u2011effects in corner cases such as volatile/trap representations). MISRA practice permits explicit unused\u2011parameter annotations; removing them only affects diagnostics and possibly compiler code generation, not the semantic intent of the function. Therefore the agent A claim that those (void) casts are a Rule 2.2 violation is incorrect."
}