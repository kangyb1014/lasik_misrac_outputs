{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified fill_v1_v2_form code that contains useful probe functions that print useful logs to a file \"/tmp/logs/514.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of fill_v1_v2_form as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of fill_v1_v2_form:\n```c\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n    return MHD_NO;\n  snprintf (reply,\n            slen + 1,\n            SECOND_PAGE,\n            session->value_1,\n            session->value_2);\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    free (reply);\n    return MHD_NO;\n  }\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function fill_v1_v2_form:\n#define SECOND_PAGE \"<html><head><title>Tell me more</title></head><body><a href=\\\"/\\\">previous</a> <form action=\\\"/S\\\" method=\\\"post\\\">%s, what is your job? <input type=\\\"text\\\" name=\\\"v2\\\" value=\\\"%s\\\" /><input type=\\\"submit\\\" value=\\\"Next\\\" /></form></body></html>\"\n...\n#define MHD_HTTP_OK 200\n...\n#define MHD_HTTP_HEADER_CONTENT_ENCODING \"Content-Encoding\"\n...\nstruct MHD_Response\n...\nstruct MHD_Connection\n</additional code>\nJudge whether the above fill_v1_v2_form code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "The explicit cast-to-void statement '(void) cls;' is a no-op operation executed solely to silence an unused-parameter warning. Removing that single statement would not change program behaviour, so it constitutes dead code and thus violates MISRA C 2023 Rule 2.2.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\n/* Probe helper that logs control path and state information for the violation scenario. */\nstatic void\nprobe_log(const char *label,\n          const void *cls,\n          const char *mime,\n          const struct Session *session,\n          const struct MHD_Connection *connection)\n{\n  FILE *f = fopen(\"/tmp/logs/514.txt\", \"a\");\n  if (NULL == f)\n  {\n    return; /* keep behavior safe if logging not available */\n  }\n\n  fprintf(f, \"--- %s ---\\n\", label);\n  fprintf(f, \"cls=%p mime=%p connection=%p session=%p\\n\",\n          cls, (const void *) mime, (const void *) connection,\n          (const void *) session);\n  if (session != NULL)\n  {\n    const char *v1 = session->value_1;\n    const char *v2 = session->value_2;\n    fprintf(f, \"value_1=%p value_2=%p\\n\", (const void *) v1, (const void *) v2);\n    if ((v1 != NULL) && (v2 != NULL))\n    {\n      /* print contents guarded by NULL checks */\n      fprintf(f, \"value_1=\\\"%s\\\" value_2=\\\"%s\\\"\\n\", v1, v2);\n    }\n  }\n  fflush(f);\n  fclose(f);\n}\n\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n\n  /* Log entry and state before the no-op cast */\n  probe_log(\"enter_fill_v1_v2_form_before_cast\", cls, mime, session, connection);\n\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  /* Log that the cast-to-void was executed (the statement believed to be dead code) */\n  probe_log(\"after_void_cast\", cls, mime, session, connection);\n\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n    return MHD_NO;\n  snprintf (reply,\n            slen + 1,\n            SECOND_PAGE,\n            session->value_1,\n            session->value_2);\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    free (reply);\n    return MHD_NO;\n  }\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n\n  /* Log exit and returned result */\n  probe_log(\"exit_fill_v1_v2_form\", cls, mime, session, connection);\n\n  return ret;\n}\n"
}