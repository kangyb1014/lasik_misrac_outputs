{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nenum MHD_ValueKind { MHD_VAL_KIND = 0 };\nstatic const size_t MAXNAMESIZE = 64U;\nstatic const size_t MAXANSWERSIZE = 256U;\nstatic const char GREETINGPAGE[] = \"Hello %s\";\nstatic void\nprobe_log (const char *stage, const char *key, const char *data, size_t size, uint64_t off, const char *note)\n{\n  FILE *f = fopen (\"/tmp/logs/426.txt\", \"a\");\n  if (f)\n  {\n    /* Print a compact record describing the point and relevant state. */\n    fprintf (f, \"stage=%s key=%s size=%zu off=%\" PRIu64 \" note=%s\\n\",\n             stage, (key != NULL) ? key : \"(null)\", size, off, (note != NULL) ? note : \"\");\n\n    /* If small data, log it safely (may not be null terminated). */\n    if ((data != NULL) && (size > 0) && (size <= 64U))\n    {\n      char buf[65];\n      size_t copy = (size < 64U) ? size : 64U;\n      memcpy (buf, data, copy);\n      buf[copy] = '\\0';\n      fprintf (f, \"  data_preview='%s'\\n\", buf);\n    }\n\n    fclose (f);\n  }\n}\n\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n\n  /* The following (void) casts are the subject of the violation scenario:\n     they are executed operations with no effect (dead code per Rule 2.2). */\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  /* Log entry and the fact that the (void) statements executed. */\n  probe_log (\"enter\", key, data, size, off, \"(void) casts executed\");\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    probe_log (\"branch\", key, data, size, off, \"matched 'name'\");\n\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n      {\n        probe_log (\"alloc_fail\", key, data, size, off, \"malloc returned NULL\");\n        return MHD_NO;\n      }\n\n      /* Preserve original behaviour: format greeting into the allocated buffer. */\n      (void) snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n\n      probe_log (\"alloc_ok\", key, data, size, off, \"allocated and formatted answerstring\");\n    }\n    else\n    {\n      con_info->answerstring = NULL;\n      probe_log (\"size_invalid\", key, data, size, off, \"size out of range -> answerstring=NULL\");\n    }\n\n    return MHD_NO;\n  }\n\n  probe_log (\"exit\", key, data, size, off, \"no matching key -> continue\");\n  return MHD_YES;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp3bvi8phe/src/build-aux/missing: line 81: makeinfo: command not found\nWARNING: 'makeinfo' is missing on your system.\n         You should only need it if you modified a '.texi' file, or\n         any other file indirectly affecting the aspect of the manual.\n         You might want to install the Texinfo package:\n         <https://www.gnu.org/software/texinfo/>\n         The spurious makeinfo call might also be the consequence of\n         using a buggy 'make' (AIX, DU, IRIX), in which case you might\n         want to install GNU make:\n         <https://www.gnu.org/software/make/>\nmake[3]: *** [Makefile:543: libmicrohttpd.info] Error 127\nmake[2]: *** [Makefile:764: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of iterate_post as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdint.h>\n#include <inttypes.h>\n\nenum MHD_ValueKind { MHD_VAL_KIND = 0 };\n\nstatic const size_t MAXNAMESIZE = 64U;\nstatic const size_t MAXANSWERSIZE = 256U;\nstatic const char GREETINGPAGE[] = \"Hello %s\";\n\nstruct connection_info_struct {\n  char *answerstring;\n};\n\nenum MHD_Result { MHD_YES = 1, MHD_NO = 0 };\n\nstatic void\nprobe_log (const char *stage, const char *key, const char *data, size_t size, uint64_t off, const char *note)\n{\n  FILE *f = fopen (\"/tmp/logs/426.txt\", \"a\");\n  if (f)\n  {\n    /* Print a compact record describing the point and relevant state. */\n    fprintf (f, \"stage=%s key=%s size=%zu off=%\" PRIu64 \" note=%s\\n\",\n             stage, (key != NULL) ? key : \"(null)\", size, off, (note != NULL) ? note : \"\");\n\n    /* If small data, log it safely (may not be null terminated). */\n    if ((data != NULL) && (size > 0) && (size <= 64U))\n    {\n      char buf[65];\n      size_t copy = (size < 64U) ? size : 64U;\n      memcpy (buf, data, copy);\n      buf[copy] = '\\0';\n      fprintf (f, \"  data_preview='%s'\\n\", buf);\n    }\n\n    fclose (f);\n  }\n}\n\nstatic enum MHD_Result\niterate_post (void *coninfo_cls, enum MHD_ValueKind kind, const char *key,\n              const char *filename, const char *content_type,\n              const char *transfer_encoding, const char *data, uint64_t off,\n              size_t size)\n{\n  struct connection_info_struct *con_info = coninfo_cls;\n\n  /* The following (void) casts are the subject of the violation scenario:\n     they are executed operations with no effect (dead code per Rule 2.2). */\n  (void) kind;               /* Unused. Silent compiler warning. */\n  (void) filename;           /* Unused. Silent compiler warning. */\n  (void) content_type;       /* Unused. Silent compiler warning. */\n  (void) transfer_encoding;  /* Unused. Silent compiler warning. */\n  (void) off;                /* Unused. Silent compiler warning. */\n\n  /* Log entry and the fact that the (void) statements executed. */\n  probe_log (\"enter\", key, data, size, off, \"(void) casts executed\");\n\n  if (0 == strcmp (key, \"name\"))\n  {\n    probe_log (\"branch\", key, data, size, off, \"matched 'name'\");\n\n    if ((size > 0) && (size <= MAXNAMESIZE))\n    {\n      char *answerstring;\n      answerstring = malloc (MAXANSWERSIZE);\n      if (! answerstring)\n      {\n        probe_log (\"alloc_fail\", key, data, size, off, \"malloc returned NULL\");\n        return MHD_NO;\n      }\n\n      /* Preserve original behaviour: format greeting into the allocated buffer. */\n      (void) snprintf (answerstring, MAXANSWERSIZE, GREETINGPAGE, data);\n      con_info->answerstring = answerstring;\n\n      probe_log (\"alloc_ok\", key, data, size, off, \"allocated and formatted answerstring\");\n    }\n    else\n    {\n      con_info->answerstring = NULL;\n      probe_log (\"size_invalid\", key, data, size, off, \"size out of range -> answerstring=NULL\");\n    }\n\n    return MHD_NO;\n  }\n\n  probe_log (\"exit\", key, data, size, off, \"no matching key -> continue\");\n  return MHD_YES;\n}\n",
  "explanation": "I made the snippet a self-contained, compilable translation unit by adding the necessary includes and minimal type definitions that were referenced but not provided: inttypes.h, stdint.h, stdio.h, stdlib.h and string.h. I added a struct connection_info_struct with a char *answerstring member and an enum MHD_Result with MHD_YES/MHD_NO values. No logic in iterate_post was changed; the (void) casts, logging, allocation and string formatting behavior are preserved."
}