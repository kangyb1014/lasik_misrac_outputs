{
  "user_message": "Target function code is:\n```c\nstatic enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)\n{\n  unsigned int have;\n  enum MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n  *dest = NULL;\n  *dest_size = 0;\n  do\n  {\n    if (src_size > CHUNK)\n    {\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n    }\n    else\n    {\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n    }\n    *offset += strm->avail_in;\n    strm->next_in = (const Bytef *) src;\n    do\n    {\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n      ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n      have = CHUNK - strm->avail_out;\n      *dest_size += have;\n      tmp_dest = realloc (*dest, *dest_size);\n      if (NULL == tmp_dest)\n      {\n        free (*dest);\n        *dest = NULL;\n        return MHD_NO;\n      }\n      *dest = tmp_dest;\n      memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n    }\n    while (0 == strm->avail_out);\n  }\n  while (flush != Z_SYNC_FLUSH);\n  return ret;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'compress_buf': {'callees': [], 'callers': ['read_cb']}, 'read_cb': {'callees': ['compress_buf'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "z_stream",
    "uInt",
    "Bytef",
    "deflate",
    "Z_NO_FLUSH",
    "Z_SYNC_FLUSH",
    "Z_OK",
    "CHUNK",
    "enum MHD_Result",
    "MHD_YES",
    "MHD_NO",
    "realloc",
    "free",
    "memcpy",
    "uint8_t"
  ],
  "explanation": "For checking MISRA rule 'Language extensions should not be used' you must inspect the declarations/definitions of all external types/macros/functions used by compress_buf because those declarations may themselves employ compiler-specific extensions (e.g. __attribute__, calling\u2011convention macros, inline asm, typeof, statement expressions, nonstandard qualifiers, packed/bitfield pragmas, etc.). Reason for each symbol:\n\n- z_stream: the struct typedef (zlib type pointed to by strm) may include compiler-specific attributes, packed/pragma annotations or nonstandard bitfields.\n- uInt: typedef used for strm->avail_in; its underlying definition could be nonstandard or implemented via macros/aliases that use extensions.\n- Bytef: zlib byte type used in casts; its typedef or macro could be implemented with extensions.\n- deflate: external function used in the body \u2014 its prototype in zlib headers may contain calling\u2011convention macros or __attribute__ annotations (extensions) that must be checked.\n- Z_NO_FLUSH, Z_SYNC_FLUSH, Z_OK: zlib macros/constants \u2014 their definitions could be complex macros using extension syntax or rely on nonstandard enum/typedef constructs.\n- CHUNK: macro controlling buffer sizes and loop behavior \u2014 it may be defined using extension constructs (e.g. VLA bounds, compiler extension expressions) or nonstandard types.\n- enum MHD_Result: return type of the function \u2014 its definition could use compiler extensions (underlying type specification, attributes on enum values, or nonstandard macros wrapping enum declarations).\n- MHD_YES, MHD_NO: constants used as return mapping \u2014 they might be macros or enum values implemented with nonstandard extensions.\n- realloc, free, memcpy: standard library functions \u2014 their declarations in system headers occasionally include implementation-specific attributes (e.g. __attribute__((malloc)), __nonnull__) or calling\u2011convention annotations; these must be checked for extensions.\n- uint8_t: fixed-width integer used in a cast \u2014 its definition comes from stdint.h which on some platforms may use implementation-specific constructs; verify no extensions are involved.\n\nInspecting these symbols' header/definitions is sufficient to determine whether the target function or its used declarations employ any compiler-specific language extensions that would violate the MISRA rule."
}