{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified compress_buf code that contains useful probe functions that print useful logs to a file \"/tmp/logs/671.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of compress_buf as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of compress_buf:\n```c\nstatic enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)\n{\n  unsigned int have;\n  enum MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n  *dest = NULL;\n  *dest_size = 0;\n  do\n  {\n    if (src_size > CHUNK)\n    {\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n    }\n    else\n    {\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n    }\n    *offset += strm->avail_in;\n    strm->next_in = (const Bytef *) src;\n    do\n    {\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n      ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n      have = CHUNK - strm->avail_out;\n      *dest_size += have;\n      tmp_dest = realloc (*dest, *dest_size);\n      if (NULL == tmp_dest)\n      {\n        free (*dest);\n        *dest = NULL;\n        return MHD_NO;\n      }\n      *dest = tmp_dest;\n      memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n    }\n    while (0 == strm->avail_out);\n  }\n  while (flush != Z_SYNC_FLUSH);\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function compress_buf:\nconst void *buffer\n</additional code>\nJudge whether the above compress_buf code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "When the provided tmp buffer passed into compress_buf is smaller than CHUNK (the function assumes tmp has CHUNK bytes), the memcpy(((uint8_t *)(*dest)) + ((*dest_size) - have), tmp, have) can read beyond the bounds of the tmp object. This occurs because 'have' may be up to CHUNK and the function never checks the actual size of the tmp buffer, so memcpy may access beyond tmp's bounds and thus violate MISRA C 2023 Rule 21.17.",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <string.h>\n\n/* Minimal supporting declarations to keep the original logic intact. */\ntypedef unsigned int uInt;\ntypedef unsigned char Bytef;\n\n/* Minimal z_stream structure used by zlib. */\ntypedef struct {\n  uInt avail_in;\n  const Bytef *next_in;\n  uInt avail_out;\n  Bytef *next_out;\n} z_stream;\n\n/* Minimal enum and constants used in the function. */\nenum MHD_Result { MHD_NO = 0, MHD_YES = 1 };\nconst size_t CHUNK = 16384u;\n\nenum { Z_NO_FLUSH = 0, Z_SYNC_FLUSH = 2 };\nenum { Z_OK = 0 };\n\n/* deflate is provided by zlib externally; declare it here. */\nextern int deflate(z_stream *strm, int flush);\n\n/* Probe logger: append control path and state info to /tmp/logs/671.txt */\nstatic void log_state(const char *stage,\n                      size_t src_size, size_t offset, size_t dest_size,\n                      unsigned int have, int flush,\n                      const void *src, const void *tmp, const void *dest)\n{\n  FILE *f = fopen(\"/tmp/logs/671.txt\", \"a\");\n  if (f == NULL)\n  {\n    return;\n  }\n  fprintf(f, \"stage=%s src_size=%zu offset=%zu dest_size=%zu have=%u flush=%d\\n\",\n          stage, src_size, offset, dest_size, have, flush);\n  fprintf(f, \"  src=%p tmp=%p dest=%p\\n\", src, tmp, dest);\n  fclose(f);\n}\n\n/* Original function with inserted probes. */\nstatic enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)\n{\n  unsigned int have;\n  enum MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n  *dest = NULL;\n  *dest_size = 0;\n  do\n  {\n    log_state(\"outer_start\", src_size, *offset, *dest_size, 0, 0, src, tmp, *dest);\n    if (src_size > CHUNK)\n    {\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n    }\n    else\n    {\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n    }\n    *offset += strm->avail_in;\n    strm->next_in = (const Bytef *) src;\n    do\n    {\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n      /* call zlib deflate; unchanged */\n      ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n      have = CHUNK - strm->avail_out;\n      log_state(\"after_deflate\", src_size, *offset, *dest_size, have, flush, src, tmp, *dest);\n      *dest_size += have;\n      tmp_dest = realloc (*dest, *dest_size);\n      if (NULL == tmp_dest)\n      {\n        free (*dest);\n        *dest = NULL;\n        log_state(\"realloc_fail\", src_size, *offset, *dest_size, have, flush, src, tmp, *dest);\n        return MHD_NO;\n      }\n      *dest = tmp_dest;\n      /* Log immediately before the memcpy that can read from \"tmp\" up to 'have' bytes. */\n      log_state(\"before_memcpy\", src_size, *offset, *dest_size, have, flush, src, tmp, *dest);\n      memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n      log_state(\"after_memcpy\", src_size, *offset, *dest_size, have, flush, src, tmp, *dest);\n    }\n    while (0 == strm->avail_out);\n  }\n  while (flush != Z_SYNC_FLUSH);\n  return ret;\n}\n"
}