{
  "user_message": "An agent A claimed that the following MHD_set_response_options code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_response_options.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_response_options (struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n  enum MHD_ResponseOptions ro;\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  { /* Response has custom \"Content-Lengh\" header */\n    if ( (0 != (response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) &&\n         (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)))\n    { /* Request to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH flag */\n      return MHD_NO;\n    }\n    if ( (0 != (response->flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n         (0 == (flags & MHD_RF_HEAD_ONLY_RESPONSE)))\n    { /* Request to remove MHD_RF_HEAD_ONLY_RESPONSE flag */\n      if (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH))\n        return MHD_NO;\n    }\n  }\n\n  if ( (0 != (flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n       (0 != response->total_size) )\n    return MHD_NO;\n\n  ret = MHD_YES;\n  response->flags = flags;\n\n  va_start (ap, flags);\n  while (MHD_RO_END != (ro = va_arg (ap, enum MHD_ResponseOptions)))\n  {\n    switch (ro)\n    {\n    case MHD_RO_END: /* Not possible */\n      break;\n    default:\n      ret = MHD_NO;\n      break;\n    }\n  }\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function declaration uses the GCC-specific function attribute __attribute__((visibility(\"default\"))) (via _MHD_EXTERN), which is a compiler language extension explicitly documented by compilers such as GCC/Clang. This use of a compiler attribute violates MISRA C 2023 Rule 1.2 (language extensions should not be used).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\n__attribute__((visibility(\"default\"))) extern enum MHD_Result\nMHD_set_response_options (struct MHD_Response *response,\n                          enum MHD_ResponseFlags flags,\n                          ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n  enum MHD_ResponseOptions ro;\n  FILE *log = fopen(\"/tmp/logs/304.txt\", \"a\");\n\n  if (log)\n  {\n    fprintf(log, \"MHD_set_response_options: enter response=%p flags=0x%u total_size=%llu flags_auto=0x%u response->flags=0x%u\\n\",\n            (void *)response,\n            (unsigned)flags,\n            (unsigned long long)response->total_size,\n            (unsigned)response->flags_auto,\n            (unsigned)response->flags);\n  }\n\n  if (0 != (response->flags_auto & MHD_RAF_HAS_CONTENT_LENGTH))\n  { /* Response has custom \"Content-Lengh\" header */\n    if (log)\n      fprintf(log, \"  branch: has_content_length=true\\n\");\n\n    if ( (0 != (response->flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)) &&\n         (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH)))\n    { /* Request to remove MHD_RF_INSANITY_HEADER_CONTENT_LENGTH flag */\n      if (log)\n        fprintf(log, \"  reject: removing INSANITY_HEADER_CONTENT_LENGTH (response->flags had it, flags does not)\\n\");\n      if (log) fclose(log);\n      return MHD_NO;\n    }\n    if ( (0 != (response->flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n         (0 == (flags & MHD_RF_HEAD_ONLY_RESPONSE)))\n    { /* Request to remove MHD_RF_HEAD_ONLY_RESPONSE flag */\n      if (log)\n        fprintf(log, \"  check: attempting to remove HEAD_ONLY_RESPONSE\\n\");\n      if (0 == (flags & MHD_RF_INSANITY_HEADER_CONTENT_LENGTH))\n      {\n        if (log)\n          fprintf(log, \"  reject: removal of HEAD_ONLY_RESPONSE without INSANITY_HEADER_CONTENT_LENGTH\\n\");\n        if (log) fclose(log);\n        return MHD_NO;\n      }\n    }\n  }\n  else\n  {\n    if (log)\n      fprintf(log, \"  branch: has_content_length=false\\n\");\n  }\n\n  if ( (0 != (flags & MHD_RF_HEAD_ONLY_RESPONSE)) &&\n       (0 != response->total_size) )\n  {\n    if (log)\n      fprintf(log, \"  reject: setting HEAD_ONLY_RESPONSE while total_size!=0 (total_size=%llu)\\n\",\n              (unsigned long long)response->total_size);\n    if (log) fclose(log);\n    return MHD_NO;\n  }\n\n  ret = MHD_YES;\n  response->flags = flags;\n\n  if (log)\n    fprintf(log, \"  accept: flags updated to 0x%u, will parse varargs options\\n\", (unsigned)flags);\n\n  va_start (ap, flags);\n  while (MHD_RO_END != (ro = va_arg (ap, enum MHD_ResponseOptions)))\n  {\n    if (log)\n      fprintf(log, \"    vararg: option=%d (unexpected)\\n\", (int)ro);\n    switch (ro)\n    {\n    case MHD_RO_END: /* Not possible */\n      break;\n    default:\n      ret = MHD_NO;\n      break;\n    }\n  }\n  va_end (ap);\n\n  if (log)\n  {\n    fprintf(log, \"  exit: ret=%d\\n\", (int)ret);\n    fclose(log);\n  }\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A's report is not supported by the provided snippet. The target code shows the token _MHD_EXTERN but does not show its definition. The presence of a macro name alone does not prove a language extension is used: _MHD_EXTERN may expand to nothing or to a standard extern, or it may be a portability macro that expands to a compiler attribute on some toolchains. MISRA C 2023 Rule 1.2 should be reported only when a compiler language extension is actually used (e.g., __attribute__((...)) as documented by a compiler). Agent A substituted an explicit GCC attribute in the test code, and that attribute would be a compiler extension and thus would violate Rule 1.2; however, that substitution is not evidence that the original code uses the extension. To decide definitively you must inspect the definition of _MHD_EXTERN (and any included headers or preprocessor output). If _MHD_EXTERN expands to a compiler-specific attribute (such as __attribute__((visibility("
}