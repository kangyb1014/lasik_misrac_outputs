{
  "user_message": "Target function code is:\n```c\nstatic unsigned int\nget_no_space_err_status_code (struct MHD_Connection *c,\n                              enum MHD_ProcRecvDataStage stage,\n                              const char *add_element,\n                              size_t add_element_size)\n{\n  size_t method_size;\n  size_t uri_size;\n  size_t opt_headers_size;\n  size_t host_field_line_size;\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVED < c->state);\n  mhd_assert (MHD_PROC_RECV_HEADERS <= stage);\n  mhd_assert ((0 == add_element_size) || (NULL != add_element));\n\n  if (MHD_CONNECTION_HEADERS_RECEIVED > c->state)\n  {\n    mhd_assert (NULL != c->rq.field_lines.start);\n    opt_headers_size =\n      (size_t) ((c->read_buffer + c->read_buffer_offset)\n                - c->rq.field_lines.start);\n  }\n  else\n    opt_headers_size = c->rq.field_lines.size;\n\n  /* The read buffer is fully used by the request line, the field lines\n     (headers) and internal information.\n     The return status code works as a suggestion for the client to reduce\n     one of the request elements. */\n\n  if ((MHD_PROC_RECV_BODY_CHUNKED == stage) &&\n      (MHD_MIN_REASONABLE_REQ_CHUNK_LINE_LENGTH_ < add_element_size))\n  {\n    /* Request could be re-tried easily with smaller chunk sizes */\n    return MHD_HTTP_CONTENT_TOO_LARGE;\n  }\n\n  host_field_line_size = 0;\n  /* The \"Host:\" field line is mandatory.\n     The total size of the field lines (headers) cannot be smaller than\n     the size of the \"Host:\" field line. */\n  if ((MHD_PROC_RECV_HEADERS == stage)\n      && (0 != add_element_size))\n  {\n    static const size_t header_host_key_len =\n      MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_HOST);\n    const bool is_host_header =\n      (header_host_key_len + 1 <= add_element_size)\n      && ( (0 == add_element[header_host_key_len])\n           || (':' == add_element[header_host_key_len]) )\n      && MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_HOST,\n                                        add_element,\n                                        header_host_key_len);\n    if (is_host_header)\n    {\n      const bool is_parsed = ! (\n        (MHD_CONNECTION_HEADERS_RECEIVED > c->state) &&\n        (add_element_size == c->read_buffer_offset) &&\n        (c->read_buffer == add_element) );\n      size_t actual_element_size;\n\n      mhd_assert (! is_parsed || (0 == add_element[header_host_key_len]));\n      /* The actual size should be larger due to CRLF or LF chars,\n         however the exact termination sequence is not known here and\n         as perfect precision is not required, to simplify the code\n         assume the minimal length. */\n      if (is_parsed)\n        actual_element_size = add_element_size + 1;  /* \"1\" for LF */\n      else\n        actual_element_size = add_element_size;\n\n      host_field_line_size = actual_element_size;\n      mhd_assert (opt_headers_size >= actual_element_size);\n      opt_headers_size -= actual_element_size;\n    }\n  }\n  if (0 == host_field_line_size)\n  {\n    static const size_t host_field_name_len =\n      MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_HOST);\n    size_t host_field_name_value_len;\n    if (MHD_NO != MHD_lookup_connection_value_n (c,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_HOST,\n                                                 host_field_name_len,\n                                                 NULL,\n                                                 &host_field_name_value_len))\n    {\n      /* Calculate the minimal size of the field line: no space between\n         colon and the field value, line terminated by LR */\n      host_field_line_size =\n        host_field_name_len + host_field_name_value_len + 2; /* \"2\" for ':' and LF */\n\n      /* The \"Host:\" field could be added by application */\n      if (opt_headers_size >= host_field_line_size)\n      {\n        opt_headers_size -= host_field_line_size;\n        /* Take into account typical space after colon and CR at the end of the line */\n        if (opt_headers_size >= 2)\n          opt_headers_size -= 2;\n      }\n      else\n        host_field_line_size = 0; /* No \"Host:\" field line set by the client */\n    }\n  }\n\n  uri_size = c->rq.req_target_len;\n  if (MHD_HTTP_MTHD_OTHER != c->rq.http_mthd)\n    method_size = 0; /* Do not recommend shorter request method */\n  else\n  {\n    mhd_assert (NULL != c->rq.method);\n    method_size = strlen (c->rq.method);\n  }\n\n  if ((size_t) MHD_MAX_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    /* Typically the easiest way to reduce request header size is\n       a removal of some optional headers. */\n    if (opt_headers_size > (uri_size / 8))\n    {\n      if ((opt_headers_size / 2) > method_size)\n        return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n    else\n    { /* Request target is MUCH larger than headers */\n      if ((uri_size / 16) > method_size)\n        return MHD_HTTP_URI_TOO_LONG;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n  }\n  if ((size_t) MHD_MAX_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    /* If request target size if larger than maximum reasonable size\n       recommend client to reduce the request target size (length). */\n    if ((uri_size / 16) > method_size)\n      return MHD_HTTP_URI_TOO_LONG;     /* Request target is MUCH larger than headers */\n    else\n      return MHD_HTTP_NOT_IMPLEMENTED;  /* The length of the HTTP request method is unreasonably large */\n  }\n\n  /* The read buffer is too small to handle reasonably large requests */\n\n  if ((size_t) MHD_MIN_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    /* Recommend application to retry with minimal headers */\n    if ((opt_headers_size * 4) > uri_size)\n    {\n      if (opt_headers_size > method_size)\n        return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n    else\n    { /* Request target is significantly larger than headers */\n      if (uri_size > method_size * 4)\n        return MHD_HTTP_URI_TOO_LONG;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n  }\n  if ((size_t) MHD_MIN_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    /* Recommend application to retry with a shorter request target */\n    if (uri_size > method_size * 4)\n      return MHD_HTTP_URI_TOO_LONG;\n    else\n      return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n  }\n\n  if ((size_t) MHD_MIN_REASONABLE_REQ_METHOD_SIZE_ < method_size)\n  {\n    /* The request target (URI) and headers are (reasonably) very small.\n       Some non-standard long request method is used. */\n    /* The last resort response as it means \"the method is not supported\n       by the server for any URI\". */\n    return MHD_HTTP_NOT_IMPLEMENTED;\n  }\n\n  /* The almost impossible situation: all elements are small, but cannot\n     fit the buffer. The application set the buffer size to\n     critically low value? */\n\n  if ((1 < opt_headers_size) || (1 < uri_size))\n  {\n    if (opt_headers_size >= uri_size)\n      return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n    else\n      return MHD_HTTP_URI_TOO_LONG;\n  }\n\n  /* Nothing to reduce in the request.\n     Reply with some status. */\n  if (0 != host_field_line_size)\n    return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n\n  return MHD_HTTP_URI_TOO_LONG;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'get_no_space_err_status_code': {'callees': ['MHD_lookup_connection_value_n'], 'callers': ['handle_req_headers_no_space', 'handle_req_cookie_no_space', 'handle_req_chunk_size_line_no_space']}, 'MHD_lookup_connection_value_n': {'callees': [], 'callers': ['MHD_lookup_connection_value', 'need_100_continue', 'get_no_space_err_status_code', 'parse_cookie_header', 'parse_connection_headers', 'MHD_create_post_processor', 'ahc_cb']}, 'handle_req_headers_no_space': {'callees': ['get_no_space_err_status_code', 'transmit_error_response_len'], 'callers': ['handle_recv_no_space', 'get_req_headers']}, 'handle_req_cookie_no_space': {'callees': ['get_no_space_err_status_code', 'transmit_error_response_len'], 'callers': ['parse_connection_headers']}, 'handle_req_chunk_size_line_no_space': {'callees': ['transmit_error_response_len', 'get_no_space_err_status_code'], 'callers': ['handle_recv_no_space']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nUse of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters. This rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_Connection (full definition: types and layout of c->read_buffer, c->read_buffer_offset, c->state, c->rq, c->rq.field_lines.start, c->rq.field_lines.size, c->rq.req_target_len, c->rq.http_mthd, c->rq.method)",
    "MHD_CONNECTION_REQ_LINE_RECEIVED",
    "MHD_CONNECTION_HEADERS_RECEIVED",
    "enum MHD_ProcRecvDataStage values used: MHD_PROC_RECV_HEADERS, MHD_PROC_RECV_BODY_CHUNKED",
    "MHD_STATICSTR_LEN_ (macro)",
    "MHD_HTTP_HEADER_HOST (string literal)",
    "MHD_str_equal_caseless_bin_n_ (prototype and exact semantics)",
    "strlen (standard behaviour) / guarantee that c->rq.method is NUL-terminated and points to an allocated object",
    "MHD_lookup_connection_value_n (prototype and semantics; guarantees about written host_field_name_value_len)",
    "MHD_NO (return value constant used by MHD_lookup_connection_value_n)",
    "MHD_HEADER_KIND (argument to MHD_lookup_connection_value_n)",
    "size/threshold constants used in comparisons: MHD_MIN_REASONABLE_REQ_CHUNK_LINE_LENGTH_, MHD_MAX_REASONABLE_HEADERS_SIZE_, MHD_MAX_REASONABLE_REQ_TARGET_SIZE_, MHD_MIN_REASONABLE_HEADERS_SIZE_, MHD_MIN_REASONABLE_REQ_TARGET_SIZE_, MHD_MIN_REASONABLE_REQ_METHOD_SIZE_",
    "HTTP status constants returned: MHD_HTTP_CONTENT_TOO_LARGE, MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE, MHD_HTTP_NOT_IMPLEMENTED, MHD_HTTP_URI_TOO_LONG",
    "MHD_HTTP_MTHD_OTHER (method sentinel)",
    "mhd_assert (macro/contractual invariants)"
  ],
  "explanation": "For each symbol: \n\n- struct MHD_Connection (full definition): get_no_space_err_status_code performs pointer arithmetic and dereferences many fields (c->read_buffer, c->read_buffer_offset, c->rq.field_lines.start/size, c->rq.method, c->rq.req_target_len, c->rq.http_mthd). To prove that any string operation (strlen, indexed access to add_element[]) cannot read past an object boundary you must know the precise types, pointer targets, and ownership/termination guarantees of these members.\n\n- MHD_CONNECTION_REQ_LINE_RECEIVED and MHD_CONNECTION_HEADERS_RECEIVED: these state constants control branches that change how opt_headers_size is computed (direct pointer arithmetic vs stored size). Knowing their values/semantics is necessary to determine which pointer computations occur and whether the pointers involved are valid.\n\n- enum MHD_ProcRecvDataStage values (MHD_PROC_RECV_HEADERS, MHD_PROC_RECV_BODY_CHUNKED): stage controls whether add_element is inspected as a header key and whether early return happens. Needed to reason about access to add_element and header parsing.\n\n- MHD_STATICSTR_LEN_ macro and MHD_HTTP_HEADER_HOST: header_host_key_len and host_field_name_len are computed from these. You must know if the macro yields the length excluding terminating NUL and its compile-time value so you can determine bounds when indexing add_element[header_host_key_len] and when calling MHD_str_equal_caseless_bin_n_.\n\n- MHD_str_equal_caseless_bin_n_ (prototype and exact semantics): this function is called to compare header_host_key_len bytes from the constant and add_element. To show it cannot read beyond add_element you must know whether it reads exactly the supplied length bytes and does not expect NUL-termination (i.e., its safe use depends on its semantics).\n\n- strlen (standard behaviour) and guarantee that c->rq.method is NUL-terminated: the function calls strlen(c->rq.method). To prove no out-of-bounds read you must know that rq.method points to a valid, NUL-terminated buffer (or document where/when it is set and its lifetime/size).\n\n- MHD_lookup_connection_value_n (prototype and semantics) and MHD_NO: this call supplies host_field_name_value_len used to compute host_field_line_size. You must know that the function returns correct length (not larger than any backing buffers) and whether it can modify memory pointers or require additional invariants. The return value constant MHD_NO is checked; understanding its contract affects whether host_field_line_size is set.\n\n- MHD_HEADER_KIND: argument to lookup; needed to understand which header storage is consulted and what guarantees (lengths/termination) that header storage provides.\n\n- Size/threshold constants (MHD_MIN_REASONABLE_REQ_CHUNK_LINE_LENGTH_, MHD_MAX_REASONABLE_HEADERS_SIZE_, MHD_MAX_REASONABLE_REQ_TARGET_SIZE_, MHD_MIN_REASONABLE_HEADERS_SIZE_, MHD_MIN_REASONABLE_REQ_TARGET_SIZE_, MHD_MIN_REASONABLE_REQ_METHOD_SIZE_): these control many branches and the arithmetic that selects which status is returned. They do not directly change pointer reads, but are required to follow code paths that affect whether certain pointer-based computations (e.g., opt_headers_size adjustments) are performed.\n\n- HTTP status constants (MHD_HTTP_CONTENT_TOO_LARGE, MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE, MHD_HTTP_NOT_IMPLEMENTED, MHD_HTTP_URI_TOO_LONG): included for completeness so an analyzer can correlate branches/returns with the conditions that lead to string accesses; they help map control-flow to the code paths that perform pointer/strlen/index operations.\n\n- MHD_HTTP_MTHD_OTHER: used to decide whether strlen(c->rq.method) is invoked; you must know how http_mthd can equal this value to determine whether the strlen call executes.\n\n- mhd_assert macro: assertions encode invariants (e.g., that pointers are non-NULL or sizes meet expectations). The analyzer needs their definitions (or their intended invariants) to rely on those guarantees safely when proving no out-of-bounds reads.\n\nIn short: to show compliance with the MISRA rule you must inspect the structure layout and lifetime/termination guarantees for all character buffers accessed (add_element, c->read_buffer, c->rq.field_lines.start, c->rq.method and any storage referenced by MHD_lookup_connection_value_n), plus the exact semantics of helper macros and functions used to compute lengths and perform comparisons (MHD_STATICSTR_LEN_, MHD_str_equal_caseless_bin_n_, MHD_lookup_connection_value_n). Without those symbols/semantics you cannot prove that strlen or the binary comparison do not read beyond object bounds."
}