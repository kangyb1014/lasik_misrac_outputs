{
  "user_message": "An agent A claimed that the following get_no_space_err_status_code code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of get_no_space_err_status_code.\n```c\nstatic unsigned int\nget_no_space_err_status_code (struct MHD_Connection *c,\n                              enum MHD_ProcRecvDataStage stage,\n                              const char *add_element,\n                              size_t add_element_size)\n{\n  size_t method_size;\n  size_t uri_size;\n  size_t opt_headers_size;\n  size_t host_field_line_size;\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVED < c->state);\n  mhd_assert (MHD_PROC_RECV_HEADERS <= stage);\n  mhd_assert ((0 == add_element_size) || (NULL != add_element));\n\n  if (MHD_CONNECTION_HEADERS_RECEIVED > c->state)\n  {\n    mhd_assert (NULL != c->rq.field_lines.start);\n    opt_headers_size =\n      (size_t) ((c->read_buffer + c->read_buffer_offset)\n                - c->rq.field_lines.start);\n  }\n  else\n    opt_headers_size = c->rq.field_lines.size;\n\n  /* The read buffer is fully used by the request line, the field lines\n     (headers) and internal information.\n     The return status code works as a suggestion for the client to reduce\n     one of the request elements. */\n\n  if ((MHD_PROC_RECV_BODY_CHUNKED == stage) &&\n      (MHD_MIN_REASONABLE_REQ_CHUNK_LINE_LENGTH_ < add_element_size))\n  {\n    /* Request could be re-tried easily with smaller chunk sizes */\n    return MHD_HTTP_CONTENT_TOO_LARGE;\n  }\n\n  host_field_line_size = 0;\n  /* The \"Host:\" field line is mandatory.\n     The total size of the field lines (headers) cannot be smaller than\n     the size of the \"Host:\" field line. */\n  if ((MHD_PROC_RECV_HEADERS == stage)\n      && (0 != add_element_size))\n  {\n    static const size_t header_host_key_len =\n      MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_HOST);\n    const bool is_host_header =\n      (header_host_key_len + 1 <= add_element_size)\n      && ( (0 == add_element[header_host_key_len])\n           || (':' == add_element[header_host_key_len]) )\n      && MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_HOST,\n                                        add_element,\n                                        header_host_key_len);\n    if (is_host_header)\n    {\n      const bool is_parsed = ! (\n        (MHD_CONNECTION_HEADERS_RECEIVED > c->state) &&\n        (add_element_size == c->read_buffer_offset) &&\n        (c->read_buffer == add_element) );\n      size_t actual_element_size;\n\n      mhd_assert (! is_parsed || (0 == add_element[header_host_key_len]));\n      /* The actual size should be larger due to CRLF or LF chars,\n         however the exact termination sequence is not known here and\n         as perfect precision is not required, to simplify the code\n         assume the minimal length. */\n      if (is_parsed)\n        actual_element_size = add_element_size + 1;  /* \"1\" for LF */\n      else\n        actual_element_size = add_element_size;\n\n      host_field_line_size = actual_element_size;\n      mhd_assert (opt_headers_size >= actual_element_size);\n      opt_headers_size -= actual_element_size;\n    }\n  }\n  if (0 == host_field_line_size)\n  {\n    static const size_t host_field_name_len =\n      MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_HOST);\n    size_t host_field_name_value_len;\n    if (MHD_NO != MHD_lookup_connection_value_n (c,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_HOST,\n                                                 host_field_name_len,\n                                                 NULL,\n                                                 &host_field_name_value_len))\n    {\n      /* Calculate the minimal size of the field line: no space between\n         colon and the field value, line terminated by LR */\n      host_field_line_size =\n        host_field_name_len + host_field_name_value_len + 2; /* \"2\" for ':' and LF */\n\n      /* The \"Host:\" field could be added by application */\n      if (opt_headers_size >= host_field_line_size)\n      {\n        opt_headers_size -= host_field_line_size;\n        /* Take into account typical space after colon and CR at the end of the line */\n        if (opt_headers_size >= 2)\n          opt_headers_size -= 2;\n      }\n      else\n        host_field_line_size = 0; /* No \"Host:\" field line set by the client */\n    }\n  }\n\n  uri_size = c->rq.req_target_len;\n  if (MHD_HTTP_MTHD_OTHER != c->rq.http_mthd)\n    method_size = 0; /* Do not recommend shorter request method */\n  else\n  {\n    mhd_assert (NULL != c->rq.method);\n    method_size = strlen (c->rq.method);\n  }\n\n  if ((size_t) MHD_MAX_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    /* Typically the easiest way to reduce request header size is\n       a removal of some optional headers. */\n    if (opt_headers_size > (uri_size / 8))\n    {\n      if ((opt_headers_size / 2) > method_size)\n        return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n    else\n    { /* Request target is MUCH larger than headers */\n      if ((uri_size / 16) > method_size)\n        return MHD_HTTP_URI_TOO_LONG;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n  }\n  if ((size_t) MHD_MAX_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    /* If request target size if larger than maximum reasonable size\n       recommend client to reduce the request target size (length). */\n    if ((uri_size / 16) > method_size)\n      return MHD_HTTP_URI_TOO_LONG;     /* Request target is MUCH larger than headers */\n    else\n      return MHD_HTTP_NOT_IMPLEMENTED;  /* The length of the HTTP request method is unreasonably large */\n  }\n\n  /* The read buffer is too small to handle reasonably large requests */\n\n  if ((size_t) MHD_MIN_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    /* Recommend application to retry with minimal headers */\n    if ((opt_headers_size * 4) > uri_size)\n    {\n      if (opt_headers_size > method_size)\n        return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n    else\n    { /* Request target is significantly larger than headers */\n      if (uri_size > method_size * 4)\n        return MHD_HTTP_URI_TOO_LONG;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n  }\n  if ((size_t) MHD_MIN_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    /* Recommend application to retry with a shorter request target */\n    if (uri_size > method_size * 4)\n      return MHD_HTTP_URI_TOO_LONG;\n    else\n      return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n  }\n\n  if ((size_t) MHD_MIN_REASONABLE_REQ_METHOD_SIZE_ < method_size)\n  {\n    /* The request target (URI) and headers are (reasonably) very small.\n       Some non-standard long request method is used. */\n    /* The last resort response as it means \"the method is not supported\n       by the server for any URI\". */\n    return MHD_HTTP_NOT_IMPLEMENTED;\n  }\n\n  /* The almost impossible situation: all elements are small, but cannot\n     fit the buffer. The application set the buffer size to\n     critically low value? */\n\n  if ((1 < opt_headers_size) || (1 < uri_size))\n  {\n    if (opt_headers_size >= uri_size)\n      return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n    else\n      return MHD_HTTP_URI_TOO_LONG;\n  }\n\n  /* Nothing to reduce in the request.\n     Reply with some status. */\n  if (0 != host_field_line_size)\n    return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n\n  return MHD_HTTP_URI_TOO_LONG;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The mhd_assert invocations in get_no_space_err_status_code expand to ((void)0) in the provided project configuration; those statements are executed as no-op operations whose removal would not affect program behaviour, i.e. they are dead code and therefore violate MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nenum MHD_ConnectionState {\n  MHD_CONNECTION_NEW = 0,\n  MHD_CONNECTION_REQ_LINE_RECEIVED = 1,\n  MHD_CONNECTION_HEADERS_RECEIVED = 2\n};\nstruct FieldLines { char *start; size_t size; };\nstruct Request {\n  char *method;\n  size_t req_target_len;\n  int http_mthd; /* compare against MHD_HTTP_MTHD_OTHER */\n  struct FieldLines field_lines;\n};\nstatic const size_t MHD_MIN_REASONABLE_REQ_CHUNK_LINE_LENGTH_ = 4;\nstatic const size_t MHD_MAX_REASONABLE_HEADERS_SIZE_ = 8192;\nstatic const size_t MHD_MIN_REASONABLE_HEADERS_SIZE_ = 32;\nstatic const size_t MHD_MAX_REASONABLE_REQ_TARGET_SIZE_ = 16384;\nstatic const size_t MHD_MIN_REASONABLE_REQ_TARGET_SIZE_ = 64;\nstatic const size_t MHD_MIN_REASONABLE_REQ_METHOD_SIZE_ = 16;\nstatic const unsigned int MHD_HTTP_CONTENT_TOO_LARGE = 413;\nstatic const unsigned int MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE = 431;\nstatic const unsigned int MHD_HTTP_NOT_IMPLEMENTED = 501;\nstatic const unsigned int MHD_HTTP_URI_TOO_LONG = 414;\nstatic const int MHD_HTTP_MTHD_OTHER = 0;\nstatic const int MHD_HEADER_KIND = 0;\nstatic const int MHD_NO = 0;\nstatic const char MHD_HTTP_HEADER_HOST[] = \"Host\";\nstatic inline void mhd_assert (int cond)\n{\n  (void) cond; /* assertion is a no-op here to match the note in the original code */\n}\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/42.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  fprintf (f, \"\\n\");\n  va_end (ap);\n  fclose (f);\n}\n\nstatic int MHD_lookup_connection_value_n (struct MHD_Connection *c,\n                                          int kind,\n                                          const char *key,\n                                          size_t key_len,\n                                          const char **value,\n                                          size_t *value_len)\n{\n  (void) c; (void) kind; (void) key; (void) key_len; (void) value; (void) value_len;\n  return MHD_NO;\n}\nstatic unsigned int\nget_no_space_err_status_code (struct MHD_Connection *c,\n                              enum MHD_ProcRecvDataStage stage,\n                              const char *add_element,\n                              size_t add_element_size)\n{\n  size_t method_size;\n  size_t uri_size;\n  size_t opt_headers_size;\n  size_t host_field_line_size;\n\n  /* Original assertions are preserved verbatim; in the current\n     project configuration mhd_assert is defined as ((void)0) and thus\n     these statements are no-op. The logger below records the\n     control/state so the dead-code scenario can be observed. */\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVED < c->state);\n  mhd_assert (MHD_PROC_RECV_HEADERS <= stage);\n  mhd_assert ((0 == add_element_size) || (NULL != add_element));\n\n  log_probe (\"ENTER: state=%d stage=%d add_element_size=%zu read_buffer_offset=%zu\",\n             (int) c->state, (int) stage, add_element_size, c->read_buffer_offset);\n\n  if (MHD_CONNECTION_HEADERS_RECEIVED > c->state)\n  {\n    mhd_assert (NULL != c->rq.field_lines.start);\n    opt_headers_size =\n      (size_t) ((c->read_buffer + c->read_buffer_offset)\n                - c->rq.field_lines.start);\n  }\n  else\n    opt_headers_size = c->rq.field_lines.size;\n\n  log_probe (\"after opt_headers_size=%zu\", opt_headers_size);\n\n  if ((MHD_PROC_RECV_BODY_CHUNKED == stage) &&\n      (MHD_MIN_REASONABLE_REQ_CHUNK_LINE_LENGTH_ < add_element_size))\n  {\n    log_probe (\"path=chunked_small_chunk -> return=%d\", MHD_HTTP_CONTENT_TOO_LARGE);\n    return MHD_HTTP_CONTENT_TOO_LARGE;\n  }\n\n  host_field_line_size = 0;\n\n  if ((MHD_PROC_RECV_HEADERS == stage)\n      && (0 != add_element_size))\n  {\n    const size_t header_host_key_len = sizeof (MHD_HTTP_HEADER_HOST) - 1;\n    const bool is_host_header =\n      (header_host_key_len + 1 <= add_element_size)\n      && ( (0 == add_element[header_host_key_len])\n           || (':' == add_element[header_host_key_len]) )\n      && MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_HOST,\n                                        add_element,\n                                        header_host_key_len);\n    if (is_host_header)\n    {\n      const bool is_parsed = ! (\n        (MHD_CONNECTION_HEADERS_RECEIVED > c->state) &&\n        (add_element_size == c->read_buffer_offset) &&\n        (c->read_buffer == add_element) );\n      size_t actual_element_size;\n\n      mhd_assert (! is_parsed || (0 == add_element[header_host_key_len]));\n\n      if (is_parsed)\n        actual_element_size = add_element_size + 1;  /* \"1\" for LF */\n      else\n        actual_element_size = add_element_size;\n\n      host_field_line_size = actual_element_size;\n      mhd_assert (opt_headers_size >= actual_element_size);\n      opt_headers_size -= actual_element_size;\n\n      log_probe (\"found_host_header parsed=%d actual_element_size=%zu opt_headers_size=%zu\",\n                 is_parsed ? 1 : 0, actual_element_size, opt_headers_size);\n    }\n  }\n\n  if (0 == host_field_line_size)\n  {\n    const size_t host_field_name_len = sizeof (MHD_HTTP_HEADER_HOST) - 1;\n    size_t host_field_name_value_len;\n    if (MHD_NO != MHD_lookup_connection_value_n (c,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_HOST,\n                                                 host_field_name_len,\n                                                 NULL,\n                                                 &host_field_name_value_len))\n    {\n      host_field_line_size =\n        host_field_name_len + host_field_name_value_len + 2; /* \"+2\" for ':' and LF */\n\n      if (opt_headers_size >= host_field_line_size)\n      {\n        opt_headers_size -= host_field_line_size;\n        if (opt_headers_size >= 2)\n          opt_headers_size -= 2;\n      }\n      else\n        host_field_line_size = 0; /* No \"Host:\" field line set by the client */\n\n      log_probe (\"lookup_host present host_field_line_size=%zu opt_headers_size=%zu\",\n                 host_field_line_size, opt_headers_size);\n    }\n  }\n\n  uri_size = c->rq.req_target_len;\n  if (MHD_HTTP_MTHD_OTHER != c->rq.http_mthd)\n    method_size = 0; /* Do not recommend shorter request method */\n  else\n  {\n    mhd_assert (NULL != c->rq.method);\n    method_size = strlen (c->rq.method);\n  }\n\n  log_probe (\"sizes: method_size=%zu uri_size=%zu opt_headers_size=%zu host_field_line_size=%zu\",\n             method_size, uri_size, opt_headers_size, host_field_line_size);\n\n  if ((size_t) MHD_MAX_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    if (opt_headers_size > (uri_size / 8))\n    {\n      if ((opt_headers_size / 2) > method_size)\n      {\n        log_probe (\"reason=too_many_headers -> return=%d\", MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE);\n        return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n      }\n      else\n      {\n        log_probe (\"reason=huge_method_when_headers_big -> return=%d\", MHD_HTTP_NOT_IMPLEMENTED);\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n      }\n    }\n    else\n    {\n      if ((uri_size / 16) > method_size)\n      {\n        log_probe (\"reason=uri_much_larger_than_headers -> return=%d\", MHD_HTTP_URI_TOO_LONG);\n        return MHD_HTTP_URI_TOO_LONG;\n      }\n      else\n      {\n        log_probe (\"reason=huge_method_when_uri_big -> return=%d\", MHD_HTTP_NOT_IMPLEMENTED);\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n      }\n    }\n  }\n  if ((size_t) MHD_MAX_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    if ((uri_size / 16) > method_size)\n    {\n      log_probe (\"reason=uri_exceeds_max_reasonable -> return=%d\", MHD_HTTP_URI_TOO_LONG);\n      return MHD_HTTP_URI_TOO_LONG;     /* Request target is MUCH larger than headers */\n    }\n    else\n    {\n      log_probe (\"reason=huge_method_when_uri_exceeds_max -> return=%d\", MHD_HTTP_NOT_IMPLEMENTED);\n      return MHD_HTTP_NOT_IMPLEMENTED;  /* The length of the HTTP request method is unreasonably large */\n    }\n  }\n\n  if ((size_t) MHD_MIN_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    if ((opt_headers_size * 4) > uri_size)\n    {\n      if (opt_headers_size > method_size)\n      {\n        log_probe (\"reason=recommend_retry_minimal_headers -> return=%d\", MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE);\n        return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n      }\n      else\n      {\n        log_probe (\"reason=huge_method_when_headers_reasonable -> return=%d\", MHD_HTTP_NOT_IMPLEMENTED);\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n      }\n    }\n    else\n    {\n      if (uri_size > method_size * 4)\n      {\n        log_probe (\"reason=uri_significantly_larger_than_headers -> return=%d\", MHD_HTTP_URI_TOO_LONG);\n        return MHD_HTTP_URI_TOO_LONG;\n      }\n      else\n      {\n        log_probe (\"reason=huge_method_when_uri_significant -> return=%d\", MHD_HTTP_NOT_IMPLEMENTED);\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n      }\n    }\n  }\n  if ((size_t) MHD_MIN_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    if (uri_size > method_size * 4)\n    {\n      log_probe (\"reason=recommend_shorter_uri -> return=%d\", MHD_HTTP_URI_TOO_LONG);\n      return MHD_HTTP_URI_TOO_LONG;\n    }\n    else\n    {\n      log_probe (\"reason=huge_method_when_uri_min_reasonable -> return=%d\", MHD_HTTP_NOT_IMPLEMENTED);\n      return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n  }\n\n  if ((size_t) MHD_MIN_REASONABLE_REQ_METHOD_SIZE_ < method_size)\n  {\n    log_probe (\"reason=nonstandard_long_method -> return=%d\", MHD_HTTP_NOT_IMPLEMENTED);\n    return MHD_HTTP_NOT_IMPLEMENTED;\n  }\n\n  if ((1 < opt_headers_size) || (1 < uri_size))\n  {\n    if (opt_headers_size >= uri_size)\n    {\n      log_probe (\"final_compare -> return=%d\", MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE);\n      return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n    }\n    else\n    {\n      log_probe (\"final_compare -> return=%d\", MHD_HTTP_URI_TOO_LONG);\n      return MHD_HTTP_URI_TOO_LONG;\n    }\n  }\n\n  if (0 != host_field_line_size)\n  {\n    log_probe (\"nothing_to_reduce_but_host_present -> return=%d\", MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE);\n    return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n  }\n\n  log_probe (\"nothing_to_reduce -> return=%d\", MHD_HTTP_URI_TOO_LONG);\n  return MHD_HTTP_URI_TOO_LONG;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C:2023 Rule 2.2 forbids executed operations whose removal would not affect program behaviour (i.e. dead code). If, in the project configuration, mhd_assert expands to a no-op such as ((void)0) (or to an inline function that merely casts its argument to void and does nothing observable), then each mhd_assert statement is an executed no-op: removing those statements would not change observable program behaviour (provided the asserted expressions have no side effects). That matches the definition of dead code, so the reported violation is correct for that project configuration. Caveats: if the assertion macro/function actually evaluates expressions with side effects (or performs logging/termination when enabled), removing it could change behaviour and it would not be dead code. Also, projects often handle this by keeping assertions active in release builds or by documenting an approved deviation from MISRA; absent such mitigation, the report is valid."
}