{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n#include <stdio.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n#include <ctype.h>\n\n/* Minimal type definitions to make this translation standalone\n   NOTE: value.str is deliberately non-const (char *) to demonstrate\n   the 8.13 violation when assigning from a const char * source. */\nstruct _MHD_cstr_w_len\n{\n  const char *str;\n  size_t len;\n};\n\nstruct MHD_RqDAuthParam\n{\n  struct {\n    char *str; /* non-const on purpose to illustrate the issue */\n    size_t len;\n  } value;\n  bool quoted;\n};\n\nstruct MHD_RqDAuth\n{\n  struct MHD_RqDAuthParam nonce;\n  struct MHD_RqDAuthParam opaque;\n  struct MHD_RqDAuthParam response;\n  struct MHD_RqDAuthParam username;\n  struct MHD_RqDAuthParam username_ext;\n  struct MHD_RqDAuthParam realm;\n  struct MHD_RqDAuthParam uri;\n  struct MHD_RqDAuthParam qop_raw;\n  struct MHD_RqDAuthParam cnonce;\n  struct MHD_RqDAuthParam nc;\n  bool userhash;\n  int algo3;\n  int qop;\n};\n\n/* Simple assert replacement (keeps behavior but minimal) */\nstatic void mhd_assert(int cond)\n{\n  (void)cond;\n}\n\n/* Case-insensitive compare of two memory regions */\nstatic bool MHD_str_equal_caseless_bin_n_(const char *a, const char *b, size_t n)\n{\n  size_t i;\n  for (i = 0; i < n; ++i)\n  {\n    if (tolower((unsigned char)a[i]) != tolower((unsigned char)b[i]))\n      return false;\n  }\n  return true;\n}\n\nstatic bool MHD_str_equal_caseless_s_bin_n_(const char *a, const char *b, size_t n)\n{\n  /* a and b may be in either order in original uses; implement symmetric check */\n  return MHD_str_equal_caseless_bin_n_(a, b, n);\n}\n\nstatic bool MHD_str_equal_caseless_quoted_s_bin_n(const char *a, size_t a_len, const char *b)\n{\n  /* simplified: compare first a_len chars of a with b, case-insensitive */\n  size_t b_len = strlen(b);\n  if (a_len != b_len)\n    return false;\n  return MHD_str_equal_caseless_bin_n_(a, b, a_len);\n}\n\nstatic int get_rq_dauth_algo(const struct MHD_RqDAuthParam *p)\n{\n  (void)p;\n  return 0;\n}\n\nstatic int get_rq_dauth_qop(const struct MHD_RqDAuthParam *p)\n{\n  (void)p;\n  return 0;\n}\n\n/* Probe logging function: records control path and state to the requested file */\nstatic void log_probe(const char *stage,\n                      size_t i,\n                      size_t p,\n                      size_t value_start,\n                      size_t value_len,\n                      bool quoted)\n{\n  FILE *f = fopen(\"/tmp/logs/155.txt\", \"a\");\n  if (f == NULL)\n    return;\n  fprintf(f, \"stage=%s i=%zu p=%zu value_start=%zu value_len=%zu quoted=%d\\n\",\n          stage, i, p, value_start, value_len, (int)quoted);\n  fclose(f);\n}\n\n/* The instrumented parse_dauth_params function. Logic preserved; probes added\n   around the critical assignment that demonstrates storing a const-sourced\n   pointer into a non-const destination (violation scenario). */\nstatic bool\nparse_dauth_params (const char *str,\n                    const size_t str_len,\n                    struct MHD_RqDAuth *pdauth)\n{\n  /* The tokens */\n  static const struct _MHD_cstr_w_len nonce_tk = { \"nonce\", 5 };\n  static const struct _MHD_cstr_w_len opaque_tk = { \"opaque\", 6 };\n  static const struct _MHD_cstr_w_len algorithm_tk = { \"algorithm\", 9 };\n  static const struct _MHD_cstr_w_len response_tk = { \"response\", 8 };\n  static const struct _MHD_cstr_w_len username_tk = { \"username\", 8 };\n  static const struct _MHD_cstr_w_len username_ext_tk = { \"username*\", 9 };\n  static const struct _MHD_cstr_w_len realm_tk = { \"realm\", 5 };\n  static const struct _MHD_cstr_w_len uri_tk = { \"uri\", 3 };\n  static const struct _MHD_cstr_w_len qop_tk = { \"qop\", 3 };\n  static const struct _MHD_cstr_w_len cnonce_tk = { \"cnonce\", 6 };\n  static const struct _MHD_cstr_w_len nc_tk = { \"nc\", 2 };\n  static const struct _MHD_cstr_w_len userhash_tk = { \"userhash\", 8 };\n  /* The locally processed parameters */\n  struct MHD_RqDAuthParam userhash;\n  struct MHD_RqDAuthParam algorithm;\n  /* Indexes */\n  size_t i;\n  size_t p;\n  /* The list of the tokens.\n     The order of the elements matches the next array. */\n  static const struct _MHD_cstr_w_len *const tk_names[] = {\n    &nonce_tk,          /* 0 */\n    &opaque_tk,         /* 1 */\n    &algorithm_tk,      /* 2 */\n    &response_tk,       /* 3 */\n    &username_tk,       /* 4 */\n    &username_ext_tk,   /* 5 */\n    &realm_tk,          /* 6 */\n    &uri_tk,            /* 7 */\n    &qop_tk,            /* 8 */\n    &cnonce_tk,         /* 9 */\n    &nc_tk,             /* 10 */\n    &userhash_tk        /* 11 */\n  };\n  /* The list of the parameters.\n     The order of the elements matches the previous array. */\n  struct MHD_RqDAuthParam *params[sizeof(tk_names) / sizeof(tk_names[0])];\n\n  params[0 ] = &(pdauth->nonce);           /* 0 */\n  params[1 ] = &(pdauth->opaque);          /* 1 */\n  params[2 ] = &algorithm;                 /* 2 */\n  params[3 ] = &(pdauth->response);        /* 3 */\n  params[4 ] = &(pdauth->username);        /* 4 */\n  params[5 ] = &(pdauth->username_ext);    /* 5 */\n  params[6 ] = &(pdauth->realm);           /* 6 */\n  params[7 ] = &(pdauth->uri);             /* 7 */\n  params[8 ] = &(pdauth->qop_raw);         /* 8 */\n  params[9 ] = &(pdauth->cnonce);          /* 9 */\n  params[10] = &(pdauth->nc);              /* 10 */\n  params[11] = &userhash;                  /* 11 */\n\n  mhd_assert ((sizeof(tk_names) / sizeof(tk_names[0])) == \\\n              (sizeof(params) / sizeof(params[0])));\n  memset (&userhash, 0, sizeof(userhash));\n  memset (&algorithm, 0, sizeof(algorithm));\n  i = 0;\n\n  /* Skip all whitespaces at start */\n  while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n    i++;\n\n  while (str_len > i)\n  {\n    size_t left;\n    mhd_assert (' ' != str[i]);\n    mhd_assert ('\\t' != str[i]);\n\n    left = str_len - i;\n    if ('=' == str[i])\n      return false; /* The equal sign is not allowed as the first character */\n    for (p = 0; p < (sizeof(tk_names) / sizeof(tk_names[0])); ++p)\n    {\n      const struct _MHD_cstr_w_len *const tk_name = tk_names[p];\n      struct MHD_RqDAuthParam *const param = params[p];\n      if ( (tk_name->len <= left) &&\n           MHD_str_equal_caseless_bin_n_(str + i, tk_name->str,\n                                          tk_name->len) &&\n           ((tk_name->len == left) ||\n            ('=' == str[i + tk_name->len]) ||\n            (' ' == str[i + tk_name->len]) ||\n            ('\\t' == str[i + tk_name->len]) ||\n            (',' == str[i + tk_name->len]) ||\n            (';' == str[i + tk_name->len])) )\n      {\n        size_t value_start;\n        size_t value_len;\n        bool quoted; /* Only mark as \"quoted\" if backslash-escape used */\n\n        if (tk_name->len == left)\n          return false; /* No equal sign after parameter name, broken data */\n\n        quoted = false;\n        i += tk_name->len;\n        /* Skip all whitespaces before '=' */\n        while (str_len > i && (' ' == str[i] || '\\t' == str[i]))\n          i++;\n        if ((i == str_len) || ('=' != str[i]))\n          return false; /* No equal sign, broken data */\n        i++;\n        /* Skip all whitespaces after '=' */\n        while (str_len > i && (' ' == str[i] || '\\t' == str[i]))\n          i++;\n        if ((str_len > i) && ('\"' == str[i]))\n        { /* Value is in quotation marks */\n          i++; /* Advance after the opening quote */\n          value_start = i;\n          while (str_len > i && '\"' != str[i])\n          {\n            if ('\\\\' == str[i])\n            {\n              i++;\n              quoted = true; /* Have escaped chars */\n            }\n            if (0 == str[i])\n              return false; /* Binary zero in parameter value */\n            i++;\n          }\n          if (str_len <= i)\n            return false; /* No closing quote */\n          mhd_assert ('\"' == str[i]);\n          value_len = i - value_start;\n          i++; /* Advance after the closing quote */\n        }\n        else\n        {\n          value_start = i;\n          while (str_len > i && ',' != str[i] &&\n                 ' ' != str[i] && '\\t' != str[i] && ';' != str[i])\n          {\n            if (0 == str[i])\n              return false;  /* Binary zero in parameter value */\n            i++;\n          }\n          if (';' == str[i])\n            return false;  /* Semicolon in parameter value */\n          value_len = i - value_start;\n        }\n        /* Skip all whitespaces after parameter value */\n        while (str_len > i && (' ' == str[i] || '\\t' == str[i]))\n          i++;\n        if ((str_len > i) && (',' != str[i]))\n          return false; /* Garbage after parameter value */\n\n        /* Have valid parameter name and value */\n        mhd_assert (! quoted || 0 != value_len);\n\n        /* Probe: log state right before storing pointer into param->value.str */\n        log_probe(\"pre_assign\", i, p, value_start, value_len, quoted);\n\n        /* The assignment that demonstrates the issue: storing a pointer\n           derived from a const char * (str) into a non-const char * field. */\n        param->value.str = (char *)(str + value_start);\n        param->value.len = value_len;\n        param->quoted = quoted;\n\n        /* Probe: log state after assignment */\n        log_probe(\"post_assign\", i, p, (size_t)(param->value.str - str), param->value.len, param->quoted);\n\n        break; /* Found matching parameter name */\n      }\n    }\n    if (p == (sizeof(tk_names) / sizeof(tk_names[0])))\n    {\n      /* No matching parameter name */\n      while (str_len > i && ',' != str[i])\n      {\n        if ((0 == str[i]) || (';' == str[i]))\n          return false; /* Not allowed characters */\n        if ('\"' == str[i])\n        { /* Skip quoted part */\n          i++; /* Advance after the opening quote */\n          while (str_len > i && '\"' != str[i])\n          {\n            if (0 == str[i])\n              return false;  /* Binary zero is not allowed */\n            if ('\\\\' == str[i])\n              i++;           /* Skip escaped char */\n            i++;\n          }\n          if (str_len <= i)\n            return false; /* No closing quote */\n          mhd_assert ('\"' == str[i]);\n        }\n        i++;\n      }\n    }\n    mhd_assert (str_len == i || ',' == str[i]);\n    if (str_len > i)\n      i++; /* Advance after ',' */\n    /* Skip all whitespaces before next parameter name */\n    while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n      i++;\n  }\n\n  /* Postprocess values */\n\n  if (NULL != userhash.value.str)\n  {\n    if (userhash.quoted)\n      pdauth->userhash =\n        MHD_str_equal_caseless_quoted_s_bin_n (userhash.value.str, \\\n                                               userhash.value.len, \\\n                                               \"true\");\n    else\n      pdauth->userhash =\n        MHD_str_equal_caseless_s_bin_n_ (\"true\", userhash.value.str, \\\n                                         userhash.value.len);\n\n  }\n  else\n    pdauth->userhash = false;\n\n  pdauth->algo3 = get_rq_dauth_algo (&algorithm);\n  pdauth->qop = get_rq_dauth_qop (&pdauth->qop_raw);\n\n  return true;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nFailed to parse the test code.\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of parse_dauth_params as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <string.h>\n#include <ctype.h>\n\n/* Minimal type definitions to make this translation standalone\n   NOTE: value.str is deliberately non-const (char *) to demonstrate\n   the 8.13 violation when assigning from a const char * source. */\nstruct _MHD_cstr_w_len\n{\n  const char *str;\n  size_t len;\n};\n\nstruct MHD_RqDAuthParam\n{\n  struct {\n    char *str; /* non-const on purpose to illustrate the issue */\n    size_t len;\n  } value;\n  bool quoted;\n};\n\nstruct MHD_RqDAuth\n{\n  struct MHD_RqDAuthParam nonce;\n  struct MHD_RqDAuthParam opaque;\n  struct MHD_RqDAuthParam response;\n  struct MHD_RqDAuthParam username;\n  struct MHD_RqDAuthParam username_ext;\n  struct MHD_RqDAuthParam realm;\n  struct MHD_RqDAuthParam uri;\n  struct MHD_RqDAuthParam qop_raw;\n  struct MHD_RqDAuthParam cnonce;\n  struct MHD_RqDAuthParam nc;\n  bool userhash;\n  int algo3;\n  int qop;\n};\n\n/* Simple assert replacement (keeps behavior but minimal) */\nstatic void mhd_assert(int cond)\n{\n  (void)cond;\n}\n\n/* Case-insensitive compare of two memory regions */\nstatic bool MHD_str_equal_caseless_bin_n_(const char *a, const char *b, size_t n)\n{\n  size_t i;\n  for (i = 0; i < n; ++i)\n  {\n    if (tolower((unsigned char)a[i]) != tolower((unsigned char)b[i]))\n      return false;\n  }\n  return true;\n}\n\nstatic bool MHD_str_equal_caseless_s_bin_n_(const char *a, const char *b, size_t n)\n{\n  /* a and b may be in either order in original uses; implement symmetric check */\n  return MHD_str_equal_caseless_bin_n_(a, b, n);\n}\n\nstatic bool MHD_str_equal_caseless_quoted_s_bin_n(const char *a, size_t a_len, const char *b)\n{\n  /* simplified: compare first a_len chars of a with b, case-insensitive */\n  size_t b_len = strlen(b);\n  if (a_len != b_len)\n    return false;\n  return MHD_str_equal_caseless_bin_n_(a, b, a_len);\n}\n\nstatic int get_rq_dauth_algo(const struct MHD_RqDAuthParam *p)\n{\n  (void)p;\n  return 0;\n}\n\nstatic int get_rq_dauth_qop(const struct MHD_RqDAuthParam *p)\n{\n  (void)p;\n  return 0;\n}\n\n/* Probe logging function: records control path and state to the requested file */\nstatic void log_probe(const char *stage,\n                      size_t i,\n                      size_t p,\n                      size_t value_start,\n                      size_t value_len,\n                      bool quoted)\n{\n  FILE *f = fopen(\"/tmp/logs/155.txt\", \"a\");\n  if (f == NULL)\n    return;\n  fprintf(f, \"stage=%s i=%zu p=%zu value_start=%zu value_len=%zu quoted=%d\\n\",\n          stage, i, p, value_start, value_len, (int)quoted);\n  fclose(f);\n}\n\n/* The instrumented parse_dauth_params function. Logic preserved; probes added\n   around the critical assignment that demonstrates storing a const-sourced\n   pointer into a non-const destination (violation scenario). */\nstatic bool\nparse_dauth_params (const char *str,\n                    const size_t str_len,\n                    struct MHD_RqDAuth *pdauth)\n{\n  /* The tokens */\n  static const struct _MHD_cstr_w_len nonce_tk = { \"nonce\", 5 };\n  static const struct _MHD_cstr_w_len opaque_tk = { \"opaque\", 6 };\n  static const struct _MHD_cstr_w_len algorithm_tk = { \"algorithm\", 9 };\n  static const struct _MHD_cstr_w_len response_tk = { \"response\", 8 };\n  static const struct _MHD_cstr_w_len username_tk = { \"username\", 8 };\n  static const struct _MHD_cstr_w_len username_ext_tk = { \"username*\", 9 };\n  static const struct _MHD_cstr_w_len realm_tk = { \"realm\", 5 };\n  static const struct _MHD_cstr_w_len uri_tk = { \"uri\", 3 };\n  static const struct _MHD_cstr_w_len qop_tk = { \"qop\", 3 };\n  static const struct _MHD_cstr_w_len cnonce_tk = { \"cnonce\", 6 };\n  static const struct _MHD_cstr_w_len nc_tk = { \"nc\", 2 };\n  static const struct _MHD_cstr_w_len userhash_tk = { \"userhash\", 8 };\n  /* The locally processed parameters */\n  struct MHD_RqDAuthParam userhash;\n  struct MHD_RqDAuthParam algorithm;\n  /* Indexes */\n  size_t i;\n  size_t p;\n  /* The list of the tokens.\n     The order of the elements matches the next array. */\n  static const struct _MHD_cstr_w_len *const tk_names[] = {\n    &nonce_tk,          /* 0 */\n    &opaque_tk,         /* 1 */\n    &algorithm_tk,      /* 2 */\n    &response_tk,       /* 3 */\n    &username_tk,       /* 4 */\n    &username_ext_tk,   /* 5 */\n    &realm_tk,          /* 6 */\n    &uri_tk,            /* 7 */\n    &qop_tk,            /* 8 */\n    &cnonce_tk,         /* 9 */\n    &nc_tk,             /* 10 */\n    &userhash_tk        /* 11 */\n  };\n  /* The list of the parameters.\n     The order of the elements matches the previous array. */\n  struct MHD_RqDAuthParam *params[sizeof(tk_names) / sizeof(tk_names[0])];\n\n  params[0 ] = &(pdauth->nonce);           /* 0 */\n  params[1 ] = &(pdauth->opaque);          /* 1 */\n  params[2 ] = &algorithm;                 /* 2 */\n  params[3 ] = &(pdauth->response);        /* 3 */\n  params[4 ] = &(pdauth->username);        /* 4 */\n  params[5 ] = &(pdauth->username_ext);    /* 5 */\n  params[6 ] = &(pdauth->realm);           /* 6 */\n  params[7 ] = &(pdauth->uri);             /* 7 */\n  params[8 ] = &(pdauth->qop_raw);         /* 8 */\n  params[9 ] = &(pdauth->cnonce);          /* 9 */\n  params[10] = &(pdauth->nc);              /* 10 */\n  params[11] = &userhash;                  /* 11 */\n\n  mhd_assert ((sizeof(tk_names) / sizeof(tk_names[0])) ==\n              (sizeof(params) / sizeof(params[0])));\n  memset (&userhash, 0, sizeof(userhash));\n  memset (&algorithm, 0, sizeof(algorithm));\n  i = 0;\n\n  /* Skip all whitespaces at start */\n  while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n    i++;\n\n  while (str_len > i)\n  {\n    size_t left;\n    mhd_assert (' ' != str[i]);\n    mhd_assert ('\\t' != str[i]);\n\n    left = str_len - i;\n    if ('=' == str[i])\n      return false; /* The equal sign is not allowed as the first character */\n    for (p = 0; p < (sizeof(tk_names) / sizeof(tk_names[0])); ++p)\n    {\n      const struct _MHD_cstr_w_len *const tk_name = tk_names[p];\n      struct MHD_RqDAuthParam *const param = params[p];\n      if ( (tk_name->len <= left) &&\n           MHD_str_equal_caseless_bin_n_(str + i, tk_name->str,\n                                          tk_name->len) &&\n           ((tk_name->len == left) ||\n            ('=' == str[i + tk_name->len]) ||\n            (' ' == str[i + tk_name->len]) ||\n            ('\\t' == str[i + tk_name->len]) ||\n            (',' == str[i + tk_name->len]) ||\n            (';' == str[i + tk_name->len])) )\n      {\n        size_t value_start;\n        size_t value_len;\n        bool quoted; /* Only mark as \"quoted\" if backslash-escape used */\n\n        if (tk_name->len == left)\n          return false; /* No equal sign after parameter name, broken data */\n\n        quoted = false;\n        i += tk_name->len;\n        /* Skip all whitespaces before '=' */\n        while (str_len > i && (' ' == str[i] || '\\t' == str[i]))\n          i++;\n        if ((i == str_len) || ('=' != str[i]))\n          return false; /* No equal sign, broken data */\n        i++;\n        /* Skip all whitespaces after '=' */\n        while (str_len > i && (' ' == str[i] || '\\t' == str[i]))\n          i++;\n        if ((str_len > i) && ('\"' == str[i]))\n        { /* Value is in quotation marks */\n          i++; /* Advance after the opening quote */\n          value_start = i;\n          while (str_len > i && '\"' != str[i])\n          {\n            if ('\\\\' == str[i])\n            {\n              i++;\n              quoted = true; /* Have escaped chars */\n            }\n            if (0 == str[i])\n              return false; /* Binary zero in parameter value */\n            i++;\n          }\n          if (str_len <= i)\n            return false; /* No closing quote */\n          mhd_assert ('\"' == str[i]);\n          value_len = i - value_start;\n          i++; /* Advance after the closing quote */\n        }\n        else\n        {\n          value_start = i;\n          while (str_len > i && ',' != str[i] &&\n                 ' ' != str[i] && '\\t' != str[i] && ';' != str[i])\n          {\n            if (0 == str[i])\n              return false;  /* Binary zero in parameter value */\n            i++;\n          }\n          if (';' == str[i])\n            return false;  /* Semicolon in parameter value */\n          value_len = i - value_start;\n        }\n        /* Skip all whitespaces after parameter value */\n        while (str_len > i && (' ' == str[i] || '\\t' == str[i]))\n          i++;\n        if ((str_len > i) && (',' != str[i]))\n          return false; /* Garbage after parameter value */\n\n        /* Have valid parameter name and value */\n        mhd_assert (! quoted || 0 != value_len);\n\n        /* Probe: log state right before storing pointer into param->value.str */\n        log_probe(\"pre_assign\", i, p, value_start, value_len, quoted);\n\n        /* The assignment that demonstrates the issue: storing a pointer\n           derived from a const char * (str) into a non-const char * field. */\n        param->value.str = (char *)(str + value_start);\n        param->value.len = value_len;\n        param->quoted = quoted;\n\n        /* Probe: log state after assignment */\n        log_probe(\"post_assign\", i, p, (size_t)(param->value.str - str), param->value.len, param->quoted);\n\n        break; /* Found matching parameter name */\n      }\n    }\n    if (p == (sizeof(tk_names) / sizeof(tk_names[0])))\n    {\n      /* No matching parameter name */\n      while (str_len > i && ',' != str[i])\n      {\n        if ((0 == str[i]) || (';' == str[i]))\n          return false; /* Not allowed characters */\n        if ('\"' == str[i])\n        { /* Skip quoted part */\n          i++; /* Advance after the opening quote */\n          while (str_len > i && '\"' != str[i])\n          {\n            if (0 == str[i])\n              return false;  /* Binary zero is not allowed */\n            if ('\\\\' == str[i])\n              i++;           /* Skip escaped char */\n            i++;\n          }\n          if (str_len <= i)\n            return false; /* No closing quote */\n          mhd_assert ('\"' == str[i]);\n        }\n        i++;\n      }\n    }\n    mhd_assert (str_len == i || ',' == str[i]);\n    if (str_len > i)\n      i++; /* Advance after ',' */\n    /* Skip all whitespaces before next parameter name */\n    while (i < str_len && (' ' == str[i] || '\\t' == str[i]))\n      i++;\n  }\n\n  /* Postprocess values */\n\n  if (NULL != userhash.value.str)\n  {\n    if (userhash.quoted)\n      pdauth->userhash =\n        MHD_str_equal_caseless_quoted_s_bin_n (userhash.value.str,\n                                               userhash.value.len,\n                                               \"true\");\n    else\n      pdauth->userhash =\n        MHD_str_equal_caseless_s_bin_n_ (\"true\", userhash.value.str,\n                                         userhash.value.len);\n\n  }\n  else\n    pdauth->userhash = false;\n\n  pdauth->algo3 = get_rq_dauth_algo (&algorithm);\n  pdauth->qop = get_rq_dauth_qop (&pdauth->qop_raw);\n\n  return true;\n}\n",
  "explanation": "Removed stray line-continuation backslashes that caused the source to be parsed incorrectly. The code logic is unchanged; only multi-line continuations were rewritten as normal multi-line expressions so the file is valid C and compiles successfully."
}