{
  "user_message": "An agent A claimed that the following add_new_user_entry code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of add_new_user_entry.\n```c\nstatic int\nadd_new_user_entry (const char *const username,\n                    const char *const password,\n                    const char *const realm,\n                    int allow_area_1,\n                    int allow_area_2)\n{\n  struct UserEntry *entry;\n  enum MHD_Result res;\n\n  if ((sizeof(user_ids) / sizeof(user_ids[0])) <= user_ids_used)\n    return 0; /* No more space to add new entry */\n\n  entry = user_ids + user_ids_used;\n\n  entry->username = username;\n  entry->realm = realm;\n\n  res = MHD_YES;\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                         username,\n                                         realm,\n                                         entry->userhash_md5,\n                                         sizeof(entry->userhash_md5));\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_md5,\n                                           sizeof(entry->userdigest_md5));\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha256,\n                                         sizeof(entry->userhash_sha256));\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_sha256,\n                                           sizeof(entry->userdigest_sha256));\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha512_256,\n                                         sizeof(entry->userhash_sha512_256));\n  if (MHD_NO != res)\n    res =\n      MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                       username,\n                                       realm,\n                                       password,\n                                       entry->userdigest_sha512_256,\n                                       sizeof(entry->userdigest_sha512_256));\n\n  if (MHD_NO == res)\n    return 0; /* Failure exit point */\n\n  entry->allow_area_1 = allow_area_1;\n  entry->allow_area_2 = allow_area_2;\n\n  user_ids_used++;\n\n  return ! 0;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The initialization 'res = MHD_YES;' is immediately followed by the test 'if (MHD_NO != res)'; because res is set to MHD_YES directly before the test, that comparison is always true. The evaluation of that comparison and its condition is therefore an executed operation whose removal would not affect program behaviour (the guarded call would still be executed). This constitutes dead code under MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nextern enum MHD_Result\nMHD_digest_auth_calc_userhash (enum MHD_DigestAuthAlgo3 algo3,\n                               const char *username,\n                               const char *realm,\n                               void *out,\n                               size_t outlen);\nextern enum MHD_Result\nMHD_digest_auth_calc_userdigest (enum MHD_DigestAuthAlgo3 algo3,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 void *out,\n                                 size_t outlen);\n\nstatic int\nadd_new_user_entry (const char *const username,\n                    const char *const password,\n                    const char *const realm,\n                    int allow_area_1,\n                    int allow_area_2)\n{\n  struct UserEntry *entry;\n  enum MHD_Result res;\n  FILE *fp = fopen(\"/tmp/logs/330.txt\", \"a\");\n\n  if ((sizeof(user_ids) / sizeof(user_ids[0])) <= user_ids_used)\n  {\n    if (fp != NULL)\n    {\n      fprintf(fp, \"add_new_user_entry: no space (user_ids_used=%zu)\\n\", user_ids_used);\n      fclose(fp);\n    }\n    return 0; /* No more space to add new entry */\n  }\n\n  entry = user_ids + user_ids_used;\n\n  entry->username = username;\n  entry->realm = realm;\n\n  /* Original initialization preserved */\n  res = MHD_YES;\n\n  if (fp != NULL)\n  {\n    fprintf(fp, \"add_new_user_entry: initialized res=MHD_YES (%d)\\n\", (int)res);\n  }\n\n  /* --- Violation demonstration: the very next test is always true because\n         res was just set to MHD_YES. Evaluating that condition is an\n         executed operation whose removal would not change behaviour. --- */\n  if (MHD_NO != res)\n  {\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: entering MD5 userhash calc (res before=%d)\\n\", (int)res);\n\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                         username,\n                                         realm,\n                                         entry->userhash_md5,\n                                         sizeof(entry->userhash_md5));\n\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: returned from MD5 userhash calc (res now=%d)\\n\", (int)res);\n  }\n  else\n  {\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: skipped MD5 userhash calc because res==MHD_NO\\n\");\n  }\n\n  if (MHD_NO != res)\n  {\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: entering MD5 userdigest calc (res before=%d)\\n\", (int)res);\n\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_md5,\n                                           sizeof(entry->userdigest_md5));\n\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: returned from MD5 userdigest calc (res now=%d)\\n\", (int)res);\n  }\n\n  if (MHD_NO != res)\n  {\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: entering SHA256 userhash calc (res before=%d)\\n\", (int)res);\n\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha256,\n                                         sizeof(entry->userhash_sha256));\n\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: returned from SHA256 userhash calc (res now=%d)\\n\", (int)res);\n  }\n\n  if (MHD_NO != res)\n  {\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: entering SHA256 userdigest calc (res before=%d)\\n\", (int)res);\n\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_sha256,\n                                           sizeof(entry->userdigest_sha256));\n\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: returned from SHA256 userdigest calc (res now=%d)\\n\", (int)res);\n  }\n\n  if (MHD_NO != res)\n  {\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: entering SHA512_256 userhash calc (res before=%d)\\n\", (int)res);\n\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha512_256,\n                                         sizeof(entry->userhash_sha512_256));\n\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: returned from SHA512_256 userhash calc (res now=%d)\\n\", (int)res);\n  }\n\n  if (MHD_NO != res)\n  {\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: entering SHA512_256 userdigest calc (res before=%d)\\n\", (int)res);\n\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_sha512_256,\n                                           sizeof(entry->userdigest_sha512_256));\n\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: returned from SHA512_256 userdigest calc (res now=%d)\\n\", (int)res);\n  }\n\n  if (MHD_NO == res)\n  {\n    if (fp != NULL)\n    {\n      fprintf(fp, \"add_new_user_entry: failure (res==MHD_NO) -- aborting\\n\");\n      fclose(fp);\n    }\n    return 0; /* Failure exit point */\n  }\n\n  entry->allow_area_1 = allow_area_1;\n  entry->allow_area_2 = allow_area_2;\n\n  user_ids_used++;\n\n  if (fp != NULL)\n  {\n    fprintf(fp, \"add_new_user_entry: success (user_ids_used now=%zu)\\n\", user_ids_used);\n    fclose(fp);\n  }\n\n  return ! 0;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In the original function res is unconditionally set to MHD_YES immediately before the test if (MHD_NO != res). That test therefore always evaluates to true at that program point, so the comparison and the conditional decision are executed operations whose removal (i.e. making the call unconditional) would not change program behaviour. That meets the definition of dead code in MISRA C:2023 Rule 2.2. (The subsequent checks that depend on res are not dead; only the first comparison immediately after the unconditional assignment is redundant.) The added logging test code and its build failure do not change that logical observation. Recommendation: remove the redundant test (call unconditionally) or restructure so res is not assigned immediately before the check if the intent is to keep the conditional form.)"
}