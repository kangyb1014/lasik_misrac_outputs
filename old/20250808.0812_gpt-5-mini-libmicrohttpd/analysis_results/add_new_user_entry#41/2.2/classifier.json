{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified add_new_user_entry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/330.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of add_new_user_entry as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of add_new_user_entry:\n```c\nstatic int\nadd_new_user_entry (const char *const username,\n                    const char *const password,\n                    const char *const realm,\n                    int allow_area_1,\n                    int allow_area_2)\n{\n  struct UserEntry *entry;\n  enum MHD_Result res;\n\n  if ((sizeof(user_ids) / sizeof(user_ids[0])) <= user_ids_used)\n    return 0; /* No more space to add new entry */\n\n  entry = user_ids + user_ids_used;\n\n  entry->username = username;\n  entry->realm = realm;\n\n  res = MHD_YES;\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                         username,\n                                         realm,\n                                         entry->userhash_md5,\n                                         sizeof(entry->userhash_md5));\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_md5,\n                                           sizeof(entry->userdigest_md5));\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha256,\n                                         sizeof(entry->userhash_sha256));\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_sha256,\n                                           sizeof(entry->userdigest_sha256));\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha512_256,\n                                         sizeof(entry->userhash_sha512_256));\n  if (MHD_NO != res)\n    res =\n      MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                       username,\n                                       realm,\n                                       password,\n                                       entry->userdigest_sha512_256,\n                                       sizeof(entry->userdigest_sha512_256));\n\n  if (MHD_NO == res)\n    return 0; /* Failure exit point */\n\n  entry->allow_area_1 = allow_area_1;\n  entry->allow_area_2 = allow_area_2;\n\n  user_ids_used++;\n\n  return ! 0;\n}\n```\n</target_code>\nJudge whether the above add_new_user_entry code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "The initialization 'res = MHD_YES;' is immediately followed by the test 'if (MHD_NO != res)'; because res is set to MHD_YES directly before the test, that comparison is always true. The evaluation of that comparison and its condition is therefore an executed operation whose removal would not affect program behaviour (the guarded call would still be executed). This constitutes dead code under MISRA C 2023 Rule 2.2.",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Minimal declarations to allow compilation of this translation unit. */\n\nenum MHD_Result { MHD_NO = 0, MHD_YES = 1 };\n\n/* Algorithm identifiers used in the original code. */\nenum { MHD_DIGEST_AUTH_ALGO3_MD5 = 0,\n       MHD_DIGEST_AUTH_ALGO3_SHA256 = 1,\n       MHD_DIGEST_AUTH_ALGO3_SHA512_256 = 2 };\n\nstruct UserEntry\n{\n  const char *username;\n  const char *realm;\n  char userhash_md5[64];\n  char userdigest_md5[64];\n  char userhash_sha256[64];\n  char userdigest_sha256[64];\n  char userhash_sha512_256[64];\n  char userdigest_sha512_256[64];\n  int allow_area_1;\n  int allow_area_2;\n};\n\n/* Assume storage is defined elsewhere in the project. Provide an extern\n   array with a compile-time size so the sizeof(user_ids) expression works. */\nextern struct UserEntry user_ids[100];\nextern size_t user_ids_used;\n\n/* Prototypes for external functions used by the original function. These are\n   only declarations (no mock implementations are provided here). */\nextern enum MHD_Result\nMHD_digest_auth_calc_userhash (int algo,\n                               const char *username,\n                               const char *realm,\n                               char *out,\n                               size_t outlen);\n\nextern enum MHD_Result\nMHD_digest_auth_calc_userdigest (int algo,\n                                 const char *username,\n                                 const char *realm,\n                                 const char *password,\n                                 char *out,\n                                 size_t outlen);\n\n/* Modified add_new_user_entry with runtime logging to \"/tmp/logs/330.txt\".\n   The original logic is preserved; logging is added to demonstrate the\n   violation scenario (the comparison immediately after assigning res is\n   always true). */\nstatic int\nadd_new_user_entry (const char *const username,\n                    const char *const password,\n                    const char *const realm,\n                    int allow_area_1,\n                    int allow_area_2)\n{\n  struct UserEntry *entry;\n  enum MHD_Result res;\n  FILE *fp = fopen(\"/tmp/logs/330.txt\", \"a\");\n\n  if ((sizeof(user_ids) / sizeof(user_ids[0])) <= user_ids_used)\n  {\n    if (fp != NULL)\n    {\n      fprintf(fp, \"add_new_user_entry: no space (user_ids_used=%zu)\\n\", user_ids_used);\n      fclose(fp);\n    }\n    return 0; /* No more space to add new entry */\n  }\n\n  entry = user_ids + user_ids_used;\n\n  entry->username = username;\n  entry->realm = realm;\n\n  /* Original initialization preserved */\n  res = MHD_YES;\n\n  if (fp != NULL)\n  {\n    fprintf(fp, \"add_new_user_entry: initialized res=MHD_YES (%d)\\n\", (int)res);\n  }\n\n  /* --- Violation demonstration: the very next test is always true because\n         res was just set to MHD_YES. Evaluating that condition is an\n         executed operation whose removal would not change behaviour. --- */\n  if (MHD_NO != res)\n  {\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: entering MD5 userhash calc (res before=%d)\\n\", (int)res);\n\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                         username,\n                                         realm,\n                                         entry->userhash_md5,\n                                         sizeof(entry->userhash_md5));\n\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: returned from MD5 userhash calc (res now=%d)\\n\", (int)res);\n  }\n  else\n  {\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: skipped MD5 userhash calc because res==MHD_NO\\n\");\n  }\n\n  if (MHD_NO != res)\n  {\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: entering MD5 userdigest calc (res before=%d)\\n\", (int)res);\n\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_md5,\n                                           sizeof(entry->userdigest_md5));\n\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: returned from MD5 userdigest calc (res now=%d)\\n\", (int)res);\n  }\n\n  if (MHD_NO != res)\n  {\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: entering SHA256 userhash calc (res before=%d)\\n\", (int)res);\n\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha256,\n                                         sizeof(entry->userhash_sha256));\n\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: returned from SHA256 userhash calc (res now=%d)\\n\", (int)res);\n  }\n\n  if (MHD_NO != res)\n  {\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: entering SHA256 userdigest calc (res before=%d)\\n\", (int)res);\n\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_sha256,\n                                           sizeof(entry->userdigest_sha256));\n\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: returned from SHA256 userdigest calc (res now=%d)\\n\", (int)res);\n  }\n\n  if (MHD_NO != res)\n  {\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: entering SHA512_256 userhash calc (res before=%d)\\n\", (int)res);\n\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha512_256,\n                                         sizeof(entry->userhash_sha512_256));\n\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: returned from SHA512_256 userhash calc (res now=%d)\\n\", (int)res);\n  }\n\n  if (MHD_NO != res)\n  {\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: entering SHA512_256 userdigest calc (res before=%d)\\n\", (int)res);\n\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_sha512_256,\n                                           sizeof(entry->userdigest_sha512_256));\n\n    if (fp != NULL)\n      fprintf(fp, \"add_new_user_entry: returned from SHA512_256 userdigest calc (res now=%d)\\n\", (int)res);\n  }\n\n  if (MHD_NO == res)\n  {\n    if (fp != NULL)\n    {\n      fprintf(fp, \"add_new_user_entry: failure (res==MHD_NO) -- aborting\\n\");\n      fclose(fp);\n    }\n    return 0; /* Failure exit point */\n  }\n\n  entry->allow_area_1 = allow_area_1;\n  entry->allow_area_2 = allow_area_2;\n\n  user_ids_used++;\n\n  if (fp != NULL)\n  {\n    fprintf(fp, \"add_new_user_entry: success (user_ids_used now=%zu)\\n\", user_ids_used);\n    fclose(fp);\n  }\n\n  return ! 0;\n}\n"
}