{
  "user_message": "Target function code is:\n```c\nstatic int\nadd_new_user_entry (const char *const username,\n                    const char *const password,\n                    const char *const realm,\n                    int allow_area_1,\n                    int allow_area_2)\n{\n  struct UserEntry *entry;\n  enum MHD_Result res;\n\n  if ((sizeof(user_ids) / sizeof(user_ids[0])) <= user_ids_used)\n    return 0; /* No more space to add new entry */\n\n  entry = user_ids + user_ids_used;\n\n  entry->username = username;\n  entry->realm = realm;\n\n  res = MHD_YES;\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                         username,\n                                         realm,\n                                         entry->userhash_md5,\n                                         sizeof(entry->userhash_md5));\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_MD5,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_md5,\n                                           sizeof(entry->userdigest_md5));\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha256,\n                                         sizeof(entry->userhash_sha256));\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA256,\n                                           username,\n                                           realm,\n                                           password,\n                                           entry->userdigest_sha256,\n                                           sizeof(entry->userdigest_sha256));\n\n  if (MHD_NO != res)\n    res = MHD_digest_auth_calc_userhash (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                         username,\n                                         realm,\n                                         entry->userhash_sha512_256,\n                                         sizeof(entry->userhash_sha512_256));\n  if (MHD_NO != res)\n    res =\n      MHD_digest_auth_calc_userdigest (MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n                                       username,\n                                       realm,\n                                       password,\n                                       entry->userdigest_sha512_256,\n                                       sizeof(entry->userdigest_sha512_256));\n\n  if (MHD_NO == res)\n    return 0; /* Failure exit point */\n\n  entry->allow_area_1 = allow_area_1;\n  entry->allow_area_2 = allow_area_2;\n\n  user_ids_used++;\n\n  return ! 0;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'add_new_user_entry': {'callees': ['MHD_digest_auth_calc_userhash', 'MHD_digest_auth_calc_userdigest'], 'callers': ['add_new_users']}, 'MHD_digest_auth_calc_userhash': {'callees': ['digest_init_one_time', 'get_base_digest_algo', 'digest_get_size', 'calc_userhash'], 'callers': ['MHD_digest_auth_calc_userhash_hex', 'add_new_user_entry']}, 'MHD_digest_auth_calc_userdigest': {'callees': ['digest_init_one_time', 'get_base_digest_algo', 'digest_get_size', 'calc_userdigest'], 'callers': ['add_new_user_entry']}, 'add_new_users': {'callees': ['add_new_user_entry'], 'callers': ['main']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct UserEntry",
    "user_ids",
    "user_ids_used",
    "enum MHD_Result",
    "MHD_YES",
    "MHD_NO",
    "MHD_DIGEST_AUTH_ALGO3_MD5",
    "MHD_DIGEST_AUTH_ALGO3_SHA256",
    "MHD_DIGEST_AUTH_ALGO3_SHA512_256",
    "MHD_digest_auth_calc_userhash (prototype)",
    "MHD_digest_auth_calc_userdigest (prototype)"
  ],
  "explanation": "To determine whether add_new_user_entry uses any compiler/language extensions you must inspect the declarations and definitions of all externally referenced symbols and macros that could hide extensions or nonstandard constructs:\n\n- struct UserEntry: The struct definition may contain nonstandard features (packed/aligned attributes, bit-fields with implementation-defined widths, flexible-array members, anonymous structs/unions, or GCC/Clang __attribute__ annotations). These would be language or compiler extensions that affect whether the code violates the MISRA prohibition on extensions.\n\n- user_ids: The array definition may use nonstandard storage-class attributes, section placement, variable-length arrays at file scope, or other compiler-specific declarations \u2014 inspect its declaration.\n\n- user_ids_used: Its type or declaration may use atomic/volatile qualifiers, unusual typedefs or attributes; its storage semantics could be defined with extensions.\n\n- enum MHD_Result: The enum declaration could include bit-twiddling, explicit underlying type via an extension, or attributes/macros altering its definition.\n\n- MHD_YES and MHD_NO: These macros/enum constants might be implemented via compiler-specific constructs (e.g. ({ ... }) statement expressions, casts to compiler-specific types, or macro tricks). Verify their definitions for extension usage.\n\n- MHD_DIGEST_AUTH_ALGO3_MD5, MHD_DIGEST_AUTH_ALGO3_SHA256, MHD_DIGEST_AUTH_ALGO3_SHA512_256: These constants/macros may expand to nonstandard expressions, annotated values, or use extension-specific suffixes/attributes. Confirm their definitions.\n\n- MHD_digest_auth_calc_userhash (prototype) and MHD_digest_auth_calc_userdigest (prototype): The function declarations can carry compiler-specific attributes (calling-convention attributes, __attribute__ annotations, varargs, inline asm in prototypes, nonstandard parameter/return types). Their signatures and any attached attributes must be checked to ensure no language extensions are used that affect calls from the target function.\n\nInspecting these symbols' definitions is sufficient to identify any compiler-specific language extensions that the target function depends on or uses indirectly."
}