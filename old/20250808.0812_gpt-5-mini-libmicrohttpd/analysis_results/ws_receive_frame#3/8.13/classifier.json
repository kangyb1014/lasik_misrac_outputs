{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified ws_receive_frame code that contains useful probe functions that print useful logs to a file \"/tmp/logs/27.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of ws_receive_frame as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of ws_receive_frame:\n```c\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function ws_receive_frame:\n#define WS_OPCODE_CON_CLOSE_FRAME 8\n</additional code>\nJudge whether the above ws_receive_frame code violates the rule 8.13 or not.",
  "is_rule_violated": true,
  "scenario": "The function ws_receive_frame takes a non-const pointer unsigned char *frame but never modifies the buffer it points to (it only reads from it). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type (i.e., const unsigned char *frame) whenever possible. Therefore the current signature violates the rule.",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <stddef.h>\n\n/*\n * Modified ws_receive_frame with lightweight probes that log the control path\n * and relevant state to /tmp/logs/27.txt. The function signature is kept\n * identical to the original (unsigned char *frame) to demonstrate the\n * Rule 8.13 violation (pointer could be const).\n *\n * NOTE: Numeric literals are used instead of macros to keep the file\n * self-contained and avoid defining macros in this test code.\n */\n\nstatic void log_state_enter(const unsigned char *frame, ssize_t length)\n{\n    FILE *fp = fopen(\"/tmp/logs/27.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"ENTER ws_receive_frame: frame[0]=0x%02X length=%ld\\n\",\n                (unsigned int)frame[0], (long)length);\n        fclose(fp);\n    }\n}\n\nstatic void log_state_text_parse(const unsigned char *frame, ssize_t length,\n                                 unsigned char flength,\n                                 unsigned char idx_first_mask,\n                                 unsigned char idx_first_data,\n                                 size_t data_length,\n                                 const unsigned char masks[4])\n{\n    FILE *fp = fopen(\"/tmp/logs/27.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"TEXT_FRAME parse: flength=%u idx_first_mask=%u idx_first_data=%u data_length=%zu\\n\",\n                (unsigned int)flength,\n                (unsigned int)idx_first_mask,\n                (unsigned int)idx_first_data,\n                data_length);\n        fprintf(fp, \"Mask bytes: 0x%02X 0x%02X 0x%02X 0x%02X\\n\",\n                (unsigned int)masks[0], (unsigned int)masks[1],\n                (unsigned int)masks[2], (unsigned int)masks[3]);\n        /* log first few bytes of payload if available */\n        if (data_length > 0 && (size_t)length > (size_t)idx_first_data)\n        {\n            size_t to_print = data_length < 8U ? data_length : 8U;\n            fprintf(fp, \"Payload sample (masked): \");\n            for (size_t k = 0U; k < to_print; ++k)\n            {\n                unsigned char b = frame[idx_first_data + (int)k];\n                fprintf(fp, \"0x%02X \", (unsigned int)b);\n            }\n            fprintf(fp, \"\\n\");\n        }\n        fclose(fp);\n    }\n}\n\nstatic void log_state_close_or_other(const unsigned char *frame, ssize_t length, int type)\n{\n    FILE *fp = fopen(\"/tmp/logs/27.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"EXIT ws_receive_frame: chosen type=%d frame0=0x%02X length=%ld\\n\",\n                type, (unsigned int)frame[0], (long)length);\n        fclose(fp);\n    }\n}\n\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  /* Log entry; note frame is passed as const for logging only */\n  log_state_enter((const unsigned char *)frame, *length);\n\n  msg = NULL;\n  /* Literal values used in place of WS_FIN | WS_OPCODE_TEXT_FRAME (0x80 | 1 == 0x81)\n     and WS_FIN | WS_OPCODE_CON_CLOSE_FRAME (0x80 | 8 == 0x88). */\n  if (frame[0] == 0x81U)\n  {\n    *type = 1; /* WS_OPCODE_TEXT_FRAME */\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7FU;\n    if (flength == 126U)\n    {\n      idx_first_mask = 4U;\n    }\n    else if (flength == 127U)\n    {\n      idx_first_mask = 10U;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4U);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n\n    /* Log parsing state for text frame */\n    log_state_text_parse((const unsigned char *)frame, *length,\n                         flength, idx_first_mask, idx_first_data,\n                         data_length, masks);\n\n    msg = malloc (data_length + 1U);\n    if (NULL != msg)\n    {\n      for (i = (int)idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == 0x88U)\n  {\n    *type = 8; /* WS_OPCODE_CON_CLOSE_FRAME */\n    log_state_close_or_other((const unsigned char *)frame, *length, *type);\n  }\n  else\n  {\n    *type = frame[0] & 0x0FU;\n    log_state_close_or_other((const unsigned char *)frame, *length, *type);\n  }\n  return msg;\n}\n"
}