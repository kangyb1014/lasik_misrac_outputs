{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop count and optionally loop flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with essentially Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified ws_receive_frame code that contains useful probe functions that print useful logs to a file \"/tmp/logs/28.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of ws_receive_frame as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of ws_receive_frame:\n```c\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n```\n</target_code>\nJudge whether the above ws_receive_frame code violates the rule 14.2 or not.",
  "is_rule_violated": true,
  "scenario": "The for loop in ws_receive_frame uses two loop counters (i and j) in the first and third clauses (for (i = idx_first_data, j = 0; i < *length; i++, j++)), violating MISRA C 2023 Rule 14.2 (there shall only be one loop counter in a for loop).",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n\n/* Use enum for constants instead of macros */\nenum\n{\n  WS_FIN = 0x80,\n  WS_OPCODE_TEXT_FRAME = 0x1,\n  WS_OPCODE_CON_CLOSE_FRAME = 0x8\n};\n\n/* Small helper to log control path and state to /tmp/logs/28.txt */\nstatic void ws_log(const char *stage,\n                   int i,\n                   int j,\n                   ssize_t length,\n                   size_t data_length,\n                   unsigned char current_byte,\n                   unsigned char mask_byte)\n{\n  FILE *fp = fopen(\"/tmp/logs/28.txt\", \"a\");\n  if (fp != NULL)\n  {\n    fprintf(fp,\n            \"%s: i=%d j=%d length=%zd data_length=%zu cur=0x%02X mask=0x%02X\\n\",\n            stage,\n            i,\n            j,\n            length,\n            data_length,\n            (unsigned int) current_byte,\n            (unsigned int) mask_byte);\n    fclose(fp);\n  }\n}\n\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      /* Log state before entering the for-loop */\n      ws_log(\"pre_loop\", -1, -1, *length, data_length, 0U, 0U);\n\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        unsigned char cur = frame[i];\n        unsigned char m = masks[j % 4];\n        /* Log each iteration's important state */\n        ws_log(\"loop_iter\", i, j, *length, data_length, cur, m);\n        msg[j] = cur ^ m;\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n      /* Log after finishing the loop */\n      ws_log(\"post_loop\", i, j, *length, data_length, 0U, 0U);\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n"
}