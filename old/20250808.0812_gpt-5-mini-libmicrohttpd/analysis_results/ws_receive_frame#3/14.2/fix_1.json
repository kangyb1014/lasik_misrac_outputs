{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void ws_log(const char *stage,\n                   int i,\n                   int j,\n                   ssize_t length,\n                   size_t data_length,\n                   unsigned char current_byte,\n                   unsigned char mask_byte)\n{\n  FILE *fp = fopen(\"/tmp/logs/28.txt\", \"a\");\n  if (fp != NULL)\n  {\n    fprintf(fp,\n            \"%s: i=%d j=%d length=%zd data_length=%zu cur=0x%02X mask=0x%02X\\n\",\n            stage,\n            i,\n            j,\n            length,\n            data_length,\n            (unsigned int) current_byte,\n            (unsigned int) mask_byte);\n    fclose(fp);\n  }\n}\n\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      /* Log state before entering the for-loop */\n      ws_log(\"pre_loop\", -1, -1, *length, data_length, 0U, 0U);\n\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        unsigned char cur = frame[i];\n        unsigned char m = masks[j % 4];\n        /* Log each iteration's important state */\n        ws_log(\"loop_iter\", i, j, *length, data_length, cur, m);\n        msg[j] = cur ^ m;\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n      /* Log after finishing the loop */\n      ws_log(\"post_loop\", i, j, *length, data_length, 0U, 0U);\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp2m8snsea/src/build-aux/missing: line 81: makeinfo: command not found\nWARNING: 'makeinfo' is missing on your system.\n         You should only need it if you modified a '.texi' file, or\n         any other file indirectly affecting the aspect of the manual.\n         You might want to install the Texinfo package:\n         <https://www.gnu.org/software/texinfo/>\n         The spurious makeinfo call might also be the consequence of\n         using a buggy 'make' (AIX, DU, IRIX), in which case you might\n         want to install GNU make:\n         <https://www.gnu.org/software/make/>\nmake[3]: *** [Makefile:543: libmicrohttpd.info] Error 127\nmake[2]: *** [Makefile:764: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of ws_receive_frame as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <sys/types.h>\n\nstatic void ws_log(const char *stage,\n                   int i,\n                   int j,\n                   ssize_t length,\n                   size_t data_length,\n                   unsigned char current_byte,\n                   unsigned char mask_byte)\n{\n  FILE *fp = fopen(\"/tmp/logs/28.txt\", \"a\");\n  if (fp != NULL)\n  {\n    fprintf(fp,\n            \"%s: i=%d j=%d length=%zd data_length=%zu cur=0x%02X mask=0x%02X\\n\",\n            stage,\n            i,\n            j,\n            length,\n            data_length,\n            (unsigned int) current_byte,\n            (unsigned int) mask_byte);\n    fclose(fp);\n  }\n}\n\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  /* WS constants replaced with their numeric values to avoid undefined macros:\n     FIN = 0x80, OPCODE_TEXT = 0x01, OPCODE_CLOSE = 0x08 */\n  if (frame[0] == (0x80 | 0x01))\n  {\n    *type = 0x01; /* text frame */\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      /* Log state before entering the for-loop */\n      ws_log(\"pre_loop\", -1, -1, *length, data_length, 0U, 0U);\n\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        unsigned char cur = frame[i];\n        unsigned char m = masks[j % 4];\n        /* Log each iteration's important state */\n        ws_log(\"loop_iter\", i, j, *length, data_length, cur, m);\n        msg[j] = cur ^ m;\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n      /* Log after finishing the loop */\n      ws_log(\"post_loop\", i, j, *length, data_length, 0U, 0U);\n    }\n  }\n  else if (frame[0] == (0x80 | 0x08))\n  {\n    *type = 0x08; /* close frame */\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n",
  "explanation": "I added the necessary includes (stdio.h, stdlib.h, stdint.h, sys/types.h) so standard types and functions (ssize_t, FILE, malloc, fprintf, etc.) are defined. The undefined WS_* macros were replaced with their numeric WebSocket constant values (FIN = 0x80, OPCODE_TEXT = 0x01, OPCODE_CLOSE = 0x08) to preserve the original logic without introducing new macros. No other logic was changed."
}