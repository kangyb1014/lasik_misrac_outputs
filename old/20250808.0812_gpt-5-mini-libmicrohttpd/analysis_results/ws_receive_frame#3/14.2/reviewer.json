{
  "user_message": "An agent A claimed that the following ws_receive_frame code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop count and optionally loop flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with essentially Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement..\n</misra_rule>\n<target_code>\nHere is the original code of ws_receive_frame.\n```c\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  if (frame[0] == (WS_FIN | WS_OPCODE_TEXT_FRAME))\n  {\n    *type = WS_OPCODE_TEXT_FRAME;\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        msg[j] = frame[i] ^ masks[j % 4];\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n    }\n  }\n  else if (frame[0] == (WS_FIN | WS_OPCODE_CON_CLOSE_FRAME))\n  {\n    *type = WS_OPCODE_CON_CLOSE_FRAME;\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The for loop in ws_receive_frame uses two loop counters (i and j) in the first and third clauses (for (i = idx_first_data, j = 0; i < *length; i++, j++)), violating MISRA C 2023 Rule 14.2 (there shall only be one loop counter in a for loop).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void ws_log(const char *stage,\n                   int i,\n                   int j,\n                   ssize_t length,\n                   size_t data_length,\n                   unsigned char current_byte,\n                   unsigned char mask_byte)\n{\n  FILE *fp = fopen(\"/tmp/logs/28.txt\", \"a\");\n  if (fp != NULL)\n  {\n    fprintf(fp,\n            \"%s: i=%d j=%d length=%zd data_length=%zu cur=0x%02X mask=0x%02X\\n\",\n            stage,\n            i,\n            j,\n            length,\n            data_length,\n            (unsigned int) current_byte,\n            (unsigned int) mask_byte);\n    fclose(fp);\n  }\n}\n\nstatic unsigned char *\nws_receive_frame (unsigned char *frame, ssize_t *length, int *type)\n{\n  unsigned char masks[4];\n  unsigned char mask;\n  unsigned char *msg;\n  unsigned char flength;\n  unsigned char idx_first_mask;\n  unsigned char idx_first_data;\n  size_t data_length;\n  int i;\n  int j;\n\n  msg = NULL;\n  /* WS constants replaced with their numeric values to avoid undefined macros:\n     FIN = 0x80, OPCODE_TEXT = 0x01, OPCODE_CLOSE = 0x08 */\n  if (frame[0] == (0x80 | 0x01))\n  {\n    *type = 0x01; /* text frame */\n    idx_first_mask = 2;\n    mask = frame[1];\n    flength = mask & 0x7F;\n    if (flength == 126)\n    {\n      idx_first_mask = 4;\n    }\n    else if (flength == 127)\n    {\n      idx_first_mask = 10;\n    }\n    idx_first_data = (unsigned char) (idx_first_mask + 4);\n    data_length = (size_t) *length - idx_first_data;\n    masks[0] = frame[idx_first_mask + 0];\n    masks[1] = frame[idx_first_mask + 1];\n    masks[2] = frame[idx_first_mask + 2];\n    masks[3] = frame[idx_first_mask + 3];\n    msg = malloc (data_length + 1);\n    if (NULL != msg)\n    {\n      /* Log state before entering the for-loop */\n      ws_log(\"pre_loop\", -1, -1, *length, data_length, 0U, 0U);\n\n      for (i = idx_first_data, j = 0; i < *length; i++, j++)\n      {\n        unsigned char cur = frame[i];\n        unsigned char m = masks[j % 4];\n        /* Log each iteration's important state */\n        ws_log(\"loop_iter\", i, j, *length, data_length, cur, m);\n        msg[j] = cur ^ m;\n      }\n      *length = (ssize_t) data_length;\n      msg[j] = '\\0';\n      /* Log after finishing the loop */\n      ws_log(\"post_loop\", i, j, *length, data_length, 0U, 0U);\n    }\n  }\n  else if (frame[0] == (0x80 | 0x08))\n  {\n    *type = 0x08; /* close frame */\n  }\n  else\n  {\n    *type = frame[0] & 0x0F;\n  }\n  return msg;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The for statement for (i = idx_first_data, j = 0; i < *length; i++, j++) violates MISRA C 2023 Rule 14.2 because it uses two loop counters. The rule requires there shall be only one loop counter in a for loop; the first clause shall initialize the loop counter and the third clause shall modify only that loop counter. Here the first clause initializes both i and j and the third clause increments both, so the loop is not well\u2011formed under Rule 14.2. (The second clause uses only i, but that does not make the loop compliant because multiple counters are still present.)"
}