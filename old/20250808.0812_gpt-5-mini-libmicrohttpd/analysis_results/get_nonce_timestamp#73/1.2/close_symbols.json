{
  "user_message": "Target function code is:\n```c\nstatic bool\nget_nonce_timestamp (const char *const nonce,\n                     size_t noncelen,\n                     uint64_t *const ptimestamp)\n{\n  if (0 == noncelen)\n    noncelen = strlen (nonce);\n\n  if (true\n#ifdef MHD_MD5_SUPPORT\n      && (NONCE_STD_LEN (MD5_DIGEST_SIZE) != noncelen)\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) || defined(MHD_SHA512_256_SUPPORT)\n      && (NONCE_STD_LEN (SHA256_SHA512_256_DIGEST_SIZE) != noncelen)\n#endif /* MHD_SHA256_SUPPORT */\n      )\n    return false;\n\n  if (TIMESTAMP_CHARS_LEN !=\n      MHD_strx_to_uint64_n_ (nonce + noncelen - TIMESTAMP_CHARS_LEN,\n                             TIMESTAMP_CHARS_LEN,\n                             ptimestamp))\n    return false;\n  return true;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'get_nonce_timestamp': {'callees': ['MHD_strx_to_uint64_n_'], 'callers': ['check_nonce_nc', 'is_slot_available', 'digest_auth_check_all_inner']}, 'MHD_strx_to_uint64_n_': {'callees': ['toxdigitvalue'], 'callers': ['process_request_body', 'get_nonce_timestamp', 'get_rq_nc', 'digest_auth_check_all_inner']}, 'check_nonce_nc': {'callees': ['MHD_get_master', 'get_nonce_nc_idx', '__builtin_unreachable', 'get_nonce_timestamp'], 'callers': ['digest_auth_check_all_inner']}, 'is_slot_available': {'callees': ['get_nonce_timestamp'], 'callers': ['calculate_add_nonce']}, 'digest_auth_check_all_inner': {'callees': ['MHD_get_master', 'MHD_get_rq_dauth_params_', 'MHD_DLOG', 'digest_init_one_time', 'get_base_digest_algo', '__builtin_unreachable', 'digest_get_size', 'is_param_equal', 'get_buffer_for_size', 'get_rq_extended_uname_copy_z', 'calc_userhash', 'MHD_bin_to_hex', 'is_param_equal_caseless', 'digest_reset', 'get_unquoted_param', 'MHD_strx_to_uint64_n_', 'get_nonce_timestamp', 'MHD_monotonic_msec_counter', 'check_nonce_nc', 'digest_update_str', 'digest_update_with_colon', 'get_unquoted_param_copy', 'digest_update', 'check_uri_match', 'digest_calc_hash', 'calc_userdigest', 'MHD_hex_to_bin', 'calculate_nonce'], 'callers': ['digest_auth_check_all']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_strx_to_uint64_n_",
    "toxdigitvalue",
    "NONCE_STD_LEN",
    "MD5_DIGEST_SIZE",
    "SHA256_SHA512_256_DIGEST_SIZE",
    "TIMESTAMP_CHARS_LEN",
    "MHD_MD5_SUPPORT",
    "MHD_SHA256_SUPPORT",
    "MHD_SHA512_256_SUPPORT",
    "strlen",
    "bool",
    "true",
    "false",
    "size_t",
    "uint64_t",
    "<stdbool.h>",
    "<stdint.h>",
    "<string.h>"
  ],
  "explanation": "For determining whether the target function uses any compiler language extensions you must inspect every referenced symbol whose definition could introduce an extension. Brief reasons:\n\n- MHD_strx_to_uint64_n_: the called routine may itself use compiler extensions (builtins, GNU statement-expressions, typeof, attributes, __builtin_*). Its implementation is required to detect such uses.\n- toxdigitvalue: MHD_strx_to_uint64_n_ calls this helper; its implementation could also use extensions and must be checked.\n- NONCE_STD_LEN: a macro; its definition might use non-standard constructs (e.g. typeof, statement-expression, token-pasting tricks) or compiler-specific extensions \u2014 so inspect it.\n- MD5_DIGEST_SIZE and SHA256_SHA512_256_DIGEST_SIZE: these macros/constants may be computed or defined using compiler extensions or non-standard constructs; need their definitions.\n- TIMESTAMP_CHARS_LEN: constant/macro used in boundary arithmetic; inspect definition to ensure no extension usage.\n- MHD_MD5_SUPPORT, MHD_SHA256_SUPPORT, MHD_SHA512_256_SUPPORT: preprocessor feature-test macros that gate code. Whether they are defined (and how) affects which code path is compiled; their definitions (or build system) could rely on compiler-specific macros or pragmas \u2014 need to know their state.\n- strlen: standard library function \u2014 include its declaration to confirm standard usage; if it was macro-redefined in this project to something nonstandard, that must be seen.\n- bool, true, false, size_t, uint64_t: these type/macros must be known to ensure they are the standard C99/_Bool and stdint types or project/compiler-provided nonstandard aliases. In particular, check whether 'bool/true/false' are the stdbool.h macros or some compiler extension.\n- <stdbool.h>, <stdint.h>, <string.h>: include headers (or project equivalents) that provide the above symbols so you can confirm they are standard definitions rather than extension-provided substitutes.\n\nIn short: fetch the definitions/headers for the above macros, typedefs and called functions so you can verify none of them (or their implementations) rely on compiler-specific language extensions. Only after inspecting these will you be able to determine if the target function (or code it depends on) violates the MISRA prohibition on language extensions."
}