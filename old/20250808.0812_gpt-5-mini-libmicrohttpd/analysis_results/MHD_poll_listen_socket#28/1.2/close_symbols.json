{
  "user_message": "Target function code is:\n```c\nstatic enum MHD_Result\nMHD_poll_listen_socket (struct MHD_Daemon *daemon,\n                        int may_block)\n{\n  struct pollfd p[2];\n  int timeout;\n  unsigned int poll_count;\n  int poll_listen;\n  int poll_itc_idx;\n  MHD_socket ls;\n\n  mhd_assert (MHD_thread_handle_ID_is_valid_ID_ (daemon->tid));\n  mhd_assert (MHD_thread_handle_ID_is_current_thread_ (daemon->tid));\n\n  memset (&p,\n          0,\n          sizeof (p));\n  poll_count = 0;\n  poll_listen = -1;\n  poll_itc_idx = -1;\n  if ( (MHD_INVALID_SOCKET != (ls = daemon->listen_fd)) &&\n       (! daemon->was_quiesced) )\n\n  {\n    p[poll_count].fd = ls;\n    p[poll_count].events = POLLIN;\n    p[poll_count].revents = 0;\n    poll_listen = (int) poll_count;\n    poll_count++;\n  }\n  if (MHD_ITC_IS_VALID_ (daemon->itc))\n  {\n    p[poll_count].fd = MHD_itc_r_fd_ (daemon->itc);\n    p[poll_count].events = POLLIN;\n    p[poll_count].revents = 0;\n    poll_itc_idx = (int) poll_count;\n    poll_count++;\n  }\n\n  if (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    (void) resume_suspended_connections (daemon);\n\n  if (MHD_NO == may_block)\n    timeout = 0;\n  else\n    timeout = -1;\n  if (0 == poll_count)\n    return MHD_YES;\n  if (MHD_sys_poll_ (p,\n                     poll_count,\n                     timeout) < 0)\n  {\n    const int err = MHD_socket_get_error_ ();\n\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return MHD_YES;\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"poll failed: %s\\n\"),\n              MHD_socket_strerr_ (err));\n#endif\n    return MHD_NO;\n  }\n  if ( (0 <= poll_itc_idx) &&\n       (0 != (p[poll_itc_idx].revents & POLLIN)) )\n    MHD_itc_clear_ (daemon->itc);\n\n  /* handle shutdown */\n  if (daemon->shutdown)\n    return MHD_NO;\n\n  /* Process externally added connection if any */\n  if (daemon->have_new)\n    new_connections_list_process_ (daemon);\n\n  if ( (0 <= poll_listen) &&\n       (0 != (p[poll_listen].revents & POLLIN)) )\n    (void) MHD_accept_connection (daemon);\n  return MHD_YES;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_poll_listen_socket': {'callees': ['resume_suspended_connections', 'MHD_DLOG', 'new_connections_list_process_', 'MHD_accept_connection'], 'callers': ['MHD_poll']}, 'resume_suspended_connections': {'callees': ['__builtin_unreachable', 'MHD_monotonic_msec_counter', 'MHD_DLOG'], 'callers': ['MHD_run_from_select2', 'MHD_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll', 'MHD_polling_thread', 'close_all_connections']}, 'MHD_DLOG': {'callees': [], 'callers': ['connection_close_error', 'check_connection_reply', 'transmit_error_response_len', 'connection_add_header', 'parse_cookie_header', 'process_request_body', 'parse_connection_headers', 'get_req_header', 'get_req_headers', 'MHD_connection_handle_read', 'MHD_connection_handle_write', 'connection_check_timedout', 'cleanup_connection', 'MHD_connection_epoll_update_', 'MHD_queue_response', 'MHD_ip_limit_add', 'MHD_get_fdset2', 'thread_main_handle_connection', 'new_connection_prepare_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_get_timeout64', 'MHD_run_from_select2', 'MHD_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll', 'MHD_polling_thread', 'unescape_wrapper', 'MHD_quiesce_daemon', 'parse_options_va', 'setup_epoll_fd', 'setup_epoll_to_listen', 'process_interim_params', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_connection_set_nodelay_state_', 'MHD_connection_set_cork_state_', 'post_send_setopt', 'MHD_response_execute_upgrade_', 'MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_', 'calculate_add_nonce_with_retry', 'check_uri_match', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner', 'MHD_basic_auth_get_username_password3', 'MHD_basic_auth_get_username_password', 'MHD_queue_basic_auth_required_response3']}, 'new_connections_list_process_': {'callees': ['__builtin_unreachable', 'new_connection_process_', 'MHD_DLOG'], 'callers': ['internal_run_from_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll']}, 'MHD_accept_connection': {'callees': ['MHD_DLOG', '__builtin_unreachable', 'MHD_socket_nonblocking_', 'MHD_socket_noninheritable_', 'internal_add_connection'], 'callers': ['internal_run_from_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll']}, 'MHD_poll': {'callees': ['MHD_poll_all', 'MHD_poll_listen_socket'], 'callers': ['MHD_polling_thread']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "resume_suspended_connections",
    "MHD_DLOG",
    "new_connections_list_process_",
    "MHD_accept_connection",
    "mhd_assert",
    "MHD_thread_handle_ID_is_valid_ID_",
    "MHD_thread_handle_ID_is_current_thread_",
    "MHD_ITC_IS_VALID_",
    "MHD_itc_r_fd_",
    "MHD_itc_clear_",
    "MHD_sys_poll_",
    "MHD_socket_get_error_",
    "MHD_SCKT_ERR_IS_EINTR_",
    "MHD_socket_strerr_",
    "MHD_INVALID_SOCKET",
    "MHD_TEST_ALLOW_SUSPEND_RESUME",
    "MHD_NO",
    "MHD_YES",
    "enum MHD_Result",
    "struct MHD_Daemon"
  ],
  "explanation": "For verifying use of compiler language extensions you must examine any macros, inline wrappers or callees referenced by MHD_poll_listen_socket because those definitions may themselves use compiler-specific extensions (GCC builtins, attributes, statement-expressions, typeof, inline asm, nested functions, etc.). Brief reasons: \n- resume_suspended_connections: direct callee; its body may contain compiler builtins (e.g. __builtin_unreachable) or other extensions. \n- MHD_DLOG: typically a macro/logging wrapper used inside the function (conditional on HAVE_MESSAGES); macros often use variadic macros, __builtin_* or attributes \u2014 must inspect definition. \n- new_connections_list_process_: direct callee; may be a macro/inline function that uses extensions. \n- MHD_accept_connection: direct callee; may be implemented with compiler-specific constructs. \n- mhd_assert: assertion macro may expand to compiler builtins or statement-expressions. \n- MHD_thread_handle_ID_is_valid_ID_: used in assertions; may be a macro or inline that uses extensions. \n- MHD_thread_handle_ID_is_current_thread_: likewise may expand to compiler-specific constructs. \n- MHD_ITC_IS_VALID_: macro predicate \u2014 macro definitions can use extensions (statement-expression, typeof). \n- MHD_itc_r_fd_: accessor macro/function for itc; could be a macro using extensions. \n- MHD_itc_clear_: may be macro or inline using extensions. \n- MHD_sys_poll_: wrapper around poll; may be a macro using compiler-specific facilities or mapping to syscall with inline asm. \n- MHD_socket_get_error_: may be inline/wrapper using builtins. \n- MHD_SCKT_ERR_IS_EINTR_: macro used to interpret error codes; definition may use unusual constructs. \n- MHD_socket_strerr_: stringification of socket errors may use builtins or nonstandard attributes. \n- MHD_INVALID_SOCKET: constant/macro whose definition might use casts or extensions. \n- MHD_TEST_ALLOW_SUSPEND_RESUME: option bitmask macro \u2014 need definition to check for extension usage. \n- MHD_NO / MHD_YES: enum or macro return codes used by the function \u2014 check their definitions for extension uses. \n- enum MHD_Result: return type declaration could include compiler-specific attributes or underlying type specifiers. \n- struct MHD_Daemon: the daemon structure declaration is needed to inspect macros/inline-accessors that operate on its fields (they may use extensions) and to be sure no nonstandard bitfields/attributes are present.\n\nIn short: inspect the definitions of all macros and callees referenced directly in MHD_poll_listen_socket (and the types it uses) to determine if any compiler-specific language extensions are employed."
}