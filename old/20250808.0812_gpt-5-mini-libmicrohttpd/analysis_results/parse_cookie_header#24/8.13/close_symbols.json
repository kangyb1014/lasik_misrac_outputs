{
  "user_message": "Target function code is:\n```c\nstatic enum _MHD_ParseCookie\nparse_cookie_header (struct MHD_Connection *connection)\n{\n  const char *hdr;\n  size_t hdr_len;\n  char *cpy;\n  size_t i;\n  enum _MHD_ParseCookie parse_res;\n  struct MHD_HTTP_Req_Header *const saved_tail =\n    connection->rq.headers_received_tail;\n  const bool allow_partially_correct_cookie =\n    (1 >= connection->daemon->client_discipline);\n\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_COOKIE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_COOKIE),\n                                     &hdr,\n                                     &hdr_len))\n    return MHD_PARSE_COOKIE_OK;\n  if (0 == hdr_len)\n    return MHD_PARSE_COOKIE_OK;\n\n  cpy = MHD_connection_alloc_memory_ (connection,\n                                      hdr_len + 1);\n  if (NULL == cpy)\n    parse_res = MHD_PARSE_COOKIE_NO_MEMORY;\n  else\n  {\n    memcpy (cpy,\n            hdr,\n            hdr_len);\n    cpy[hdr_len] = '\\0';\n\n    i = 0;\n    /* Skip all initial whitespaces */\n    while (i < hdr_len && (' ' == cpy[i] || '\\t' == cpy[i]))\n      i++;\n\n    parse_res = parse_cookies_string (cpy + i, hdr_len - i, connection);\n  }\n\n  switch (parse_res)\n  {\n  case MHD_PARSE_COOKIE_OK:\n    break;\n  case MHD_PARSE_COOKIE_OK_LAX:\n#ifdef HAVE_MESSAGES\n    if (saved_tail != connection->rq.headers_received_tail)\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has been parsed, but it is not fully \"\n                   \"compliant with the standard.\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  case MHD_PARSE_COOKIE_MALFORMED:\n    if (saved_tail != connection->rq.headers_received_tail)\n    {\n      if (! allow_partially_correct_cookie)\n      {\n        /* Remove extracted values from partially broken cookie */\n        /* Memory remains allocated until the end of the request processing */\n        connection->rq.headers_received_tail = saved_tail;\n        saved_tail->next = NULL;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been ignored as it contains \"\n                     \"malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n      }\n#ifdef HAVE_MESSAGES\n      else\n        MHD_DLOG (connection->daemon,\n                  _ (\"The Cookie header has been only partially parsed as it \"\n                     \"contains malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    }\n#ifdef HAVE_MESSAGES\n    else\n      MHD_DLOG (connection->daemon,\n                _ (\"The Cookie header has malformed data.\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  case MHD_PARSE_COOKIE_NO_MEMORY:\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Not enough memory in the connection pool to \"\n                 \"parse client cookies!\\n\"));\n#endif /* HAVE_MESSAGES */\n    break;\n  default:\n    mhd_assert (0);\n    break;\n  }\n#ifndef HAVE_MESSAGES\n  (void) saved_tail; /* Mute compiler warning */\n#endif /* ! HAVE_MESSAGES */\n\n  return parse_res;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'parse_cookie_header': {'callees': ['MHD_lookup_connection_value_n', 'MHD_connection_alloc_memory_', 'parse_cookies_string', 'MHD_DLOG'], 'callers': ['parse_connection_headers']}, 'MHD_lookup_connection_value_n': {'callees': [], 'callers': ['MHD_lookup_connection_value', 'need_100_continue', 'get_no_space_err_status_code', 'parse_cookie_header', 'parse_connection_headers', 'MHD_create_post_processor', 'ahc_cb']}, 'MHD_connection_alloc_memory_': {'callees': ['MHD_pool_try_alloc', 'MHD_pool_reallocate', 'MHD_pool_allocate'], 'callers': ['MHD_set_connection_value_n_nocheck_', 'try_ready_normal_body', 'parse_cookie_header', 'MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_']}, 'parse_cookies_string': {'callees': ['MHD_set_connection_value_n_nocheck_'], 'callers': ['parse_cookie_header']}, 'MHD_DLOG': {'callees': [], 'callers': ['connection_close_error', 'check_connection_reply', 'transmit_error_response_len', 'connection_add_header', 'parse_cookie_header', 'process_request_body', 'parse_connection_headers', 'get_req_header', 'get_req_headers', 'MHD_connection_handle_read', 'MHD_connection_handle_write', 'connection_check_timedout', 'cleanup_connection', 'MHD_connection_epoll_update_', 'MHD_queue_response', 'MHD_ip_limit_add', 'MHD_get_fdset2', 'thread_main_handle_connection', 'new_connection_prepare_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_get_timeout64', 'MHD_run_from_select2', 'MHD_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll', 'MHD_polling_thread', 'unescape_wrapper', 'MHD_quiesce_daemon', 'parse_options_va', 'setup_epoll_fd', 'setup_epoll_to_listen', 'process_interim_params', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_connection_set_nodelay_state_', 'MHD_connection_set_cork_state_', 'post_send_setopt', 'MHD_response_execute_upgrade_', 'MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_', 'calculate_add_nonce_with_retry', 'check_uri_match', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner', 'MHD_basic_auth_get_username_password3', 'MHD_basic_auth_get_username_password', 'MHD_queue_basic_auth_required_response3']}, 'parse_connection_headers': {'callees': ['parse_cookie_header', 'handle_req_cookie_no_space', 'MHD_lookup_connection_value_n', 'MHD_DLOG', 'transmit_error_response_len', 'MHD_str_equal_caseless_', 'MHD_str_to_uint64_n_'], 'callers': ['MHD_connection_handle_idle']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA pointer should point to a const-qualified type whenever possible. A pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_lookup_connection_value_n (prototype)",
    "parse_cookies_string (prototype and/or implementation)",
    "MHD_connection_alloc_memory_ (prototype)",
    "MHD_set_connection_value_n_nocheck_ (prototype and behavior)",
    "struct MHD_Connection (definition)",
    "struct MHD_HTTP_Req_Header (definition)",
    "struct MHD_Daemon (definition - for client_discipline type)"
  ],
  "explanation": "For checking MISRA C pointer constness you must know the exact types and how called functions use the pointers in this function:\n\n- MHD_lookup_connection_value_n (prototype): parse_cookie_header receives hdr via an out-parameter from this function. The prototype determines whether hdr is declared as const char ** (i.e. the function exposes a const-qualified pointer) or as char **. That decides if using const char *hdr in this function matches the callee and whether the pointed-to data is supposed to be immutable.\n\n- parse_cookies_string (prototype and/or implementation): parse_cookie_header passes cpy+i (a char *) to this function. You must know whether parse_cookies_string expects a const char * or char * and whether it modifies the buffer contents (e.g. inserts NULs, tokenizes in-place). If parse_cookies_string modifies the buffer, the pointer must be non-const; if it only reads, a const-qualified pointer would be preferable per MISRA.\n\n- MHD_connection_alloc_memory_ (prototype): this allocation routine produces the cpy buffer. The prototype shows the return type (char *, void *, const char *) and intended mutability of that memory. If it returns non-const memory intended to be modified, cpy as char * is appropriate; if it returned const-qualified memory, that would be a MISRA concern.\n\n- MHD_set_connection_value_n_nocheck_ (prototype and behavior): parse_cookies_string calls this to record cookie name/value pairs. You need to know whether that function stores pointers into the provided buffer (i.e. takes ownership of pointers into cpy) or copies data. If it stores pointers and later other code may modify them, that affects whether the stored pointer types should be const-qualified and whether passing a non-const char * is required.\n\n- struct MHD_Connection (definition): needed to verify types of connection->rq, connection->daemon and to confirm the declared types (constness) of any pointer fields used here. Also to see whether any API requirements force particular pointer constness for buffers associated with the connection.\n\n- struct MHD_HTTP_Req_Header (definition): saved_tail and headers_received_tail are pointers to this type; you must know how header value/name pointers are typed inside this struct (const char * vs char *) because parse_cookies_string and the code here manipulate the header list and may write pointers into the headers. This determines whether the stored pointers violate the rule.\n\n- struct MHD_Daemon (definition - client_discipline type): while not directly about pointer constness, the type of client_discipline (and whether it is mutable) is referenced in logic that chooses to drop or keep partially parsed cookie data; knowing its type helps reason about whether any pointer modifications are conditional and permitted.\n\nThese symbols together let an analyst determine which pointers refer to immutable data (should be const) and which are intentionally mutable buffers, and whether any called function modifies data through pointers that are declared const (which would violate the MISRA rule)."
}