{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Minimal type definitions to preserve the original function signature */\ntypedef struct MHD_thread_handle_ID_ MHD_thread_handle_ID_;\ntypedef void *(*MHD_THREAD_START_ROUTINE_)(void *);\n\n/* Prototype of an external function used by this code (not defined here). */\nint MHD_create_thread_ (MHD_thread_handle_ID_ *handle_id,\n                        size_t stack_size,\n                        MHD_THREAD_START_ROUTINE_ start_routine,\n                        void *arg);\n\n/* The helper-parameter structure. Note: name is intentionally non-const\n * to demonstrate the violation scenario: assigning a const char * to a\n * non-const char * discards const qualification. */\nstruct MHD_named_helper_param_\n{\n  MHD_THREAD_START_ROUTINE_ start_routine;\n  void *arg;\n  char *name; /* <-- should be 'const char *name' to avoid discarding const */\n};\n\nint\nMHD_create_named_thread_ (MHD_thread_handle_ID_ *handle_id,\n                          const char *thread_name,\n                          size_t stack_size,\n                          MHD_THREAD_START_ROUTINE_ start_routine,\n                          void *arg)\n{\n  struct MHD_named_helper_param_ *param;\n  FILE *log = fopen(\"/tmp/logs/251.txt\", \"a\");\n  if (log != NULL)\n  {\n    fprintf(log, \"MHD_create_named_thread_: entry\\n\");\n    fprintf(log, \"  thread_name ptr=%p\\n\", (const void *) thread_name);\n  }\n\n  if (NULL == thread_name)\n  {\n    if (log != NULL)\n    {\n      fprintf(log, \"  thread_name is NULL -> EINVAL, return 0\\n\");\n      fclose(log);\n    }\n    errno = EINVAL;\n    return 0;\n  }\n\n  param = malloc (sizeof (struct MHD_named_helper_param_));\n  if (NULL == param)\n  {\n    if (log != NULL)\n    {\n      fprintf(log, \"  malloc failed -> return 0\\n\");\n      fclose(log);\n    }\n    return 0;\n  }\n\n  /* Here is the key assignment: assigning a const char * to a non-const\n   * char * (param->name). This discards the const qualifier and is the\n   * violation scenario for MISRA Rule 8.13. */\n  param->start_routine = start_routine;\n  param->arg = arg;\n  param->name = (char *) thread_name; /* original code used implicit assignment; cast shown explicitly for clarity in logs */\n\n  if (log != NULL)\n  {\n    fprintf(log, \"  param=%p, param->name ptr=%p\\n\", (void *) param, (void *) param->name);\n    if (param->name != NULL)\n      fprintf(log, \"  param->name content=\\\"%s\\\"\\n\", param->name);\n  }\n\n  /* Preserve original behavior: attempt to create thread with named starter. */\n  if (! MHD_create_thread_ (handle_id,\n                            stack_size,\n                            /* named_thread_starter */ start_routine,\n                            (void *) param))\n  {\n    int err_num;\n\n    err_num = errno;\n    free (param);\n    errno = err_num;\n    if (log != NULL)\n    {\n      fprintf(log, \"  MHD_create_thread_ failed -> freed param, return 0, errno=%d\\n\", errno);\n      fclose(log);\n    }\n    return 0;\n  }\n\n  if (log != NULL)\n  {\n    fprintf(log, \"  MHD_create_thread_ succeeded -> returning 1\\n\");\n    fclose(log);\n  }\n\n  return ! 0;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nFailed to parse the test code.\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of MHD_create_named_thread_ as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <errno.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Minimal type definitions to preserve the original function signature */\ntypedef struct MHD_thread_handle_ID_ MHD_thread_handle_ID_;\ntypedef void *(*MHD_THREAD_START_ROUTINE_)(void *);\n\n/* Prototype of an external function used by this code (not defined here). */\nint MHD_create_thread_ (MHD_thread_handle_ID_ *handle_id,\n                        size_t stack_size,\n                        MHD_THREAD_START_ROUTINE_ start_routine,\n                        void *arg);\n\n/* The helper-parameter structure. Make name const to avoid discarding\n * the const qualifier when assigning a const char * thread_name. */\nstruct MHD_named_helper_param_\n{\n  MHD_THREAD_START_ROUTINE_ start_routine;\n  void *arg;\n  const char *name; /* changed to 'const char *' to preserve const qualification */\n};\n\nint\nMHD_create_named_thread_ (MHD_thread_handle_ID_ *handle_id,\n                          const char *thread_name,\n                          size_t stack_size,\n                          MHD_THREAD_START_ROUTINE_ start_routine,\n                          void *arg)\n{\n  struct MHD_named_helper_param_ *param;\n  FILE *log = fopen(\"/tmp/logs/251.txt\", \"a\");\n  if (log != NULL)\n  {\n    fprintf(log, \"MHD_create_named_thread_: entry\\n\");\n    fprintf(log, \"  thread_name ptr=%p\\n\", (const void *) thread_name);\n  }\n\n  if (NULL == thread_name)\n  {\n    if (log != NULL)\n    {\n      fprintf(log, \"  thread_name is NULL -> EINVAL, return 0\\n\");\n      fclose(log);\n    }\n    errno = EINVAL;\n    return 0;\n  }\n\n  param = malloc (sizeof (struct MHD_named_helper_param_));\n  if (NULL == param)\n  {\n    if (log != NULL)\n    {\n      fprintf(log, \"  malloc failed -> return 0\\n\");\n      fclose(log);\n    }\n    return 0;\n  }\n\n  /* Assign fields. param->name is now const char *, so assigning\n   * thread_name (const char *) preserves the const qualification. */\n  param->start_routine = start_routine;\n  param->arg = arg;\n  param->name = thread_name;\n\n  if (log != NULL)\n  {\n    fprintf(log, \"  param=%p, param->name ptr=%p\\n\", (void *) param, (const void *) param->name);\n    if (param->name != NULL)\n      fprintf(log, \"  param->name content=\\\"%s\\\"\\n\", param->name);\n  }\n\n  /* Preserve original behavior: attempt to create thread with named starter. */\n  if (! MHD_create_thread_ (handle_id,\n                            stack_size,\n                            /* named_thread_starter */ start_routine,\n                            (void *) param))\n  {\n    int err_num;\n\n    err_num = errno;\n    free (param);\n    errno = err_num;\n    if (log != NULL)\n    {\n      fprintf(log, \"  MHD_create_thread_ failed -> freed param, return 0, errno=%d\\n\", errno);\n      fclose(log);\n    }\n    return 0;\n  }\n\n  if (log != NULL)\n  {\n    fprintf(log, \"  MHD_create_thread_ succeeded -> returning 1\\n\");\n    fclose(log);\n  }\n\n  return ! 0;\n}\n",
  "explanation": "I changed the helper-structure member 'name' from 'char *' to 'const char *' so assigning the function parameter (const char *thread_name) no longer discards const qualification. This preserves the original logic while fixing the const-qualification issue that caused the compile/quality concern. No other behavior was changed."
}