{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstruct MHD_PostProcessor;\nstruct MHD_Response;\nextern const char *MHD_HTTP_METHOD_POST;\nextern const char *MHD_HTTP_METHOD_GET;\nextern const char *MHD_HTTP_METHOD_HEAD;\nextern unsigned int MHD_HTTP_NOT_ACCEPTABLE;\nextern const char METHOD_ERROR[];\nextern struct MHD_PostProcessor *MHD_create_post_processor(struct MHD_Connection *, size_t, void *, void *);\nextern enum MHD_Result MHD_post_process(struct MHD_PostProcessor *, const char *, size_t);\nextern enum MHD_Result MHD_destroy_post_processor(struct MHD_PostProcessor *);\nextern struct MHD_Response *MHD_create_response_from_buffer_static(size_t, const void *);\nextern enum MHD_Result MHD_queue_response(struct MHD_Connection *, unsigned int, struct MHD_Response *);\nextern void MHD_destroy_response(struct MHD_Response *);\nstatic void log_probe(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/546.txt\", \"a\");\n  if (f == NULL)\n    return; /* best-effort logging only */\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n\n  /* Instrumentation: log entry and the values of selected parameters */\n  log_probe(\"create_response ENTRY: url=%s, method=%s, req_cls=%p, upload_data_size=%zu\",\n            (url != NULL) ? url : \"(null)\",\n            (method != NULL) ? method : \"(null)\",\n            (void *) req_cls,\n            (upload_data_size != NULL) ? *upload_data_size : 0);\n\n  /* The original implementation used (void) casts to silence unused\n     parameter warnings. Those (void) statements are no-ops that are\n     executed on every call but removing them would not change\n     behaviour \u2014 they are dead code per MISRA C 2023 Rule 2.2. We log\n     their execution here to demonstrate the point. */\n  (void) cls;               /* Unused. Silent compiler warning. */\n  log_probe(\"executed no-op: (void) cls\");\n  (void) version;           /* Unused. Silent compiler warning. */\n  log_probe(\"executed no-op: (void) version\");\n\n  request = *req_cls;\n  log_probe(\"request pointer after deref: %p\", (void *) request);\n  if (NULL == request)\n  {\n    log_probe(\"request is NULL: allocating new Request\");\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      log_probe(\"calloc failed, returning MHD_NO\");\n      return MHD_NO;\n    }\n    *req_cls = request;\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      log_probe(\"method is POST: creating post processor for url=%s\", (url != NULL) ? url : \"(null)\");\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        log_probe(\"MHD_create_post_processor failed, returning MHD_NO\");\n        return MHD_NO; /* internal error */\n      }\n    }\n    log_probe(\"initial request setup completed, returning MHD_YES\");\n    return MHD_YES;\n  }\n  if (NULL == request->session)\n  {\n    log_probe(\"session is NULL: calling get_session\");\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      log_probe(\"get_session failed, returning MHD_NO\");\n      return MHD_NO; /* internal error */\n    }\n  }\n  session = request->session;\n  session->start = time (NULL);\n  log_probe(\"session start time set: %ld\", (long) session->start);\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    /* evaluate POST data */\n    log_probe(\"processing POST data: upload_data_size=%zu\", *upload_data_size);\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n    {\n      log_probe(\"MHD_post_process failed, returning MHD_NO\");\n      return MHD_NO;\n    }\n    if (0 != *upload_data_size)\n    {\n      *upload_data_size = 0;\n      log_probe(\"partial POST: consumed data, returning MHD_YES\");\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    log_probe(\"POST data complete: destroying post processor\");\n    MHD_destroy_post_processor (request->pp);\n    request->pp = NULL;\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n    if (NULL != request->post_url)\n      url = request->post_url;\n  }\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    i = 0;\n    log_probe(\"searching pages[] for url=%s\", (url != NULL) ? url : \"(null)\");\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n      i++;\n    log_probe(\"found page index %u for url=%s\", i, (url != NULL) ? url : \"(null)\");\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n    if (ret != MHD_YES)\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n    log_probe(\"page handler returned %d\", (int) ret);\n    return ret;\n  }\n  /* unsupported HTTP method */\n  log_probe(\"unsupported method: enqueueing METHOD_ERROR response\");\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  MHD_destroy_response (response);\n  log_probe(\"queued METHOD_ERROR response, returning %d\", (int) ret);\n  return ret;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\nIn file included from post_example.c:43:\n../../src/include/microhttpd.h:1109:34: error: expected identifier or '(' before string constant\n 1109 | #define MHD_HTTP_METHOD_POST     \"POST\"\n      |                                  ^~~~~~\npost_example.c:598:20: note: in expansion of macro 'MHD_HTTP_METHOD_POST'\n  598 | extern const char *MHD_HTTP_METHOD_POST;\n      |                    ^~~~~~~~~~~~~~~~~~~~\n../../src/include/microhttpd.h:1105:34: error: expected identifier or '(' before string constant\n 1105 | #define MHD_HTTP_METHOD_GET      \"GET\"\n      |                                  ^~~~~\npost_example.c:599:20: note: in expansion of macro 'MHD_HTTP_METHOD_GET'\n  599 | extern const char *MHD_HTTP_METHOD_GET;\n      |                    ^~~~~~~~~~~~~~~~~~~\n../../src/include/microhttpd.h:1107:34: error: expected identifier or '(' before string constant\n 1107 | #define MHD_HTTP_METHOD_HEAD     \"HEAD\"\n      |                                  ^~~~~~\npost_example.c:600:20: note: in expansion of macro 'MHD_HTTP_METHOD_HEAD'\n  600 | extern const char *MHD_HTTP_METHOD_HEAD;\n      |                    ^~~~~~~~~~~~~~~~~~~~\nIn file included from post_example.c:43:\n../../src/include/microhttpd.h:397:46: error: expected identifier or '(' before numeric constant\n  397 | #define MHD_HTTP_NOT_ACCEPTABLE              406\n      |                                              ^~~\npost_example.c:601:21: note: in expansion of macro 'MHD_HTTP_NOT_ACCEPTABLE'\n  601 | extern unsigned int MHD_HTTP_NOT_ACCEPTABLE;\n      |                     ^~~~~~~~~~~~~~~~~~~~~~~\npost_example.c:49:3: error: expected identifier or '(' before string constant\n   49 |   \"<html><head><title>Illegal request</title></head><body>Go away.</body></html>\"\n      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\npost_example.c:49:3: note: in definition of macro 'METHOD_ERROR'\n   49 |   \"<html><head><title>Illegal request</title></head><body>Go away.</body></html>\"\n      |   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\npost_example.c:603:34: error: conflicting types for 'MHD_create_post_processor'; have 'struct MHD_PostProcessor *(struct MHD_Connection *, size_t,  void *, void *)' {aka 'struct MHD_PostProcessor *(struct MHD_Connection *, long unsigned int,  void *, void *)'}\n  603 | extern struct MHD_PostProcessor *MHD_create_post_processor(struct MHD_Connection *, size_t, void *, void *);\n      |                                  ^~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from post_example.c:43:\n../../src/include/microhttpd.h:4637:1: note: previous declaration of 'MHD_create_post_processor' with type 'struct MHD_PostProcessor *(struct MHD_Connection *, size_t,  enum MHD_Result (*)(void *, enum MHD_ValueKind,  const char *, const char *, const char *, const char *, const char *, uint64_t,  size_t), void *)' {aka 'struct MHD_PostProcessor *(struct MHD_Connection *, long unsigned int,  enum MHD_Result (*)(void *, enum MHD_ValueKind,  const char *, const char *, const char *, const char *, const char *, long unsigned int,  long unsigned int), void *)'}\n 4637 | MHD_create_post_processor (struct MHD_Connection *connection,\n      | ^~~~~~~~~~~~~~~~~~~~~~~~~\nmake[4]: *** [Makefile:1086: post_example.o] Error 1\nmake[3]: *** [Makefile:1234: all-recursive] Error 1\nmake[2]: *** [Makefile:449: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of create_response as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "struct MHD_PostProcessor;\nstruct MHD_Response;\nstatic void log_probe(const char *fmt, ...)\n{\n  FILE *f = fopen(\"/tmp/logs/546.txt\", \"a\");\n  if (f == NULL)\n    return; /* best-effort logging only */\n  va_list ap;\n  va_start(ap, fmt);\n  vfprintf(f, fmt, ap);\n  fprintf(f, \"\\n\");\n  va_end(ap);\n  fclose(f);\n}\n\nstatic enum MHD_Result\ncreate_response (void *cls,\n                 struct MHD_Connection *connection,\n                 const char *url,\n                 const char *method,\n                 const char *version,\n                 const char *upload_data,\n                 size_t *upload_data_size,\n                 void **req_cls)\n{\n  struct MHD_Response *response;\n  struct Request *request;\n  struct Session *session;\n  enum MHD_Result ret;\n  unsigned int i;\n\n  /* Instrumentation: log entry and the values of selected parameters */\n  log_probe(\"create_response ENTRY: url=%s, method=%s, req_cls=%p, upload_data_size=%zu\",\n            (url != NULL) ? url : \"(null)\",\n            (method != NULL) ? method : \"(null)\",\n            (void *) req_cls,\n            (upload_data_size != NULL) ? *upload_data_size : 0);\n\n  /* The original implementation used (void) casts to silence unused\n     parameter warnings. Those (void) statements are no-ops that are\n     executed on every call but removing them would not change\n     behaviour \u2014 they are dead code per MISRA C 2023 Rule 2.2. We log\n     their execution here to demonstrate the point. */\n  (void) cls;               /* Unused. Silent compiler warning. */\n  log_probe(\"executed no-op: (void) cls\");\n  (void) version;           /* Unused. Silent compiler warning. */\n  log_probe(\"executed no-op: (void) version\");\n\n  request = *req_cls;\n  log_probe(\"request pointer after deref: %p\", (void *) request);\n  if (NULL == request)\n  {\n    log_probe(\"request is NULL: allocating new Request\");\n    request = calloc (1, sizeof (struct Request));\n    if (NULL == request)\n    {\n      fprintf (stderr, \"calloc error: %s\\n\", strerror (errno));\n      log_probe(\"calloc failed, returning MHD_NO\");\n      return MHD_NO;\n    }\n    *req_cls = request;\n    if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n    {\n      log_probe(\"method is POST: creating post processor for url=%s\", (url != NULL) ? url : \"(null)\");\n      request->pp = MHD_create_post_processor (connection, 1024,\n                                               &post_iterator, request);\n      if (NULL == request->pp)\n      {\n        fprintf (stderr, \"Failed to setup post processor for `%s'\\n\",\n                 url);\n        log_probe(\"MHD_create_post_processor failed, returning MHD_NO\");\n        return MHD_NO; /* internal error */\n      }\n    }\n    log_probe(\"initial request setup completed, returning MHD_YES\");\n    return MHD_YES;\n  }\n  if (NULL == request->session)\n  {\n    log_probe(\"session is NULL: calling get_session\");\n    request->session = get_session (connection);\n    if (NULL == request->session)\n    {\n      fprintf (stderr, \"Failed to setup session for `%s'\\n\",\n               url);\n      log_probe(\"get_session failed, returning MHD_NO\");\n      return MHD_NO; /* internal error */\n    }\n  }\n  session = request->session;\n  session->start = time (NULL);\n  log_probe(\"session start time set: %ld\", (long) session->start);\n  if (0 == strcmp (method, MHD_HTTP_METHOD_POST))\n  {\n    /* evaluate POST data */\n    log_probe(\"processing POST data: upload_data_size=%zu\", *upload_data_size);\n    if (MHD_YES !=\n        MHD_post_process (request->pp,\n                          upload_data,\n                          *upload_data_size))\n    {\n      log_probe(\"MHD_post_process failed, returning MHD_NO\");\n      return MHD_NO;\n    }\n    if (0 != *upload_data_size)\n    {\n      *upload_data_size = 0;\n      log_probe(\"partial POST: consumed data, returning MHD_YES\");\n      return MHD_YES;\n    }\n    /* done with POST data, serve response */\n    log_probe(\"POST data complete: destroying post processor\");\n    MHD_destroy_post_processor (request->pp);\n    request->pp = NULL;\n    method = MHD_HTTP_METHOD_GET;   /* fake 'GET' */\n    if (NULL != request->post_url)\n      url = request->post_url;\n  }\n\n  if ( (0 == strcmp (method, MHD_HTTP_METHOD_GET)) ||\n       (0 == strcmp (method, MHD_HTTP_METHOD_HEAD)) )\n  {\n    /* find out which page to serve */\n    i = 0;\n    log_probe(\"searching pages[] for url=%s\", (url != NULL) ? url : \"(null)\");\n    while ( (pages[i].url != NULL) &&\n            (0 != strcmp (pages[i].url, url)) )\n      i++;\n    log_probe(\"found page index %u for url=%s\", i, (url != NULL) ? url : \"(null)\");\n    ret = pages[i].handler (pages[i].handler_cls,\n                            pages[i].mime,\n                            session, connection);\n    if (ret != MHD_YES)\n      fprintf (stderr, \"Failed to create page for `%s'\\n\",\n               url);\n    log_probe(\"page handler returned %d\", (int) ret);\n    return ret;\n  }\n  /* unsupported HTTP method */\n  log_probe(\"unsupported method: enqueueing METHOD_ERROR response\");\n  response =\n    MHD_create_response_from_buffer_static (strlen (METHOD_ERROR),\n                                            (const void *) METHOD_ERROR);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_ACCEPTABLE,\n                            response);\n  MHD_destroy_response (response);\n  log_probe(\"queued METHOD_ERROR response, returning %d\", (int) ret);\n  return ret;\n}\n",
  "explanation": "The compile errors were caused by redeclaring symbols that are already defined as macros and functions in the included microhttpd.h (e.g. MHD_HTTP_METHOD_POST, MHD_HTTP_NOT_ACCEPTABLE, METHOD_ERROR, and the MHD_* function prototypes). Those extern declarations conflicted with the header. I removed the redundant extern declarations so the code uses the definitions from the microhttpd header without shadowing or mismatching signatures. No logic in create_response was changed; only the conflicting top-level extern declarations were removed."
}