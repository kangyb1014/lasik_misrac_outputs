{
  "user_message": "An agent A claimed that the following not_found_page code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n.\n</misra_rule>\n<target_code>\nHere is the original code of not_found_page.\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:Violation occurs in add_response_header_connection where memcmp is used to compare hdr->value and the literal \"close\". hdr->value is a null-terminated string (buf[pos]=0 in the code that builds it), and the code uses memcmp(hdr->value, \"close\", 5) to detect the presence of the token. Using memcmp to compare null-terminated strings violates MISRA C 2023 Rule 21.14.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void\nlog_probe (const char *fmt, ...)\n{\n  FILE *f = fopen (\"/tmp/logs/558.txt\", \"a\");\n  if (NULL == f)\n    return;\n  va_list ap;\n  va_start (ap, fmt);\n  vfprintf (f, fmt, ap);\n  va_end (ap);\n  fputc ('\\n', f);\n  fclose (f);\n}\n\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* Log entry and input state */\n  log_probe (\"not_found_page: entry cls=%p mime=%s session=%p connection=%p\",\n             cls, (mime != NULL) ? mime : \"(null)\", session, connection);\n\n  /* unsupported HTTP method */\n  /* Determine the total size up-front rather than accessing internals of\n     the opaque MHD_Response struct (its fields are not public). */\n  size_t total_size = strlen (NOT_FOUND_ERROR);\n\n  response =\n    MHD_create_response_from_buffer_static (total_size,\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n  {\n    log_probe (\"not_found_page: failed to create response (NULL)\");\n    return MHD_NO;\n  }\n\n  /* Avoid accessing response->total_size because MHD_Response is an opaque\n     type in libmicrohttpd; log the known total_size instead. */\n  log_probe (\"not_found_page: created response=%p total_size=%zu\",\n             (void *) response, total_size);\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n\n  log_probe (\"not_found_page: queued response ret=%d connection=%p\",\n             (int) ret, (void *) connection);\n\n  log_probe (\"not_found_page: adding header '%s' with content '%s'\",\n             MHD_HTTP_HEADER_CONTENT_ENCODING,\n             (mime != NULL) ? mime : \"(null)\");\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    /* Preserve original behaviour: report to stderr and also log */\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    log_probe (\"not_found_page: MHD_add_response_header failed for header '%s' content '%s'\",\n               MHD_HTTP_HEADER_CONTENT_ENCODING,\n               (mime != NULL) ? mime : \"(null)\");\n  }\n  else\n  {\n    log_probe (\"not_found_page: MHD_add_response_header succeeded for header '%s' content '%s'\",\n               MHD_HTTP_HEADER_CONTENT_ENCODING,\n               (mime != NULL) ? mime : \"(null)\");\n  }\n\n  MHD_destroy_response (response);\n  log_probe (\"not_found_page: destroyed response=%p returning ret=%d\",\n             (void *) response, (int) ret);\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The asserted violation is incorrect for the provided not_found_page code. Rule 21.14 forbids using memcmp to compare null-terminated strings, but the target function does not call memcmp anywhere. The only call that could lead to library code doing comparisons is MHD_add_response_header, but that is part of libmicrohttpd (not shown). Agent A\u2019s scenario points at add_response_header_connection (a library internals function) rather than the not_found_page function itself. The supplied modified test code failed to compile and produced no evidence. Conclusion: you cannot conclude that the shown not_found_page code violates MISRA C 2023 Rule 21.14. If a violation exists it would be in the library implementation (inspect the add_response_header_connection source); if that code uses memcmp to compare null-terminated strings, replace with strcmp/strncmp or otherwise avoid memcmp on NUL-terminated strings to comply with Rule 21.14."
}