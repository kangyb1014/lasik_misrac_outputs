{
  "user_message": "An agent A claimed that the following not_found_page code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of not_found_page.\n```c\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The two explicit casts to void \u2014 \u201c(void) cls;\u201d and \u201c(void) session;\u201d \u2014 are executed no-op statements whose removal would not affect program behaviour. They therefore constitute dead code per MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstruct MHD_Response { int unused; };\nstatic const int MHD_HTTP_NOT_FOUND = 404;\nstatic const char MHD_HTTP_HEADER_CONTENT_ENCODING[] = \"Content-Encoding\";\nstatic const char NOT_FOUND_ERROR[] = \"Not Found\";\nstatic struct MHD_Response *\nMHD_create_response_from_buffer_static (size_t size, const void *buf)\n{\n  (void) size; (void) buf;\n  /* Allocate a small response object to represent a created response. */\n  return (struct MHD_Response *) malloc(sizeof(struct MHD_Response));\n}\nstatic enum MHD_Result\nMHD_queue_response (struct MHD_Connection *connection,\n                    int status,\n                    struct MHD_Response *response)\n{\n  (void) connection; (void) status; (void) response;\n  /* Pretend queuing always succeeds. */\n  return MHD_YES;\n}\nstatic enum MHD_Result\nMHD_add_response_header (struct MHD_Response *response,\n                         const char *header,\n                         const char *value)\n{\n  (void) response; (void) header; (void) value;\n  /* Pretend adding a header always succeeds. */\n  return MHD_YES;\n}\nstatic void\nMHD_destroy_response (struct MHD_Response *response)\n{\n  free(response);\n}\nstatic void\nlog_probe(const char *label,\n          const void *cls,\n          const char *mime,\n          struct Session *session,\n          struct MHD_Connection *connection,\n          struct MHD_Response *response,\n          enum MHD_Result res)\n{\n  FILE *f;\n\n  f = fopen(\"/tmp/logs/554.txt\", \"a\");\n  if (NULL != f)\n  {\n    fprintf(f,\n            \"%s: cls=%p mime=%s session=%p connection=%p response=%p res=%d\\n\",\n            label,\n            cls,\n            (mime != NULL) ? mime : \"(null)\",\n            session,\n            connection,\n            response,\n            (int) res);\n    (void) fclose(f);\n  }\n}\n\nstatic enum MHD_Result\nnot_found_page (const void *cls,\n                const char *mime,\n                struct Session *session,\n                struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  struct MHD_Response *response;\n\n  /* Unused parameters: these casts are no-ops (dead operations) used only\n     to suppress compiler warnings. Their removal does not change runtime\n     behaviour. */\n  (void) cls;     /* Unused. Silent compiler warning. */\n  (void) session; /* Unused. Silent compiler warning. */\n\n  /* Log entry and the fact that the parameters are unused (the violation\n     scenario: these are executed no-op operations). */\n  log_probe(\"enter\", cls, mime, session, connection, NULL, (enum MHD_Result) -1);\n\n  /* unsupported HTTP method */\n  response =\n    MHD_create_response_from_buffer_static (strlen (NOT_FOUND_ERROR),\n                                            (const void *) NOT_FOUND_ERROR);\n  log_probe(\"after_create\", cls, mime, session, connection, response, (enum MHD_Result) -1);\n\n  if (NULL == response)\n    return MHD_NO;\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NOT_FOUND,\n                            response);\n  log_probe(\"after_queue\", cls, mime, session, connection, response, ret);\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    log_probe(\"add_header_failed\", cls, mime, session, connection, response, ret);\n  }\n  else\n  {\n    log_probe(\"add_header_ok\", cls, mime, session, connection, response, ret);\n  }\n\n  MHD_destroy_response (response);\n  log_probe(\"exit\", cls, mime, session, connection, NULL, ret);\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The two (void) casts are the common idiom to mark parameters intentionally unused and to suppress compiler warnings; they have no side effects but are not the kind of \u2018\u2018dead code\u2019\u2019 intended by MISRA C Rule 2.2. Rule 2.2 targets code that is executed yet superfluous to program behaviour (and in practice covers unreachable/useless computations or statements that should be removed). Marking unused parameters with (void)param is a deliberate and documented no-op and is an accepted way to indicate intent \u2014 it does not constitute a MISRA 2.2 violation in this context. If you prefer to avoid the casts, you can (a) omit the parameter names in the function definition if allowed by your style, or (b) use a documented UNUSED macro; but that is a stylistic change, not a Rule 2.2 requirement."
}