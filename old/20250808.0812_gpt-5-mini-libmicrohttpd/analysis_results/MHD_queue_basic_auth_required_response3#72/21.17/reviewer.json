{
  "user_message": "An agent A claimed that the following MHD_queue_basic_auth_required_response3 code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_queue_basic_auth_required_response3.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_basic_auth_required_response3 (struct MHD_Connection *connection,\n                                         const char *realm,\n                                         int prefer_utf8,\n                                         struct MHD_Response *response)\n{\n  static const char prefix[] = \"Basic realm=\\\"\";\n  static const char suff_charset[] = \"\\\", charset=\\\"UTF-8\\\"\";\n  static const size_t prefix_len = MHD_STATICSTR_LEN_ (prefix);\n  static const size_t suff_simple_len = MHD_STATICSTR_LEN_ (\"\\\"\");\n  static const size_t suff_charset_len =\n    MHD_STATICSTR_LEN_ (suff_charset);\n  enum MHD_Result ret;\n  char *h_str;\n  size_t h_maxlen;\n  size_t suffix_len;\n  size_t realm_len;\n  size_t realm_quoted_len;\n  size_t pos;\n\n  if (NULL == response)\n    return MHD_NO;\n\n  suffix_len = (0 == prefer_utf8) ? suff_simple_len : suff_charset_len;\n  realm_len = strlen (realm);\n  h_maxlen = prefix_len + realm_len * 2 + suffix_len;\n\n  h_str = (char *) malloc (h_maxlen + 1);\n  if (NULL == h_str)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              \"Failed to allocate memory for Basic Authentication header.\\n\");\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n  memcpy (h_str, prefix, prefix_len);\n  pos = prefix_len;\n  realm_quoted_len = MHD_str_quote (realm, realm_len, h_str + pos,\n                                    h_maxlen - prefix_len - suffix_len);\n  pos += realm_quoted_len;\n  mhd_assert (pos + suffix_len <= h_maxlen);\n  if (0 == prefer_utf8)\n  {\n    h_str[pos++] = '\\\"';\n    h_str[pos++] = 0; /* Zero terminate the result */\n    mhd_assert (pos <= h_maxlen + 1);\n  }\n  else\n  {\n    /* Copy with the final zero-termination */\n    mhd_assert (pos + suff_charset_len <= h_maxlen);\n    memcpy (h_str + pos, suff_charset, suff_charset_len + 1);\n    mhd_assert (0 == h_str[pos + suff_charset_len]);\n  }\n\n  ret = MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_WWW_AUTHENTICATE,\n                                 h_str);\n  free (h_str);\n  if (MHD_NO != ret)\n  {\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_UNAUTHORIZED,\n                              response);\n  }\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to add Basic Authentication header.\\n\"));\n#endif /* HAVE_MESSAGES */\n  }\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If the caller passes a NULL realm pointer, the call to strlen(realm) will dereference a NULL pointer and thus the use of the string function strlen results in an access beyond the bounds of the object referenced by its pointer parameter (invalid pointer). This triggers a violation of MISRA C 2023 Rule 21.17.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic const char MHD_HTTP_HEADER_WWW_AUTHENTICATE[] = \"WWW-Authenticate\";\nstatic const int MHD_HTTP_UNAUTHORIZED = 401;\nstatic void mhd_assert(int expr)\n{\n    if (!expr) {\n        /* In production this might abort; here use standard assert. */\n        assert(expr);\n    }\n}\nstatic size_t MHD_str_quote(const char *src, size_t srclen, char *dst, size_t maxlen)\n{\n    size_t written = 0;\n    for (size_t i = 0; i < srclen && written < maxlen; ++i) {\n        unsigned char c = (unsigned char) src[i];\n        if ((c == '\"' || c == '\\\\') && written + 1 < maxlen) {\n            dst[written++] = '\\\\';\n            dst[written++] = (char) c;\n        } else if (c == '\"' || c == '\\\\') {\n            /* not enough room to escape; stop */\n            break;\n        } else {\n            dst[written++] = (char) c;\n        }\n    }\n    /* Do not NUL-terminate here; caller expects to append more data. */\n    return written;\n}\nstatic enum MHD_Result\nMHD_add_response_header(struct MHD_Response *response, const char *name, const char *value)\n{\n    if (NULL == response || NULL == name || NULL == value) return MHD_NO;\n    strncpy(response->header_name, name, sizeof(response->header_name) - 1);\n    response->header_name[sizeof(response->header_name) - 1] = '\\0';\n    strncpy(response->header_value, value, sizeof(response->header_value) - 1);\n    response->header_value[sizeof(response->header_value) - 1] = '\\0';\n    return MHD_YES;\n}\nstatic enum MHD_Result\nMHD_queue_response(struct MHD_Connection *connection, int status_code, struct MHD_Response *response)\n{\n    (void) connection; (void) status_code; (void) response;\n    return MHD_YES;\n}\nstatic void MHD_DLOG(void *daemon, const char *msg)\n{\n    (void) daemon;\n    fprintf(stderr, \"DLOG: %s\", msg);\n}\n\nenum MHD_Result\nMHD_queue_basic_auth_required_response3(struct MHD_Connection *connection,\n                                       const char *realm,\n                                       int prefer_utf8,\n                                       struct MHD_Response *response)\n{\n  /* Probe logging for test: record incoming parameters and control state\n     before any use of string functions that may dereference realm. This\n     logging is intentionally performed prior to strlen(realm) so that a\n     NULL-realm scenario can be observed in the log file. */\n  {\n    FILE *f = fopen(\"/tmp/logs/583.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"MHD_queue_basic_auth_required_response3 called: connection=%p, realm=%p, prefer_utf8=%d, response=%p\\n\",\n              (void *) connection, (const void *) realm, prefer_utf8, (void *) response);\n      fclose(f);\n    }\n  }\n\n  static const char prefix[] = \"Basic realm=\\\"\";\n  static const char suff_charset[] = \"\\\", charset=\\\"UTF-8\\\"\";\n  const size_t prefix_len = sizeof(prefix) - 1;\n  const size_t suff_simple_len = sizeof(\"\\\"\") - 1; /* length of '\"' */\n  const size_t suff_charset_len = sizeof(suff_charset) - 1;\n  enum MHD_Result ret;\n  char *h_str;\n  size_t h_maxlen;\n  size_t suffix_len;\n  size_t realm_len;\n  size_t realm_quoted_len;\n  size_t pos;\n\n  if (NULL == response)\n    return MHD_NO;\n\n  if (NULL == realm)\n  {\n    /* Protect against NULL realm: treat as empty string */\n    realm = \"\";\n  }\n\n  suffix_len = (0 == prefer_utf8) ? suff_simple_len : suff_charset_len;\n  realm_len = strlen(realm);\n  /* Each character might be escaped with a backslash, so allocate up to twice. */\n  h_maxlen = prefix_len + realm_len * 2 + suffix_len;\n\n  h_str = (char *) malloc(h_maxlen + 1);\n  if (NULL == h_str)\n  {\n    MHD_DLOG(connection ? connection->daemon : NULL,\n             \"Failed to allocate memory for Basic Authentication header.\\n\");\n    return MHD_NO;\n  }\n  memcpy(h_str, prefix, prefix_len);\n  pos = prefix_len;\n  realm_quoted_len = MHD_str_quote(realm, realm_len, h_str + pos,\n                                    h_maxlen - prefix_len - suffix_len);\n  pos += realm_quoted_len;\n  mhd_assert((int)(pos + suffix_len) <= (int)h_maxlen);\n  if (0 == prefer_utf8)\n  {\n    h_str[pos++] = '\"';\n    h_str[pos++] = 0; /* Zero terminate the result */\n    mhd_assert(pos <= h_maxlen + 1);\n  }\n  else\n  {\n    /* Copy with the final zero-termination */\n    mhd_assert((int)(pos + suff_charset_len) <= (int)h_maxlen);\n    memcpy(h_str + pos, suff_charset, suff_charset_len + 1);\n    mhd_assert(0 == h_str[pos + suff_charset_len]);\n  }\n\n  ret = MHD_add_response_header(response,\n                                 MHD_HTTP_HEADER_WWW_AUTHENTICATE,\n                                 h_str);\n  free(h_str);\n  if (MHD_NO != ret)\n  {\n    ret = MHD_queue_response(connection,\n                              MHD_HTTP_UNAUTHORIZED,\n                              response);\n  }\n  else\n  {\n    MHD_DLOG(connection ? connection->daemon : NULL,\n             \"Failed to add Basic Authentication header.\\n\");\n  }\n\n  /* Probe logging for test: record return value and final state */\n  {\n    FILE *f = fopen(\"/tmp/logs/583.txt\", \"a\");\n    if (f != NULL)\n    {\n      fprintf(f, \"MHD_queue_basic_auth_required_response3 returning: ret=%d\\n\", (int) ret);\n      fclose(f);\n    }\n  }\n\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In the original MHD_queue_basic_auth_required_response3 the code calls realm_len = strlen(realm) without checking whether realm is NULL. If a caller passes NULL for realm this will dereference an invalid (NULL) pointer and invoke undefined behavior. That is exactly the kind of out-of-bounds / invalid access of a string.h routine that MISRA C 2023 Rule 21.17 forbids. (MHD_str_quote later would also access realm, but the immediate strlen(realm) alone is sufficient to demonstrate the violation.) To fix, the function must ensure realm is non-NULL before calling strlen/other string.h functions (for example by treating NULL as an empty string or returning an error), or the API must be constrained/documented and enforced so the pointer can never be NULL."
}