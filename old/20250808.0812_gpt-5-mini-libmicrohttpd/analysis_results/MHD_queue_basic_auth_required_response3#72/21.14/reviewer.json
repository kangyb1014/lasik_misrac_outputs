{
  "user_message": "An agent A claimed that the following MHD_queue_basic_auth_required_response3 code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_queue_basic_auth_required_response3.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_basic_auth_required_response3 (struct MHD_Connection *connection,\n                                         const char *realm,\n                                         int prefer_utf8,\n                                         struct MHD_Response *response)\n{\n  static const char prefix[] = \"Basic realm=\\\"\";\n  static const char suff_charset[] = \"\\\", charset=\\\"UTF-8\\\"\";\n  static const size_t prefix_len = MHD_STATICSTR_LEN_ (prefix);\n  static const size_t suff_simple_len = MHD_STATICSTR_LEN_ (\"\\\"\");\n  static const size_t suff_charset_len =\n    MHD_STATICSTR_LEN_ (suff_charset);\n  enum MHD_Result ret;\n  char *h_str;\n  size_t h_maxlen;\n  size_t suffix_len;\n  size_t realm_len;\n  size_t realm_quoted_len;\n  size_t pos;\n\n  if (NULL == response)\n    return MHD_NO;\n\n  suffix_len = (0 == prefer_utf8) ? suff_simple_len : suff_charset_len;\n  realm_len = strlen (realm);\n  h_maxlen = prefix_len + realm_len * 2 + suffix_len;\n\n  h_str = (char *) malloc (h_maxlen + 1);\n  if (NULL == h_str)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              \"Failed to allocate memory for Basic Authentication header.\\n\");\n#endif /* HAVE_MESSAGES */\n    return MHD_NO;\n  }\n  memcpy (h_str, prefix, prefix_len);\n  pos = prefix_len;\n  realm_quoted_len = MHD_str_quote (realm, realm_len, h_str + pos,\n                                    h_maxlen - prefix_len - suffix_len);\n  pos += realm_quoted_len;\n  mhd_assert (pos + suffix_len <= h_maxlen);\n  if (0 == prefer_utf8)\n  {\n    h_str[pos++] = '\\\"';\n    h_str[pos++] = 0; /* Zero terminate the result */\n    mhd_assert (pos <= h_maxlen + 1);\n  }\n  else\n  {\n    /* Copy with the final zero-termination */\n    mhd_assert (pos + suff_charset_len <= h_maxlen);\n    memcpy (h_str + pos, suff_charset, suff_charset_len + 1);\n    mhd_assert (0 == h_str[pos + suff_charset_len]);\n  }\n\n  ret = MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_WWW_AUTHENTICATE,\n                                 h_str);\n  free (h_str);\n  if (MHD_NO != ret)\n  {\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_UNAUTHORIZED,\n                              response);\n  }\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to add Basic Authentication header.\\n\"));\n#endif /* HAVE_MESSAGES */\n  }\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The code uses memcmp to compare what are effectively null-terminated strings: in add_response_header_connection there is an assertion that uses memcmp(hdr->value, \"close\", 5). hdr->value is a NUL-terminated buffer (buf[pos] = 0 earlier) and the literal \"close\" is also NUL-terminated. Using memcmp for string comparison in this way violates MISRA C 2023 Rule 21.14.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\n_MHD_EXTERN enum MHD_Result\nMHD_queue_basic_auth_required_response3 (struct MHD_Connection *connection,\n                                         const char *realm,\n                                         int prefer_utf8,\n                                         struct MHD_Response *response)\n{\n  /* Probe helper: write traces to /tmp/logs/582.txt to record control path\n     and state information relevant to the memcmp usage in other routines. */\n  {\n    FILE *f = fopen(\"/tmp/logs/582.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"ENTER: MHD_queue_basic_auth_required_response3: connection=%p response=%p realm=%p prefer_utf8=%d\\n\",\n              (void *) connection, (void *) response, (const void *) realm, prefer_utf8);\n      fclose(f);\n    }\n  }\n\n  static const char prefix[] = \"Basic realm=\\\"\";\n  static const char suff_charset[] = \"\\\", charset=\\\"UTF-8\\\"\";\n  static const size_t prefix_len = MHD_STATICSTR_LEN_ (prefix);\n  static const size_t suff_simple_len = MHD_STATICSTR_LEN_ (\"\\\"\");\n  static const size_t suff_charset_len =\n    MHD_STATICSTR_LEN_ (suff_charset);\n  enum MHD_Result ret;\n  char *h_str;\n  size_t h_maxlen;\n  size_t suffix_len;\n  size_t realm_len;\n  size_t realm_quoted_len;\n  size_t pos;\n\n  if (NULL == response)\n    return MHD_NO;\n\n  suffix_len = (0 == prefer_utf8) ? suff_simple_len : suff_charset_len;\n  realm_len = strlen (realm);\n  h_maxlen = prefix_len + realm_len * 2 + suffix_len;\n\n  h_str = (char *) malloc (h_maxlen + 1);\n  if (NULL == h_str)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              \"Failed to allocate memory for Basic Authentication header.\\n\");\n#endif /* HAVE_MESSAGES */\n    {\n      FILE *f = fopen(\"/tmp/logs/582.txt\", \"a\");\n      if (NULL != f)\n      {\n        fprintf(f, \"ALLOC_FAIL: malloc returned NULL for h_maxlen=%zu\\n\", h_maxlen);\n        fclose(f);\n      }\n    }\n    return MHD_NO;\n  }\n  memcpy (h_str, prefix, prefix_len);\n  pos = prefix_len;\n  realm_quoted_len = MHD_str_quote (realm, realm_len, h_str + pos,\n                                    h_maxlen - prefix_len - suffix_len);\n  pos += realm_quoted_len;\n  mhd_assert (pos + suffix_len <= h_maxlen);\n  if (0 == prefer_utf8)\n  {\n    h_str[pos++] = '\"';\n    h_str[pos++] = 0; /* Zero terminate the result */\n    mhd_assert (pos <= h_maxlen + 1);\n  }\n  else\n  {\n    /* Copy with the final zero-termination */\n    mhd_assert (pos + suff_charset_len <= h_maxlen);\n    memcpy (h_str + pos, suff_charset, suff_charset_len + 1);\n    mhd_assert (0 == h_str[pos + suff_charset_len]);\n  }\n\n  /* Probe: log the constructed header and relevant state before calling\n     MHD_add_response_header. This helps to trace the control flow that may\n     eventually reach add_response_header_connection where memcmp is used to\n     compare the token \"close\" against an existing header value. */\n  {\n    FILE *f = fopen(\"/tmp/logs/582.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"BUILT_HEADER: h_str=\\\"%s\\\" realm_len=%zu realm_quoted_len=%zu prefix_len=%zu suffix_len=%zu\\n\",\n              h_str, realm_len, realm_quoted_len, prefix_len, suffix_len);\n      fprintf(f, \"STATE: connection=%p connection->state=%d response=%p response->flags_auto=0x%zx\\n\",\n              (void *) connection,\n              (NULL != connection) ? (int) connection->state : -1,\n              (void *) response,\n              (size_t) response->flags_auto);\n      fclose(f);\n    }\n  }\n\n  ret = MHD_add_response_header (response,\n                                 MHD_HTTP_HEADER_WWW_AUTHENTICATE,\n                                 h_str);\n\n  /* Log the result of adding the header. If MHD_add_response_header would\n     internally call add_response_header_connection (for the \"Connection\"\n     header) then that routine contains an assertion that uses memcmp to\n     compare a NUL-terminated header value against the literal \"close\".\n     The log below captures the information useful to reproduce that path. */\n  {\n    FILE *f = fopen(\"/tmp/logs/582.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"ADD_HEADER_RET: ret=%d after adding WWW-Authenticate header\\n\",\n              (int) ret);\n      if (MHD_NO == ret)\n      {\n        fprintf(f, \"NOTE: MHD_add_response_header returned MHD_NO; this may indicate\\n\");\n        fprintf(f, \"      a header normalization / allocation failure. If the header was\\n\");\n        fprintf(f, \"      a \\\"Connection\\\" header, add_response_header_connection would\\n\");\n        fprintf(f, \"      perform a memcmp(hdr->value, \\\"close\\\", 5) to check for token\\n\");\n        fprintf(f, \"      presence. That memcmp compares a NUL-terminated buffer and thus\\n\");\n        fprintf(f, \"      violates MISRA C 2023 Rule 21.14.\\n\");\n      }\n      fclose(f);\n    }\n  }\n\n  free (h_str);\n  if (MHD_NO != ret)\n  {\n    ret = MHD_queue_response (connection,\n                              MHD_HTTP_UNAUTHORIZED,\n                              response);\n  }\n  else\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to add Basic Authentication header.\\n\"));\n#endif /* HAVE_MESSAGES */\n  }\n\n  /* Final trace of return value */\n  {\n    FILE *f = fopen(\"/tmp/logs/582.txt\", \"a\");\n    if (NULL != f)\n    {\n      fprintf(f, \"EXIT: MHD_queue_basic_auth_required_response3 returning %d\\n\", (int) ret);\n      fclose(f);\n    }\n  }\n\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not correct as applied to the presented function. The MHD_queue_basic_auth_required_response3 implementation itself does not call memcmp; it uses memcpy and builds a NUL-terminated header string which it passes to MHD_add_response_header. The memcmp call that Agent A references (memcmp(hdr->value, \"close\", 5)) is said to occur in add_response_header_connection \u2014 a different routine \u2014 so any MISRA 21.14 violation would belong to that routine, not to MHD_queue_basic_auth_required_response3.\n\nTwo additional points:\n- MISRA C 2023 Rule 21.14 indeed forbids using memcmp to compare null-terminated strings. If add_response_header_connection uses memcmp to compare a NUL-terminated header value against the literal \"close\", that would be a violation in that routine (it should use strcmp/strncmp or otherwise ensure a non-string fixed-length comparison).\n- Agent A\u2019s supplied probe code failed to compile and produced no runtime evidence tying a memcmp misuse to this function, so there is no proof in the submission that MHD_queue_basic_auth_required_response3 itself violates the rule.\n\nRecommendation: inspect add_response_header_connection (or any other routine that actually calls memcmp) and, if it compares a null-terminated string using memcmp, replace that with an appropriate string comparison (strcmp/strncmp) or otherwise ensure the comparison is on non-null-terminated raw memory."
}