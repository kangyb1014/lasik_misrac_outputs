{
  "user_message": "Target function code is:\n```c\nstatic void *\nrun_usock (void *cls)\n{\n  struct WsData *ws = cls;\n  struct MHD_UpgradeResponseHandle *urh = ws->urh;\n  unsigned char buf[2048];\n  unsigned char *msg;\n  char *text;\n  ssize_t got;\n  int type;\n  int i;\n\n  make_blocking (ws->sock);\n  while (1)\n  {\n    got = recv (ws->sock, (void *) buf, sizeof (buf), 0);\n    if (0 >= got)\n    {\n      break;\n    }\n    msg = ws_receive_frame (buf, &got, &type);\n    if (NULL == msg)\n    {\n      break;\n    }\n    if (type == WS_OPCODE_TEXT_FRAME)\n    {\n      ssize_t sent;\n      int buf_size;\n      buf_size = snprintf (NULL, 0, \"User#%d: %s\", (int) ws->sock, msg);\n      if (0 < buf_size)\n      {\n        text = malloc ((size_t) buf_size + 1);\n        if (NULL != text)\n        {\n          if (snprintf (text, (size_t) buf_size + 1,\n                        \"User#%d: %s\", (int) ws->sock, msg) == buf_size)\n            sent = ws_send_frame (ws->sock, text, (size_t) buf_size);\n          else\n            sent = -1;\n          free (text);\n        }\n        else\n          sent = -1;\n      }\n      else\n        sent = -1;\n      free (msg);\n      if (-1 == sent)\n      {\n        break;\n      }\n    }\n    else\n    {\n      if (type == WS_OPCODE_CON_CLOSE_FRAME)\n      {\n        free (msg);\n        break;\n      }\n    }\n  }\n  if (0 != pthread_mutex_lock (&MUTEX))\n    abort ();\n  for (i = 0; i < MAX_CLIENTS; i++)\n  {\n    if (CLIENT_SOCKS[i] == ws->sock)\n    {\n      CLIENT_SOCKS[i] = MHD_INVALID_SOCKET;\n      break;\n    }\n  }\n  if (0 != pthread_mutex_unlock (&MUTEX))\n    abort ();\n  free (ws);\n  MHD_upgrade_action (urh, MHD_UPGRADE_ACTION_CLOSE);\n  return NULL;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'run_usock': {'callees': ['make_blocking', 'send_all', 'MHD_upgrade_action', 'ws_receive_frame', 'ws_send_frame'], 'callers': []}, 'make_blocking': {'callees': [], 'callers': ['send_all', 'run_usock']}, 'send_all': {'callees': ['make_blocking'], 'callers': ['run_usock', 'ws_send_frame']}, 'MHD_upgrade_action': {'callees': ['MHD_upgraded_connection_mark_app_closed_'], 'callers': ['run_usock', 'uh_cb']}, 'ws_receive_frame': {'callees': [], 'callers': ['run_usock']}, 'ws_send_frame': {'callees': ['send_all'], 'callers': ['run_usock']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA for loop shall be well-formed. The three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop count and optionally loop flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with essentially Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MAX_CLIENTS",
    "CLIENT_SOCKS",
    "MHD_INVALID_SOCKET",
    "struct WsData (definition, at least field: sock)",
    "MUTEX",
    "pthread_mutex_lock",
    "pthread_mutex_unlock"
  ],
  "explanation": "Needed symbols and why they are required to judge whether the for loop is MISRA-well-formed:\n\n- MAX_CLIENTS\n  - The second clause of the for loop is \"i < MAX_CLIENTS\". We must confirm MAX_CLIENTS is an unmodified compile-time constant (macro or const) or otherwise not modified by the loop body or by called functions. If MAX_CLIENTS can be changed in the body (or by functions called in the loop body), that would violate the rule.\n\n- CLIENT_SOCKS\n  - CLIENT_SOCKS is read and written in the loop body (CLIENT_SOCKS[i] == ws->sock and CLIENT_SOCKS[i] = MHD_INVALID_SOCKET). We need its declaration/type to ensure that indexing has no hidden side-effects (e.g. it is not a macro/function), to confirm the object modified in the body is not also referenced in the loop clauses, and to check aliasing/volatile qualifiers that could affect the analysis.\n\n- MHD_INVALID_SOCKET\n  - The right-hand side of the assignment in the body. We must verify it is a simple constant/macros and does not perform side-effects (macro expansion), otherwise the assignment could have unexpected effects relevant to the MISRA clause about objects used/modified.\n\n- struct WsData (definition, at least field: sock)\n  - The loop body compares CLIENT_SOCKS[i] to ws->sock. We need the definition to confirm ws->sock is a distinct object (type, qualifiers) and to ensure it is not an alias or macro that could be modified in the loop body or have side-effects that affect the loop clauses.\n\n- MUTEX\n  - The for loop is executed between pthread_mutex_lock(&MUTEX) and pthread_mutex_unlock(&MUTEX). The MUTEX declaration helps determine whether a lock is actually established around the loop and whether other threads can concurrently modify CLIENT_SOCKS or related objects; while MISRA's loop-formation clauses are syntactic, concurrent modification could make the behavior of objects used in clauses depend on actions in the body or other threads, so the presence/semantics of the mutex are relevant to a full behavioral analysis.\n\n- pthread_mutex_lock / pthread_mutex_unlock (declarations)\n  - To verify the lock/unlock calls succeed and that the loop is indeed inside a critical section. Their semantics determine whether other threads could modify objects referenced in the loop clauses while the loop is executing.\n\nNote: The above symbols are the minimal set needed to determine whether the loop's three clauses use or modify objects that are also modified in the loop body (and to rule out hidden side-effects via macros, aliasing, volatile, or concurrent modification). If any of these symbols expand to macros or reference other functions/objects, those definitions should also be provided for a complete analysis."
}