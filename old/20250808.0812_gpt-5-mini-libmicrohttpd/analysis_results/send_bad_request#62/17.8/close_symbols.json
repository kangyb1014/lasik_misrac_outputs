{
  "user_message": "Target function code is:\n```c\nstatic enum MHD_Result\nsend_bad_request (struct MHD_Connection *con)\n{\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n\n  res =\n    MHD_create_response_from_buffer_static (strlen (BAD_REQUEST_PAGE),\n                                            (const void *) BAD_REQUEST_PAGE);\n  ret = MHD_queue_response (con, MHD_HTTP_BAD_REQUEST, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'send_bad_request': {'callees': ['MHD_create_response_from_buffer_static', 'MHD_queue_response', 'MHD_destroy_response'], 'callers': ['ahc_cb']}, 'MHD_create_response_from_buffer_static': {'callees': ['MHD_create_response_from_buffer_with_free_callback_cls'], 'callers': ['transmit_error_response_len', 'main', 'ahc_echo', 'answer_to_connection', 'serve_simple_form', 'not_found_page', 'create_response', 'reply_with_page_not_found', 'reply_with_auth_required', 'reply_with_forbidden', 'reply_with_area1_pages', 'reply_with_area2_pages', 'reply_with_main_page', 'reply_with_method_not_supported', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'create_response_object', 'answer_unique_tiny_response', 'answer_unique_dyn_response', 'send_page']}, 'MHD_queue_response': {'callees': ['MHD_DLOG', 'is_reply_body_needed', 'MHD_increment_response_rc', 'MHD_connection_handle_idle', 'MHD_update_last_activity_'], 'callers': ['transmit_error_response_len', 'queue_auth_required_response3_inner', 'MHD_queue_basic_auth_required_response3', 'ahc_echo', 'answer_to_connection', 'serve_simple_form', 'fill_v1_form', 'fill_v1_v2_form', 'not_found_page', 'create_response', 'return_directory_response', 'generate_page', 'reply_with_page_not_found', 'reply_with_forbidden', 'reply_with_area1_pages', 'reply_with_area2_pages', 'reply_with_main_page', 'reply_with_method_not_supported', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'ahc_cb', 'answer_shared_response', 'answer_single_response', 'answer_unique_empty_response', 'answer_unique_tiny_response', 'answer_unique_dyn_response', 'send_page']}, 'MHD_destroy_response': {'callees': ['__builtin_unreachable'], 'callers': ['MHD_connection_close_', 'transmit_error_response_len', 'cleanup_connection', 'connection_reset', 'MHD_connection_handle_idle', 'thread_main_handle_connection', 'MHD_cleanup_connections', 'MHD_create_response_for_upgrade', 'main', 'ahc_echo', 'answer_to_connection', 'serve_simple_form', 'fill_v1_form', 'fill_v1_v2_form', 'not_found_page', 'create_response', 'update_cached_response', 'generate_page', 'reply_with_page_not_found', 'reply_with_auth_required', 'reply_with_forbidden', 'reply_with_area1_pages', 'reply_with_area2_pages', 'reply_with_main_page', 'reply_with_method_not_supported', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'ahc_cb', 'init_data', 'deinit_data', 'answer_unique_empty_response', 'answer_unique_tiny_response', 'answer_unique_dyn_response', 'send_page']}, 'ahc_cb': {'callees': ['MHD_lookup_connection_value', 'is_websocket_request', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'MHD_lookup_connection_value_n', 'ws_get_accept_value', 'MHD_create_response_for_upgrade', 'MHD_add_response_header', 'MHD_destroy_response', 'MHD_queue_response'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_queue_response (declaration or macro definition)",
    "MHD_create_response_from_buffer_static (declaration/definition)",
    "MHD_destroy_response (declaration/definition)",
    "BAD_REQUEST_PAGE (macro/constant definition)",
    "MHD_HTTP_BAD_REQUEST (macro/constant definition)",
    "strlen (prototype or header inclusion)",
    "struct MHD_Connection (type definition)",
    "struct MHD_Response (type definition)",
    "enum MHD_Result (definition)"
  ],
  "explanation": "- MHD_queue_response: This is the only call in send_bad_request that receives the parameter 'con'. To prove the function does not modify the parameter variable (the pointer itself), you must see MHD_queue_response's prototype or macro body to ensure it is a normal function taking the pointer by value or, if a macro, that it does not perform an assignment to its first argument (which could modify the caller's parameter variable).\n- MHD_create_response_from_buffer_static: Included to confirm it does not touch or implicitly modify 'con' (and to check whether it is a macro that could have unexpected side effects). It does not take 'con' but its definition rules out surprising interactions.\n- MHD_destroy_response: Included to confirm it does not modify 'con' (again to rule out macro/side-effect possibilities).\n- BAD_REQUEST_PAGE: The literal/variable passed to MHD_create_response_from_buffer_static \u2014 include its definition to rule out any macro nastiness that could affect parameter handling (defensive completeness).\n- MHD_HTTP_BAD_REQUEST: The status-code constant passed to MHD_queue_response; include its definition to be sure no macro aliasing could expand into code that touches 'con'.\n- strlen: Provide the prototype/header to ensure it is the standard library function (no macro redefinition that could affect 'con').\n- struct MHD_Connection: The parameter's type definition is needed to check whether the parameter is declared in an unusual way (e.g., typedefs, const qualifiers) and to understand whether any called function could take a pointer-to-pointer to that type.\n- struct MHD_Response: Response object type used in this function \u2014 include to verify that response-manipulation functions operate only on the response and cannot legally alter the 'con' pointer in some hidden way.\n- enum MHD_Result: Return type definition so the analyzer has the complete signature information for send_bad_request and called functions.\n\nNotes: The essential symbol to inspect is MHD_queue_response (to ensure no macro or definition assigns to its first argument). The other symbols are included to rule out surprising macro redefinitions or side effects and to provide complete type/signature context for a conservative MISRA C analysis."
}