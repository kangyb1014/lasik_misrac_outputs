{
  "user_message": "An agent A claimed that the following is_websocket_request code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer..\n</misra_rule>\n<target_code>\nHere is the original code of is_websocket_request.\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The parameter 'con' is declared as struct MHD_Connection *con even though the function does not inspect or modify the object pointed to. According to MISRA C 2023 Rule 8.13, a pointer should point to a const-qualified type whenever possible, so 'con' could be declared const (e.g. const struct MHD_Connection *con). This missing const qualification is a violation unless the function signature is mandated by an external API requiring a non-const pointer.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstruct MHD_Connection { int dummy; };\nstatic const char WS_UPGRADE_STR[] = \"websocket\";\nstatic void log_violation(const struct MHD_Connection *con, const char *upg_header,\n                          const char *con_header, int decision)\n{\n    FILE *fp = fopen(\"/tmp/logs/483.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"is_websocket_request invoked\\n\");\n        fprintf(fp, \"  con pointer: %p\\n\", (void *)con);\n        fprintf(fp, \"  upg_header: %s\\n\", (upg_header != NULL) ? upg_header : \"(null)\");\n        fprintf(fp, \"  con_header: %s\\n\", (con_header != NULL) ? con_header : \"(null)\");\n        fprintf(fp, \"  decision: %s\\n\", (decision == (int)MHD_YES) ? \"MHD_YES\" : \"MHD_NO\");\n        fprintf(fp, \"---\\n\");\n        (void) fclose(fp);\n    }\n}\n\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n  /* The original code used (void) con to silence unused warnings. Here we\n     actually log the pointer value for diagnostics, so we do not cast it away. */\n\n  int decision = ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_STR))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? (int) MHD_YES\n         : (int) MHD_NO;\n\n  /* Log control path and state information to help demonstrate the violation\n     scenario (that 'con' is not const-qualified though it is not modified). */\n  log_violation(con, upg_header, con_header, decision);\n\n  return (enum MHD_Result)decision;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C 2023 Rule 8.13 requires a pointer to point to a const-qualified type whenever possible. In the shown code the parameter con is not inspected or modified (original code even casts it away with (void) con), so it could be declared as const struct MHD_Connection *con. Therefore, absent an overriding requirement, the non-const declaration is contrary to the rule. The only valid justification for keeping it non-const would be that the function prototype must match an external API or callback type that requires a non-const pointer; the agent explicitly noted that caveat. (The provided test harness failed to compile because of missing/unspecified MHD types/macros, but that does not affect the applicability of the rule.) Given the above, the agent\u2019s report is correct: this is a violation of Rule 8.13 unless the signature is mandated by an external API."
}