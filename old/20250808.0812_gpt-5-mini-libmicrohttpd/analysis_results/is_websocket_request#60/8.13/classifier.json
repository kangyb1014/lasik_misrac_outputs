{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified is_websocket_request code that contains useful probe functions that print useful logs to a file \"/tmp/logs/483.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of is_websocket_request as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of is_websocket_request:\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function is_websocket_request:\nint type\n...\nint type\n</additional code>\nJudge whether the above is_websocket_request code violates the rule 8.13 or not.",
  "is_rule_violated": true,
  "scenario": "The parameter 'con' is declared as struct MHD_Connection *con even though the function does not inspect or modify the object pointed to. According to MISRA C 2023 Rule 8.13, a pointer should point to a const-qualified type whenever possible, so 'con' could be declared const (e.g. const struct MHD_Connection *con). This missing const qualification is a violation unless the function signature is mandated by an external API requiring a non-const pointer.",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Minimal supporting definitions so this file is self-contained and compilable. */\nstruct MHD_Connection { int dummy; };\n\nenum MHD_Result { MHD_NO = 0, MHD_YES = 1 };\n\nstatic const char WS_UPGRADE_VALUE[] = \"websocket\";\n\n/* Helper that logs the control path and key state information. Uses const-qualified\n   parameters where appropriate (no modification performed). */\nstatic void log_violation(const struct MHD_Connection *con, const char *upg_header,\n                          const char *con_header, int decision)\n{\n    FILE *fp = fopen(\"/tmp/logs/483.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"is_websocket_request invoked\\n\");\n        fprintf(fp, \"  con pointer: %p\\n\", (void *)con);\n        fprintf(fp, \"  upg_header: %s\\n\", (upg_header != NULL) ? upg_header : \"(null)\");\n        fprintf(fp, \"  con_header: %s\\n\", (con_header != NULL) ? con_header : \"(null)\");\n        fprintf(fp, \"  decision: %s\\n\", (decision == (int)MHD_YES) ? \"MHD_YES\" : \"MHD_NO\");\n        fprintf(fp, \"---\\n\");\n        (void) fclose(fp);\n    }\n}\n\n/* Original function preserved as closely as possible. Note: 'con' remains a\n   non-const pointer (the subject of the Rule 8.13 violation) to avoid changing\n   the original signature. */\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n  /* The original code used (void) con to silence unused warnings. Here we\n     actually log the pointer value for diagnostics, so we do not cast it away. */\n\n  int decision = ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? (int) MHD_YES\n         : (int) MHD_NO;\n\n  /* Log control path and state information to help demonstrate the violation\n     scenario (that 'con' is not const-qualified though it is not modified). */\n  log_violation(con, upg_header, con_header, decision);\n\n  return (enum MHD_Result)decision;\n}\n"
}