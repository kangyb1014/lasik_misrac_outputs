{
  "user_message": "An agent A claimed that the following is_websocket_request code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of is_websocket_request.\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The cast-to-void statement '(void) con;' inside is_websocket_request is an executed no-op whose removal would not affect program behaviour. That statement is therefore dead code (an operation executed but having no effect) and violates MISRA C 2023 Rule 2.2.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstruct MHD_Connection;\nstatic const char WS_UPGRADE_VALUE[] = \"websocket\";\n\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n  FILE *log;\n  int has_upg;\n  int has_con;\n  int upg_eq;\n  int con_contains_upgrade;\n  enum MHD_Result result;\n\n  /* Log entry and the parameters to help trace the violation scenario */\n  log = fopen(\"/tmp/logs/482.txt\", \"a\");\n  if (log != NULL)\n  {\n    fprintf(log, \"is_websocket_request: entered; con=%p upg_header=%s con_header=%s\\n\",\n            (void *) con,\n            (upg_header != NULL) ? upg_header : \"(NULL)\",\n            (con_header != NULL) ? con_header : \"(NULL)\");\n    fprintf(log, \"Note: the next statement '(void) con;' is a no-op (used to silence warnings)\\n\");\n    fclose(log);\n  }\n\n  (void) con;  /* Unused. Silent compiler warning. (This cast-to-void is executed but has no effect.) */\n\n  /* Preserve original logic while capturing intermediate boolean states for logging. */\n  has_upg = (upg_header != NULL) ? 1 : 0;\n  has_con = (con_header != NULL) ? 1 : 0;\n  upg_eq = (upg_header != NULL) ? (0 == strcmp (upg_header, WS_UPGRADE_VALUE)) : 0;\n  con_contains_upgrade = (con_header != NULL) ? (NULL != strstr (con_header, \"Upgrade\")) : 0;\n\n  result = (has_upg && has_con && upg_eq && con_contains_upgrade) ? MHD_YES : MHD_NO;\n\n  /* Log computed internal state and the chosen result to demonstrate the control path. */\n  log = fopen(\"/tmp/logs/482.txt\", \"a\");\n  if (log != NULL)\n  {\n    fprintf(log, \"is_websocket_request: has_upg=%d has_con=%d upg_eq=%d con_contains_upgrade=%d result=%d\\n\",\n            has_upg, has_con, upg_eq, con_contains_upgrade, (int) result);\n    fclose(log);\n  }\n\n  return result;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A's report is not correct. The statement (void) con; is an idiomatic way to indicate an unused parameter and to suppress a compiler warning. Although the cast-to-void expression has no observable runtime effect (and thus, taken strictly by the bare wording, could be seen as having no effect if removed), MISRA's intent for Rule 2.2 is to prohibit genuinely redundant/unused code that should be removed because it serves no purpose and may hide faults. The (void) parameter-cast is a deliberate, documented no-op to convey intent and to suppress spurious diagnostics; this is a recognized and accepted idiom and not a problematic piece of dead code in practice. Therefore the claim that this specific statement constitutes a Rule 2.2 violation is incorrect."
}