{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n  FILE *log;\n  int has_upg;\n  int has_con;\n  int upg_eq;\n  int con_contains_upgrade;\n  enum MHD_Result result;\n\n  /* Log entry and the parameters to help trace the violation scenario */\n  log = fopen(\"/tmp/logs/482.txt\", \"a\");\n  if (log != NULL)\n  {\n    fprintf(log, \"is_websocket_request: entered; con=%p upg_header=%s con_header=%s\\n\",\n            (void *) con,\n            (upg_header != NULL) ? upg_header : \"(NULL)\",\n            (con_header != NULL) ? con_header : \"(NULL)\");\n    fprintf(log, \"Note: the next statement '(void) con;' is a no-op (used to silence warnings)\\n\");\n    fclose(log);\n  }\n\n  (void) con;  /* Unused. Silent compiler warning. (This cast-to-void is executed but has no effect.) */\n\n  /* Preserve original logic while capturing intermediate boolean states for logging. */\n  has_upg = (upg_header != NULL) ? 1 : 0;\n  has_con = (con_header != NULL) ? 1 : 0;\n  upg_eq = (upg_header != NULL) ? (0 == strcmp (upg_header, WS_UPGRADE_VALUE)) : 0;\n  con_contains_upgrade = (con_header != NULL) ? (NULL != strstr (con_header, \"Upgrade\")) : 0;\n\n  result = (has_upg && has_con && upg_eq && con_contains_upgrade) ? MHD_YES : MHD_NO;\n\n  /* Log computed internal state and the chosen result to demonstrate the control path. */\n  log = fopen(\"/tmp/logs/482.txt\", \"a\");\n  if (log != NULL)\n  {\n    fprintf(log, \"is_websocket_request: has_upg=%d has_con=%d upg_eq=%d con_contains_upgrade=%d result=%d\\n\",\n            has_upg, has_con, upg_eq, con_contains_upgrade, (int) result);\n    fclose(log);\n  }\n\n  return result;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpsvxoegdi/src/build-aux/missing: line 81: makeinfo: command not found\nWARNING: 'makeinfo' is missing on your system.\n         You should only need it if you modified a '.texi' file, or\n         any other file indirectly affecting the aspect of the manual.\n         You might want to install the Texinfo package:\n         <https://www.gnu.org/software/texinfo/>\n         The spurious makeinfo call might also be the consequence of\n         using a buggy 'make' (AIX, DU, IRIX), in which case you might\n         want to install GNU make:\n         <https://www.gnu.org/software/make/>\nmake[3]: *** [Makefile:543: libmicrohttpd.info] Error 127\nmake[2]: *** [Makefile:764: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of is_websocket_request as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Opaque connection type (we don't need its definition here). */\nstruct MHD_Connection;\n\n/* Minimal enum to represent results (match typical libmicrohttpd semantics). */\nenum MHD_Result { MHD_NO = 0, MHD_YES = 1 };\n\n/* Keep as a variable rather than a macro to satisfy the \"no macros\" constraint. */\nstatic const char WS_UPGRADE_VALUE[] = \"websocket\";\n\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n  FILE *log;\n  int has_upg;\n  int has_con;\n  int upg_eq;\n  int con_contains_upgrade;\n  enum MHD_Result result;\n\n  /* Log entry and the parameters to help trace the violation scenario */\n  log = fopen(\"/tmp/logs/482.txt\", \"a\");\n  if (log != NULL)\n  {\n    fprintf(log, \"is_websocket_request: entered; con=%p upg_header=%s con_header=%s\\n\",\n            (void *) con,\n            (upg_header != NULL) ? upg_header : \"(NULL)\",\n            (con_header != NULL) ? con_header : \"(NULL)\");\n    fprintf(log, \"Note: the next statement '(void) con;' is a no-op (used to silence warnings)\\n\");\n    fclose(log);\n  }\n\n  (void) con;  /* Unused. Silent compiler warning. (This cast-to-void is executed but has no effect.) */\n\n  /* Preserve original logic while capturing intermediate boolean states for logging. */\n  has_upg = (upg_header != NULL) ? 1 : 0;\n  has_con = (con_header != NULL) ? 1 : 0;\n  upg_eq = (upg_header != NULL) ? (0 == strcmp (upg_header, WS_UPGRADE_VALUE)) : 0;\n  con_contains_upgrade = (con_header != NULL) ? (NULL != strstr (con_header, \"Upgrade\")) : 0;\n\n  result = (has_upg && has_con && upg_eq && con_contains_upgrade) ? MHD_YES : MHD_NO;\n\n  /* Log computed internal state and the chosen result to demonstrate the control path. */\n  log = fopen(\"/tmp/logs/482.txt\", \"a\");\n  if (log != NULL)\n  {\n    fprintf(log, \"is_websocket_request: has_upg=%d has_con=%d upg_eq=%d con_contains_upgrade=%d result=%d\\n\",\n            has_upg, has_con, upg_eq, con_contains_upgrade, (int) result);\n    fclose(log);\n  }\n\n  return result;\n}\n",
  "explanation": "I added the necessary includes and minimal type definitions so the function can compile standalone: a forward declaration for struct MHD_Connection, an enum MHD_Result with MHD_NO and MHD_YES values, and a static const char WS_UPGRADE_VALUE to replace the missing macro. No other logic was changed; the function body and logging remain intact."
}