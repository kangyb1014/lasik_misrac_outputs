{
  "user_message": "Target function code is:\n```c\nstatic enum MHD_Result\nis_websocket_request (struct MHD_Connection *con, const char *upg_header,\n                      const char *con_header)\n{\n\n  (void) con;  /* Unused. Silent compiler warning. */\n\n  return ((upg_header != NULL) && (con_header != NULL)\n          && (0 == strcmp (upg_header, WS_UPGRADE_VALUE))\n          && (NULL != strstr (con_header, \"Upgrade\")))\n         ? MHD_YES\n         : MHD_NO;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'is_websocket_request': {'callees': [], 'callers': ['ahc_cb']}, 'ahc_cb': {'callees': ['MHD_lookup_connection_value', 'is_websocket_request', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'MHD_lookup_connection_value_n', 'ws_get_accept_value', 'MHD_create_response_for_upgrade', 'MHD_add_response_header', 'MHD_destroy_response', 'MHD_queue_response'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_Result",
    "MHD_YES",
    "MHD_NO",
    "MHD_Connection",
    "WS_UPGRADE_VALUE",
    "strcmp",
    "strstr",
    "NULL"
  ],
  "explanation": "Each listed symbol is needed so the analyzer can inspect its definition/expansion to detect any compiler-specific language extensions (e.g. __attribute__, statement-expressions, builtin macros, non-standard storage-class or calling-convention annotations) that would violate the MISRA rule.\n\n- MHD_Result: the enum type must be examined to ensure it is a plain standard enum and does not use compiler-specific decorations or extensions.\n- MHD_YES, MHD_NO: these enum constants (or macros) must be verified that they are ordinary enum members or integer macros and not implemented via compiler-specific constructs.\n- MHD_Connection: the struct definition must be checked for non-standard members (unnamed bitfields, compiler-specific attributes, packed/align pragmas, flexible-array extensions implemented as non-standard, etc.).\n- WS_UPGRADE_VALUE: this macro/constant must be expanded to ensure it is a simple literal or standard construct and not defined using compiler extensions (statement-expression ({...}), token-pasting tricks, or compiler builtin magic).\n- strcmp, strstr: these standard library symbols may be implemented as macros or compiler builtins; their declarations/definitions (or header macros that map to builtins) must be checked to ensure no non-standard compiler extensions are being relied on in this translation unit.\n- NULL: the NULL macro expansion should be checked in case the implementation defines it using a non-standard or extension-based construct.\n\nOnly these symbols are required to decide if the target function itself (and the identifiers it uses) involves language extensions."
}