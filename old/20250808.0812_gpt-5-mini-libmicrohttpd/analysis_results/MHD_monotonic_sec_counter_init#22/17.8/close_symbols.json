{
  "user_message": "Target function code is:\n```c\nvoid\nMHD_monotonic_sec_counter_init (void)\n{\n#ifdef HAVE_CLOCK_GET_TIME\n  mach_timespec_t cur_time;\n#endif /* HAVE_CLOCK_GET_TIME */\n  enum _MHD_mono_clock_source mono_clock_source = _MHD_CLOCK_NO_SOURCE;\n#ifdef HAVE_CLOCK_GETTIME\n  struct timespec ts;\n\n  mono_clock_id = _MHD_UNWANTED_CLOCK;\n#endif /* HAVE_CLOCK_GETTIME */\n#ifdef HAVE_CLOCK_GET_TIME\n  mono_clock_service = _MHD_INVALID_CLOCK_SERV;\n#endif /* HAVE_CLOCK_GET_TIME */\n\n  /* just a little syntactic trick to get the\n     various following ifdef's to work out nicely */\n  if (0)\n  {\n    (void) 0; /* Mute possible compiler warning */\n  }\n  else\n#ifdef HAVE_CLOCK_GETTIME\n#ifdef CLOCK_MONOTONIC_COARSE\n  /* Linux-specific fast value-getting clock */\n  /* Can be affected by frequency adjustment and don't count time in suspend, */\n  /* but preferred since it's fast */\n  if (0 == clock_gettime (CLOCK_MONOTONIC_COARSE,\n                          &ts))\n  {\n    mono_clock_id = CLOCK_MONOTONIC_COARSE;\n    mono_clock_start = ts.tv_sec;\n    mono_clock_source = _MHD_CLOCK_GETTIME;\n  }\n  else\n#endif /* CLOCK_MONOTONIC_COARSE */\n#ifdef CLOCK_MONOTONIC_FAST\n  /* FreeBSD/DragonFly fast value-getting clock */\n  /* Can be affected by frequency adjustment, but preferred since it's fast */\n  if (0 == clock_gettime (CLOCK_MONOTONIC_FAST,\n                          &ts))\n  {\n    mono_clock_id = CLOCK_MONOTONIC_FAST;\n    mono_clock_start = ts.tv_sec;\n    mono_clock_source = _MHD_CLOCK_GETTIME;\n  }\n  else\n#endif /* CLOCK_MONOTONIC_COARSE */\n#ifdef CLOCK_MONOTONIC_RAW_APPROX\n  /* Darwin-specific clock */\n  /* Not affected by frequency adjustment, returns clock value cached at\n   * context switch. Can be \"milliseconds old\", but it's fast. */\n  if (0 == clock_gettime (CLOCK_MONOTONIC_RAW_APPROX,\n                          &ts))\n  {\n    mono_clock_id = CLOCK_MONOTONIC_RAW_APPROX;\n    mono_clock_start = ts.tv_sec;\n    mono_clock_source = _MHD_CLOCK_GETTIME;\n  }\n  else\n#endif /* CLOCK_MONOTONIC_RAW */\n#ifdef CLOCK_MONOTONIC_RAW\n  /* Linux and Darwin clock */\n  /* Not affected by frequency adjustment,\n   * on Linux don't count time in suspend */\n  if (0 == clock_gettime (CLOCK_MONOTONIC_RAW,\n                          &ts))\n  {\n    mono_clock_id = CLOCK_MONOTONIC_RAW;\n    mono_clock_start = ts.tv_sec;\n    mono_clock_source = _MHD_CLOCK_GETTIME;\n  }\n  else\n#endif /* CLOCK_MONOTONIC_RAW */\n#ifdef CLOCK_BOOTTIME\n  /* Count time in suspend on Linux so it's real monotonic, */\n  /* but can be slower value-getting than other clocks */\n  if (0 == clock_gettime (CLOCK_BOOTTIME,\n                          &ts))\n  {\n    mono_clock_id = CLOCK_BOOTTIME;\n    mono_clock_start = ts.tv_sec;\n    mono_clock_source = _MHD_CLOCK_GETTIME;\n  }\n  else\n#endif /* CLOCK_BOOTTIME */\n#ifdef CLOCK_MONOTONIC\n  /* Monotonic clock */\n  /* Widely supported, may be affected by frequency adjustment */\n  /* On Linux it's not truly monotonic as it doesn't count time in suspend */\n  if (0 == clock_gettime (CLOCK_MONOTONIC,\n                          &ts))\n  {\n    mono_clock_id = CLOCK_MONOTONIC;\n    mono_clock_start = ts.tv_sec;\n    mono_clock_source = _MHD_CLOCK_GETTIME;\n  }\n  else\n#endif /* CLOCK_MONOTONIC */\n#ifdef CLOCK_UPTIME\n  /* non-Linux clock */\n  /* Doesn't count time in suspend */\n  if (0 == clock_gettime (CLOCK_UPTIME,\n                          &ts))\n  {\n    mono_clock_id = CLOCK_UPTIME;\n    mono_clock_start = ts.tv_sec;\n    mono_clock_source = _MHD_CLOCK_GETTIME;\n  }\n  else\n#endif /* CLOCK_BOOTTIME */\n#endif /* HAVE_CLOCK_GETTIME */\n#ifdef HAVE_CLOCK_GET_TIME\n  /* Darwin-specific monotonic clock */\n  /* Should be monotonic as clock_set_time function always unconditionally */\n  /* failed on latest kernels */\n  if ( (KERN_SUCCESS == host_get_clock_service (mach_host_self (),\n                                                SYSTEM_CLOCK,\n                                                &mono_clock_service)) &&\n       (KERN_SUCCESS == clock_get_time (mono_clock_service,\n                                        &cur_time)) )\n  {\n    mono_clock_start = cur_time.tv_sec;\n    mono_clock_source = _MHD_CLOCK_GET_TIME;\n  }\n  else\n#endif /* HAVE_CLOCK_GET_TIME */\n#ifdef _WIN32\n#if _WIN32_WINNT >= 0x0600\n  /* W32 Vista or later specific monotonic clock */\n  /* Available since Vista, ~15ms accuracy */\n  if (1)\n  {\n    tick_start = GetTickCount64 ();\n    mono_clock_source = _MHD_CLOCK_GETTICKCOUNT64;\n  }\n  else\n#else  /* _WIN32_WINNT < 0x0600 */\n  /* W32 specific monotonic clock */\n  /* Available on Windows 2000 and later */\n  if (1)\n  {\n    LARGE_INTEGER freq;\n    LARGE_INTEGER perf_counter;\n\n    QueryPerformanceFrequency (&freq);       /* never fail on XP and later */\n    QueryPerformanceCounter (&perf_counter); /* never fail on XP and later */\n    perf_freq = (uint64_t) freq.QuadPart;\n    perf_start = (uint64_t) perf_counter.QuadPart;\n    mono_clock_source = _MHD_CLOCK_PERFCOUNTER;\n  }\n  else\n#endif /* _WIN32_WINNT < 0x0600 */\n#endif /* _WIN32 */\n#ifdef HAVE_CLOCK_GETTIME\n#ifdef CLOCK_HIGHRES\n  /* Solaris-specific monotonic high-resolution clock */\n  /* Not preferred due to be potentially resource-hungry */\n  if (0 == clock_gettime (CLOCK_HIGHRES,\n                          &ts))\n  {\n    mono_clock_id = CLOCK_HIGHRES;\n    mono_clock_start = ts.tv_sec;\n    mono_clock_source = _MHD_CLOCK_GETTIME;\n  }\n  else\n#endif /* CLOCK_HIGHRES */\n#endif /* HAVE_CLOCK_GETTIME */\n#ifdef HAVE_GETHRTIME\n  /* HP-UX and Solaris monotonic clock */\n  /* Not preferred due to be potentially resource-hungry */\n  if (1)\n  {\n    hrtime_start = gethrtime ();\n    mono_clock_source = _MHD_CLOCK_GETHRTIME;\n  }\n  else\n#endif /* HAVE_GETHRTIME */\n  {\n    /* no suitable clock source was found */\n    mono_clock_source = _MHD_CLOCK_NO_SOURCE;\n  }\n\n#ifdef HAVE_CLOCK_GET_TIME\n  if ( (_MHD_CLOCK_GET_TIME != mono_clock_source) &&\n       (_MHD_INVALID_CLOCK_SERV != mono_clock_service) )\n  {\n    /* clock service was initialised but clock_get_time failed */\n    mach_port_deallocate (mach_task_self (),\n                          mono_clock_service);\n    mono_clock_service = _MHD_INVALID_CLOCK_SERV;\n  }\n#else\n  (void) mono_clock_source; /* avoid compiler warning */\n#endif /* HAVE_CLOCK_GET_TIME */\n\n#ifdef HAVE_TIMESPEC_GET\n  if (1)\n  {\n    struct timespec tsg;\n    if (TIME_UTC == timespec_get (&tsg, TIME_UTC))\n      gettime_start = tsg.tv_sec;\n    else\n      gettime_start = 0;\n  }\n#elif defined(HAVE_GETTIMEOFDAY)\n  if (1)\n  {\n    struct timeval tv;\n    if (0 == gettimeofday (&tv, NULL))\n      gettime_start = tv.tv_sec;\n    else\n      gettime_start = 0;\n  }\n#endif /* HAVE_GETTIMEOFDAY */\n  sys_clock_start = time (NULL);\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_monotonic_sec_counter_init': {'callees': [], 'callers': ['MHD_init']}, 'MHD_init': {'callees': ['MHD_set_panic_func', 'MHD_monotonic_sec_counter_init', 'MHD_send_init_static_vars_', 'MHD_init_mem_pools_'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "mono_clock_source",
    "enum _MHD_mono_clock_source",
    "_MHD_CLOCK_NO_SOURCE",
    "mono_clock_id",
    "_MHD_UNWANTED_CLOCK",
    "mono_clock_start",
    "mono_clock_service",
    "_MHD_INVALID_CLOCK_SERV",
    "tick_start",
    "perf_freq",
    "perf_start",
    "hrtime_start",
    "gettime_start",
    "sys_clock_start",
    "clock_gettime",
    "CLOCK_MONOTONIC_COARSE",
    "CLOCK_MONOTONIC_FAST",
    "CLOCK_MONOTONIC_RAW_APPROX",
    "CLOCK_MONOTONIC_RAW",
    "CLOCK_BOOTTIME",
    "CLOCK_MONOTONIC",
    "CLOCK_UPTIME",
    "CLOCK_HIGHRES",
    "host_get_clock_service",
    "mach_host_self",
    "SYSTEM_CLOCK",
    "clock_get_time",
    "mach_timespec_t",
    "mach_port_deallocate",
    "mach_task_self",
    "KERN_SUCCESS",
    "GetTickCount64",
    "QueryPerformanceFrequency",
    "QueryPerformanceCounter",
    "LARGE_INTEGER",
    "uint64_t",
    "gethrtime",
    "timespec_get",
    "TIME_UTC",
    "gettimeofday",
    "struct timespec",
    "struct timeval",
    "time",
    "NULL"
  ],
  "explanation": "For verifying the MISRA rule (a function parameter shall not be modified) we must prove that every l-value assigned in MHD_monotonic_sec_counter_init is not a formal parameter of that function. The following symbols are required to do that and to understand whether any assignment could actually be modifying a parameter (or be macro-expanded to do so):\n\n- mono_clock_source: assigned repeatedly in the function \u2014 need its declaration to confirm it is a global/static variable (not a parameter).\n- enum _MHD_mono_clock_source: the type of mono_clock_source \u2014 needed to locate its declaration/definition.\n- _MHD_CLOCK_NO_SOURCE: first value assigned to mono_clock_source \u2014 need to know it is a constant/enum macro, not something that could alias a parameter.\n- mono_clock_id: assigned in many branches \u2014 need its declaration to confirm it is not a parameter.\n- _MHD_UNWANTED_CLOCK: initial value assigned to mono_clock_id \u2014 confirm it is a compile-time constant.\n- mono_clock_start: assigned from ts.tv_sec / cur_time.tv_sec \u2014 need its declaration to confirm it is not a parameter.\n- mono_clock_service: initialised and possibly deallocated \u2014 must know if this identifier is a global (not a parameter) and its representation.\n- _MHD_INVALID_CLOCK_SERV: value assigned to mono_clock_service \u2014 ensure it is a constant, not aliasing a parameter.\n- tick_start: assigned from GetTickCount64() \u2014 need its declaration to confirm it is not a parameter.\n- perf_freq: assigned from freq.QuadPart \u2014 need declaration to ensure it is not a parameter.\n- perf_start: assigned from perf_counter.QuadPart \u2014 need declaration to ensure it is not a parameter.\n- hrtime_start: assigned from gethrtime() \u2014 ensure it is not a parameter.\n- gettime_start: assigned from timespec_get/gettimeofday \u2014 ensure it is not a parameter.\n- sys_clock_start: assigned from time(NULL) \u2014 ensure it is not a parameter.\n\nAdditionally, to fully understand the calls/expressions used and to make sure none of the above identifiers are hidden/aliased to parameter-like macros or inline functions, the prototypes/types/constants used by the function must be known:\n\n- clock_gettime and the CLOCK_* constants (CLOCK_MONOTONIC_COARSE, CLOCK_MONOTONIC_FAST, CLOCK_MONOTONIC_RAW_APPROX, CLOCK_MONOTONIC_RAW, CLOCK_BOOTTIME, CLOCK_MONOTONIC, CLOCK_UPTIME, CLOCK_HIGHRES): to confirm these are standard functions/constants and to inspect whether any macro wrappers could modify arguments in a surprising way.\n- host_get_clock_service, mach_host_self, SYSTEM_CLOCK, clock_get_time, mach_timespec_t, mach_port_deallocate, mach_task_self, KERN_SUCCESS: to understand the Darwin/Mach branch and to ensure mono_clock_service/mach-related identifiers are globals, not parameters or macro aliases.\n- GetTickCount64, QueryPerformanceFrequency, QueryPerformanceCounter, LARGE_INTEGER, uint64_t: to inspect the Windows branches and the storage used for perf_freq/perf_start/tick_start and ensure they are not parameters.\n- gethrtime: to understand assignment to hrtime_start.\n- timespec_get, TIME_UTC, gettimeofday, struct timespec, struct timeval: to validate gettime_start assignments and the use of local temporaries (tsg, tv) \u2014 confirm temporaries are locals, not parameters.\n- time, NULL: to validate sys_clock_start assignment.\n\nRationale: MISRA\u2019s rule targets modification of a function\u2019s formal parameters. MHD_monotonic_sec_counter_init has no formal parameters, so a correct analysis must (a) confirm that every identifier written by the function is not in fact a parameter (i.e., locate their declarations/definitions), and (b) ensure no macro or typedef hides an unexpected parameter. The symbols above are exactly those variables, types, functions and constants that are read/assigned or which could affect whether an assignment targets a parameter rather than a global/local object."
}