{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n  FILE *log = fopen(\"/tmp/logs/70.txt\", \"a\");\n\n  if (log != NULL)\n  {\n    fprintf (log, \"serve_simple_form: enter. form=%p mime=%p session=%p connection=%p\\n\",\n             (const void *) form, (const void *) mime, (const void *) session,\n             (const void *) connection);\n  }\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form),\n                                                     (const void *) form);\n  if (NULL == response)\n  {\n    if (log != NULL)\n    {\n      fprintf (log, \"serve_simple_form: MHD_create_response_from_buffer_static returned NULL\\n\");\n      fclose (log);\n    }\n    return MHD_NO;\n  }\n\n  if (log != NULL)\n    fprintf (log, \"serve_simple_form: response=%p created\\n\", (void *) response);\n\n  add_session_cookie (session, response);\n  if (log != NULL)\n    fprintf (log, \"serve_simple_form: add_session_cookie called for session=%p\\n\", (void *) session);\n\n  /*\n   * Probe: add the Connection header twice to exercise the code path in\n   * add_response_header_connection that contains the memcmp-based assertion\n   * which compares hdr->value (null-terminated) against the literal \"close\".\n   * This does not change the overall response flow but triggers the internal\n   * code path where the memcmp is used.\n   */\n  {\n    enum MHD_Result rc1 = MHD_add_response_header (response,\n                                                   MHD_HTTP_HEADER_CONNECTION,\n                                                   \"close\");\n    if (log != NULL)\n      fprintf (log, \"serve_simple_form: first MHD_add_response_header(Connection, \\\"close\\\") returned %d\\n\", (int) rc1);\n\n    enum MHD_Result rc2 = MHD_add_response_header (response,\n                                                   MHD_HTTP_HEADER_CONNECTION,\n                                                   \"close\");\n    if (log != NULL)\n      fprintf (log, \"serve_simple_form: second MHD_add_response_header(Connection, \\\"close\\\") returned %d\\n\", (int) rc2);\n  }\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    if (log != NULL)\n      fprintf (log, \"serve_simple_form: Failed to set content encoding header (mime=%s)\\n\", mime ? mime : \"(null)\");\n  }\n  else if (log != NULL)\n  {\n    fprintf (log, \"serve_simple_form: content encoding header set to %s\\n\", mime ? mime : \"(null)\");\n  }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  if (log != NULL)\n    fprintf (log, \"serve_simple_form: MHD_queue_response returned %d\\n\", (int) ret);\n\n  MHD_destroy_response (response);\n  if (log != NULL)\n  {\n    fprintf (log, \"serve_simple_form: response destroyed, exit. ret=%d\\n\", (int) ret);\n    fclose (log);\n  }\n\n  return ret;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp_km27f85/src/build-aux/missing: line 81: makeinfo: command not found\nWARNING: 'makeinfo' is missing on your system.\n         You should only need it if you modified a '.texi' file, or\n         any other file indirectly affecting the aspect of the manual.\n         You might want to install the Texinfo package:\n         <https://www.gnu.org/software/texinfo/>\n         The spurious makeinfo call might also be the consequence of\n         using a buggy 'make' (AIX, DU, IRIX), in which case you might\n         want to install GNU make:\n         <https://www.gnu.org/software/make/>\nmake[3]: *** [Makefile:543: libmicrohttpd.info] Error 127\nmake[2]: *** [Makefile:764: all-recursive] Error 1\nmake[1]: *** [Makefile:788: all-recursive] Error 1\nmake: *** [Makefile:693: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of serve_simple_form as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Forward declarations of opaque types used by the real library. */\nstruct Session;\nstruct MHD_Connection;\nstruct MHD_Response;\n\n/* Minimal enum to match the original code's usage. */\nenum MHD_Result { MHD_NO = 0, MHD_YES = 1 };\n\n/* Constants used as header names / status code. Not macros as requested. */\nstatic const char *MHD_HTTP_HEADER_CONNECTION = \"Connection\";\nstatic const char *MHD_HTTP_HEADER_CONTENT_ENCODING = \"Content-Encoding\";\nstatic const int MHD_HTTP_OK = 200;\n\n/* Function prototypes for library functions. These are not implemented here;\n   they are expected to be provided by the real environment that links this\n   file. We only declare them so this translation unit compiles. */\nstruct MHD_Response *MHD_create_response_from_buffer_static(size_t len, const void *buf);\nenum MHD_Result MHD_add_response_header(struct MHD_Response *response, const char *name, const char *value);\nenum MHD_Result MHD_queue_response(struct MHD_Connection *connection, int status_code, struct MHD_Response *response);\nvoid MHD_destroy_response(struct MHD_Response *response);\nvoid add_session_cookie(struct Session *session, struct MHD_Response *response);\n\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n  FILE *log = fopen(\"/tmp/logs/70.txt\", \"a\");\n\n  if (log != NULL)\n  {\n    fprintf (log, \"serve_simple_form: enter. form=%p mime=%p session=%p connection=%p\\n\",\n             (const void *) form, (const void *) mime, (const void *) session,\n             (const void *) connection);\n  }\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form),\n                                                     (const void *) form);\n  if (NULL == response)\n  {\n    if (log != NULL)\n    {\n      fprintf (log, \"serve_simple_form: MHD_create_response_from_buffer_static returned NULL\\n\");\n      fclose (log);\n    }\n    return MHD_NO;\n  }\n\n  if (log != NULL)\n    fprintf (log, \"serve_simple_form: response=%p created\\n\", (void *) response);\n\n  add_session_cookie (session, response);\n  if (log != NULL)\n    fprintf (log, \"serve_simple_form: add_session_cookie called for session=%p\\n\", (void *) session);\n\n  /*\n   * Probe: add the Connection header twice to exercise the code path in\n   * add_response_header_connection that contains the memcmp-based assertion\n   * which compares hdr->value (null-terminated) against the literal \"close\".\n   * This does not change the overall response flow but triggers the internal\n   * code path where the memcmp is used.\n   */\n  {\n    enum MHD_Result rc1 = MHD_add_response_header (response,\n                                                   MHD_HTTP_HEADER_CONNECTION,\n                                                   \"close\");\n    if (log != NULL)\n      fprintf (log, \"serve_simple_form: first MHD_add_response_header(Connection, \\\"close\\\") returned %d\\n\", (int) rc1);\n\n    enum MHD_Result rc2 = MHD_add_response_header (response,\n                                                   MHD_HTTP_HEADER_CONNECTION,\n                                                   \"close\");\n    if (log != NULL)\n      fprintf (log, \"serve_simple_form: second MHD_add_response_header(Connection, \\\"close\\\") returned %d\\n\", (int) rc2);\n  }\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    if (log != NULL)\n      fprintf (log, \"serve_simple_form: Failed to set content encoding header (mime=%s)\\n\", mime ? mime : \"(null)\");\n  }\n  else if (log != NULL)\n  {\n    fprintf (log, \"serve_simple_form: content encoding header set to %s\\n\", mime ? mime : \"(null)\");\n  }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  if (log != NULL)\n    fprintf (log, \"serve_simple_form: MHD_queue_response returned %d\\n\", (int) ret);\n\n  MHD_destroy_response (response);\n  if (log != NULL)\n  {\n    fprintf (log, \"serve_simple_form: response destroyed, exit. ret=%d\\n\", (int) ret);\n    fclose (log);\n  }\n\n  return ret;\n}\n",
  "explanation": "To make the code compile as a standalone translation unit while preserving the original logic, I:\n- Added the necessary includes (stdio.h, string.h, stddef.h).\n- Forward-declared opaque structs (Session, MHD_Connection, MHD_Response) instead of defining them.\n- Declared a minimal enum MHD_Result with MHD_NO and MHD_YES so the comparisons compile.\n- Declared the external library functions (MHD_create_response_from_buffer_static, MHD_add_response_header, MHD_queue_response, MHD_destroy_response, add_session_cookie) as prototypes \u2014 these are not implemented here and are expected to be provided/linked by the environment.\n- Provided const char * constants for header names and an int constant for MHD_HTTP_OK (no macros used).\n\nThese changes allow the file to compile (no missing symbol/type errors). No mock functions or main() were added; the original serve_simple_form logic was preserved."
}