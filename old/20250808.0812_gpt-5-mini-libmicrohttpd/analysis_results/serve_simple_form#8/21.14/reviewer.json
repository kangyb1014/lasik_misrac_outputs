{
  "user_message": "An agent A claimed that the following serve_simple_form code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n.\n</misra_rule>\n<target_code>\nHere is the original code of serve_simple_form.\n```c\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form),\n                                                     (const void *) form);\n  if (NULL == response)\n    return MHD_NO;\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The codebase uses memcmp inside add_response_header_connection to compare an existing response header value (hdr->value) against the literal \"close\" using memcmp(hdr->value, \"close\", 5). hdr->value is a null-terminated string (buf[pos] = 0 earlier), so memcmp is being used to compare null-terminated strings. This violates MISRA C 2023 Rule 21.14 (the Standard Library function memcmp shall not be used to compare null terminated strings).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstruct MHD_Response;\nstatic const char *MHD_HTTP_HEADER_CONNECTION = \"Connection\";\nstatic const char *MHD_HTTP_HEADER_CONTENT_ENCODING = \"Content-Encoding\";\nstatic const int MHD_HTTP_OK = 200;\nstruct MHD_Response *MHD_create_response_from_buffer_static(size_t len, const void *buf);\nenum MHD_Result MHD_add_response_header(struct MHD_Response *response, const char *name, const char *value);\nenum MHD_Result MHD_queue_response(struct MHD_Connection *connection, int status_code, struct MHD_Response *response);\nvoid MHD_destroy_response(struct MHD_Response *response);\n\nstatic enum MHD_Result\nserve_simple_form (const void *cls,\n                   const char *mime,\n                   struct Session *session,\n                   struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  const char *form = cls;\n  struct MHD_Response *response;\n  FILE *log = fopen(\"/tmp/logs/70.txt\", \"a\");\n\n  if (log != NULL)\n  {\n    fprintf (log, \"serve_simple_form: enter. form=%p mime=%p session=%p connection=%p\\n\",\n             (const void *) form, (const void *) mime, (const void *) session,\n             (const void *) connection);\n  }\n\n  /* return static form */\n  response = MHD_create_response_from_buffer_static (strlen (form),\n                                                     (const void *) form);\n  if (NULL == response)\n  {\n    if (log != NULL)\n    {\n      fprintf (log, \"serve_simple_form: MHD_create_response_from_buffer_static returned NULL\\n\");\n      fclose (log);\n    }\n    return MHD_NO;\n  }\n\n  if (log != NULL)\n    fprintf (log, \"serve_simple_form: response=%p created\\n\", (void *) response);\n\n  add_session_cookie (session, response);\n  if (log != NULL)\n    fprintf (log, \"serve_simple_form: add_session_cookie called for session=%p\\n\", (void *) session);\n\n  /*\n   * Probe: add the Connection header twice to exercise the code path in\n   * add_response_header_connection that contains the memcmp-based assertion\n   * which compares hdr->value (null-terminated) against the literal \"close\".\n   * This does not change the overall response flow but triggers the internal\n   * code path where the memcmp is used.\n   */\n  {\n    enum MHD_Result rc1 = MHD_add_response_header (response,\n                                                   MHD_HTTP_HEADER_CONNECTION,\n                                                   \"close\");\n    if (log != NULL)\n      fprintf (log, \"serve_simple_form: first MHD_add_response_header(Connection, \\\"close\\\") returned %d\\n\", (int) rc1);\n\n    enum MHD_Result rc2 = MHD_add_response_header (response,\n                                                   MHD_HTTP_HEADER_CONNECTION,\n                                                   \"close\");\n    if (log != NULL)\n      fprintf (log, \"serve_simple_form: second MHD_add_response_header(Connection, \\\"close\\\") returned %d\\n\", (int) rc2);\n  }\n\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n    if (log != NULL)\n      fprintf (log, \"serve_simple_form: Failed to set content encoding header (mime=%s)\\n\", mime ? mime : \"(null)\");\n  }\n  else if (log != NULL)\n  {\n    fprintf (log, \"serve_simple_form: content encoding header set to %s\\n\", mime ? mime : \"(null)\");\n  }\n\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  if (log != NULL)\n    fprintf (log, \"serve_simple_form: MHD_queue_response returned %d\\n\", (int) ret);\n\n  MHD_destroy_response (response);\n  if (log != NULL)\n  {\n    fprintf (log, \"serve_simple_form: response destroyed, exit. ret=%d\\n\", (int) ret);\n    fclose (log);\n  }\n\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's finding is correct in substance but needs a small clarification: the serve_simple_form() function you provided does not itself call memcmp, so it does not directly violate MISRA C:2023 Rule 21.14. However, serve_simple_form() calls MHD_add_response_header(), and Agent A reports that the implementation of add_response_header_connection (an internal helper invoked by MHD_add_response_header) contains a call like memcmp(hdr->value, \"close\", 5) where hdr->value was made null-terminated earlier (buf[pos] = 0). If that implementation is present as described, then memcmp is being used to compare null-terminated strings and that is a violation of MISRA C 2023 Rule 21.14. The provided test harness failing to compile does not invalidate the static code issue: using memcmp to compare null-terminated strings is forbidden by the rule and should be replaced by a string comparison function (e.g. strcmp/strncmp) or refactored so that memcmp is used only on non\u2013null-terminated byte buffers.\n\nSummary: the reported violation is correct if the internal add_response_header_connection contains the described memcmp on a null-terminated string. serve_simple_form itself does not contain the memcmp."
}