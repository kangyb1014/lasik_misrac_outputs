{
  "user_message": "An agent A claimed that the following MHD_get_connection_values code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_connection_values.\n```c\n_MHD_EXTERN int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n    return -1;\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if ( (NULL != iterator) &&\n           (MHD_NO == iterator (iterator_cls,\n                                pos->kind,\n                                pos->header,\n                                pos->value)) )\n        return ret;\n    }\n  return ret;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function is declared with a compiler-specific attribute: the project-defined macro _MHD_EXTERN expands to __attribute__((visibility(\"default\"))) extern. The use of GCC-style __attribute__((...)) is a compiler language extension (documented as such in GCC), therefore the code violates MISRA C 2023 Rule 1.2 (language extensions should not be used).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\n__attribute__((visibility(\"default\"))) extern int\nMHD_get_connection_values (struct MHD_Connection *connection,\n                           enum MHD_ValueKind kind,\n                           MHD_KeyValueIterator iterator,\n                           void *iterator_cls)\n{\n  FILE *log = fopen(\"/tmp/logs/104.txt\", \"a\");\n  if (log)\n    fprintf(log, \"MHD_get_connection_values: entry connection=%p kind=%d iterator=%p\\n\",\n            (void *)connection, (int)kind, (void *)iterator);\n\n  int ret;\n  struct MHD_HTTP_Req_Header *pos;\n\n  if (NULL == connection)\n  {\n    if (log)\n      fprintf(log, \"MHD_get_connection_values: connection == NULL -> returning -1\\n\");\n    if (log)\n      fclose(log);\n    return -1;\n  }\n\n  ret = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (log)\n      fprintf(log, \"MHD_get_connection_values: visiting header name='%s' value='%s' kind=%d\\n\",\n              pos->header ? pos->header : \"(null)\", pos->value ? pos->value : \"(null)\", (int)pos->kind);\n\n    if (0 != (pos->kind & kind))\n    {\n      ret++;\n      if (log)\n        fprintf(log, \"MHD_get_connection_values: matched kind -> ret=%d\\n\", ret);\n\n      if ((NULL != iterator) &&\n          (MHD_NO == iterator (iterator_cls,\n                               pos->kind,\n                               pos->header,\n                               pos->value)))\n      {\n        if (log)\n          fprintf(log, \"MHD_get_connection_values: iterator returned MHD_NO -> returning %d\\n\", ret);\n        if (log)\n          fclose(log);\n        return ret;\n      }\n    }\n  }\n\n  if (log)\n    fprintf(log, \"MHD_get_connection_values: completed -> returning %d\\n\", ret);\n  if (log)\n    fclose(log);\n  return ret;\n}\n\n```\nThe test code failed to compile, so we could not obtain any output.\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent's reasoning is technically correct in principle but not proven by the supplied code. MISRA C:2023 Rule 1.2 forbids compiler language extensions that are documented as extensions (e.g. GCC __attribute__((...))). If the project macro _MHD_EXTERN actually expands to a GCC-specific attribute such as __attribute__((visibility(\"default\"))) then that use would be a language-extension and therefore a violation of Rule 1.2.\n\nHowever, the source snippet you provided only shows the macro name _MHD_EXTERN and does not include its definition. You cannot conclude a Rule 1.2 violation from the call site alone without verifying the macro expansion or compiler-specific annotation in the project's headers or build configuration. Therefore the agent's reported violation is not confirmed by the given code as-is. To determine whether there is a real violation, examine the definition of _MHD_EXTERN (and any compiler flags) \u2014 if it indeed expands to a documented compiler extension (for example GCC __attribute__), then the report is correct; otherwise it is not."
}