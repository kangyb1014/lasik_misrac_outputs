{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified lfs_setattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/175.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of lfs_setattr as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of lfs_setattr:\n```c\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_setattr:\nstatic int lfs_setattr_(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    if (size > lfs->attr_max) {\n        return LFS_ERR_NOSPC;\n    }\n\n    return lfs_commitattr(lfs, path, type, buffer, size);\n}\n...\nstatic int lfs_commitattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0) {\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    if (id == 0x3ff) {\n        // special case for root\n        id = 0;\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n        if (err) {\n            return err;\n        }\n    }\n\n    return lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_USERATTR + type, id, size), buffer}));\n}\n</additional code>\nJudge whether the above lfs_setattr code violates the rule 21.17 or not.",
  "is_rule_violated": true,
  "scenario": "If the caller provides a non-NULL buffer pointer that refers to fewer than 'size' bytes (but size <= lfs->attr_max), the buffer and size values are forwarded through lfs_setattr_ -> lfs_commitattr -> lfs_dir_commit where an internal copy (e.g. memcpy/memmove) is performed. That internal copy will read 'size' bytes from 'buffer', which can access beyond the bounds of the object pointed to by 'buffer', violating MISRA C 2023 Rule 21.17. Additionally, the logging/tracing usage of \"%s\" for 'path' (via LFS_TRACE) can cause strlen-like scanning beyond the end of 'path' if 'path' is not a NUL-terminated string, also exposing the same class of out-of-bounds access.",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n\nint lfs_setattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    /* Probe logging: record entry and state without changing logic */\n    FILE *fp = fopen(\"/tmp/logs/175.txt\", \"a\");\n    if (fp != NULL) {\n        /* Print pointers and numeric state only (avoid dereferencing strings)\n           to prevent introducing new out-of-bounds accesses in the probe. */\n        (void)fprintf(fp, \"ENTER lfs_setattr: lfs=%p path=%p type=%u buffer=%p size=%llu\\n\",\n                (void*)lfs, (void*)path, (unsigned)type,\n                buffer, (unsigned long long)size);\n        (void)fclose(fp);\n    }\n\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        /* Log early return */\n        fp = fopen(\"/tmp/logs/175.txt\", \"a\");\n        if (fp != NULL) {\n            (void)fprintf(fp, \"lfs_setattr: LFS_LOCK failed err=%d\\n\", err);\n            (void)fclose(fp);\n        }\n        return err;\n    }\n\n    /* Preserve original trace call (may itself examine 'path') */\n    LFS_TRACE(\"lfs_setattr(%p, \\\"%s\\\", %\"PRIu8\", %p, %\"PRIu32\")\",\n            (void*)lfs, path, type, buffer, size);\n\n    err = lfs_setattr_(lfs, path, type, buffer, size);\n\n    /* Log outcome and relevant state for diagnosing possible OOB scenarios */\n    fp = fopen(\"/tmp/logs/175.txt\", \"a\");\n    if (fp != NULL) {\n        (void)fprintf(fp, \"EXIT lfs_setattr: err=%d (lfs->attr_max=%llu)\\n\",\n                err, (unsigned long long)lfs->attr_max);\n        (void)fclose(fp);\n    }\n\n    LFS_TRACE(\"lfs_setattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}