{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified lfs_remove code that contains useful probe functions that print useful logs to a file \"/tmp/logs/125.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of lfs_remove as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of lfs_remove:\n```c\nint lfs_remove(lfs_t *lfs, const char *path) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_remove(%p, \\\"%s\\\")\", (void*)lfs, path);\n\n    err = lfs_remove_(lfs, path);\n\n    LFS_TRACE(\"lfs_remove -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_remove:\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_TRACE(__VA_ARGS__) \n...\nstatic int lfs_remove_(lfs_t *lfs, const char *path) {\n    // deorphan if we haven't yet, needed at most once after poweron\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err) {\n        return err;\n    }\n\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {\n        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;\n    }\n\n    struct lfs_mlist dir;\n    dir.next = lfs->mlist;\n    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {\n        // must be empty before removal\n        lfs_block_t pair[2];\n        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),\n                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);\n        if (res < 0) {\n            return (int)res;\n        }\n        lfs_pair_fromle32(pair);\n\n        err = lfs_dir_fetch(lfs, &dir.m, pair);\n        if (err) {\n            return err;\n        }\n\n        if (dir.m.count > 0 || dir.m.split) {\n            return LFS_ERR_NOTEMPTY;\n        }\n\n        // mark fs as orphaned\n        err = lfs_fs_preporphans(lfs, +1);\n        if (err) {\n            return err;\n        }\n\n        // I know it's crazy but yes, dir can be changed by our parent's\n        // commit (if predecessor is child)\n        dir.type = 0;\n        dir.id = 0;\n        lfs->mlist = &dir;\n    }\n\n    // delete the entry\n    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));\n    if (err) {\n        lfs->mlist = dir.next;\n        return err;\n    }\n\n    lfs->mlist = dir.next;\n    if (lfs_gstate_hasorphans(&lfs->gstate)) {\n        LFS_ASSERT(lfs_tag_type3(tag) == LFS_TYPE_DIR);\n\n        // fix orphan\n        err = lfs_fs_preporphans(lfs, -1);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);\n        if (err) {\n            return err;\n        }\n\n        err = lfs_dir_drop(lfs, &cwd, &dir.m);\n        if (err) {\n            return err;\n        }\n    }\n\n    return 0;\n}\n</additional code>\nJudge whether the above lfs_remove code violates the rule 17.8 or not.",
  "is_rule_violated": true,
  "scenario": "Violation occurs in lfs_remove_ where the parameter 'path' (a pointer parameter) is modified: lfs_dir_find is called with &path (const char **), allowing the callee to change the pointer value. This modifies the function parameter itself, which violates MISRA C 2023 Rule 17.8 (the object pointed to may be modified, but the pointer parameter shall not be modified).",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Minimal type definitions to allow compilation while preserving original logic */\ntypedef int lfs_stag_t;\ntypedef uint32_t lfs_block_t;\n\ntypedef struct lfs_cfg {\n    int dummy;\n} lfs_cfg;\n\ntypedef struct lfs_t {\n    lfs_cfg *cfg;\n    void *mlist;\n    struct { int dummy; } gstate;\n} lfs_t;\n\ntypedef struct {\n    int count;\n    int split;\n    lfs_block_t pair[2];\n} lfs_mdir_t;\n\nstruct lfs_mlist {\n    struct lfs_mlist *next;\n    lfs_mdir_t m;\n    unsigned type;\n    unsigned id;\n};\n\n/* Error codes used in the original code (minimal set) */\nenum {\n    LFS_ERR_INVAL = -22,\n    LFS_ERR_NOTEMPTY = -39\n};\n\n/* Prototypes for external functions used by lfs_remove_/lfs_remove. These are\n   declared but not defined here to avoid mocks while keeping the unit\n   compilable. */\nextern int lfs_fs_forceconsistency(lfs_t *lfs);\nextern lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *cwd, const char **pathp, void *arg);\nextern lfs_stag_t lfs_dir_get(lfs_t *lfs, lfs_mdir_t *cwd,\n        int a, int b, lfs_block_t *pair);\nextern void lfs_pair_fromle32(lfs_block_t *pair);\nextern int lfs_dir_fetch(lfs_t *lfs, lfs_mdir_t *m, lfs_block_t *pair);\nextern int lfs_fs_preporphans(lfs_t *lfs, int delta);\nextern int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *cwd, void *attrs);\nextern int lfs_gstate_hasorphans(const void *gstate);\nextern int lfs_fs_pred(lfs_t *lfs, lfs_block_t *pair, lfs_mdir_t *cwd);\nextern int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *cwd, lfs_mdir_t *m);\n\n/* Simple file logger used to record control path and state for the\n   violation scenario. This does not alter any function parameters. */\nstatic void lfs_probe_log(const char *stage, const lfs_t *lfs, const char *path, lfs_stag_t tag, int err)\n{\n    FILE *f = fopen(\"/tmp/logs/125.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    fprintf(f, \"stage=%s, lfs=%p, path=%p\", stage, (const void *)lfs, (const void *)path);\n    if (path != NULL) {\n        fprintf(f, \", path_str=\\\"%s\\\"\", path);\n    }\n    fprintf(f, \", tag=%d, err=%d\\n\", (int)tag, err);\n    fclose(f);\n}\n\n/* The public wrapper - minimal changes: adds logging but preserves logic. */\nint lfs_remove(lfs_t *lfs, const char *path) {\n    /* Emulate LFS_LOCK macro effect; lock is a no-op in tests. */\n    (void)lfs;\n\n    lfs_probe_log(\"lfs_remove_entry\", lfs, path, 0, 0);\n\n    int err = lfs_remove_(lfs, path);\n\n    lfs_probe_log(\"lfs_remove_exit\", lfs, path, 0, err);\n\n    /* Emulate LFS_UNLOCK */\n    return err;\n}\n\n/* The internal function that contains the violation: it modifies the pointer\n   parameter 'path' by passing &path to lfs_dir_find. We add probes before and\n   after the call to capture the pointer value change. */\nstatic int lfs_remove_(lfs_t *lfs, const char *path) {\n    int err = lfs_fs_forceconsistency(lfs);\n    if (err) {\n        lfs_probe_log(\"forceconsistency_failed\", lfs, path, 0, err);\n        return err;\n    }\n\n    lfs_mdir_t cwd;\n    lfs_stag_t tag_before = 0;\n    lfs_probe_log(\"before_dir_find\", lfs, path, tag_before, 0);\n\n    /* Violation: passing the address of the parameter 'path' so the callee may\n       modify the pointer value. This modifies the function parameter itself\n       (pointer value), which contravenes MISRA C 2023 Rule 17.8. */\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n\n    lfs_probe_log(\"after_dir_find\", lfs, path, tag, 0);\n\n    if (tag < 0 || /* lfs_tag_id(tag) == 0x3ff */ 0) {\n        int ret = (tag < 0) ? (int)tag : LFS_ERR_INVAL;\n        lfs_probe_log(\"dir_find_invalid\", lfs, path, tag, ret);\n        return ret;\n    }\n\n    struct lfs_mlist dir;\n    dir.next = lfs->mlist;\n\n    if (/* lfs_tag_type3(tag) == LFS_TYPE_DIR */ 1) {\n        lfs_block_t pair[2];\n        lfs_stag_t res = lfs_dir_get(lfs, &cwd, 0, 0, pair);\n        if (res < 0) {\n            lfs_probe_log(\"dir_get_failed\", lfs, path, res, (int)res);\n            return (int)res;\n        }\n        lfs_pair_fromle32(pair);\n\n        err = lfs_dir_fetch(lfs, &dir.m, pair);\n        if (err) {\n            lfs_probe_log(\"dir_fetch_failed\", lfs, path, tag, err);\n            return err;\n        }\n\n        if (dir.m.count > 0 || dir.m.split) {\n            lfs_probe_log(\"dir_not_empty\", lfs, path, tag, LFS_ERR_NOTEMPTY);\n            return LFS_ERR_NOTEMPTY;\n        }\n\n        err = lfs_fs_preporphans(lfs, +1);\n        if (err) {\n            lfs_probe_log(\"preporphans_failed\", lfs, path, tag, err);\n            return err;\n        }\n\n        dir.type = 0;\n        dir.id = 0;\n        lfs->mlist = &dir;\n    }\n\n    err = lfs_dir_commit(lfs, &cwd, NULL);\n    if (err) {\n        lfs->mlist = dir.next;\n        lfs_probe_log(\"commit_failed\", lfs, path, tag, err);\n        return err;\n    }\n\n    lfs->mlist = dir.next;\n    if (lfs_gstate_hasorphans(&lfs->gstate)) {\n        err = lfs_fs_preporphans(lfs, -1);\n        if (err) {\n            lfs_probe_log(\"preporphans_unwind_failed\", lfs, path, tag, err);\n            return err;\n        }\n\n        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);\n        if (err) {\n            lfs_probe_log(\"fs_pred_failed\", lfs, path, tag, err);\n            return err;\n        }\n\n        err = lfs_dir_drop(lfs, &cwd, &dir.m);\n        if (err) {\n            lfs_probe_log(\"dir_drop_failed\", lfs, path, tag, err);\n            return err;\n        }\n    }\n\n    lfs_probe_log(\"remove_success\", lfs, path, tag, 0);\n    return 0;\n}\n"
}