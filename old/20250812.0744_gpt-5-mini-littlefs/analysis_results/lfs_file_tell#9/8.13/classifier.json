{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\nA pointer should not point to a const-qualified type if the pointer is used by a function that modifies the object pointed to by the pointer.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified lfs_file_tell code that contains useful probe functions that print useful logs to a file \"/tmp/logs/75.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of lfs_file_tell as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of lfs_file_tell:\n```c\nlfs_soff_t lfs_file_tell(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_tell(%p, %p)\", (void*)lfs, (void*)file);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_soff_t res = lfs_file_tell_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_tell -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\nJudge whether the above lfs_file_tell code violates the rule 8.13 or not.",
  "is_rule_violated": false,
  "scenario": "No violation. The function takes lfs_t *lfs and lfs_file_t *file. The call LFS_LOCK(lfs->cfg) indicates lfs (and its cfg) is used in a mutable way (locking/unlocking). The code also calls lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file) and delegates to lfs_file_tell_(lfs, file). Those usages imply the file object may be part of mutable metadata (the mlist) and/or may be modified by the called helper; therefore the file pointer should remain non-const. Because the pointer(s) are passed to functions that may modify the pointee(s) (or are used with locking operations that modify lfs state), making them const would be inappropriate. Thus Rule 8.13 is not violated.",
  "test_code": ""
}