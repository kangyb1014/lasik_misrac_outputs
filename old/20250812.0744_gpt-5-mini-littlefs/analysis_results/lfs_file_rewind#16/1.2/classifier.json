{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified lfs_file_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/128.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of lfs_file_rewind as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of lfs_file_rewind:\n```c\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\nJudge whether the above lfs_file_rewind code violates the rule 1.2 or not.",
  "is_rule_violated": false,
  "scenario": "No language extensions are used in the provided code. The snippet uses standard C constructs (function definition, pointer casts to void*, returns, and calls to macros). Macros such as LFS_LOCK, LFS_TRACE, and LFS_UNLOCK are not compiler language extensions themselves (their definitions are not provided), so based on the shown code there is no explicit use of compiler-specific extensions (for example: __attribute__, asm, typeof, __builtin_*, or other documented compiler extensions). Therefore Rule 1.2 is not violated. (If any of the macros are implemented using compiler-specific extensions, that would need to be reviewed in their definitions.)",
  "test_code": ""
}