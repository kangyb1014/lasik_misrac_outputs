{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified lfs_file_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/129.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of lfs_file_rewind as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of lfs_file_rewind:\n```c\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_file_rewind:\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_TRACE(__VA_ARGS__) \n...\nstatic int lfs_file_rewind_(lfs_t *lfs, lfs_file_t *file) {\n    lfs_soff_t res = lfs_file_seek_(lfs, file, 0, LFS_SEEK_SET);\n    if (res < 0) {\n        return (int)res;\n    }\n\n    return 0;\n}\n...\nstatic lfs_soff_t lfs_file_seek_(lfs_t *lfs, lfs_file_t *file,\n        lfs_soff_t off, int whence) {\n    // find new pos\n    //\n    // fortunately for us, littlefs is limited to 31-bit file sizes, so we\n    // don't have to worry too much about integer overflow\n    lfs_off_t npos = file->pos;\n    if (whence == LFS_SEEK_SET) {\n        npos = off;\n    } else if (whence == LFS_SEEK_CUR) {\n        npos = file->pos + (lfs_off_t)off;\n    } else if (whence == LFS_SEEK_END) {\n        npos = (lfs_off_t)lfs_file_size_(lfs, file) + (lfs_off_t)off;\n    }\n\n    if (npos > lfs->file_max) {\n        // file position out of range\n        return LFS_ERR_INVAL;\n    }\n\n    if (file->pos == npos) {\n        // noop - position has not changed\n        return npos;\n    }\n\n    // if we're only reading and our new offset is still in the file's cache\n    // we can avoid flushing and needing to reread the data\n    if ((file->flags & LFS_F_READING)\n            && file->off != lfs->cfg->block_size) {\n        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});\n        lfs_off_t noff = npos;\n        int nindex = lfs_ctz_index(lfs, &noff);\n        if (oindex == nindex\n                && noff >= file->cache.off\n                && noff < file->cache.off + file->cache.size) {\n            file->pos = npos;\n            file->off = noff;\n            return npos;\n        }\n    }\n\n    // write out everything beforehand, may be noop if rdonly\n    int err = lfs_file_flush(lfs, file);\n    if (err) {\n        return err;\n    }\n\n    // update pos\n    file->pos = npos;\n    return npos;\n}\n</additional code>\nJudge whether the above lfs_file_rewind code violates the rule 2.1 or not.",
  "is_rule_violated": true,
  "scenario": "The conditional branch 'if (err) { return err; }' in lfs_file_rewind is effectively unreachable in this project because LFS_LOCK is defined as '#define LFS_LOCK(cfg) ((void)cfg,0)'. That macro always yields 0, so 'err' is always 0 and the 'return err;' statement can never be executed. This constitutes unreachable code and thus violates MISRA C 2023 Rule 2.1.",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n\n/* Probe helper that logs control path and state information to a file. */\nstatic void lfs_log_probe(const char *stage, void *lfs, void *file, int err) {\n    FILE *fp = fopen(\"/tmp/logs/129.txt\", \"a\");\n    if (fp != NULL) {\n        /* Log the stage, pointers and error value. */\n        fprintf(fp, \"%s: lfs=%p file=%p err=%d\\n\", stage, lfs, file, err);\n        fclose(fp);\n    }\n}\n\n/*\n * Modified lfs_file_rewind with probes. Original logic preserved.\n * Note: LFS_TRACE, LFS_LOCK, LFS_UNLOCK and lfs_file_rewind_ are assumed\n * to be defined elsewhere in the project (as in the provided context).\n */\nint lfs_file_rewind(lfs_t *lfs, lfs_file_t *file) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe after acquiring lock (or attempt). */\n    lfs_log_probe(\"after LFS_LOCK\", (void *)lfs, (void *)file, err);\n\n    if (err) {\n        /* Probe the early-return path (this branch is unreachable given\n         * LFS_LOCK(cfg) expands to ((void)cfg,0) in the provided project,\n         * which always yields 0). The probe logs the (unreachable) event.\n         */\n        lfs_log_probe(\"early return due to lock error\", (void *)lfs, (void *)file, err);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_rewind(%p, %p)\", (void*)lfs, (void*)file);\n\n    err = lfs_file_rewind_(lfs, file);\n\n    /* Probe after calling the internal rewind implementation. */\n    lfs_log_probe(\"after lfs_file_rewind_\", (void *)lfs, (void *)file, err);\n\n    LFS_TRACE(\"lfs_file_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Final probe before returning the error code. */\n    lfs_log_probe(\"before return\", (void *)lfs, (void *)file, err);\n    return err;\n}\n"
}