{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified lfs_dir_rewind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/281.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of lfs_dir_rewind as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of lfs_dir_rewind:\n```c\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_dir_rewind:\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_TRACE(__VA_ARGS__) \n...\nstatic int lfs_dir_rewind_(lfs_t *lfs, lfs_dir_t *dir) {\n    // reload the head dir\n    int err = lfs_dir_fetch(lfs, &dir->m, dir->head);\n    if (err) {\n        return err;\n    }\n\n    dir->id = 0;\n    dir->pos = 0;\n    return 0;\n}\n...\nstatic int lfs_dir_fetch(lfs_t *lfs,\n        lfs_mdir_t *dir, const lfs_block_t pair[2]) {\n    // note, mask=-1, tag=-1 can never match a tag since this\n    // pattern has the invalid bit set\n    return (int)lfs_dir_fetchmatch(lfs, dir, pair,\n            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);\n}\n</additional code>\nJudge whether the above lfs_dir_rewind code violates the rule 2.1 or not.",
  "is_rule_violated": true,
  "scenario": "The LFS_LOCK macro is defined as ((void)cfg,0), so it always returns 0. Therefore the conditional if (err) { return err; } can never be true and is unreachable. This unreachable early-return branch is a violation of MISRA C 2023 Rule 2.1 (no unreachable code).",
  "test_code": "#include <stdio.h>\n\nint lfs_dir_rewind(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Probe: log entry and the lock result to help demonstrate the unreachable branch */\n    {\n        FILE *fp = fopen(\"/tmp/logs/281.txt\", \"a\");\n        if (fp != NULL) {\n            fprintf(fp, \"lfs_dir_rewind: enter lfs=%p dir=%p LFS_LOCK returned=%d\\n\",\n                    (void*)lfs, (void*)dir, err);\n            fclose(fp);\n        }\n    }\n\n    if (err) {\n        /* This branch is unreachable given the provided LFS_LOCK definition\n           ((void)cfg,0), but it is kept to preserve the original logic. */\n        FILE *fp = fopen(\"/tmp/logs/281.txt\", \"a\");\n        if (fp != NULL) {\n            fprintf(fp, \"lfs_dir_rewind: early return with err=%d (unreachable under current macro)\\n\", err);\n            fclose(fp);\n        }\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_dir_rewind(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_rewind_(lfs, dir);\n\n    /* Probe: log result from inner call and continuation of normal path */\n    {\n        FILE *fp = fopen(\"/tmp/logs/281.txt\", \"a\");\n        if (fp != NULL) {\n            fprintf(fp, \"lfs_dir_rewind: lfs_dir_rewind_ returned=%d; continuing normal path\\n\", err);\n            fclose(fp);\n        }\n    }\n\n    LFS_TRACE(\"lfs_dir_rewind -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}"
}