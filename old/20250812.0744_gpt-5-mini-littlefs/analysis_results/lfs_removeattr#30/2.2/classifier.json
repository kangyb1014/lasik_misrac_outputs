{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified lfs_removeattr code that contains useful probe functions that print useful logs to a file \"/tmp/logs/242.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of lfs_removeattr as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of lfs_removeattr:\n```c\nint lfs_removeattr(lfs_t *lfs, const char *path, uint8_t type) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_removeattr(%p, \\\"%s\\\", %\"PRIu8\")\", (void*)lfs, path, type);\n\n    err = lfs_removeattr_(lfs, path, type);\n\n    LFS_TRACE(\"lfs_removeattr -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_removeattr:\nstatic int lfs_removeattr_(lfs_t *lfs, const char *path, uint8_t type) {\n    return lfs_commitattr(lfs, path, type, NULL, 0x3ff);\n}\n...\nstatic int lfs_commitattr(lfs_t *lfs, const char *path,\n        uint8_t type, const void *buffer, lfs_size_t size) {\n    lfs_mdir_t cwd;\n    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);\n    if (tag < 0) {\n        return tag;\n    }\n\n    uint16_t id = lfs_tag_id(tag);\n    if (id == 0x3ff) {\n        // special case for root\n        id = 0;\n        int err = lfs_dir_fetch(lfs, &cwd, lfs->root);\n        if (err) {\n            return err;\n        }\n    }\n\n    return lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(\n            {LFS_MKTAG(LFS_TYPE_USERATTR + type, id, size), buffer}));\n}\n...\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_TRACE(__VA_ARGS__) \n</additional code>\nJudge whether the above lfs_removeattr code violates the rule 2.2 or not.",
  "is_rule_violated": true,
  "scenario": "The locking/unlocking operations (LFS_LOCK/LFS_UNLOCK) expand to no-ops in the provided configuration: LFS_LOCK(cfg) is defined as ((void)cfg,0) and LFS_UNLOCK(cfg) as ((void)cfg). These produce executed statements that have no effect on program behaviour; removing them would not change behavior. Therefore these executed no-op operations constitute dead code under MISRA C 2023 Rule 2.2.",
  "test_code": "#include <stdio.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n/*\n * Probe-enabled variant of lfs_removeattr preserving the original logic\n * and adding logging to /tmp/logs/242.txt to demonstrate the dead-code\n * scenario (no-op lock/unlock). This file must be linked with the\n * rest of the project providing lfs_t, lfs_removeattr_, LFS_LOCK, LFS_UNLOCK\n * and LFS_TRACE.\n */\nint lfs_removeattr(lfs_t *lfs, const char *path, uint8_t type) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    FILE *log = fopen(\"/tmp/logs/242.txt\", \"a\");\n    if (log != NULL) {\n        fprintf(log, \"enter lfs_removeattr: lfs=%p path=%s type=%\" PRIu8 \" lock_ret=%d\\n\",\n                (void *)lfs, (path != NULL) ? path : \"(null)\", type, err);\n        fclose(log);\n    }\n\n    if (err) {\n        /* Log the early return path */\n        FILE *log2 = fopen(\"/tmp/logs/242.txt\", \"a\");\n        if (log2 != NULL) {\n            fprintf(log2, \"lfs_removeattr: early return due to lock error=%d\\n\", err);\n            fclose(log2);\n        }\n        return err;\n    }\n\n    /* Preserve original trace (may be a no-op macro) */\n    LFS_TRACE(\"lfs_removeattr(%p, \\\"%s\\\", %\"PRIu8\")\", (void*)lfs, path, type);\n\n    /* Call the underlying implementation */\n    err = lfs_removeattr_(lfs, path, type);\n\n    /* Log the result of the underlying call */\n    log = fopen(\"/tmp/logs/242.txt\", \"a\");\n    if (log != NULL) {\n        fprintf(log, \"lfs_removeattr: after lfs_removeattr_ -> err=%d\\n\", err);\n        fclose(log);\n    }\n\n    LFS_TRACE(\"lfs_removeattr -> %d\", err);\n\n    /* Unlock (in this configuration this is a no-op expression) */\n    LFS_UNLOCK(lfs->cfg);\n\n    /* Log the exit path */\n    log = fopen(\"/tmp/logs/242.txt\", \"a\");\n    if (log != NULL) {\n        fprintf(log, \"exit lfs_removeattr: return=%d\\n\", err);\n        fclose(log);\n    }\n\n    return err;\n}\n"
}