{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop count and optionally loop flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with essentially Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified lfs_dir_close code that contains useful probe functions that print useful logs to a file \"/tmp/logs/28.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of lfs_dir_close as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of lfs_dir_close:\n```c\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_dir_close:\nstatic int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir) {\n    // remove from list of mdirs\n    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);\n\n    return 0;\n}\n...\nstatic void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {\n    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {\n        if (*p == mlist) {\n            *p = (*p)->next;\n            break;\n        }\n    }\n}\n</additional code>\nJudge whether the above lfs_dir_close code violates the rule 14.2 or not.",
  "is_rule_violated": true,
  "scenario": "The for loop in lfs_mlist_remove uses '*p' in the loop condition and '(*p)->next' in the third clause while the loop body may modify '*p' (assigning '*p = (*p)->next' when removing the element). According to MISRA C 2023 Rule 14.2, the second and third clauses shall not use objects that are modified in the loop body, and there shall be only one loop counter which must not be modified in the body. Here the loop counter is 'p', but the condition and increment expressions access the pointed-to object '*p', which is modified in the body \u2014 this violates Rule 14.2.",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n/* Minimal type definitions to preserve original layout and allow casting */\nstruct lfs_mlist {\n    struct lfs_mlist *next;\n};\n\ntypedef struct lfs_mlist lfs_mlist_t;\n\ntypedef struct lfs_t {\n    struct lfs_mlist *mlist;\n    void *cfg;\n} lfs_t;\n\ntypedef struct lfs_dir_t {\n    struct lfs_mlist mlist; /* first member so pointer-cast compatibility */\n} lfs_dir_t;\n\n/* Logging helper that appends formatted messages to /tmp/logs/28.txt */\nvoid LFS_TRACE(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/28.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\n/* Simple lock/unlock stubs that log actions */\nint LFS_LOCK(void *cfg)\n{\n    LFS_TRACE(\"LFS_LOCK(cfg=%p)\", cfg);\n    return 0; /* success */\n}\n\nvoid LFS_UNLOCK(void *cfg)\n{\n    LFS_TRACE(\"LFS_UNLOCK(cfg=%p)\", cfg);\n}\n\n/* The for-loop under inspection (preserve original logic). The function\n   logs control path and state information to /tmp/logs/28.txt to illustrate\n   the scenario where the loop condition and increment expressions access\n   objects that are modified in the loop body. */\nstatic void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist)\n{\n    LFS_TRACE(\"lfs_mlist_remove: start, lfs=%p, mlist=%p\", (void*)lfs, (void*)mlist);\n    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {\n        LFS_TRACE(\"  iter: p=%p, *p=%p, (*p)->next=%p\", (void*)p, (void*)(*p), (void*)(*p)->next);\n        if (*p == mlist) {\n            LFS_TRACE(\"  match: removing element %p (was next=%p)\", (void*)(*p), (void*)(*p)->next);\n            *p = (*p)->next;\n            LFS_TRACE(\"  after remove: p=%p, *p=%p\", (void*)p, (void*)(*p));\n            break;\n        }\n    }\n    LFS_TRACE(\"lfs_mlist_remove: end, lfs->mlist=%p\", (void*)lfs->mlist);\n}\n\nstatic int lfs_dir_close_(lfs_t *lfs, lfs_dir_t *dir)\n{\n    /* remove from list of mdirs */\n    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);\n\n    return 0;\n}\n\nint lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir)\n{\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_dir_close(%p, %p)\", (void*)lfs, (void*)dir);\n\n    err = lfs_dir_close_(lfs, dir);\n\n    LFS_TRACE(\"lfs_dir_close -> %d\", err);\n    LFS_UNLOCK(lfs->cfg);\n    return err;\n}\n"
}