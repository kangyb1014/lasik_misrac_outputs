{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n- test_code: a modified lfs_file_read code that contains useful probe functions that print useful logs to a file \"/tmp/logs/49.txt\". The logs should contain the control path and state information of the violation scenario. If the MISRA C rule is not violated, you can just return an empty string for the test code.\nHere are the constraints for the test code:\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of lfs_file_read as much as possible.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<target_code>\nHere is the code of lfs_file_read:\n```c\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n    if (err) {\n        return err;\n    }\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\"PRIu32\")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n\n    LFS_TRACE(\"lfs_file_read -> %\"PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    return res;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function lfs_file_read:\n#define LFS_LOCK(cfg) ((void)cfg,0)\n...\n#define LFS_UNLOCK(cfg) ((void)cfg)\n...\n#define LFS_ASSERT(test) assert(test)\n...\n#define LFS_TRACE(__VA_ARGS__) \n...\nstatic bool lfs_mlist_isopen(struct lfs_mlist *head,\n        struct lfs_mlist *node) {\n    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {\n        if (*p == (struct lfs_mlist*)node) {\n            return true;\n        }\n    }\n\n    return false;\n}\n...\nstatic lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);\n\n#ifndef LFS_READONLY\n    if (file->flags & LFS_F_WRITING) {\n        // flush out any writes\n        int err = lfs_file_flush(lfs, file);\n        if (err) {\n            return err;\n        }\n    }\n#endif\n\n    return lfs_file_flushedread(lfs, file, buffer, size);\n}\n</additional code>\nJudge whether the above lfs_file_read code violates the rule 2.1 or not.",
  "is_rule_violated": true,
  "scenario": "The LFS_LOCK macro is defined as ((void)cfg,0) so it always returns 0. As a result the 'if (err) { return err; }' branch in lfs_file_read can never be taken with the current macro definition, making that branch unreachable code. This violates MISRA C 2023 Rule 2.1 (a project shall not contain unreachable code).",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n\n/* Forward declarations from the project; definitions live elsewhere. */\ntypedef struct lfs lfs_t;\ntypedef struct lfs_file lfs_file_t;\ntypedef int32_t lfs_ssize_t;\ntypedef uint32_t lfs_size_t;\n\n/* Probe logger: append control-path and state info to /tmp/logs/49.txt */\nstatic void lfs_probe_log(const char *stage, int err, const lfs_t *lfs,\n        const lfs_file_t *file, const void *buffer,\n        lfs_size_t size, lfs_ssize_t res) {\n    FILE *f = fopen(\"/tmp/logs/49.txt\", \"a\");\n    if (f != NULL) {\n        /* print pointer values and numeric state; cast for portability */\n        fprintf(f, \"%s: err=%d, lfs=%p, file=%p, buffer=%p, size=%lu, res=%ld\\n\",\n                stage, err, (const void *)lfs, (const void *)file,\n                buffer, (unsigned long)size, (long)res);\n        fclose(f);\n    }\n}\n\n/* External function used by the original function; not redefined here. */\nextern lfs_ssize_t lfs_file_read_(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size);\n\n/* The original function, augmented with probes that log control flow and state.\n   The original logic is preserved: the lock is taken, the error branch returns\n   immediately, the underlying read helper is called, then the lock is released.\n*/\n\nlfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,\n        void *buffer, lfs_size_t size) {\n    int err = LFS_LOCK(lfs->cfg);\n\n    /* Log state immediately after attempting the lock. With the provided\n       macro definition LFS_LOCK((void)cfg,0) this will always log err==0 and\n       demonstrate that the following 'if (err)' branch is never taken. */\n    lfs_probe_log(\"after_lock\", err, lfs, file, buffer, size, 0);\n\n    if (err) {\n        /* This branch becomes unreachable given LFS_LOCK returns 0. Keep the\n           original behavior (returning err) but log that it was taken. */\n        lfs_probe_log(\"lock_failed\", err, lfs, file, buffer, size, 0);\n        return err;\n    }\n\n    LFS_TRACE(\"lfs_file_read(%p, %p, %p, %\" PRIu32 \")\",\n            (void*)lfs, (void*)file, buffer, size);\n    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));\n\n    lfs_probe_log(\"before_read_\", 0, lfs, file, buffer, size, 0);\n    lfs_ssize_t res = lfs_file_read_(lfs, file, buffer, size);\n    lfs_probe_log(\"after_read_\", 0, lfs, file, buffer, size, res);\n\n    LFS_TRACE(\"lfs_file_read -> %\" PRId32, res);\n    LFS_UNLOCK(lfs->cfg);\n    lfs_probe_log(\"after_unlock\", 0, lfs, file, buffer, size, res);\n    return res;\n}\n"
}