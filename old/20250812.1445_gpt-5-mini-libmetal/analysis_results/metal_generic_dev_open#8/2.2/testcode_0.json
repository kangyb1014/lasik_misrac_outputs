{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe statement '(void)bus;' is a no-op used to silence an unused-parameter warning. It performs no observable action at runtime and its removal would not affect program behaviour, so it constitutes dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/66.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_open:\n```c\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n\t\t\t   struct metal_device **device)\n{\n\tstruct metal_list *node;\n\tstruct metal_device *dev;\n\n\t(void)bus;\n\n\tmetal_list_for_each(&_metal.common.generic_device_list, node) {\n\t\tdev = metal_container_of(node, struct metal_device, node);\n\t\tif (strcmp(dev->name, dev_name) == 0) {\n\t\t\t*device = dev;\n\t\t\treturn metal_generic_dev_sys_open(dev);\n\t\t}\n\t}\n\n\treturn -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe logging helper: append human-readable traces to /tmp/logs/66.txt */\nstatic void metal_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/66.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n    fclose(f);\n}\n\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n               struct metal_device **device)\n{\n    struct metal_list *node;\n    struct metal_device *dev;\n\n    /* Log entry and the fact that the bus parameter exists but is intentionally not used. */\n    metal_log_probe(\"enter: metal_generic_dev_open(dev_name='%s')\",\n                    dev_name ? dev_name : \"(null)\");\n\n    /* Original no-op to suppress unused-parameter warnings. Keep it to preserve original code. */\n    (void)bus;\n    metal_log_probe(\"executed: (void)bus;  -- no observable effect (silences unused-parameter warning)\");\n\n    metal_list_for_each(&_metal.common.generic_device_list, node) {\n        dev = metal_container_of(node, struct metal_device, node);\n        metal_log_probe(\"checking device: name='%s' (comparing to '%s')\",\n                        dev->name ? dev->name : \"(null)\",\n                        dev_name ? dev_name : \"(null)\");\n        if (strcmp(dev->name, dev_name) == 0) {\n            *device = dev;\n            metal_log_probe(\"match found: '%s' -> calling metal_generic_dev_sys_open\", dev->name);\n            int ret = metal_generic_dev_sys_open(dev);\n            metal_log_probe(\"metal_generic_dev_sys_open returned %d\", ret);\n            return ret;\n        }\n    }\n\n    metal_log_probe(\"no matching device found for '%s' -> returning -ENODEV\",\n                    dev_name ? dev_name : \"(null)\");\n    return -ENODEV;\n}\n"
}