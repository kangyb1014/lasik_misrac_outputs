{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe function parameter 'struct metal_bus *bus' is not const-qualified even though the function does not use or modify the pointed-to object (it only does (void)bus;). The pointed-to type could be declared const (const struct metal_bus *bus) without affecting this implementation, so Rule 8.13 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/67.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_open:\n```c\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n\t\t\t   struct metal_device **device)\n{\n\tstruct metal_list *node;\n\tstruct metal_device *dev;\n\n\t(void)bus;\n\n\tmetal_list_for_each(&_metal.common.generic_device_list, node) {\n\t\tdev = metal_container_of(node, struct metal_device, node);\n\t\tif (strcmp(dev->name, dev_name) == 0) {\n\t\t\t*device = dev;\n\t\t\treturn metal_generic_dev_sys_open(dev);\n\t\t}\n\t}\n\n\treturn -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_open code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n\nint metal_generic_dev_sys_open(struct metal_device *dev); /* external */\n\nint metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,\n                           struct metal_device **device)\n{\n    struct metal_list *node;\n    struct metal_device *dev;\n    FILE *log = fopen(\"/tmp/logs/67.txt\", \"a\");\n\n    if (log) {\n        fprintf(log, \"ENTER: metal_generic_dev_open(bus=%p, dev_name=\\\"%s\\\")\\n\",\n                (void *)bus, dev_name ? dev_name : \"(null)\");\n        fflush(log);\n    }\n\n    /* preserve original intent of explicitly marking bus as unused */\n    (void)bus;\n\n    metal_list_for_each(&_metal.common.generic_device_list, node) {\n        dev = metal_container_of(node, struct metal_device, node);\n\n        if (log) {\n            fprintf(log, \"ITER: node=%p, dev=%p, dev->name=\\\"%s\\\"\\n\",\n                    (void *)node, (void *)dev, dev->name ? dev->name : \"(null)\");\n            fflush(log);\n        }\n\n        /* keep original comparison behavior */\n        int cmp = strcmp(dev->name, dev_name);\n\n        if (log) {\n            fprintf(log, \"CMP: strcmp(\\\"%s\\\", \\\"%s\\\") = %d\\n\",\n                    dev->name ? dev->name : \"(null)\", dev_name ? dev_name : \"(null)\", cmp);\n            fflush(log);\n        }\n\n        if (cmp == 0) {\n            *device = dev;\n            if (log) {\n                fprintf(log, \"FOUND: device=%p, calling metal_generic_dev_sys_open\\n\",\n                        (void *)dev);\n                fflush(log);\n            }\n\n            int rv = metal_generic_dev_sys_open(dev);\n\n            if (log) {\n                fprintf(log, \"RETURN from metal_generic_dev_sys_open: %d\\n\", rv);\n                fclose(log);\n            }\n\n            return rv;\n        }\n    }\n\n    if (log) {\n        fprintf(log, \"NOT FOUND: returning -ENODEV (%d)\\n\", -ENODEV);\n        fclose(log);\n    }\n\n    return -ENODEV;\n}\n"
}