{
  "user_message": "An agent A claimed that the following metal_uio_dev_dma_map code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations..\n</misra_rule>\n<target_code>\nHere is the original code of metal_uio_dev_dma_map.\n```c\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n\t\t\t\t struct linux_device *ldev,\n\t\t\t\t uint32_t dir,\n\t\t\t\t struct metal_sg *sg_in,\n\t\t\t\t int nents_in,\n\t\t\t\t struct metal_sg *sg_out)\n{\n\tint i, j;\n\tvoid *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n\tstruct metal_io_region *io;\n\n\t(void)lbus;\n\t(void)dir;\n\n\t/* Check if the the input virt address is MMIO address */\n\tfor (i = 0; i < nents_in; i++) {\n\t\tvaddr_sg_lo = sg_in[i].virt;\n\t\tvaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\t\tfor (j = 0, io = ldev->device.regions;\n\t\t     j < (int)ldev->device.num_regions; j++, io++) {\n\t\t\tvaddr_lo = io->virt;\n\t\t\tvaddr_hi = vaddr_lo + io->size;\n\t\t\tif (vaddr_sg_lo >= vaddr_lo &&\n\t\t\t    vaddr_sg_hi <= vaddr_hi) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (j == (int)ldev->device.num_regions) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n\t\t\t__func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n\t\t\treturn -EINVAL;\n\t\t}\n\t}\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\treturn nents_in;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The expression performs pointer arithmetic on a void* (vaddr_lo + io->size). Pointer arithmetic on void* is a compiler extension (e.g. GCC treats void* like char*); standard C does not allow arithmetic on void*. This therefore violates MISRA C 2023 Rule 1.2. Suggested fix: cast to a character pointer or integer type before adding, e.g. vaddr_hi = (void *)((char *)vaddr_lo + io->size);\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/120.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_uio_dev_dma_map(struct linux_bus *lbus,\n                 struct linux_device *ldev,\n                 uint32_t dir,\n                 struct metal_sg *sg_in,\n                 int nents_in,\n                 struct metal_sg *sg_out)\n{\n    int i, j;\n    void *vaddr_sg_lo, *vaddr_sg_hi, *vaddr_lo, *vaddr_hi;\n    struct metal_io_region *io;\n\n    (void)lbus;\n    (void)dir;\n\n    probe_log(\"ENTER: %s: nents_in=%d, dev_name=%s\", __func__, nents_in,\n              (ldev && ldev->dev_name) ? ldev->dev_name : \"<null>\");\n\n    /* Check if the the input virt address is MMIO address */\n    for (i = 0; i < nents_in; i++) {\n        vaddr_sg_lo = sg_in[i].virt;\n        vaddr_sg_hi = vaddr_sg_lo + sg_in[i].len;\n\n        probe_log(\"ITER i=%d: sg_in[%d].virt=%p, len=%zu, computed vaddr_sg_hi=%p\",\n                  i, i, vaddr_sg_lo, (size_t)sg_in[i].len, vaddr_sg_hi);\n\n        for (j = 0, io = ldev->device.regions;\n             j < (int)ldev->device.num_regions; j++, io++) {\n            vaddr_lo = io->virt;\n            vaddr_hi = vaddr_lo + io->size;\n\n            probe_log(\"  REGION j=%d: region.virt=%p, region.size=%zu, computed vaddr_hi=%p\",\n                      j, vaddr_lo, (size_t)io->size, vaddr_hi);\n\n            if (vaddr_sg_lo >= vaddr_lo &&\n                vaddr_sg_hi <= vaddr_hi) {\n                probe_log(\"  MATCH found at region j=%d for sg[%d]: sg_lo=%p sg_hi=%p region_lo=%p region_hi=%p\",\n                          j, i, vaddr_sg_lo, vaddr_sg_hi, vaddr_lo, vaddr_hi);\n                break;\n            }\n        }\n        if (j == (int)ldev->device.num_regions) {\n            probe_log(\"  NO MATCH for sg[%d]: virt=%p len=%zu; checked_regions=%d\",\n                      i, vaddr_sg_lo, (size_t)sg_in[i].len, (int)ldev->device.num_regions);\n\n            metal_log(METAL_LOG_WARNING,\n              \"%s,%s: input address isn't MMIO addr: 0x%x,%d.\\n\",\n            __func__, ldev->dev_name, vaddr_sg_lo, sg_in[i].len);\n\n            probe_log(\"EXIT: %s: returning -EINVAL\", __func__);\n            return -EINVAL;\n        }\n    }\n    if (sg_out != sg_in) {\n        probe_log(\"COPY sg_out != sg_in: copying %d entries (size=%zu)\", nents_in,\n                  (size_t)(nents_in * (sizeof(struct metal_sg))));\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n    } else {\n        probe_log(\"NO COPY sg_out == sg_in\");\n    }\n\n    probe_log(\"EXIT: %s: returning %d\", __func__, nents_in);\n    return nents_in;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for metal_uio_dev_dma_map. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report from agent A is correct. The code performs pointer arithmetic on objects of type void* in two places (for example: vaddr_sg_hi = vaddr_sg_lo + sg_in[i].len; and vaddr_hi = vaddr_lo + io->size;). Pointer arithmetic on void* is not permitted by standard C (void has no size), and some compilers (GCC and others) implement arithmetic on void* as a compiler-specific extension (treating void* like char*). MISRA C:2023 Rule 1.2 forbids use of language extensions; therefore this is a violation unless your build toolchain explicitly documents and permits this extension and you have accepted that extension per project policy.\n\nRecommended fixes: perform arithmetic on a character or integer pointer type (or uintptr_t) and cast back to void*; for example:\n  vaddr_sg_hi = (void *)((char *)vaddr_sg_lo + sg_in[i].len);\n  vaddr_hi = (void *)((char *)vaddr_lo + io->size);\nOr store region base as unsigned char*/char* instead of void* and do arithmetic on that type. These changes avoid relying on the non\u2011standard language extension.\n\nNote: the supplied test code and empty log do not affect the language\u2011extension judgement \u2014 the violation is visible in the original source regardless of runtime coverage."
}