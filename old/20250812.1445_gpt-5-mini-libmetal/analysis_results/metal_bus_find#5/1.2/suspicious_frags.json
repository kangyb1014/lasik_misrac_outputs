{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No explicit compiler language extensions are visible in the provided snippet. The code uses standard C constructs only: structs, pointers, a for-like macro invocation (metal_list_for_each), a container macro call (metal_container_of), strcmp, and standard return/errno usage (-ENOENT). None of the following extension indicators appear in the snippet: __attribute__, __asm__, typeof, statement-expressions ({ ... }), labels-as-values, __builtin_*, __extension__, or any compiler-specific keywords. \n\nNotes on potential macro concerns (do not mark as suspicious here because the snippet does not itself contain extensions):\n- metal_container_of and metal_list_for_each are macros; their actual definitions could use compiler extensions (e.g., typeof) but those definitions are not shown. Per the instruction to report only explicit uses of documented compiler extensions, the invocation sites in this snippet do not by themselves demonstrate use of an extension. If the macro definitions are available, they should be inspected for extensions.\n- The use of -ENOENT and strcmp are standard POSIX/C library usage, not language extensions.\n\nTherefore, no fragments in this snippet explicitly require investigation under MISRA C 2023 Rule 1.2."
}