{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe loop iterates over the global bus list with a non-const iterator: 'struct metal_list *node' and the call metal_list_for_each(&_metal.common.bus_list, node) uses a non-const pointer even though the function only reads the list elements. Per MISRA C 2023 Rule 8.13, the iterator should be const-qualified when possible (e.g. 'const struct metal_list *node' and a const-aware for-each macro), or the API should return a const metal_bus (or accept 'const struct metal_bus **result') so that the read-only nature is reflected. As written the code fails to use const where it could, so the rule is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/43.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe helper: append logs to /tmp/logs/43.txt. Keeps function side-effects minimal. */\nstatic void metal_bus_find_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/43.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n    struct metal_list *node;\n    struct metal_bus *bus;\n\n    /* Log entry and inputs */\n    metal_bus_find_log(\"enter metal_bus_find: name=%p name_str=\\\"%s\\\" result=%p bus_list=%p\",\n                       (void *)name, (name ? name : \"(null)\"), (void *)result, (void *)&_metal.common.bus_list);\n\n    metal_list_for_each(&_metal.common.bus_list, node) {\n        /* Log the iterator node address */\n        metal_bus_find_log(\"iter: node=%p\", (void *)node);\n\n        bus = metal_container_of(node, struct metal_bus, node);\n\n        /* Log the container and its name (safe-guard when reading for logging) */\n        metal_bus_find_log(\"container_of -> bus=%p bus->name=\\\"%s\\\"\", (void *)bus,\n                           (bus && bus->name) ? bus->name : \"(null)\");\n\n        if (strcmp(bus->name, name) == 0 && result) {\n            *result = bus;\n            metal_bus_find_log(\"match: name=\\\"%s\\\" -> set *result=%p return=0\", bus->name, (void *)bus);\n            return 0;\n        }\n    }\n\n    metal_bus_find_log(\"exit metal_bus_find: not found return=%d\", -ENOENT);\n    return -ENOENT;\n}\n"
}