{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call if (metal_bus_find(bus->name, NULL) == 0) return -EEXIST; is dead. metal_bus_find only returns 0 when its 'result' parameter is non-NULL (the only return 0 is inside if (strcmp(...)==0 && result) { *result = bus; return 0; }). Passing NULL therefore guarantees metal_bus_find will never return 0, so the if-condition is never true and the return -EEXIST is never executed. Removing the entire if (and the call) would not change program behaviour, so this constitutes dead code and thus violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/42.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <stddef.h>\n\n/* Minimal supporting types so this translation unit can be compiled/tested\n   in isolation. These mirror the layout used by the real code: the\n   list node is the first member of struct metal_bus so a simple cast from\n   node to struct metal_bus * yields the container. */\nstruct metal_list {\n    struct metal_list *next;\n};\n\nstruct metal_bus {\n    struct metal_list node; /* must be first member for simple container conversion */\n    const char *name;\n};\n\n/* Minimal global structure to hold the bus list head (circular list sentinel). */\nstatic struct {\n    struct {\n        struct metal_list bus_list;\n    } common;\n} _metal = { { { &(_metal.common.bus_list) } } }; /* initialize to point to itself */\n\n/* The modified metal_bus_find with logging probes written to /tmp/logs/42.txt.\n   The original logic is preserved: the function only returns 0 when a matching\n   name is found AND the 'result' parameter is non-NULL. */\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n    FILE *log = fopen(\"/tmp/logs/42.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"metal_bus_find called: name=\\\"%s\\\" result=%p\\n\",\n                name ? name : \"(null)\", (void *)result);\n    }\n\n    struct metal_list *node;\n    struct metal_bus *bus;\n\n    /* Iterate the circular list starting from the head's next. This preserves\n       the original iteration semantics (the original used a macro). */\n    for (node = _metal.common.bus_list.next; node != &_metal.common.bus_list; node = node->next) {\n        /* node is the first member of struct metal_bus, so this cast recovers the container */\n        bus = (struct metal_bus *)node;\n\n        /* Capture strcmp result and whether the caller supplied a non-NULL result pointer. */\n        int cmp = strcmp(bus->name, name);\n        int result_is_null = (result == NULL);\n\n        if (log) {\n            fprintf(log, \"visiting bus: name=\\\"%s\\\" cmp=%d result_is_null=%d\\n\",\n                    bus->name ? bus->name : \"(null)\", cmp, result_is_null);\n        }\n\n        if (cmp == 0 && result) {\n            /* Original behavior preserved: only set *result and return 0 when result is non-NULL. */\n            *result = bus;\n            if (log) {\n                fprintf(log, \"match found: setting *result and returning 0\\n\");\n                fclose(log);\n            }\n            return 0;\n        }\n    }\n\n    if (log) {\n        fprintf(log, \"no matching bus found (or match ignored because result is NULL). returning -ENOENT (%d)\\n\", -ENOENT);\n        fclose(log);\n    }\n\n    return -ENOENT;\n}\n"
}