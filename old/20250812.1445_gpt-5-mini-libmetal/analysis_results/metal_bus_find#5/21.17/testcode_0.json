{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nYes. metal_bus_find calls strcmp(bus->name, name) without validating the 'name' parameter. In the fragment metal_linux_bus_finish the code calls metal_bus_find(lbus->bus_name, &bus) without checking lbus->bus_name. If lbus->bus_name is NULL (or points to a non\u2013NUL-terminated buffer), strcmp will dereference/read past the object bounds, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/47.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "#include <stdio.h>\n\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\tFILE *log = NULL;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\n\t\t/* Probe: log control flow and state to help reproduce potential out-of-bounds\n\t\t   accesses when strcmp(bus->name, name) is called. This preserves the\n\t\t   original logic (we do not change the strcmp call or short-circuit it). */\n\t\tlog = fopen(\"/tmp/logs/47.txt\", \"a\");\n\t\tif (log) {\n\t\t\t/* Log pointers and nullness information only. Do not attempt to read\n\t\t\t   beyond the first byte of any string to avoid introducing new\n\t\t\t   out-of-bounds accesses. */\n\t\t\tfprintf(log, \"metal_bus_find: node=%p bus=%p bus->name=%p name=%p\\n\",\n\t\t\t\t(void *)node, (void *)bus, (void *)bus->name, (const void *)name);\n\n\t\t\tif (bus->name) {\n\t\t\t\tunsigned char c = (unsigned char)bus->name[0];\n\t\t\t\t/* Print first byte in hex and a printable character or '.' */\n\t\t\t\tfprintf(log, \"  bus->name[0]=0x%02x %c\\n\",\n\t\t\t\t\t(unsigned int)c, (c >= 32 && c <= 126) ? (char)c : '.');\n\t\t\t} else {\n\t\t\t\tfprintf(log, \"  bus->name is NULL\\n\");\n\t\t\t}\n\n\t\t\tif (name) {\n\t\t\t\tfprintf(log, \"  name is non-NULL\\n\");\n\t\t\t} else {\n\t\t\t\tfprintf(log, \"  name is NULL\\n\");\n\t\t\t}\n\n\t\t\tfflush(log);\n\t\t\tfclose(log);\n\t\t\tlog = NULL;\n\t\t}\n\n\t\t/* Preserve original behavior: perform the strcmp as in the original code. */\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n"
}