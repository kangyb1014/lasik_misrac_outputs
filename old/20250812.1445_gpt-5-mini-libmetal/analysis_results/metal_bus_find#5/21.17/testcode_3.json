{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strcmp(bus->name, name) without first guaranteeing that both pointer parameters point to valid, NUL-terminated strings. If metal_bus_find is ever called with name == NULL (for example, metal_bus_find(NULL, &bus)), strcmp will dereference a NULL pointer and access memory out-of-bounds. Likewise, if a bus in the list has bus->name == NULL (e.g. inserted without going through the validation in metal_bus_register), strcmp(bus->name, name) will dereference NULL. Therefore the use of strcmp here can lead to out-of-bounds access.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_find code that contains useful probe functions that print useful logs to a file \"/tmp/logs/47.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_find as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_find:\n```c\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n\tstruct metal_list *node;\n\tstruct metal_bus *bus;\n\n\tmetal_list_for_each(&_metal.common.bus_list, node) {\n\t\tbus = metal_container_of(node, struct metal_bus, node);\n\t\tif (strcmp(bus->name, name) == 0 && result) {\n\t\t\t*result = bus;\n\t\t\treturn 0;\n\t\t}\n\t}\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_find code.\n",
  "test_code": "#include <stdio.h>\n#include <unistd.h>\n\n/* Probe helper: write compact, safe logs about pointers/state to /tmp/logs/47.txt.\n * This helper intentionally does not dereference bus->name or name; it only logs\n * pointer values so it is safe to call even when those pointers are NULL.\n */\nstatic void metal_bus_find_log(const char *name, const void *bus_ptr, const void *node_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/47.txt\", \"a\");\n    if (!f)\n        return;\n    /* Print PID, node pointer, bus pointer, bus->name pointer (as recorded from bus_ptr if non-NULL), and name pointer. */\n    /* We cannot dereference bus_ptr here because bus may be NULL or malformed; callers may pass a valid struct pointer.\n     * To avoid depending on struct layout in this helper, callers will compute bus->name pointer if they choose.\n     */\n    fprintf(f, \"metal_bus_find: pid=%d node=%p bus=%p name_ptr=%p\\n\",\n            (int)getpid(), node_ptr, bus_ptr, (void *)name);\n    fflush(f);\n    /* Try to force the write to disk so that logs are available even if the caller crashes (e.g., due to strcmp on NULL).\n     * If fsync fails or is unavailable, we still proceed silently.\n     */\n    (void)fsync(fileno(f));\n    fclose(f);\n}\n\nint metal_bus_find(const char *name, struct metal_bus **result)\n{\n    struct metal_list *node;\n    struct metal_bus *bus;\n\n    metal_list_for_each(&_metal.common.bus_list, node) {\n        bus = metal_container_of(node, struct metal_bus, node);\n        /* Log the control flow and pointer state before performing the strcmp that may dereference pointers. */\n        metal_bus_find_log(name, (const void *)bus, (const void *)node);\n        if (strcmp(bus->name, name) == 0 && result) {\n            *result = bus;\n            return 0;\n        }\n    }\n    return -ENOENT;\n}\n"
}