{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nCalling strlen(path) after only a NULL check can read beyond the bounds of the object referenced by path if the caller passes a non-NULL pointer that is not a valid NUL-terminated string or points to a buffer shorter than expected. For example, if path points to memory without a terminating '\\0' within its allocation, strlen(path) will scan past the object bounds \u2014 violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_open:\n```c\nint metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\tif (!path || !strlen(path))\n\t\treturn -EINVAL;\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\treturn fd < 0 ? -errno : fd;\n}\n```\n</target_code>\nPlease provide the modified metal_open code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <sys/mman.h>\n#include <unistd.h>\n#include <stdint.h>\n\nint metal_open(const char *path, int shm)\n{\n    const int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n    const int mode = S_IRUSR | S_IWUSR;\n    int fd;\n\n    /* Open a log to record control flow and state. Keep logs append-only. */\n    FILE *log = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"metal_open called: path=%p, shm=%d\\n\", (void *)path, shm);\n        fflush(log);\n    }\n\n    /* Preserve original logic: NULL check followed by strlen (potentially unsafe if caller passes a non NUL-terminated pointer). */\n    if (!path) {\n        if (log) {\n            fprintf(log, \"path is NULL -> returning -EINVAL\\n\");\n            fclose(log);\n        }\n        return -EINVAL;\n    }\n\n    if (log) {\n        fprintf(log, \"about to call strlen on path=%p\\n\", (void *)path);\n        fflush(log);\n    }\n\n    /* Intentionally call strlen as in the original code so that agents reproducing the violation\n       can observe the behavior (this is the point of the probe). This may read beyond the\n       bounds of the object referenced by path if path is not a valid NUL-terminated string. */\n    size_t len = strlen(path);\n\n    if (log) {\n        fprintf(log, \"strlen returned %zu for path=%p\\n\", len, (void *)path);\n        fflush(log);\n    }\n\n    if (!len) {\n        if (log) {\n            fprintf(log, \"empty string -> returning -EINVAL\\n\");\n            fclose(log);\n        }\n        return -EINVAL;\n    }\n\n    fd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\n    if (log) {\n        if (fd < 0) {\n            fprintf(log, \"%s failed: fd=%d, errno=%d\\n\", shm ? \"shm_open\" : \"open\", fd, errno);\n        } else {\n            fprintf(log, \"%s succeeded: fd=%d\\n\", shm ? \"shm_open\" : \"open\", fd);\n        }\n        fclose(log);\n    }\n\n    return fd < 0 ? -errno : fd;\n}\n"
}