{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(ldev->sdev->driver_name, ldrv->drv_name) can dereference NULL or scan past the end of a non-terminated buffer. For example, if ldev->sdev->driver_name is NULL (or either pointer points to a non\u2011NUL\u2011terminated buffer), strcmp will access memory beyond the bounds of the referenced object, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_open:\n```c\nint metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\tif (!path || !strlen(path))\n\t\treturn -EINVAL;\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\treturn fd < 0 ? -errno : fd;\n}\n```\n</target_code>\nPlease provide the modified metal_open code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <sys/mman.h>\n#include <unistd.h>\n\nint metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\t/* Open log for probes. We do NOT abort if logging fails. */\n\tFILE *log = fopen(\"/tmp/logs/103.txt\", \"a\");\n\tif (log) {\n\t\tfprintf(log, \"metal_open invoked: path=%p, shm=%d\\n\", (void *)path, shm);\n\t}\n\n\t/* Preserve original logic: check for NULL before calling strlen. */\n\tif (!path) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"path is NULL -> returning -EINVAL\\n\");\n\t\t\tfclose(log);\n\t\t}\n\t\treturn -EINVAL;\n\t}\n\n\t/* Safe to call strlen now since path != NULL. Log length and a preview of contents. */\n\tsize_t path_len = strlen(path);\n\tif (log) {\n\t\t/* Limit printed string length to avoid huge logs; show up to 256 chars. */\n\t\tsize_t preview_len = path_len > 256 ? 256 : path_len;\n\t\tchar preview[257];\n\t\tmemcpy(preview, path, preview_len);\n\t\tpreview[preview_len] = '\\0';\n\t\tfprintf(log, \"path_len=%zu, path_preview=\\\"%s\\\"\\n\", path_len, preview);\n\t}\n\n\tif (path_len == 0) {\n\t\tif (log) {\n\t\t\tfprintf(log, \"path is empty string -> returning -EINVAL\\n\");\n\t\t\tfclose(log);\n\t\t}\n\t\treturn -EINVAL;\n\t}\n\n\tif (log) {\n\t\tfprintf(log, \"attempting to %s with flags=0x%x mode=0%o\\n\",\n\t\t\tshm ? \"shm_open\" : \"open\", flags, mode);\n\t\tfflush(log);\n\t}\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\tint saved_errno = errno; /* capture errno immediately after call */\n\n\tif (log) {\n\t\tfprintf(log, \"system call returned fd=%d errno=%d\\n\", fd, saved_errno);\n\t\tfclose(log);\n\t}\n\n\treturn fd < 0 ? -saved_errno : fd;\n}\n"
}