{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nIn the call metal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\", ldev->dev_path, strerror(-result)); the expression strerror(-result) is evaluated but its value is never consumed by the format string (the format contains only one %s). The call to strerror() is therefore an executed operation whose removal would not affect program behaviour (aside from any incidental side effects of strerror), which constitutes dead code under MISRA C 2023 Rule 2.2. This occurs in metal_uio_dev_open when handling a failed metal_open. (Fix: remove the extra argument or add an appropriate %s to the format string to use the strerror result.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/98.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_open:\n```c\nint metal_open(const char *path, int shm)\n{\n\tconst int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n\tconst int mode = S_IRUSR | S_IWUSR;\n\tint fd;\n\n\tif (!path || !strlen(path))\n\t\treturn -EINVAL;\n\n\tfd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\treturn fd < 0 ? -errno : fd;\n}\n```\n</target_code>\nPlease provide the modified metal_open code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <unistd.h>\n\nstatic void probe_log_call(const char *path, int shm)\n{\n    FILE *f = fopen(\"/tmp/logs/98.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"metal_open: called with path='%s' shm=%d\\n\", path ? path : \"(null)\", shm);\n    fclose(f);\n}\n\nstatic void probe_log_result(const char *path, int shm, int fd, int saved_errno)\n{\n    FILE *f = fopen(\"/tmp/logs/98.txt\", \"a\");\n    if (!f)\n        return;\n\n    if (fd >= 0) {\n        fprintf(f, \"metal_open: opened '%s' shm=%d -> fd=%d\\n\", path ? path : \"(null)\", shm, fd);\n    } else {\n        fprintf(f, \"metal_open: failed to open '%s' shm=%d -> fd=%d errno=%d (%s)\\n\",\n                path ? path : \"(null)\", shm, fd, saved_errno, saved_errno ? strerror(saved_errno) : \"(no errno)\");\n    }\n\n    fclose(f);\n}\n\nint metal_open(const char *path, int shm)\n{\n    const int flags = O_RDWR | O_CREAT | O_CLOEXEC;\n    const int mode = S_IRUSR | S_IWUSR;\n    int fd;\n\n    /* Log the function entry and parameters */\n    probe_log_call(path, shm);\n\n    if (!path || !strlen(path)) {\n        /* Log the early return case */\n        FILE *f = fopen(\"/tmp/logs/98.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"metal_open: invalid path -> returning -EINVAL (%d)\\n\", -EINVAL);\n            fclose(f);\n        }\n        return -EINVAL;\n    }\n\n    fd = shm ? shm_open(path, flags, mode) : open(path, flags, mode);\n\n    /* Capture errno immediately after the syscall to avoid it being clobbered by logging */\n    int saved_errno = errno;\n\n    /* Log the result without changing behavior */\n    probe_log_result(path, shm, fd, saved_errno);\n\n    return fd < 0 ? -saved_errno : fd;\n}\n"
}