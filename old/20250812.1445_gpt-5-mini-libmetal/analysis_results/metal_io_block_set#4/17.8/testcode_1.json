{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe for loop performs len-- (and len is a function parameter). Modifying the parameter 'len' inside the function violates MISRA C 2023 Rule 17.8. (ptr++ modifies a local pointer and writes through ptr modify the pointed object \u2014 those are allowed.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_set code that contains useful probe functions that print useful logs to a file \"/tmp/logs/37.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_set as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_set:\n```c\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n\t       unsigned char value, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tint retlen = len;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_set) {\n\t\t(*io->ops.block_set)(\n\t\t\tio, offset, value, memory_order_seq_cst, len);\n\t} else {\n\t\tunsigned int cint = value;\n\t\tunsigned int i;\n\n\t\tfor (i = 1; i < sizeof(int); i++)\n\t\t\tcint |= ((unsigned int)value << (CHAR_BIT * i));\n\n\t\tfor (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = cint;\n\t\tfor (; len != 0; ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_set code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <limits.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/37.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n           unsigned char value, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    int retlen = len;\n    int initial_len = len;\n\n    probe_log(\"ENTER: metal_io_block_set io=%p offset=%lu value=%u initial_len=%d ptr=%p io_size=%lu\",\n              (void *)io, offset, (unsigned int)value, initial_len, (void *)ptr, (unsigned long)io->size);\n\n    if (!ptr) {\n        probe_log(\"PTR_NULL: ptr is NULL, returning -ERANGE\");\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size) {\n        probe_log(\"LEN_ADJUST_BEFORE: offset+len (%lu) > io->size (%lu). old len=%d\",\n                  (unsigned long)(offset + (unsigned long)len), (unsigned long)io->size, len);\n        len = io->size - offset;\n        probe_log(\"LEN_ADJUSTED: new len=%d\", len);\n    }\n    retlen = len;\n    probe_log(\"AFTER_ADJUST: retlen=%d len=%d\", retlen, len);\n\n    if (io->ops.block_set) {\n        probe_log(\"CALL_OPS_BLOCK_SET: calling backend block_set io=%p offset=%lu value=%u len=%d\",\n                  (void *)io, offset, (unsigned int)value, len);\n        (*io->ops.block_set)(\n            io, offset, value, memory_order_seq_cst, len);\n        probe_log(\"RETURN_OPS_BLOCK_SET: backend block_set completed\");\n    } else {\n        unsigned int cint = value;\n        unsigned int i;\n\n        probe_log(\"FALLBACK_PATH: preparing cint and loops. sizeof(int)=%zu CHAR_BIT=%d initial len=%d ptr=%p\",\n                  sizeof(int), CHAR_BIT, len, (void *)ptr);\n\n        for (i = 1; i < sizeof(int); i++)\n            cint |= ((unsigned int)value << (CHAR_BIT * i));\n\n        probe_log(\"AFTER_CINT: cint=0x%X\", cint);\n\n        probe_log(\"ALIGN_LOOP_START: ptr=%p len=%d\", (void *)ptr, len);\n        for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n            *(unsigned char *)ptr = (unsigned char) value;\n        probe_log(\"ALIGN_LOOP_END: ptr=%p len=%d\", (void *)ptr, len);\n\n        probe_log(\"WORD_LOOP_START: ptr=%p len=%d sizeof(int)=%zu\", (void *)ptr, len, sizeof(int));\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                        len -= sizeof(int))\n            *(unsigned int *)ptr = cint;\n        probe_log(\"WORD_LOOP_END: ptr=%p len=%d\", (void *)ptr, len);\n\n        probe_log(\"TAIL_LOOP_START: ptr=%p len=%d\", (void *)ptr, len);\n        for (; len != 0; ptr++, len--)\n            *(unsigned char *)ptr = (unsigned char) value;\n        probe_log(\"TAIL_LOOP_END: ptr=%p len=%d\", (void *)ptr, len);\n\n        probe_log(\"FENCE_BEFORE: calling atomic_thread_fence\");\n        atomic_thread_fence(memory_order_seq_cst);\n        probe_log(\"FENCE_AFTER: atomic_thread_fence completed\");\n    }\n\n    probe_log(\"EXIT: initial_len=%d returned_retlen=%d final_len=%d\", initial_len, retlen, len);\n    return retlen;\n}\n"
}