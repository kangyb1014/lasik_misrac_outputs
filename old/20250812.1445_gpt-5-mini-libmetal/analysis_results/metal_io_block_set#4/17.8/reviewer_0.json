{
  "user_message": "An agent A claimed that the following metal_io_block_set code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of metal_io_block_set.\n```c\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n\t       unsigned char value, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tint retlen = len;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_set) {\n\t\t(*io->ops.block_set)(\n\t\t\tio, offset, value, memory_order_seq_cst, len);\n\t} else {\n\t\tunsigned int cint = value;\n\t\tunsigned int i;\n\n\t\tfor (i = 1; i < sizeof(int); i++)\n\t\t\tcint |= ((unsigned int)value << (CHAR_BIT * i));\n\n\t\tfor (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = cint;\n\t\tfor (; len != 0; ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function parameter 'len' is modified in the function. In the shown loop the iteration expression 'len -= sizeof(int)' mutates the parameter 'len' (and earlier there's 'len = io->size - offset'), which violates MISRA C 2023 Rule 17.8 (a function parameter should not be modified).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/37.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n           unsigned char value, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    int retlen = len;\n\n    probe_log(\"enter metal_io_block_set: io=%p offset=%lu value=%u len=%d io_size=%lu ptr=%p\",\n              (void *)io, offset, (unsigned int)value,\n              len, (io ? io->size : 0UL), (void *)ptr);\n\n    if (!ptr) {\n        probe_log(\"exit: ptr is NULL -> return -ERANGE\");\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size) {\n        probe_log(\"adjust len: original len=%d io->size=%lu offset=%lu -> new len=%ld\",\n                  retlen, io->size, offset, (long)(io->size - offset));\n        len = io->size - offset;\n    }\n    retlen = len;\n    probe_log(\"after adjust: retlen=%d len=%d ptr=%p\", retlen, len, (void *)ptr);\n    if (io->ops.block_set) {\n        probe_log(\"calling io->ops.block_set: io=%p offset=%lu value=%u len=%d\",\n                  (void *)io, offset, (unsigned int)value, len);\n        (*io->ops.block_set)(\n            io, offset, value, memory_order_seq_cst, len);\n    } else {\n        unsigned int cint = value;\n        unsigned int i;\n\n        probe_log(\"build cint: initial cint=%u value=%u\", cint, (unsigned int)value);\n        for (i = 1; i < sizeof(int); i++)\n            cint |= ((unsigned int)value << (CHAR_BIT * i));\n        probe_log(\"build cint: final cint=0x%x (after %u iterations)\", cint, i);\n\n        probe_log(\"start loop1 alignment: ptr=%p len=%d sizeof(int)=%zu\",\n                  (void *)ptr, len, sizeof(int));\n        for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--) {\n            probe_log(\"loop1: ptr=%p len=%d writing byte 0x%x\", (void *)ptr, len, (unsigned int)value);\n            *(unsigned char *)ptr = (unsigned char) value;\n        }\n        probe_log(\"after loop1: ptr=%p len=%d\", (void *)ptr, len);\n\n        probe_log(\"start loop2 word writes: ptr=%p len=%d sizeof(int)=%zu\",\n                  (void *)ptr, len, sizeof(int));\n        /* preserve original behavior while logging each iteration to evidence len mutation */\n        while (len >= (int)sizeof(int)) {\n            probe_log(\"loop2 (before write): ptr=%p len=%d cint=0x%x\", (void *)ptr, len, cint);\n            *(unsigned int *)ptr = cint;\n            /* advance as original for-loop would do */\n            ptr += sizeof(int);\n            len -= sizeof(int);\n            probe_log(\"loop2 (after write): ptr=%p len=%d\", (void *)ptr, len);\n        }\n        probe_log(\"after loop2: ptr=%p len=%d\", (void *)ptr, len);\n\n        probe_log(\"start loop3 tail bytes: ptr=%p len=%d\", (void *)ptr, len);\n        for (; len != 0; ptr++, len--) {\n            probe_log(\"loop3: ptr=%p len=%d writing byte 0x%x\", (void *)ptr, len, (unsigned int)value);\n            *(unsigned char *)ptr = (unsigned char) value;\n        }\n        probe_log(\"after loop3: ptr=%p len=%d\", (void *)ptr, len);\n\n        atomic_thread_fence(memory_order_seq_cst);\n    }\n    probe_log(\"exit metal_io_block_set: returning retlen=%d\", retlen);\n    return retlen;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for metal_io_block_set. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified. In metal_io_block_set the integer parameter 'len' is assigned to and mutated multiple times: e.g. \"len = io->size - offset;\" and the loop expressions \"len--\", \"len -= sizeof(int)\" and additional increments/decrements in the for/while loops. These are direct modifications of the parameter variable, so the code violates Rule 17.8. (The pointer parameter 'io' is not itself modified; only the scalar parameter 'len' is.) A compliant fix is to copy the parameter into a local variable (for example: int remaining = len;) and perform adjustments on that local variable while preserving the original parameter or returning the preserved value.)"
}