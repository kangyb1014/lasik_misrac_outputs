{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe loop modifies the function parameter 'len' (using len--), which violates MISRA C 2023 Rule 17.8. Note: incrementing 'ptr' is allowed because 'ptr' is a local variable, not a function parameter; writing through the pointer (modifying the pointed-to object) is also permitted, but changing the parameter 'len' is not.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_io_block_set code that contains useful probe functions that print useful logs to a file \"/tmp/logs/37.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_io_block_set as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_io_block_set:\n```c\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n\t       unsigned char value, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tint retlen = len;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_set) {\n\t\t(*io->ops.block_set)(\n\t\t\tio, offset, value, memory_order_seq_cst, len);\n\t} else {\n\t\tunsigned int cint = value;\n\t\tunsigned int i;\n\n\t\tfor (i = 1; i < sizeof(int); i++)\n\t\t\tcint |= ((unsigned int)value << (CHAR_BIT * i));\n\n\t\tfor (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = cint;\n\t\tfor (; len != 0; ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\nPlease provide the modified metal_io_block_set code.\n",
  "test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stdatomic.h>\n#include <limits.h>\n#include <errno.h>\n\n/* Forward declaration to avoid requiring the full definition here. */\nstruct metal_io_region;\n\n/* Probe helper: append a single-line log to /tmp/logs/37.txt capturing key state. */\nstatic void metal_io_block_set_log(const char *tag, struct metal_io_region *io,\n                                   unsigned long offset, unsigned char value,\n                                   int len, unsigned char *ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/37.txt\", \"a\");\n    if (f != NULL) {\n        (void)fprintf(f, \"%s: io=%p offset=%lu value=%u len=%d ptr=%p\\n\",\n                      tag, (void *)io, offset, (unsigned) value, len,\n                      (void *)ptr);\n        (void)fclose(f);\n    }\n}\n\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n               unsigned char value, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    int retlen = len;\n\n    /* Log initial entry state */\n    metal_io_block_set_log(\"entry\", io, offset, value, len, ptr);\n\n    if (!ptr) {\n        metal_io_block_set_log(\"null_ptr_return\", io, offset, value, len, ptr);\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size) {\n        /* Log before and after adjusting len so the modification to the parameter is captured. */\n        metal_io_block_set_log(\"len_before_adjust\", io, offset, value, len, ptr);\n        len = io->size - offset;\n        metal_io_block_set_log(\"len_after_adjust\", io, offset, value, len, ptr);\n    }\n    retlen = len;\n    if (io->ops.block_set) {\n        metal_io_block_set_log(\"using_ops_block_set\", io, offset, value, len, ptr);\n        (*io->ops.block_set)(\n            io, offset, value, memory_order_seq_cst, len);\n    } else {\n        unsigned int cint = value;\n        unsigned int i;\n\n        for (i = 1; i < sizeof(int); i++)\n            cint |= ((unsigned int)value << (CHAR_BIT * i));\n\n        /* First: align to int boundary with single-byte writes. Log each iteration to capture len/ptr changes. */\n        for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--) {\n            metal_io_block_set_log(\"align_byte_loop\", io, offset, value, len, ptr);\n            *(unsigned char *)ptr = (unsigned char) value;\n        }\n\n        /* Second: write as many sizeof(int) words as possible. Log each iteration (len is modified by -=). */\n        for (; len >= (int)sizeof(int); ptr += sizeof(int), len -= sizeof(int)) {\n            metal_io_block_set_log(\"word_write_loop\", io, offset, value, len, ptr);\n            *(unsigned int *)ptr = cint;\n        }\n\n        /* Final: remaining bytes. Log each iteration. */\n        for (; len != 0; ptr++, len--) {\n            metal_io_block_set_log(\"final_byte_loop\", io, offset, value, len, ptr);\n            *(unsigned char *)ptr = (unsigned char) value;\n        }\n        atomic_thread_fence(memory_order_seq_cst);\n    }\n\n    metal_io_block_set_log(\"exit\", io, offset, value, retlen, ptr);\n    return retlen;\n}\n"
}