{
  "user_message": "An agent A claimed that the following metal_io_block_set code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of metal_io_block_set.\n```c\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n\t       unsigned char value, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tint retlen = len;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_set) {\n\t\t(*io->ops.block_set)(\n\t\t\tio, offset, value, memory_order_seq_cst, len);\n\t} else {\n\t\tunsigned int cint = value;\n\t\tunsigned int i;\n\n\t\tfor (i = 1; i < sizeof(int); i++)\n\t\t\tcint |= ((unsigned int)value << (CHAR_BIT * i));\n\n\t\tfor (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = cint;\n\t\tfor (; len != 0; ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The loop modifies the function parameter 'len' (using len--), which violates MISRA C 2023 Rule 17.8. Note: incrementing 'ptr' is allowed because 'ptr' is a local variable, not a function parameter; writing through the pointer (modifying the pointed-to object) is also permitted, but changing the parameter 'len' is not.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstruct metal_io_region;\nstatic void metal_io_block_set_log(const char *tag, struct metal_io_region *io,\n                                   unsigned long offset, unsigned char value,\n                                   int len, unsigned char *ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/37.txt\", \"a\");\n    if (f != NULL) {\n        (void)fprintf(f, \"%s: io=%p offset=%lu value=%u len=%d ptr=%p\\n\",\n                      tag, (void *)io, offset, (unsigned) value, len,\n                      (void *)ptr);\n        (void)fclose(f);\n    }\n}\n\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n               unsigned char value, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    int retlen = len;\n\n    /* Log initial entry state */\n    metal_io_block_set_log(\"entry\", io, offset, value, len, ptr);\n\n    if (!ptr) {\n        metal_io_block_set_log(\"null_ptr_return\", io, offset, value, len, ptr);\n        return -ERANGE;\n    }\n    if ((offset + len) > io->size) {\n        /* Log before and after adjusting len so the modification to the parameter is captured. */\n        metal_io_block_set_log(\"len_before_adjust\", io, offset, value, len, ptr);\n        len = io->size - offset;\n        metal_io_block_set_log(\"len_after_adjust\", io, offset, value, len, ptr);\n    }\n    retlen = len;\n    if (io->ops.block_set) {\n        metal_io_block_set_log(\"using_ops_block_set\", io, offset, value, len, ptr);\n        (*io->ops.block_set)(\n            io, offset, value, memory_order_seq_cst, len);\n    } else {\n        unsigned int cint = value;\n        unsigned int i;\n\n        for (i = 1; i < sizeof(int); i++)\n            cint |= ((unsigned int)value << (CHAR_BIT * i));\n\n        /* First: align to int boundary with single-byte writes. Log each iteration to capture len/ptr changes. */\n        for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--) {\n            metal_io_block_set_log(\"align_byte_loop\", io, offset, value, len, ptr);\n            *(unsigned char *)ptr = (unsigned char) value;\n        }\n\n        /* Second: write as many sizeof(int) words as possible. Log each iteration (len is modified by -=). */\n        for (; len >= (int)sizeof(int); ptr += sizeof(int), len -= sizeof(int)) {\n            metal_io_block_set_log(\"word_write_loop\", io, offset, value, len, ptr);\n            *(unsigned int *)ptr = cint;\n        }\n\n        /* Final: remaining bytes. Log each iteration. */\n        for (; len != 0; ptr++, len--) {\n            metal_io_block_set_log(\"final_byte_loop\", io, offset, value, len, ptr);\n            *(unsigned char *)ptr = (unsigned char) value;\n        }\n        atomic_thread_fence(memory_order_seq_cst);\n    }\n\n    metal_io_block_set_log(\"exit\", io, offset, value, retlen, ptr);\n    return retlen;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for metal_io_block_set. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 17.8 forbids modification of function parameters. In metal_io_block_set the parameter len is assigned to (len = io->size - offset;) and is modified in the loops (len-- and len -= sizeof(int)). These are direct modifications of a non\u2011pointer parameter and therefore violate Rule 17.8. (Modifying the object pointed to by a pointer parameter would be allowed, and ptr here is a local variable so changing ptr is not an issue.) Recommended fix: preserve the parameter and use a local work variable (for example, int remaining = len;) for adjustments and loop counters."
}