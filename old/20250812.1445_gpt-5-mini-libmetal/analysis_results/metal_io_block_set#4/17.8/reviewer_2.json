{
  "user_message": "An agent A claimed that the following metal_io_block_set code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of metal_io_block_set.\n```c\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n\t       unsigned char value, int len)\n{\n\tunsigned char *ptr = metal_io_virt(io, offset);\n\tint retlen = len;\n\n\tif (!ptr)\n\t\treturn -ERANGE;\n\tif ((offset + len) > io->size)\n\t\tlen = io->size - offset;\n\tretlen = len;\n\tif (io->ops.block_set) {\n\t\t(*io->ops.block_set)(\n\t\t\tio, offset, value, memory_order_seq_cst, len);\n\t} else {\n\t\tunsigned int cint = value;\n\t\tunsigned int i;\n\n\t\tfor (i = 1; i < sizeof(int); i++)\n\t\t\tcint |= ((unsigned int)value << (CHAR_BIT * i));\n\n\t\tfor (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tfor (; len >= (int)sizeof(int); ptr += sizeof(int),\n\t\t\t\t\t\tlen -= sizeof(int))\n\t\t\t*(unsigned int *)ptr = cint;\n\t\tfor (; len != 0; ptr++, len--)\n\t\t\t*(unsigned char *)ptr = (unsigned char) value;\n\t\tatomic_thread_fence(memory_order_seq_cst);\n\t}\n\treturn retlen;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function modifies the parameter 'len' in the statement 'if ((offset + len) > io->size) len = io->size - offset;'. This is a direct modification of a non\u2011pointer function parameter and therefore violates MISRA C 2023 Rule 17.8.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/37.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_io_block_set(struct metal_io_region *io, unsigned long offset,\n           unsigned char value, int len)\n{\n    unsigned char *ptr = metal_io_virt(io, offset);\n    int retlen = len;\n\n    probe_log(\"ENTER: metal_io_block_set io=%p offset=%lu value=%u len=%d\",\n              (void *)io, offset, (unsigned int)value, len);\n\n    if (!ptr) {\n        probe_log(\"PTR_NULL: virtual pointer is NULL for offset=%lu\", offset);\n        return -ERANGE;\n    }\n\n    probe_log(\"PTR_OK: ptr=%p io_size=%lu\", (void *)ptr,\n              (io ? (unsigned long)io->size : 0UL));\n\n    probe_log(\"Bounds check: offset=%lu len=%d io_size=%lu\",\n              offset, len, (io ? (unsigned long)io->size : 0UL));\n\n    if ((offset + len) > io->size) {\n        probe_log(\"Bounds exceeded: offset + len = %lu > io->size = %lu\",\n                  offset + (unsigned long)len, (unsigned long)io->size);\n        probe_log(\"len before adjust = %d\", len);\n        /* The following line modifies the non-pointer function parameter 'len'. */\n        len = io->size - offset;\n        probe_log(\"len after adjust = %d\", len);\n    }\n\n    retlen = len;\n    probe_log(\"After bounds adjustment retlen=%d\", retlen);\n\n    if (io->ops.block_set) {\n        probe_log(\"Using ops.block_set branch: calling block_set(io=%p, offset=%lu, value=%u, order=seq_cst, len=%d)\",\n                  (void *)io, offset, (unsigned int)value, len);\n        (*io->ops.block_set)(\n            io, offset, value, memory_order_seq_cst, len);\n    } else {\n        unsigned int cint = value;\n        unsigned int i;\n\n        probe_log(\"Using generic fill branch: initial cint=%u\", cint);\n\n        for (i = 1; i < sizeof(int); i++)\n            cint |= ((unsigned int)value << (CHAR_BIT * i));\n\n        probe_log(\"cint after expansion=%u sizeof(int)=%zu\", cint, sizeof(int));\n\n        probe_log(\"Before leading byte loop: ptr=%p len=%d\", (void *)ptr, len);\n        for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)\n            *(unsigned char *)ptr = (unsigned char) value;\n        probe_log(\"After leading byte loop: ptr=%p len=%d\", (void *)ptr, len);\n\n        for (; len >= (int)sizeof(int); ptr += sizeof(int),\n                        len -= sizeof(int))\n            *(unsigned int *)ptr = cint;\n        probe_log(\"After word loop: ptr=%p len=%d\", (void *)ptr, len);\n\n        for (; len != 0; ptr++, len--)\n            *(unsigned char *)ptr = (unsigned char) value;\n        probe_log(\"After trailing byte loop: ptr=%p len=%d\", (void *)ptr, len);\n\n        atomic_thread_fence(memory_order_seq_cst);\n        probe_log(\"atomic_thread_fence(seq_cst) executed\");\n    }\n\n    probe_log(\"EXIT: returning retlen=%d\", retlen);\n    return retlen;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for metal_io_block_set. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified (except that the object referred to by a pointer parameter may be modified, but the pointer itself shall not). In the posted code the integer parameter 'len' is directly modified in multiple places: the assignment in the bounds check (len = io->size - offset;) and the subsequent loop updates (len--, len -= sizeof(int), etc.). These are direct modifications of a non\u2011pointer parameter and thus violate Rule 17.8. To comply, the function should copy the parameter into a local variable (e.g. int local_len = len) and modify that local instead, leaving the original parameter unmodified."
}