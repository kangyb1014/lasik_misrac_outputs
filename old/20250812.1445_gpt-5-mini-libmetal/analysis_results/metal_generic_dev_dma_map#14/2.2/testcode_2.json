{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe cast-to-void statement '(void)bus;' is a no-op used to silence an unused-parameter warning. It performs no observable action at runtime, and removing it would not affect the program behaviour, so it is dead code according to MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_generic_dev_dma_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/114.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_generic_dev_dma_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_map:\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\nPlease provide the modified metal_generic_dev_dma_map code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n\n/* Minimal type declarations to keep this translation unit self-contained\n   while preserving the original function signature and behavior. */\nstruct metal_bus { int dummy; };\nstruct metal_device { int dummy; };\nstruct metal_sg {\n    void *virt;\n    size_t len;\n};\n\n/* Use an enum instead of a macro for the DMA direction constant. */\nenum { METAL_DMA_DEV_W = 1 };\n\n/* Local logging helper that appends to the required log file. */\nstatic void log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/114.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n}\n\n/* Provide simple cache operation stubs that also log actions so the\n   control flow is fully observable in the log file. These are defined\n   with internal linkage to avoid clashing with external symbols.\n   The stubs preserve the original no-op semantics for a generic build. */\nstatic void metal_cache_flush(void *addr, size_t len)\n{\n    log_append(\"[CACHE] flush addr=%p len=%zu\\n\", addr, len);\n    /* No other action (preserves original behavior in generic implementation). */\n}\n\nstatic void metal_cache_invalidate(void *addr, size_t len)\n{\n    log_append(\"[CACHE] invalidate addr=%p len=%zu\\n\", addr, len);\n    /* No other action (preserves original behavior in generic implementation). */\n}\n\n/* Modified function with probes that record the control path and the\n   relevant state to \"/tmp/logs/114.txt\". The original logic is\n   preserved; only logging calls were added. */\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                             struct metal_device *device,\n                             uint32_t dir,\n                             struct metal_sg *sg_in,\n                             int nents_in,\n                             struct metal_sg *sg_out)\n{\n    int i;\n    /* Original cast-to-void statements retained to preserve original\n       code shape; we also log the occurrence to provide evidence that\n       these casts are no-ops. */\n    (void)bus;\n    (void)device;\n\n    log_append(\"ENTER: metal_generic_dev_dma_map\\n\");\n    log_append(\"  bus (raw ptr)       = %p\\n\", (void *)bus);\n    log_append(\"  device (raw ptr)    = %p\\n\", (void *)device);\n    log_append(\"  Note: (void)bus and (void)device executed (no-op)\\n\");\n    log_append(\"  dir                 = %u\\n\", (unsigned)dir);\n    log_append(\"  sg_in               = %p\\n\", (void *)sg_in);\n    log_append(\"  sg_out              = %p\\n\", (void *)sg_out);\n    log_append(\"  nents_in            = %d\\n\", nents_in);\n\n    if (sg_out != sg_in) {\n        log_append(\"  Action: copying sg_in -> sg_out (%d entries)\\n\", nents_in);\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n        log_append(\"  memcpy completed\\n\");\n    } else {\n        log_append(\"  Action: sg_out == sg_in; no copy performed\\n\");\n    }\n\n    for (i = 0; i < nents_in; i++) {\n        log_append(\"  Entry %d: virt=%p len=%zu\\n\", i, sg_out[i].virt, sg_out[i].len);\n        if (dir == METAL_DMA_DEV_W) {\n            log_append(\"    dir == METAL_DMA_DEV_W: calling metal_cache_flush for entry %d\\n\", i);\n            metal_cache_flush(sg_out[i].virt, sg_out[i].len);\n            log_append(\"    metal_cache_flush returned for entry %d\\n\", i);\n        } else {\n            log_append(\"    dir != METAL_DMA_DEV_W: skipping flush for entry %d\\n\", i);\n        }\n        metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n        log_append(\"    metal_cache_invalidate called for entry %d\\n\", i);\n    }\n\n    log_append(\"EXIT: metal_generic_dev_dma_map returning %d\\n\", nents_in);\n\n    return nents_in;\n}\n"
}