{
  "user_message": "An agent A claimed that the following metal_generic_dev_dma_map code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of metal_generic_dev_dma_map.\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function takes sg_in as 'struct metal_sg *sg_in' but does not modify the pointed-to objects; it only reads from sg_in (memcpy from it and later operates on sg_out). By Rule 8.13 the source pointer should be const-qualified to indicate the function will not modify the pointed data. Change the prototype to 'const struct metal_sg *sg_in' (and update callers) to comply.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/115.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                 struct metal_device *device,\n                 uint32_t dir,\n                 struct metal_sg *sg_in,\n                 int nents_in,\n                 struct metal_sg *sg_out)\n{\n    int i;\n    (void)bus;\n    (void)device;\n\n    /* Log entry and key parameters to help reproduce the Rule 8.13 scenario. */\n    probe_log_append(\"ENTER: metal_generic_dev_dma_map: sg_in=%p, sg_out=%p, nents_in=%d, dir=0x%08x\",\n                     (void *)sg_in, (void *)sg_out, nents_in, (unsigned)dir);\n\n    if (sg_out != sg_in) {\n        probe_log_append(\"ACTION: memcpy will be performed: copying %d entries from sg_in=%p to sg_out=%p\",\n                         nents_in, (void *)sg_in, (void *)sg_out);\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n        probe_log_append(\"ACTION: memcpy completed: sg_out now has first entry virt=%p len=%zu\",\n                         (void *)sg_out[0].virt, (size_t)sg_out[0].len);\n    } else {\n        probe_log_append(\"ACTION: memcpy skipped because sg_out == sg_in (%p)\", (void *)sg_in);\n    }\n\n    for (i = 0; i < nents_in; i++) {\n        /* Log the per-entry state before cache operations */\n        probe_log_append(\"LOOP: index=%d, sg_out[%d].virt=%p, sg_out[%d].len=%zu\",\n                         i, i, (void *)sg_out[i].virt, i, (size_t)sg_out[i].len);\n\n        if (dir == METAL_DMA_DEV_W) {\n            probe_log_append(\"CALL: metal_cache_flush called for sg_out[%d] virt=%p len=%zu\",\n                             i, (void *)sg_out[i].virt, (size_t)sg_out[i].len);\n            metal_cache_flush(sg_out[i].virt, sg_out[i].len);\n        }\n\n        probe_log_append(\"CALL: metal_cache_invalidate called for sg_out[%d] virt=%p len=%zu\",\n                         i, (void *)sg_out[i].virt, (size_t)sg_out[i].len);\n        metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n    }\n\n    probe_log_append(\"EXIT: metal_generic_dev_dma_map returning nents_in=%d\", nents_in);\n\n    return nents_in;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for metal_generic_dev_dma_map. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The function never modifies the objects pointed to by sg_in: sg_in is only used as the source for memcpy and for read-only access. Per MISRA C 2023 Rule 8.13, a pointer that does not permit modification of the pointed-to object should be declared to point to a const-qualified type. Making the parameter const struct metal_sg *sg_in satisfies the rule, is compatible with memcpy (which expects a const void *src), and is backward-compatible with existing callers (conversion from struct metal_sg * to const struct metal_sg * is allowed). The logging added in the test does not affect the rule and the empty log does not invalidate the static observation that sg_in is not modified. Therefore the reported violation is valid and the prototype should be changed to const struct metal_sg *sg_in (and corresponding declarations) to comply with Rule 8.13."
}