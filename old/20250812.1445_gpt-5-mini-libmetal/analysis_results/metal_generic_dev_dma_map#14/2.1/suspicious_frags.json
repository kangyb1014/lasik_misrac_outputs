{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_map:\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function metal_generic_dev_dma_map:\n#define METAL_DMA_DEV_W 2\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "(void)bus;",
    "if (sg_out != sg_in)\n\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));",
    "metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);",
    "(void)device;",
    "if (dir == METAL_DMA_DEV_W) {\n\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t}",
    "for (i = 0; i < nents_in; i++) {"
  ],
  "explanation": "The remaining code fragments (variable declaration 'int i;', the function signature and final 'return nents_in;') are straightforward and do not by themselves indicate unreachable code: the loop index declaration is needed for the loop, the function header is required, and the return is the normal exit. The flagged fragments are the conditional/branch points and no-op statements that warrant inspection to determine whether any branch or statement can never be executed in the project context (e.g. if certain parameter values are constant, pointers always equal, or parameters are unused across the project)."
}