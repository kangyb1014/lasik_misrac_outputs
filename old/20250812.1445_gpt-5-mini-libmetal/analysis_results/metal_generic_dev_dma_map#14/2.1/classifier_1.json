{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of metal_generic_dev_dma_map:\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function metal_generic_dev_dma_map:\n#define METAL_DMA_DEV_W 2\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (sg_out != sg_in)\n\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The memcpy call is conditioned on (sg_out != sg_in), which is not a compile-time constant; both branches are reachable depending on the actual arguments passed at run time. Therefore there is no unreachable code in the fragment. (A violation would occur only if the compiler or project logic could prove that sg_out is always equal to sg_in at all call sites or at compile time, making the memcpy call unreachable \u2014 but no such guarantee exists in the given code.)"
}