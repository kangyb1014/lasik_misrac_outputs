{
  "user_message": "An agent A claimed that the following metal_generic_dev_dma_map code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn..\n</misra_rule>\n<target_code>\nHere is the original code of metal_generic_dev_dma_map.\n```c\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n\t\t\t     struct metal_device *device,\n\t\t\t     uint32_t dir,\n\t\t\t     struct metal_sg *sg_in,\n\t\t\t     int nents_in,\n\t\t\t     struct metal_sg *sg_out)\n{\n\tint i;\n\t(void)bus;\n\t(void)device;\n\n\tif (sg_out != sg_in)\n\t\tmemcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\tfor (i = 0; i < nents_in; i++) {\n\t\tif (dir == METAL_DMA_DEV_W) {\n\t\t\tmetal_cache_flush(sg_out[i].virt, sg_out[i].len);\n\t\t}\n\t\tmetal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n\t}\n\n\treturn nents_in;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:If nents_in exceeds the number of struct metal_sg elements actually allocated/pointed-to by sg_in or sg_out (or either pointer is NULL while nents_in > 0), the memcpy call copies nents_in * sizeof(struct metal_sg) bytes and will read from or write to memory beyond the source/target buffers. Example: sg_in points to an array of 2 elements but nents_in == 3 \u2014 memcpy will read past sg_in[1], violating the rule.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                             struct metal_device *device,\n                             uint32_t dir,\n                             struct metal_sg *sg_in,\n                             int nents_in,\n                             struct metal_sg *sg_out)\n{\n    int i;\n    (void)bus;\n    (void)device;\n\n    /* Open log file in append mode. If logging fails, continue without\n       aborting \u2014 preserve original behavior. */\n    FILE *log = fopen(\"/tmp/logs/119.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"--- metal_generic_dev_dma_map ENTER ---\\n\");\n        fprintf(log, \"params: sg_in=%p, sg_out=%p, nents_in=%d, dir=%u\\n\",\n                (void*)sg_in, (void*)sg_out, nents_in, (unsigned)dir);\n\n        /* Compute and log the byte count used for memcpy. Avoid computing\n           pointer arithmetic off NULL pointers (undefined). */\n        size_t bytes = (size_t)nents_in * sizeof(struct metal_sg);\n        fprintf(log, \"computed memcpy bytes = %zu (nents_in * sizeof(struct metal_sg))\\n\", bytes);\n\n        if (sg_in == NULL && nents_in > 0) {\n            fprintf(log, \"WARNING: sg_in is NULL while nents_in > 0\\n\");\n        }\n        if (sg_out == NULL && nents_in > 0) {\n            fprintf(log, \"WARNING: sg_out is NULL while nents_in > 0\\n\");\n        }\n\n        if (sg_in != NULL) {\n            /* We only compute the end address when sg_in is non-NULL to\n               avoid undefined behaviour. This shows the intended source\n               range for memcpy. */\n            void *src_start = (void*)sg_in;\n            void *src_end = (void*)((char*)sg_in + bytes);\n            fprintf(log, \"memcpy src range: [%p .. %p)\\n\", src_start, src_end);\n        } else {\n            fprintf(log, \"memcpy src range: [NULL]\\n\");\n        }\n\n        if (sg_out != NULL) {\n            void *dst_start = (void*)sg_out;\n            void *dst_end = (void*)((char*)sg_out + bytes);\n            fprintf(log, \"memcpy dst range: [%p .. %p)\\n\", dst_start, dst_end);\n        } else {\n            fprintf(log, \"memcpy dst range: [NULL]\\n\");\n        }\n\n        fprintf(log, \"will perform memcpy if (sg_out != sg_in) -> %s\\n\",\n                (sg_out != sg_in) ? \"true\" : \"false\");\n        fflush(log);\n    }\n\n    if (sg_out != sg_in)\n        memcpy(sg_out, sg_in, nents_in * (sizeof(struct metal_sg)));\n\n    for (i = 0; i < nents_in; i++) {\n        /* Log each iteration's index and the pointer values that will be\n           accessed by the cache operations. We avoid dereferencing sg_in\n           here; only access sg_out as the original code does. */\n        if (log) {\n            if (sg_out != NULL) {\n                fprintf(log, \"iter %d: sg_out[%d] @ %p: virt=%p, len=%zu\\n\",\n                        i, i, (void*)&sg_out[i], sg_out[i].virt, sg_out[i].len);\n            } else {\n                fprintf(log, \"iter %d: sg_out is NULL, cannot log sg_out[i]\\n\", i);\n            }\n            fflush(log);\n        }\n\n        if (sg_out != NULL) {\n            /* The cache API in the project headers takes an unsigned int\n               length. Cast from size_t to unsigned when calling to match\n               the declaration provided by the headers and avoid type\n               mismatches. */\n            unsigned int lend = (unsigned int)sg_out[i].len;\n            if (dir == METAL_DMA_DEV_W) {\n                metal_cache_flush(sg_out[i].virt, lend);\n            }\n            metal_cache_invalidate(sg_out[i].virt, lend);\n        }\n    }\n\n    if (log) {\n        fprintf(log, \"--- metal_generic_dev_dma_map EXIT (return %d) ---\\n\", nents_in);\n        fclose(log);\n    }\n\n    return nents_in;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for metal_generic_dev_dma_map. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The agent A is correct. MISRA C:2023 Rule 21.17 requires that uses of memcpy (and other <string.h> functions) must not result in accesses beyond the bounds of the objects referenced by the pointer parameters. In the shown implementation the memcpy call uses nents_in * sizeof(struct metal_sg) as the byte count without any checks that sg_in and sg_out are non-NULL and that they actually reference at least nents_in elements. If a caller passes nents_in larger than the number of allocated elements (or passes NULL with nents_in > 0), the memcpy will read from or write to memory beyond the source/target buffers, violating the rule. (Note: if the function\u2019s externally documented/validated contract guarantees sg_in and sg_out point to arrays of at least nents_in elements and are non-NULL, the call would be compliant; in the absence of such guaranteed preconditions the code is non\u2011compliant.)"
}