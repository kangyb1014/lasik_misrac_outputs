{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstruct metal_device { int _unused; };\nstruct metal_sg {\n    void *virt;\n    size_t len;\n};\nenum { METAL_DMA_DEV_W = 1 };\nstatic void metal_cache_flush(void *addr, size_t len)\n{\n    (void)addr; (void)len;\n}\nstatic void metal_cache_invalidate(void *addr, size_t len)\n{\n    (void)addr; (void)len;\n}\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                             struct metal_device *device,\n                             uint32_t dir,\n                             struct metal_sg *sg_in,\n                             int nents_in,\n                             struct metal_sg *sg_out)\n{\n    int i;\n    (void)bus;\n    (void)device;\n\n    /* Open log file in append mode. If logging fails, continue without\n       aborting \u2014 we must preserve original behavior. */\n    FILE *log = fopen(\"/tmp/logs/119.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"--- metal_generic_dev_dma_map ENTER ---\\n\");\n        fprintf(log, \"params: sg_in=%p, sg_out=%p, nents_in=%d, dir=%u\\n\",\n                (void*)sg_in, (void*)sg_out, nents_in, (unsigned)dir);\n\n        /* Compute and log the byte count used for memcpy. Avoid computing\n           pointer arithmetic off NULL pointers (undefined). */\n        size_t bytes = (size_t)nents_in * sizeof(struct metal_sg);\n        fprintf(log, \"computed memcpy bytes = %zu (nents_in * sizeof(struct metal_sg))\\n\", bytes);\n\n        if (sg_in == NULL && nents_in > 0) {\n            fprintf(log, \"WARNING: sg_in is NULL while nents_in > 0\\n\");\n        }\n        if (sg_out == NULL && nents_in > 0) {\n            fprintf(log, \"WARNING: sg_out is NULL while nents_in > 0\\n\");\n        }\n\n        if (sg_in != NULL) {\n            /* We only compute the end address when sg_in is non-NULL to\n               avoid undefined behaviour. This shows the intended source\n               range for memcpy. */\n            void *src_start = (void*)sg_in;\n            void *src_end = (void*)((char*)sg_in + bytes);\n            fprintf(log, \"memcpy src range: [%p .. %p)\\n\", src_start, src_end);\n        } else {\n            fprintf(log, \"memcpy src range: [NULL]\\n\");\n        }\n\n        if (sg_out != NULL) {\n            void *dst_start = (void*)sg_out;\n            void *dst_end = (void*)((char*)sg_out + bytes);\n            fprintf(log, \"memcpy dst range: [%p .. %p)\\n\", dst_start, dst_end);\n        } else {\n            fprintf(log, \"memcpy dst range: [NULL]\\n\");\n        }\n\n        fprintf(log, \"will perform memcpy if (sg_out != sg_in) -> %s\\n\",\n                (sg_out != sg_in) ? \"true\" : \"false\");\n        fflush(log);\n    }\n\n    if (sg_out != sg_in)\n        memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));\n\n    for (i = 0; i < nents_in; i++) {\n        /* Log each iteration's index and the pointer values that will be\n           accessed by the cache operations. We avoid dereferencing sg_in\n           here; only access sg_out as the original code does. */\n        if (log) {\n            if (sg_out != NULL) {\n                /* Accessing sg_out[i] mirrors the original behavior; it may\n                   itself read out-of-bounds if nents_in exceeds the actual\n                   allocation. We log the pointer values as observed. */\n                fprintf(log, \"iter %d: sg_out[%d] @ %p: virt=%p, len=%zu\\n\",\n                        i, i, (void*)&sg_out[i], sg_out[i].virt, sg_out[i].len);\n            } else {\n                fprintf(log, \"iter %d: sg_out is NULL, cannot log sg_out[i]\\n\", i);\n            }\n            fflush(log);\n        }\n\n        if (dir == METAL_DMA_DEV_W) {\n            metal_cache_flush(sg_out[i].virt, sg_out[i].len);\n        }\n        metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);\n    }\n\n    if (log) {\n        fprintf(log, \"--- metal_generic_dev_dma_map EXIT (return %d) ---\\n\", nents_in);\n        fclose(log);\n    }\n\n    return nents_in;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n-- Build type:  \n-- Host:    Linux/x86_64\n-- Target:  Linux/x86_64\n-- Machine: Generic\n-- Vendor: none\n/tmp/tmpjbrs0bx6/src/lib/device.c:127:8: error: redefinition of 'struct metal_device'\n  127 | struct metal_device { int _unused; };\n      |        ^~~~~~~~~~~~\nIn file included from /tmp/tmpjbrs0bx6/src/lib/device.c:19:\n/tmp/tmpjbrs0bx6/build/lib/include/metal/device.h:72:8: note: originally defined here\n   72 | struct metal_device {\n      |        ^~~~~~~~~~~~\n/tmp/tmpjbrs0bx6/src/lib/device.c:128:8: error: redefinition of 'struct metal_sg'\n  128 | struct metal_sg {\n      |        ^~~~~~~~\nIn file included from /tmp/tmpjbrs0bx6/build/lib/include/metal/device.h:18,\n                 from /tmp/tmpjbrs0bx6/src/lib/device.c:19:\n/tmp/tmpjbrs0bx6/build/lib/include/metal/dma.h:33:8: note: originally defined here\n   33 | struct metal_sg {\n      |        ^~~~~~~~\n/tmp/tmpjbrs0bx6/build/lib/include/metal/dma.h:27:26: error: expected identifier before numeric constant\n   27 | #define METAL_DMA_DEV_W  2 /**< DMA direction, device write */\n      |                          ^\n/tmp/tmpjbrs0bx6/src/lib/device.c:132:8: note: in expansion of macro 'METAL_DMA_DEV_W'\n  132 | enum { METAL_DMA_DEV_W = 1 };\n      |        ^~~~~~~~~~~~~~~\n/tmp/tmpjbrs0bx6/src/lib/device.c:133:13: error: conflicting types for 'metal_cache_flush'; have 'void(void *, size_t)' {aka 'void(void *, long unsigned int)'}\n  133 | static void metal_cache_flush(void *addr, size_t len)\n      |             ^~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmpjbrs0bx6/src/lib/device.c:26:\n/tmp/tmpjbrs0bx6/build/lib/include/metal/cache.h:33:20: note: previous definition of 'metal_cache_flush' with type 'void(void *, unsigned int)'\n   33 | static inline void metal_cache_flush(void *addr, unsigned int len)\n      |                    ^~~~~~~~~~~~~~~~~\n/tmp/tmpjbrs0bx6/src/lib/device.c:137:13: error: conflicting types for 'metal_cache_invalidate'; have 'void(void *, size_t)' {aka 'void(void *, long unsigned int)'}\n  137 | static void metal_cache_invalidate(void *addr, size_t len)\n      |             ^~~~~~~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmpjbrs0bx6/src/lib/device.c:26:\n/tmp/tmpjbrs0bx6/build/lib/include/metal/cache.h:46:20: note: previous definition of 'metal_cache_invalidate' with type 'void(void *, unsigned int)'\n   46 | static inline void metal_cache_invalidate(void *addr, unsigned int len)\n      |                    ^~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjbrs0bx6/src/lib/device.c:142:5: error: conflicting types for 'metal_generic_dev_dma_map'; have 'int(struct metal_bus *, struct metal_device *, uint32_t,  struct metal_sg *, int,  struct metal_sg *)' {aka 'int(struct metal_bus *, struct metal_device *, unsigned int,  struct metal_sg *, int,  struct metal_sg *)'}\n  142 | int metal_generic_dev_dma_map(struct metal_bus *bus,\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmpjbrs0bx6/src/lib/device.c:19:\n/tmp/tmpjbrs0bx6/build/lib/include/metal/device.h:160:5: note: previous declaration of 'metal_generic_dev_dma_map' with type 'int(struct metal_bus *, struct metal_device *, uint32_t,  struct metal_sg *, int,  struct metal_sg *)' {aka 'int(struct metal_bus *, struct metal_device *, unsigned int,  struct metal_sg *, int,  struct metal_sg *)'}\n  160 | int metal_generic_dev_dma_map(struct metal_bus *bus,\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjbrs0bx6/src/lib/device.c:232:6: error: conflicting types for 'metal_generic_dev_dma_unmap'; have 'void(struct metal_bus *, struct metal_device *, uint32_t,  struct metal_sg *, int)' {aka 'void(struct metal_bus *, struct metal_device *, unsigned int,  struct metal_sg *, int)'}\n  232 | void metal_generic_dev_dma_unmap(struct metal_bus *bus,\n      |      ^~~~~~~~~~~~~~~~~~~~~~~~~~~\nIn file included from /tmp/tmpjbrs0bx6/src/lib/device.c:19:\n/tmp/tmpjbrs0bx6/build/lib/include/metal/device.h:164:6: note: previous declaration of 'metal_generic_dev_dma_unmap' with type 'void(struct metal_bus *, struct metal_device *, uint32_t,  struct metal_sg *, int)' {aka 'void(struct metal_bus *, struct metal_device *, unsigned int,  struct metal_sg *, int)'}\n  164 | void metal_generic_dev_dma_unmap(struct metal_bus *bus,\n      |      ^~~~~~~~~~~~~~~~~~~~~~~~~~~\ngmake[2]: *** [lib/CMakeFiles/metal-shared.dir/build.make:90: lib/CMakeFiles/metal-shared.dir/device.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:291: lib/CMakeFiles/metal-shared.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of metal_generic_dev_dma_map as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Include project headers that provide the real type and constant\n   definitions. In the original build these are available on the\n   include path; do not redeclare the types or functions here to avoid\n   redefinition conflicts. */\n#include \"metal/device.h\"\n#include \"metal/cache.h\"\n\nint metal_generic_dev_dma_map(struct metal_bus *bus,\n                             struct metal_device *device,\n                             uint32_t dir,\n                             struct metal_sg *sg_in,\n                             int nents_in,\n                             struct metal_sg *sg_out)\n{\n    int i;\n    (void)bus;\n    (void)device;\n\n    /* Open log file in append mode. If logging fails, continue without\n       aborting \u2014 preserve original behavior. */\n    FILE *log = fopen(\"/tmp/logs/119.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"--- metal_generic_dev_dma_map ENTER ---\\n\");\n        fprintf(log, \"params: sg_in=%p, sg_out=%p, nents_in=%d, dir=%u\\n\",\n                (void*)sg_in, (void*)sg_out, nents_in, (unsigned)dir);\n\n        /* Compute and log the byte count used for memcpy. Avoid computing\n           pointer arithmetic off NULL pointers (undefined). */\n        size_t bytes = (size_t)nents_in * sizeof(struct metal_sg);\n        fprintf(log, \"computed memcpy bytes = %zu (nents_in * sizeof(struct metal_sg))\\n\", bytes);\n\n        if (sg_in == NULL && nents_in > 0) {\n            fprintf(log, \"WARNING: sg_in is NULL while nents_in > 0\\n\");\n        }\n        if (sg_out == NULL && nents_in > 0) {\n            fprintf(log, \"WARNING: sg_out is NULL while nents_in > 0\\n\");\n        }\n\n        if (sg_in != NULL) {\n            /* We only compute the end address when sg_in is non-NULL to\n               avoid undefined behaviour. This shows the intended source\n               range for memcpy. */\n            void *src_start = (void*)sg_in;\n            void *src_end = (void*)((char*)sg_in + bytes);\n            fprintf(log, \"memcpy src range: [%p .. %p)\\n\", src_start, src_end);\n        } else {\n            fprintf(log, \"memcpy src range: [NULL]\\n\");\n        }\n\n        if (sg_out != NULL) {\n            void *dst_start = (void*)sg_out;\n            void *dst_end = (void*)((char*)sg_out + bytes);\n            fprintf(log, \"memcpy dst range: [%p .. %p)\\n\", dst_start, dst_end);\n        } else {\n            fprintf(log, \"memcpy dst range: [NULL]\\n\");\n        }\n\n        fprintf(log, \"will perform memcpy if (sg_out != sg_in) -> %s\\n\",\n                (sg_out != sg_in) ? \"true\" : \"false\");\n        fflush(log);\n    }\n\n    if (sg_out != sg_in)\n        memcpy(sg_out, sg_in, nents_in * (sizeof(struct metal_sg)));\n\n    for (i = 0; i < nents_in; i++) {\n        /* Log each iteration's index and the pointer values that will be\n           accessed by the cache operations. We avoid dereferencing sg_in\n           here; only access sg_out as the original code does. */\n        if (log) {\n            if (sg_out != NULL) {\n                fprintf(log, \"iter %d: sg_out[%d] @ %p: virt=%p, len=%zu\\n\",\n                        i, i, (void*)&sg_out[i], sg_out[i].virt, sg_out[i].len);\n            } else {\n                fprintf(log, \"iter %d: sg_out is NULL, cannot log sg_out[i]\\n\", i);\n            }\n            fflush(log);\n        }\n\n        if (sg_out != NULL) {\n            /* The cache API in the project headers takes an unsigned int\n               length. Cast from size_t to unsigned when calling to match\n               the declaration provided by the headers and avoid type\n               mismatches. */\n            unsigned int lend = (unsigned int)sg_out[i].len;\n            if (dir == METAL_DMA_DEV_W) {\n                metal_cache_flush(sg_out[i].virt, lend);\n            }\n            metal_cache_invalidate(sg_out[i].virt, lend);\n        }\n    }\n\n    if (log) {\n        fprintf(log, \"--- metal_generic_dev_dma_map EXIT (return %d) ---\\n\", nents_in);\n        fclose(log);\n    }\n\n    return nents_in;\n}\n",
  "explanation": "Removed duplicate type and function definitions that conflicted with project headers. Instead of redefining struct metal_device, struct metal_sg, the METAL_DMA_DEV_W enum, and cache helper functions, the fixed code includes the project headers (metal/device.h and metal/cache.h) so the compiler uses the original declarations. Also adjusted cache calls to cast size_t lengths to unsigned int to match the header signatures. This preserves the original logic of metal_generic_dev_dma_map while avoiding redefinition and type conflicts."
}