{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(device->name) after only checking for NULL. If device->name is non-NULL but does not point to a null-terminated char object (for example it points at a fixed-size char buffer of length N without a terminating '\\0', or it erroneously points into adjoining struct storage such as regions[]), strlen will scan past the intended buffer and may access memory beyond the bounds of the referenced object. This can read into adjacent struct fields or beyond the object, causing undefined behaviour.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_register_generic_device code that contains useful probe functions that print useful logs to a file \"/tmp/logs/63.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_register_generic_device as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_register_generic_device:\n```c\nint metal_register_generic_device(struct metal_device *device)\n{\n\tif (!device->name || !strlen(device->name) ||\n\t    device->num_regions > METAL_MAX_DEVICE_REGIONS)\n\t\treturn -EINVAL;\n\n\tdevice->bus = &metal_generic_bus;\n\tmetal_list_add_tail(&_metal.common.generic_device_list,\n\t\t\t    &device->node);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_register_generic_device code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/stat.h>\n\nstatic void metal_log_probe(const struct metal_device *device, const char *stage)\n{\n    FILE *f = fopen(\"/tmp/logs/63.txt\", \"a\");\n    if (!f) {\n        /* Try to create directory and reopen. If this fails, give up silently. */\n        (void)mkdir(\"/tmp/logs\", 0755);\n        f = fopen(\"/tmp/logs/63.txt\", \"a\");\n    }\n    if (!f)\n        return;\n\n    fprintf(f, \"[metal_register_generic_device] stage=%s device=%p\\n\", stage, (const void *)device);\n    if (device) {\n        fprintf(f, \"[metal_register_generic_device] stage=%s device->name=%p\\n\", stage, (const void *)device->name);\n        if (device->name) {\n            /* Call strlen as in the original logic to capture the same behavior and potential over-read evidence. */\n            size_t len = strlen(device->name);\n            fprintf(f, \"[metal_register_generic_device] stage=%s strlen(device->name)=%zu\\n\", stage, len);\n        }\n        fprintf(f, \"[metal_register_generic_device] stage=%s device->num_regions=%d\\n\", stage, (int)device->num_regions);\n    }\n    fclose(f);\n}\n\nint metal_register_generic_device(struct metal_device *device)\n{\n    /* Probe at entry to capture pointers and initial state. */\n    metal_log_probe(device, \"entry\");\n\n    if (!device->name || !strlen(device->name) ||\n        device->num_regions > METAL_MAX_DEVICE_REGIONS) {\n        /* Probe on rejection so callers can see which branch was taken and values. */\n        metal_log_probe(device, \"reject\");\n        return -EINVAL;\n    }\n\n    device->bus = &metal_generic_bus;\n    metal_list_add_tail(&_metal.common.generic_device_list,\n                &device->node);\n\n    /* Probe on successful registration. */\n    metal_log_probe(device, \"registered\");\n    return 0;\n}"
}