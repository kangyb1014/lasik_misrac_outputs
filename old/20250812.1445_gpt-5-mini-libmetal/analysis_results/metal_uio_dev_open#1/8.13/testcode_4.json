{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iteration variable 'instance' is declared as 'char *instance' and is used only for read-only access (passed to snprintf(\"%s\")), but it points to data provided by sysfs and is not modified. According to Rule 8.13 the pointer should be const-qualified (e.g. 'const char *instance'). The dlist_for_each_data invocation therefore uses a non-const pointer where a const-qualified pointer is appropriate, risking accidental modification and violating the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/11.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_open:\n```c\nstatic int metal_uio_dev_open(struct linux_bus *lbus, struct linux_device *ldev)\n{\n\tchar *instance, path[SYSFS_PATH_MAX];\n\tstruct linux_driver *ldrv = ldev->ldrv;\n\tunsigned long *phys, offset = 0, size = 0;\n\tstruct metal_io_region *io;\n\tstruct dlist *dlist;\n\tint result, i;\n\tvoid *virt;\n\tint irq_info;\n\n\n\tldev->fd = -1;\n\tldev->device.irq_info = (void *)-1;\n\n\tldev->sdev = sysfs_open_device(lbus->bus_name, ldev->dev_name);\n\tif (!ldev->sdev) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s:%s not found\\n\",\n\t\t\t  lbus->bus_name, ldev->dev_name);\n\t\treturn -ENODEV;\n\t}\n\tmetal_log(METAL_LOG_DEBUG, \"opened sysfs device %s:%s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name);\n\n\tresult = metal_uio_dev_bind(ldev, ldrv);\n\tif (result)\n\t\treturn result;\n\n\tresult = snprintf(path, sizeof(path), \"%s/uio\", ldev->sdev->path);\n\tif (result >= (int)sizeof(path))\n\t\treturn -EOVERFLOW;\n\tdlist = sysfs_open_directory_list(path);\n\tif (!dlist) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to scan class path %s\\n\",\n\t\t\t  path);\n\t\treturn -errno;\n\t}\n\n\tdlist_for_each_data(dlist, instance, char) {\n\t\tresult = snprintf(ldev->cls_path, sizeof(ldev->cls_path),\n\t\t\t\t  \"%s/%s\", path, instance);\n\t\tif (result >= (int)sizeof(ldev->cls_path))\n\t\t\treturn -EOVERFLOW;\n\t\tresult = snprintf(ldev->dev_path, sizeof(ldev->dev_path),\n\t\t\t\t  \"/dev/%s\", instance);\n\t\tif (result >= (int)sizeof(ldev->dev_path))\n\t\t\treturn -EOVERFLOW;\n\t\tbreak;\n\t}\n\tsysfs_close_list(dlist);\n\n\tif (sysfs_path_is_dir(ldev->cls_path) != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid device class path %s\\n\",\n\t\t\t  ldev->cls_path);\n\t\treturn -ENODEV;\n\t}\n\n\ti = 0;\n\tdo {\n\t\tif (!access(ldev->dev_path, F_OK))\n\t\t\tbreak;\n\t\tusleep(10);\n\t\ti++;\n\t} while (i < 1000);\n\tif (i >= 1000) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open file %s, timeout.\\n\",\n\t\t\t  ldev->dev_path);\n\t\treturn -ENODEV;\n\t}\n\tresult = metal_open(ldev->dev_path, 0);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\",\n\t\t\t  ldev->dev_path, strerror(-result));\n\t\treturn result;\n\t}\n\tldev->fd = result;\n\n\tmetal_log(METAL_LOG_DEBUG, \"opened %s:%s as %s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name, ldev->dev_path);\n\n\tfor (i = 0, result = 0; !result && i < METAL_MAX_DEVICE_REGIONS; i++) {\n\t\tphys = &ldev->region_phys[ldev->device.num_regions];\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"offset\", &offset));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"addr\", phys));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"size\", &size));\n\t\tresult = (result ? result :\n\t\t\t metal_map(ldev->fd, i * getpagesize(), size, 0, 0, &virt));\n\t\tif (!result) {\n\t\t\tio = &ldev->device.regions[ldev->device.num_regions];\n\t\t\tmetal_io_init(io, virt, phys, size, -1, 0, NULL);\n\t\t\tldev->device.num_regions++;\n\t\t}\n\t}\n\n\tirq_info = 1;\n\tif (write(ldev->fd, &irq_info, sizeof(irq_info)) <= 0) {\n\t\tmetal_log(METAL_LOG_INFO,\n\t\t\t  \"%s: No IRQ for device %s.\\n\",\n\t\t\t  __func__, ldev->dev_name);\n\t\tldev->device.irq_num =  0;\n\t\tldev->device.irq_info = (void *)-1;\n\t} else {\n\t\tldev->device.irq_num =  1;\n\t\tldev->device.irq_info = (void *)(intptr_t)ldev->fd;\n\t\tmetal_linux_irq_register_dev(&ldev->device, ldev->fd);\n\t}\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_open code.\n",
  "test_code": "static int metal_uio_dev_open(struct linux_bus *lbus, struct linux_device *ldev)\n{\n\tchar *instance, path[SYSFS_PATH_MAX];\n\tstruct linux_driver *ldrv = ldev->ldrv;\n\tunsigned long *phys, offset = 0, size = 0;\n\tstruct metal_io_region *io;\n\tstruct dlist *dlist;\n\tint result, i;\n\tvoid *virt;\n\tint irq_info;\n\tFILE *logf = NULL;\n\n\n\tldev->fd = -1;\n\tldev->device.irq_info = (void *)-1;\n\n\t/* Open log file early to capture control flow and state. */\n\tlogf = fopen(\"/tmp/logs/11.txt\", \"a\");\n\tif (logf) {\n\t\tfprintf(logf, \"--- metal_uio_dev_open ENTER (%s:%s)\\n\", lbus->bus_name, ldev->dev_name);\n\t\tfflush(logf);\n\t}\n\n\tldev->sdev = sysfs_open_device(lbus->bus_name, ldev->dev_name);\n\tif (!ldev->sdev) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s:%s not found\\n\",\n\t\t\t  lbus->bus_name, ldev->dev_name);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"sysfs_open_device FAILED for %s:%s\\n\", lbus->bus_name, ldev->dev_name);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -ENODEV;\n\t}\n\tmetal_log(METAL_LOG_DEBUG, \"opened sysfs device %s:%s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name);\n\tif (logf) {\n\t\tfprintf(logf, \"sysfs device opened, sdev->path=%s\\n\", ldev->sdev->path ? ldev->sdev->path : \"(null)\");\n\t\tfflush(logf);\n\t}\n\n\tresult = metal_uio_dev_bind(ldev, ldrv);\n\tif (result) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_uio_dev_bind returned %d\\n\", result);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn result;\n\t}\n\n\tresult = snprintf(path, sizeof(path), \"%s/uio\", ldev->sdev->path);\n\tif (result >= (int)sizeof(path)) {\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"snprintf path overflow, needed=%d, buf=%zu\\n\", result, sizeof(path));\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -EOVERFLOW;\n\t}\n\tif (logf) {\n\t\tfprintf(logf, \"scanning directory path=%s\\n\", path);\n\t\tfflush(logf);\n\t}\n\tdlist = sysfs_open_directory_list(path);\n\tif (!dlist) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to scan class path %s\\n\",\n\t\t\t  path);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"sysfs_open_directory_list FAILED for %s, errno=%d\\n\", path, errno);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -errno;\n\t}\n\n\tif (logf) {\n\t\tfprintf(logf, \"dlist obtained: %p\\n\", (void *)dlist);\n\t\tfflush(logf);\n\t}\n\n\tdlist_for_each_data(dlist, instance, char) {\n\t\t/* Probe: log the pointer and the string it points to. */\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"dlist entry: instance_ptr=%p\\n\", (void *)instance);\n\t\t\tif (instance) {\n\t\t\t\t/* print at most 256 chars to avoid huge logs */\n\t\t\t\tchar tmp_buf[257];\n\t\t\t\tint copy_len = snprintf(tmp_buf, sizeof(tmp_buf), \"%s\", instance);\n\t\t\t\tif (copy_len >= (int)sizeof(tmp_buf))\n\t\t\t\t\ttmp_buf[sizeof(tmp_buf) - 1] = '\\0';\n\t\t\t\tfprintf(logf, \"dlist entry content: '%s' (len=%d)\\n\", tmp_buf, copy_len);\n\t\t\t} else {\n\t\t\t\tfprintf(logf, \"dlist entry content: (null)\\n\");\n\t\t\t}\n\t\t\tfflush(logf);\n\t\t}\n\n\t\tresult = snprintf(ldev->cls_path, sizeof(ldev->cls_path),\n\t\t\t\t  \"%s/%s\", path, instance);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"snprintf cls_path result=%d, cls_path='%s'\\n\", result, ldev->cls_path);\n\t\t\tfflush(logf);\n\t\t}\n\t\tif (result >= (int)sizeof(ldev->cls_path)) {\n\t\t\tif (logf) fclose(logf);\n\t\t\treturn -EOVERFLOW;\n\t\t}\n\t\tresult = snprintf(ldev->dev_path, sizeof(ldev->dev_path),\n\t\t\t\t  \"/dev/%s\", instance);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"snprintf dev_path result=%d, dev_path='%s'\\n\", result, ldev->dev_path);\n\t\t\tfflush(logf);\n\t\t}\n\t\tif (result >= (int)sizeof(ldev->dev_path)) {\n\t\t\tif (logf) fclose(logf);\n\t\t\treturn -EOVERFLOW;\n\t\t}\n\t\t/* Break after first entry as in original logic. */\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"breaking after first dlist entry\\n\");\n\t\t\tfflush(logf);\n\t\t}\n\t\tbreak;\n\t}\n\tsysfs_close_list(dlist);\n\n\tif (logf) {\n\t\tfprintf(logf, \"dlist closed, final cls_path='%s', dev_path='%s'\\n\",\n\t\t\tldev->cls_path[0] ? ldev->cls_path : \"(empty)\",\n\t\t\tldev->dev_path[0] ? ldev->dev_path : \"(empty)\");\n\t\tfflush(logf);\n\t}\n\n\tif (sysfs_path_is_dir(ldev->cls_path) != 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"invalid device class path %s\\n\",\n\t\t\t  ldev->cls_path);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"sysfs_path_is_dir FAILED for cls_path=%s\\n\", ldev->cls_path);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -ENODEV;\n\t}\n\n\ti = 0;\n\tdo {\n\t\tif (!access(ldev->dev_path, F_OK))\n\t\t\tbreak;\n\t\tusleep(10);\n\t\ti++;\n\t} while (i < 1000);\n\tif (i >= 1000) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open file %s, timeout.\\n\",\n\t\t\t  ldev->dev_path);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"timeout waiting for dev_path=%s\\n\", ldev->dev_path);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn -ENODEV;\n\t}\n\tresult = metal_open(ldev->dev_path, 0);\n\tif (result < 0) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to open device %s\\n\",\n\t\t\t  ldev->dev_path, strerror(-result));\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"metal_open failed for %s, result=%d\\n\", ldev->dev_path, result);\n\t\t\tfclose(logf);\n\t\t}\n\t\treturn result;\n\t}\n\tldev->fd = result;\n\n\tmetal_log(METAL_LOG_DEBUG, \"opened %s:%s as %s\\n\",\n\t\t  lbus->bus_name, ldev->dev_name, ldev->dev_path);\n\tif (logf) {\n\t\tfprintf(logf, \"device opened fd=%d\\n\", ldev->fd);\n\t\tfflush(logf);\n\t}\n\n\tfor (i = 0, result = 0; !result && i < METAL_MAX_DEVICE_REGIONS; i++) {\n\t\tphys = &ldev->region_phys[ldev->device.num_regions];\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"offset\", &offset));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"addr\", phys));\n\t\tresult = (result ? result :\n\t\t\t metal_uio_read_map_attr(ldev, i, \"size\", &size));\n\t\tresult = (result ? result :\n\t\t\t metal_map(ldev->fd, i * getpagesize(), size, 0, 0, &virt));\n\t\tif (!result) {\n\t\t\tio = &ldev->device.regions[ldev->device.num_regions];\n\t\t\tmetal_io_init(io, virt, phys, size, -1, 0, NULL);\n\t\t\tldev->device.num_regions++;\n\t\t}\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"region idx=%d result=%d phys=%lu size=%lu num_regions=%d\\n\",\n\t\t\t\ti, result, (unsigned long)*phys, (unsigned long)size, ldev->device.num_regions);\n\t\t\tfflush(logf);\n\t\t}\n\t}\n\n\tirq_info = 1;\n\tif (write(ldev->fd, &irq_info, sizeof(irq_info)) <= 0) {\n\t\tmetal_log(METAL_LOG_INFO,\n\t\t\t  \"%s: No IRQ for device %s.\\n\",\n\t\t\t  __func__, ldev->dev_name);\n\t\tldev->device.irq_num =  0;\n\t\tldev->device.irq_info = (void *)-1;\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"no IRQ, write to fd=%d failed\\n\", ldev->fd);\n\t\t\tfclose(logf);\n\t\t}\n\t} else {\n\t\tldev->device.irq_num =  1;\n\t\tldev->device.irq_info = (void *)(intptr_t)ldev->fd;\n\t\tmetal_linux_irq_register_dev(&ldev->device, ldev->fd);\n\t\tif (logf) {\n\t\t\tfprintf(logf, \"IRQ registered, irq_num=%d, irq_info=%p\\n\", ldev->device.irq_num, ldev->device.irq_info);\n\t\t\tfclose(logf);\n\t\t}\n\t}\n\n\treturn 0;\n}\n"
}