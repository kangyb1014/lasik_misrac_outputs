{
  "user_message": "An agent A claimed that the following metal_map code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of metal_map.\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In metal_shmem_try_map the parameter 'size' (a by-value parameter) is reassigned: size = metal_align_up(size, ps->page_size); \u2014 this modifies the function parameter variable 'size', violating MISRA C 2023 Rule 17.8. Use a local variable (e.g. aligned_size) to hold the adjusted value instead.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void metal_map_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/109.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    metal_map_log(\"enter: fd=%d, offset=%lld, size=%zu, expand=%d, flags=0x%x, result=%p\",\n                  fd, (long long)offset, size, expand, flags, (void *)result);\n\n    flags |= MAP_SHARED;\n    metal_map_log(\"after MAP_SHARED: flags=0x%x\", flags);\n\n    if (fd < 0) {\n        metal_map_log(\"branch: fd < 0 (fd=%d). Switching to anonymous private mapping.\", fd);\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n        metal_map_log(\"fd set to %d, flags set to 0x%x\", fd, flags);\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat stat;\n\n        metal_map_log(\"branch: expand requested. reqsize=%lld\", (long long)reqsize);\n\n        error = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n        metal_map_log(\"flock(LOCK_EX) result: error=%d, errno=%d\", error, errno);\n        if (!error)\n            error = fstat(fd, &stat);\n        metal_map_log(\"fstat result: error=%d, stat.st_size=%lld\", error, (long long)stat.st_size);\n        if (!error && stat.st_size < reqsize)\n            error = ftruncate(fd, reqsize);\n        metal_map_log(\"after ftruncate check: error=%d, errno=%d\", error, errno);\n        if (!error)\n            flock(fd, LOCK_UN);\n        metal_map_log(\"after flock(LOCK_UN). current errno=%d\", errno);\n        if (error) {\n            metal_map_log(\"expand failed: error=%d, errno=%d. Returning -errno=%d\", error, errno, -errno);\n            return -errno;\n        }\n    }\n\n    metal_map_log(\"calling mmap with fd=%d, offset=%lld, size=%zu, flags=0x%x\", fd, (long long)offset, size, flags);\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    if (mem == MAP_FAILED) {\n        metal_map_log(\"mmap failed: errno=%d. Returning -errno=%d\", errno, -errno);\n        return -errno;\n    }\n    *result = mem;\n    metal_map_log(\"mmap succeeded: mem=%p. result set. returning 0\", mem);\n    return 0;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for metal_map. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report that the code violates MISRA C 2023 Rule 17.8 is correct in substance, but the scenario description is imprecise. Rule 17.8 forbids modifying function parameter variables (reassigning them). In the provided metal_map implementation two non\u2011pointer parameters are modified: flags is updated (flags |= MAP_SHARED;) and fd is reassigned (fd = -1; and later flags = MAP_PRIVATE | MAP_ANONYMOUS;). Those direct assignments to parameter variables violate Rule 17.8. The use of *result = mem is allowed because the rule permits modifying the object pointed to by a pointer parameter, only the pointer variable itself must not be reassigned. Note: the agent\u2019s narrative mentions metal_shmem_try_map and reassigning size \u2014 that is a different function/parameter and is therefore an inaccurate example, but the core claim (that a parameter is reassigned, violating Rule 17.8) still applies to the shown metal_map code. Suggested remediation: copy parameters to local variables (e.g. local_flags, local_fd, aligned_size) and modify those locals instead of the parameters."
}