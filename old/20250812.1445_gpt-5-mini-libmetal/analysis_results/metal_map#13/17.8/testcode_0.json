{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn function metal_map the non-pointer parameter 'fd' is assigned a new value (fd = -1) inside the if (fd < 0) block. This directly modifies a function parameter and therefore violates MISRA C 2023 Rule 17.8.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/109.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/file.h>\n#include <unistd.h>\n#include <stddef.h>\n\nstatic void log_state(const char *fmt, ...)\n{\n    /* Preserve errno so logging does not disturb callers that rely on errno */\n    int saved_errno = errno;\n    FILE *f = fopen(\"/tmp/logs/109.txt\", \"a\");\n    if (f) {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fputs(\"\\n\", f);\n        fclose(f);\n    }\n    errno = saved_errno;\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    log_state(\"metal_map entry: fd=%d, offset=%lld, size=%zu, expand=%d, flags=0x%x, result=%p\",\n              fd, (long long)offset, size, expand, flags, (void *)result);\n\n    flags |= MAP_SHARED;\n\n    if (fd < 0) {\n        log_state(\"branch: fd < 0 entered (fd=%d)\", fd);\n        log_state(\"about to assign fd = -1 (original fd=%d)\", fd);\n        fd = -1; /* Intentional: preserves original logic (evidence of parameter modification) */\n        log_state(\"after assignment: fd=%d\", fd);\n        {\n            int old_flags = flags;\n            flags = MAP_PRIVATE | MAP_ANONYMOUS;\n            log_state(\"flags changed: old=0x%x new=0x%x\", old_flags, flags);\n        }\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat stat;\n\n        log_state(\"branch: expand taken (fd=%d, reqsize=%lld)\", fd, (long long)reqsize);\n\n        errno = 0; /* ensure errno captures any syscall error */\n        int flock_ret = flock(fd, LOCK_EX);\n        int flock_errno = errno;\n        error = flock_ret < 0 ? -flock_errno : 0;\n        log_state(\"flock(LOCK_EX) returned %d, errno=%d, error=%d\", flock_ret, flock_errno, error);\n\n        if (!error) {\n            errno = 0;\n            int fstat_ret = fstat(fd, &stat);\n            int fstat_errno = errno;\n            /* fstat returns -1 on error; we mimic original behavior */\n            error = fstat_ret < 0 ? -fstat_errno : 0;\n            log_state(\"fstat returned %d, errno=%d, error=%d, st_size=%lld\",\n                      fstat_ret, fstat_errno, error, (long long)stat.st_size);\n        }\n        if (!error && stat.st_size < reqsize) {\n            errno = 0;\n            int ftruncate_ret = ftruncate(fd, reqsize);\n            int ftruncate_errno = errno;\n            error = ftruncate_ret < 0 ? -ftruncate_errno : 0;\n            log_state(\"ftruncate to %lld returned %d, errno=%d, error=%d\",\n                      (long long)reqsize, ftruncate_ret, ftruncate_errno, error);\n        }\n        if (!error) {\n            int flock_un_ret = flock(fd, LOCK_UN);\n            int flock_un_errno = errno;\n            log_state(\"flock(LOCK_UN) returned %d, errno=%d\", flock_un_ret, flock_un_errno);\n        }\n        if (error) {\n            int ret_errno = errno; /* capture errno for the log */\n            log_state(\"expand branch error: error=%d, errno=%d; returning -errno\", error, ret_errno);\n            return -errno;\n        }\n    }\n\n    log_state(\"about to mmap: fd=%d, offset=%lld, size=%zu, prot=0x%x, flags=0x%x\",\n              fd, (long long)offset, size, prot, flags);\n    errno = 0;\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    if (mem == MAP_FAILED) {\n        int mmap_errno = errno;\n        log_state(\"mmap failed: MAP_FAILED, errno=%d; returning -errno\", mmap_errno);\n        return -errno;\n    }\n    *result = mem;\n    log_state(\"mmap success: mem=%p, result set, returning 0\", mem);\n    return 0;\n}\n"
}