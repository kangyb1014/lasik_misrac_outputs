{
  "user_message": "An agent A claimed that the following metal_map code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of metal_map.\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function modifies the parameter 'flags' (e.g. 'flags |= MAP_SHARED;' and specifically 'flags = MAP_PRIVATE | MAP_ANONYMOUS;'). Assigning to the parameter variable violates MISRA C 2023 Rule 17.8. Use a local copy (e.g. 'int local_flags = flags;') and modify that instead.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void metal_map_log(const char *fmt, ...)\n{\n    int saved_errno = errno;\n    FILE *f = fopen(\"/tmp/logs/109.txt\", \"a\");\n    if (f) {\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        fprintf(f, \"\\n\");\n        va_end(ap);\n        fclose(f);\n    }\n    errno = saved_errno;\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    /* Log entry state */\n    metal_map_log(\"enter: fd=%d offset=%lld size=%zu expand=%d flags=0x%x\",\n                  fd, (long long)offset, size, expand, flags);\n\n    /* This is the modification reported as violating MISRA 17.8: parameter modification */\n    flags |= MAP_SHARED;\n    metal_map_log(\"after flags |= MAP_SHARED: flags=0x%x\", flags);\n\n    if (fd < 0) {\n        metal_map_log(\"branch: fd < 0 (fd=%d). Setting fd=-1 and flags=MAP_PRIVATE|MAP_ANONYMOUS\", fd);\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n        metal_map_log(\"after fd<0 assignment: fd=%d flags=0x%x\", fd, flags);\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat statbuf;\n\n        metal_map_log(\"branch: expand path taken. reqsize=%lld\", (long long)reqsize);\n\n        error = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n        metal_map_log(\"after flock LOCK_EX: error=%d (errno=%d)\", error, errno);\n        if (!error)\n            error = fstat(fd, &statbuf);\n        metal_map_log(\"after fstat: error=%d (st_size=%lld)\", error, (long long)statbuf.st_size);\n        if (!error && statbuf.st_size < reqsize)\n            error = ftruncate(fd, reqsize);\n        metal_map_log(\"after potential ftruncate: error=%d\", error);\n        if (!error)\n            flock(fd, LOCK_UN);\n        metal_map_log(\"after flock LOCK_UN (if it was taken): error=%d\", error);\n        if (error)\n            return -errno;\n    }\n\n    metal_map_log(\"about to call mmap: fd=%d offset=%lld size=%zu prot=0x%x flags=0x%x\",\n                  fd, (long long)offset, size, prot, flags);\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    if (mem == MAP_FAILED) {\n        metal_map_log(\"mmap failed: errno=%d\", errno);\n        return -errno;\n    }\n    *result = mem;\n    metal_map_log(\"mmap succeeded: mem=%p returned via result\", mem);\n    return 0;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for metal_map. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states a function parameter shall not be modified. In the provided metal_map implementation the parameter variables are assigned to: \"flags |= MAP_SHARED;\" and \"flags = MAP_PRIVATE | MAP_ANONYMOUS;\" (and also \"fd = -1;\" in the fd < 0 branch). Those statements modify parameter objects (flags and fd) and therefore violate Rule 17.8. Note that modifying the object pointed to by a pointer parameter is allowed (so the assignment '*result = mem;' is fine), but changing the value of non-pointer parameters is disallowed. Fix by using local copies, e.g. \"int local_flags = flags; int local_fd = fd;\" and modify/use local_flags/local_fd instead of the parameters."
}