{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nIn metal_shmem_try_map the parameter 'size' (a by-value parameter) is reassigned: size = metal_align_up(size, ps->page_size); \u2014 this modifies the function parameter variable 'size', violating MISRA C 2023 Rule 17.8. Use a local variable (e.g. aligned_size) to hold the adjusted value instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/109.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <sys/mman.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <sys/file.h>\n\n/* Helper: append a log line to /tmp/logs/109.txt. */\nstatic void metal_map_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/109.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    metal_map_log(\"enter: fd=%d, offset=%lld, size=%zu, expand=%d, flags=0x%x, result=%p\",\n                  fd, (long long)offset, size, expand, flags, (void *)result);\n\n    flags |= MAP_SHARED;\n    metal_map_log(\"after MAP_SHARED: flags=0x%x\", flags);\n\n    if (fd < 0) {\n        metal_map_log(\"branch: fd < 0 (fd=%d). Switching to anonymous private mapping.\", fd);\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n        metal_map_log(\"fd set to %d, flags set to 0x%x\", fd, flags);\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat stat;\n\n        metal_map_log(\"branch: expand requested. reqsize=%lld\", (long long)reqsize);\n\n        error = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n        metal_map_log(\"flock(LOCK_EX) result: error=%d, errno=%d\", error, errno);\n        if (!error)\n            error = fstat(fd, &stat);\n        metal_map_log(\"fstat result: error=%d, stat.st_size=%lld\", error, (long long)stat.st_size);\n        if (!error && stat.st_size < reqsize)\n            error = ftruncate(fd, reqsize);\n        metal_map_log(\"after ftruncate check: error=%d, errno=%d\", error, errno);\n        if (!error)\n            flock(fd, LOCK_UN);\n        metal_map_log(\"after flock(LOCK_UN). current errno=%d\", errno);\n        if (error) {\n            metal_map_log(\"expand failed: error=%d, errno=%d. Returning -errno=%d\", error, errno, -errno);\n            return -errno;\n        }\n    }\n\n    metal_map_log(\"calling mmap with fd=%d, offset=%lld, size=%zu, flags=0x%x\", fd, (long long)offset, size, flags);\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    if (mem == MAP_FAILED) {\n        metal_map_log(\"mmap failed: errno=%d. Returning -errno=%d\", errno, -errno);\n        return -errno;\n    }\n    *result = mem;\n    metal_map_log(\"mmap succeeded: mem=%p. result set. returning 0\", mem);\n    return 0;\n}\n"
}