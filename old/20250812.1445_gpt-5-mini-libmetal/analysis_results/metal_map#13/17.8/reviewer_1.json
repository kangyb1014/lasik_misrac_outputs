{
  "user_message": "An agent A claimed that the following metal_map code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of metal_map.\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The parameter 'flags' is modified in-place by the statement 'flags |= MAP_SHARED;'. This directly changes the function parameter variable, which violates MISRA C 2023 Rule 17.8. Use a local copy (e.g. 'int local_flags = flags; local_flags |= MAP_SHARED;') instead of modifying the parameter.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void metal_map_log(const char *stage, int flags, int fd,\n                          off_t offset, size_t size, int expand,\n                          int error, void *mem)\n{\n    FILE *f = fopen(\"/tmp/logs/109.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"[metal_map] %s\\n\", stage);\n    fprintf(f, \"  flags: 0x%x\\n\", flags);\n    fprintf(f, \"  fd: %d\\n\", fd);\n    fprintf(f, \"  offset: %lld\\n\", (long long)offset);\n    fprintf(f, \"  size: %zu\\n\", size);\n    fprintf(f, \"  expand: %d\\n\", expand);\n    fprintf(f, \"  error: %d\\n\", error);\n    fprintf(f, \"  mem: %p\\n\", mem);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    /* Log initial entry state */\n    metal_map_log(\"entry\", flags, fd, offset, size, expand, 0, NULL);\n\n    /* Violation point: modifying parameter 'flags' in-place. Log before/after. */\n    metal_map_log(\"before flags |= MAP_SHARED\", flags, fd, offset, size, expand, 0, NULL);\n    flags |= MAP_SHARED;\n    metal_map_log(\"after flags |= MAP_SHARED\", flags, fd, offset, size, expand, 0, NULL);\n\n    if (fd < 0) {\n        /* Log branch taken */\n        metal_map_log(\"branch: fd < 0 (about to set fd=-1 and flags=MAP_PRIVATE|MAP_ANONYMOUS)\",\n                      flags, fd, offset, size, expand, 0, NULL);\n\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n\n        /* Log the state after modifying flags in this branch */\n        metal_map_log(\"after setting fd=-1 and flags=MAP_PRIVATE|MAP_ANONYMOUS\",\n                      flags, fd, offset, size, expand, 0, NULL);\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat stat_buf;\n\n        metal_map_log(\"branch: expand (before flock)\", flags, fd, offset, size, expand, 0, NULL);\n\n        error = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n        metal_map_log(\"after flock LOCK_EX\", flags, fd, offset, size, expand, error, NULL);\n        if (!error)\n            error = fstat(fd, &stat_buf);\n        metal_map_log(\"after fstat\", flags, fd, offset, size, expand, error, NULL);\n        if (!error && stat_buf.st_size < reqsize)\n            error = ftruncate(fd, reqsize);\n        metal_map_log(\"after potential ftruncate\", flags, fd, offset, size, expand, error, NULL);\n        if (!error)\n            flock(fd, LOCK_UN);\n        if (error)\n            return -errno;\n    }\n\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    metal_map_log(\"after mmap\", flags, fd, offset, size, expand, (mem == MAP_FAILED) ? -errno : 0, mem);\n    if (mem == MAP_FAILED)\n        return -errno;\n    *result = mem;\n\n    metal_map_log(\"return success\", flags, fd, offset, size, expand, 0, mem);\n    return 0;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for metal_map. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 17.8 states that a function parameter should not be modified; the statement \"flags |= MAP_SHARED;\" modifies the parameter variable flags in-place and therefore breaches the rule. Additionally, the function also assigns to fd (fd = -1) inside the body, which is another modification of a value parameter and similarly contravenes Rule 17.8. The use of *result = mem is permitted: the object referred to by a pointer parameter may be modified, but the pointer itself must not be modified. Recommended fixes are to make local copies (e.g. int local_flags = flags; local_flags |= MAP_SHARED;) and operate on those, and likewise use a local fd variable if necessary. Note: the rule text uses \u201cshould\u201d (a guideline), but under projects that enforce MISRA recommendations this code would be considered non\u2011compliant."
}