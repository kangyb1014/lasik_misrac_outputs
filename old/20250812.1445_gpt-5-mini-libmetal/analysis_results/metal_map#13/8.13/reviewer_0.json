{
  "user_message": "An agent A claimed that the following metal_map code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of metal_map.\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function metal_unmap(void *mem, size_t size) takes a non-const pointer even though it does not modify the pointee; per MISRA C 2023 Rule 8.13 the parameter should be const-qualified (e.g. const void *mem).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void log_append(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/107.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\", f);\n    fclose(f);\n}\nstatic void log_metal_map_entry(int fd, off_t offset, size_t size, int expand, int flags, void **result)\n{\n    log_append(\"metal_map ENTRY: fd=%d, offset=%lld, size=%zu, expand=%d, flags=0x%08x, result_ptr=%p\",\n               fd, (long long)offset, size, expand, flags, (void *)result);\n}\nstatic void log_branch_fd_negative(int original_fd, int used_fd, int flags)\n{\n    log_append(\"Branch: fd < 0 taken. original_fd=%d, used_fd=%d, new_flags=0x%08x\",\n               original_fd, used_fd, flags);\n}\nstatic void log_expand_start(off_t reqsize)\n{\n    log_append(\"Expand branch: requested_size=%lld\", (long long)reqsize);\n}\nstatic void log_expand_step(const char *step, int ret, int errnum)\n{\n    if (ret < 0)\n    {\n        log_append(\"Expand step: %s returned %d, errno=%d (%s)\", step, ret, errnum, strerror(errnum));\n    }\n    else\n    {\n        log_append(\"Expand step: %s succeeded (returned %d)\", step, ret);\n    }\n}\nstatic void log_mmap_result(void *mem, int errnum)\n{\n    if (mem == MAP_FAILED)\n        log_append(\"mmap FAILED, mem=%p, errno=%d (%s)\", mem, errnum, strerror(errnum));\n    else\n        log_append(\"mmap SUCCESS, mem=%p\", mem);\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    /* Log entry state */\n    log_metal_map_entry(fd, offset, size, expand, flags, result);\n\n    flags |= MAP_SHARED;\n\n    if (fd < 0) {\n        /* preserve original behavior */\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n\n        /* Log this branch */\n        log_branch_fd_negative(-1, fd, flags);\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat stat;\n\n        log_expand_start(reqsize);\n\n        error = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n        log_expand_step(\"flock(LOCK_EX)\", (flock(fd, LOCK_EX) < 0) ? -1 : 0, errno);\n        if (!error)\n            error = fstat(fd, &stat);\n        log_expand_step(\"fstat\", error, errno);\n        if (!error && stat.st_size < reqsize)\n            error = ftruncate(fd, reqsize);\n        log_expand_step(\"ftruncate(if needed)\", error, errno);\n        if (!error)\n            flock(fd, LOCK_UN);\n        log_expand_step(\"flock(LOCK_UN)\", 0, errno);\n        if (error)\n            return -errno;\n    }\n\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    if (mem == MAP_FAILED)\n    {\n        int saved_errno = errno;\n        log_mmap_result(mem, saved_errno);\n        return -saved_errno;\n    }\n\n    log_mmap_result(mem, 0);\n    *result = mem;\n    log_append(\"metal_map EXIT: result=*result -> %p, return=0\", mem);\n    return 0;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for metal_map. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct for the provided code. The claimed violation refers to a metal_unmap(void *mem, size_t size) function, but that function is not present in the supplied metal_map source. For the shown metal_map signature (int metal_map(..., void **result)) the parameter must be a pointer-to-pointer so the function can store the mapped address; the pointed-to object is a writable mapping (PROT_READ|PROT_WRITE), so making the type const (e.g. const void **) would be incorrect and would prevent callers from using the mapping for writes. In short: (a) the alleged metal_unmap issue is not shown in the target code, and (b) metal_map\u2019s void **result is appropriate and does not violate MISRA C 2023 Rule 8.13. (If there is a separate metal_unmap in the codebase that truly does not modify the pointee, it could be reviewed separately\u2014note, however, that many system APIs (munmap) use void * for historical/API-compatibility reasons and that is an acceptable justification.)"
}