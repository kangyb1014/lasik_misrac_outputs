{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nYes. In the loop the chained assignments use the pattern result = (result ? result : func(...));. If the first call (e.g. metal_uio_read_map_attr(...,\"offset\",...)) returns a non\u2011zero error, the subsequent lines evaluate the ternary as true and perform result = result (a no\u2011op assignment). Those executed no\u2011op assignments have no effect on program behaviour and therefore constitute dead code (their removal would not change behaviour).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_map code that contains useful probe functions that print useful logs to a file \"/tmp/logs/106.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_map as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_map:\n```c\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n\t      void **result)\n{\n\tint prot = PROT_READ | PROT_WRITE, error;\n\tvoid *mem;\n\n\tflags |= MAP_SHARED;\n\n\tif (fd < 0) {\n\t\tfd = -1;\n\t\tflags = MAP_PRIVATE | MAP_ANONYMOUS;\n\t} else if (expand) {\n\t\toff_t reqsize = offset + size;\n\t\tstruct stat stat;\n\n\t\terror = flock(fd, LOCK_EX) < 0 ? -errno : 0;\n\t\tif (!error)\n\t\t\terror = fstat(fd, &stat);\n\t\tif (!error && stat.st_size < reqsize)\n\t\t\terror = ftruncate(fd, reqsize);\n\t\tif (!error)\n\t\t\tflock(fd, LOCK_UN);\n\t\tif (error)\n\t\t\treturn -errno;\n\t}\n\n\tmem = mmap(NULL, size, prot, flags, fd, offset);\n\tif (mem == MAP_FAILED)\n\t\treturn -errno;\n\t*result = mem;\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_map code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <errno.h>\n#include <sys/mman.h>\n#include <sys/stat.h>\n#include <sys/file.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <stddef.h>\n\n/* Probe logging helper: append formatted messages to \"/tmp/logs/106.txt\".\n   Saves and restores errno so logging does not change program semantics. */\nstatic void probe_log(const char *fmt, ...)\n{\n    int saved_errno = errno;\n    FILE *f = fopen(\"/tmp/logs/106.txt\", \"a\");\n    if (!f) {\n        errno = saved_errno;\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fclose(f);\n    errno = saved_errno;\n}\n\nint metal_map(int fd, off_t offset, size_t size, int expand, int flags,\n              void **result)\n{\n    int prot = PROT_READ | PROT_WRITE, error;\n    void *mem;\n\n    /* Log entry and input state */\n    probe_log(\"metal_map entry: fd=%d, offset=%lld, size=%zu, expand=%d, flags=0x%x, result_ptr=%p\\n\",\n              fd, (long long)offset, size, expand, flags, (void *)result);\n\n    flags |= MAP_SHARED;\n    probe_log(\"flags after MAP_SHARED: 0x%x\\n\", flags);\n\n    if (fd < 0) {\n        probe_log(\"fd < 0 branch: original fd=%d -> setting fd=-1 and flags to MAP_PRIVATE|MAP_ANONYMOUS\\n\", fd);\n        fd = -1;\n        flags = MAP_PRIVATE | MAP_ANONYMOUS;\n    } else if (expand) {\n        off_t reqsize = offset + size;\n        struct stat stat;\n\n        probe_log(\"expand branch: reqsize=%lld\\n\", (long long)reqsize);\n\n        /* Preserve original logic while capturing intermediate results */\n        int flock_ret = flock(fd, LOCK_EX);\n        error = flock_ret < 0 ? -errno : 0;\n        probe_log(\"flock: ret=%d, errno=%d, mapped error=%d\\n\", flock_ret, (flock_ret < 0) ? errno : 0, error);\n\n        if (!error) {\n            int fstat_ret = fstat(fd, &stat);\n            /* original code: error = fstat(fd, &stat); */\n            error = fstat_ret;\n            probe_log(\"fstat: ret=%d, errno=%d, error=%d, st_size=%lld\\n\",\n                      fstat_ret, (fstat_ret < 0) ? errno : 0, error, (long long)stat.st_size);\n        }\n        if (!error && stat.st_size < reqsize) {\n            int ftruncate_ret = ftruncate(fd, reqsize);\n            /* original code: error = ftruncate(fd, reqsize); */\n            error = ftruncate_ret;\n            probe_log(\"ftruncate: ret=%d, errno=%d, error=%d\\n\", ftruncate_ret, (ftruncate_ret < 0) ? errno : 0, error);\n        }\n        if (!error) {\n            int flock_un_ret = flock(fd, LOCK_UN);\n            /* original code: if (!error) flock(fd, LOCK_UN); */\n            probe_log(\"flock(UN): ret=%d, errno=%d\\n\", flock_un_ret, (flock_un_ret < 0) ? errno : 0);\n        }\n        if (error) {\n            probe_log(\"expand branch error detected: error=%d, returning -errno=%d\\n\", error, -errno);\n            return -errno;\n        }\n    }\n\n    mem = mmap(NULL, size, prot, flags, fd, offset);\n    probe_log(\"mmap called: mem=%p, size=%zu, prot=0x%x, flags=0x%x, fd=%d, offset=%lld\\n\",\n              mem, size, prot, flags, fd, (long long)offset);\n\n    if (mem == MAP_FAILED) {\n        probe_log(\"mmap failed: errno=%d, returning -errno=%d\\n\", errno, -errno);\n        return -errno;\n    }\n    *result = mem;\n    probe_log(\"mmap succeeded: result_ptr=%p -> result_mem=%p, returning 0\\n\", (void *)result, mem);\n    return 0;\n}\n"
}