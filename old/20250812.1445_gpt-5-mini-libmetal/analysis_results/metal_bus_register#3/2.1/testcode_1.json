{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe call metal_bus_find(bus->name, NULL) can never return 0 because metal_bus_find only returns 0 when it finds a match and 'result' is non-NULL (the check uses 'if (strcmp(bus->name, name) == 0 && result) { *result = bus; return 0; }'). Passing NULL for result prevents the function from ever taking that return path, so metal_bus_find(...) == 0 is always false and the subsequent 'return -EEXIST;' is unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/25.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_register as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_register code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <limits.h>\n\n/* Helper to append probe logs to /tmp/logs/25.txt. Does not change program logic. */\nstatic void probe_log(const char *stage, const void *bus_ptr, const char *name, int find_ret)\n{\n    FILE *f = fopen(\"/tmp/logs/25.txt\", \"a\");\n    if (!f) {\n        /* Try to create the directory then reopen. Ignore errors if we still fail. */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/25.txt\", \"a\");\n        if (!f) {\n            return; /* Best-effort logging only. Do not affect program flow. */\n        }\n    }\n\n    /* Write a concise, clear log line with the stage, bus pointer, name (or NULL), and find result. */\n    fprintf(f, \"stage=%s bus=%p name=%s find_ret=%d\\n\",\n            stage,\n            bus_ptr,\n            (name && name[0]) ? name : \"(null)\",\n            find_ret);\n    fclose(f);\n}\n\nint metal_bus_register(struct metal_bus *bus)\n{\n    /* Log entry with available safe state information. Use INT_MIN to indicate \"find not called yet\". */\n    probe_log(\"entry\", (const void *)bus, (bus && bus->name) ? bus->name : NULL, INT_MIN);\n\n    if (!bus || !bus->name || !strlen(bus->name)) {\n        probe_log(\"invalid_args\", (const void *)bus, (bus && bus->name) ? bus->name : NULL, INT_MIN);\n        return -EINVAL;\n    }\n\n    /* Call metal_bus_find exactly once (preserve original behavior) and record its return value. */\n    int _find_ret = metal_bus_find(bus->name, NULL);\n    probe_log(\"after_find_call\", (const void *)bus, bus->name, _find_ret);\n\n    if (_find_ret == 0)\n    {\n        probe_log(\"exists_path_return\", (const void *)bus, bus->name, _find_ret);\n        return -EEXIST;\n    }\n\n    metal_list_init(&bus->devices);\n    metal_list_add_tail(&_metal.common.bus_list, &bus->node);\n    metal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\n    probe_log(\"success_return\", (const void *)bus, bus->name, _find_ret);\n    return 0;\n}\n"
}