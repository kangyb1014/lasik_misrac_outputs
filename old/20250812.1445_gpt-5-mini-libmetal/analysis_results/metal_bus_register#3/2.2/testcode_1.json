{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe call if (metal_bus_find(bus->name, NULL) == 0) return -EEXIST; is effectively dead. The implementation of metal_bus_find only returns 0 when a matching name is found AND the result pointer is non-NULL (it does: if (strcmp(...) == 0 && result) { *result = bus; return 0; }). Because metal_bus_register passes NULL as the second argument, metal_bus_find can never return 0 for a match, so the condition is always false and the return -EEXIST path is never executed. Removing that if-statement (or fixing metal_bus_find to return 0 on match regardless of the result pointer) would not change program behaviour. This therefore violates MISRA C 2023 Rule 2.2 (dead code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_bus_register code that contains useful probe functions that print useful logs to a file \"/tmp/logs/26.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_bus_register as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_bus_register:\n```c\nint metal_bus_register(struct metal_bus *bus)\n{\n\tif (!bus || !bus->name || !strlen(bus->name))\n\t\treturn -EINVAL;\n\tif (metal_bus_find(bus->name, NULL) == 0)\n\t\treturn -EEXIST;\n\tmetal_list_init(&bus->devices);\n\tmetal_list_add_tail(&_metal.common.bus_list, &bus->node);\n\tmetal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_bus_register code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n\n/* Probe helper: append formatted logs to /tmp/logs/26.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    va_list ap;\n    FILE *f = fopen(\"/tmp/logs/26.txt\", \"a\");\n    if (!f)\n        return;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nint metal_bus_register(struct metal_bus *bus)\n{\n    /* Log entry and basic pointers without changing logic */\n    probe_log(\"metal_bus_register: entry (bus=%p)\", (void *)bus);\n\n    if (!bus || !bus->name || !strlen(bus->name)) {\n        if (!bus) {\n            probe_log(\"metal_bus_register: returning -EINVAL because bus == NULL\");\n        } else if (!bus->name) {\n            probe_log(\"metal_bus_register: returning -EINVAL because bus->name == NULL (bus=%p)\", (void *)bus);\n        } else {\n            probe_log(\"metal_bus_register: returning -EINVAL because strlen(bus->name) == 0 (bus=%p, name_addr=%p)\", (void *)bus, (void *)bus->name);\n        }\n        return -EINVAL;\n    }\n\n    /* Capture the result of metal_bus_find then log it (preserve original behavior). */\n    probe_log(\"metal_bus_register: calling metal_bus_find(name='%s', result=NULL) (bus=%p)\", bus->name, (void *)bus);\n    int __mbf_res = metal_bus_find(bus->name, NULL);\n    probe_log(\"metal_bus_register: metal_bus_find returned %d for name '%s' (bus=%p, result=NULL)\", __mbf_res, bus->name, (void *)bus);\n\n    if (__mbf_res == 0)\n    {\n        probe_log(\"metal_bus_register: returning -EEXIST because metal_bus_find indicated existing bus with same name='%s'\", bus->name);\n        return -EEXIST;\n    }\n\n    /* Continue original logic */\n    metal_list_init(&bus->devices);\n    metal_list_add_tail(&_metal.common.bus_list, &bus->node);\n    metal_log(METAL_LOG_DEBUG, \"registered %s bus\\n\", bus->name);\n    probe_log(\"metal_bus_register: registered bus name='%s' successfully (bus=%p)\", bus->name, (void *)bus);\n    return 0;\n}\n"
}