{
  "user_message": "An agent A claimed that the following metal_shmem_try_map code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of metal_shmem_try_map.\n```c\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n\t\t\t       struct metal_io_region **result)\n{\n\tsize_t pages, page, phys_size;\n\tstruct metal_io_region *io;\n\tmetal_phys_addr_t *phys;\n\tuint8_t *virt;\n\tvoid *mem;\n\tint error;\n\n\tsize = metal_align_up(size, ps->page_size);\n\tpages = size / ps->page_size;\n\n\terror = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n\t\t\t  size, ps->mmap_flags, strerror(-error));\n\t\treturn error;\n\t}\n\n\terror = mlock(mem, size);\n\tif (error) {\n\t\tmetal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n\t\t\t  strerror(errno));\n\t}\n\n\tphys_size = sizeof(*phys) * pages;\n\tphys = malloc(phys_size);\n\tif (!phys) {\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tio = malloc(sizeof(*io));\n\tif (!io) {\n\t\tfree(phys);\n\t\tmetal_unmap(mem, size);\n\t\treturn -ENOMEM;\n\t}\n\n\tif (_metal.pagemap_fd < 0) {\n\t\tphys[0] = 0;\n\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n\t\tmetal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n\t} else {\n\t\tfor (virt = mem, page = 0; page < pages; page++) {\n\t\t\tsize_t offset = page * ps->page_size;\n\n\t\t\terror = metal_virt2phys(virt + offset, &phys[page]);\n\t\t\tif (error < 0)\n\t\t\t\tphys[page] = METAL_BAD_OFFSET;\n\t\t}\n\t\tmetal_io_init(io, mem, phys, size, ps->page_shift, 0,\n\t\t\t&metal_shmem_io_ops);\n\t}\n\t*result = io;\n\n\treturn 0;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function prototype 'static int metal_virt2phys(void *addr, unsigned long *phys)' takes 'addr' as 'void *' but does not modify the pointee \u2014 it only reads the address to compute an offset. Per MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible. Change to 'const void *addr' to comply. The 'phys' output parameter is written to and should remain non-const.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/3.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_shmem_try_map(struct metal_page_size *ps, int fd, size_t size,\n                               struct metal_io_region **result)\n{\n    size_t pages, page, phys_size;\n    struct metal_io_region *io;\n    metal_phys_addr_t *phys;\n    uint8_t *virt;\n    void *mem;\n    int error;\n\n    probe_log(\"metal_shmem_try_map: entry ps->page_size=%zu fd=%d req_size=%zu result_ptr=%p\",\n              ps ? ps->page_size : 0, fd, size, (void *)result);\n\n    size = metal_align_up(size, ps->page_size);\n    pages = size / ps->page_size;\n\n    probe_log(\"metal_shmem_try_map: aligned size=%zu pages=%zu\", size, pages);\n\n    error = metal_map(fd, 0, size, 1, ps->mmap_flags, &mem);\n    if (error) {\n        probe_log(\"metal_shmem_try_map: metal_map failed size=%zu mmap_flags=0x%x error=%d (%s)\",\n                  size, ps->mmap_flags, error, strerror(-error));\n        metal_log(METAL_LOG_WARNING,\n                  \"failed to mmap shmem %ld,0x%x - %s\\n\",\n                  size, ps->mmap_flags, strerror(-error));\n        return error;\n    }\n\n    probe_log(\"metal_shmem_try_map: mmap succeeded mem=%p size=%zu\", mem, size);\n\n    error = mlock(mem, size);\n    if (error) {\n        probe_log(\"metal_shmem_try_map: mlock failed errno=%d (%s)\", errno, strerror(errno));\n        metal_log(METAL_LOG_WARNING, \"failed to mlock shmem - %s\\n\",\n                  strerror(errno));\n    } else {\n        probe_log(\"metal_shmem_try_map: mlock succeeded\");\n    }\n\n    phys_size = sizeof(*phys) * pages;\n    phys = malloc(phys_size);\n    if (!phys) {\n        probe_log(\"metal_shmem_try_map: malloc(phys) failed requested=%zu\", phys_size);\n        metal_unmap(mem, size);\n        return -ENOMEM;\n    }\n\n    probe_log(\"metal_shmem_try_map: allocated phys array=%p phys_size=%zu\", (void *)phys, phys_size);\n\n    io = malloc(sizeof(*io));\n    if (!io) {\n        probe_log(\"metal_shmem_try_map: malloc(io) failed\");\n        free(phys);\n        metal_unmap(mem, size);\n        return -ENOMEM;\n    }\n\n    probe_log(\"metal_shmem_try_map: allocated io=%p\", (void *)io);\n\n    if (_metal.pagemap_fd < 0) {\n        phys[0] = 0;\n        probe_log(\"metal_shmem_try_map: pagemap_fd<0, using offset as pa mem=%p phys[0]=0\", mem);\n        metal_log(METAL_LOG_WARNING,\n                  \"shmem - failed to get va2pa mapping. use offset as pa.\\n\");\n        metal_io_init(io, mem, phys, size, -1, 0, &metal_shmem_io_ops);\n    } else {\n        for (virt = mem, page = 0; page < pages; page++) {\n            size_t offset = page * ps->page_size;\n\n            probe_log(\"metal_shmem_try_map: calling metal_virt2phys page=%zu offset=%zu virt=%p\",\n                      page, offset, (void *)(virt + offset));\n\n            error = metal_virt2phys(virt + offset, &phys[page]);\n\n            probe_log(\"metal_shmem_try_map: metal_virt2phys returned error=%d for page=%zu phys[page]=0x%lx\",\n                      error, page, (unsigned long)phys[page]);\n\n            if (error < 0) {\n                phys[page] = METAL_BAD_OFFSET;\n                probe_log(\"metal_shmem_try_map: set phys[%zu] = METAL_BAD_OFFSET\", page);\n            }\n        }\n        metal_io_init(io, mem, phys, size, ps->page_shift, 0,\n                      &metal_shmem_io_ops);\n        probe_log(\"metal_shmem_try_map: metal_io_init done io=%p mem=%p phys=%p size=%zu page_shift=%d\",\n                  (void *)io, mem, (void *)phys, size, ps->page_shift);\n    }\n    *result = io;\n\n    probe_log(\"metal_shmem_try_map: exit result_io=%p\", (void *)io);\n\n    return 0;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for metal_shmem_try_map. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Summary of rule: MISRA C 2023 Rule 8.13 expects pointer parameters to be const-qualified when the function does not modify the object pointed to. What agent A reported: metal_shmem_try_map calls metal_virt2phys(virt + offset, &phys[page]). If metal_virt2phys\u2019s prototype is int metal_virt2phys(void *addr, unsigned long *phys) and that function only reads the address (does not write through addr), then the prototype should use const void *addr and the current non-const prototype is a breach of Rule 8.13.\n\nEvaluation: the report is plausible but not provable from the snippet alone. The code shown only shows a call site that does not require mutation of the memory at addr, but the actual MISRA violation depends on the implementation and contract of metal_virt2phys. If metal_virt2phys does not modify the object pointed to by addr (and no other callers require a non-const pointer), then the prototype should be changed to take const void *addr and agent A\u2019s report is correct. If, however, metal_virt2phys legitimately modifies through addr or its API must remain non-const for other reasons (external linkage, callback prototype, or historical ABI constraints), then the prototype is not required to be const and the report would be incorrect.\n\nRecommendation: inspect the definition of metal_virt2phys and all its callers. If it never modifies *addr, change its prototype to int metal_virt2phys(const void *addr, unsigned long *phys) and update implementations and callers. If it must remain non-const for valid reasons, document and justify the deviation from Rule 8.13.\n\nNote: the provided test harness and empty log do not affect this determination; they do not prove or disprove whether metal_virt2phys modifies the pointee.\n"
}