{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(bus_name) and strlen(dev_name) after only checking the pointers for NULL. strlen requires a NUL-terminated string; if a non-NULL pointer refers to a character array without a terminating '\\0' (for example: char bn[3] = {'a','b','c'}; metal_device_open(bn, \"dev\", &d);) or to a buffer whose accessible bounds do not include a terminator, strlen may read past the object bounds, causing an out-of-bounds access. Therefore the fragment can violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_device_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/55.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_device_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_device_open:\n```c\nint metal_device_open(const char *bus_name, const char *dev_name,\n\t\t      struct metal_device **device)\n{\n\tstruct metal_bus *bus;\n\tint error;\n\n\tif (!bus_name || !strlen(bus_name) ||\n\t    !dev_name || !strlen(dev_name) ||\n\t    !device)\n\t\treturn -EINVAL;\n\n\terror = metal_bus_find(bus_name, &bus);\n\tif (error)\n\t\treturn error;\n\n\tif (!bus->ops.dev_open)\n\t\treturn -ENODEV;\n\n\terror = (*bus->ops.dev_open)(bus, dev_name, device);\n\tif (error)\n\t\treturn error;\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_device_open code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n/* Minimal forward declarations to keep this file self-contained and\n   compilable. Real definitions are provided elsewhere in the project. */\nstruct metal_device;\nstruct metal_bus {\n    struct {\n        int (*dev_open)(struct metal_bus *bus, const char *name,\n                        struct metal_device **device);\n    } ops;\n};\n\nint metal_bus_find(const char *bus_name, struct metal_bus **bus);\n\n/* Helper to ensure log directory exists. Ignore errors (e.g. EEXIST). */\nstatic void ensure_log_dir(void)\n{\n    (void)mkdir(\"/tmp/logs\", 0777);\n}\n\n/* Simple logger that appends messages to /tmp/logs/55.txt. */\nstatic void log_msg(const char *fmt, ...)\n{\n    ensure_log_dir();\n    FILE *f = fopen(\"/tmp/logs/55.txt\", \"a\");\n    if (!f)\n        return;\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Probe wrapper around strlen so we record when strlen is invoked and\n   what it returns. This preserves the original behavior (it still calls\n   strlen), while providing logs that help reproduce the violation\n   scenario. */\nstatic size_t probe_strlen(const char *s)\n{\n    log_msg(\"probe_strlen: called with ptr=%p\", (const void *)s);\n    /* Call through to the real strlen to preserve original behavior. */\n    size_t r = 0;\n    if (s)\n        r = strlen(s);\n    log_msg(\"probe_strlen: returned %zu for ptr=%p\", r, (const void *)s);\n    return r;\n}\n\n/* Probe wrapper for dev_open() calls to log parameters and return code. */\ntypedef int (*dev_open_t)(struct metal_bus *, const char *, struct metal_device **);\nstatic int probe_dev_open(struct metal_bus *bus, dev_open_t fun,\n                          const char *dev_name, struct metal_device **device)\n{\n    log_msg(\"probe_dev_open: bus=%p dev_name=%p device=%p\", (void *)bus,\n            (const void *)dev_name, (void *)device);\n    int r = fun(bus, dev_name, device);\n    log_msg(\"probe_dev_open: returned %d\", r);\n    return r;\n}\n\n/* The original function with minimal modifications: calls to strlen are\n   replaced by probe_strlen to capture evidence. The logic and return\n   behavior are preserved. */\nint metal_device_open(const char *bus_name, const char *dev_name,\n                      struct metal_device **device)\n{\n    struct metal_bus *bus;\n    int error;\n\n    log_msg(\"metal_device_open: entry bus_name=%p dev_name=%p device=%p\",\n            (const void *)bus_name, (const void *)dev_name, (const void *)device);\n\n    if (!bus_name || !probe_strlen(bus_name) ||\n        !dev_name || !probe_strlen(dev_name) ||\n        !device)\n    {\n        log_msg(\"metal_device_open: invalid argument, returning -EINVAL\");\n        return -EINVAL;\n    }\n\n    log_msg(\"metal_device_open: arguments appear non-empty, calling metal_bus_find('%s')\",\n            bus_name ? bus_name : \"(null)\");\n    error = metal_bus_find(bus_name, &bus);\n    log_msg(\"metal_device_open: metal_bus_find returned %d, bus=%p\", error, (void *)bus);\n    if (error)\n        return error;\n\n    if (!bus->ops.dev_open) {\n        log_msg(\"metal_device_open: bus->ops.dev_open is NULL, returning -ENODEV\");\n        return -ENODEV;\n    }\n\n    log_msg(\"metal_device_open: invoking bus->ops.dev_open\");\n    error = probe_dev_open(bus, bus->ops.dev_open, dev_name, device);\n    if (error) {\n        log_msg(\"metal_device_open: dev_open returned %d, propagating\", error);\n        return error;\n    }\n\n    log_msg(\"metal_device_open: success, returning 0\");\n    return 0;\n}\n"
}