{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf bus->ops.dev_open is declared to take a non-const char * (e.g. int (*dev_open)(struct metal_bus *, char *dev_name, struct metal_device **)), then passing dev_name of type const char * discards the const qualifier and violates MISRA C 2023 Rule 8.13. If dev_open\u2019s prototype instead declares dev_name as const char *, no violation occurs.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_device_open code that contains useful probe functions that print useful logs to a file \"/tmp/logs/51.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_device_open as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_device_open:\n```c\nint metal_device_open(const char *bus_name, const char *dev_name,\n\t\t      struct metal_device **device)\n{\n\tstruct metal_bus *bus;\n\tint error;\n\n\tif (!bus_name || !strlen(bus_name) ||\n\t    !dev_name || !strlen(dev_name) ||\n\t    !device)\n\t\treturn -EINVAL;\n\n\terror = metal_bus_find(bus_name, &bus);\n\tif (error)\n\t\treturn error;\n\n\tif (!bus->ops.dev_open)\n\t\treturn -ENODEV;\n\n\terror = (*bus->ops.dev_open)(bus, dev_name, device);\n\tif (error)\n\t\treturn error;\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_device_open code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <stddef.h>\n\nint metal_device_open(const char *bus_name, const char *dev_name,\n                      struct metal_device **device)\n{\n    struct metal_bus *bus;\n    int error;\n    FILE *log;\n\n    /* Log entry and basic parameter state */\n    log = fopen(\"/tmp/logs/51.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"ENTER: metal_device_open: bus_name=%p (%s), dev_name=%p (%s), device=%p\\n\",\n                (void *)bus_name, (bus_name ? bus_name : \"(null)\"),\n                (void *)dev_name, (dev_name ? dev_name : \"(null)\"),\n                (void *)device);\n        fclose(log);\n    }\n\n    if (!bus_name || !strlen(bus_name) ||\n        !dev_name || !strlen(dev_name) ||\n        !device) {\n        log = fopen(\"/tmp/logs/51.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"ARG_CHECK_FAIL: bus_name=%p dev_name=%p device=%p\\n\",\n                    (void *)bus_name, (void *)dev_name, (void *)device);\n            fclose(log);\n        }\n        return -EINVAL;\n    }\n\n    /* Find the bus and log result */\n    error = metal_bus_find(bus_name, &bus);\n    log = fopen(\"/tmp/logs/51.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"metal_bus_find returned %d, bus=%p\\n\", error, (void *)bus);\n        fclose(log);\n    }\n    if (error)\n        return error;\n\n    /* Check presence of dev_open and log pointer */\n    if (!bus->ops.dev_open) {\n        log = fopen(\"/tmp/logs/51.txt\", \"a\");\n        if (log) {\n            fprintf(log, \"NO_DEV_OPEN: bus->ops.dev_open is NULL for bus=%p\\n\", (void *)bus);\n            fclose(log);\n        }\n        return -ENODEV;\n    }\n\n    /* Before calling, log the function pointer and the dev_name pointer/value.\n       This is useful to reproduce the MISRA 8.13 scenario where dev_open's\n       prototype may take a non-const char *, causing the const qualifier to be\n       discarded when passing dev_name of type const char *. */\n    log = fopen(\"/tmp/logs/51.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"CALL_DEV_OPEN: func=%p, dev_name_addr=%p, dev_name=\\\"%s\\\"\\n\",\n                (void *)bus->ops.dev_open, (void *)dev_name, dev_name);\n        fprintf(log, \"NOTE: dev_name parameter in this call site has type 'const char *'.\\n\");\n        fprintf(log, \"If the actual dev_open prototype uses 'char *' for dev_name,\\n\");\n        fprintf(log, \"this will discard the const qualifier (MISRA C 2023 Rule 8.13).\\n\");\n        fclose(log);\n    }\n\n    /* Preserve original call semantics exactly as in the target code */\n    error = (*bus->ops.dev_open)(bus, dev_name, device);\n\n    /* Log the result of dev_open */\n    log = fopen(\"/tmp/logs/51.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"dev_open returned %d, device_out=%p\\n\",\n                error, (void *)(device ? (void *)*device : NULL));\n        fclose(log);\n    }\n\n    if (error)\n        return error;\n\n    log = fopen(\"/tmp/logs/51.txt\", \"a\");\n    if (log) {\n        fprintf(log, \"EXIT: metal_device_open success, device=%p\\n\", (void *)(device ? (void *)*device : NULL));\n        fclose(log);\n    }\n\n    return 0;\n}\n"
}