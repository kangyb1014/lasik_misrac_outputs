{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 1.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro metal_log uses GCC language extensions: the statement-expression form '({ ... })' and the GCC variadic-macro token-pasting extension '##__VA_ARGS__' to swallow a trailing comma. Both are documented compiler extensions (GCC) and therefore violate MISRA C 2023 Rule 1.2 (language extensions should not be used).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_linux_probe_driver code that contains useful probe functions that print useful logs to a file \"/tmp/logs/16.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_linux_probe_driver as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_linux_probe_driver:\n```c\nstatic int metal_linux_probe_driver(struct linux_bus *lbus,\n\t\t\t\t    struct linux_driver *ldrv)\n{\n\tchar command[256];\n\tint ret;\n\n\tldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\n\t/* Try probing the module and then open the driver. */\n\tif (!ldrv->sdrv) {\n\t\tret = snprintf(command, sizeof(command),\n\t\t\t       \"modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n\t\tif (ret >= (int)sizeof(command))\n\t\t\treturn -EOVERFLOW;\n\t\tret = system(command);\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t\t  \"%s: executing system command '%s' failed.\\n\",\n\t\t\t\t  __func__, command);\n\t\t}\n\t\tldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\t}\n\n\t/* Try sudo probing the module and then open the driver. */\n\tif (!ldrv->sdrv) {\n\t\tret = snprintf(command, sizeof(command),\n\t\t\t       \"sudo modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n\t\tif (ret >= (int)sizeof(command))\n\t\t\treturn -EOVERFLOW;\n\t\tret = system(command);\n\t\tif (ret < 0) {\n\t\t\tmetal_log(METAL_LOG_WARNING,\n\t\t\t\t  \"%s: executing system command '%s' failed.\\n\",\n\t\t\t\t  __func__, command);\n\t\t}\n\t\tldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\t}\n\n\t/* If all else fails... */\n\treturn ldrv->sdrv ? 0 : -ENODEV;\n}\n```\n</target_code>\nPlease provide the modified metal_linux_probe_driver code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <string.h>\n\n/* Minimal stand-ins to make this unit self-contained. */\nstruct linux_bus { const char *bus_name; };\nstruct linux_driver { const char *drv_name; const char *mod_name; void *sdrv; };\n\n/* Error codes as constants (avoid macros). */\nenum { EOVERFLOW = 75, ENODEV = 19 };\n\n/* A simple probe logger that appends control-flow and state info to /tmp/logs/16.txt. */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/16.txt\", \"a\");\n    if (f == NULL) {\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\n/*\n * Stub of metal_log used in original code. Instead of being a macro that may use\n * compiler extensions, provide a function that records the call into the probe log.\n * This keeps original call sites intact while producing reproducible evidence\n * (that the code reached a point that calls metal_log).\n */\nstatic void metal_log(int level, const char *fmt, ...)\n{\n    (void)level; /* level is not interpreted here; we simply record the message */\n    FILE *f = fopen(\"/tmp/logs/16.txt\", \"a\");\n    if (!f)\n        return;\n    fprintf(f, \"metal_log called: \");\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \" [at %s]\", __func__);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/*\n * A stub for sysfs_open_driver that simulates initial failures and eventual\n * success. It increments an internal counter so repeated calls show control flow.\n */\nstatic void *sysfs_open_driver(const char *bus_name, const char *drv_name)\n{\n    static int call_count = 0;\n    ++call_count;\n\n    probe_log(\"sysfs_open_driver called #%d with bus='%s' drv='%s'\",\n              call_count, bus_name ? bus_name : \"(null)\", drv_name ? drv_name : \"(null)\");\n\n    /* Simulate: first two calls return NULL (driver not found), third returns non-NULL. */\n    if (call_count >= 3) {\n        probe_log(\"sysfs_open_driver: returning non-NULL on call #%d\", call_count);\n        return (void *)0x1; /* dummy non-NULL pointer */\n    }\n\n    probe_log(\"sysfs_open_driver: returning NULL on call #%d\", call_count);\n    return NULL;\n}\n\n/* Preserve original logic while inserting probe logging. */\nstatic int metal_linux_probe_driver(struct linux_bus *lbus,\n                                    struct linux_driver *ldrv)\n{\n    char command[256];\n    int ret;\n\n    probe_log(\"ENTER %s: bus='%s' drv='%s' mod='%s' sdrv=%p\",\n              __func__, lbus ? lbus->bus_name : \"(null)\",\n              ldrv ? ldrv->drv_name : \"(null)\", ldrv ? ldrv->mod_name : \"(null)\",\n              ldrv ? ldrv->sdrv : NULL);\n\n    ldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n\n    /* Try probing the module and then open the driver. */\n    if (!ldrv->sdrv) {\n        ret = snprintf(command, sizeof(command),\n                       \"modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n        probe_log(\"snprintf returned %d, command='%s'\", ret, command);\n        if (ret >= (int)sizeof(command)) {\n            probe_log(\"snprintf overflow detected: ret=%d, buf_size=%zu\", ret, sizeof(command));\n            return -EOVERFLOW;\n        }\n        ret = system(command);\n        probe_log(\"system('%s') returned %d\", command, ret);\n        if (ret < 0) {\n            /* Record that the original code invokes metal_log here. */\n            metal_log(0, \"%s: executing system command '%s' failed.\", __func__, command);\n        }\n        ldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n        probe_log(\"After modprobe attempt, sdrv=%p\", ldrv->sdrv);\n    }\n\n    /* Try sudo probing the module and then open the driver. */\n    if (!ldrv->sdrv) {\n        ret = snprintf(command, sizeof(command),\n                       \"sudo modprobe %s > /dev/null 2>&1\", ldrv->mod_name);\n        probe_log(\"snprintf returned %d, command='%s'\", ret, command);\n        if (ret >= (int)sizeof(command)) {\n            probe_log(\"snprintf overflow detected (sudo): ret=%d, buf_size=%zu\", ret, sizeof(command));\n            return -EOVERFLOW;\n        }\n        ret = system(command);\n        probe_log(\"system('%s') returned %d\", command, ret);\n        if (ret < 0) {\n            metal_log(0, \"%s: executing system command '%s' failed.\", __func__, command);\n        }\n        ldrv->sdrv = sysfs_open_driver(lbus->bus_name, ldrv->drv_name);\n        probe_log(\"After sudo modprobe attempt, sdrv=%p\", ldrv->sdrv);\n    }\n\n    /* If all else fails... */\n    probe_log(\"EXIT %s: final sdrv=%p returning %d\", __func__, ldrv->sdrv, ldrv->sdrv ? 0 : -ENODEV);\n    return ldrv->sdrv ? 0 : -ENODEV;\n}\n"
}