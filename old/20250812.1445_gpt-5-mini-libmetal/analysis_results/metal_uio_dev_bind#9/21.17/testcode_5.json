{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) can read beyond object bounds if ldev->sdev or ldev->sdev->driver_name is NULL or if driver_name is not null-terminated. Because there is no prior NULL check or guarantee of termination in this fragment, strcmp may perform out-of-bounds reads, violating Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/79.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "static void metal_uio_probe_log(const char *phase,\n\t\t\t    struct linux_device *ldev,\n\t\t\t    struct linux_driver *ldrv)\n{\n    FILE *f = fopen(\"/tmp/logs/79.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"[metal_uio_dev_bind] phase=%s\\n\", phase);\n    fprintf(f, \"  ldev=%p\\n\", (void *)ldev);\n    if (ldev) {\n        fprintf(f, \"  ldev->dev_name=%p\\n\", (void *)ldev->dev_name);\n        fprintf(f, \"  ldev->sdev=%p\\n\", (void *)ldev->sdev);\n        if (ldev->sdev) {\n            fprintf(f, \"  ldev->sdev->driver_name=%p\\n\",\n                (void *)ldev->sdev->driver_name);\n        } else {\n            fprintf(f, \"  ldev->sdev is NULL\\n\");\n        }\n    }\n\n    fprintf(f, \"  ldrv=%p\\n\", (void *)ldrv);\n    if (ldrv)\n        fprintf(f, \"  ldrv->drv_name=%p\\n\", (void *)ldrv->drv_name);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                              struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n\n    /* Probe: log pointers and basic state before first strcmp */\n    metal_uio_probe_log(\"before-first-strcmp\", ldev, ldrv);\n\n    /* Preserve original logic: call strcmp and act on its result */\n    int cmp = strcmp(ldev->sdev->driver_name, ldrv->drv_name);\n\n    /* Log the result of the comparison */\n    {\n        FILE *f = fopen(\"/tmp/logs/79.txt\", \"a\");\n        if (f) {\n            fprintf(f, \"[metal_uio_dev_bind] after-first-strcmp: cmp=%d\\n\\n\", cmp);\n            fclose(f);\n        }\n    }\n\n    if (cmp == 0)\n        return 0;\n\n    /* Probe before second strcmp */\n    metal_uio_probe_log(\"before-second-strcmp\", ldev, ldrv);\n\n    if (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n        metal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n              ldev->dev_name, ldev->sdev->driver_name);\n        return -EBUSY;\n    }\n\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n    if (!attr) {\n        metal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n              ldev->dev_name);\n        return -errno;\n    }\n\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                       strlen(ldrv->drv_name));\n    if (result) {\n        metal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n              ldev->dev_name);\n        return -errno;\n    }\n    ldev->override = attr;\n\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    if (!attr) {\n        metal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n        return -ENOTSUP;\n    }\n\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                       strlen(ldev->dev_name));\n    if (result) {\n        metal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n        return -errno;\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n          ldev->dev_name, ldrv->drv_name);\n\n    return 0;\n}"
}