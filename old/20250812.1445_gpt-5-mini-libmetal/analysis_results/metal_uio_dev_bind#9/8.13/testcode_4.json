{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call passes ldrv->sdrv (declared as struct sysfs_driver *sdrv) to a function that only reads driver metadata (sysfs_get_driver_attr). Since the driver object is not modified here, ldrv->sdrv should be a pointer to a const-qualified type (const struct sysfs_driver *). Leaving it non-const violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/75.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helper: append logs to /tmp/logs/75.txt.\n * This function saves and restores errno so it does not perturb error\n * reporting in the instrumented function. */\nstatic void probe_log(const char *fmt, ...)\n{\n    int saved_errno = errno;\n    FILE *f = fopen(\"/tmp/logs/75.txt\", \"a\");\n    if (f) {\n        time_t t = time(NULL);\n        struct tm tm_buf;\n        if (localtime_r(&t, &tm_buf) != NULL) {\n            char timestr[64];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0) {\n                fprintf(f, \"%s - \", timestr);\n            }\n        }\n        va_list ap;\n        va_start(ap, fmt);\n        vfprintf(f, fmt, ap);\n        va_end(ap);\n        fprintf(f, \"\\n\");\n        fclose(f);\n    }\n    errno = saved_errno;\n}\n\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                              struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n\n    /* Safe accessors for logging to avoid dereferencing NULL in probes */\n    const char *ldev_dev_name = (ldev && ldev->dev_name) ? ldev->dev_name : \"(null)\";\n    const char *ldev_sdev_driver_name = (ldev && ldev->sdev && ldev->sdev->driver_name) ? ldev->sdev->driver_name : \"(null)\";\n    const char *ldrv_drv_name = (ldrv && ldrv->drv_name) ? ldrv->drv_name : \"(null)\";\n    void *ldev_ptr = (void *)ldev;\n    void *ldrv_ptr = (void *)ldrv;\n    void *ldev_sdev_ptr = (void *)(ldev ? ldev->sdev : NULL);\n    void *ldrv_sdrv_ptr = (void *)(ldrv ? ldrv->sdrv : NULL);\n\n    probe_log(\"enter metal_uio_dev_bind: ldev=%p, ldrv=%p, ldev->dev_name='%s', ldrv->drv_name='%s', ldev->sdev=%p, ldev->sdev->driver_name='%s', ldrv->sdrv=%p\",\n              ldev_ptr, ldrv_ptr, ldev_dev_name, ldrv_drv_name, ldev_sdev_ptr, ldev_sdev_driver_name, ldrv_sdrv_ptr);\n\n    /* First comparison: if device already bound to same driver */\n    {\n        int cmp = strcmp(ldev->sdev->driver_name, ldrv->drv_name);\n        probe_log(\"strcmp(ldev->sdev->driver_name, ldrv->drv_name) => %d\", cmp);\n        if (cmp == 0) {\n            probe_log(\"device '%s' already bound to driver '%s' -> returning 0\",\n                      ldev_dev_name, ldrv_drv_name);\n            return 0;\n        }\n    }\n\n    /* Check if device is in use by a different driver */\n    {\n        int cmp = strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN);\n        probe_log(\"strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) => %d (device driver_name='%s')\",\n                  cmp, ldev_sdev_driver_name);\n        if (cmp != 0) {\n            metal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n                      ldev->dev_name, ldev->sdev->driver_name);\n            probe_log(\"device '%s' in use by driver '%s' -> returning -EBUSY\",\n                      ldev_dev_name, ldev_sdev_driver_name);\n            return -EBUSY;\n        }\n    }\n\n    /* Get override attribute on the device */\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n    probe_log(\"sysfs_get_device_attr(ldev->sdev, 'driver_override') returned %p, errno=%d\",\n              (void *)attr, errno);\n    if (!attr) {\n        metal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n                  ldev->dev_name);\n        probe_log(\"device '%s' has no override -> returning -errno (%d)\", ldev_dev_name, -errno);\n        return -errno;\n    }\n\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                                   strlen(ldrv->drv_name));\n    probe_log(\"sysfs_write_attribute(attr, ldrv->drv_name='%s', len=%zu) returned %d, errno=%d\",\n              ldrv_drv_name, ldrv->drv_name ? strlen(ldrv->drv_name) : 0U, result, errno);\n    if (result) {\n        metal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n                  ldev->dev_name);\n        probe_log(\"failed to set override on '%s' -> returning -errno (%d)\", ldev_dev_name, -errno);\n        return -errno;\n    }\n    ldev->override = attr;\n    probe_log(\"set ldev->override = %p for device '%s'\", (void *)attr, ldev_dev_name);\n\n    /* Get driver's bind attribute (this is where the reported violation scenario accesses ldrv->sdrv) */\n    probe_log(\"about to call sysfs_get_driver_attr with ldrv->sdrv=%p for key 'bind'\",\n              (void *)ldrv->sdrv);\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    probe_log(\"sysfs_get_driver_attr(ldrv->sdrv, 'bind') returned %p, errno=%d\",\n              (void *)attr, errno);\n    if (!attr) {\n        metal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n        probe_log(\"driver '%s' has no bind -> returning -ENOTSUP\", ldrv_drv_name);\n        return -ENOTSUP;\n    }\n\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                                   strlen(ldev->dev_name));\n    probe_log(\"sysfs_write_attribute(attr, ldev->dev_name='%s', len=%zu) returned %d, errno=%d\",\n              ldev_dev_name, ldev->dev_name ? strlen(ldev->dev_name) : 0U, result, errno);\n    if (result) {\n        metal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n                  ldev->dev_name, ldrv->drv_name);\n        probe_log(\"failed to bind '%s' to '%s' -> returning -errno (%d)\", ldev_dev_name, ldrv_drv_name, -errno);\n        return -errno;\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n    probe_log(\"successfully bound device '%s' to driver '%s' -> returning 0\",\n              ldev_dev_name, ldrv_drv_name);\n\n    return 0;\n}\n"
}