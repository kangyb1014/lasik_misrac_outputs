{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThis is a violation if the sysfs_get_device_attr prototype expects a non-const char * for the name parameter (e.g. sysfs_get_device_attr(struct sysfs_device *, char *name)). The code passes a string literal \"driver_override\" (which should be treated as const) to a non-const pointer, thereby discarding const qualification and violating MISRA C 2023 Rule 8.13. Remediation: declare the parameter as const char *name (and similarly for sysfs_get_driver_attr).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/75.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/stat.h>\n\n/*\n * Probe logging helper: append structured logs to /tmp/logs/75.txt.\n * Uses const-qualified pointer types to avoid discarding const qualification.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *fp;\n    va_list ap;\n\n    /* Ensure the logs directory exists; ignore errors if it already does. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    fp = fopen(\"/tmp/logs/75.txt\", \"a\");\n    if (!fp)\n        return;\n\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fflush(fp);\n    fclose(fp);\n}\n\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                              struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n\n    /* Log entry and important state */\n    probe_log(\"ENTER metal_uio_dev_bind: dev=%p name=%s, sdev=%p driver_name=%s, ldrv=%p drv_name=%s\\n\",\n              (const void *)ldev, ldev ? ldev->dev_name : \"(null)\",\n              (const void *)(ldev ? ldev->sdev : NULL),\n              (ldev && ldev->sdev && ldev->sdev->driver_name) ? ldev->sdev->driver_name : \"(null)\",\n              (const void *)ldrv,\n              ldrv ? ldrv->drv_name : \"(null)\");\n\n    if (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0) {\n        probe_log(\"Early exit: device already bound to this driver (device driver_name=%s, driver drv_name=%s)\\n\",\n                  ldev->sdev->driver_name, ldrv->drv_name);\n        return 0;\n    }\n\n    if (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n        probe_log(\"Device in use: device=%s current_driver=%s requested_driver=%s -> -EBUSY\\n\",\n                  ldev->dev_name, ldev->sdev->driver_name, ldrv->drv_name);\n        metal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n                  ldev->dev_name, ldev->sdev->driver_name);\n        return -EBUSY;\n    }\n\n    /*\n     * Probe point: we are about to call sysfs_get_device_attr with a string\n     * literal. This is the site relevant to the MISRA 8.13 report: the\n     * literal \"driver_override\" is const but may be passed to a function\n     * expecting a non-const char *. Record the argument pointer and contents\n     * for evidence.\n     */\n    probe_log(\"Calling sysfs_get_device_attr with name literal at %p \\\"driver_override\\\" for device=%s\\n\",\n              (const void *)\"driver_override\", ldev->dev_name);\n\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\n    probe_log(\"sysfs_get_device_attr returned attr=%p (errno=%d: %s)\\n\",\n              (const void *)attr, errno, strerror(errno));\n\n    if (!attr) {\n        probe_log(\"Attribute lookup failed for device=%s name=\\\"driver_override\\\" -> return -errno (%d)\\n\",\n                  ldev->dev_name, -errno);\n        metal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n                  ldev->dev_name);\n        return -errno;\n    }\n\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                                   strlen(ldrv->drv_name));\n\n    probe_log(\"sysfs_write_attribute to set override returned result=%d (errno=%d: %s) for device=%s driver=%s\\n\",\n              result, errno, strerror(errno), ldev->dev_name, ldrv->drv_name);\n\n    if (result) {\n        probe_log(\"Failed to set override on device=%s -> return -errno (%d)\\n\",\n                  ldev->dev_name, -errno);\n        metal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n                  ldev->dev_name);\n        return -errno;\n    }\n    ldev->override = attr;\n\n    probe_log(\"Calling sysfs_get_driver_attr for driver=%s name=\\\"bind\\\"\\n\",\n              ldrv->drv_name);\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    probe_log(\"sysfs_get_driver_attr returned attr=%p (errno=%d: %s)\\n\",\n              (const void *)attr, errno, strerror(errno));\n\n    if (!attr) {\n        probe_log(\"Driver has no bind attribute: driver=%s -> -ENOTSUP\\n\",\n                  ldrv->drv_name);\n        metal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n        return -ENOTSUP;\n    }\n\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                                   strlen(ldev->dev_name));\n\n    probe_log(\"sysfs_write_attribute to bind returned result=%d (errno=%d: %s) binding device=%s to driver=%s\\n\",\n              result, errno, strerror(errno), ldev->dev_name, ldrv->drv_name);\n\n    if (result) {\n        probe_log(\"Failed to bind device=%s to driver=%s -> return -errno (%d)\\n\",\n                  ldev->dev_name, ldrv->drv_name, -errno);\n        metal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n                  ldev->dev_name, ldrv->drv_name);\n        return -errno;\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n\n    probe_log(\"Exit metal_uio_dev_bind: success for device=%s driver=%s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n\n    return 0;\n}\n"
}