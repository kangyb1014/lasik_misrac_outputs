{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf the prototype of sysfs_write_attribute is something like int sysfs_write_attribute(struct sysfs_attribute *attr, char *buf, size_t len) (i.e. the buffer parameter is a non-const char *), then the call sysfs_write_attribute(attr, ldev->dev_name, strlen(ldev->dev_name)); violates MISRA C 2023 Rule 8.13 because the pointed-to data is not modified by the call and the parameter should be const-qualified (const char *) to express that and prevent unintended modification. If, however, sysfs_write_attribute already declares the buffer parameter as const char *, then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_uio_dev_bind code that contains useful probe functions that print useful logs to a file \"/tmp/logs/75.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_uio_dev_bind as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_uio_dev_bind:\n```c\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n\t\t\t      struct linux_driver *ldrv)\n{\n\tstruct sysfs_attribute *attr;\n\tint result;\n\n\tif (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n\t\treturn 0;\n\n\tif (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n\t\tmetal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n\t\t\t  ldev->dev_name, ldev->sdev->driver_name);\n\t\treturn -EBUSY;\n\t}\n\n\tattr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldrv->drv_name,\n\t\t\t\t       strlen(ldrv->drv_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n\t\t\t  ldev->dev_name);\n\t\treturn -errno;\n\t}\n\tldev->override = attr;\n\n\tattr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n\tif (!attr) {\n\t\tmetal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n\t\treturn -ENOTSUP;\n\t}\n\n\tresult = sysfs_write_attribute(attr, ldev->dev_name,\n\t\t\t\t       strlen(ldev->dev_name));\n\tif (result) {\n\t\tmetal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n\t\t\t  ldev->dev_name, ldrv->drv_name);\n\t\treturn -errno;\n\t}\n\n\tmetal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n\t\t  ldev->dev_name, ldrv->drv_name);\n\n\treturn 0;\n}\n```\n</target_code>\nPlease provide the modified metal_uio_dev_bind code.\n",
  "test_code": "static void probe_log_state(const char *event,\n                                struct linux_device *ldev,\n                                struct linux_driver *ldrv,\n                                struct sysfs_attribute *attr,\n                                const char *buf,\n                                size_t len,\n                                int result)\n{\n    /* Append diagnostic information to the probe log file. */\n    FILE *f = fopen(\"/tmp/logs/75.txt\", \"a\");\n    if (!f)\n        return;\n\n    fprintf(f, \"EVENT: %s\\n\", event ? event : \"(null)\");\n\n    if (ldev) {\n        fprintf(f, \"  ldev=%p\\n\", (void *)ldev);\n        if (ldev->dev_name)\n            fprintf(f, \"  ldev->dev_name=%p \\\"%s\\\"\\n\", (void *)ldev->dev_name, ldev->dev_name);\n        else\n            fprintf(f, \"  ldev->dev_name=(null)\\n\");\n        if (ldev->sdev && ldev->sdev->driver_name)\n            fprintf(f, \"  ldev->sdev->driver_name=%p \\\"%s\\\"\\n\", (void *)ldev->sdev->driver_name, ldev->sdev->driver_name);\n        else\n            fprintf(f, \"  ldev->sdev->driver_name=(null)\\n\");\n    } else {\n        fprintf(f, \"  ldev=(null)\\n\");\n    }\n\n    if (ldrv) {\n        fprintf(f, \"  ldrv=%p\\n\", (void *)ldrv);\n        if (ldrv->drv_name)\n            fprintf(f, \"  ldrv->drv_name=%p \\\"%s\\\"\\n\", (void *)ldrv->drv_name, ldrv->drv_name);\n        else\n            fprintf(f, \"  ldrv->drv_name=(null)\\n\");\n        if (ldrv->sdrv && ldrv->sdrv->name)\n            fprintf(f, \"  ldrv->sdrv=%p name=%p \\\"%s\\\"\\n\", (void *)ldrv->sdrv, (void *)ldrv->sdrv->name, ldrv->sdrv->name);\n    } else {\n        fprintf(f, \"  ldrv=(null)\\n\");\n    }\n\n    fprintf(f, \"  attr=%p\\n\", (void *)attr);\n    fprintf(f, \"  buf=%p len=%zu result=%d\\n\", (void *)buf, len, result);\n\n    if (buf && len > 0) {\n        /* Print up to 128 bytes of the buffer as a best-effort snapshot. */\n        size_t cap = (len > 128U) ? 128U : len;\n        /* Note: buf may not be NUL-terminated; use precision to limit output. */\n        fprintf(f, \"  buf_content[%zu]=\\\"%.*s\\\"\\n\", cap, (int)cap, buf);\n    }\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic int metal_uio_dev_bind(struct linux_device *ldev,\n                              struct linux_driver *ldrv)\n{\n    struct sysfs_attribute *attr;\n    int result;\n\n    /* Log entry and key inputs */\n    probe_log_state(\"entry\", ldev, ldrv, NULL, NULL, 0, 0);\n\n    if (strcmp(ldev->sdev->driver_name, ldrv->drv_name) == 0)\n    {\n        probe_log_state(\"already_bound_same_driver\", ldev, ldrv, NULL, NULL, 0, 0);\n        return 0;\n    }\n\n    if (strcmp(ldev->sdev->driver_name, SYSFS_UNKNOWN) != 0) {\n        metal_log(METAL_LOG_INFO, \"device %s in use by driver %s\\n\",\n                  ldev->dev_name, ldev->sdev->driver_name);\n        probe_log_state(\"device_in_use_by_other_driver\", ldev, ldrv, NULL, NULL, 0, 0);\n        return -EBUSY;\n    }\n\n    attr = sysfs_get_device_attr(ldev->sdev, \"driver_override\");\n    if (!attr) {\n        metal_log(METAL_LOG_ERROR, \"device %s has no override\\n\",\n                  ldev->dev_name);\n        probe_log_state(\"no_override_attr\", ldev, ldrv, NULL, NULL, 0, -errno);\n        return -errno;\n    }\n\n    /* Probe just before writing the override. This captures the pointer passed\n     * to sysfs_write_attribute and the buffer contents so that other agents can\n     * examine whether the buffer should have been a const-qualified pointer.\n     */\n    probe_log_state(\"before_override_write\", ldev, ldrv, attr,\n                    ldrv->drv_name, strlen(ldrv->drv_name), 0);\n\n    result = sysfs_write_attribute(attr, ldrv->drv_name,\n                                   strlen(ldrv->drv_name));\n\n    probe_log_state(\"after_override_write\", ldev, ldrv, attr,\n                    ldrv->drv_name, strlen(ldrv->drv_name), result);\n\n    if (result) {\n        metal_log(METAL_LOG_ERROR, \"failed to set override on %s\\n\",\n                  ldev->dev_name);\n        probe_log_state(\"failed_set_override\", ldev, ldrv, attr,\n                        ldrv->drv_name, strlen(ldrv->drv_name), -errno);\n        return -errno;\n    }\n    ldev->override = attr;\n\n    attr = sysfs_get_driver_attr(ldrv->sdrv, \"bind\");\n    if (!attr) {\n        metal_log(METAL_LOG_ERROR, \"driver %s has no bind\\n\", ldrv->drv_name);\n        probe_log_state(\"no_driver_bind_attr\", ldev, ldrv, NULL, NULL, 0, -ENOTSUP);\n        return -ENOTSUP;\n    }\n\n    /* Probe just before writing the bind string. This is the call that the\n     * other agent reported as the potential Rule 8.13 violation: passing\n     * ldev->dev_name (a non-const char *) to sysfs_write_attribute. The probe\n     * captures the pointer, length and a snapshot of the content.\n     */\n    probe_log_state(\"before_bind_write\", ldev, ldrv, attr,\n                    ldev->dev_name, strlen(ldev->dev_name), 0);\n\n    result = sysfs_write_attribute(attr, ldev->dev_name,\n                                   strlen(ldev->dev_name));\n\n    probe_log_state(\"after_bind_write\", ldev, ldrv, attr,\n                    ldev->dev_name, strlen(ldev->dev_name), result);\n\n    if (result) {\n        metal_log(METAL_LOG_ERROR, \"failed to bind %s to %s\\n\",\n                  ldev->dev_name, ldrv->drv_name);\n        probe_log_state(\"failed_bind\", ldev, ldrv, attr,\n                        ldev->dev_name, strlen(ldev->dev_name), -errno);\n        return -errno;\n    }\n\n    metal_log(METAL_LOG_DEBUG, \"bound device %s to driver %s\\n\",\n              ldev->dev_name, ldrv->drv_name);\n    probe_log_state(\"success\", ldev, ldrv, attr, ldev->dev_name,\n                    strlen(ldev->dev_name), 0);\n\n    return 0;\n}"
}