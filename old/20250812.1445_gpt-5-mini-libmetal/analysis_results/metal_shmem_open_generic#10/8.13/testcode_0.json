{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIf struct metal_generic_shmem declares name as a non-const pointer (e.g. char *name), then the comparison strcmp(shmem->name, name) reveals a violation of MISRA C 2023 Rule 8.13: shmem->name should be const char * because it is only used for read-only operations. If, however, shmem->name is already declared as const char * then there is no violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open_generic code that contains useful probe functions that print useful logs to a file \"/tmp/logs/83.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open_generic as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open_generic:\n```c\nint metal_shmem_open_generic(const char *name, size_t size,\n\t\t\t     struct metal_io_region **result)\n{\n\tstruct metal_generic_shmem *shmem;\n\tstruct metal_list *node;\n\n\tmetal_list_for_each(&_metal.common.generic_shmem_list, node) {\n\t\tshmem = metal_container_of(node, struct metal_generic_shmem, node);\n\t\tif (strcmp(shmem->name, name) != 0)\n\t\t\tcontinue;\n\t\tif (size <= metal_io_region_size(&shmem->io)) {\n\t\t\t*result = &shmem->io;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open_generic code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <errno.h>\n#include <stddef.h>\n\n/* Probe helpers: write simple logs to /tmp/logs/83.txt. */\nstatic void probe_log_entry(const char *name, size_t size)\n{\n    FILE *f = fopen(\"/tmp/logs/83.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"metal_shmem_open_generic: entry name_ptr=%p\", (const void *)name);\n    if (name) {\n        fprintf(f, \" name=\\\"%s\\\"\", name);\n    }\n    fprintf(f, \" size=%zu\\n\", size);\n    fclose(f);\n}\n\nstatic void probe_log_iteration(const void *node, const void *shmem, const char *shmem_name)\n{\n    FILE *f = fopen(\"/tmp/logs/83.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"  iter: node=%p shmem=%p shmem->name_ptr=%p\", node, shmem, (const void *)shmem_name);\n    if (shmem_name) {\n        fprintf(f, \" shmem->name=\\\"%s\\\"\", shmem_name);\n    }\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nstatic void probe_log_compare(const char *a, const char *b, int cmp)\n{\n    FILE *f = fopen(\"/tmp/logs/83.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"    compare: a_ptr=%p\", (const void *)a);\n    if (a) fprintf(f, \" a=\\\"%s\\\"\", a);\n    fprintf(f, \" b_ptr=%p\", (const void *)b);\n    if (b) fprintf(f, \" b=\\\"%s\\\"\", b);\n    fprintf(f, \" result=%d\\n\", cmp);\n    fclose(f);\n}\n\nstatic void probe_log_found(const void *shmem, size_t region_size)\n{\n    FILE *f = fopen(\"/tmp/logs/83.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"  match found: shmem=%p region_size=%zu returning=0\\n\", shmem, region_size);\n    fclose(f);\n}\n\nstatic void probe_log_not_found(void)\n{\n    FILE *f = fopen(\"/tmp/logs/83.txt\", \"a\");\n    if (!f) {\n        return;\n    }\n    fprintf(f, \"metal_shmem_open_generic: no match found returning -ENOENT (%d)\\n\", -ENOENT);\n    fclose(f);\n}\n\nint metal_shmem_open_generic(const char *name, size_t size,\n                             struct metal_io_region **result)\n{\n    struct metal_generic_shmem *shmem;\n    struct metal_list *node;\n\n    /* Log entry parameters */\n    probe_log_entry(name, size);\n\n    metal_list_for_each(&_metal.common.generic_shmem_list, node) {\n        shmem = metal_container_of(node, struct metal_generic_shmem, node);\n\n        /* Log iteration state */\n        probe_log_iteration(node, shmem, shmem->name);\n\n        /* Log the comparison and its result */\n        int cmp = strcmp(shmem->name, name);\n        probe_log_compare(shmem->name, name, cmp);\n        if (cmp != 0)\n            continue;\n\n        if (size <= metal_io_region_size(&shmem->io)) {\n            *result = &shmem->io;\n            probe_log_found(shmem, metal_io_region_size(&shmem->io));\n            return 0;\n        }\n    }\n\n    probe_log_not_found();\n    return -ENOENT;\n}\n"
}