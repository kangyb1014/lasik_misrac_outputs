{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'node' is declared as 'struct metal_list *node' but is only used for read-only traversal of the list (iterated by metal_list_for_each and passed to metal_container_of to locate the containing object). It is never used to modify the pointed-to struct metal_list, so it should be declared as 'const struct metal_list *node' (or use a const-aware iteration macro). As written, the pointer is not const-qualified even though const qualification is possible, violating MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open_generic code that contains useful probe functions that print useful logs to a file \"/tmp/logs/83.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open_generic as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open_generic:\n```c\nint metal_shmem_open_generic(const char *name, size_t size,\n\t\t\t     struct metal_io_region **result)\n{\n\tstruct metal_generic_shmem *shmem;\n\tstruct metal_list *node;\n\n\tmetal_list_for_each(&_metal.common.generic_shmem_list, node) {\n\t\tshmem = metal_container_of(node, struct metal_generic_shmem, node);\n\t\tif (strcmp(shmem->name, name) != 0)\n\t\t\tcontinue;\n\t\tif (size <= metal_io_region_size(&shmem->io)) {\n\t\t\t*result = &shmem->io;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open_generic code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <stddef.h>\n\n/* Probe logger: append control-flow and state info to /tmp/logs/83.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/83.txt\", \"a\");\n    if (f == NULL) {\n        /* If opening the log file fails, avoid changing program behavior; silently return. */\n        return;\n    }\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fflush(f);\n    fclose(f);\n}\n\nint metal_shmem_open_generic(const char *name, size_t size,\n                             struct metal_io_region **result)\n{\n    struct metal_generic_shmem *shmem;\n    struct metal_list *node;\n\n    probe_log(\"ENTER metal_shmem_open_generic name=\\\"%s\\\" size=%zu\\n\",\n              (name != NULL) ? name : \"(null)\", size);\n\n    metal_list_for_each(&_metal.common.generic_shmem_list, node) {\n        probe_log(\"ITER node=%p\\n\", (void *)node);\n\n        shmem = metal_container_of(node, struct metal_generic_shmem, node);\n        if (shmem == NULL) {\n            probe_log(\"  metal_container_of returned NULL for node=%p\\n\", (void *)node);\n            continue;\n        }\n\n        /* Log the candidate shmem info (name and available size) */\n        probe_log(\"  candidate shmem=%p name=\\\"%s\\\" io_region=%p\\n\",\n                  (void *)shmem,\n                  (shmem->name != NULL) ? shmem->name : \"(null)\",\n                  (void *)&shmem->io);\n\n        if (strcmp(shmem->name, name) != 0) {\n            probe_log(\"  name mismatch: \\\"%s\\\" != \\\"%s\\\"\\n\",\n                      shmem->name, (name != NULL) ? name : \"(null)\");\n            continue;\n        }\n\n        probe_log(\"  name matches for shmem=%p; checking size: requested=%zu\\n\", (void *)shmem, size);\n\n        if (size <= metal_io_region_size(&shmem->io)) {\n            *result = &shmem->io;\n            probe_log(\"  MATCH FOUND: result=%p available=%zu returning 0\\n\",\n                      (void *)*result, metal_io_region_size(&shmem->io));\n            return 0;\n        }\n\n        probe_log(\"  size insufficient: requested=%zu available=%zu\\n\",\n                  size, metal_io_region_size(&shmem->io));\n    }\n\n    probe_log(\"EXIT metal_shmem_open_generic: not found, returning -ENOENT\\n\");\n    return -ENOENT;\n}\n"
}