{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe out-parameter result is declared as struct metal_io_region ** but the function only stores (returns) a pointer to an existing io region; the pointee could be const-qualified (e.g. const struct metal_io_region ** or const struct metal_io_region * * to indicate callers should not modify the region). Declaring result as a non-const pointee allows modification of the region through the returned pointer and therefore violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified metal_shmem_open_generic code that contains useful probe functions that print useful logs to a file \"/tmp/logs/83.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of metal_shmem_open_generic as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of metal_shmem_open_generic:\n```c\nint metal_shmem_open_generic(const char *name, size_t size,\n\t\t\t     struct metal_io_region **result)\n{\n\tstruct metal_generic_shmem *shmem;\n\tstruct metal_list *node;\n\n\tmetal_list_for_each(&_metal.common.generic_shmem_list, node) {\n\t\tshmem = metal_container_of(node, struct metal_generic_shmem, node);\n\t\tif (strcmp(shmem->name, name) != 0)\n\t\t\tcontinue;\n\t\tif (size <= metal_io_region_size(&shmem->io)) {\n\t\t\t*result = &shmem->io;\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\treturn -ENOENT;\n}\n```\n</target_code>\nPlease provide the modified metal_shmem_open_generic code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <string.h>\n#include <errno.h>\n\nstatic void probe_log(const char *fmt, ...)\n{\n    /* Ensure the directory exists; ignore errors if it already does */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    FILE *f = fopen(\"/tmp/logs/83.txt\", \"a\");\n    if (!f) {\n        return; /* best-effort logging only */\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fclose(f);\n}\n\nint metal_shmem_open_generic(const char *name, size_t size,\n                             struct metal_io_region **result)\n{\n    struct metal_generic_shmem *shmem;\n    struct metal_list *node;\n\n    probe_log(\"ENTER: metal_shmem_open_generic(name=\\\"%s\\\", size=%zu, result=%p)\\n\",\n              name ? name : \"(null)\", size, (void *)result);\n\n    metal_list_for_each(&_metal.common.generic_shmem_list, node) {\n        shmem = metal_container_of(node, struct metal_generic_shmem, node);\n\n        probe_log(\"ITER: shmem=%p, shmem->name=\\\"%s\\\"\\n\",\n                  (void *)shmem, (shmem && shmem->name) ? shmem->name : \"(null)\");\n\n        if (strcmp(shmem->name, name) != 0) {\n            probe_log(\"CONTINUE: name mismatch (shmem->name=\\\"%s\\\", name=\\\"%s\\\")\\n\",\n                      shmem->name, name ? name : \"(null)\");\n            continue;\n        }\n\n        size_t available = metal_io_region_size(&shmem->io);\n        probe_log(\"CHECK SIZE: requested=%zu, available=%zu\\n\", size, available);\n\n        if (size <= available) {\n            probe_log(\"MATCH: assigning *result = &shmem->io (result ptr=%p, assigned=%p)\\n\",\n                      (void *)result, (void *)&shmem->io);\n\n            *result = &shmem->io;\n\n            probe_log(\"RETURN: 0 (success)\\n\");\n            return 0;\n        }\n\n        probe_log(\"NO MATCH: size too small (requested=%zu, available=%zu)\\n\", size, available);\n    }\n\n    probe_log(\"RETURN: -ENOENT (not found)\\n\");\n    return -ENOENT;\n}\n"
}