{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe call OS_TaskEntryPoint(local_arg.id) is annotated/commented as \"Never returns\". If OS_TaskEntryPoint is indeed non\u2011returning, the following statement 'return NULL;' is unreachable. This unreachable return constitutes a violation of MISRA C 2023 Rule 2.1 (unreachable code).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_PthreadTaskEntry code that contains useful probe functions that print useful logs to a file \"/tmp/logs/73.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_PthreadTaskEntry as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_PthreadTaskEntry:\n```c\nstatic void *OS_PthreadTaskEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n    OS_TaskEntryPoint(local_arg.id); /* Never returns */\n\n    return NULL;\n}\n```\n</target_code>\nPlease provide the modified OS_PthreadTaskEntry code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <inttypes.h>\n#include <time.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <unistd.h>\n#include <pthread.h>\n\n/* Probe function: append a structured log entry to /tmp/logs/73.txt\n * This function intentionally preserves the original control flow and\n * does not alter the semantics of OS_PthreadTaskEntry. It only records\n * the important state before and after calling OS_TaskEntryPoint to\n * provide evidence whether that call returns.\n */\nstatic void OS_LogProbe(const char *stage, const char *caller, void *opaque_arg, uintptr_t id)\n{\n    FILE *f = fopen(\"/tmp/logs/73.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Try to create the directory and retry once */\n        (void)mkdir(\"/tmp/logs\", 0777);\n        f = fopen(\"/tmp/logs/73.txt\", \"a\");\n    }\n\n    if (f != NULL)\n    {\n        time_t t = time(NULL);\n        /* Record timestamp, PID, thread, stage, caller, pointer-held, and numeric id */\n        fprintf(f, \"time=%ld pid=%d tid=%lu stage=%s caller=%s opaque_arg=%p id=%\" PRIuPTR \"\\n\",\n                (long)t,\n                (int)getpid(),\n                (unsigned long)pthread_self(),\n                stage,\n                caller,\n                opaque_arg,\n                (uintptr_t)id);\n        fclose(f);\n    }\n}\n\nstatic void *OS_PthreadTaskEntry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t local_arg;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n\n    /* Log just before calling the entry point. If OS_TaskEntryPoint truly never\n     * returns, no \"after_call\" log will be present in the file, which documents\n     * the unreachable return scenario. If it does return, the \"after_call\" log\n     * will provide evidence that the return was reachable.\n     */\n    OS_LogProbe(\"before_call\", \"OS_PthreadTaskEntry\", local_arg.opaque_arg, (uintptr_t)local_arg.id);\n\n    OS_TaskEntryPoint(local_arg.id); /* Never returns */\n\n    /* If execution reaches here, OS_TaskEntryPoint returned unexpectedly. Log that event. */\n    OS_LogProbe(\"after_call_returned\", \"OS_PthreadTaskEntry\", local_arg.opaque_arg, (uintptr_t)local_arg.id);\n\n    return NULL;\n}\n"
}