{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 17.8.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer parameter 'Str' is modified with the statement 'Str += WriteLen;'. MISRA C 2023 Rule 17.8 forbids modifying function parameters (the pointer itself shall not be modified). This is a violation \u2014 use a local pointer copy (e.g., 'const char *p = Str;') and update that instead.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ConsoleOutput_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/165.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_ConsoleOutput_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleOutput_Impl:\n```c\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_ConsoleOutput_Impl code.\n",
  "test_code": "void OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n    /* Probe: open log file to record control-flow and state for Rule 17.8 violation evidence */\n    FILE *log = fopen(\"/tmp/logs/165.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"OS_BSP_ConsoleOutput_Impl ENTRY: Str=%p, DataLen=%zu\\n\", (const void *)Str, DataLen);\n        fflush(log);\n    }\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        if (log)\n        {\n            fprintf(log, \"BEFORE write: Str=%p, DataLen=%zu\\n\", (const void *)Str, DataLen);\n            fflush(log);\n        }\n\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n\n        if (log)\n        {\n            fprintf(log, \"AFTER write: WriteLen=%zd\\n\", WriteLen);\n            fflush(log);\n        }\n\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            if (log)\n            {\n                fprintf(log, \"WRITE FAILED or ZERO: WriteLen=%zd, stopping. Current Str=%p, DataLen=%zu\\n\",\n                        WriteLen, (const void *)Str, DataLen);\n                fclose(log);\n            }\n            break;\n        }\n\n        /* Probe: record pointer before update */\n        if (log)\n        {\n            fprintf(log, \"POINTER_UPDATE: before Str=%p, increment=%zd\\n\", (const void *)Str, WriteLen);\n            fflush(log);\n        }\n\n        Str += WriteLen;\n        DataLen -= WriteLen;\n\n        /* Probe: record pointer after update and remaining length */\n        if (log)\n        {\n            fprintf(log, \"POINTER_UPDATE: after  Str=%p, remaining DataLen=%zu\\n\", (const void *)Str, DataLen);\n            fflush(log);\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_BSP_ConsoleOutput_Impl EXIT\\n\\n\");\n        fclose(log);\n    }\n}\n"
}