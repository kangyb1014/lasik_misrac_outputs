{
  "user_message": "An agent A claimed that the following OS_BSP_ConsoleOutput_Impl code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified..\n</misra_rule>\n<target_code>\nHere is the original code of OS_BSP_ConsoleOutput_Impl.\n```c\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The function parameter 'DataLen' (a value parameter) is modified by the statement 'DataLen -= WriteLen;'. MISRA C 2023 Rule 17.8 forbids modifying function parameters. This is a violation \u2014 the decrement should be applied to a local copy (e.g. 'size_t remaining = DataLen; remaining -= WriteLen;') rather than to the parameter itself.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_BSP_LogProbe(const char *label, const char *Str, size_t DataLen, ssize_t WriteLen)\n{\n    FILE *f = fopen(\"/tmp/logs/165.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* If logging cannot be performed, do not alter program flow. */\n        return;\n    }\n\n    if (WriteLen >= 0)\n    {\n        fprintf(f, \"%s: Str=%p, DataLen=%zu, WriteLen=%zd\\n\", label, (const void *)Str, DataLen, WriteLen);\n    }\n    else\n    {\n        /* Use -1 to indicate no write attempted yet */\n        int err = errno;\n        fprintf(f, \"%s: Str=%p, DataLen=%zu, WriteLen=%zd, errno=%d (%s)\\n\",\n                label, (const void *)Str, DataLen, WriteLen, err, strerror(err));\n    }\n\n    fclose(f);\n}\n\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    /* Log entry state */\n    OS_BSP_LogProbe(\"ENTRY\", Str, DataLen, -1);\n\n    while (DataLen > 0)\n    {\n        /* Log before attempting to write */\n        OS_BSP_LogProbe(\"BEFORE_WRITE\", Str, DataLen, -1);\n\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n\n        /* Log result of write */\n        OS_BSP_LogProbe(\"AFTER_WRITE\", Str, DataLen, WriteLen);\n\n        if (WriteLen <= 0)\n        {\n            /* Log failure and reason, then stop. */\n            OS_BSP_LogProbe(\"WRITE_FAILED\", Str, DataLen, WriteLen);\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n\n        /* Log state after consuming bytes */\n        OS_BSP_LogProbe(\"ITER_END\", Str, DataLen, WriteLen);\n    }\n\n    /* Log final state */\n    OS_BSP_LogProbe(\"EXIT\", Str, DataLen, -1);\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nENTRY: Str=0x55d97d838efb, DataLen=1, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nBEFORE_WRITE: Str=0x55d97d838efb, DataLen=1, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nAFTER_WRITE: Str=0x55d97d838efb, DataLen=1, WriteLen=1\nITER_END: Str=0x55d97d838efc, DataLen=0, WriteLen=1\nEXIT: Str=0x55d97d838efc, DataLen=0, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nENTRY: Str=0x7ffc6a40a990, DataLen=7, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nBEFORE_WRITE: Str=0x7ffc6a40a990, DataLen=7, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nAFTER_WRITE: Str=0x7ffc6a40a990, DataLen=7, WriteLen=7\nITER_END: Str=0x7ffc6a40a997, DataLen=0, WriteLen=7\nEXIT: Str=0x7ffc6a40a997, DataLen=0, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nENTRY: Str=0x55d97d838f03, DataLen=1, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nBEFORE_WRITE: Str=0x55d97d838f03, DataLen=1, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nAFTER_WRITE: Str=0x55d97d838f03, DataLen=1, WriteLen=1\nITER_END: Str=0x55d97d838f04, DataLen=0, WriteLen=1\nEXIT: Str=0x55d97d838f04, DataLen=0, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nENTRY: Str=0x55d97d838ee9, DataLen=9, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nBEFORE_WRITE: Str=0x55d97d838ee9, DataLen=9, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nAFTER_WRITE: Str=0x55d97d838ee9, DataLen=9, WriteLen=9\nITER_END: Str=0x55d97d838ef2, DataLen=0, WriteLen=9\nEXIT: Str=0x55d97d838ef2, DataLen=0, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nENTRY: Str=0x55d97d838efb, DataLen=1, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nBEFORE_WRITE: Str=0x55d97d838efb, DataLen=1, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nAFTER_WRITE: Str=0x55d97d838efb, DataLen=1, WriteLen=1\nITER_END: Str=0x55d97d838efc, DataLen=0, WriteLen=1\nEXIT: Str=0x55d97d838efc, DataLen=0, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nENTRY: Str=0x55d97d838efb, DataLen=1, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nBEFORE_WRITE: Str=0x55d97d838efb, DataLen=1, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nAFTER_WRITE: Str=0x55d97d838efb, DataLen=1, WriteLen=1\nITER_END: Str=0x55d97d838efc, DataLen=0, WriteLen=1\nEXIT: Str=0x55d97d838efc, DataLen=0, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nENTRY: Str=0x7ffc6a40a8d0, DataLen=7, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nBEFORE_WRITE: Str=0x7ffc6a40a8d0, DataLen=7, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nAFTER_WRITE: Str=0x7ffc6a40a8d0, DataLen=7, WriteLen=7\nITER_END: Str=0x7ffc6a40a8d7, DataLen=0, WriteLen=7\nEXIT: Str=0x7ffc6a40a8d7, DataLen=0, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nENTRY: Str=0x55d97d838f03, DataLen=1, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nBEFORE_WRITE: Str=0x55d97d838f03, DataLen=1, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nAFTER_WRITE: Str=0x55d97d838f03, DataLen=1, WriteLen=1\nITER_END: Str=0x55d97d838f04, DataLen=0, WriteLen=1\nEXIT: Str=0x55d97d838f04, DataLen=0, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nENTRY: Str=0x7ffc6a40a910, DataLen=8, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nBEFORE_WRITE: Str=0x7ffc6a40a910, DataLen=8, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nAFTER_WRITE: Str=0x7ffc6a40a910, DataLen=8, WriteLen=8\nITER_END: Str=0x7ffc6a40a918, DataLen=0, WriteLen=8\nEXIT: Str=0x7ffc6a40a918, DataLen=0, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nENTRY: Str=0x55d97d838efb, DataLen=1, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nBEFORE_WRITE: Str=0x55d97d838efb, DataLen=1, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nAFTER_WRITE: Str=0x55d97d838efb, DataLen=1, WriteLen=1\nITER_END: Str=0x55d97d838efc, DataLen=0, WriteLen=1\nEXIT: Str=0x55d97d838efc, DataLen=0, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nENTRY: Str=0x7ffc6a40a900, DataLen=7, WriteLen=-1, errno=25 (Inappropriate ioctl for device)\nBEFORE_WRITE: Str=0x7ffc6a40a900, DataLen=7, WriteLen=-1, errno=25 (Inappropriate i\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 prohibits modifying function parameters. In the shown implementation both parameters are modified: the value parameter DataLen is decremented (DataLen -= WriteLen) and the pointer parameter Str is advanced (Str += WriteLen). The provided log output demonstrates DataLen changing (e.g. initial DataLen>0 then ITER_END DataLen=0), confirming the modification. The correct remediation is to use local variables (for example size_t remaining = DataLen; const char *p = Str;) and update those locals instead of the formal parameters."
}