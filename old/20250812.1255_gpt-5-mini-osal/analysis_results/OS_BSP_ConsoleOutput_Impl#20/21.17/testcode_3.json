{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe code calls strlen(OutputMessage) to compute MsgLen and then passes OutputMessage and MsgLen to OS_BSP_ConsoleOutput_Impl. If OutputMessage is not a NUL\u2011terminated C string (or is NULL), strlen will read past the bounds of the object, causing an out\u2011of\u2011bounds access. For example, if OutputMessage points to a non\u2011terminated buffer or a pointer to memory without a terminating '\\0', strlen will overrun and thus violate Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ConsoleOutput_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/167.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_ConsoleOutput_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleOutput_Impl:\n```c\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_ConsoleOutput_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stddef.h>\n#include <sys/types.h>\n#include <unistd.h>\n#include <errno.h>\n\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n    int iter = 0;\n\n    /* Open log file (append). If it fails, continue without logging. */\n    FILE *log = fopen(\"/tmp/logs/167.txt\", \"a\");\n    if (log)\n    {\n        fprintf(log, \"OS_BSP_ConsoleOutput_Impl called: Str=%p DataLen=%zu\\n\", (void *)Str, DataLen);\n        fflush(log);\n    }\n\n    while (DataLen > 0)\n    {\n        /* Log attempt before the write (do not dereference Str to avoid any out-of-bounds reads) */\n        if (log)\n        {\n            fprintf(log, \"iter=%d: attempting write of %zu bytes from pointer %p\\n\", iter, DataLen, (void *)Str);\n            fflush(log);\n        }\n\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n\n        if (log)\n        {\n            fprintf(log, \"iter=%d: write returned %zd (errno=%d)\\n\", iter, WriteLen, errno);\n            fflush(log);\n        }\n\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            if (log)\n            {\n                fprintf(log, \"iter=%d: write failed or returned 0, breaking out of loop\\n\", iter);\n                fflush(log);\n            }\n            break;\n        }\n\n        Str += WriteLen;\n        DataLen -= WriteLen;\n        iter++;\n    }\n\n    if (log)\n    {\n        fprintf(log, \"OS_BSP_ConsoleOutput_Impl exit: iterations=%d, final Str=%p, final DataLen=%zu\\n\", iter, (void *)Str, DataLen);\n        fclose(log);\n    }\n}\n"
}