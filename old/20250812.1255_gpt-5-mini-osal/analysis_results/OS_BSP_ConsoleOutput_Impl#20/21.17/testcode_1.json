{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nstrlen(OutputMessage) is called without any guarantee that OutputMessage is a valid NUL-terminated buffer (or non-NULL). If a caller passes a pointer to a buffer that is not NUL-terminated (for example: char buf[5] = {'H','e','l','l','o'}; UT_BSP_DoText(..., buf)), strlen will scan past the buffer bounds searching for '\\0', causing an out-of-bounds access. Similarly, if OutputMessage is NULL, strlen dereferences it. Therefore Rule 21.17 is violated.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_ConsoleOutput_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/167.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_ConsoleOutput_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_ConsoleOutput_Impl:\n```c\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    while (DataLen > 0)\n    {\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_ConsoleOutput_Impl code.\n",
  "test_code": "#include <unistd.h>\n#include <fcntl.h>\n#include <stdio.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <stddef.h>\n\n/*\n * Probe/log helper: append a short textual record to /tmp/logs/167.txt.\n * This helper intentionally avoids dereferencing the Str pointer (no\n * attempt to read memory pointed to by Str) so as not to introduce any\n * new out-of-bounds accesses. It only logs the pointer value and sizes.\n */\nstatic void OS_BSP_Log_State(const char *label, const char *Str, size_t DataLen, ssize_t WriteLen)\n{\n    int fd;\n    char buf[256];\n    int n;\n\n    /* Open in append mode so multiple calls collect a timeline. */\n    fd = open(\"/tmp/logs/167.txt\", O_WRONLY | O_CREAT | O_APPEND, 0644);\n    if (fd < 0)\n    {\n        /* If logging fails, do not disturb main logic. */\n        return;\n    }\n\n    /* Log: label, pointer value, DataLen and last WriteLen. */\n    n = snprintf(buf, sizeof(buf), \"%s: Str=%p DataLen=%zu WriteLen=%zd\\n\",\n                 label, (const void *)Str, DataLen, WriteLen);\n    if (n > 0)\n    {\n        /* write can fail, but we ignore errors here to preserve behavior */\n        (void)write(fd, buf, (size_t)n);\n    }\n\n    (void)close(fd);\n}\n\nvoid OS_BSP_ConsoleOutput_Impl(const char *Str, size_t DataLen)\n{\n    ssize_t WriteLen;\n\n    /* Log entry with initial state. */\n    OS_BSP_Log_State(\"ENTRY\", Str, DataLen, (ssize_t)-1);\n\n    while (DataLen > 0)\n    {\n        /* Log just before attempting the write. */\n        OS_BSP_Log_State(\"BEFORE_WRITE\", Str, DataLen, (ssize_t)-1);\n\n        /* writes the raw data directly to STDOUT_FILENO (unbuffered) */\n        WriteLen = write(STDOUT_FILENO, Str, DataLen);\n\n        /* Log the result of write. */\n        OS_BSP_Log_State(\"AFTER_WRITE\", Str, DataLen, WriteLen);\n\n        if (WriteLen <= 0)\n        {\n            /* no recourse if this fails, just stop. */\n            OS_BSP_Log_State(\"WRITE_FAILED_OR_DONE\", Str, DataLen, WriteLen);\n            break;\n        }\n        Str += WriteLen;\n        DataLen -= WriteLen;\n\n        /* Log progress after advancing the pointer. */\n        OS_BSP_Log_State(\"PROGRESS\", Str, DataLen, WriteLen);\n    }\n\n    /* Log exit state. */\n    OS_BSP_Log_State(\"EXIT\", Str, DataLen, (ssize_t)0);\n}\n"
}