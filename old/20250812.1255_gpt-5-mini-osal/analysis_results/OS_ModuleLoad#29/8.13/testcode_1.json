{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts a const-qualified pointer (const char *name) to a plain void * via (void *)name when calling OS_ObjectIdFindNextMatch. This discards the const qualifier and allows the callee or callback (e.g. OS_ObjectNameMatch) to receive a non-const pointer and potentially modify the pointed-to data. This violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad code that contains useful probe functions that print useful logs to a file \"/tmp/logs/235.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad:\n```c\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n\n/* Probe logging helper - appends messages to /tmp/logs/235.txt. */\nstatic void OS_ModuleLoad_ProbeLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/235.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Do not disturb normal logic if logging fails. */\n    }\n\n    /* Timestamp each entry to help reconstruct control flow. */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    (void)gmtime_r(&t, &tm_buf);\n\n    char timebuf[64];\n    if (strftime(timebuf, sizeof(timebuf), \"%Y-%m-%dT%H:%M:%SZ\", &tm_buf) == 0)\n    {\n        timebuf[0] = '\\0';\n    }\n\n    fprintf(f, \"%s - \", timebuf);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /* Log entry and parameter state */\n    OS_ModuleLoad_ProbeLog(\"Entered OS_ModuleLoad: module_id=%p, module_name=%p, filename=%p, flags=0x%08X\",\n                           (void *)module_id,\n                           (const void *)module_name,\n                           (const void *)filename,\n                           (unsigned)flags);\n\n    if (module_name != NULL)\n    {\n        /* Print up to a reasonable length to avoid very long messages */\n        char namebuf[128];\n        (void)strncpy(namebuf, module_name, sizeof(namebuf) - 1);\n        namebuf[sizeof(namebuf) - 1] = '\\0';\n        OS_ModuleLoad_ProbeLog(\"Parameter module_name contents: '%s'\", namebuf);\n    }\n    else\n    {\n        OS_ModuleLoad_ProbeLog(\"Parameter module_name is NULL\");\n    }\n\n    if (filename != NULL)\n    {\n        char filebuf[128];\n        (void)strncpy(filebuf, filename, sizeof(filebuf) - 1);\n        filebuf[sizeof(filebuf) - 1] = '\\0';\n        OS_ModuleLoad_ProbeLog(\"Parameter filename contents: '%s'\", filebuf);\n    }\n    else\n    {\n        OS_ModuleLoad_ProbeLog(\"Parameter filename is NULL\");\n    }\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    OS_ModuleLoad_ProbeLog(\"After OS_TranslatePath: filename_status=%d, translated_path='%s'\",\n                           (int)filename_status,\n                           (translated_path[0] != '\\0') ? translated_path : \"\");\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    OS_ModuleLoad_ProbeLog(\"Calling OS_ObjectIdAllocateNew with module_name pointer=%p\", (const void *)module_name);\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n    OS_ModuleLoad_ProbeLog(\"Returned from OS_ObjectIdAllocateNew: return_code=%d, token=0x%08X\", (int)return_code, (unsigned)token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        OS_ModuleLoad_ProbeLog(\"Module table entry initialized: module=%p, module->flags=0x%08X\",\n                               (void *)module,\n                               (unsigned)module->flags);\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        OS_ModuleLoad_ProbeLog(\"Returned from OS_ModuleLoad_Static: return_code=%d\", (int)return_code);\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n            OS_ModuleLoad_ProbeLog(\"Module marked as static: module->module_type=%d\", (int)module->module_type);\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n                OS_ModuleLoad_ProbeLog(\"Filename was not valid: filename_status=%d, setting return_code=%d\",\n                                       (int)filename_status, (int)return_code);\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->file_name[sizeof(module->file_name) - 1] = '\\0';\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                OS_ModuleLoad_ProbeLog(\"Stored module->file_name='%s', module->module_type=%d\", module->file_name, (int)module->module_type);\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                OS_ModuleLoad_ProbeLog(\"Calling OS_ModuleLoad_Impl with token=0x%08X, translated_path='%s'\", (unsigned)token, translated_path);\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n                OS_ModuleLoad_ProbeLog(\"Returned from OS_ModuleLoad_Impl: return_code=%d\", (int)return_code);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        OS_ModuleLoad_ProbeLog(\"Finalizing new object with return_code=%d\", (int)return_code);\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n        OS_ModuleLoad_ProbeLog(\"Returned from OS_ObjectIdFinalizeNew: final return_code=%d, module_id=%p\", (int)return_code, (void *)module_id);\n    }\n\n    OS_ModuleLoad_ProbeLog(\"Exiting OS_ModuleLoad with return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}