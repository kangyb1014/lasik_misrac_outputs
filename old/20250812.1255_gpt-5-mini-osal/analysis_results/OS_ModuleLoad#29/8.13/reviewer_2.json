{
  "user_message": "An agent A claimed that the following OS_ModuleLoad code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_ModuleLoad.\n```c\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The call casts a const char * (VirtualPath) to a non-const void *: (void *)VirtualPath. This discards the const qualifier and allows a non-const pointer to refer to data that should be const. If OS_ObjectIdGetBySearch/OS_FileSys_FindVirtMountPoint do not need to modify the string, the parameter should be const void * (or the search callback should accept const char *) instead of accepting/using a non-const void *.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_ModuleLoad_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/235.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    fprintf(f, \"\\n\");\n    va_end(args);\n\n    fclose(f);\n}\n\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /* Log entry and parameters */\n    OS_ModuleLoad_Log(\"ENTER OS_ModuleLoad: module_id=%p, module_name='%s', filename=%p, flags=0x%08x\",\n                      (void *)module_id,\n                      module_name ? module_name : \"(null)\",\n                      (void *)filename,\n                      (unsigned)flags);\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Log translation result and contents (if any) */\n    OS_ModuleLoad_Log(\"OS_TranslatePath returned %d; filename=%p, translated_path='%s'\",\n                      filename_status,\n                      (void *)filename,\n                      translated_path[0] ? translated_path : \"(empty)\");\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n    OS_ModuleLoad_Log(\"OS_ObjectIdAllocateNew returned %d; token=%p\", return_code, (void *)&token);\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n        OS_ModuleLoad_Log(\"Allocated module record at %p; initial flags=0x%08x\", (void *)module, (unsigned)module->flags);\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        OS_ModuleLoad_Log(\"OS_ModuleLoad_Static returned %d for module_name='%s'\", return_code, module_name ? module_name : \"(null)\");\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n            OS_ModuleLoad_Log(\"Module marked as STATIC; module=%p, module_type=%d\", (void *)module, (int)module->module_type);\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n                OS_ModuleLoad_Log(\"Filename status indicates error; aborting with return_code=%d\", return_code);\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->file_name[sizeof(module->file_name) - 1] = '\\0';\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                OS_ModuleLoad_Log(\"Prepared dynamic module: module=%p, file_name='%s', module_type=%d\", (void *)module, module->file_name, (int)module->module_type);\n\n                /* IMPORTANT: log the addresses and constness context to help detect any const-discarding paths\n                   This captures addresses so later analysis can correlate places where a const char* might\n                   be cast to a non-const void* in other code paths. */\n                OS_ModuleLoad_Log(\"About to call OS_ModuleLoad_Impl; token=%p, translated_path=%p ('%s'), original_filename=%p\",\n                                  (void *)&token,\n                                  (void *)translated_path,\n                                  translated_path[0] ? translated_path : \"(empty)\",\n                                  (void *)filename);\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n                OS_ModuleLoad_Log(\"OS_ModuleLoad_Impl returned %d\", return_code);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        OS_ModuleLoad_Log(\"Calling OS_ObjectIdFinalizeNew with return_code=%d, token=%p, module_id=%p\",\n                          return_code, (void *)&token, (void *)module_id);\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n        OS_ModuleLoad_Log(\"OS_ObjectIdFinalizeNew returned %d; final module_id=%p\", return_code, (void *)module_id);\n    }\n\n    OS_ModuleLoad_Log(\"EXIT OS_ModuleLoad with return_code=%d\", return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_ModuleLoad. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. The OS_ModuleLoad implementation shown does not discard a const qualifier: filename is declared const char * and is only passed to OS_TranslatePath (which presumably takes a const char *) and copied into a non-const char array (module->file_name) via strncpy. translated_path is a local char array (non-const) produced by the translation routine and passed to OS_ModuleLoad_Impl as a char * \u2014 no const is removed there. The scenario described by agent A (casting a const char * to a non-const void * via (void *)VirtualPath) would indeed violate MISRA C 2023 Rule 8.13 if it occurs, but that cast does not appear in the provided OS_ModuleLoad code. The additional test/log code does cast filename to (void *) purely for printing; that test-only cast discards const and would be the kind of construct flagged by Rule 8.13, but it is not part of the original OS_ModuleLoad. If a const-to-non-const cast exists elsewhere (e.g. in OS_ObjectIdGetBySearch or OS_FileSys_FindVirtMountPoint), then that other code should be reviewed and the API should be changed to accept const void * (or const char *) or the cast eliminated. In short: the reported violation is not present in the supplied OS_ModuleLoad code, so the report as applied to this function is incorrect."
}