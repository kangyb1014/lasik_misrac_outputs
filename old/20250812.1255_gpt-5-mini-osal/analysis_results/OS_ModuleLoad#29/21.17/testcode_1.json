{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nPotential buffer overflow because OS_TranslatePath(translated_path) is called without passing the destination buffer size. If OS_TranslatePath uses string.h functions such as strcpy/memcpy/strncpy/memmove/strlen internally (for example: strcpy(translated_path, filename) or memcpy(translated_path, src, strlen(src)+1)) and the translated path length >= OS_MAX_LOCAL_PATH_LEN, this will write beyond the bounds of translated_path (translated_path[] size = OS_MAX_LOCAL_PATH_LEN) and violate MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad code that contains useful probe functions that print useful logs to a file \"/tmp/logs/239.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad:\n```c\nint32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad code.\n",
  "test_code": "int32 OS_ModuleLoad(osal_id_t *module_id, const char *module_name, const char *filename, uint32 flags)\n{\n    char                         translated_path[OS_MAX_LOCAL_PATH_LEN];\n    int32                        return_code;\n    int32                        filename_status;\n    OS_object_token_t            token;\n    OS_module_internal_record_t *module;\n\n    /* Open probe log once for this call. Appending so multiple calls accumulate evidence. */\n    FILE *probe_log = fopen(\"/tmp/logs/239.txt\", \"a\");\n    if (probe_log)\n    {\n        /* Timestamp-like marker to separate runs (no time() call to avoid extra dependencies). */\n        fprintf(probe_log, \"--- OS_ModuleLoad ENTRY (module_name=%p, filename=%p, flags=%u)\\n\", (void *)module_name, (void *)filename, (unsigned)flags);\n        fflush(probe_log);\n    }\n\n    /*\n     * Check parameters\n     *\n     * Note \"filename\" is not checked, because in certain configurations it can be validly\n     * null.  filename is checked for NULL-ness by the OS_TranslatePath() later.\n     */\n    OS_CHECK_POINTER(module_id);\n    OS_CHECK_APINAME(module_name);\n\n    /*\n     * Preemptively translate the filename, and hold it in a temporary buffer.\n     *\n     * This should be done before allocating a new object ID because it also\n     * locks the global table, and this prevents double-locking.\n     *\n     * The status of this operation is stored separately, because it may or\n     * may not be relevant, depending on whether the static module table is enabled.\n     */\n    filename_status = OS_TranslatePath(filename, translated_path);\n\n    /* Probe: record filename_status and lengths */\n    if (probe_log)\n    {\n        /* compute a safe length for filename (bounded) */\n        size_t fname_len = 0u;\n        if (filename != NULL)\n        {\n            /* limit the scan to twice OS_MAX_LOCAL_PATH_LEN to detect overly long inputs without running off memory */\n            const size_t fname_limit = (size_t)OS_MAX_LOCAL_PATH_LEN * 2u;\n            while ((fname_len < fname_limit) && (filename[fname_len] != '\\0'))\n            {\n                ++fname_len;\n            }\n        }\n\n        /* compute a safe length for translated_path bounded by the actual buffer size */\n        size_t tlen = 0u;\n        while ((tlen < (size_t)OS_MAX_LOCAL_PATH_LEN) && (translated_path[tlen] != '\\0'))\n        {\n            ++tlen;\n        }\n\n        fprintf(probe_log, \"OS_TranslatePath returned %d\\n\", (int)filename_status);\n        fprintf(probe_log, \"  filename pointer=%p length(bounded)=%zu\\n\", (void *)filename, fname_len);\n        fprintf(probe_log, \"  translated_path pointer=%p length(bounded by OS_MAX_LOCAL_PATH_LEN=%d)=%zu\\n\",\n                (void *)translated_path, (int)OS_MAX_LOCAL_PATH_LEN, tlen);\n\n        if (tlen >= (size_t)OS_MAX_LOCAL_PATH_LEN)\n        {\n            fprintf(probe_log, \"  WARNING: translated_path length >= OS_MAX_LOCAL_PATH_LEN (possible overflow/truncation)\\n\");\n        }\n        else\n        {\n            /* Print a safe hex/printable preview of the translated path up to the bound */\n            fprintf(probe_log, \"  translated_path preview: '\");\n            for (size_t i = 0; i < tlen; ++i)\n            {\n                int c = (unsigned char)translated_path[i];\n                /* limit to printable ASCII for readability */\n                if ((c >= 32) && (c <= 126))\n                {\n                    fputc(c, probe_log);\n                }\n                else\n                {\n                    fprintf(probe_log, \"\\\\x%02X\", c & 0xFF);\n                }\n            }\n            fprintf(probe_log, \"'\\n\");\n        }\n        fflush(probe_log);\n    }\n\n    /* Note - the common ObjectIdAllocate routine will lock the object type and leave it locked. */\n    return_code = OS_ObjectIdAllocateNew(LOCAL_OBJID_TYPE, module_name, &token);\n    if (probe_log)\n    {\n        fprintf(probe_log, \"OS_ObjectIdAllocateNew returned %d\\n\", (int)return_code);\n        fflush(probe_log);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        module = OS_OBJECT_TABLE_GET(OS_module_table, token);\n\n        /* Reset the table entry and save the name */\n        OS_OBJECT_INIT(token, module, module_name, module_name);\n\n        module->flags = flags; /* save user-supplied flags */\n\n        /*\n         * Check the statically-linked module list.\n         * If a matching entry is found, this means its\n         * already effectively \"loaded\" through static linkage.\n         * Return success without any more action.\n         *\n         * If the OSAL_CONFIG_INCLUDE_STATIC_LOADER feature is disabled,\n         * then the list of static modules is empty and this always\n         * returns OS_ERR_NAME_NOT_FOUND.\n         */\n        return_code = OS_ModuleLoad_Static(module_name);\n        if (probe_log)\n        {\n            fprintf(probe_log, \"OS_ModuleLoad_Static returned %d\\n\", (int)return_code);\n            fflush(probe_log);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* mark this as a statically loaded module */\n            module->module_type = OS_MODULE_TYPE_STATIC;\n        }\n        else\n        {\n            /*\n             * If this is NOT a static module, then the module file must be loaded by normal\n             * means using the dynamic loader, if available.  This also means the filename\n             * must be valid, so this is when the \"filename_status\" is checked/enforced.\n             */\n            if (filename_status != OS_SUCCESS)\n            {\n                /* supplied filename was not valid */\n                return_code = filename_status;\n                if (probe_log)\n                {\n                    fprintf(probe_log, \"Filename invalid, setting return_code=%d\\n\", (int)return_code);\n                    fflush(probe_log);\n                }\n            }\n            else\n            {\n                /* supplied filename was valid, so store a copy for future reference */\n                /* Probe: log filename and destination sizes before strncpy */\n                if (probe_log)\n                {\n                    size_t fname_buf_sz = sizeof(module->file_name);\n                    size_t fname_len = 0u;\n                    if (filename != NULL)\n                    {\n                        const size_t fname_limit = (size_t)OS_MAX_LOCAL_PATH_LEN * 2u;\n                        while ((fname_len < fname_limit) && (filename[fname_len] != '\\0'))\n                        {\n                            ++fname_len;\n                        }\n                    }\n                    fprintf(probe_log, \"About to strncpy module->file_name: source_len(bounded)=%zu dest_size=%zu\\n\",\n                            fname_len, fname_buf_sz);\n                    fflush(probe_log);\n                }\n\n                strncpy(module->file_name, filename, sizeof(module->file_name) - 1);\n                module->module_type = OS_MODULE_TYPE_DYNAMIC;\n\n                /* Now call the OS-specific implementation.  This reads info from the module table. */\n                if (probe_log)\n                {\n                    /* Log that a dynamic load will be attempted and include translated_path bounded info again */\n                    size_t tlen = 0u;\n                    while ((tlen < (size_t)OS_MAX_LOCAL_PATH_LEN) && (translated_path[tlen] != '\\0'))\n                    {\n                        ++tlen;\n                    }\n                    fprintf(probe_log, \"Calling OS_ModuleLoad_Impl with translated_path length(bounded)=%zu\\n\", tlen);\n                    fflush(probe_log);\n                }\n\n                return_code = OS_ModuleLoad_Impl(&token, translated_path);\n                if (probe_log)\n                {\n                    fprintf(probe_log, \"OS_ModuleLoad_Impl returned %d\\n\", (int)return_code);\n                    fflush(probe_log);\n                }\n            }\n        }\n\n        /* Check result, finalize record, and unlock global table. */\n        if (probe_log)\n        {\n            fprintf(probe_log, \"About to finalize new object with return_code=%d\\n\", (int)return_code);\n            fflush(probe_log);\n        }\n        return_code = OS_ObjectIdFinalizeNew(return_code, &token, module_id);\n    }\n\n    if (probe_log)\n    {\n        fprintf(probe_log, \"OS_ModuleLoad EXIT with return_code=%d\\n\", (int)return_code);\n        fprintf(probe_log, \"--- END ENTRY ---\\n\\n\");\n        fclose(probe_log);\n    }\n\n    return return_code;\n}\n"
}