{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CountSemTimedWait_Impl:\n```c\nint32 OS_CountSemTimedWait_Impl(const OS_object_token_t *token, uint32 msecs)\n{\n    struct timespec                     ts;\n    int                                 result;\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    /*\n     ** Compute an absolute time for the delay\n     */\n    OS_Posix_CompAbsDelayTime(msecs, &ts);\n\n    if (sem_timedwait(&impl->id, &ts) == 0)\n    {\n        result = OS_SUCCESS;\n    }\n    else if (errno == ETIMEDOUT)\n    {\n        result = OS_SEM_TIMEOUT;\n    }\n    else\n    {\n        /* unspecified failure */\n        result = OS_SEM_FAILURE;\n    }\n\n    return result;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CountSemTimedWait_Impl:\nOS_impl_countsem_internal_record_t OS_impl_count_sem_table[OS_MAX_COUNT_SEMAPHORES]\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no code fragments that should be investigated under MISRA C 2023 Rule 8.13. Reasons per pointer usage in the function:\n\n- token parameter: declared as const OS_object_token_t *token \u2014 already const-qualified, so complies with the rule.\n- impl local pointer: declared as OS_impl_countsem_internal_record_t *impl and assigned from OS_OBJECT_TABLE_GET(...). This pointer must be non-const because the code uses &impl->id and calls sem_timedwait(&impl->id, &ts). sem_timedwait modifies the semaphore state via the sem_t * argument, so the pointed-to object must be non-const; making impl a pointer to const would prevent the required mutation and would be incorrect.\n- ts local variable: passed by address to OS_Posix_CompAbsDelayTime to be filled and then to sem_timedwait (which takes a const struct timespec *). ts cannot be declared const because it is written by OS_Posix_CompAbsDelayTime.\n- OS_impl_count_sem_table (global array): declared as a non-const array of records. Its elements contain the semaphore object modified by sem_timedwait, so the array must be non-const.\n- errno usage is an int lvalue (no pointer declared here) and does not implicate Rule 8.13.\n\nBecause each pointer in the function is either already const-qualified where appropriate or must be non-const due to required modifications, there are no fragments in this function that appear to violate Rule 8.13."
}