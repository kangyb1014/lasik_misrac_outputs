{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CountSemTimedWait_Impl:\n```c\nint32 OS_CountSemTimedWait_Impl(const OS_object_token_t *token, uint32 msecs)\n{\n    struct timespec                     ts;\n    int                                 result;\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    /*\n     ** Compute an absolute time for the delay\n     */\n    OS_Posix_CompAbsDelayTime(msecs, &ts);\n\n    if (sem_timedwait(&impl->id, &ts) == 0)\n    {\n        result = OS_SUCCESS;\n    }\n    else if (errno == ETIMEDOUT)\n    {\n        result = OS_SEM_TIMEOUT;\n    }\n    else\n    {\n        /* unspecified failure */\n        result = OS_SEM_FAILURE;\n    }\n\n    return result;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CountSemTimedWait_Impl:\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\nOS_impl_countsem_internal_record_t OS_impl_count_sem_table[OS_MAX_COUNT_SEMAPHORES]\n...\ntypedef struct\n{\n    sem_t id;\n} OS_impl_countsem_internal_record_t\n...\nstatic inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}\n...\nvoid OS_Posix_CompAbsDelayTime(uint32 msecs, struct timespec *tm)\n{\n    clock_gettime(CLOCK_REALTIME, tm);\n\n    /* add the delay to the current time */\n    tm->tv_sec += (time_t)(msecs / 1000);\n    /* convert residue ( msecs )  to nanoseconds */\n    tm->tv_nsec += (msecs % 1000) * 1000000L;\n\n    if (tm->tv_nsec >= 1000000000L)\n    {\n        tm->tv_nsec -= 1000000000L;\n        tm->tv_sec++;\n    }\n}\n...\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_SUCCESS (0)\n...\n#define OS_SEM_TIMEOUT (-7)\n...\n#define OS_SEM_FAILURE (-6)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])",
    "#define OS_SEM_TIMEOUT (-7)",
    "typedef struct\n{\n    sem_t id;\n} OS_impl_countsem_internal_record_t",
    "if (sem_timedwait(&impl->id, &ts) == 0)\n    {\n        result = OS_SUCCESS;\n    }\n    else if (errno == ETIMEDOUT)\n    {\n        result = OS_SEM_TIMEOUT;\n    }\n    else\n    {\n        /* unspecified failure */\n        result = OS_SEM_FAILURE;\n    }",
    "impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);",
    "OS_impl_countsem_internal_record_t OS_impl_count_sem_table[OS_MAX_COUNT_SEMAPHORES]",
    "void OS_Posix_CompAbsDelayTime(uint32 msecs, struct timespec *tm)\n{\n    clock_gettime(CLOCK_REALTIME, tm);\n\n    /* add the delay to the current time */\n    tm->tv_sec += (time_t)(msecs / 1000);\n    /* convert residue ( msecs )  to nanoseconds */\n    tm->tv_nsec += (msecs % 1000) * 1000000L;\n\n    if (tm->tv_nsec >= 1000000000L)\n    {\n        tm->tv_nsec -= 1000000000L;\n        tm->tv_sec++;\n    }\n}",
    "static inline osal_index_t OS_ObjectIndexFromToken(const OS_object_token_t *token)\n{\n    return token->obj_idx;\n}",
    "return result;",
    "OS_Posix_CompAbsDelayTime(msecs, &ts);",
    "#define OS_SEM_FAILURE (-6)"
  ],
  "explanation": "Fragments not listed above were not selected because they do not present an immediate concern for dead code under MISRA C 2023 Rule 2.2 given the provided context. Specifically:\n\n- Declarations of local variables (struct timespec ts; int result; OS_impl_countsem_internal_record_t *impl;) are necessary for function operation and are used (no evidence they are unused or redundant).\n\n- The typedef/definition of OS_object_token_t is not shown in full, but its use via OS_ObjectIndexFromToken is active; the inline function returns token->obj_idx and is used by the table lookup macro, so it is not dead.\n\n- The macro and functions that are invoked (OS_OBJECT_TABLE_GET, OS_Posix_CompAbsDelayTime, sem_timedwait) are referenced from the target function; their presence is required for correct behavior unless a full project analysis shows they are always no-ops \u2014 nothing in the provided snippets proves that.\n\n- The constants OS_SUCCESS, OS_SEM_TIMEOUT, and OS_SEM_FAILURE are used as return values; their definitions are necessary for meaning and are not dead by themselves.\n\n- The control flow in the sem_timedwait result handling (setting result based on return or errno) has observable behavioural effects (different return codes) and therefore is not dead unless it can be shown the code path(s) never occur at runtime \u2014 which cannot be concluded from the snippets alone.\n\nI selected the fragments above because they are the locations where (a) data is looked up from a global table via a macro that takes the address of a passed token expression, (b) an absolute time is computed immediately before a timed wait (which could be unnecessary in some usage scenarios), (c) the sem_timedwait result/errno branches determine return codes, and (d) the global table and related type/definitions exist \u2014 each of these should be inspected in the larger project context to determine whether any of the operations are actually redundant (i.e. executed but removable without changing program behaviour)."
}