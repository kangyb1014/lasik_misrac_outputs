{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call strcmp(StaticSym->Name, SymbolName) is made without checking SymbolName for NULL. If OS_SymbolLookup_Static is called with SymbolName == NULL, strcmp will dereference that NULL pointer (or otherwise read beyond the bounds of the object), causing undefined behavior. (Note: StaticSym->Name is checked for NULL earlier, but there is no check that either pointer actually points to a NUL-terminated string.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup_Static code that contains useful probe functions that print useful logs to a file \"/tmp/logs/87.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolLookup_Static as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup_Static:\n```c\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolLookup_Static code.\n",
  "test_code": "#include <stdio.h>\n\n/* Probe helper: append a simple trace line to /tmp/logs/87.txt\n * This helper intentionally does NOT dereference SymbolName or ModuleName\n * (it only prints their pointer values and NULL-status) to avoid introducing\n * new out-of-bounds/read violations. */\nstatic void OS_SymbolLookup_Static_log_probe(const char *stage, OS_static_symbol_record_t *StaticSym, const char *SymbolName, const char *ModuleName)\n{\n    FILE *f = fopen(\"/tmp/logs/87.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    /* Print the stage, pointer values and NULL flags. Do not dereference\n     * SymbolName, ModuleName, or StaticSym->Name/Module contents. */\n    fprintf(f, \"%s: StaticSym=%p, StaticSym->Name=%p, StaticSym->Module=%p, SymbolName=%p, ModuleName=%p, SymbolName_is_NULL=%d, ModuleName_is_NULL=%d\\n\",\n            stage,\n            (void *)StaticSym,\n            (void *)(StaticSym ? StaticSym->Name : NULL),\n            (void *)(StaticSym ? StaticSym->Module : NULL),\n            (void *)SymbolName,\n            (void *)ModuleName,\n            (int)(SymbolName == NULL),\n            (int)(ModuleName == NULL));\n\n    fclose(f);\n}\n\nint32 OS_SymbolLookup_Static(cpuaddr *SymbolAddress, const char *SymbolName, const char *ModuleName)\n{\n    int32                      return_code = OS_ERR_NOT_IMPLEMENTED;\n    OS_static_symbol_record_t *StaticSym   = OS_STATIC_SYMTABLE_SOURCE;\n\n    OS_SymbolLookup_Static_log_probe(\"enter\", StaticSym, SymbolName, ModuleName);\n\n    while (StaticSym != NULL)\n    {\n        if (StaticSym->Name == NULL)\n        {\n            /* end of list --\n             * Return \"OS_ERROR\" to indicate that an actual search was done\n             * with a not-found result, vs. not searching at all. */\n            return_code = OS_ERROR;\n            break;\n        }\n\n        /* Log immediately before the strcmp-based comparison so that a\n         * trace exists showing the pointer values (including if SymbolName\n         * is NULL) right before the unsafe call would occur. This log is\n         * diagnostic only and preserves the original control flow. */\n        OS_SymbolLookup_Static_log_probe(\"before_strcmp\", StaticSym, SymbolName, ModuleName);\n\n        if (strcmp(StaticSym->Name, SymbolName) == 0 &&\n            (ModuleName == NULL || strcmp(StaticSym->Module, ModuleName) == 0))\n        {\n            /* found matching symbol */\n            *SymbolAddress = (cpuaddr)StaticSym->Address;\n            return_code    = OS_SUCCESS;\n            break;\n        }\n\n        ++StaticSym;\n\n        OS_SymbolLookup_Static_log_probe(\"loop_next\", StaticSym, SymbolName, ModuleName);\n    }\n\n    OS_SymbolLookup_Static_log_probe(\"exit\", StaticSym, SymbolName, ModuleName);\n\n    return return_code;\n}\n"
}