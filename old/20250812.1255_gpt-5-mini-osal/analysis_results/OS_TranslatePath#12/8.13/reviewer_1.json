{
  "user_message": "An agent A claimed that the following OS_TranslatePath code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_TranslatePath.\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The pointer filesys is declared as a non-const OS_filesys_internal_record_t * but is only used for read-only access (filesys->flags, filesys->system_mountpt, filesys->virtual_mountpt) and never modified. According to MISRA C 2023 Rule 8.13 it should be const-qualified (const OS_filesys_internal_record_t *filesys). Assigning the non-const result of OS_OBJECT_TABLE_GET to a pointer-to-const is allowed, so making it const is feasible here.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_TranslatePath_Log(const char *label,\n                                 const char *VirtualPath,\n                                 char *LocalPath,\n                                 int32 return_code,\n                                 void *filesys_ptr,\n                                 size_t VirtPathLen,\n                                 size_t SysMountPointLen,\n                                 size_t VirtPathBegin,\n                                 const char *name_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/99.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    fprintf(f, \"OS_TranslatePath: %s\\n\", label);\n    fprintf(f, \"  VirtualPath=%p\\n\", (const void *)VirtualPath);\n    if (VirtualPath != NULL)\n    {\n        /* print a safe prefix of the virtual path */\n        fprintf(f, \"  VirtualPath[0..63]=\\\"\");\n        for (size_t i = 0; i < 64 && VirtualPath[i] != '\\0'; ++i)\n        {\n            int c = VirtualPath[i];\n            if (c >= 32 && c < 127)\n                fputc(c, f);\n            else\n                fprintf(f, \"\\\\x%02x\", (unsigned char)c);\n        }\n        fprintf(f, \"\\\"\\n\");\n    }\n\n    fprintf(f, \"  LocalPath_ptr=%p\\n\", (void *)LocalPath);\n    fprintf(f, \"  return_code=%ld\\n\", (long)return_code);\n    fprintf(f, \"  filesys_ptr=%p\\n\", filesys_ptr);\n    fprintf(f, \"  VirtPathLen=%zu SysMountPointLen=%zu VirtPathBegin=%zu\\n\", VirtPathLen, SysMountPointLen, VirtPathBegin);\n    fprintf(f, \"  name_ptr=%p\\n\", (const void *)name_ptr);\n\n    /* If we have a filesys pointer attempt to print some internal fields as raw memory\n     * without assuming null termination. This intentionally uses the pointer as read-only. */\n    if (filesys_ptr != NULL)\n    {\n        /* OS_filesys_internal_record_t structure layout is not re-declared here;\n         * but we know from usage that it contains fields 'flags', 'system_mountpt', and 'virtual_mountpt'.\n         * We will access them by casting to the known type where available in the translation unit.\n         * To avoid introducing additional declarations in this probe, we print the first 64 bytes\n         * of the struct as hex as a conservative read-only snapshot. */\n        unsigned char *p = (unsigned char *)filesys_ptr;\n        fprintf(f, \"  filesys_snapshot_hex=\\\"\");\n        for (size_t i = 0; i < 64; ++i)\n        {\n            fprintf(f, \"%02x\", (unsigned)p[i]);\n        }\n        fprintf(f, \"\\\"\\n\");\n    }\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /* Initial probe after parameter checks */\n    OS_TranslatePath_Log(\"post_param_check\", VirtualPath, LocalPath, -1, NULL, 0u, 0u, 0u, NULL);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        OS_TranslatePath_Log(\"path_too_long\", VirtualPath, LocalPath, OS_FS_ERR_PATH_TOO_LONG, NULL, VirtPathLen, 0u, 0u, NULL);\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        OS_TranslatePath_Log(\"no_slash_in_path\", VirtualPath, LocalPath, OS_FS_ERR_PATH_INVALID, NULL, VirtPathLen, 0u, 0u, name_ptr);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        OS_TranslatePath_Log(\"name_too_long\", VirtualPath, LocalPath, OS_FS_ERR_NAME_TOO_LONG, NULL, VirtPathLen, 0u, 0u, name_ptr);\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        OS_TranslatePath_Log(\"path_not_start_slash\", VirtualPath, LocalPath, OS_FS_ERR_PATH_INVALID, NULL, VirtPathLen, 0u, 0u, name_ptr);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    OS_TranslatePath_Log(\"object_search_complete\", VirtualPath, LocalPath, return_code, NULL, VirtPathLen, 0u, 0u, name_ptr);\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TranslatePath_Log(\"object_search_failed\", VirtualPath, LocalPath, OS_FS_ERR_PATH_INVALID, NULL, VirtPathLen, 0u, 0u, name_ptr);\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Log after obtaining filesys pointer. This is the key snapshot for the violation scenario. */\n        OS_TranslatePath_Log(\"filesys_retrieved\", VirtualPath, LocalPath, return_code, (void *)filesys, VirtPathLen, 0u, 0u, name_ptr);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n            /* Log lengths and a small safe snapshot of the mount points */\n            OS_TranslatePath_Log(\"mounted_system\", VirtualPath, LocalPath, return_code, (void *)filesys, VirtPathLen, SysMountPointLen, VirtPathBegin, name_ptr);\n\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            OS_TranslatePath_Log(\"incorrect_obj_state\", VirtualPath, LocalPath, OS_ERR_INCORRECT_OBJ_STATE, (void *)filesys, VirtPathLen, SysMountPointLen, VirtPathBegin, name_ptr);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        OS_TranslatePath_Log(\"after_release\", VirtualPath, LocalPath, return_code, (void *)filesys, VirtPathLen, SysMountPointLen, VirtPathBegin, name_ptr);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            OS_TranslatePath_Log(\"virt_len_lt_begin\", VirtualPath, LocalPath, OS_FS_ERR_PATH_INVALID, NULL, VirtPathLen, SysMountPointLen, VirtPathBegin, name_ptr);\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n\n                OS_TranslatePath_Log(\"assembled_local_path\", VirtualPath, LocalPath, return_code, NULL, VirtPathLen, SysMountPointLen, VirtPathBegin, name_ptr);\n            }\n            else\n            {\n                OS_TranslatePath_Log(\"final_path_too_long\", VirtualPath, LocalPath, OS_FS_ERR_PATH_TOO_LONG, NULL, VirtPathLen, SysMountPointLen, VirtPathBegin, name_ptr);\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    OS_TranslatePath_Log(\"final_return\", VirtualPath, LocalPath, return_code, NULL, VirtPathLen, SysMountPointLen, VirtPathBegin, name_ptr);\n\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_TranslatePath: post_param_check\n  VirtualPath=0x556c777952b8\n  VirtualPath[0..63]=\"/drive3/select_test.txt\"\n  LocalPath_ptr=0x7ffe6cf982f0\n  return_code=-1\n  filesys_ptr=(nil)\n  VirtPathLen=0 SysMountPointLen=0 VirtPathBegin=0\n  name_ptr=(nil)\n----\nOS_TranslatePath: object_search_complete\n  VirtualPath=0x556c777952b8\n  VirtualPath[0..63]=\"/drive3/select_test.txt\"\n  LocalPath_ptr=0x7ffe6cf982f0\n  return_code=-17\n  filesys_ptr=(nil)\n  VirtPathLen=23 SysMountPointLen=0 VirtPathBegin=0\n  name_ptr=0x556c777952c0\n----\nOS_TranslatePath: object_search_failed\n  VirtualPath=0x556c777952b8\n  VirtualPath[0..63]=\"/drive3/select_test.txt\"\n  LocalPath_ptr=0x7ffe6cf982f0\n  return_code=-108\n  filesys_ptr=(nil)\n  VirtPathLen=23 SysMountPointLen=0 VirtPathBegin=0\n  name_ptr=0x556c777952c0\n----\nOS_TranslatePath: final_return\n  VirtualPath=0x556c777952b8\n  VirtualPath[0..63]=\"/drive3/select_test.txt\"\n  LocalPath_ptr=0x7ffe6cf982f0\n  return_code=-108\n  filesys_ptr=(nil)\n  VirtPathLen=23 SysMountPointLen=0 VirtPathBegin=23\n  name_ptr=0x556c777952c0\n----\nOS_TranslatePath: post_param_check\n  VirtualPath=0x556c777952b8\n  VirtualPath[0..63]=\"/drive3/select_test.txt\"\n  LocalPath_ptr=0x7ffe6cf982f0\n  return_code=-1\n  filesys_ptr=(nil)\n  VirtPathLen=0 SysMountPointLen=0 VirtPathBegin=0\n  name_ptr=(nil)\n----\nOS_TranslatePath: object_search_complete\n  VirtualPath=0x556c777952b8\n  VirtualPath[0..63]=\"/drive3/select_test.txt\"\n  LocalPath_ptr=0x7ffe6cf982f0\n  return_code=-17\n  filesys_ptr=(nil)\n  VirtPathLen=23 SysMountPointLen=0 VirtPathBegin=0\n  name_ptr=0x556c777952c0\n----\nOS_TranslatePath: object_search_failed\n  VirtualPath=0x556c777952b8\n  VirtualPath[0..63]=\"/drive3/select_test.txt\"\n  LocalPath_ptr=0x7ffe6cf982f0\n  return_code=-108\n  filesys_ptr=(nil)\n  VirtPathLen=23 SysMountPointLen=0 VirtPathBegin=0\n  name_ptr=0x556c777952c0\n----\nOS_TranslatePath: final_return\n  VirtualPath=0x556c777952b8\n  VirtualPath[0..63]=\"/drive3/select_test.txt\"\n  LocalPath_ptr=0x7ffe6cf982f0\n  return_code=-108\n  filesys_ptr=(nil)\n  VirtPathLen=23 SysMountPointLen=0 VirtPathBegin=23\n  name_ptr=0x556c777952c0\n----\nOS_TranslatePath: post_param_check\n  VirtualPath=0x556c777952b8\n  VirtualPath[0..63]=\"/drive3/select_test.txt\"\n  LocalPath_ptr=0x7ffe6cf982f0\n  return_code=-1\n  filesys_ptr=(nil)\n  VirtPathLen=0 SysMountPointLen=0 VirtPathBegin=0\n  name_ptr=(nil)\n----\nOS_TranslatePath: object_search_complete\n  VirtualPath=0x556c777952b8\n  VirtualPath[0..63]=\"/drive3/select_test.txt\"\n  LocalPath_ptr=0x7ffe6cf982f0\n  return_code=-17\n  filesys_ptr=(nil)\n  VirtPathLen=23 SysMountPointLen=0 VirtPathBegin=0\n  name_ptr=0x556c777952c0\n----\nOS_TranslatePath: object_search_failed\n  VirtualPath=0x556c777952b8\n  VirtualPath[0..63]=\"/drive3/select_test.txt\"\n  LocalPath_ptr=0x7ffe6cf982f0\n  return_code=-108\n  filesys_ptr=(nil)\n  VirtPathLen=23 SysMountPointLen=0 VirtPathBegin=0\n  name_ptr=0x556c777952c0\n----\nOS_TranslatePath: final_return\n  VirtualPath=0x556c777952b8\n  VirtualPath[0..63]=\"/drive3/select_test.txt\"\n  LocalPath_ptr=0x7ffe6cf982f0\n  return_code=-108\n  filesys_ptr=(nil)\n  VirtPathLen=23 SysMountPointLen=0 VirtPathBegin=23\n  name_ptr=0x556c777952c0\n----\nOS_TranslatePath: post_param_check\n  VirtualPath=0x556c777952b8\n  VirtualPath[0..63]=\"/drive3/select_test.txt\"\n  LocalPath_ptr=0x7ffe6cf982f0\n  return_code=-1\n  filesys_ptr=(nil)\n  VirtPathLen=0 SysMountPointLen=0 VirtPathBegin=0\n  name_ptr=(nil)\n----\nOS_TranslatePath: object_search_complete\n  VirtualPath=0x556c777952b8\n  VirtualPath[0..63]=\"/drive3/select_test.txt\"\n  LocalPath_ptr=0x7ffe6cf982f0\n  return_code=-17\n  filesys_ptr=(nil)\n  VirtPathLen=23 SysMountPointLen=0 VirtPathBegin=0\n  name_ptr=0x556c777952c0\n----\nOS_TranslatePath: object_search_failed\n  VirtualPath=0x556c777952b8\n  VirtualPath[0..63]=\"/drive3/select_test.txt\"\n  LocalPath_ptr=0x7ffe6cf982f0\n  return_code=-108\n  filesys_ptr=(nil)\n  VirtPathLen=23 SysMountPointLen=0 VirtPathBegin=0\n  name_ptr=0x556c777952c0\n----\nOS_TranslatePath: final_return\n  VirtualPath=0x556c777952b8\n  VirtualPath[0..63]=\"/drive3/select_test.txt\"\n  LocalPath_ptr=0x7ffe6cf982f0\n  return_code=-108\n\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The local variable filesys is declared as a non-const OS_filesys_internal_record_t * but is only used for read-only accesses (filesys->flags, filesys->system_mountpt, filesys->virtual_mountpt) and never used to modify the pointed-to object. Per MISRA C 2023 Rule 8.13 the pointer should be const-qualified (const OS_filesys_internal_record_t *filesys) when possible. Assigning the non-const result of OS_OBJECT_TABLE_GET to a pointer-to-const is permitted, so making filesys a pointer-to-const is feasible. The test logs showing filesys_ptr=(nil) for these runs do not change the static-code issue: the code as written uses a non-const pointer where a const-qualified pointer should be used, and thus violates Rule 8.13."
}