{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe code casts the parameter 'VirtualPath' (declared as 'const char *') to 'void *' when calling OS_ObjectIdGetBySearch: (void *)VirtualPath. This discards the const qualifier and therefore breaks const-correctness. Under MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible; the called function should instead accept a 'const void *' (or 'const char *'), and casting away const like this is a violation.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TranslatePath code that contains useful probe functions that print useful logs to a file \"/tmp/logs/99.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TranslatePath as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TranslatePath:\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TranslatePath code.\n",
  "test_code": "int32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /* Simple logging helper - append textual state to the logfile.  */\n    {\n        FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TranslatePath ENTER: VirtualPath=%p LocalPath=%p\\n\", (const void *)VirtualPath, (const void *)LocalPath);\n            fclose(log);\n        }\n    }\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"Computed VirtPathLen=%zu\\n\", VirtPathLen);\n            fclose(log);\n        }\n    }\n\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"RETURN (path too long): VirtPathLen=%zu >= OS_MAX_PATH_LEN=%d\\n\", VirtPathLen, OS_MAX_PATH_LEN);\n            fclose(log);\n        }\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n\n    {\n        FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"strrchr returned name_ptr=%p\\n\", (const void *)name_ptr);\n            if (name_ptr != NULL)\n            {\n                /* print the tail of the virtual path starting at name_ptr */\n                fprintf(log, \"name_ptr string=\\\"%s\\\"\\n\", name_ptr);\n            }\n            fclose(log);\n        }\n    }\n\n    if (name_ptr == NULL)\n    {\n        FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"RETURN (no '/'): name_ptr==NULL\\n\");\n            fclose(log);\n        }\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"RETURN (name too long): no NUL within OS_MAX_FILE_NAME at name_ptr=%p\\n\", (const void *)name_ptr);\n            fclose(log);\n        }\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"RETURN (invalid start): VirtualPath[0] != '/' (first char=0x%02x)\\n\", (unsigned char)VirtualPath[0]);\n            fclose(log);\n        }\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    /*\n     * NOTE (logging): This call casts away const-qualifier of VirtualPath by passing (void *)VirtualPath.\n     * The cast is what the external agent reported as a potential MISRA Rule 8.13 violation.  Log the\n     * pointer value and the fact that the cast will be performed so it can be observed in the logs.\n     */\n    {\n        FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"About to call OS_ObjectIdGetBySearch with (void *)VirtualPath -> %p (cast from const char*)\\n\", (const void *)VirtualPath);\n            fclose(log);\n        }\n    }\n\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    {\n        FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_ObjectIdGetBySearch returned %d\\n\", return_code);\n            fclose(log);\n        }\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n\n        FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"RETURN (object id search failed) -> mapped return_code=%d\\n\", return_code);\n            fclose(log);\n        }\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Found filesys record at %p flags=0x%08x system_mountpt=\\\"%s\\\" virtual_mountpt=\\\"%s\\\"\\n\",\n                        (void *)filesys, (unsigned int)filesys->flags, filesys->system_mountpt, filesys->virtual_mountpt);\n                fclose(log);\n            }\n        }\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n\n            {\n                FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"Mounted system: SysMountPointLen=%zu VirtPathBegin=%zu\\n\", SysMountPointLen, VirtPathBegin);\n                    fclose(log);\n                }\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n\n            FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"RETURN (incorrect obj state): flags=0x%08x mapped return_code=%d\\n\", (unsigned int)filesys->flags, return_code);\n                fclose(log);\n            }\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        {\n            FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"Released object id token\\n\");\n                fclose(log);\n            }\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n\n            FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n            if (log != NULL)\n            {\n                fprintf(log, \"RETURN (virt path shorter than mount point): VirtPathLen=%zu VirtPathBegin=%zu\\n\", VirtPathLen, VirtPathBegin);\n                fclose(log);\n            }\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n\n                FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"Successfully translated path. LocalPath (len=%zu) = \\\"%s\\\"\\n\", SysMountPointLen + VirtPathLen, LocalPath);\n                    fclose(log);\n                }\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n\n                FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n                if (log != NULL)\n                {\n                    fprintf(log, \"RETURN (local path too long): SysMountPointLen=%zu VirtPathLen=%zu total >= OS_MAX_LOCAL_PATH_LEN=%d\\n\",\n                            SysMountPointLen, VirtPathLen, OS_MAX_LOCAL_PATH_LEN);\n                    fclose(log);\n                }\n            }\n        }\n    }\n\n    {\n        FILE *log = fopen(\"/tmp/logs/99.txt\", \"a\");\n        if (log != NULL)\n        {\n            fprintf(log, \"OS_TranslatePath EXIT return_code=%d\\n\", return_code);\n            fclose(log);\n        }\n    }\n\n    return return_code;\n}\n"
}