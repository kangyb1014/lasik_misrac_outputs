{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer filesys is declared as a non-const OS_filesys_internal_record_t * but is only used for read-only access (filesys->flags, filesys->system_mountpt, filesys->virtual_mountpt) and never modified. According to MISRA C 2023 Rule 8.13 it should be const-qualified (const OS_filesys_internal_record_t *filesys). Assigning the non-const result of OS_OBJECT_TABLE_GET to a pointer-to-const is allowed, so making it const is feasible here.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TranslatePath code that contains useful probe functions that print useful logs to a file \"/tmp/logs/99.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TranslatePath as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TranslatePath:\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TranslatePath code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/* Probe logger for OS_TranslatePath -- writes to /tmp/logs/99.txt */\nstatic void OS_TranslatePath_Log(const char *label,\n                                 const char *VirtualPath,\n                                 char *LocalPath,\n                                 int32 return_code,\n                                 void *filesys_ptr,\n                                 size_t VirtPathLen,\n                                 size_t SysMountPointLen,\n                                 size_t VirtPathBegin,\n                                 const char *name_ptr)\n{\n    FILE *f = fopen(\"/tmp/logs/99.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    fprintf(f, \"OS_TranslatePath: %s\\n\", label);\n    fprintf(f, \"  VirtualPath=%p\\n\", (const void *)VirtualPath);\n    if (VirtualPath != NULL)\n    {\n        /* print a safe prefix of the virtual path */\n        fprintf(f, \"  VirtualPath[0..63]=\\\"\");\n        for (size_t i = 0; i < 64 && VirtualPath[i] != '\\0'; ++i)\n        {\n            int c = VirtualPath[i];\n            if (c >= 32 && c < 127)\n                fputc(c, f);\n            else\n                fprintf(f, \"\\\\x%02x\", (unsigned char)c);\n        }\n        fprintf(f, \"\\\"\\n\");\n    }\n\n    fprintf(f, \"  LocalPath_ptr=%p\\n\", (void *)LocalPath);\n    fprintf(f, \"  return_code=%ld\\n\", (long)return_code);\n    fprintf(f, \"  filesys_ptr=%p\\n\", filesys_ptr);\n    fprintf(f, \"  VirtPathLen=%zu SysMountPointLen=%zu VirtPathBegin=%zu\\n\", VirtPathLen, SysMountPointLen, VirtPathBegin);\n    fprintf(f, \"  name_ptr=%p\\n\", (const void *)name_ptr);\n\n    /* If we have a filesys pointer attempt to print some internal fields as raw memory\n     * without assuming null termination. This intentionally uses the pointer as read-only. */\n    if (filesys_ptr != NULL)\n    {\n        /* OS_filesys_internal_record_t structure layout is not re-declared here;\n         * but we know from usage that it contains fields 'flags', 'system_mountpt', and 'virtual_mountpt'.\n         * We will access them by casting to the known type where available in the translation unit.\n         * To avoid introducing additional declarations in this probe, we print the first 64 bytes\n         * of the struct as hex as a conservative read-only snapshot. */\n        unsigned char *p = (unsigned char *)filesys_ptr;\n        fprintf(f, \"  filesys_snapshot_hex=\\\"\");\n        for (size_t i = 0; i < 64; ++i)\n        {\n            fprintf(f, \"%02x\", (unsigned)p[i]);\n        }\n        fprintf(f, \"\\\"\\n\");\n    }\n\n    fprintf(f, \"----\\n\");\n    fclose(f);\n}\n\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /* Initial probe after parameter checks */\n    OS_TranslatePath_Log(\"post_param_check\", VirtualPath, LocalPath, -1, NULL, 0u, 0u, 0u, NULL);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        OS_TranslatePath_Log(\"path_too_long\", VirtualPath, LocalPath, OS_FS_ERR_PATH_TOO_LONG, NULL, VirtPathLen, 0u, 0u, NULL);\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        OS_TranslatePath_Log(\"no_slash_in_path\", VirtualPath, LocalPath, OS_FS_ERR_PATH_INVALID, NULL, VirtPathLen, 0u, 0u, name_ptr);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        OS_TranslatePath_Log(\"name_too_long\", VirtualPath, LocalPath, OS_FS_ERR_NAME_TOO_LONG, NULL, VirtPathLen, 0u, 0u, name_ptr);\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        OS_TranslatePath_Log(\"path_not_start_slash\", VirtualPath, LocalPath, OS_FS_ERR_PATH_INVALID, NULL, VirtPathLen, 0u, 0u, name_ptr);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    OS_TranslatePath_Log(\"object_search_complete\", VirtualPath, LocalPath, return_code, NULL, VirtPathLen, 0u, 0u, name_ptr);\n\n    if (return_code != OS_SUCCESS)\n    {\n        OS_TranslatePath_Log(\"object_search_failed\", VirtualPath, LocalPath, OS_FS_ERR_PATH_INVALID, NULL, VirtPathLen, 0u, 0u, name_ptr);\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        /* Log after obtaining filesys pointer. This is the key snapshot for the violation scenario. */\n        OS_TranslatePath_Log(\"filesys_retrieved\", VirtualPath, LocalPath, return_code, (void *)filesys, VirtPathLen, 0u, 0u, name_ptr);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n            /* Log lengths and a small safe snapshot of the mount points */\n            OS_TranslatePath_Log(\"mounted_system\", VirtualPath, LocalPath, return_code, (void *)filesys, VirtPathLen, SysMountPointLen, VirtPathBegin, name_ptr);\n\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            OS_TranslatePath_Log(\"incorrect_obj_state\", VirtualPath, LocalPath, OS_ERR_INCORRECT_OBJ_STATE, (void *)filesys, VirtPathLen, SysMountPointLen, VirtPathBegin, name_ptr);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        OS_TranslatePath_Log(\"after_release\", VirtualPath, LocalPath, return_code, (void *)filesys, VirtPathLen, SysMountPointLen, VirtPathBegin, name_ptr);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            OS_TranslatePath_Log(\"virt_len_lt_begin\", VirtualPath, LocalPath, OS_FS_ERR_PATH_INVALID, NULL, VirtPathLen, SysMountPointLen, VirtPathBegin, name_ptr);\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n\n                OS_TranslatePath_Log(\"assembled_local_path\", VirtualPath, LocalPath, return_code, NULL, VirtPathLen, SysMountPointLen, VirtPathBegin, name_ptr);\n            }\n            else\n            {\n                OS_TranslatePath_Log(\"final_path_too_long\", VirtualPath, LocalPath, OS_FS_ERR_PATH_TOO_LONG, NULL, VirtPathLen, SysMountPointLen, VirtPathBegin, name_ptr);\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    OS_TranslatePath_Log(\"final_return\", VirtualPath, LocalPath, return_code, NULL, VirtPathLen, SysMountPointLen, VirtPathBegin, name_ptr);\n\n    return return_code;\n}\n"
}