{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nOS_TranslatePath calls OS_strnlen(VirtualPath, OS_MAX_PATH_LEN) where OS_strnlen uses memchr(s, 0, maxlen). If the caller supplies a VirtualPath that refers to an object whose actual storage size is smaller than OS_MAX_PATH_LEN and which does not contain a terminating '\\0' within that smaller storage, memchr may read past the end of the object (up to OS_MAX_PATH_LEN bytes) and thus access out-of-bounds memory. For example, if VirtualPath points to a 10-byte buffer (not NUL-terminated within those 10 bytes), the memchr in OS_strnlen will attempt to inspect up to OS_MAX_PATH_LEN bytes starting at VirtualPath, potentially reading beyond the 10-byte object.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TranslatePath code that contains useful probe functions that print useful logs to a file \"/tmp/logs/103.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TranslatePath as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TranslatePath:\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TranslatePath code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <time.h>\n\n/* Probe logging helper - appends human-readable logs to /tmp/logs/103.txt */\nstatic void os_translatepath_log(const char *fmt, ...)\n{\n    FILE *fp;\n    va_list ap;\n    /* Try to create the directory if it doesn't exist. Ignore errors. */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    fp = fopen(\"/tmp/logs/103.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp */\n    {\n        time_t t = time(NULL);\n        struct tm tm_buf;\n        if (t != (time_t)-1 && localtime_r(&t, &tm_buf) != NULL)\n        {\n            char timestr[64];\n            if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n            {\n                fprintf(fp, \"%s - \", timestr);\n            }\n        }\n    }\n\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    os_translatepath_log(\"Entered OS_TranslatePath(VirtualPath=%p, LocalPath=%p)\", (void *)VirtualPath, (void *)LocalPath);\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    os_translatepath_log(\"After pointer checks: VirtualPath=%p, LocalPath=%p\", (void *)VirtualPath, (void *)LocalPath);\n\n    /*\n    ** Check length\n    */\n    os_translatepath_log(\"Calling OS_strnlen(VirtualPath, OS_MAX_PATH_LEN=%zu)\", (size_t)OS_MAX_PATH_LEN);\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    os_translatepath_log(\"OS_strnlen returned VirtPathLen=%zu\", VirtPathLen);\n\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        os_translatepath_log(\"VirtPathLen (%zu) >= OS_MAX_PATH_LEN (%zu) => returning OS_FS_ERR_PATH_TOO_LONG\", VirtPathLen, (size_t)OS_MAX_PATH_LEN);\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to sees if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    os_translatepath_log(\"strrchr returned name_ptr=%p\", (void *)name_ptr);\n    if (name_ptr == NULL)\n    {\n        os_translatepath_log(\"No '/' found in VirtualPath => returning OS_FS_ERR_PATH_INVALID\");\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    os_translatepath_log(\"Advanced name_ptr to first char after '/': %p (offset %zu)\", (void *)name_ptr, (size_t)(name_ptr - VirtualPath));\n\n    os_translatepath_log(\"About to call memchr(name_ptr=%p, 0, OS_MAX_FILE_NAME=%zu)\", (void *)name_ptr, (size_t)OS_MAX_FILE_NAME);\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        os_translatepath_log(\"memchr did not find a terminal NUL within OS_MAX_FILE_NAME => returning OS_FS_ERR_NAME_TOO_LONG\");\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n    os_translatepath_log(\"memchr found terminal NUL within OS_MAX_FILE_NAME\");\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        os_translatepath_log(\"VirtualPath does not start with '/' (first byte=0x%02x) => returning OS_FS_ERR_PATH_INVALID\", (unsigned char)VirtualPath[0]);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    os_translatepath_log(\"Calling OS_ObjectIdGetBySearch with VirtualPath=%p\", (void *)VirtualPath);\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    os_translatepath_log(\"OS_ObjectIdGetBySearch returned %ld\", (long)return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        os_translatepath_log(\"OS_ObjectIdGetBySearch failed => returning OS_FS_ERR_PATH_INVALID\");\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            os_translatepath_log(\"Found mounted system: SysMountPointLen=%zu, VirtPathBegin=%zu\", SysMountPointLen, VirtPathBegin);\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                os_translatepath_log(\"About to memcpy(LocalPath[%p], system_mountpt[%p], %zu)\", (void *)LocalPath, (void *)filesys->system_mountpt, SysMountPointLen);\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n            else\n            {\n                os_translatepath_log(\"SysMountPointLen (%zu) >= OS_MAX_LOCAL_PATH_LEN (%zu) - not copying mount point\", SysMountPointLen, (size_t)OS_MAX_LOCAL_PATH_LEN);\n            }\n        }\n        else\n        {\n            os_translatepath_log(\"Filesystem is not in mounted system state => returning OS_ERR_INCORRECT_OBJ_STATE\");\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        os_translatepath_log(\"Continuing with path translation: VirtPathLen=%zu, VirtPathBegin=%zu, SysMountPointLen=%zu\", VirtPathLen, VirtPathBegin, SysMountPointLen);\n        if (VirtPathLen < VirtPathBegin)\n        {\n            os_translatepath_log(\"VirtPathLen (%zu) < VirtPathBegin (%zu) => returning OS_FS_ERR_PATH_INVALID\", VirtPathLen, VirtPathBegin);\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            os_translatepath_log(\"Adjusted VirtPathLen to %zu after subtracting VirtPathBegin\", VirtPathLen);\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                os_translatepath_log(\"About to memcpy(LocalPath + %zu, VirtualPath + %zu, %zu)\", SysMountPointLen, VirtPathBegin, VirtPathLen);\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n                os_translatepath_log(\"Path translation successful. LocalPath base=%p, total_len=%zu\", (void *)LocalPath, SysMountPointLen + VirtPathLen);\n            }\n            else\n            {\n                os_translatepath_log(\"(SysMountPointLen + VirtPathLen) (%zu) >= OS_MAX_LOCAL_PATH_LEN (%zu) => returning OS_FS_ERR_PATH_TOO_LONG\", SysMountPointLen + VirtPathLen, (size_t)OS_MAX_LOCAL_PATH_LEN);\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    os_translatepath_log(\"Exiting OS_TranslatePath with return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}