{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe check 'if (VirtPathLen < VirtPathBegin)' is unreachable. OS_ObjectIdGetBySearch only returns a matching filesys when OS_FileSys_FindVirtMountPoint succeeded; that function ensures the filesys->virtual_mountpt length (mplen) is a non-zero prefix of VirtualPath and therefore mplen (assigned to VirtPathBegin) is always <= the length of VirtualPath (VirtPathLen). Thus the condition VirtPathLen < VirtPathBegin can never be true and the branch body is unreachable.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_TranslatePath code that contains useful probe functions that print useful logs to a file \"/tmp/logs/97.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_TranslatePath as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_TranslatePath:\n```c\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to see if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    if (name_ptr == NULL)\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    if (return_code != OS_SUCCESS)\n    {\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n            }\n        }\n        else\n        {\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if (VirtPathLen < VirtPathBegin)\n        {\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n            }\n            else\n            {\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_TranslatePath code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n\n/*\n * Probe logging helper - writes formatted messages to /tmp/logs/97.txt\n * Implemented as a static function so it does not affect external linkage.\n */\nstatic void os_translate_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/97.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(f, fmt, args);\n    fprintf(f, \"\\n\");\n    va_end(args);\n\n    fclose(f);\n}\n\nint32 OS_TranslatePath(const char *VirtualPath, char *LocalPath)\n{\n    OS_object_token_t             token;\n    int32                         return_code;\n    const char *                  name_ptr;\n    OS_filesys_internal_record_t *filesys;\n    size_t                        SysMountPointLen;\n    size_t                        VirtPathLen;\n    size_t                        VirtPathBegin;\n\n    /*\n    ** Check to see if the path pointers are NULL\n    */\n    /* Check parameters */\n    OS_CHECK_POINTER(VirtualPath);\n    OS_CHECK_POINTER(LocalPath);\n\n    /*\n    ** Check length\n    */\n    VirtPathLen = OS_strnlen(VirtualPath, OS_MAX_PATH_LEN);\n    os_translate_log(\"OS_TranslatePath: Enter; VirtualPath='%s'; VirtPathLen=%zu\", VirtualPath, VirtPathLen);\n\n    if (VirtPathLen >= OS_MAX_PATH_LEN)\n    {\n        os_translate_log(\"OS_TranslatePath: Path too long (len=%zu)\", VirtPathLen);\n        return OS_FS_ERR_PATH_TOO_LONG;\n    }\n\n    /* checks to sees if there is a '/' somewhere in the path */\n    name_ptr = strrchr(VirtualPath, '/');\n    os_translate_log(\"OS_TranslatePath: strrchr result name_ptr=%p\", (void *)name_ptr);\n    if (name_ptr == NULL)\n    {\n        os_translate_log(\"OS_TranslatePath: No '/' found in VirtualPath\");\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* strrchr returns a pointer to the last '/' char, so we advance one char */\n    name_ptr = name_ptr + 1;\n    os_translate_log(\"OS_TranslatePath: filename part starts at offset=%ld\", (long)(name_ptr - VirtualPath));\n    if (memchr(name_ptr, 0, OS_MAX_FILE_NAME) == NULL)\n    {\n        os_translate_log(\"OS_TranslatePath: File name too long (no NUL within %d bytes)\", OS_MAX_FILE_NAME);\n        return OS_FS_ERR_NAME_TOO_LONG;\n    }\n\n    SysMountPointLen = 0;\n    VirtPathBegin    = VirtPathLen;\n\n    /*\n    ** All valid Virtual paths must start with a '/' character\n    */\n    if (VirtualPath[0] != '/')\n    {\n        os_translate_log(\"OS_TranslatePath: VirtualPath does not start with '/': first_char='%c'\", VirtualPath[0]);\n        return OS_FS_ERR_PATH_INVALID;\n    }\n\n    /* Get a reference lock, as a filesystem check could take some time. */\n    os_translate_log(\"OS_TranslatePath: Calling OS_ObjectIdGetBySearch for VirtualPath='%s'\", VirtualPath);\n    return_code = OS_ObjectIdGetBySearch(OS_LOCK_MODE_GLOBAL, LOCAL_OBJID_TYPE, OS_FileSys_FindVirtMountPoint,\n                                         (void *)VirtualPath, &token);\n\n    os_translate_log(\"OS_TranslatePath: OS_ObjectIdGetBySearch returned %ld\", (long)return_code);\n\n    if (return_code != OS_SUCCESS)\n    {\n        os_translate_log(\"OS_TranslatePath: No matching filesystem: returning OS_FS_ERR_PATH_INVALID\");\n        return_code = OS_FS_ERR_PATH_INVALID;\n    }\n    else\n    {\n        filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, token);\n        os_translate_log(\"OS_TranslatePath: Got filesys pointer=%p\", (void *)filesys);\n\n        if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_SYSTEM) != 0)\n        {\n            SysMountPointLen = OS_strnlen(filesys->system_mountpt, sizeof(filesys->system_mountpt));\n            VirtPathBegin    = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n            os_translate_log(\"OS_TranslatePath: filesys->flags=0x%08lx, system_mountpt='%s', virtual_mountpt='%s'\", (unsigned long)filesys->flags, filesys->system_mountpt, filesys->virtual_mountpt);\n            os_translate_log(\"OS_TranslatePath: SysMountPointLen=%zu, VirtPathBegin=%zu\", SysMountPointLen, VirtPathBegin);\n            if (SysMountPointLen < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(LocalPath, filesys->system_mountpt, SysMountPointLen);\n                os_translate_log(\"OS_TranslatePath: Copied system_mountpt into LocalPath (len=%zu)\", SysMountPointLen);\n            }\n            else\n            {\n                os_translate_log(\"OS_TranslatePath: SysMountPointLen >= OS_MAX_LOCAL_PATH_LEN (%d)\", OS_MAX_LOCAL_PATH_LEN);\n            }\n        }\n        else\n        {\n            os_translate_log(\"OS_TranslatePath: Filesystem not mounted system: flags=0x%08lx\", (unsigned long)filesys->flags);\n            return_code = OS_ERR_INCORRECT_OBJ_STATE;\n        }\n\n        OS_ObjectIdRelease(&token);\n        os_translate_log(\"OS_TranslatePath: Released object token\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        os_translate_log(\"OS_TranslatePath: Before final length checks: VirtPathLen=%zu, VirtPathBegin=%zu, SysMountPointLen=%zu\", VirtPathLen, VirtPathBegin, SysMountPointLen);\n\n        if (VirtPathLen < VirtPathBegin)\n        {\n            os_translate_log(\"OS_TranslatePath: Branch taken: VirtPathLen < VirtPathBegin (VirtPathLen=%zu, VirtPathBegin=%zu) => returning OS_FS_ERR_PATH_INVALID\", VirtPathLen, VirtPathBegin);\n            return_code = OS_FS_ERR_PATH_INVALID;\n        }\n        else\n        {\n            VirtPathLen -= VirtPathBegin;\n            os_translate_log(\"OS_TranslatePath: After subtracting VirtPathBegin, remaining VirtPathLen=%zu\", VirtPathLen);\n            if ((SysMountPointLen + VirtPathLen) < OS_MAX_LOCAL_PATH_LEN)\n            {\n                memcpy(&LocalPath[SysMountPointLen], &VirtualPath[VirtPathBegin], VirtPathLen);\n                LocalPath[SysMountPointLen + VirtPathLen] = 0;\n                os_translate_log(\"OS_TranslatePath: Constructed LocalPath='%s'\", LocalPath);\n            }\n            else\n            {\n                os_translate_log(\"OS_TranslatePath: Resulting local path too long (SysMountPointLen=%zu, VirtPathLen=%zu)\", SysMountPointLen, VirtPathLen);\n                return_code = OS_FS_ERR_PATH_TOO_LONG;\n            }\n        }\n    }\n\n    os_translate_log(\"OS_TranslatePath: Exit with return_code=%ld\", (long)return_code);\n    return return_code;\n}\n"
}