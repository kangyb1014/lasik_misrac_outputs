{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.1.\nHere is the comment from the agent.\n<violation scenario>\nThe branch selection depends on console->IsAsync, which is initialized once from the compile-time macro OS_CONSOLE_IS_ASYNC and never subsequently modified in the shown code. For a given build where OS_CONSOLE_IS_ASYNC is fixed to true (1) the else branch (OS_ConsoleOutput_Impl) can never be reached; conversely, if OS_CONSOLE_IS_ASYNC is fixed to false (0) the if branch (OS_ConsoleWakeup_Impl) can never be reached. In that project configuration the unreachable branch constitutes unreachable code, violating MISRA C 2023 Rule 2.1.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ConsoleWrite code that contains useful probe functions that print useful logs to a file \"/tmp/logs/257.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ConsoleWrite as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleWrite:\n```c\nint32 OS_ConsoleWrite(osal_id_t console_id, const char *Str)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_console_internal_record_t *console;\n    size_t                        PendingWritePos;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONSOLE, console_id, &token);\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /*\n         * The entire string should be put to the ring buffer,\n         * or none of it.  Therefore the WritePos in the table\n         * is not updated until complete success.\n         */\n        PendingWritePos = console->WritePos;\n\n        if (console->device_name[0] != 0)\n        {\n            return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos);\n        }\n        if (return_code == OS_SUCCESS)\n        {\n            return_code = OS_Console_CopyOut(console, Str, &PendingWritePos);\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* the entire message was successfully written */\n            console->WritePos = PendingWritePos;\n        }\n        else\n        {\n            /* the message did not fit */\n            ++console->OverflowEvents;\n        }\n\n        /*\n         * Notify the underlying console implementation of new data.\n         * This will forward the data to the actual console device.\n         *\n         * This is done while still locked, so it can support\n         * either a synchronous or asynchronous implementation.\n         */\n        if (console->IsAsync)\n        {\n            /* post the sem for the utility task to run */\n            OS_ConsoleWakeup_Impl(&token);\n        }\n        else\n        {\n            /* output directly */\n            OS_ConsoleOutput_Impl(&token);\n        }\n\n        OS_ObjectIdRelease(&token);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_ConsoleWrite code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\n/*\n * Inserted lightweight logging probes for reproducing the unreachable-branch scenario.\n * Appends human-readable records to /tmp/logs/257.txt. The logging is non-intrusive\n * and preserves the original control flow and side-effects of OS_ConsoleWrite.\n */\nstatic void OS_ConsoleWrite_LogEntry(const char *msg)\n{\n    FILE *f = fopen(\"/tmp/logs/257.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f, \"%s\\n\", msg);\n        fclose(f);\n    }\n}\n\nint32 OS_ConsoleWrite(osal_id_t console_id, const char *Str)\n{\n    int32                         return_code;\n    OS_object_token_t             token;\n    OS_console_internal_record_t *console;\n    size_t                        PendingWritePos;\n\n    return_code = OS_ObjectIdGetById(OS_LOCK_MODE_GLOBAL, OS_OBJECT_TYPE_OS_CONSOLE, console_id, &token);\n\n    {\n        /* Log initial result of id lookup */\n        char buf[256];\n        (void)snprintf(buf, sizeof(buf), \"OS_ConsoleWrite: console_id=%llu OS_ObjectIdGetById_return=%ld Str_present=%s\",\n                       (unsigned long long)console_id,\n                       (long)return_code,\n                       (Str != NULL) ? \"yes\" : \"no\");\n        OS_ConsoleWrite_LogEntry(buf);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        console = OS_OBJECT_TABLE_GET(OS_console_table, token);\n\n        /*\n         * The entire string should be put to the ring buffer,\n         * or none of it.  Therefore the WritePos in the table\n         * is not updated until complete success.\n         */\n        PendingWritePos = console->WritePos;\n\n        {\n            /* Log console runtime state before copy-outs */\n            char buf[512];\n            (void)snprintf(buf, sizeof(buf),\n                           \"OS_ConsoleWrite: console_ptr=%p device_name='%s' WritePos=%zu PendingWritePos(start)=%zu IsAsync=%d OverflowEvents=%u\",\n                           (void *)console,\n                           (console != NULL && console->device_name != NULL) ? console->device_name : \"(null)\",\n                           PendingWritePos,\n                           PendingWritePos,\n                           (int)console->IsAsync,\n                           (unsigned)console->OverflowEvents);\n            OS_ConsoleWrite_LogEntry(buf);\n        }\n\n        if (console->device_name[0] != 0)\n        {\n            return_code = OS_Console_CopyOut(console, console->device_name, &PendingWritePos);\n\n            {\n                char buf[256];\n                (void)snprintf(buf, sizeof(buf), \"OS_ConsoleWrite: CopyOut device_name returned=%ld PendingWritePos=%zu\",\n                               (long)return_code,\n                               PendingWritePos);\n                OS_ConsoleWrite_LogEntry(buf);\n            }\n        }\n        if (return_code == OS_SUCCESS)\n        {\n            return_code = OS_Console_CopyOut(console, Str, &PendingWritePos);\n\n            {\n                char buf[256];\n                (void)snprintf(buf, sizeof(buf), \"OS_ConsoleWrite: CopyOut Str returned=%ld PendingWritePos=%zu\",\n                               (long)return_code,\n                               PendingWritePos);\n                OS_ConsoleWrite_LogEntry(buf);\n            }\n        }\n\n        if (return_code == OS_SUCCESS)\n        {\n            /* the entire message was successfully written */\n            console->WritePos = PendingWritePos;\n\n            {\n                char buf[256];\n                (void)snprintf(buf, sizeof(buf), \"OS_ConsoleWrite: message written, new WritePos=%zu\",\n                               console->WritePos);\n                OS_ConsoleWrite_LogEntry(buf);\n            }\n        }\n        else\n        {\n            /* the message did not fit */\n            ++console->OverflowEvents;\n\n            {\n                char buf[256];\n                (void)snprintf(buf, sizeof(buf), \"OS_ConsoleWrite: message did not fit, OverflowEvents=%u\",\n                               (unsigned)console->OverflowEvents);\n                OS_ConsoleWrite_LogEntry(buf);\n            }\n        }\n\n        /*\n         * Notify the underlying console implementation of new data.\n         * This will forward the data to the actual console device.\n         *\n         * This is done while still locked, so it can support\n         * either a synchronous or asynchronous implementation.\n         */\n        if (console->IsAsync)\n        {\n            /* post the sem for the utility task to run */\n            {\n                char buf[256];\n                (void)snprintf(buf, sizeof(buf), \"OS_ConsoleWrite: IsAsync=1 -> calling OS_ConsoleWakeup_Impl (token=%p)\\n\",\n                               (void *)&token);\n                OS_ConsoleWrite_LogEntry(buf);\n            }\n\n            OS_ConsoleWakeup_Impl(&token);\n\n            OS_ConsoleWrite_LogEntry(\"OS_ConsoleWrite: OS_ConsoleWakeup_Impl invoked\");\n        }\n        else\n        {\n            /* output directly */\n            {\n                char buf[256];\n                (void)snprintf(buf, sizeof(buf), \"OS_ConsoleWrite: IsAsync=0 -> calling OS_ConsoleOutput_Impl (token=%p)\\n\",\n                               (void *)&token);\n                OS_ConsoleWrite_LogEntry(buf);\n            }\n\n            OS_ConsoleOutput_Impl(&token);\n\n            OS_ConsoleWrite_LogEntry(\"OS_ConsoleWrite: OS_ConsoleOutput_Impl invoked\");\n        }\n\n        OS_ObjectIdRelease(&token);\n\n        {\n            char buf[256];\n            (void)snprintf(buf, sizeof(buf), \"OS_ConsoleWrite: exit console_ptr=%p final WritePos=%zu OverflowEvents=%u return_code=%ld\",\n                           (void *)console,\n                           console->WritePos,\n                           (unsigned)console->OverflowEvents,\n                           (long)return_code);\n            OS_ConsoleWrite_LogEntry(buf);\n        }\n    }\n\n    return return_code;\n}\n"
}