{
  "user_message": "An agent A claimed that the following OS_SocketAddrGetPort_Impl code violates the MISRA C 2023 rule 2.1.\n<misra_rule>\nMISRA C 2023 Rule 2.1 is A project shall not contain unreachable code.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_SocketAddrGetPort_Impl.\n```c\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            break;\n#endif\n        default:\n            return OS_ERR_BAD_ADDRESS;\n            break;\n    }\n\n    *PortNum = ntohs(sa_port);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In the default label the code contains 'return OS_ERR_BAD_ADDRESS;' followed by 'break;'. The 'break' is unreachable because control has already returned from the function, so the 'break' statement can never be executed. This constitutes unreachable code and violates MISRA C 2023 Rule 2.1. (Fix: remove the unreachable 'break'.)\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void os_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/113.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    fprintf(f, \"\\n\");\n    va_end(ap);\n\n    fclose(f);\n}\n\nint32 OS_SocketAddrGetPort_Impl(uint16 *PortNum, const OS_SockAddr_t *Addr)\n{\n    in_port_t                     sa_port;\n    const OS_SockAddr_Accessor_t *Accessor;\n\n    os_probe_log(\"OS_SocketAddrGetPort_Impl: entry Addr=%p PortNum=%p\", (const void *)Addr, (const void *)PortNum);\n\n    Accessor = (const OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    os_probe_log(\"OS_SocketAddrGetPort_Impl: sa_family=%d\", Accessor->sa.sa_family);\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            sa_port = Accessor->sa_in.sin_port;\n            os_probe_log(\"OS_SocketAddrGetPort_Impl: case AF_INET sa_in.sin_port=0x%04x\", (unsigned)sa_port);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            sa_port = Accessor->sa_in6.sin6_port;\n            os_probe_log(\"OS_SocketAddrGetPort_Impl: case AF_INET6 sa_in6.sin6_port=0x%04x\", (unsigned)sa_port);\n            break;\n#endif\n        default:\n            /* Log the invalid family and that we're returning the error. */\n            os_probe_log(\"OS_SocketAddrGetPort_Impl: default - invalid family %d; returning OS_ERR_BAD_ADDRESS. Note: the following 'break' statement (as in original code) is unreachable.\", Accessor->sa.sa_family);\n            return OS_ERR_BAD_ADDRESS;\n            break; /* This break is unreachable because of the return above (kept to preserve original code structure). */\n    }\n\n    os_probe_log(\"OS_SocketAddrGetPort_Impl: before ntohs sa_port=0x%04x\", (unsigned)sa_port);\n\n    *PortNum = ntohs(sa_port);\n\n    os_probe_log(\"OS_SocketAddrGetPort_Impl: PortNum set to %u, returning OS_SUCCESS\", (unsigned)*PortNum);\n\n    return OS_SUCCESS;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_SocketAddrGetPort_Impl. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The agent A is correct. In the default case the code executes `return OS_ERR_BAD_ADDRESS;` which transfers control to the caller, so the subsequent `break;` can never be reached. That `break` is therefore unreachable code and violates MISRA C 2023 Rule 2.1. The correct fix is to remove the unreachable `break` (or reorganize the control flow so there is no statement after the return). Note: this is a MISRA compliance issue (not a compiler error), and conditional compilation for IPv6 does not affect the fact that the `break` after the `return` is unreachable."
}