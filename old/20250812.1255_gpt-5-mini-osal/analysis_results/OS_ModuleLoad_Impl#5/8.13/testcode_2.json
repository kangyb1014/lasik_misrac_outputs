{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe pointer 'module' is declared as a non-const pointer (OS_module_internal_record_t *module) but it is only used for read-only access (e.g., reading module->flags). It could be declared as const OS_module_internal_record_t *module, so it violates Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/43.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Impl:\n```c\nint32 OS_ModuleLoad_Impl(const OS_object_token_t *token, const char *translated_path)\n{\n    int32                             status = OS_ERROR;\n    int                               dl_mode;\n    OS_impl_module_internal_record_t *impl;\n    OS_module_internal_record_t *     module;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n    module = OS_OBJECT_TABLE_GET(OS_module_table, *token);\n\n    /*\n     * RTLD_NOW should instruct dlopen() to resolve all the symbols in the\n     * module immediately, as opposed to waiting until they are used.\n     * The latter (lazy mode) is non-deterministic - a resolution error on\n     * a rarely-used symbol could cause a random failure far in the future.\n     */\n    dl_mode = RTLD_NOW;\n\n    if ((module->flags & OS_MODULE_FLAG_LOCAL_SYMBOLS) != 0)\n    {\n        /*\n         * Do not add the symbols in this module to the global symbol table.\n         * This mode helps prevent any unanticipated references into this\n         * module, which can in turn prevent unloading via dlclose().\n         */\n        dl_mode |= RTLD_LOCAL;\n    }\n    else\n    {\n        /*\n         * Default mode - add symbols to the global symbol table, so they\n         * will be available to resolve symbols in future module loads.\n         * However, any such references will prevent unloading of this\n         * module via dlclose().\n         */\n        dl_mode |= RTLD_GLOBAL;\n    }\n\n    dlerror();\n    impl->dl_handle = dlopen(translated_path, dl_mode);\n    if (impl->dl_handle != NULL)\n    {\n        status = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"Error loading shared library: %s\\n\", dlerror());\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <dlfcn.h>\n\n/* Helper to append logs to /tmp/logs/43.txt */\nstatic void os_module_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/43.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\n/* Small probe that documents the module/impl state. Note that module is taken as const\n * here to emphasize that the logging only reads from it (demonstrating the violation\n * scenario where the original pointer could be const-qualified). */\nstatic void os_log_module_state(const OS_module_internal_record_t *module,\n                                const OS_impl_module_internal_record_t *impl,\n                                const OS_object_token_t *token,\n                                const char *translated_path,\n                                int dl_mode_pre)\n{\n    os_module_log(\"OS_ModuleLoad_Impl: token=%p, translated_path=%p ('%s'), module=%p, impl=%p\",\n                  (void *)token, (void *)translated_path,\n                  translated_path ? translated_path : \"(null)\", (void *)module, (void *)impl);\n\n    if (module != NULL)\n    {\n        os_module_log(\"OS_ModuleLoad_Impl: module->flags = 0x%08x\", (unsigned)module->flags);\n    }\n    else\n    {\n        os_module_log(\"OS_ModuleLoad_Impl: module is NULL\");\n    }\n\n    os_module_log(\"OS_ModuleLoad_Impl: dl_mode before branch = 0x%08x\", dl_mode_pre);\n}\n\nint32 OS_ModuleLoad_Impl(const OS_object_token_t *token, const char *translated_path)\n{\n    int32                             status = OS_ERROR;\n    int                               dl_mode;\n    OS_impl_module_internal_record_t *impl;\n    OS_module_internal_record_t *     module;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n    module = OS_OBJECT_TABLE_GET(OS_module_table, *token);\n\n    /* Log initial state (module passed as const to emphasize read-only access) */\n    os_log_module_state(module, impl, token, translated_path, 0);\n\n    /*\n     * RTLD_NOW should instruct dlopen() to resolve all the symbols in the\n     * module immediately, as opposed to waiting until they are used.\n     * The latter (lazy mode) is non-deterministic - a resolution error on\n     * a rarely-used symbol could cause a random failure far in the future.\n     */\n    dl_mode = RTLD_NOW;\n\n    if ((module->flags & OS_MODULE_FLAG_LOCAL_SYMBOLS) != 0)\n    {\n        /*\n         * Do not add the symbols in this module to the global symbol table.\n         * This mode helps prevent any unanticipated references into this\n         * module, which can in turn prevent unloading via dlclose().\n         */\n        dl_mode |= RTLD_LOCAL;\n        os_module_log(\"OS_ModuleLoad_Impl: branch=LOCAL (module->flags & OS_MODULE_FLAG_LOCAL_SYMBOLS != 0)\");\n    }\n    else\n    {\n        /*\n         * Default mode - add symbols to the global symbol table, so they\n         * will be available to resolve symbols in future module loads.\n         * However, any such references will prevent unloading of this\n         * module via dlclose().\n         */\n        dl_mode |= RTLD_GLOBAL;\n        os_module_log(\"OS_ModuleLoad_Impl: branch=GLOBAL (module->flags & OS_MODULE_FLAG_LOCAL_SYMBOLS == 0)\");\n    }\n\n    os_module_log(\"OS_ModuleLoad_Impl: final dl_mode = 0x%08x\", dl_mode);\n\n    dlerror();\n    os_module_log(\"OS_ModuleLoad_Impl: calling dlopen('%s', 0x%08x)\", translated_path ? translated_path : \"(null)\", dl_mode);\n    impl->dl_handle = dlopen(translated_path, dl_mode);\n    if (impl->dl_handle != NULL)\n    {\n        status = OS_SUCCESS;\n        os_module_log(\"OS_ModuleLoad_Impl: dlopen succeeded, dl_handle=%p, returning OS_SUCCESS\", impl->dl_handle);\n    }\n    else\n    {\n        const char *errstr = dlerror();\n        os_module_log(\"OS_ModuleLoad_Impl: dlopen failed, dlerror='%s'\", errstr ? errstr : \"(null)\");\n        OS_DEBUG(\"Error loading shared library: %s\\n\", errstr);\n    }\n\n    return status;\n}\n"
}