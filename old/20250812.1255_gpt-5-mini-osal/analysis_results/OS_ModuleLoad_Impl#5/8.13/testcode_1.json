{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'module' is declared as a non-const pointer (OS_module_internal_record_t *module) and is assigned from OS_OBJECT_TABLE_GET(...). In this function the code only reads module->flags and does not modify the pointed-to object, so the pointer could and should be declared as const OS_module_internal_record_t *module to prevent modification through it. Therefore Rule 8.13 is violated. (Note: 'impl' is legitimately non-const because impl->dl_handle is modified.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/43.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Impl:\n```c\nint32 OS_ModuleLoad_Impl(const OS_object_token_t *token, const char *translated_path)\n{\n    int32                             status = OS_ERROR;\n    int                               dl_mode;\n    OS_impl_module_internal_record_t *impl;\n    OS_module_internal_record_t *     module;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n    module = OS_OBJECT_TABLE_GET(OS_module_table, *token);\n\n    /*\n     * RTLD_NOW should instruct dlopen() to resolve all the symbols in the\n     * module immediately, as opposed to waiting until they are used.\n     * The latter (lazy mode) is non-deterministic - a resolution error on\n     * a rarely-used symbol could cause a random failure far in the future.\n     */\n    dl_mode = RTLD_NOW;\n\n    if ((module->flags & OS_MODULE_FLAG_LOCAL_SYMBOLS) != 0)\n    {\n        /*\n         * Do not add the symbols in this module to the global symbol table.\n         * This mode helps prevent any unanticipated references into this\n         * module, which can in turn prevent unloading via dlclose().\n         */\n        dl_mode |= RTLD_LOCAL;\n    }\n    else\n    {\n        /*\n         * Default mode - add symbols to the global symbol table, so they\n         * will be available to resolve symbols in future module loads.\n         * However, any such references will prevent unloading of this\n         * module via dlclose().\n         */\n        dl_mode |= RTLD_GLOBAL;\n    }\n\n    dlerror();\n    impl->dl_handle = dlopen(translated_path, dl_mode);\n    if (impl->dl_handle != NULL)\n    {\n        status = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"Error loading shared library: %s\\n\", dlerror());\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <dlfcn.h>\n#include <stdint.h>\n\nstatic void os_module_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/43.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_ModuleLoad_Impl(const OS_object_token_t *token, const char *translated_path)\n{\n    int32                             status = OS_ERROR;\n    int                               dl_mode;\n    OS_impl_module_internal_record_t *impl;\n    OS_module_internal_record_t *     module;\n\n    os_module_log(\"ENTRY: OS_ModuleLoad_Impl token=%p translated_path=%s\", (const void *)token,\n                  translated_path ? translated_path : \"(null)\");\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n    module = OS_OBJECT_TABLE_GET(OS_module_table, *token);\n\n    os_module_log(\"LOOKUP: impl=%p module=%p\", (const void *)impl, (const void *)module);\n\n    /*\n     * RTLD_NOW should instruct dlopen() to resolve all the symbols in the\n     * module immediately, as opposed to waiting until they are used.\n     * The latter (lazy mode) is non-deterministic - a resolution error on\n     * a rarely-used symbol could cause a random failure far in the future.\n     */\n    dl_mode = RTLD_NOW;\n\n    if (module != NULL)\n    {\n        /* Log the flags value read from the module record */\n        os_module_log(\"STATE: module->flags=0x%08x\", (unsigned int)module->flags);\n    }\n    else\n    {\n        os_module_log(\"WARN: module pointer is NULL\");\n    }\n\n    if ((module->flags & OS_MODULE_FLAG_LOCAL_SYMBOLS) != 0)\n    {\n        /*\n         * Do not add the symbols in this module to the global symbol table.\n         * This mode helps prevent any unanticipated references into this\n         * module, which can in turn prevent unloading via dlclose().\n         */\n        dl_mode |= RTLD_LOCAL;\n        os_module_log(\"CONTROL: branch=LOCAL_SYMBOLS set; dl_mode=0x%08x\", dl_mode);\n    }\n    else\n    {\n        /*\n         * Default mode - add symbols to the global symbol table, so they\n         * will be available to resolve symbols in future module loads.\n         * However, any such references will prevent unloading of this\n         * module via dlclose().\n         */\n        dl_mode |= RTLD_GLOBAL;\n        os_module_log(\"CONTROL: branch=GLOBAL_SYMBOLS set; dl_mode=0x%08x\", dl_mode);\n    }\n\n    /* Clear any old dlerror() and log that we've done so */\n    dlerror();\n    os_module_log(\"ACTION: cleared previous dlerror()\");\n\n    os_module_log(\"ACTION: calling dlopen(path=%s, mode=0x%08x)\", translated_path ? translated_path : \"(null)\", dl_mode);\n    impl->dl_handle = dlopen(translated_path, dl_mode);\n    os_module_log(\"RESULT: dlopen returned handle=%p\", (const void *)impl->dl_handle);\n\n    if (impl->dl_handle != NULL)\n    {\n        status = OS_SUCCESS;\n        os_module_log(\"STATUS: module load succeeded status=%d\", status);\n    }\n    else\n    {\n        const char *err = dlerror();\n        os_module_log(\"ERROR: dlopen failed error=%s\", err ? err : \"(null)\");\n        OS_DEBUG(\"Error loading shared library: %s\\n\", dlerror());\n    }\n\n    os_module_log(\"EXIT: OS_ModuleLoad_Impl returning status=%d\", status);\n\n    return status;\n}\n"
}