{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe macro OS_DEBUG is defined to nothing. At call sites like OS_DEBUG(\"Error loading shared library: %s\\n\", dlerror()); the macro expansion produces an empty statement (the trailing semicolon becomes a lone ';'), which executes no operation. Removing that statement (or the macro call) would not affect program behaviour, so it constitutes dead code per MISRA C 2023 Rule 2.2. Example: in OS_ModuleLoad_Impl the OS_DEBUG(...) call becomes a no-op and is therefore dead code.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_ModuleLoad_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/42.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_ModuleLoad_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_ModuleLoad_Impl:\n```c\nint32 OS_ModuleLoad_Impl(const OS_object_token_t *token, const char *translated_path)\n{\n    int32                             status = OS_ERROR;\n    int                               dl_mode;\n    OS_impl_module_internal_record_t *impl;\n    OS_module_internal_record_t *     module;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n    module = OS_OBJECT_TABLE_GET(OS_module_table, *token);\n\n    /*\n     * RTLD_NOW should instruct dlopen() to resolve all the symbols in the\n     * module immediately, as opposed to waiting until they are used.\n     * The latter (lazy mode) is non-deterministic - a resolution error on\n     * a rarely-used symbol could cause a random failure far in the future.\n     */\n    dl_mode = RTLD_NOW;\n\n    if ((module->flags & OS_MODULE_FLAG_LOCAL_SYMBOLS) != 0)\n    {\n        /*\n         * Do not add the symbols in this module to the global symbol table.\n         * This mode helps prevent any unanticipated references into this\n         * module, which can in turn prevent unloading via dlclose().\n         */\n        dl_mode |= RTLD_LOCAL;\n    }\n    else\n    {\n        /*\n         * Default mode - add symbols to the global symbol table, so they\n         * will be available to resolve symbols in future module loads.\n         * However, any such references will prevent unloading of this\n         * module via dlclose().\n         */\n        dl_mode |= RTLD_GLOBAL;\n    }\n\n    dlerror();\n    impl->dl_handle = dlopen(translated_path, dl_mode);\n    if (impl->dl_handle != NULL)\n    {\n        status = OS_SUCCESS;\n    }\n    else\n    {\n        OS_DEBUG(\"Error loading shared library: %s\\n\", dlerror());\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_ModuleLoad_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <dlfcn.h>\n\n/*\n * Probe logging helper: append human-readable traces to /tmp/logs/42.txt\n * This helper preserves the original logic of the function and only adds\n * side-effect logging to aid reproduction of the reported scenario.\n */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = NULL;\n    va_list ap;\n\n    /* Ensure directory exists; ignore errors other than unexpected ones */\n    if (mkdir(\"/tmp/logs\", 0777) != 0 && errno != EEXIST)\n    {\n        /* If we can't create the directory, still attempt to open the file. */\n    }\n\n    f = fopen(\"/tmp/logs/42.txt\", \"a\");\n    if (f == NULL)\n    {\n        return; /* Best-effort logging only */\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_ModuleLoad_Impl(const OS_object_token_t *token, const char *translated_path)\n{\n    int32                             status = OS_ERROR;\n    int                               dl_mode;\n    OS_impl_module_internal_record_t *impl;\n    OS_module_internal_record_t *     module;\n\n    impl   = OS_OBJECT_TABLE_GET(OS_impl_module_table, *token);\n    module = OS_OBJECT_TABLE_GET(OS_module_table, *token);\n\n    /* Probe: record entry and basic state */\n    probe_log(\"OS_ModuleLoad_Impl ENTRY: token=%p translated_path=%s\", (const void *)token, translated_path ? translated_path : \"(null)\");\n\n    /*\n     * RTLD_NOW should instruct dlopen() to resolve all the symbols in the\n     * module immediately, as opposed to waiting until they are used.\n     * The latter (lazy mode) is non-deterministic - a resolution error on\n     * a rarely-used symbol could cause a random failure far in the future.\n     */\n    dl_mode = RTLD_NOW;\n\n    if ((module->flags & OS_MODULE_FLAG_LOCAL_SYMBOLS) != 0)\n    {\n        /*\n         * Do not add the symbols in this module to the global symbol table.\n         * This mode helps prevent any unanticipated references into this\n         * module, which can in turn prevent unloading via dlclose().\n         */\n        dl_mode |= RTLD_LOCAL;\n        probe_log(\"OS_ModuleLoad_Impl: using RTLD_LOCAL (flags=0x%x)\", module->flags);\n    }\n    else\n    {\n        /*\n         * Default mode - add symbols to the global symbol table, so they\n         * will be available to resolve symbols in future module loads.\n         * However, any such references will prevent unloading of this\n         * module via dlclose().\n         */\n        dl_mode |= RTLD_GLOBAL;\n        probe_log(\"OS_ModuleLoad_Impl: using RTLD_GLOBAL (flags=0x%x)\", module->flags);\n    }\n\n    /* Clear any previous dlerror state, as in the original code */\n    dlerror();\n\n    probe_log(\"OS_ModuleLoad_Impl: calling dlopen('%s', mode=0x%x)\", translated_path ? translated_path : \"(null)\", dl_mode);\n    impl->dl_handle = dlopen(translated_path, dl_mode);\n    if (impl->dl_handle != NULL)\n    {\n        status = OS_SUCCESS;\n        probe_log(\"OS_ModuleLoad_Impl: dlopen succeeded, handle=%p\", impl->dl_handle);\n    }\n    else\n    {\n        /* Capture the dlerror message for logging and for reproducing the scenario */\n        const char *err = dlerror();\n        probe_log(\"OS_ModuleLoad_Impl: dlopen failed, dlerror='%s'\", err ? err : \"(null)\");\n\n        /* Original code reported the error via OS_DEBUG; keep behavior and add probe log instead */\n        /* OS_DEBUG(\"Error loading shared library: %s\\n\", dlerror()); */\n    }\n\n    probe_log(\"OS_ModuleLoad_Impl EXIT: status=%d\", status);\n\n    return status;\n}\n"
}