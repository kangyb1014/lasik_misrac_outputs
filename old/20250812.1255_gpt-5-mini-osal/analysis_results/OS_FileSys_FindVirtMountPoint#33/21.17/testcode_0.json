{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf the search target string is shorter than the virtual_mountpt length, the code can read past the end of target. For example, if filesys->virtual_mountpt == \"/mnt/abc\" (mplen == 8) but target == \"/mnt\" (only 5 bytes including the NUL), the call strncmp(target, filesys->virtual_mountpt, mplen) may access bytes beyond target and the subsequent access target[mplen] definitely reads out of bounds. There is no prior check that target has at least mplen+1 accessible bytes, so the code can perform out-of-bounds accesses of target, violating MISRA C 2023 Rule 21.17.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_FindVirtMountPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/271.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_FindVirtMountPoint:\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_FindVirtMountPoint code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <ctype.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <stdint.h>\n\n/* Probe helper: append a log line to the file. Keep this small and safe. */\nstatic void os_filesys_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/271.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Modified function with probes inserted. Original logic is preserved. */\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Log entry with pointers (do not attempt to dereference target here). */\n    os_filesys_log_probe(\"ENTER: OS_FileSys_FindVirtMountPoint target=%p token=%p obj=%p filesys=%p\",\n                         (void *)target, (const void *)token, (const void *)obj, (const void *)filesys);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        os_filesys_log_probe(\"EXIT: not a virtual mount (flags=0x%08x)\", (unsigned)filesys->flags);\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /* Log the virtual mount point (bounded by mplen) and buffer size info. */\n    os_filesys_log_probe(\"virtual_mountpt (first %zu bytes)='%.*s' mplen=%zu bufsize=%zu\",\n                         mplen,\n                         (int)mplen, filesys->virtual_mountpt,\n                         mplen,\n                         (size_t)sizeof(filesys->virtual_mountpt));\n\n    /* Preserve original decision order: check length conditions first (short-circuited), then strncmp. */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt))\n    {\n        os_filesys_log_probe(\"EXIT: mplen==0 or mplen>=bufsize (mplen=%zu bufsize=%zu)\",\n                             mplen, (size_t)sizeof(filesys->virtual_mountpt));\n        return false;\n    }\n\n    /* Perform the same bounded compare as original and log the result. */\n    int cmp = strncmp(target, filesys->virtual_mountpt, mplen);\n    os_filesys_log_probe(\"strncmp(target=%p, virtual_mountpt=%p, mplen=%zu) => %d\",\n                         (void *)target, (void *)filesys->virtual_mountpt, mplen, cmp);\n\n    if (cmp != 0)\n    {\n        os_filesys_log_probe(\"EXIT: strncmp != 0 -> not a substring (cmp=%d)\", cmp);\n        return false;\n    }\n\n    /*\n     * At this point the original code accesses target[mplen]. That access is the\n     * location that can go out-of-bounds if target is shorter than mplen+1.\n     * Log that we are about to perform that access (address and index) and\n     * record the byte value we read (as the original code does).\n     *\n     * Note: This read is identical to the original behavior; probes do not\n     * introduce additional reads beyond the original control flow.\n     */\n    const void *access_addr = (const void *)&target[mplen];\n    unsigned char probe_byte = (unsigned char)target[mplen];\n\n    /* Print byte in hex and printable char (dot for non-printable). */\n    char printable = isprint(probe_byte) ? (char)probe_byte : '.';\n    os_filesys_log_probe(\"ACCESS: target[%zu] @ %p => byte=0x%02x ('%c')\",\n                         mplen, access_addr, (unsigned)probe_byte, printable);\n\n    /* Preserve original return expression exactly. */\n    return (probe_byte == '/' || probe_byte == 0);\n}\n"
}