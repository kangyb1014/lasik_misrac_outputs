{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nThe call can read beyond the bounds of the object pointed to by 'target' if that object is shorter than mplen or is not NUL-terminated within its bounds. For example, if filesys->virtual_mountpt == \"/mnt/abc\" then mplen == 8; if ref (target) points to a smaller buffer (or a non-NUL-terminated region) whose valid size is less than 8, then strncmp(target, filesys->virtual_mountpt, mplen) may access bytes beyond the target object (undefined behavior).\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_FindVirtMountPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/271.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_FindVirtMountPoint:\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_FindVirtMountPoint code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <string.h>\n\n/* Probe logging helper that appends diagnostic information to /tmp/logs/271.txt */\nstatic void osfs_probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/271.txt\", \"a\");\n    if (!f)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fputc('\\n', f);\n    fclose(f);\n}\n\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Log entry and key pointers/values */\n    osfs_probe_log(\"ENTER: OS_FileSys_FindVirtMountPoint filesys=%p token=%p ref=%p\",\n                   (void *)filesys, (const void *)token, (const void *)ref);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        osfs_probe_log(\"EXIT: not mounted virtual (flags=0x%08x)\", (unsigned)filesys->flags);\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /* Log details about the stored virtual_mountpt and computed length */\n    /* Use a bounded print so we do not read beyond the filesys->virtual_mountpt buffer */\n    osfs_probe_log(\"virtual_mountpt (bounded)='%.*s' mplen=%zu buffer_size=%zu flags=0x%08x\",\n                   (int)sizeof(filesys->virtual_mountpt), filesys->virtual_mountpt,\n                   mplen, sizeof(filesys->virtual_mountpt), (unsigned)filesys->flags);\n\n    /* Preserve original logic while adding logging around the checks */\n    if (mplen == 0)\n    {\n        osfs_probe_log(\"EXIT: mplen == 0 (no virtual mount point)\");\n        return false;\n    }\n\n    if (mplen >= sizeof(filesys->virtual_mountpt))\n    {\n        osfs_probe_log(\"EXIT: mplen >= sizeof(virtual_mountpt) (mplen=%zu, buf=%zu)\", mplen, sizeof(filesys->virtual_mountpt));\n        return false;\n    }\n\n    /* Log that we are about to call strncmp with these parameters. This mirrors the original call. */\n    osfs_probe_log(\"About to call strncmp(target=%p, virtual_mountpt=%p, mplen=%zu)\",\n                   (const void *)target, (const void *)filesys->virtual_mountpt, mplen);\n\n    int cmp = strncmp(target, filesys->virtual_mountpt, mplen);\n    osfs_probe_log(\"strncmp returned %d\", cmp);\n\n    if (cmp != 0)\n    {\n        osfs_probe_log(\"EXIT: substring mismatch (strncmp != 0)\");\n        return false;\n    }\n\n    /* The original code reads target[mplen] here. Mirror that access and log the observed value. */\n    {\n        int chr = (int)target[mplen]; /* preserves original behavior: single read at index mplen */\n        /* Print as integer and as character when printable; otherwise use '.' */\n        char chprint = (chr >= 32 && chr < 127) ? (char)chr : '.';\n        osfs_probe_log(\"Checking terminator: target[%zu]=%d ('%c')\", mplen, chr, chprint);\n\n        bool result = (chr == '/' || chr == 0);\n        osfs_probe_log(\"EXIT: result=%d\", result ? 1 : 0);\n        return result;\n    }\n}\n"
}