{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdFindNextMatch (and similarly OS_ObjectIdIteratorGetNext) the code does: record = OS_OBJECT_TABLE_GET(base, *token); where record is declared as OS_common_record_t * but is only used for read-only operations (e.g. reading record->active_id and passing record to match functions that take a const OS_common_record_t *). Therefore the pointer could and should be declared const OS_common_record_t * (and base made const as well). Obtaining a non-const pointer to the table element when a const-qualified pointer would suffice violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_FindVirtMountPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/267.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_FindVirtMountPoint:\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_FindVirtMountPoint code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdbool.h>\n\n/*\n * Probe/log helper. Appends a single line to /tmp/logs/267.txt.\n * Keep small and side-effect free (other than logging) so original logic\n * is preserved.\n */\nstatic void OS_FileSys_AppendLog(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/267.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    /* Log the entry and basic parameters */\n    OS_FileSys_AppendLog(\"ENTER: OS_FileSys_FindVirtMountPoint ref=%p token=%p obj=%p\",\n                         ref, (const void *)token, (const void *)obj);\n\n    /* Attempt to show token value if it is an integer-like type. Use cast to\n     * unsigned long long which is commonly wide enough for integral tokens. */\n    OS_FileSys_AppendLog(\"token value (raw deref) = %llu\", (unsigned long long)(*token));\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    OS_FileSys_AppendLog(\"filesys ptr = %p\", (const void *)filesys);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        OS_FileSys_AppendLog(\"NOT_MOUNTED_VIRTUAL: flags=0x%08x\", (unsigned)filesys->flags);\n        OS_FileSys_AppendLog(\"EXIT: returning false (not mounted virtual)\");\n        return false;\n    }\n\n    OS_FileSys_AppendLog(\"MOUNTED_VIRTUAL: flags=0x%08x\", (unsigned)filesys->flags);\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    OS_FileSys_AppendLog(\"virtual_mountpt (bufsize=%zu) mplen=%zu\", sizeof(filesys->virtual_mountpt), mplen);\n    /* Print a safe, bounded view of the mountpoint buffer */\n    OS_FileSys_AppendLog(\"virtual_mountpt content (bounded): '%.*s'\", (int)sizeof(filesys->virtual_mountpt), filesys->virtual_mountpt);\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        int cmp = strncmp(target, filesys->virtual_mountpt, mplen);\n        OS_FileSys_AppendLog(\"SUBSTRING_CHECK_FAILED: mplen=%zu bufsize=%zu strncmp=%d\", mplen, sizeof(filesys->virtual_mountpt), cmp);\n        OS_FileSys_AppendLog(\"target prefix (bounded): '%.*s'\", (int)mplen, target);\n        OS_FileSys_AppendLog(\"EXIT: returning false (substring check failed)\");\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    unsigned char nextch = (unsigned char)target[mplen];\n    bool result = (nextch == '/' || nextch == 0);\n\n    /* Log the decisive character and final result */\n    OS_FileSys_AppendLog(\"DECIDE: target[%zu] = 0x%02x (%c) => returning %d\", mplen, (unsigned)nextch,\n                         (nextch >= 32 && nextch < 127) ? (char)nextch : '?', (int)result);\n\n    OS_FileSys_AppendLog(\"EXIT: OS_FileSys_FindVirtMountPoint returns %d\", (int)result);\n\n    return result;\n}\n"
}