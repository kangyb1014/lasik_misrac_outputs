{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe variable filesys is declared as a non-const pointer (OS_filesys_internal_record_t *filesys;) but the function only reads from the referenced record (flags, virtual_mountpt, etc.). Therefore the pointer could and should be declared as pointing to a const-qualified type (const OS_filesys_internal_record_t *filesys) to satisfy MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_FindVirtMountPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/267.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_FindVirtMountPoint:\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_FindVirtMountPoint code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n#include <stdbool.h>\n\n/*\n * Probe helper: append a formatted log entry to /tmp/logs/267.txt.\n * This is intentionally minimal and uses stdio only so it should\n * integrate into the existing build without changing program logic.\n */\nstatic void OS_FileSys_Probe_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/267.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\n/*\n * Instrumented version of OS_FileSys_FindVirtMountPoint.\n * Original logic preserved; logging added to trace control flow and state\n * to help demonstrate that 'filesys' is only read and thus could be a\n * pointer to const-qualified type.\n */\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    /* Retrieve the record pointer as in original code */\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Log entry and pointer info */\n    OS_FileSys_Probe_Log(\"OS_FileSys_FindVirtMountPoint: enter; token=%p, filesys=%p, target=\\\"%s\\\"\", (void *)token, (void *)filesys, (target ? target : \"(null)\"));\n\n    /* Log the flags value read from filesys */\n    OS_FileSys_Probe_Log(\"Read filesys->flags = 0x%08x\", (unsigned)filesys->flags);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        OS_FileSys_Probe_Log(\"Decision: not mounted virtual -> return false\");\n        return false;\n    }\n\n    /* Read virtual_mountpt and compute length (all reads) */\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    OS_FileSys_Probe_Log(\"virtual_mountpt=\\\"%s\\\", mplen=%zu, buffer_size=%zu\", filesys->virtual_mountpt, mplen, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        OS_FileSys_Probe_Log(\"Substring check failed: mplen==0?%d, mplen>=buf?%d, strncmp!=0?%d\",\n                             (int)(mplen == 0), (int)(mplen >= sizeof(filesys->virtual_mountpt)), (int)(strncmp(target, filesys->virtual_mountpt, mplen) != 0));\n        OS_FileSys_Probe_Log(\"Decision: not a match -> return false\");\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     */\n    bool result = (target[mplen] == '/' || target[mplen] == 0);\n    OS_FileSys_Probe_Log(\"Postfix char at target[mplen] = '%c' (0x%02x); result=%d\", \n                         (char)target[mplen] ? target[mplen] : '0', (unsigned char)target[mplen], (int)result);\n\n    OS_FileSys_Probe_Log(\"OS_FileSys_FindVirtMountPoint: exit -> return %d\", (int)result);\n\n    return result;\n}\n"
}