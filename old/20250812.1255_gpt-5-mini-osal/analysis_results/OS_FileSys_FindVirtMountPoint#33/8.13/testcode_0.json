{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'record' in OS_ObjectIdFindNextMatch is declared as OS_common_record_t *record but is never modified in the function and is only passed to the match callback (example match function OS_FileSys_FindVirtMountPoint takes a const OS_common_record_t *). Thus 'record' can and should be const-qualified (const OS_common_record_t *record). This violates MISRA C 2023 Rule 8.13. (Additionally, the opaque arg parameter is not modified here and could be const void * if the callback signatures allowed it, but the clear violation is the non-const 'record'.)\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileSys_FindVirtMountPoint code that contains useful probe functions that print useful logs to a file \"/tmp/logs/267.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileSys_FindVirtMountPoint as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileSys_FindVirtMountPoint:\n```c\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) ||\n        strncmp(target, filesys->virtual_mountpt, mplen) != 0)\n    {\n        /* not a substring, so not a match */\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    return (target[mplen] == '/' || target[mplen] == 0);\n}\n```\n</target_code>\nPlease provide the modified OS_FileSys_FindVirtMountPoint code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n#include <stddef.h>\n\nbool OS_FileSys_FindVirtMountPoint(void *ref, const OS_object_token_t *token, const OS_common_record_t *obj)\n{\n    OS_filesys_internal_record_t *filesys;\n    const char *                  target = (const char *)ref;\n    size_t                        mplen;\n    int                           cmp;\n    int                           final_result;\n\n    filesys = OS_OBJECT_TABLE_GET(OS_filesys_table, *token);\n\n    /* Probe: record lookup result and basic state */\n    {\n        FILE *f = fopen(\"/tmp/logs/267.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_FileSys_FindVirtMountPoint: entry\\n\");\n            fprintf(f, \" filesys_ptr=%p token_ptr=%p obj_ptr=%p target_ptr=%p\\n\",\n                    (void *)filesys, (const void *)token, (const void *)obj, (const void *)target);\n            fprintf(f, \" target=\\\"%s\\\"\\n\", (target != NULL) ? target : \"(null)\");\n            /* flags may be implementation defined width; print as unsigned int for diagnostics */\n            fprintf(f, \" filesys->flags=0x%08x\\n\", (unsigned int)(filesys != NULL ? filesys->flags : 0U));\n            fclose(f);\n        }\n    }\n\n    if ((filesys->flags & OS_FILESYS_FLAG_IS_MOUNTED_VIRTUAL) == 0)\n    {\n        /* Probe: not mounted virtual */\n        FILE *f = fopen(\"/tmp/logs/267.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_FileSys_FindVirtMountPoint: not mounted virtual (flags=0x%08x) -> return false\\n\",\n                    (unsigned int)filesys->flags);\n            fclose(f);\n        }\n\n        return false;\n    }\n\n    mplen = OS_strnlen(filesys->virtual_mountpt, sizeof(filesys->virtual_mountpt));\n\n    /* Probe: virtual mount point length and content (bounded) */\n    {\n        FILE *f = fopen(\"/tmp/logs/267.txt\", \"a\");\n        if (f != NULL)\n        {\n            /* Print only up to mplen characters to avoid overruns if not NUL-terminated */\n            fprintf(f, \"OS_FileSys_FindVirtMountPoint: virtual_mountpt_len=%zu\\n\", mplen);\n            fprintf(f, \" virtual_mountpt=(first %zu chars) \\\"%.*s\\\"\\n\",\n                    mplen,\n                    (int)mplen,\n                    filesys->virtual_mountpt);\n            fclose(f);\n        }\n    }\n\n    /*\n     * The virtual_mountpt member should be a substring of the search target.\n     * If this matches a basic substring check then it may be match\n     */\n    cmp = 0;\n    if (mplen > 0 && mplen < sizeof(filesys->virtual_mountpt))\n    {\n        cmp = strncmp(target, filesys->virtual_mountpt, mplen);\n    }\n\n    if (mplen == 0 || mplen >= sizeof(filesys->virtual_mountpt) || cmp != 0)\n    {\n        /* not a substring, so not a match */\n        FILE *f = fopen(\"/tmp/logs/267.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_FileSys_FindVirtMountPoint: substring test failed (mplen=%zu, sizeof_vmpt=%zu, cmp=%d) -> return false\\n\",\n                    mplen, sizeof(filesys->virtual_mountpt), cmp);\n            fclose(f);\n        }\n\n        return false;\n    }\n\n    /*\n     * Confirm that the substring ends at either a directory separator\n     * or the end of string  (so exact mount points also match).\n     *\n     * For instance consider a virtual_mountpt of /mnt/abc and searching\n     * for target=/mnt/abcd - this should return false in that case.\n     */\n    final_result = (target[mplen] == '/' || target[mplen] == 0);\n\n    /* Probe: final decision and reason */\n    {\n        FILE *f = fopen(\"/tmp/logs/267.txt\", \"a\");\n        if (f != NULL)\n        {\n            fprintf(f, \"OS_FileSys_FindVirtMountPoint: final check target[%zu]=0x%02x -> %s\\n\",\n                    mplen,\n                    (unsigned char)target[mplen],\n                    final_result ? \"MATCH (true)\" : \"NO MATCH (false)\");\n            fprintf(f, \"OS_FileSys_FindVirtMountPoint: exit -> return %d\\n\\n\", final_result);\n            fclose(f);\n        }\n    }\n\n    return (bool)final_result;\n}\n"
}