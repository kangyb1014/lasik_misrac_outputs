{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void OS_CloseFileByName_probe(const OS_stream_internal_record_t *stream, const char *Filename, int token)\n{\n    FILE *f = fopen(\"/tmp/logs/183.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Determine the compile-time size of the stream_name array and whether it contains a NUL within that bound. */\n    size_t buf_len = sizeof(stream->stream_name);\n    const void *nul_ptr = memchr(stream->stream_name, '\\0', buf_len);\n    size_t name_len = nul_ptr ? ((const char *)nul_ptr - stream->stream_name) : buf_len;\n\n    fprintf(f, \"OS_CloseFileByName_probe: iter.token=%d stream_ptr=%p socket_domain=%d Filename_ptr=%p\\n\",\n            token,\n            (const void *)stream,\n            (int)stream->socket_domain,\n            (const void *)Filename);\n\n    fprintf(f, \"  stream_name buffer_size=%zu NUL_in_buffer=%s name_print_len=%zu\\n\",\n            buf_len,\n            (nul_ptr ? \"yes\" : \"no\"),\n            name_len);\n\n    /* Print the stream_name safely up to the discovered length (or full buffer if no NUL). */\n    fprintf(f, \"  stream_name[0..%zu]: '\", name_len);\n    if (name_len > 0)\n    {\n        /* Use precision in printf to ensure only name_len bytes are read */\n        fprintf(f, \"%.*s\", (int)name_len, stream->stream_name);\n    }\n    fprintf(f, \"'\\n\");\n\n    fprintf(f, \"  NOTE: Filename content not read; only pointer logged to avoid reading unknown-sized object.\\n\");\n    fprintf(f, \"----\\n\");\n\n    fclose(f);\n}\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Preserve original logic: only call strcmp if socket_domain matches. */\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Probe/log state right before the strcmp that may read until a NUL. */\n            OS_CloseFileByName_probe(stream, Filename, iter.token);\n\n            if (strcmp(stream->stream_name, Filename) == 0)\n            {\n                /* call OS_close() on the entry referred to by the iterator */\n                close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n                if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n                {\n                    return_code = close_code;\n                }\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmp3vgo601n/src/src/os/shared/src/osapi-file.c: In function 'OS_CloseFileByName':\n/tmp/tmp3vgo601n/src/src/os/shared/src/osapi-file.c:618:60: error: incompatible type for argument 3 of 'OS_CloseFileByName_probe'\n  618 |             OS_CloseFileByName_probe(stream, Filename, iter.token);\n      |                                                        ~~~~^~~~~~\n      |                                                            |\n      |                                                            OS_object_token_t {aka struct OS_object_token}\n/tmp/tmp3vgo601n/src/src/os/shared/src/osapi-file.c:557:107: note: expected 'int' but argument is of type 'OS_object_token_t' {aka 'struct OS_object_token'}\n  557 | static void OS_CloseFileByName_probe(const OS_stream_internal_record_t *stream, const char *Filename, int token)\n      |                                                                                                       ~~~~^~~~~\ngmake[2]: *** [CMakeFiles/osal.dir/build.make:174: CMakeFiles/osal.dir/src/os/shared/src/osapi-file.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:762: CMakeFiles/osal.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "static void OS_CloseFileByName_probe(const OS_stream_internal_record_t *stream, const char *Filename, OS_object_token_t token)\n{\n    FILE *f = fopen(\"/tmp/logs/183.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Determine the compile-time size of the stream_name array and whether it contains a NUL within that bound. */\n    size_t buf_len = sizeof(stream->stream_name);\n    const void *nul_ptr = memchr(stream->stream_name, '\\0', buf_len);\n    size_t name_len = nul_ptr ? ((const char *)nul_ptr - stream->stream_name) : buf_len;\n\n    fprintf(f, \"OS_CloseFileByName_probe: iter.token=%p stream_ptr=%p socket_domain=%d Filename_ptr=%p\\n\",\n            (const void *)&token,\n            (const void *)stream,\n            (int)stream->socket_domain,\n            (const void *)Filename);\n\n    fprintf(f, \"  stream_name buffer_size=%zu NUL_in_buffer=%s name_print_len=%zu\\n\",\n            buf_len,\n            (nul_ptr ? \"yes\" : \"no\"),\n            name_len);\n\n    /* Print the stream_name safely up to the discovered length (or full buffer if no NUL). */\n    fprintf(f, \"  stream_name[0..%zu]: '\", name_len);\n    if (name_len > 0)\n    {\n        /* Use precision in printf to ensure only name_len bytes are read */\n        fprintf(f, \"%.*s\", (int)name_len, stream->stream_name);\n    }\n    fprintf(f, \"'\\n\");\n\n    fprintf(f, \"  NOTE: Filename content not read; only pointer logged to avoid reading unknown-sized object.\\n\");\n    fprintf(f, \"----\\n\");\n\n    fclose(f);\n}\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Preserve original logic: only call strcmp if socket_domain matches. */\n        if (stream->socket_domain == OS_SocketDomain_INVALID)\n        {\n            /* Probe/log state right before the strcmp that may read until a NUL. */\n            OS_CloseFileByName_probe(stream, Filename, iter.token);\n\n            if (strcmp(stream->stream_name, Filename) == 0)\n            {\n                /* call OS_close() on the entry referred to by the iterator */\n                close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n                if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n                {\n                    return_code = close_code;\n                }\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n",
  "explanation": "The compile error was caused by passing iter.token (type OS_object_token_t, a struct) to the probe function which expected an int. I changed the probe's third parameter type to OS_object_token_t to match the caller. Because the token is a struct and not an integer, I updated the debug fprintf to print the token's address (using %p and &token) instead of using %d. No other logic was changed."
}