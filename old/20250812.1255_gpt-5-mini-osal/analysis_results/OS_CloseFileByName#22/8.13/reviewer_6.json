{
  "user_message": "An agent A claimed that the following OS_CloseFileByName code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CloseFileByName.\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The field 'arg' in OS_object_iter_t is declared as void * but is only used as an opaque read-only context (it is passed to OS_ObjectIdIteratorGetNext (match) and OS_ObjectIdIteratorProcessEntry (callback) and never modified). Per MISRA C 2023 Rule 8.13 this pointer should be const-qualified (e.g. const void *arg) and the corresponding callback/match parameter types updated to accept const, to reflect that the pointed-to data is not modified.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Probe log file */\n    FILE *log_fp = fopen(\"/tmp/logs/179.txt\", \"a\");\n    if (log_fp)\n    {\n        fprintf(log_fp, \"OS_CloseFileByName: entry. Filename=%p\\n\", (const void *)Filename);\n        if (Filename != NULL)\n        {\n            fprintf(log_fp, \"OS_CloseFileByName: Filename str=\\\"%s\\\"\\n\", Filename);\n        }\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    if (log_fp) fprintf(log_fp, \"OS_CloseFileByName: initial return_code=%d\\n\", (int)return_code);\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    if (log_fp)\n    {\n        /* Log iterator initial state if possible */\n        /* Attempt to log common fields used by the iterator. */\n        fprintf(log_fp, \"OS_CloseFileByName: iterator initialized. iter token (raw)=%p\\n\", (const void *)(&iter.token));\n        /* If the iterator type contains an 'arg' field, log its pointer value for inspection. */\n        /* Note: This access is defensive - if 'arg' does not exist in the struct, this will be a compile error in that build. */\n#ifdef __has_member /* not actual check; left intentionally blank to avoid macro defs */\n        (void)0;\n#else\n        /* Best-effort: attempt to print iter.arg if present. If the project struct contains 'arg' this will produce useful evidence. */\n        /* Casting through (const void *) to avoid accidental modifications. */\n        /*lint -e{904} Suppress conditional code reachability for portability across builds */\n        /* The following is intentionally not guarded by a compile-time macro in this snippet; it will compile in the environment where iter.arg exists. */\n#endif\n        /* If iter.arg exists in the compilation unit, this will log its pointer value. */\n    }\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (log_fp)\n        {\n            /* Use pointer printing for iter.token since it may be an aggregate rather than an integer */\n            fprintf(log_fp, \"OS_CloseFileByName: iterator advanced. token=%p, stream_ptr=%p\\n\", (const void *)(&iter.token), (const void *)stream);\n            /* Attempt to log the iterator's arg pointer when available in the struct. */\n            /* This access is intentionally written as a plain member access because the target environment (reported issue) contains an 'arg' member. */\n            /* If the struct in this build does not have 'arg', the build will fail; the test environment for this probe should match the reported environment. */\n            /* Use a cast to const void * to avoid accidental writes and to show read-only usage. */\n            /* The following block is intentionally simple and relies on the presence of iter.arg in the target struct. */\n            /* Cover both presence and absence by wrapping prints in runtime guards where possible. */\n            /* Print stream metadata if available */\n            if (stream != NULL)\n            {\n                fprintf(log_fp, \"OS_CloseFileByName: stream->stream_name=%s, stream->socket_domain=%d\\n\",\n                        stream->stream_name ? stream->stream_name : \"(null)\", (int)stream->socket_domain);\n            }\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            if (log_fp)\n            {\n                fprintf(log_fp, \"OS_CloseFileByName: match found. token=%p, stream_name=\\\"%s\\\"\\n\",\n                        (const void *)(&iter.token), stream->stream_name ? stream->stream_name : \"(null)\");\n\n                /* If the iterator has a read-only context field named 'arg', log it to demonstrate it is only used as opaque context. */\n                /* The presence of iter.arg in the environment will make this print useful evidence for the reported violation. */\n                /* Use %p to avoid dereferencing a void pointer. */\n                /* The cast to const void * documents the intended read-only usage. */\n                /* Note: This access is intended purely for logging and does not modify iter.arg. */\n                /* If iter.arg is not present in the compilation unit, remove/comment out this fprintf in that build. */\n                /* Safer attempt: try to print if the member is present. */\n#ifdef ITER_HAS_ARG_MEMBER\n                fprintf(log_fp, \"OS_CloseFileByName: iterator.arg=%p\\n\", (const void *)iter.arg);\n#else\n                /* If no explicit macro, try a non-invasive approach may still fail to compile if iter.arg not present. */\n                /* To avoid introducing new violations in builds without iter.arg, the test runner should enable ITER_HAS_ARG_MEMBER when appropriate. */\n#endif\n            }\n\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (log_fp)\n            {\n                fprintf(log_fp, \"OS_CloseFileByName: OS_ObjectIdIteratorProcessEntry returned %d for token=%p\\n\",\n                        (int)close_code, (const void *)(&iter.token));\n            }\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                if (log_fp)\n                {\n                    fprintf(log_fp, \"OS_CloseFileByName: updating return_code from %d to %d\\n\", (int)return_code, (int)close_code);\n                }\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    if (log_fp)\n    {\n        fprintf(log_fp, \"OS_CloseFileByName: iterator destroyed. final return_code=%d\\n\", (int)return_code);\n        fclose(log_fp);\n    }\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_CloseFileByName. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not demonstrated by the supplied function body. MISRA C:2023 Rule 8.13 concerns pointer declarations (they should point to const-qualified types when the pointed-to object is not modified). The shown OS_CloseFileByName already uses const for Filename and does not itself declare or write through any non-const opaque pointer. Agent A's scenario depends on the internal definition of OS_object_iter_t (an 'arg' member declared as void *), and on the behaviour of the iterator/callback APIs. No definition or evidence was provided showing that such a member exists and is never modified. Therefore, you cannot conclude from the provided code that Rule 8.13 is violated.\n\nIf the project-wide definition of OS_object_iter_t contains a member declared as void *arg which is indeed used only as an immutable/opaque context (never modified or written through), then that declaration would be a valid MISRA 8.13 finding and should be changed to const void *arg with corresponding updates to callback/prototype signatures. But absent the actual type/prototype code or a trace proving arg is only read, the report as applied to OS_CloseFileByName is not correct."
}