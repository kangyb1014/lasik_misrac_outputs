{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer 'stream' is declared as a non-const pointer to OS_stream_internal_record_t but is only used for read-only access (reading stream->socket_domain and stream->stream_name for strcmp). Per MISRA C 2023 Rule 8.13 it should be declared const, e.g. 'const OS_stream_internal_record_t *stream;'. Assigning the non-const result of OS_OBJECT_TABLE_GET(...) to a const pointer is allowed, so the current declaration violates the rule.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseFileByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseFileByName code.\n",
  "test_code": "#include <stdio.h>\n#include <string.h>\n\n/* Probe helper to log state information to /tmp/logs/179.txt */\nstatic void OS_CloseFileByName_LogProbe(const char *stage,\n                                       const void *stream_ptr,\n                                       int32_t token,\n                                       int32_t socket_domain,\n                                       const char *stream_name,\n                                       const char *Filename,\n                                       int32_t return_code,\n                                       int32_t close_code)\n{\n    FILE *f = fopen(\"/tmp/logs/179.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f,\n                \"Stage=%s token=%ld stream_ptr=%p socket_domain=%d stream_name=\\\"%s\\\" Filename=\\\"%s\\\" return_code=%ld close_code=%ld\\n\",\n                stage,\n                (long)token,\n                stream_ptr,\n                (int)socket_domain,\n                (stream_name != NULL) ? stream_name : \"(null)\",\n                (Filename != NULL) ? Filename : \"(null)\",\n                (long)return_code,\n                (long)close_code);\n        fclose(f);\n    }\n}\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    /* Log function entry and filename */\n    OS_CloseFileByName_LogProbe(\"entry\", NULL, -1, -1, NULL, Filename, return_code, -1);\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log after retrieving the table entry */\n        if (stream != NULL)\n        {\n            OS_CloseFileByName_LogProbe(\"after_get\",\n                                       (const void *)stream,\n                                       iter.token,\n                                       (int32_t)stream->socket_domain,\n                                       stream->stream_name,\n                                       Filename,\n                                       return_code,\n                                       -1);\n        }\n        else\n        {\n            OS_CloseFileByName_LogProbe(\"after_get\",\n                                       NULL,\n                                       iter.token,\n                                       -1,\n                                       NULL,\n                                       Filename,\n                                       return_code,\n                                       -1);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* Log that we are about to call OS_ObjectIdIteratorProcessEntry (match found) */\n            OS_CloseFileByName_LogProbe(\"match_before_close\",\n                                       (const void *)stream,\n                                       iter.token,\n                                       (int32_t)stream->socket_domain,\n                                       stream->stream_name,\n                                       Filename,\n                                       return_code,\n                                       -1);\n\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            /* Log the result of the close attempt */\n            OS_CloseFileByName_LogProbe(\"after_close\",\n                                       (const void *)stream,\n                                       iter.token,\n                                       (int32_t)stream->socket_domain,\n                                       stream->stream_name,\n                                       Filename,\n                                       return_code,\n                                       close_code);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n\n                /* Log that return_code was updated */\n                OS_CloseFileByName_LogProbe(\"return_code_updated\",\n                                           (const void *)stream,\n                                           iter.token,\n                                           (int32_t)stream->socket_domain,\n                                           stream->stream_name,\n                                           Filename,\n                                           return_code,\n                                           close_code);\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    /* Log function exit and final return code */\n    OS_CloseFileByName_LogProbe(\"exit\", NULL, -1, -1, NULL, Filename, return_code, -1);\n\n    return return_code;\n}\n"
}