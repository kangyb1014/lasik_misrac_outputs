{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe iterator field iter->arg is declared as void * (non-const) but can be used to hold a pointer to const data (for example a const char *Filename). Passing iter->arg into func (whose parameter is void *) propagates a non-const pointer. If iter->arg was initialized from a const-qualified pointer (e.g. const char *Filename), this discards the const qualifier and therefore violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseFileByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseFileByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <time.h>\n\n/* Probe helper: append a message to the log file. */\nstatic void OS_CloseFileByName_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/179.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm *tm = localtime(&t);\n    if (tm != NULL)\n    {\n        fprintf(f, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n                tm->tm_year + 1900, tm->tm_mon + 1, tm->tm_mday,\n                tm->tm_hour, tm->tm_min, tm->tm_sec);\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    /* Log entry and Filename info */\n    OS_CloseFileByName_log(\"Entered OS_CloseFileByName; Filename ptr=%p, Filename=\\\"%s\\\"\",\n                           (const void *)Filename,\n                           (Filename != NULL) ? Filename : \"(null)\");\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log iterator token and stream basic info */\n        OS_CloseFileByName_log(\"Iterator next: iter ptr=%p, token=%u, stream ptr=%p, stream_name ptr=%p\",\n                               (const void *)&iter,\n                               (unsigned)iter.token,\n                               (const void *)stream,\n                               (const void *)((stream != NULL) ? stream->stream_name : NULL));\n\n        if (stream != NULL)\n        {\n            OS_CloseFileByName_log(\"Stream details: socket_domain=%d, stream_name=\\\"%s\\\"\",\n                                   stream->socket_domain,\n                                   (stream->stream_name != NULL) ? stream->stream_name : \"(null)\");\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* Before calling the iterator processing function, log iterator argument state.\n               The iterator type is known to contain a void *arg field in many OSAL implementations;\n               logging iter.arg here provides evidence if a const pointer was stored into a void *.\n            */\n            /* Print the raw pointer value of iter.arg (if present) and attempt to show it as a string. */\n            /* Accessing iter.arg is only for diagnostics/evidence of qualifier propagation; avoid modifying it. */\n            OS_CloseFileByName_log(\"Match found for Filename; preparing to close. Filename ptr=%p, stream_name ptr=%p\",\n                                   (const void *)Filename,\n                                   (const void *)stream->stream_name);\n\n            /* Try to log iter.arg if available */\n#ifdef __has_member\n            /* If the environment provides a way to detect member existence, use it (portable guard). */\n#endif\n            do\n            {\n                /* Many implementations define OS_object_iter_t with a member named 'arg' of type void *. */\n                /* Attempt to read and log it for evidence of discarded const-qualification. */\n                void *iter_arg = NULL;\n                /* Use a simple assignment; if 'arg' does not exist this will fail to compile which indicates\n                   the target environment does not match the expectation (in that case, the surrounding logs\n                   still provide useful evidence). */\n                iter_arg = iter.arg;\n\n                OS_CloseFileByName_log(\"Iterator.arg pointer: %p\", iter_arg);\n\n                if (iter_arg != NULL)\n                {\n                    /* Safely attempt to log the contents if it looks like a string pointer. */\n                    const char *arg_as_str = (const char *)iter_arg;\n                    /* Guard against dereferencing NULL or nonsense by checking the first byte is printable ASCII\n                       or the string functions do not crash in typical environments. This is a best-effort diagnostic. */\n                    if (arg_as_str[0] != '\\0')\n                    {\n                        /* Print a limited prefix to avoid excessive logs. */\n                        char preview[128];\n                        size_t n = 0;\n                        while (n + 1 < sizeof(preview) && arg_as_str[n] != '\\0')\n                        {\n                            preview[n] = arg_as_str[n];\n                            n++;\n                        }\n                        preview[n] = '\\0';\n\n                        OS_CloseFileByName_log(\"Iterator.arg as string (preview): \\\"%s\\\"\", preview);\n                    }\n                }\n            } while (0);\n\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            OS_CloseFileByName_log(\"After OS_ObjectIdIteratorProcessEntry: token=%u, close_code=%d\",\n                                   (unsigned)iter.token,\n                                   close_code);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                OS_CloseFileByName_log(\"Updating return_code from %d to %d\", return_code, close_code);\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_CloseFileByName_log(\"Exiting OS_CloseFileByName; final return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}