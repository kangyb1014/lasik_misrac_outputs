{
  "user_message": "An agent A claimed that the following OS_CloseFileByName code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CloseFileByName.\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:In OS_ObjectIdIteratorGetNext the local variable 'record' is only used to read fields (record->active_id) and is passed to a match callback only for inspection. Declaring it as a non-const pointer allows accidental modification of the referenced object. According to MISRA C 2023 Rule 8.13 it should be declared as const OS_common_record_t *record (and associated APIs/signatures adjusted) when the referenced object is not intended to be modified.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/179.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputs(\"\\n\", f);\n    fclose(f);\n}\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    probe_log(\"OS_CloseFileByName: entry Filename=\\\"%s\\\"\", Filename ? Filename : \"(null)\");\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    probe_log(\"Iterator initialized at %p\", (void *)&iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* Log iterator token if available/meaningful as an integer */\n        probe_log(\"Iterator advanced: iter.token=%p\", (void *)&iter.token);\n\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        probe_log(\"Stream entry: ptr=%p, socket_domain=%d, name=\\\"%s\\\"\",\n                  (void *)stream,\n                  (int)stream->socket_domain,\n                  stream->stream_name ? stream->stream_name : \"(null)\");\n\n        /* Pre-calc comparison result to log the decision path */\n        int name_cmp = strcmp(stream->stream_name, Filename);\n        probe_log(\"Name comparison: strcmp(stream->stream_name, Filename) => %d\", name_cmp);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (name_cmp == 0))\n        {\n            probe_log(\"Match found for token=%p, invoking close\", (void *)&iter.token);\n\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            probe_log(\"OS_ObjectIdIteratorProcessEntry returned close_code=%d\", close_code);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                probe_log(\"Updating return_code: old=%d -> new=%d\", return_code, close_code);\n                return_code = close_code;\n            }\n            else\n            {\n                probe_log(\"No update to return_code (current=%d)\", return_code);\n            }\n        }\n        else\n        {\n            probe_log(\"Entry skipped: token=%p, socket_domain=%d, name_cmp=%d\",\n                      (void *)&iter.token,\n                      (int)stream->socket_domain,\n                      name_cmp);\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    probe_log(\"OS_CloseFileByName: exit return_code=%d\", return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_CloseFileByName. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C:2023 Rule 8.13: \u201cA pointer should point to a const-qualified type whenever possible.\u201d In the provided OS_CloseFileByName implementation the Filename parameter is const (good) but the local variable stream is declared as OS_stream_internal_record_t *stream even though it is only used for read-only access (reading socket_domain and stream_name). This contravenes the rule: the pointer could and should be declared to point to a const-qualified type (const OS_stream_internal_record_t *stream) unless there is a compelling reason not to (for example, later modification through that pointer or API constraints requiring a non-const type). Agent A\u2019s scenario about an iterator-local variable 'record' inside OS_ObjectIdIteratorGetNext describes the same class of issue (a read-only reference that should be const) even though that specific variable is not shown here. The empty runtime probe/logging output does not affect the static rule analysis. Recommendation: change local pointers that are only used for inspection to point to const-qualified types (and adjust APIs only if necessary)."
}