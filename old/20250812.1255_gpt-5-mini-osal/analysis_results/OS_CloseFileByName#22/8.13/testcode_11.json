{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe callback parameter 'int32 (*func)(osal_id_t, void *)' and the iterator member 'void *arg' are not const-qualified. If callbacks do not (and are not intended to) modify the context pointed to by arg (for example OS_FileIteratorClose ignores its arg), then both should be declared as 'const void *' (e.g. int32 (*func)(osal_id_t, const void *) and const void *arg) so that the pointer points to a const-qualified type. As written, this fails MISRA C 2023 Rule 8.13 because a pointer that could be const is not const-qualified.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_CloseFileByName code that contains useful probe functions that print useful logs to a file \"/tmp/logs/179.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_CloseFileByName as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_CloseFileByName:\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_CloseFileByName code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <string.h>\n\n/* Probe logging helper - writes a line to /tmp/logs/179.txt with a timestamp. */\nstatic void OS_CloseFileByName_Log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/179.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n\n    if (localtime_r(&t, &tm_buf) != NULL)\n    {\n        char timestr[32];\n        if (strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf) > 0)\n        {\n            fprintf(fp, \"[%s] \", timestr);\n        }\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Log entry and parameter */\n    OS_CloseFileByName_Log(\"ENTER OS_CloseFileByName Filename=%s\", (Filename != NULL) ? Filename : \"(null)\");\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_CloseFileByName_Log(\"Calling OS_ObjectIdIterateActive for LOCAL_OBJID_TYPE\");\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log iterator token and stream pointer */\n        OS_CloseFileByName_Log(\"ITER token=%u stream=%p\", (unsigned)iter.token, (void *)stream);\n\n        if (stream != NULL)\n        {\n            const char *sname = (stream->stream_name != NULL) ? stream->stream_name : \"(null)\";\n            OS_CloseFileByName_Log(\"STREAM token=%u domain=%d name=%s\", (unsigned)iter.token, (int)stream->socket_domain, sname);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n            {\n                /* call OS_close() on the entry referred to by the iterator */\n                OS_CloseFileByName_Log(\"MATCH found for token=%u name=%s - calling OS_ObjectIdIteratorProcessEntry\", (unsigned)iter.token, sname);\n\n                close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n                OS_CloseFileByName_Log(\"OS_ObjectIdIteratorProcessEntry returned close_code=%d for token=%u\", close_code, (unsigned)iter.token);\n\n                if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n                {\n                    int32 old = return_code;\n                    return_code = close_code;\n                    OS_CloseFileByName_Log(\"Updating return_code from %d to %d\", old, return_code);\n                }\n            }\n            else\n            {\n                OS_CloseFileByName_Log(\"NO_MATCH for token=%u name=%s (domain=%d, target=%s)\", (unsigned)iter.token, sname, (int)stream->socket_domain, Filename);\n            }\n        }\n        else\n        {\n            OS_CloseFileByName_Log(\"STREAM pointer is NULL for token=%u\", (unsigned)iter.token);\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n    OS_CloseFileByName_Log(\"Iterator destroyed, returning return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}