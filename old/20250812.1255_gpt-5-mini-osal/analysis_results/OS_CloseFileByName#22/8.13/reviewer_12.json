{
  "user_message": "An agent A claimed that the following OS_CloseFileByName code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_CloseFileByName.\n```c\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local pointer 'stream' is declared as a non-const pointer to OS_stream_internal_record_t but is only used for read-only access (reading stream->socket_domain and stream->stream_name for strcmp). Per MISRA C 2023 Rule 8.13 it should be declared const, e.g. 'const OS_stream_internal_record_t *stream;'. Assigning the non-const result of OS_OBJECT_TABLE_GET(...) to a const pointer is allowed, so the current declaration violates the rule.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_CloseFileByName_LogProbe(const char *stage,\n                                       const void *stream_ptr,\n                                       OS_object_token_t token,\n                                       int32_t socket_domain,\n                                       const char *stream_name,\n                                       const char *Filename,\n                                       int32_t return_code,\n                                       int32_t close_code)\n{\n    FILE *f = fopen(\"/tmp/logs/179.txt\", \"a\");\n    if (f != NULL)\n    {\n        fprintf(f,\n                \"Stage=%s token=%p stream_ptr=%p socket_domain=%d stream_name=\\\"%s\\\" Filename=\\\"%s\\\" return_code=%ld close_code=%ld\\n\",\n                stage,\n                (void *)&token,\n                stream_ptr,\n                (int)socket_domain,\n                (stream_name != NULL) ? stream_name : \"(null)\",\n                (Filename != NULL) ? Filename : \"(null)\",\n                (long)return_code,\n                (long)close_code);\n        fclose(f);\n    }\n}\n\nint32 OS_CloseFileByName(const char *Filename)\n{\n    int32                        return_code;\n    int32                        close_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_FS_ERR_PATH_INVALID;\n\n    /* Log function entry and filename */\n    OS_CloseFileByName_LogProbe(\"entry\", NULL, (OS_object_token_t){0}, -1, NULL, Filename, return_code, -1);\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log after retrieving the table entry */\n        if (stream != NULL)\n        {\n            OS_CloseFileByName_LogProbe(\"after_get\",\n                                       (const void *)stream,\n                                       iter.token,\n                                       (int32_t)stream->socket_domain,\n                                       stream->stream_name,\n                                       Filename,\n                                       return_code,\n                                       -1);\n        }\n        else\n        {\n            OS_CloseFileByName_LogProbe(\"after_get\",\n                                       NULL,\n                                       iter.token,\n                                       -1,\n                                       NULL,\n                                       Filename,\n                                       return_code,\n                                       -1);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* Log that we are about to call OS_ObjectIdIteratorProcessEntry (match found) */\n            OS_CloseFileByName_LogProbe(\"match_before_close\",\n                                       (const void *)stream,\n                                       iter.token,\n                                       (int32_t)stream->socket_domain,\n                                       stream->stream_name,\n                                       Filename,\n                                       return_code,\n                                       -1);\n\n            /* call OS_close() on the entry referred to by the iterator */\n            close_code = OS_ObjectIdIteratorProcessEntry(&iter, OS_FileIteratorClose);\n\n            /* Log the result of the close attempt */\n            OS_CloseFileByName_LogProbe(\"after_close\",\n                                       (const void *)stream,\n                                       iter.token,\n                                       (int32_t)stream->socket_domain,\n                                       stream->stream_name,\n                                       Filename,\n                                       return_code,\n                                       close_code);\n\n            if (return_code == OS_FS_ERR_PATH_INVALID || close_code != OS_SUCCESS)\n            {\n                return_code = close_code;\n\n                /* Log that return_code was updated */\n                OS_CloseFileByName_LogProbe(\"return_code_updated\",\n                                           (const void *)stream,\n                                           iter.token,\n                                           (int32_t)stream->socket_domain,\n                                           stream->stream_name,\n                                           Filename,\n                                           return_code,\n                                           close_code);\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    /* Log function exit and final return code */\n    OS_CloseFileByName_LogProbe(\"exit\", NULL, (OS_object_token_t){0}, -1, NULL, Filename, return_code, -1);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_CloseFileByName. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. In OS_CloseFileByName the local variable stream is only used for read-only access (reading stream->socket_domain and stream->stream_name and using the latter with strcmp). Per MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so declaring it as\n\n  const OS_stream_internal_record_t *stream;\n\nwould be appropriate. Assigning the non-const result of OS_OBJECT_TABLE_GET(...) to a pointer-to-const is allowed, so the current non-const declaration is unnecessary and therefore the agent A report is valid. (Note: if other code in this function actually needed to modify the object via stream, or if later calls rely on a non-const pointer, then making it const would be inappropriate; that is not the case in the shown code.)"
}