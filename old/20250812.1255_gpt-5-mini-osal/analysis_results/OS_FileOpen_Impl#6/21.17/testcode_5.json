{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 21.17.\nHere is the comment from the agent.\n<violation scenario>\nIf name_ptr points near the end of the VirtualPath buffer and OS_MAX_FILE_NAME is larger than the remaining bytes from name_ptr to the terminating NUL, memchr(name_ptr, 0, OS_MAX_FILE_NAME) will attempt to read past the end of the VirtualPath object. Example: VirtualPath has length 100 (so NUL at index 100), name_ptr = &VirtualPath[95], and OS_MAX_FILE_NAME = 255 \u2014 memchr will try to read up to 255 bytes starting at index 95, accessing bytes beyond the allocated/valid region and causing undefined behavior.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/55.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpen_Impl:\n```c\nint32 OS_FileOpen_Impl(const OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode)\n{\n    int                             os_perm;\n    int                             os_mode;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n    ** Check for a valid access mode\n    ** For creating a file, OS_READ_ONLY does not make sense\n    */\n    switch (access_mode)\n    {\n        case OS_WRITE_ONLY:\n            os_perm = O_WRONLY;\n            break;\n        case OS_READ_ONLY:\n            os_perm = O_RDONLY;\n            break;\n        case OS_READ_WRITE:\n            os_perm = O_RDWR;\n            break;\n        default:\n            return OS_ERROR;\n    }\n\n    if (flags & OS_FILE_FLAG_CREATE)\n    {\n        os_perm |= O_CREAT;\n    }\n    if (flags & OS_FILE_FLAG_TRUNCATE)\n    {\n        os_perm |= O_TRUNC;\n    }\n\n    os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;\n\n    os_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n\n    impl->fd = open(local_path, os_perm, os_mode);\n\n    if (impl->fd < 0)\n    {\n        OS_DEBUG(\"open(%s): %s\\n\", local_path, strerror(errno));\n        return OS_ERROR;\n    }\n\n    /*\n     * If the flags included O_NONBLOCK, then\n     * enable the \"select\" call on this handle.\n     */\n    impl->selectable = ((os_perm & O_NONBLOCK) != 0);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpen_Impl code.\n",
  "test_code": "static size_t probe_safe_strnlen(const char *s, size_t max)\n{\n    size_t i = 0;\n    if (s == NULL) return 0;\n    for (; i < max; ++i)\n    {\n        if (s[i] == '\\0') break;\n    }\n    return i;\n}\n\nstatic void probe_log_before_open(const OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode)\n{\n    FILE *f = fopen(\"/tmp/logs/55.txt\", \"a\");\n    if (!f) return;\n\n    fprintf(f, \"--- OS_FileOpen_Impl ENTRY ---\\n\");\n    fprintf(f, \"token ptr: %p\\n\", (const void *)token);\n    fprintf(f, \"local_path ptr: %p\\n\", (const void *)local_path);\n    fprintf(f, \"flags: 0x%08x, access_mode: %d\\n\", (unsigned)flags, (int)access_mode);\n\n    if (local_path == NULL)\n    {\n        fprintf(f, \"local_path: (NULL)\\n\");\n        fclose(f);\n        return;\n    }\n\n    /* compute a bounded length to avoid reading unbounded memory */\n    size_t len = probe_safe_strnlen(local_path, 4096);\n    fprintf(f, \"local_path length (bounded to 4096): %zu\\n\", len);\n\n    /* print a small hexdump and ASCII snapshot up to the first NUL (or limit) */\n    size_t dump_len = (len + 1 < 256) ? (len + 1) : 256; /* include terminating NUL if within limit */\n    fprintf(f, \"local_path snapshot (len=%zu, dump=%zu):\\n\", len, dump_len);\n    for (size_t i = 0; i < dump_len; ++i)\n    {\n        unsigned char c = (unsigned char)local_path[i];\n        fprintf(f, \"%02x \", c);\n    }\n    fprintf(f, \"\\n\");\n\n    /* ASCII view */\n    for (size_t i = 0; i < dump_len; ++i)\n    {\n        unsigned char c = (unsigned char)local_path[i];\n        if (c >= 32 && c <= 126)\n            fputc((int)c, f);\n        else if (c == '\\0')\n            fputc('.', f); /* show NUL as dot in ASCII line */\n        else\n            fputc('.', f);\n    }\n    fprintf(f, \"\\n\");\n\n#ifdef OS_MAX_FILE_NAME\n    fprintf(f, \"OS_MAX_FILE_NAME: %d\\n\", OS_MAX_FILE_NAME);\n#else\n    fprintf(f, \"OS_MAX_FILE_NAME: (unknown at compile time)\\n\");\n#endif\n\n    fprintf(f, \"--- END ENTRY ---\\n\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nstatic void probe_log_after_open(const OS_object_token_t *token, const char *local_path, int fd, int os_perm)\n{\n    FILE *f = fopen(\"/tmp/logs/55.txt\", \"a\");\n    if (!f) return;\n\n    fprintf(f, \"--- OS_FileOpen_Impl AFTER OPEN ---\\n\");\n    fprintf(f, \"token ptr: %p\\n\", (const void *)token);\n    fprintf(f, \"local_path ptr: %p\\n\", (const void *)local_path);\n    fprintf(f, \"returned fd: %d\\n\", fd);\n    fprintf(f, \"os_perm (flags passed to open): 0x%08x\\n\", os_perm);\n    fprintf(f, \"--- END AFTER OPEN ---\\n\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_FileOpen_Impl(const OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode)\n{\n    int                             os_perm;\n    int                             os_mode;\n    OS_impl_file_internal_record_t *impl;\n\n    /* Probe: log entry parameters and a safe snapshot of the path */\n    probe_log_before_open(token, local_path, flags, access_mode);\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n    ** Check for a valid access mode\n    ** For creating a file, OS_READ_ONLY does not make sense\n    */\n    switch (access_mode)\n    {\n        case OS_WRITE_ONLY:\n            os_perm = O_WRONLY;\n            break;\n        case OS_READ_ONLY:\n            os_perm = O_RDONLY;\n            break;\n        case OS_READ_WRITE:\n            os_perm = O_RDWR;\n            break;\n        default:\n            return OS_ERROR;\n    }\n\n    if (flags & OS_FILE_FLAG_CREATE)\n    {\n        os_perm |= O_CREAT;\n    }\n    if (flags & OS_FILE_FLAG_TRUNCATE)\n    {\n        os_perm |= O_TRUNC;\n    }\n\n    os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;\n\n    os_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n\n    impl->fd = open(local_path, os_perm, os_mode);\n\n    if (impl->fd < 0)\n    {\n        /* Log the failure with errno */\n        FILE *f = fopen(\"/tmp/logs/55.txt\", \"a\");\n        if (f)\n        {\n            fprintf(f, \"open(%p) failed: %s (errno=%d)\\n\", (const void *)local_path, strerror(errno), errno);\n            fflush(f);\n            fclose(f);\n        }\n\n        OS_DEBUG(\"open(%s): %s\\n\", local_path, strerror(errno));\n        return OS_ERROR;\n    }\n\n    /* Probe: log state after a successful open */\n    probe_log_after_open(token, local_path, impl->fd, os_perm);\n\n    /*\n     * If the flags included O_NONBLOCK, then\n     * enable the \"select\" call on this handle.\n     */\n    impl->selectable = ((os_perm & O_NONBLOCK) != 0);\n\n    return OS_SUCCESS;\n}\n"
}