{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe OS_DEBUG invocation is defined as an empty macro (#define OS_DEBUG(__VA_ARGS__)). After preprocessing the statement becomes an empty statement (no runtime effect). Its presence (and the removed call to strerror(errno)) does not affect program behaviour, so this reachable no-op constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpen_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/50.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpen_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpen_Impl:\n```c\nint32 OS_FileOpen_Impl(const OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode)\n{\n    int                             os_perm;\n    int                             os_mode;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /*\n    ** Check for a valid access mode\n    ** For creating a file, OS_READ_ONLY does not make sense\n    */\n    switch (access_mode)\n    {\n        case OS_WRITE_ONLY:\n            os_perm = O_WRONLY;\n            break;\n        case OS_READ_ONLY:\n            os_perm = O_RDONLY;\n            break;\n        case OS_READ_WRITE:\n            os_perm = O_RDWR;\n            break;\n        default:\n            return OS_ERROR;\n    }\n\n    if (flags & OS_FILE_FLAG_CREATE)\n    {\n        os_perm |= O_CREAT;\n    }\n    if (flags & OS_FILE_FLAG_TRUNCATE)\n    {\n        os_perm |= O_TRUNC;\n    }\n\n    os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;\n\n    os_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n\n    impl->fd = open(local_path, os_perm, os_mode);\n\n    if (impl->fd < 0)\n    {\n        OS_DEBUG(\"open(%s): %s\\n\", local_path, strerror(errno));\n        return OS_ERROR;\n    }\n\n    /*\n     * If the flags included O_NONBLOCK, then\n     * enable the \"select\" call on this handle.\n     */\n    impl->selectable = ((os_perm & O_NONBLOCK) != 0);\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpen_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <errno.h>\n#include <string.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n\nint32 OS_FileOpen_Impl(const OS_object_token_t *token, const char *local_path, int32 flags, int32 access_mode)\n{\n    int                             os_perm;\n    int                             os_mode;\n    OS_impl_file_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *token);\n\n    /* Probe: log function entry and input state */\n    {\n        FILE *probe = fopen(\"/tmp/logs/50.txt\", \"a\");\n        if (probe == NULL)\n        {\n            /* Try to create the logs directory once and retry */\n            (void)mkdir(\"/tmp/logs\", 0777);\n            probe = fopen(\"/tmp/logs/50.txt\", \"a\");\n        }\n        if (probe != NULL)\n        {\n            fprintf(probe, \"OS_FileOpen_Impl ENTRY: token=%p, impl=%p, local_path=%s, flags=0x%08x, access_mode=%d\\n\",\n                    (const void*)token, (void*)impl, (local_path != NULL ? local_path : \"(null)\"), (unsigned)flags, (int)access_mode);\n            fflush(probe);\n            fclose(probe);\n        }\n    }\n\n    /*\n    ** Check for a valid access mode\n    ** For creating a file, OS_READ_ONLY does not make sense\n    */\n    switch (access_mode)\n    {\n        case OS_WRITE_ONLY:\n            os_perm = O_WRONLY;\n            break;\n        case OS_READ_ONLY:\n            os_perm = O_RDONLY;\n            break;\n        case OS_READ_WRITE:\n            os_perm = O_RDWR;\n            break;\n        default:\n        {\n            /* Probe: log invalid access_mode before returning */\n            FILE *probe = fopen(\"/tmp/logs/50.txt\", \"a\");\n            if (probe != NULL)\n            {\n                fprintf(probe, \"OS_FileOpen_Impl: invalid access_mode=%d -> returning OS_ERROR\\n\", (int)access_mode);\n                fflush(probe);\n                fclose(probe);\n            }\n            return OS_ERROR;\n        }\n    }\n\n    if (flags & OS_FILE_FLAG_CREATE)\n    {\n        os_perm |= O_CREAT;\n    }\n    if (flags & OS_FILE_FLAG_TRUNCATE)\n    {\n        os_perm |= O_TRUNC;\n    }\n\n    os_perm |= OS_IMPL_REGULAR_FILE_FLAGS;\n\n    os_mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n\n    /* Probe: log computed permissions and mode before open() */\n    {\n        FILE *probe = fopen(\"/tmp/logs/50.txt\", \"a\");\n        if (probe != NULL)\n        {\n            fprintf(probe, \"OS_FileOpen_Impl: about to open('%s') with os_perm=0x%08x, os_mode=0%o\\n\",\n                    (local_path != NULL ? local_path : \"(null)\"), (unsigned)os_perm, (unsigned)os_mode);\n            fflush(probe);\n            fclose(probe);\n        }\n    }\n\n    impl->fd = open(local_path, os_perm, os_mode);\n\n    if (impl->fd < 0)\n    {\n        /* Original debug macro left in place (may be defined empty in some builds) */\n        OS_DEBUG(\"open(%s): %s\\n\", local_path, strerror(errno));\n\n        /* Probe: explicitly log the open() failure and errno to a persistent file so the empty-OS_DEBUG case is captured */\n        {\n            FILE *probe = fopen(\"/tmp/logs/50.txt\", \"a\");\n            if (probe != NULL)\n            {\n                int saved_errno = errno; /* capture errno immediately */\n                fprintf(probe, \"OS_FileOpen_Impl: open('%s') failed, fd=%d, errno=%d (%s)\\n\",\n                        (local_path != NULL ? local_path : \"(null)\"), impl->fd, saved_errno, strerror(saved_errno));\n                fprintf(probe, \"OS_FileOpen_Impl: NOTE: OS_DEBUG invocation may be an empty macro; this probe records the same message that would have been printed by OS_DEBUG.\\n\");\n                fflush(probe);\n                fclose(probe);\n            }\n        }\n\n        return OS_ERROR;\n    }\n\n    /*\n     * If the flags included O_NONBLOCK, then\n     * enable the \"select\" call on this handle.\n     */\n    impl->selectable = ((os_perm & O_NONBLOCK) != 0);\n\n    /* Probe: log successful open and final state */\n    {\n        FILE *probe = fopen(\"/tmp/logs/50.txt\", \"a\");\n        if (probe != NULL)\n        {\n            fprintf(probe, \"OS_FileOpen_Impl SUCCESS: fd=%d, selectable=%d\\n\", impl->fd, (int)impl->selectable);\n            fflush(probe);\n            fclose(probe);\n        }\n    }\n\n    return OS_SUCCESS;\n}\n"
}