{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_CountSemTake_Impl:\n```c\nint32 OS_CountSemTake_Impl(const OS_object_token_t *token)\n{\n    OS_impl_countsem_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);\n\n    if (sem_wait(&impl->id) < 0)\n    {\n        return OS_SEM_FAILURE;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function OS_CountSemTake_Impl:\ntypedef struct OS_object_token OS_object_token_t\n...\ntypedef struct\n{\n    sem_t id;\n} OS_impl_countsem_internal_record_t\n...\nOS_impl_countsem_internal_record_t OS_impl_count_sem_table[OS_MAX_COUNT_SEMAPHORES]\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\n#define OS_SEM_FAILURE (-6)\n...\n#define OS_SUCCESS (0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])",
    "typedef struct\n{\n    sem_t id;\n} OS_impl_countsem_internal_record_t",
    "OS_impl_countsem_internal_record_t OS_impl_count_sem_table[OS_MAX_COUNT_SEMAPHORES]",
    "impl = OS_OBJECT_TABLE_GET(OS_impl_count_sem_table, *token);",
    "if (sem_wait(&impl->id) < 0)",
    "OS_impl_countsem_internal_record_t *impl;"
  ],
  "explanation": "Fragments not listed do not need investigation for Rule 8.13: the function parameter is already a pointer to a const-qualified type (const OS_object_token_t *token); the integer return macros (OS_SEM_FAILURE, OS_SUCCESS) and the simple return statements do not involve pointer qualifications; there are no other pointer declarations or pointer-passing expressions in the provided code that could be made const-qualified. The listed fragments cover all places where non-const pointers or addresses are obtained or used (table declaration, macro that takes an address of the token, the local pointer variable, and the call that takes the address of the semaphore member) and therefore are the relevant locations to inspect for possible const-qualification issues under Rule 8.13."
}