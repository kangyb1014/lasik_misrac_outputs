{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe BSP_DEBUG macro is defined as empty. As written the if (status < 0) { BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status)); } compiles to an if whose body is effectively empty (the macro invocation and its arguments are removed), so only the conditional test is executed. Removing that test and the empty body would not change program behaviour (no side effects occur in the branch), therefore the executed operation is dead code and violates MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_BSP_Initialize code that contains useful probe functions that print useful logs to a file \"/tmp/logs/146.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_BSP_Initialize as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_BSP_Initialize:\n```c\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     *\n     * This special file represents the max depth of a POSIX message queue for an unprivileged user.\n     *\n     * In order to facilitate running in simulation mode without any need for root access --\n     * this will allow the OSAL to successfully create message queues by truncating anything larger than this size.\n     *\n     * No need to check _LINUX_OS_ here; if the file fails to open, i.e. if not on Linux and the file does not exist,\n     * then leave well enough alone and don't do anything.\n     */\n    if (geteuid() != 0)\n    {\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(strtoul(buffer, NULL, 10));\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n            }\n            fclose(fp);\n        }\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n    }\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n    }\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    if (status < 0)\n    {\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n    }\n}\n```\n</target_code>\nPlease provide the modified OS_BSP_Initialize code.\n",
  "test_code": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <pthread.h>\n#include <unistd.h>\n#include <stdarg.h>\n#include <time.h>\n#include <errno.h>\n\n/*\n * Probe logger: append human-readable entries to /tmp/logs/146.txt.\n * This helper preserves the original logic and only records control flow/state.\n */\nstatic void os_bsp_log(const char *fmt, ...)\n{\n    FILE *lf = fopen(\"/tmp/logs/146.txt\", \"a\");\n    if (!lf)\n    {\n        return;\n    }\n\n    time_t t = time(NULL);\n    struct tm tm;\n    localtime_r(&t, &tm);\n\n    fprintf(lf, \"[%04d-%02d-%02d %02d:%02d:%02d] \",\n            tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,\n            tm.tm_hour, tm.tm_min, tm.tm_sec);\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(lf, fmt, ap);\n    va_end(ap);\n\n    fprintf(lf, \"\\n\");\n    fclose(lf);\n}\n\nvoid OS_BSP_Initialize(void)\n{\n    FILE *              fp;\n    char                buffer[32];\n    pthread_mutexattr_t mutex_attr;\n    int                 status;\n\n    os_bsp_log(\"ENTER: OS_BSP_Initialize\");\n\n    /* Record effective UID so we know which branch is taken */\n    uid_t euid = geteuid();\n    os_bsp_log(\"geteuid() = %d\", (int)euid);\n\n    /*\n     * If not running as root, check /proc/sys/fs/mqueue/msg_max\n     */\n    if (euid != 0)\n    {\n        fp = fopen(\"/proc/sys/fs/mqueue/msg_max\", \"r\");\n        os_bsp_log(\"fopen('/proc/sys/fs/mqueue/msg_max') -> %p\", (void *)fp);\n        if (fp)\n        {\n            if (fgets(buffer, sizeof(buffer), fp) != NULL)\n            {\n                unsigned long parsed = strtoul(buffer, NULL, 10);\n                OS_BSP_Global.MaxQueueDepth = OSAL_BLOCKCOUNT_C(parsed);\n\n                /* Log what would have been printed by BSP_DEBUG */\n                os_bsp_log(\"Maximum user msg queue depth parsed = %lu, stored MaxQueueDepth = %u\",\n                           parsed, (unsigned int)OS_BSP_Global.MaxQueueDepth);\n\n                /* Preserve original call so behavior is unchanged if BSP_DEBUG is defined */\n                BSP_DEBUG(\"Maximum user msg queue depth = %u\\n\", (unsigned int)OS_BSP_Global.MaxQueueDepth);\n            }\n            else\n            {\n                os_bsp_log(\"fgets returned NULL reading msg_max\");\n            }\n            fclose(fp);\n            os_bsp_log(\"closed /proc/sys/fs/mqueue/msg_max\");\n        }\n        else\n        {\n            os_bsp_log(\"/proc/sys/fs/mqueue/msg_max not available (fopen returned NULL)\");\n        }\n    }\n    else\n    {\n        os_bsp_log(\"Running as root; skipping /proc/sys/fs/mqueue/msg_max check\");\n    }\n\n    /* Initialize the low level access mutex (w/priority inheritance) */\n    status = pthread_mutexattr_init(&mutex_attr);\n    os_bsp_log(\"pthread_mutexattr_init() returned %d\", status);\n    if (status < 0)\n    {\n        /* Record branch taken and the status/string that would be printed by BSP_DEBUG */\n        os_bsp_log(\"Branch taken: status < 0 after pthread_mutexattr_init, status=%d, strerror=%s\",\n                   status, strerror(status));\n        BSP_DEBUG(\"pthread_mutexattr_init: %s\\n\", strerror(status));\n    }\n\n    status = pthread_mutexattr_setprotocol(&mutex_attr, PTHREAD_PRIO_INHERIT);\n    os_bsp_log(\"pthread_mutexattr_setprotocol(..., PTHREAD_PRIO_INHERIT) returned %d\", status);\n    if (status < 0)\n    {\n        os_bsp_log(\"Branch taken: status < 0 after pthread_mutexattr_setprotocol, status=%d, strerror=%s\",\n                   status, strerror(status));\n        BSP_DEBUG(\"pthread_mutexattr_setprotocol: %s\\n\", strerror(status));\n    }\n\n    status = pthread_mutex_init(&OS_BSP_GenericLinuxGlobal.AccessMutex, &mutex_attr);\n    os_bsp_log(\"pthread_mutex_init(&AccessMutex, &mutex_attr) returned %d\", status);\n    if (status < 0)\n    {\n        os_bsp_log(\"Branch taken: status < 0 after pthread_mutex_init, status=%d, strerror=%s\",\n                   status, strerror(status));\n        BSP_DEBUG(\"pthread_mutex_init: %s\\n\", strerror(status));\n    }\n\n    os_bsp_log(\"EXIT: OS_BSP_Initialize\");\n}\n"
}