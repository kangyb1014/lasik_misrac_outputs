{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/137.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp for easier ordering of events */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    (void)localtime_r(&t, &tm_buf);\n    char ts[64];\n    (void)strftime(ts, sizeof(ts), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n    fprintf(f, \"%s - \", ts);\n\n    va_list ap;\n    va_start(ap, fmt);\n    (void)vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketAddrFromString_Impl(OS_SockAddr_t *Addr, const char *string)\n{\n    void *                  addrbuffer;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    /* Log entry and key state */\n    os_log_probe(\"Enter OS_SocketAddrFromString_Impl: Addr=%p, string=%s\", (void *)Addr, (string != NULL) ? string : \"(null)\");\n    os_log_probe(\"Accessor=%p, sa_family=%d\", (void *)Accessor, Accessor->sa.sa_family);\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            os_log_probe(\"Branch AF_INET: addrbuffer=%p\", addrbuffer);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            os_log_probe(\"Branch AF_INET6: addrbuffer=%p\", addrbuffer);\n            break;\n#endif\n        default:\n            os_log_probe(\"Branch default: unknown sa_family=%d - returning OS_ERR_BAD_ADDRESS\", Accessor->sa.sa_family);\n            return OS_ERR_BAD_ADDRESS;\n    }\n\n    /* This function is defined as returning 1 on success, not 0 */\n    {\n        int ret = inet_pton(Accessor->sa.sa_family, string, addrbuffer);\n        os_log_probe(\"inet_pton called: family=%d, string=%s, addrbuffer=%p, ret=%d\",\n                     Accessor->sa.sa_family, (string != NULL) ? string : \"(null)\", addrbuffer, ret);\n        if (ret != 1)\n        {\n            os_log_probe(\"inet_pton failed (ret=%d) - returning OS_ERROR\", ret);\n            return OS_ERROR;\n        }\n    }\n\n    os_log_probe(\"Success - returning OS_SUCCESS\");\n    return OS_SUCCESS;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpib3a8tjs/src/src/os/portable/os-impl-bsd-sockets.c: In function 'os_log_probe':\n/tmp/tmpib3a8tjs/src/src/os/portable/os-impl-bsd-sockets.c:725:15: error: storage size of 'tm_buf' isn't known\n  725 |     struct tm tm_buf;\n      |               ^~~~~~\n/tmp/tmpib3a8tjs/src/src/os/portable/os-impl-bsd-sockets.c:734:28: note: expected '__va_list_tag *' but argument is of type 'OCS_va_list'\n  734 |     (void)vfprintf(f, fmt, ap);\n      |                            ^~\ngmake[2]: *** [unit-test-coverage/vxworks/CMakeFiles/utobj_coverage-vxworks-bsd-sockets.dir/build.make:76: unit-test-coverage/vxworks/CMakeFiles/utobj_coverage-vxworks-bsd-sockets.dir/__/__/os/portable/os-impl-bsd-sockets.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:2645: unit-test-coverage/vxworks/CMakeFiles/utobj_coverage-vxworks-bsd-sockets.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SocketAddrFromString_Impl as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <arpa/inet.h>\n\nstatic void os_log_probe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/137.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    /* Timestamp for easier ordering of events */\n    time_t t = time(NULL);\n    struct tm tm_buf;\n    (void)localtime_r(&t, &tm_buf);\n    char ts[64];\n    (void)strftime(ts, sizeof(ts), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n\n    fprintf(f, \"%s - \", ts);\n\n    va_list ap;\n    va_start(ap, fmt);\n    /* Cast to va_list to match the vfprintf prototype in environments\n       where va_list may be typedef'd differently (e.g. OCS_va_list). */\n    (void)vfprintf(f, fmt, (va_list)ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_SocketAddrFromString_Impl(OS_SockAddr_t *Addr, const char *string)\n{\n    void *                  addrbuffer;\n    OS_SockAddr_Accessor_t *Accessor;\n\n    Accessor = (OS_SockAddr_Accessor_t *)&Addr->AddrData;\n\n    /* Log entry and key state */\n    os_log_probe(\"Enter OS_SocketAddrFromString_Impl: Addr=%p, string=%s\", (void *)Addr, (string != NULL) ? string : \"(null)\");\n    os_log_probe(\"Accessor=%p, sa_family=%d\", (void *)Accessor, Accessor->sa.sa_family);\n\n    switch (Accessor->sa.sa_family)\n    {\n        case AF_INET:\n            addrbuffer = &Accessor->sa_in.sin_addr;\n            os_log_probe(\"Branch AF_INET: addrbuffer=%p\", addrbuffer);\n            break;\n#ifdef OS_NETWORK_SUPPORTS_IPV6\n        case AF_INET6:\n            addrbuffer = &Accessor->sa_in6.sin6_addr;\n            os_log_probe(\"Branch AF_INET6: addrbuffer=%p\", addrbuffer);\n            break;\n#endif\n        default:\n            os_log_probe(\"Branch default: unknown sa_family=%d - returning OS_ERR_BAD_ADDRESS\", Accessor->sa.sa_family);\n            return OS_ERR_BAD_ADDRESS;\n    }\n\n    /* This function is defined as returning 1 on success, not 0 */\n    {\n        int ret = inet_pton(Accessor->sa.sa_family, string, addrbuffer);\n        os_log_probe(\"inet_pton called: family=%d, string=%s, addrbuffer=%p, ret=%d\",\n                     Accessor->sa.sa_family, (string != NULL) ? string : \"(null)\", addrbuffer, ret);\n        if (ret != 1)\n        {\n            os_log_probe(\"inet_pton failed (ret=%d) - returning OS_ERROR\", ret);\n            return OS_ERROR;\n        }\n    }\n\n    os_log_probe(\"Success - returning OS_SUCCESS\");\n    return OS_SUCCESS;\n}\n",
  "explanation": "I included <time.h> and <stdarg.h> so struct tm and va_list are defined. The error about 'storage size of tm_buf' was due to missing time.h. The vfprintf call previously produced a type mismatch because the build environment uses a different typedef for va_list (e.g. OCS_va_list); I resolved this by casting the local va_list variable when calling vfprintf: (va_list)ap. No logic changes were made to OS_SocketAddrFromString_Impl \u2014 only headers and a safe cast to match the expected vfprintf prototype."
}