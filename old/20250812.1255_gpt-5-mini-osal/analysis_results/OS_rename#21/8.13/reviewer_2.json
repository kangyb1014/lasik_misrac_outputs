{
  "user_message": "An agent A claimed that the following OS_rename code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_rename.\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The struct member 'arg' is declared as 'void *arg' but is used only as a read-only context pointer (it is passed to the match callback as iter->arg and never modified in the iterator code). According to MISRA C 2023 Rule 8.13 this should be 'const void *arg' (and the OS_ObjectMatchFunc_t signature adjusted to take a 'const void *' if appropriate).\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_Rename_Log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/171.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and inputs */\n    OS_Rename_Log(\"OS_rename() entry: old=\\\"%s\\\", new=\\\"%s\\\", old_ptr=%p, new_ptr=%p\", old ? old : \"(null)\", new ? new : \"(null)\", (const void*)old, (const void*)new);\n\n    return_code = OS_TranslatePath(old, old_path);\n    OS_Rename_Log(\"After OS_TranslatePath(old): return_code=%d, old_path=\\\"%s\\\"\", return_code, old_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        OS_Rename_Log(\"After OS_TranslatePath(new): return_code=%d, new_path=\\\"%s\\\"\", return_code, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        OS_Rename_Log(\"After OS_FileRename_Impl(%s -> %s): return_code=%d\", old_path, new_path, return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_Rename_Log(\"About to iterate object table for LOCAL_OBJID_TYPE\");\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            /* Log iterator internal state where available. */\n            /* iter.token is an aggregate type in some configurations, so print its address instead of casting to unsigned */\n            OS_Rename_Log(\"Iterator token=%p, iter_ptr=%p, iter.arg=%p\", (void*)&iter.token, (void*)&iter, (void*)iter.arg);\n\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream != NULL)\n            {\n                OS_Rename_Log(\"Stream record: stream_ptr=%p, socket_domain=%d, stream_name=\\\"%s\\\"\", (void*)stream, (int)stream->socket_domain, stream->stream_name);\n\n                int name_match = (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0);\n                OS_Rename_Log(\"Name match check: socket_invalid=%d, strcmp==0?=%d\", (int)(stream->socket_domain == OS_SocketDomain_INVALID), name_match);\n\n                if (name_match)\n                {\n                    /* Log before change */\n                    OS_Rename_Log(\"Renaming stream name from \\\"%s\\\" to \\\"%s\\\" for token=%p\", stream->stream_name, new, (void*)&iter.token);\n\n                    strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                    stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                    /* Log after change */\n                    OS_Rename_Log(\"After strncpy: stream_name=\\\"%s\\\"\", stream->stream_name);\n                }\n            }\n            else\n            {\n                OS_Rename_Log(\"OS_OBJECT_TABLE_GET returned NULL for token=%p\", (void*)&iter.token);\n            }\n        }\n\n        OS_Rename_Log(\"Finished iterating; destroying iterator\");\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    OS_Rename_Log(\"OS_rename() exit: return_code=%d\", return_code);\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_rename. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim as stated cannot be confirmed from the evidence provided. Rule 8.13 says a pointer should point to a const-qualified type whenever possible, so if an iterator field arg is declared void *arg but is never modified and only used as a read-only context, then yes, that field should be const void *arg (and the callback signature updated) to comply with 8.13. However, the OS_rename code you provided does not show the definition or all uses of OS_object_iter_t or its member arg, nor does it show the OS_ObjectMatchFunc_t / iterator API. Without inspecting the iterator type definition and every place that reads or writes iter.arg (and all callback implementations and callers), one cannot conclude there is a MISRA violation. It may be a valid violation if arg is indeed never modified anywhere and all callers accept const, but it may be a false positive if some code intentionally mutates the pointer or needs a non-const signature for API compatibility. To determine correctness you must inspect the iterator type declaration and the full set of uses of that field; if all uses are read-only, the report is correct and the API should be updated (or a documented rationale provided). If any use writes through or stores a non-const pointer that must be modified, then the report is incorrect."
}