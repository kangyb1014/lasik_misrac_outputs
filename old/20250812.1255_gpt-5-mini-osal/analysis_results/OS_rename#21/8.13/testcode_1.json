{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nIn OS_ObjectIdIteratorGetNext the local variable is declared as a non-const pointer: OS_common_record_t *record; and then assigned from OS_OBJECT_TABLE_GET(iter->base, iter->token). In this function record is only read (record->active_id and passed to the match callback) and not modified, so it could and should be a pointer to const: const OS_common_record_t *record; (and potentially iter->base could be const-qualified). Assigning the table element address to a non-const pointer when a const-qualified pointer would suffice violates MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/171.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <stdint.h>\n\n/* Probe logging helper - appends human-readable logs to /tmp/logs/171.txt */\nstatic void OS_rename_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/171.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\n/* Modified OS_rename with added logging probes. Original logic preserved. */\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    OS_rename_log(\"OS_rename ENTRY: old='%s' new='%s'\", (old != NULL) ? old : \"(null)\", (new != NULL) ? new : \"(null)\");\n\n    return_code = OS_TranslatePath(old, old_path);\n    OS_rename_log(\"After OS_TranslatePath(old): return_code=%d old_path='%s'\", return_code, (return_code == OS_SUCCESS) ? old_path : \"(invalid)\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        OS_rename_log(\"After OS_TranslatePath(new): return_code=%d new_path='%s'\", return_code, (return_code == OS_SUCCESS) ? new_path : \"(invalid)\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        OS_rename_log(\"After OS_FileRename_Impl: return_code=%d old_path='%s' new_path='%s'\", return_code, old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_rename_log(\"Starting object id iteration for LOCAL_OBJID_TYPE\");\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            /* preserve original behavior: obtain non-const pointer as in original code */\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            /* Log iterator token, stream pointer and key fields used in decision */\n            OS_rename_log(\"Iter token=%llu stream_ptr=%p socket_domain=%d stream_name='%s'\",\n                          (unsigned long long)(uintptr_t)iter.token,\n                          (void *)stream,\n                          (int)((stream != NULL) ? stream->socket_domain : -1),\n                          (stream != NULL) ? stream->stream_name : \"(null)\");\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                /* Log before modification */\n                OS_rename_log(\"Match found: token=%llu old_stream_name='%s' -> will replace with new='%s'\",\n                              (unsigned long long)(uintptr_t)iter.token,\n                              stream->stream_name,\n                              (new != NULL) ? new : \"(null)\");\n\n                /* Perform the original rename on the in-memory record */\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                /* Log after modification */\n                OS_rename_log(\"After rename: token=%llu new_stream_name='%s'\",\n                              (unsigned long long)(uintptr_t)iter.token,\n                              stream->stream_name);\n            }\n        }\n\n        OS_rename_log(\"Finished iteration, destroying iterator\");\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    OS_rename_log(\"OS_rename EXIT: return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}