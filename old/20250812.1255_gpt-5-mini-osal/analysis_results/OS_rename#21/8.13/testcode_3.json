{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe call to OS_ObjectIdGetBySearch casts away the const qualifier: (void *)VirtualPath where VirtualPath is declared as const char *. This discards const-qualification and allows a non-const pointer to refer to const data. MISRA C 2023 Rule 8.13 requires pointers to point to const-qualified types whenever possible. Recommended fix: change the callee signature to accept a const-qualified pointer (e.g. const void * or const char *) and remove the cast.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/171.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe / logging helpers - keep them static to avoid impacting external linkage */\nstatic FILE *log_open(void)\n{\n    FILE *fp = fopen(\"/tmp/logs/171.txt\", \"a\");\n    return fp;\n}\n\nstatic void log_printf(FILE *fp, const char *fmt, ...)\n{\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n    fflush(fp);\n}\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Open log file for this call and record inputs (preserve constness) */\n    FILE *log = log_open();\n    log_printf(log, \"OS_rename() entry: old='%s' (ptr=%p), new='%s' (ptr=%p)\\n\",\n               (old ? old : \"(null)\"), (const void *)old,\n               (new ? new : \"(null)\"), (const void *)new);\n\n    return_code = OS_TranslatePath(old, old_path);\n    log_printf(log, \"After OS_TranslatePath(old): return_code=%ld, old_path='%s'\\n\", (long)return_code, old_path);\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        log_printf(log, \"After OS_TranslatePath(new): return_code=%ld, new_path='%s'\\n\", (long)return_code, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        log_printf(log, \"After OS_FileRename_Impl: return_code=%ld\\n\", (long)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        log_printf(log, \"Iterating active objects (LOCAL_OBJID_TYPE)\\n\");\n\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            /* Log the state of each stream record visited */\n            log_printf(log, \"  iterator token=%u, stream_name='%s' (ptr=%p), socket_domain=%d\\n\",\n                       (unsigned)iter.token,\n                       (stream && stream->stream_name) ? stream->stream_name : \"(null)\",\n                       (const void *)((stream) ? stream->stream_name : NULL),\n                       (int)((stream) ? stream->socket_domain : -1));\n\n            /* Explicitly log the comparison operands and result (preserve constness of 'old') */\n            if (stream != NULL)\n            {\n                int strcmp_result = strcmp(stream->stream_name, old);\n                log_printf(log, \"    strcmp(stream->stream_name, old) -> %d\\n\", strcmp_result);\n\n                if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp_result == 0)\n                {\n                    /* Log the rename action about to be taken on the in-memory stream record */\n                    log_printf(log, \"    Match found: renaming in-memory stream name '%s' -> '%s'\\n\",\n                               stream->stream_name, new ? new : \"(null)\");\n\n                    strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                    stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                    log_printf(log, \"    After strncpy: stream_name='%s'\\n\", stream->stream_name);\n                }\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        log_printf(log, \"Finished iterating active objects\\n\");\n    }\n\n    log_printf(log, \"OS_rename() exit: return_code=%ld\\n\", (long)return_code);\n\n    if (log != NULL)\n    {\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}