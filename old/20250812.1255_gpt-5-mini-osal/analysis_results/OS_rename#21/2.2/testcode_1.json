{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe assignments 'SysMountPointLen = 0;' and 'VirtPathBegin = VirtPathLen;' are executed but never used: if OS_ObjectIdGetBySearch succeeds they are overwritten with filesystem values before any read; if the search fails the function does not reach the later code that would use them. Thus removing these two assignments would not change program behaviour, so they are dead code and violate MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_rename code that contains useful probe functions that print useful logs to a file \"/tmp/logs/170.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_rename as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_rename:\n```c\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    return_code = OS_TranslatePath(old, old_path);\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_rename code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/*\n * Probe/logging helper. Appends textual logs to /tmp/logs/170.txt.\n * This does not change the program logic and only records runtime\n * control flow/state for debugging.\n */\nstatic void os_rename_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/170.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_rename(const char *old, const char *new)\n{\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int32                        return_code;\n    char                         old_path[OS_MAX_LOCAL_PATH_LEN];\n    char                         new_path[OS_MAX_LOCAL_PATH_LEN];\n\n    /* Log entry and the provided pointers/strings (safely) */\n    os_rename_log(\"OS_rename ENTRY: old=%p new=%p old_str=%s new_str=%s\",\n                  (void *)old,\n                  (void *)new,\n                  (old != NULL) ? old : \"(null)\",\n                  (new != NULL) ? new : \"(null)\");\n\n    return_code = OS_TranslatePath(old, old_path);\n    os_rename_log(\"After OS_TranslatePath(old): return_code=%d old_path=%s\",\n                  (int)return_code,\n                  (return_code == OS_SUCCESS) ? old_path : \"(invalid)\");\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_TranslatePath(new, new_path);\n        os_rename_log(\"After OS_TranslatePath(new): return_code=%d new_path=%s\",\n                      (int)return_code,\n                      (return_code == OS_SUCCESS) ? new_path : \"(invalid)\");\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_FileRename_Impl(old_path, new_path);\n        os_rename_log(\"After OS_FileRename_Impl: return_code=%d old_path=%s new_path=%s\",\n                      (int)return_code,\n                      old_path,\n                      new_path);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        os_rename_log(\"Beginning object table iteration\");\n        OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n            /* Log state for each stream encountered during iteration */\n            os_rename_log(\n                \"Iter token=%llu stream=%p socket_domain=%d stream_name=\\\"%s\\\"\",\n                (unsigned long long)iter.token,\n                (void *)stream,\n                (int)stream->socket_domain,\n                (stream->stream_name != NULL) ? stream->stream_name : \"(null)\");\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && strcmp(stream->stream_name, old) == 0)\n            {\n                os_rename_log(\"Match found: updating stream->stream_name from '%s' to '%s'\",\n                              stream->stream_name,\n                              new);\n\n                strncpy(stream->stream_name, new, sizeof(stream->stream_name) - 1);\n                stream->stream_name[sizeof(stream->stream_name) - 1] = 0;\n\n                os_rename_log(\"After update: stream_name='%s'\", stream->stream_name);\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n        os_rename_log(\"Finished object table iteration\");\n    }\n\n    os_rename_log(\"OS_rename EXIT: return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}