{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of OS_ConsoleTask_Entry:\n```c\nstatic void *OS_ConsoleTask_Entry(void *arg)\n{\n    OS_VoidPtrValueWrapper_t           local_arg;\n    OS_impl_console_internal_record_t *local;\n    OS_object_token_t                  token;\n\n    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;\n    if (OS_ObjectIdGetById(OS_LOCK_MODE_REFCOUNT, OS_OBJECT_TYPE_OS_CONSOLE, local_arg.id, &token) == OS_SUCCESS)\n    {\n        local = OS_OBJECT_TABLE_GET(OS_impl_console_table, token);\n\n        /* Loop forever (unless shutdown is set) */\n        while (OS_SharedGlobalVars.GlobalState != OS_SHUTDOWN_MAGIC_NUMBER)\n        {\n            OS_ConsoleOutput_Impl(&token);\n            sem_wait(&local->data_sem);\n        }\n        OS_ObjectIdRelease(&token);\n    }\n    return NULL;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "static void *OS_ConsoleTask_Entry(void *arg)",
    "    /* cppcheck-suppress unreadVariable // intentional use of other union member */\n    local_arg.opaque_arg = arg;"
  ],
  "explanation": "Only the function parameter 'arg' and its immediate use via the union member 'local_arg.opaque_arg' are flagged because they are raw void* usages where a const-qualified pointer (e.g., const void *) may be appropriate if the task never modifies the pointed-to data. Other pointer usages in this function are not reported because they clearly involve mutable/assignee semantics or API contracts that require non-const pointers: - OS_ObjectIdGetById(..., &token): token is an output/modified parameter (non-const). - OS_ObjectIdRelease(&token): modifies/releases token (non-const). - local is obtained from OS_OBJECT_TABLE_GET and is used with sem_wait(&local->data_sem): the semaphore (and thus the object state) is expected to be modified, so the pointer must be non-const. - OS_ConsoleOutput_Impl(&token): token is passed by address and may be consumed/modified by that API. - sem_wait(&local->data_sem): sem_wait expects a mutable semaphore pointer. - Return value 'NULL' and GlobalState usage are not pointer declarations and thus not relevant to Rule 8.13. These locations therefore do not need investigation under Rule 8.13 because const-qualification would be inappropriate or the API semantics require a non-const pointer."
}