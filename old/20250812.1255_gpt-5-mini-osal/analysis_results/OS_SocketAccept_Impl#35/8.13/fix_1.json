{
  "user_message": "<target code>Here is the code that failed to compile:\n```c\n\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    /* Probe / logging helper (kept static to limit scope). This only appends\n     * human-readable diagnostics to /tmp/logs/283.txt and does not change\n     * the function logic. */\n    static void OS_SocketAccept_Impl_Log(const char *stage,\n                                         const OS_object_token_t *sock_tok,\n                                         const OS_object_token_t *conn_tok,\n                                         const OS_impl_file_internal_record_t *sock_i,\n                                         const OS_impl_file_internal_record_t *conn_i,\n                                         uint32 op,\n                                         int32 to,\n                                         socklen_t alen,\n                                         int conn_fd,\n                                         int32 ret)\n    {\n        FILE *fp = fopen(\"/tmp/logs/283.txt\", \"a\");\n        if (fp != NULL)\n        {\n            fprintf(fp, \"[OS_SocketAccept_Impl] stage=%s\\n\", stage);\n            fprintf(fp, \"  sock_token=%p, conn_token=%p\\n\", (const void *)sock_tok, (const void *)conn_tok);\n            if (sock_i != NULL)\n            {\n                fprintf(fp, \"  sock_impl=%p: fd=%d, selectable=%u\\n\", (const void *)sock_i, (int)sock_i->fd, (unsigned)sock_i->selectable);\n            }\n            else\n            {\n                fprintf(fp, \"  sock_impl=NULL\\n\");\n            }\n            if (conn_i != NULL)\n            {\n                fprintf(fp, \"  conn_impl=%p: fd=%d\\n\", (const void *)conn_i, (int)conn_i->fd);\n            }\n            else\n            {\n                fprintf(fp, \"  conn_impl=NULL\\n\");\n            }\n            fprintf(fp, \"  operation=0x%08x, timeout=%d, addrlen=%lu, conn_fd=%d, return_code=%d\\n\\n\",\n                    (unsigned)op, (int)to, (unsigned long)alen, conn_fd, (int)ret);\n            fclose(fp);\n        }\n    }\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    /* Log initial state */\n    OS_SocketAccept_Impl_Log(\"entry\", sock_token, conn_token, sock_impl, conn_impl, 0u, timeout, 0u, -1, -999);\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        /* Log decision to call select */\n        OS_SocketAccept_Impl_Log(\"before_select\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, 0u, -1, -999);\n\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n\n        /* Log result from select */\n        OS_SocketAccept_Impl_Log(\"after_select\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, 0u, -1, return_code);\n    }\n    else\n    {\n        /* Log path when socket is not selectable */\n        OS_SocketAccept_Impl_Log(\"select_not_applicable\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, 0u, -1, OS_SUCCESS);\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            /* Log timeout condition after select */\n            OS_SocketAccept_Impl_Log(\"timeout_after_select\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, 0u, -1, OS_ERROR_TIMEOUT);\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen       = Addr->ActualLength;\n\n            /* Log state before calling accept */\n            OS_SocketAccept_Impl_Log(\"before_accept\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, addrlen, conn_impl->fd, OS_SUCCESS);\n\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n\n            /* Log result of accept (conn_impl->fd may be -1 on error) */\n            OS_SocketAccept_Impl_Log(\"after_accept\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, addrlen, conn_impl->fd, OS_SUCCESS);\n\n            if (conn_impl->fd < 0)\n            {\n                /* Log error branch */\n                OS_SocketAccept_Impl_Log(\"accept_failed\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, addrlen, conn_impl->fd, OS_ERROR);\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n\n                /* Log successful accept and final state */\n                OS_SocketAccept_Impl_Log(\"accept_success\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, addrlen, conn_impl->fd, OS_SUCCESS);\n            }\n        }\n    }\n\n    /* Log exit state */\n    OS_SocketAccept_Impl_Log(\"exit\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, Addr->ActualLength, conn_impl->fd, return_code);\n\n    return return_code;\n}\n\n```\n</target code>\n<build error>\nThe build failed with the following error:\n```\n/tmp/tmpmlofjk29/src/src/os/portable/os-impl-bsd-sockets.c: In function 'OS_SocketAccept_Impl':\n/tmp/tmpmlofjk29/src/src/os/portable/os-impl-bsd-sockets.c:442:17: error: invalid storage class for function 'OS_SocketAccept_Impl_Log'\n  442 |     static void OS_SocketAccept_Impl_Log(const char *stage,\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~\ngmake[2]: *** [posix_impl/CMakeFiles/osal_posix_impl.dir/build.make:426: posix_impl/CMakeFiles/osal_posix_impl.dir/__/portable/os-impl-bsd-sockets.c.o] Error 1\ngmake[1]: *** [CMakeFiles/Makefile2:919: posix_impl/CMakeFiles/osal_posix_impl.dir/all] Error 2\ngmake: *** [Makefile:146: all] Error 2\n```\n</build error>\n<response format>\nProvide your answer with these answers.\n- fixed_test_code: the fixed test code that compiles successfully.\n- explanation: a brief explanation of the changes you made to fix the code.\nHere are the constraints for the test code:\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- The test code MUST preserve the original logic of OS_SocketAccept_Impl as much as possible.\n- You MUST not define the main function.\n- You MUST not define macros.\n- The test code MUST not contain any mock functions.\n</response format>\n<instruction>\nPlease fix the code so that it compiles successfully.\n</instruction>\n",
  "fixed_test_code": "#include <stdio.h>\n#include <stdint.h>\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <unistd.h>\n\n/* Minimal type definitions and external declarations to allow compilation\n * while preserving the original logic of OS_SocketAccept_Impl. These are\n * intentionally lightweight and only include the fields used by the function. */\n\ntypedef int32_t int32;\ntypedef uint32_t uint32;\n\ntypedef struct\n{\n    /* token contents are opaque to this file; represented as an integer here */\n    int id;\n} OS_object_token_t;\n\ntypedef struct\n{\n    socklen_t ActualLength;\n    struct sockaddr_storage AddrData;\n} OS_SockAddr_t;\n\ntypedef struct OS_impl_file_internal_record\n{\n    int fd;\n    uint32 selectable;\n} OS_impl_file_internal_record_t;\n\n/* External table symbol (opaque here) */\nextern void *OS_impl_filehandle_table;\n\n/* The original code used a macro OS_OBJECT_TABLE_GET. Declare it as a function\n * prototype so the call sites compile as-is. Do not provide an implementation\n * here (keeps this file free of mock implementations). */\nOS_impl_file_internal_record_t *OS_OBJECT_TABLE_GET(void *table, OS_object_token_t token);\n\n/* Other external functions used by the implementation. Prototypes only. */\nint32 OS_SelectSingle_Impl(const OS_object_token_t *sock_token, uint32 *operation, int32 timeout);\nvoid OS_IMPL_SET_SOCKET_FLAGS(const OS_object_token_t *conn_token);\n\n/* Constants used by the implementation (not macros). */\nstatic const uint32 OS_STREAM_STATE_READABLE = 0x1u;\nstatic const int32 OS_SUCCESS = 0;\nstatic const int32 OS_ERROR_TIMEOUT = -1;\nstatic const int32 OS_ERROR = -2;\n\n/* Helper logging function moved to file scope (was incorrectly defined inside\n * OS_SocketAccept_Impl). Keeping it static limits its symbol visibility. */\nstatic void OS_SocketAccept_Impl_Log(const char *stage,\n                                     const OS_object_token_t *sock_tok,\n                                     const OS_object_token_t *conn_tok,\n                                     const OS_impl_file_internal_record_t *sock_i,\n                                     const OS_impl_file_internal_record_t *conn_i,\n                                     uint32 op,\n                                     int32 to,\n                                     socklen_t alen,\n                                     int conn_fd,\n                                     int32 ret)\n{\n    FILE *fp = fopen(\"/tmp/logs/283.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"[OS_SocketAccept_Impl] stage=%s\\n\", stage);\n        fprintf(fp, \"  sock_token=%p, conn_token=%p\\n\", (const void *)sock_tok, (const void *)conn_tok);\n        if (sock_i != NULL)\n        {\n            fprintf(fp, \"  sock_impl=%p: fd=%d, selectable=%u\\n\", (const void *)sock_i, (int)sock_i->fd, (unsigned)sock_i->selectable);\n        }\n        else\n        {\n            fprintf(fp, \"  sock_impl=NULL\\n\");\n        }\n        if (conn_i != NULL)\n        {\n            fprintf(fp, \"  conn_impl=%p: fd=%d\\n\", (const void *)conn_i, (int)conn_i->fd);\n        }\n        else\n        {\n            fprintf(fp, \"  conn_impl=NULL\\n\");\n        }\n        fprintf(fp, \"  operation=0x%08x, timeout=%d, addrlen=%lu, conn_fd=%d, return_code=%d\\n\\n\",\n                (unsigned)op, (int)to, (unsigned long)alen, conn_fd, (int)ret);\n        fclose(fp);\n    }\n}\n\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    /* Log initial state */\n    OS_SocketAccept_Impl_Log(\"entry\", sock_token, conn_token, sock_impl, conn_impl, 0u, timeout, 0u, -1, -999);\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        /* Log decision to call select */\n        OS_SocketAccept_Impl_Log(\"before_select\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, 0u, -1, -999);\n\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n\n        /* Log result from select */\n        OS_SocketAccept_Impl_Log(\"after_select\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, 0u, -1, return_code);\n    }\n    else\n    {\n        /* Log path when socket is not selectable */\n        OS_SocketAccept_Impl_Log(\"select_not_applicable\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, 0u, -1, OS_SUCCESS);\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            /* Log timeout condition after select */\n            OS_SocketAccept_Impl_Log(\"timeout_after_select\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, 0u, -1, OS_ERROR_TIMEOUT);\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen       = Addr->ActualLength;\n\n            /* Log state before calling accept */\n            OS_SocketAccept_Impl_Log(\"before_accept\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, addrlen, conn_impl->fd, OS_SUCCESS);\n\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n\n            /* Log result of accept (conn_impl->fd may be -1 on error) */\n            OS_SocketAccept_Impl_Log(\"after_accept\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, addrlen, conn_impl->fd, OS_SUCCESS);\n\n            if (conn_impl->fd < 0)\n            {\n                /* Log error branch */\n                OS_SocketAccept_Impl_Log(\"accept_failed\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, addrlen, conn_impl->fd, OS_ERROR);\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n\n                /* Log successful accept and final state */\n                OS_SocketAccept_Impl_Log(\"accept_success\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, addrlen, conn_impl->fd, OS_SUCCESS);\n            }\n        }\n    }\n\n    /* Log exit state */\n    OS_SocketAccept_Impl_Log(\"exit\", sock_token, conn_token, sock_impl, conn_impl, operation, timeout, Addr->ActualLength, conn_impl->fd, return_code);\n\n    return return_code;\n}\n",
  "explanation": "The compile error was caused by declaring a static function inside another function (nested function), which is invalid in standard C. I moved the helper logging function OS_SocketAccept_Impl_Log out to file scope as a static function. To make the unit self-contained and compilable, I added minimal typedefs and prototypes for the external types and functions referenced by OS_SocketAccept_Impl (but did not implement those external functions), and defined the constants used (as static const values rather than macros). No logic of OS_SocketAccept_Impl was changed other than relocating the logging helper."
}