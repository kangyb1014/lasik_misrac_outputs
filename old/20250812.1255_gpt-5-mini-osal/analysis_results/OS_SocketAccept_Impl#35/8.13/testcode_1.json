{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local pointer sock_impl is declared as a non-const OS_impl_file_internal_record_t * but is only used for read-only access (sock_impl->selectable and sock_impl->fd). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible. The assignment from OS_OBJECT_TABLE_GET (which yields a non-const pointer) can be assigned to a pointer-to-const, so the declaration should be changed to: const OS_impl_file_internal_record_t *sock_impl;\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SocketAccept_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/283.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SocketAccept_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SocketAccept_Impl:\n```c\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n    }\n    else\n    {\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen       = Addr->ActualLength;\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n            if (conn_impl->fd < 0)\n            {\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n            }\n        }\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_SocketAccept_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <stdint.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <time.h>\n#include <errno.h>\n#include <string.h>\n\n/* Probe logging helper - appends messages to /tmp/logs/283.txt */\nstatic void probe_log(const char *fmt, ...)\n{\n    FILE *fp = NULL;\n    va_list ap;\n    /* Ensure directory exists; ignore errors if it does not */\n    (void)mkdir(\"/tmp/logs\", (mode_t)0777);\n\n    fp = fopen(\"/tmp/logs/283.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return; /* best-effort logging, do not interfere with program flow */\n    }\n\n    /* Timestamp for better traceability */\n    {\n        time_t t = time(NULL);\n        struct tm tm_buf;\n        (void)localtime_r(&t, &tm_buf);\n        char timestr[64];\n        (void)strftime(timestr, sizeof(timestr), \"%Y-%m-%d %H:%M:%S\", &tm_buf);\n        fprintf(fp, \"%s - \", timestr);\n    }\n\n    va_start(ap, fmt);\n    vfprintf(fp, fmt, ap);\n    va_end(ap);\n\n    fprintf(fp, \"\\n\");\n    (void)fclose(fp);\n}\n\nint32 OS_SocketAccept_Impl(const OS_object_token_t *sock_token, const OS_object_token_t *conn_token,\n                           OS_SockAddr_t *Addr, int32 timeout)\n{\n    int32                           return_code;\n    uint32                          operation;\n    socklen_t                       addrlen;\n    OS_impl_file_internal_record_t *sock_impl;\n    OS_impl_file_internal_record_t *conn_impl;\n\n    sock_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *sock_token);\n    conn_impl = OS_OBJECT_TABLE_GET(OS_impl_filehandle_table, *conn_token);\n\n    /* Log retrieved implementation pointers and key fields that are read-only in the function */\n    probe_log(\"OS_SocketAccept_Impl: sock_token=%p, conn_token=%p, sock_impl=%p, conn_impl=%p\",\n              (const void *)sock_token, (const void *)conn_token, (const void *)sock_impl, (const void *)conn_impl);\n\n    if (sock_impl != NULL)\n    {\n        probe_log(\"sock_impl->selectable=%d, sock_impl->fd=%d\",\n                  (int)(sock_impl->selectable), (int)(sock_impl->fd));\n    }\n    else\n    {\n        probe_log(\"sock_impl is NULL\");\n    }\n\n    operation = OS_STREAM_STATE_READABLE;\n    if (sock_impl->selectable)\n    {\n        probe_log(\"sock_impl selectable: calling OS_SelectSingle_Impl with timeout=%d and operation=0x%08x\",\n                  (int)timeout, (unsigned int)operation);\n\n        return_code = OS_SelectSingle_Impl(sock_token, &operation, timeout);\n\n        probe_log(\"OS_SelectSingle_Impl returned %d; operation after select=0x%08x\",\n                  (int)return_code, (unsigned int)operation);\n    }\n    else\n    {\n        probe_log(\"sock_impl not selectable: skipping select\");\n        return_code = OS_SUCCESS;\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        if ((operation & OS_STREAM_STATE_READABLE) == 0)\n        {\n            probe_log(\"Operation not readable after select: operation=0x%08x -> timeout\", (unsigned int)operation);\n            return_code = OS_ERROR_TIMEOUT;\n        }\n        else\n        {\n            addrlen       = Addr->ActualLength;\n            probe_log(\"Before accept: Addr=%p, Addr->ActualLength=%u, addrlen=%u\",\n                      (const void *)Addr, (unsigned int)Addr->ActualLength, (unsigned int)addrlen);\n\n            conn_impl->fd = accept(sock_impl->fd, (struct sockaddr *)&Addr->AddrData, &addrlen);\n\n            probe_log(\"accept returned fd=%d (errno=%d: %s)\", conn_impl->fd, errno, strerror(errno));\n\n            if (conn_impl->fd < 0)\n            {\n                probe_log(\"accept failed: setting return_code=OS_ERROR\");\n                return_code = OS_ERROR;\n            }\n            else\n            {\n                Addr->ActualLength = addrlen;\n                probe_log(\"accept succeeded: new conn_impl->fd=%d, Addr->ActualLength=%u\",\n                          (int)conn_impl->fd, (unsigned int)Addr->ActualLength);\n\n                OS_IMPL_SET_SOCKET_FLAGS(conn_token);\n                probe_log(\"OS_IMPL_SET_SOCKET_FLAGS called for conn_token=%p\", (const void *)conn_token);\n            }\n        }\n    }\n    else\n    {\n        probe_log(\"Return code non-success prior to accept: %d\", (int)return_code);\n    }\n\n    probe_log(\"OS_SocketAccept_Impl exiting with return_code=%d\", (int)return_code);\n\n    return return_code;\n}\n"
}