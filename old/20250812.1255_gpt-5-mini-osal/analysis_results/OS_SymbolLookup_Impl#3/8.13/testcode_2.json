{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe local variable 'Function' is declared as void * and assigned from dlsym(dl_handle, SymbolName), but it is only used for inspection (stored into SymbolAddress as an integer) and not used to modify the pointed-to object. Therefore it could be declared as const void *Function (or another const-qualified pointer type). This fails MISRA C 2023 Rule 8.13 which requires pointers to be const-qualified whenever possible.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_SymbolLookup_Impl code that contains useful probe functions that print useful logs to a file \"/tmp/logs/27.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_SymbolLookup_Impl as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_SymbolLookup_Impl:\n```c\nint32 OS_SymbolLookup_Impl(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32            status;\n    int32            local_status;\n    OS_object_iter_t iter;\n\n    /* First search global table */\n    status = OS_GenericSymbolLookup_Impl(OSAL_DLSYM_DEFAULT_HANDLE, SymbolAddress, SymbolName);\n\n    /* If not found iterate through module local symbols and break if found */\n    if (status != OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(OS_OBJECT_TYPE_OS_MODULE, &iter);\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            local_status = OS_ModuleSymbolLookup_Impl(&iter.token, SymbolAddress, SymbolName);\n            if (local_status == OS_SUCCESS)\n            {\n                status = local_status;\n                break;\n            }\n        }\n        OS_ObjectIdIteratorDestroy(&iter);\n    }\n\n    return status;\n}\n```\n</target_code>\nPlease provide the modified OS_SymbolLookup_Impl code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <time.h>\n#include <stdint.h>\n#include <errno.h>\n#include <string.h>\n\n/*\n * Probe/log helper: append a formatted log line to /tmp/logs/27.txt\n * Uses only const-qualified pointer parameters where applicable.\n */\nstatic void OS_SymbolLookup_Log(const char *stage, const char * const SymbolName, const void * const SymbolAddress_ptr, const void * const iter_token_ptr, int32_t status, int32_t local_status)\n{\n    FILE *f = fopen(\"/tmp/logs/27.txt\", \"a\");\n    if (f == NULL)\n    {\n        /* Best-effort: if logging fails, do not disturb normal operation. */\n        return;\n    }\n\n    time_t t = time(NULL);\n    if (t == (time_t)(-1))\n    {\n        fprintf(f, \"[UNKNOWN_TIME]\");\n    }\n    else\n    {\n        /* Print epoch seconds for portability and simplicity */\n        fprintf(f, \"[%ld]\", (long)t);\n    }\n\n    fprintf(f, \" %s: SymbolName=%s, SymbolAddress_ptr=%p, iter_token_ptr=%p, status=%d, local_status=%d\\n\",\n            (stage != NULL ? stage : \"(null)\"),\n            (SymbolName != NULL ? SymbolName : \"(null)\"),\n            SymbolAddress_ptr,\n            iter_token_ptr,\n            (int)status,\n            (int)local_status);\n\n    fclose(f);\n}\n\n/*\n * Modified OS_SymbolLookup_Impl with inserted probes. The original logic is preserved.\n * Note: types like int32, cpuaddr, OS_object_iter_t are assumed to be defined elsewhere\n * in the project. This snippet uses only local helper logging and does not add a main.\n */\nint32 OS_SymbolLookup_Impl(cpuaddr *SymbolAddress, const char *SymbolName)\n{\n    int32            status;\n    int32            local_status;\n    OS_object_iter_t iter;\n\n    /* Log entry with pointer to SymbolAddress and name */\n    OS_SymbolLookup_Log(\"ENTRY\", SymbolName, (const void *)SymbolAddress, NULL, -1, -1);\n\n    /* First search global table */\n    status = OS_GenericSymbolLookup_Impl(OSAL_DLSYM_DEFAULT_HANDLE, SymbolAddress, SymbolName);\n\n    /* Log result of global lookup; if success also log the resolved address value */\n    if (status == OS_SUCCESS)\n    {\n        /* Print the resolved symbol address value (cast to integer of known width) */\n        OS_SymbolLookup_Log(\"GLOBAL_FOUND\", SymbolName, (const void *)SymbolAddress, NULL, status, -1);\n    }\n    else\n    {\n        OS_SymbolLookup_Log(\"GLOBAL_NOT_FOUND\", SymbolName, (const void *)SymbolAddress, NULL, status, -1);\n    }\n\n    /* If not found iterate through module local symbols and break if found */\n    if (status != OS_SUCCESS)\n    {\n        OS_ObjectIdIterateActive(OS_OBJECT_TYPE_OS_MODULE, &iter);\n\n        /* Log that iteration started; provide address of iterator object */\n        OS_SymbolLookup_Log(\"ITERATE_START\", SymbolName, (const void *)SymbolAddress, (const void *)&iter, status, -1);\n\n        while (OS_ObjectIdIteratorGetNext(&iter))\n        {\n            /* Log token pointer about to be used for lookup */\n            OS_SymbolLookup_Log(\"ITER_NEXT\", SymbolName, (const void *)SymbolAddress, (const void *)&iter.token, status, -1);\n\n            local_status = OS_ModuleSymbolLookup_Impl(&iter.token, SymbolAddress, SymbolName);\n\n            /* Log result of per-module lookup; if found, also log resolved address */\n            if (local_status == OS_SUCCESS)\n            {\n                OS_SymbolLookup_Log(\"MODULE_FOUND\", SymbolName, (const void *)SymbolAddress, (const void *)&iter.token, status, local_status);\n\n                status = local_status;\n                break;\n            }\n            else\n            {\n                OS_SymbolLookup_Log(\"MODULE_NOT_FOUND\", SymbolName, (const void *)SymbolAddress, (const void *)&iter.token, status, local_status);\n            }\n        }\n\n        OS_ObjectIdIteratorDestroy(&iter);\n\n        /* Log iteration end */\n        OS_SymbolLookup_Log(\"ITERATE_END\", SymbolName, (const void *)SymbolAddress, NULL, status, -1);\n    }\n\n    /* Final exit log */\n    OS_SymbolLookup_Log(\"EXIT\", SymbolName, (const void *)SymbolAddress, NULL, status, -1);\n\n    return status;\n}\n"
}