{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of OS_CondVarLock_Impl:\n```c\nint32 OS_CondVarLock_Impl(const OS_object_token_t *token)\n{\n    int                                status;\n    OS_impl_condvar_internal_record_t *impl;\n\n    impl = OS_OBJECT_TABLE_GET(OS_impl_condvar_table, *token);\n\n    status = pthread_mutex_lock(&impl->mut);\n    if (status != 0)\n    {\n        return OS_ERROR;\n    }\n\n    return OS_SUCCESS;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function OS_CondVarLock_Impl:\ntypedef struct OS_object_token OS_object_token_t\n...\n#define OS_OBJECT_TABLE_GET(tbl, tok) (&tbl[OS_ObjectIndexFromToken(&(tok))])\n...\ntypedef struct\n{\n    pthread_mutex_t mut;\n    pthread_cond_t  cv;\n} OS_impl_condvar_internal_record_t\n...\nOS_impl_condvar_internal_record_t OS_impl_condvar_table[OS_MAX_CONDVARS]\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nOS_impl_condvar_internal_record_t OS_impl_condvar_table[OS_MAX_CONDVARS]\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. OS_impl_condvar_table is intentionally mutable: it contains pthread_mutex_t and pthread_cond_t whose state is modified (e.g. pthread_mutex_lock(&impl->mut)). The pointer returned by OS_OBJECT_TABLE_GET is used to modify the object, so the pointed-to type must not be const. Rule 8.13 (pointers should point to const-qualified types when possible) is therefore not applicable here. A violation would occur if a pointer were non-const while the function only performed read-only access to the pointee (i.e. the pointee could and should have been declared const)."
}