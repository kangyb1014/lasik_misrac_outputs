{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 2.2.\nHere is the comment from the agent.\n<violation scenario>\nThe switch(idtype) covers specific object-type constants but iterates idtype from 0 up to OS_OBJECT_TYPE_USER-1 (0..15). For any idtype value that does not match a case (for example idtype == 0), the default: break; is executed but performs no action. Removing this default (or its break) does not change program behaviour because control would simply continue after the switch in the same way. Therefore the default: break; is an executed no-op whose removal would not affect behaviour and thus constitutes dead code under MISRA C 2023 Rule 2.2.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_API_Init code that contains useful probe functions that print useful logs to a file \"/tmp/logs/10.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_API_Init as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_API_Init:\n```c\nint32 OS_API_Init(void)\n{\n    int32          return_code = OS_SUCCESS;\n    osal_objtype_t idtype;\n    uint32         microSecPerSec;\n\n    /*\n     * If OSAL is already initialized, not really a big issue, just return.\n     * This is not typically expected though, so its worth a debug statement.\n     *\n     * However this can validly occur when running tests on some platforms\n     * without a reset/reload between invocations.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_INIT_MAGIC_NUMBER)\n    {\n        OS_DEBUG(\"NOTE: ignored redundant OS_API_Init() call\\n\");\n        return OS_SUCCESS;\n    }\n\n    /* Wipe global state structure to be sure everything is clean */\n    memset(&OS_SharedGlobalVars, 0, sizeof(OS_SharedGlobalVars));\n\n    /* Reset debug to default level if enabled */\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    OS_SharedGlobalVars.DebugLevel = 1;\n#endif\n\n    /* Set flag that says OSAL has been initialized */\n    OS_SharedGlobalVars.GlobalState = OS_INIT_MAGIC_NUMBER;\n\n    /* Initialize the common table that everything shares */\n    return_code = OS_ObjectIdInit();\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    for (idtype = 0; idtype < OS_OBJECT_TYPE_USER; ++idtype)\n    {\n        /* Initialize the implementation first, as the shared layer depends on it */\n        return_code = OS_API_Impl_Init(idtype);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n\n        switch (idtype)\n        {\n            case OS_OBJECT_TYPE_OS_TASK:\n                return_code = OS_TaskAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_QUEUE:\n                return_code = OS_QueueAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_BINSEM:\n                return_code = OS_BinSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_COUNTSEM:\n                return_code = OS_CountSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MUTEX:\n                return_code = OS_MutexAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MODULE:\n                return_code = OS_ModuleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMEBASE:\n                return_code = OS_TimeBaseAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMECB:\n                return_code = OS_TimerCbAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_STREAM:\n                return_code = OS_FileAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_DIR:\n                return_code = OS_DirAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_FILESYS:\n                return_code = OS_FileSysAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONSOLE:\n                return_code = OS_ConsoleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONDVAR:\n                return_code = OS_CondVarAPI_Init();\n                break;\n            default:\n                break;\n        }\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"ID type 0x%x shared layer failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_NetworkAPI_Init();\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketAPI_Init();\n    }\n\n    /*\n     * Confirm that somewhere during initialization,\n     * the time variables got set to something valid\n     */\n    if (return_code == OS_SUCCESS &&\n        (OS_SharedGlobalVars.MicroSecPerTick == 0 || OS_SharedGlobalVars.TicksPerSecond == 0))\n    {\n        OS_DEBUG(\"Implementation failed to initialize tick time globals\\n\");\n        return_code = OS_ERROR;\n    }\n\n    microSecPerSec = OS_SharedGlobalVars.MicroSecPerTick * OS_SharedGlobalVars.TicksPerSecond;\n\n    if (microSecPerSec != 1000000)\n    {\n        OS_DEBUG(\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   \"\n                 \"TicksPerSecond: %ld)\\n\",\n                 (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                 (long)OS_SharedGlobalVars.TicksPerSecond);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /*\n         * Some part of init failed, so set global flag that says OSAL is in shutdown state.\n         *\n         * In particular if certain internal resources (such as the console utility task)\n         * were created, this should cause those tasks to self-exit such that the system\n         * is ultimately returned to the same state it started in.\n         */\n        OS_SharedGlobalVars.GlobalState = OS_SHUTDOWN_MAGIC_NUMBER;\n    }\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_API_Init code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/* Probe helper: append logs to /tmp/logs/10.txt. Does not alter program state. */\nstatic void OS_LogProbe(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/10.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fprintf(f, \"\\n\");\n    fflush(f);\n    fclose(f);\n}\n\nint32 OS_API_Init(void)\n{\n    int32          return_code = OS_SUCCESS;\n    osal_objtype_t idtype;\n    uint32         microSecPerSec;\n\n    /* Log entry and current global state */\n    OS_LogProbe(\"OS_API_Init: entry. GlobalState=0x%X\", (unsigned int)OS_SharedGlobalVars.GlobalState);\n\n    /*\n     * If OSAL is already initialized, not really a big issue, just return.\n     * This is not typically expected though, so its worth a debug statement.\n     *\n     * However this can validly occur when running tests on some platforms\n     * without a reset/reload between invocations.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_INIT_MAGIC_NUMBER)\n    {\n        OS_DEBUG(\"NOTE: ignored redundant OS_API_Init() call\\n\");\n        OS_LogProbe(\"OS_API_Init: redundant call detected; returning OS_SUCCESS\");\n        return OS_SUCCESS;\n    }\n\n    /* Wipe global state structure to be sure everything is clean */\n    memset(&OS_SharedGlobalVars, 0, sizeof(OS_SharedGlobalVars));\n    OS_LogProbe(\"OS_API_Init: cleared OS_SharedGlobalVars\");\n\n    /* Reset debug to default level if enabled */\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    OS_SharedGlobalVars.DebugLevel = 1;\n    OS_LogProbe(\"OS_API_Init: DebugLevel set to 1\");\n#endif\n\n    /* Set flag that says OSAL has been initialized */\n    OS_SharedGlobalVars.GlobalState = OS_INIT_MAGIC_NUMBER;\n    OS_LogProbe(\"OS_API_Init: GlobalState set to OS_INIT_MAGIC_NUMBER (0x%X)\", (unsigned int)OS_SharedGlobalVars.GlobalState);\n\n    /* Initialize the common table that everything shares */\n    return_code = OS_ObjectIdInit();\n    OS_LogProbe(\"OS_API_Init: OS_ObjectIdInit() returned %d\", (int)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        OS_LogProbe(\"OS_API_Init: aborting due to ObjectIdInit failure: %d\", (int)return_code);\n        return return_code;\n    }\n\n    for (idtype = 0; idtype < OS_OBJECT_TYPE_USER; ++idtype)\n    {\n        OS_LogProbe(\"OS_API_Init: loop idtype=0x%X\", (unsigned int)idtype);\n\n        /* Initialize the implementation first, as the shared layer depends on it */\n        return_code = OS_API_Impl_Init(idtype);\n        OS_LogProbe(\"OS_API_Init: OS_API_Impl_Init(0x%X) returned %d\", (unsigned int)idtype, (int)return_code);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            OS_LogProbe(\"OS_API_Init: OS_API_Impl_Init failed for idtype=0x%X -> %d\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n\n        OS_LogProbe(\"OS_API_Init: entering switch for idtype=0x%X\", (unsigned int)idtype);\n        switch (idtype)\n        {\n            case OS_OBJECT_TYPE_OS_TASK:\n                OS_LogProbe(\"OS_API_Init: case OS_OBJECT_TYPE_OS_TASK (0x%X)\", (unsigned int)idtype);\n                return_code = OS_TaskAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_QUEUE:\n                OS_LogProbe(\"OS_API_Init: case OS_OBJECT_TYPE_OS_QUEUE (0x%X)\", (unsigned int)idtype);\n                return_code = OS_QueueAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_BINSEM:\n                OS_LogProbe(\"OS_API_Init: case OS_OBJECT_TYPE_OS_BINSEM (0x%X)\", (unsigned int)idtype);\n                return_code = OS_BinSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_COUNTSEM:\n                OS_LogProbe(\"OS_API_Init: case OS_OBJECT_TYPE_OS_COUNTSEM (0x%X)\", (unsigned int)idtype);\n                return_code = OS_CountSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MUTEX:\n                OS_LogProbe(\"OS_API_Init: case OS_OBJECT_TYPE_OS_MUTEX (0x%X)\", (unsigned int)idtype);\n                return_code = OS_MutexAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MODULE:\n                OS_LogProbe(\"OS_API_Init: case OS_OBJECT_TYPE_OS_MODULE (0x%X)\", (unsigned int)idtype);\n                return_code = OS_ModuleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMEBASE:\n                OS_LogProbe(\"OS_API_Init: case OS_OBJECT_TYPE_OS_TIMEBASE (0x%X)\", (unsigned int)idtype);\n                return_code = OS_TimeBaseAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMECB:\n                OS_LogProbe(\"OS_API_Init: case OS_OBJECT_TYPE_OS_TIMECB (0x%X)\", (unsigned int)idtype);\n                return_code = OS_TimerCbAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_STREAM:\n                OS_LogProbe(\"OS_API_Init: case OS_OBJECT_TYPE_OS_STREAM (0x%X)\", (unsigned int)idtype);\n                return_code = OS_FileAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_DIR:\n                OS_LogProbe(\"OS_API_Init: case OS_OBJECT_TYPE_OS_DIR (0x%X)\", (unsigned int)idtype);\n                return_code = OS_DirAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_FILESYS:\n                OS_LogProbe(\"OS_API_Init: case OS_OBJECT_TYPE_OS_FILESYS (0x%X)\", (unsigned int)idtype);\n                return_code = OS_FileSysAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONSOLE:\n                OS_LogProbe(\"OS_API_Init: case OS_OBJECT_TYPE_OS_CONSOLE (0x%X)\", (unsigned int)idtype);\n                return_code = OS_ConsoleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONDVAR:\n                OS_LogProbe(\"OS_API_Init: case OS_OBJECT_TYPE_OS_CONDVAR (0x%X)\", (unsigned int)idtype);\n                return_code = OS_CondVarAPI_Init();\n                break;\n            default:\n                /* Log when default (no matching case) is executed so this executed no-op is visible in logs */\n                OS_LogProbe(\"OS_API_Init: default branch taken for idtype=0x%X (no API init called)\", (unsigned int)idtype);\n                break;\n        }\n        OS_LogProbe(\"OS_API_Init: after switch idtype=0x%X return_code=%d\", (unsigned int)idtype, (int)return_code);\n\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"ID type 0x%x shared layer failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            OS_LogProbe(\"OS_API_Init: aborting loop due to failure idtype=0x%X -> %d\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n    }\n\n    OS_LogProbe(\"OS_API_Init: loop complete, return_code=%d\", (int)return_code);\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_LogProbe(\"OS_API_Init: calling OS_NetworkAPI_Init\");\n        return_code = OS_NetworkAPI_Init();\n        OS_LogProbe(\"OS_API_Init: OS_NetworkAPI_Init() returned %d\", (int)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_LogProbe(\"OS_API_Init: calling OS_SocketAPI_Init\");\n        return_code = OS_SocketAPI_Init();\n        OS_LogProbe(\"OS_API_Init: OS_SocketAPI_Init() returned %d\", (int)return_code);\n    }\n\n    /*\n     * Confirm that somewhere during initialization,\n     * the time variables got set to something valid\n     */\n    if (return_code == OS_SUCCESS &&\n        (OS_SharedGlobalVars.MicroSecPerTick == 0 || OS_SharedGlobalVars.TicksPerSecond == 0))\n    {\n        OS_DEBUG(\"Implementation failed to initialize tick time globals\\n\");\n        OS_LogProbe(\"OS_API_Init: tick globals invalid MicroSecPerTick=%ld TicksPerSecond=%ld\",\n                    (long)OS_SharedGlobalVars.MicroSecPerTick, (long)OS_SharedGlobalVars.TicksPerSecond);\n        return_code = OS_ERROR;\n    }\n\n    microSecPerSec = OS_SharedGlobalVars.MicroSecPerTick * OS_SharedGlobalVars.TicksPerSecond;\n\n    if (microSecPerSec != 1000000)\n    {\n        OS_DEBUG(\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   \"\n                 \"TicksPerSecond: %ld)\\n\",\n                 (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                 (long)OS_SharedGlobalVars.TicksPerSecond);\n        OS_LogProbe(\"OS_API_Init: MicroSecPerTick=%ld TicksPerSecond=%ld microSecPerSec=%lu (expected 1000000)\",\n                    (long)OS_SharedGlobalVars.MicroSecPerTick, (long)OS_SharedGlobalVars.TicksPerSecond,\n                    (unsigned long)microSecPerSec);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /*\n         * Some part of init failed, so set global flag that says OSAL is in shutdown state.\n         *\n         * In particular if certain internal resources (such as the console utility task)\n         * were created, this should cause those tasks to self-exit such that the system\n         * is ultimately returned to the same state it started in.\n         */\n        OS_SharedGlobalVars.GlobalState = OS_SHUTDOWN_MAGIC_NUMBER;\n        OS_LogProbe(\"OS_API_Init: setting GlobalState to OS_SHUTDOWN_MAGIC_NUMBER (0x%X) due to failure -> %d\",\n                    (unsigned int)OS_SharedGlobalVars.GlobalState, (int)return_code);\n    }\n\n    OS_LogProbe(\"OS_API_Init: exit with return_code=%d\", (int)return_code);\n    return return_code;\n}\n"
}