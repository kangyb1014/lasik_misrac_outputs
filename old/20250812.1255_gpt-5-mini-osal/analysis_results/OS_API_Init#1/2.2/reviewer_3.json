{
  "user_message": "An agent A claimed that the following OS_API_Init code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code..\n</misra_rule>\n<target_code>\nHere is the original code of OS_API_Init.\n```c\nint32 OS_API_Init(void)\n{\n    int32          return_code = OS_SUCCESS;\n    osal_objtype_t idtype;\n    uint32         microSecPerSec;\n\n    /*\n     * If OSAL is already initialized, not really a big issue, just return.\n     * This is not typically expected though, so its worth a debug statement.\n     *\n     * However this can validly occur when running tests on some platforms\n     * without a reset/reload between invocations.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_INIT_MAGIC_NUMBER)\n    {\n        OS_DEBUG(\"NOTE: ignored redundant OS_API_Init() call\\n\");\n        return OS_SUCCESS;\n    }\n\n    /* Wipe global state structure to be sure everything is clean */\n    memset(&OS_SharedGlobalVars, 0, sizeof(OS_SharedGlobalVars));\n\n    /* Reset debug to default level if enabled */\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    OS_SharedGlobalVars.DebugLevel = 1;\n#endif\n\n    /* Set flag that says OSAL has been initialized */\n    OS_SharedGlobalVars.GlobalState = OS_INIT_MAGIC_NUMBER;\n\n    /* Initialize the common table that everything shares */\n    return_code = OS_ObjectIdInit();\n    if (return_code != OS_SUCCESS)\n    {\n        return return_code;\n    }\n\n    for (idtype = 0; idtype < OS_OBJECT_TYPE_USER; ++idtype)\n    {\n        /* Initialize the implementation first, as the shared layer depends on it */\n        return_code = OS_API_Impl_Init(idtype);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n\n        switch (idtype)\n        {\n            case OS_OBJECT_TYPE_OS_TASK:\n                return_code = OS_TaskAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_QUEUE:\n                return_code = OS_QueueAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_BINSEM:\n                return_code = OS_BinSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_COUNTSEM:\n                return_code = OS_CountSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MUTEX:\n                return_code = OS_MutexAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MODULE:\n                return_code = OS_ModuleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMEBASE:\n                return_code = OS_TimeBaseAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMECB:\n                return_code = OS_TimerCbAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_STREAM:\n                return_code = OS_FileAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_DIR:\n                return_code = OS_DirAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_FILESYS:\n                return_code = OS_FileSysAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONSOLE:\n                return_code = OS_ConsoleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONDVAR:\n                return_code = OS_CondVarAPI_Init();\n                break;\n            default:\n                break;\n        }\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"ID type 0x%x shared layer failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_NetworkAPI_Init();\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        return_code = OS_SocketAPI_Init();\n    }\n\n    /*\n     * Confirm that somewhere during initialization,\n     * the time variables got set to something valid\n     */\n    if (return_code == OS_SUCCESS &&\n        (OS_SharedGlobalVars.MicroSecPerTick == 0 || OS_SharedGlobalVars.TicksPerSecond == 0))\n    {\n        OS_DEBUG(\"Implementation failed to initialize tick time globals\\n\");\n        return_code = OS_ERROR;\n    }\n\n    microSecPerSec = OS_SharedGlobalVars.MicroSecPerTick * OS_SharedGlobalVars.TicksPerSecond;\n\n    if (microSecPerSec != 1000000)\n    {\n        OS_DEBUG(\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   \"\n                 \"TicksPerSecond: %ld)\\n\",\n                 (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                 (long)OS_SharedGlobalVars.TicksPerSecond);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /*\n         * Some part of init failed, so set global flag that says OSAL is in shutdown state.\n         *\n         * In particular if certain internal resources (such as the console utility task)\n         * were created, this should cause those tasks to self-exit such that the system\n         * is ultimately returned to the same state it started in.\n         */\n        OS_SharedGlobalVars.GlobalState = OS_SHUTDOWN_MAGIC_NUMBER;\n    }\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The switch(idtype) handles specific id type case labels for values 0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D while the loop iterates idtype from 0 up to (but not including) OS_OBJECT_TYPE_USER (0x10). For idtype values that are not one of the case labels (e.g. 0x00, 0x0E, 0x0F) execution will take the default branch and execute the single statement \"break;\". Removing the default: break; statement would not change program behaviour (control would still continue after the switch), so this executed statement is redundant dead code.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_Probe_Log(const char *fmt, ...)\n{\n    FILE *f;\n    va_list ap;\n\n    /* Ensure directory exists - ignore errors if it does not work */\n    (void)mkdir(\"/tmp/logs\", 0777);\n\n    f = fopen(\"/tmp/logs/10.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n    fprintf(f, \"\\n\");\n    fclose(f);\n}\n\nint32 OS_API_Init(void)\n{\n    int32          return_code = OS_SUCCESS;\n    osal_objtype_t idtype;\n    uint32         microSecPerSec;\n\n    OS_Probe_Log(\"OS_API_Init(): ENTRY GlobalState=0x%lX\", (long)OS_SharedGlobalVars.GlobalState);\n\n    /*\n     * If OSAL is already initialized, not really a big issue, just return.\n     * This is not typically expected though, so its worth a debug statement.\n     *\n     * However this can validly occur when running tests on some platforms\n     * without a reset/reload between invocations.\n     */\n    if (OS_SharedGlobalVars.GlobalState == OS_INIT_MAGIC_NUMBER)\n    {\n        OS_DEBUG(\"NOTE: ignored redundant OS_API_Init() call\\n\");\n        OS_Probe_Log(\"OS_API_Init(): redundant call detected, returning OS_SUCCESS\");\n        return OS_SUCCESS;\n    }\n\n    /* Wipe global state structure to be sure everything is clean */\n    memset(&OS_SharedGlobalVars, 0, sizeof(OS_SharedGlobalVars));\n    OS_Probe_Log(\"OS_API_Init(): cleared OS_SharedGlobalVars\\n\");\n\n    /* Reset debug to default level if enabled */\n#if defined(OSAL_CONFIG_DEBUG_PRINTF)\n    OS_SharedGlobalVars.DebugLevel = 1;\n    OS_Probe_Log(\"OS_API_Init(): DebugLevel set to default (1)\");\n#endif\n\n    /* Set flag that says OSAL has been initialized */\n    OS_SharedGlobalVars.GlobalState = OS_INIT_MAGIC_NUMBER;\n    OS_Probe_Log(\"OS_API_Init(): GlobalState set to OS_INIT_MAGIC_NUMBER\\n\");\n\n    /* Initialize the common table that everything shares */\n    return_code = OS_ObjectIdInit();\n    OS_Probe_Log(\"OS_API_Init(): OS_ObjectIdInit() returned %d\", (int)return_code);\n    if (return_code != OS_SUCCESS)\n    {\n        OS_Probe_Log(\"OS_API_Init(): aborting due to OS_ObjectIdInit failure: %d\", (int)return_code);\n        return return_code;\n    }\n\n    for (idtype = 0; idtype < OS_OBJECT_TYPE_USER; ++idtype)\n    {\n        OS_Probe_Log(\"OS_API_Init(): starting init for idtype=0x%02x\", (unsigned int)idtype);\n\n        /* Initialize the implementation first, as the shared layer depends on it */\n        return_code = OS_API_Impl_Init(idtype);\n        OS_Probe_Log(\"OS_API_Init(): OS_API_Impl_Init(0x%02x) returned %d\", (unsigned int)idtype, (int)return_code);\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"OS_API_Impl_Init(0x%x) failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            OS_Probe_Log(\"OS_API_Init(): OS_API_Impl_Init failed for idtype=0x%02x, breaking loop\", (unsigned int)idtype);\n            break;\n        }\n\n        switch (idtype)\n        {\n            case OS_OBJECT_TYPE_OS_TASK:\n                OS_Probe_Log(\"OS_API_Init(): case OS_OBJECT_TYPE_OS_TASK (0x%02x)\", (unsigned int)idtype);\n                return_code = OS_TaskAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_QUEUE:\n                OS_Probe_Log(\"OS_API_Init(): case OS_OBJECT_TYPE_OS_QUEUE (0x%02x)\", (unsigned int)idtype);\n                return_code = OS_QueueAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_BINSEM:\n                OS_Probe_Log(\"OS_API_Init(): case OS_OBJECT_TYPE_OS_BINSEM (0x%02x)\", (unsigned int)idtype);\n                return_code = OS_BinSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_COUNTSEM:\n                OS_Probe_Log(\"OS_API_Init(): case OS_OBJECT_TYPE_OS_COUNTSEM (0x%02x)\", (unsigned int)idtype);\n                return_code = OS_CountSemAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MUTEX:\n                OS_Probe_Log(\"OS_API_Init(): case OS_OBJECT_TYPE_OS_MUTEX (0x%02x)\", (unsigned int)idtype);\n                return_code = OS_MutexAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_MODULE:\n                OS_Probe_Log(\"OS_API_Init(): case OS_OBJECT_TYPE_OS_MODULE (0x%02x)\", (unsigned int)idtype);\n                return_code = OS_ModuleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMEBASE:\n                OS_Probe_Log(\"OS_API_Init(): case OS_OBJECT_TYPE_OS_TIMEBASE (0x%02x)\", (unsigned int)idtype);\n                return_code = OS_TimeBaseAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_TIMECB:\n                OS_Probe_Log(\"OS_API_Init(): case OS_OBJECT_TYPE_OS_TIMECB (0x%02x)\", (unsigned int)idtype);\n                return_code = OS_TimerCbAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_STREAM:\n                OS_Probe_Log(\"OS_API_Init(): case OS_OBJECT_TYPE_OS_STREAM (0x%02x)\", (unsigned int)idtype);\n                return_code = OS_FileAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_DIR:\n                OS_Probe_Log(\"OS_API_Init(): case OS_OBJECT_TYPE_OS_DIR (0x%02x)\", (unsigned int)idtype);\n                return_code = OS_DirAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_FILESYS:\n                OS_Probe_Log(\"OS_API_Init(): case OS_OBJECT_TYPE_OS_FILESYS (0x%02x)\", (unsigned int)idtype);\n                return_code = OS_FileSysAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONSOLE:\n                OS_Probe_Log(\"OS_API_Init(): case OS_OBJECT_TYPE_OS_CONSOLE (0x%02x)\", (unsigned int)idtype);\n                return_code = OS_ConsoleAPI_Init();\n                break;\n            case OS_OBJECT_TYPE_OS_CONDVAR:\n                OS_Probe_Log(\"OS_API_Init(): case OS_OBJECT_TYPE_OS_CONDVAR (0x%02x)\", (unsigned int)idtype);\n                return_code = OS_CondVarAPI_Init();\n                break;\n            default:\n                /* Probe the default branch so execution of this \"no-op\" default is recorded. */\n                OS_Probe_Log(\"OS_API_Init(): default branch executed for idtype=0x%02x - no per-type init\", (unsigned int)idtype);\n                break;\n        }\n        OS_Probe_Log(\"OS_API_Init(): after switch for idtype=0x%02x, return_code=%d\", (unsigned int)idtype, (int)return_code);\n\n        if (return_code != OS_SUCCESS)\n        {\n            OS_DEBUG(\"ID type 0x%x shared layer failed to initialize: %d\\n\", (unsigned int)idtype, (int)return_code);\n            OS_Probe_Log(\"OS_API_Init(): shared layer init failed for idtype=0x%02x, breaking loop\", (unsigned int)idtype);\n            break;\n        }\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_Probe_Log(\"OS_API_Init(): calling OS_NetworkAPI_Init()\");\n        return_code = OS_NetworkAPI_Init();\n        OS_Probe_Log(\"OS_API_Init(): OS_NetworkAPI_Init() returned %d\", (int)return_code);\n    }\n\n    if (return_code == OS_SUCCESS)\n    {\n        OS_Probe_Log(\"OS_API_Init(): calling OS_SocketAPI_Init()\");\n        return_code = OS_SocketAPI_Init();\n        OS_Probe_Log(\"OS_API_Init(): OS_SocketAPI_Init() returned %d\", (int)return_code);\n    }\n\n    /*\n     * Confirm that somewhere during initialization,\n     * the time variables got set to something valid\n     */\n    if (return_code == OS_SUCCESS &&\n        (OS_SharedGlobalVars.MicroSecPerTick == 0 || OS_SharedGlobalVars.TicksPerSecond == 0))\n    {\n        OS_DEBUG(\"Implementation failed to initialize tick time globals\\n\");\n        OS_Probe_Log(\"OS_API_Init(): tick globals invalid MicroSecPerTick=%ld TicksPerSecond=%ld\",\n                     (long)OS_SharedGlobalVars.MicroSecPerTick, (long)OS_SharedGlobalVars.TicksPerSecond);\n        return_code = OS_ERROR;\n    }\n\n    microSecPerSec = OS_SharedGlobalVars.MicroSecPerTick * OS_SharedGlobalVars.TicksPerSecond;\n\n    if (microSecPerSec != 1000000)\n    {\n        OS_DEBUG(\"Warning: Microsecs per sec value of %lu does not equal 1000000 (MicroSecPerTick: %ld   \"\n                 \"TicksPerSecond: %ld)\\n\",\n                 (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                 (long)OS_SharedGlobalVars.TicksPerSecond);\n        OS_Probe_Log(\"OS_API_Init(): microSecPerSec=%lu (MicroSecPerTick=%ld, TicksPerSecond=%ld)\",\n                     (unsigned long)microSecPerSec, (long)OS_SharedGlobalVars.MicroSecPerTick,\n                     (long)OS_SharedGlobalVars.TicksPerSecond);\n    }\n\n    if (return_code != OS_SUCCESS)\n    {\n        /*\n         * Some part of init failed, so set global flag that says OSAL is in shutdown state.\n         *\n         * In particular if certain internal resources (such as the console utility task)\n         * were created, this should cause those tasks to self-exit such that the system\n         * is ultimately returned to the same state it started in.\n         */\n        OS_SharedGlobalVars.GlobalState = OS_SHUTDOWN_MAGIC_NUMBER;\n        OS_Probe_Log(\"OS_API_Init(): initialization failed, set GlobalState to OS_SHUTDOWN_MAGIC_NUMBER\");\n    }\n\n    OS_Probe_Log(\"OS_API_Init(): EXIT returning %d\", (int)return_code);\n    return return_code;\n}\n\n```\nAfter executing all tests, we received the following output from the test code.\nFor this task, assume the following:\n- The test suite is exhaustive and has covered all edge cases.\n- There are no missing scenarios.\n- You must not include any caveats or question the test results.\n\nBased on this, analyze the output and validate the scenario accordingly.\n```\nOS_API_Init(): ENTRY GlobalState=0x0\nOS_API_Init(): cleared OS_SharedGlobalVars\n\nOS_API_Init(): GlobalState set to OS_INIT_MAGIC_NUMBER\n\nOS_API_Init(): OS_ObjectIdInit() returned 0\nOS_API_Init(): starting init for idtype=0x00\nOS_API_Init(): OS_API_Impl_Init(0x00) returned 0\nOS_API_Init(): default branch executed for idtype=0x00 - no per-type init\nOS_API_Init(): after switch for idtype=0x00, return_code=0\nOS_API_Init(): starting init for idtype=0x01\nOS_API_Init(): OS_API_Impl_Init(0x01) returned -1\nOS_API_Init(): OS_API_Impl_Init failed for idtype=0x01, breaking loop\nOS_API_Init(): microSecPerSec=0 (MicroSecPerTick=0, TicksPerSecond=0)\nOS_API_Init(): initialization failed, set GlobalState to OS_SHUTDOWN_MAGIC_NUMBER\nOS_API_Init(): EXIT returning -1\nOS_API_Init(): ENTRY GlobalState=0x0\nOS_API_Init(): cleared OS_SharedGlobalVars\n\nOS_API_Init(): GlobalState set to OS_INIT_MAGIC_NUMBER\n\nOS_API_Init(): OS_ObjectIdInit() returned 0\nOS_API_Init(): starting init for idtype=0x00\nOS_API_Init(): OS_API_Impl_Init(0x00) returned 0\nOS_API_Init(): default branch executed for idtype=0x00 - no per-type init\nOS_API_Init(): after switch for idtype=0x00, return_code=0\nOS_API_Init(): starting init for idtype=0x01\nOS_API_Init(): OS_API_Impl_Init(0x01) returned -1\nOS_API_Init(): OS_API_Impl_Init failed for idtype=0x01, breaking loop\nOS_API_Init(): microSecPerSec=0 (MicroSecPerTick=0, TicksPerSecond=0)\nOS_API_Init(): initialization failed, set GlobalState to OS_SHUTDOWN_MAGIC_NUMBER\nOS_API_Init(): EXIT returning -1\nOS_API_Init(): ENTRY GlobalState=0x0\nOS_API_Init(): cleared OS_SharedGlobalVars\n\nOS_API_Init(): GlobalState set to OS_INIT_MAGIC_NUMBER\n\nOS_API_Init(): OS_ObjectIdInit() returned 0\nOS_API_Init(): starting init for idtype=0x00\nOS_API_Init(): OS_API_Impl_Init(0x00) returned 0\nOS_API_Init(): default branch executed for idtype=0x00 - no per-type init\nOS_API_Init(): after switch for idtype=0x00, return_code=0\nOS_API_Init(): starting init for idtype=0x01\nOS_API_Init(): OS_API_Impl_Init(0x01) returned -1\nOS_API_Init(): OS_API_Impl_Init failed for idtype=0x01, breaking loop\nOS_API_Init(): microSecPerSec=0 (MicroSecPerTick=0, TicksPerSecond=0)\nOS_API_Init(): initialization failed, set GlobalState to OS_SHUTDOWN_MAGIC_NUMBER\nOS_API_Init(): EXIT returning -1\nOS_API_Init(): ENTRY GlobalState=0x0\nOS_API_Init(): cleared OS_SharedGlobalVars\n\nOS_API_Init(): GlobalState set to OS_INIT_MAGIC_NUMBER\n\nOS_API_Init(): OS_ObjectIdInit() returned 0\nOS_API_Init(): starting init for idtype=0x00\nOS_API_Init(): OS_API_Impl_Init(0x00) returned 0\nOS_API_Init(): default branch executed for idtype=0x00 - no per-type init\nOS_API_Init(): after switch for idtype=0x00, return_code=0\nOS_API_Init(): starting init for idtype=0x01\nOS_API_Init(): OS_API_Impl_Init(0x01) returned -1\nOS_API_Init(): OS_API_Impl_Init failed for idtype=0x01, breaking loop\nOS_API_Init(): microSecPerSec=0 (MicroSecPerTick=0, TicksPerSecond=0)\nOS_API_Init(): initialization failed, set GlobalState to OS_SHUTDOWN_MAGIC_NUMBER\nOS_API_Init(): EXIT returning -1\nOS_API_Init(): ENTRY GlobalState=0x0\nOS_API_Init(): cleared OS_SharedGlobalVars\n\nOS_API_Init(): GlobalState set to OS_INIT_MAGIC_NUMBER\n\nOS_API_Init(): OS_ObjectIdInit() returned 0\nOS_API_Init(): starting init for idtype=0x00\nOS_API_Init(): OS_API_Impl_Init(0x00) returned 0\nOS_API_Init(): default branch executed for idtype=0x00 - no per-type init\nOS_API_Init(): after switch for idtype=0x00, return_code=0\nOS_API_Init(): starting init for idtype=0x01\nOS_API_Init(): OS_API_Impl_Init(0x01) returned -1\nOS_API_Init(): OS_API_Impl_Init failed for idtype=0x01, breaking loop\nOS_API_Init(): microSecPerSec=0 (MicroSecPerTick=0, TicksPerSecond=0)\nOS_API_Init(): initialization failed, set GlobalState to OS_SHUTDOWN_MAGIC_NUMBER\nOS_API_Init(): EXIT returning -1\nOS_API_Init(): ENTRY GlobalState=0x0\nOS_API_Init(): cleared OS_SharedGlobalVars\n\nOS_API_Init(): GlobalState set to OS_INIT_MAGIC_NUMBER\n\nOS_API_Init(): OS_ObjectIdInit() returned 0\nOS_API_Init(): starting init for idtype=0x00\nOS_API_Init(): OS_API_Impl_Init(0x00) returned 0\nOS_API_Init(): default branch e\n```\n\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The agent A report is correct. The switch default: break; is executed at runtime for idtype values not covered by the case labels (the test log shows \"default branch executed for idtype=0x00 ...\"). That executed statement performs no observable action and merely exits the switch; removing it would not change program behaviour because control would simply fall through to the code after the switch. By MISRA C 2023 Rule 2.2 (\"Any operation that is executed but whose removal would not affect program behaviour constitutes dead code\"), this default: break; constitutes dead code and thus violates the rule. (Making the default do something observable, e.g. a diagnostic log or explicit handling, would remove the dead-code classification.)"
}