{
  "user_message": "An agent A claimed that the following OS_FileOpenCheck code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileOpenCheck.\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The pointer variable 'stream' is only used for read-only access (checking stream->socket_domain and comparing stream->stream_name via strcmp) and is assigned from the global OS_stream_table. It could be declared as const OS_stream_internal_record_t *stream; therefore it should be const-qualified per MISRA C 2023 Rule 8.13. Change the declaration to: const OS_stream_internal_record_t *stream;\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_FileOpenCheck_log(const char *fmt, ...)\n{\n    FILE *fp = fopen(\"/tmp/logs/187.txt\", \"a\");\n    if (fp == NULL)\n    {\n        return;\n    }\n\n    va_list args;\n    va_start(args, fmt);\n    vfprintf(fp, fmt, args);\n    va_end(args);\n\n    fprintf(fp, \"\\n\");\n    fclose(fp);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    int                          iter_count = 0;\n\n    /* Log entry and parameter state */\n    OS_FileOpenCheck_log(\"ENTRY: OS_FileOpenCheck called, Filename=%s, Filename_ptr=%p\",\n                         (Filename != NULL) ? Filename : \"(null)\", (void *)Filename);\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        iter_count++;\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log state of the retrieved stream record */\n        OS_FileOpenCheck_log(\"ITER %d: stream_ptr=%p socket_domain=%d stream_name=\\\"%s\\\"\",\n                             iter_count,\n                             (void *)stream,\n                             (int)stream->socket_domain,\n                             (stream->stream_name != NULL) ? stream->stream_name : \"(null)\");\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            OS_FileOpenCheck_log(\"MATCH at ITER %d: stream_ptr=%p matched Filename=\\\"%s\\\"\",\n                                 iter_count,\n                                 (void *)stream,\n                                 Filename);\n\n            return_code = OS_SUCCESS;\n            break;\n        }\n        else\n        {\n            /* Log why it didn't match (socket domain or name mismatch) */\n            if (stream->socket_domain != OS_SocketDomain_INVALID)\n            {\n                OS_FileOpenCheck_log(\"NO MATCH at ITER %d: socket_domain=%d (not OS_SocketDomain_INVALID)\",\n                                     iter_count,\n                                     (int)stream->socket_domain);\n            }\n            else\n            {\n                int cmp = strcmp(stream->stream_name, Filename);\n                OS_FileOpenCheck_log(\"NO MATCH at ITER %d: name_cmp=%d (stream_name=\\\"%s\\\", Filename=\\\"%s\\\")\",\n                                     iter_count,\n                                     cmp,\n                                     (stream->stream_name != NULL) ? stream->stream_name : \"(null)\",\n                                     Filename);\n            }\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    OS_FileOpenCheck_log(\"EXIT: return_code=%d\", return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_FileOpenCheck. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. In the displayed function the local pointer variable 'stream' is only used for read-only access (reading stream->socket_domain and stream->stream_name and passing the name to strcmp). Per MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so declaring it as\n\n    const OS_stream_internal_record_t *stream;\n\nis the appropriate fix. Assigning the non-const pointer returned by OS_OBJECT_TABLE_GET to a pointer-to-const is allowed in C (implicit conversion from T * to const T *), and the usages in this function are all compatible with const qualification (strcmp takes const char *). The empty test log and test coverage issues do not affect the correctness of the MISRA assessment. One possible reason to keep the non-const declaration would be a coding convention that all table-access macros return non-const pointers or if later code needs to modify the object; neither applies here. Therefore the reported violation is valid."
}