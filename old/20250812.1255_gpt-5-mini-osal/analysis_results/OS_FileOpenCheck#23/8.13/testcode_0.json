{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nOS_FileOpenCheck obtains a pointer via OS_OBJECT_TABLE_GET and stores it in a non-const variable (OS_stream_internal_record_t *stream) even though the function only reads fields (socket_domain and stream_name). The macro expands to &tbl[index] producing a non-const pointer; in this read-only use the pointer should be const-qualified (const OS_stream_internal_record_t *stream) to comply with MISRA C 2023 Rule 8.13.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/187.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n\n/*\n * Probe logging function: appends a formatted message to /tmp/logs/187.txt.\n * This is intentionally small and non-intrusive so it can be compiled into\n * the existing codebase without changing the original logic.\n */\nstatic void os_fileopen_log(const char *fmt, ...)\n{\n    FILE *f = fopen(\"/tmp/logs/187.txt\", \"a\");\n    if (f == NULL)\n    {\n        return;\n    }\n\n    va_list ap;\n    va_start(ap, fmt);\n    vfprintf(f, fmt, ap);\n    va_end(ap);\n\n    fputc('\\n', f);\n    fclose(f);\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    os_fileopen_log(\"OS_FileOpenCheck: start; Filename='%s'\", Filename ? Filename : \"(null)\");\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        /* Capture the pointer as done in the original code (non-const pointer).\n         * Log the pointer value and the fields read to provide evidence of\n         * the read-only use and to reproduce the reported scenario. */\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Log control/state information for this iteration */\n        os_fileopen_log(\"OS_FileOpenCheck: iter.token=%llu, stream_ptr=%p\",\n                        (unsigned long long)iter.token, (void *)stream);\n\n        if (stream != NULL)\n        {\n            /* Log the relevant fields that are inspected in the condition */\n            /* socket_domain is logged as integer; stream_name as a string */\n            os_fileopen_log(\"OS_FileOpenCheck: stream->socket_domain=%d, stream->stream_name='%s'\",\n                            (int)stream->socket_domain,\n                            stream->stream_name ? stream->stream_name : \"(null)\");\n\n            int cmp = strcmp(stream->stream_name, Filename);\n            os_fileopen_log(\"OS_FileOpenCheck: strcmp(stream->stream_name, Filename)=%d\", cmp);\n\n            if (stream->socket_domain == OS_SocketDomain_INVALID && (cmp == 0))\n            {\n                os_fileopen_log(\"OS_FileOpenCheck: match found; setting return_code=OS_SUCCESS and breaking\");\n                return_code = OS_SUCCESS;\n                break;\n            }\n            else\n            {\n                os_fileopen_log(\"OS_FileOpenCheck: no match; continuing\");\n            }\n        }\n        else\n        {\n            os_fileopen_log(\"OS_FileOpenCheck: stream is NULL for token=%llu\", (unsigned long long)iter.token);\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    os_fileopen_log(\"OS_FileOpenCheck: end; return_code=%d\", return_code);\n\n    return return_code;\n}\n"
}