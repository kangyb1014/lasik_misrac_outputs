{
  "user_message": "An agent A claimed that the following OS_FileOpenCheck code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n.\n</misra_rule>\n<target_code>\nHere is the original code of OS_FileOpenCheck.\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\n<scenario>\nThe agent A provided the following violation scenario:The local variable 'stream' is declared as OS_stream_internal_record_t * but is only used for read-only access (checking stream->socket_domain and calling strcmp on stream->stream_name). According to MISRA C 2023 Rule 8.13, this pointer should be const-qualified when possible. The macro OS_OBJECT_TABLE_GET yields the address of a non-const table element, but assigning that to a pointer-to-const is permitted, so the function should instead declare: const OS_stream_internal_record_t *stream; to avoid allowing modification through 'stream'.\n</scenario>\n<test_code>\nAlso, the agent A provided the following modified code that prints out the log to support their scenario:\n```c\nstatic void OS_FileOpenCheck_LogEnter(const char *Filename)\n{\n    FILE *fp = fopen(\"/tmp/logs/187.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"ENTER OS_FileOpenCheck: Filename_ptr=%p, Filename=\\\"%s\\\"\\n\",\n                (void *)Filename, (Filename != NULL) ? Filename : \"(null)\");\n        fclose(fp);\n    }\n}\nstatic void OS_FileOpenCheck_LogIter(unsigned int iter_index,\n                                     const void *stream_ptr,\n                                     int socket_domain_val,\n                                     const char *stream_name,\n                                     const char *Filename,\n                                     int strcmp_result)\n{\n    FILE *fp = fopen(\"/tmp/logs/187.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"ITER %u: stream_ptr=%p, socket_domain=%d, stream_name_ptr=%p, stream_name=\\\"%s\\\", Filename_ptr=%p, Filename=\\\"%s\\\", strcmp_result=%d\\n\",\n                iter_index,\n                stream_ptr,\n                socket_domain_val,\n                (void *)stream_name,\n                (stream_name != NULL) ? stream_name : \"(null)\",\n                (void *)Filename,\n                (Filename != NULL) ? Filename : \"(null)\",\n                strcmp_result);\n        fclose(fp);\n    }\n}\nstatic void OS_FileOpenCheck_LogMatchFound(unsigned int iter_index,\n                                           const void *stream_ptr,\n                                           const char *stream_name,\n                                           const char *Filename)\n{\n    FILE *fp = fopen(\"/tmp/logs/187.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"MATCH at ITER %u: stream_ptr=%p, stream_name=\\\"%s\\\", Filename=\\\"%s\\\"\\n\",\n                iter_index,\n                stream_ptr,\n                (stream_name != NULL) ? stream_name : \"(null)\",\n                (Filename != NULL) ? Filename : \"(null)\");\n        fclose(fp);\n    }\n}\nstatic void OS_FileOpenCheck_LogExit(int32 return_code)\n{\n    FILE *fp = fopen(\"/tmp/logs/187.txt\", \"a\");\n    if (fp != NULL)\n    {\n        fprintf(fp, \"EXIT OS_FileOpenCheck: return_code=%d\\n\", return_code);\n        fclose(fp);\n    }\n}\n\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    unsigned int iter_count = 0u;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    /* Log function entry and parameter state */\n    OS_FileOpenCheck_LogEnter(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Probe/log current iteration and stream state. Cast the socket_domain\n         * to int for logging purposes. The logging helper takes a const void *\n         * for the pointer to avoid any risk of modifying the pointed object.\n         */\n        {\n            int socket_domain_val = (int)stream->socket_domain;\n            const char *sname = (stream->stream_name != NULL) ? stream->stream_name : \"\";\n            int cmp = strcmp(sname, Filename);\n\n            OS_FileOpenCheck_LogIter(iter_count, (const void *)stream, socket_domain_val, sname, Filename, cmp);\n\n            /* Preserve original logic exactly: use the original expression.\n             * Do not change the type of 'stream' here; the logging call above\n             * intentionally accepts a const pointer to demonstrate read-only\n             * usage without altering behavior.\n             */\n            if (stream->socket_domain == OS_SocketDomain_INVALID && (cmp == 0))\n            {\n                OS_FileOpenCheck_LogMatchFound(iter_count, (const void *)stream, sname, Filename);\n                return_code = OS_SUCCESS;\n                break;\n            }\n        }\n\n        iter_count++;\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    /* Log exit state */\n    OS_FileOpenCheck_LogExit(return_code);\n\n    return return_code;\n}\n\n```\nThe test code was compiled successfully, but the test log is empty for OS_FileOpenCheck. The test suite might not cover this function or the test code might be not suitable to print important information.\n</test_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false)\n</response format>\n<instruction>   \nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the shown function the local variable stream is only used for read-only access (reading stream->socket_domain and passing stream->stream_name to strcmp). According to MISRA C 2023 Rule 8.13, the pointer should be declared to point to a const-qualified type whenever possible. It is valid in C to assign the address of a non-const object to a pointer-to-const, so declaring\n\n    const OS_stream_internal_record_t *stream;\n\nwould be safe and express the intended read-only use. Changing the local declaration to const would also help catch accidental writes through this pointer. The test/logging code and the fact that OS_OBJECT_TABLE_GET yields a non-const pointer do not prevent making the local pointer const, so Agent A\u2019s violation report is correct."
}