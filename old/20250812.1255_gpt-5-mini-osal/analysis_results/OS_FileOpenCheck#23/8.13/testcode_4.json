{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n\nAnother agent reported that the target code violated the Rule 8.13.\nHere is the comment from the agent.\n<violation scenario>\nThe struct member stream_name is declared as a non-const char array (char stream_name[OS_MAX_PATH_LEN]) but is only used here in a read-only way (passed to strcmp). MISRA C 2023 Rule 8.13 requires that pointers point to const-qualified types whenever possible, so a read-only string buffer should be declared const. In this code fragment stream->stream_name is not const-qualified yet is used only for comparison, so this is a violation; change the member to const char stream_name[...] (or otherwise ensure the object is mutable when necessary) to comply.\n</violation scenario>\n\nYour job is to insert logging code to capture the control flow and state information of the program.\nInsert logging code so that other agents can reproduce and get evidence for the violation scenario.\n<response format>\n- test_code: a modified OS_FileOpenCheck code that contains useful probe functions that print useful logs to a file \"/tmp/logs/187.txt\". The logs should contain the control path and state information of the violation scenario. If test code is not required to validate the scenario, you can leave this blank.\nHere are the constraints for the test code:\n- The test code MUST preserve the original logic of OS_FileOpenCheck as much as possible.\nYou CAN just insert probe functions to the original code.\n- DO NOT introduce new violations to demonstrate your scenario.\n- The test code MUST be compilable and executable.\n- The test code MUST include line breaks.\n- You MUST NOT define the main function.\n- You MUST NOT define macros.\n</response format>\n<target_code>\nHere is the code of OS_FileOpenCheck:\n```c\nint32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            return_code = OS_SUCCESS;\n            break;\n        }\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    return return_code;\n}\n```\n</target_code>\nPlease provide the modified OS_FileOpenCheck code.\n",
  "test_code": "int32 OS_FileOpenCheck(const char *Filename)\n{\n    int32                        return_code;\n    OS_object_iter_t             iter;\n    OS_stream_internal_record_t *stream;\n    FILE *log = fopen(\"/tmp/logs/187.txt\", \"a\");\n\n    /* Log entry and input parameter (avoid dereference if NULL) */\n    if (log)\n    {\n        fprintf(log, \"OS_FileOpenCheck called with Filename=%s\\n\", (Filename != NULL) ? Filename : \"(null)\");\n        fflush(log);\n    }\n\n    /* Check parameters */\n    OS_CHECK_POINTER(Filename);\n\n    return_code = OS_ERROR;\n\n    OS_ObjectIdIterateActive(LOCAL_OBJID_TYPE, &iter);\n\n    while (OS_ObjectIdIteratorGetNext(&iter))\n    {\n        stream = OS_OBJECT_TABLE_GET(OS_stream_table, iter.token);\n\n        /* Probe: log iterator token and stream state */\n        if (log)\n        {\n            fprintf(log, \"Iterator token=%u, stream=%p, socket_domain=%d, stream_name=%s\\n\",\n                    (unsigned)iter.token,\n                    (void *)stream,\n                    (int)stream->socket_domain,\n                    (stream->stream_name != NULL) ? stream->stream_name : \"(null)\");\n            fflush(log);\n        }\n\n        if (stream->socket_domain == OS_SocketDomain_INVALID && (strcmp(stream->stream_name, Filename) == 0))\n        {\n            /* Log the strcmp result and the match */\n            if (log)\n            {\n                fprintf(log, \"Match: stream->stream_name == Filename (\\\"%s\\\") for token=%u\\n\",\n                        stream->stream_name, (unsigned)iter.token);\n                fflush(log);\n            }\n\n            return_code = OS_SUCCESS;\n            break;\n        }\n        else\n        {\n            /* Log no-match decision (explicitly record why) */\n            if (log)\n            {\n                int cmp = strcmp(stream->stream_name, Filename);\n                fprintf(log, \"No match for token=%u: socket_domain=%d, strcmp=%d\\n\",\n                        (unsigned)iter.token, (int)stream->socket_domain, cmp);\n                fflush(log);\n            }\n        }\n    }\n\n    if (log)\n    {\n        fprintf(log, \"Destroying iterator and returning code=%d\\n\", (int)return_code);\n        fflush(log);\n    }\n\n    OS_ObjectIdIteratorDestroy(&iter);\n\n    if (log)\n    {\n        fclose(log);\n    }\n\n    return return_code;\n}\n"
}