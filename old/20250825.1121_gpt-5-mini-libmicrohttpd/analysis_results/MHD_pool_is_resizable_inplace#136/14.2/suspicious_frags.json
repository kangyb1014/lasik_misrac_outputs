{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_pool_is_resizable_inplace:\n```c\nbool\nMHD_pool_is_resizable_inplace (struct MemoryPool *pool,\n                               void *block,\n                               size_t block_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n  if (NULL != block)\n  {\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n    mhd_assert (mp_ptr_le_ (pool->memory, block));\n    mhd_assert (pool->size >= block_offset);\n    mhd_assert (pool->size >= block_offset + block_size);\n    return (pool->pos ==\n            ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size));\n  }\n  return false; /* Unallocated blocks cannot be resized in-place */\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "return (pool->pos ==\n            ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size));",
    "if (NULL != block)\n  { ... }",
    "mhd_assert (pool->size >= pool->end - pool->pos);",
    "mhd_assert (mp_ptr_le_ (pool->memory, block));",
    "mhd_assert (pool->size >= block_size);",
    "const size_t block_offset = mp_ptr_diff_ (block, pool->memory);",
    "mhd_assert (pool->size >= block_offset);",
    "mhd_assert (block != NULL || block_size == 0);",
    "mhd_assert (pool->end >= pool->pos);",
    "mhd_assert (pool->size >= block_offset + block_size);"
  ],
  "explanation": "No explicit for statements are present in the provided function, so Rule 14.2 (\"A for loop shall be well-formed\") does not directly apply to any visible for-statement in this snippet. The only way this snippet could violate Rule 14.2 is if the macros or functions used here expand to, or call, code containing for statements that are not well-formed. Therefore I have flagged all call-sites and macro-using expressions that could hide such for-loops: mhd_assert invocations, the mp_ptr_diff_ and mp_ptr_le_ usages, and the ROUND_TO_ALIGN_PLUS_RED_ZONE invocation, as well as the enclosing if block and the return that uses the macro. Other fragments were not flagged because they are simple declarations, pointer/size checks, comparisons and returns that do not themselves contain or expand into for statements (unless a macro/function used there does, which is why the macro/function call sites were included). These flagged fragments should be inspected by other agents to examine the definitions/expansions of the macros/functions for any for statements that might violate MISRA C 2023 Rule 14.2."
}