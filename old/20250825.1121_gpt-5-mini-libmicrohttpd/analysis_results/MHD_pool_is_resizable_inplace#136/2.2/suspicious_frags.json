{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_pool_is_resizable_inplace:\n```c\nbool\nMHD_pool_is_resizable_inplace (struct MemoryPool *pool,\n                               void *block,\n                               size_t block_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n  if (NULL != block)\n  {\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n    mhd_assert (mp_ptr_le_ (pool->memory, block));\n    mhd_assert (pool->size >= block_offset);\n    mhd_assert (pool->size >= block_offset + block_size);\n    return (pool->pos ==\n            ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size));\n  }\n  return false; /* Unallocated blocks cannot be resized in-place */\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_pool_is_resizable_inplace:\n#define mhd_assert(ignore) ((void)0)\n...\n#define mp_ptr_diff_(p1, p2) ((size_t)(((constuint8_t*)(p1))-((constuint8_t*)(p2))))\n...\n#define mp_ptr_le_(p1, p2) (((constuint8_t*)(p1))<=((constuint8_t*)(p2)))\n...\n#define ROUND_TO_ALIGN_PLUS_RED_ZONE(n) ROUND_TO_ALIGN(n)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "mhd_assert (pool->size >= pool->end - pool->pos);",
    "mhd_assert (mp_ptr_le_ (pool->memory, block));",
    "mhd_assert (pool->size >= block_size);",
    "mhd_assert (pool->size >= block_offset);",
    "mhd_assert (block != NULL || block_size == 0);",
    "mhd_assert (pool->end >= pool->pos);",
    "mhd_assert (pool->size >= block_offset + block_size);"
  ],
  "explanation": "The remaining code fragments (not listed above) perform computations and control flow that directly affect the function's behaviour and therefore are not candidates for dead-code under MISRA C Rule 2.2. Specifically:\n- The if (NULL != block) test and the subsequent return false; determine reachable control flow based on the input pointer and cannot be removed without changing behaviour.\n- The computation of block_offset via mp_ptr_diff_ (block, pool->memory) is used in the return expression and influences the function result; removing it would change behaviour.\n- The final return expression comparing pool->pos with ROUND_TO_ALIGN_PLUS_RED_ZONE(block_offset + block_size) is the function's observable output and cannot be removed.\n- The macros mp_ptr_diff_, mp_ptr_le_, and ROUND_TO_ALIGN_PLUS_RED_ZONE (and their uses in expressions) produce values used in decisions/returns; they are not extraneous operations.\nTherefore only the statements listed in suspicious_frags need further investigation for possible dead code; the rest are functional and affect program behaviour."
}