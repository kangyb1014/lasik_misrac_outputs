{
  "user_message": "An agent A claimed that the following process_request_target code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of process_request_target.\n```c\nstatic bool\nprocess_request_target (struct MHD_Connection *c)\n{\n#ifdef _DEBUG\n  size_t params_len;\n#endif /* _DEBUG */\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (NULL == c->rq.url);\n  mhd_assert (0 == c->rq.url_len);\n  mhd_assert (NULL != c->rq.hdrs.rq_line.rq_tgt);\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.hdrs.rq_line.rq_tgt <= c->rq.hdrs.rq_line.rq_tgt_qmark));\n  mhd_assert ((NULL == c->rq.hdrs.rq_line.rq_tgt_qmark) || \\\n              (c->rq.req_target_len > \\\n               (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark \\\n                         - c->rq.hdrs.rq_line.rq_tgt)));\n\n  /* Log callback before the request-target is modified/decoded */\n  if (NULL != c->daemon->uri_log_callback)\n  {\n    c->rq.client_aware = true;\n    c->rq.client_context =\n      c->daemon->uri_log_callback (c->daemon->uri_log_callback_cls,\n                                   c->rq.hdrs.rq_line.rq_tgt,\n                                   c);\n  }\n\n  if (NULL != c->rq.hdrs.rq_line.rq_tgt_qmark)\n  {\n#ifdef _DEBUG\n    params_len =\n      c->rq.req_target_len\n      - (size_t) (c->rq.hdrs.rq_line.rq_tgt_qmark - c->rq.hdrs.rq_line.rq_tgt);\n#endif /* _DEBUG */\n    c->rq.hdrs.rq_line.rq_tgt_qmark[0] = 0; /* Replace '?' with zero termination */\n    if (MHD_NO == MHD_parse_arguments_ (c,\n                                        MHD_GET_ARGUMENT_KIND,\n                                        c->rq.hdrs.rq_line.rq_tgt_qmark + 1,\n                                        &connection_add_header,\n                                        c))\n    {\n      mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING != c->state);\n      return false;\n    }\n  }\n#ifdef _DEBUG\n  else\n    params_len = 0;\n#endif /* _DEBUG */\n\n  mhd_assert (strlen (c->rq.hdrs.rq_line.rq_tgt) == \\\n              c->rq.req_target_len - params_len);\n\n  /* Finally unescape URI itself */\n  c->rq.url_len =\n    c->daemon->unescape_callback (c->daemon->unescape_callback_cls,\n                                  c,\n                                  c->rq.hdrs.rq_line.rq_tgt);\n  c->rq.url = c->rq.hdrs.rq_line.rq_tgt;\n\n  return true;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes c->rq.hdrs.rq_line.rq_tgt (a char * pointing into the request buffer) to uri_log_callback. If uri_log_callback is declared to take a non-const pointer (e.g. void *(*uri_log_callback)(void *, char *, struct MHD_Connection *)) or otherwise accepts/uses a plain char * even though it does not need to modify the string, this violates MISRA C 2023 Rule 8.13. The correct, non-violating form would be for the callback to accept a pointer to const data (e.g. const char *), or to pass a const-qualified pointer if the callback does not modify the buffer. (If the callback legitimately modifies the string, then no violation.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not supported by the evidence shown. MISRA C:2023 Rule 8.13 says a pointer should point to a const-qualified type whenever possible \u2014 i.e. function parameter declarations (and variable declarations) should use const if the pointed-to object is not meant to be modified. Whether a rule violation exists depends on the declaration/semantics of uri_log_callback, not on this call site alone. In the snippet the callback is invoked with c->rq.hdrs.rq_line.rq_tgt (a char *), but (a) we have no visible prototype for uri_log_callback to show it was declared to take a non-const char *, and (b) even if it were declared as taking a non-const char *, that may be legitimate if the callback is allowed to modify or otherwise need a non-const pointer. Thus the code shown does not by itself constitute a definite breach of 8.13. To establish a true MISRA 8.13 violation you would need to show the callback\u2019s declaration/definition and that it does not modify the data (so the parameter could and should be const). Note also the code later modifies the request-target buffer (so a non-const API might be deliberate), and the callback is invoked before that modification; these facts affect whether const is appropriate. In short: the claim may be plausible, but is not proven by the snippet \u2014 the report is not correct as stated."
}