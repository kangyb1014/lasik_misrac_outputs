{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of read_cb:\n```c\nstatic ssize_t\nread_cb (void *cls, uint64_t pos, char *mem, size_t size)\n{\n  struct Holder *holder = cls;\n  void *src;\n  void *buf;\n  ssize_t ret;\n  size_t offset;\n  size_t r_size;\n\n  if (pos > SSIZE_MAX)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  offset = (size_t) pos;\n  src = malloc (size);\n  if (NULL == src)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  r_size = fread (src, 1, size, holder->file);\n  if (0 == r_size)\n  {\n    ret = (0 != ferror (holder->file)) ?\n          MHD_CONTENT_READER_END_WITH_ERROR : MHD_CONTENT_READER_END_OF_STREAM;\n    goto done;\n  }\n  if (MHD_YES != compress_buf (&holder->stream, src, r_size, &offset, &buf,\n                               &size, holder->buf))\n    ret = MHD_CONTENT_READER_END_WITH_ERROR;\n  else\n  {\n    memcpy (mem, buf, size);\n    ret = (ssize_t) size;\n  }\n  free (buf); /* Buf may be set even on error return. */\ndone:\n  free (src);\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function read_cb:\nstatic enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)\n{\n  unsigned int have;\n  enum MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n  *dest = NULL;\n  *dest_size = 0;\n  do\n  {\n    if (src_size > CHUNK)\n    {\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n    }\n    else\n    {\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n    }\n    *offset += strm->avail_in;\n    strm->next_in = (const Bytef *) src;\n    do\n    {\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n      ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n      have = CHUNK - strm->avail_out;\n      *dest_size += have;\n      tmp_dest = realloc (*dest, *dest_size);\n      if (NULL == tmp_dest)\n      {\n        free (*dest);\n        *dest = NULL;\n        return MHD_NO;\n      }\n      *dest = tmp_dest;\n      memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n    }\n    while (0 == strm->avail_out);\n  }\n  while (flush != Z_SYNC_FLUSH);\n  return ret;\n}\n...\nstruct Holder\n{\n  FILE *file;\n  z_stream stream;\n  void *buf;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ndo\n{\n  if (src_size > CHUNK)\n  {\n    strm->avail_in = CHUNK;\n    src_size -= CHUNK;\n    flush = Z_NO_FLUSH;\n  }\n  else\n  {\n    strm->avail_in = (uInt) src_size;\n    flush = Z_SYNC_FLUSH;\n  }\n  *offset += strm->avail_in;\n  strm->next_in = (const Bytef *) src;\n  do\n  {\n    strm->avail_out = CHUNK;\n    strm->next_out = tmp;\n    ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n    have = CHUNK - strm->avail_out;\n    *dest_size += have;\n    tmp_dest = realloc (*dest, *dest_size);\n    if (NULL == tmp_dest)\n    {\n      free (*dest);\n      *dest = NULL;\n      return MHD_NO;\n    }\n    *dest = tmp_dest;\n    memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n  }\n  while (0 == strm->avail_out);\n}\nwhile (flush != Z_SYNC_FLUSH);\n```\nFocus on the above code fragment and judge whether it violates the rule 14.3 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The inner loop uses the expression (0 == strm->avail_out) where strm->avail_out is written inside the loop (set to CHUNK then modified by deflate), so the controlling expression is not invariant. The outer loop uses (flush != Z_SYNC_FLUSH); flush is assigned inside the loop (either Z_NO_FLUSH while src_size is reduced, then Z_SYNC_FLUSH on the final iteration), so it too is not invariant. Neither of the MISRA exceptions (infinite-loop invariant or a constant false do-while) applies, but they are not needed \u2014 the controlling expressions are variant."
}