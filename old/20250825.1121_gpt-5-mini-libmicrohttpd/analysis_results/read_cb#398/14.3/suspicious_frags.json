{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of read_cb:\n```c\nstatic ssize_t\nread_cb (void *cls, uint64_t pos, char *mem, size_t size)\n{\n  struct Holder *holder = cls;\n  void *src;\n  void *buf;\n  ssize_t ret;\n  size_t offset;\n  size_t r_size;\n\n  if (pos > SSIZE_MAX)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  offset = (size_t) pos;\n  src = malloc (size);\n  if (NULL == src)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  r_size = fread (src, 1, size, holder->file);\n  if (0 == r_size)\n  {\n    ret = (0 != ferror (holder->file)) ?\n          MHD_CONTENT_READER_END_WITH_ERROR : MHD_CONTENT_READER_END_OF_STREAM;\n    goto done;\n  }\n  if (MHD_YES != compress_buf (&holder->stream, src, r_size, &offset, &buf,\n                               &size, holder->buf))\n    ret = MHD_CONTENT_READER_END_WITH_ERROR;\n  else\n  {\n    memcpy (mem, buf, size);\n    ret = (ssize_t) size;\n  }\n  free (buf); /* Buf may be set even on error return. */\ndone:\n  free (src);\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function read_cb:\nstatic enum MHD_Result\ncompress_buf (z_stream *strm, const void *src, size_t src_size, size_t *offset,\n              void **dest, size_t *dest_size,\n              void *tmp)\n{\n  unsigned int have;\n  enum MHD_Result ret;\n  int flush;\n  void *tmp_dest;\n  *dest = NULL;\n  *dest_size = 0;\n  do\n  {\n    if (src_size > CHUNK)\n    {\n      strm->avail_in = CHUNK;\n      src_size -= CHUNK;\n      flush = Z_NO_FLUSH;\n    }\n    else\n    {\n      strm->avail_in = (uInt) src_size;\n      flush = Z_SYNC_FLUSH;\n    }\n    *offset += strm->avail_in;\n    strm->next_in = (const Bytef *) src;\n    do\n    {\n      strm->avail_out = CHUNK;\n      strm->next_out = tmp;\n      ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n      have = CHUNK - strm->avail_out;\n      *dest_size += have;\n      tmp_dest = realloc (*dest, *dest_size);\n      if (NULL == tmp_dest)\n      {\n        free (*dest);\n        *dest = NULL;\n        return MHD_NO;\n      }\n      *dest = tmp_dest;\n      memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n    }\n    while (0 == strm->avail_out);\n  }\n  while (flush != Z_SYNC_FLUSH);\n  return ret;\n}\n...\nstruct Holder\n{\n  FILE *file;\n  z_stream stream;\n  void *buf;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "do\n{\n  if (src_size > CHUNK)\n  {\n    strm->avail_in = CHUNK;\n    src_size -= CHUNK;\n    flush = Z_NO_FLUSH;\n  }\n  else\n  {\n    strm->avail_in = (uInt) src_size;\n    flush = Z_SYNC_FLUSH;\n  }\n  *offset += strm->avail_in;\n  strm->next_in = (const Bytef *) src;\n  do\n  {\n    strm->avail_out = CHUNK;\n    strm->next_out = tmp;\n    ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n    have = CHUNK - strm->avail_out;\n    *dest_size += have;\n    tmp_dest = realloc (*dest, *dest_size);\n    if (NULL == tmp_dest)\n    {\n      free (*dest);\n      *dest = NULL;\n      return MHD_NO;\n    }\n    *dest = tmp_dest;\n    memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n  }\n  while (0 == strm->avail_out);\n}\nwhile (flush != Z_SYNC_FLUSH);",
    "do\n{\n  strm->avail_out = CHUNK;\n  strm->next_out = tmp;\n  ret = (Z_OK == deflate (strm, flush)) ? MHD_YES : MHD_NO;\n  have = CHUNK - strm->avail_out;\n  *dest_size += have;\n  tmp_dest = realloc (*dest, *dest_size);\n  if (NULL == tmp_dest)\n  {\n    free (*dest);\n    *dest = NULL;\n    return MHD_NO;\n  }\n  *dest = tmp_dest;\n  memcpy (((uint8_t *) (*dest)) + ((*dest_size) - have), tmp, have);\n}\nwhile (0 == strm->avail_out);"
  ],
  "explanation": "Other control expressions in the provided code are dependent on runtime values and therefore do not appear to be invariant by inspection. Examples: the checks in read_cb (if (pos > SSIZE_MAX), if (NULL == src), if (0 == r_size)) depend on function arguments, allocation and I/O results; the ternary using ferror(holder->file) depends on file state; the if (MHD_YES != compress_buf(...)) depends on the compression function result. These are not constant expressions and do not match the MISRA 14.3 invariant-controlling-expression pattern. The goto/cleanup sequence and the allocation/free operations are not loop-controlling expressions and thus are not relevant to Rule 14.3. The two do-while loops shown above are the primary loop constructs whose controlling expressions (0 == strm->avail_out and flush != Z_SYNC_FLUSH) should be investigated to ensure they are not inadvertently invariant (except where an intentional infinite loop or the permitted do-while false constant-case is intended)."
}