{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size,\n          void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response = MHD_create_response_empty (MHD_RF_NONE);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_NO_CONTENT,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call strcmp(method, \"GET\") can access memory beyond the bounds of the object referenced by 'method' if 'method' is NULL or not a NUL-terminated string. For example, if the caller passes method == NULL or a buffer that lacks a terminating '\\0', strcmp will dereference an invalid pointer or continue reading past the buffer, violating Rule 21.17.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not correct in the context of a typical libmicrohttpd callback: the library guarantees that the 'method' parameter is a valid, NUL-terminated C string (e.g. \"GET\"), so the call strcmp(method, \"GET\") will not read beyond the bounds of the object referenced by 'method'. MISRA C:2023 Rule 21.17 forbids uses of <string.h> functions that can access out of bounds, but that only applies if the pointer argument might be NULL or point to a non-NUL-terminated buffer. If the caller/library contract guarantees a non-NULL, NUL-terminated string, there is no violation here.\n\nThat said, if no such contract can be proven, then the use would indeed be non-compliant: passing NULL or a non-terminated buffer to strcmp is undefined and would violate Rule 21.17. To be defensive (and satisfy MISRA without relying on external guarantees), the code could explicitly check method != NULL and, if needed, use a bounded comparison (e.g. strncmp with a known maximum method length) or otherwise validate the input before calling strcmp."
}