{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_SHA256_init:\n```c\nvoid\nMHD_SHA256_init (struct Sha256Ctx *ctx)\n{\n  /* Initial hash values, see FIPS PUB 180-4 paragraph 5.3.3 */\n  /* First thirty-two bits of the fractional parts of the square\n   * roots of the first eight prime numbers: 2, 3, 5, 7, 11, 13,\n   * 17, 19.\" */\n  ctx->H[0] = UINT32_C (0x6a09e667);\n  ctx->H[1] = UINT32_C (0xbb67ae85);\n  ctx->H[2] = UINT32_C (0x3c6ef372);\n  ctx->H[3] = UINT32_C (0xa54ff53a);\n  ctx->H[4] = UINT32_C (0x510e527f);\n  ctx->H[5] = UINT32_C (0x9b05688c);\n  ctx->H[6] = UINT32_C (0x1f83d9ab);\n  ctx->H[7] = UINT32_C (0x5be0cd19);\n\n  /* Initialise number of bytes. */\n  ctx->count = 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_SHA256_init:\nstruct Sha256Ctx\n{\n  uint32_t H[SHA256_DIGEST_SIZE_WORDS];     /**< Intermediate hash value / digest at end of calculation */\n  uint32_t buffer[SHA256_BLOCK_SIZE_WORDS]; /**< SHA256 input data buffer */\n  uint64_t count;                           /**< number of bytes, mod 2^64 */\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no uses of compiler-specific language extensions in the provided function or related struct. Specifically:\n- uint32_t and uint64_t are standard fixed-width integer types from C99 <stdint.h> (not compiler extensions).\n- UINT32_C(...) is the standard C macro from <stdint.h> (C99) for forming uint32_t constants, not a compiler extension.\n- The function signature, pointer use (struct Sha256Ctx *ctx), array indexing (ctx->H[i]), assignments, and comments are all standard C constructs.\n- There are no GCC/Clang/MSVC-specific tokens or constructs such as __attribute__, __asm__, __extension__, typeof, statement-expressions, pragmas, inline assembly, or other documented compiler extensions.\n\nNote: the struct definition shown in the additional code snippet ends with a closing brace but no terminating semicolon; that would be a syntax error, not a compiler language extension. If that semicolon exists in the real source, everything shown is standard C and does not violate MISRA C 2023 Rule 1.2."
}