{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_bin_to_hex:\n```c\nsize_t\nMHD_bin_to_hex (const void *bin,\n                size_t size,\n                char *hex)\n{\n  size_t i;\n\n  for (i = 0; i < size; ++i)\n  {\n    uint8_t j;\n    const uint8_t b = ((const uint8_t *) bin)[i];\n    j = b >> 4;\n    hex[i * 2] = (char) ((j < 10) ? (j + '0') : (j - 10 + 'a'));\n    j = b & 0x0f;\n    hex[i * 2 + 1] = (char) ((j < 10) ? (j + '0') : (j - 10 + 'a'));\n  }\n  return i * 2;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_bin_to_hex:\nsize_t size\n...\nvoid *bin\n...\nconst char *hex\n...\nsize_t i\n...\nsize_t j\n...\nconst uint8_t b = ((const uint8_t *) bin)[i]\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nreturn i * 2;\n```\nFocus on the above code fragment and judge whether it violates the rule 14.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation \u2014 the for loop is well-formed: the first clause (i = 0) initializes the single loop counter, the second clause (i < size) uses only the loop counter (and size which is not modified in the loop body) and has no persistent side effects, the third clause (++i) modifies only the loop counter, and the loop body does not modify i. The statement return i * 2; is outside the loop and using the final value of the loop counter does not violate Rule 14.2."
}