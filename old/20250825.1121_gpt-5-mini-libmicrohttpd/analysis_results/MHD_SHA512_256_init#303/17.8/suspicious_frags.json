{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_SHA512_256_init:\n```c\nvoid\nMHD_SHA512_256_init (struct Sha512_256Ctx *ctx)\n{\n  /* Initial hash values, see FIPS PUB 180-4 clause 5.3.6.2 */\n  /* Values generated by \"IV Generation Function\" as described in\n   * clause 5.3.6 */\n  ctx->H[0] = UINT64_C (0x22312194FC2BF72C);\n  ctx->H[1] = UINT64_C (0x9F555FA3C84C64C2);\n  ctx->H[2] = UINT64_C (0x2393B86B6F53B151);\n  ctx->H[3] = UINT64_C (0x963877195940EABD);\n  ctx->H[4] = UINT64_C (0x96283EE2A88EFFE3);\n  ctx->H[5] = UINT64_C (0xBE5E1E2553863992);\n  ctx->H[6] = UINT64_C (0x2B0199FC2C85B8AA);\n  ctx->H[7] = UINT64_C (0x0EB72DDC81C52CA2);\n\n  /* Initialise number of bytes and high part of number of bits. */\n  ctx->count = 0;\n  ctx->count_bits_hi = 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_SHA512_256_init:\nstruct Sha512_256Ctx\n{\n  uint64_t H[SHA512_256_HASH_SIZE_WORDS];       /**< Intermediate hash value  */\n  uint64_t buffer[SHA512_256_BLOCK_SIZE_WORDS]; /**< SHA512_256 input data buffer */\n  /**\n   * The number of bytes, lower part\n   */\n  uint64_t count;\n  /**\n   * The number of bits, high part.\n   * Unlike lower part, this counts the number of bits, not bytes.\n   */\n  uint64_t count_bits_hi;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "Rule 17.8 disallows modifying the function parameter itself (the pointer variable), but explicitly allows modifying the object referred to by a pointer parameter. In MHD_SHA512_256_init the code writes to members of *ctx (ctx->H[i], ctx->count, ctx->count_bits_hi). These are modifications of the pointed-to object and are permitted by the rule. There are no assignments, increments/decrements, or other modifications of the parameter variable ctx itself (no occurrences of ctx = ..., ctx++, ctx = NULL, etc.). Therefore there are no code fragments in this function that require investigation for Rule 17.8."
}