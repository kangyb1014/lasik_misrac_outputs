{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of parse_options:\n```c\nstatic enum MHD_Result\nparse_options (struct MHD_Daemon *daemon,\n               struct MHD_InterimParams_ *params,\n               ...)\n{\n  va_list ap;\n  enum MHD_Result ret;\n\n  va_start (ap, params);\n  ret = parse_options_va (daemon,\n                          params,\n                          ap);\n  va_end (ap);\n  return ret;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n               struct MHD_InterimParams_ *params,\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The parameter params is declared as a non-const pointer (struct MHD_InterimParams_ *params). If neither parse_options nor the called parse_options_va modify the object pointed to by params (i.e. they only read its members), then the pointer should be declared to point to a const-qualified type (const struct MHD_InterimParams_ *params). In that case Rule 8.13 is violated. Example specific violation scenario: parse_options simply forwards params to parse_options_va and both functions only read fields of *params; neither writes to the pointee \u2014 yet params is not const-qualified."
}