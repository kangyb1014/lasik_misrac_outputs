{
  "user_message": "An agent A claimed that the following process_interim_params code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of process_interim_params.\n```c\nstatic bool\nprocess_interim_params (struct MHD_Daemon *d,\n                        const struct sockaddr **ppsockaddr,\n                        socklen_t *psockaddr_len,\n                        struct MHD_InterimParams_ *params)\n{\n  if (params->fdset_size_set)\n  {\n    if (0 >= params->fdset_size)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_APP_FD_SETSIZE value (%d) is not positive.\\n\"),\n                params->fdset_size);\n#endif /* HAVE_MESSAGES */\n      return false;\n    }\n    if (MHD_D_IS_USING_THREADS_ (d))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_APP_FD_SETSIZE is ignored for daemon started \" \\\n                   \"with MHD_USE_INTERNAL_POLLING_THREAD.\\n\"));\n#endif /* HAVE_MESSAGES */\n      (void) 0;\n    }\n    else if (MHD_D_IS_USING_POLL_ (d))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_APP_FD_SETSIZE is ignored for daemon started \" \\\n                   \"with MHD_USE_POLL.\\n\"));\n#endif /* HAVE_MESSAGES */\n      (void) 0;\n    }\n    else\n    { /* The daemon without internal threads, external sockets polling */\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n      if (((int) FD_SETSIZE) != params->fdset_size)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (d,\n                  _ (\"MHD_OPTION_APP_FD_SETSIZE value (%d) does not match \" \\\n                     \"the platform FD_SETSIZE value (%d) and this platform \" \\\n                     \"does not support overriding of FD_SETSIZE.\\n\"),\n                  params->fdset_size, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n        return false;\n      }\n#else  /* HAS_FD_SETSIZE_OVERRIDABLE */\n      d->fdset_size = params->fdset_size;\n      d->fdset_size_set_by_app = true;\n#endif /* HAS_FD_SETSIZE_OVERRIDABLE */\n    }\n  }\n\n  if (params->listen_fd_set)\n  {\n    if (MHD_INVALID_SOCKET == params->listen_fd)\n    {\n      (void) 0; /* Use MHD-created socket */\n    }\n#ifdef HAS_SIGNED_SOCKET\n    else if (0 > params->listen_fd)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"The value provided for MHD_OPTION_LISTEN_SOCKET \" \\\n                   \"is invalid.\\n\"));\n#endif /* HAVE_MESSAGES */\n      return false;\n    }\n#endif /* HAS_SIGNED_SOCKET */\n    else if (0 != (d->options & MHD_USE_NO_LISTEN_SOCKET))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_LISTEN_SOCKET specified for daemon \"\n                   \"with MHD_USE_NO_LISTEN_SOCKET flag set.\\n\"));\n#endif /* HAVE_MESSAGES */\n      (void) MHD_socket_close_ (params->listen_fd);\n      return false;\n    }\n    else\n    {\n      d->listen_fd = params->listen_fd;\n      d->listen_is_unix = _MHD_UNKNOWN;\n#ifdef MHD_USE_GETSOCKNAME\n      d->port = 0;  /* Force use of autodetection */\n#endif /* MHD_USE_GETSOCKNAME */\n    }\n  }\n\n  mhd_assert (! params->server_addr_len_set || params->pserver_addr_set);\n  if (params->pserver_addr_set)\n  {\n    if (NULL == params->pserver_addr)\n    {\n      /* The size must be zero if set */\n      if (params->server_addr_len_set && (0 != params->server_addr_len))\n        return false;\n      /* Ignore parameter if it is NULL */\n    }\n    else if (MHD_INVALID_SOCKET != d->listen_fd)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_LISTEN_SOCKET cannot be used together with \" \\\n                   \"MHD_OPTION_SOCK_ADDR_LEN or MHD_OPTION_SOCK_ADDR.\\n\"));\n#endif /* HAVE_MESSAGES */\n      return false;\n    }\n    else if (0 != (d->options & MHD_USE_NO_LISTEN_SOCKET))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_SOCK_ADDR_LEN or MHD_OPTION_SOCK_ADDR \" \\\n                   \"specified for daemon with MHD_USE_NO_LISTEN_SOCKET \" \\\n                   \"flag set.\\n\"));\n#endif /* HAVE_MESSAGES */\n      if (MHD_INVALID_SOCKET != d->listen_fd)\n      {\n        (void) MHD_socket_close_ (params->listen_fd);\n        params->listen_fd = MHD_INVALID_SOCKET;\n      }\n      return false;\n    }\n    else\n    {\n      *ppsockaddr = params->pserver_addr;\n      if (params->server_addr_len_set)\n      {\n        /* The size must be non-zero if set */\n        if (0 == params->server_addr_len)\n          return false;\n        *psockaddr_len = params->server_addr_len;\n      }\n      else\n        *psockaddr_len = 0;\n    }\n  }\n  return true;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nWhen params->listen_fd == MHD_INVALID_SOCKET the code executes the no-op statement \"(void) 0;\". That statement has no effect at runtime and removing it would not change program behaviour, so it constitutes dead code and therefore violates MISRA C 2023 Rule 2.2. Recommend removing the no-op or replacing the branch with a comment or other meaningful action.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function process_interim_params:\nstruct MHD_Daemon\n{\n\n  /**\n   * Callback function for all requests.\n   */\n  MHD_AccessHandlerCallback default_handler;\n\n  /**\n   * Closure argument to default_handler.\n   */\n  void *default_handler_cls;\n\n  /**\n   * Daemon's flags (bitfield).\n   *\n   * @remark Keep this member after pointer value to keep it\n   * properly aligned as it will be used as member of union MHD_DaemonInfo.\n   */\n  enum MHD_FLAG options;\n\n  /**\n   * Head of doubly-linked list of new, externally added connections.\n   */\n  struct MHD_Connection *new_connections_head;\n\n  /**\n   * Tail of doubly-linked list of new, externally added connections.\n   */\n  struct MHD_Connection *new_connections_tail;\n\n  /**\n   * Head of doubly-linked list of our current, active connections.\n   */\n  struct MHD_Connection *connections_head;\n\n  /**\n   * Tail of doubly-linked list of our current, active connections.\n   */\n  struct MHD_Connection *connections_tail;\n\n  /**\n   * Head of doubly-linked list of our current but suspended connections.\n   */\n  struct MHD_Connection *suspended_connections_head;\n\n  /**\n   * Tail of doubly-linked list of our current but suspended connections.\n   */\n  struct MHD_Connection *suspended_connections_tail;\n\n  /**\n   * Head of doubly-linked list of connections to clean up.\n   */\n  struct MHD_Connection *cleanup_head;\n\n  /**\n   * Tail of doubly-linked list of connections to clean up.\n   */\n  struct MHD_Connection *cleanup_tail;\n\n  /**\n   * _MHD_YES if the @e listen_fd socket is a UNIX domain socket.\n   */\n  enum MHD_tristate listen_is_unix;\n\n#ifdef EPOLL_SUPPORT\n  /**\n   * Head of EDLL of connections ready for processing (in epoll mode).\n   */\n  struct MHD_Connection *eready_head;\n\n  /**\n   * Tail of EDLL of connections ready for processing (in epoll mode)\n   */\n  struct MHD_Connection *eready_tail;\n\n  /**\n   * File descriptor associated with our epoll loop.\n   *\n   * @remark Keep this member after pointer value to keep it\n   * properly aligned as it will be used as member of union MHD_DaemonInfo.\n   */\n  int epoll_fd;\n\n  /**\n   * true if the @e listen_fd socket is in the 'epoll' set,\n   * false if not.\n   */\n  bool listen_socket_in_epoll;\n\n#ifdef UPGRADE_SUPPORT\n#ifdef HTTPS_SUPPORT\n  /**\n   * File descriptor associated with the #run_epoll_for_upgrade() loop.\n   * Only available if #MHD_USE_HTTPS_EPOLL_UPGRADE is set.\n   */\n  int epoll_upgrade_fd;\n\n  /**\n   * true if @e epoll_upgrade_fd is in the 'epoll' set,\n   * false if not.\n   */\n  bool upgrade_fd_in_epoll;\n#endif /* HTTPS_SUPPORT */\n\n  /**\n   * Head of EDLL of upgraded connections ready for processing (in epoll mode).\n   */\n  struct MHD_UpgradeResponseHandle *eready_urh_head;\n\n  /**\n   * Tail of EDLL of upgraded connections ready for processing (in epoll mode)\n   */\n  struct MHD_UpgradeResponseHandle *eready_urh_tail;\n#endif /* UPGRADE_SUPPORT */\n#endif /* EPOLL_SUPPORT */\n\n  /**\n   * Head of the XDLL of ALL connections with a default ('normal')\n   * timeout, sorted by timeout (earliest at the tail, most recently\n   * used connection at the head).  MHD can just look at the tail of\n   * this list to determine the timeout for all of its elements;\n   * whenever there is an event of a connection, the connection is\n   * moved back to the tail of the list.\n   *\n   * All connections by default start in this list; if a custom\n   * timeout that does not match @e connection_timeout_ms is set, they\n   * are moved to the @e manual_timeout_head-XDLL.\n   * Not used in MHD_USE_THREAD_PER_CONNECTION mode as each thread\n   * needs only one connection-specific timeout.\n   */\n  struct MHD_Connection *normal_timeout_head;\n\n  /**\n   * Tail of the XDLL of ALL connections with a default timeout,\n   * sorted by timeout (earliest timeout at the tail).\n   * Not used in MHD_USE_THREAD_PER_CONNECTION mode.\n   */\n  struct MHD_Connection *normal_timeout_tail;\n\n  /**\n   * Head of the XDLL of ALL connections with a non-default/custom\n   * timeout, unsorted.  MHD will do a O(n) scan over this list to\n   * determine the current timeout.\n   * Not used in MHD_USE_THREAD_PER_CONNECTION mode.\n   */\n  struct MHD_Connection *manual_timeout_head;\n\n  /**\n   * Tail of the XDLL of ALL connections with a non-default/custom\n   * timeout, unsorted.\n   * Not used in MHD_USE_THREAD_PER_CONNECTION mode.\n   */\n  struct MHD_Connection *manual_timeout_tail;\n\n  /**\n   * Function to call to check if we should accept or reject an\n   * incoming request.  May be NULL.\n   */\n  MHD_AcceptPolicyCallback apc;\n\n  /**\n   * Closure argument to apc.\n   */\n  void *apc_cls;\n\n  /**\n   * Function to call when we are done processing\n   * a particular request.  May be NULL.\n   */\n  MHD_RequestCompletedCallback notify_completed;\n\n  /**\n   * Closure argument to @e notify_completed.\n   */\n  void *notify_completed_cls;\n\n  /**\n   * Function to call when we are starting/stopping\n   * a connection.  May be NULL.\n   */\n  MHD_NotifyConnectionCallback notify_connection;\n\n  /**\n   * Closure argument to @e notify_connection.\n   */\n  void *notify_connection_cls;\n\n  /**\n   * Function to call with the full URI at the\n   * beginning of request processing.  May be NULL.\n   * <p>\n   * Returns the initial pointer to internal state\n   * kept by the client for the request.\n   */\n  LogCallback uri_log_callback;\n\n  /**\n   * Closure argument to @e uri_log_callback.\n   */\n  void *uri_log_callback_cls;\n\n  /**\n   * Function to call when we unescape escape sequences.\n   */\n  UnescapeCallback unescape_callback;\n\n  /**\n   * Closure for @e unescape_callback.\n   */\n  void *unescape_callback_cls;\n\n  /**\n   * Listen port.\n   *\n   * @remark Keep this member after pointer value to keep it\n   * properly aligned as it will be used as member of union MHD_DaemonInfo.\n   */\n  uint16_t port;\n\n#ifdef HAVE_MESSAGES\n  /**\n   * Function for logging error messages (if we\n   * support error reporting).\n   */\n  MHD_LogCallback custom_error_log;\n\n  /**\n   * Closure argument to @e custom_error_log.\n   */\n  void *custom_error_log_cls;\n#endif\n\n  /**\n   * Pointer to master daemon (NULL if this is the master)\n   */\n  struct MHD_Daemon *master;\n\n  /**\n   * Listen socket.\n   *\n   * @remark Keep this member after pointer value to keep it\n   * properly aligned as it will be used as member of union MHD_DaemonInfo.\n   */\n  MHD_socket listen_fd;\n\n  /**\n   * Listen socket is non-blocking.\n   */\n  bool listen_nonblk;\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /**\n   * Worker daemons (one per thread)\n   */\n  struct MHD_Daemon *worker_pool;\n#endif\n\n  /**\n   * Table storing number of connections per IP\n   */\n  void *per_ip_connection_count;\n\n  /**\n   * Number of active parallel connections.\n   *\n   * @remark Keep this member after pointer value to keep it\n   * properly aligned as it will be used as member of union MHD_DaemonInfo.\n   */\n  unsigned int connections;\n\n  /**\n   * Size of the per-connection memory pools.\n   */\n  size_t pool_size;\n\n  /**\n   * Increment for growth of the per-connection memory pools.\n   */\n  size_t pool_increment;\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /**\n   * Size of threads created by MHD.\n   */\n  size_t thread_stack_size;\n\n  /**\n   * Number of worker daemons\n   */\n  unsigned int worker_pool_size;\n\n  /**\n   * The select thread handle (if we have internal select)\n   */\n  MHD_thread_handle_ID_ tid;\n\n  /**\n   * Mutex for per-IP connection counts.\n   */\n  MHD_mutex_ per_ip_connection_mutex;\n\n  /**\n   * Mutex for (modifying) access to the \"cleanup\", \"normal_timeout\" and\n   * \"manual_timeout\" DLLs.\n   */\n  MHD_mutex_ cleanup_connection_mutex;\n\n  /**\n   * Mutex for any access to the \"new connections\" DL-list.\n   */\n  MHD_mutex_ new_connections_mutex;\n#endif\n\n  /**\n   * Our #MHD_OPTION_SERVER_INSANITY level, bits indicating\n   * which sanity checks are off.\n   */\n  enum MHD_DisableSanityCheck insanity_level;\n\n  /**\n   * Whether to allow/disallow/ignore reuse of listening address.\n   * The semantics is the following:\n   * 0: ignore (user did not ask for neither allow/disallow, use SO_REUSEADDR\n   *    except W32)\n   * >0: allow (use SO_REUSEPORT on most platforms, SO_REUSEADDR on Windows)\n   * <0: disallow (mostly no action, SO_EXCLUSIVEADDRUSE on Windows or SO_EXCLBIND\n   *     on Solaris)\n   */\n  int listening_address_reuse;\n\n\n  /**\n   * Inter-thread communication channel (also used to unblock\n   * select() in non-threaded code).\n   */\n  struct MHD_itc_ itc;\n\n  /**\n   * Are we shutting down?\n   */\n  volatile bool shutdown;\n\n  /**\n   * Has this daemon been quiesced via #MHD_quiesce_daemon()?\n   * If so, we should no longer use the @e listen_fd (including\n   * removing it from the @e epoll_fd when possible).\n   */\n  volatile bool was_quiesced;\n\n  /**\n   * Did we hit some system or process-wide resource limit while\n   * trying to accept() the last time? If so, we don't accept new\n   * connections until we close an existing one.  This effectively\n   * temporarily lowers the \"connection_limit\" to the current\n   * number of connections.\n   */\n  bool at_limit;\n\n  /*\n   * Do we need to process resuming connections?\n   */\n  volatile bool resuming;\n\n  /**\n   * Indicate that new connections in @e new_connections_head list\n   * need to be processed.\n   */\n  volatile bool have_new;\n\n  /**\n   * 'True' if some data is already waiting to be processed.\n   * If set to 'true' - zero timeout for select()/poll*()\n   * is used.\n   * Should be reset each time before processing connections\n   * and raised by any connection which require additional\n   * immediately processing (application does not provide\n   * data for response, data waiting in TLS buffers etc.)\n   */\n  bool data_already_pending;\n\n  /**\n   * Limit on the number of parallel connections.\n   */\n  unsigned int connection_limit;\n\n  /**\n   * After how many milliseconds of inactivity should\n   * this connection time out?\n   * Zero for no timeout.\n   */\n  uint64_t connection_timeout_ms;\n\n  /**\n   * Maximum number of connections per IP, or 0 for\n   * unlimited.\n   */\n  unsigned int per_ip_connection_limit;\n\n  /**\n   * The strictness level for parsing of incoming data.\n   * @see #MHD_OPTION_CLIENT_DISCIPLINE_LVL\n   */\n  int client_discipline;\n\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n  /**\n   * The value of FD_SETSIZE used by the daemon.\n   * For external sockets polling this is the value provided by the application\n   * via MHD_OPTION_APP_FD_SETSIZE or current FD_SETSIZE value.\n   * For internal threads modes this is always current FD_SETSIZE value.\n   */\n  int fdset_size;\n\n  /**\n   * Indicates whether @a fdset_size value was set by application.\n   * 'false' if default value is used.\n   */\n  bool fdset_size_set_by_app;\n#endif /* HAS_FD_SETSIZE_OVERRIDABLE */\n\n  /**\n   * True if SIGPIPE is blocked\n   */\n  bool sigpipe_blocked;\n\n#ifdef HTTPS_SUPPORT\n#ifdef UPGRADE_SUPPORT\n  /**\n   * Head of DLL of upgrade response handles we are processing.\n   * Used for upgraded TLS connections when thread-per-connection\n   * is not used.\n   */\n  struct MHD_UpgradeResponseHandle *urh_head;\n\n  /**\n   * Tail of DLL of upgrade response handles we are processing.\n   * Used for upgraded TLS connections when thread-per-connection\n   * is not used.\n   */\n  struct MHD_UpgradeResponseHandle *urh_tail;\n#endif /* UPGRADE_SUPPORT */\n\n  /**\n   * Desired cipher algorithms.\n   */\n  gnutls_priority_t priority_cache;\n\n  /**\n   * What kind of credentials are we offering\n   * for SSL/TLS?\n   */\n  gnutls_credentials_type_t cred_type;\n\n  /**\n   * Server x509 credentials\n   */\n  gnutls_certificate_credentials_t x509_cred;\n\n  /**\n   * Diffie-Hellman parameters\n   */\n  gnutls_dh_params_t dh_params;\n\n  /**\n   * Server PSK credentials\n   */\n  gnutls_psk_server_credentials_t psk_cred;\n\n#if GNUTLS_VERSION_MAJOR >= 3\n  /**\n   * Function that can be used to obtain the certificate.  Needed\n   * for SNI support.  See #MHD_OPTION_HTTPS_CERT_CALLBACK.\n   */\n  gnutls_certificate_retrieve_function2 *cert_callback;\n\n  /**\n   * Function that can be used to obtain the shared key.\n   */\n  MHD_PskServerCredentialsCallback cred_callback;\n\n  /**\n   * Closure for @e cred_callback.\n   */\n  void *cred_callback_cls;\n#endif\n\n#if GNUTLS_VERSION_NUMBER >= 0x030603\n  /**\n   * Function that can be used to obtain the certificate.  Needed\n   * for OCSP stapling support.  See #MHD_OPTION_HTTPS_CERT_CALLBACK2.\n   */\n  gnutls_certificate_retrieve_function3 *cert_callback2;\n#endif\n\n  /**\n   * Pointer to our SSL/TLS key (in ASCII) in memory.\n   */\n  const char *https_mem_key;\n\n  /**\n   * Pointer to our SSL/TLS certificate (in ASCII) in memory.\n   */\n  const char *https_mem_cert;\n\n  /**\n   * Pointer to 0-terminated HTTPS passphrase in memory.\n   */\n  const char *https_key_password;\n\n  /**\n   * Pointer to our SSL/TLS certificate authority (in ASCII) in memory.\n   */\n  const char *https_mem_trust;\n\n  /**\n   * Our Diffie-Hellman parameters in memory.\n   */\n  gnutls_dh_params_t https_mem_dhparams;\n\n  /**\n   * true if we have initialized @e https_mem_dhparams.\n   */\n  bool have_dhparams;\n\n  /**\n   * true if ALPN is disabled.\n   */\n  bool disable_alpn;\n\n  #endif /* HTTPS_SUPPORT */\n\n#ifdef DAUTH_SUPPORT\n\n  /**\n   * Character array of random values.\n   */\n  const char *digest_auth_random;\n\n  /**\n   * Size of @a digest_auth_random.\n   */\n  size_t digest_auth_rand_size;\n\n  /**\n   * The malloc'ed copy of the @a digest_auth_random.\n   */\n  void *digest_auth_random_copy;\n\n  /**\n   * An array that contains the map nonce-nc.\n   */\n  struct MHD_NonceNc *nnc;\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /**\n   * A rw-lock for synchronizing access to @e nnc.\n   */\n  MHD_mutex_ nnc_lock;\n#endif\n\n  /**\n   * Size of the nonce-nc array.\n   */\n  unsigned int nonce_nc_size;\n\n  /**\n   * Nonce bind type.\n   */\n  unsigned int dauth_bind_type;\n\n  /**\n   * Default nonce validity length.\n   */\n  unsigned int dauth_def_nonce_timeout;\n\n  /**\n   * Default maximum nc (nonce count) value.\n   */\n  uint32_t dauth_def_max_nc;\n#endif\n\n#ifdef TCP_FASTOPEN\n  /**\n   * The queue size for incoming SYN + DATA packets.\n   */\n  unsigned int fastopen_queue_size;\n#endif\n\n  /**\n   * The size of queue for listen socket.\n   */\n  unsigned int listen_backlog_size;\n\n  /* TODO: replace with a single member */\n  /**\n   * The value to be returned by #MHD_get_daemon_info()\n   */\n  union MHD_DaemonInfo daemon_info_dummy_listen_fd;\n\n#ifdef EPOLL_SUPPORT\n  /**\n   * The value to be returned by #MHD_get_daemon_info()\n   */\n  union MHD_DaemonInfo daemon_info_dummy_epoll_fd;\n#endif /* EPOLL_SUPPORT */\n\n  /**\n   * The value to be returned by #MHD_get_daemon_info()\n   */\n  union MHD_DaemonInfo daemon_info_dummy_num_connections;\n\n  /**\n   * The value to be returned by #MHD_get_daemon_info()\n   */\n  union MHD_DaemonInfo daemon_info_dummy_flags;\n\n  /**\n   * The value to be returned by #MHD_get_daemon_info()\n   */\n  union MHD_DaemonInfo daemon_info_dummy_port;\n\n#if defined(_DEBUG) && defined(HAVE_ACCEPT4)\n  /**\n   * If set to 'true', accept() function will be used instead of accept4() even\n   * if accept4() is available.\n   * This is a workaround for zzuf, which does not support sockets created\n   * by accept4() function.\n   * There is no API to change the value of this member, it can be flipped\n   * only by direct access to the struct member.\n   */\n  bool avoid_accept4;\n#endif /* _DEBUG */\n}\n...\nstruct MHD_InterimParams_\n{\n  /**\n   * The total number of all user options used.\n   *\n   * Contains number only of meaningful options, i.e. #MHD_OPTION_END and\n   * #MHD_OPTION_ARRAY themselves are not counted, while options inside\n   * #MHD_OPTION_ARRAY are counted.\n   */\n  size_t num_opts;\n  /**\n   * Set to 'true' if @a fdset_size is set by application.\n   */\n  bool fdset_size_set;\n  /**\n   * The value for #MHD_OPTION_APP_FD_SETSIZE set by application.\n   */\n  int fdset_size;\n  /**\n   * Set to 'true' if @a listen_fd is set by application.\n   */\n  bool listen_fd_set;\n  /**\n   * Application-provided listen socket.\n   */\n  MHD_socket listen_fd;\n  /**\n   * Set to 'true' if @a server_addr is set by application.\n   */\n  bool pserver_addr_set;\n  /**\n   * Application-provided struct sockaddr to bind server to.\n   */\n  const struct sockaddr *pserver_addr;\n  /**\n   * Set to 'true' if @a server_addr_len is set by application.\n   */\n  bool server_addr_len_set;\n  /**\n   * Applicaiton-provided the size of the memory pointed by @a server_addr.\n   */\n  socklen_t server_addr_len;\n}\n...\n#define MHD_D_IS_USING_THREADS_(d) (0!=(d->options&(MHD_USE_INTERNAL_POLLING_THREAD)))\n...\n#define MHD_D_IS_USING_POLL_(d) (0!=((d)->options&MHD_USE_POLL))\n...\n#define MHD_INVALID_SOCKET (-1)\n...\n#define HAS_SIGNED_SOCKET 1\n...\n#define MHD_socket_close_(fd) ((0==close((fd)))||(EBADF!=errno))\n...\nvoid\nMHD_DLOG (const struct MHD_Daemon *daemon,\n          const char *format,\n          ...)\n{\n  va_list va;\n\n  if (0 == (daemon->options & MHD_USE_ERROR_LOG))\n    return;\n  va_start (va, format);\n  daemon->custom_error_log (daemon->custom_error_log_cls,\n                            format,\n                            va);\n  va_end (va);\n}\n...\n#define mhd_assert(ignore) ((void)0)\n...\n#define MHD_USE_GETSOCKNAME 1\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 2.2 forbids operations that are executed but whose removal would not affect program behaviour. In process_interim_params the branch for params->listen_fd == MHD_INVALID_SOCKET contains the statement \"(void) 0;\". That statement is an executed no-op: it has no side effects and removing it would not change program behaviour, so it meets the definition of dead code. The no-op appears to exist only to occupy the branch when the logging calls are removed via the HAVE_MESSAGES conditional. To conform with Rule 2.2 remove the no-op, or better: conditionally compile the entire branch with HAVE_MESSAGES, or replace the statement with a comment (or another semantically meaningful action)."
}