{
  "user_message": "Target function code is:\n```c\nstatic bool\nprocess_interim_params (struct MHD_Daemon *d,\n                        const struct sockaddr **ppsockaddr,\n                        socklen_t *psockaddr_len,\n                        struct MHD_InterimParams_ *params)\n{\n  if (params->fdset_size_set)\n  {\n    if (0 >= params->fdset_size)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_APP_FD_SETSIZE value (%d) is not positive.\\n\"),\n                params->fdset_size);\n#endif /* HAVE_MESSAGES */\n      return false;\n    }\n    if (MHD_D_IS_USING_THREADS_ (d))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_APP_FD_SETSIZE is ignored for daemon started \" \\\n                   \"with MHD_USE_INTERNAL_POLLING_THREAD.\\n\"));\n#endif /* HAVE_MESSAGES */\n      (void) 0;\n    }\n    else if (MHD_D_IS_USING_POLL_ (d))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_APP_FD_SETSIZE is ignored for daemon started \" \\\n                   \"with MHD_USE_POLL.\\n\"));\n#endif /* HAVE_MESSAGES */\n      (void) 0;\n    }\n    else\n    { /* The daemon without internal threads, external sockets polling */\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n      if (((int) FD_SETSIZE) != params->fdset_size)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (d,\n                  _ (\"MHD_OPTION_APP_FD_SETSIZE value (%d) does not match \" \\\n                     \"the platform FD_SETSIZE value (%d) and this platform \" \\\n                     \"does not support overriding of FD_SETSIZE.\\n\"),\n                  params->fdset_size, (int) FD_SETSIZE);\n#endif /* HAVE_MESSAGES */\n        return false;\n      }\n#else  /* HAS_FD_SETSIZE_OVERRIDABLE */\n      d->fdset_size = params->fdset_size;\n      d->fdset_size_set_by_app = true;\n#endif /* HAS_FD_SETSIZE_OVERRIDABLE */\n    }\n  }\n\n  if (params->listen_fd_set)\n  {\n    if (MHD_INVALID_SOCKET == params->listen_fd)\n    {\n      (void) 0; /* Use MHD-created socket */\n    }\n#ifdef HAS_SIGNED_SOCKET\n    else if (0 > params->listen_fd)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"The value provided for MHD_OPTION_LISTEN_SOCKET \" \\\n                   \"is invalid.\\n\"));\n#endif /* HAVE_MESSAGES */\n      return false;\n    }\n#endif /* HAS_SIGNED_SOCKET */\n    else if (0 != (d->options & MHD_USE_NO_LISTEN_SOCKET))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_LISTEN_SOCKET specified for daemon \"\n                   \"with MHD_USE_NO_LISTEN_SOCKET flag set.\\n\"));\n#endif /* HAVE_MESSAGES */\n      (void) MHD_socket_close_ (params->listen_fd);\n      return false;\n    }\n    else\n    {\n      d->listen_fd = params->listen_fd;\n      d->listen_is_unix = _MHD_UNKNOWN;\n#ifdef MHD_USE_GETSOCKNAME\n      d->port = 0;  /* Force use of autodetection */\n#endif /* MHD_USE_GETSOCKNAME */\n    }\n  }\n\n  mhd_assert (! params->server_addr_len_set || params->pserver_addr_set);\n  if (params->pserver_addr_set)\n  {\n    if (NULL == params->pserver_addr)\n    {\n      /* The size must be zero if set */\n      if (params->server_addr_len_set && (0 != params->server_addr_len))\n        return false;\n      /* Ignore parameter if it is NULL */\n    }\n    else if (MHD_INVALID_SOCKET != d->listen_fd)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_LISTEN_SOCKET cannot be used together with \" \\\n                   \"MHD_OPTION_SOCK_ADDR_LEN or MHD_OPTION_SOCK_ADDR.\\n\"));\n#endif /* HAVE_MESSAGES */\n      return false;\n    }\n    else if (0 != (d->options & MHD_USE_NO_LISTEN_SOCKET))\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (d,\n                _ (\"MHD_OPTION_SOCK_ADDR_LEN or MHD_OPTION_SOCK_ADDR \" \\\n                   \"specified for daemon with MHD_USE_NO_LISTEN_SOCKET \" \\\n                   \"flag set.\\n\"));\n#endif /* HAVE_MESSAGES */\n      if (MHD_INVALID_SOCKET != d->listen_fd)\n      {\n        (void) MHD_socket_close_ (params->listen_fd);\n        params->listen_fd = MHD_INVALID_SOCKET;\n      }\n      return false;\n    }\n    else\n    {\n      *ppsockaddr = params->pserver_addr;\n      if (params->server_addr_len_set)\n      {\n        /* The size must be non-zero if set */\n        if (0 == params->server_addr_len)\n          return false;\n        *psockaddr_len = params->server_addr_len;\n      }\n      else\n        *psockaddr_len = 0;\n    }\n  }\n  return true;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'process_interim_params': {'callees': ['MHD_DLOG'], 'callers': ['MHD_start_daemon_va']}, 'MHD_DLOG': {'callees': [], 'callers': ['connection_close_error', 'check_connection_reply', 'transmit_error_response_len', 'connection_add_header', 'parse_cookie_header', 'process_request_body', 'parse_connection_headers', 'get_req_header', 'get_req_headers', 'MHD_connection_handle_read', 'MHD_connection_handle_write', 'connection_check_timedout', 'cleanup_connection', 'MHD_connection_epoll_update_', 'MHD_queue_response', 'MHD_ip_limit_add', 'MHD_get_fdset2', 'thread_main_handle_connection', 'new_connection_prepare_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_get_timeout64', 'MHD_run_from_select2', 'MHD_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll', 'MHD_polling_thread', 'unescape_wrapper', 'MHD_quiesce_daemon', 'parse_options_va', 'setup_epoll_fd', 'setup_epoll_to_listen', 'process_interim_params', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_connection_set_nodelay_state_', 'MHD_connection_set_cork_state_', 'post_send_setopt', 'MHD_response_execute_upgrade_', 'MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_', 'calculate_add_nonce_with_retry', 'check_uri_match', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner', 'MHD_basic_auth_get_username_password3', 'MHD_basic_auth_get_username_password', 'MHD_queue_basic_auth_required_response3']}, 'MHD_start_daemon_va': {'callees': ['parse_options_va', 'process_interim_params', 'MHD_DLOG', '__builtin_unreachable', 'MHD_socket_create_listen_', 'MHD_socket_nonblocking_', 'setup_epoll_to_listen', 'MHD_create_named_thread_', 'MHD_stop_daemon'], 'callers': ['MHD_start_daemon']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_DLOG",
    "mhd_assert",
    "MHD_D_IS_USING_THREADS_",
    "MHD_D_IS_USING_POLL_",
    "HAS_FD_SETSIZE_OVERRIDABLE",
    "FD_SETSIZE",
    "MHD_INVALID_SOCKET",
    "HAS_SIGNED_SOCKET",
    "MHD_socket_close_",
    "MHD_USE_NO_LISTEN_SOCKET",
    "struct MHD_InterimParams_",
    "struct MHD_Daemon",
    "_",
    "HAVE_MESSAGES",
    "MHD_USE_GETSOCKNAME"
  ],
  "explanation": "To decide whether process_interim_params uses any compiler/language extensions we must examine the definitions of all macros, constants, types and functions called or referenced, because extensions can be hidden in those definitions. Brief reasons for each symbol:\n\n- MHD_DLOG: may be a macro (variadic macro, GCC extension) or function; its definition could use compiler extensions (variadic macros, __attribute__, statement-expressions, etc.).\n- mhd_assert: assertion macro; could expand to compiler-specific intrinsics or __builtin_* calls (extensions).\n- MHD_D_IS_USING_THREADS_: macro used as a condition; its expansion might use extension syntax or rely on compiler-specific features.\n- MHD_D_IS_USING_POLL_: same reason as above \u2014 need the macro body to ensure no extensions are used.\n- HAS_FD_SETSIZE_OVERRIDABLE: conditional compilation flag that changes code path; the alternative branch may contain extensions, so its presence/definition matters.\n- FD_SETSIZE: platform macro; its definition or use (casts/comparisons) could involve platform-specific typedefs or extension-dependent behavior.\n- MHD_INVALID_SOCKET: socket sentinel constant; its definition might use compiler-specific casts or integer types (e.g. ((SOCKET)-1)) that could be an extension depending on platform headers.\n- HAS_SIGNED_SOCKET: conditional flag; if set the code path contains comparisons like (0 > params->listen_fd) \u2014 need to see how socket type is typedef'd (signed/unsigned) which may involve extensions.\n- MHD_socket_close_: called function/macro to close sockets; its implementation might use inline functions, macros, or compiler intrinsics (extensions).\n- MHD_USE_NO_LISTEN_SOCKET: option macro used in bitwise tests; need definition to ensure no extension usage in option handling macros.\n- struct MHD_InterimParams_: the layout and types of fields (fdset_size, listen_fd, pserver_addr, server_addr_len_set, etc.) must be known to confirm no non\u2011standard type usage or extension-specific attributes are present.\n- struct MHD_Daemon: the daemon struct fields accessed (fdset_size, fdset_size_set_by_app, options, listen_fd, listen_is_unix, port) must be inspected to ensure no extension attributes, bitfields with compiler-specific behaviour, or non\u2011portable types are used.\n- _: the translation macro (usually gettext alias); its definition could be a macro or function and might use variadic macros or other extensions.\n- HAVE_MESSAGES: controls whether MHD_DLOG calls are compiled in; definitions tied to this flag might introduce extension usage when enabled.\n- MHD_USE_GETSOCKNAME: controls the code that assigns d->port; relevant because the guarded code may rely on platform-specific helpers or extension features.\n\nExamining these symbols' definitions lets the next analyst determine whether any language/compiler extensions (e.g. GCC __builtin_*, __attribute__, statement expressions, variadic macro extensions, compiler-specific inline assembly, non\u2011standard type attributes) are actually used in code paths exercised by process_interim_params."
}