{
  "user_message": "Target function code is:\n```c\nstatic ssize_t\nfile_reader (void *cls, uint64_t pos, char *buf, size_t max)\n{\n  FILE *file = (FILE *) cls;\n  size_t bytes_read;\n\n  /* 'fseek' may not support files larger 2GiB, depending on platform.\n   * For production code, make sure that 'pos' has valid values, supported by\n   * 'fseek', or use 'fseeko' or similar function. */\n  if (0 != fseek (file, (long) pos, SEEK_SET))\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  bytes_read = fread (buf, 1, max, file);\n  if (0 == bytes_read)\n    return (0 != ferror (file)) ? MHD_CONTENT_READER_END_WITH_ERROR :\n           MHD_CONTENT_READER_END_OF_STREAM;\n  return (ssize_t) bytes_read;\n}\n```\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "ssize_t",
    "MHD_CONTENT_READER_END_WITH_ERROR",
    "MHD_CONTENT_READER_END_OF_STREAM",
    "FILE",
    "fseek",
    "fread",
    "ferror",
    "SEEK_SET",
    "uint64_t",
    "size_t",
    "sizeof(long) / width-of-long (platform characteristic)",
    "sizeof(ssize_t) / width-of-ssize_t (platform characteristic)"
  ],
  "explanation": "For each symbol: \n\n- ssize_t: This type is not part of ISO C (it is a POSIX type on many systems) and therefore may be a compiler or platform extension. To decide whether its use violates the \"no language extensions\" rule you must inspect its typedef/definition (which header provides it) and whether the target compiler documents it as an extension. Also needed to check compatibility/implicit conversions when returning (ssize_t). \n\n- MHD_CONTENT_READER_END_WITH_ERROR and MHD_CONTENT_READER_END_OF_STREAM: These macros/constants are declared outside the function (likely in the microhttpd library). Their definitions must be inspected to ensure they do not themselves rely on compiler-specific extensions (e.g., GCC statement-expressions, typeof, attributes, inline asm, or other non\u2011standard constructs) and to know their types (integral type, cast, enum, etc.). If they expand to language\u2011extension constructs, the function would be using an extension indirectly. \n\n- FILE: The definition of FILE (from <stdio.h>) should be checked for any implementation\u2011specific extensions or non\u2011standard qualifiers used in the target environment. Also needed to confirm that casting the incoming void* to FILE* is valid in the environment. \n\n- fseek, fread, ferror: Their declarations/prototypes must be checked to ensure they are standard C library functions (no compiler extension in their declarations, e.g., nonstandard attributes, varargs macros, or nonportable calling conventions). Also to confirm the exact return types and behavior so we can determine whether the function\u2019s usage (casts, return values) introduces any extension use. \n\n- SEEK_SET: Macro definition needs inspection to ensure it is a simple standard macro and does not hide any extension features. \n\n- uint64_t and size_t: Confirm these types come from standard headers (<stdint.h>, <stddef.h>/<stdio.h>) in the target environment and are not implemented via compiler extensions; the width of uint64_t and size_t as provided on the target platform can affect whether casts (e.g., (long) pos) are narrowing and whether any nonstandard types are used. \n\n- sizeof(long) / width-of-long (platform characteristic): The cast (long) pos is present in the code. Whether this is safe/standard and whether it uses an extension depends on the platform width of long. You must know the target platform's long width to determine if this cast is relying on non\u2011standard behavior (e.g., truncation) or on any compiler-provided nonstandard long size. \n\n- sizeof(ssize_t) / width-of-ssize_t (platform characteristic): To determine whether returning ssize_t is standard or an extension, and to check value ranges and implicit conversions, you must know the size/representation of ssize_t on the target platform.\n\nIn short: to decide if the target function violates the MISRA requirement against compiler language extensions you must inspect the definitions/declarations of the external types and macros used (ssize_t, the MHD_* macros, FILE and stdio functions/macros, and standard integer/size types) and the relevant platform characteristics (widths of long and ssize_t). If any of those symbols are provided by the compiler or platform via documented language extensions, the occurrence in this function would be a violation; otherwise it would not."
}