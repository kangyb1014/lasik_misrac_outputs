{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_socket_nonblocking_:\n```c\nint\nMHD_socket_nonblocking_ (MHD_socket sock)\n{\n#if defined(MHD_POSIX_SOCKETS)\n  int flags;\n\n  flags = fcntl (sock,\n                 F_GETFL);\n  if (-1 == flags)\n    return 0;\n\n  if ( ((flags | O_NONBLOCK) != flags) &&\n       (0 != fcntl (sock,\n                    F_SETFL,\n                    flags | O_NONBLOCK)) )\n    return 0;\n#elif defined(MHD_WINSOCK_SOCKETS)\n  unsigned long flags = 1;\n\n  if (0 != ioctlsocket (sock,\n                        (int) FIONBIO,\n                        &flags))\n    return 0;\n#endif /* MHD_WINSOCK_SOCKETS */\n  return ! 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_socket_nonblocking_:\n#define MHD_POSIX_SOCKETS 1\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No controlling expressions in the provided C code are invariant at compile- or run-time, so nothing needs to be flagged for Rule 14.3. Details: \n\n- The #if / #elif preprocessor selection (e.g. #if defined(MHD_POSIX_SOCKETS)) is handled by the preprocessor and is not a C controlling expression governed by MISRA Rule 14.3. The presence of a compile-time macro does not create an invariant C controlling expression in the generated code.\n\n- if (-1 == flags) depends on the variable 'flags' read from fcntl(F_GETFL); it is not invariant.\n\n- if (((flags | O_NONBLOCK) != flags) && (0 != fcntl(...))) combines a runtime test on 'flags' with a call to fcntl; the controlling expression depends on runtime values and function results, so it is not invariant.\n\n- if (0 != ioctlsocket(...)) depends on the return value of ioctlsocket and is not invariant.\n\n- There are no for/while/do-while loops or switch statements with constant controlling expressions in the provided code. The final 'return ! 0;' is a constant expression but it is a return expression, not a controlling expression.\n\nGiven the above, there are no code fragments that violate MISRA C 2023 Rule 14.3 in the supplied function implementation."
}