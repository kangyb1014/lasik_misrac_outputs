{
  "user_message": "Target function code is:\n```c\nint\nMHD_socket_nonblocking_ (MHD_socket sock)\n{\n#if defined(MHD_POSIX_SOCKETS)\n  int flags;\n\n  flags = fcntl (sock,\n                 F_GETFL);\n  if (-1 == flags)\n    return 0;\n\n  if ( ((flags | O_NONBLOCK) != flags) &&\n       (0 != fcntl (sock,\n                    F_SETFL,\n                    flags | O_NONBLOCK)) )\n    return 0;\n#elif defined(MHD_WINSOCK_SOCKETS)\n  unsigned long flags = 1;\n\n  if (0 != ioctlsocket (sock,\n                        (int) FIONBIO,\n                        &flags))\n    return 0;\n#endif /* MHD_WINSOCK_SOCKETS */\n  return ! 0;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_socket_nonblocking_': {'callees': [], 'callers': ['MHD_add_connection', 'MHD_accept_connection', 'MHD_start_daemon_va']}, 'MHD_add_connection': {'callees': ['MHD_cleanup_connections', 'MHD_DLOG', 'MHD_socket_nonblocking_', 'MHD_socket_noninheritable_', 'internal_add_connection', '__builtin_unreachable'], 'callers': []}, 'MHD_accept_connection': {'callees': ['MHD_DLOG', '__builtin_unreachable', 'MHD_socket_nonblocking_', 'MHD_socket_noninheritable_', 'internal_add_connection'], 'callers': ['internal_run_from_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll']}, 'MHD_start_daemon_va': {'callees': ['parse_options_va', 'process_interim_params', 'MHD_DLOG', '__builtin_unreachable', 'MHD_socket_create_listen_', 'MHD_socket_nonblocking_', 'setup_epoll_to_listen', 'MHD_create_named_thread_', 'MHD_stop_daemon'], 'callers': ['MHD_start_daemon']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_POSIX_SOCKETS",
    "MHD_WINSOCK_SOCKETS",
    "MHD_socket",
    "fcntl",
    "F_GETFL",
    "F_SETFL",
    "O_NONBLOCK",
    "ioctlsocket",
    "FIONBIO",
    "<fcntl.h>",
    "<winsock2.h>"
  ],
  "explanation": "- MHD_POSIX_SOCKETS: The function body is conditional on this macro. We must know whether this macro can be defined in build configurations to determine if POSIX-specific APIs are actually used (potentially language/platform extensions beyond ISO C).\n- MHD_WINSOCK_SOCKETS: Same as above for the Win32/WinSock path; required to know if the Windows-specific code is compiled.\n- MHD_socket: The typedef/alias for the socket parameter may be platform-specific (e.g. int on POSIX, SOCKET on WinSock). Its definition is needed to see whether any non\u2011standard type or compiler extension is used.\n- fcntl: This is a POSIX API (not part of ISO C). We need its declaration/availability to determine if the code relies on a non\u2011ISO extension.\n- F_GETFL: POSIX macro used with fcntl; required to decide whether the code depends on POSIX extensions.\n- F_SETFL: POSIX macro used with fcntl; same rationale.\n- O_NONBLOCK: POSIX macro/flag; required to check for use of POSIX-specific flags (extension relative to ISO C).\n- ioctlsocket: WinSock API (Windows-specific). Its presence indicates use of a platform extension; we must inspect its declaration/semantics to assess MISRA rule violation.\n- FIONBIO: WinSock/OS macro controlling nonblocking mode; needed to determine whether Windows-specific macros (extensions) are used.\n- <fcntl.h>: Header that declares fcntl and the F_*/O_* macros on POSIX systems. Inspecting it shows whether these are standard C or platform extensions.\n- <winsock2.h>: Header that declares ioctlsocket, FIONBIO and SOCKET on Windows. Needed to confirm these are Windows extensions rather than ISO C features.\n\nThese symbols/headers are the ones whose definitions determine whether the code depends on non\u2011ISO language/platform extensions (POSIX or WinSock). They must be available to a downstream analyzer to conclude if the target function violates the MISRA rule prohibiting language extensions."
}