{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_socket_nonblocking_:\n```c\nint\nMHD_socket_nonblocking_ (MHD_socket sock)\n{\n#if defined(MHD_POSIX_SOCKETS)\n  int flags;\n\n  flags = fcntl (sock,\n                 F_GETFL);\n  if (-1 == flags)\n    return 0;\n\n  if ( ((flags | O_NONBLOCK) != flags) &&\n       (0 != fcntl (sock,\n                    F_SETFL,\n                    flags | O_NONBLOCK)) )\n    return 0;\n#elif defined(MHD_WINSOCK_SOCKETS)\n  unsigned long flags = 1;\n\n  if (0 != ioctlsocket (sock,\n                        (int) FIONBIO,\n                        &flags))\n    return 0;\n#endif /* MHD_WINSOCK_SOCKETS */\n  return ! 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_socket_nonblocking_:\n#define MHD_POSIX_SOCKETS 1\n...\ntypedef int MHD_socket\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler language extensions are used in the provided code. Specific checks performed:\n- Conditional compilation (#if defined / #elif / #endif) and use of platform macros (MHD_POSIX_SOCKETS, MHD_WINSOCK_SOCKETS) are standard preprocessor features, not language extensions.\n- Use of fcntl, ioctlsocket, O_NONBLOCK, FIONBIO are platform/library APIs (POSIX/WinSock), not C language compiler extensions; they are platform-specific functions/macros rather than compiler language extensions (Rule 1.2 concerns compiler language extensions such as GCC nested functions, statement-expressions, typeof, inline asm, or nonstandard keywords).\n- The typedef (typedef int MHD_socket), casts ((int) FIONBIO), integer literals, operators, and return syntax (including the unusual but valid \"return ! 0;\") are all standard C and not extensions.\n- Preprocessor macros and the #define shown are standard C preprocessing.\n\nTherefore there are no fragments that should be flagged under MISRA C 2023 Rule 1.2 (language extensions should not be used). If the project compiler documentation explicitly declares any of the used functions/macros as compiler-specific language extensions (rather than library/platform APIs), those specific items should be re-evaluated; based on common compiler documentation, none appear to be language extensions."
}