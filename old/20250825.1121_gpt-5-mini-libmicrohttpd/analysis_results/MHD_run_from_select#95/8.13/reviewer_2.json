{
  "user_message": "An agent A claimed that the following MHD_run_from_select code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_run_from_select.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_run_from_select (struct MHD_Daemon *daemon,\n                     const fd_set *read_fd_set,\n                     const fd_set *write_fd_set,\n                     const fd_set *except_fd_set)\n{\n  return MHD_run_from_select2 (daemon,\n                               read_fd_set,\n                               write_fd_set,\n                               except_fd_set,\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n                               daemon->fdset_size_set_by_app ?\n                               ((unsigned int) daemon->fdset_size) :\n                               ((unsigned int) _MHD_SYS_DEFAULT_FD_SETSIZE)\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n                               ((unsigned int) _MHD_SYS_DEFAULT_FD_SETSIZE)\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n                               );\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'daemon' is declared as 'struct MHD_Daemon *daemon' in MHD_run_from_select and is passed unchanged to MHD_run_from_select2 via the call 'MHD_run_from_select2(daemon, ... )'. If neither MHD_run_from_select nor MHD_run_from_select2 modify the pointed-to object, the pointer should be declared as 'const struct MHD_Daemon *' to satisfy MISRA C 2023 Rule 8.13. The shown non-const usage therefore violates the rule (or at least indicates a likely violation).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not proven correct from the snippet alone. MISRA C 2023 Rule 8.13 says a pointer should point to a const-qualified type whenever possible, i.e. if the function (and any callees) do not modify the pointee the parameter should be declared pointing-to-const. However, the shown code only shows MHD_run_from_select forwarding the daemon parameter to MHD_run_from_select2; it does not show whether either function (or other callees) modify the pointed-to MHD_Daemon or whether MHD_run_from_select2 is declared to take a non-const pointer. If MHD_run_from_select2 requires a non-const pointer (or the implementation actually mutates *daemon), the non-const parameter is required and the report is incorrect. If neither function nor any callees ever modify the object and MHD_run_from_select2 could accept a const pointer, then the API could be improved to use const and that would satisfy Rule 8.13 \u2014 but that is a suggested change, not demonstrated by the excerpt. Therefore the claim of a definite violation is not supported; you need to inspect the declaration/implementation of MHD_run_from_select2 and usages of daemon to determine if the pointer can actually be made const."
}