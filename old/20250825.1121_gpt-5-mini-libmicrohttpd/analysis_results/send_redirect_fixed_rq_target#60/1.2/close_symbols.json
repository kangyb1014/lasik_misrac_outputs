{
  "user_message": "Target function code is:\n```c\nstatic void\nsend_redirect_fixed_rq_target (struct MHD_Connection *c)\n{\n  char *b;\n  size_t fixed_uri_len;\n  size_t i;\n  size_t o;\n  char *hdr_name;\n  size_t hdr_name_len;\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVING == c->state);\n  mhd_assert (0 != c->rq.hdrs.rq_line.num_ws_in_uri);\n  mhd_assert (c->rq.hdrs.rq_line.num_ws_in_uri <= \\\n              c->rq.req_target_len);\n  fixed_uri_len = c->rq.req_target_len\n                  + 2 * c->rq.hdrs.rq_line.num_ws_in_uri;\n  if ( (fixed_uri_len + 200 > c->daemon->pool_size) ||\n       (fixed_uri_len > MHD_MAX_FIXED_URI_LEN) ||\n       (NULL == (b = malloc (fixed_uri_len + 1))) )\n  {\n    connection_close_error (c,\n                            _ (\"The request has whitespace character is \" \\\n                               \"in the URI and the URI is too large to \" \\\n                               \"send automatic redirect to fixed URI.\\n\"));\n    return;\n  }\n  i = 0;\n  o = 0;\n\n  do\n  {\n    const char chr = c->rq.hdrs.rq_line.rq_tgt[i++];\n\n    mhd_assert ('\\r' != chr); /* Replaced during request line parsing */\n    mhd_assert ('\\n' != chr); /* Rejected during request line parsing */\n    mhd_assert (0 != chr); /* Rejected during request line parsing */\n    switch (chr)\n    {\n    case ' ':\n      b[o++] = '%';\n      b[o++] = '2';\n      b[o++] = '0';\n      break;\n    case '\\t':\n      b[o++] = '%';\n      b[o++] = '0';\n      b[o++] = '9';\n      break;\n    case 0x0B:   /* VT (vertical tab) */\n      b[o++] = '%';\n      b[o++] = '0';\n      b[o++] = 'B';\n      break;\n    case 0x0C:   /* FF (form feed) */\n      b[o++] = '%';\n      b[o++] = '0';\n      b[o++] = 'C';\n      break;\n    default:\n      b[o++] = chr;\n      break;\n    }\n  } while (i < c->rq.req_target_len);\n  mhd_assert (fixed_uri_len == o);\n  b[o] = 0; /* Zero-terminate the result */\n\n  hdr_name_len = MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_LOCATION);\n  hdr_name = malloc (hdr_name_len + 1);\n  if (NULL != hdr_name)\n  {\n    memcpy (hdr_name,\n            MHD_HTTP_HEADER_LOCATION,\n            hdr_name_len + 1);\n    /* hdr_name and b are free()d within this call */\n    transmit_error_response_header (c,\n                                    MHD_HTTP_MOVED_PERMANENTLY,\n                                    RQ_TARGET_INVALID_CHAR,\n                                    hdr_name,\n                                    hdr_name_len,\n                                    b,\n                                    o);\n    return;\n  }\n  free (b);\n  connection_close_error (c,\n                          _ (\"The request has whitespace character is in the \" \\\n                             \"URI.\\n\"));\n  return;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'send_redirect_fixed_rq_target': {'callees': ['connection_close_error', 'transmit_error_response_len'], 'callers': ['get_request_line']}, 'connection_close_error': {'callees': ['MHD_DLOG', 'MHD_connection_close_'], 'callers': ['try_ready_normal_body', 'try_ready_chunked_body', 'transmit_error_response_len', 'handle_recv_no_space', 'call_connection_handler', 'process_request_body', 'get_request_line_inner', 'send_redirect_fixed_rq_target', 'MHD_connection_handle_read', 'MHD_connection_handle_write', 'MHD_connection_handle_idle']}, 'transmit_error_response_len': {'callees': ['MHD_DLOG', 'connection_close_error', 'MHD_pool_deallocate', 'MHD_destroy_response', 'MHD_create_response_from_buffer_static', 'MHD_queue_response', 'build_header_response', 'MHD_pool_reset'], 'callers': ['handle_req_headers_no_space', 'handle_req_cookie_no_space', 'handle_req_chunk_size_line_no_space', 'handle_req_footers_no_space', 'handle_recv_no_space', 'connection_add_header', 'parse_http_version', 'process_request_body', 'parse_connection_headers', 'get_request_line_inner', 'send_redirect_fixed_rq_target', 'get_request_line', 'get_req_header']}, 'get_request_line': {'callees': ['get_request_line_inner', 'transmit_error_response_len', 'send_redirect_fixed_rq_target', 'process_request_target'], 'callers': ['MHD_connection_handle_idle']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_Connection (full definition, including nested structs/fields: state, rq, rq.hdrs.rq_line.num_ws_in_uri, rq.hdrs.rq_line.rq_tgt, rq.req_target_len, daemon, daemon->pool_size)",
    "MHD_CONNECTION_REQ_LINE_RECEIVING",
    "mhd_assert (macro or function definition)",
    "MHD_MAX_FIXED_URI_LEN",
    "malloc (declaration/implementation used in this build)",
    "free (declaration/implementation used in this build)",
    "memcpy (declaration/implementation used in this build)",
    "MHD_STATICSTR_LEN_ (macro definition)",
    "MHD_HTTP_HEADER_LOCATION (macro/constant definition)",
    "_ (gettext or translation macro definition)",
    "transmit_error_response_header (declaration/definition) \u2014 the function actually called",
    "transmit_error_response_len (declaration/definition) \u2014 appears in static graph and may be an alias/wrapper",
    "connection_close_error (declaration/definition)",
    "MHD_HTTP_MOVED_PERMANENTLY",
    "RQ_TARGET_INVALID_CHAR"
  ],
  "explanation": "To determine whether the target function uses any compiler/language extensions (MISRA violation), you must inspect the definitions of all macros, constants, types and called routines used by the function because extensions often appear there rather than in the visible code. For each symbol:\n\n- struct MHD_Connection (and nested fields): The function accesses members (state, rq.hdrs.rq_line.*, rq.req_target_len, daemon->pool_size). The structure/type definitions may contain compiler extensions (packed attributes, bitfields, unnamed members, anonymous structs/unions, inline functions, typeof usage, or non-standard attributes). You need the full definition to spot such extensions.\n\n- MHD_CONNECTION_REQ_LINE_RECEIVING: This constant/enum value\u2019s definition may use non-standard enum extensions or attributes; its type may be part of an enum declared with extensions.\n\n- mhd_assert: This macro is invoked repeatedly. Many assert-like macros use compiler extensions (statement-expressions ({ ... }), typeof, __builtin_expect, __attribute__ or GCC/Clang pragmas). Inspecting its definition is necessary to detect extension usage.\n\n- MHD_MAX_FIXED_URI_LEN: A macro constant could be computed using non-standard constructs or rely on extension-specific sizeof tricks; its definition must be checked.\n\n- malloc / free / memcpy: Although standard library functions, projects sometimes redefine wrappers/macros that expand to builtins or annotated versions (e.g., using __attribute__((malloc)), __builtin_malloc, or custom macros). Check the actual declarations used in this build to ensure no extensions are injected via macros or attributes.\n\n- MHD_STATICSTR_LEN_: This macro is invoked to compute header name length; it may be implemented using GNU statement-expressions, typeof, or other extensions (e.g., ({ ... })) \u2014 examine its definition.\n\n- MHD_HTTP_HEADER_LOCATION: This macro/constant supplies a string or expression. Its definition might use non-standard attributes, assembler sections, or other extensions \u2014 inspect it.\n\n- _ (translation/gettext macro): The translation macro often maps to gettext or may be redefined; its definition can include attributes or non-standard constructs \u2014 check it.\n\n- transmit_error_response_header / transmit_error_response_len: These called routines (or macros) must be inspected because they might be macros expanding to statement-expressions, inline assembly, GCC-specific attributes, or use inline functions with extensions. The static graph included transmit_error_response_len while the code calls transmit_error_response_header; either could be a wrapper/alias implemented with extensions.\n\n- connection_close_error: Similarly, this function or macro must be inspected for any extension usage in its declaration/definition (attributes, builtin usage, variadic macro tricks, etc.).\n\n- MHD_HTTP_MOVED_PERMANENTLY and RQ_TARGET_INVALID_CHAR: These constants/macros should be checked for non-standard definitions or macros that expand to expressions using extensions.\n\nIn short: any macro, constant, typedef or called function used by the target function can hide compiler-specific syntax (statement-expressions, typeof, __attribute__, __builtin_*, inline asm, anonymous structs/unions, etc.). The listed symbols are the minimal set that must be examined to reliably decide whether the code (as used here) employs language extensions that would violate the MISRA rule."
}