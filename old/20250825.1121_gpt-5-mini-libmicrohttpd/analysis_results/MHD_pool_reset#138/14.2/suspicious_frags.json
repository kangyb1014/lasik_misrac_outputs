{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.2 is: A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_pool_reset:\n```c\nvoid *\nMHD_pool_reset (struct MemoryPool *pool,\n                void *keep,\n                size_t copy_bytes,\n                size_t new_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (copy_bytes <= new_size);\n  mhd_assert (copy_bytes <= pool->size);\n  mhd_assert (keep != NULL || copy_bytes == 0);\n  mhd_assert (keep == NULL || mp_ptr_le_ (pool->memory, keep));\n  /* (keep == NULL || pool->memory + pool->size >= (uint8_t*) keep + copy_bytes) */\n  mhd_assert ((keep == NULL) || \\\n              (pool->size >= mp_ptr_diff_ (keep, pool->memory) + copy_bytes));\n#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\n  mhd_assert (NULL == __asan_region_is_poisoned (keep, copy_bytes));\n#endif /* MHD_ASAN_POISON_ACTIVE && HAVE___ASAN_REGION_IS_POISONED */\n  _MHD_UNPOISON_MEMORY (pool->memory, new_size);\n  if ( (NULL != keep) &&\n       (keep != pool->memory) )\n  {\n    if (0 != copy_bytes)\n      memmove (pool->memory,\n               keep,\n               copy_bytes);\n  }\n  /* technically not needed, but safer to zero out */\n  if (pool->size > copy_bytes)\n  {\n    size_t to_zero;   /** Size of area to zero-out */\n\n    to_zero = pool->size - copy_bytes;\n    _MHD_UNPOISON_MEMORY (pool->memory + copy_bytes, to_zero);\n#ifdef _WIN32\n    if (pool->is_mmap)\n    {\n      size_t to_recommit;     /** Size of decommitted and re-committed area. */\n      uint8_t *recommit_addr;\n      /* Round down to page size */\n      to_recommit = to_zero - to_zero % MHD_sys_page_size_;\n      recommit_addr = pool->memory + pool->size - to_recommit;\n\n      /* De-committing and re-committing again clear memory and make\n       * pages free / available for other needs until accessed. */\n      if (VirtualFree (recommit_addr,\n                       to_recommit,\n                       MEM_DECOMMIT))\n      {\n        to_zero -= to_recommit;\n\n        if (recommit_addr != VirtualAlloc (recommit_addr,\n                                           to_recommit,\n                                           MEM_COMMIT,\n                                           PAGE_READWRITE))\n          abort ();      /* Serious error, must never happen */\n      }\n    }\n#endif /* _WIN32 */\n    memset (&pool->memory[copy_bytes],\n            0,\n            to_zero);\n  }\n  pool->pos = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);\n  pool->end = pool->size;\n  _MHD_POISON_MEMORY (((uint8_t *) pool->memory) + new_size, \\\n                      pool->size - new_size);\n  return pool->memory;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "_MHD_UNPOISON_MEMORY (pool->memory + copy_bytes, to_zero);",
    "to_recommit = to_zero - to_zero % MHD_sys_page_size_;",
    "#if defined(MHD_ASAN_POISON_ACTIVE) && defined(HAVE___ASAN_REGION_IS_POISONED)\\n  mhd_assert (NULL == __asan_region_is_poisoned (keep, copy_bytes));\\n#endif",
    "pool->pos = ROUND_TO_ALIGN_PLUS_RED_ZONE (new_size);",
    "mhd_assert (pool->size >= pool->end - pool->pos);",
    "if (VirtualFree (recommit_addr,\\n                       to_recommit,\\n                       MEM_DECOMMIT))\\n      {\\n        to_zero -= to_recommit;\\n\\n        if (recommit_addr != VirtualAlloc (recommit_addr,\\n                                           to_recommit,\\n                                           MEM_COMMIT,\\n                                           PAGE_READWRITE))\\n          abort ();      /* Serious error, must never happen */\\n      }",
    "memmove (pool->memory,\\n               keep,\\n               copy_bytes);",
    "mhd_assert (copy_bytes <= new_size);",
    "mhd_assert (keep != NULL || copy_bytes == 0);",
    "_MHD_UNPOISON_MEMORY (pool->memory, new_size);",
    "_MHD_POISON_MEMORY (((uint8_t *) pool->memory) + new_size, \\n                      pool->size - new_size);",
    "recommit_addr = pool->memory + pool->size - to_recommit;",
    "memset (&pool->memory[copy_bytes],\\n            0,\\n            to_zero);",
    "mhd_assert (pool->end >= pool->pos);",
    "mhd_assert (keep == NULL || mp_ptr_le_ (pool->memory, keep));",
    "mhd_assert ((keep == NULL) || \\n              (pool->size >= mp_ptr_diff_ (keep, pool->memory) + copy_bytes));",
    "mhd_assert (copy_bytes <= pool->size);"
  ],
  "explanation": "MISRA C:2023 Rule 14.2 applies specifically to 'for' statements and the three clauses of a for. In the provided MHD_pool_reset function there are no explicit 'for' statements to inspect (no occurrence of the 'for' keyword). Therefore there are no direct for-loops inside this function that would violate Rule 14.2.\n\nHowever, the macros and some expressions invoked in this function (mhd_assert, _MHD_UNPOISON_MEMORY, _MHD_POISON_MEMORY, ROUND_TO_ALIGN_PLUS_RED_ZONE, mp_ptr_diff_, mp_ptr_le_, and the Windows memory-management calls) are potential locations where a 'for' statement could be hidden after macro expansion or inside inline definitions. Because Rule 14.2 concerns the form of for-loops wherever they appear, those macro invocations and platform-specific calls should be examined in their definitions to ensure they do not expand to or contain ill-formed for statements. The listed fragments are exactly the places in this function where such hidden expansions could occur and therefore should be investigated.\n\nAll other code in the function (the if/else structure, arithmetic expressions, direct calls to standard library functions such as memmove/memset/abort, and the control flow shown) contains no 'for' statements in the fragment provided, so they do not need to be investigated for Rule 14.2 in this translation unit. If you can provide the definitions of the flagged macros/inline functions, those should be reviewed for well-formed for loops as a next step."
}