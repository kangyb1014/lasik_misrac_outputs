{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of BASE64Encode:\n```c\nstatic ssize_t\nBASE64Encode (const void *in, size_t len, char **output)\n{\n#define FILLCHAR '='\n  const char *cvt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n                    \"abcdefghijklmnopqrstuvwxyz\"\n                    \"0123456789+/\";\n  const char *data = in;\n  char *opt;\n  ssize_t ret;\n  size_t i;\n  char c;\n  ret = 0;\n\n  opt = malloc (2 + (len * 4 / 3) + 8);\n  if (NULL == opt)\n  {\n    return -1;\n  }\n  for (i = 0; i < len; ++i)\n  {\n    c = (data[i] >> 2) & 0x3F;\n    opt[ret++] = cvt[(int) c];\n    c = (data[i] << 4) & 0x3F;\n    if (++i < len)\n    {\n      c = (char) (c | ((data[i] >> 4) & 0x0F));\n    }\n    opt[ret++] = cvt[(int) c];\n    if (i < len)\n    {\n      c = (char) (c | ((data[i] << 2) & 0x3F));\n      if (++i < len)\n      {\n        c = (char) (c | ((data[i] >> 6) & 0x03));\n      }\n      opt[ret++] = cvt[(int) c];\n    }\n    else\n    {\n      ++i;\n      opt[ret++] = FILLCHAR;\n    }\n    if (i < len)\n    {\n      c = data[i] & 0x3F;\n      opt[ret++] = cvt[(int) c];\n    }\n    else\n    {\n      opt[ret++] = FILLCHAR;\n    }\n  }\n  *output = opt;\n  return ret;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I inspected the entire function for usages of compiler or language extensions that are explicitly documented as extensions (examples: GCC/Clang __attribute__ or __builtin__ features, typeof, statement-expressions ({ ... }), nested functions, asm, __extension__, _Pragma with vendor-specific pragmas, nonstandard storage-class specifiers, anonymous structs/unions as an extension, or other compiler-specific keywords). None of those constructs appear in the code. Specific checks and reasons why other fragments are not flagged:\n\n- Function signature and types: The use of ssize_t is a POSIX-type name but not a compiler language extension construct; it is provided via platform headers rather than being a compiler keyword/extension, so it is not reported under MISRA C 2023 Rule 1.2 (which targets language/compiler extensions explicitly documented by compilers).\n- Pointer conversion: Assigning a void const pointer to a const char * (const char *data = in;) uses standard C implicit conversion between void* and object pointers; this is standard C (not a vendor extension) and thus not flagged here.\n- String literal concatenation (\"...\" \"...\") is standard C and not an extension.\n- Standard library usage (malloc) and macros (#define FILLCHAR '=') are standard and not compiler extensions.\n- No use of GCC/Clang/Microsoft specific keywords (e.g. __attribute__, __asm, __builtin_*, typeof, __inline__ with vendor-specific spelling), no statement expressions, nested functions, or anonymous/extension-only struct/union features are present.\n\nGiven the above, there are no code fragments in this function that constitute explicit compiler language extensions to report under MISRA C 2023 Rule 1.2."
}