{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  FILE *file;\n  int fd;\n  struct stat buf;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, MHD_HTTP_METHOD_GET))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n\n  file = fopen (&url[1], \"rb\");\n  if (NULL != file)\n  {\n    fd = fileno (file);\n    if (-1 == fd)\n    {\n      (void) fclose (file);\n      return MHD_NO;     /* internal error */\n    }\n    if ( (0 != fstat (fd, &buf)) ||\n         (! S_ISREG (buf.st_mode)) )\n    {\n      /* not a regular file, refuse to serve */\n      fclose (file);\n      file = NULL;\n    }\n  }\n\n  if (NULL == file)\n  {\n    response = MHD_create_response_from_buffer_static (strlen (PAGE),\n                                                       PAGE);\n    ret = MHD_queue_response (connection, MHD_HTTP_NOT_FOUND, response);\n    MHD_destroy_response (response);\n  }\n  else\n  {\n    response = MHD_create_response_from_callback ((size_t) buf.st_size,\n                                                  32 * 1024, /* 32k page size */\n                                                  &file_reader,\n                                                  file,\n                                                  &free_callback);\n    if (NULL == response)\n    {\n      fclose (file);\n      return MHD_NO;\n    }\n    ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n    MHD_destroy_response (response);\n  }\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the parameter 'method' is NULL (or not NUL-terminated), the call strcmp(method, MHD_HTTP_METHOD_GET) will dereference an invalid pointer or read beyond the object bounds, violating MISRA C 2023 Rule 21.17. To comply, ensure 'method' is non-NULL and properly NUL-terminated before calling strcmp (e.g. check method != NULL), or use a bounded comparison that cannot read past the provided object.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function ahc_echo:\n#define PAGE \"<html><head><title>File not found</title></head><body>File not found</body></html>\"\n...\n#define MHD_HTTP_METHOD_GET \"GET\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s scenario (strcmp(method, ...) will read out of bounds if method is NULL or not NUL-terminated) is technically correct as a general statement: strcmp expects both arguments to point to valid, NUL-terminated objects, and calling it with a NULL pointer or with a non-terminated buffer would be undefined behaviour and could violate MISRA C:2023 Rule 21.17.\n\nHowever, in the context of this code ahc_echo is an MHD access handler callback invoked by the libmicrohttpd API. That API supplies method as a pointer to a NUL-terminated string (the HTTP method) and does not call the handler with method == NULL. Therefore, given the caller\u2019s documented contract, the strcmp usage here does not in practice cause out-of-bounds access and does not constitute a MISRA Rule 21.17 violation in this context.\n\nIf the code were intended to be called from an environment that did not guarantee method is non-NULL and NUL-terminated, then the report would be correct and the code should validate method (or use a safe, bounded check) to satisfy Rule 21.17. To be defensive (and satisfy static checkers that don\u2019t know the caller\u2019s contract) you can add an explicit null check or otherwise document the precondition.\n\nConclusion: the agent\u2019s general warning is valid, but as a claim of a violation in this specific code (given the libmicrohttpd callback contract) it is not correct without further evidence that method can be NULL or unterminated."
}