{
  "user_message": "An agent A claimed that the following MHD_queue_auth_fail_response2 code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_queue_auth_fail_response2.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_auth_fail_response2 (struct MHD_Connection *connection,\n                               const char *realm,\n                               const char *opaque,\n                               struct MHD_Response *response,\n                               int signal_stale,\n                               enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthMultiAlgo3 algo3;\n\n  if (MHD_DIGEST_ALG_MD5 == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else if (MHD_DIGEST_ALG_AUTO == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n  else\n    MHD_PANIC (_ (\"Wrong algo value.\\n\")); /* API violation! */\n\n  return MHD_queue_auth_required_response3 (connection, realm, opaque,\n                                            NULL, response, signal_stale,\n                                            MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                            algo3,\n                                            0, 0);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call expands a macro that uses compiler-specific extensions. MHD_PANIC is defined to include BUILTIN_NOT_REACHED, which in typical builds maps to a compiler builtin such as __builtin_unreachable() (a documented compiler extension). Additionally, the function itself is declared using _MHD_EXTERN which expands to __attribute__((visibility(\"default\"))) extern \u2014 a GCC/Clang attribute (explicit compiler extension). Because these compiler-specific builtins/attributes are used, Rule 1.2 is violated.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_queue_auth_fail_response2:\n#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern\n...\n#define MHD_PANIC(msg) do{mhd_panic(mhd_panic_cls,__FILE__,__LINE__,msg);BUILTIN_NOT_REACHED;}while(0)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The function declaration uses the macro _MHD_EXTERN which is defined as __attribute__((visibility(\"default\"))) extern \u2014 a GCC/Clang attribute documented as a compiler extension. The MHD_PANIC macro expands to include BUILTIN_NOT_REACHED (typically mapping to __builtin_unreachable()), another documented compiler builtin/extension. Both are explicit compiler language extensions as described in the scenario, so their use in this translation unit violates MISRA C 2023 Rule 1.2. (If those macros are conditionally defined to no-ops on non-GNU compilers, then the violation depends on the active macro definitions; given the provided definitions, the report is correct.)"
}