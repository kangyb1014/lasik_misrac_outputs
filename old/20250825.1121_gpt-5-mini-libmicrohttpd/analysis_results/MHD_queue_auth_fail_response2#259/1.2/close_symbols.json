{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_auth_fail_response2 (struct MHD_Connection *connection,\n                               const char *realm,\n                               const char *opaque,\n                               struct MHD_Response *response,\n                               int signal_stale,\n                               enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthMultiAlgo3 algo3;\n\n  if (MHD_DIGEST_ALG_MD5 == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else if (MHD_DIGEST_ALG_AUTO == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n  else\n    MHD_PANIC (_ (\"Wrong algo value.\\n\")); /* API violation! */\n\n  return MHD_queue_auth_required_response3 (connection, realm, opaque,\n                                            NULL, response, signal_stale,\n                                            MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                            algo3,\n                                            0, 0);\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_queue_auth_fail_response2': {'callees': ['__builtin_unreachable', 'MHD_queue_auth_required_response3'], 'callers': ['MHD_queue_auth_fail_response']}, '__builtin_unreachable': {'callees': [], 'callers': ['try_ready_normal_body', 'try_ready_chunked_body', 'process_request_body', 'MHD_update_last_activity_', 'MHD_connection_handle_write', 'cleanup_connection', 'MHD_connection_handle_idle', 'MHD_set_connection_option', 'MHD_ip_count_lock', 'MHD_ip_count_unlock', 'MHD_ip_limit_del', 'new_connection_prepare_', 'new_connection_close_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'internal_suspend_connection_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_cleanup_connections', 'MHD_epoll', 'close_connection', 'MHD_quiesce_daemon', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_stop_daemon', 'MHD_create_response_from_iovec', 'MHD_destroy_response', 'MHD_increment_response_rc', 'MHD_create_post_processor', 'post_process_urlencoded', 'post_process_multipart', 'check_nonce_nc', 'calculate_add_nonce', 'digest_auth_check_all_inner', 'MHD_digest_auth_check_digest3', 'MHD_digest_auth_check2', 'MHD_digest_auth_check_digest2', 'queue_auth_required_response3_inner', 'MHD_queue_auth_fail_response2']}, 'MHD_queue_auth_required_response3': {'callees': ['queue_auth_required_response3_inner'], 'callers': ['MHD_queue_auth_fail_response2', 'ahc_echo', 'reply_with_auth_required']}, 'MHD_queue_auth_fail_response': {'callees': ['MHD_queue_auth_fail_response2'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_EXTERN",
    "MHD_PANIC",
    "_ (gettext macro)",
    "enum MHD_DigestAuthAlgorithm (definition and values)",
    "enum MHD_DigestAuthMultiAlgo3 (definition and values)",
    "MHD_DIGEST_AUTH_MULT_QOP_AUTH",
    "MHD_queue_auth_required_response3 (prototype/definition)",
    "struct MHD_Connection (definition)",
    "struct MHD_Response (definition)",
    "enum MHD_Result (definition)",
    "__builtin_unreachable"
  ],
  "explanation": "Explain why each symbol is required to check for language-extension usage:\n\n- _MHD_EXTERN\n  - This macro decorates the function declaration/definition. It may expand to compiler-specific storage-class or attribute extensions (for example __attribute__((visibility(...))) or compiler-specific linkage keywords). Inspecting its definition is required to determine whether a non\u2011standard extension is used.\n\n- MHD_PANIC\n  - Called in the else branch; typically implemented as a macro or function that may use compiler builtins or attributes (e.g. calls to __builtin_unreachable, noreturn attributes, inline assembly, or other extensions). We must see its definition/expansion to detect any compiler extensions.\n\n- _ (gettext macro)\n  - The code calls _ (\"Wrong algo value.\\n\") inside MHD_PANIC. The _ macro is commonly provided by gettext or may be redefined; its expansion could be a macro/function that uses non\u2011standard constructs. Inspecting its definition shows whether a language extension is introduced here.\n\n- enum MHD_DigestAuthAlgorithm (definition and values)\n  - The function switches on values from this enum (MHD_DIGEST_ALG_MD5, MHD_DIGEST_ALG_SHA256, MHD_DIGEST_ALG_AUTO). To verify no extensions are used in the enum or its constants (e.g. compiler-specific enum size attributes, packed enums, or non\u2011standard underlying types), the enum definition must be checked.\n\n- enum MHD_DigestAuthMultiAlgo3 (definition and values)\n  - The local variable algo3 and assigned constants (MHD_DIGEST_AUTH_MULT_ALGO3_*) come from this enum. Its definition may carry attributes or other extensions (pragma, __attribute__, explicit underlying type) that would violate the MISRA rule.\n\n- MHD_DIGEST_AUTH_MULT_QOP_AUTH\n  - This constant is passed to MHD_queue_auth_required_response3; its declaration (macro/enum) must be inspected to ensure it doesn't rely on extensions.\n\n- MHD_queue_auth_required_response3 (prototype/definition)\n  - The target returns the result of this call. Its prototype/definition may include language extensions (e.g. non\u2011standard attributes, varargs macros, calling conventions, or inline asm). The prototype is needed to check for such extensions.\n\n- struct MHD_Connection (definition)\n  - Appears in the function parameter list. The struct definition may use compiler extensions (bitfields with implementation-defined widths, packed attributes, flexible array members with extensions, non\u2011standard alignment attributes). The definition is required to ensure no language extensions are used in the parameter types.\n\n- struct MHD_Response (definition)\n  - Also a parameter type; its definition must be checked for the same possible extensions as for MHD_Connection.\n\n- enum MHD_Result (definition)\n  - The function return type; its definition may include attributes or non\u2011standard specifications. Inspect it to confirm no extensions are present.\n\n- __builtin_unreachable\n  - The static call graph indicates this builtin is reachable from this function (likely via MHD_PANIC). __builtin_unreachable is a compiler builtin/extension in many compilers (GCC/Clang). You must verify whether the code expansion actually uses this builtin or other compiler builtins; presence of __builtin_unreachable or other builtins is a direct violation of the MISRA rule about language extensions.\n\nTogether, these symbols let the next analyst see macro expansions, attribute use, builtin calls, and type decorations that could constitute compiler language extensions. Only by inspecting those definitions/prototypes/expansions can one determine if the target function uses non\u2011standard language extensions."
}