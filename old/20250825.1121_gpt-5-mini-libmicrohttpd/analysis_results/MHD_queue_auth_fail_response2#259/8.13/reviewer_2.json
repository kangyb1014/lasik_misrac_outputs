{
  "user_message": "An agent A claimed that the following MHD_queue_auth_fail_response2 code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_queue_auth_fail_response2.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_queue_auth_fail_response2 (struct MHD_Connection *connection,\n                               const char *realm,\n                               const char *opaque,\n                               struct MHD_Response *response,\n                               int signal_stale,\n                               enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthMultiAlgo3 algo3;\n\n  if (MHD_DIGEST_ALG_MD5 == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else if (MHD_DIGEST_ALG_AUTO == algo)\n    algo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n  else\n    MHD_PANIC (_ (\"Wrong algo value.\\n\")); /* API violation! */\n\n  return MHD_queue_auth_required_response3 (connection, realm, opaque,\n                                            NULL, response, signal_stale,\n                                            MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                            algo3,\n                                            0, 0);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'struct MHD_Response *response' is not const-qualified. In the body of MHD_queue_auth_fail_response2 the parameter is only forwarded to MHD_queue_auth_required_response3 and not modified, so it should be declared 'const struct MHD_Response *response' (and propagate const to the callee) to satisfy MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA R8.13 does encourage qualifying pointer targets as const where feasible. However, you cannot decide this from the snippet alone. The parameter 'response' is forwarded unchanged to MHD_queue_auth_required_response3; if that callee's prototype accepts a non-const struct MHD_Response * (and the function is part of the public API), this function cannot simply change its parameter to const without changing the callee (or breaking compatibility). Thus the claim that this code violates R8.13 is not proven by the snippet. If the callee already accepts a const pointer (or the API can be safely changed), then making both signatures const would satisfy R8.13 \u2014 otherwise leaving it non-const is acceptable. Therefore the report as stated is not correct in the absence of evidence that the callee can and should accept a const pointer."
}