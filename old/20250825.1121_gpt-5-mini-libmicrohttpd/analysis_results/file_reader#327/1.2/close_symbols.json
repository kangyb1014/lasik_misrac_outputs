{
  "user_message": "Target function code is:\n```c\nstatic ssize_t\nfile_reader (void *cls, uint64_t pos, char *buf, size_t max)\n{\n  FILE *file = (FILE *) cls;\n  size_t bytes_read;\n\n  /* 'fseek' may not support files larger 2GiB, depending on platform.\n   * For production code, make sure that 'pos' has valid values, supported by\n   * 'fseek', or use 'fseeko' or similar function. */\n  if (0 != fseek (file, (long) pos, SEEK_SET))\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  bytes_read = fread (buf, 1, max, file);\n  if (0 == bytes_read)\n    return (0 != ferror (file)) ? MHD_CONTENT_READER_END_WITH_ERROR :\n           MHD_CONTENT_READER_END_OF_STREAM;\n  return (ssize_t) bytes_read;\n}\n```\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "ssize_t",
    "uint64_t",
    "size_t",
    "FILE",
    "fseek",
    "fread",
    "ferror",
    "SEEK_SET",
    "MHD_CONTENT_READER_END_WITH_ERROR",
    "MHD_CONTENT_READER_END_OF_STREAM",
    "<stdio.h>",
    "<stdint.h>",
    "<sys/types.h>",
    "<stddef.h>"
  ],
  "explanation": "For determining whether the target function uses any compiler language extensions you must know which identifiers/types/macros are provided by the implementation vs the ISO/C standard: \n\n- ssize_t: Required. ssize_t is not part of ISO C (it is a POSIX type) in many environments. You must inspect its definition or the header that provides it to decide if the code depends on a non\u2011standard (extension) type.\n\n- uint64_t: Required. uint64_t is from C99 <stdint.h>. You must confirm it is provided by the implementation (C99 support) rather than as a compiler extension or custom typedef.\n\n- size_t: Required. size_t is standard but you should confirm which header supplies it in the build environment; if supplied only by a nonstandard header it could indicate an extension.\n\n- FILE: Required. FILE and the stdio API are standard C, but you must check the actual declaration/header used to ensure no nonstandard replacement is in effect.\n\n- fseek, fread, ferror: Required. These are standard stdio functions; verifying their prototypes (and which headers provide them) ensures the code is not relying on nonstandard variants or extended signatures.\n\n- SEEK_SET: Required. Macro from stdio; confirm it is the standard definition and not a project/compiler extension.\n\n- MHD_CONTENT_READER_END_WITH_ERROR, MHD_CONTENT_READER_END_OF_STREAM: Required. These project-specific symbols determine return values and may be defined using compiler extensions (e.g. unusual types, attributes, or nonstandard numeric literals). Their definitions must be inspected to ensure no extensions are used.\n\n- <stdio.h>, <stdint.h>, <sys/types.h>, <stddef.h>: Required. Knowing which headers are included (and how these headers are implemented on the target toolchain) is necessary to decide whether types like ssize_t or uint64_t are standard-provided or introduced by nonstandard/extension headers.\n\nIn short: inspect the definitions/prototypes and the supplying headers for the listed symbols to determine whether any of them are provided via compiler or platform language extensions rather than standard C facilities."
}