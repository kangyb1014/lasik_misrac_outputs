{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of file_reader:\n```c\nstatic ssize_t\nfile_reader (void *cls, uint64_t pos, char *buf, size_t max)\n{\n  FILE *file = (FILE *) cls;\n  size_t bytes_read;\n\n  /* 'fseek' may not support files larger 2GiB, depending on platform.\n   * For production code, make sure that 'pos' has valid values, supported by\n   * 'fseek', or use 'fseeko' or similar function. */\n  if (0 != fseek (file, (long) pos, SEEK_SET))\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  bytes_read = fread (buf, 1, max, file);\n  if (0 == bytes_read)\n    return (0 != ferror (file)) ? MHD_CONTENT_READER_END_WITH_ERROR :\n           MHD_CONTENT_READER_END_OF_STREAM;\n  return (ssize_t) bytes_read;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function file_reader:\n#define MHD_CONTENT_READER_END_WITH_ERROR ((ssize_t)-2)\n...\n#define MHD_CONTENT_READER_END_OF_STREAM ((ssize_t)-1)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no code fragments that are provably unreachable within the provided function. Reasoning:\n\n- The fseek check (if (0 != fseek(...)) return MHD_CONTENT_READER_END_WITH_ERROR;) can be taken or not taken depending on runtime conditions (fseek can fail or succeed), so both the return-on-error path and the subsequent code are reachable.\n- The fread result handling (bytes_read = fread(...); if (0 == bytes_read) return (0 != ferror(file)) ? MHD_CONTENT_READER_END_WITH_ERROR : MHD_CONTENT_READER_END_OF_STREAM;) covers three distinct runtime outcomes: fread can return >0 (data read \u2014 so the final return is reached), fread can return 0 with ferror(file) true (error return), or fread can return 0 with no error (end-of-stream return). All three outcomes are possible at runtime, so neither branch of the ternary nor the final return is unreachable.\n- The final return ((ssize_t) bytes_read) is reachable when fread returns a positive value.\n- The cast of pos to (long) and the comment about file sizes affect correctness/definedness on some platforms but do not make any code path unreachable; they may cause runtime failures or undefined behavior in extreme cases, but that is a correctness/portability concern, not unreachable code per MISRA Rule 2.1.\n- The static storage class of the function does not by itself make the function body unreachable; whether the function is ever called in the translation unit is outside the provided snippet and cannot be used to claim unreachable code here.\n\nGiven the above, there are no fragments in this function that are evidently unreachable and therefore nothing to flag for Rule 2.1 inspection in this snippet."
}