{
  "user_message": "Target function code is:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'get_rq_dauth_algo': {'callees': [], 'callers': ['parse_dauth_params']}, 'parse_dauth_params': {'callees': ['get_rq_dauth_algo', 'get_rq_dauth_qop'], 'callers': ['MHD_get_rq_dauth_params_']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_RqDAuthParam",
    "enum MHD_DigestAuthAlgo3",
    "MHD_str_equal_caseless_quoted_s_bin_n",
    "MHD_str_equal_caseless_s_bin_n_",
    "_MHD_MD5_TOKEN",
    "_MHD_SHA256_TOKEN",
    "_MHD_SHA512_256_TOKEN",
    "_MHD_SESS_TOKEN",
    "NULL"
  ],
  "explanation": "For deciding whether get_rq_dauth_algo uses any compiler language extensions you must see the definitions/expansions of the types/macros/functions it depends on:\n\n- struct MHD_RqDAuthParam: needed to verify that member access (algo_param->value.str, ->value.len, ->quoted) uses only standard C constructs (no compiler-specific bit-field widths, anonymous structs/unions as extensions, or non-standard attributes).\n\n- enum MHD_DigestAuthAlgo3: needed to confirm the enum is a plain C enum (no compiler-specific extensions or attributes applied to the enum/its enumerators).\n\n- MHD_str_equal_caseless_quoted_s_bin_n and MHD_str_equal_caseless_s_bin_n_: these identifiers may be macros or inline functions. You must inspect their definitions to ensure they do not expand to/contain compiler extensions (e.g. GNU statement-expressions ({...}), typeof, nested functions, __attribute__ uses, token-pasting with non-standard behavior, builtin intrinsics, or other non\u2011standard constructs).\n\n- _MHD_MD5_TOKEN, _MHD_SHA256_TOKEN, _MHD_SHA512_256_TOKEN, _MHD_SESS_TOKEN: these token macros are used adjacent to each other in the source (e.g. _MHD_MD5_TOKEN _MHD_SESS_TOKEN). You must check their definitions to confirm they are standard string literals or plain tokens so that adjacent-string literal concatenation (a standard C feature) is being relied on, and that no token\u2011pasting (##), trigraphs, or other compiler-specific behavior is used.\n\n- NULL: include its definition to ensure it is the standard macro (no nonstandard definition that would imply compiler-specific behavior).\n\nExamining these symbols will reveal whether any non-standard language extensions are present in macro expansions, type declarations, or called routines that would violate the MISRA requirement against language extensions."
}