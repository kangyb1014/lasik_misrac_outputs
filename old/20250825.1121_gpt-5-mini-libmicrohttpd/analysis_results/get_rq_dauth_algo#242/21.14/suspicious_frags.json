{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.14 is: The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function get_rq_dauth_algo:\n#define MHD_str_equal_caseless_quoted_s_bin_n(q, l, u) MHD_str_equal_caseless_quoted_bin_n(q,l,u,MHD_STATICSTR_LEN_(u))\n...\n#define MHD_str_equal_caseless_s_bin_n_(a, s, l) ((MHD_STATICSTR_LEN_(a)==(l))&&MHD_str_equal_caseless_bin_n_(a,s,l))\n...\n#define _MHD_MD5_TOKEN \"MD5\"\n...\n#define _MHD_SHA256_TOKEN \"SHA-256\"\n...\n#define _MHD_SHA512_256_TOKEN \"SHA-512-256\"\n...\n#define _MHD_SESS_TOKEN \"-sess\"\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, algo_param->value.str, algo_param->value.len))",
    "if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, algo_param->value.len, _MHD_SHA256_TOKEN))",
    "if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, algo_param->value.len, _MHD_SHA512_256_TOKEN))",
    "if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, algo_param->value.str, algo_param->value.len))",
    "if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, algo_param->value.str, algo_param->value.len))",
    "if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, algo_param->value.str, algo_param->value.len))",
    "if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, algo_param->value.str, algo_param->value.len))",
    "if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, algo_param->value.len, _MHD_MD5_TOKEN))",
    "if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, algo_param->value.str, algo_param->value.len))",
    "if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, algo_param->value.len, _MHD_MD5_TOKEN _MHD_SESS_TOKEN))",
    "if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, algo_param->value.len, _MHD_SHA256_TOKEN _MHD_SESS_TOKEN))",
    "if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, algo_param->value.len, _MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN))"
  ],
  "explanation": "The only places in this function that perform string comparisons are the calls to the MHD_str_equal_* macros shown above. Those macro invocations must be inspected because their underlying implementations (e.g. MHD_str_equal_caseless_bin_n_ or similar helpers) could use memcmp inappropriately on null-terminated strings. No direct calls to memcmp appear in the presented function body; other lines are simple control flow (NULL check, quoted flag check, returns, enum returns, comments) or use token literals alone. The token concatenations are compile-time string literals (e.g. _MHD_MD5_TOKEN _MHD_SESS_TOKEN) and the provided macros use length-aware forms (MHD_STATICSTR_LEN_), so there is no need to investigate other fragments that do not invoke the comparison macros."
}