{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_rq_dauth_algo:\n```c\nstatic enum MHD_DigestAuthAlgo3\nget_rq_dauth_algo (const struct MHD_RqDAuthParam *const algo_param)\n{\n  if (NULL == algo_param->value.str)\n    return MHD_DIGEST_AUTH_ALGO3_MD5; /* Assume MD5 by default */\n\n  if (algo_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_MD5;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n\n      /* Algorithms below are not supported by MHD for authentication */\n\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA256_TOKEN \\\n                                               _MHD_SESS_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\\n                                               algo_param->value.len, \\\n                                               _MHD_SHA512_256_TOKEN))\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n    /* No known algorithm has been detected */\n    return MHD_DIGEST_AUTH_ALGO3_INVALID;\n  }\n  /* The algorithm value is not quoted */\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;\n\n  /* Algorithms below are not supported by MHD for authentication */\n\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;\n  if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\\n                                       algo_param->value.str, \\\n                                       algo_param->value.len))\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;\n\n  /* No known algorithm has been detected */\n  return MHD_DIGEST_AUTH_ALGO3_INVALID;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function get_rq_dauth_algo:\n#define _MHD_MD5_TOKEN \"MD5\"\n...\n#define _MHD_SHA256_TOKEN \"SHA-256\"\n...\n#define _MHD_SHA512_256_TOKEN \"SHA-512-256\"\n...\n#define _MHD_SESS_TOKEN \"-sess\"\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\n                                               algo_param->value.len, \\n                                               _MHD_SHA256_TOKEN))\\n      return MHD_DIGEST_AUTH_ALGO3_SHA256;",
    "if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN, \\n                                       algo_param->value.str, \\n                                       algo_param->value.len))\\n    return MHD_DIGEST_AUTH_ALGO3_MD5;",
    "if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\n                                               algo_param->value.len, \\n                                               _MHD_MD5_TOKEN _MHD_SESS_TOKEN))\\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256;",
    "if (MHD_str_equal_caseless_s_bin_n_ (_MHD_MD5_TOKEN _MHD_SESS_TOKEN, \\n                                       algo_param->value.str, \\n                                       algo_param->value.len))\\n    return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;",
    "if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN _MHD_SESS_TOKEN, \\n                                       algo_param->value.str, \\n                                       algo_param->value.len))\\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;",
    "if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN, \\n                                       algo_param->value.str, \\n                                       algo_param->value.len))\\n    return MHD_DIGEST_AUTH_ALGO3_SHA256;",
    "if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\n                                               algo_param->value.len, \\n                                               _MHD_MD5_TOKEN))\\n      return MHD_DIGEST_AUTH_ALGO3_MD5;",
    "if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA256_TOKEN _MHD_SESS_TOKEN, \\n                                       algo_param->value.str, \\n                                       algo_param->value.len))\\n    return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;",
    "if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\n                                               algo_param->value.len, \\n                                               _MHD_SHA256_TOKEN \\n                                               _MHD_SESS_TOKEN))\\n      return MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION;",
    "if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\n                                               algo_param->value.len, \\n                                               _MHD_SHA512_256_TOKEN))\\n      return MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION;",
    "if (MHD_str_equal_caseless_s_bin_n_ (_MHD_SHA512_256_TOKEN, \\n                                       algo_param->value.str, \\n                                       algo_param->value.len))\\n    return MHD_DIGEST_AUTH_ALGO3_SHA512_256;",
    "if (MHD_str_equal_caseless_quoted_s_bin_n (algo_param->value.str, \\n                                               algo_param->value.len, \\n                                               _MHD_SHA512_256_TOKEN \\n                                               _MHD_SESS_TOKEN))\\n\\n      /* Algorithms below are not supported by MHD for authentication */\\n\\n      return MHD_DIGEST_AUTH_ALGO3_MD5_SESSION;"
  ],
  "explanation": "Only calls that invoke the MHD_str_equal_caseless_* helpers are flagged because these are the sites that likely perform string operations (memcmp/strncmp/strlen/etc.) that could read beyond the bounds given by the pointer/length parameters. The initial NULL check (if (NULL == algo_param->value.str)) prevents dereferencing a NULL pointer, so it does not need further investigation. Macro token definitions (_MHD_MD5_TOKEN, _MHD_SHA256_TOKEN, _MHD_SHA512_256_TOKEN, _MHD_SESS_TOKEN) are compile-time string literals (or concatenations thereof) and therefore do not by themselves cause out-of-bounds accesses; the concern is how the helper functions use algo_param->value.str and algo_param->value.len. Other statements (returns, enum values, comments) do not perform string handling and thus are not relevant to MISRA C:2023 Rule 21.17."
}