{
  "user_message": "An agent A claimed that the following run_usock code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of run_usock.\n```c\nstatic void *\nrun_usock (void *cls)\n{\n  struct MyData *md = cls;\n  struct MHD_UpgradeResponseHandle *urh = md->urh;\n  char buf[128];\n  ssize_t got;\n\n  make_blocking (md->sock);\n  /* start by sending extra data MHD may have already read, if any */\n  if (0 != md->extra_in_size)\n  {\n    send_all (md->sock,\n              md->extra_in,\n              md->extra_in_size);\n    free (md->extra_in);\n  }\n  /* now echo in a loop */\n  while (1)\n  {\n    got = recv (md->sock,\n                buf,\n                sizeof (buf),\n                0);\n    if (0 >= got)\n      break;\n    send_all (md->sock,\n              buf,\n              (size_t) got);\n  }\n  free (md);\n  MHD_upgrade_action (urh,\n                      MHD_UPGRADE_ACTION_CLOSE);\n  return NULL;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer urh is declared as a pointer to a non-const struct. In the shown code it is stored in MyData and only passed to MHD_upgrade_action (no modification of the pointed object is shown). If the pointed object is not modified anywhere and the API can accept a pointer to const, then urh should be declared as const struct MHD_UpgradeResponseHandle *urh; and the current declaration violates MISRA C 2023 Rule 8.13. (If the object is modified or the API requires a non-const pointer, then the non-const declaration is necessary and there is no violation.)\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function run_usock:\nstruct MyData\n{\n  struct MHD_UpgradeResponseHandle *urh;\n  char *extra_in;\n  size_t extra_in_size;\n  MHD_socket sock;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not proven correct. MISRA C:2023 R.8.13 says a pointer should point to a const-qualified type whenever that is possible \u2014 i.e. when the pointed-to object is not modified and APIs accept a pointer-to-const. From the snippet alone we do not know whether the MHD_upgrade_action API requires a mutable pointer or whether the pointed object is ever modified elsewhere. If the API requires a non-const pointer or the object is modified via md->urh elsewhere, then declaring it const would be incorrect and there is no violation. Conversely, if the object is never modified and the API accepts a pointer-to-const, then the pointer (ideally the member in struct MyData, or at least the local variable urh) should be const; that would be a MISRA complaint as reported. Because the necessary whole-program information (the prototype of MHD_upgrade_action and all uses of md->urh) is not provided, the report cannot be confirmed. To resolve: inspect the MHD_upgrade_action prototype and other uses of md->urh; if safe, change the declaration to const struct MHD_UpgradeResponseHandle * (preferably at the struct member), or make the local urh a pointer-to-const."
}