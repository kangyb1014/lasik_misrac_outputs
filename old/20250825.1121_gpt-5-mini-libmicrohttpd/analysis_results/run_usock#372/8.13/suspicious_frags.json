{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of run_usock:\n```c\nstatic void *\nrun_usock (void *cls)\n{\n  struct MyData *md = cls;\n  struct MHD_UpgradeResponseHandle *urh = md->urh;\n  char buf[128];\n  ssize_t got;\n\n  make_blocking (md->sock);\n  /* start by sending extra data MHD may have already read, if any */\n  if (0 != md->extra_in_size)\n  {\n    send_all (md->sock,\n              md->extra_in,\n              md->extra_in_size);\n    free (md->extra_in);\n  }\n  /* now echo in a loop */\n  while (1)\n  {\n    got = recv (md->sock,\n                buf,\n                sizeof (buf),\n                0);\n    if (0 >= got)\n      break;\n    send_all (md->sock,\n              buf,\n              (size_t) got);\n  }\n  free (md);\n  MHD_upgrade_action (urh,\n                      MHD_UPGRADE_ACTION_CLOSE);\n  return NULL;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function run_usock:\nstruct MyData\n{\n  struct MHD_UpgradeResponseHandle *urh;\n  char *extra_in;\n  size_t extra_in_size;\n  MHD_socket sock;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "MHD_upgrade_action (urh,\n                      MHD_UPGRADE_ACTION_CLOSE);",
    "send_all (md->sock,\n              md->extra_in,\n              md->extra_in_size);",
    "free (md->extra_in);",
    "struct MHD_UpgradeResponseHandle *urh = md->urh;",
    "char *extra_in;",
    "struct MHD_UpgradeResponseHandle *urh;"
  ],
  "explanation": "Included fragments are pointer declarations and uses where the pointed-to type might be eligible for const-qualification: the MyData->extra_in storage is passed as input to send_all and never modified in this function yet is declared as char * and later freed; the urh pointer is copied and passed to MHD_upgrade_action and its declaration in MyData is non-const. These deserve inspection to determine whether the pointed-to types can be const-qualified without breaking semantics or API contracts. Other fragments do not need investigation for Rule 8.13: buf is a local buffer written by recv so it must be mutable; the send_all call that uses buf should not be const-qualified for the same reason; md and cls are used to free and modify the pointed-to object (free(md), free(md->extra_in)), so they cannot be const; recv/write uses require non-const buffers. Thus those locations are not candidates for making the pointed-to type const."
}