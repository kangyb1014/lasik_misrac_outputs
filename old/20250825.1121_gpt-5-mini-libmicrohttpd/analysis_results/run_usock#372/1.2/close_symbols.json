{
  "user_message": "Target function code is:\n```c\nstatic void *\nrun_usock (void *cls)\n{\n  struct MyData *md = cls;\n  struct MHD_UpgradeResponseHandle *urh = md->urh;\n  char buf[128];\n  ssize_t got;\n\n  make_blocking (md->sock);\n  /* start by sending extra data MHD may have already read, if any */\n  if (0 != md->extra_in_size)\n  {\n    send_all (md->sock,\n              md->extra_in,\n              md->extra_in_size);\n    free (md->extra_in);\n  }\n  /* now echo in a loop */\n  while (1)\n  {\n    got = recv (md->sock,\n                buf,\n                sizeof (buf),\n                0);\n    if (0 >= got)\n      break;\n    send_all (md->sock,\n              buf,\n              (size_t) got);\n  }\n  free (md);\n  MHD_upgrade_action (urh,\n                      MHD_UPGRADE_ACTION_CLOSE);\n  return NULL;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'run_usock': {'callees': ['make_blocking', 'send_all', 'MHD_upgrade_action', 'ws_receive_frame', 'ws_send_frame'], 'callers': []}, 'make_blocking': {'callees': [], 'callers': ['send_all', 'run_usock']}, 'send_all': {'callees': ['make_blocking'], 'callers': ['run_usock', 'ws_send_frame']}, 'MHD_upgrade_action': {'callees': ['MHD_upgraded_connection_mark_app_closed_'], 'callers': ['run_usock', 'uh_cb']}, 'ws_receive_frame': {'callees': [], 'callers': ['run_usock']}, 'ws_send_frame': {'callees': ['send_all'], 'callers': ['run_usock']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MyData",
    "MHD_UpgradeResponseHandle",
    "MHD_upgrade_action",
    "MHD_UPGRADE_ACTION_CLOSE",
    "MHD_upgraded_connection_mark_app_closed_",
    "send_all",
    "make_blocking",
    "recv (prototype from <sys/socket.h>)",
    "free (prototype from <stdlib.h>)",
    "ssize_t",
    "size_t"
  ],
  "explanation": "For each symbol: \n\n- struct MyData: run_usock dereferences md and accesses fields (urh, sock, extra_in_size, extra_in). The struct definition must be inspected to detect any language extensions used in its declaration (anonymous/unnamed structs or unions, compiler-specific attributes, unusual bit-field types, statement-expressions in initializers, GCC/clang extensions inside the type, flexible-array and other nonstandard constructs).\n\n- MHD_UpgradeResponseHandle: the type of md->urh; its definition may embed anonymous unions/structs or attributes that are compiler extensions. Needed to determine whether use of this type introduces extensions.\n\n- MHD_upgrade_action: the function/macro invoked at the end. It might be a macro or wrapper that uses compiler-specific extensions (e.g. __attribute__, inline assembly, statement-expression macros, typeof, __extension__, or other nonstandard constructs). Need its declaration/definition to judge.\n\n- MHD_UPGRADE_ACTION_CLOSE: typically a macro or enum passed to MHD_upgrade_action. Its definition could use extension constructs (complex macros, statement expressions, or compiler-specific tokens) so must be checked.\n\n- MHD_upgraded_connection_mark_app_closed_: called by MHD_upgrade_action (per call graph). If MHD_upgrade_action is a wrapper/macro that expands to or calls this symbol, that symbol\u2019s declaration/definition should be checked for attributes or other extensions.\n\n- send_all: called to write data. Its prototype/definition must be examined for attributes or nonstandard language features (attribute annotations, inline assembly, nonstandard parameter types, or macros that expand to extensions).\n\n- make_blocking: called to change socket mode. Its declaration/definition could use compiler extensions or attributes; inspect it for such usage.\n\n- recv (prototype from <sys/socket.h>): although standard, its declaration should be considered to ensure no platform-specific redefinitions or macros introduce extensions in this translation unit.\n\n- free (prototype from <stdlib.h>): standard, but include to confirm no redefinition or extension-wrapping macro is present in the build (some projects wrap stdlib functions with macros/attributes).\n\n- ssize_t and size_t: the typedefs for these integer types should be checked to ensure they are standard typedefs and not implemented via compiler-specific constructs or macros that constitute language extensions.\n\nRationale: The MISRA rule in question requires reporting use of compiler/language extensions. Such extensions are often introduced not in the simple call sites but in the declarations/definitions and macros of the types and functions used. To determine whether run_usock itself (or the symbols it uses) employs any compiler-specific extensions, the above definitions/macros must be available for inspection."
}