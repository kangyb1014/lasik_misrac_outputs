{
  "user_message": "An agent A claimed that the following answer_shared_response code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of answer_shared_response.\n```c\nstatic enum MHD_Result\nanswer_shared_response (void *cls,\n                        struct MHD_Connection *connection,\n                        const char *url,\n                        const char *method,\n                        const char *version,\n                        const char *upload_data,\n                        size_t *upload_data_size,\n                        void **req_cls)\n{\n  static int marker = 0;\n  unsigned int resp_index;\n  static volatile unsigned int last_index = 0;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n  /* This kind of operation does not guarantee that numbers are not reused\n     in parallel threads, when processed simultaneously, but this should not\n     be a big problem, as it just slow down replies a bit due to\n     responses locking. */\n  resp_index = (last_index++) % num_resps;\n  return MHD_queue_response (connection, MHD_HTTP_OK, resps[resp_index]);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code stores the address of a non-const object into a generic pointer: '*req_cls = (void *) &marker;'. 'marker' is declared as 'static int marker = 0' but is apparently used only as a read\u2011only sentinel, so the pointed-to type could be const-qualified (e.g. 'const int marker = 0'). Therefore the pointer does not point to a const-qualified type even though it could, which violates MISRA C 2023 Rule 8.13. (Note: the external API uses 'void **req_cls', which prevents expressing a const-qualified pointer without changing the API; that does not remove the rule violation in this fragment.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In this function the object 'marker' is only used as a read\u2011only sentinel (it is initialized and never modified), therefore its address should be that of a const\u2011qualified object. Taking &marker yields an int * (to a non\u2011const int) which is then stored (via a cast) into the generic pointer *req_cls. Casting to (void *) hides the constness problem but does not satisfy MISRA C 2023 Rule 8.13 which requires that pointers point to const\u2011qualified types whenever possible. The fact that the external API uses void ** prevents expressing the const qualification without changing the API; that limitation does not remove the rule violation in this fragment. Recommended fixes include declaring marker as 'static const int marker = 0' and, if feasible, changing the API to use 'const void **' (or otherwise conveying the sentinel value without taking the address of a non\u2011const object, e.g. use an integer or uintptr_t sentinel), so that const qualifications are preserved rather than discarded by casts."
}