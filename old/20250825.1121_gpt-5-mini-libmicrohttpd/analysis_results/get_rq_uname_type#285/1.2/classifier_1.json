{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of get_rq_uname_type:\n```c\n_MHD_static_inline enum MHD_DigestAuthUsernameType\nget_rq_uname_type (const struct MHD_RqDAuth *params)\n{\n  if (NULL != params->username.value.str)\n  {\n    if (NULL == params->username_ext.value.str)\n      return params->userhash ?\n             MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH :\n             MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD;\n    else  /* Both 'username' and 'username*' are used */\n      return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n  else if (NULL != params->username_ext.value.str)\n  {\n    if (! params->username_ext.quoted && ! params->userhash &&\n        (MHD_DAUTH_EXT_PARAM_MIN_LEN <= params->username_ext.value.len) )\n      return MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED;\n    else\n      return MHD_DIGEST_AUTH_UNAME_TYPE_INVALID;\n  }\n\n  return MHD_DIGEST_AUTH_UNAME_TYPE_MISSING;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function get_rq_uname_type:\n#define _MHD_static_inline staticinline__attribute__((always_inline))\n...\nenum MHD_DigestAuthUsernameType\n{\n  /**\n   * No username parameter in in Digest Authorization header.\n   * This should be treated as an error.\n   */\n  MHD_DIGEST_AUTH_UNAME_TYPE_MISSING = 0,\n\n  /**\n   * The 'username' parameter is used to specify the username.\n   */\n  MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD = (1 << 2),\n\n  /**\n   * The username is specified by 'username*' parameter with\n   * the extended notation (see RFC 5987 #section-3.2.1).\n   * The only difference between standard and extended types is\n   * the way how username value is encoded in the header.\n   */\n  MHD_DIGEST_AUTH_UNAME_TYPE_EXTENDED = (1 << 3),\n\n  /**\n   * The username provided in form of 'userhash' as\n   * specified by RFC 7616 #section-3.4.4.\n   * @sa #MHD_digest_auth_calc_userhash_hex(), #MHD_digest_auth_calc_userhash()\n   */\n  MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH = (1 << 1),\n\n  /**\n   * The invalid combination of username parameters are used by client.\n   * Either:\n   * * both 'username' and 'username*' are used\n   * * 'username*' is used with 'userhash=true'\n   * * 'username*' used with invalid extended notation\n   * * 'username' is not hexadecimal string, while 'userhash' set to 'true'\n   */\n  MHD_DIGEST_AUTH_UNAME_TYPE_INVALID = (1 << 0)\n}\n...\nstruct MHD_RqDAuth\n{\n  struct MHD_RqDAuthParam nonce;\n  struct MHD_RqDAuthParam opaque;\n  struct MHD_RqDAuthParam response;\n  struct MHD_RqDAuthParam username;\n  struct MHD_RqDAuthParam username_ext;\n  struct MHD_RqDAuthParam realm;\n  struct MHD_RqDAuthParam uri;\n  /* The raw QOP value, used in the 'response' calculation */\n  struct MHD_RqDAuthParam qop_raw;\n  struct MHD_RqDAuthParam cnonce;\n  struct MHD_RqDAuthParam nc;\n\n  /* Decoded values are below */\n  bool userhash; /* True if 'userhash' parameter has value 'true'. */\n  enum MHD_DigestAuthAlgo3 algo3;\n  enum MHD_DigestAuthQOP qop;\n}\n...\n#define MHD_DAUTH_EXT_PARAM_MIN_LEN MHD_STATICSTR_LEN_(MHD_DAUTH_EXT_PARAM_PREFIX\"'\")\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#define _MHD_static_inline staticinline__attribute__((always_inline))\n```\nFocus on the above code fragment and judge whether it violates the rule 1.2 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The macro uses the GNU C attribute extension: _MHD_static_inline is defined as staticinline__attribute__((always_inline)), which relies on the compiler-specific __attribute__((always_inline)) syntax. __attribute__ is a documented compiler extension (GCC/clang), so this use violates MISRA C 2023 Rule 1.2."
}