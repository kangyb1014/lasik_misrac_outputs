{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of send_all:\n```c\nstatic void\nsend_all (MHD_socket sock,\n          const char *buf,\n          size_t len)\n{\n  ssize_t ret;\n  size_t off;\n\n  make_blocking (sock);\n  for (off = 0; off < len; off += (size_t) ret)\n  {\n    ret = send (sock,\n                &buf[off],\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n                len - off,\n#else  /* Native W32 */\n                (int) (len - off),\n#endif /* Native W32 */\n                0);\n    if (0 > ret)\n    {\n      if (EAGAIN == errno)\n      {\n        ret = 0;\n        continue;\n      }\n      break;\n    }\n    if (0 == ret)\n      break;\n  }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function send_all:\nstatic void\nmake_blocking (MHD_socket fd)\n{\n#if defined(MHD_POSIX_SOCKETS)\n  int flags;\n\n  flags = fcntl (fd, F_GETFL);\n  if (-1 == flags)\n    abort ();\n  if ((flags & ~O_NONBLOCK) != flags)\n    if (-1 == fcntl (fd, F_SETFL, flags & ~O_NONBLOCK))\n      abort ();\n#elif defined(MHD_WINSOCK_SOCKETS)\n  unsigned long flags = 0;\n\n  if (0 != ioctlsocket (fd, (int) FIONBIO, &flags))\n    abort ();\n#endif /* MHD_WINSOCK_SOCKETS */\n}\n...\ntypedef int MHD_socket\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "ret = send (sock,\n                &buf[off],\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n                len - off,\n#else  /* Native W32 */\n                (int) (len - off),\n#endif /* Native W32 */\n                0);",
    "if (0 == ret)\n      break;",
    "if (EAGAIN == errno)\n      {\n        ret = 0;\n        continue;\n      }",
    "if (-1 == flags)\n    abort ();",
    "if ((flags & ~O_NONBLOCK) != flags)\n    if (-1 == fcntl (fd, F_SETFL, flags & ~O_NONBLOCK))\n      abort ();",
    "for (off = 0; off < len; off += (size_t) ret)",
    "typedef int MHD_socket",
    "if (0 != ioctlsocket (fd, (int) FIONBIO, &flags))\n    abort ();"
  ],
  "explanation": "Fragments not listed were reviewed and are not suspected to be inherently unreachable in all possible builds/executions. Simple declarations (ssize_t ret; size_t off;), the surrounding function signatures/brace structure, and the normal flow-control constructs (the outer loop, the non-error path of the send handling) can be reached depending on inputs/platform and therefore do not by themselves constitute guaranteed unreachable code. The listed fragments were chosen because they either: (a) participate in loop control with values that can prevent progress (the for header and the EAGAIN handling), (b) contain platform-specific conditional compilation that can produce mutually exclusive/never-executed branches (the send argument alternatives), (c) call non-returning abort/ioctlsocket paths that can render subsequent code non-executable in that branch, or (d) show a typedef/usage ordering that may indicate a mismatch in declarations. Those items should be investigated to determine whether any code is truly unreachable under all possible configurations or inputs. No other code in the provided snippets is unconditionally unreachable across all configurations and runtime conditions."
}