{
  "user_message": "An agent A claimed that the following get_base_digest_algo code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of get_base_digest_algo.\n```c\n_MHD_static_inline enum MHD_DigestBaseAlgo\nget_base_digest_algo (enum MHD_DigestAuthAlgo3 algo3)\n{\n  unsigned int base_algo;\n\n  base_algo =\n    ((unsigned int) algo3)\n    & ~((unsigned int)\n        (MHD_DIGEST_AUTH_ALGO3_NON_SESSION\n         | MHD_DIGEST_AUTH_ALGO3_NON_SESSION));\n  return (enum MHD_DigestBaseAlgo) base_algo;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe macro _MHD_static_inline expands to a compiler-specific attribute: '__attribute__((always_inline))' (GCC/Clang extension). This use of a compiler language extension violates MISRA C 2023 Rule 1.2.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function get_base_digest_algo:\n#define _MHD_static_inline staticinline__attribute__((always_inline))\n...\nenum MHD_DigestBaseAlgo\n{\n  /**\n   * Invalid hash algorithm value\n   */\n  MHD_DIGEST_BASE_ALGO_INVALID = 0,\n\n  /**\n   * MD5 hash algorithm.\n   * As specified by RFC1321\n   */\n  MHD_DIGEST_BASE_ALGO_MD5 = (1 << 0),\n\n  /**\n   * SHA-256 hash algorithm.\n   * As specified by FIPS PUB 180-4\n   */\n  MHD_DIGEST_BASE_ALGO_SHA256 = (1 << 1),\n\n  /**\n   * SHA-512/256 hash algorithm.\n   * As specified by FIPS PUB 180-4\n   */\n  MHD_DIGEST_BASE_ALGO_SHA512_256 = (1 << 2)\n}\n...\nenum MHD_DigestAuthAlgo3\n{\n  /**\n   * Unknown or wrong algorithm type.\n   * Used in struct MHD_DigestAuthInfo to indicate client value that\n   * cannot by identified.\n   */\n  MHD_DIGEST_AUTH_ALGO3_INVALID = 0,\n\n  /**\n   * The 'MD5' algorithm, non-session version.\n   */\n  MHD_DIGEST_AUTH_ALGO3_MD5 =\n    MHD_DIGEST_BASE_ALGO_MD5 | MHD_DIGEST_AUTH_ALGO3_NON_SESSION,\n\n  /**\n   * The 'MD5-sess' algorithm.\n   * Not supported by MHD for authentication.\n   */\n  MHD_DIGEST_AUTH_ALGO3_MD5_SESSION =\n    MHD_DIGEST_BASE_ALGO_MD5 | MHD_DIGEST_AUTH_ALGO3_SESSION,\n\n  /**\n   * The 'SHA-256' algorithm, non-session version.\n   */\n  MHD_DIGEST_AUTH_ALGO3_SHA256 =\n    MHD_DIGEST_BASE_ALGO_SHA256 | MHD_DIGEST_AUTH_ALGO3_NON_SESSION,\n\n  /**\n   * The 'SHA-256-sess' algorithm.\n   * Not supported by MHD for authentication.\n   */\n  MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION =\n    MHD_DIGEST_BASE_ALGO_SHA256 | MHD_DIGEST_AUTH_ALGO3_SESSION,\n\n  /**\n   * The 'SHA-512-256' (SHA-512/256) algorithm.\n   */\n  MHD_DIGEST_AUTH_ALGO3_SHA512_256 =\n    MHD_DIGEST_BASE_ALGO_SHA512_256 | MHD_DIGEST_AUTH_ALGO3_NON_SESSION,\n\n  /**\n   * The 'SHA-512-256-sess' (SHA-512/256 session) algorithm.\n   * Not supported by MHD for authentication.\n   */\n  MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION =\n    MHD_DIGEST_BASE_ALGO_SHA512_256 | MHD_DIGEST_AUTH_ALGO3_SESSION\n}\n...\n#define MHD_DIGEST_AUTH_ALGO3_NON_SESSION (1<<6)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The macro _MHD_static_inline expands to a GCC/Clang attribute (__attribute__((always_inline))) which is a compiler-specific language extension. MISRA C 2023 Rule 1.2 forbids use of language extensions documented as such by the compiler. Using the attribute (even when hidden behind a macro) constitutes use of that extension, so the function as shown violates Rule 1.2. (If the project conditionally defines the macro to be empty for strictly conforming compilers, the violation would only apply where the attribute is actually present; based on the provided definition the attribute is present.)"
}