{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_base_digest_algo:\n```c\n_MHD_static_inline enum MHD_DigestBaseAlgo\nget_base_digest_algo (enum MHD_DigestAuthAlgo3 algo3)\n{\n  unsigned int base_algo;\n\n  base_algo =\n    ((unsigned int) algo3)\n    & ~((unsigned int)\n        (MHD_DIGEST_AUTH_ALGO3_NON_SESSION\n         | MHD_DIGEST_AUTH_ALGO3_NON_SESSION));\n  return (enum MHD_DigestBaseAlgo) base_algo;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function get_base_digest_algo:\n#define _MHD_static_inline staticinline__attribute__((always_inline))\n...\nenum MHD_DigestBaseAlgo\n{\n  /**\n   * Invalid hash algorithm value\n   */\n  MHD_DIGEST_BASE_ALGO_INVALID = 0,\n\n  /**\n   * MD5 hash algorithm.\n   * As specified by RFC1321\n   */\n  MHD_DIGEST_BASE_ALGO_MD5 = (1 << 0),\n\n  /**\n   * SHA-256 hash algorithm.\n   * As specified by FIPS PUB 180-4\n   */\n  MHD_DIGEST_BASE_ALGO_SHA256 = (1 << 1),\n\n  /**\n   * SHA-512/256 hash algorithm.\n   * As specified by FIPS PUB 180-4\n   */\n  MHD_DIGEST_BASE_ALGO_SHA512_256 = (1 << 2)\n}\n...\nenum MHD_DigestAuthAlgo3\n{\n  /**\n   * Unknown or wrong algorithm type.\n   * Used in struct MHD_DigestAuthInfo to indicate client value that\n   * cannot by identified.\n   */\n  MHD_DIGEST_AUTH_ALGO3_INVALID = 0,\n\n  /**\n   * The 'MD5' algorithm, non-session version.\n   */\n  MHD_DIGEST_AUTH_ALGO3_MD5 =\n    MHD_DIGEST_BASE_ALGO_MD5 | MHD_DIGEST_AUTH_ALGO3_NON_SESSION,\n\n  /**\n   * The 'MD5-sess' algorithm.\n   * Not supported by MHD for authentication.\n   */\n  MHD_DIGEST_AUTH_ALGO3_MD5_SESSION =\n    MHD_DIGEST_BASE_ALGO_MD5 | MHD_DIGEST_AUTH_ALGO3_SESSION,\n\n  /**\n   * The 'SHA-256' algorithm, non-session version.\n   */\n  MHD_DIGEST_AUTH_ALGO3_SHA256 =\n    MHD_DIGEST_BASE_ALGO_SHA256 | MHD_DIGEST_AUTH_ALGO3_NON_SESSION,\n\n  /**\n   * The 'SHA-256-sess' algorithm.\n   * Not supported by MHD for authentication.\n   */\n  MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION =\n    MHD_DIGEST_BASE_ALGO_SHA256 | MHD_DIGEST_AUTH_ALGO3_SESSION,\n\n  /**\n   * The 'SHA-512-256' (SHA-512/256) algorithm.\n   */\n  MHD_DIGEST_AUTH_ALGO3_SHA512_256 =\n    MHD_DIGEST_BASE_ALGO_SHA512_256 | MHD_DIGEST_AUTH_ALGO3_NON_SESSION,\n\n  /**\n   * The 'SHA-512-256-sess' (SHA-512/256 session) algorithm.\n   * Not supported by MHD for authentication.\n   */\n  MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION =\n    MHD_DIGEST_BASE_ALGO_SHA512_256 | MHD_DIGEST_AUTH_ALGO3_SESSION\n}\n...\n#define MHD_DIGEST_AUTH_ALGO3_NON_SESSION (1<<6)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "#define _MHD_static_inline staticinline__attribute__((always_inline))",
    "_MHD_static_inline enum MHD_DigestBaseAlgo\nget_base_digest_algo (enum MHD_DigestAuthAlgo3 algo3)\n{\n  unsigned int base_algo;\n\n  base_algo =\n    ((unsigned int) algo3)\n    & ~((unsigned int)\n        (MHD_DIGEST_AUTH_ALGO3_NON_SESSION\n         | MHD_DIGEST_AUTH_ALGO3_NON_SESSION));\n  return (enum MHD_DigestBaseAlgo) base_algo;\n}"
  ],
  "explanation": "Only the use of compiler-specific attributes or other non-standard language extensions needs investigation for Rule 1.2. The macro that introduces an attribute-style annotation and the function declaration that uses that macro are the places where such extensions can appear, so they are listed above. Other code constructs do not require investigation for language-extension usage: - The enum definitions and the use of bit-shifts (e.g. (1 << 0), (1 << 1), (1<<6)) are standard C. - Bitwise operations and integer/enum casts ((unsigned int) algo3 and (enum MHD_DigestBaseAlgo) base_algo) are valid in standard C (though conversions should be reviewed for correctness, they are not language extensions). - The use of static inline semantics (in standard C99 and later) is standard; only vendor-specific attributes (such as __attribute__((...))) are extensions. - Macro definitions and token concatenation as shown (simple #define) are standard C preprocessor features. Therefore no other fragments appear to use explicit compiler language extensions that must be reported under Rule 1.2."
}