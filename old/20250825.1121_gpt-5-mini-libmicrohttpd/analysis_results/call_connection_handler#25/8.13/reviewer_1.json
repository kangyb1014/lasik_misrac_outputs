{
  "user_message": "An agent A claimed that the following call_connection_handler code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of call_connection_handler.\n```c\nstatic void\ncall_connection_handler (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  size_t processed;\n\n  if (NULL != connection->rp.response)\n    return;                     /* already queued a response */\n  processed = 0;\n  connection->rq.client_aware = true;\n  connection->in_access_handler = true;\n  if (MHD_NO ==\n      daemon->default_handler (daemon->default_handler_cls,\n                               connection,\n                               connection->rq.url,\n                               connection->rq.method,\n                               connection->rq.version,\n                               NULL,\n                               &processed,\n                               &connection->rq.client_context))\n  {\n    connection->in_access_handler = false;\n    /* serious internal error, close connection */\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Application reported internal error, \" \\\n                               \"closing connection.\"));\n    return;\n  }\n  connection->in_access_handler = false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe member daemon->default_handler_cls is used as a context pointer passed to daemon->default_handler but (as written) is not const-qualified. If default_handler does not modify the object pointed to by default_handler_cls (i.e. it only reads the context), then the pointer type should be declared as a pointer to a const-qualified type (for example const void *default_handler_cls) to satisfy MISRA C 2023 Rule 8.13. If, however, the handler is documented to mutate the context and the parameter and member are intentionally non-const, then there is no violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is speculative and cannot be confirmed from the snippet alone. MISRA C 2023 Rule 8.13 requires pointers to be const-qualified where possible, but whether there is a violation depends on the declarations and uses you do not show: the type of daemon->default_handler_cls (the struct MHD_Daemon member) and the parameter type of daemon->default_handler. If the handler function and all other uses never modify the object pointed to by default_handler_cls, then the member and the function parameter should be declared as pointers to const (e.g. const void *), and keeping them non-const would be a violation of 8.13. If, however, the handler or other code legitimately mutates the context object, then the current non-const declarations are intentional and there is no violation. To decide definitively, inspect the definition of struct MHD_Daemon (the type of default_handler_cls) and the prototype of default_handler and audit all uses for mutation. Based on the provided information alone, the reported violation is not proven."
}