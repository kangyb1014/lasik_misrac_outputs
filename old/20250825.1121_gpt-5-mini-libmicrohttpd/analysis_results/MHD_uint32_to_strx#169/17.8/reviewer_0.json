{
  "user_message": "An agent A claimed that the following MHD_uint32_to_strx code violates the MISRA C 2023 rule 17.8.\n<misra_rule>\nMISRA C 2023 Rule 17.8 is A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_uint32_to_strx.\n```c\nsize_t\nMHD_uint32_to_strx (uint32_t val,\n                    char *buf,\n                    size_t buf_size)\n{\n  size_t o_pos = 0; /**< position of the output character */\n  int digit_pos = 8; /** zero-based, digit position in @a 'val' */\n  int digit;\n\n  /* Skip leading zeros */\n  do\n  {\n    digit_pos--;\n    digit = (int) (val >> 28);\n    val <<= 4;\n  } while ((0 == digit) && (0 != digit_pos));\n\n  while (o_pos < buf_size)\n  {\n    buf[o_pos++] =\n      (char) ((digit <= 9) ?\n              ('0' + (char) digit) :\n              ('A' + (char) digit - 10));\n    if (0 == digit_pos)\n      return o_pos;\n    digit_pos--;\n    digit = (int) (val >> 28);\n    val <<= 4;\n  }\n  return 0; /* The buffer is too small */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement 'val <<= 4;' modifies the function parameter 'val' (a by-value parameter). MISRA C 2023 Rule 17.8 prohibits modifying function parameters; this therefore violates the rule. To comply, copy the parameter into a local variable (e.g. 'uint32_t tmp = val;') and perform 'tmp <<= 4;' instead.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 17.8 states that a function parameter shall not be modified. In the posted code the formal parameter 'val' (type uint32_t) is modified in-place via 'val <<= 4;'. Although 'val' is passed by value at the call site, it is still a function parameter object and modifying it within the function violates Rule 17.8. The pointer-exception in the rule (that the object referred to by a pointer parameter may be modified, but not the pointer itself) does not apply here. The appropriate fix is to copy the parameter into a local variable (e.g. 'uint32_t tmp = val;') and perform the shifts on that local variable."
}