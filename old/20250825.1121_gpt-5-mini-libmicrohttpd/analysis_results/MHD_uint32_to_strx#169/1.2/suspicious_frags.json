{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_uint32_to_strx:\n```c\nsize_t\nMHD_uint32_to_strx (uint32_t val,\n                    char *buf,\n                    size_t buf_size)\n{\n  size_t o_pos = 0; /**< position of the output character */\n  int digit_pos = 8; /** zero-based, digit position in @a 'val' */\n  int digit;\n\n  /* Skip leading zeros */\n  do\n  {\n    digit_pos--;\n    digit = (int) (val >> 28);\n    val <<= 4;\n  } while ((0 == digit) && (0 != digit_pos));\n\n  while (o_pos < buf_size)\n  {\n    buf[o_pos++] =\n      (char) ((digit <= 9) ?\n              ('0' + (char) digit) :\n              ('A' + (char) digit - 10));\n    if (0 == digit_pos)\n      return o_pos;\n    digit_pos--;\n    digit = (int) (val >> 28);\n    val <<= 4;\n  }\n  return 0; /* The buffer is too small */\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I examined the function for use of compiler-specific language extensions (tokens and constructs commonly flagged as extensions in compiler documentation), such as: __attribute__, __asm__/asm, __extension__, __builtin_*, typeof, statement-expressions ({ ... }), nested functions, GCC-style labels-as-values, Microsoft __declspec, hex float suffixes, anonymous structs/unions (if unsupported), or other nonstandard keywords/syntax. None of those appear in the provided code.\n\nNotes on items that might superficially look unusual but are not compiler extensions and therefore do not require investigation for Rule 1.2:\n- uint32_t and size_t: standard typedefs from stdint.h and <stddef.h> (or equivalent); their use is not an extension.\n- Casts (e.g., (int), (char)) and bit-shift operators (>>/<<): standard C operators.\n- do/while and while loops, return statements, and the conditional (?:) operator: all standard C.\n- The comment style using /**< and the @a tag is a Doxygen comment/documentation convention, not a compiler language extension; comments are ignored by the compiler.\n\nTherefore there are no code fragments in the supplied function that use language extensions explicitly stated as extensions in compiler documentation, so nothing needs to be reported for Rule 1.2."
}