{
  "user_message": "An agent A claimed that the following MHD_digest_auth_check_digest code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_digest_auth_check_digest.\n```c\n_MHD_EXTERN int\nMHD_digest_auth_check_digest (struct MHD_Connection *connection,\n                              const char *realm,\n                              const char *username,\n                              const uint8_t digest[MHD_MD5_DIGEST_SIZE],\n                              unsigned int nonce_timeout)\n{\n  return MHD_digest_auth_check_digest2 (connection,\n                                        realm,\n                                        username,\n                                        digest,\n                                        MHD_MD5_DIGEST_SIZE,\n                                        nonce_timeout,\n                                        MHD_DIGEST_ALG_MD5);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf MHD_digest_auth_check_digest does not modify the MHD_Connection object (i.e. it only reads from it), then the parameter should be declared as const struct MHD_Connection *connection. The current declaration uses a non-const pointer even though other input parameters are const-qualified, so in that (likely) case the rule is violated.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not enough information to conclude a rule violation. MISRA C 2023 Rule 8.13 indeed recommends that a pointer parameter be const-qualified when the function does not modify the pointed-to object. However, the snippet shows a wrapper that forwards connection to MHD_digest_auth_check_digest2; whether the pointer can be const depends on whether this function (or any callees) modify the MHD_Connection object or require a non-const parameter. If the implementation and all callees treat the connection as read-only, then the parameter should be declared const and the report would be correct. If any callee modifies the object or requires a non-const pointer, the current declaration is appropriate and there is no violation. Thus the agent\u2019s claim is conditional and cannot be confirmed from the provided code alone \u2014 you must inspect the implementation and the prototype/semantics of MHD_digest_auth_check_digest2 (and any uses) to decide."
}