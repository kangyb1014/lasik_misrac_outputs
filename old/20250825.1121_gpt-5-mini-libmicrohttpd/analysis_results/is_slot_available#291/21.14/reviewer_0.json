{
  "user_message": "An agent A claimed that the following is_slot_available code violates the MISRA C 2023 rule 21.14.\n<misra_rule>\nMISRA C 2023 Rule 21.14 is The Standard Library function memcmp shall not be used to compare null terminated strings.\n\n</misra_rule>\n<target_code>\nHere is the original code of is_slot_available.\n```c\nstatic bool\nis_slot_available (const struct MHD_NonceNc *const nn,\n                   const uint64_t now,\n                   const char *const new_nonce,\n                   size_t new_nonce_len)\n{\n  uint64_t timestamp;\n  bool timestamp_valid;\n  mhd_assert (new_nonce_len <= NONCE_STD_LEN (MAX_DIGEST));\n  mhd_assert (NONCE_STD_LEN (MAX_DIGEST) <= MAX_DIGEST_NONCE_LENGTH);\n  if (0 == nn->nonce[0])\n    return true; /* The slot is empty */\n\n  if (0 == memcmp (nn->nonce, new_nonce, new_nonce_len))\n  {\n    /* The slot has the same nonce already. This nonce cannot be registered\n     * again as it would just clear 'nc' usage history. */\n    return false;\n  }\n\n  if (0 != nn->nc)\n    return true; /* Client already used the nonce in this slot at least\n                    one time, re-use the slot */\n\n  /* The nonce must be zero-terminated */\n  mhd_assert (0 == nn->nonce[sizeof(nn->nonce) - 1]);\n  if (0 != nn->nonce[sizeof(nn->nonce) - 1])\n    return true; /* Wrong nonce format in the slot */\n\n  timestamp_valid = get_nonce_timestamp (nn->nonce, 0, &timestamp);\n  mhd_assert (timestamp_valid);\n  if (! timestamp_valid)\n    return true; /* Invalid timestamp in nonce-nc, should not be possible */\n\n  if ((REUSE_TIMEOUT * 1000) < TRIM_TO_TIMESTAMP (now - timestamp))\n    return true;\n\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code uses memcmp(nn->nonce, new_nonce, new_nonce_len) to compare nonce values. nn->nonce is asserted to be NUL-terminated (mhd_assert on the last byte) and new_nonce is a C string passed with an accompanying length. Using memcmp to compare null-terminated strings violates MISRA C 2023 Rule 21.14 (memcpy shall not be used to compare null-terminated strings). Use strcmp/strncmp or an explicit length-aware string comparison that respects null-termination instead.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 21.14 prohibits using memcmp to compare null-terminated strings. In the code nn->nonce is explicitly asserted to be NUL-terminated (mhd_assert(0 == nn->nonce[sizeof(nn->nonce) - 1])). Calling memcmp(nn->nonce, new_nonce, new_nonce_len) therefore uses memcmp to compare data that includes a null-terminated string buffer, which violates the rule. (Whether new_nonce itself is NUL-terminated is irrelevant \u2014 memcmp is being used against a known null-terminated string.) Use a string comparison function (e.g. strncmp with careful length handling) or treat both objects as binary buffers with no NUL-termination to avoid the violation."
}