{
  "user_message": "An agent A claimed that the following answer_unique_tiny_response code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of answer_unique_tiny_response.\n```c\nstatic enum MHD_Result\nanswer_unique_tiny_response (void *cls,\n                             struct MHD_Connection *connection,\n                             const char *url,\n                             const char *method,\n                             const char *version,\n                             const char *upload_data,\n                             size_t *upload_data_size,\n                             void **req_cls)\n{\n  static int marker = 0;\n  struct MHD_Response *r;\n  enum MHD_Result ret;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n#if MHD_VERSION >= 0x00097701\n  r = MHD_create_response_from_buffer_static (MHD_STATICSTR_LEN_ (tiny_body),\n                                              tiny_body);\n#else  /* MHD_VERSION < 0x00097701 */\n  r = MHD_create_response_from_buffer (MHD_STATICSTR_LEN_ (tiny_body),\n                                       (void *) tiny_body,\n                                       MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, r);\n  MHD_destroy_response (r);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code stores the address of a non-const object (static int marker) into a generic void* location: *req_cls = (void *) &marker; This assigns an int* (address of a non-const int) to a pointer that is not const-qualified and uses an explicit cast that can hide/discard constness. According to MISRA C 2023 Rule 8.13, the pointer target should be const-qualified whenever possible (e.g. use a const-qualified pointee to indicate immutability and preserve qualifier propagation). Here the pointee is not const-qualified and the cast masks that, so the rule is violated.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function answer_unique_tiny_response:\n#define MHD_HTTP_OK 200\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C:2023 Rule 8.13 recommends that pointers should point to const-qualified types where possible, but the code does not actually discard any const qualifier here. The object marker is declared as a non-const int and &marker has type int* which may be converted to void* without dropping constness (there is none to drop). Moreover, the req_cls parameter is part of the external MHD callback API (void **req_cls) so the function cannot change the API to use const void *; the code is following the required API and is using the address as an opaque token. If marker were made const, then storing its address into a void* would require an explicit cast and would then raise qualifier-discarding concerns, but that is not the current code. For these reasons the cited violation of Rule 8.13 is not present."
}