{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of answer_unique_tiny_response:\n```c\nstatic enum MHD_Result\nanswer_unique_tiny_response (void *cls,\n                             struct MHD_Connection *connection,\n                             const char *url,\n                             const char *method,\n                             const char *version,\n                             const char *upload_data,\n                             size_t *upload_data_size,\n                             void **req_cls)\n{\n  static int marker = 0;\n  struct MHD_Response *r;\n  enum MHD_Result ret;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n#if MHD_VERSION >= 0x00097701\n  r = MHD_create_response_from_buffer_static (MHD_STATICSTR_LEN_ (tiny_body),\n                                              tiny_body);\n#else  /* MHD_VERSION < 0x00097701 */\n  r = MHD_create_response_from_buffer (MHD_STATICSTR_LEN_ (tiny_body),\n                                       (void *) tiny_body,\n                                       MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, r);\n  MHD_destroy_response (r);\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function answer_unique_tiny_response:\n#define MHD_HTTP_OK 200\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "*req_cls = (void *) &marker;",
    "void *cls",
    "(void *) tiny_body",
    "void **req_cls"
  ],
  "explanation": "Fragments not selected for investigation and reasons:\n- const char *url, const char *method, const char *version, const char *upload_data: these are already const-qualified pointers, so they conform with Rule 8.13 and do not need investigation.\n- size_t *upload_data_size: this parameter is unused in the function and is part of the handler API; it is a pointer to a modifiable size_t because the API may expect modification elsewhere, so there is no clear possibility to add const here without changing the API.\n- struct MHD_Connection *connection: the connection pointer is passed to library functions (e.g. MHD_queue_response) that likely require a non-const connection object; since the function does not modify it directly but the API may, this should not be marked without checking the API signature.\n- struct MHD_Response *r and related response-handling calls: these objects are created, queued, and destroyed via the library API, which typically expects non-const response pointers; therefore they are not flagged here.\n- marker (static int marker = 0): the variable itself is used as a per-connection cookie; whether it can be const depends on how the pointer is used by the API. The assignment to the request context pointer (handled above) is the relevant point to inspect, so the variable declaration itself was not selected separately.\n\nNote: The listed suspicious fragments should be investigated because they involve non-const pointer types or casts that may remove const qualification (see the casts and pointer-to-pointer parameters). Other pointer occurrences were not selected because they are already const-qualified or are tied to the external library API expectations and do not present an immediate opportunity to add const without changing the API usage."
}