{
  "user_message": "An agent A claimed that the following answer_unique_tiny_response code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of answer_unique_tiny_response.\n```c\nstatic enum MHD_Result\nanswer_unique_tiny_response (void *cls,\n                             struct MHD_Connection *connection,\n                             const char *url,\n                             const char *method,\n                             const char *version,\n                             const char *upload_data,\n                             size_t *upload_data_size,\n                             void **req_cls)\n{\n  static int marker = 0;\n  struct MHD_Response *r;\n  enum MHD_Result ret;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n#if MHD_VERSION >= 0x00097701\n  r = MHD_create_response_from_buffer_static (MHD_STATICSTR_LEN_ (tiny_body),\n                                              tiny_body);\n#else  /* MHD_VERSION < 0x00097701 */\n  r = MHD_create_response_from_buffer (MHD_STATICSTR_LEN_ (tiny_body),\n                                       (void *) tiny_body,\n                                       MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, r);\n  MHD_destroy_response (r);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code calls strcmp(method, MHD_HTTP_METHOD_GET) and strcmp(method, MHD_HTTP_METHOD_HEAD) without verifying that 'method' points to a valid, null-terminated buffer. If 'method' is NULL (or points to a buffer that is not NUL-terminated), strcmp will read through memory beyond the object bounds, violating MISRA C 2023 Rule 21.17.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function answer_unique_tiny_response:\n#define MHD_HTTP_METHOD_GET \"GET\"\n...\n#define MHD_HTTP_METHOD_HEAD \"HEAD\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct unless there is an external, provable guarantee that the library always passes a non-NULL, NUL-terminated string in method. strcmp expects two valid pointers to NUL-terminated objects; the code calls strcmp(method, ...) without checking method for NULL or otherwise ensuring it cannot point outside a valid, NUL-terminated buffer. If method were NULL (or not NUL-terminated) this would cause reads beyond the bounds of the object(s) and thus violate MISRA C 2023 Rule 21.17. \n\nIf the MHD callback contract explicitly and formally guarantees method is non-NULL and NUL-terminated, then no violation occurs; otherwise the code should check method != NULL (and/or use a bounded API or other defensive checks) before calling strcmp to comply with Rule 21.17."
}