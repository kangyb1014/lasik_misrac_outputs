{
  "user_message": "Target function code is:\n```c\n_MHD_static_inline void\ndigest_update (struct DigestAlgorithm *da,\n               const void *data,\n               size_t length)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (da->ready_for_hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    MHD_MD5_update (&da->ctx.md5_ctx, (const uint8_t *) data, length);\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    MHD_SHA256_update (&da->ctx.sha256_ctx, (const uint8_t *) data, length);\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    MHD_SHA512_256_update (&da->ctx.sha512_256_ctx,\n                           (const uint8_t *) data, length);\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0);   /* May not happen */\n#ifdef _DEBUG\n  da->hashing = true;\n#endif\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'digest_update': {'callees': ['MHD_MD5_update', 'MHD_SHA256_update', 'MHD_SHA512_256_update'], 'callers': ['digest_update_str', 'digest_update_with_colon', 'calculate_nonce', 'calc_userdigest', 'calc_userhash', 'digest_auth_check_all_inner']}, 'MHD_MD5_update': {'callees': ['md5_transform'], 'callers': ['digest_update']}, 'MHD_SHA256_update': {'callees': ['sha256_transform'], 'callers': ['digest_update']}, 'MHD_SHA512_256_update': {'callees': ['sha512_256_transform'], 'callers': ['digest_update']}, 'digest_update_str': {'callees': ['digest_update'], 'callers': ['calculate_nonce', 'calc_userdigest', 'digest_auth_check_all_inner']}, 'digest_update_with_colon': {'callees': ['digest_update'], 'callers': ['calculate_nonce', 'calc_userdigest', 'calc_userhash', 'digest_auth_check_all_inner']}, 'calculate_nonce': {'callees': ['MHD_bin_to_hex', 'digest_get_size', 'digest_update', 'digest_update_with_colon', 'digest_update_str', 'digest_calc_hash'], 'callers': ['calculate_add_nonce', 'digest_auth_check_all_inner']}, 'calc_userdigest': {'callees': ['digest_update', 'digest_update_with_colon', 'digest_update_str', 'digest_calc_hash'], 'callers': ['MHD_digest_auth_calc_userdigest', 'digest_auth_check_all_inner']}, 'calc_userhash': {'callees': ['digest_update', 'digest_update_with_colon', 'digest_calc_hash'], 'callers': ['MHD_digest_auth_calc_userhash', 'digest_auth_check_all_inner']}, 'digest_auth_check_all_inner': {'callees': ['MHD_get_master', 'MHD_get_rq_dauth_params_', 'MHD_DLOG', 'digest_init_one_time', 'get_base_digest_algo', '__builtin_unreachable', 'digest_get_size', 'is_param_equal', 'get_buffer_for_size', 'get_rq_extended_uname_copy_z', 'calc_userhash', 'MHD_bin_to_hex', 'is_param_equal_caseless', 'digest_reset', 'get_unquoted_param', 'MHD_strx_to_uint64_n_', 'get_nonce_timestamp', 'MHD_monotonic_msec_counter', 'check_nonce_nc', 'digest_update_str', 'digest_update_with_colon', 'get_unquoted_param_copy', 'digest_update', 'check_uri_match', 'digest_calc_hash', 'calc_userdigest', 'MHD_hex_to_bin', 'calculate_nonce'], 'callers': ['digest_auth_check_all']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_static_inline",
    "mhd_assert",
    "struct DigestAlgorithm",
    "MHD_DIGEST_BASE_ALGO_MD5",
    "MHD_DIGEST_BASE_ALGO_SHA256",
    "MHD_DIGEST_BASE_ALGO_SHA512_256",
    "MHD_MD5_update",
    "MHD_SHA256_update",
    "MHD_SHA512_256_update",
    "md5_transform",
    "sha256_transform",
    "sha512_256_transform",
    "MHD_MD5_SUPPORT",
    "MHD_SHA256_SUPPORT",
    "MHD_SHA512_256_SUPPORT",
    "_DEBUG"
  ],
  "explanation": "For checking MISRA C rule about language extensions you must see any macro expansions, attributes or compiler-specific builtins used by the target. _MHD_static_inline: likely a macro that can expand to compiler-specific inline/attribute syntax (e.g. __inline__, __attribute__((...))) \u2014 need its definition to detect extension use. mhd_assert: often a macro that can expand to compiler builtins, statement-expressions, __builtin_trap, or platform-specific assert helpers \u2014 inspect expansion for extensions. struct DigestAlgorithm: full type/field definitions (including types of members such as hashing, ctx, algo) to ensure no non-standard member declarations or use of compiler extensions (bitfields, anonymous structs/unions, attributes). MHD_DIGEST_BASE_ALGO_* constants: enum or macro definitions determine how conditions are compiled; need to confirm they are standard enum/consts and not created via extensions. MHD_MD5_update / MHD_SHA256_update / MHD_SHA512_256_update: their declarations/definitions may be macros or inline wrappers that use compiler extensions or attributes; must inspect. md5_transform / sha256_transform / sha512_256_transform: underlying implementations called by the updates might contain compiler-specific intrinsics or attributes \u2014 include to trace any extension usage. MHD_MD5_SUPPORT, MHD_SHA256_SUPPORT, MHD_SHA512_256_SUPPORT, _DEBUG: the preprocessor feature macros control which code is compiled; knowledge of their defined/undefined state and their definitions (if any) is required to know which branches and expansions to inspect for extensions. Inspecting these symbols and macros lets the analyst determine whether the compiled version of digest_update (and any invoked wrappers) uses language extensions that would violate the MISRA rule."
}