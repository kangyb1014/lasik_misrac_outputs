{
  "user_message": "Target function code is:\n```c\n_MHD_static_inline void\ndigest_update (struct DigestAlgorithm *da,\n               const void *data,\n               size_t length)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (da->ready_for_hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    MHD_MD5_update (&da->ctx.md5_ctx, (const uint8_t *) data, length);\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    MHD_SHA256_update (&da->ctx.sha256_ctx, (const uint8_t *) data, length);\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    MHD_SHA512_256_update (&da->ctx.sha512_256_ctx,\n                           (const uint8_t *) data, length);\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0);   /* May not happen */\n#ifdef _DEBUG\n  da->hashing = true;\n#endif\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'digest_update': {'callees': ['MHD_MD5_update', 'MHD_SHA256_update', 'MHD_SHA512_256_update'], 'callers': ['digest_update_str', 'digest_update_with_colon', 'calculate_nonce', 'calc_userdigest', 'calc_userhash', 'digest_auth_check_all_inner']}, 'MHD_MD5_update': {'callees': ['md5_transform'], 'callers': ['digest_update']}, 'MHD_SHA256_update': {'callees': ['sha256_transform'], 'callers': ['digest_update']}, 'MHD_SHA512_256_update': {'callees': ['sha512_256_transform'], 'callers': ['digest_update']}, 'digest_update_str': {'callees': ['digest_update'], 'callers': ['calculate_nonce', 'calc_userdigest', 'digest_auth_check_all_inner']}, 'digest_update_with_colon': {'callees': ['digest_update'], 'callers': ['calculate_nonce', 'calc_userdigest', 'calc_userhash', 'digest_auth_check_all_inner']}, 'calculate_nonce': {'callees': ['MHD_bin_to_hex', 'digest_get_size', 'digest_update', 'digest_update_with_colon', 'digest_update_str', 'digest_calc_hash'], 'callers': ['calculate_add_nonce', 'digest_auth_check_all_inner']}, 'calc_userdigest': {'callees': ['digest_update', 'digest_update_with_colon', 'digest_update_str', 'digest_calc_hash'], 'callers': ['MHD_digest_auth_calc_userdigest', 'digest_auth_check_all_inner']}, 'calc_userhash': {'callees': ['digest_update', 'digest_update_with_colon', 'digest_calc_hash'], 'callers': ['MHD_digest_auth_calc_userhash', 'digest_auth_check_all_inner']}, 'digest_auth_check_all_inner': {'callees': ['MHD_get_master', 'MHD_get_rq_dauth_params_', 'MHD_DLOG', 'digest_init_one_time', 'get_base_digest_algo', '__builtin_unreachable', 'digest_get_size', 'is_param_equal', 'get_buffer_for_size', 'get_rq_extended_uname_copy_z', 'calc_userhash', 'MHD_bin_to_hex', 'is_param_equal_caseless', 'digest_reset', 'get_unquoted_param', 'MHD_strx_to_uint64_n_', 'get_nonce_timestamp', 'MHD_monotonic_msec_counter', 'check_nonce_nc', 'digest_update_str', 'digest_update_with_colon', 'get_unquoted_param_copy', 'digest_update', 'check_uri_match', 'digest_calc_hash', 'calc_userdigest', 'MHD_hex_to_bin', 'calculate_nonce'], 'callers': ['digest_auth_check_all']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct DigestAlgorithm (full definition)",
    "mhd_assert (macro or function definition)",
    "MHD_MD5_update (declaration/definition or macro expansion)",
    "MHD_SHA256_update (declaration/definition or macro expansion)",
    "MHD_SHA512_256_update (declaration/definition or macro expansion)",
    "MHD_DIGEST_BASE_ALGO_MD5 / MHD_DIGEST_BASE_ALGO_SHA256 / MHD_DIGEST_BASE_ALGO_SHA512_256 (enum/constant definitions)",
    "_DEBUG (preprocessor flag)"
  ],
  "explanation": "- struct DigestAlgorithm (full definition): Needed to determine whether modifications in the function (e.g. da->hashing = true) modify the object pointed to (allowed) and to check whether any member accesses or references could be implemented as macros affecting the parameter variable itself. Also to see if any member is a macro/inline accessor that could reassign the parameter.\n\n- mhd_assert (macro or function definition): mhd_assert is invoked on expressions containing the parameter 'da'. If it is a macro, its expansion could reference or assign to the parameter identifier (e.g. via unusual macro side effects). To prove the parameter itself is not modified we must inspect the actual mhd_assert definition.\n\n- MHD_MD5_update / MHD_SHA256_update / MHD_SHA512_256_update (declarations/definitions or macro expansions): These are invoked with expressions that include the parameters (notably the cast of data). If any of these are macros (rather than simple functions) they could expand in a way that reassigns the local parameter identifiers (data, da, length). To ensure the formal parameters are not modified by the call site (via macro expansion) we need their actual definitions. If they are functions, their code is irrelevant to modification of caller's parameter variables (because C passes parameters by value), but the declarations still show whether they are macros or inline functions.\n\n- MHD_DIGEST_BASE_ALGO_* (enum/constant definitions): The code uses these symbols in conditional comparisons against da->algo. If any of these are macros that expand in a surprising way that might modify the parameter identifier (extremely unlikely but possible), we must inspect them. At minimum they clarify the compiled branch selection; combined with _DEBUG they determine which assignments exist in the compiled code.\n\n- _DEBUG (preprocessor flag): The assignment da->hashing = true is guarded by #ifdef _DEBUG. To know whether that line is present in the analyzed build (and thus whether the object pointed to by da is modified in this translation unit) the build configuration (_DEBUG defined or not) is required.\n\nNote: The MISRA rule in question forbids modifying the parameter variables themselves (reassigning 'da', 'data', or 'length'); modifications to the object pointed to (e.g. da->hashing = true or updates to contexts) are permitted. The above symbols let the next analyst verify that no macros or unusual expansions reassign these parameter identifiers in this function."
}