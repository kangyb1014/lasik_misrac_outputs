{
  "user_message": "An agent A claimed that the following test_header code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of test_header.\n```c\nstatic enum MHD_Result\ntest_header (void *cls,\n             const char *key,\n             size_t key_size,\n             const char *value,\n             size_t value_size,\n             enum MHD_ValueKind kind)\n{\n  struct test_header_param *const param = (struct test_header_param *) cls;\n  struct MHD_Connection *connection = param->connection;\n  struct MHD_HTTP_Req_Header *pos;\n  size_t i;\n\n  param->num_headers++;\n  i = 0;\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if (kind != pos->kind)\n      continue;\n    if (++i == param->num_headers)\n    {\n      if (key_size != pos->header_size)\n        return MHD_NO;\n      if (value_size != pos->value_size)\n        return MHD_NO;\n      if (0 != key_size)\n      {\n        mhd_assert (NULL != key);\n        mhd_assert (NULL != pos->header);\n        if (0 != memcmp (key,\n                         pos->header,\n                         key_size))\n          return MHD_NO;\n      }\n      if (0 != value_size)\n      {\n        mhd_assert (NULL != value);\n        mhd_assert (NULL != pos->value);\n        if (0 != memcmp (value,\n                         pos->value,\n                         value_size))\n          return MHD_NO;\n      }\n      return MHD_YES;\n    }\n  }\n  return MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local loop pointer 'pos' is declared as a pointer to a non-const type although it is only used for read access (inspecting fields like pos->kind, pos->header_size, pos->value_size, pos->header, pos->value and following pos->next). According to MISRA C 2023 Rule 8.13 it should point to a const-qualified type when possible. Change the declaration to:\n\nconst struct MHD_HTTP_Req_Header *pos;\n\nThis preserves existing assignments from a non-const headers list and enforces immutability of the referenced objects within this function.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. MISRA C 2023 Rule 8.13 prefers that a pointer point to a const-qualified type when the pointed-to object is only accessed for reading. In the function, pos is only used to inspect fields (pos->kind, pos->header_size, pos->value_size, pos->header, pos->value and follow pos->next) and is not used to modify the pointed-to object. Declaring it as\n\nconst struct MHD_HTTP_Req_Header *pos;\n\nwould satisfy the rule; assigning connection->rq.headers_received (a non-const pointer) to this const-qualified pointer is allowed (non-const-to-const conversion). The subsequent use pos = pos->next is also valid because a value of type struct MHD_HTTP_Req_Header * can be converted to const struct MHD_HTTP_Req_Header *. Therefore the reported violation is correct and the suggested change is appropriate."
}