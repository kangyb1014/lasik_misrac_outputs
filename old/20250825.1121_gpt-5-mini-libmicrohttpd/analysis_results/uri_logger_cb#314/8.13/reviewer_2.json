{
  "user_message": "An agent A claimed that the following uri_logger_cb code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of uri_logger_cb.\n```c\nstatic void *\nuri_logger_cb (void *cls,\n               const char *uri)\n{\n  struct timeval *tv = malloc (sizeof (struct timeval));\n  (void) cls; /* Unused. Silent compiler warning. */\n  (void) uri; /* Unused. Silent compiler warning. */\n\n  if (NULL != tv)\n    gettimeofday (tv, NULL);\n  return tv;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code calls memcpy(buf, param->response_data + pos, size_to_copy) where param->response_data is (implicitly) a non-const pointer (e.g. declared as char *response_data) but is only read from. According to MISRA C 2023 Rule 8.13, pointers that are used only to access data should be qualified const. Here the source buffer should be declared const (e.g. const char *response_data) so that the pointer points to a const-qualified type. As written (with a non-const response_data), the rule is violated.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function uri_logger_cb:\nstatic ssize_t\ncallback (void *cls,\n          uint64_t pos,\n          char *buf,\n          size_t buf_size)\n{\n  size_t size_to_copy;\n  struct ResponseContentCallbackParam *const param =\n    (struct ResponseContentCallbackParam *) cls;\n\n  /* Note: 'pos' will never exceed size of transmitted data. */\n  /* You can use 'pos == param->response_size' in next check. */\n  if (pos >= param->response_size)\n  {   /* Whole response was sent. Signal end of response. */\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  }\n\n  /* Pseudo code.        *\n  if (data_not_ready)\n    {\n      // Callback will be called again on next loop.\n      // Consider suspending connection until data will be ready.\n      return 0;\n    }\n   * End of pseudo code. */\n  if (buf_size < (param->response_size - pos))\n    size_to_copy = buf_size;\n  else\n    size_to_copy = (size_t) (param->response_size - pos);\n\n  memcpy (buf, param->response_data + pos, size_to_copy);\n\n  /* Pseudo code.        *\n  if (error_preparing_response)\n    {\n      // Close connection with error.\n      return MHD_CONTENT_READER_END_WITH_ERROR;\n    }\n   * End of pseudo code. */\n  /* Return amount of data copied to buffer. */\n  /* The 'buf_size' is always smaller than SSIZE_MAX therefore it's safe\n   * to cast 'size_to_copy' to 'ssize_t'. */\n  /* assert (size_to_copy <= buf_size); */\n  return (ssize_t) size_to_copy;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct for the presented uri_logger_cb. In uri_logger_cb: - uri is already const char * (correct). - tv is a freshly allocated struct timeval* that is intended to be modified/returned, so it must not be const. - cls is a void * user/context pointer; it is unused here and cast/kept as void * to match the callback API. Changing cls to const void * would only be possible if the callback prototype allowed it; for API-required signatures you must keep the declared type. Therefore uri_logger_cb does not violate MISRA C 2023 Rule 8.13.\n\nNote: The scenario agent A described (memcpy from param->response_data where response_data is declared char * but only read) is a different location. In that other code, if response_data is never modified through that pointer, it would be appropriate to declare it as const char * to satisfy Rule 8.13. But that is a separate issue and not the uri_logger_cb violation claimed by agent A."
}