{
  "user_message": "An agent A claimed that the following pipe_reader code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of pipe_reader.\n```c\nstatic ssize_t\npipe_reader (void *cls,\n             uint64_t pos,\n             char *buf,\n             size_t max)\n{\n  struct MHD_Response *response = cls;\n  ssize_t n;\n\n  (void) pos;\n\n#ifndef _WIN32\n  if (SSIZE_MAX < max)\n    max = SSIZE_MAX;\n  n = read (response->fd,\n            buf,\n            (MHD_SCKT_SEND_SIZE_) max);\n#else  /* _WIN32 */\n  if (UINT_MAX < max)\n    max = INT_MAX;\n  n = read (response->fd,\n            buf,\n            (unsigned int) max);\n#endif /* _WIN32 */\n\n  if (0 == n)\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  if (n < 0)\n    return MHD_CONTENT_READER_END_WITH_ERROR;\n  return n;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'void *cls' is not const-qualified but is only read in pipe_reader (it is assigned to 'struct MHD_Response *response' and only used to access response->fd). Per MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible \u2014 e.g. declare the parameter as 'const void *cls' (and/or use 'const struct MHD_Response *response') since the function does not modify the pointed-to object.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function pipe_reader:\n#define MHD_CONTENT_READER_END_WITH_ERROR ((ssize_t)-2)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is essentially correct: the function does not modify the object pointed to by cls (it only reads response->fd), so per MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type when possible. In other words, declaring the parameter as const void *cls (and using const struct MHD_Response *response) would satisfy the rule.\n\nCaveat: in many real projects pipe_reader is a callback with a fixed prototype (e.g. libmicrohttpd content reader callback) that requires void *cls. If the function must match an external API that mandates a non-const void * parameter, the code cannot change the parameter type \u2014 in that case a documented MISRA deviation or casting the incoming cls to a const-qualified pointer inside the function (e.g. const struct MHD_Response *response = (const struct MHD_Response *)cls;) is the appropriate remedy.\n\nRecommendation: if you control the prototype, change to const void *cls and const struct MHD_Response *response; otherwise cast cls to a const-qualified response and document the deviation from the rule."
}