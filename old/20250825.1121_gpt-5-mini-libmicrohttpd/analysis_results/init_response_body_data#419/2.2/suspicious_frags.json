{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of init_response_body_data:\n```c\nstatic int\ninit_response_body_data (void)\n{\n  if (0 != body_dyn_size)\n  {\n    body_dyn = (char *) malloc (body_dyn_size);\n    if (NULL == body_dyn)\n    {\n      fprintf (stderr, \"Failed to allocate memory.\\n\");\n      return 0;\n    }\n    if (tool_params.medium)\n    {\n      /* Fill the body with HTML-like content */\n      size_t pos;\n      size_t filler_pos;\n      static const char body_header[] =\n        \"<html>\\n\"\n        \"<head>\\n<title>Sample page title</title>\\n<head>\\n\"\n        \"<body>\\n\";\n      static const char body_filler[] =\n        \"The quick brown fox jumps over the lazy dog.<br>\\n\";\n      static const char body_footer[] =\n        \"</body>\\n\"\n        \"</html>\\n\";\n      pos = 0;\n      memcpy (body_dyn + pos, body_header, MHD_STATICSTR_LEN_ (body_header));\n      pos += MHD_STATICSTR_LEN_ (body_header);\n      for (filler_pos = 0;\n           filler_pos < (body_dyn_size - (MHD_STATICSTR_LEN_ (body_header)\n                                          + MHD_STATICSTR_LEN_ (body_footer)));\n           ++filler_pos)\n      {\n        body_dyn[pos + filler_pos] =\n          body_filler[filler_pos % MHD_STATICSTR_LEN_ (body_filler)];\n      }\n      pos += filler_pos;\n      memcpy (body_dyn + pos, body_footer, MHD_STATICSTR_LEN_ (body_footer));\n    }\n    else\n    {\n      /* Fill the body with binary-like content */\n      size_t pos;\n      for (pos = 0; pos < body_dyn_size; ++pos)\n      {\n        body_dyn[pos] = (char) (unsigned char) (255U - pos % 256U);\n      }\n    }\n  }\n  return ! 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function init_response_body_data:\nstatic size_t body_dyn_size\n...\nstatic char *body_dyn = NULL\n...\nstatic struct PerfRepl_parameters tool_params = {\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n}\n...\n#define MHD_STATICSTR_LEN_(macro) (sizeof(macro)/sizeof(char)-1)\n...\nstatic int\ninit_data (void)\n{\n  unsigned int i;\n\n  if (tool_params.medium)\n    body_dyn_size = 8U * 1024U;\n  else if (tool_params.large)\n    body_dyn_size = 1024U * 1024U;\n  else\n    body_dyn_size = 0;\n\n  if (! init_response_body_data ())\n    return 25;\n\n  if (tool_params.unique)\n    return 0; /* Responses are generated on-fly */\n\n  if (tool_params.single)\n  {\n    resp_single = create_response_object ();\n    if (NULL == resp_single)\n    {\n      fprintf (stderr, \"Failed to create response.\\n\");\n      return 25;\n    }\n    return 0;\n  }\n\n  /* Use more responses to minimise waiting in threads while the response\n     used by other thread. */\n  if (! tool_params.thread_per_conn)\n    num_resps = 16 * get_num_threads ();\n  else\n    num_resps = 16 * get_cpu_core_count ();\n\n  resps = (struct MHD_Response **)\n          malloc ((sizeof(struct MHD_Response *)) * num_resps);\n  if (NULL == resps)\n  {\n    if (NULL != body_dyn)\n    {\n      free (body_dyn);\n      body_dyn = NULL;\n    }\n    fprintf (stderr, \"Failed to allocate memory.\\n\");\n    return 25;\n  }\n  for (i = 0; i < num_resps; ++i)\n  {\n    resps[i] = create_response_object ();\n    if (NULL == resps[i])\n    {\n      fprintf (stderr, \"Failed to create responses.\\n\");\n      break;\n    }\n  }\n  if (i == num_resps)\n    return 0; /* Success */\n\n  /* Cleanup */\n  while (--i < num_resps)\n    MHD_destroy_response (resps[i]);\n  free (resps);\n  resps = NULL;\n  num_resps = 0;\n  if (NULL != body_dyn)\n    free (body_dyn);\n  body_dyn = NULL;\n  return 32;\n}\n...\nstatic struct MHD_Response *\ncreate_response_object (void)\n{\n#if MHD_VERSION >= 0x00097701\n  if (NULL != body_dyn)\n    return MHD_create_response_from_buffer_static (body_dyn_size,\n                                                   body_dyn);\n  else if (tool_params.empty)\n    return MHD_create_response_empty (MHD_RF_NONE);\n\n  return MHD_create_response_from_buffer_static (MHD_STATICSTR_LEN_ (tiny_body),\n                                                 tiny_body);\n\n#else  /* MHD_VERSION < 0x00097701 */\n  if (NULL != body_dyn)\n    return MHD_create_response_from_buffer (body_dyn_size,\n                                            (void *) body_dyn,\n                                            MHD_RESPMEM_PERSISTENT);\n  else if (tool_params.empty)\n    return MHD_create_response_from_buffer (0,\n                                            (void *) tiny_body,\n                                            MHD_RESPMEM_PERSISTENT);\n\n  return MHD_create_response_from_buffer (MHD_STATICSTR_LEN_ (tiny_body),\n                                          (void *) tiny_body,\n                                          MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "  if (tool_params.medium)\n    body_dyn_size = 8U * 1024U;\n  else if (tool_params.large)\n    body_dyn_size = 1024U * 1024U;\n  else\n    body_dyn_size = 0;",
    "body_dyn = (char *) malloc (body_dyn_size);\n    if (NULL == body_dyn)\n    {\n      fprintf (stderr, \"Failed to allocate memory.\\n\");\n      return 0;\n    }",
    "  if (0 != body_dyn_size)\n  {\n    body_dyn = (char *) malloc (body_dyn_size);\n    if (NULL == body_dyn)\n    {\n      fprintf (stderr, \"Failed to allocate memory.\\n\");\n      return 0;\n    }\n    if (tool_params.medium)\n    {\n      /* Fill the body with HTML-like content */\n      size_t pos;\n      size_t filler_pos;\n      static const char body_header[] =\n        \"<html>\\n\"\n        \"<head>\\n<title>Sample page title</title>\\n<head>\\n\"\n        \"<body>\\n\";\n      static const char body_filler[] =\n        \"The quick brown fox jumps over the lazy dog.<br>\\n\";\n      static const char body_footer[] =\n        \"</body>\\n\"\n        \"</html>\\n\";\n      pos = 0;\n      memcpy (body_dyn + pos, body_header, MHD_STATICSTR_LEN_ (body_header));\n      pos += MHD_STATICSTR_LEN_ (body_header);\n      for (filler_pos = 0;\n           filler_pos < (body_dyn_size - (MHD_STATICSTR_LEN_ (body_header)\n                                          + MHD_STATICSTR_LEN_ (body_footer)));\n           ++filler_pos)\n      {\n        body_dyn[pos + filler_pos] =\n          body_filler[filler_pos % MHD_STATICSTR_LEN_ (body_filler)];\n      }\n      pos += filler_pos;\n      memcpy (body_dyn + pos, body_footer, MHD_STATICSTR_LEN_ (body_footer));\n    }\n    else\n    {\n      /* Fill the body with binary-like content */\n      size_t pos;\n      for (pos = 0; pos < body_dyn_size; ++pos)\n      {\n        body_dyn[pos] = (char) (unsigned char) (255U - pos % 256U);\n      }\n    }\n  }",
    "  if (NULL == resps)\n  {\n    if (NULL != body_dyn)\n    {\n      free (body_dyn);\n      body_dyn = NULL;\n    }\n    fprintf (stderr, \"Failed to allocate memory.\\n\");\n    return 25;\n  }",
    "for (filler_pos = 0;\n           filler_pos < (body_dyn_size - (MHD_STATICSTR_LEN_ (body_header)\n                                          + MHD_STATICSTR_LEN_ (body_footer)));\n           ++filler_pos)\n      {\n        body_dyn[pos + filler_pos] =\n          body_filler[filler_pos % MHD_STATICSTR_LEN_ (body_filler)];\n      }",
    "static struct MHD_Response *\ncreate_response_object (void)\n{\n#if MHD_VERSION >= 0x00097701\n  if (NULL != body_dyn)\n    return MHD_create_response_from_buffer_static (body_dyn_size,\n                                                   body_dyn);\n  else if (tool_params.empty)\n    return MHD_create_response_empty (MHD_RF_NONE);\n\n  return MHD_create_response_from_buffer_static (MHD_STATICSTR_LEN_ (tiny_body),\n                                                 tiny_body);\n\n#else  /* MHD_VERSION < 0x00097701 */\n  if (NULL != body_dyn)\n    return MHD_create_response_from_buffer (body_dyn_size,\n                                            (void *) body_dyn,\n                                            MHD_RESPMEM_PERSISTENT);\n  else if (tool_params.empty)\n    return MHD_create_response_from_buffer (0,\n                                            (void *) tiny_body,\n                                            MHD_RESPMEM_PERSISTENT);\n\n  return MHD_create_response_from_buffer (MHD_STATICSTR_LEN_ (tiny_body),\n                                          (void *) tiny_body,\n                                          MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n}",
    "for (pos = 0; pos < body_dyn_size; ++pos)\n      {\n        body_dyn[pos] = (char) (unsigned char) (255U - pos % 256U);\n      }",
    "  return ! 0;"
  ],
  "explanation": "I have reported code fragments that are candidates for further investigation with respect to dead code: the outer conditional that gates allocation and all filling logic, both the HTML (medium) and binary (non-medium) fill paths, the allocation + failure handling, the size selection that determines whether the allocation path is ever taken, the cleanup that depends on that allocation, and the response-creation branches that choose between using the dynamically-created body or fallbacks. These fragments are reported because, depending on project configuration (static initialization of tool_params, build-time defines such as MHD_VERSION, or runtime options never being set), they may never be executed in the shipped project or may contain operations that have no effect on program behaviour.\n\nWhy other code fragments were NOT selected for investigation:\n- Static initializers for the body_header/body_filler/body_footer arrays are initialization, not assignments; per MISRA note these are not candidates for dead code and are intentionally present as data used when the medium branch runs. \n- Simple operations such as pos = 0, pos += ..., memcpy calls and the MHD_STATICSTR_LEN_ macro usage are standard data-manipulation code invoked only when the allocation/fill path is active; they are not independently suspicious beyond the larger allocation/branch concerns already reported.\n- The small checks and return statements that propagate allocation failure or function success (other than the reported return ! 0;) are normal error-handling control flow and are not themselves candidates for dead code unless the enclosing branch is proven never to execute (the enclosing branch is already reported).\n- Preprocessor-conditioned variants (e.g. MHD_VERSION cases) are compile-time selected; code excluded by the preprocessor is not runtime dead code in the compiled image. I reported the create_response_object function because its runtime behavior depends on whether the dynamically allocated body exists and on tool_params.empty; the preprocessor alternatives themselves are expected and not flagged further.\n\nIf you want, I can now (a) mark which of the reported fragments are dead under the current default configuration (tool_params all-zero) and which require build- or runtime analysis to confirm, or (b) produce minimal test cases / static checks to determine reachability of each reported fragment."
}