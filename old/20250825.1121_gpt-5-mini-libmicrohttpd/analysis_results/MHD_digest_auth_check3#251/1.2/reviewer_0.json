{
  "user_message": "An agent A claimed that the following MHD_digest_auth_check3 code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_digest_auth_check3.\n```c\n_MHD_EXTERN enum MHD_DigestAuthResult\nMHD_digest_auth_check3 (struct MHD_Connection *connection,\n                        const char *realm,\n                        const char *username,\n                        const char *password,\n                        unsigned int nonce_timeout,\n                        uint32_t max_nc,\n                        enum MHD_DigestAuthMultiQOP mqop,\n                        enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  mhd_assert (NULL != password);\n\n  return digest_auth_check_all (connection,\n                                realm,\n                                username,\n                                password,\n                                NULL,\n                                nonce_timeout,\n                                max_nc,\n                                mqop,\n                                malgo3);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function declaration uses the macro _MHD_EXTERN which expands to __attribute__((visibility(\"default\"))) extern. The GNU/Clang __attribute__((...)) syntax is a compiler-specific language extension, so the code is using a documented compiler extension in the function declaration.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_digest_auth_check3:\n#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern\n...\n#define mhd_assert(ignore) ((void)0)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. The identifier _MHD_EXTERN expands to the GCC/Clang attribute syntax __attribute__((visibility(\"default\"))) which is a compiler-specific extension. MISRA C 2023 Rule 1.2 prohibits use of language/compiler extensions documented as such. Hiding the attribute behind a macro does not avoid the use of the extension \u2014 the expansion still uses a non\u2011standard attribute. Therefore Agent A\u2019s report is correct."
}