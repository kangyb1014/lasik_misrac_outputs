{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_check3:\n```c\n_MHD_EXTERN enum MHD_DigestAuthResult\nMHD_digest_auth_check3 (struct MHD_Connection *connection,\n                        const char *realm,\n                        const char *username,\n                        const char *password,\n                        unsigned int nonce_timeout,\n                        uint32_t max_nc,\n                        enum MHD_DigestAuthMultiQOP mqop,\n                        enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  mhd_assert (NULL != password);\n\n  return digest_auth_check_all (connection,\n                                realm,\n                                username,\n                                password,\n                                NULL,\n                                nonce_timeout,\n                                max_nc,\n                                mqop,\n                                malgo3);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_digest_auth_check3:\n_MHD_EXTERN int\nMHD_digest_auth_check2 (struct MHD_Connection *connection,\n                        const char *realm,\n                        const char *username,\n                        const char *password,\n                        unsigned int nonce_timeout,\n                        enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthResult res;\n  enum MHD_DigestAuthMultiAlgo3 malgo3;\n\n  if (MHD_DIGEST_ALG_AUTO == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n  else if (MHD_DIGEST_ALG_MD5 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else\n    MHD_PANIC (_ (\"Wrong 'algo' value, API violation\"));\n\n  res = MHD_digest_auth_check3 (connection,\n                                realm,\n                                username,\n                                password,\n                                nonce_timeout,\n                                0, MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                malgo3);\n  if (MHD_DAUTH_OK == res)\n    return MHD_YES;\n  else if ((MHD_DAUTH_NONCE_STALE == res) || (MHD_DAUTH_NONCE_WRONG == res) ||\n           (MHD_DAUTH_NONCE_OTHER_COND == res) )\n    return MHD_INVALID_NONCE;\n  return MHD_NO;\n\n}\n...\n_MHD_EXTERN int\nMHD_digest_auth_check (struct MHD_Connection *connection,\n                       const char *realm,\n                       const char *username,\n                       const char *password,\n                       unsigned int nonce_timeout)\n{\n  return MHD_digest_auth_check2 (connection,\n                                 realm,\n                                 username,\n                                 password,\n                                 nonce_timeout,\n                                 MHD_DIGEST_ALG_MD5);\n}\n...\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n  (void) req_cls;           /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  return MHD_queue_response (connection, MHD_HTTP_OK, response);\n}\n...\nstatic enum MHD_DigestAuthResult\ndigest_auth_check_all (struct MHD_Connection *connection,\n                       const char *realm,\n                       const char *username,\n                       const char *password,\n                       const uint8_t *userdigest,\n                       unsigned int nonce_timeout,\n                       uint32_t max_nc,\n                       enum MHD_DigestAuthMultiQOP mqop,\n                       enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  enum MHD_DigestAuthResult res;\n  char *buf;\n  struct DigestAlgorithm da;\n\n  buf = NULL;\n  digest_setup_zero (&da);\n  if (0 == nonce_timeout)\n    nonce_timeout = connection->daemon->dauth_def_nonce_timeout;\n  if (0 == max_nc)\n    max_nc = connection->daemon->dauth_def_max_nc;\n  res = digest_auth_check_all_inner (connection, realm, username, password,\n                                     userdigest,\n                                     nonce_timeout,\n                                     max_nc, mqop, malgo3,\n                                     &buf, &da);\n  digest_deinit (&da);\n  if (NULL != buf)\n    free (buf);\n\n  return res;\n}\n...\n_MHD_EXTERN enum MHD_DigestAuthResult\nMHD_digest_auth_check_digest3 (struct MHD_Connection *connection,\n                               const char *realm,\n                               const char *username,\n                               const void *userdigest,\n                               size_t userdigest_size,\n                               unsigned int nonce_timeout,\n                               uint32_t max_nc,\n                               enum MHD_DigestAuthMultiQOP mqop,\n                               enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  if (1 != (((0 != (malgo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0)\n            + ((0 != (malgo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0)\n            + ((0 != (malgo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0)))\n    MHD_PANIC (_ (\"Wrong 'malgo3' value, only one base hashing algorithm \" \\\n                  \"(MD5, SHA-256 or SHA-512/256) must be specified, \" \\\n                  \"API violation\"));\n\n#ifndef MHD_MD5_SUPPORT\n  if (0 != (((unsigned int) malgo3) & MHD_DIGEST_BASE_ALGO_MD5))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The MD5 algorithm is not supported by this MHD build.\\n\"));\n#endif /* HAVE_MESSAGES */\n    return MHD_DAUTH_WRONG_ALGO;\n  }\n#endif /* ! MHD_MD5_SUPPORT */\n#ifndef MHD_SHA256_SUPPORT\n  if (0 != (((unsigned int) malgo3) & MHD_DIGEST_BASE_ALGO_SHA256))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The SHA-256 algorithm is not supported by \"\n                 \"this MHD build.\\n\"));\n#endif /* HAVE_MESSAGES */\n    return MHD_DAUTH_WRONG_ALGO;\n  }\n#endif /* ! MHD_SHA256_SUPPORT */\n#ifndef MHD_SHA512_256_SUPPORT\n  if (0 != (((unsigned int) malgo3) & MHD_DIGEST_BASE_ALGO_SHA512_256))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The SHA-512/256 algorithm is not supported by \"\n                 \"this MHD build.\\n\"));\n#endif /* HAVE_MESSAGES */\n    return MHD_DAUTH_WRONG_ALGO;\n  }\n#endif /* ! MHD_SHA512_256_SUPPORT */\n\n  if (digest_get_hash_size ((enum MHD_DigestAuthAlgo3) malgo3) !=\n      userdigest_size)\n    MHD_PANIC (_ (\"Wrong 'userdigest_size' value, does not match 'malgo3', \"\n                  \"API violation\"));\n\n  return digest_auth_check_all (connection,\n                                realm,\n                                username,\n                                NULL,\n                                (const uint8_t *) userdigest,\n                                nonce_timeout,\n                                max_nc,\n                                mqop,\n                                malgo3);\n}\n...\n#define mhd_assert(ignore) ((void)0)\n...\n#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmhd_assert (NULL != password);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The mhd_assert macro is defined as '#define mhd_assert(ignore) ((void)0)'. Therefore the statement 'mhd_assert(NULL != password);' expands to a no-op ((void)0) that is executed but has no effect; removing that statement would not change program behaviour. This is an instance of dead code and thus violates MISRA C 2023 Rule 2.2."
}