{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_buffer_for_size:\n```c\nstatic char *\nget_buffer_for_size (char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                     char **ptmp2,\n                     size_t *ptmp2_size,\n                     size_t required_size)\n{\n  mhd_assert ((0 == *ptmp2_size) || (NULL != *ptmp2));\n  mhd_assert ((NULL != *ptmp2) || (0 == *ptmp2_size));\n  mhd_assert ((0 == *ptmp2_size) || \\\n              (_MHD_STATIC_UNQ_BUFFER_SIZE < *ptmp2_size));\n\n  if (required_size <= _MHD_STATIC_UNQ_BUFFER_SIZE)\n    return tmp1;\n\n  if (required_size <= *ptmp2_size)\n    return *ptmp2;\n\n  if (required_size > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE)\n    return NULL;\n  if (NULL != *ptmp2)\n    free (*ptmp2);\n  *ptmp2 = (char *) malloc (required_size);\n  if (NULL == *ptmp2)\n    *ptmp2_size = 0;\n  else\n    *ptmp2_size = required_size;\n  return *ptmp2;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function get_buffer_for_size:\n#define _MHD_STATIC_UNQ_BUFFER_SIZE 128\n...\n#define _MHD_AUTH_DIGEST_MAX_PARAM_SIZE (65535)\n...\n#define mhd_assert(ignore) ((void)0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler-specific language extensions are used in the provided code. Specific checks performed: \n- No use of compiler-specific keywords or attributes (e.g. __attribute__, __extension__, __asm__, __builtin_*, typeof, __declspec, __stdcall, etc.).\n- The function parameter declaration char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE] is standard C syntax for an array parameter and, in a function prototype, is equivalent to a pointer parameter \u2014 not a compiler extension.\n- The backslash used to continue the mhd_assert line is a standard C preprocessor line-continuation, not an extension.\n- The macro definitions (_MHD_STATIC_UNQ_BUFFER_SIZE, _MHD_AUTH_DIGEST_MAX_PARAM_SIZE, mhd_assert) are plain preprocessor macros; mhd_assert expands to ((void)0) and introduces no extension.\n- Use of malloc/free and the cast (char *) malloc(...) is standard C (the cast is not a compiler extension).\n- No inline assembly, nested functions, statement expressions, variable-length arrays dependent on runtime values, or other known compiler-specific constructs are present.\n\nTherefore there are no fragments that need further investigation under MISRA C 2023 Rule 1.2 (language extensions should not be used)."
}