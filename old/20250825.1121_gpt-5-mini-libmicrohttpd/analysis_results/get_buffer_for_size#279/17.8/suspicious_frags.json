{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of get_buffer_for_size:\n```c\nstatic char *\nget_buffer_for_size (char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                     char **ptmp2,\n                     size_t *ptmp2_size,\n                     size_t required_size)\n{\n  mhd_assert ((0 == *ptmp2_size) || (NULL != *ptmp2));\n  mhd_assert ((NULL != *ptmp2) || (0 == *ptmp2_size));\n  mhd_assert ((0 == *ptmp2_size) || \\\n              (_MHD_STATIC_UNQ_BUFFER_SIZE < *ptmp2_size));\n\n  if (required_size <= _MHD_STATIC_UNQ_BUFFER_SIZE)\n    return tmp1;\n\n  if (required_size <= *ptmp2_size)\n    return *ptmp2;\n\n  if (required_size > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE)\n    return NULL;\n  if (NULL != *ptmp2)\n    free (*ptmp2);\n  *ptmp2 = (char *) malloc (required_size);\n  if (NULL == *ptmp2)\n    *ptmp2_size = 0;\n  else\n    *ptmp2_size = required_size;\n  return *ptmp2;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function get_buffer_for_size:\n#define mhd_assert(ignore) ((void)0)\n...\n#define _MHD_STATIC_UNQ_BUFFER_SIZE 128\n...\n#define _MHD_AUTH_DIGEST_MAX_PARAM_SIZE (65535)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (NULL == *ptmp2)\n    *ptmp2_size = 0;\n  else\n    *ptmp2_size = required_size;",
    "if (NULL != *ptmp2)\n    free (*ptmp2);",
    "*ptmp2 = (char *) malloc (required_size);"
  ],
  "explanation": "Only the indirected objects addressed by pointer parameters are modified in this function. The MISRA rule of interest (17.8) prohibits modifying the parameter itself (the pointer variable), but permits modifying the object referred to by a pointer parameter. In the body there are no assignments to the parameter variables themselves (ptmp2, ptmp2_size, tmp1 or required_size) and no reassignments of the pointer parameters. The assertions and comparisons only read the parameters. Therefore the only fragments that warrant investigation for compliance with Rule 17.8 are the lines that modify the objects pointed to via the pointer parameters: freeing and assigning *ptmp2 and assigning *ptmp2_size. All other lines (assertions, comparisons, returns, and use of tmp1) do not modify function parameters and thus need not be investigated for this rule."
}