{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of get_buffer_for_size:\n```c\nstatic char *\nget_buffer_for_size (char tmp1[_MHD_STATIC_UNQ_BUFFER_SIZE],\n                     char **ptmp2,\n                     size_t *ptmp2_size,\n                     size_t required_size)\n{\n  mhd_assert ((0 == *ptmp2_size) || (NULL != *ptmp2));\n  mhd_assert ((NULL != *ptmp2) || (0 == *ptmp2_size));\n  mhd_assert ((0 == *ptmp2_size) || \\\n              (_MHD_STATIC_UNQ_BUFFER_SIZE < *ptmp2_size));\n\n  if (required_size <= _MHD_STATIC_UNQ_BUFFER_SIZE)\n    return tmp1;\n\n  if (required_size <= *ptmp2_size)\n    return *ptmp2;\n\n  if (required_size > _MHD_AUTH_DIGEST_MAX_PARAM_SIZE)\n    return NULL;\n  if (NULL != *ptmp2)\n    free (*ptmp2);\n  *ptmp2 = (char *) malloc (required_size);\n  if (NULL == *ptmp2)\n    *ptmp2_size = 0;\n  else\n    *ptmp2_size = required_size;\n  return *ptmp2;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function get_buffer_for_size:\n#define mhd_assert(ignore) ((void)0)\n...\n#define _MHD_STATIC_UNQ_BUFFER_SIZE 128\n...\n#define _MHD_AUTH_DIGEST_MAX_PARAM_SIZE (65535)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (NULL != *ptmp2)\n    free (*ptmp2);\n```\nFocus on the above code fragment and judge whether it violates the rule 17.8 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: ptmp2 is a pointer parameter (char **). The code dereferences it and frees the memory pointed to by *ptmp2 (and later assigns *ptmp2 = malloc(...)). That modifies the object referred to by the pointer parameter, which MISRA Rule 17.8 permits; the pointer parameter ptmp2 itself is not modified. Therefore this fragment does not violate Rule 17.8."
}