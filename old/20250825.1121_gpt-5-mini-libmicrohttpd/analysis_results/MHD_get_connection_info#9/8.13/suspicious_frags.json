{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_get_connection_info:\n```c\n_MHD_EXTERN const union MHD_ConnectionInfo *\nMHD_get_connection_info (struct MHD_Connection *connection,\n                         enum MHD_ConnectionInfoType info_type,\n                         ...)\n{\n  switch (info_type)\n  {\n#ifdef HTTPS_SUPPORT\n  case MHD_CONNECTION_INFO_CIPHER_ALGO:\n    if (NULL == connection->tls_session)\n      return NULL;\n    if (1)\n    { /* Workaround to mute compiler warning */\n      gnutls_cipher_algorithm_t res;\n      res = gnutls_cipher_get (connection->tls_session);\n      connection->connection_info_dummy.cipher_algorithm = (int) res;\n    }\n    return &connection->connection_info_dummy;\n  case MHD_CONNECTION_INFO_PROTOCOL:\n    if (NULL == connection->tls_session)\n      return NULL;\n    if (1)\n    { /* Workaround to mute compiler warning */\n      gnutls_protocol_t res;\n      res = gnutls_protocol_get_version (connection->tls_session);\n      connection->connection_info_dummy.protocol = (int) res;\n    }\n    return &connection->connection_info_dummy;\n  case MHD_CONNECTION_INFO_GNUTLS_SESSION:\n    if (NULL == connection->tls_session)\n      return NULL;\n    connection->connection_info_dummy.tls_session = connection->tls_session;\n    return &connection->connection_info_dummy;\n#else  /* ! HTTPS_SUPPORT */\n  case MHD_CONNECTION_INFO_CIPHER_ALGO:\n  case MHD_CONNECTION_INFO_PROTOCOL:\n  case MHD_CONNECTION_INFO_GNUTLS_SESSION:\n#endif /* ! HTTPS_SUPPORT */\n  case MHD_CONNECTION_INFO_GNUTLS_CLIENT_CERT:\n    return NULL; /* Not implemented */\n  case MHD_CONNECTION_INFO_CLIENT_ADDRESS:\n    if (0 < connection->addr_len)\n    {\n      mhd_assert (sizeof (connection->addr) == \\\n                  sizeof (connection->connection_info_dummy.client_addr));\n      memcpy (&connection->connection_info_dummy.client_addr,\n              &connection->addr,\n              sizeof(connection->addr));\n      return &connection->connection_info_dummy;\n    }\n    return NULL;\n  case MHD_CONNECTION_INFO_DAEMON:\n    connection->connection_info_dummy.daemon =\n      MHD_get_master (connection->daemon);\n    return &connection->connection_info_dummy;\n  case MHD_CONNECTION_INFO_CONNECTION_FD:\n    connection->connection_info_dummy.connect_fd = connection->socket_fd;\n    return &connection->connection_info_dummy;\n  case MHD_CONNECTION_INFO_SOCKET_CONTEXT:\n    connection->connection_info_dummy.socket_context =\n      connection->socket_context;\n    return &connection->connection_info_dummy;\n  case MHD_CONNECTION_INFO_CONNECTION_SUSPENDED:\n    connection->connection_info_dummy.suspended =\n      connection->suspended ? MHD_YES : MHD_NO;\n    return &connection->connection_info_dummy;\n  case MHD_CONNECTION_INFO_CONNECTION_TIMEOUT:\n#if SIZEOF_UNSIGNED_INT <= (SIZEOF_UINT64_T - 2)\n    if (UINT_MAX < connection->connection_timeout_ms / 1000)\n      connection->connection_info_dummy.connection_timeout = UINT_MAX;\n    else\n#endif /* SIZEOF_UNSIGNED_INT <=(SIZEOF_UINT64_T - 2) */\n    connection->connection_info_dummy.connection_timeout =\n      (unsigned int) (connection->connection_timeout_ms / 1000);\n    return &connection->connection_info_dummy;\n  case MHD_CONNECTION_INFO_REQUEST_HEADER_SIZE:\n    if ( (MHD_CONNECTION_HEADERS_RECEIVED > connection->state) ||\n         (MHD_CONNECTION_CLOSED == connection->state) )\n      return NULL;   /* invalid, too early! */\n    connection->connection_info_dummy.header_size = connection->rq.header_size;\n    return &connection->connection_info_dummy;\n  case MHD_CONNECTION_INFO_HTTP_STATUS:\n    if (NULL == connection->rp.response)\n      return NULL;\n    connection->connection_info_dummy.http_status = connection->rp.responseCode;\n    return &connection->connection_info_dummy;\n  default:\n    return NULL;\n  }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_get_connection_info:\nenum MHD_AuthType type\n...\nsize_t used\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "case MHD_CONNECTION_INFO_GNUTLS_SESSION:\n    if (NULL == connection->tls_session)\n      return NULL;\n    connection->connection_info_dummy.tls_session = connection->tls_session;\n    return &connection->connection_info_dummy;",
    "case MHD_CONNECTION_INFO_SOCKET_CONTEXT:\n    connection->connection_info_dummy.socket_context =\n      connection->socket_context;\n    return &connection->connection_info_dummy;",
    "case MHD_CONNECTION_INFO_DAEMON:\n    connection->connection_info_dummy.daemon =\n      MHD_get_master (connection->daemon);\n    return &connection->connection_info_dummy;"
  ],
  "explanation": "The listed fragments assign pointer-valued members from connection into connection->connection_info_dummy which is then returned via a pointer to the union; these are the places where pointer types may need const-qualification and thus should be investigated for Rule 8.13. Other fragments were not selected because they do not involve assigning or exposing pointer-typed values that could/should be const-qualified: they either assign scalar/integer fields (cipher_algorithm, protocol, connect_fd, suspended, connection_timeout, header_size, http_status), perform a memcpy of a structure (client_addr) rather than expose a pointer type, return NULL for unimplemented items, or are simple control-flow checks. Those do not indicate pointers that should be made const under Rule 8.13 and so do not require investigation for this rule."
}