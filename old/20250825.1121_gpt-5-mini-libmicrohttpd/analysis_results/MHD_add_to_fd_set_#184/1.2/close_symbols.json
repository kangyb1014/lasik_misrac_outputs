{
  "user_message": "Target function code is:\n```c\nint\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) )\n    return 0;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (! MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                         set,\n                                         fd_setsize))\n    return 0;\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) )\n    *max_fd = fd;\n  return ! 0;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_add_to_fd_set_': {'callees': [], 'callers': ['internal_get_fdset2', 'MHD_get_fdset2', 'thread_main_handle_connection', 'MHD_select']}, 'internal_get_fdset2': {'callees': ['MHD_add_to_fd_set_'], 'callers': ['MHD_get_fdset2', 'MHD_select']}, 'MHD_get_fdset2': {'callees': ['MHD_DLOG', 'MHD_add_to_fd_set_', 'internal_get_fdset2'], 'callers': ['MHD_get_fdset', 'main']}, 'thread_main_handle_connection': {'callees': ['MHD_add_to_fd_set_', 'MHD_DLOG', 'MHD_update_last_activity_', 'MHD_connection_handle_idle', 'connection_get_wait', 'call_handlers', 'thread_main_connection_upgrade', 'MHD_resume_connection', 'MHD_connection_close_', 'MHD_destroy_response'], 'callers': []}, 'MHD_select': {'callees': ['resume_suspended_connections', 'internal_get_fdset2', 'MHD_DLOG', 'MHD_add_to_fd_set_', 'MHD_get_timeout64', 'internal_run_from_select'], 'callers': ['MHD_run_wait', 'MHD_polling_thread']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_socket",
    "MHD_INVALID_SOCKET",
    "HAS_FD_SETSIZE_OVERRIDABLE",
    "FD_SETSIZE",
    "fd_set",
    "MHD_SCKT_FD_FITS_FDSET_SETSIZE_",
    "MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_",
    "FD_SET"
  ],
  "explanation": "To determine whether MHD_add_to_fd_set_ uses any compiler language extensions you must inspect the definitions/types/macros it relies on. For each: \n- MHD_socket: the typedef/underlying type may be a platform alias (e.g. SOCKET) or use extension syntax; needed to check for non\u2011standard type declarations or casts.\n- MHD_INVALID_SOCKET: its definition may use non\u2011standard constructs (e.g. compound literals, casts, GCC statement expressions, __extension__, asm) or unusual values that affect comparisons in the function.\n- HAS_FD_SETSIZE_OVERRIDABLE: this config macro controls alternative code paths; need its definition/presence to know which code is compiled and whether that code uses extensions.\n- FD_SETSIZE: system macro value or expression could hide extensions or non\u2011standard headers; also used when fd_setsize is overridden.\n- fd_set: the system type (from sys/select.h / winsock2.h) may be defined via platform headers using macros or extensions; inspect to ensure no extensions are used when manipulating it.\n- MHD_SCKT_FD_FITS_FDSET_SETSIZE_: macro/function called to test fit \u2014 its implementation must be inspected for GCC/Clang extensions (statement expressions, typeof, __builtin_*, inline assembly, attributes, nested functions, etc.).\n- MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_: macro/function that actually adds the fd to the set \u2014 its definition must be checked for use of non\u2011standard macros or compiler extensions (e.g. FD_SET wrapper that uses statement expressions or typeof).\n- FD_SET: the canonical macro/function used to manipulate fd_set; the add macro likely expands to or wraps FD_SET \u2014 FD_SET's definition in the target platform headers should be checked for extensions.\n\nInspecting these symbols' definitions is necessary to decide whether any language extensions (GCC/Clang statement expressions, typeof, nested functions, asm, attributes used as language extensions, or other compiler\u2011specific constructs) are present in code paths exercised by MHD_add_to_fd_set_."
}