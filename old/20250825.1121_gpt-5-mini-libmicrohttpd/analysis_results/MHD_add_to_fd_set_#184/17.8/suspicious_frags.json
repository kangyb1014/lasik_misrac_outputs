{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_add_to_fd_set_:\n```c\nint\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) )\n    return 0;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (! MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                         set,\n                                         fd_setsize))\n    return 0;\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) )\n    *max_fd = fd;\n  return ! 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_add_to_fd_set_:\n#define MHD_SCKT_FD_FITS_FDSET_SETSIZE_(fd, pset, setsize) ((fd)<((MHD_socket)(setsize)))\n...\n#define MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_(fd, pset, setsize) FD_SET((fd),(pset))\n...\n#define MHD_INVALID_SOCKET (-1)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */"
  ],
  "explanation": "Other code fragments do not need investigation for Rule 17.8: - The dereference assignment '*max_fd = fd;' modifies the object pointed to by the pointer parameter max_fd, which is permitted by the rule. - The macro MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (expands to FD_SET((fd),(pset))) modifies the object pointed to by 'set' (the fd_set), not the pointer itself, which is permitted. - The checks and comparisons (e.g., (NULL == set), (MHD_INVALID_SOCKET == fd), (fd > *max_fd)) do not modify parameters. - The (void) fd_setsize; line only casts to void to suppress warnings and does not modify the parameter. - No other statements reassign the pointer parameters 'set' or 'max_fd' or the scalar parameter 'fd'. Therefore they are not suspicious under MISRA C 2023 Rule 17.8."
}