{
  "user_message": "An agent A claimed that the following MHD_add_to_fd_set_ code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_to_fd_set_.\n```c\nint\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) )\n    return 0;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (! MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                         set,\n                                         fd_setsize))\n    return 0;\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) )\n    *max_fd = fd;\n  return ! 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe statement '(void) fd_setsize;' is executed when HAS_FD_SETSIZE_OVERRIDABLE is not defined but has no effect on program behaviour; removing it would not change behaviour, so it constitutes dead code. (The subsequent assignment 'fd_setsize = (int) FD_SETSIZE;' may be needed, but the explicit (void) cast is a no-op and therefore violates Rule 2.2.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. Although the expression-statement \"(void) fd_setsize;\" performs no observable runtime effect and removing it would not change program behaviour, this construct is the conventional, intended idiom for marking a parameter as deliberately unused and for silencing compiler warnings. MISRA\u2019s Rule 2.2 bans true dead code (code that serves no purpose), but the void-cast here documents intent and addresses tool/diagnostic issues; it is an acceptable, purposeful use rather than accidental dead code. In practice MISRA guidance accepts such idioms for unused parameters (often via a local macro or explicit cast-to-void) rather than treating them as violations of the dead-code rule. Therefore agent A\u2019s claim that this line violates Rule 2.2 is not correct."
}