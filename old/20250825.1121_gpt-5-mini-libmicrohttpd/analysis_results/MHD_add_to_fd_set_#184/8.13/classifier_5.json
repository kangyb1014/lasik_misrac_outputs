{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_add_to_fd_set_:\n```c\nint\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) )\n    return 0;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (! MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                         set,\n                                         fd_setsize))\n    return 0;\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) )\n    *max_fd = fd;\n  return ! 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_add_to_fd_set_:\n#define MHD_SCKT_FD_FITS_FDSET_SETSIZE_(fd, pset, setsize) ((fd)<((MHD_socket)(setsize)))\n...\n#define MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_(fd, pset, setsize) FD_SET((fd),(pset))\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nfd_set *set\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The parameter 'fd_set *set' is intentionally non-const because the function (via MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ -> FD_SET) modifies the fd_set object. Rule 8.13 requires const qualification only when the pointee is not modified; since the code updates *set, making it const would be incorrect. Therefore there is no violation."
}