{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_add_to_fd_set_:\n```c\nint\nMHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)\n{\n  if ( (NULL == set) ||\n       (MHD_INVALID_SOCKET == fd) )\n    return 0;\n\n#ifndef HAS_FD_SETSIZE_OVERRIDABLE\n  (void) fd_setsize;  /* Mute compiler warning */\n  fd_setsize = (int) FD_SETSIZE; /* Help compiler to optimise */\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  if (! MHD_SCKT_FD_FITS_FDSET_SETSIZE_ (fd,\n                                         set,\n                                         fd_setsize))\n    return 0;\n  MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_ (fd,\n                                     set,\n                                     fd_setsize);\n  if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) )\n    *max_fd = fd;\n  return ! 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_add_to_fd_set_:\n#define MHD_SCKT_FD_FITS_FDSET_SETSIZE_(fd, pset, setsize) ((fd)<((MHD_socket)(setsize)))\n...\n#define MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_(fd, pset, setsize) FD_SET((fd),(pset))\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "MHD_SCKT_FD_FITS_FDSET_SETSIZE_(fd,\n                                         set,\n                                         fd_setsize)",
    "MHD_add_to_fd_set_ (MHD_socket fd,\n                    fd_set *set,\n                    MHD_socket *max_fd,\n                    int fd_setsize)",
    "FD_SET((fd),(pset))",
    "if ( (NULL != max_fd) &&\n       ( (fd > *max_fd) ||\n         (MHD_INVALID_SOCKET == *max_fd) ) )\n    *max_fd = fd;",
    "MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_(fd,\n                                     set,\n                                     fd_setsize);",
    "fd_set *set",
    "#define MHD_SCKT_FD_FITS_FDSET_SETSIZE_(fd, pset, setsize) ((fd)<((MHD_socket)(setsize)))",
    "MHD_socket *max_fd",
    "#define MHD_SCKT_ADD_FD_TO_FDSET_SETSIZE_(fd, pset, setsize) FD_SET((fd),(pset))"
  ],
  "explanation": "The MISRA C 2023 Rule 8.13 concerns pointer parameters that could be declared to point to const-qualified types. The fragments selected above cover all uses of pointer parameters and pointer dereferences in the function and the related macros: the function parameter declarations (set and max_fd), every place those pointers are passed to macros, the macro definitions that accept a pointer parameter (pset) and the FD_SET expansion, and the read/write dereference of *max_fd. These are the only locations in the provided code where pointer-to-object types are used and thus where a const qualification might be considered. Other code fragments do not involve pointer parameters that could be const: fd and fd_setsize are passed by value, the NULL checks and return paths are control flow only, and assignments to fd_setsize and to *max_fd (shown among the suspicious fragments) justify non-const usage. Therefore no other fragments need investigation for Rule 8.13 in the given code."
}