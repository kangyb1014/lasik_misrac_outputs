{
  "user_message": "Target function code is:\n```c\nstatic void\nthread_main_connection_upgrade (struct MHD_Connection *con)\n{\n#ifdef HTTPS_SUPPORT\n  struct MHD_UpgradeResponseHandle *urh = con->urh;\n  struct MHD_Daemon *daemon = con->daemon;\n\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (con->tid) );\n  /* Here, we need to bi-directionally forward\n     until the application tells us that it is done\n     with the socket; */\n  if ( (0 != (daemon->options & MHD_USE_TLS)) &&\n       MHD_D_IS_USING_SELECT_ (daemon))\n  {\n    while ( (0 != urh->in_buffer_size) ||\n            (0 != urh->out_buffer_size) ||\n            (0 != urh->in_buffer_used) ||\n            (0 != urh->out_buffer_used) )\n    {\n      /* use select */\n      fd_set rs;\n      fd_set ws;\n      fd_set es;\n      MHD_socket max_fd;\n      int num_ready;\n      bool result;\n\n      FD_ZERO (&rs);\n      FD_ZERO (&ws);\n      FD_ZERO (&es);\n      max_fd = MHD_INVALID_SOCKET;\n      result = urh_to_fdset (urh,\n                             &rs,\n                             &ws,\n                             &es,\n                             &max_fd,\n                             FD_SETSIZE);\n      if (! result)\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error preparing select.\\n\"));\n#endif\n        break;\n      }\n      /* FIXME: does this check really needed? */\n      if (MHD_INVALID_SOCKET != max_fd)\n      {\n        struct timeval *tvp;\n        struct timeval tv;\n        if (((con->tls_read_ready) &&\n             (urh->in_buffer_used < urh->in_buffer_size)) ||\n            (daemon->shutdown))\n        {         /* No need to wait if incoming data is already pending in TLS buffers. */\n          tv.tv_sec = 0;\n          tv.tv_usec = 0;\n          tvp = &tv;\n        }\n        else\n          tvp = NULL;\n        num_ready = MHD_SYS_select_ (max_fd + 1,\n                                     &rs,\n                                     &ws,\n                                     &es,\n                                     tvp);\n      }\n      else\n        num_ready = 0;\n      if (num_ready < 0)\n      {\n        const int err = MHD_socket_get_error_ ();\n\n        if (MHD_SCKT_ERR_IS_EINTR_ (err))\n          continue;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error during select (%d): `%s'\\n\"),\n                  err,\n                  MHD_socket_strerr_ (err));\n#endif\n        break;\n      }\n      urh_from_fdset (urh,\n                      &rs,\n                      &ws,\n                      &es,\n                      (int) FD_SETSIZE);\n      process_urh (urh);\n    }\n  }\n#ifdef HAVE_POLL\n  else if (0 != (daemon->options & MHD_USE_TLS))\n  {\n    /* use poll() */\n    struct pollfd p[2];\n    memset (p,\n            0,\n            sizeof (p));\n    p[0].fd = urh->connection->socket_fd;\n    p[1].fd = urh->mhd.socket;\n\n    while ( (0 != urh->in_buffer_size) ||\n            (0 != urh->out_buffer_size) ||\n            (0 != urh->in_buffer_used) ||\n            (0 != urh->out_buffer_used) )\n    {\n      int timeout;\n\n      urh_update_pollfd (urh, p);\n\n      if (((con->tls_read_ready) &&\n           (urh->in_buffer_used < urh->in_buffer_size)) ||\n          (daemon->shutdown))\n        timeout = 0;     /* No need to wait if incoming data is already pending in TLS buffers. */\n      else\n        timeout = -1;\n\n      if (MHD_sys_poll_ (p,\n                         2,\n                         timeout) < 0)\n      {\n        const int err = MHD_socket_get_error_ ();\n\n        if (MHD_SCKT_ERR_IS_EINTR_ (err))\n          continue;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (con->daemon,\n                  _ (\"Error during poll: `%s'\\n\"),\n                  MHD_socket_strerr_ (err));\n#endif\n        break;\n      }\n      urh_from_pollfd (urh,\n                       p);\n      process_urh (urh);\n    }\n  }\n  /* end POLL */\n#endif\n  /* end HTTPS */\n#endif /* HTTPS_SUPPORT */\n  /* TLS forwarding was finished. Cleanup socketpair. */\n  MHD_connection_finish_forward_ (con);\n  /* Do not set 'urh->clean_ready' yet as 'urh' will be used\n   * in connection thread for a little while. */\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'thread_main_connection_upgrade': {'callees': [], 'callers': ['thread_main_handle_connection']}, 'thread_main_handle_connection': {'callees': ['MHD_add_to_fd_set_', 'MHD_DLOG', 'MHD_update_last_activity_', 'MHD_connection_handle_idle', 'connection_get_wait', 'call_handlers', 'thread_main_connection_upgrade', 'MHD_resume_connection', 'MHD_connection_close_', 'MHD_destroy_response'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA for loop shall be well-formed. The three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_D_IS_USING_SELECT_",
    "MHD_D_IS_USING_THREADS_",
    "MHD_thread_handle_ID_is_current_thread_",
    "MHD_USE_TLS",
    "FD_ZERO",
    "FD_SETSIZE",
    "MHD_INVALID_SOCKET",
    "MHD_SYS_select_",
    "MHD_sys_poll_",
    "MHD_socket_get_error_",
    "MHD_SCKT_ERR_IS_EINTR_",
    "MHD_socket_strerr_",
    "MHD_DLOG",
    "urh_to_fdset",
    "urh_from_fdset",
    "urh_update_pollfd",
    "urh_from_pollfd",
    "process_urh",
    "MHD_connection_finish_forward_",
    "struct MHD_UpgradeResponseHandle (definition: in_buffer_size, out_buffer_size, in_buffer_used, out_buffer_used, connection->socket_fd, mhd.socket)",
    "struct MHD_Connection (definition: urh, daemon, tls_read_ready, tid)",
    "struct MHD_Daemon (definition: options, shutdown)"
  ],
  "explanation": "To determine whether the target function violates the MISRA rule for well-formed for-loops you must be sure (1) that there are no for-statements introduced/hidden by macros used in this function and (2) that any functions/macros called from inside a for statement (if any) do not cause violations. Even though the shown code uses while loops and ifs, macros or called functions could expand to or contain for-loops, or a macro used in a loop header could hide a for. The listed symbols are therefore required for a full analysis: \n\n- MHD_D_IS_USING_SELECT_, MHD_D_IS_USING_THREADS_, MHD_thread_handle_ID_is_current_thread_, MHD_USE_TLS: these are condition macros/functions used in control expressions. Their definitions must be checked to ensure they do not expand into for-statements or contain side effects that would affect loop-counter rules.\n\n- FD_ZERO, FD_SETSIZE, MHD_INVALID_SOCKET: FD_* macros and constants participate in select-related code and could be macro-generated code; confirm they are not hiding for-loops or loop counters.\n\n- MHD_SYS_select_, MHD_sys_poll_, MHD_socket_get_error_, MHD_SCKT_ERR_IS_EINTR_, MHD_socket_strerr_, MHD_DLOG: system-wrapper functions and logging/errno helpers used inside the function. If any of these are implemented as macros or inline functions that contain for-loops (or modify objects used as loop counters) they must be inspected. Also their side-effects/return semantics determine if loop-condition expressions would violate MISRA second-clause restrictions.\n\n- urh_to_fdset, urh_from_fdset, urh_update_pollfd, urh_from_pollfd, process_urh: application-level helper functions called repeatedly inside the loops. If any for-loop in this function invoked these functions as part of the for-statement header or body, their behavior (including internal for-loops or modification of objects that might be used as loop counters in an outer for) must be examined. Even though this function shows no for headers, these callees might be macros or inline functions that introduce for statements when expanded.\n\n- MHD_connection_finish_forward_: cleanup call at function end; verify it does not expand to or contain for-loops that would change analysis.\n\n- struct MHD_UpgradeResponseHandle, struct MHD_Connection, struct MHD_Daemon (with the named fields): the while-loop termination conditions reference urh->in/out buffer sizes and used fields and daemon->shutdown and con->tls_read_ready; to be certain no for loop is implicitly constructed by macros or fields used as loop counters, you must inspect these types and fields. Also if any of these fields are of a type or implemented via accessor macros that hide a for-loop or produce side effects on evaluation, that must be known. \n\nIn short: inspect the listed macros, wrappers and the definitions of the called functions and referenced structures to ensure no for-statement is hidden/introduced by macros or inline functions, and to confirm that any for-loops (if present after macro expansion) satisfy the three clauses and single-counter rules of the MISRA requirement."
}