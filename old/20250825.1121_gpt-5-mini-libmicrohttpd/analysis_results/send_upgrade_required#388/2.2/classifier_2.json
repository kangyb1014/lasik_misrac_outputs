{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of send_upgrade_required:\n```c\nstatic enum MHD_Result\nsend_upgrade_required (struct MHD_Connection *con)\n{\n  struct MHD_Response *res;\n  enum MHD_Result ret;\n\n  res =\n    MHD_create_response_from_buffer_static (strlen (UPGRADE_REQUIRED_PAGE),\n                                            (const void *)\n                                            UPGRADE_REQUIRED_PAGE);\n  if (MHD_YES !=\n      MHD_add_response_header (res, MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION,\n                               WS_SEC_WEBSOCKET_VERSION))\n  {\n    MHD_destroy_response (res);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (con, MHD_HTTP_UPGRADE_REQUIRED, res);\n  MHD_destroy_response (res);\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function send_upgrade_required:\n#define UPGRADE_REQUIRED_PAGE \"<html>\\n\"\"<head>\\n\"\"<title>WebSocket chat</title>\\n\"\"</head>\\n\"\"<body>\\n\"\"Upgrade required\\n\"\"</body>\\n\"\"</html>\\n\"\n...\n#define WS_SEC_WEBSOCKET_VERSION \"13\"\n...\n#define MHD_HTTP_HEADER_SEC_WEBSOCKET_VERSION \"Sec-WebSocket-Version\"\n...\n#define MHD_HTTP_UPGRADE_REQUIRED 426\n...\nenum MHD_Result\n{\n  /**\n   * MHD result code for \"NO\".\n   */\n  MHD_NO = 0,\n\n  /**\n   * MHD result code for \"YES\".\n   */\n  MHD_YES = 1\n\n}\n...\nstruct MHD_Response\n...\nstruct MHD_Connection\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nret = MHD_queue_response (con, MHD_HTTP_UPGRADE_REQUIRED, res);\n  MHD_destroy_response (res);\n  return ret;\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: the assignment ret = MHD_queue_response(...) is used by the subsequent return, and MHD_destroy_response(res) performs resource cleanup. Removing MHD_destroy_response would change program behaviour (e.g. leak or alter lifetime), so these operations are not dead code."
}