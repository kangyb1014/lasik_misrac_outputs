{
  "user_message": "An agent A claimed that the following get_rq_dauth_qop code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_dauth_qop.\n```c\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  if (NULL == qop_param->value.str)\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  if (qop_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_INT_))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  else\n  {\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  /* No know QOP has been detected */\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter is 'const struct MHD_RqDAuthParam *const qop_param', but the member accessed (qop_param->value.str) appears to be a pointer to non-const char (e.g. 'char *str'). The test 'if (NULL == qop_param->value.str)' merely reads the pointer, so the pointee is never modified here \u2014 therefore the pointer should point to a const-qualified type (const char *) to comply with MISRA C 2023 Rule 8.13. If value.str is declared as 'char *' in the struct, that declaration violates Rule 8.13; it should be 'const char *'.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function get_rq_dauth_qop:\n#define MHD_str_equal_caseless_quoted_s_bin_n(q, l, u) MHD_str_equal_caseless_quoted_bin_n(q,l,u,MHD_STATICSTR_LEN_(u))\n...\n#define MHD_str_equal_caseless_s_bin_n_(a, s, l) ((MHD_STATICSTR_LEN_(a)==(l))&&MHD_str_equal_caseless_bin_n_(a,s,l))\n...\n#define MHD_TOKEN_AUTH_ \"auth\"\n...\n#define MHD_TOKEN_AUTH_INT_ \"auth-int\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent\u2019s claim is not provable from the supplied code alone. Rule 8.13 is about pointer declarations: pointers should point to const-qualified types when possible. In get_rq_dauth_qop the parameter is a pointer to a const struct (const struct MHD_RqDAuthParam *const qop_param), so the function treats the struct as read-only. However, that const on the struct does not make pointer members\u2019 pointees const \u2014 if the struct defines value.str as \"char *str\", then in a const struct it becomes a const pointer-to-char (char * const), i.e. the pointer itself is const but the char data it points to is not. The function only reads value.str and never modifies the pointed data, so from this function alone you cannot prove that the member\u2019s pointee ought to be const. To determine a real MISRA 8.13 violation you must inspect the declaration of MHD_RqDAuthParam.value.str and all uses of that member across the code-base: if it is declared as char * but never used to modify the pointed characters (and there is no API requirement to allow modification), then it should be changed to const char * and that would satisfy 8.13. If, however, other code legitimately modifies the pointed data, then leaving it as char * is appropriate. Therefore the report is not conclusively correct based solely on the provided snippet."
}