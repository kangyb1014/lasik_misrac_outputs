{
  "user_message": "An agent A claimed that the following get_rq_dauth_qop code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_rq_dauth_qop.\n```c\nstatic enum MHD_DigestAuthQOP\nget_rq_dauth_qop (const struct MHD_RqDAuthParam *const qop_param)\n{\n  if (NULL == qop_param->value.str)\n    return MHD_DIGEST_AUTH_QOP_NONE;\n  if (qop_param->quoted)\n  {\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_quoted_s_bin_n (qop_param->value.str, \\\n                                               qop_param->value.len, \\\n                                               MHD_TOKEN_AUTH_INT_))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  else\n  {\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH;\n    if (MHD_str_equal_caseless_s_bin_n_ (MHD_TOKEN_AUTH_INT_, \\\n                                         qop_param->value.str, \\\n                                         qop_param->value.len))\n      return MHD_DIGEST_AUTH_QOP_AUTH_INT;\n  }\n  /* No know QOP has been detected */\n  return MHD_DIGEST_AUTH_QOP_INVALID;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code passes qop_param->value.str (from a const struct parameter) and the string literal macro MHD_TOKEN_AUTH_ (\"auth\") to a comparison macro. If the struct member value.str is declared as char * (so qop_param->value.str has type char * const when accessed through a const struct), then the pointer points to non-const char data. Likewise, MHD_TOKEN_AUTH_ is a plain string literal (type char[] in C), not declared as const char[]. In both cases the pointer target is not const-qualified even though it could and should be (e.g. const char * or const char[]). This violates MISRA C 2023 Rule 8.13.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function get_rq_dauth_qop:\n#define MHD_str_equal_caseless_quoted_s_bin_n(q, l, u) MHD_str_equal_caseless_quoted_bin_n(q,l,u,MHD_STATICSTR_LEN_(u))\n...\n#define MHD_str_equal_caseless_s_bin_n_(a, s, l) ((MHD_STATICSTR_LEN_(a)==(l))&&MHD_str_equal_caseless_bin_n_(a,s,l))\n...\n#define MHD_TOKEN_AUTH_ \"auth\"\n...\n#define MHD_TOKEN_AUTH_INT_ \"auth-int\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 8.13 concerns pointer declarations: a pointer should point to a const-qualified type whenever possible. The snippet alone does not prove a violation of that rule. The reported problem rests on the declaration of qop_param->value.str (which is inside struct MHD_RqDAuthParam) and on how the comparison routines are prototyped. From the code shown we only see use of qop_param->value.str; we do not see the declaration of value.str. If value.str is declared as char * and could safely be declared as const char * (i.e. the code never modifies the pointed characters), then that declaration would be a breach of 8.13 \u2014 but that is a fault in the struct definition, not specifically in get_rq_dauth_qop. Likewise, the macro MHD_TOKEN_AUTH_ expands to a string literal \"auth\"; in C a string literal has type char[] (not a pointer declaration), and passing it to functions expecting const char * is common and acceptable. The rule targets pointer declarations, not the literal token itself. Therefore, with the information given the agent's claim is not confirmed: it is plausible only if the struct member is non-const and could have been const, but that declaration is not shown. To decide definitively you must inspect the declaration of MHD_RqDAuthParam::value.str and the prototypes of the MHD_str_equal_* functions to see whether they take const char * parameters and whether the pointed-to data is ever modified. Without that, the report cannot be judged correct."
}