{
  "user_message": "Target function code is:\n```c\n_MHD_static_inline bool\ndigest_init_one_time (struct DigestAlgorithm *da,\n                      enum MHD_DigestBaseAlgo algo)\n{\n#ifdef _DEBUG\n  da->uninitialised = false;\n  da->algo_selected = false;\n  da->ready_for_hashing = false;\n  da->hashing = false;\n#endif /* _DEBUG */\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == algo)\n  {\n    da->algo = MHD_DIGEST_BASE_ALGO_MD5;\n#ifdef _DEBUG\n    da->algo_selected = true;\n#endif\n    MHD_MD5_init_one_time (&da->ctx.md5_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif\n    return true;\n  }\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == algo)\n  {\n    da->algo = MHD_DIGEST_BASE_ALGO_SHA256;\n#ifdef _DEBUG\n    da->algo_selected = true;\n#endif\n    MHD_SHA256_init_one_time (&da->ctx.sha256_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif\n    return true;\n  }\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == algo)\n  {\n    da->algo = MHD_DIGEST_BASE_ALGO_SHA512_256;\n#ifdef _DEBUG\n    da->algo_selected = true;\n#endif\n    MHD_SHA512_256_init (&da->ctx.sha512_256_ctx);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif\n    return true;\n  }\n#endif /* MHD_SHA512_256_SUPPORT */\n\n  da->algo = MHD_DIGEST_BASE_ALGO_INVALID;\n  return false; /* Unsupported or bad algorithm */\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'digest_init_one_time': {'callees': ['MHD_MD5_init', 'MHD_SHA256_init', 'MHD_SHA512_256_init'], 'callers': ['MHD_digest_auth_calc_userdigest', 'MHD_digest_auth_calc_userhash', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner']}, 'MHD_MD5_init': {'callees': [], 'callers': ['digest_init_one_time', 'digest_reset']}, 'MHD_SHA256_init': {'callees': [], 'callers': ['digest_init_one_time', 'digest_reset']}, 'MHD_SHA512_256_init': {'callees': [], 'callers': ['digest_init_one_time', 'digest_reset']}, 'MHD_digest_auth_calc_userdigest': {'callees': ['digest_init_one_time', 'get_base_digest_algo', 'digest_get_size', 'calc_userdigest'], 'callers': ['add_new_user_entry']}, 'MHD_digest_auth_calc_userhash': {'callees': ['digest_init_one_time', 'get_base_digest_algo', 'digest_get_size', 'calc_userhash'], 'callers': ['MHD_digest_auth_calc_userhash_hex', 'add_new_user_entry']}, 'digest_auth_check_all_inner': {'callees': ['MHD_get_master', 'MHD_get_rq_dauth_params_', 'MHD_DLOG', 'digest_init_one_time', 'get_base_digest_algo', '__builtin_unreachable', 'digest_get_size', 'is_param_equal', 'get_buffer_for_size', 'get_rq_extended_uname_copy_z', 'calc_userhash', 'MHD_bin_to_hex', 'is_param_equal_caseless', 'digest_reset', 'get_unquoted_param', 'MHD_strx_to_uint64_n_', 'get_nonce_timestamp', 'MHD_monotonic_msec_counter', 'check_nonce_nc', 'digest_update_str', 'digest_update_with_colon', 'get_unquoted_param_copy', 'digest_update', 'check_uri_match', 'digest_calc_hash', 'calc_userdigest', 'MHD_hex_to_bin', 'calculate_nonce'], 'callers': ['digest_auth_check_all']}, 'queue_auth_required_response3_inner': {'callees': ['MHD_DLOG', '__builtin_unreachable', 'digest_init_one_time', 'get_base_digest_algo', 'MHD_get_master', 'digest_get_size', 'MHD_str_quote', 'calculate_add_nonce_with_retry', 'MHD_queue_response'], 'callers': ['MHD_queue_auth_required_response3']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_static_inline",
    "bool",
    "struct DigestAlgorithm",
    "enum MHD_DigestBaseAlgo",
    "MHD_DIGEST_BASE_ALGO_MD5",
    "MHD_DIGEST_BASE_ALGO_SHA256",
    "MHD_DIGEST_BASE_ALGO_SHA512_256",
    "MHD_DIGEST_BASE_ALGO_INVALID",
    "MHD_MD5_init_one_time",
    "MHD_MD5_init",
    "MHD_SHA256_init_one_time",
    "MHD_SHA256_init",
    "MHD_SHA512_256_init",
    "MHD_MD5_SUPPORT",
    "MHD_SHA256_SUPPORT",
    "MHD_SHA512_256_SUPPORT"
  ],
  "explanation": "To determine whether digest_init_one_time uses any compiler language extensions you must inspect all macros, typedefs and function declarations/definitions that the function depends on because those may expand to or declare compiler-specific extensions. Specifically:\n\n- _MHD_static_inline: This macro controls the function linkage/inline semantics; it may expand to compiler-specific keywords or attributes (e.g. __inline__, __attribute__((always_inline)), extern inline) that are language extensions.\n- bool: Confirm whether this is the standard C99 bool (from <stdbool.h>) or a custom typedef/macro; a custom definition might use extensions.\n- struct DigestAlgorithm: Its definition may contain anonymous/unnamed structs or unions, bit-fields with non-standard widths, zero-length arrays, alignment/packed attributes, or other extensions that affect whether the function uses language extensions when accessing members.\n- enum MHD_DigestBaseAlgo: The enum declaration may use compiler-specific enum extensions (underlying type specifiers or attributes); you need the enum to see whether any non-standard enum features are used.\n- MHD_DIGEST_BASE_ALGO_MD5, MHD_DIGEST_BASE_ALGO_SHA256, MHD_DIGEST_BASE_ALGO_SHA512_256, MHD_DIGEST_BASE_ALGO_INVALID: These constants may be macros or enum values; if macros they could use extension constructs. Verify their definitions.\n- MHD_MD5_init_one_time, MHD_MD5_init, MHD_SHA256_init_one_time, MHD_SHA256_init, MHD_SHA512_256_init: The declarations/definitions or macro wrappers for these functions may themselves use compiler extensions (attributes, inline assembly, statement-expressions, typeof, __builtin_* uses or unusual calling conventions). You must inspect their headers/definitions to ensure the call sites are not using extensions.\n- MHD_MD5_SUPPORT, MHD_SHA256_SUPPORT, MHD_SHA512_256_SUPPORT: These preprocessor feature macros determine which branches compile. The conditional compilation may hide extension-using code; you must know their values to know which code paths and associated macros/defs are active.\n\nProvide these symbol definitions/declarations to the next analyzer so it can expand macros and check for any compiler-specific keywords, attributes, anonymous aggregates, non-standard bitfields, inline/extern combinations, inline assembler, or other documented compiler extensions that would violate the MISRA rule."
}