{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n    return MHD_NO;              /* unexpected method */\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nCalling strcmp(method, \"GET\")/strcmp(method, \"POST\") without validating 'method' can access memory beyond the object. For example, if method is NULL (or not NUL-terminated), strcmp will dereference/read beyond the valid object and thus violate Rule 21.17.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function ahc_echo:\n#define BUSYPAGE \"<html><head><title>Webserver busy</title></head>\"\"<body>We are too busy to process POSTs right now.</body></html>\"\n...\nstruct handler_param\n{\n  const char *response_page;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "MISRA C:2023 Rule 21.17 requires that calls to <string.h> functions must not be able to read/write beyond the bounds of the objects referenced by their pointer parameters. In this function strcmp(method, \"GET\") and strcmp(method, \"POST\") are called without any prior validation of the pointer 'method' (nor of the contents being a NUL-terminated string). If 'method' were NULL or did not point to a NUL-terminated array, those strcmp calls could read out-of-bounds (or dereference NULL), which is exactly the kind of access the rule forbids. \n\nWhether this is a real violation in practice depends on the contract of the caller (the MHD callback API). If that API formally guarantees that 'method' is non-NULL and points to a NUL-terminated string, then the calls are safe and not a violation. However, MISRA expects the code to prevent any possibility of out-of-bounds access unless the precondition is formally guaranteed; the shown code does no such validation. Therefore the agent A\u2019s report is correct unless you can point to a documented, enforced API precondition that 'method' is always a valid NUL-terminated string. Recommended fix: explicitly check method != NULL (and/or use safe handling consistent with the API) before calling strcmp."
}