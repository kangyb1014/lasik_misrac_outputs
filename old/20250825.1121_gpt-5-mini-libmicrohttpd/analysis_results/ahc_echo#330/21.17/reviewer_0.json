{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if ((0 != strcmp (method, \"GET\")) && (0 != strcmp (method, \"POST\")))\n    return MHD_NO;              /* unexpected method */\n\n  if (&aptr != *req_cls)\n  {\n    *req_cls = &aptr;\n\n    /* always to busy for POST requests */\n    if (0 == strcmp (method, \"POST\"))\n    {\n      response =\n        MHD_create_response_from_buffer_static (strlen (BUSYPAGE),\n                                                (const void *) BUSYPAGE);\n      ret =\n        MHD_queue_response (connection, MHD_HTTP_SERVICE_UNAVAILABLE,\n                            response);\n      MHD_destroy_response (response);\n      return ret;\n    }\n  }\n\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            (const void *)\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call to strlen(param->response_page) can read past the end of the object if param->response_page is NULL or does not point to a null-terminated character array. For example, if response_page points to a fixed-size buffer that contains characters but no '\\0' terminator (or points to a non-accessible memory region), strlen will scan beyond the buffer bounds to find a terminator, causing out-of-bounds accesses and violating MISRA C 2023 Rule 21.17.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function ahc_echo:\n#define BUSYPAGE \"<html><head><title>Webserver busy</title></head>\"\"<body>We are too busy to process POSTs right now.</body></html>\"\n...\nstruct handler_param\n{\n  const char *response_page;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The call strlen(param->response_page) assumes that param->response_page points to an accessible, NUL-terminated character array. In the shown function there is no check that cls (and thus param) is non-NULL and no check that param->response_page is non-NULL or NUL-terminated. Absent an external, provable invariant that response_page always points to a valid, NUL-terminated buffer, strlen may scan past the object bounds (or dereference a NULL pointer), which is exactly what MISRA C 2023 Rule 21.17 forbids. (By contrast, the use of strlen(BUSYPAGE) is safe because BUSYPAGE is a string literal.) To comply, the code must ensure/validate that param and param->response_page are valid and that the buffer is NUL-terminated (or use APIs that accept an explicit length), before calling strlen."
}