{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of check_params:\n```c\nstatic int\ncheck_params (int argc, char *const *const argv)\n{\n  size_t i;\n  unsigned int port_value;\n\n  if (2 > argc)\n    return 0;\n\n  for (i = 1; i < (unsigned int) argc; ++i)\n  {\n    if (0 == strcmp (argv[i], \"--md5\"))\n    { /* Force use MD5 */\n      force_md5 = ! 0;\n      force_sha256 = 0;\n      force_sha512_256 = 0;\n    }\n    else if (0 == strcmp (argv[i], \"--sha256\"))\n    { /* Force use SHA-256 instead of default MD5 */\n      force_md5 = 0;\n      force_sha256 = ! 0;\n      force_sha512_256 = 0;\n    }\n    else if (0 == strcmp (argv[i], \"--sha512-256\"))\n    { /* Force use SHA-512/256 instead of default MD5 */\n      force_md5 = 0;\n      force_sha256 = 0;\n      force_sha512_256 = ! 0;\n    }\n    else if (0 == strcmp (argv[i], \"--allow-rfc2069\"))\n      allow_rfc2069 = ! 0; /* Allow fallback to RFC2069. Not recommended! */\n    else if ((1 == sscanf (argv[i], \"%u\", &port_value))\n             && (0 < port_value) && (65535 >= port_value))\n      daemon_port = (uint16_t) port_value;\n    else\n    {\n      fprintf (stderr, \"Unrecognized parameter: %s\\n\",\n               argv[i]);\n      return 0;\n    }\n  }\n\n  if (force_sha512_256)\n    printf (\n      \"Note: when testing with curl/libcurl do not be surprised with failures as \"\n      \"libcurl incorrectly implements SHA-512/256 algorithm.\\n\");\n  return ! 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function check_params:\nint\nmain (int argc, char *const *argv)\n{\n  struct MHD_Daemon *d;\n\n  if (! check_params (argc, argv))\n  {\n    fprintf (stderr, \"Usage: %s [--md5|--sha256|--sha512-256] \"\n             \"[--allow-rfc2069] PORT\\n\", argv[0]);\n    return 1;\n  }\n  if (! add_new_users ())\n  {\n    fprintf (stderr, \"Failed to add new users to the users database.\\n\");\n    return 2;\n  }\n  if (! init_rand_data ())\n  {\n    fprintf (stderr, \"Failed to initialise random data.\\n\");\n    return 2;\n  }\n\n  d = MHD_start_daemon (\n    MHD_USE_INTERNAL_POLLING_THREAD\n    | MHD_USE_THREAD_PER_CONNECTION\n    | MHD_USE_ERROR_LOG,\n    daemon_port,\n    NULL, NULL, &ahc_main, NULL,\n    MHD_OPTION_DIGEST_AUTH_RANDOM, sizeof(rand_data), rand_data,\n    MHD_OPTION_NONCE_NC_SIZE, 500,\n    MHD_OPTION_CONNECTION_TIMEOUT, (unsigned int) 180,\n    MHD_OPTION_END);\n  if (d == NULL)\n  {\n    fprintf (stderr, \"Failed to start the server on port %lu.\\n\",\n             (unsigned long) daemon_port);\n    return 1;\n  }\n  printf (\"Running server on port %lu.\\nPress ENTER to stop.\\n\",\n          (unsigned long) daemon_port);\n  (void) getc (stdin);\n  MHD_stop_daemon (d);\n  return 0;\n}\n...\nstatic int force_md5 = 0\n...\nstatic int force_sha256 = 0\n...\nstatic int force_sha512_256 = 0\n...\nstatic int allow_rfc2069 = 0\n...\nstatic uint16_t daemon_port = 0\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nelse if (0 == strcmp (argv[i], \"--allow-rfc2069\"))\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. strcmp is called with a string literal \"--allow-rfc2069\" (valid) and argv[i] where i ranges from 1 to argc-1. In a hosted program the argv[1..argc-1] entries are guaranteed to be pointers to null\u2011terminated strings, so this use does not cause out\u2011of\u2011bounds accesses. A violation would only occur if argv[i] were NULL or not null\u2011terminated (for example if argv were corrupted or if the code mistakenly used argv[argc]), in which case strcmp could read beyond the object bounds."
}