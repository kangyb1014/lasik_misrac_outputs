{
  "user_message": "Target function code is:\n```c\nstatic int\ncheck_params (int argc, char *const *const argv)\n{\n  size_t i;\n  unsigned int port_value;\n\n  if (2 > argc)\n    return 0;\n\n  for (i = 1; i < (unsigned int) argc; ++i)\n  {\n    if (0 == strcmp (argv[i], \"--md5\"))\n    { /* Force use MD5 */\n      force_md5 = ! 0;\n      force_sha256 = 0;\n      force_sha512_256 = 0;\n    }\n    else if (0 == strcmp (argv[i], \"--sha256\"))\n    { /* Force use SHA-256 instead of default MD5 */\n      force_md5 = 0;\n      force_sha256 = ! 0;\n      force_sha512_256 = 0;\n    }\n    else if (0 == strcmp (argv[i], \"--sha512-256\"))\n    { /* Force use SHA-512/256 instead of default MD5 */\n      force_md5 = 0;\n      force_sha256 = 0;\n      force_sha512_256 = ! 0;\n    }\n    else if (0 == strcmp (argv[i], \"--allow-rfc2069\"))\n      allow_rfc2069 = ! 0; /* Allow fallback to RFC2069. Not recommended! */\n    else if ((1 == sscanf (argv[i], \"%u\", &port_value))\n             && (0 < port_value) && (65535 >= port_value))\n      daemon_port = (uint16_t) port_value;\n    else\n    {\n      fprintf (stderr, \"Unrecognized parameter: %s\\n\",\n               argv[i]);\n      return 0;\n    }\n  }\n\n  if (force_sha512_256)\n    printf (\n      \"Note: when testing with curl/libcurl do not be surprised with failures as \"\n      \"libcurl incorrectly implements SHA-512/256 algorithm.\\n\");\n  return ! 0;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'check_params': {'callees': [], 'callers': ['main']}, 'main': {'callees': ['MHD_create_response_from_buffer_static', 'MHD_start_daemon', 'MHD_stop_daemon', 'MHD_destroy_response', 'MHD_get_fdset2', 'MHD_get_timeout64', 'MHD_run', 'MHD_get_daemon_info', 'MHD_get_timeout_i', 'MHD_resume_connection', 'expire_sessions', 'ignore_sigpipe', 'mark_as_html', 'update_directory', 'update_cached_response', 'check_params', 'add_new_users', 'init_rand_data', 'set_self_name', 'process_params', 'check_apply_params', 'init_data', 'run_mhd', 'deinit_data'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "strcmp",
    "sscanf",
    "fprintf",
    "printf",
    "stderr",
    "force_md5",
    "force_sha256",
    "force_sha512_256",
    "allow_rfc2069",
    "daemon_port"
  ],
  "explanation": "For checking the MISRA rule (a function parameter shall not be modified) we must be sure that no called routine or global aliasing modifies the parameter pointer or the pointers stored in argv[]:\n\n- strcmp \u2014 used with argv[i]; include to confirm its prototype takes const char * arguments and does not modify the string or the pointer passed.\n- sscanf \u2014 used with argv[i]; include to confirm its prototype (int sscanf(const char *, const char *, ...)) does not modify the input string or the pointer passed.\n- fprintf \u2014 used to report an error; include to confirm it does not modify the argv strings passed to it (it only reads them).\n- printf \u2014 used for a note; include to confirm it does not modify its string arguments.\n- stderr \u2014 stream object passed to fprintf; included to show standard I/O use and ensure no side-effects to argv.\n\nAlso include the global variables that are written by check_params (to rule out any aliasing or confusing side effects and to show that only globals are modified, not parameters):\n\n- force_md5, force_sha256, force_sha512_256 \u2014 globals toggled by the function; included to demonstrate the function modifies globals (allowed) rather than its pointer parameters.\n- allow_rfc2069 \u2014 global set by the function; same reason as above.\n- daemon_port \u2014 global set from sscanf result; included to show only program state globals are modified, not argc/argv.\n\nWith these symbols available (their prototypes/definitions), an analyzer can verify that none of the called functions or globals cause modification of the argv pointer or the argv[] pointers and thus determine whether check_params violates the MISRA parameter-modification rule."
}