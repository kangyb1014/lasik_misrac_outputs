{
  "user_message": "Target function code is:\n```c\nvoid\nMHD_SHA512_256_update (struct Sha512_256Ctx *ctx,\n                       const uint8_t *data,\n                       size_t length)\n{\n  unsigned int bytes_have; /**< Number of bytes in the context buffer */\n  uint64_t count_hi; /**< The high part to be moved to another variable */\n\n  mhd_assert ((data != NULL) || (length == 0));\n\n#ifndef MHD_FAVOR_SMALL_CODE\n  if (0 == length)\n    return; /* Shortcut, do nothing */\n#endif /* ! MHD_FAVOR_SMALL_CODE */\n\n  /* Note: (count & (SHA512_256_BLOCK_SIZE-1))\n           equals (count % SHA512_256_BLOCK_SIZE) for this block size. */\n  bytes_have = (unsigned int) (ctx->count & (SHA512_256_BLOCK_SIZE - 1));\n  ctx->count += length;\n#if SIZEOF_SIZE_T > 7\n  if (length > ctx->count)\n    ctx->count_bits_hi += 1U << 3; /* Value wrap */\n#endif /* SIZEOF_SIZE_T > 7 */\n  count_hi = ctx->count >> 61;\n  if (0 != count_hi)\n  {\n    ctx->count_bits_hi += count_hi;\n    ctx->count &= UINT64_C (0x1FFFFFFFFFFFFFFF);\n  }\n\n  if (0 != bytes_have)\n  {\n    unsigned int bytes_left = SHA512_256_BLOCK_SIZE - bytes_have;\n    if (length >= bytes_left)\n    {     /* Combine new data with data in the buffer and\n             process the full block. */\n      memcpy (((uint8_t *) ctx->buffer) + bytes_have,\n              data,\n              bytes_left);\n      data += bytes_left;\n      length -= bytes_left;\n      sha512_256_transform (ctx->H, ctx->buffer);\n      bytes_have = 0;\n    }\n  }\n\n  while (SHA512_256_BLOCK_SIZE <= length)\n  {   /* Process any full blocks of new data directly,\n         without copying to the buffer. */\n    sha512_256_transform (ctx->H, data);\n    data += SHA512_256_BLOCK_SIZE;\n    length -= SHA512_256_BLOCK_SIZE;\n  }\n\n  if (0 != length)\n  {   /* Copy incomplete block of new data (if any)\n         to the buffer. */\n    memcpy (((uint8_t *) ctx->buffer) + bytes_have, data, length);\n  }\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_SHA512_256_update': {'callees': ['sha512_256_transform'], 'callers': ['digest_update']}, 'sha512_256_transform': {'callees': ['__builtin_rotateright64', '__builtin_bswap64'], 'callers': ['MHD_SHA512_256_update', 'MHD_SHA512_256_finish']}, 'digest_update': {'callees': ['MHD_MD5_update', 'MHD_SHA256_update', 'MHD_SHA512_256_update'], 'callers': ['digest_update_str', 'digest_update_with_colon', 'calculate_nonce', 'calc_userdigest', 'calc_userhash', 'digest_auth_check_all_inner']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA pointer should point to a const-qualified type whenever possible. \nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct Sha512_256Ctx (complete definition)",
    "sha512_256_transform (prototype and/or definition)",
    "SHA512_256_BLOCK_SIZE (macro)",
    "SIZEOF_SIZE_T (macro / compile-time value)"
  ],
  "explanation": "struct Sha512_256Ctx: Needed to know the exact types and const-qualification of members accessed through the ctx pointer (e.g. buffer, H, count, count_bits_hi). Determining whether any member could/should be declared const, or whether casts remove/preserve const-qualification, requires the struct layout and member types.\n\nsha512_256_transform (prototype and/or definition): The function is called with ctx->H and ctx->buffer. To decide if pointer parameters could/should be const-qualified (MISRA: pointer should point to const-qualified type whenever possible) we must see whether sha512_256_transform actually modifies the block or H parameters. Its prototype/definition reveals which parameters are declared const and whether they are mutated.\n\nSHA512_256_BLOCK_SIZE (macro): The block-size macro determines the type/size of buffer members (e.g. whether buffer is an array of bytes or words) and controls the pointer arithmetic/casts ((uint8_t *) ctx->buffer). Knowing the block size is needed to reason about whether casting to uint8_t * is safe and whether that cast strips or requires const qualification.\n\nSIZEOF_SIZE_T (macro / compile-time value): Although not directly about pointer constness, the SIZEOF_SIZE_T conditional controls code paths that update ctx fields (e.g. count_bits_hi). Knowing its compile-time value is necessary to understand which members are modified in all builds \u2014 which affects whether those members (and therefore the ctx pointer) could be const."
}