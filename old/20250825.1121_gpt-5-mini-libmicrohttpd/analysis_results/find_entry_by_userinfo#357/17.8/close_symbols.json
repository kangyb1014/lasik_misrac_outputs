{
  "user_message": "Target function code is:\n```c\nstatic struct UserEntry *\nfind_entry_by_userinfo (const struct MHD_DigestAuthUsernameInfo *username_info)\n{\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD <= username_info->uname_type)\n    return find_entry_by_username (username_info->username);\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == username_info->uname_type)\n    return find_entry_by_userhash (username_info->algo3,\n                                   username_info->userhash_bin,\n                                   username_info->userhash_hex_len / 2);\n\n  return NULL; /* Should be unreachable as all cases are covered before */\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'find_entry_by_userinfo': {'callees': ['find_entry_by_username', 'find_entry_by_userhash'], 'callers': ['handle_sec_areas_req']}, 'find_entry_by_username': {'callees': [], 'callers': ['find_entry_by_userinfo']}, 'find_entry_by_userhash': {'callees': ['MHD_digest_get_hash_size'], 'callers': ['find_entry_by_userinfo']}, 'handle_sec_areas_req': {'callees': ['MHD_digest_auth_get_username3', 'reply_with_auth_required', 'find_entry_by_userinfo', 'MHD_digest_auth_check_digest3', 'get_m_QOP', 'reply_with_area1_pages', 'reply_with_forbidden', 'reply_with_area2_pages'], 'callers': ['ahc_main']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_DigestAuthUsernameInfo (full definition)",
    "MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD",
    "MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH",
    "find_entry_by_username (declaration/definition or macro)",
    "find_entry_by_userhash (declaration/definition or macro)",
    "struct UserEntry (definition)"
  ],
  "explanation": "To check the MISRA rule 'a function parameter should not be modified' for find_entry_by_userinfo you must be able to rule out any hidden modification of the parameter variable 'username_info' inside the function (including via macro expansion or inline definitions) and to confirm the const qualification and field types. Specifically:\n\n- struct MHD_DigestAuthUsernameInfo (full definition): required to confirm the exact type and const qualification of the parameter, the types of its members (uname_type, username, algo3, userhash_bin, userhash_hex_len) and to ensure no member access is implemented via macros that could reassign the parameter variable.\n\n- MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD: required to see whether this symbol is a simple enum/const or a macro with side effects. If it's a macro it could conceivably expand to code that modifies the parameter variable; if it is an enum/const the comparison is pure.\n\n- MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH: same reason as above for the other comparison constant.\n\n- find_entry_by_username (declaration/definition or macro): required to confirm this callee is an ordinary function (or a macro/inline). If it is a macro it could expand into code that modifies local parameters (or references username_info indirectly). We need its declaration/definition to ensure no macro/inline reassigns the username_info parameter variable in the caller via unexpected token pasting or side effects.\n\n- find_entry_by_userhash (declaration/definition or macro): same reason as for find_entry_by_username; the call uses multiple fields of username_info and we must ensure that the callee's name is not a macro that expands into code that alters the caller's parameter variable.\n\n- struct UserEntry (definition): included to fully understand the return type (pointer) and to detect any macros/typedef oddities involving the return type that could affect interpretation of calls/expressions in the function.\n\nTogether these symbols let an analyst determine whether the target function body (after macro expansion and with real declarations) performs any assignment or other modification to the parameter variable 'username_info' itself (which would violate MISRA), as opposed to permitted modifications of the object pointed-to."
}