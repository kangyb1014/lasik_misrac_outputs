{
  "user_message": "Target function code is:\n```c\nstatic struct UserEntry *\nfind_entry_by_userinfo (const struct MHD_DigestAuthUsernameInfo *username_info)\n{\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD <= username_info->uname_type)\n    return find_entry_by_username (username_info->username);\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == username_info->uname_type)\n    return find_entry_by_userhash (username_info->algo3,\n                                   username_info->userhash_bin,\n                                   username_info->userhash_hex_len / 2);\n\n  return NULL; /* Should be unreachable as all cases are covered before */\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'find_entry_by_userinfo': {'callees': ['find_entry_by_username', 'find_entry_by_userhash'], 'callers': ['handle_sec_areas_req']}, 'find_entry_by_username': {'callees': [], 'callers': ['find_entry_by_userinfo']}, 'find_entry_by_userhash': {'callees': ['MHD_digest_get_hash_size'], 'callers': ['find_entry_by_userinfo']}, 'handle_sec_areas_req': {'callees': ['MHD_digest_auth_get_username3', 'reply_with_auth_required', 'find_entry_by_userinfo', 'MHD_digest_auth_check_digest3', 'get_m_QOP', 'reply_with_area1_pages', 'reply_with_forbidden', 'reply_with_area2_pages'], 'callers': ['ahc_main']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nUse of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters. This rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "find_entry_by_username",
    "find_entry_by_userhash",
    "MHD_digest_get_hash_size",
    "struct MHD_DigestAuthUsernameInfo",
    "MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD",
    "MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH",
    "struct UserEntry",
    "Any buffer-size/length macros or constants referenced by the above functions (e.g. MAX_USERNAME_LEN, USERHASH_BIN_LEN, USERHASH_HEX_LEN)",
    "prototypes/signatures and typedefs for fields used in MHD_DigestAuthUsernameInfo (types of username, userhash_bin, userhash_hex_len, algo3)"
  ],
  "explanation": "Why each symbol is required:\n\n- find_entry_by_username: The target function dispatches to this function for STANDARD uname_type. To determine if any string.h functions are used or if there are out\u2011of\u2011bounds accesses, the implementation of this function must be inspected (copies, compares, buffer indexing, assumed buffer sizes).\n\n- find_entry_by_userhash: The target calls this on USERHASH uname_type. Its implementation must be checked for string/memory operations (hex decoding, memcpy/str* calls, pointer arithmetic) and for correct use of the provided length parameters.\n\n- MHD_digest_get_hash_size: Called by find_entry_by_userhash to compute expected binary hash size. You must verify its return type and value semantics to ensure the length passed to any memory/string functions in find_entry_by_userhash is correct and cannot cause overruns.\n\n- struct MHD_DigestAuthUsernameInfo: The target function reads fields from this struct (uname_type, username, algo3, userhash_bin, userhash_hex_len). You need the precise field types and layout to know whether they are pointers or arrays, the element types (char vs unsigned char), and whether any implicit size/length assumptions exist.\n\n- MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD and MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH: The constants define control flow. Knowing their values and the enum/range of uname_type is necessary to ensure all possible cases are handled and to confirm which callee(s) will be exercised.\n\n- struct UserEntry: The function returns a pointer to this type. Its definition may reveal whether returned entries contain internal buffers whose lifetimes/sizes depend on the username/userhash inputs; this is relevant when analyzing subsequent uses of buffers that might have been populated using string.h routines.\n\n- Any buffer-size/length macros or constants referenced by the above functions (e.g. MAX_USERNAME_LEN, USERHASH_BIN_LEN, USERHASH_HEX_LEN): The callees may use compile-time limits when copying or decoding data. Those macros are required to determine whether their uses of memcpy/strcpy/strncpy/strlen etc. are safe.\n\n- Prototypes/signatures and typedefs for fields used in MHD_DigestAuthUsernameInfo (types of username, userhash_bin, userhash_hex_len, algo3): Exact types (size_t vs int, char* vs char[], unsigned char*, enum) affect arithmetic and length calculations passed to string functions; these are required to check for potential signed/unsigned mistakes or truncation leading to out\u2011of\u2011bounds accesses.\n\nCollecting the source (or prototypes/definitions) for the above symbols will allow a precise analysis of any uses of <string.h> functions and whether they can access beyond their referenced object bounds."
}