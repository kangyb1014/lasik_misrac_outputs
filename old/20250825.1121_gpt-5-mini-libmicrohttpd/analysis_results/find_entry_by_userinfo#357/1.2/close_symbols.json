{
  "user_message": "Target function code is:\n```c\nstatic struct UserEntry *\nfind_entry_by_userinfo (const struct MHD_DigestAuthUsernameInfo *username_info)\n{\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD <= username_info->uname_type)\n    return find_entry_by_username (username_info->username);\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == username_info->uname_type)\n    return find_entry_by_userhash (username_info->algo3,\n                                   username_info->userhash_bin,\n                                   username_info->userhash_hex_len / 2);\n\n  return NULL; /* Should be unreachable as all cases are covered before */\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'find_entry_by_userinfo': {'callees': ['find_entry_by_username', 'find_entry_by_userhash'], 'callers': ['handle_sec_areas_req']}, 'find_entry_by_username': {'callees': [], 'callers': ['find_entry_by_userinfo']}, 'find_entry_by_userhash': {'callees': ['MHD_digest_get_hash_size'], 'callers': ['find_entry_by_userinfo']}, 'handle_sec_areas_req': {'callees': ['MHD_digest_auth_get_username3', 'reply_with_auth_required', 'find_entry_by_userinfo', 'MHD_digest_auth_check_digest3', 'get_m_QOP', 'reply_with_area1_pages', 'reply_with_forbidden', 'reply_with_area2_pages'], 'callers': ['ahc_main']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_DigestAuthUsernameInfo",
    "MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD",
    "MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH",
    "struct UserEntry",
    "find_entry_by_username (declaration/prototype)",
    "find_entry_by_userhash (declaration/prototype)",
    "type/enum used for MHD_DigestAuthUsernameInfo::uname_type"
  ],
  "explanation": "To decide whether the target function uses any compiler language extensions you must inspect the definitions and declarations that appear in its expressions and return type: \n- struct MHD_DigestAuthUsernameInfo: needed to see all field types (uname_type, username, algo3, userhash_bin, userhash_hex_len) and check for any use of compiler-specific extensions inside the struct (anonymous structs/unions, __attribute__ annotations, bit-field widths that rely on extensions, zero-length array, GCC packed/packed attribute, etc.).\n- MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD and MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH: inspect how these constants are defined (enum constants vs #define vs complex macro) to ensure their definitions do not use compiler-specific constructs (typeof, statement-expression ( ({ ... }) ), computed expressions that rely on extensions).\n- type/enum used for MHD_DigestAuthUsernameInfo::uname_type: if uname_type is a separate enum or typedef, its definition must be checked for non\u2011standard extension usage (e.g., explicit underlying type extensions, attributes).\n- struct UserEntry: the function returns a pointer to this type; its definition must be checked for extension usage in the type declaration (attributes, zero-length arrays, anonymous members, etc.).\n- find_entry_by_username (declaration/prototype) and find_entry_by_userhash (declaration/prototype): their prototypes must be examined for use-site visible language extensions (GCC/Clang __attribute__ annotations, varargs without prototype, K&R style declaration, calling-convention attributes, or other compiler-specific qualifiers) that would make the call or type usage non\u2011standard.\n\nCollecting these symbols lets the next analyst determine whether any compiler-specific language extensions are used in the types, constants, or function declarations that the target function relies on."
}