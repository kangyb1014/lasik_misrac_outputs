{
  "user_message": "An agent A claimed that the following find_entry_by_userinfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of find_entry_by_userinfo.\n```c\nstatic struct UserEntry *\nfind_entry_by_userinfo (const struct MHD_DigestAuthUsernameInfo *username_info)\n{\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD <= username_info->uname_type)\n    return find_entry_by_username (username_info->username);\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == username_info->uname_type)\n    return find_entry_by_userhash (username_info->algo3,\n                                   username_info->userhash_bin,\n                                   username_info->userhash_hex_len / 2);\n\n  return NULL; /* Should be unreachable as all cases are covered before */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the member userhash_bin in struct MHD_DigestAuthUsernameInfo is declared as a pointer to a non-const type (for example: unsigned char *userhash_bin), then this fragment violates MISRA C 2023 Rule 8.13. The function parameter is being passed a pointer that should be to const-qualified data because username_info is a pointer to const struct; the pointed-to data should therefore be declared const (e.g. const unsigned char *userhash_bin) to prevent modification. If, however, userhash_bin is already declared as a pointer to const (or find_entry_by_userhash expects a pointer-to-const), then there is no violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report as stated is not correct. MISRA C 2023 Rule 8.13 concerns pointer declarations (a pointer should point to a const-qualified type whenever possible). The fragment you show only reads a member from a const-qualified pointer-to-struct; it does not itself declare a pointer-to-non-const. Concretely, if the struct member is declared as unsigned char *userhash_bin, then when accessed through a const struct object the expression username_info->userhash_bin has type \"unsigned char * const\" (the pointer object is const, the pointee is not). That is allowed by C and does not by itself constitute an 8.13 violation in this function. Whether there is an 8.13 violation depends on the declaration of the member and the intended const-correctness: if userhash_bin actually refers to data that should not be modified, the member should be declared const unsigned char *userhash_bin (or find_entry_by_userhash should accept the appropriate const-qualified pointer). Only that declaration (or the mismatch between declarations and intended usage) would be a potential 8.13 violation, not the use of username_info->userhash_bin shown here."
}