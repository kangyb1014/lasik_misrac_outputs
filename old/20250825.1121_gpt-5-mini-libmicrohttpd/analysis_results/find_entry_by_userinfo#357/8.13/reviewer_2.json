{
  "user_message": "An agent A claimed that the following find_entry_by_userinfo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of find_entry_by_userinfo.\n```c\nstatic struct UserEntry *\nfind_entry_by_userinfo (const struct MHD_DigestAuthUsernameInfo *username_info)\n{\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_STANDARD <= username_info->uname_type)\n    return find_entry_by_username (username_info->username);\n\n  if (MHD_DIGEST_AUTH_UNAME_TYPE_USERHASH == username_info->uname_type)\n    return find_entry_by_userhash (username_info->algo3,\n                                   username_info->userhash_bin,\n                                   username_info->userhash_hex_len / 2);\n\n  return NULL; /* Should be unreachable as all cases are covered before */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation occurs if find_entry_by_username is declared to take a non-const pointer (e.g. 'struct UserEntry *find_entry_by_username(char *username);'). username_info is a pointer to a const struct, so passing username_info->username to a function that accepts 'char *' fails the intent of Rule 8.13 \u2014 the function parameter should be 'const char *username' if the function does not modify the string. Thus the call indicates the API allows a non-const pointer where a const-qualified pointer should be used.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. The shown function itself does not violate MISRA C 2023 Rule 8.13. username_info is a pointer to a const struct, which makes the struct object and thus the pointer member lvalue const (the member expression has type \"char *\" but with a top\u2011level const on the pointer: effectively \"char * const\"). Passing that expression to a function declared as taking \"char *\" does not change the const qualification of the pointee \u2014 it only drops a top\u2011level const on the pointer expression \u2014 and the shown code does not introduce a non\u2011const pointer to data that should be const. If there is a violation, it would be in the declaration of find_entry_by_username: if that function does not modify the string it should be declared to take \"const char *\". In short, the problem (if any) is with the callee API, not with find_entry_by_userinfo, so Agent A's claim that this function violates Rule 8.13 is incorrect."
}