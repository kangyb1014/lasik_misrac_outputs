{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of cleanup_connection:\n```c\nstatic void\ncleanup_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (connection->in_cleanup)\n    return; /* Prevent double cleanup. */\n  connection->in_cleanup = true;\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (connection->suspended)\n  {\n    DLL_remove (daemon->suspended_connections_head,\n                daemon->suspended_connections_tail,\n                connection);\n    connection->suspended = false;\n  }\n  else\n  {\n    if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    {\n      if (connection->connection_timeout_ms == daemon->connection_timeout_ms)\n        XDLL_remove (daemon->normal_timeout_head,\n                     daemon->normal_timeout_tail,\n                     connection);\n      else\n        XDLL_remove (daemon->manual_timeout_head,\n                     daemon->manual_timeout_tail,\n                     connection);\n    }\n    DLL_remove (daemon->connections_head,\n                daemon->connections_tail,\n                connection);\n  }\n  DLL_insert (daemon->cleanup_head,\n              daemon->cleanup_tail,\n              connection);\n  connection->resuming = false;\n  connection->in_idle = false;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* if we were at the connection limit before and are in\n       thread-per-connection mode, signal the main thread\n       to resume accepting connections */\n    if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n         (! MHD_itc_activate_ (daemon->itc, \"c\")) )\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal end of connection via inter-thread \" \\\n                   \"communication channel.\\n\"));\n#endif\n    }\n  }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function cleanup_connection:\n_MHD_EXTERN void\nMHD_destroy_response (struct MHD_Response *response)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  if (NULL == response)\n    return;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&response->mutex);\n#endif\n  if (0 != --(response->reference_count))\n  {\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    MHD_mutex_unlock_chk_ (&response->mutex);\n#endif\n    return;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&response->mutex);\n  MHD_mutex_destroy_chk_ (&response->mutex);\n#endif\n  if (NULL != response->crfc)\n    response->crfc (response->crc_cls);\n\n  if (NULL != response->data_iov)\n  {\n    free (response->data_iov);\n  }\n\n  while (NULL != response->first_header)\n  {\n    pos = response->first_header;\n    response->first_header = pos->next;\n    free (pos->header);\n    free (pos->value);\n    free (pos);\n  }\n  free (response);\n}\n...\nvoid\nMHD_DLOG (const struct MHD_Daemon *daemon,\n          const char *format,\n          ...)\n{\n  va_list va;\n\n  if (0 == (daemon->options & MHD_USE_ERROR_LOG))\n    return;\n  va_start (va, format);\n  daemon->custom_error_log (daemon->custom_error_log_cls,\n                            format,\n                            va);\n  va_end (va);\n}\n...\n#define MHD_itc_activate_(itc, str) ((write((itc).fd,(constvoid*)&_MHD_itc_wr_data,sizeof(_MHD_itc_wr_data))>0)||(EAGAIN==errno))\n...\n#define MHD_ITC_IS_VALID_(itc) (-1!=((itc).fd))\n...\n#define DLL_remove(head, tail, element) do{mhd_assert((NULL!=(element)->next)||((element)==(tail)));mhd_assert((NULL!=(element)->prev)||((element)==(head)));if((element)->prev==NULL){(head)=(element)->next;}else{(element)->prev->next=(element)->next;}if((element)->next==NULL){(tail)=(element)->prev;}else{(element)->next->prev=(element)->prev;}(element)->next=NULL;(element)->prev=NULL;}while(0)\n...\n#define XDLL_remove(head, tail, element) do{mhd_assert((NULL!=(element)->nextX)||((element)==(tail)));mhd_assert((NULL!=(element)->prevX)||((element)==(head)));if(NULL==(element)->prevX){(head)=(element)->nextX;}else{(element)->prevX->nextX=(element)->nextX;}if(NULL==(element)->nextX){(tail)=(element)->prevX;}else{(element)->nextX->prevX=(element)->prevX;}(element)->nextX=NULL;(element)->prevX=NULL;}while(0)\n...\n#define DLL_insert(head, tail, element) do{mhd_assert(NULL==(element)->next);mhd_assert(NULL==(element)->prev);(element)->next=(head);(element)->prev=NULL;if((tail)==NULL){(tail)=element;}else{(head)->prev=element;}(head)=(element);}while(0)\n...\n#define MHD_mutex_lock_chk_(pmutex) do{if(!MHD_mutex_lock_(pmutex))MHD_PANIC(_(\"Failed to lock mutex.\\n\"));\\\n}while(0)\n...\n#define MHD_mutex_unlock_chk_(pmutex) do{if(!MHD_mutex_unlock_(pmutex))MHD_PANIC(_(\"Failed to unlock mutex.\\n\"));\\\n}while(0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "daemon->custom_error_log (daemon->custom_error_log_cls,\n                            format,\n                            va);",
    "MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);",
    "DLL_remove (daemon->suspended_connections_head,\n                daemon->suspended_connections_tail,\n                connection);",
    "DLL_remove (daemon->connections_head,\n                daemon->connections_tail,\n                connection);",
    "mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );",
    "XDLL_remove (daemon->normal_timeout_head,\n                     daemon->normal_timeout_tail,\n                     connection);",
    "MHD_DLOG (daemon,\n                _ ( \"Failed to signal end of connection via inter-thread \" \\\n                   \"communication channel.\\n\"));",
    "MHD_itc_activate_ (daemon->itc, \"c\")",
    "MHD_destroy_response (connection->rp.response);",
    "XDLL_remove (daemon->manual_timeout_head,\n                     daemon->manual_timeout_tail,\n                     connection);",
    "DLL_insert (daemon->cleanup_head,\n              daemon->cleanup_tail,\n              connection);",
    "#define MHD_mutex_lock_chk_(pmutex) do{if(!MHD_mutex_lock_(pmutex))MHD_PANIC(_(\"Failed to lock mutex.\\n\"));\\\n}while(0)",
    "if (NULL != response->crfc)\n    response->crfc (response->crc_cls);",
    "MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);"
  ],
  "explanation": "Other fragments in cleanup_connection are simple local flag assignments, pointer initialisations, integer/enum checks and pure pointer-list manipulations that do not invoke user callbacks or external code paths that could re-enter cleanup_connection. Examples: setting connection->in_cleanup, connection->suspended = false, connection->resuming = false, connection->in_idle = false, the MHD_ITC_IS_VALID_ macro (simple integer compare), and the XDLL/DLL insert/remove pointer updates (apart from their embedded mhd_asserts) are pure data-structure operations. The write() used by the itc-activation macro is a system call and does not itself call application callbacks (the activation macro was included above because it can cause other threads to run; other simple checks and list-pointer assignments do not). The free() and header/list-node deallocation code inside MHD_destroy_response are internal memory operations and do not call back into library functions except for the explicit callback (response->crfc) which is listed above. Therefore those other fragments need not be investigated for potential indirect recursion under Rule 17.2."
}