{
  "user_message": "Target function code is:\n```c\nstatic void\ncleanup_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (connection->in_cleanup)\n    return; /* Prevent double cleanup. */\n  connection->in_cleanup = true;\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (connection->suspended)\n  {\n    DLL_remove (daemon->suspended_connections_head,\n                daemon->suspended_connections_tail,\n                connection);\n    connection->suspended = false;\n  }\n  else\n  {\n    if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    {\n      if (connection->connection_timeout_ms == daemon->connection_timeout_ms)\n        XDLL_remove (daemon->normal_timeout_head,\n                     daemon->normal_timeout_tail,\n                     connection);\n      else\n        XDLL_remove (daemon->manual_timeout_head,\n                     daemon->manual_timeout_tail,\n                     connection);\n    }\n    DLL_remove (daemon->connections_head,\n                daemon->connections_tail,\n                connection);\n  }\n  DLL_insert (daemon->cleanup_head,\n              daemon->cleanup_tail,\n              connection);\n  connection->resuming = false;\n  connection->in_idle = false;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if (MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n  {\n    /* if we were at the connection limit before and are in\n       thread-per-connection mode, signal the main thread\n       to resume accepting connections */\n    if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n         (! MHD_itc_activate_ (daemon->itc, \"c\")) )\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to signal end of connection via inter-thread \" \\\n                   \"communication channel.\\n\"));\n#endif\n    }\n  }\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'cleanup_connection': {'callees': ['MHD_destroy_response', '__builtin_unreachable', 'MHD_DLOG'], 'callers': ['MHD_connection_handle_idle', 'MHD_connection_epoll_update_']}, 'MHD_destroy_response': {'callees': ['__builtin_unreachable'], 'callers': ['MHD_connection_close_', 'transmit_error_response_len', 'cleanup_connection', 'connection_reset', 'MHD_connection_handle_idle', 'thread_main_handle_connection', 'MHD_cleanup_connections', 'MHD_create_response_for_upgrade', 'main', 'ahc_echo', 'answer_to_connection', 'serve_simple_form', 'fill_v1_form', 'fill_v1_v2_form', 'not_found_page', 'create_response', 'update_cached_response', 'generate_page', 'reply_with_page_not_found', 'reply_with_auth_required', 'reply_with_forbidden', 'reply_with_area1_pages', 'reply_with_area2_pages', 'reply_with_main_page', 'reply_with_method_not_supported', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'ahc_cb', 'init_data', 'deinit_data', 'answer_unique_empty_response', 'answer_unique_tiny_response', 'answer_unique_dyn_response', 'send_page']}, '__builtin_unreachable': {'callees': [], 'callers': ['try_ready_normal_body', 'try_ready_chunked_body', 'process_request_body', 'MHD_update_last_activity_', 'MHD_connection_handle_write', 'cleanup_connection', 'MHD_connection_handle_idle', 'MHD_set_connection_option', 'MHD_ip_count_lock', 'MHD_ip_count_unlock', 'MHD_ip_limit_del', 'new_connection_prepare_', 'new_connection_close_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'internal_suspend_connection_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_cleanup_connections', 'MHD_epoll', 'close_connection', 'MHD_quiesce_daemon', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_stop_daemon', 'MHD_create_response_from_iovec', 'MHD_destroy_response', 'MHD_increment_response_rc', 'MHD_create_post_processor', 'post_process_urlencoded', 'post_process_multipart', 'check_nonce_nc', 'calculate_add_nonce', 'digest_auth_check_all_inner', 'MHD_digest_auth_check_digest3', 'MHD_digest_auth_check2', 'MHD_digest_auth_check_digest2', 'queue_auth_required_response3_inner', 'MHD_queue_auth_fail_response2']}, 'MHD_DLOG': {'callees': [], 'callers': ['connection_close_error', 'check_connection_reply', 'transmit_error_response_len', 'connection_add_header', 'parse_cookie_header', 'process_request_body', 'parse_connection_headers', 'get_req_header', 'get_req_headers', 'MHD_connection_handle_read', 'MHD_connection_handle_write', 'connection_check_timedout', 'cleanup_connection', 'MHD_connection_epoll_update_', 'MHD_queue_response', 'MHD_ip_limit_add', 'MHD_get_fdset2', 'thread_main_handle_connection', 'new_connection_prepare_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_get_timeout64', 'MHD_run_from_select2', 'MHD_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll', 'MHD_polling_thread', 'unescape_wrapper', 'MHD_quiesce_daemon', 'parse_options_va', 'setup_epoll_fd', 'setup_epoll_to_listen', 'process_interim_params', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_connection_set_nodelay_state_', 'MHD_connection_set_cork_state_', 'post_send_setopt', 'MHD_response_execute_upgrade_', 'MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_', 'calculate_add_nonce_with_retry', 'check_uri_match', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner', 'MHD_basic_auth_get_username_password3', 'MHD_basic_auth_get_username_password', 'MHD_queue_basic_auth_required_response3']}, 'MHD_connection_handle_idle': {'callees': ['get_request_line', 'switch_to_rq_headers_processing', 'get_req_headers', 'parse_connection_headers', 'call_connection_handler', 'need_100_continue', 'process_request_body', 'reset_rq_header_processing_state', 'connection_switch_from_recv_to_send', 'build_header_response', 'connection_close_error', 'MHD_response_execute_upgrade_', 'MHD_destroy_response', '__builtin_unreachable', 'try_ready_normal_body', 'try_ready_chunked_body', 'build_connection_chunked_response_footer', 'connection_reset', 'cleanup_connection', 'connection_check_timedout', 'MHD_connection_close_', 'MHD_connection_update_event_loop_info', 'MHD_connection_epoll_update_'], 'callers': ['MHD_queue_response', 'call_handlers', 'thread_main_handle_connection', 'MHD_epoll']}, 'MHD_connection_epoll_update_': {'callees': ['MHD_DLOG', 'cleanup_connection'], 'callers': ['MHD_connection_handle_idle']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_Connection",
    "struct MHD_Daemon",
    "mhd_assert",
    "MHD_D_IS_USING_THREADS_",
    "MHD_thread_handle_ID_is_current_thread_",
    "MHD_destroy_response",
    "MHD_mutex_lock_chk_",
    "MHD_mutex_unlock_chk_",
    "DLL_remove",
    "DLL_insert",
    "XDLL_remove",
    "MHD_D_IS_USING_THREAD_PER_CONN_",
    "MHD_ITC_IS_VALID_",
    "MHD_itc_activate_",
    "MHD_DLOG",
    "_ (gettext)",
    "MHD_USE_THREADS",
    "MHD_USE_POSIX_THREADS",
    "MHD_USE_W32_THREADS",
    "HAVE_MESSAGES"
  ],
  "explanation": "For verifying whether cleanup_connection uses any compiler language extensions you must inspect the definitions of all macros, inline wrappers and data types referenced by the function, because extension usage is usually hidden in those definitions. Reason for each symbol:\n\n- struct MHD_Connection: The function manipulates fields of this type (flags, pointers, timeout fields). The type definition can contain extensions (anonymous structs/unions, GCC attributes, flexible-array members, bit-field widths, packed/aligned attributes) so it must be checked.\n\n- struct MHD_Daemon: The daemon structure fields (mutex, list heads, timeouts, itc, worker_pool) are accessed. Its definition may include compiler-specific attributes or anonymous/embedded constructs that are extensions.\n\n- mhd_assert: Assertion macros frequently expand to compiler builtins (e.g. __builtin_unreachable), statement-expressions ({ ... }), or use __attribute__ extensions. Inspect the macro to detect such extensions.\n\n- MHD_D_IS_USING_THREADS_: This predicate is a macro or inline helper used in precondition checks. Its expansion could employ compiler extensions (statement-expr, typeof, builtins); verify its definition.\n\n- MHD_thread_handle_ID_is_current_thread_: Likely a function/macro to compare thread IDs; its implementation may use thread-local storage, compiler builtins or platform-specific extensions\u2014must check.\n\n- MHD_destroy_response: Called from cleanup_connection. Its implementation may use compiler builtins (e.g. __builtin_unreachable), inline asm, attributes, or other extensions; check the function body and prototypes.\n\n- MHD_mutex_lock_chk_: Wrapper used under thread builds. The wrapper/macro may use attributes, builtins, or statement-expressions\u2014inspect for extensions (and similarly for the unlock variant).\n\n- MHD_mutex_unlock_chk_: See above for lock; both wrappers can hide extensions.\n\n- DLL_remove: Doubly-linked-list manipulation macro/function. List macros in C libraries often use GNU statement-expressions, typeof, or compound literals\u2014check the macro/inline function for extensions.\n\n- DLL_insert: Same rationale as DLL_remove: list insertion macros often use nonstandard constructs.\n\n- XDLL_remove: Variant used for timeout lists; may likewise use macros with statement-expr/typeof or other extensions\u2014inspect definition.\n\n- MHD_D_IS_USING_THREAD_PER_CONN_: Macro/predicate tested at runtime. Its implementation could employ extensions; check definition.\n\n- MHD_ITC_IS_VALID_: Macro/check for inter-thread channel validity. Its expansion could reference compiler builtins or use nonstandard constructs\u2014inspect it.\n\n- MHD_itc_activate_: Function/macro used to signal the main thread; implementation may use atomic builtins, inline asm, or other extensions\u2014verify.\n\n- MHD_DLOG: Logging macro; logging macros often use variadic macros, GCC format attribute, or __builtin_constant_p, statement-expr, etc. Check its definition for any compiler-specific extensions.\n\n- _ (gettext): The _() macro/function for translations can be a macro or function; if defined as a macro it might use extensions\u2014verify its definition.\n\n- MHD_USE_THREADS, MHD_USE_POSIX_THREADS, MHD_USE_W32_THREADS: These compile-time macros control inclusion of code paths that may contain extensions. You must inspect the conditionalized code (their definitions/configuration) for extensions when enabled.\n\n- HAVE_MESSAGES: Controls inclusion of DLOG message code. If defined, additional macros (MHD_DLOG/_()) are compiled in; check those bodies for extensions.\n\nIn short: any macro, inline wrapper or type accessed by cleanup_connection can hide compiler-specific extensions. The listed symbols are the minimal set whose definitions must be inspected to determine whether any language extensions are used by the target function."
}