{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_get_fdset (struct MHD_Daemon *daemon,\n               fd_set *read_fd_set,\n               fd_set *write_fd_set,\n               fd_set *except_fd_set,\n               MHD_socket *max_fd)\n{\n  return MHD_get_fdset2 (daemon,\n                         read_fd_set,\n                         write_fd_set,\n                         except_fd_set,\n                         max_fd,\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n                         daemon->fdset_size_set_by_app ?\n                         ((unsigned int) daemon->fdset_size) :\n                         ((unsigned int) _MHD_SYS_DEFAULT_FD_SETSIZE)\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n                         ((unsigned int) _MHD_SYS_DEFAULT_FD_SETSIZE)\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n                         );\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_get_fdset': {'callees': ['MHD_get_fdset2'], 'callers': []}, 'MHD_get_fdset2': {'callees': ['MHD_DLOG', 'MHD_add_to_fd_set_', 'internal_get_fdset2'], 'callers': ['MHD_get_fdset', 'main']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_EXTERN",
    "enum MHD_Result",
    "MHD_get_fdset2 (declaration/definition)",
    "struct MHD_Daemon",
    "MHD_socket",
    "HAS_FD_SETSIZE_OVERRIDABLE",
    "_MHD_SYS_DEFAULT_FD_SETSIZE",
    "fd_set"
  ],
  "explanation": "Explain why each symbol is required to check for compiler language extensions in the target function:\n\n- _MHD_EXTERN\n  - This macro appears in the function definition position where compiler-specific storage-class or linkage attributes are often placed (for example __declspec, __attribute__((visibility)), or __extension__). Its expansion must be inspected to determine whether a compiler-specific extension is used.\n\n- enum MHD_Result\n  - The function return type could be an enum that was declared using non\u2011standard/extended enum features (explicit underlying type, compiler attributes on the enum). Inspecting the enum declaration is required to detect such extensions.\n\n- MHD_get_fdset2 (declaration/definition)\n  - The call passes through this function; its prototype/declaration can contain compiler-specific extensions (attributes like __attribute__((...)), calling\u2011convention annotations, or nonstandard parameter types). Also the target function\u2019s call relies on that signature being valid \u2014 any extension in that declaration makes the target function use an extension.\n\n- struct MHD_Daemon\n  - The parameter type is a pointer to this struct and the code reads its members (fdset_size_set_by_app, fdset_size). The struct definition may use compiler extensions (anonymous/unnamed members, attributes on members, packed/packed\u2011attribute pragmas, bitfield widths using nonstandard types) that would make the function use language extensions via its parameter type or member access.\n\n- MHD_socket\n  - This typedef/name is used as a parameter type (max_fd). Its underlying definition might use implementation extensions (platform typedefs, compiler\u2011specific integer types, __int128, or attributes). The typedef must be checked for extensions.\n\n- HAS_FD_SETSIZE_OVERRIDABLE\n  - This macro governs conditional compilation of an argument. Its definition or the code it enables may introduce extensions (e.g., use of extension macros, _Pragma, or nonstandard constructs). You must see how it is defined to determine if the enabled branch uses extensions.\n\n- _MHD_SYS_DEFAULT_FD_SETSIZE\n  - This macro supplies a numeric constant used in the call. Its definition might expand to compiler extensions or platform\u2011specific expressions (e.g., use of sizeof on types that require extensions, or use of __extension__). Inspecting it ensures no extension is introduced through this constant.\n\n- fd_set\n  - This is a system type used in the parameter list. Its definition (from system headers) could use implementation\u2011specific constructs or macros. To be certain the function signature and usage are free of compiler extensions, inspect fd_set\u2019s definition.\n\n(Collectively these symbols cover all macro expansions, typedefs, struct/enum declarations, and called-function prototypes that can introduce compiler-specific language extensions into the target function.)"
}