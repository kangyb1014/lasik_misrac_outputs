{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of get_date_str:\n```c\nstatic bool\nget_date_str (char *date)\n{\n  static const char *const days[] = {\n    \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"\n  };\n  static const char *const mons[] = {\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n  };\n  static const size_t buf_len = 29;\n  struct tm now;\n  time_t t;\n  const char *src;\n#if ! defined(HAVE_C11_GMTIME_S) && ! defined(HAVE_W32_GMTIME_S) && \\\n  ! defined(HAVE_GMTIME_R)\n  struct tm *pNow;\n#endif\n\n  if ((time_t) -1 == time (&t))\n    return false;\n#if defined(HAVE_C11_GMTIME_S)\n  if (NULL == gmtime_s (&t,\n                        &now))\n    return false;\n#elif defined(HAVE_W32_GMTIME_S)\n  if (0 != gmtime_s (&now,\n                     &t))\n    return false;\n#elif defined(HAVE_GMTIME_R)\n  if (NULL == gmtime_r (&t,\n                        &now))\n    return false;\n#else\n  pNow = gmtime (&t);\n  if (NULL == pNow)\n    return false;\n  now = *pNow;\n#endif\n\n  /* Day of the week */\n  src = days[now.tm_wday % 7];\n  date[0] = src[0];\n  date[1] = src[1];\n  date[2] = src[2];\n  date[3] = ',';\n  date[4] = ' ';\n  /* Day of the month */\n  if (2 != MHD_uint8_to_str_pad ((uint8_t) now.tm_mday, 2,\n                                 date + 5, buf_len - 5))\n    return false;\n  date[7] = ' ';\n  /* Month */\n  src = mons[now.tm_mon % 12];\n  date[8] = src[0];\n  date[9] = src[1];\n  date[10] = src[2];\n  date[11] = ' ';\n  /* Year */\n  if (4 != MHD_uint16_to_str ((uint16_t) (1900 + now.tm_year), date + 12,\n                              buf_len - 12))\n    return false;\n  date[16] = ' ';\n  /* Time */\n  MHD_uint8_to_str_pad ((uint8_t) now.tm_hour, 2, date + 17, buf_len - 17);\n  date[19] = ':';\n  MHD_uint8_to_str_pad ((uint8_t) now.tm_min, 2, date + 20, buf_len - 20);\n  date[22] = ':';\n  MHD_uint8_to_str_pad ((uint8_t) now.tm_sec, 2, date + 23, buf_len - 23);\n  date[25] = ' ';\n  date[26] = 'G';\n  date[27] = 'M';\n  date[28] = 'T';\n\n  return true;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function get_date_str:\nsize_t\nMHD_uint8_to_str_pad (uint8_t val,\n                      uint8_t min_digits,\n                      char *buf,\n                      size_t buf_size)\n{\n  size_t pos; /**< the position of the current printed digit */\n  int digit;\n  mhd_assert (3 >= min_digits);\n  if (0 == buf_size)\n    return 0;\n\n  pos = 0;\n  digit = val / 100;\n  if (0 == digit)\n  {\n    if (3 <= min_digits)\n      buf[pos++] = '0';\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    val %= 100;\n    min_digits = 2;\n  }\n\n  if (buf_size <= pos)\n    return 0;\n  digit = val / 10;\n  if (0 == digit)\n  {\n    if (2 <= min_digits)\n      buf[pos++] = '0';\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    val %= 10;\n  }\n\n  if (buf_size <= pos)\n    return 0;\n  buf[pos++] = (char) ('0' + (char) val);\n  return pos;\n}\n...\nsize_t\nMHD_uint16_to_str (uint16_t val,\n                   char *buf,\n                   size_t buf_size)\n{\n  char *chr;  /**< pointer to the current printed digit */\n  /* The biggest printable number is 65535 */\n  uint16_t divisor = UINT16_C (10000);\n  int digit;\n\n  chr = buf;\n  digit = (int) (val / divisor);\n  mhd_assert (digit < 10);\n\n  /* Do not print leading zeros */\n  while ((0 == digit) && (1 < divisor))\n  {\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n\n  while (0 != buf_size)\n  {\n    *chr = (char) ((char) digit + '0');\n    chr++;\n    buf_size--;\n    if (1 == divisor)\n      return (size_t) (chr - buf);\n    val = (uint16_t) (val % divisor);\n    divisor /= 10;\n    digit = (int) (val / divisor);\n    mhd_assert (digit < 10);\n  }\n  return 0; /* The buffer is too small */\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmin_digits = 2;\n```\nFocus on the above code fragment and judge whether it violates the rule 17.8 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "In MHD_uint8_to_str_pad the value parameter 'min_digits' is assigned to (min_digits = 2;). This modifies a function parameter (a non-pointer parameter) and therefore violates MISRA C 2023 Rule 17.8."
}