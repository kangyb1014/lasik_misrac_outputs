{
  "user_message": "An agent A claimed that the following fill_v1_form code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of fill_v1_form.\n```c\nstatic enum MHD_Result\nfill_v1_form (const void *cls,\n              const char *mime,\n              struct Session *session,\n              struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  size_t slen;\n  char *reply;\n  struct MHD_Response *response;\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  slen = strlen (MAIN_PAGE) + strlen (session->value_1);\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n    return MHD_NO;\n  snprintf (reply,\n            slen + 1,\n            MAIN_PAGE,\n            session->value_1);\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    free (reply);\n    return MHD_NO;\n  }\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nstrlen(MAIN_PAGE) is safe (MAIN_PAGE is a string literal), but strlen(session->value_1) can read beyond the bounds if session->value_1 is NULL or not NUL-terminated. For example, if session->value_1 is a fixed-size buffer filled with strncpy(src, ..., N) without guaranteeing a terminating '\\0' (or if the pointer is NULL), strlen(session->value_1) will scan past the object boundary and violate Rule 21.17.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function fill_v1_form:\n#define MAIN_PAGE \"<html><head><title>Welcome</title></head><body><form action=\\\"/2\\\" method=\\\"post\\\">What is your name? <input type=\\\"text\\\" name=\\\"v1\\\" value=\\\"%s\\\" /><input type=\\\"submit\\\" value=\\\"Next\\\" /></form></body></html>\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C:2023 Rule 21.17 prohibits invoking the <string.h> string handling functions in a way that can read past the bounds of the objects referenced by their pointer parameters. The function calls strlen(session->value_1) (and later passing session->value_1 to snprintf via the %s format) require that session->value_1 point to a valid, NUL-terminated character array. In the provided code there is no check or invariant in this function that session->value_1 is non-NULL and NUL-terminated. If session->value_1 is NULL, strlen will dereference a NULL pointer; if session->value_1 is a fixed-size buffer that was filled with strncpy without guaranteeing a terminating '\\0', strlen may scan past the buffer boundary \u2014 both are exactly the kinds of out-of-bounds/string-access issues Rule 21.17 forbids. Therefore, unless an external contract (not shown) guarantees session->value_1 is valid and NUL-terminated, the claim of a Rule 21.17 violation is justified. Recommended fixes include validating the pointer (non-NULL), ensuring NUL-termination when the buffer is written, or using a bounded length function (e.g., strnlen or a safe variant) with a known maximum to avoid scanning past the buffer."
}