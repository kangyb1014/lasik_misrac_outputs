{
  "user_message": "An agent A claimed that the following create_response_object code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of create_response_object.\n```c\nstatic struct MHD_Response *\ncreate_response_object (void)\n{\n#if MHD_VERSION >= 0x00097701\n  if (NULL != body_dyn)\n    return MHD_create_response_from_buffer_static (body_dyn_size,\n                                                   body_dyn);\n  else if (tool_params.empty)\n    return MHD_create_response_empty (MHD_RF_NONE);\n\n  return MHD_create_response_from_buffer_static (MHD_STATICSTR_LEN_ (tiny_body),\n                                                 tiny_body);\n\n#else  /* MHD_VERSION < 0x00097701 */\n  if (NULL != body_dyn)\n    return MHD_create_response_from_buffer (body_dyn_size,\n                                            (void *) body_dyn,\n                                            MHD_RESPMEM_PERSISTENT);\n  else if (tool_params.empty)\n    return MHD_create_response_from_buffer (0,\n                                            (void *) tiny_body,\n                                            MHD_RESPMEM_PERSISTENT);\n\n  return MHD_create_response_from_buffer (MHD_STATICSTR_LEN_ (tiny_body),\n                                          (void *) tiny_body,\n                                          MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe object tiny_body is declared as 'static const char tiny_body[] = \"Hi!\";', but here it is cast to '(void *) tiny_body' and passed to MHD_create_response_from_buffer, thereby discarding the const qualifier. This removes the const qualification from the pointer when it could (and should) remain const, which violates MISRA C 2023 Rule 8.13.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function create_response_object:\nstatic char *body_dyn = NULL\n...\nstatic size_t body_dyn_size\n...\nstatic const char tiny_body[] = \"Hi!\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In the MHD_VERSION < 0x00097701 branch the code casts a const object to void * and passes it to MHD_create_response_from_buffer: (void *) tiny_body. tiny_body is declared as static const char tiny_body[] = \"Hi!\"; casting it to void * discards the const qualifier. That is exactly what MISRA C:2023 Rule 8.13 forbids (a pointer should point to a const-qualified type whenever possible). The newer branch (MHD_create_response_from_buffer_static) does not cast and is fine, and body_dyn (non-const char *) is fine; but the explicit (void *) casts of tiny_body in the older branch violate the rule.\n\nPossible fixes: avoid casting away const (use an API that accepts const void * if available), provide a mutable copy of the string, or\u2014if the underlying library truly requires a non-const pointer and will not modify the data\u2014document and justify a deviation from MISRA."
}