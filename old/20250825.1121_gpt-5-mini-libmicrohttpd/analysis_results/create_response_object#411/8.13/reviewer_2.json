{
  "user_message": "An agent A claimed that the following create_response_object code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of create_response_object.\n```c\nstatic struct MHD_Response *\ncreate_response_object (void)\n{\n#if MHD_VERSION >= 0x00097701\n  if (NULL != body_dyn)\n    return MHD_create_response_from_buffer_static (body_dyn_size,\n                                                   body_dyn);\n  else if (tool_params.empty)\n    return MHD_create_response_empty (MHD_RF_NONE);\n\n  return MHD_create_response_from_buffer_static (MHD_STATICSTR_LEN_ (tiny_body),\n                                                 tiny_body);\n\n#else  /* MHD_VERSION < 0x00097701 */\n  if (NULL != body_dyn)\n    return MHD_create_response_from_buffer (body_dyn_size,\n                                            (void *) body_dyn,\n                                            MHD_RESPMEM_PERSISTENT);\n  else if (tool_params.empty)\n    return MHD_create_response_from_buffer (0,\n                                            (void *) tiny_body,\n                                            MHD_RESPMEM_PERSISTENT);\n\n  return MHD_create_response_from_buffer (MHD_STATICSTR_LEN_ (tiny_body),\n                                          (void *) tiny_body,\n                                          MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe object tiny_body is declared as 'static const char tiny_body[]'. In the fragment the code casts it to a non-const pointer: (void *) tiny_body and passes that to MHD_create_response_from_buffer. This removes the const qualification and yields a pointer to a non-const type even though the underlying data is const, which violates MISRA C 2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible).\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function create_response_object:\nstatic char *body_dyn = NULL\n...\nstatic size_t body_dyn_size\n...\nstatic const char tiny_body[] = \"Hi!\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. In the older-MHD branch the code casts the const object tiny_body (declared as static const char tiny_body[]) to (void *), removing the const qualifier and producing a pointer to a non-const type. That is precisely what MISRA C:2023 Rule 8.13 forbids: a pointer should point to a const-qualified type whenever possible. The newer-MHD branch uses the const-correct API (no cast) and is fine, but the MHD_VERSION < 0x00097701 branch violates the rule. The only justifications for keeping this are external API constraints (the legacy MHD API expects a void *), which must be documented as a deviation; otherwise fix by using a const-correct API, passing a non-const copy, or otherwise avoiding the cast."
}