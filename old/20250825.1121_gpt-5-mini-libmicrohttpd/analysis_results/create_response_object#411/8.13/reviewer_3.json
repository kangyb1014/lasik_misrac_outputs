{
  "user_message": "An agent A claimed that the following create_response_object code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of create_response_object.\n```c\nstatic struct MHD_Response *\ncreate_response_object (void)\n{\n#if MHD_VERSION >= 0x00097701\n  if (NULL != body_dyn)\n    return MHD_create_response_from_buffer_static (body_dyn_size,\n                                                   body_dyn);\n  else if (tool_params.empty)\n    return MHD_create_response_empty (MHD_RF_NONE);\n\n  return MHD_create_response_from_buffer_static (MHD_STATICSTR_LEN_ (tiny_body),\n                                                 tiny_body);\n\n#else  /* MHD_VERSION < 0x00097701 */\n  if (NULL != body_dyn)\n    return MHD_create_response_from_buffer (body_dyn_size,\n                                            (void *) body_dyn,\n                                            MHD_RESPMEM_PERSISTENT);\n  else if (tool_params.empty)\n    return MHD_create_response_from_buffer (0,\n                                            (void *) tiny_body,\n                                            MHD_RESPMEM_PERSISTENT);\n\n  return MHD_create_response_from_buffer (MHD_STATICSTR_LEN_ (tiny_body),\n                                          (void *) tiny_body,\n                                          MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe static variable body_dyn is declared as 'char *body_dyn' but is passed (as 'body_dyn') to MHD_create_response_from_buffer_static which takes a read-only buffer parameter (const-qualified pointer). According to MISRA C 2023 Rule 8.13, the pointer should be declared to point to a const-qualified type when possible (e.g. 'const char *body_dyn') to reflect that the callee will not modify the pointed-to data. If body_dyn is not actually modified elsewhere, its current non-const declaration violates Rule 8.13.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function create_response_object:\nstatic char *body_dyn = NULL\n...\nstatic size_t body_dyn_size\n...\nstatic const char tiny_body[] = \"Hi!\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A\u2019s point is essentially correct but needs the usual caveat: MISRA C 2023 Rule 8.13 advises that pointers should point to const-qualified types whenever possible (i.e. where the pointed-to object is not modified through that pointer). In the snippet you showed, body_dyn is declared as\n\n  static char *body_dyn = NULL;\n\nbut in the newer API branch it is passed directly to MHD_create_response_from_buffer_static (which takes a read\u2011only buffer). That use indicates the data is treated as read\u2011only in that call, so if the buffer is never modified elsewhere then body_dyn ought to be declared as const char * to comply with Rule 8.13. In the older API branch the code casts body_dyn to (void *) to call a non\u2011const API; that cast masks the constness and would be better handled by keeping body_dyn const and casting away const only at the call site with a documented justification for the legacy API.\n\nTherefore the report is correct in the sense that there is a Rule 8.13 violation if body_dyn is in fact intended to be read\u2011only (i.e. is not modified elsewhere). If, on the other hand, body_dyn is modified elsewhere in the program (written to via that pointer), then declaring it non\u2011const is appropriate and no 8.13 violation exists. Recommended fix: make body_dyn const char * if it is not modified, and where required for legacy APIs, cast away const at the call site with justification (or update the API usage)."
}