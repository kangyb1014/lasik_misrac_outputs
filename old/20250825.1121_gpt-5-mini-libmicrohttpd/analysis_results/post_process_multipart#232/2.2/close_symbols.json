{
  "user_message": "Target function code is:\n```c\nstatic enum MHD_Result\npost_process_multipart (struct MHD_PostProcessor *pp,\n                        const char *post_data,\n                        size_t post_data_len)\n{\n  char *buf;\n  size_t max;\n  size_t ioff;\n  size_t poff;\n  int state_changed;\n\n  buf = (char *) &pp[1];\n  ioff = 0;\n  poff = 0;\n  state_changed = 1;\n  while ( (poff < post_data_len) ||\n          ( (pp->buffer_pos > 0) &&\n            (0 != state_changed) ) )\n  {\n    /* first, move as much input data\n       as possible to our internal buffer */\n    max = pp->buffer_size - pp->buffer_pos;\n    if (max > post_data_len - poff)\n      max = post_data_len - poff;\n    memcpy (&buf[pp->buffer_pos],\n            &post_data[poff],\n            max);\n    poff += max;\n    pp->buffer_pos += max;\n    if ( (0 == max) &&\n         (0 == state_changed) &&\n         (poff < post_data_len) )\n    {\n      pp->state = PP_Error;\n      return MHD_NO;            /* out of memory */\n    }\n    state_changed = 0;\n\n    /* first state machine for '\\r'-'\\n' and '--' handling */\n    switch (pp->skip_rn)\n    {\n    case RN_Inactive:\n      break;\n    case RN_OptN:\n      if (buf[0] == '\\n')\n      {\n        ioff++;\n        pp->skip_rn = RN_Inactive;\n        goto AGAIN;\n      }\n    /* fall-through! */\n    case RN_Dash:\n      if (buf[0] == '-')\n      {\n        ioff++;\n        pp->skip_rn = RN_Dash2;\n        goto AGAIN;\n      }\n      pp->skip_rn = RN_Full;\n    /* fall-through! */\n    case RN_Full:\n      if (buf[0] == '\\r')\n      {\n        if ( (pp->buffer_pos > 1) &&\n             ('\\n' == buf[1]) )\n        {\n          pp->skip_rn = RN_Inactive;\n          ioff += 2;\n        }\n        else\n        {\n          pp->skip_rn = RN_OptN;\n          ioff++;\n        }\n        goto AGAIN;\n      }\n      if (buf[0] == '\\n')\n      {\n        ioff++;\n        pp->skip_rn = RN_Inactive;\n        goto AGAIN;\n      }\n      pp->skip_rn = RN_Inactive;\n      pp->state = PP_Error;\n      return MHD_NO;            /* no '\\r\\n' */\n    case RN_Dash2:\n      if (buf[0] == '-')\n      {\n        ioff++;\n        pp->skip_rn = RN_Full;\n        pp->state = pp->dash_state;\n        goto AGAIN;\n      }\n      pp->state = PP_Error;\n      break;\n    }\n\n    /* main state engine */\n    switch (pp->state)\n    {\n    case PP_Error:\n      return MHD_NO;\n    case PP_Done:\n      /* did not expect to receive more data */\n      pp->state = PP_Error;\n      return MHD_NO;\n    case PP_Init:\n      /**\n       * Per RFC2046 5.1.1 NOTE TO IMPLEMENTORS, consume anything\n       * prior to the first multipart boundary:\n       *\n       * > There appears to be room for additional information prior\n       * > to the first boundary delimiter line and following the\n       * > final boundary delimiter line.  These areas should\n       * > generally be left blank, and implementations must ignore\n       * > anything that appears before the first boundary delimiter\n       * > line or after the last one.\n       */\n      (void) find_boundary (pp,\n                            pp->boundary,\n                            pp->blen,\n                            &ioff,\n                            PP_ProcessEntryHeaders,\n                            PP_Done);\n      break;\n    case PP_NextBoundary:\n      if (MHD_NO == find_boundary (pp,\n                                   pp->boundary,\n                                   pp->blen,\n                                   &ioff,\n                                   PP_ProcessEntryHeaders,\n                                   PP_Done))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        goto END;\n      }\n      break;\n    case PP_ProcessEntryHeaders:\n      pp->must_ikvi = true;\n      if (MHD_NO ==\n          process_multipart_headers (pp,\n                                     &ioff,\n                                     PP_PerformCheckMultipart))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        else\n          goto END;\n      }\n      state_changed = 1;\n      break;\n    case PP_PerformCheckMultipart:\n      if ( (NULL != pp->content_type) &&\n           (MHD_str_equal_caseless_n_ (pp->content_type,\n                                       \"multipart/mixed\",\n                                       MHD_STATICSTR_LEN_ (\"multipart/mixed\"))))\n      {\n        pp->nested_boundary = strstr (pp->content_type,\n                                      \"boundary=\");\n        if (NULL == pp->nested_boundary)\n        {\n          pp->state = PP_Error;\n          return MHD_NO;\n        }\n        pp->nested_boundary =\n          strdup (&pp->nested_boundary[MHD_STATICSTR_LEN_ (\"boundary=\")]);\n        if (NULL == pp->nested_boundary)\n        {\n          /* out of memory */\n          pp->state = PP_Error;\n          return MHD_NO;\n        }\n        /* free old content type, we will need that field\n           for the content type of the nested elements */\n        free (pp->content_type);\n        pp->content_type = NULL;\n        pp->nlen = strlen (pp->nested_boundary);\n        pp->state = PP_Nested_Init;\n        state_changed = 1;\n        break;\n      }\n      pp->state = PP_ProcessValueToBoundary;\n      pp->value_offset = 0;\n      state_changed = 1;\n      break;\n    case PP_ProcessValueToBoundary:\n      if (MHD_NO == process_value_to_boundary (pp,\n                                               &ioff,\n                                               pp->boundary,\n                                               pp->blen,\n                                               PP_PerformCleanup,\n                                               PP_Done))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        break;\n      }\n      break;\n    case PP_PerformCleanup:\n      /* clean up state of one multipart form-data element! */\n      pp->have = NE_none;\n      free_unmarked (pp);\n      if (NULL != pp->nested_boundary)\n      {\n        free (pp->nested_boundary);\n        pp->nested_boundary = NULL;\n      }\n      pp->state = PP_ProcessEntryHeaders;\n      state_changed = 1;\n      break;\n    case PP_Nested_Init:\n      if (NULL == pp->nested_boundary)\n      {\n        pp->state = PP_Error;\n        return MHD_NO;\n      }\n      if (MHD_NO == find_boundary (pp,\n                                   pp->nested_boundary,\n                                   pp->nlen,\n                                   &ioff,\n                                   PP_Nested_PerformMarking,\n                                   PP_NextBoundary /* or PP_Error? */))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        goto END;\n      }\n      break;\n    case PP_Nested_PerformMarking:\n      /* remember what headers were given\n         globally */\n      pp->have = NE_none;\n      if (NULL != pp->content_name)\n        pp->have |= NE_content_name;\n      if (NULL != pp->content_type)\n        pp->have |= NE_content_type;\n      if (NULL != pp->content_filename)\n        pp->have |= NE_content_filename;\n      if (NULL != pp->content_transfer_encoding)\n        pp->have |= NE_content_transfer_encoding;\n      pp->state = PP_Nested_ProcessEntryHeaders;\n      state_changed = 1;\n      break;\n    case PP_Nested_ProcessEntryHeaders:\n      pp->value_offset = 0;\n      if (MHD_NO ==\n          process_multipart_headers (pp,\n                                     &ioff,\n                                     PP_Nested_ProcessValueToBoundary))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        else\n          goto END;\n      }\n      state_changed = 1;\n      break;\n    case PP_Nested_ProcessValueToBoundary:\n      if (MHD_NO == process_value_to_boundary (pp,\n                                               &ioff,\n                                               pp->nested_boundary,\n                                               pp->nlen,\n                                               PP_Nested_PerformCleanup,\n                                               PP_NextBoundary))\n      {\n        if (pp->state == PP_Error)\n          return MHD_NO;\n        break;\n      }\n      break;\n    case PP_Nested_PerformCleanup:\n      free_unmarked (pp);\n      pp->state = PP_Nested_ProcessEntryHeaders;\n      state_changed = 1;\n      break;\n    case PP_ProcessKey:\n    case PP_ProcessValue:\n    case PP_Callback:\n    default:\n      MHD_PANIC (_ (\"internal error.\\n\")); /* should never happen! */\n    }\nAGAIN:\n    if (ioff > 0)\n    {\n      memmove (buf,\n               &buf[ioff],\n               pp->buffer_pos - ioff);\n      pp->buffer_pos -= ioff;\n      ioff = 0;\n      state_changed = 1;\n    }\n  }\nEND:\n  if (0 != ioff)\n  {\n    memmove (buf,\n             &buf[ioff],\n             pp->buffer_pos - ioff);\n    pp->buffer_pos -= ioff;\n  }\n  if (poff < post_data_len)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* serious error */\n  }\n  return MHD_YES;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'post_process_multipart': {'callees': ['find_boundary', 'process_multipart_headers', 'MHD_str_equal_caseless_n_', 'process_value_to_boundary', 'free_unmarked', '__builtin_unreachable'], 'callers': ['MHD_post_process']}, 'find_boundary': {'callees': [], 'callers': ['post_process_multipart']}, 'process_multipart_headers': {'callees': ['MHD_str_equal_caseless_n_', 'try_get_value', 'try_match_header'], 'callers': ['post_process_multipart']}, 'MHD_str_equal_caseless_n_': {'callees': ['charsequalcaseless'], 'callers': ['MHD_create_post_processor', 'try_match_header', 'process_multipart_headers', 'post_process_multipart', 'MHD_post_process']}, 'process_value_to_boundary': {'callees': [], 'callers': ['post_process_multipart']}, 'free_unmarked': {'callees': [], 'callers': ['post_process_multipart', 'MHD_destroy_post_processor']}, '__builtin_unreachable': {'callees': [], 'callers': ['try_ready_normal_body', 'try_ready_chunked_body', 'process_request_body', 'MHD_update_last_activity_', 'MHD_connection_handle_write', 'cleanup_connection', 'MHD_connection_handle_idle', 'MHD_set_connection_option', 'MHD_ip_count_lock', 'MHD_ip_count_unlock', 'MHD_ip_limit_del', 'new_connection_prepare_', 'new_connection_close_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'internal_suspend_connection_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_cleanup_connections', 'MHD_epoll', 'close_connection', 'MHD_quiesce_daemon', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_stop_daemon', 'MHD_create_response_from_iovec', 'MHD_destroy_response', 'MHD_increment_response_rc', 'MHD_create_post_processor', 'post_process_urlencoded', 'post_process_multipart', 'check_nonce_nc', 'calculate_add_nonce', 'digest_auth_check_all_inner', 'MHD_digest_auth_check_digest3', 'MHD_digest_auth_check2', 'MHD_digest_auth_check_digest2', 'queue_auth_required_response3_inner', 'MHD_queue_auth_fail_response2']}, 'MHD_post_process': {'callees': ['MHD_str_equal_caseless_n_', 'post_process_urlencoded', 'post_process_multipart'], 'callers': ['create_response', 'generate_page', 'answer_to_connection']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA project shall not contain dead code. Any operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_PostProcessor (full definition / layout and all fields accessed)",
    "enum PP_State values (PP_Error, PP_Done, PP_Init, PP_NextBoundary, PP_ProcessEntryHeaders, PP_PerformCheckMultipart, PP_ProcessValueToBoundary, PP_PerformCleanup, PP_Nested_Init, PP_Nested_PerformMarking, PP_Nested_ProcessEntryHeaders, PP_Nested_ProcessValueToBoundary, PP_Nested_PerformCleanup, PP_ProcessKey, PP_ProcessValue, PP_Callback)",
    "enum RN_State values (RN_Inactive, RN_OptN, RN_Dash, RN_Dash2, RN_Full)",
    "NE_* flags (NE_none, NE_content_name, NE_content_type, NE_content_filename, NE_content_transfer_encoding)",
    "find_boundary (prototype and precise side effects on pp and ioff)",
    "process_multipart_headers (prototype and precise side effects on pp, returned values and when it changes pp->state)",
    "process_value_to_boundary (prototype and precise side effects on pp and returned values)",
    "free_unmarked (prototype and precise side effects, what it frees/marks)",
    "MHD_str_equal_caseless_n_ and underlying charsequalcaseless (semantics and whether it modifies memory)",
    "MHD_STATICSTR_LEN_ macro/semantics (how length constants are computed)",
    "strdup, free, strlen (semantics as used here, allocation/failure behaviour)",
    "memcpy, memmove (semantics as used here, and whether buffer aliasing / overlapping is possible)",
    "MHD_YES and MHD_NO constants (their meaning and any side effects)",
    "MHD_create_post_processor (allocator/initializer semantics and layout that make buf == (char*)&pp[1] valid)",
    "MHD_PANIC/_ macros (their behaviour: abort/logging or no-op)"
  ],
  "explanation": "For determining whether any operations in post_process_multipart are dead (i.e. executed but removable without changing program behaviour) we must know all symbols that affect observable behaviour or control flow: \n\n- struct MHD_PostProcessor (full definition): the function reads/writes many pp fields (buffer_size, buffer_pos, skip_rn, state, dash_state, boundary, blen, nested_boundary, nlen, content_type, content_name, content_filename, content_transfer_encoding, must_ikvi, have, value_offset). Whether stores/reads are observable or removable depends on the precise struct layout, types and which fields are externally visible. Also buf is computed from &pp[1], so the allocation layout matters.\n\n- enum PP_State values: the big switch dispatches on pp->state. To decide if any case is dead or removable we must know all enumerators, their numeric values, and whether other code sets them; this determines reachability and side effects of state transitions.\n\n- enum RN_State values: the initial small state machine (skip_rn) drives many goto/returns; their exact semantics and possible incoming values determine whether branches are ever executed and whether their bodies are removable.\n\n- NE_* flags: pp->have is used and passed to free_unmarked; to decide if setting pp->have or checking content_* fields is dead we must know the semantics of these flags.\n\n- find_boundary: it is called repeatedly and can modify pp->state and ioff and have observable side effects (advance parsing, return MHD_NO). Whether calls are necessary or redundant depends on its exact side effects and return conventions.\n\n- process_multipart_headers: it parses headers and sets many pp fields (content_type, content_name, etc.) and pp->state. Its side effects determine whether surrounding assignments/branches are required.\n\n- process_value_to_boundary: it consumes values, updates value_offset and pp->state. To know if loops and memmoves/memcpy that feed it are needed we must know its behaviour and when it returns MHD_NO vs MHD_YES.\n\n- free_unmarked: called to release resources; whether those frees are observable (and thus not dead) requires its exact freeing semantics (which fields freed, whether it affects external state).\n\n- MHD_str_equal_caseless_n_ / charsequalcaseless: used to detect multipart/mixed; its return influences the nested-boundary path. Need to know if it can have side effects or fail, and exact matching semantics (length handling) to decide reachability of nested handling code.\n\n- MHD_STATICSTR_LEN_ macro: length constant used to locate substring; affects correctness of nested_boundary pointer arithmetic and thus whether nested branch can run.\n\n- strdup, free, strlen: memory allocation/free behaviour matters for side effects (out-of-memory paths set pp->state = PP_Error and return MHD_NO). Removing calls that allocate/free could change memory behaviour.\n\n- memcpy, memmove: these perform the internal buffering and sliding window. Whether these memory operations are required (or could be removed without effect) depends on how the parser functions consume buf and on aliasing/overlap rules; memmove is used to compact the buffer and its removal could change subsequent reads.\n\n- MHD_YES / MHD_NO constants: used as return values; their meaning (and any documented side effects) is necessary to assess whether certain early returns are semantically significant.\n\n- MHD_create_post_processor (allocator/initializer): the function that allocates/initializes pp and its buffer determines the invariant buf == (char*)&pp[1] and initial values of pp fields. To decide if buffer-related operations are dead you must know how pp is constructed and who observes the buffer.\n\n- MHD_PANIC and _ macros: invoked in default/unexpected cases; if they abort/log, those calls are observable and cannot be removed; if they are no-op in some builds they might be dead. Knowing their semantics is required to classify that code.\n\nEach listed symbol either affects control flow, has observable side effects (memory allocation/freeing, state changes), or defines invariants used by post_process_multipart; without their precise definitions/semantics you cannot reliably decide whether particular operations in this function are dead under MISRA C rule."
}