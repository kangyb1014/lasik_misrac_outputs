{
  "user_message": "An agent A claimed that the following digest_get_size code violates the MISRA C 2023 rule 2.1.\n<misra_rule>\nMISRA C 2023 Rule 2.1 is A project shall not contain unreachable code.\n\n</misra_rule>\n<target_code>\nHere is the original code of digest_get_size.\n```c\n_MHD_static_inline unsigned int\ndigest_get_size (struct DigestAlgorithm *da)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    return MD5_DIGEST_SIZE;\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    return SHA256_DIGEST_SIZE;\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    return SHA512_256_DIGEST_SIZE;\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0); /* May not happen */\n  return 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf mhd_assert expands to a non\u2011returning assertion handler (for example, it calls abort or __assert_fail when the condition is false, as in many assert implementations) then the statement mhd_assert(0); never returns. In that case the subsequent 'return 0;' can never be executed and is therefore unreachable \u2014 a violation of MISRA C 2023 Rule 2.1.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A\u2019s report is correct for the scenario described. MISRA C:2023 Rule 2.1 forbids unreachable code in the project. If, in the actual project configuration, mhd_assert expands to a non\u2011returning handler (for example it calls abort or __assert_fail unconditionally when its argument is false), then the call mhd_assert(0); will not return and the subsequent return 0; is provably unreachable \u2014 a breach of Rule 2.1. Whether a violation actually exists depends on the project\u2019s definition of mhd_assert and the build configuration (with a noop assert the return remains reachable), but under the asserted condition (a non\u2011returning assert) the report is correct."
}