{
  "user_message": "Target function code is:\n```c\n_MHD_static_inline unsigned int\ndigest_get_size (struct DigestAlgorithm *da)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n    return MD5_DIGEST_SIZE;\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n    return SHA256_DIGEST_SIZE;\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n    return SHA512_256_DIGEST_SIZE;\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0); /* May not happen */\n  return 0;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'digest_get_size': {'callees': [], 'callers': ['calculate_nonce', 'calculate_add_nonce', 'calculate_add_nonce_with_retry', 'MHD_digest_auth_calc_userdigest', 'MHD_digest_auth_calc_userhash', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner']}, 'calculate_nonce': {'callees': ['MHD_bin_to_hex', 'digest_get_size', 'digest_update', 'digest_update_with_colon', 'digest_update_str', 'digest_calc_hash'], 'callers': ['calculate_add_nonce', 'digest_auth_check_all_inner']}, 'calculate_add_nonce': {'callees': ['MHD_get_master', 'digest_get_size', 'calculate_nonce', 'get_nonce_nc_idx', '__builtin_unreachable', 'is_slot_available'], 'callers': ['calculate_add_nonce_with_retry']}, 'calculate_add_nonce_with_retry': {'callees': ['MHD_monotonic_msec_counter', 'MHD_get_master', 'MHD_DLOG', 'calculate_add_nonce', 'digest_get_size', '__builtin_rotateleft32', 'digest_reset'], 'callers': ['queue_auth_required_response3_inner']}, 'MHD_digest_auth_calc_userdigest': {'callees': ['digest_init_one_time', 'get_base_digest_algo', 'digest_get_size', 'calc_userdigest'], 'callers': ['add_new_user_entry']}, 'MHD_digest_auth_calc_userhash': {'callees': ['digest_init_one_time', 'get_base_digest_algo', 'digest_get_size', 'calc_userhash'], 'callers': ['MHD_digest_auth_calc_userhash_hex', 'add_new_user_entry']}, 'digest_auth_check_all_inner': {'callees': ['MHD_get_master', 'MHD_get_rq_dauth_params_', 'MHD_DLOG', 'digest_init_one_time', 'get_base_digest_algo', '__builtin_unreachable', 'digest_get_size', 'is_param_equal', 'get_buffer_for_size', 'get_rq_extended_uname_copy_z', 'calc_userhash', 'MHD_bin_to_hex', 'is_param_equal_caseless', 'digest_reset', 'get_unquoted_param', 'MHD_strx_to_uint64_n_', 'get_nonce_timestamp', 'MHD_monotonic_msec_counter', 'check_nonce_nc', 'digest_update_str', 'digest_update_with_colon', 'get_unquoted_param_copy', 'digest_update', 'check_uri_match', 'digest_calc_hash', 'calc_userdigest', 'MHD_hex_to_bin', 'calculate_nonce'], 'callers': ['digest_auth_check_all']}, 'queue_auth_required_response3_inner': {'callees': ['MHD_DLOG', '__builtin_unreachable', 'digest_init_one_time', 'get_base_digest_algo', 'MHD_get_master', 'digest_get_size', 'MHD_str_quote', 'calculate_add_nonce_with_retry', 'MHD_queue_response'], 'callers': ['MHD_queue_auth_required_response3']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_static_inline",
    "mhd_assert",
    "struct DigestAlgorithm",
    "MHD_MD5_SUPPORT",
    "MHD_SHA256_SUPPORT",
    "MHD_SHA512_256_SUPPORT",
    "MHD_DIGEST_BASE_ALGO_MD5",
    "MHD_DIGEST_BASE_ALGO_SHA256",
    "MHD_DIGEST_BASE_ALGO_SHA512_256",
    "MD5_DIGEST_SIZE",
    "SHA256_DIGEST_SIZE",
    "SHA512_256_DIGEST_SIZE",
    "__builtin_unreachable",
    "__attribute__",
    "__inline__",
    "__always_inline",
    "__declspec"
  ],
  "explanation": "For verifying whether digest_get_size uses any compiler language extensions you must inspect the macros, types and any builtin/attribute usage that could expand to non-standard constructs: \n\n- _MHD_static_inline: likely a macro that controls linkage/inline semantics; may expand to compiler-specific keywords or attributes (e.g. __inline__, __attribute__((always_inline)), __declspec). Inspecting its definition is required to detect extension use. \n\n- mhd_assert: a macro used twice in the function. Its expansion may invoke compiler builtins (e.g. __builtin_unreachable) or other extension constructs; check its definition. \n\n- struct DigestAlgorithm: the function accesses members (uninitialised, algo_selected, algo). The struct definition may use compiler extensions (packed, bitfields with implementation-defined widths, attributes, anonymous unions/structs). \n\n- MHD_MD5_SUPPORT, MHD_SHA256_SUPPORT, MHD_SHA512_256_SUPPORT: preprocessor configuration macros that enable/disable blocks. Their presence governs which code is compiled; you must know which branch actually participates and whether those branches contain extensions. \n\n- MHD_DIGEST_BASE_ALGO_MD5, MHD_DIGEST_BASE_ALGO_SHA256, MHD_DIGEST_BASE_ALGO_SHA512_256: constants/macros used in comparisons. Their definitions could be enums or macros involving extension constructs; inspect them. \n\n- MD5_DIGEST_SIZE, SHA256_DIGEST_SIZE, SHA512_256_DIGEST_SIZE: macro constants returned by the function; their definitions might involve non-standard expressions or macros. \n\n- __builtin_unreachable: seen in nearby code and commonly used in assert macros; presence indicates use of a compiler builtin (GCC/Clang extension). Include to check whether mhd_assert or other macros use it. \n\n- __attribute__, __inline__, __always_inline, __declspec: common compiler-specific keywords/annotations that may appear in macro expansions (not direct symbols in this file). Include these tokens to inspect macro expansions for use of such extensions.\n\nInspecting the above symbols/definitions will let the next analyst determine whether any part of digest_get_size (via its declaration, asserts, macros, returned constants, or the struct) relies on compiler-specific language extensions, which is required to report a MISRA violation for the 'Language extensions should not be used' rule."
}