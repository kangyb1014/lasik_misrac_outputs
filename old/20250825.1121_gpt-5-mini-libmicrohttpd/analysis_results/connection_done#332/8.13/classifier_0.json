{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of connection_done:\n```c\nstatic void\nconnection_done (void *cls,\n                 struct MHD_Connection *connection,\n                 void **req_cls,\n                 enum MHD_RequestTerminationCode toe)\n{\n  struct Request *req = *req_cls;\n\n  (void) cls;\n  (void) connection;\n  (void) toe;\n  if (-1 != req->timerfd)\n    if (0 != close (req->timerfd))\n      abort ();\n  free (req);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function connection_done:\nenum MHD_RequestTerminationCode\n{\n\n  /**\n   * We finished sending the response.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_COMPLETED_OK = 0,\n\n  /**\n   * Error handling the connection (resources\n   * exhausted, application error accepting request,\n   * decrypt error (for HTTPS), connection died when\n   * sending the response etc.)\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_WITH_ERROR = 1,\n\n  /**\n   * No activity on the connection for the number\n   * of seconds specified using\n   * #MHD_OPTION_CONNECTION_TIMEOUT.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_TIMEOUT_REACHED = 2,\n\n  /**\n   * We had to close the session since MHD was being\n   * shut down.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_DAEMON_SHUTDOWN = 3,\n\n  /**\n   * We tried to read additional data, but the connection became broken or\n   * the other side hard closed the connection.\n   * This error is similar to #MHD_REQUEST_TERMINATED_WITH_ERROR, but\n   * specific to the case where the connection died before request completely\n   * received.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_READ_ERROR = 4,\n\n  /**\n   * The client terminated the connection by closing the socket\n   * for writing (TCP half-closed) while still sending request.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_CLIENT_ABORT = 5\n\n}\n...\nstruct MHD_Connection\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic void\nconnection_done (void *cls,\n                 struct MHD_Connection *connection,\n                 void **req_cls,\n                 enum MHD_RequestTerminationCode toe)\n{\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The function has pointer parameters that are not const-qualified even though the pointed-to objects are not modified inside the function. Specifically, both 'cls' and 'connection' are declared as void * and struct MHD_Connection * respectively but are only used as read/unused ((void) cls; (void) connection;) and never modified \u2014 they should be declared as const void *cls and const struct MHD_Connection *connection. (The req_cls parameter is a pointer-to-pointer whose pointed-to object is freed, so it legitimately remains non-const.)"
}