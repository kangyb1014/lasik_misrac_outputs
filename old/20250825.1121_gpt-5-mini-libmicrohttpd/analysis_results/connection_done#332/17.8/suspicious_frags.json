{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of connection_done:\n```c\nstatic void\nconnection_done (void *cls,\n                 struct MHD_Connection *connection,\n                 void **req_cls,\n                 enum MHD_RequestTerminationCode toe)\n{\n  struct Request *req = *req_cls;\n\n  (void) cls;\n  (void) connection;\n  (void) toe;\n  if (-1 != req->timerfd)\n    if (0 != close (req->timerfd))\n      abort ();\n  free (req);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function connection_done:\nstruct Request\n{\n  struct MHD_Connection *connection;\n  int timerfd;\n}\n...\nstruct MHD_Connection\n...\nenum MHD_RequestTerminationCode\n{\n\n  /**\n   * We finished sending the response.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_COMPLETED_OK = 0,\n\n  /**\n   * Error handling the connection (resources\n   * exhausted, application error accepting request,\n   * decrypt error (for HTTPS), connection died when\n   * sending the response etc.)\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_WITH_ERROR = 1,\n\n  /**\n   * No activity on the connection for the number\n   * of seconds specified using\n   * #MHD_OPTION_CONNECTION_TIMEOUT.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_TIMEOUT_REACHED = 2,\n\n  /**\n   * We had to close the session since MHD was being\n   * shut down.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_DAEMON_SHUTDOWN = 3,\n\n  /**\n   * We tried to read additional data, but the connection became broken or\n   * the other side hard closed the connection.\n   * This error is similar to #MHD_REQUEST_TERMINATED_WITH_ERROR, but\n   * specific to the case where the connection died before request completely\n   * received.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_READ_ERROR = 4,\n\n  /**\n   * The client terminated the connection by closing the socket\n   * for writing (TCP half-closed) while still sending request.\n   * @ingroup request\n   */\n  MHD_REQUEST_TERMINATED_CLIENT_ABORT = 5\n\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No function parameter variable is modified (no assignment to cls, connection, req_cls, or toe). The code only: (a) casts unused parameters to void to suppress warnings, (b) reads *req_cls into a local pointer (struct Request *req = *req_cls;), (c) operates on the object pointed to by that local pointer (close(req->timerfd)) and deallocates it (free(req)). MISRA C 2023 Rule 17.8 allows modification of the object referred to by a pointer parameter but forbids modifying the pointer parameter itself; this code does not reassign any parameter. Note: freeing *req_cls without clearing the caller's pointer yields a dangling pointer in the caller, which is a potential safety concern but is not a direct violation of Rule 17.8."
}