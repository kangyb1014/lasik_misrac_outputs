{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_ip_addr_to_key:\n```c\nstatic enum MHD_Result\nMHD_ip_addr_to_key (const struct sockaddr_storage *addr,\n                    socklen_t addrlen,\n                    struct MHD_IPCount *key)\n{\n  memset (key,\n          0,\n          sizeof(*key));\n\n  /* IPv4 addresses */\n  if (sizeof (struct sockaddr_in) <= (size_t) addrlen)\n  {\n    if (AF_INET == addr->ss_family)\n    {\n      key->family = AF_INET;\n      memcpy (&key->addr.ipv4,\n              &((const struct sockaddr_in *) addr)->sin_addr,\n              sizeof(((const struct sockaddr_in *) NULL)->sin_addr));\n      return MHD_YES;\n    }\n  }\n\n#ifdef HAVE_INET6\n  if (sizeof (struct sockaddr_in6) <= (size_t) addrlen)\n  {\n    /* IPv6 addresses */\n    if (AF_INET6 == addr->ss_family)\n    {\n      key->family = AF_INET6;\n      memcpy (&key->addr.ipv6,\n              &((const struct sockaddr_in6 *) addr)->sin6_addr,\n              sizeof(((const struct sockaddr_in6 *) NULL)->sin6_addr));\n      return MHD_YES;\n    }\n  }\n#endif\n\n  /* Some other address */\n  return MHD_NO;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_ip_addr_to_key:\nstruct MHD_IPCount\n{\n  /**\n   * Address family. AF_INET or AF_INET6 for now.\n   */\n  int family;\n\n  /**\n   * Actual address.\n   */\n  union\n  {\n    /**\n     * IPv4 address.\n     */\n    struct in_addr ipv4;\n#ifdef HAVE_INET6\n    /**\n     * IPv6 address.\n     */\n    struct in6_addr ipv6;\n#endif\n  } addr;\n\n  /**\n   * Counter.\n   */\n  unsigned int count;\n}\n...\n\n...\n\n...\n#define HAVE_INET6 1\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "#ifdef HAVE_INET6\n  if (sizeof (struct sockaddr_in6) <= (size_t) addrlen)",
    "if (sizeof (struct sockaddr_in) <= (size_t) addrlen)",
    "memcpy (&key->addr.ipv6,\n              &((const struct sockaddr_in6 *) addr)->sin6_addr,\n              sizeof(((const struct sockaddr_in6 *) NULL)->sin6_addr));",
    "memset (key,\n          0,\n          sizeof(*key));",
    "if (AF_INET6 == addr->ss_family)",
    "memcpy (&key->addr.ipv4,\n              &((const struct sockaddr_in *) addr)->sin_addr,\n              sizeof(((const struct sockaddr_in *) NULL)->sin_addr));",
    "if (AF_INET == addr->ss_family)"
  ],
  "explanation": "Only the calls to memset and memcpy and the surrounding size/family checks are relevant to MISRA C 2023 Rule 21.17 because that rule covers use of <string.h> functions and whether their pointer parameters reference sufficiently large objects. No other <string.h> functions are used in this function. The remaining code (assignments to key->family, returns, the final return MHD_NO, the union and struct definitions, and the HAVE_INET6 conditional) do not directly invoke string-handling functions and therefore do not need investigation under Rule 21.17. Additionally, the sizeof(...) operands that use a NULL pointer are compile-time sizeof expressions (they do not dereference the NULL pointer), and the addrlen / ss_family checks are the only preconditions guarding the memcpy sources; those checks are included above for review."
}