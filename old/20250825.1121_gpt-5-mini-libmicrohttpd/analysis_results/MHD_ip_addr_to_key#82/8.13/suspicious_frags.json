{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_ip_addr_to_key:\n```c\nstatic enum MHD_Result\nMHD_ip_addr_to_key (const struct sockaddr_storage *addr,\n                    socklen_t addrlen,\n                    struct MHD_IPCount *key)\n{\n  memset (key,\n          0,\n          sizeof(*key));\n\n  /* IPv4 addresses */\n  if (sizeof (struct sockaddr_in) <= (size_t) addrlen)\n  {\n    if (AF_INET == addr->ss_family)\n    {\n      key->family = AF_INET;\n      memcpy (&key->addr.ipv4,\n              &((const struct sockaddr_in *) addr)->sin_addr,\n              sizeof(((const struct sockaddr_in *) NULL)->sin_addr));\n      return MHD_YES;\n    }\n  }\n\n#ifdef HAVE_INET6\n  if (sizeof (struct sockaddr_in6) <= (size_t) addrlen)\n  {\n    /* IPv6 addresses */\n    if (AF_INET6 == addr->ss_family)\n    {\n      key->family = AF_INET6;\n      memcpy (&key->addr.ipv6,\n              &((const struct sockaddr_in6 *) addr)->sin6_addr,\n              sizeof(((const struct sockaddr_in6 *) NULL)->sin6_addr));\n      return MHD_YES;\n    }\n  }\n#endif\n\n  /* Some other address */\n  return MHD_NO;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_ip_addr_to_key:\n#define HAVE_INET6 1\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No suspicious fragments found with respect to MISRA C 2023 Rule 8.13. Analysis:\n\n- Function parameters:\n  - addr is declared as const struct sockaddr_storage * \u2014 it is already const-qualified as required by the rule.\n  - key is declared as struct MHD_IPCount * and is written to (memset, memcpy, assignment to key->family). Because the function modifies the object pointed to by key, it must be a non-const pointer; making it const would prevent required writes.\n\n- memcpy usages:\n  - The sources are obtained via casts to const pointers: (const struct sockaddr_in *) addr and (const struct sockaddr_in6 *) addr, so the source objects are treated as const-qualified as appropriate. The destination is a non-const field of *key, which is appropriate because the function writes into it.\n\n- sizeof uses:\n  - sizeof(((const struct sockaddr_in *) NULL)->sin_addr) and the analogous sockaddr_in6 form cast NULL to a pointer-to-const type. Those casts do not introduce non-const pointer usage and are consistent with treating the source as const.\n\n- No other pointer variables are declared or used in this function. There is no place where a pointer could reasonably be made to point to a const-qualified type but is not.\n\nTherefore, there are no code fragments in this function that require further investigation for Rule 8.13."
}