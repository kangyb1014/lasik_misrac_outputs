{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of get_m_algo:\n```c\nstatic enum MHD_DigestAuthMultiAlgo3\nget_m_algo (void)\n{\n  if (force_md5)\n    return MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (force_sha256)\n    return MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else if (force_sha512_256)\n    return MHD_DIGEST_AUTH_MULT_ALGO3_SHA512_256;\n\n  /* No forced algorithm selection, let MHD to use default */\n  return MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function get_m_algo:\nstatic int force_md5 = 0\n...\nstatic int force_sha256 = 0\n...\nstatic int force_sha512_256 = 0\n...\nstatic enum MHD_Result\nreply_with_auth_required (struct MHD_Connection *c,\n                          int stale,\n                          int wrong_cred)\n{\n  static const char auth_required_content[] =\n    \"<html><head><title>Authentication required</title></head>\" \\\n    \"<body>The requested page needs authentication.</body></html>\";\n  static const size_t auth_required_content_len =\n    (sizeof(auth_required_content) / sizeof(char)) - 1;\n  static const char wrong_creds_content[] =\n    \"<html><head><title>Wrong credentials</title></head>\" \\\n    \"<body>The provided credentials are incorrect.</body></html>\";\n  static const size_t wrong_creds_content_len =\n    (sizeof(wrong_creds_content) / sizeof(char)) - 1;\n  struct MHD_Response *resp;\n  enum MHD_Result ret;\n\n  if (wrong_cred)\n    stale = 0; /* Force client to ask user for username and password */\n\n  if (! wrong_cred)\n    resp = MHD_create_response_from_buffer_static (auth_required_content_len,\n                                                   auth_required_content);\n  else\n    resp = MHD_create_response_from_buffer_static (wrong_creds_content_len,\n                                                   wrong_creds_content);\n  if (NULL == resp)\n    return MHD_NO;\n\n  /* Ignore possible error when adding the header as the reply will work even\n     without this header. */\n  (void) MHD_add_response_header (resp,\n                                  MHD_HTTP_HEADER_CONTENT_TYPE, \"text/html\");\n\n\n  ret = MHD_queue_auth_required_response3 (\n    c,\n    REALM,\n    OPAQUE_DATA, /* The \"opaque data\", not really useful */\n    SEC_AREA1_URL \" \" SEC_AREA2_URL, /* Space-separated list of URLs' initial parts */\n    resp,\n    stale,\n    get_m_QOP (),\n    get_m_algo (),\n    ! 0, /* Userhash support enabled */\n    ! 0 /* UTF-8 is preferred */);\n  MHD_destroy_response (resp);\n  return ret;\n}\n...\nstatic enum MHD_Result\nhandle_sec_areas_req (struct MHD_Connection *c, const char *url, unsigned int\n                      sec_area_num)\n{\n  struct MHD_DigestAuthUsernameInfo *username_info;\n  struct UserEntry *user_entry;\n  void *userdigest;\n  size_t userdigest_size;\n  enum MHD_DigestAuthResult auth_res;\n\n  username_info = MHD_digest_auth_get_username3 (c);\n\n  if (NULL == username_info)\n    return reply_with_auth_required (c, 0, 0);\n\n  user_entry = find_entry_by_userinfo (username_info);\n\n  if (NULL == user_entry)\n    return reply_with_auth_required (c, 0, 1);\n\n  switch (username_info->algo3)\n  {\n  case MHD_DIGEST_AUTH_ALGO3_MD5:\n    userdigest = user_entry->userdigest_md5;\n    userdigest_size = sizeof(user_entry->userdigest_md5);\n    break;\n  case MHD_DIGEST_AUTH_ALGO3_SHA256:\n    userdigest = user_entry->userdigest_sha256;\n    userdigest_size = sizeof(user_entry->userdigest_sha256);\n    break;\n  case MHD_DIGEST_AUTH_ALGO3_SHA512_256:\n    userdigest = user_entry->userdigest_sha512_256;\n    userdigest_size = sizeof(user_entry->userdigest_sha512_256);\n    break;\n  case MHD_DIGEST_AUTH_ALGO3_MD5_SESSION:\n  case MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION:\n  case MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION:\n    /* Not supported currently and not used by MHD.\n       The client incorrectly used algorithm not advertised by the server. */\n    return reply_with_auth_required (c, 0, 1);\n  case MHD_DIGEST_AUTH_ALGO3_INVALID: /* Mute compiler warning */\n  default:\n    return MHD_NO; /* Should be unreachable */\n  }\n\n  auth_res = MHD_digest_auth_check_digest3 (\n    c,\n    REALM, /* Make sure to use the proper realm, not the realm provided by the client and returned by \"user_entry\" */\n    user_entry->username,\n    userdigest,\n    userdigest_size,\n    0, /* Use daemon's default value for nonce_timeout*/\n    0, /* Use daemon's default value for max_nc */\n    get_m_QOP (),\n    (enum MHD_DigestAuthMultiAlgo3) username_info->algo3 /* Direct cast from \"single algorithm\" to \"multi-algorithm\" is allowed */\n    );\n\n  if (MHD_DAUTH_OK != auth_res)\n  {\n    int need_just_refresh_nonce;\n    /* Actually MHD_DAUTH_NONCE_OTHER_COND should not be returned as\n       MHD_OPTION_DIGEST_AUTH_NONCE_BIND_TYPE is not used for the daemon.\n       To keep the code universal the MHD_DAUTH_NONCE_OTHER_COND is\n       still checked here. */\n    need_just_refresh_nonce =\n      (MHD_DAUTH_NONCE_STALE == auth_res)\n      || (MHD_DAUTH_NONCE_OTHER_COND == auth_res);\n    return reply_with_auth_required (c,\n                                     need_just_refresh_nonce,\n                                     ! need_just_refresh_nonce);\n  }\n\n  /* The user successfully authenticated */\n\n  /* Check whether access to the request area is allowed for the user */\n  if (1 == sec_area_num)\n  {\n    if (user_entry->allow_area_1)\n      return reply_with_area1_pages (c, url);\n    else\n      return reply_with_forbidden (c);\n  }\n  else if (2 == sec_area_num)\n  {\n    if (user_entry->allow_area_2)\n      return reply_with_area2_pages (c, url);\n    else\n      return reply_with_forbidden (c);\n  }\n\n  return MHD_NO; /* Should be unreachable */\n}\n...\n_MHD_EXTERN enum MHD_Result\nMHD_queue_auth_required_response3 (struct MHD_Connection *connection,\n                                   const char *realm,\n                                   const char *opaque,\n                                   const char *domain,\n                                   struct MHD_Response *response,\n                                   int signal_stale,\n                                   enum MHD_DigestAuthMultiQOP mqop,\n                                   enum MHD_DigestAuthMultiAlgo3 malgo3,\n                                   int userhash_support,\n                                   int prefer_utf8)\n{\n  struct DigestAlgorithm da;\n  char *buf_ptr;\n  enum MHD_Result ret;\n\n  buf_ptr = NULL;\n  digest_setup_zero (&da);\n  ret = queue_auth_required_response3_inner (connection,\n                                             realm,\n                                             opaque,\n                                             domain,\n                                             response,\n                                             signal_stale,\n                                             mqop,\n                                             malgo3,\n                                             userhash_support,\n                                             prefer_utf8,\n                                             &buf_ptr,\n                                             &da);\n  digest_deinit (&da);\n  if (NULL != buf_ptr)\n    free (buf_ptr);\n  return ret;\n}\n...\nenum MHD_DigestAuthMultiAlgo3\n{\n  /**\n   * Unknown or wrong algorithm type.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_INVALID = MHD_DIGEST_AUTH_ALGO3_INVALID,\n\n  /**\n   * The 'MD5' algorithm, non-session version.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_MD5 = MHD_DIGEST_AUTH_ALGO3_MD5,\n\n  /**\n   * The 'MD5-sess' algorithm.\n   * Not supported by MHD for authentication.\n   * Reserved value.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_MD5_SESSION = MHD_DIGEST_AUTH_ALGO3_MD5_SESSION,\n\n  /**\n   * The 'SHA-256' algorithm, non-session version.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA256 = MHD_DIGEST_AUTH_ALGO3_SHA256,\n\n  /**\n   * The 'SHA-256-sess' algorithm.\n   * Not supported by MHD for authentication.\n   * Reserved value.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA256_SESSION =\n    MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION,\n\n  /**\n   * The 'SHA-512-256' (SHA-512/256) algorithm, non-session version.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA512_256 = MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n\n  /**\n   * The 'SHA-512-256-sess' (SHA-512/256 session) algorithm.\n   * Not supported by MHD for authentication.\n   * Reserved value.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA512_256_SESSION =\n    MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION,\n\n  /**\n   * SHA-256 or SHA-512/256 non-session algorithm, MHD will choose\n   * the preferred or the matching one.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA_ANY_NON_SESSION =\n    MHD_DIGEST_AUTH_ALGO3_SHA256 | MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n\n  /**\n   * Any non-session algorithm, MHD will choose the preferred or\n   * the matching one.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION =\n    (0x3F) | MHD_DIGEST_AUTH_ALGO3_NON_SESSION,\n\n  /**\n   * The SHA-256 or SHA-512/256 session algorithm.\n   * Not supported by MHD.\n   * Reserved value.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA_ANY_SESSION =\n    MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION\n    | MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION,\n\n  /**\n   * Any session algorithm.\n   * Not supported by MHD.\n   * Reserved value.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_ANY_SESSION =\n    (0x3F) | MHD_DIGEST_AUTH_ALGO3_SESSION,\n\n  /**\n   * The MD5 algorithm, session or non-session.\n   * Currently supported as non-session only.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_MD5_ANY =\n    MHD_DIGEST_AUTH_MULT_ALGO3_MD5 | MHD_DIGEST_AUTH_MULT_ALGO3_MD5_SESSION,\n\n  /**\n   * The SHA-256 algorithm, session or non-session.\n   * Currently supported as non-session only.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA256_ANY =\n    MHD_DIGEST_AUTH_MULT_ALGO3_SHA256\n    | MHD_DIGEST_AUTH_MULT_ALGO3_SHA256_SESSION,\n\n  /**\n   * The SHA-512/256 algorithm, session or non-session.\n   * Currently supported as non-session only.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA512_256_ANY =\n    MHD_DIGEST_AUTH_MULT_ALGO3_SHA512_256\n    | MHD_DIGEST_AUTH_MULT_ALGO3_SHA512_256_SESSION,\n\n  /**\n   * The SHA-256 or SHA-512/256 algorithm, session or non-session.\n   * Currently supported as non-session only.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA_ANY_ANY =\n    MHD_DIGEST_AUTH_MULT_ALGO3_SHA_ANY_NON_SESSION\n    | MHD_DIGEST_AUTH_MULT_ALGO3_SHA_ANY_SESSION,\n\n  /**\n   * Any algorithm, MHD will choose the preferred or the matching one.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_ANY =\n    (0x3F) | MHD_DIGEST_AUTH_ALGO3_NON_SESSION | MHD_DIGEST_AUTH_ALGO3_SESSION\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic int force_md5 = 0\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The declaration itself does not violate Rule 2.2. A file-scope static with initializer (static int force_md5 = 0) is not an executed operation (and per MISRA note initialization is not the same as assignment). In the provided project force_md5 is read by get_m_algo(), so the object is used and the declaration is not dead. \n\nPossible violation scenario: if force_md5 is never referenced or modified anywhere in the project (no reads and no writes), then the declaration and any related conditional checks that only depend on it would be dead code because their removal would not affect program behaviour. In that case Rule 2.2 would be violated."
}