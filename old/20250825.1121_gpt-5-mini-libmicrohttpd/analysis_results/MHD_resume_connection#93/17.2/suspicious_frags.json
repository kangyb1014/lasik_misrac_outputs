{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_resume_connection:\n```c\n_MHD_EXTERN void\nMHD_resume_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    MHD_PANIC (_ (\"Cannot resume connections without enabling \" \\\n                  \"MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  connection->resuming = true;\n  daemon->resuming = true;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via inter-thread \" \\\n                 \"communication channel.\\n\"));\n#endif\n  }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_resume_connection:\n#define mhd_assert(ignore) ((void)0)\n...\n#define MHD_PANIC(msg) do{mhd_panic(mhd_panic_cls,__FILE__,__LINE__,msg);BUILTIN_NOT_REACHED;}while(0)\n...\n#define MHD_mutex_lock_chk_(pmutex) do{if(!MHD_mutex_lock_(pmutex))MHD_PANIC(_(\"Failed to lock mutex.\\n\"));\\\n}while(0)\n...\n#define MHD_mutex_unlock_chk_(pmutex) do{if(!MHD_mutex_unlock_(pmutex))MHD_PANIC(_(\"Failed to unlock mutex.\\n\"));\\\n}while(0)\n...\n#define MHD_ITC_IS_VALID_(itc) (-1!=((itc).fd))\n...\n#define MHD_itc_activate_(itc, str) ((write((itc).fd,(constvoid*)&_MHD_itc_wr_data,sizeof(_MHD_itc_wr_data))>0)||(EAGAIN==errno))\n...\nvoid\nMHD_DLOG (const struct MHD_Daemon *daemon,\n          const char *format,\n          ...)\n{\n  va_list va;\n\n  if (0 == (daemon->options & MHD_USE_ERROR_LOG))\n    return;\n  va_start (va, format);\n  daemon->custom_error_log (daemon->custom_error_log_cls,\n                            format,\n                            va);\n  va_end (va);\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "daemon->custom_error_log (daemon->custom_error_log_cls,\n                            format,\n                            va);",
    "MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);",
    "MHD_PANIC (_ (\"Cannot resume connections without enabling \" \\n                  \"MHD_ALLOW_SUSPEND_RESUME!\\n\"));",
    "mhd_assert (NULL == daemon->worker_pool);",
    "write((itc).fd,(constvoid*)&_MHD_itc_wr_data,sizeof(_MHD_itc_wr_data))>0",
    "MHD_itc_activate_ (daemon->itc, \"r\")",
    "mhd_panic(mhd_panic_cls,__FILE__,__LINE__,msg);",
    "MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);",
    "MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via inter-thread \" \\\n                 \"communication channel.\\n\"));"
  ],
  "explanation": "I have reported all function-like calls and callbacks present in the provided code that could lead to indirect recursion back into MHD_resume_connection and therefore warrant investigation under MISRA C 2023 Rule 17.2. Reasons why other fragments need not be investigated: - Simple assignments and flag updates (connection->resuming = true; daemon->resuming = true;) cannot perform function calls and thus cannot create recursion. - The MHD_ITC_IS_VALID_ macro is a pure integer comparison (-1 != ((itc).fd)) and contains no calls. - mhd_assert is defined as ((void)0) in the provided code, so it is a no-op and cannot call the function. - The conditional checks and control-flow constructs (if statements, #if/#endif blocks) themselves do not cause calls. - The MHD_itc_activate_ macro expands into a write() and an errno check; write() is a system call and does not call back into application functions like MHD_resume_connection (while it may invoke signal handlers, those are not code paths that directly cause a call to this function in typical usage). - The mutex lock/unlock macros expand to calls to MHD_mutex_lock_ / MHD_mutex_unlock_ which are expected to be primitive locking functions; these typically do not invoke application callbacks. (Nevertheless, the lock/unlock wrapper macros and MHD_PANIC and the daemon-provided custom_error_log were included among suspicious fragments because their implementations or the functions they call could execute user-supplied callbacks or logging code that might, indirectly, call back into MHD_resume_connection.) If you want, I can expand the investigation to examine definitions of MHD_mutex_lock_, MHD_mutex_unlock_, mhd_panic, and any user-provided callbacks to determine whether they could indeed lead to indirect recursion."
}