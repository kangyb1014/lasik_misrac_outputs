{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN void\nMHD_resume_connection (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n\n  if (0 == (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME))\n    MHD_PANIC (_ (\"Cannot resume connections without enabling \" \\\n                  \"MHD_ALLOW_SUSPEND_RESUME!\\n\"));\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  connection->resuming = true;\n  daemon->resuming = true;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via inter-thread \" \\\n                 \"communication channel.\\n\"));\n#endif\n  }\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_resume_connection': {'callees': ['__builtin_unreachable', 'MHD_DLOG'], 'callers': ['thread_main_handle_connection', 'main']}, '__builtin_unreachable': {'callees': [], 'callers': ['try_ready_normal_body', 'try_ready_chunked_body', 'process_request_body', 'MHD_update_last_activity_', 'MHD_connection_handle_write', 'cleanup_connection', 'MHD_connection_handle_idle', 'MHD_set_connection_option', 'MHD_ip_count_lock', 'MHD_ip_count_unlock', 'MHD_ip_limit_del', 'new_connection_prepare_', 'new_connection_close_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'internal_suspend_connection_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_cleanup_connections', 'MHD_epoll', 'close_connection', 'MHD_quiesce_daemon', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_stop_daemon', 'MHD_create_response_from_iovec', 'MHD_destroy_response', 'MHD_increment_response_rc', 'MHD_create_post_processor', 'post_process_urlencoded', 'post_process_multipart', 'check_nonce_nc', 'calculate_add_nonce', 'digest_auth_check_all_inner', 'MHD_digest_auth_check_digest3', 'MHD_digest_auth_check2', 'MHD_digest_auth_check_digest2', 'queue_auth_required_response3_inner', 'MHD_queue_auth_fail_response2']}, 'MHD_DLOG': {'callees': [], 'callers': ['connection_close_error', 'check_connection_reply', 'transmit_error_response_len', 'connection_add_header', 'parse_cookie_header', 'process_request_body', 'parse_connection_headers', 'get_req_header', 'get_req_headers', 'MHD_connection_handle_read', 'MHD_connection_handle_write', 'connection_check_timedout', 'cleanup_connection', 'MHD_connection_epoll_update_', 'MHD_queue_response', 'MHD_ip_limit_add', 'MHD_get_fdset2', 'thread_main_handle_connection', 'new_connection_prepare_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_get_timeout64', 'MHD_run_from_select2', 'MHD_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll', 'MHD_polling_thread', 'unescape_wrapper', 'MHD_quiesce_daemon', 'parse_options_va', 'setup_epoll_fd', 'setup_epoll_to_listen', 'process_interim_params', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_connection_set_nodelay_state_', 'MHD_connection_set_cork_state_', 'post_send_setopt', 'MHD_response_execute_upgrade_', 'MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_', 'calculate_add_nonce_with_retry', 'check_uri_match', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner', 'MHD_basic_auth_get_username_password3', 'MHD_basic_auth_get_username_password', 'MHD_queue_basic_auth_required_response3']}, 'thread_main_handle_connection': {'callees': ['MHD_add_to_fd_set_', 'MHD_DLOG', 'MHD_update_last_activity_', 'MHD_connection_handle_idle', 'connection_get_wait', 'call_handlers', 'thread_main_connection_upgrade', 'MHD_resume_connection', 'MHD_connection_close_', 'MHD_destroy_response'], 'callers': []}, 'main': {'callees': ['MHD_create_response_from_buffer_static', 'MHD_start_daemon', 'MHD_stop_daemon', 'MHD_destroy_response', 'MHD_get_fdset2', 'MHD_get_timeout64', 'MHD_run', 'MHD_get_daemon_info', 'MHD_get_timeout_i', 'MHD_resume_connection', 'expire_sessions', 'ignore_sigpipe', 'mark_as_html', 'update_directory', 'update_cached_response', 'check_params', 'add_new_users', 'init_rand_data', 'set_self_name', 'process_params', 'check_apply_params', 'init_data', 'run_mhd', 'deinit_data'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_EXTERN",
    "MHD_PANIC",
    "_ (gettext macro)",
    "MHD_ITC_IS_VALID_",
    "MHD_itc_activate_",
    "MHD_mutex_lock_chk_",
    "MHD_mutex_unlock_chk_",
    "MHD_DLOG",
    "struct MHD_Daemon definition",
    "struct MHD_Connection definition",
    "MHD_TEST_ALLOW_SUSPEND_RESUME",
    "MHD_USE_THREADS",
    "MHD_USE_POSIX_THREADS",
    "MHD_USE_W32_THREADS",
    "HAVE_MESSAGES",
    "__builtin_unreachable"
  ],
  "explanation": "For checking whether MHD_resume_connection uses any compiler language extensions you must inspect the definitions/expansions it relies on rather than only this function body. The items listed are required because:\n\n- _MHD_EXTERN: often a macro controlling linkage/visibility; it may expand to compiler-specific storage-class or attribute keywords (e.g. __attribute__((visibility)), __declspec). Need to see expansion to detect extensions.\n- MHD_PANIC: invoked when suspension/resume is disallowed; panic macros frequently expand to compiler-specific constructs (noreturn attributes, __builtin_unreachable, inline asm, abort wrappers). Inspect its definition to find extensions.\n- _ (gettext macro): the localizing macro may expand to a function or macro that could use compiler extensions; verify its definition to be safe.\n- MHD_ITC_IS_VALID_: macro used in the if condition; macro expansion might use GCC extensions (statement expressions, typeof, inline functions) \u2014 inspect it.\n- MHD_itc_activate_: function called to signal inter-thread channel; its implementation may use extensions (attributes, inline asm, builtins) that would make the code use language extensions transitively.\n- MHD_mutex_lock_chk_ / MHD_mutex_unlock_chk_: these wrapper/checking macros/functions are only present under threaded builds and often implement checking with compiler-specific attributes or builtins; inspect definitions for extensions (e.g. pthread wrappers using __attribute__ or builtin functions).\n- MHD_DLOG: logging macro/function (conditional on HAVE_MESSAGES) \u2014 logging macros frequently use variadic macros, GCC attributes like format, or other extensions; include to check for extension usage in the path executed by this function.\n- struct MHD_Daemon definition: the function accesses fields (options, worker_pool, itc, cleanup_connection_mutex, resuming). You must see the type definitions to find any extension usage (e.g. bit-field types with implementation-defined widths, anonymous structs/unions, attributes attached to members, or compiler-specific types).\n- struct MHD_Connection definition: same reason \u2014 inspect its definition (daemon pointer, resuming member) for anonymous/extension constructs.\n- MHD_TEST_ALLOW_SUSPEND_RESUME: flags/macros used in options bitmask \u2014 may be defined with unusual constructs; need to see definition to ensure no extensions used in how flags are declared or manipulated.\n- MHD_USE_THREADS, MHD_USE_POSIX_THREADS, MHD_USE_W32_THREADS, HAVE_MESSAGES: the preprocessor conditionals change which code is compiled. To be sure no extension is used in any compiled configuration, you must examine the code paths enabled by these feature macros and the macros/functions they enable.\n- __builtin_unreachable: the static call graph already shows this builtin may be invoked via macros used here (e.g. panic/assert). __builtin_unreachable is a documented compiler extension (GCC/clang). It must be present in the symbol list so the next analyzer can confirm whether it is actually introduced by any macro used by MHD_resume_connection.\n\nInspecting the above definitions will reveal any use of language/compiler extensions (attributes, builtins, inline asm, statement-expressions, typeof, nonstandard linkage specs, etc.) that would violate the MISRA prohibition on language extensions."
}