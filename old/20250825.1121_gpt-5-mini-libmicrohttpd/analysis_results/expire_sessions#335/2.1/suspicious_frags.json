{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of expire_sessions:\n```c\nstatic void\nexpire_sessions (void)\n{\n  struct Session *pos;\n  struct Session *prev;\n  struct Session *next;\n  time_t now;\n\n  now = time (NULL);\n  prev = NULL;\n  pos = sessions;\n  while (NULL != pos)\n  {\n    next = pos->next;\n    if (now - pos->start > 60 * 60)\n    {\n      /* expire sessions after 1h */\n      if (NULL == prev)\n        sessions = pos->next;\n      else\n        prev->next = next;\n      free (pos);\n    }\n    else\n      prev = pos;\n    pos = next;\n  }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function expire_sessions:\nstatic struct Session *sessions\n...\nstruct Session\n{\n  /**\n   * We keep all sessions in a linked list.\n   */\n  struct Session *next;\n\n  /**\n   * Unique ID for this session.\n   */\n  char sid[33];\n\n  /**\n   * Reference counter giving the number of connections\n   * currently using this session.\n   */\n  unsigned int rc;\n\n  /**\n   * Time when this session was last active.\n   */\n  time_t start;\n\n  /**\n   * String submitted via form.\n   */\n  char value_1[64];\n\n  /**\n   * Another value submitted via form.\n   */\n  char value_2[64];\n\n}\n...\nint\nmain (int argc, char *const *argv)\n{\n  struct MHD_Daemon *d;\n  struct timeval tv;\n  struct timeval *tvp;\n  fd_set rs;\n  fd_set ws;\n  fd_set es;\n  MHD_socket max;\n  uint64_t mhd_timeout;\n  int port;\n\n  if (argc != 2)\n  {\n    printf (\"%s PORT\\n\", argv[0]);\n    return 1;\n  }\n  port = atoi (argv[1]);\n  if ( (1 > port) || (port > 65535) )\n  {\n    fprintf (stderr,\n             \"Port must be a number between 1 and 65535.\\n\");\n    return 1;\n  }\n  /* initialize PRNG */\n  srand ((unsigned int) time (NULL));\n  d = MHD_start_daemon (MHD_USE_ERROR_LOG,\n                        (uint16_t) port,\n                        NULL, NULL,\n                        &create_response, NULL,\n                        MHD_OPTION_CONNECTION_TIMEOUT, (unsigned int) 15,\n                        MHD_OPTION_NOTIFY_COMPLETED,\n                        &request_completed_callback, NULL,\n                        MHD_OPTION_APP_FD_SETSIZE, (int) FD_SETSIZE,\n                        MHD_OPTION_END);\n  if (NULL == d)\n    return 1;\n  while (1)\n  {\n    expire_sessions ();\n    max = 0;\n    FD_ZERO (&rs);\n    FD_ZERO (&ws);\n    FD_ZERO (&es);\n    if (MHD_YES != MHD_get_fdset (d, &rs, &ws, &es, &max))\n      break; /* fatal internal error */\n    if (MHD_get_timeout64 (d, &mhd_timeout) == MHD_YES)\n    {\n#if ! defined(_WIN32) || defined(__CYGWIN__)\n      tv.tv_sec = (time_t) (mhd_timeout / 1000LL);\n#else  /* Native W32 */\n      tv.tv_sec = (long) (mhd_timeout / 1000LL);\n#endif /* Native W32 */\n      tv.tv_usec = ((long) (mhd_timeout % 1000)) * 1000;\n      tvp = &tv;\n    }\n    else\n      tvp = NULL;\n    if (-1 == select ((int) max + 1, &rs, &ws, &es, tvp))\n    {\n      if (EINTR != errno)\n        abort ();\n    }\n    MHD_run (d);\n  }\n  MHD_stop_daemon (d);\n  return 0;\n}\n...\nstatic int\nadd_new_users (void)\n{\n  if (! add_new_user_entry (\"joepublic\",\n                            \"password\",\n                            REALM,\n                            ! 0,\n                            0))\n    return 0;\n\n  if (! add_new_user_entry (\"superadmin\",\n                            \"pA$$w0Rd\",\n                            REALM,\n                            ! 0,\n                            ! 0))\n    return 0;\n\n  return ! 0;\n}\n...\nstatic int\ninit_data (void)\n{\n  unsigned int i;\n\n  if (tool_params.medium)\n    body_dyn_size = 8U * 1024U;\n  else if (tool_params.large)\n    body_dyn_size = 1024U * 1024U;\n  else\n    body_dyn_size = 0;\n\n  if (! init_response_body_data ())\n    return 25;\n\n  if (tool_params.unique)\n    return 0; /* Responses are generated on-fly */\n\n  if (tool_params.single)\n  {\n    resp_single = create_response_object ();\n    if (NULL == resp_single)\n    {\n      fprintf (stderr, \"Failed to create response.\\n\");\n      return 25;\n    }\n    return 0;\n  }\n\n  /* Use more responses to minimise waiting in threads while the response\n     used by other thread. */\n  if (! tool_params.thread_per_conn)\n    num_resps = 16 * get_num_threads ();\n  else\n    num_resps = 16 * get_cpu_core_count ();\n\n  resps = (struct MHD_Response **)\n          malloc ((sizeof(struct MHD_Response *)) * num_resps);\n  if (NULL == resps)\n  {\n    if (NULL != body_dyn)\n    {\n      free (body_dyn);\n      body_dyn = NULL;\n    }\n    fprintf (stderr, \"Failed to allocate memory.\\n\");\n    return 25;\n  }\n  for (i = 0; i < num_resps; ++i)\n  {\n    resps[i] = create_response_object ();\n    if (NULL == resps[i])\n    {\n      fprintf (stderr, \"Failed to create responses.\\n\");\n      break;\n    }\n  }\n  if (i == num_resps)\n    return 0; /* Success */\n\n  /* Cleanup */\n  while (--i < num_resps)\n    MHD_destroy_response (resps[i]);\n  free (resps);\n  resps = NULL;\n  num_resps = 0;\n  if (NULL != body_dyn)\n    free (body_dyn);\n  body_dyn = NULL;\n  return 32;\n}\n...\nstatic void\nupdate_directory (void)\n{\n  static size_t initial_allocation = 32 * 1024; /* initial size for response buffer */\n  struct MHD_Response *response;\n  struct ResponseDataContext rdc;\n  unsigned int language_idx;\n  unsigned int category_idx;\n  const struct Language *language;\n  const char *category;\n  char dir_name[128];\n  struct stat sbuf;\n  int res;\n  size_t len;\n\n  rdc.buf_len = initial_allocation;\n  if (NULL == (rdc.buf = malloc (rdc.buf_len)))\n  {\n    update_cached_response (NULL);\n    return;\n  }\n  len = strlen (INDEX_PAGE_HEADER);\n  if (rdc.buf_len <= len)\n  { /* buffer too small */\n    free (rdc.buf);\n    update_cached_response (NULL);\n    return;\n  }\n  memcpy (rdc.buf, INDEX_PAGE_HEADER, len);\n  rdc.off = len;\n  for (language_idx = 0; NULL != languages[language_idx].dirname;\n       language_idx++)\n  {\n    language = &languages[language_idx];\n\n    if (0 != stat (language->dirname, &sbuf))\n      continue; /* empty */\n    /* we ensured always +1k room, filenames are ~256 bytes,\n       so there is always still enough space for the header\n       without need for an additional reallocation check. */\n    res = snprintf (&rdc.buf[rdc.off], rdc.buf_len - rdc.off,\n                    \"<h2>%s</h2>\\n\",\n                    language->longname);\n    if (0 >= res)\n      continue;  /* snprintf() error */\n    if (rdc.buf_len - rdc.off <= (size_t) res)\n      continue;  /* buffer too small?? */\n    rdc.off += (size_t) res;\n    for (category_idx = 0; NULL != categories[category_idx]; category_idx++)\n    {\n      category = categories[category_idx];\n      res = snprintf (dir_name, sizeof (dir_name),\n                      \"%s/%s\",\n                      language->dirname,\n                      category);\n      if ((0 >= res) || (sizeof (dir_name) <= (size_t) res))\n        continue;  /* cannot print dir name */\n      if (0 != stat (dir_name, &sbuf))\n        continue;  /* empty */\n\n      /* we ensured always +1k room, filenames are ~256 bytes,\n         so there is always still enough space for the header\n         without need for an additional reallocation check. */\n      res = snprintf (&rdc.buf[rdc.off], rdc.buf_len - rdc.off,\n                      \"<h3>%s</h3>\\n\",\n                      category);\n      if (0 >= res)\n        continue;  /* snprintf() error */\n      if (rdc.buf_len - rdc.off <= (size_t) res)\n        continue;  /* buffer too small?? */\n      rdc.off += (size_t) res;\n\n      if (MHD_NO == list_directory (&rdc, dir_name))\n      {\n        free (rdc.buf);\n        update_cached_response (NULL);\n        return;\n      }\n    }\n  }\n  /* we ensured always +1k room, filenames are ~256 bytes,\n     so there is always still enough space for the footer\n     without need for a final reallocation check. */\n  len = strlen (INDEX_PAGE_FOOTER);\n  if (rdc.buf_len - rdc.off <= len)\n  { /* buffer too small */\n    free (rdc.buf);\n    update_cached_response (NULL);\n    return;\n  }\n  memcpy (rdc.buf, INDEX_PAGE_FOOTER, len);\n  rdc.off += len;\n  initial_allocation = rdc.buf_len; /* remember for next time */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (rdc.off,\n                                                        rdc.buf,\n                                                        &free);\n  mark_as_html (response);\n#ifdef FORCE_CLOSE\n  (void) MHD_add_response_header (response,\n                                  MHD_HTTP_HEADER_CONNECTION,\n                                  \"close\");\n#endif\n  update_cached_response (response);\n}\n...\nstatic void\nupdate_cached_response (struct MHD_Response *response)\n{\n  (void) pthread_mutex_lock (&mutex);\n  if (NULL != cached_directory_response)\n    MHD_destroy_response (cached_directory_response);\n  cached_directory_response = response;\n  (void) pthread_mutex_unlock (&mutex);\n}\n...\nstatic void\ndeinit_data (void)\n{\n  if (NULL != resp_single)\n    MHD_destroy_response (resp_single);\n  resp_single = NULL;\n  if (NULL != resps)\n  {\n    unsigned int i;\n    for (i = 0; i < num_resps; ++i)\n      MHD_destroy_response (resps[i]);\n    num_resps = 0;\n    free (resps);\n  }\n  resps = NULL;\n  if (NULL != body_dyn)\n    free (body_dyn);\n  body_dyn = NULL;\n}\n...\nstatic int\nrun_mhd (void)\n{\n  MHD_AccessHandlerCallback reply_func;\n  struct MHD_Daemon *d;\n  unsigned int use_num_threads;\n  unsigned int flags = MHD_NO_FLAG;\n  struct MHD_OptionItem opt_arr[16];\n  size_t opt_count = 0;\n  const union MHD_DaemonInfo *d_info;\n  const char *poll_mode;\n  uint16_t port;\n\n  if (tool_params.thread_per_conn)\n    use_num_threads = 0;\n  else\n    use_num_threads = get_num_threads ();\n  printf (\"\\n\");\n\n  print_perf_warnings ();\n\n  printf (\"Responses:\\n\");\n  printf (\"  Sharing:   \");\n  if (tool_params.shared)\n  {\n    reply_func = &answer_shared_response;\n    printf (\"pre-generated shared pool with %u objects\\n\", num_resps);\n  }\n  else if (tool_params.single)\n  {\n    reply_func = &answer_single_response;\n    printf (\"single pre-generated reused response object\\n\");\n  }\n  else\n  {\n    /* Unique responses */\n    if (tool_params.empty)\n      reply_func = &answer_unique_empty_response;\n    else if (tool_params.tiny)\n      reply_func = &answer_unique_tiny_response;\n    else\n      reply_func = &answer_unique_dyn_response;\n    printf (\"one-time response object generated for every request\\n\");\n  }\n  printf (\"  Body size: %s\\n\",\n          get_mhd_response_size ());\n\n  flags |= MHD_USE_ERROR_LOG;\n  flags |= MHD_USE_INTERNAL_POLLING_THREAD;\n  if (tool_params.epoll)\n    flags |= MHD_USE_EPOLL;\n  else if (tool_params.poll)\n    flags |= MHD_USE_POLL;\n  else if (tool_params.select)\n    (void) flags; /* No special additional flag */\n  else\n    flags |= MHD_USE_AUTO;\n\n  if (tool_params.thread_per_conn)\n    flags |= MHD_USE_THREAD_PER_CONNECTION;\n\n  if (! tool_params.date_header)\n    flags |= MHD_USE_SUPPRESS_DATE_NO_CLOCK;\n\n  if (0 != tool_params.connections)\n  {\n    opt_arr[opt_count].option = MHD_OPTION_CONNECTION_LIMIT;\n    opt_arr[opt_count].value = (intptr_t) tool_params.connections;\n    opt_arr[opt_count].ptr_value = NULL;\n    ++opt_count;\n  }\n  if (1 < use_num_threads)\n  {\n    opt_arr[opt_count].option = MHD_OPTION_THREAD_POOL_SIZE;\n    opt_arr[opt_count].value = (intptr_t) use_num_threads;\n    opt_arr[opt_count].ptr_value = NULL;\n    ++opt_count;\n  }\n  if (1)\n  {\n    opt_arr[opt_count].option = MHD_OPTION_CONNECTION_TIMEOUT;\n    opt_arr[opt_count].value = (intptr_t) tool_params.timeout;\n    opt_arr[opt_count].ptr_value = NULL;\n    ++opt_count;\n  }\n  if (1)\n  {\n    struct MHD_OptionItem option =\n    { MHD_OPTION_END, 0, NULL };\n    opt_arr[opt_count] = option;\n    if (opt_count >= (sizeof(opt_arr) / sizeof(opt_arr[0])))\n      abort ();\n  }\n  d = MHD_start_daemon (flags, mhd_port, NULL, NULL, reply_func, NULL,\n                        MHD_OPTION_ARRAY, opt_arr, MHD_OPTION_END);\n  if (NULL == d)\n  {\n    fprintf (stderr, \"Error starting MHD daemon.\\n\");\n    return 15;\n  }\n  d_info = MHD_get_daemon_info (d, MHD_DAEMON_INFO_FLAGS);\n  if (NULL == d_info)\n    abort ();\n  flags = (unsigned int) d_info->flags;\n  if (0 != (flags & MHD_USE_POLL))\n    poll_mode = \"poll()\";\n  else if (0 != (flags & MHD_USE_EPOLL))\n    poll_mode = \"epoll\";\n  else\n    poll_mode = \"select()\";\n  d_info = MHD_get_daemon_info (d, MHD_DAEMON_INFO_BIND_PORT);\n  if (NULL == d_info)\n    abort ();\n  port = d_info->port;\n  if (0 == port)\n    fprintf (stderr, \"Cannot detect port number. Consider specifying \"\n             \"port number explicitly.\\n\");\n\n  printf (\"MHD is running.\\n\");\n  printf (\"  Bind port:          %u\\n\", (unsigned int) port);\n  printf (\"  Polling function:   %s\\n\", poll_mode);\n  printf (\"  Threading:          \");\n  if (MHD_USE_THREAD_PER_CONNECTION == (flags & MHD_USE_THREAD_PER_CONNECTION))\n    printf (\"thread per connection\\n\");\n  else if (1 == get_num_threads ())\n    printf (\"one MHD thread\\n\");\n  else\n    printf (\"%u MHD threads in thread pool\\n\", get_num_threads ());\n  printf (\"  Connections limit:  %u\\n\", get_mhd_conn_limit (d));\n  printf (\"  Connection timeout: %u%s\\n\", tool_params.timeout,\n          0 == tool_params.timeout ? \" (no timeout)\" : \"\");\n  printf (\"  'Date:' header:     %s\\n\",\n          tool_params.date_header ? \"Yes\" : \"No\");\n  printf (\"To test with remote client use            \"\n          \"http://HOST_IP:%u/\\n\", (unsigned int) port);\n  printf (\"To test with client on the same host use  \"\n          \"http://127.0.0.1:%u/\\n\", (unsigned int) port);\n  printf (\"\\nPress ENTER to stop.\\n\");\n  if (1)\n  {\n    char buf[10];\n    (void) fgets (buf, sizeof(buf), stdin);\n  }\n  MHD_stop_daemon (d);\n  return 0;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I examined expire_sessions and the related code fragments provided (main, init_data, update_directory, run_mhd, add_new_users, deinit_data, etc.). I found no code that is clearly unreachable under normal control flow: there are no statements placed after an unconditional return/abort in the same block, no constant-false conditionals that hide code, and no switch/case constructs with unreachable case bodies. The main server loop (while (1)) contains legitimate exit conditions (break/return), so it is not inherently unreachable. The blocks guarded by if (1) are constant-true but therefore reachable; they do not create dead code. The somewhat tricky cleanup loop in init_data (while (--i < num_resps)) uses unsigned arithmetic and is confusing but not inherently unreachable. Preprocessor conditionals (e.g., #ifdef FORCE_CLOSE) may include or exclude code depending on build, which is expected and not a MISRA 2.1 violation in the source file itself. Therefore there are no obvious unreachable-code fragments to report from the supplied code."
}