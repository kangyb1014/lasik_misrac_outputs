{
  "user_message": "An agent A claimed that the following MHD_digest_auth_check code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_digest_auth_check.\n```c\n_MHD_EXTERN int\nMHD_digest_auth_check (struct MHD_Connection *connection,\n                       const char *realm,\n                       const char *username,\n                       const char *password,\n                       unsigned int nonce_timeout)\n{\n  return MHD_digest_auth_check2 (connection,\n                                 realm,\n                                 username,\n                                 password,\n                                 nonce_timeout,\n                                 MHD_DIGEST_ALG_MD5);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'connection' is declared as 'struct MHD_Connection *connection' but in this function it is not modified (it is only forwarded to MHD_digest_auth_check2). If the pointed object is intended to be read-only (i.e. MHD_digest_auth_check2 also treats it as read-only), the parameter should be declared 'const struct MHD_Connection *connection'. As written, the pointer is not const-qualified when it could be, which violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not provable from the snippet alone. Whether the parameter should be const depends on the prototype of MHD_digest_auth_check2. If MHD_digest_auth_check2 accepts a non-const 'struct MHD_Connection *' then the wrapper cannot change its parameter to 'const struct MHD_Connection *' without creating a type mismatch (or an unsafe cast) when forwarding the argument. In that case there is no violation of Rule 8.13. Only if MHD_digest_auth_check2 already declares the parameter as 'const struct MHD_Connection *' (or otherwise does not modify the pointed object) would the wrapper be expected to use a const-qualified pointer and the report would be correct. So, based on the provided code alone, the claim is not justified; you must inspect the declaration/usage of MHD_digest_auth_check2 to decide."
}