{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size,\n          void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            param->response_page);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call strlen(param->response_page) is made without any check that param->response_page is non-NULL and points to a NUL-terminated character array. If response_page is NULL or points to a buffer that is not NUL-terminated (for example a binary buffer or an unterminated/partial string), strlen will read past the object bounds causing an out-of-bounds access/undefined behavior.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function ahc_echo:\nstruct handler_param\n{\n  const char *response_page;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 21.17 requires that uses of string.h functions (including strlen) must not be able to access beyond the bounds of the object referenced by their pointer parameters. In the shown code strlen(param->response_page) is called without any check that param or param->response_page is non-NULL and that response_page points to a NUL-terminated character array. If response_page is NULL, strlen causes undefined behavior; if it points to a non-NUL-terminated or binary buffer, strlen may read past the object bounds. The code as given contains no guarantees or checks to prevent these conditions, so the use of strlen here can violate Rule 21.17 unless a separate, externally enforced contract (not shown) guarantees a valid, NUL-terminated, non-NULL string. To fix: ensure param and param->response_page are validated before calling strlen, or store and use an explicit length for the buffer (or use an API that accepts a length) so no out-of-bounds read can occur."
}