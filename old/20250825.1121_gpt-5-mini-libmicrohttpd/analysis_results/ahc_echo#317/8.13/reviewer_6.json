{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size,\n          void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            param->response_page);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe 'cls' callback parameter is cast to a non-const pointer even though the function only reads from it. The line\n\n  struct handler_param *param = (struct handler_param *) cls;\n\nproduces a pointer to a non-const-qualified type. According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible. In this function 'param' is only used for read-only access (param->response_page is read), so it should be declared const, e.g.:\n\n  const struct handler_param *param = (const struct handler_param *) cls;\n\n(If the callback API permits, changing the parameter type to const void *cls would be even better.)\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 Rule 8.13 requires that pointers should be to const-qualified types whenever possible. In ahc_echo the parameter cls (void *) is cast to a non-const pointer:\n\n  struct handler_param *param = (struct handler_param *) cls;\n\nbut the function only reads from the pointed object (only param->response_page is used). Declaring the local pointer as const (for example: const struct handler_param *param = (const struct handler_param *)cls;) would satisfy the rule. If the callback API permits, changing the callback signature to accept const void *cls is even better. There is no visible reason in this function that the pointed-to object must be mutable, so the current code violates Rule 8.13."
}