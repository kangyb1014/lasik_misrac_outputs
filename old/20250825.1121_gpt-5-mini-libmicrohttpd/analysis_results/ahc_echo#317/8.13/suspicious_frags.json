{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size,\n          void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            param->response_page);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            param->response_page);",
    "void **req_cls)",
    "*req_cls = NULL;",
    "size_t *upload_data_size,",
    "void *cls,",
    "*req_cls = &aptr;",
    "struct handler_param *param = (struct handler_param *) cls;",
    "(void) upload_data_size;  /* Unused. Silent compiler warning. */"
  ],
  "explanation": "I selected fragments where non-const pointers are used to refer to data that appears only to be read (or where const qualification might be applicable): the opaque callback context parameter (cls) is cast to a non-const struct handler_param*, and param->response_page is passed read-only to create the response; the upload_data_size parameter is a pointer to size_t that is unused (suggesting it could be const in this implementation); and the request-state pointer (req_cls) is a void** and is assigned values \u2014 its usage should be checked to ensure const qualification cannot be applied to the pointee. Other pointer usages in the function do not need investigation for Rule 8.13: method, url, version and upload_data are already const-qualified; connection is an API-provided handle that is typically mutable and must match the library signature; the static aptr and taking its address (&aptr) are not about const qualification of pointed-to types for this rule; casts to/from void* here follow the callback API and require review under other rules but are not additional 8.13 candidates beyond the cls/param and req_cls/upload_data_size cases already listed."
}