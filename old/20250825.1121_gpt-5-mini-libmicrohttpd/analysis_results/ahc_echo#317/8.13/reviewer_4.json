{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data,\n          size_t *upload_data_size,\n          void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            param->response_page);\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter is declared as void *cls but the function only reads the pointed-to data (it casts to struct handler_param * and accesses param->response_page without modifying cls or the pointee). According to MISRA C:2023 Rule 8.13, the pointer should point to a const-qualified type when possible \u2014 e.g. use const void *cls and cast to const struct handler_param *param. As written the code fails to qualify the pointer as const (and the cast to a non-const struct handler_param * discards constness), so the rule is violated.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct. The function receives cls as void * and then casts it to a non-const struct handler_param * even though the function only reads from the object (param->response_page) and does not modify the pointee. MISRA C:2023 Rule 8.13 requires that pointers point to const-qualified types whenever possible. Here the pointed-to data is not modified, so the pointer should be const-qualified (for example: use const void *cls or at least cast to const struct handler_param *param).\n\nOne important practical note: if the ahc_echo prototype is fixed by the MHD callback API (which specifies void *cls) you cannot change the function's parameter type without breaking the library callback signature. That does not negate the rule: the local usage should still avoid dropping const-qualification \u2014 e.g. declare a local const struct handler_param *param = (const struct handler_param *)cls; \u2014 which remedies the violation. If changing the prototype or local cast is impossible for some external-requirement reason, that should be documented as a justified deviation.\n\nRecommendation: replace the cast with a const-qualified cast (const struct handler_param *param = (const struct handler_param *)cls) or otherwise ensure the pointer declaration is const-qualified when possible."
}