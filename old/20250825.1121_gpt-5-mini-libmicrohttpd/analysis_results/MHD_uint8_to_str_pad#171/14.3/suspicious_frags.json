{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_uint8_to_str_pad:\n```c\nsize_t\nMHD_uint8_to_str_pad (uint8_t val,\n                      uint8_t min_digits,\n                      char *buf,\n                      size_t buf_size)\n{\n  size_t pos; /**< the position of the current printed digit */\n  int digit;\n  mhd_assert (3 >= min_digits);\n  if (0 == buf_size)\n    return 0;\n\n  pos = 0;\n  digit = val / 100;\n  if (0 == digit)\n  {\n    if (3 <= min_digits)\n      buf[pos++] = '0';\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    val %= 100;\n    min_digits = 2;\n  }\n\n  if (buf_size <= pos)\n    return 0;\n  digit = val / 10;\n  if (0 == digit)\n  {\n    if (2 <= min_digits)\n      buf[pos++] = '0';\n  }\n  else\n  {\n    buf[pos++] = (char) ('0' + (char) digit);\n    val %= 10;\n  }\n\n  if (buf_size <= pos)\n    return 0;\n  buf[pos++] = (char) ('0' + (char) val);\n  return pos;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_uint8_to_str_pad:\n#define mhd_assert(ignore) ((void)0)\n...\nstatic bool\nget_date_str (char *date)\n{\n  static const char *const days[] = {\n    \"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"\n  };\n  static const char *const mons[] = {\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n  };\n  static const size_t buf_len = 29;\n  struct tm now;\n  time_t t;\n  const char *src;\n#if ! defined(HAVE_C11_GMTIME_S) && ! defined(HAVE_W32_GMTIME_S) && \\\n  ! defined(HAVE_GMTIME_R)\n  struct tm *pNow;\n#endif\n\n  if ((time_t) -1 == time (&t))\n    return false;\n#if defined(HAVE_C11_GMTIME_S)\n  if (NULL == gmtime_s (&t,\n                        &now))\n    return false;\n#elif defined(HAVE_W32_GMTIME_S)\n  if (0 != gmtime_s (&now,\n                     &t))\n    return false;\n#elif defined(HAVE_GMTIME_R)\n  if (NULL == gmtime_r (&t,\n                        &now))\n    return false;\n#else\n  pNow = gmtime (&t);\n  if (NULL == pNow)\n    return false;\n  now = *pNow;\n#endif\n\n  /* Day of the week */\n  src = days[now.tm_wday % 7];\n  date[0] = src[0];\n  date[1] = src[1];\n  date[2] = src[2];\n  date[3] = ',';\n  date[4] = ' ';\n  /* Day of the month */\n  if (2 != MHD_uint8_to_str_pad ((uint8_t) now.tm_mday, 2,\n                                 date + 5, buf_len - 5))\n    return false;\n  date[7] = ' ';\n  /* Month */\n  src = mons[now.tm_mon % 12];\n  date[8] = src[0];\n  date[9] = src[1];\n  date[10] = src[2];\n  date[11] = ' ';\n  /* Year */\n  if (4 != MHD_uint16_to_str ((uint16_t) (1900 + now.tm_year), date + 12,\n                              buf_len - 12))\n    return false;\n  date[16] = ' ';\n  /* Time */\n  MHD_uint8_to_str_pad ((uint8_t) now.tm_hour, 2, date + 17, buf_len - 17);\n  date[19] = ':';\n  MHD_uint8_to_str_pad ((uint8_t) now.tm_min, 2, date + 20, buf_len - 20);\n  date[22] = ':';\n  MHD_uint8_to_str_pad ((uint8_t) now.tm_sec, 2, date + 23, buf_len - 23);\n  date[25] = ' ';\n  date[26] = 'G';\n  date[27] = 'M';\n  date[28] = 'T';\n\n  return true;\n}\n...\nstatic bool\nget_date_header (char *header)\n{\n  if (! get_date_str (header + 6))\n  {\n    header[0] = 0;\n    return false;\n  }\n  header[0] = 'D';\n  header[1] = 'a';\n  header[2] = 't';\n  header[3] = 'e';\n  header[4] = ':';\n  header[5] = ' ';\n  header[35] = '\\r';\n  header[36] = '\\n';\n  header[37] = 0;\n  return true;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I scanned the provided code (MHD_uint8_to_str_pad, get_date_str, get_date_header and the related macros). MISRA C 2023 Rule 14.3 concerns invariant controlling expressions in loop constructs (for, while, do-while). The code contains no for, while or do-while loops \u2014 only if statements and preprocessor conditionals, which are not loop controlling expressions for this rule. The mhd_assert macro expands to ((void)0) and does not introduce a loop. Therefore there are no loop controlling expressions to investigate for invariance in the supplied code fragments."
}