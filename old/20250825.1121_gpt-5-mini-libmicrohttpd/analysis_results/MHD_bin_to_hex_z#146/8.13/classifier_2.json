{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_bin_to_hex_z:\n```c\nsize_t\nMHD_bin_to_hex_z (const void *bin,\n                  size_t size,\n                  char *hex)\n{\n  size_t res;\n\n  res = MHD_bin_to_hex (bin, size, hex);\n  hex[res] = 0;\n\n  return res;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nres = MHD_bin_to_hex (bin, size, hex);\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation in the shown fragment as long as the prototype of MHD_bin_to_hex declares the first parameter as const void * (i.e. MHD_bin_to_hex(const void *bin, size_t size, char *hex)). A violation would occur if MHD_bin_to_hex is declared with a non-const parameter (e.g. MHD_bin_to_hex(void *bin, size_t size, char *hex)), because then passing the const-qualified bin would discard the const qualifier \u2014 contrary to MISRA C 2023 Rule 8.13."
}