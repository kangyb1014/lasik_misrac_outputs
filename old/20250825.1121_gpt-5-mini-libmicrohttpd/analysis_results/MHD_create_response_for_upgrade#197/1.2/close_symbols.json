{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_for_upgrade (MHD_UpgradeHandler upgrade_handler,\n                                 void *upgrade_handler_cls)\n{\n  struct MHD_Response *response;\n\n  if (NULL == upgrade_handler)\n    return NULL; /* invalid request */\n  response = MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL == response)\n    return NULL;\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  if (! MHD_mutex_init_ (&response->mutex))\n  {\n    free (response);\n    return NULL;\n  }\n#endif\n  response->upgrade_handler = upgrade_handler;\n  response->upgrade_handler_cls = upgrade_handler_cls;\n  response->total_size = 0;\n  response->reference_count = 1;\n  if (MHD_NO ==\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONNECTION,\n                               \"Upgrade\"))\n  {\n    MHD_destroy_response (response);\n    return NULL;\n  }\n  return response;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_create_response_for_upgrade': {'callees': ['MHD_add_response_header', 'MHD_destroy_response'], 'callers': ['ahc_echo', 'ahc_cb']}, 'MHD_add_response_header': {'callees': ['MHD_str_equal_caseless_', 'add_response_header_connection', 'add_response_entry', 'MHD_get_response_element_n_'], 'callers': ['MHD_create_response_for_upgrade', 'MHD_queue_basic_auth_required_response3', 'ahc_echo', 'answer_to_connection', 'add_session_cookie', 'serve_simple_form', 'fill_v1_form', 'fill_v1_v2_form', 'not_found_page', 'mark_as_html', 'generate_page', 'reply_with_page_not_found', 'reply_with_auth_required', 'reply_with_forbidden', 'reply_with_area1_pages', 'reply_with_area2_pages', 'reply_with_main_page', 'reply_with_method_not_supported', 'send_upgrade_required', 'ahc_cb', 'send_page']}, 'MHD_destroy_response': {'callees': ['__builtin_unreachable'], 'callers': ['MHD_connection_close_', 'transmit_error_response_len', 'cleanup_connection', 'connection_reset', 'MHD_connection_handle_idle', 'thread_main_handle_connection', 'MHD_cleanup_connections', 'MHD_create_response_for_upgrade', 'main', 'ahc_echo', 'answer_to_connection', 'serve_simple_form', 'fill_v1_form', 'fill_v1_v2_form', 'not_found_page', 'create_response', 'update_cached_response', 'generate_page', 'reply_with_page_not_found', 'reply_with_auth_required', 'reply_with_forbidden', 'reply_with_area1_pages', 'reply_with_area2_pages', 'reply_with_main_page', 'reply_with_method_not_supported', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'ahc_cb', 'init_data', 'deinit_data', 'answer_unique_empty_response', 'answer_unique_tiny_response', 'answer_unique_dyn_response', 'send_page']}, 'ahc_echo': {'callees': ['MHD_queue_response', 'MHD_create_response_from_callback', 'MHD_add_response_header', 'MHD_destroy_response', 'MHD_create_response_from_buffer_static', 'MHD_create_response_empty', 'MHD_lookup_connection_value', 'MHD_create_response_from_buffer_with_free_callback', 'MHD_create_response_from_fd64', 'MHD_create_response_from_buffer', 'MHD_create_response_from_buffer_copy', 'MHD_suspend_connection', 'MHD_digest_auth_check3', 'MHD_queue_auth_required_response3', 'MHD_basic_auth_get_username_password3', 'MHD_queue_basic_auth_required_response3', 'MHD_free', 'MHD_create_response_for_upgrade', 'can_compress', 'body_compress'], 'callers': []}, 'ahc_cb': {'callees': ['MHD_lookup_connection_value', 'is_websocket_request', 'send_chat_page', 'send_bad_request', 'send_upgrade_required', 'MHD_lookup_connection_value_n', 'ws_get_accept_value', 'MHD_create_response_for_upgrade', 'MHD_add_response_header', 'MHD_destroy_response', 'MHD_queue_response'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_EXTERN",
    "struct MHD_Response",
    "MHD_UpgradeHandler",
    "MHD_calloc_",
    "MHD_mutex_init_",
    "MHD_add_response_header",
    "MHD_destroy_response",
    "MHD_NO",
    "MHD_HTTP_HEADER_CONNECTION",
    "MHD_USE_POSIX_THREADS",
    "MHD_USE_W32_THREADS"
  ],
  "explanation": "For checking for language-extensions (MISRA rule) you must inspect the definitions/decls the target actually uses, because extensions commonly hide in macros, typedefs and function declarations:\n\n- _MHD_EXTERN: Often a macro that expands to compiler-specific storage/class or attribute keywords (e.g. __declspec, __attribute__, visibility, calling-convention). Inspect expansion to detect any compiler extensions.\n- struct MHD_Response: The struct definition can contain compiler extensions (zero-length arrays, unnamed bit-fields, attributes on members, packing pragmas, flexible-array usage that differs across compilers).\n- MHD_UpgradeHandler: This typedef is a function-pointer type; it may carry calling-convention decorations or attributes (stdcall, WINAPI, __attribute__((...))). Check its definition for extensions.\n- MHD_calloc_: Inspect this function/macro declaration/definition for attributes or non-standard implementations (macros expanding to builtins, inline asm, __attribute__ annotations).\n- MHD_mutex_init_: May be a wrapper/macro that expands to pthread/w32 calls or uses attributes/calling-convention macros; check for extensions in its declaration/definition.\n- MHD_add_response_header: Its prototype/definition may include extension attributes (noreturn, visibility, inline, calling-convention) or use language extensions in implementation that affect correctness of the call here.\n- MHD_destroy_response: Same as above; also the call graph shows it may call __builtin_unreachable \u2014 inspect its definition for use of compiler builtins or other extensions that could propagate to callers.\n- MHD_NO: Macro/enum value used in comparison \u2014 its definition could be a macro that hides extension usage (e.g. complex macro expressions or compiler-specific constants).\n- MHD_HTTP_HEADER_CONNECTION: Macro used as header name; inspect definition in case it is built via nonstandard token-pasting or compiler-specific constructs.\n- MHD_USE_POSIX_THREADS / MHD_USE_W32_THREADS: These configuration macros enable conditional compilation paths. You must know which is defined in the build to determine whether the code path using MHD_mutex_init_ (and any platform-specific extensions) is active.\n\nCollecting these symbols (macro expansions, typedefs and function declarations/definitions) lets the next analyzer determine whether any compiler-specific language extensions are introduced in the target function or in the code it directly depends on."
}