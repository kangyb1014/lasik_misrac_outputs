{
  "user_message": "Target function code is:\n```c\nstatic size_t\nunescape_wrapper (void *cls,\n                  struct MHD_Connection *connection,\n                  char *val)\n{\n  bool broken;\n  size_t res;\n  (void) cls; /* Mute compiler warning. */\n\n  /* TODO: add individual parameter */\n  if (0 <= connection->daemon->client_discipline)\n    return MHD_str_pct_decode_in_place_strict_ (val);\n\n  res = MHD_str_pct_decode_in_place_lenient_ (val, &broken);\n#ifdef HAVE_MESSAGES\n  if (broken)\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"The URL encoding is broken.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n  return res;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'unescape_wrapper': {'callees': ['MHD_str_pct_decode_in_place_strict_', 'MHD_str_pct_decode_in_place_lenient_', 'MHD_DLOG'], 'callers': []}, 'MHD_str_pct_decode_in_place_strict_': {'callees': ['toxdigitvalue'], 'callers': ['unescape_wrapper']}, 'MHD_str_pct_decode_in_place_lenient_': {'callees': ['toxdigitvalue'], 'callers': ['unescape_wrapper', 'MHD_http_unescape']}, 'MHD_DLOG': {'callees': [], 'callers': ['connection_close_error', 'check_connection_reply', 'transmit_error_response_len', 'connection_add_header', 'parse_cookie_header', 'process_request_body', 'parse_connection_headers', 'get_req_header', 'get_req_headers', 'MHD_connection_handle_read', 'MHD_connection_handle_write', 'connection_check_timedout', 'cleanup_connection', 'MHD_connection_epoll_update_', 'MHD_queue_response', 'MHD_ip_limit_add', 'MHD_get_fdset2', 'thread_main_handle_connection', 'new_connection_prepare_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_get_timeout64', 'MHD_run_from_select2', 'MHD_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll', 'MHD_polling_thread', 'unescape_wrapper', 'MHD_quiesce_daemon', 'parse_options_va', 'setup_epoll_fd', 'setup_epoll_to_listen', 'process_interim_params', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_connection_set_nodelay_state_', 'MHD_connection_set_cork_state_', 'post_send_setopt', 'MHD_response_execute_upgrade_', 'MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_', 'calculate_add_nonce_with_retry', 'check_uri_match', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner', 'MHD_basic_auth_get_username_password3', 'MHD_basic_auth_get_username_password', 'MHD_queue_basic_auth_required_response3']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_str_pct_decode_in_place_strict_",
    "MHD_str_pct_decode_in_place_lenient_",
    "MHD_DLOG",
    "struct MHD_Connection",
    "struct MHD_Daemon (type of connection->daemon)",
    "HAVE_MESSAGES (preprocessor symbol / macro controlling MHD_DLOG inclusion)"
  ],
  "explanation": "You must inspect any called functions/macros and the used types to determine whether the target function ever modifies its parameter variables (cls, connection, val) rather than only the objects they point to. Reasons: \n\n- MHD_str_pct_decode_in_place_strict_: Must see its declaration/definition (or macro expansion). If it is a macro it could expand into code that assigns to the caller's identifier 'val' (reassigning the parameter variable). If it is a function, check its parameter types (char * vs char ** etc.) to ensure it cannot reassign the caller's parameter variable.\n\n- MHD_str_pct_decode_in_place_lenient_: Same reason as strict variant; it is passed 'val' and '&broken'. If it is a macro or has a signature that could reassign the caller's parameter (e.g. takes a char ** or uses macros that assign to the name 'val'), that would violate the MISRA rule. Inspect its prototype/definition to confirm only the pointee is modified.\n\n- MHD_DLOG: Often a macro. Inspect its definition to ensure it does not expand into statements that assign to the local parameter 'connection' or to other parameters; also verify it does not use weird caller-side assignments when invoked inside the #ifdef HAVE_MESSAGES block.\n\n- struct MHD_Connection: The type definition is needed to confirm that accessing connection->daemon is plain field access (no operator-overloaded/macro trickery) and to know whether any fields are implemented via macros or inline functions that might modify the 'connection' parameter variable.\n\n- struct MHD_Daemon (type of connection->daemon): Needed to verify the type and member client_discipline (its type and any accessor macros) so you can check that the expression connection->daemon->client_discipline is a simple value read and does not hide side-effects that might reassign the 'connection' parameter.\n\n- HAVE_MESSAGES: The preprocessor symbol controls whether the MHD_DLOG call is compiled in. You must know the active configuration to see whether that call (and any possible macro side-effects) is present in the compiled code.\n\nTogether these symbols let the next reviewer determine whether any of the called routines or macros could reassign the function parameters (cls, connection, val) rather than only modifying objects they point to, which is what the MISRA rule forbids."
}