{
  "user_message": "Target function code is:\n```c\nstatic size_t\nunescape_wrapper (void *cls,\n                  struct MHD_Connection *connection,\n                  char *val)\n{\n  bool broken;\n  size_t res;\n  (void) cls; /* Mute compiler warning. */\n\n  /* TODO: add individual parameter */\n  if (0 <= connection->daemon->client_discipline)\n    return MHD_str_pct_decode_in_place_strict_ (val);\n\n  res = MHD_str_pct_decode_in_place_lenient_ (val, &broken);\n#ifdef HAVE_MESSAGES\n  if (broken)\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"The URL encoding is broken.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n  return res;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'unescape_wrapper': {'callees': ['MHD_str_pct_decode_in_place_strict_', 'MHD_str_pct_decode_in_place_lenient_', 'MHD_DLOG'], 'callers': []}, 'MHD_str_pct_decode_in_place_strict_': {'callees': ['toxdigitvalue'], 'callers': ['unescape_wrapper']}, 'MHD_str_pct_decode_in_place_lenient_': {'callees': ['toxdigitvalue'], 'callers': ['unescape_wrapper', 'MHD_http_unescape']}, 'MHD_DLOG': {'callees': [], 'callers': ['connection_close_error', 'check_connection_reply', 'transmit_error_response_len', 'connection_add_header', 'parse_cookie_header', 'process_request_body', 'parse_connection_headers', 'get_req_header', 'get_req_headers', 'MHD_connection_handle_read', 'MHD_connection_handle_write', 'connection_check_timedout', 'cleanup_connection', 'MHD_connection_epoll_update_', 'MHD_queue_response', 'MHD_ip_limit_add', 'MHD_get_fdset2', 'thread_main_handle_connection', 'new_connection_prepare_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_get_timeout64', 'MHD_run_from_select2', 'MHD_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll', 'MHD_polling_thread', 'unescape_wrapper', 'MHD_quiesce_daemon', 'parse_options_va', 'setup_epoll_fd', 'setup_epoll_to_listen', 'process_interim_params', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_connection_set_nodelay_state_', 'MHD_connection_set_cork_state_', 'post_send_setopt', 'MHD_response_execute_upgrade_', 'MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_', 'calculate_add_nonce_with_retry', 'check_uri_match', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner', 'MHD_basic_auth_get_username_password3', 'MHD_basic_auth_get_username_password', 'MHD_queue_basic_auth_required_response3']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_str_pct_decode_in_place_strict_ (declaration + definition)",
    "MHD_str_pct_decode_in_place_lenient_ (declaration + definition)",
    "toxdigitvalue (declaration + definition)",
    "MHD_DLOG (macro or function definition)",
    "struct MHD_Connection (full type definition)",
    "type/definition of connection->daemon (daemon struct / MHD_Daemon)",
    "client_discipline (field declaration and type)",
    "HAVE_MESSAGES (preprocessor macro)",
    "_ (gettext/internationalisation macro or function)",
    "prototypes or header macros included by the above (header files declaring these symbols)"
  ],
  "explanation": "For each symbol listed you must inspect its declaration/definition because MISRA\u2019s prohibition on language extensions applies to any compiler-specific constructs appearing in the translation unit headers or function bodies that the target function uses or depends on. Specific reasons: \n\n- MHD_str_pct_decode_in_place_strict_ (declaration + definition): the wrapper calls this function. The function prototype or its implementation may use compiler extensions (e.g. GCC __attribute__ annotations, statement-expressions, typeof, inline assembly, nested functions, non-standard inline/extern combinations). You need the declaration and body to check for such extensions.\n\n- MHD_str_pct_decode_in_place_lenient_ (declaration + definition): same reason as above \u2014 the wrapper calls it and the implementation/prototype may contain language extensions (and it also returns/binds to types that could be declared with extensions).\n\n- toxdigitvalue (declaration + definition): both decode functions call this helper. If toxdigitvalue uses language extensions, those could propagate into the linked translation units or require nonstandard prototypes/macros that affect the wrapper analysis.\n\n- MHD_DLOG (macro or function definition): in the wrapper MHD_DLOG is conditionally used. MHD_DLOG is often a macro that can expand to logging machinery \u2014 the macro expansion or underlying function may include compiler extensions (variadic macro extensions, attribute usage, inline assembly, GNU statement expressions). You must inspect the macro/body to verify no language extensions are used.\n\n- struct MHD_Connection (full type definition): the wrapper accesses connection->daemon. The struct/its fields may use nonstandard constructs (anonymous structs/unions, bit-field widths with implementation-defined behavior, attributes on fields, packed/aligned attributes) which are compiler extensions. You need the full type to check for such uses.\n\n- type/definition of connection->daemon (daemon struct / MHD_Daemon): the wrapper directly reads daemon->client_discipline; the daemon type definition may contain extensions (attributes, anonymous members, nonstandard qualifiers). Inspecting it is required.\n\n- client_discipline (field declaration and type): the test 0 <= connection->daemon->client_discipline relies on the field\u2019s type and signedness; the field could be a bit-field or use extension attributes. You must see the field declaration to ensure no extension is used.\n\n- HAVE_MESSAGES (preprocessor macro): controls whether MHD_DLOG and _() are compiled. The macro definition or other conditional macros may be defined via compiler flags or headers using nonstandard preprocessor features. You must know its definition to see which code path (and potential extensions) is active.\n\n- _ (gettext/internationalisation macro or function): the code passes a string through _(...) inside MHD_DLOG. The definition of _ may be a macro that uses compiler extensions (for example, wrapping gettext in a macro that uses variadic or token-pasting extensions). Inspect it to ensure no language extensions are introduced.\n\n- prototypes or header macros included by the above (header files declaring these symbols): many language extensions are introduced via headers (attribute macros, inline function definitions, compiler-specific macros). To be sure the wrapper and its callees do not rely on/introduce extensions you must examine the relevant headers that declare the listed functions, types and macros.\n\nCollecting these symbols (their declarations and definitions) gives the necessary context to determine whether the target function or any code it directly depends on uses compiler-specific language extensions that would violate the MISRA rule."
}