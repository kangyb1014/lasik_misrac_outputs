{
  "user_message": "An agent A claimed that the following MHD_pool_get_free code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_pool_get_free.\n```c\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    return 0;\n#endif /* MHD_ASAN_POISON_ACTIVE */\n  return (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function MHD_pool_get_free takes a non-const pointer parameter 'struct MemoryPool *pool' but only reads members (pool->end, pool->pos, pool->size) and does not modify the object. According to MISRA C 2023 Rule 8.13 the pointer should point to a const-qualified type when possible; the parameter should be 'const struct MemoryPool *pool'.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct in the general case. MHD_pool_get_free only reads members of the MemoryPool object (pool->end, pool->pos, pool->size) and does not modify the object; therefore, per MISRA C 2023 Rule 8.13 the parameter should be declared to point to a const-qualified type, e.g. const struct MemoryPool *pool. The only reasons this would not be a violation are external constraints (intentional API compatibility that requires the non-const signature, required overrides/callbacks with a fixed non-const prototype, or other project-specific reasons). Absent such justification, the function should be changed to take a const pointer to conform to Rule 8.13."
}