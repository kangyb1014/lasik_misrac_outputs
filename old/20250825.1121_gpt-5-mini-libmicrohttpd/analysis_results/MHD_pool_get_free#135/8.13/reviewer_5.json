{
  "user_message": "An agent A claimed that the following MHD_pool_get_free code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_pool_get_free.\n```c\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    return 0;\n#endif /* MHD_ASAN_POISON_ACTIVE */\n  return (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function MHD_pool_get_free takes a non-const pointer parameter (struct MemoryPool *pool) but the body does not modify *pool \u2014 it only reads members (and uses asserts). Therefore the parameter can and should be const-qualified (const struct MemoryPool *pool). This violates MISRA C 2023 Rule 8.13 unless there is an overriding reason (e.g. the mhd_assert macro or API compatibility requiring a non-const pointer).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Rule 8.13 requires that a pointer parameter be const-qualified when the function does not modify the pointed-to object. In the body of MHD_pool_get_free the pool parameter is only read (members are inspected in asserts and arithmetic) and there is no modification of *pool. Therefore, absent an overriding constraint, the parameter should be declared as const struct MemoryPool *pool. The agent A's report is correct. Caveats: if there is an external/ABI/API compatibility requirement that the function signature remain non-const, or some unusual definition of mhd_assert that requires a non-const operand (which is unlikely since it only evaluates boolean expressions), then leaving it non-const may be justified \u2014 such cases should be documented as a deviation. Otherwise changing the prototype to const would satisfy MISRA 8.13."
}