{
  "user_message": "An agent A claimed that the following MHD_pool_get_free code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_pool_get_free.\n```c\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    return 0;\n#endif /* MHD_ASAN_POISON_ACTIVE */\n  return (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter is declared as 'struct MemoryPool *pool' but the function only reads members (pool->pos, pool->end, pool->size). The mhd_assert line accesses pool->pos without modifying it, so the pointer could be const-qualified. Therefore the non-const pointer parameter is a violation \u2014 change the parameter to 'const struct MemoryPool *pool' (and adjust any called macros/functions accordingly).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The function does not modify the object pointed to by pool \u2014 it only reads pool->pos, pool->end and pool->size and computes a result. Under MISRA C:2023 Rule 8.13 (a pointer should point to a const-qualified type whenever possible) the parameter should therefore be declared as const struct MemoryPool *pool. That would make the intent explicit and satisfy the guideline.\n\nCaveats: this conclusion assumes that the macros used (mhd_assert, ROUND_TO_ALIGN, any ASAN-related macros) do not perform hidden modifications or require a non-const pointer (for example, by taking the address of pool or calling functions that modify the object). If any of those macros/functions require a non-const MemoryPool *, then changing the prototype may require adjusting those helpers first. Also note Rule 8.13 is a \u201cshould\u201d guideline (advisory), so the existing code is not an absolute error but is non\u2011conformant with the guideline when the parameter can be const-qualified.\n\nGiven the code shown, agent A\u2019s report is correct: the parameter could and should be const-qualified, so the claim of a violation of Rule 8.13 is valid."
}