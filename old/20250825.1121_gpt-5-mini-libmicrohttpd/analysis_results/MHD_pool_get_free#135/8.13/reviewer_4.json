{
  "user_message": "An agent A claimed that the following MHD_pool_get_free code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_pool_get_free.\n```c\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    return 0;\n#endif /* MHD_ASAN_POISON_ACTIVE */\n  return (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function takes a non-const pointer parameter 'struct MemoryPool *pool' but only reads fields (pool->end, pool->pos) and does not modify the pointed-to object. According to MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type when possible. In this code the parameter should be declared as 'const struct MemoryPool *pool' (and the return expression can remain unchanged).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The function parameter is declared as 'struct MemoryPool *pool' yet the function only reads fields (pool->end, pool->pos) and does not modify the object pointed to. Under MISRA C 2023 Rule 8.13 a pointer parameter should be to a const-qualified type when possible, so the parameter could and should be declared 'const struct MemoryPool *pool'. The presence of mhd_assert and the conditional compilation around ASAN do not perform modifications and do not prevent making the pointer const. (The only caveat would be an explicit, documented API/compatibility reason for keeping the non-const signature, in which case a deviation/justification would be required.)"
}