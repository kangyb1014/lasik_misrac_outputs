{
  "user_message": "An agent A claimed that the following MHD_pool_get_free code violates the MISRA C 2023 rule 2.2.\n<misra_rule>\nMISRA C 2023 Rule 2.2 is A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_pool_get_free.\n```c\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    return 0;\n#endif /* MHD_ASAN_POISON_ACTIVE */\n  return (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation occurs when mhd_assert is a diagnostic-only check (no side-effects) that is compiled into the build and the condition pool->pos == ROUND_TO_ALIGN(pool->pos) is guaranteed true by program invariants. In that case the assert is executed on every call but never changes program behaviour (removing it would not alter results \u2014 only timing), so it is dead code and thus violates MISRA C 2023 Rule 2.2.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA C 2023 Rule 2.2 defines dead code as an operation that is executed but whose removal would not affect program behaviour. Note 1 explicitly states that timing is part of the behaviour of an embedded system. Therefore an assertion that is executed on every call (even if it has no data side\u2011effects) does affect observable behaviour via execution timing; removing it would change that behaviour and so it is not \u201cdead code\u201d under Rule 2.2. Moreover, proving that removal would have absolutely no effect requires whole\u2011program analysis; you cannot conclude deadness from the local invariant alone. If mhd_assert actually has side\u2011effects (logging, abort, etc.) then clearly it is not dead either. For these reasons Agent A\u2019s claim is incorrect."
}