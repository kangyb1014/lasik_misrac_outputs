{
  "user_message": "An agent A claimed that the following MHD_set_connection_option code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_set_connection_option.\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_set_connection_option (struct MHD_Connection *connection,\n                           enum MHD_CONNECTION_OPTION option,\n                           ...)\n{\n  va_list ap;\n  struct MHD_Daemon *daemon;\n  unsigned int ui_val;\n\n  daemon = connection->daemon;\n  switch (option)\n  {\n  case MHD_CONNECTION_OPTION_TIMEOUT:\n    if (0 == connection->connection_timeout_ms)\n      connection->last_activity = MHD_monotonic_msec_counter ();\n    va_start (ap, option);\n    ui_val = va_arg (ap, unsigned int);\n    va_end (ap);\n#if (SIZEOF_UINT64_T - 2) <= SIZEOF_UNSIGNED_INT\n    if ((UINT64_MAX / 4000 - 1) < ui_val)\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"The specified connection timeout (%u) is too \" \\\n                   \"large. Maximum allowed value (%\" PRIu64 \") will be used \" \\\n                   \"instead.\\n\"),\n                ui_val,\n                (UINT64_MAX / 4000 - 1));\n#endif\n      ui_val = UINT64_MAX / 4000 - 1;\n    }\n#endif /* (SIZEOF_UINT64_T - 2) <= SIZEOF_UNSIGNED_INT */\n    if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    {\n#if defined(MHD_USE_THREADS)\n      MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n      if (! connection->suspended)\n      {\n        if (connection->connection_timeout_ms == daemon->connection_timeout_ms)\n          XDLL_remove (daemon->normal_timeout_head,\n                       daemon->normal_timeout_tail,\n                       connection);\n        else\n          XDLL_remove (daemon->manual_timeout_head,\n                       daemon->manual_timeout_tail,\n                       connection);\n        connection->connection_timeout_ms = ((uint64_t) ui_val) * 1000;\n        if (connection->connection_timeout_ms == daemon->connection_timeout_ms)\n          XDLL_insert (daemon->normal_timeout_head,\n                       daemon->normal_timeout_tail,\n                       connection);\n        else\n          XDLL_insert (daemon->manual_timeout_head,\n                       daemon->manual_timeout_tail,\n                       connection);\n      }\n#if defined(MHD_USE_THREADS)\n      MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n#endif\n    }\n    return MHD_YES;\n  default:\n    return MHD_NO;\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe macro _MHD_EXTERN expands to __attribute__((visibility(\"default\"))) extern, which uses the compiler-specific __attribute__ syntax (GCC/Clang extension) that is not part of standard C. Using this documented compiler extension violates MISRA C 2023 Rule 1.2.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_set_connection_option:\n#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. The macro definition #define _MHD_EXTERN __attribute__((visibility(\"default\")))extern uses GCC/Clang\u2019s __attribute__ syntax which is a documented compiler language extension (not part of standard C). MISRA C:2023 Rule 1.2 prohibits usage of compiler language extensions unless explicitly allowed and documented; therefore the agent A report is valid. (Mitigation: wrap the attribute in a conditional macro e.g. define it only for compilers that support the attribute, or remove it and use plain extern for strict standard-conformance.)"
}