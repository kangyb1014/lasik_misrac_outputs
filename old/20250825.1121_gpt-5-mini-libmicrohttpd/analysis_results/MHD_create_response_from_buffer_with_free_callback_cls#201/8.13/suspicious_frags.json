{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_from_buffer_with_free_callback_cls:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_buffer_with_free_callback_cls (size_t size,\n                                                        const void *buffer,\n                                                        MHD_ContentReaderFreeCallback\n                                                        crfc,\n                                                        void *crfc_cls)\n{\n  struct MHD_Response *r;\n\n  if ((NULL == buffer) && (size > 0))\n    return NULL;\n#if SIZEOF_SIZE_T >= SIZEOF_UINT64_T\n  if (MHD_SIZE_UNKNOWN == size)\n    return NULL;\n#endif /* SIZEOF_SIZE_T >= SIZEOF_UINT64_T */\n  r = MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL == r)\n    return NULL;\n#if defined(MHD_USE_THREADS)\n  if (! MHD_mutex_init_ (&r->mutex))\n  {\n    free (r);\n    return NULL;\n  }\n#endif\n  r->fd = -1;\n  r->reference_count = 1;\n  r->total_size = size;\n  r->data = buffer;\n  r->data_size = size;\n  r->crfc = crfc;\n  r->crc_cls = crfc_cls;\n  return r;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_create_response_from_buffer_with_free_callback_cls:\ntypedef void\n(*MHD_ContentReaderFreeCallback) (void *cls)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "r->crc_cls = crfc_cls;",
    "void *crfc_cls",
    "typedef void\n(*MHD_ContentReaderFreeCallback) (void *cls)",
    "r->data = buffer;",
    "MHD_ContentReaderFreeCallback crfc",
    "r->crfc = crfc;"
  ],
  "explanation": "I only flagged fragments that involve pointer types or pointer assignments where a const qualifier might reasonably be expected or could be lost. I did not flag the following code fragments because they are not relevant to MISRA C 2023 Rule 8.13 (pointer-to-const): NULL and size checks, the allocation call (MHD_calloc_), the mutex initialization and its error handling, integer/size assignments (r->fd, r->reference_count, r->total_size, r->data_size), the free(r) call, and the final return r; these do not involve pointer const-qualification issues or already use const (e.g. the parameter const void *buffer is already const-qualified). Therefore they do not need investigation under Rule 8.13."
}