{
  "user_message": "An agent A claimed that the following MHD_create_response_from_buffer_with_free_callback_cls code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_create_response_from_buffer_with_free_callback_cls.\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_buffer_with_free_callback_cls (size_t size,\n                                                        const void *buffer,\n                                                        MHD_ContentReaderFreeCallback\n                                                        crfc,\n                                                        void *crfc_cls)\n{\n  struct MHD_Response *r;\n\n  if ((NULL == buffer) && (size > 0))\n    return NULL;\n#if SIZEOF_SIZE_T >= SIZEOF_UINT64_T\n  if (MHD_SIZE_UNKNOWN == size)\n    return NULL;\n#endif /* SIZEOF_SIZE_T >= SIZEOF_UINT64_T */\n  r = MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL == r)\n    return NULL;\n#if defined(MHD_USE_THREADS)\n  if (! MHD_mutex_init_ (&r->mutex))\n  {\n    free (r);\n    return NULL;\n  }\n#endif\n  r->fd = -1;\n  r->reference_count = 1;\n  r->total_size = size;\n  r->data = buffer;\n  r->data_size = size;\n  r->crfc = crfc;\n  r->crc_cls = crfc_cls;\n  return r;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter buffer is declared as const void * but r->data is assigned from it. If struct MHD_Response::data is declared as void * (non-const), this assignment discards the const qualifier and therefore violates MISRA C 2023 Rule 8.13. To comply, MHD_Response::data should be declared as const void * (or an appropriate const-qualified pointer) so the pointer points to a const-qualified type whenever possible.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_create_response_from_buffer_with_free_callback_cls:\ntypedef void\n(*MHD_ContentReaderFreeCallback) (void *cls)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The argument from agent A is correct in principle: assigning a const void * parameter into a non-const pointer member (i.e. discarding the const qualifier) is exactly the kind of situation Rule 8.13 is intended to avoid. If struct MHD_Response::data is declared as void * (non-const), then r->data = buffer would discard the const qualifier and would be a violation (and also a constraint/qualifier-discarding conversion in C). However, the target snippet does not show the definition of struct MHD_Response. If r->data is declared as const void * (or otherwise const-qualified) then the assignment is fine and there is no Rule 8.13 violation. Therefore the report is only correct conditionally (it depends on the actual type of r->data). Without the struct definition you cannot definitively say there is a violation; if you find r->data is non-const, the report is correct and the member should be changed to point to a const-qualified type (or an explicit, justified cast should be added)."
}