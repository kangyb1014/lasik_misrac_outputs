{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of callback:\n```c\nstatic ssize_t\ncallback (void *cls,\n          uint64_t pos,\n          char *buf,\n          size_t buf_size)\n{\n  size_t size_to_copy;\n  struct ResponseContentCallbackParam *const param =\n    (struct ResponseContentCallbackParam *) cls;\n\n  /* Note: 'pos' will never exceed size of transmitted data. */\n  /* You can use 'pos == param->response_size' in next check. */\n  if (pos >= param->response_size)\n  {   /* Whole response was sent. Signal end of response. */\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  }\n\n  /* Pseudo code.        *\n  if (data_not_ready)\n    {\n      // Callback will be called again on next loop.\n      // Consider suspending connection until data will be ready.\n      return 0;\n    }\n   * End of pseudo code. */\n  if (buf_size < (param->response_size - pos))\n    size_to_copy = buf_size;\n  else\n    size_to_copy = (size_t) (param->response_size - pos);\n\n  memcpy (buf, param->response_data + pos, size_to_copy);\n\n  /* Pseudo code.        *\n  if (error_preparing_response)\n    {\n      // Close connection with error.\n      return MHD_CONTENT_READER_END_WITH_ERROR;\n    }\n   * End of pseudo code. */\n  /* Return amount of data copied to buffer. */\n  /* The 'buf_size' is always smaller than SSIZE_MAX therefore it's safe\n   * to cast 'size_to_copy' to 'ssize_t'. */\n  /* assert (size_to_copy <= buf_size); */\n  return (ssize_t) size_to_copy;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "memcpy (buf, param->response_data + pos, size_to_copy);",
    "if (pos >= param->response_size)\n{   /* Whole response was sent. Signal end of response. */\n  return MHD_CONTENT_READER_END_OF_STREAM;\n}",
    "if (buf_size < (param->response_size - pos))\n  size_to_copy = buf_size;\nelse\n  size_to_copy = (size_t) (param->response_size - pos);"
  ],
  "explanation": "The other lines and comments in the function are either declarations, control-flow comments/pseudocode, or return/cast statements that do not themselves call or pass pointers to <string.h> functions and therefore do not directly relate to Rule 21.17. Specifically:\n- The parameter declaration and the cast of cls to param merely obtain the structure pointer; any potential null/dereference issues are outside the scope of the string.h usage inspection required by Rule 21.17 (they should be checked elsewhere but are not string.h calls).\n- The commented pseudo-code blocks are non-executing and thus not relevant to runtime memcpy bounds checks.\n- The final cast and return (return (ssize_t) size_to_copy;) only convert the computed size to a return type and do not perform memory access via string.h functions.\n- The assertion comment (/* assert (size_to_copy <= buf_size); */) is a note, not executable code; any concrete checking should be examined where memcpy is used (the memcpy and the size_to_copy computation are included above).\n\nTherefore only the three reported fragments (the early pos>=response_size check, the computation of size_to_copy, and the memcpy call itself) need investigation with respect to Rule 21.17 to ensure that source and destination objects and their sizes/types guarantee no out-of-bounds accesses."
}