{
  "user_message": "An agent A claimed that the following callback code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of callback.\n```c\nstatic ssize_t\ncallback (void *cls,\n          uint64_t pos,\n          char *buf,\n          size_t buf_size)\n{\n  size_t size_to_copy;\n  struct ResponseContentCallbackParam *const param =\n    (struct ResponseContentCallbackParam *) cls;\n\n  /* Note: 'pos' will never exceed size of transmitted data. */\n  /* You can use 'pos == param->response_size' in next check. */\n  if (pos >= param->response_size)\n  {   /* Whole response was sent. Signal end of response. */\n    return MHD_CONTENT_READER_END_OF_STREAM;\n  }\n\n  /* Pseudo code.        *\n  if (data_not_ready)\n    {\n      // Callback will be called again on next loop.\n      // Consider suspending connection until data will be ready.\n      return 0;\n    }\n   * End of pseudo code. */\n  if (buf_size < (param->response_size - pos))\n    size_to_copy = buf_size;\n  else\n    size_to_copy = (size_t) (param->response_size - pos);\n\n  memcpy (buf, param->response_data + pos, size_to_copy);\n\n  /* Pseudo code.        *\n  if (error_preparing_response)\n    {\n      // Close connection with error.\n      return MHD_CONTENT_READER_END_WITH_ERROR;\n    }\n   * End of pseudo code. */\n  /* Return amount of data copied to buffer. */\n  /* The 'buf_size' is always smaller than SSIZE_MAX therefore it's safe\n   * to cast 'size_to_copy' to 'ssize_t'. */\n  /* assert (size_to_copy <= buf_size); */\n  return (ssize_t) size_to_copy;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'cls' is declared as void * but is only used for read access to a ResponseContentCallbackParam. The function casts cls to (struct ResponseContentCallbackParam *) and binds it to a non-const pointee: 'struct ResponseContentCallbackParam *const param'. This allows (and discards) modifiable access to the pointed-to object even though the callback only reads response_size and response_data (response_data itself is a const char *). Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type when possible (e.g. 'const void *cls' or casting to 'const struct ResponseContentCallbackParam *'), so the current signature/cast violates the rule.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function callback:\nstruct ResponseContentCallbackParam\n{\n  const char *response_data;\n  size_t response_size;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. Rule 8.13 requires that pointers point to const-qualified types whenever modification through the pointer is not intended. In the callback the incoming parameter is declared as void *cls and is cast to\n  struct ResponseContentCallbackParam *const param\nwhich is a const pointer to a non-const pointee. The function only performs read access (reads param->response_size and param->response_data) so the pointee should be const-qualified. This allows modification through param even though none is intended. Fixes: either change the callback signature to take const void *cls (if the API allows) or, at minimum, cast to a pointer-to-const, e.g.\n  const struct ResponseContentCallbackParam *const param = (const struct ResponseContentCallbackParam *)cls;\nwhich satisfies MISRA 8.13. Note: if the callback prototype is mandated by an external API and cannot be changed, casting the void * to a pointer-to-const inside the function is the appropriate remedy."
}