{
  "user_message": "An agent A claimed that the following calc_userdigest code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of calc_userdigest.\n```c\n_MHD_static_inline void\ncalc_userdigest (struct DigestAlgorithm *da,\n                 const char *username, const size_t username_len,\n                 const char *realm, const size_t realm_len,\n                 const char *password,\n                 uint8_t *ha1_bin)\n{\n  mhd_assert (! da->hashing);\n  digest_update (da, username, username_len);\n  digest_update_with_colon (da);\n  digest_update (da, realm, realm_len);\n  digest_update_with_colon (da);\n  digest_update_str (da, password);\n  digest_calc_hash (da, ha1_bin);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code uses the GCC/Clang compiler-specific attribute syntax __attribute__((always_inline)) (via the _MHD_static_inline macro). This attribute is a documented compiler extension and therefore violates MISRA C 2023 Rule 1.2 (language extensions should not be used).\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function calc_userdigest:\n#define _MHD_static_inline staticinline__attribute__((always_inline))\n...\n#define mhd_assert(ignore) ((void)0)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The _MHD_static_inline macro (as shown) expands to a GCC/Clang-specific attribute form (__attribute__((always_inline))), which is not part of standard C and is documented by compilers as an extension. MISRA C 2023 Rule 1.2 forbids use of language/compiler extensions; hiding the extension behind a macro does not avoid the rule. Given the provided macro definition, the code uses a compiler extension and therefore violates Rule 1.2."
}