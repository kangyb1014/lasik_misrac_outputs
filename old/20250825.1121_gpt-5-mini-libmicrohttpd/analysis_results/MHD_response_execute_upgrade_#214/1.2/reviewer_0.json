{
  "user_message": "An agent A claimed that the following MHD_response_execute_upgrade_ code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_response_execute_upgrade_.\n```c\nenum MHD_Result\nMHD_response_execute_upgrade_ (struct MHD_Response *response,\n                               struct MHD_Connection *connection)\n{\n#if defined(HTTPS_SUPPORT) || defined(_DEBUG) || defined(HAVE_MESSAGES)\n  struct MHD_Daemon *const daemon = connection->daemon;\n#endif /* HTTPS_SUPPORT || _DEBUG || HAVE_MESSAGES */\n  struct MHD_UpgradeResponseHandle *urh;\n  size_t rbo;\n\n#ifdef MHD_USE_THREADS\n  mhd_assert ( (! MHD_D_IS_USING_THREADS_ (daemon)) || \\\n               MHD_thread_handle_ID_is_current_thread_ (connection->tid) );\n#endif /* MHD_USE_THREADS */\n\n  /* \"Upgrade\" responses accepted only if MHD_ALLOW_UPGRADE is enabled */\n  mhd_assert (0 != (daemon->options & MHD_ALLOW_UPGRADE));\n  /* The header was checked when response queued */\n  mhd_assert (NULL != \\\n              MHD_get_response_element_n_ (response, MHD_HEADER_KIND,\n                                           MHD_HTTP_HEADER_UPGRADE,\n                                           MHD_STATICSTR_LEN_ ( \\\n                                             MHD_HTTP_HEADER_UPGRADE)));\n\n  if (! connection->sk_nonblck)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Cannot execute \\\"upgrade\\\" as the socket is in \" \\\n                 \"the blocking mode.\\n\"));\n#endif\n    return MHD_NO;\n  }\n  urh = MHD_calloc_ (1, sizeof (struct MHD_UpgradeResponseHandle));\n  if (NULL == urh)\n    return MHD_NO;\n  urh->connection = connection;\n  rbo = connection->read_buffer_offset;\n  connection->read_buffer_offset = 0;\n  MHD_connection_set_nodelay_state_ (connection, false);\n  MHD_connection_set_cork_state_ (connection, false);\n#ifdef HTTPS_SUPPORT\n  if (0 != (daemon->options & MHD_USE_TLS) )\n  {\n    MHD_socket sv[2];\n#if defined(MHD_socket_nosignal_) || ! defined(MHD_socket_pair_nblk_)\n    int res1;\n    int res2;\n#endif /* MHD_socket_nosignal_ || !MHD_socket_pair_nblk_ */\n\n#ifdef MHD_socket_pair_nblk_\n    if (! MHD_socket_pair_nblk_ (sv))\n    {\n      free (urh);\n      return MHD_NO;\n    }\n#else  /* !MHD_socket_pair_nblk_ */\n    if (! MHD_socket_pair_ (sv))\n    {\n      free (urh);\n      return MHD_NO;\n    }\n    res1 = MHD_socket_nonblocking_ (sv[0]);\n    res2 = MHD_socket_nonblocking_ (sv[1]);\n    if ( (! res1) || (! res2) )\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to make loopback sockets non-blocking.\\n\"));\n#endif\n      if (! res2)\n      {\n        /* Socketpair cannot be used. */\n        MHD_socket_close_chk_ (sv[0]);\n        MHD_socket_close_chk_ (sv[1]);\n        free (urh);\n        return MHD_NO;\n      }\n    }\n#endif /* !MHD_socket_pair_nblk_ */\n#ifdef MHD_socket_nosignal_\n    res1 = MHD_socket_nosignal_ (sv[0]);\n    res2 = MHD_socket_nosignal_ (sv[1]);\n    if ( (! res1) || (! res2) )\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Failed to set SO_NOSIGPIPE on loopback sockets.\\n\"));\n#endif\n#ifndef MSG_NOSIGNAL\n      if (! res2)\n      {\n        /* Socketpair cannot be used. */\n        MHD_socket_close_chk_ (sv[0]);\n        MHD_socket_close_chk_ (sv[1]);\n        free (urh);\n        return MHD_NO;\n      }\n#endif /* ! MSG_NOSIGNAL */\n    }\n#endif /* MHD_socket_nosignal_ */\n    if (MHD_D_IS_USING_SELECT_ (daemon) &&\n        (! MHD_D_DOES_SCKT_FIT_FDSET_ (sv[1], daemon)) )\n    {\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Socketpair descriptor is not less than FD_SETSIZE: \" \\\n                   \"%d >= %d\\n\"),\n                (int) sv[1],\n                (int) MHD_D_GET_FD_SETSIZE_ (daemon));\n#endif\n      MHD_socket_close_chk_ (sv[0]);\n      MHD_socket_close_chk_ (sv[1]);\n      free (urh);\n      return MHD_NO;\n    }\n    urh->app.socket = sv[0];\n    urh->app.urh = urh;\n    urh->app.celi = MHD_EPOLL_STATE_UNREADY;\n    urh->mhd.socket = sv[1];\n    urh->mhd.urh = urh;\n    urh->mhd.celi = MHD_EPOLL_STATE_UNREADY;\n#ifdef EPOLL_SUPPORT\n    /* Launch IO processing by the event loop */\n    if (MHD_D_IS_USING_EPOLL_ (daemon))\n    {\n      /* We're running with epoll(), need to add the sockets\n         to the event set of the daemon's `epoll_upgrade_fd` */\n      struct epoll_event event;\n\n      mhd_assert (-1 != daemon->epoll_upgrade_fd);\n      /* First, add network socket */\n      event.events = EPOLLIN | EPOLLOUT | EPOLLPRI | EPOLLET;\n      event.data.ptr = &urh->app;\n      if (0 != epoll_ctl (daemon->epoll_upgrade_fd,\n                          EPOLL_CTL_ADD,\n                          connection->socket_fd,\n                          &event))\n      {\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (daemon,\n                  _ (\"Call to epoll_ctl failed: %s\\n\"),\n                  MHD_socket_last_strerr_ ());\n#endif\n        MHD_socket_close_chk_ (sv[0]);\n        MHD_socket_close_chk_ (sv[1]);\n        free (urh);\n        return MHD_NO;\n      }\n\n      /* Second, add our end of the UNIX socketpair() */\n      event.events = EPOLLIN | EPOLLOUT | EPOLLPRI | EPOLLET;\n      event.data.ptr = &urh->mhd;\n      if (0 != epoll_ctl (daemon->epoll_upgrade_fd,\n                          EPOLL_CTL_ADD,\n                          urh->mhd.socket,\n                          &event))\n      {\n        event.events = EPOLLIN | EPOLLOUT | EPOLLPRI;\n        event.data.ptr = &urh->app;\n        if (0 != epoll_ctl (daemon->epoll_upgrade_fd,\n                            EPOLL_CTL_DEL,\n                            connection->socket_fd,\n                            &event))\n          MHD_PANIC (_ (\"Error cleaning up while handling epoll error.\\n\"));\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (daemon,\n                  _ (\"Call to epoll_ctl failed: %s\\n\"),\n                  MHD_socket_last_strerr_ ());\n#endif\n        MHD_socket_close_chk_ (sv[0]);\n        MHD_socket_close_chk_ (sv[1]);\n        free (urh);\n        return MHD_NO;\n      }\n      EDLL_insert (daemon->eready_urh_head,\n                   daemon->eready_urh_tail,\n                   urh);\n      urh->in_eready_list = true;\n    }\n#endif /* EPOLL_SUPPORT */\n    if (! MHD_D_IS_USING_THREAD_PER_CONN_ (daemon))\n    {\n      /* This takes care of further processing for most event loops:\n         simply add to DLL for bi-direcitonal processing */\n      DLL_insert (daemon->urh_head,\n                  daemon->urh_tail,\n                  urh);\n    }\n    /* In thread-per-connection mode, thread will switch to forwarding once\n     * connection.urh is not NULL and connection.state == MHD_CONNECTION_UPGRADE.\n     */\n  }\n  else\n  {\n    urh->app.socket = MHD_INVALID_SOCKET;\n    urh->mhd.socket = MHD_INVALID_SOCKET;\n    /* Non-TLS connection do not hold any additional resources. */\n    urh->clean_ready = true;\n  }\n#else  /* ! HTTPS_SUPPORT */\n  urh->clean_ready = true;\n#endif /* ! HTTPS_SUPPORT */\n  connection->urh = urh;\n  /* As far as MHD's event loops are concerned, this connection is\n     suspended; it will be resumed once application is done by the\n     #MHD_upgrade_action() function */\n  internal_suspend_connection_ (connection);\n\n  /* hand over socket to application */\n  response->upgrade_handler (response->upgrade_handler_cls,\n                             connection,\n                             connection->rq.client_context,\n                             connection->read_buffer,\n                             rbo,\n#ifdef HTTPS_SUPPORT\n                             (0 == (daemon->options & MHD_USE_TLS) ) ?\n                             connection->socket_fd : urh->app.socket,\n#else  /* ! HTTPS_SUPPORT */\n                             connection->socket_fd,\n#endif /* ! HTTPS_SUPPORT */\n                             urh);\n\n#ifdef HTTPS_SUPPORT\n  if (0 != (daemon->options & MHD_USE_TLS))\n  {\n    struct MemoryPool *const pool = connection->pool;\n    size_t avail;\n    char *buf;\n\n    /* All data should be sent already */\n    mhd_assert (connection->write_buffer_send_offset == \\\n                connection->write_buffer_append_offset);\n    MHD_pool_deallocate (pool, connection->write_buffer,\n                         connection->write_buffer_size);\n    connection->write_buffer_append_offset = 0;\n    connection->write_buffer_send_offset = 0;\n    connection->write_buffer_size = 0;\n    connection->write_buffer = NULL;\n\n    /* Extra read data should be processed already by the application */\n    MHD_pool_deallocate (pool, connection->read_buffer,\n                         connection->read_buffer_size);\n    connection->read_buffer_offset = 0;\n    connection->read_buffer_size = 0;\n    connection->read_buffer = NULL;\n\n    avail = MHD_pool_get_free (pool);\n    if (avail < RESERVE_EBUF_SIZE)\n    {\n      /* connection's pool is totally at the limit,\n         use our 'emergency' buffer of #RESERVE_EBUF_SIZE bytes. */\n      avail = RESERVE_EBUF_SIZE;\n      buf = urh->e_buf;\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (daemon,\n                _ (\"Memory shortage in connection's memory pool. \" \\\n                   \"The \\\"upgraded\\\" communication will be inefficient.\\n\"));\n#endif\n    }\n    else\n    {\n      /* Normal case: grab all remaining memory from the\n         connection's pool for the IO buffers; the connection\n         certainly won't need it anymore as we've upgraded\n         to another protocol. */\n      buf = MHD_pool_allocate (pool,\n                               avail,\n                               false);\n    }\n    /* use half the buffer for inbound, half for outbound */\n    urh->in_buffer_size = avail / 2;\n    urh->out_buffer_size = avail - urh->in_buffer_size;\n    urh->in_buffer = buf;\n    urh->out_buffer = buf + urh->in_buffer_size;\n  }\n#endif /* HTTPS_SUPPORT */\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe MHD_PANIC macro expands to include BUILTIN_NOT_REACHED. BUILTIN_NOT_REACHED typically maps to a compiler builtin such as __builtin_unreachable() (a GCC/Clang language extension). Thus the fragment MHD_PANIC(_(\"Error cleaning up while handling epoll error.\\n\")); uses a compiler-specific builtin extension and violates MISRA C 2023 Rule 1.2.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_response_execute_upgrade_:\n#define mhd_assert(ignore) ((void)0)\n...\nvoid\nMHD_DLOG (const struct MHD_Daemon *daemon,\n          const char *format,\n          ...)\n{\n  va_list va;\n\n  if (0 == (daemon->options & MHD_USE_ERROR_LOG))\n    return;\n  va_start (va, format);\n  daemon->custom_error_log (daemon->custom_error_log_cls,\n                            format,\n                            va);\n  va_end (va);\n}\n...\n#define MHD_PANIC(msg) do{mhd_panic(mhd_panic_cls,__FILE__,__LINE__,msg);BUILTIN_NOT_REACHED;}while(0)\n...\n#define EDLL_insert(head, tail, element) do{(element)->nextE=(head);(element)->prevE=NULL;if((tail)==NULL){(tail)=element;}else{(head)->prevE=element;}(head)=(element);}while(0)\n...\n#define DLL_insert(head, tail, element) do{mhd_assert(NULL==(element)->next);mhd_assert(NULL==(element)->prev);(element)->next=(head);(element)->prev=NULL;if((tail)==NULL){(tail)=element;}else{(head)->prev=element;}(head)=(element);}while(0)\n...\n#define MHD_socket_pair_nblk_(fdarr) (!socketpair(MHD_SCKT_LOCAL,SOCK_STREAM|SOCK_NONBLOCK,0,(fdarr)))\n...\n#define MHD_socket_pair_(fdarr) (!socketpair(MHD_SCKT_LOCAL,SOCK_STREAM,0,(fdarr)))\n...\nint\nMHD_socket_nonblocking_ (MHD_socket sock)\n{\n#if defined(MHD_POSIX_SOCKETS)\n  int flags;\n\n  flags = fcntl (sock,\n                 F_GETFL);\n  if (-1 == flags)\n    return 0;\n\n  if ( ((flags | O_NONBLOCK) != flags) &&\n       (0 != fcntl (sock,\n                    F_SETFL,\n                    flags | O_NONBLOCK)) )\n    return 0;\n#elif defined(MHD_WINSOCK_SOCKETS)\n  unsigned long flags = 1;\n\n  if (0 != ioctlsocket (sock,\n                        (int) FIONBIO,\n                        &flags))\n    return 0;\n#endif /* MHD_WINSOCK_SOCKETS */\n  return ! 0;\n}\n...\n#define MHD_socket_close_chk_(fd) do{if(!MHD_socket_close_(fd))MHD_PANIC(_(\"Close socket failed.\\n\"));\\\n}while(0)\n...\n#define MHD_STATICSTR_LEN_(macro) (sizeof(macro)/sizeof(char)-1)\n...\nstruct MHD_HTTP_Res_Header *\nMHD_get_response_element_n_ (struct MHD_Response *response,\n                             enum MHD_ValueKind kind,\n                             const char *key,\n                             size_t key_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  mhd_assert (NULL != key);\n  mhd_assert (0 != key[0]);\n  mhd_assert (0 != key_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_len) &&\n        (kind == pos->kind) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos;\n  }\n  return NULL;\n}\n...\nvoid *\nMHD_pool_allocate (struct MemoryPool *pool,\n                   size_t size,\n                   bool from_end)\n{\n  void *ret;\n  size_t asize;\n\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n  asize = ROUND_TO_ALIGN_PLUS_RED_ZONE (size);\n  if ( (0 == asize) && (0 != size) )\n    return NULL; /* size too close to SIZE_MAX */\n  if (asize > pool->end - pool->pos)\n    return NULL;\n  if (from_end)\n  {\n    ret = &pool->memory[pool->end - asize];\n    pool->end -= asize;\n  }\n  else\n  {\n    ret = &pool->memory[pool->pos];\n    pool->pos += asize;\n  }\n  _MHD_UNPOISON_MEMORY (ret, size);\n  return ret;\n}\n...\nvoid\nMHD_pool_deallocate (struct MemoryPool *pool,\n                     void *block,\n                     size_t block_size)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (block != NULL || block_size == 0);\n  mhd_assert (pool->size >= block_size);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n\n  if (NULL != block)\n  {   /* Have previously allocated data */\n    const size_t block_offset = mp_ptr_diff_ (block, pool->memory);\n    mhd_assert (mp_ptr_le_ (pool->memory, block));\n    mhd_assert (block_offset <= pool->size);\n    mhd_assert ((block_offset != pool->pos) || (block_size == 0));\n    /* Zero-out deallocated region */\n    if (0 != block_size)\n    {\n      memset (block, 0, block_size);\n      _MHD_POISON_MEMORY (block, block_size);\n    }\n#if ! defined(MHD_FAVOR_SMALL_CODE) && ! defined(MHD_ASAN_POISON_ACTIVE)\n    else\n      return; /* Zero size, no need to do anything */\n#endif /* ! MHD_FAVOR_SMALL_CODE && ! MHD_ASAN_POISON_ACTIVE */\n    if (block_offset <= pool->pos)\n    {\n      /* \"Normal\" block, not allocated \"from the end\". */\n      const size_t alg_end =\n        ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size);\n      mhd_assert (alg_end <= pool->pos);\n      if (alg_end == pool->pos)\n      {\n        /* The last allocated block, return deallocated block to the pool */\n        size_t alg_start = ROUND_TO_ALIGN (block_offset);\n        mhd_assert (alg_start >= block_offset);\n#if defined(MHD_ASAN_POISON_ACTIVE)\n        if (alg_start != block_offset)\n        {\n          _MHD_POISON_MEMORY (pool->memory + block_offset, \\\n                              alg_start - block_offset);\n        }\n        else if (0 != alg_start)\n        {\n          bool need_red_zone_before;\n          mhd_assert (_MHD_RED_ZONE_SIZE <= alg_start);\n#if defined(HAVE___ASAN_REGION_IS_POISONED)\n          need_red_zone_before =\n            (NULL == __asan_region_is_poisoned (pool->memory\n                                                + alg_start\n                                                - _MHD_RED_ZONE_SIZE,\n                                                _MHD_RED_ZONE_SIZE));\n#elif defined(HAVE___ASAN_ADDRESS_IS_POISONED)\n          need_red_zone_before =\n            (0 == __asan_address_is_poisoned (pool->memory + alg_start - 1));\n#else  /* ! HAVE___ASAN_ADDRESS_IS_POISONED */\n          need_red_zone_before = true; /* Unknown, assume new red zone needed */\n#endif /* ! HAVE___ASAN_ADDRESS_IS_POISONED */\n          if (need_red_zone_before)\n          {\n            _MHD_POISON_MEMORY (pool->memory + alg_start, _MHD_RED_ZONE_SIZE);\n            alg_start += _MHD_RED_ZONE_SIZE;\n          }\n        }\n#endif /* MHD_ASAN_POISON_ACTIVE */\n        mhd_assert (alg_start <= pool->pos);\n        mhd_assert (alg_start == ROUND_TO_ALIGN (alg_start));\n        pool->pos = alg_start;\n      }\n    }\n    else\n    {\n      /* Allocated \"from the end\" block. */\n      /* The size and the pointers of such block should not be manipulated by\n         MHD code (block split is disallowed). */\n      mhd_assert (block_offset >= pool->end);\n      mhd_assert (ROUND_TO_ALIGN (block_offset) == block_offset);\n      if (block_offset == pool->end)\n      {\n        /* The last allocated block, return deallocated block to the pool */\n        const size_t alg_end =\n          ROUND_TO_ALIGN_PLUS_RED_ZONE (block_offset + block_size);\n        pool->end = alg_end;\n      }\n    }\n  }\n}\n...\nsize_t\nMHD_pool_get_free (struct MemoryPool *pool)\n{\n  mhd_assert (pool->end >= pool->pos);\n  mhd_assert (pool->size >= pool->end - pool->pos);\n  mhd_assert (pool->pos == ROUND_TO_ALIGN (pool->pos));\n#ifdef MHD_ASAN_POISON_ACTIVE\n  if ((pool->end - pool->pos) <= _MHD_RED_ZONE_SIZE)\n    return 0;\n#endif /* MHD_ASAN_POISON_ACTIVE */\n  return (pool->end - pool->pos) - _MHD_RED_ZONE_SIZE;\n}\n...\n#define MHD_calloc_(n, s) calloc((n),(s))\n...\n#define MHD_PANIC(msg) do{mhd_panic(mhd_panic_cls,__FILE__,__LINE__,msg);BUILTIN_NOT_REACHED;}while(0)\n...\n#define MHD_INVALID_SOCKET (-1)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A's claim is not definitively correct based on the code provided. The only potential use of a compiler builtin/extension is via the MHD_PANIC macro which expands to include BUILTIN_NOT_REACHED. However, the concrete definition/expansion of BUILTIN_NOT_REACHED is not present in the supplied snippets. MISRA C:2023 Rule 1.2 forbids use of language/compiler extensions only when such extensions are actually used (i.e. the code expands to a compiler-specific builtin like __builtin_unreachable()). If BUILTIN_NOT_REACHED is defined on some platforms as (or expands to) __builtin_unreachable() (or another compiler-specific builtin), then the code will indeed use a language extension and would violate Rule 1.2. If BUILTIN_NOT_REACHED is defined as an empty macro or as some strictly-standard-compliant construct, then there is no violation. Therefore, with the information given the report is not proven correct \u2014 you must inspect the definition of BUILTIN_NOT_REACHED (and any conditional compilation that sets it) to determine whether a compiler-specific builtin is actually used."
}