{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of check_apply_param__all_cpus:\n```c\nstatic void\ncheck_apply_param__all_cpus (void)\n{\n  if (! tool_params.all_cpus)\n    return;\n\n  num_threads = get_process_cpu_core_count ();\n  printf (\"Requested use of all available CPU cores for MHD threads.\\n\");\n  if (get_cpu_core_count () == num_threads)\n    print_all_cores_used ();\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function check_apply_param__all_cpus:\nstatic unsigned int\nget_process_cpu_core_count (void)\n{\n  static unsigned int proc_num_cpu_cores = 0;\n  if (0 == proc_num_cpu_cores)\n    proc_num_cpu_cores = detect_process_cpu_core_count ();\n  return proc_num_cpu_cores;\n}\n...\nstatic unsigned int\nget_cpu_core_count (void)\n{\n  static unsigned int num_cpu_cores = 0;\n  if (0 == num_cpu_cores)\n    num_cpu_cores = detect_cpu_core_count ();\n  return num_cpu_cores;\n}\n...\nstatic void\nprint_all_cores_used (void)\n{\n  printf (\"No CPU cores on this machine are left unused and available \"\n          \"for the client / requests generator. \"\n          \"Testing with remote client is recommended.\\n\");\n}\n...\nstatic unsigned int\ndetect_process_cpu_core_count (void)\n{\n  unsigned int num_proc_cpu_cores;\n  unsigned int sys_cpu_cores;\n  int res;\n\n  sys_cpu_cores = get_cpu_core_count ();\n  res = mhd_tool_get_proc_cpu_count ();\n  if (0 > res)\n  {\n    fprintf (stderr, \"Cannot detect the number of logical CPU cores available \"\n             \"for this process.\\n\");\n    if (1 != sys_cpu_cores)\n      printf (\"Assuming all %u system logical CPU cores are available to run \"\n              \"threads of this process.\\n\", sys_cpu_cores);\n    else\n      printf (\"Assuming single logical CPU core available for this process.\\n\");\n    num_proc_cpu_cores = sys_cpu_cores;\n  }\n  else\n  {\n    printf (\"Detected %d logical CPU core%s available to run threads \"\n            \"of this process.\\n\", res, (1 == res) ? \"\" : \"s\");\n    num_proc_cpu_cores = (unsigned int) res;\n  }\n  if (num_proc_cpu_cores > sys_cpu_cores)\n  {\n    fprintf (stderr, \"WARNING: Detected number of CPU cores available \"\n             \"for this process (%u) is larger than detected number \"\n             \"of CPU cores on the system (%u).\\n\",\n             num_proc_cpu_cores, sys_cpu_cores);\n    num_proc_cpu_cores = sys_cpu_cores;\n    fprintf (stderr, \"Using %u as the number of logical CPU cores available \"\n             \"for this process.\\n\", num_proc_cpu_cores);\n  }\n  return num_proc_cpu_cores;\n}\n...\nstatic unsigned int\ndetect_cpu_core_count (void)\n{\n  int sys_cpu_count;\n  sys_cpu_count = mhd_tool_get_system_cpu_count ();\n  if (0 >= sys_cpu_count)\n  {\n    int proc_cpu_count;\n    fprintf (stderr, \"Failed to detect the number of logical CPU cores \"\n             \"available on the system.\\n\");\n    proc_cpu_count = mhd_tool_get_proc_cpu_count ();\n    if (0 < proc_cpu_count)\n    {\n      fprintf (stderr, \"The number of CPU cores available for this process \"\n               \"is used as a fallback.\\n\");\n      sys_cpu_count = proc_cpu_count;\n    }\n#ifdef MHD_REAL_CPU_COUNT\n    if (0 >= sys_cpu_count)\n    {\n      fprintf (stderr, \"configure-detected hardcoded number is used \"\n               \"as a fallback.\\n\");\n      sys_cpu_count = MHD_REAL_CPU_COUNT;\n    }\n#endif\n    if (0 >= sys_cpu_count)\n      sys_cpu_count = 1;\n    printf (\"Assuming %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  else\n  {\n    printf (\"Detected %d logical CPU core%s on this system.\\n\", sys_cpu_count,\n            (1 == sys_cpu_count) ? \"\" : \"s\");\n  }\n  return (unsigned int) sys_cpu_count;\n}\n...\nstatic unsigned int\nget_num_threads (void)\n{\n#if 0  /* disalbed code */\n  static const unsigned int max_threads = 32;\n#endif /* disalbed code */\n  if (0 < num_threads)\n    return num_threads;\n\n  num_threads = get_cpu_core_count () / 2;\n  if (0 == num_threads)\n    num_threads = 1;\n  else\n  {\n    unsigned int num_proc_cpus;\n    num_proc_cpus = get_process_cpu_core_count ();\n    if (num_proc_cpus >= num_threads)\n    {\n      printf (\"Using half of all available CPU cores, assuming the other half \"\n              \"is used by client / requests generator.\\n\");\n    }\n    else\n    {\n      printf (\"Using all CPU cores available for this process as more than \"\n              \"half of CPU cores on this system are still available for use \"\n              \"by client / requests generator.\\n\");\n      num_threads = num_proc_cpus;\n    }\n  }\n#if 0  /* disalbed code */\n  if (max_threads < num_threads)\n  {\n    printf (\"Number of threads are limited to %u as more threads \"\n            \"are unlikely to improve the performance.\\n\", max_threads);\n    num_threads = max_threads;\n  }\n#endif /* disalbed code */\n\n  return num_threads;\n}\n...\nstatic void\ncheck_apply_param__threads (void)\n{\n  if (0 == tool_params.threads)\n    return;\n\n  num_threads = tool_params.threads;\n\n  if (get_process_cpu_core_count () < num_threads)\n  {\n    fprintf (stderr, \"WARNING: The requested number of threads (%u) is \"\n             \"higher than the number of detected available CPU cores (%u).\\n\",\n             num_threads, get_process_cpu_core_count ());\n    fprintf (stderr, \"This decreases the performance. \"\n             \"Consider using fewer threads.\\n\");\n  }\n  if (get_cpu_core_count () == num_threads)\n  {\n    printf (\"The requested number of threads is equal to the number of \"\n            \"detected CPU cores.\\n\");\n    print_all_cores_used ();\n  }\n}\n...\nstatic int\ninit_data (void)\n{\n  unsigned int i;\n\n  if (tool_params.medium)\n    body_dyn_size = 8U * 1024U;\n  else if (tool_params.large)\n    body_dyn_size = 1024U * 1024U;\n  else\n    body_dyn_size = 0;\n\n  if (! init_response_body_data ())\n    return 25;\n\n  if (tool_params.unique)\n    return 0; /* Responses are generated on-fly */\n\n  if (tool_params.single)\n  {\n    resp_single = create_response_object ();\n    if (NULL == resp_single)\n    {\n      fprintf (stderr, \"Failed to create response.\\n\");\n      return 25;\n    }\n    return 0;\n  }\n\n  /* Use more responses to minimise waiting in threads while the response\n     used by other thread. */\n  if (! tool_params.thread_per_conn)\n    num_resps = 16 * get_num_threads ();\n  else\n    num_resps = 16 * get_cpu_core_count ();\n\n  resps = (struct MHD_Response **)\n          malloc ((sizeof(struct MHD_Response *)) * num_resps);\n  if (NULL == resps)\n  {\n    if (NULL != body_dyn)\n    {\n      free (body_dyn);\n      body_dyn = NULL;\n    }\n    fprintf (stderr, \"Failed to allocate memory.\\n\");\n    return 25;\n  }\n  for (i = 0; i < num_resps; ++i)\n  {\n    resps[i] = create_response_object ();\n    if (NULL == resps[i])\n    {\n      fprintf (stderr, \"Failed to create responses.\\n\");\n      break;\n    }\n  }\n  if (i == num_resps)\n    return 0; /* Success */\n\n  /* Cleanup */\n  while (--i < num_resps)\n    MHD_destroy_response (resps[i]);\n  free (resps);\n  resps = NULL;\n  num_resps = 0;\n  if (NULL != body_dyn)\n    free (body_dyn);\n  body_dyn = NULL;\n  return 32;\n}\n...\nstatic int\ncheck_apply_params (void)\n{\n  if (tool_params.help)\n  {\n    show_help ();\n    return -1;\n  }\n  else if (tool_params.version)\n  {\n    print_version ();\n    return -1;\n  }\n  check_param_port ();\n  check_apply_param__all_cpus ();\n  check_apply_param__threads ();\n  if (! check_apply_param__thread_per_conn ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  if (! check_param__epoll ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  if (! check_param__poll ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  check_param__empty_tiny_medium_large ();\n  check_param__shared_single_unique ();\n  if (! check_param__connections ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  return 0;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I examined the provided functions and their call relationships: check_apply_param__all_cpus -> get_process_cpu_core_count -> detect_process_cpu_core_count -> get_cpu_core_count -> detect_cpu_core_count, and the other related functions (get_num_threads, init_data, check_apply_param__threads, check_apply_params, print_all_cores_used). None of these functions call themselves directly, and there is no cycle in the shown call graph that would create indirect recursion. The functions that call external helpers (mhd_tool_get_proc_cpu_count, mhd_tool_get_system_cpu_count, MHD_destroy_response, etc.) do not appear to call back into the local functions in the provided code. Therefore there are no suspicious fragments indicating direct or indirect self-calls in the supplied code; no fragments need further investigation for MISRA C 2023 Rule 17.2 based on the code shown. If any of the external functions (mhd_tool_* or other library calls) can call back into these functions, those external definitions would need to be reviewed, but they are not part of the provided code."
}