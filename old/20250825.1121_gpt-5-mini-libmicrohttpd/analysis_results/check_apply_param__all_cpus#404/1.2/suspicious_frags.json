{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of check_apply_param__all_cpus:\n```c\nstatic void\ncheck_apply_param__all_cpus (void)\n{\n  if (! tool_params.all_cpus)\n    return;\n\n  num_threads = get_process_cpu_core_count ();\n  printf (\"Requested use of all available CPU cores for MHD threads.\\n\");\n  if (get_cpu_core_count () == num_threads)\n    print_all_cores_used ();\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No compiler language extensions are used in the provided code fragment. Specifically:\n- There are no GCC/Clang extensions such as nested functions, statement-expressions ({ ... }), typeof, __attribute__, __builtin_*, asm, or labels-as-values.\n- There are no nonstandard keywords or language constructs (the function is a normal static void function with a standard (void) parameter list).\n- Use of printf and function calls (get_process_cpu_core_count, get_cpu_core_count, print_all_cores_used) are standard C calls and do not imply language extensions in this snippet.\n- The identifier contains a double underscore sequence (check_apply_param__all_cpus), which may be reserved by the implementation under other MISRA rules but is not itself a compiler language extension as required by Rule 1.2, so it is not flagged here.\n\nTherefore, nothing in this snippet meets the criterion \u201cuse of language compiler extensions explicitly stated as an extension in compiler documentation.\u201d"
}