{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_parse_arguments_:\n```c\nenum MHD_Result\nMHD_parse_arguments_ (struct MHD_Connection *connection,\n                      enum MHD_ValueKind kind,\n                      char *args,\n                      MHD_ArgumentIterator_ cb,\n                      void *cls)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  char *equals;\n  char *amper;\n\n  while ( (NULL != args) &&\n          ('\\0' != args[0]) )\n  {\n    size_t key_len;\n    size_t value_len;\n    equals = strchr (args, '=');\n    amper = strchr (args, '&');\n    if (NULL == amper)\n    {\n      /* last argument */\n      if (NULL == equals)\n      {\n        /* last argument, without '=' */\n        MHD_unescape_plus (args);\n        key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             args);\n        if (MHD_NO == cb (cls,\n                          args,\n                          key_len,\n                          NULL,\n                          0,\n                          kind))\n          return MHD_NO;\n        break;\n      }\n      /* got 'foo=bar' */\n      equals[0] = '\\0';\n      equals++;\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      MHD_unescape_plus (equals);\n      value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             equals);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        equals,\n                        value_len,\n                        kind))\n        return MHD_NO;\n      break;\n    }\n    /* amper is non-NULL here */\n    amper[0] = '\\0';\n    amper++;\n    if ( (NULL == equals) ||\n         (equals >= amper) )\n    {\n      /* got 'foo&bar' or 'foo&bar=val', add key 'foo' with NULL for value */\n      MHD_unescape_plus (args);\n      key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           args);\n      if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        NULL,\n                        0,\n                        kind))\n        return MHD_NO;\n      /* continue with 'bar' */\n      args = amper;\n      continue;\n    }\n    /* equals and amper are non-NULL here, and equals < amper,\n so we got regular 'foo=value&bar...'-kind of argument */\n    equals[0] = '\\0';\n    equals++;\n    MHD_unescape_plus (args);\n    key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                         connection,\n                                         args);\n    MHD_unescape_plus (equals);\n    value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                           connection,\n                                           equals);\n    if (MHD_NO == cb (cls,\n                      args,\n                      key_len,\n                      equals,\n                      value_len,\n                      kind))\n      return MHD_NO;\n    args = amper;\n  }\n  return MHD_YES;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_parse_arguments_:\nchar *args\n...\nchar *args\n...\nenum MHD_ValueKind\n{\n\n  /**\n   * Response header\n   * @deprecated\n   */\n  MHD_RESPONSE_HEADER_KIND = 0,\n#define MHD_RESPONSE_HEADER_KIND \\\n  _MHD_DEPR_IN_MACRO ( \\\n    \"Value MHD_RESPONSE_HEADER_KIND is deprecated and not used\") \\\n  MHD_RESPONSE_HEADER_KIND\n\n  /**\n   * HTTP header (request/response).\n   */\n  MHD_HEADER_KIND = 1,\n\n  /**\n   * Cookies.  Note that the original HTTP header containing\n   * the cookie(s) will still be available and intact.\n   */\n  MHD_COOKIE_KIND = 2,\n\n  /**\n   * POST data.  This is available only if a content encoding\n   * supported by MHD is used (currently only URL encoding),\n   * and only if the posted content fits within the available\n   * memory pool.  Note that in that case, the upload data\n   * given to the #MHD_AccessHandlerCallback will be\n   * empty (since it has already been processed).\n   */\n  MHD_POSTDATA_KIND = 4,\n\n  /**\n   * GET (URI) arguments.\n   */\n  MHD_GET_ARGUMENT_KIND = 8,\n\n  /**\n   * HTTP footer (only for HTTP 1.1 chunked encodings).\n   */\n  MHD_FOOTER_KIND = 16\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "equals++;",
    "value_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             equals);",
    "if (MHD_NO == cb (cls,\n                          args,\n                          key_len,\n                          NULL,\n                          0,\n                          kind))\n          return MHD_NO;",
    "amper++;",
    "equals[0] = '\\0';",
    "key_len = daemon->unescape_callback (daemon->unescape_callback_cls,\n                                             connection,\n                                             args);",
    "MHD_unescape_plus (equals);",
    "amper[0] = '\\0';",
    "MHD_unescape_plus (args);",
    "if (MHD_NO == cb (cls,\n                        args,\n                        key_len,\n                        equals,\n                        value_len,\n                        kind))\n        return MHD_NO;",
    "amper = strchr (args, '&');",
    "equals = strchr (args, '=');"
  ],
  "explanation": "The MISRA C Rule 21.17 concerns use of string handling functions from <string.h> and any code that supplies pointers into character buffers to functions that may operate on them. In this function, the only direct uses of standard <string.h> functionality are the two calls to strchr; these can read until a terminating NUL and therefore must be checked to ensure the 'args' buffer is a valid NUL-terminated object of adequate bounds. Writes that create temporary NUL terminators at the locations returned by strchr (equals[0] = '\\0'; amper[0] = '\\0'; and the subsequent pointer increments) are directly related to the use of strchr and can affect subsequent string operations, so they are included for investigation. Calls that operate on the pointers returned by strchr (MHD_unescape_plus, daemon->unescape_callback and the cb invocations that receive args/equals and associated lengths) are included because those functions will process the strings pointed to and could internally call string.h routines or otherwise access beyond the original object bounds if the inputs are invalid. Other code fragments (loop control, pointer assignments like args = amper, pointer comparisons, return statements, enum definitions, and local variable declarations) do not themselves invoke <string.h> functions nor directly manipulate character buffers in a way that could cause library string functions to access out-of-bounds memory, so they are not flagged for this rule."
}