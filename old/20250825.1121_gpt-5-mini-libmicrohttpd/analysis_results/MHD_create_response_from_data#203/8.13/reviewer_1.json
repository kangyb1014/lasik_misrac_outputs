{
  "user_message": "An agent A claimed that the following MHD_create_response_from_data code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_create_response_from_data.\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_data (size_t size,\n                               void *data,\n                               int must_free,\n                               int must_copy)\n{\n  enum MHD_ResponseMemoryMode mode;\n\n  if (0 != must_copy)\n    mode = MHD_RESPMEM_MUST_COPY;\n  else if (0 != must_free)\n    mode = MHD_RESPMEM_MUST_FREE;\n  else\n    mode = MHD_RESPMEM_PERSISTENT;\n\n  return MHD_create_response_from_buffer (size, data, mode);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'void *data' is not const-qualified even though the data is only forwarded and not modified. According to MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type when possible. The parameter should be declared as 'const void *data' (and the called function's prototype should accept 'const void *') so the call 'MHD_create_response_from_buffer(size, data, mode);' uses a const-qualified pointer. If the downstream function genuinely needs to modify the buffer, then the current code is acceptable; otherwise this is a violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct in this context. Although Rule 8.13 prefers pointers to point to const-qualified types when feasible, in this API the data pointer is forwarded to MHD_create_response_from_buffer with a memory-mode that can transfer ownership (MHD_RESPMEM_MUST_FREE). The implementation/library may free (or otherwise treat as non-const) the buffer, and the downstream prototype expects a void * (not a const void *). Making the parameter const void * would be inappropriate for the must_free case (and would break the call to the existing create_response_from_buffer without casting). If the underlying API truly never modified/freed the buffer, then both functions could be changed to accept const void *, but given the ownership semantics here the non-const void * is justified and the claimed MISRA violation is not applicable."
}