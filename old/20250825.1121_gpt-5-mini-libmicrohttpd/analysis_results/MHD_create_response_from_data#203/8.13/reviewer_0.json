{
  "user_message": "An agent A claimed that the following MHD_create_response_from_data code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_create_response_from_data.\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_data (size_t size,\n                               void *data,\n                               int must_free,\n                               int must_copy)\n{\n  enum MHD_ResponseMemoryMode mode;\n\n  if (0 != must_copy)\n    mode = MHD_RESPMEM_MUST_COPY;\n  else if (0 != must_free)\n    mode = MHD_RESPMEM_MUST_FREE;\n  else\n    mode = MHD_RESPMEM_PERSISTENT;\n\n  return MHD_create_response_from_buffer (size, data, mode);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'data' is declared as void * but is not modified in this function (it is only forwarded to MHD_create_response_from_buffer). According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible; therefore 'data' should be declared as 'const void *data'. As shown, the function does not alter the pointed-to object, so using 'void *' violates Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. Although this wrapper does not itself modify the pointed-to object, the 'data' argument is forwarded to MHD_create_response_from_buffer with a memory-mode (MHD_RESPMEM_MUST_FREE / MHD_RESPMEM_MUST_COPY / MHD_RESPMEM_PERSISTENT) that conveys ownership/management semantics. In particular, when must_free is true the callee is expected to take ownership and eventually free the buffer (and free requires a non-const pointer/signals mutability), so it is not possible to safely declare the parameter as 'const void *' without changing the API or performing casts. Thus the pointer cannot be const-qualified \u201cwhenever possible\u201d here because the surrounding API/semantics require a non-const pointer. Therefore the agent A claim of a Rule 8.13 violation is incorrect."
}