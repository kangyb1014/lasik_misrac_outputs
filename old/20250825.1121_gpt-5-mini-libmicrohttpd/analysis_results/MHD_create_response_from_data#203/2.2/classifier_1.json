{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_from_data:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_data (size_t size,\n                               void *data,\n                               int must_free,\n                               int must_copy)\n{\n  enum MHD_ResponseMemoryMode mode;\n\n  if (0 != must_copy)\n    mode = MHD_RESPMEM_MUST_COPY;\n  else if (0 != must_free)\n    mode = MHD_RESPMEM_MUST_FREE;\n  else\n    mode = MHD_RESPMEM_PERSISTENT;\n\n  return MHD_create_response_from_buffer (size, data, mode);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_create_response_from_data:\nenum MHD_ResponseMemoryMode\n{\n\n  /**\n   * Buffer is a persistent (static/global) buffer that won't change\n   * for at least the lifetime of the response, MHD should just use\n   * it, not free it, not copy it, just keep an alias to it.\n   * @ingroup response\n   */\n  MHD_RESPMEM_PERSISTENT,\n\n  /**\n   * Buffer is heap-allocated with `malloc()` (or equivalent) and\n   * should be freed by MHD after processing the response has\n   * concluded (response reference counter reaches zero).\n   * The more portable way to automatically free the buffer is function\n   * MHD_create_response_from_buffer_with_free_callback() with '&free' as\n   * crfc parameter as it does not require to use the same runtime library.\n   * @warning It is critical to make sure that the same C-runtime library\n   *          is used by both application and MHD (especially\n   *          important for W32).\n   * @ingroup response\n   */\n  MHD_RESPMEM_MUST_FREE,\n\n  /**\n   * Buffer is in transient memory, but not on the heap (for example,\n   * on the stack or non-`malloc()` allocated) and only valid during the\n   * call to #MHD_create_response_from_buffer.  MHD must make its\n   * own private copy of the data for processing.\n   * @ingroup response\n   */\n  MHD_RESPMEM_MUST_COPY\n\n}\n...\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_buffer_with_free_callback_cls (size_t size,\n                                                        const void *buffer,\n                                                        MHD_ContentReaderFreeCallback\n                                                        crfc,\n                                                        void *crfc_cls)\n{\n  struct MHD_Response *r;\n\n  if ((NULL == buffer) && (size > 0))\n    return NULL;\n#if SIZEOF_SIZE_T >= SIZEOF_UINT64_T\n  if (MHD_SIZE_UNKNOWN == size)\n    return NULL;\n#endif /* SIZEOF_SIZE_T >= SIZEOF_UINT64_T */\n  r = MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL == r)\n    return NULL;\n#if defined(MHD_USE_THREADS)\n  if (! MHD_mutex_init_ (&r->mutex))\n  {\n    free (r);\n    return NULL;\n  }\n#endif\n  r->fd = -1;\n  r->reference_count = 1;\n  r->total_size = size;\n  r->data = buffer;\n  r->data_size = size;\n  r->crfc = crfc;\n  r->crc_cls = crfc_cls;\n  return r;\n}\n...\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_buffer_copy (size_t size,\n                                      const void *buffer)\n{\n  struct MHD_Response *r;\n  void *mhd_copy;\n\n  if (0 == size)\n    return MHD_create_response_from_buffer_with_free_callback_cls (0,\n                                                                   NULL,\n                                                                   NULL,\n                                                                   NULL);\n  if (NULL == buffer)\n    return NULL;\n\n  mhd_copy = malloc (size);\n  if (NULL == mhd_copy)\n    return NULL;\n  memcpy (mhd_copy, buffer, size);\n\n  r = MHD_create_response_from_buffer_with_free_callback_cls (size,\n                                                              mhd_copy,\n                                                              &free,\n                                                              mhd_copy);\n  if (NULL == r)\n    free (mhd_copy);\n  else\n  {\n    /* TODO: remove the next assignment, the buffer should not be modifiable */\n    r->data_buffer_size = size;\n  }\n\n  return r;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n  r->crc_cls = crfc_cls;\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The assignment stores the closure/context pointer (crfc_cls) into the newly created response object so that when the response is later processed or freed the registered callback (crfc) can be invoked with the correct context. Removing this assignment would change program behaviour (e.g. the free callback would not receive the correct context or could be called with an uninitialized value), so the operation is not dead code."
}