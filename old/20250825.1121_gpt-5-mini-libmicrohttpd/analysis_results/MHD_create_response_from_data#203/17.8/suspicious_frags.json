{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.8 is: A function parameter should not be modified.\nNote that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_from_data:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_data (size_t size,\n                               void *data,\n                               int must_free,\n                               int must_copy)\n{\n  enum MHD_ResponseMemoryMode mode;\n\n  if (0 != must_copy)\n    mode = MHD_RESPMEM_MUST_COPY;\n  else if (0 != must_free)\n    mode = MHD_RESPMEM_MUST_FREE;\n  else\n    mode = MHD_RESPMEM_PERSISTENT;\n\n  return MHD_create_response_from_buffer (size, data, mode);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_create_response_from_data:\nenum MHD_ResponseMemoryMode\n{\n\n  /**\n   * Buffer is a persistent (static/global) buffer that won't change\n   * for at least the lifetime of the response, MHD should just use\n   * it, not free it, not copy it, just keep an alias to it.\n   * @ingroup response\n   */\n  MHD_RESPMEM_PERSISTENT,\n\n  /**\n   * Buffer is heap-allocated with `malloc()` (or equivalent) and\n   * should be freed by MHD after processing the response has\n   * concluded (response reference counter reaches zero).\n   * The more portable way to automatically free the buffer is function\n   * MHD_create_response_from_buffer_with_free_callback() with '&free' as\n   * crfc parameter as it does not require to use the same runtime library.\n   * @warning It is critical to make sure that the same C-runtime library\n   *          is used by both application and MHD (especially\n   *          important for W32).\n   * @ingroup response\n   */\n  MHD_RESPMEM_MUST_FREE,\n\n  /**\n   * Buffer is in transient memory, but not on the heap (for example,\n   * on the stack or non-`malloc()` allocated) and only valid during the\n   * call to #MHD_create_response_from_buffer.  MHD must make its\n   * own private copy of the data for processing.\n   * @ingroup response\n   */\n  MHD_RESPMEM_MUST_COPY\n\n}\n...\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_buffer_with_free_callback_cls (size_t size,\n                                                        const void *buffer,\n                                                        MHD_ContentReaderFreeCallback\n                                                        crfc,\n                                                        void *crfc_cls)\n{\n  struct MHD_Response *r;\n\n  if ((NULL == buffer) && (size > 0))\n    return NULL;\n#if SIZEOF_SIZE_T >= SIZEOF_UINT64_T\n  if (MHD_SIZE_UNKNOWN == size)\n    return NULL;\n#endif /* SIZEOF_SIZE_T >= SIZEOF_UINT64_T */\n  r = MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL == r)\n    return NULL;\n#if defined(MHD_USE_THREADS)\n  if (! MHD_mutex_init_ (&r->mutex))\n  {\n    free (r);\n    return NULL;\n  }\n#endif\n  r->fd = -1;\n  r->reference_count = 1;\n  r->total_size = size;\n  r->data = buffer;\n  r->data_size = size;\n  r->crfc = crfc;\n  r->crc_cls = crfc_cls;\n  return r;\n}\n...\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_buffer_copy (size_t size,\n                                      const void *buffer)\n{\n  struct MHD_Response *r;\n  void *mhd_copy;\n\n  if (0 == size)\n    return MHD_create_response_from_buffer_with_free_callback_cls (0,\n                                                                   NULL,\n                                                                   NULL,\n                                                                   NULL);\n  if (NULL == buffer)\n    return NULL;\n\n  mhd_copy = malloc (size);\n  if (NULL == mhd_copy)\n    return NULL;\n  memcpy (mhd_copy, buffer, size);\n\n  r = MHD_create_response_from_buffer_with_free_callback_cls (size,\n                                                              mhd_copy,\n                                                              &free,\n                                                              mhd_copy);\n  if (NULL == r)\n    free (mhd_copy);\n  else\n  {\n    /* TODO: remove the next assignment, the buffer should not be modifiable */\n    r->data_buffer_size = size;\n  }\n\n  return r;\n}\n...\nstruct MHD_Response\n{\n\n  /**\n   * Head of double-linked list of headers to send for the response.\n   */\n  struct MHD_HTTP_Res_Header *first_header;\n\n  /**\n   * Tail of double-linked list of headers to send for the response.\n   */\n  struct MHD_HTTP_Res_Header *last_header;\n\n  /**\n   * Buffer pointing to data that we are supposed\n   * to send as a response.\n   */\n  const char *data;\n\n  /**\n   * Closure to give to the content reader @e crc\n   * and content reader free callback @e crfc.\n   */\n  void *crc_cls;\n\n  /**\n   * How do we get more data?  NULL if we are\n   * given all of the data up front.\n   */\n  MHD_ContentReaderCallback crc;\n\n  /**\n   * NULL if data must not be freed, otherwise\n   * either user-specified callback or \"&free\".\n   */\n  MHD_ContentReaderFreeCallback crfc;\n\n#ifdef UPGRADE_SUPPORT\n  /**\n   * Application function to call once we are done sending the headers\n   * of the response; NULL unless this is a response created with\n   * #MHD_create_response_for_upgrade().\n   */\n  MHD_UpgradeHandler upgrade_handler;\n\n  /**\n   * Closure for @e uh.\n   */\n  void *upgrade_handler_cls;\n#endif /* UPGRADE_SUPPORT */\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /**\n   * Mutex to synchronize access to @e data, @e size and\n   * @e reference_count.\n   */\n  MHD_mutex_ mutex;\n#endif\n\n  /**\n   * The size of the response body.\n   * Set to #MHD_SIZE_UNKNOWN if size is not known.\n   */\n  uint64_t total_size;\n\n  /**\n   * At what offset in the stream is the\n   * beginning of @e data located?\n   */\n  uint64_t data_start;\n\n  /**\n   * Offset to start reading from when using @e fd.\n   */\n  uint64_t fd_off;\n\n  /**\n   * Number of bytes ready in @e data (buffer may be larger\n   * than what is filled with payload).\n   */\n  size_t data_size;\n\n  /**\n   * Size of the writable data buffer @e data.\n   */\n  size_t data_buffer_size;\n\n  /**\n   * Reference count for this response.  Free once the counter hits\n   * zero.\n   */\n  unsigned int reference_count;\n\n  /**\n   * File-descriptor if this response is FD-backed.\n   */\n  int fd;\n\n  /**\n   * Flags set for the MHD response.\n   */\n  enum MHD_ResponseFlags flags;\n\n  /**\n   * Automatic flags set for the MHD response.\n   */\n  enum MHD_ResponseAutoFlags flags_auto;\n\n  /**\n   * If the @e fd is a pipe (no sendfile()).\n   */\n  bool is_pipe;\n\n  /**\n   * I/O vector used with MHD_create_response_from_iovec.\n   */\n  MHD_iovec_ *data_iov;\n\n  /**\n   * Number of elements in data_iov.\n   */\n  unsigned int data_iovcnt;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no code fragments that modify function parameters (either by assigning to a parameter identifier or by altering a pointer parameter itself). Reasoning by function:\n\n- MHD_create_response_from_data: parameters (size, data, must_free, must_copy) are only read (tested or passed to another function). No assignment to any parameter identifier, and the pointer parameter data is passed unchanged to MHD_create_response_from_buffer.\n\n- MHD_create_response_from_buffer_with_free_callback_cls: parameters (size, buffer, crfc, crfc_cls) are validated and then stored into fields of the newly allocated struct (r->data = buffer; r->crfc = crfc; r->crc_cls = crfc_cls). Storing a parameter value into a structure field is not a modification of the function parameter itself; the pointer parameter variable is not reassigned.\n\n- MHD_create_response_from_buffer_copy: parameters (size, buffer) are read only. The function allocates a new buffer (mhd_copy), memcpy()s into that new buffer, and passes that buffer into the other creator function; it does not modify the incoming parameter buffer nor reassign the parameter identifiers.\n\n- The struct MHD_Response field assignments (including r->data_buffer_size = size) modify structure members of the newly created response object, not the function parameters.\n\nNo occurrences of statements like \"param = ...\", pointer arithmetic on a parameter variable, or other reassignments of parameter identifiers were found in the provided code. Therefore there are no fragments that need investigation under MISRA C 2023 Rule 17.8."
}