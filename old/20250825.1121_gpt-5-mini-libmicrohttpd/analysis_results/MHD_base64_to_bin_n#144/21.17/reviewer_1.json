{
  "user_message": "An agent A claimed that the following MHD_base64_to_bin_n code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_base64_to_bin_n.\n```c\nsize_t\nMHD_base64_to_bin_n (const char *base64,\n                     size_t base64_len,\n                     void *bin,\n                     size_t bin_size)\n{\n#if MHD_BASE64_FUNC_VERSION >= 2\n  static const MHD_base64_map_type_ map[] = {\n    /* -1 = invalid char, -2 = padding\n    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,\n    NUL,  SOH,  STX,  ETX,  EOT,  ENQ,  ACK,  BEL,  */\n    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n    /*\n    0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,\n    BS,   HT,   LF,   VT,   FF,   CR,   SO,   SI,   */\n    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n    /*\n    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,\n    DLE,  DC1,  DC2,  DC3,  DC4,  NAK,  SYN,  ETB,  */\n    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n    /*\n    0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,\n    CAN,  EM,   SUB,  ESC,  FS,   GS,   RS,   US,   */\n    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n    /*\n    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,\n    ' ',  '!',  '\"',  '#',  '$',  '%',  '&',  '\\'', */\n    -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,\n    /*\n    0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,\n    '(',  ')',  '*',  '+',  ',',  '-',  '.',  '/',  */\n    -1,   -1,   -1,   62,   -1,   -1,   -1,   63,\n    /*\n    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,\n    '0',  '1',  '2',  '3',  '4',  '5',  '6',  '7',  */\n    52,   53,   54,   55,   56,   57,   58,   59,\n    /*\n    0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,\n    '8',  '9',  ':',  ';',  '<',  '=',  '>',  '?',  */\n    60,   61,   -1,   -1,   -1,   -2,   -1,   -1,\n    /*\n    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,\n    '@',  'A',  'B',  'C',  'D',  'E',  'F',  'G',  */\n    -1,    0,    1,    2,    3,    4,    5,    6,\n    /*\n    0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,\n    'H',  'I',  'J',  'K',  'L',  'M',  'N',  'O',  */\n    7,     8,    9,   10,   11,   12,   13,   14,\n    /*\n    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,\n    'P',  'Q',  'R',  'S',  'T',  'U',  'V',  'W',  */\n    15,   16,   17,   18,   19,   20,   21,   22,\n    /*\n     0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,\n    'X',  'Y',  'Z',  '[',  '\\',  ']',  '^',  '_',  */\n    23,   24,   25,   -1,   -1,   -1,   -1,   -1,\n    /*\n    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n    '`',  'a',  'b',  'c',  'd',  'e',  'f',  'g',  */\n    -1,   26,   27,   28,   29,   30,   31,   32,\n    /*\n    0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n    'h',  'i',  'j',  'k',  'l',  'm',  'n',  'o',  */\n    33,   34,   35,   36,   37,   38,   39,   40,\n    /*\n    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n    'p',  'q',  'r',  's',  't',  'u',  'v',  'w',  */\n    41,   42,   43,   44,   45,   46,   47,   48,\n    /*\n    0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,\n    'x',  'y',  'z',  '{',  '|',  '}',  '~',  DEL,  */\n    49,   50,   51,   -1,   -1,   -1,   -1,   -1\n\n#if MHD_BASE64_FUNC_VERSION == 3\n    ,\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* 80..8F */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* 90..9F */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* A0..AF */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* B0..BF */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* C0..CF */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* D0..DF */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* E0..EF */\n    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  /* F0..FF */\n#endif /* ! MHD_BASE64_FUNC_VERSION == 3 */\n  };\n#define base64_char_to_value_(c) map[(c)]\n#endif /* MHD_BASE64_FUNC_VERSION >= 2 */\n  const uint8_t *const in = (const uint8_t *) base64;\n  uint8_t *const out = (uint8_t *) bin;\n  size_t i;\n  size_t j;\n  if (0 == base64_len)\n    return 0;  /* Nothing to decode */\n  if (0 != base64_len % 4)\n    return 0;  /* Wrong input length */\n  if (base64_len / 4 * 3 - 2 > bin_size)\n    return 0;\n\n  j = 0;\n  for (i = 0; i < (base64_len - 4); i += 4)\n  {\n#if MHD_BASE64_FUNC_VERSION == 2\n    if (0 != (0x80 & (in[i] | in[i + 1] | in[i + 2] | in[i + 3])))\n      return 0;\n#endif /* MHD_BASE64_FUNC_VERSION == 2 */\n    if (1)\n    {\n      const MHD_base64_map_type_ v1 = base64_char_to_value_ (in[i + 0]);\n      const MHD_base64_map_type_ v2 = base64_char_to_value_ (in[i + 1]);\n      const MHD_base64_map_type_ v3 = base64_char_to_value_ (in[i + 2]);\n      const MHD_base64_map_type_ v4 = base64_char_to_value_ (in[i + 3]);\n      if ((0 > v1) || (0 > v2) || (0 > v3) || (0 > v4))\n        return 0;\n      out[j + 0] = (uint8_t) (((uint8_t) (((uint8_t) v1) << 2))\n                              | ((uint8_t) (((uint8_t) v2) >> 4)));\n      out[j + 1] = (uint8_t) (((uint8_t) (((uint8_t) v2) << 4))\n                              | ((uint8_t) (((uint8_t) v3) >> 2)));\n      out[j + 2] = (uint8_t) (((uint8_t) (((uint8_t) v3) << 6))\n                              | ((uint8_t) v4));\n    }\n    j += 3;\n  }\n#if MHD_BASE64_FUNC_VERSION == 2\n  if (0 != (0x80 & (in[i] | in[i + 1] | in[i + 2] | in[i + 3])))\n    return 0;\n#endif /* MHD_BASE64_FUNC_VERSION == 2 */\n  if (1)\n  { /* The last four chars block */\n    const MHD_base64_map_type_ v1 = base64_char_to_value_ (in[i + 0]);\n    const MHD_base64_map_type_ v2 = base64_char_to_value_ (in[i + 1]);\n    const MHD_base64_map_type_ v3 = base64_char_to_value_ (in[i + 2]);\n    const MHD_base64_map_type_ v4 = base64_char_to_value_ (in[i + 3]);\n    if ((0 > v1) || (0 > v2))\n      return 0; /* Invalid char or padding at first two positions */\n    mhd_assert (j < bin_size);\n    out[j++] = (uint8_t) (((uint8_t) (((uint8_t) v1) << 2))\n                          | ((uint8_t) (((uint8_t) v2) >> 4)));\n    if (0 > v3)\n    { /* Third char is either padding or invalid */\n      if ((-2 != v3) || (-2 != v4))\n        return 0;  /* Both two last chars must be padding */\n      if (0 != (uint8_t) (((uint8_t) v2) << 4))\n        return 0;  /* Wrong last char */\n      return j;\n    }\n    if (j >= bin_size)\n      return 0; /* Not enough space */\n    out[j++] = (uint8_t) (((uint8_t) (((uint8_t) v2) << 4))\n                          | ((uint8_t) (((uint8_t) v3) >> 2)));\n    if (0 > v4)\n    { /* Fourth char is either padding or invalid */\n      if (-2 != v4)\n        return 0;  /* The char must be padding */\n      if (0 != (uint8_t) (((uint8_t) v3) << 6))\n        return 0;  /* Wrong last char */\n      return j;\n    }\n    if (j >= bin_size)\n      return 0; /* Not enough space */\n    out[j++] = (uint8_t) (((uint8_t) (((uint8_t) v3) << 6))\n                          | ((uint8_t) v4));\n  }\n  return j;\n#if MHD_BASE64_FUNC_VERSION >= 2\n#undef base64_char_to_value_\n#endif /* MHD_BASE64_FUNC_VERSION >= 2 */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nAfter calling MHD_base64_to_bin_n the code uses memchr(decoded, ':', decoded_len) and later writes nul terminators into decoded based on decoded_len. The only check that decoded_len <= decoded_max_len is mhd_assert(decoded_max_len >= decoded_len), but mhd_assert is a no-op ((void)0). If MHD_base64_to_bin_n were to return a decoded_len larger than decoded_max_len (e.g. due to an unexpected input or an error in the decoder), memchr would be invoked with a length that exceeds the allocated buffer and the subsequent writes (ret->username[username_len] = 0 etc.) would write past the buffer. Because there is no active runtime guarantee that decoded_len <= decoded_max_len, the use of the string.h function memchr (and the subsequent writes) can result in accesses beyond the bounds of the objects \u2014 violating MISRA C 2023 Rule 21.17.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_base64_to_bin_n:\n#define MHD_BASE64_FUNC_VERSION 3\n...\n#define MHD_base64_map_type_ int\n...\n#define mhd_assert(ignore) ((void)0)\n...\n_MHD_EXTERN struct MHD_BasicAuthInfo *\nMHD_basic_auth_get_username_password3 (struct MHD_Connection *connection)\n{\n  const struct MHD_RqBAuth *params;\n  size_t decoded_max_len;\n  struct MHD_BasicAuthInfo *ret;\n\n  params = MHD_get_rq_bauth_params_ (connection);\n\n  if (NULL == params)\n    return NULL;\n\n  if ((NULL == params->token68.str) || (0 == params->token68.len))\n    return NULL;\n\n  decoded_max_len = MHD_base64_max_dec_size_ (params->token68.len);\n  ret = (struct MHD_BasicAuthInfo *) malloc (sizeof(struct MHD_BasicAuthInfo)\n                                             + decoded_max_len + 1);\n  if (NULL != ret)\n  {\n    size_t decoded_len;\n    char *decoded;\n\n    decoded = (char *) (ret + 1);\n    decoded_len = MHD_base64_to_bin_n (params->token68.str, params->token68.len,\n                                       decoded, decoded_max_len);\n    mhd_assert (decoded_max_len >= decoded_len);\n    if (0 != decoded_len)\n    {\n      size_t username_len;\n      char *colon;\n\n      colon = memchr (decoded, ':', decoded_len);\n      if (NULL != colon)\n      {\n        size_t password_pos;\n        size_t password_len;\n\n        username_len = (size_t) (colon - decoded);\n        password_pos = username_len + 1;\n        password_len = decoded_len - password_pos;\n        ret->password = decoded + password_pos;\n        ret->password[password_len] = 0;  /* Zero-terminate the string */\n        ret->password_len = password_len;\n      }\n      else\n      {\n        username_len = decoded_len;\n        ret->password = NULL;\n        ret->password_len = 0;\n      }\n      ret->username = decoded;\n      ret->username[username_len] = 0;  /* Zero-terminate the string */\n      ret->username_len = username_len;\n\n      return ret; /* Success exit point */\n    }\n#ifdef HAVE_MESSAGES\n    else\n      MHD_DLOG (connection->daemon,\n                _ (\"Error decoding Basic Authorization authentication.\\n\"));\n#endif /* HAVE_MESSAGES */\n\n    free (ret);\n  }\n#ifdef HAVE_MESSAGES\n  else\n  {\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to allocate memory to process \" \\\n                 \"Basic Authorization authentication.\\n\"));\n  }\n#endif /* HAVE_MESSAGES */\n\n  return NULL; /* Failure exit point */\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Summary: The report is not correct. MHD_base64_to_bin_n does not allow a successful return (non-zero decoded_len) that exceeds the provided bin_size, so subsequent calls to memchr(decoded, ..., decoded_len) will not be invoked with a length that is larger than the allocated buffer (assuming decoded_max_len was computed as the buffer size passed in).\n\nReasoning (concise):\n- Let N = base64_len. The decoder produces at most 3*(N/4) output bytes in the successful case. Internally the function processes (N/4 - 1) full 4-char blocks in the loop (each producing 3 bytes) and then a final 4-char block that produces 1..3 bytes depending on padding. If there is no padding the total output = 3*N/4; with padding it is smaller (3*N/4 - 1 or 3*N/4 - 2).\n- The function has an early guard: if (base64_len / 4 * 3 - 2 > bin_size) return 0; i.e. it rejects cases where bin_size < (3*N/4 - 2). With this guard, just before writing the first byte of the final block the index j is 3*N/4 - 3 which is >= (bin_size - 1) but never >= bin_size; therefore the unguarded first write of the last block cannot write at or past bin_size.\n- The second and third bytes of the final block are written only after explicit runtime checks (if (j >= bin_size) return 0;). Thus the function either returns 0 on error (and will not report a larger decoded length) or returns a decoded length j that is <= bin_size.\n- The mhd_assert(j < bin_size) is indeed a no-op, but it is not the only safety mechanism: the early size check and the runtime checks before the second/third final writes together ensure correctness and prevent out-of-bounds writes in successful returns.\n\nNote: If MHD_base64_max_dec_size_ (the caller-supplied decoded_max_len) were implemented incorrectly (i.e. smaller than the worst-case required space) then the logic could cause the function to return 0 or to behave unexpectedly. But given the function implementation itself, it will not return a successful decoded_len greater than the provided bin_size; therefore memchr(decoded, ':', decoded_len) will not be invoked with a length that exceeds the allocated buffer in the normal, consistent usage.\n\nConclusion: Agent A's claim that this produces a Rule 21.17 violation (memchr called with a length that could exceed the object) is not supported by the code as shown; the report is incorrect."
}