{
  "user_message": "Target function code is:\n```c\nstatic unsigned int\nget_no_space_err_status_code (struct MHD_Connection *c,\n                              enum MHD_ProcRecvDataStage stage,\n                              const char *add_element,\n                              size_t add_element_size)\n{\n  size_t method_size;\n  size_t uri_size;\n  size_t opt_headers_size;\n  size_t host_field_line_size;\n\n  mhd_assert (MHD_CONNECTION_REQ_LINE_RECEIVED < c->state);\n  mhd_assert (MHD_PROC_RECV_HEADERS <= stage);\n  mhd_assert ((0 == add_element_size) || (NULL != add_element));\n\n  if (MHD_CONNECTION_HEADERS_RECEIVED > c->state)\n  {\n    mhd_assert (NULL != c->rq.field_lines.start);\n    opt_headers_size =\n      (size_t) ((c->read_buffer + c->read_buffer_offset)\n                - c->rq.field_lines.start);\n  }\n  else\n    opt_headers_size = c->rq.field_lines.size;\n\n  /* The read buffer is fully used by the request line, the field lines\n     (headers) and internal information.\n     The return status code works as a suggestion for the client to reduce\n     one of the request elements. */\n\n  if ((MHD_PROC_RECV_BODY_CHUNKED == stage) &&\n      (MHD_MIN_REASONABLE_REQ_CHUNK_LINE_LENGTH_ < add_element_size))\n  {\n    /* Request could be re-tried easily with smaller chunk sizes */\n    return MHD_HTTP_CONTENT_TOO_LARGE;\n  }\n\n  host_field_line_size = 0;\n  /* The \"Host:\" field line is mandatory.\n     The total size of the field lines (headers) cannot be smaller than\n     the size of the \"Host:\" field line. */\n  if ((MHD_PROC_RECV_HEADERS == stage)\n      && (0 != add_element_size))\n  {\n    static const size_t header_host_key_len =\n      MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_HOST);\n    const bool is_host_header =\n      (header_host_key_len + 1 <= add_element_size)\n      && ( (0 == add_element[header_host_key_len])\n           || (':' == add_element[header_host_key_len]) )\n      && MHD_str_equal_caseless_bin_n_ (MHD_HTTP_HEADER_HOST,\n                                        add_element,\n                                        header_host_key_len);\n    if (is_host_header)\n    {\n      const bool is_parsed = ! (\n        (MHD_CONNECTION_HEADERS_RECEIVED > c->state) &&\n        (add_element_size == c->read_buffer_offset) &&\n        (c->read_buffer == add_element) );\n      size_t actual_element_size;\n\n      mhd_assert (! is_parsed || (0 == add_element[header_host_key_len]));\n      /* The actual size should be larger due to CRLF or LF chars,\n         however the exact termination sequence is not known here and\n         as perfect precision is not required, to simplify the code\n         assume the minimal length. */\n      if (is_parsed)\n        actual_element_size = add_element_size + 1;  /* \"1\" for LF */\n      else\n        actual_element_size = add_element_size;\n\n      host_field_line_size = actual_element_size;\n      mhd_assert (opt_headers_size >= actual_element_size);\n      opt_headers_size -= actual_element_size;\n    }\n  }\n  if (0 == host_field_line_size)\n  {\n    static const size_t host_field_name_len =\n      MHD_STATICSTR_LEN_ (MHD_HTTP_HEADER_HOST);\n    size_t host_field_name_value_len;\n    if (MHD_NO != MHD_lookup_connection_value_n (c,\n                                                 MHD_HEADER_KIND,\n                                                 MHD_HTTP_HEADER_HOST,\n                                                 host_field_name_len,\n                                                 NULL,\n                                                 &host_field_name_value_len))\n    {\n      /* Calculate the minimal size of the field line: no space between\n         colon and the field value, line terminated by LR */\n      host_field_line_size =\n        host_field_name_len + host_field_name_value_len + 2; /* \"2\" for ':' and LF */\n\n      /* The \"Host:\" field could be added by application */\n      if (opt_headers_size >= host_field_line_size)\n      {\n        opt_headers_size -= host_field_line_size;\n        /* Take into account typical space after colon and CR at the end of the line */\n        if (opt_headers_size >= 2)\n          opt_headers_size -= 2;\n      }\n      else\n        host_field_line_size = 0; /* No \"Host:\" field line set by the client */\n    }\n  }\n\n  uri_size = c->rq.req_target_len;\n  if (MHD_HTTP_MTHD_OTHER != c->rq.http_mthd)\n    method_size = 0; /* Do not recommend shorter request method */\n  else\n  {\n    mhd_assert (NULL != c->rq.method);\n    method_size = strlen (c->rq.method);\n  }\n\n  if ((size_t) MHD_MAX_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    /* Typically the easiest way to reduce request header size is\n       a removal of some optional headers. */\n    if (opt_headers_size > (uri_size / 8))\n    {\n      if ((opt_headers_size / 2) > method_size)\n        return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n    else\n    { /* Request target is MUCH larger than headers */\n      if ((uri_size / 16) > method_size)\n        return MHD_HTTP_URI_TOO_LONG;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n  }\n  if ((size_t) MHD_MAX_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    /* If request target size if larger than maximum reasonable size\n       recommend client to reduce the request target size (length). */\n    if ((uri_size / 16) > method_size)\n      return MHD_HTTP_URI_TOO_LONG;     /* Request target is MUCH larger than headers */\n    else\n      return MHD_HTTP_NOT_IMPLEMENTED;  /* The length of the HTTP request method is unreasonably large */\n  }\n\n  /* The read buffer is too small to handle reasonably large requests */\n\n  if ((size_t) MHD_MIN_REASONABLE_HEADERS_SIZE_ < opt_headers_size)\n  {\n    /* Recommend application to retry with minimal headers */\n    if ((opt_headers_size * 4) > uri_size)\n    {\n      if (opt_headers_size > method_size)\n        return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n    else\n    { /* Request target is significantly larger than headers */\n      if (uri_size > method_size * 4)\n        return MHD_HTTP_URI_TOO_LONG;\n      else\n        return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n    }\n  }\n  if ((size_t) MHD_MIN_REASONABLE_REQ_TARGET_SIZE_ < uri_size)\n  {\n    /* Recommend application to retry with a shorter request target */\n    if (uri_size > method_size * 4)\n      return MHD_HTTP_URI_TOO_LONG;\n    else\n      return MHD_HTTP_NOT_IMPLEMENTED; /* The length of the HTTP request method is unreasonably large */\n  }\n\n  if ((size_t) MHD_MIN_REASONABLE_REQ_METHOD_SIZE_ < method_size)\n  {\n    /* The request target (URI) and headers are (reasonably) very small.\n       Some non-standard long request method is used. */\n    /* The last resort response as it means \"the method is not supported\n       by the server for any URI\". */\n    return MHD_HTTP_NOT_IMPLEMENTED;\n  }\n\n  /* The almost impossible situation: all elements are small, but cannot\n     fit the buffer. The application set the buffer size to\n     critically low value? */\n\n  if ((1 < opt_headers_size) || (1 < uri_size))\n  {\n    if (opt_headers_size >= uri_size)\n      return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n    else\n      return MHD_HTTP_URI_TOO_LONG;\n  }\n\n  /* Nothing to reduce in the request.\n     Reply with some status. */\n  if (0 != host_field_line_size)\n    return MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE;\n\n  return MHD_HTTP_URI_TOO_LONG;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'get_no_space_err_status_code': {'callees': ['MHD_lookup_connection_value_n'], 'callers': ['handle_req_headers_no_space', 'handle_req_cookie_no_space', 'handle_req_chunk_size_line_no_space']}, 'MHD_lookup_connection_value_n': {'callees': [], 'callers': ['MHD_lookup_connection_value', 'need_100_continue', 'get_no_space_err_status_code', 'parse_cookie_header', 'parse_connection_headers', 'MHD_create_post_processor', 'ahc_cb']}, 'handle_req_headers_no_space': {'callees': ['get_no_space_err_status_code', 'transmit_error_response_len'], 'callers': ['handle_recv_no_space', 'get_req_headers']}, 'handle_req_cookie_no_space': {'callees': ['get_no_space_err_status_code', 'transmit_error_response_len'], 'callers': ['parse_connection_headers']}, 'handle_req_chunk_size_line_no_space': {'callees': ['transmit_error_response_len', 'get_no_space_err_status_code'], 'callers': ['handle_recv_no_space']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "mhd_assert",
    "MHD_str_equal_caseless_bin_n_",
    "MHD_STATICSTR_LEN_",
    "MHD_lookup_connection_value_n",
    "strlen",
    "struct MHD_Connection",
    "enum MHD_ProcRecvDataStage",
    "MHD_HTTP_HEADER_HOST",
    "MHD_CONNECTION_REQ_LINE_RECEIVED",
    "MHD_CONNECTION_HEADERS_RECEIVED",
    "MHD_PROC_RECV_HEADERS",
    "MHD_PROC_RECV_BODY_CHUNKED",
    "MHD_HTTP_MTHD_OTHER",
    "MHD_MIN_REASONABLE_REQ_CHUNK_LINE_LENGTH_",
    "MHD_MAX_REASONABLE_HEADERS_SIZE_",
    "MHD_MAX_REASONABLE_REQ_TARGET_SIZE_",
    "MHD_MIN_REASONABLE_HEADERS_SIZE_",
    "MHD_MIN_REASONABLE_REQ_TARGET_SIZE_",
    "MHD_MIN_REASONABLE_REQ_METHOD_SIZE_",
    "MHD_HTTP_CONTENT_TOO_LARGE",
    "MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE",
    "MHD_HTTP_NOT_IMPLEMENTED",
    "MHD_HTTP_URI_TOO_LONG"
  ],
  "explanation": "For verifying the MISRA rule \u201ca function parameter should not be modified\u201d we must be sure no macro or called routine hidden in this function assigns to (rebinds) any of the parameter variables (c, stage, add_element, add_element_size). The following symbols are required and why:\n\n- mhd_assert: often implemented as a macro; its definition must be checked to ensure it does not perform assignments to any parameter identifiers when expanded (assert macros sometimes evaluate/expand expressions or do unusual things in non-standard builds).\n\n- MHD_str_equal_caseless_bin_n_: used with add_element; may be a function or macro \u2014 its prototype/definition is needed to ensure it does not modify the add_element pointer variable (e.g. via macro expansion) or otherwise assign to parameters.\n\n- MHD_STATICSTR_LEN_: macro used to compute compile-time lengths; macro definition must be inspected to ensure it does not expand into code that assigns to parameters.\n\n- MHD_lookup_connection_value_n: called from the function; while called functions cannot rebind the caller\u2019s local parameter variables directly, its declaration/definition is required to verify it is not a macro that expands into code which might assign to parameter names in this scope and to confirm its parameters/side effects (it does write to the length out-parameter but that is a local variable in this function).\n\n- strlen: standard library function used on c->rq.method; include prototype/semantics to confirm it is not a macro in this build that could expand to code modifying parameters.\n\n- struct MHD_Connection: the type and field definitions are necessary to confirm that all uses c->... in the function are accesses to the pointee (allowed) and not implemented via accessor macros that might reassign the local parameter 'c'. Also to confirm no field access expands into code that changes the local pointer variable.\n\n- enum MHD_ProcRecvDataStage: the enum/definitions of values (MHD_PROC_RECV_HEADERS, MHD_PROC_RECV_BODY_CHUNKED etc.) are needed to ensure these names are plain constants/enumerators and not macros expanding to code that could assign to 'stage' or other parameters.\n\n- MHD_HTTP_HEADER_HOST: the header name symbol (might be macro or const); its definition is needed to ensure it does not expand into code with side effects on parameters.\n\n- MHD_CONNECTION_REQ_LINE_RECEIVED, MHD_CONNECTION_HEADERS_RECEIVED, MHD_PROC_RECV_HEADERS, MHD_PROC_RECV_BODY_CHUNKED, MHD_HTTP_MTHD_OTHER: these identifiers are compared against c->state and stage; their definitions must be checked to ensure they are simple constants/enumerators rather than macros that could expand into code that assigns to parameter variables.\n\n- MHD_MIN_REASONABLE_REQ_CHUNK_LINE_LENGTH_, MHD_MAX_REASONABLE_HEADERS_SIZE_, MHD_MAX_REASONABLE_REQ_TARGET_SIZE_, MHD_MIN_REASONABLE_HEADERS_SIZE_, MHD_MIN_REASONABLE_REQ_TARGET_SIZE_, MHD_MIN_REASONABLE_REQ_METHOD_SIZE_: threshold macros/constants used in comparisons; verify they are pure constants/macros without side-effecting expansions.\n\n- MHD_HTTP_CONTENT_TOO_LARGE, MHD_HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE, MHD_HTTP_NOT_IMPLEMENTED, MHD_HTTP_URI_TOO_LONG: status-code macros/defines returned by the function; include their definitions to ensure they are plain constants and not macros with side effects.\n\nIn short: collect definitions/prototypes for every macro/function/typedef used in the function body (assert/macros, called functions, type definitions, and any identifiers that might be macros) so you can verify no macro expansion or inline code rebinds/assigns the parameter variables (c, stage, add_element, add_element_size)."
}