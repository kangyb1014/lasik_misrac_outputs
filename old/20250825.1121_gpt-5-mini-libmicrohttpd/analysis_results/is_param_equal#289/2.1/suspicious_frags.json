{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of is_param_equal:\n```c\n_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No unreachable code fragments were identified in the provided function. Rationale:\n\n- The two mhd_assert statements are checks that may abort on failure but do not, by themselves, produce statically unreachable code. They are not followed by code that is never executed in normal control flow; they are precondition checks and may be compiled out depending on configuration, but that does not create unreachable code inside this function.\n\n- The conditional branch if (param->quoted) ... and the subsequent return of the memcmp-based boolean are complementary: one or the other path will be taken at runtime depending on the value of param->quoted, so neither branch is statically unreachable.\n\n- There is no code following an unconditional return that would be unreachable; each return exits the function as intended and there are no statements after them.\n\n- There are no constructs that introduce compile-time unreachable code (e.g., constant false conditions, dead switch/case labels, or infinite loops with code after them) in this snippet.\n\nTherefore no fragments from this snippet need investigation for MISRA C 2023 Rule 2.1 (unreachable code). If you want, I can also flag potential runtime issues (e.g., dereferencing param without a NULL check) but those are unrelated to Rule 2.1."
}