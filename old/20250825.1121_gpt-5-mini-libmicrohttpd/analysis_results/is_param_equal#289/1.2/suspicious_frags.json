{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of is_param_equal:\n```c\n_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);",
    "  mhd_assert (NULL != param->value.str);",
    "_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)",
    "  mhd_assert (0 != param->value.len);"
  ],
  "explanation": "No other fragments in the function use tokens that are commonly documented as compiler language extensions (for example: __attribute__, __asm__, __inline__, typeof, __builtin_*, or other vendor-specific keywords). The memcmp call and the conditional/return constructs are standard C library usage and language constructs. The parameter types (const, size_t, pointers) and the struct member access (param->value.*) are standard C and do not by themselves indicate a compiler extension. Therefore only macro-like or implementation-dependent identifiers that may expand to compiler-specific constructs (the function-level macro _MHD_static_inline and the assertion/comparison macros used) are flagged for investigation; everything else in the snippet does not obviously involve documented compiler language extensions."
}