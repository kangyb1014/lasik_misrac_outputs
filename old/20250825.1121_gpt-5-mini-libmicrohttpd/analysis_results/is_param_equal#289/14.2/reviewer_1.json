{
  "user_message": "An agent A claimed that the following is_param_equal code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<target_code>\nHere is the original code of is_param_equal.\n```c\n_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nTwo objects i and j are declared and used as loop counters in the for loop (for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)). MISRA C 2023 Rule 14.2 requires there be only one loop counter and that it not be modified in the loop body. In this code: (a) two counters are used in the for header (violates the single loop counter requirement), and (b) i is also incremented inside the loop body (i++; when handling backslash), which modifies the loop counter in the body. Therefore the for loop is not well-formed per Rule 14.2.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function is_param_equal:\nbool\nMHD_str_equal_quoted_bin_n (const char *quoted,\n                            size_t quoted_len,\n                            const char *unquoted,\n                            size_t unquoted_len)\n{\n  size_t i;\n  size_t j;\n  if (unquoted_len < quoted_len / 2)\n    return false;\n\n  j = 0;\n  for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    if ('\\\\' == quoted[i])\n    {\n      i++; /* Advance to the next character */\n      if (quoted_len == i)\n        return false; /* No character after escaping backslash */\n    }\n    if (quoted[i] != unquoted[j])\n      return false; /* Different characters */\n  }\n  if ((quoted_len != i) || (unquoted_len != j))\n    return false; /* The strings have different length */\n\n  return true;\n}\n...\n#define mhd_assert(ignore) ((void)0)\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The for loop in MHD_str_equal_quoted_bin_n is not well-formed under MISRA C 2023 Rule 14.2. The loop header uses two loop counters (i and j are advanced in the third clause ++i, ++j and both participate in the loop condition), which violates the \u201conly one loop counter\u201d requirement. Additionally, i is incremented inside the loop body (i++; when handling a backslash), which violates the requirement that the loop counter shall not be modified in the body. Therefore the described violation is real. Note: the is_param_equal function itself contains no for loop and thus does not directly violate Rule 14.2 \u2014 the violation is in the called function MHD_str_equal_quoted_bin_n, so the report is correct about the rule breach but misattributes it to is_param_equal rather than to MHD_str_equal_quoted_bin_n."
}