{
  "user_message": "An agent A claimed that the following is_param_equal code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of is_param_equal.\n```c\n_MHD_static_inline bool\nis_param_equal (const struct MHD_RqDAuthParam *param,\n                const char *const str,\n                const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe field param->value.str is declared as a non-const pointer (e.g. 'char *'). The function only reads from that buffer (uses memcmp) and does not modify it, so param->value.str should be declared 'const char *' to reflect immutability. Passing a non-const pointer where a const-qualified pointer is possible violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s claim is not provably correct based on the code shown. MISRA C:2023 Rule 8.13 concerns declarations: a pointer type should be qualified with const when the pointed-to object is not modified. The snippet you supplied takes a parameter of type \"const struct MHD_RqDAuthParam *param\", so the struct object is const inside the function (you cannot assign to param->value), but that does not change the qualified type of the pointed-to characters \u2014 the member as declared may still be \"char *\" (i.e. pointer to non-const char). Whether that is a MISRA violation depends on the declaration of the struct member and the rest of the program: if the buffer the pointer refers to is never modified anywhere, then the member should be declared \"const char *\" and leaving it as \"char *\" would violate 8.13. If other code legitimately writes through that pointer, then the non-const declaration is appropriate and there is no violation. In short: the function\u2019s use (only reading) suggests the member could be const, but you cannot conclude a rule violation without checking the struct declaration and all uses of that member. Recommended action: inspect the declaration of param->value.str and all writes; if it is never modified, change it to \"const char *\"."
}