{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_lookup_header_token_ci:\n```c\nstatic bool\nMHD_lookup_header_token_ci (const struct MHD_Connection *connection,\n                            const char *header,\n                            size_t header_len,\n                            const char *token,\n                            size_t token_len)\n{\n  struct MHD_HTTP_Req_Header *pos;\n\n  if ((NULL == connection) || (NULL == header) || (0 == header[0]) ||\n      (NULL == token) || (0 == token[0]))\n    return false;\n\n  for (pos = connection->rq.headers_received; NULL != pos; pos = pos->next)\n  {\n    if ((0 != (pos->kind & MHD_HEADER_KIND)) &&\n        (header_len == pos->header_size) &&\n        ( (header == pos->header) ||\n          (MHD_str_equal_caseless_bin_n_ (header,\n                                          pos->header,\n                                          header_len)) ) &&\n        (MHD_str_has_token_caseless_ (pos->value, token, token_len)))\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No controlling expression in this function is invariant. The function contains three control points: 1) the initial if: (NULL == connection) || (NULL == header) || (0 == header[0]) || (NULL == token) || (0 == token[0]) \u2014 this depends on the runtime values of the pointer and string parameters and uses short-circuiting to avoid dereferencing NULL, so it is not a compile-time invariant; 2) the for loop condition: NULL != pos \u2014 pos is initialized from connection->rq.headers_received and changes each iteration (pos = pos->next), so the condition is not invariant; 3) the inner if combining (0 != (pos->kind & MHD_HEADER_KIND)), (header_len == pos->header_size), pointer equality and calls to MHD_str_equal_caseless_bin_n_ and MHD_str_has_token_caseless_ \u2014 these depend on pos and runtime string data and are not invariant. No do-while infinite-loop exceptions apply. Therefore there are no fragments that need investigation under MISRA C 2023 Rule 14.3."
}