{
  "user_message": "An agent A claimed that the following get_timeout_millisec_int code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_timeout_millisec_int.\n```c\nstatic int\nget_timeout_millisec_int (struct MHD_Daemon *daemon,\n                          int32_t max_timeout)\n{\n  int64_t res;\n\n  res = get_timeout_millisec_ (daemon, max_timeout);\n#if SIZEOF_INT < SIZEOF_INT64_T\n  if (INT_MAX <= res)\n    return INT_MAX;\n#endif /* SIZEOF_INT < SIZEOF_INT64_T */\n  return (int) res;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter is declared as a non-const pointer even though it is only used for read access. In get_timeout_millisec_int the parameter 'struct MHD_Daemon *daemon' is not modified and is merely passed to get_timeout_millisec_. If get_timeout_millisec_ (or callers) do not require a mutable pointer, the parameter should be declared 'const struct MHD_Daemon *daemon'. Thus, unless there is a reason that the pointer must be mutable (e.g. the callee requires a non-const pointer), this is a violation of MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim cannot be judged correct from the snippet alone. MISRA C 2023 Rule 8.13 indeed recommends that pointers should point to const-qualified types when possible, so if get_timeout_millisec_ and other callers do not require a mutable MHD_Daemon*, then the parameter should be declared const struct MHD_Daemon *daemon. However, the provided code does not show the prototype or implementation of get_timeout_millisec_. If that function (or other call sites) requires a non-const pointer, then the non-const declaration is required and there is no violation. Therefore the report is not provably correct based on the shown code \u2014 you must inspect the signature and uses of get_timeout_millisec_ (and other callers) to decide. If they do not modify the object, changing the parameter to const is the appropriate fix."
}