{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of get_timeout_millisec_int:\n```c\nstatic int\nget_timeout_millisec_int (struct MHD_Daemon *daemon,\n                          int32_t max_timeout)\n{\n  int64_t res;\n\n  res = get_timeout_millisec_ (daemon, max_timeout);\n#if SIZEOF_INT < SIZEOF_INT64_T\n  if (INT_MAX <= res)\n    return INT_MAX;\n#endif /* SIZEOF_INT < SIZEOF_INT64_T */\n  return (int) res;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstruct MHD_Daemon *daemon\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The function parameter is declared as a non-const pointer even though it is only used for read access. In get_timeout_millisec_int the parameter 'struct MHD_Daemon *daemon' is not modified and is merely passed to get_timeout_millisec_. If get_timeout_millisec_ (or callers) do not require a mutable pointer, the parameter should be declared 'const struct MHD_Daemon *daemon'. Thus, unless there is a reason that the pointer must be mutable (e.g. the callee requires a non-const pointer), this is a violation of MISRA C 2023 Rule 8.13."
}