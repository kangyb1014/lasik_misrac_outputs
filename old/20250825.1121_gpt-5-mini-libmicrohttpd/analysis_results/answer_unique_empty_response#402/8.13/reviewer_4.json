{
  "user_message": "An agent A claimed that the following answer_unique_empty_response code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of answer_unique_empty_response.\n```c\nstatic enum MHD_Result\nanswer_unique_empty_response (void *cls,\n                              struct MHD_Connection *connection,\n                              const char *url,\n                              const char *method,\n                              const char *version,\n                              const char *upload_data,\n                              size_t *upload_data_size,\n                              void **req_cls)\n{\n  static int marker = 0;\n  struct MHD_Response *r;\n  enum MHD_Result ret;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n#if MHD_VERSION >= 0x00097701\n  r = MHD_create_response_empty (MHD_RF_NONE);\n#else  /* MHD_VERSION < 0x00097701 */\n  r = MHD_create_response_from_buffer (0,\n                                       NULL,\n                                       MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, r);\n  MHD_destroy_response (r);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe code stores the address of a non-const object into a (non-const) void* request-class pointer: *req_cls = (void *)&marker; Here 'marker' is declared as static int marker = 0 but is used only as a read-only sentinel. According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible (i.e. the object should be const-qualified and the pointer type should reflect that). This assignment therefore violates Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The agent\u2019s observation is understandable (marker is only used as a read-only sentinel), but the claim that this is a straightforward violation of MISRA C:2023 Rule 8.13 is not correct in this context. Rule 8.13 advises that pointers should point to const-qualified types where possible. However, the callback API dictates the parameter type void **req_cls (a non-const object pointer). You cannot change the API signature to make req_cls a pointer-to-const without breaking the interface. Making the sentinel object const (e.g. static const int marker = 0) would then require casting away const to store its address in a void* (or changing the API), which introduces other issues (and would itself conflict with rules about discarding qualifiers). Given the fixed external signature, it is not possible here to have req_cls point to a const-qualified type without an unsafe cast or changing the API. Therefore the report that this code violates Rule 8.13 is not correct in this scenario."
}