{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of answer_unique_empty_response:\n```c\nstatic enum MHD_Result\nanswer_unique_empty_response (void *cls,\n                              struct MHD_Connection *connection,\n                              const char *url,\n                              const char *method,\n                              const char *version,\n                              const char *upload_data,\n                              size_t *upload_data_size,\n                              void **req_cls)\n{\n  static int marker = 0;\n  struct MHD_Response *r;\n  enum MHD_Result ret;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n#if MHD_VERSION >= 0x00097701\n  r = MHD_create_response_empty (MHD_RF_NONE);\n#else  /* MHD_VERSION < 0x00097701 */\n  r = MHD_create_response_from_buffer (0,\n                                       NULL,\n                                       MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, r);\n  MHD_destroy_response (r);\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function answer_unique_empty_response:\n#define MHD_HTTP_METHOD_GET \"GET\"\n...\n#define MHD_HTTP_METHOD_HEAD \"HEAD\"\n...\n#define MHD_VERSION 0x01000100\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No suspicious controlling expressions found that would violate MISRA C 2023 Rule 14.3.\n\nReasons why other fragments need not be investigated:\n- There are no loop constructs (for, while, do-while) whose controlling expressions are compile-time constants or otherwise invariant. The function contains only if statements and a preprocessor conditional.\n- The runtime if (NULL == *req_cls) is not invariant: it depends on the caller-provided *req_cls and is intentionally used to detect the first invocation of the callback.\n- The compound if using strcmp, if ((0 != strcmp(method, MHD_HTTP_METHOD_GET)) && (0 != strcmp(method, MHD_HTTP_METHOD_HEAD))), is not invariant: it depends on the runtime parameter method and thus must be evaluated at runtime.\n- The preprocessor conditional #if MHD_VERSION >= 0x00097701 is evaluated at preprocessing/compile time and is not a C controlling expression governed by Rule 14.3 (which targets runtime controlling expressions). Even if treated as a compile-time invariant, MISRA\u2019s rule concerns runtime control flow; compile-time configuration conditionals are outside the scope of this rule in this context.\n- There is no do-while loop present; the rule\u2019s exception for do-while with an essentially Boolean constant false is therefore not applicable.\n\nGiven the above, there are no code fragments in the provided function that should be flagged for investigation under MISRA C 2023 Rule 14.3."
}