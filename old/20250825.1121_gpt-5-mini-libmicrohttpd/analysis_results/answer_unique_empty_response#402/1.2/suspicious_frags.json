{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of answer_unique_empty_response:\n```c\nstatic enum MHD_Result\nanswer_unique_empty_response (void *cls,\n                              struct MHD_Connection *connection,\n                              const char *url,\n                              const char *method,\n                              const char *version,\n                              const char *upload_data,\n                              size_t *upload_data_size,\n                              void **req_cls)\n{\n  static int marker = 0;\n  struct MHD_Response *r;\n  enum MHD_Result ret;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n#if MHD_VERSION >= 0x00097701\n  r = MHD_create_response_empty (MHD_RF_NONE);\n#else  /* MHD_VERSION < 0x00097701 */\n  r = MHD_create_response_from_buffer (0,\n                                       NULL,\n                                       MHD_RESPMEM_PERSISTENT);\n#endif /* MHD_VERSION < 0x00097701 */\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, r);\n  MHD_destroy_response (r);\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function answer_unique_empty_response:\n#define MHD_HTTP_OK 200\n...\n#define MHD_HTTP_METHOD_GET \"GET\"\n...\n#define MHD_HTTP_METHOD_HEAD \"HEAD\"\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no uses of compiler-specific language extensions in the provided function. Specifically checked and reasoned as follows:\n\n- No GCC/Clang extensions such as __attribute__, __asm__, __extension__, __typeof__, statement-expressions ({...}), nested functions, or token-pasting tricks are present.\n- No compiler-specific keywords (e.g. __inline, __inline__, __builtin_*, __asm__) are used.\n- Preprocessor usage (#if MHD_VERSION >= ...) is standard C preprocessor functionality, not an extension.\n- Pointer casting present is a standard object-pointer to void* cast; there is no function-pointer/void* cast or other undefined-behavior-casting extension.\n- Use of static storage-duration variable (static int marker) and taking its address is standard C; storing it in a void* is standard and not a compiler extension.\n- All control flow, declarations, and library/macro uses (MHD_* identifiers) are plain C or library-defined macros \u2014 nothing indicates a compiler extension is used in the snippet.\n\nTherefore there are no code fragments in this function that need further investigation for MISRA C 2023 Rule 1.2 (use of language extensions). If there are related definitions (e.g. of MHD_create_response_empty) that themselves use compiler extensions, those would need separate review, but within the provided code no extensions are visible."
}