{
  "user_message": "An agent A claimed that the following MHD_digest_auth_check_digest2 code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_digest_auth_check_digest2.\n```c\n_MHD_EXTERN int\nMHD_digest_auth_check_digest2 (struct MHD_Connection *connection,\n                               const char *realm,\n                               const char *username,\n                               const uint8_t *digest,\n                               size_t digest_size,\n                               unsigned int nonce_timeout,\n                               enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthResult res;\n  enum MHD_DigestAuthMultiAlgo3 malgo3;\n\n  if (MHD_DIGEST_ALG_AUTO == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n  else if (MHD_DIGEST_ALG_MD5 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else\n    MHD_PANIC (_ (\"Wrong 'algo' value, API violation\"));\n\n  res = MHD_digest_auth_check_digest3 (connection,\n                                       realm,\n                                       username,\n                                       digest,\n                                       digest_size,\n                                       nonce_timeout,\n                                       0, MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                       malgo3);\n  if (MHD_DAUTH_OK == res)\n    return MHD_YES;\n  else if ((MHD_DAUTH_NONCE_STALE == res) || (MHD_DAUTH_NONCE_WRONG == res) ||\n           (MHD_DAUTH_NONCE_OTHER_COND == res) )\n    return MHD_INVALID_NONCE;\n  return MHD_NO;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'connection' is declared as 'struct MHD_Connection *connection' (a non-const pointer) while the other pointer parameters are already const-qualified. In the shown fragment the function does not modify the object pointed to by 'connection' (it only forwards it to another function), so according to MISRA C 2023 Rule 8.13 this pointer should be to a const-qualified type (e.g. 'const struct MHD_Connection *connection') unless there is a documented need to modify the connection in this function or in called functions.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The claim is not provably correct from the fragment. Rule 8.13 requires pointers to be const-qualified when possible, but you must consider the whole call chain. This function forwards connection to MHD_digest_auth_check_digest3; if that callee\u2019s parameter is non-const (or if any called routine may modify the connection), then this function cannot sensibly change its parameter to const without changing the callee or inserting casts. The shown body does not itself modify *connection, but that alone is insufficient to conclude a rule violation. To determine a true MISRA 8.13 violation you must inspect the signature/behavior of MHD_digest_auth_check_digest3 (and any other callees) \u2014 only if none of the callees ever require a mutable connection can this parameter be safely const-qualified. Thus, based on the provided code fragment the report is not correct (insufficient evidence of a violation)."
}