{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN int\nMHD_digest_auth_check_digest2 (struct MHD_Connection *connection,\n                               const char *realm,\n                               const char *username,\n                               const uint8_t *digest,\n                               size_t digest_size,\n                               unsigned int nonce_timeout,\n                               enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthResult res;\n  enum MHD_DigestAuthMultiAlgo3 malgo3;\n\n  if (MHD_DIGEST_ALG_AUTO == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n  else if (MHD_DIGEST_ALG_MD5 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else\n    MHD_PANIC (_ (\"Wrong 'algo' value, API violation\"));\n\n  res = MHD_digest_auth_check_digest3 (connection,\n                                       realm,\n                                       username,\n                                       digest,\n                                       digest_size,\n                                       nonce_timeout,\n                                       0, MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                       malgo3);\n  if (MHD_DAUTH_OK == res)\n    return MHD_YES;\n  else if ((MHD_DAUTH_NONCE_STALE == res) || (MHD_DAUTH_NONCE_WRONG == res) ||\n           (MHD_DAUTH_NONCE_OTHER_COND == res) )\n    return MHD_INVALID_NONCE;\n  return MHD_NO;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_digest_auth_check_digest2': {'callees': ['__builtin_unreachable', 'MHD_digest_auth_check_digest3'], 'callers': ['MHD_digest_auth_check_digest']}, '__builtin_unreachable': {'callees': [], 'callers': ['try_ready_normal_body', 'try_ready_chunked_body', 'process_request_body', 'MHD_update_last_activity_', 'MHD_connection_handle_write', 'cleanup_connection', 'MHD_connection_handle_idle', 'MHD_set_connection_option', 'MHD_ip_count_lock', 'MHD_ip_count_unlock', 'MHD_ip_limit_del', 'new_connection_prepare_', 'new_connection_close_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'internal_suspend_connection_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_cleanup_connections', 'MHD_epoll', 'close_connection', 'MHD_quiesce_daemon', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_stop_daemon', 'MHD_create_response_from_iovec', 'MHD_destroy_response', 'MHD_increment_response_rc', 'MHD_create_post_processor', 'post_process_urlencoded', 'post_process_multipart', 'check_nonce_nc', 'calculate_add_nonce', 'digest_auth_check_all_inner', 'MHD_digest_auth_check_digest3', 'MHD_digest_auth_check2', 'MHD_digest_auth_check_digest2', 'queue_auth_required_response3_inner', 'MHD_queue_auth_fail_response2']}, 'MHD_digest_auth_check_digest3': {'callees': ['__builtin_unreachable', 'digest_get_hash_size', 'digest_auth_check_all'], 'callers': ['MHD_digest_auth_check_digest2', 'handle_sec_areas_req']}, 'MHD_digest_auth_check_digest': {'callees': ['MHD_digest_auth_check_digest2'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_PANIC",
    "_ (gettext macro)",
    "MHD_digest_auth_check_digest3",
    "MHD_DIGEST_ALG_AUTO",
    "MHD_DIGEST_ALG_MD5",
    "MHD_DIGEST_ALG_SHA256",
    "MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION",
    "MHD_DIGEST_AUTH_MULT_ALGO3_MD5",
    "MHD_DIGEST_AUTH_MULT_ALGO3_SHA256",
    "MHD_DIGEST_AUTH_MULT_QOP_AUTH",
    "enum MHD_DigestAuthAlgorithm",
    "enum MHD_DigestAuthMultiAlgo3",
    "enum MHD_DigestAuthResult",
    "MHD_DAUTH_OK",
    "MHD_DAUTH_NONCE_STALE",
    "MHD_DAUTH_NONCE_WRONG",
    "MHD_DAUTH_NONCE_OTHER_COND",
    "MHD_YES",
    "MHD_NO",
    "MHD_INVALID_NONCE"
  ],
  "explanation": "Short rationale for each symbol (why needed to decide whether the function itself modifies its parameters):\n\n- MHD_PANIC: a macro or function; must inspect its expansion/definition to ensure it does not expand into code that assigns to any parameter identifier in this function (macros can hide assignments).\n- _ (gettext macro): used as argument to MHD_PANIC. If it is a macro/function that expands oddly, it could introduce assignments; check its definition.\n- MHD_digest_auth_check_digest3: the callee invoked from this function. Although a callee cannot change the caller's parameter variables unless passed by address, the identifier could be a macro/inline that expands into code touching local parameter identifiers; inspect its declaration/definition to rule out hidden assignments/inlining that modify parameters in this translation unit.\n- MHD_DIGEST_ALG_AUTO / MHD_DIGEST_ALG_MD5 / MHD_DIGEST_ALG_SHA256: the constants used in the conditional. If implemented as macros, they could expand to expressions with side effects; check definitions to ensure no assignments to parameters.\n- MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION / MHD_DIGEST_AUTH_MULT_ALGO3_MD5 / MHD_DIGEST_AUTH_MULT_ALGO3_SHA256: constants assigned to local 'malgo3'; inspect to ensure they are simple constants and their names are not macros that could produce assignments to parameter identifiers.\n- MHD_DIGEST_AUTH_MULT_QOP_AUTH: constant passed to callee; verify it is a plain constant macro/enum, not an expression with side effects that might reference parameter names.\n- enum MHD_DigestAuthAlgorithm / enum MHD_DigestAuthMultiAlgo3 / enum MHD_DigestAuthResult: the type/enum definitions are needed to confirm which identifiers are macros vs enum constants and to understand any macro-based tricks; also to ensure no type-based macro overrides exist.\n- MHD_DAUTH_OK / MHD_DAUTH_NONCE_STALE / MHD_DAUTH_NONCE_WRONG / MHD_DAUTH_NONCE_OTHER_COND: result constants compared against 'res'. If they are macros, inspect to ensure no side effects or expansions that could assign to parameters.\n- MHD_YES / MHD_NO / MHD_INVALID_NONCE: return-value macros/constants used by this function; verify they are simple constants and their definitions do not expand into code that modifies parameter identifiers.\n\nSummary: the analysis must focus on any macros or inlined definitions used in conditionals, assignments and the call to MHD_digest_auth_check_digest3, because macros or inlines can conceal assignments to local parameter names. The above symbols cover all macros, enums, constants and the direct callee referenced in the target function so the next analyst can inspect their definitions to determine whether any of them can cause this function to modify its formal parameters."
}