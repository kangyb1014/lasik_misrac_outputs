{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_digest_auth_check_digest2:\n```c\n_MHD_EXTERN int\nMHD_digest_auth_check_digest2 (struct MHD_Connection *connection,\n                               const char *realm,\n                               const char *username,\n                               const uint8_t *digest,\n                               size_t digest_size,\n                               unsigned int nonce_timeout,\n                               enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthResult res;\n  enum MHD_DigestAuthMultiAlgo3 malgo3;\n\n  if (MHD_DIGEST_ALG_AUTO == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n  else if (MHD_DIGEST_ALG_MD5 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else\n    MHD_PANIC (_ (\"Wrong 'algo' value, API violation\"));\n\n  res = MHD_digest_auth_check_digest3 (connection,\n                                       realm,\n                                       username,\n                                       digest,\n                                       digest_size,\n                                       nonce_timeout,\n                                       0, MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                       malgo3);\n  if (MHD_DAUTH_OK == res)\n    return MHD_YES;\n  else if ((MHD_DAUTH_NONCE_STALE == res) || (MHD_DAUTH_NONCE_WRONG == res) ||\n           (MHD_DAUTH_NONCE_OTHER_COND == res) )\n    return MHD_INVALID_NONCE;\n  return MHD_NO;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_digest_auth_check_digest2:\n#define MHD_PANIC(msg) do{mhd_panic(mhd_panic_cls,__FILE__,__LINE__,msg);BUILTIN_NOT_REACHED;}while(0)\n...\n#define _(String) (String)\n...\nenum MHD_DigestAuthAlgorithm\n{\n\n  /**\n   * MHD should pick (currently defaults to MD5).\n   */\n  MHD_DIGEST_ALG_AUTO = 0,\n\n  /**\n   * Force use of MD5.\n   */\n  MHD_DIGEST_ALG_MD5,\n\n  /**\n   * Force use of SHA-256.\n   */\n  MHD_DIGEST_ALG_SHA256\n\n}\n...\nenum MHD_DigestAuthMultiAlgo3\n{\n  /**\n   * Unknown or wrong algorithm type.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_INVALID = MHD_DIGEST_AUTH_ALGO3_INVALID,\n\n  /**\n   * The 'MD5' algorithm, non-session version.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_MD5 = MHD_DIGEST_AUTH_ALGO3_MD5,\n\n  /**\n   * The 'MD5-sess' algorithm.\n   * Not supported by MHD for authentication.\n   * Reserved value.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_MD5_SESSION = MHD_DIGEST_AUTH_ALGO3_MD5_SESSION,\n\n  /**\n   * The 'SHA-256' algorithm, non-session version.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA256 = MHD_DIGEST_AUTH_ALGO3_SHA256,\n\n  /**\n   * The 'SHA-256-sess' algorithm.\n   * Not supported by MHD for authentication.\n   * Reserved value.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA256_SESSION =\n    MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION,\n\n  /**\n   * The 'SHA-512-256' (SHA-512/256) algorithm, non-session version.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA512_256 = MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n\n  /**\n   * The 'SHA-512-256-sess' (SHA-512/256 session) algorithm.\n   * Not supported by MHD for authentication.\n   * Reserved value.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA512_256_SESSION =\n    MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION,\n\n  /**\n   * SHA-256 or SHA-512/256 non-session algorithm, MHD will choose\n   * the preferred or the matching one.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA_ANY_NON_SESSION =\n    MHD_DIGEST_AUTH_ALGO3_SHA256 | MHD_DIGEST_AUTH_ALGO3_SHA512_256,\n\n  /**\n   * Any non-session algorithm, MHD will choose the preferred or\n   * the matching one.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION =\n    (0x3F) | MHD_DIGEST_AUTH_ALGO3_NON_SESSION,\n\n  /**\n   * The SHA-256 or SHA-512/256 session algorithm.\n   * Not supported by MHD.\n   * Reserved value.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA_ANY_SESSION =\n    MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION\n    | MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION,\n\n  /**\n   * Any session algorithm.\n   * Not supported by MHD.\n   * Reserved value.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_ANY_SESSION =\n    (0x3F) | MHD_DIGEST_AUTH_ALGO3_SESSION,\n\n  /**\n   * The MD5 algorithm, session or non-session.\n   * Currently supported as non-session only.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_MD5_ANY =\n    MHD_DIGEST_AUTH_MULT_ALGO3_MD5 | MHD_DIGEST_AUTH_MULT_ALGO3_MD5_SESSION,\n\n  /**\n   * The SHA-256 algorithm, session or non-session.\n   * Currently supported as non-session only.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA256_ANY =\n    MHD_DIGEST_AUTH_MULT_ALGO3_SHA256\n    | MHD_DIGEST_AUTH_MULT_ALGO3_SHA256_SESSION,\n\n  /**\n   * The SHA-512/256 algorithm, session or non-session.\n   * Currently supported as non-session only.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA512_256_ANY =\n    MHD_DIGEST_AUTH_MULT_ALGO3_SHA512_256\n    | MHD_DIGEST_AUTH_MULT_ALGO3_SHA512_256_SESSION,\n\n  /**\n   * The SHA-256 or SHA-512/256 algorithm, session or non-session.\n   * Currently supported as non-session only.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_SHA_ANY_ANY =\n    MHD_DIGEST_AUTH_MULT_ALGO3_SHA_ANY_NON_SESSION\n    | MHD_DIGEST_AUTH_MULT_ALGO3_SHA_ANY_SESSION,\n\n  /**\n   * Any algorithm, MHD will choose the preferred or the matching one.\n   */\n  MHD_DIGEST_AUTH_MULT_ALGO3_ANY =\n    (0x3F) | MHD_DIGEST_AUTH_ALGO3_NON_SESSION | MHD_DIGEST_AUTH_ALGO3_SESSION\n}\n...\n_MHD_EXTERN enum MHD_DigestAuthResult\nMHD_digest_auth_check_digest3 (struct MHD_Connection *connection,\n                               const char *realm,\n                               const char *username,\n                               const void *userdigest,\n                               size_t userdigest_size,\n                               unsigned int nonce_timeout,\n                               uint32_t max_nc,\n                               enum MHD_DigestAuthMultiQOP mqop,\n                               enum MHD_DigestAuthMultiAlgo3 malgo3)\n{\n  if (1 != (((0 != (malgo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0)\n            + ((0 != (malgo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0)\n            + ((0 != (malgo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0)))\n    MHD_PANIC (_ (\"Wrong 'malgo3' value, only one base hashing algorithm \" \\\n                  \"(MD5, SHA-256 or SHA-512/256) must be specified, \" \\\n                  \"API violation\"));\n\n#ifndef MHD_MD5_SUPPORT\n  if (0 != (((unsigned int) malgo3) & MHD_DIGEST_BASE_ALGO_MD5))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The MD5 algorithm is not supported by this MHD build.\\n\"));\n#endif /* HAVE_MESSAGES */\n    return MHD_DAUTH_WRONG_ALGO;\n  }\n#endif /* ! MHD_MD5_SUPPORT */\n#ifndef MHD_SHA256_SUPPORT\n  if (0 != (((unsigned int) malgo3) & MHD_DIGEST_BASE_ALGO_SHA256))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The SHA-256 algorithm is not supported by \"\n                 \"this MHD build.\\n\"));\n#endif /* HAVE_MESSAGES */\n    return MHD_DAUTH_WRONG_ALGO;\n  }\n#endif /* ! MHD_SHA256_SUPPORT */\n#ifndef MHD_SHA512_256_SUPPORT\n  if (0 != (((unsigned int) malgo3) & MHD_DIGEST_BASE_ALGO_SHA512_256))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The SHA-512/256 algorithm is not supported by \"\n                 \"this MHD build.\\n\"));\n#endif /* HAVE_MESSAGES */\n    return MHD_DAUTH_WRONG_ALGO;\n  }\n#endif /* ! MHD_SHA512_256_SUPPORT */\n\n  if (digest_get_hash_size ((enum MHD_DigestAuthAlgo3) malgo3) !=\n      userdigest_size)\n    MHD_PANIC (_ (\"Wrong 'userdigest_size' value, does not match 'malgo3', \"\n                  \"API violation\"));\n\n  return digest_auth_check_all (connection,\n                                realm,\n                                username,\n                                NULL,\n                                (const uint8_t *) userdigest,\n                                nonce_timeout,\n                                max_nc,\n                                mqop,\n                                malgo3);\n}\n...\nenum MHD_DigestAuthResult\n{\n  /**\n   * Authentication OK.\n   */\n  MHD_DAUTH_OK = 1,\n\n  /**\n   * General error, like \"out of memory\".\n   */\n  MHD_DAUTH_ERROR = 0,\n\n  /**\n   * No \"Authorization\" header or wrong format of the header.\n   * Also may be returned if required parameters in client Authorisation header\n   * are missing or broken (in invalid format).\n   */\n  MHD_DAUTH_WRONG_HEADER = -1,\n\n  /**\n   * Wrong 'username'.\n   */\n  MHD_DAUTH_WRONG_USERNAME = -2,\n\n  /**\n   * Wrong 'realm'.\n   */\n  MHD_DAUTH_WRONG_REALM = -3,\n\n  /**\n   * Wrong 'URI' (or URI parameters).\n   */\n  MHD_DAUTH_WRONG_URI = -4,\n\n  /**\n   * Wrong 'qop'.\n   */\n  MHD_DAUTH_WRONG_QOP = -5,\n\n  /**\n   * Wrong 'algorithm'.\n   */\n  MHD_DAUTH_WRONG_ALGO = -6,\n\n  /**\n   * Too large (>64 KiB) Authorization parameter value.\n   */\n  MHD_DAUTH_TOO_LARGE = -15,\n\n  /* The different form of naming is intentionally used for the results below,\n   * as they are more important */\n\n  /**\n   * The 'nonce' is too old. Suggest the client to retry with the same\n   * username and password to get the fresh 'nonce'.\n   * The validity of the 'nonce' may be not checked.\n   */\n  MHD_DAUTH_NONCE_STALE = -17,\n\n  /**\n   * The 'nonce' was generated by MHD for other conditions.\n   * This value is only returned if #MHD_OPTION_DIGEST_AUTH_NONCE_BIND_TYPE\n   * is set to anything other than #MHD_DAUTH_BIND_NONCE_NONE.\n   * The interpretation of this code could be different. For example, if\n   * #MHD_DAUTH_BIND_NONCE_URI is set and client just used the same 'nonce' for\n   * another URI, the code could be handled as #MHD_DAUTH_NONCE_STALE as\n   * RFCs allow nonces re-using for other URIs in the same \"protection\n   * space\". However, if only #MHD_DAUTH_BIND_NONCE_CLIENT_IP bit is set and\n   * it is know that clients have fixed IP addresses, this return code could\n   * be handled like #MHD_DAUTH_NONCE_WRONG.\n   */\n  MHD_DAUTH_NONCE_OTHER_COND = -18,\n\n  /**\n   * The 'nonce' is wrong. May indicate an attack attempt.\n   */\n  MHD_DAUTH_NONCE_WRONG = -33,\n\n  /**\n   * The 'response' is wrong. Typically it means that wrong password used.\n   * May indicate an attack attempt.\n   */\n  MHD_DAUTH_RESPONSE_WRONG = -34\n}\n...\n#define MHD_INVALID_NONCE -1\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#ifndef MHD_SHA512_256_SUPPORT\n  if (0 != (((unsigned int) malgo3) & MHD_DIGEST_BASE_ALGO_SHA512_256))\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"The SHA-512/256 algorithm is not supported by \"\n                 \"this MHD build.\\n\"));\n#endif /* HAVE_MESSAGES */\n    return MHD_DAUTH_WRONG_ALGO;\n  }\n#endif /* ! MHD_SHA512_256_SUPPORT */\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The fragment is compiled only when MHD_SHA512_256_SUPPORT is not defined and then provides a necessary runtime check: if malgo3 requests SHA-512/256 while the build lacks support the function logs (optionally) and returns MHD_DAUTH_WRONG_ALGO. This behavior would change if the block were removed, so it is not dead code. If the macro MHD_SHA512_256_SUPPORT is defined the block is not present in that build (preprocessor exclusion), and thus not part of the compiled code. (A potential false-positive situation for a static analyser would be if the SHA-512/256 bit can never be present for any malgo3 in the whole project, making the body never taken \u2014 but that corresponds to unreachable code, which per MISRA Note 2 is not classified as dead code.)"
}