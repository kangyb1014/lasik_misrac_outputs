{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of answer_single_response:\n```c\nstatic enum MHD_Result\nanswer_single_response (void *cls,\n                        struct MHD_Connection *connection,\n                        const char *url,\n                        const char *method,\n                        const char *version,\n                        const char *upload_data,\n                        size_t *upload_data_size,\n                        void **req_cls)\n{\n  static int marker = 0;\n  (void) cls;  /* Unused */\n  (void) url; (void) version; /* Unused */\n  (void) upload_data; (void) upload_data_size; /* Unused */\n\n  if (NULL == *req_cls)\n  {\n    /* The fist call */\n    *req_cls = (void *) &marker;\n    /* Do not send reply yet. No error. */\n    return MHD_YES;\n  }\n  if ((0 != strcmp (method, MHD_HTTP_METHOD_GET)) &&\n      (0 != strcmp (method, MHD_HTTP_METHOD_HEAD)))\n    return MHD_NO; /* Unsupported method, close connection */\n\n  return MHD_queue_response (connection, MHD_HTTP_OK, resp_single);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function answer_single_response:\n#define MHD_HTTP_METHOD_GET \"GET\"\n...\n#define MHD_HTTP_METHOD_HEAD \"HEAD\"\n...\n#define MHD_HTTP_OK 200\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No code fragment in the provided function is statically unreachable. Control-flow reasoning:\n- The first if (NULL == *req_cls) returns MHD_YES only on the first invocation for that request; the code after this if is reachable on subsequent invocations when *req_cls is non-NULL. Thus the return inside that if does not make the following code unreachable for all executions.\n- The method-check if ((0 != strcmp(...GET)) && (0 != strcmp(...HEAD))) has two outcomes that are both reachable depending on the value of method: when method is neither GET nor HEAD the function returns MHD_NO; when method is GET or HEAD execution continues to the final return that calls MHD_queue_response. Both branches are reachable at run time.\n- The (void) casting lines are not executable control-flow statements that could be classified as unreachable; they merely suppress unused-parameter warnings.\n\nTherefore there are no fragments that must be investigated for MISRA C 2023 Rule 2.1 (unreachable code). Note: other potential issues (e.g. possible NULL method or req_cls pointer leading to undefined behavior, or undefined identifiers outside this snippet) are not reachability concerns and so are not reported here."
}