{
  "user_message": "Target function code is:\n```c\nstatic ssize_t\nget_rq_extended_uname_copy_z (const char *uname_ext, size_t uname_ext_len,\n                              char *buf, size_t buf_size)\n{\n  size_t r;\n  size_t w;\n  if ((size_t) SSIZE_MAX < uname_ext_len)\n    return -1; /* Too long input string */\n\n  if (MHD_DAUTH_EXT_PARAM_MIN_LEN > uname_ext_len)\n    return -1; /* Required prefix is missing */\n\n  if (! MHD_str_equal_caseless_bin_n_ (uname_ext, MHD_DAUTH_EXT_PARAM_PREFIX,\n                                       MHD_STATICSTR_LEN_ ( \\\n                                         MHD_DAUTH_EXT_PARAM_PREFIX)))\n    return -1; /* Only UTF-8 is supported, as it is implied by RFC 7616 */\n\n  r = MHD_STATICSTR_LEN_ (MHD_DAUTH_EXT_PARAM_PREFIX);\n  /* Skip language tag */\n  while (r < uname_ext_len && '\\'' != uname_ext[r])\n  {\n    const char chr = uname_ext[r];\n    if ((' ' == chr) || ('\\t' == chr) || ('\\\"' == chr) || (',' == chr) ||\n        (';' == chr) )\n      return -1; /* Wrong char in language tag */\n    r++;\n  }\n  if (r >= uname_ext_len)\n    return -1; /* The end of the language tag was not found */\n  r++; /* Advance to the next char */\n\n  w = MHD_str_pct_decode_strict_n_ (uname_ext + r, uname_ext_len - r,\n                                    buf, buf_size);\n  if ((0 == w) && (0 != uname_ext_len - r))\n    return -1; /* Broken percent encoding */\n  buf[w] = 0; /* Zero terminate the result */\n  mhd_assert (SSIZE_MAX > w);\n  return (ssize_t) w;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'get_rq_extended_uname_copy_z': {'callees': ['MHD_str_pct_decode_strict_n_'], 'callers': ['get_rq_uname', 'digest_auth_check_all_inner']}, 'MHD_str_pct_decode_strict_n_': {'callees': ['toxdigitvalue'], 'callers': ['get_rq_extended_uname_copy_z']}, 'get_rq_uname': {'callees': ['get_rq_param_unquoted_copy_z', 'MHD_hex_to_bin', 'get_rq_extended_uname_copy_z'], 'callers': ['MHD_digest_auth_get_request_info3', 'MHD_digest_auth_get_username3', 'MHD_digest_auth_get_username']}, 'digest_auth_check_all_inner': {'callees': ['MHD_get_master', 'MHD_get_rq_dauth_params_', 'MHD_DLOG', 'digest_init_one_time', 'get_base_digest_algo', '__builtin_unreachable', 'digest_get_size', 'is_param_equal', 'get_buffer_for_size', 'get_rq_extended_uname_copy_z', 'calc_userhash', 'MHD_bin_to_hex', 'is_param_equal_caseless', 'digest_reset', 'get_unquoted_param', 'MHD_strx_to_uint64_n_', 'get_nonce_timestamp', 'MHD_monotonic_msec_counter', 'check_nonce_nc', 'digest_update_str', 'digest_update_with_colon', 'get_unquoted_param_copy', 'digest_update', 'check_uri_match', 'digest_calc_hash', 'calc_userdigest', 'MHD_hex_to_bin', 'calculate_nonce'], 'callers': ['digest_auth_check_all']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nThe Standard Library function memcmp shall not be used to compare null terminated strings. \nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_str_equal_caseless_bin_n_",
    "MHD_STATICSTR_LEN_",
    "MHD_DAUTH_EXT_PARAM_PREFIX",
    "MHD_str_pct_decode_strict_n_",
    "toxdigitvalue",
    "mhd_assert",
    "SSIZE_MAX",
    "memcmp"
  ],
  "explanation": "- MHD_str_equal_caseless_bin_n_: The target calls this function to check the prefix. To determine whether that check (or any helper it uses) internally calls memcmp on null-terminated strings you must inspect its implementation.\n- MHD_STATICSTR_LEN_: This macro yields the length passed into MHD_str_equal_caseless_bin_n_. Knowing how lengths are computed (literal length vs. relying on NUL termination) is necessary to assess whether a memcmp/strcmp misuse could occur.\n- MHD_DAUTH_EXT_PARAM_PREFIX: The literal prefix value and how it is represented (NUL\u2011terminated or not) affect whether any comparison ends up treating data as a NUL\u2011terminated string; include it to see what is being compared.\n- MHD_str_pct_decode_strict_n_: The target calls this to decode percent\u2011encoding into buf. Its implementation must be checked to ensure it does not use memcmp to compare NUL\u2011terminated strings (or otherwise violate the MISRA rule).\n- toxdigitvalue: Callee of MHD_str_pct_decode_strict_n_. Include it because indirect use of memcmp (or string comparison on NUL\u2011terminated data) could occur in this helper.\n- mhd_assert: The assertion macro/function may expand to code that uses library functions; include to confirm it does not introduce forbidden memcmp usage in this context.\n- SSIZE_MAX: Macro/constant used in range checks; include to verify the integer checks and casts do not mask any implicit string comparisons or lead to alternative code paths that use memcmp.\n- memcmp: The MISRA rule concerns use of memcmp on NUL\u2011terminated strings. Include the symbol so the analyst can search for direct or indirect calls to memcmp in the above functions/definitions and determine whether any such calls are applied to NUL\u2011terminated strings."
}