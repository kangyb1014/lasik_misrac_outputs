{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_empty:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_empty (enum MHD_ResponseFlags flags)\n{\n  struct MHD_Response *r;\n  r = (struct MHD_Response *) MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL != r)\n  {\n    if (MHD_mutex_init_ (&r->mutex))\n    {\n      r->fd = -1;\n      r->reference_count = 1;\n      /* If any flags combination will be not allowed, replace the next\n       * assignment with MHD_set_response_options() call. */\n      r->flags = flags;\n\n      return r; /* Successful result */\n    }\n    free (r);\n  }\n  return NULL; /* Something failed */\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_create_response_empty:\n#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern\n...\n#define MHD_calloc_(n, s) calloc((n),(s))\n...\n#define MHD_mutex_init_(pmutex) (!(pthread_mutex_init((pmutex),NULL)))\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern\n```\nFocus on the above code fragment and judge whether it violates the rule 1.2 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The macro _MHD_EXTERN expands to GCC/Clang-specific extension __attribute__((visibility(\"default\"))) followed by extern. The GNU-style __attribute__((...)) syntax is a compiler language extension (documented as such), so this use violates MISRA C 2023 Rule 1.2. (Fix: remove the attribute or guard it with compiler-specific #ifdefs so portable standard C is used when the extension is unavailable.)"
}