{
  "user_message": "An agent A claimed that the following MHD_create_response_empty code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_create_response_empty.\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_empty (enum MHD_ResponseFlags flags)\n{\n  struct MHD_Response *r;\n  r = (struct MHD_Response *) MHD_calloc_ (1, sizeof (struct MHD_Response));\n  if (NULL != r)\n  {\n    if (MHD_mutex_init_ (&r->mutex))\n    {\n      r->fd = -1;\n      r->reference_count = 1;\n      /* If any flags combination will be not allowed, replace the next\n       * assignment with MHD_set_response_options() call. */\n      r->flags = flags;\n\n      return r; /* Successful result */\n    }\n    free (r);\n  }\n  return NULL; /* Something failed */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe macro _MHD_EXTERN expands to GCC/Clang-specific extension __attribute__((visibility(\"default\"))) followed by extern. The GNU-style __attribute__((...)) syntax is a compiler language extension (documented as such), so this use violates MISRA C 2023 Rule 1.2. (Fix: remove the attribute or guard it with compiler-specific #ifdefs so portable standard C is used when the extension is unavailable.)\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_create_response_empty:\n#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern\n...\n#define MHD_calloc_(n, s) calloc((n),(s))\n...\n#define MHD_mutex_init_(pmutex) (!(pthread_mutex_init((pmutex),NULL)))\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The symbol _MHD_EXTERN as shown expands to __attribute__((visibility(\"default\"))) extern. The GNU-style __attribute__((...)) syntax is a documented compiler language extension (GCC/Clang) and therefore its use in the code constitutes use of a language extension. MISRA C 2023 Rule 1.2 forbids the use of language/compiler extensions, so the presence of that attribute (even via a macro) violates Rule 1.2.\n\nFix options: remove the attribute so the declaration uses only standard C (e.g. just \"extern\"), or confine the attribute to compiler-specific builds by conditioning the macro definition (e.g. #ifdef __GNUC__ define _MHD_EXTERN __attribute__((visibility(\"default\"))) extern #else #define _MHD_EXTERN extern #endif). If the project intends to be MISRA-compliant, avoid introducing compiler-specific attributes in code that must meet Rule 1.2."
}