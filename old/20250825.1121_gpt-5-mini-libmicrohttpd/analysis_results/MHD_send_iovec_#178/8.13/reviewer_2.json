{
  "user_message": "An agent A claimed that the following MHD_send_iovec_ code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_send_iovec_.\n```c\nssize_t\nMHD_send_iovec_ (struct MHD_Connection *connection,\n                 struct MHD_iovec_track_ *const r_iov,\n                 bool push_data)\n{\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  bool use_iov_send = true;\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n#endif /* MHD_VECT_SEND */\n\n  mhd_assert (NULL != connection->rp.resp_iov.iov);\n  mhd_assert (NULL != connection->rp.response->data_iov);\n  mhd_assert (connection->rp.resp_iov.cnt > connection->rp.resp_iov.sent);\n#ifdef MHD_VECT_SEND\n#if defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n#ifdef HTTPS_SUPPORT\n  use_iov_send = use_iov_send &&\n                 (0 == (connection->daemon->options & MHD_USE_TLS));\n#endif /* HTTPS_SUPPORT */\n#ifdef _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED\n  use_iov_send = use_iov_send && (connection->daemon->sigpipe_blocked ||\n                                  connection->sk_spipe_suppress);\n#endif /* _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  if (use_iov_send)\n#endif /* HTTPS_SUPPORT || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n  return send_iov_nontls (connection, r_iov, push_data);\n#endif /* MHD_VECT_SEND */\n\n#if ! defined(MHD_VECT_SEND) || defined(HTTPS_SUPPORT) || \\\n  defined(_MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED)\n  return send_iov_emu (connection, r_iov, push_data);\n#endif /* !MHD_VECT_SEND || HTTPS_SUPPORT\n          || _MHD_VECT_SEND_NEEDS_SPIPE_SUPPRESSED */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter r_iov is declared as 'struct MHD_iovec_track_ *const r_iov' \u2014 the pointer itself is const but it points to a non-const MHD_iovec_track_. If MHD_send_iovec_ (and the functions it calls) do not modify the pointee, the pointee should be const-qualified (e.g. 'const struct MHD_iovec_track_ * const r_iov' or 'const struct MHD_iovec_track_ * r_iov'). As written, the code violates MISRA C 2023 Rule 8.13 because the pointer does not point to a const-qualified type when it could.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "MISRA C:2023 Rule 8.13 asks that a pointer should point to a const\u2011qualified type whenever possible (i.e. the pointee should be const if the function does not modify it). In the shown function the parameter is declared as \"struct MHD_iovec_track_ *const r_iov\" \u2014 the pointer itself is const, not the pointee. Whether this is a violation depends on whether MHD_send_iovec_ (or the functions it calls) modifies the object pointed to by r_iov. The function body only forwards r_iov to send_iov_nontls/send_iov_emu; we cannot determine from the shown code whether the pointee is modified. If those callees (or this function) modify the MHD_iovec_track_ object, the current declaration is appropriate and there is no violation. If none of them modify the pointee and the parameter could be declared to point to const, then the code should be changed and it would be a violation. Because the provided code does not show the callees\u2019 signatures/behavior, the agent\u2019s claim is not demonstrably correct from the evidence given. To resolve: inspect the prototypes/implementations of send_iov_nontls and send_iov_emu \u2014 if they take a non\u2011const pointer but do not modify the pointee, change all relevant declarations to take a pointer to const (e.g. \"const struct MHD_iovec_track_ * r_iov\" or \"const struct MHD_iovec_track_ * const r_iov\")."
}