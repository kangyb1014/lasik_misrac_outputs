{
  "user_message": "An agent A claimed that the following has_unprocessed_upload_body_data_in_buffer code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of has_unprocessed_upload_body_data_in_buffer.\n```c\nstatic bool\nhas_unprocessed_upload_body_data_in_buffer (struct MHD_Connection *c)\n{\n  mhd_assert (MHD_CONNECTION_BODY_RECEIVING == c->state);\n  if (! c->rq.have_chunked_upload)\n    return 0 != c->read_buffer_offset;\n\n  /* Chunked upload */\n  mhd_assert (0 != c->rq.remaining_upload_size); /* Must not be possible in MHD_CONNECTION_BODY_RECEIVING state */\n  if (c->rq.current_chunk_offset == c->rq.current_chunk_size)\n  {\n    /* 0 == c->rq.current_chunk_size: Waiting the chunk size (chunk header).\n       0 != c->rq.current_chunk_size: Waiting for chunk-closing CRLF. */\n    return false;\n  }\n  return 0 != c->read_buffer_offset; /* Chunk payload data in the read buffer */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'struct MHD_Connection *c' is only read (only member accesses and assertions are performed) and the function does not modify the pointee. According to MISRA C 2023 Rule 8.13, the pointer should be to a const-qualified type whenever possible. Thus the signature should be changed to 'const struct MHD_Connection *c' (or 'struct MHD_Connection const *c'). If there are no external reasons requiring a non-const pointer (e.g. macros or called functions that modify through the pointer), this is a violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct in principle. In the shown implementation the function only reads from the object pointed to by c (member accesses and assertions) and does not modify the pointee or pass c to any routine that requires a non-const pointer. Per MISRA C 2023 Rule 8.13 the parameter should therefore be declared with a const-qualified pointee (e.g. const struct MHD_Connection *c) unless there are external reasons preventing that (callback/signature compatibility, macros or called routines that expect a non-const pointer, etc.). If no such external constraint exists, this is a violation and the signature should be changed accordingly."
}