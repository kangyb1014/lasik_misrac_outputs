{
  "user_message": "An agent A claimed that the following is_param_equal_caseless code violates the MISRA C 2023 rule 14.2.\n<misra_rule>\nMISRA C 2023 Rule 14.2 is A for loop shall be well-formed.\nThe three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \n</misra_rule>\n<target_code>\nHere is the original code of is_param_equal_caseless.\n```c\n_MHD_static_inline bool\nis_param_equal_caseless (const struct MHD_RqDAuthParam *param,\n                         const char *const str,\n                         const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe for loop for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j) violates Rule 14.2. It uses two loop counters (i and j) in the for statement (the rule permits only one loop counter). The loop body modifies the loop counter i (the explicit i++ inside the body when a backslash is seen), which breaches the requirement that the loop counter shall not be modified in the loop body. The third clause ++i, ++j modifies objects that are also modified in the loop body (i), which is disallowed. Therefore the rule is violated.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function is_param_equal_caseless:\n#define mhd_assert(ignore) ((void)0)\n...\nbool\nMHD_str_equal_quoted_bin_n (const char *quoted,\n                            size_t quoted_len,\n                            const char *unquoted,\n                            size_t unquoted_len)\n{\n  size_t i;\n  size_t j;\n  if (unquoted_len < quoted_len / 2)\n    return false;\n\n  j = 0;\n  for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    if ('\\\\' == quoted[i])\n    {\n      i++; /* Advance to the next character */\n      if (quoted_len == i)\n        return false; /* No character after escaping backslash */\n    }\n    if (quoted[i] != unquoted[j])\n      return false; /* Different characters */\n  }\n  if ((quoted_len != i) || (unquoted_len != j))\n    return false; /* The strings have different length */\n\n  return true;\n}\n...\nstruct MHD_RqDAuthParam\n{\n  /**\n   * The string with length, NOT zero-terminated\n   */\n  struct _MHD_str_w_len value;\n  /**\n   * True if string must be \"unquoted\" before processing.\n   * This member is false if the string is used in DQUOTE marks, but no\n   * backslash-escape is used in the string.\n   */\n  bool quoted;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The agent\u2019s diagnosis is correct in substance: there is a MISRA C 2023 Rule 14.2 violation in the shown code. The offending for loop is in MHD_str_equal_quoted_bin_n (called by is_param_equal_caseless), not in is_param_equal_caseless itself (that function contains no for). The loop for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j) breaches the rule for multiple reasons: (1) it employs two loop counters (i and j) whereas the rule permits only one loop counter; (2) the loop body modifies the loop counter i (the explicit i++ when a backslash is seen), which is forbidden; (3) the third clause ++i, ++j modifies objects that are also modified in the loop body (i), which the rule disallows. Therefore the reported violation is correct, although it should be attributed to MHD_str_equal_quoted_bin_n rather than is_param_equal_caseless."
}