{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of is_param_equal_caseless:\n```c\n_MHD_static_inline bool\nis_param_equal_caseless (const struct MHD_RqDAuthParam *param,\n                         const char *const str,\n                         const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmhd_assert (0 != param->value.len);\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The single statement mhd_assert(0 != param->value.len);, as written, does not itself create unreachable code. An assert is a runtime check; if it expands to a conditional runtime check or to nothing in release builds, the subsequent code remains reachable. However, a violation could occur if mhd_assert is defined in a way that makes control flow non\u2011returning or unconditionally aborts/unreachable regardless of the condition. For example, if mhd_assert(cond) expands to a noreturn call or to something like __builtin_unreachable() or an unconditional abort, then the code following the macro would be statically and/or dynamically unreachable and would violate MISRA C 2023 Rule 2.1."
}