{
  "user_message": "An agent A claimed that the following is_param_equal_caseless code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of is_param_equal_caseless.\n```c\n_MHD_static_inline bool\nis_param_equal_caseless (const struct MHD_RqDAuthParam *param,\n                         const char *const str,\n                         const size_t str_len)\n{\n  mhd_assert (NULL != param->value.str);\n  mhd_assert (0 != param->value.len);\n  if (param->quoted)\n    return MHD_str_equal_quoted_bin_n (param->value.str, param->value.len,\n                                       str, str_len);\n  return (str_len == param->value.len) &&\n         (0 == memcmp (str, param->value.str, str_len));\n\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf the caller passes str == NULL while str_len equals param->value.len (which is asserted non-zero), memcmp(str, param->value.str, str_len) will attempt to read str_len bytes from a NULL pointer (or otherwise from a buffer smaller than str_len), causing an out-of-bounds access. There is no check in the fragment that str is non-NULL or that str actually has at least str_len bytes, so the memcmp invocation can violate Rule 21.17.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The code asserts that param->value.str is non-NULL and that param->value.len is non-zero, but it does not check that the incoming pointer str is non-NULL or that it actually refers to at least str_len bytes. In the non-quoted branch memcmp(str, param->value.str, str_len) is executed when str_len == param->value.len (> 0). If a caller passes str == NULL (or any pointer that does not reference str_len bytes), memcmp will attempt to access memory through an invalid pointer, causing out-of-bounds access/undefined behavior. That directly conflicts with MISRA C 2023 Rule 21.17 unless there is an external, provable contract guaranteeing str is valid. To comply, the code should ensure str is non-NULL and sufficient length (e.g. an assertion or explicit check) before calling memcmp."
}