{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN enum MHD_Result\nMHD_digest_auth_calc_userhash_hex (enum MHD_DigestAuthAlgo3 algo3,\n                                   const char *username,\n                                   const char *realm,\n                                   char *userhash_hex,\n                                   size_t hex_buf_size)\n{\n  uint8_t userhash_bin[MAX_DIGEST];\n  size_t digest_size;\n\n  digest_size = digest_get_hash_size (algo3);\n  if (digest_size * 2 + 1 > hex_buf_size)\n    return MHD_NO;\n  if (MHD_NO == MHD_digest_auth_calc_userhash (algo3, username, realm,\n                                               userhash_bin, MAX_DIGEST))\n    return MHD_NO;\n\n  MHD_bin_to_hex_z (userhash_bin, digest_size, userhash_hex);\n  return MHD_YES;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_digest_auth_calc_userhash_hex': {'callees': ['digest_get_hash_size', 'MHD_digest_auth_calc_userhash', 'MHD_bin_to_hex_z'], 'callers': []}, 'digest_get_hash_size': {'callees': [], 'callers': ['MHD_digest_get_hash_size', 'MHD_digest_auth_calc_userhash_hex', 'MHD_digest_auth_check_digest3']}, 'MHD_digest_auth_calc_userhash': {'callees': ['digest_init_one_time', 'get_base_digest_algo', 'digest_get_size', 'calc_userhash'], 'callers': ['MHD_digest_auth_calc_userhash_hex', 'add_new_user_entry']}, 'MHD_bin_to_hex_z': {'callees': ['MHD_bin_to_hex'], 'callers': ['MHD_digest_auth_calc_userhash_hex']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_EXTERN",
    "enum MHD_Result (including MHD_YES and MHD_NO)",
    "enum MHD_DigestAuthAlgo3",
    "MAX_DIGEST",
    "digest_get_hash_size (declaration/definition)",
    "MHD_digest_auth_calc_userhash (declaration/definition)",
    "MHD_bin_to_hex_z (definition/declaration)",
    "MHD_bin_to_hex (definition/declaration)",
    "stdint/stddef typedefs for uint8_t and size_t"
  ],
  "explanation": "For checking MISRA rule on language extensions you must inspect any macros, attributes or non\u2011standard declarations that could hide compiler extensions. Each listed symbol may introduce such extensions and therefore must be visible to the analyzer:\n\n- _MHD_EXTERN: This macro decorates the function declaration/definition and commonly expands to compiler-specific tokens (for example __attribute__((...)), __declspec(...), visibility attributes, or linkage specifiers). Its expansion determines whether a language extension is used.\n- enum MHD_Result (including MHD_YES and MHD_NO): The enum type and its enumerators could be declared with non-standard extensions or attributes (underlying type specification, packed/aligned attributes, or compiler annotations). You need the enum definition to ensure no extension is used.\n- enum MHD_DigestAuthAlgo3: Same reason as above \u2014 the enum definition may use compiler-specific extensions or attributes that affect compliance.\n- MAX_DIGEST: This macro/constant supplies array sizing. Its definition could be computed using non-standard extensions or GCC/Clang builtins; inspect it to ensure no extension is used (for example use of typeof, __builtin_constant_p, or other compiler intrinsics).\n- digest_get_hash_size (declaration/definition): The function prototype or macro could be implemented as a macro or inline with attributes or builtins (e.g. __attribute__, inline asm, unusual calling conventions). Its declaration is needed to see if any extension is pulled into the translation unit.\n- MHD_digest_auth_calc_userhash (declaration/definition): The called function\u2019s declaration may be a macro or carry attributes/extension usage that affect this unit (for example attributes on parameters or return type). Check its header/definition for extensions.\n- MHD_bin_to_hex_z (definition/declaration): This symbol is used directly and might be a macro wrapping another routine or using compiler-specific constructs (inline assembly, builtins). You need its definition to be sure no extension is used here.\n- MHD_bin_to_hex (definition/declaration): Called by MHD_bin_to_hex_z per the call graph; if MHD_bin_to_hex_z is a macro/inline calling this, that implementation may contain extensions. Inspect it too.\n- stdint/stddef typedefs for uint8_t and size_t: While these are standard types, their typedefs come from headers; include them to ensure no platform\u2011specific or compiler extension is being relied upon (rare but relevant when checking for non\u2011standard type definitions).\n\nProviding these symbols (macros, typedefs and function/enum definitions) lets the next analyst detect any use of compiler-specific keywords, attributes, inline assembly or other language extensions that would violate the MISRA rule."
}