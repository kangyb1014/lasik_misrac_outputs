{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of SHA1ProcessMessageBlock:\n```c\nstatic void\nSHA1ProcessMessageBlock (struct SHA1Context *context)\n{\n  const uint32_t K[] = { 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xCA62C1D6 };\n  int i;\n  uint32_t temp;\n  uint32_t W[80];\n  uint32_t A, B, C, D, E;\n\n  for (i = 0; i < 16; i++)\n  {\n    W[i] = ((uint32_t) context->message_block[i * 4]) << 24;\n    W[i] |= ((uint32_t) context->message_block[i * 4 + 1]) << 16;\n    W[i] |= ((uint32_t) context->message_block[i * 4 + 2]) << 8;\n    W[i] |= context->message_block[i * 4 + 3];\n  }\n  for (i = 16; i < 80; i++)\n  {\n    W[i]\n      = SHA1CircularShift (1, W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);\n  }\n  A = context->intermediate_hash[0];\n  B = context->intermediate_hash[1];\n  C = context->intermediate_hash[2];\n  D = context->intermediate_hash[3];\n  E = context->intermediate_hash[4];\n  for (i = 0; i < 20; i++)\n  {\n    temp = SHA1CircularShift (5, A) + ((B & C) | ((~B) & D)) + E + W[i]\n           + K[0];\n    E = D;\n    D = C;\n    C = SHA1CircularShift (30, B);\n    B = A;\n    A = temp;\n  }\n  for (i = 20; i < 40; i++)\n  {\n    temp = SHA1CircularShift (5, A) + (B ^ C ^ D) + E + W[i] + K[1];\n    E = D;\n    D = C;\n    C = SHA1CircularShift (30, B);\n    B = A;\n    A = temp;\n  }\n  for (i = 40; i < 60; i++)\n  {\n    temp = SHA1CircularShift (5, A) + ((B & C) | (B & D) | (C & D)) + E\n           + W[i] + K[2];\n    E = D;\n    D = C;\n    C = SHA1CircularShift (30, B);\n    B = A;\n    A = temp;\n  }\n  for (i = 60; i < 80; i++)\n  {\n    temp = SHA1CircularShift (5, A) + (B ^ C ^ D) + E + W[i] + K[3];\n    E = D;\n    D = C;\n    C = SHA1CircularShift (30, B);\n    B = A;\n    A = temp;\n  }\n  context->intermediate_hash[0] += A;\n  context->intermediate_hash[1] += B;\n  context->intermediate_hash[2] += C;\n  context->intermediate_hash[3] += D;\n  context->intermediate_hash[4] += E;\n  context->message_block_index = 0;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function SHA1ProcessMessageBlock:\n#define SHA1CircularShift(bits, word) (((word)<<(bits))|((word)>>(32-(bits))))\n...\nstruct SHA1Context\n{\n  uint32_t intermediate_hash[SHA1HashSize / 4];\n  uint32_t length_low;\n  uint32_t length_high;\n  int_least16_t message_block_index;\n  unsigned char message_block[64];\n  int computed;\n  int corrupted;\n}\n...\nstatic void\nSHA1PadMessage (struct SHA1Context *context)\n{\n  if (context->message_block_index > 55)\n  {\n    context->message_block[context->message_block_index++] = 0x80;\n    while (context->message_block_index < 64)\n    {\n      context->message_block[context->message_block_index++] = 0;\n    }\n    SHA1ProcessMessageBlock (context);\n    while (context->message_block_index < 56)\n    {\n      context->message_block[context->message_block_index++] = 0;\n    }\n  }\n  else\n  {\n    context->message_block[context->message_block_index++] = 0x80;\n    while (context->message_block_index < 56)\n    {\n      context->message_block[context->message_block_index++] = 0;\n    }\n  }\n  context->message_block[56] = (unsigned char) (context->length_high >> 24);\n  context->message_block[57] = (unsigned char) (context->length_high >> 16);\n  context->message_block[58] = (unsigned char) (context->length_high >> 8);\n  context->message_block[59] = (unsigned char) (context->length_high);\n  context->message_block[60] = (unsigned char) (context->length_low >> 24);\n  context->message_block[61] = (unsigned char) (context->length_low >> 16);\n  context->message_block[62] = (unsigned char) (context->length_low >> 8);\n  context->message_block[63] = (unsigned char) (context->length_low);\n  SHA1ProcessMessageBlock (context);\n}\n...\nstatic enum SHA1_RESULT\nSHA1Input (struct SHA1Context *context, const unsigned char *message_array,\n           unsigned length)\n{\n  if (! length)\n  {\n    return SHA1_RESULT_SUCCESS;\n  }\n  if (! context || ! message_array)\n  {\n    return SHA1_RESULT_NULL;\n  }\n  if (context->computed)\n  {\n    context->corrupted = 1;\n    return SHA1_RESULT_STATE_ERROR;\n  }\n  if (context->corrupted)\n  {\n    return SHA1_RESULT_STATE_ERROR;\n  }\n  while (length-- && ! context->corrupted)\n  {\n    context->message_block[context->message_block_index++]\n      = (*message_array & 0xFF);\n    context->length_low += 8;\n    if (context->length_low == 0)\n    {\n      context->length_high++;\n      if (context->length_high == 0)\n      {\n        context->corrupted = 1;\n      }\n    }\n    if (context->message_block_index == 64)\n    {\n      SHA1ProcessMessageBlock (context);\n    }\n    message_array++;\n  }\n  return SHA1_RESULT_SUCCESS;\n}\n...\nstatic enum SHA1_RESULT\nSHA1Result (struct SHA1Context *context, unsigned char\n            Message_Digest[SHA1HashSize])\n{\n  int i;\n\n  if (! context || ! Message_Digest)\n  {\n    return SHA1_RESULT_NULL;\n  }\n  if (context->corrupted)\n  {\n    return SHA1_RESULT_STATE_ERROR;\n  }\n  if (! context->computed)\n  {\n    SHA1PadMessage (context);\n    for (i = 0; i < 64; ++i)\n    {\n      context->message_block[i] = 0;\n    }\n    context->length_low = 0;\n    context->length_high = 0;\n    context->computed = 1;\n  }\n  for (i = 0; i < SHA1HashSize; ++i)\n  {\n    Message_Digest[i]\n      = (unsigned char) (context->intermediate_hash[i >> 2]\n                         >> 8 * (3 - (i & 0x03)));\n  }\n  return SHA1_RESULT_SUCCESS;\n}\n...\nstatic enum MHD_Result\nws_get_accept_value (const char *key, char **val)\n{\n  struct SHA1Context ctx;\n  unsigned char hash[SHA1HashSize];\n  char *str;\n  ssize_t len;\n\n  if ( (NULL == key) || (WS_KEY_LEN != strlen (key)))\n  {\n    return MHD_NO;\n  }\n  str = malloc (WS_KEY_LEN + WS_GUID_LEN + 1);\n  if (NULL == str)\n  {\n    return MHD_NO;\n  }\n  strncpy (str, key, (WS_KEY_LEN + 1));\n  strncpy (str + WS_KEY_LEN, WS_GUID, WS_GUID_LEN + 1);\n  SHA1Reset (&ctx);\n  SHA1Input (&ctx, (const unsigned char *) str, WS_KEY_GUID_LEN);\n  if (SHA1_RESULT_SUCCESS != SHA1Result (&ctx, hash))\n  {\n    free (str);\n    return MHD_NO;\n  }\n  free (str);\n  len = BASE64Encode (hash, SHA1HashSize, val);\n  if (-1 == len)\n  {\n    return MHD_NO;\n  }\n  (*val)[len] = '\\0';\n  return MHD_YES;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "context->corrupted = 1;\n      if (context->length_high == 0)\n      {\n        context->corrupted = 1;\n      }",
    "for (i = 0; i < 64; ++i)\n  {\n    context->message_block[i] = 0;\n  }\n  context->length_low = 0;\n  context->length_high = 0;\n  context->computed = 1;",
    "(*val)[len] = '\\0';",
    "if (context->computed)\n  {\n    context->corrupted = 1;\n    return SHA1_RESULT_STATE_ERROR;\n  }",
    "if (context->message_block_index > 55)\n  {\n    context->message_block[context->message_block_index++] = 0x80;\n    while (context->message_block_index < 64)\n    {\n      context->message_block[context->message_block_index++] = 0;\n    }\n    SHA1ProcessMessageBlock (context);\n    while (context->message_block_index < 56)\n    {\n      context->message_block[context->message_block_index++] = 0;\n    }\n  }\n  else\n  {\n    context->message_block[context->message_block_index++] = 0x80;\n    while (context->message_block_index < 56)\n    {\n      context->message_block[context->message_block_index++] = 0;\n    }\n  }"
  ],
  "explanation": "The core SHA1ProcessMessageBlock implementation (W[] construction, the four 20-iteration rounds, updates to intermediate_hash, and the final context->message_block_index = 0) performs the essential SHA-1 transform and all operations in those loops are used to compute the hash; they are not flagged. The SHA1CircularShift macro and the declarations (K[], A..E, temp, W[]) are actively used by the function and are not dead. The per-byte processing in SHA1Input (updating message_block, length_low/length_high, calling SHA1ProcessMessageBlock when message_block_index == 64) is required for correct streaming input handling and is not dead. The padding logic in SHA1PadMessage is functionally required to produce the final block(s) and, aside from the duplicated structure of the two branches (which is reported above), its statements are necessary to construct the padded message. The ws_get_accept_value function logic (checks, allocation, concatenation of key+GUID, SHA-1 compute, base64 encode) is part of the accept-value production; the calls and flow are exercised at runtime and cannot be removed without changing behavior. I therefore did not mark the main SHA-1 compression operations, the W array assignments, the round computations, the final intermediate_hash additions, SHA1ProcessMessageBlock's reset of message_block_index, or the top-level control-flow checks (null checks, length==0 early return in SHA1Input, etc.) as suspicious. The fragments listed above were selected because they are potential candidates for being executed yet unnecessary (e.g. zeroing of buffers or redundant flag assignments, duplicated padding branches, and a null-terminator write that may be redundant) and thus warrant investigation under MISRA C Rule 2.2."
}