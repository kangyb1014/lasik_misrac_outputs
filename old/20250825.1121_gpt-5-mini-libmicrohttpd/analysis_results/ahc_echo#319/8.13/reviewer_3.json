{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe pointer 'param' is declared as a mutable pointer (struct handler_param *param = (struct handler_param *) cls;) even though the function only reads from the pointee (it does not modify the struct or its members). According to MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible. The correct form would be, for example, 'const struct handler_param *param = (const struct handler_param *) cls;' (and ideally the function parameter could be 'const void *cls') so that the pointee is protected from modification.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function ahc_echo:\nstruct handler_param\n{\n  const char *response_page;\n}\n...\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_buffer_static (size_t size,\n                                        const void *buffer)\n{\n  return MHD_create_response_from_buffer_with_free_callback_cls (size,\n                                                                 buffer,\n                                                                 NULL,\n                                                                 NULL);\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. In ahc_echo the local pointer 'param' is declared as a mutable pointer (struct handler_param *), but the function only reads from the object pointed to (only accesses param->response_page). Per MISRA C 2023 Rule 8.13 a pointer should point to a const-qualified type whenever possible, so the local pointer should be const-qualified. A suitable fix is to make the local pointer const, e.g.:\n\n  const struct handler_param *param = (const struct handler_param *) cls;\n\n(or simply const struct handler_param *param = cls; in C). Note that the external callback signature may force cls to be void * (so you cannot necessarily change the function parameter to const void *); in that case making the local pointer const satisfies the rule. If changing the signature is allowable, making the parameter const void *cls is preferable. If neither change is possible, a documented MISRA deviation is required."
}