{
  "user_message": "An agent A claimed that the following ahc_echo code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of ahc_echo.\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  struct handler_param *param = (struct handler_param *) cls;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;                  /* reset when done */\n  response =\n    MHD_create_response_from_buffer_static (strlen (param->response_page),\n                                            param->response_page);\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter cls is declared as void * and is cast to a non-const pointer (struct handler_param *param = (struct handler_param *)cls) even though the function only reads from the object. According to MISRA C 2023 Rule 8.13, the pointer should be const-qualified when possible. The signature should be e.g. const void *cls (and cast to const struct handler_param *), or directly const struct handler_param *param, since param->response_page is const char * and the function does not modify the pointed-to object.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function ahc_echo:\nstruct handler_param\n{\n  const char *response_page;\n}\n...\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_buffer_static (size_t size,\n                                        const void *buffer)\n{\n  return MHD_create_response_from_buffer_with_free_callback_cls (size,\n                                                                 buffer,\n                                                                 NULL,\n                                                                 NULL);\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is essentially correct: the code casts the incoming cls (declared as void *) to a non-const struct handler_param * even though the function only reads the object (param->response_page is a const char * and is passed to an API that expects a const void *). MISRA C 2023 Rule 8.13 recommends that pointers should point to const-qualified types whenever possible. In this function the local pointer should therefore be const-qualified, e.g.:\n\n  const struct handler_param *param = (const struct handler_param *) cls;\n\nThat change satisfies Rule 8.13 without changing the function prototype. Note: the function prototype itself cannot be changed to use const void *cls if it must match an external callback signature (such as the libmicrohttpd callback type); MISRA allows that an external interface requirement can prevent adding const to the function parameter. However, the current code still violates the spirit of 8.13 as implemented locally and should be fixed by making the local pointer const."
}