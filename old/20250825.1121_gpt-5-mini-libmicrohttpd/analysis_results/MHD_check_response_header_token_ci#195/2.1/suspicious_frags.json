{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_check_response_header_token_ci:\n```c\nbool\nMHD_check_response_header_token_ci (const struct MHD_Response *response,\n                                    const char *key,\n                                    size_t key_len,\n                                    const char *token,\n                                    size_t token_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  if ( (NULL == key) ||\n       ('\\0' == key[0]) ||\n       (NULL == token) ||\n       ('\\0' == token[0]) )\n    return false;\n\n  /* Token must not contain binary zero! */\n  mhd_assert (strlen (token) == token_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ( (pos->kind == MHD_HEADER_KIND) &&\n         (key_len == pos->header_size) &&\n         MHD_str_equal_caseless_bin_n_ (pos->header,\n                                        key,\n                                        key_len) &&\n         MHD_str_has_token_caseless_ (pos->value,\n                                      token,\n                                      token_len) )\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ( (pos->kind == MHD_HEADER_KIND) &&\n         (key_len == pos->header_size) &&\n         MHD_str_equal_caseless_bin_n_ (pos->header,\n                                        key,\n                                        key_len) &&\n         MHD_str_has_token_caseless_ (pos->value,\n                                      token,\n                                      token_len) )\n      return true;\n  }",
    "if ( (NULL == key) ||\n       ('\\0' == key[0]) ||\n       (NULL == token) ||\n       ('\\0' == token[0]) )\n    return false;",
    "mhd_assert (strlen (token) == token_len);"
  ],
  "explanation": "I selected fragments that warrant investigation for potential unreachable-code issues under MISRA C 2023 Rule 2.1:\n- The initial combined NULL/empty checks with an immediate return: investigate evaluation order and whether any subexpressions (e.g. key[0], token[0]) could be evaluated when the pointer is NULL in some compiler or macro configurations, or whether macro expansion could change behavior and make subsequent statements unreachable.\n- The mhd_assert line: assertions are often compiled out in production builds; if this assertion is relied upon to guarantee a property (strlen(token) == token_len) that other code assumes, removing it could render some paths logically inconsistent or create effectively unreachable code paths \u2014 so this must be checked.\n- The for-loop and its internal conditional that returns true: the compound conditional uses multiple short-circuited checks and external helper functions/macros. If any of those checks or macros are defined in a way that prevents evaluation of later parts, or if macros expand to code with unconditional returns or goto, parts of the loop body (including the return true) might become unreachable. Also verify that response is non-NULL before dereferencing response->first_header in all build configurations.\n\nFragments not listed (function signature, declaration of pos, final \"return false;\", and the helper-call expressions themselves in isolation) are straightforward and reachable in the normal control flow of this function, or they are simple declarations/returns that do not by themselves indicate unreachable code. Other expressions not listed do not present an obvious unreachable-code concern without additional context (macro definitions, build-time assertion removal, or unexpected compiler-specific behavior), which is why they were omitted from the suspicious list."
}