{
  "user_message": "An agent A claimed that the following MHD_check_response_header_token_ci code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_check_response_header_token_ci.\n```c\nbool\nMHD_check_response_header_token_ci (const struct MHD_Response *response,\n                                    const char *key,\n                                    size_t key_len,\n                                    const char *token,\n                                    size_t token_len)\n{\n  struct MHD_HTTP_Res_Header *pos;\n\n  if ( (NULL == key) ||\n       ('\\0' == key[0]) ||\n       (NULL == token) ||\n       ('\\0' == token[0]) )\n    return false;\n\n  /* Token must not contain binary zero! */\n  mhd_assert (strlen (token) == token_len);\n\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ( (pos->kind == MHD_HEADER_KIND) &&\n         (key_len == pos->header_size) &&\n         MHD_str_equal_caseless_bin_n_ (pos->header,\n                                        key,\n                                        key_len) &&\n         MHD_str_has_token_caseless_ (pos->value,\n                                      token,\n                                      token_len) )\n      return true;\n  }\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local iterator 'pos' is declared as 'struct MHD_HTTP_Res_Header *pos;' but the function takes a 'const struct MHD_Response *response' and only reads header fields (no modifications to the header objects). According to MISRA C 2023 Rule 8.13, 'pos' should point to a const-qualified type when possible (e.g. 'const struct MHD_HTTP_Res_Header *pos;'). Declaring it non-const here therefore violates Rule 8.13.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_check_response_header_token_ci:\nstruct MHD_Response\n{\n\n  /**\n   * Head of double-linked list of headers to send for the response.\n   */\n  struct MHD_HTTP_Res_Header *first_header;\n\n  /**\n   * Tail of double-linked list of headers to send for the response.\n   */\n  struct MHD_HTTP_Res_Header *last_header;\n\n  /**\n   * Buffer pointing to data that we are supposed\n   * to send as a response.\n   */\n  const char *data;\n\n  /**\n   * Closure to give to the content reader @e crc\n   * and content reader free callback @e crfc.\n   */\n  void *crc_cls;\n\n  /**\n   * How do we get more data?  NULL if we are\n   * given all of the data up front.\n   */\n  MHD_ContentReaderCallback crc;\n\n  /**\n   * NULL if data must not be freed, otherwise\n   * either user-specified callback or \"&free\".\n   */\n  MHD_ContentReaderFreeCallback crfc;\n\n#ifdef UPGRADE_SUPPORT\n  /**\n   * Application function to call once we are done sending the headers\n   * of the response; NULL unless this is a response created with\n   * #MHD_create_response_for_upgrade().\n   */\n  MHD_UpgradeHandler upgrade_handler;\n\n  /**\n   * Closure for @e uh.\n   */\n  void *upgrade_handler_cls;\n#endif /* UPGRADE_SUPPORT */\n\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  /**\n   * Mutex to synchronize access to @e data, @e size and\n   * @e reference_count.\n   */\n  MHD_mutex_ mutex;\n#endif\n\n  /**\n   * The size of the response body.\n   * Set to #MHD_SIZE_UNKNOWN if size is not known.\n   */\n  uint64_t total_size;\n\n  /**\n   * At what offset in the stream is the\n   * beginning of @e data located?\n   */\n  uint64_t data_start;\n\n  /**\n   * Offset to start reading from when using @e fd.\n   */\n  uint64_t fd_off;\n\n  /**\n   * Number of bytes ready in @e data (buffer may be larger\n   * than what is filled with payload).\n   */\n  size_t data_size;\n\n  /**\n   * Size of the writable data buffer @e data.\n   */\n  size_t data_buffer_size;\n\n  /**\n   * Reference count for this response.  Free once the counter hits\n   * zero.\n   */\n  unsigned int reference_count;\n\n  /**\n   * File-descriptor if this response is FD-backed.\n   */\n  int fd;\n\n  /**\n   * Flags set for the MHD response.\n   */\n  enum MHD_ResponseFlags flags;\n\n  /**\n   * Automatic flags set for the MHD response.\n   */\n  enum MHD_ResponseAutoFlags flags_auto;\n\n  /**\n   * If the @e fd is a pipe (no sendfile()).\n   */\n  bool is_pipe;\n\n  /**\n   * I/O vector used with MHD_create_response_from_iovec.\n   */\n  MHD_iovec_ *data_iov;\n\n  /**\n   * Number of elements in data_iov.\n   */\n  unsigned int data_iovcnt;\n}\n...\nstruct MHD_HTTP_Res_Header\n{\n  /**\n   * Headers are kept in a double-linked list.\n   */\n  struct MHD_HTTP_Res_Header *next;\n\n  /**\n   * Headers are kept in a double-linked list.\n   */\n  struct MHD_HTTP_Res_Header *prev;\n\n  /**\n   * The name of the header (key), without the colon.\n   */\n  char *header;\n\n  /**\n   * The length of the @a header, not including the final zero termination.\n   */\n  size_t header_size;\n\n  /**\n   * The value of the header.\n   */\n  char *value;\n\n  /**\n   * The length of the @a value, not including the final zero termination.\n   */\n  size_t value_size;\n\n  /**\n   * Type of the value.\n   */\n  enum MHD_ValueKind kind;\n\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. Rule 8.13 requires that pointers should point to const-qualified types whenever possible. In MHD_check_response_header_token_ci the local iterator is declared as\n  struct MHD_HTTP_Res_Header *pos;\nbut the function only reads the header nodes (response is a const pointer), so pos can and should be declared to point to a const-qualified type:\n  const struct MHD_HTTP_Res_Header *pos;\nMaking pos a pointer-to-const does not conflict with response being const (response->first_header has type struct MHD_HTTP_Res_Header * and can be assigned to const struct MHD_HTTP_Res_Header *), nor with passing the header strings to functions that take const char * arguments. If the code later needs to modify headers via pos, then const is not possible, but in the presented function pos is only used for read-only access, so the current non-const declaration violates MISRA C 2023 Rule 8.13."
}