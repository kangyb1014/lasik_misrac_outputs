{
  "user_message": "Target function code is:\n```c\nstatic void\nparse_connection_headers (struct MHD_Connection *connection)\n{\n  const char *clen;\n  const char *enc;\n  size_t val_len;\n\n#ifdef COOKIE_SUPPORT\n  if (MHD_PARSE_COOKIE_NO_MEMORY == parse_cookie_header (connection))\n  {\n    handle_req_cookie_no_space (connection);\n    return;\n  }\n#endif /* COOKIE_SUPPORT */\n  if ( (-3 < connection->daemon->client_discipline) &&\n       (MHD_IS_HTTP_VER_1_1_COMPAT (connection->rq.http_ver)) &&\n       (MHD_NO ==\n        MHD_lookup_connection_value_n (connection,\n                                       MHD_HEADER_KIND,\n                                       MHD_HTTP_HEADER_HOST,\n                                       MHD_STATICSTR_LEN_ (\n                                         MHD_HTTP_HEADER_HOST),\n                                       NULL,\n                                       NULL)) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Received HTTP/1.1 request without `Host' header.\\n\"));\n#endif\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_BAD_REQUEST,\n                                    REQUEST_LACKS_HOST);\n    return;\n  }\n\n  /* The presence of the request body is indicated by \"Content-Length:\" or\n     \"Transfer-Encoding:\" request headers.\n     Unless one of these two headers is used, the request has no request body.\n     See RFC9112, Section 6, paragraph 4. */\n  connection->rq.remaining_upload_size = 0;\n  if (MHD_NO !=\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_TRANSFER_ENCODING,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_TRANSFER_ENCODING),\n                                     &enc,\n                                     NULL))\n  {\n    if (! MHD_str_equal_caseless_ (enc,\n                                   \"chunked\"))\n    {\n      transmit_error_response_static (connection,\n                                      MHD_HTTP_BAD_REQUEST,\n                                      REQUEST_UNSUPPORTED_TR_ENCODING);\n      return;\n    }\n    else if (MHD_NO !=\n             MHD_lookup_connection_value_n (connection,\n                                            MHD_HEADER_KIND,\n                                            MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                            MHD_STATICSTR_LEN_ ( \\\n                                              MHD_HTTP_HEADER_CONTENT_LENGTH),\n                                            NULL,\n                                            NULL))\n    {\n      /* TODO: add individual settings */\n      if (1 <= connection->daemon->client_discipline)\n      {\n        transmit_error_response_static (connection,\n                                        MHD_HTTP_BAD_REQUEST,\n                                        REQUEST_LENGTH_WITH_TR_ENCODING);\n        return;\n      }\n      else\n      {\n        /* Must close connection after reply to prevent potential attack */\n        connection->keepalive = MHD_CONN_MUST_CLOSE;\n#ifdef HAVE_MESSAGES\n        MHD_DLOG (connection->daemon,\n                  _ (\"The 'Content-Length' request header is ignored \"\n                     \"as chunked Transfer-Encoding is used \"\n                     \"for this request.\\n\"));\n#endif /* HAVE_MESSAGES */\n      }\n    }\n    connection->rq.have_chunked_upload = true;\n    connection->rq.remaining_upload_size = MHD_SIZE_UNKNOWN;\n  }\n  else if (MHD_NO !=\n           MHD_lookup_connection_value_n (connection,\n                                          MHD_HEADER_KIND,\n                                          MHD_HTTP_HEADER_CONTENT_LENGTH,\n                                          MHD_STATICSTR_LEN_ (\n                                            MHD_HTTP_HEADER_CONTENT_LENGTH),\n                                          &clen,\n                                          &val_len))\n  {\n    size_t num_digits;\n\n    num_digits = MHD_str_to_uint64_n_ (clen,\n                                       val_len,\n                                       &connection->rq.remaining_upload_size);\n\n    if (((0 == num_digits) &&\n         (0 != val_len) &&\n         ('0' <= clen[0]) && ('9' >= clen[0]))\n        || (MHD_SIZE_UNKNOWN == connection->rq.remaining_upload_size))\n    {\n      connection->rq.remaining_upload_size = 0;\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"Too large value of 'Content-Length' header. \" \\\n                   \"Closing connection.\\n\"));\n#endif\n      transmit_error_response_static (connection,\n                                      MHD_HTTP_CONTENT_TOO_LARGE,\n                                      REQUEST_CONTENTLENGTH_TOOLARGE);\n    }\n    else if ((val_len != num_digits) ||\n             (0 == num_digits))\n    {\n      connection->rq.remaining_upload_size = 0;\n#ifdef HAVE_MESSAGES\n      MHD_DLOG (connection->daemon,\n                _ (\"Failed to parse 'Content-Length' header. \" \\\n                   \"Closing connection.\\n\"));\n#endif\n      transmit_error_response_static (connection,\n                                      MHD_HTTP_BAD_REQUEST,\n                                      REQUEST_CONTENTLENGTH_MALFORMED);\n    }\n  }\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'parse_connection_headers': {'callees': ['parse_cookie_header', 'handle_req_cookie_no_space', 'MHD_lookup_connection_value_n', 'MHD_DLOG', 'transmit_error_response_len', 'MHD_str_equal_caseless_', 'MHD_str_to_uint64_n_'], 'callers': ['MHD_connection_handle_idle']}, 'parse_cookie_header': {'callees': ['MHD_lookup_connection_value_n', 'MHD_connection_alloc_memory_', 'parse_cookies_string', 'MHD_DLOG'], 'callers': ['parse_connection_headers']}, 'handle_req_cookie_no_space': {'callees': ['get_no_space_err_status_code', 'transmit_error_response_len'], 'callers': ['parse_connection_headers']}, 'MHD_lookup_connection_value_n': {'callees': [], 'callers': ['MHD_lookup_connection_value', 'need_100_continue', 'get_no_space_err_status_code', 'parse_cookie_header', 'parse_connection_headers', 'MHD_create_post_processor', 'ahc_cb']}, 'MHD_DLOG': {'callees': [], 'callers': ['connection_close_error', 'check_connection_reply', 'transmit_error_response_len', 'connection_add_header', 'parse_cookie_header', 'process_request_body', 'parse_connection_headers', 'get_req_header', 'get_req_headers', 'MHD_connection_handle_read', 'MHD_connection_handle_write', 'connection_check_timedout', 'cleanup_connection', 'MHD_connection_epoll_update_', 'MHD_queue_response', 'MHD_ip_limit_add', 'MHD_get_fdset2', 'thread_main_handle_connection', 'new_connection_prepare_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_get_timeout64', 'MHD_run_from_select2', 'MHD_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll', 'MHD_polling_thread', 'unescape_wrapper', 'MHD_quiesce_daemon', 'parse_options_va', 'setup_epoll_fd', 'setup_epoll_to_listen', 'process_interim_params', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_connection_set_nodelay_state_', 'MHD_connection_set_cork_state_', 'post_send_setopt', 'MHD_response_execute_upgrade_', 'MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_', 'calculate_add_nonce_with_retry', 'check_uri_match', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner', 'MHD_basic_auth_get_username_password3', 'MHD_basic_auth_get_username_password', 'MHD_queue_basic_auth_required_response3']}, 'transmit_error_response_len': {'callees': ['MHD_DLOG', 'connection_close_error', 'MHD_pool_deallocate', 'MHD_destroy_response', 'MHD_create_response_from_buffer_static', 'MHD_queue_response', 'build_header_response', 'MHD_pool_reset'], 'callers': ['handle_req_headers_no_space', 'handle_req_cookie_no_space', 'handle_req_chunk_size_line_no_space', 'handle_req_footers_no_space', 'handle_recv_no_space', 'connection_add_header', 'parse_http_version', 'process_request_body', 'parse_connection_headers', 'get_request_line_inner', 'send_redirect_fixed_rq_target', 'get_request_line', 'get_req_header']}, 'MHD_str_equal_caseless_': {'callees': ['charsequalcaseless'], 'callers': ['need_100_continue', 'parse_connection_headers', 'MHD_add_response_header']}, 'MHD_str_to_uint64_n_': {'callees': ['isasciidigit'], 'callers': ['parse_connection_headers']}, 'MHD_connection_handle_idle': {'callees': ['get_request_line', 'switch_to_rq_headers_processing', 'get_req_headers', 'parse_connection_headers', 'call_connection_handler', 'need_100_continue', 'process_request_body', 'reset_rq_header_processing_state', 'connection_switch_from_recv_to_send', 'build_header_response', 'connection_close_error', 'MHD_response_execute_upgrade_', 'MHD_destroy_response', '__builtin_unreachable', 'try_ready_normal_body', 'try_ready_chunked_body', 'build_connection_chunked_response_footer', 'connection_reset', 'cleanup_connection', 'connection_check_timedout', 'MHD_connection_close_', 'MHD_connection_update_event_loop_info', 'MHD_connection_epoll_update_'], 'callers': ['MHD_queue_response', 'call_handlers', 'thread_main_handle_connection', 'MHD_epoll']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_Connection",
    "MHD_IS_HTTP_VER_1_1_COMPAT",
    "MHD_STATICSTR_LEN_",
    "MHD_lookup_connection_value_n",
    "MHD_str_equal_caseless_",
    "MHD_str_to_uint64_n_",
    "transmit_error_response_static",
    "transmit_error_response_len",
    "MHD_DLOG",
    "COOKIE_SUPPORT",
    "HAVE_MESSAGES",
    "MHD_PARSE_COOKIE_NO_MEMORY",
    "MHD_HEADER_KIND",
    "MHD_HTTP_HEADER_HOST",
    "MHD_HTTP_HEADER_TRANSFER_ENCODING",
    "MHD_HTTP_HEADER_CONTENT_LENGTH",
    "MHD_NO",
    "MHD_SIZE_UNKNOWN",
    "MHD_CONN_MUST_CLOSE",
    "MHD_HTTP_BAD_REQUEST",
    "MHD_HTTP_CONTENT_TOO_LARGE",
    "REQUEST_LACKS_HOST",
    "REQUEST_UNSUPPORTED_TR_ENCODING",
    "REQUEST_LENGTH_WITH_TR_ENCODING",
    "REQUEST_CONTENTLENGTH_TOOLARGE",
    "REQUEST_CONTENTLENGTH_MALFORMED",
    "handle_req_cookie_no_space",
    "parse_cookie_header",
    "charsequalcaseless",
    "isasciidigit"
  ],
  "explanation": "For checking whether parse_connection_headers uses any compiler/language extensions we must examine all macros, types, constants and callees that can expand to or hide extensions (e.g. GCC builtins, typeof, statement-expressions, inline-asm, __attribute__ usage, variadic/extension macros). Brief reasons per symbol:\n\n- struct MHD_Connection: definition of the connection object (fields accessed: daemon, rq.http_ver, rq.remaining_upload_size, rq.have_chunked_upload, keepalive). Needed to detect use of anonymous structs/unions, bit-fields, packed attributes or other non-standard field/type declarations.\n- MHD_IS_HTTP_VER_1_1_COMPAT: macro used in condition; its expansion may contain extensions (inline functions, statement expressions, typeof, __extension__).\n- MHD_STATICSTR_LEN_: macro used for header name length; macro expansion could use compiler extensions.\n- MHD_lookup_connection_value_n: declaration/definition may use non-standard function attributes, varargs, or inline/extern inline semantics or other extensions affecting how it's called here.\n- MHD_str_equal_caseless_: called to compare strings; its definition may use inline functions, statement-expr, typeof or other extensions; it calls charsequalcaseless so include that too.\n- MHD_str_to_uint64_n_: parser used to convert Content-Length; its implementation may rely on non-standard features (inline asm, GCC builtins, attributes); it calls isasciidigit so include that symbol as well.\n- transmit_error_response_static: symbol invoked for error replies. Its definition (or macro alias to transmit_error_response_len) may use variadic macros, attributes (format), or other extensions which could make the call site rely on extensions.\n- transmit_error_response_len: call-graph shows this variant; include to catch any macro indirection or extension in the actual symbol used.\n- MHD_DLOG: typically a logging macro; often implemented as a variadic macro or expands to do { ... } which can contain compiler-specific extensions. Must inspect expansion for extensions.\n- COOKIE_SUPPORT: preprocessor guard controlling parse_cookie_header invocation. Its presence/absence changes control flow; inspect to ensure no extension is introduced under guarded code paths.\n- HAVE_MESSAGES: preprocessor guard around MHD_DLOG usage; required for same reason as COOKIE_SUPPORT.\n- MHD_PARSE_COOKIE_NO_MEMORY: constant returned by parse_cookie_header; include to inspect any enum/macro definition using extensions.\n- MHD_HEADER_KIND: macro/enum passed to lookup; its definition could include non-standard constructs.\n- MHD_HTTP_HEADER_HOST, MHD_HTTP_HEADER_TRANSFER_ENCODING, MHD_HTTP_HEADER_CONTENT_LENGTH: header-name macros \u2014 their definitions may be string-literal macros, or use non-standard constructs; inspect expansions.\n- MHD_NO: boolean-like macro/enum used in comparisons; definition may be non-standard or rely on extension macros.\n- MHD_SIZE_UNKNOWN: special size constant used here; inspect for type/enum definitions or extensions.\n- MHD_CONN_MUST_CLOSE: keepalive value; inspect its definition (enum/bitfield/attribute) for non-standard features.\n- MHD_HTTP_BAD_REQUEST, MHD_HTTP_CONTENT_TOO_LARGE: HTTP status macros/enums used in transmit_error_response calls \u2014 include to check for any non-standard definition style.\n- REQUEST_LACKS_HOST, REQUEST_UNSUPPORTED_TR_ENCODING, REQUEST_LENGTH_WITH_TR_ENCODING, REQUEST_CONTENTLENGTH_TOOLARGE, REQUEST_CONTENTLENGTH_MALFORMED: application error-code macros passed to transmit_error_response; include because they may be macros that expand to constructs using extensions.\n- handle_req_cookie_no_space: called when parse_cookie_header indicates no memory; the implementation may contain extensions that affect the behavior seen in this call site (macros/attributes used in prototype/definition).\n- parse_cookie_header: called at function start under COOKIE_SUPPORT \u2014 its signature/definition may use extensions (inline, attributes, non-standard return types) and its return constants/macros must be inspected.\n- charsequalcaseless: helper called by MHD_str_equal_caseless_ (per call graph); include because it might use extensions (e.g. pointer arithmetic with extensions) that propagate into how comparisons are written.\n- isasciidigit: helper used by MHD_str_to_uint64_n_; include because it may be a macro or inline using extensions.\n\nIn short: inspect the definitions/expansions of the listed macros, constants, types and the implementations/prototypes of the callees to detect any use of language/compiler extensions (GCC/Clang builtins, __attribute__, typeof, statement expressions, inline asm, non-standard inline semantics, variadic macro tricks, anonymous struct/union usage with non-standard attributes, etc.). These symbols are the ones referenced directly in parse_connection_headers or in short call chains from it and are the likely places where an extension could be hidden."
}