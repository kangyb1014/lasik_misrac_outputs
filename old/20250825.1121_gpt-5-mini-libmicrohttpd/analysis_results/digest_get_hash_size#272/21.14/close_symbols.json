{
  "user_message": "Target function code is:\n```c\n_MHD_static_inline size_t\ndigest_get_hash_size (enum MHD_DigestAuthAlgo3 algo3)\n{\n#ifdef MHD_MD5_SUPPORT\n  mhd_assert (MHD_MD5_DIGEST_SIZE == MD5_DIGEST_SIZE);\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (MHD_SHA256_DIGEST_SIZE == SHA256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  mhd_assert (MHD_SHA512_256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (SHA256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#endif /* MHD_SHA512_256_SUPPORT */\n  /* Only one algorithm must be specified */\n  mhd_assert (1 == \\\n              (((0 != (algo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0)));\n#ifdef MHD_MD5_SUPPORT\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_MD5)))\n    return MHD_MD5_DIGEST_SIZE;\n  else\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) && defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ( ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)\n                | ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256))))\n    return MHD_SHA256_DIGEST_SIZE; /* The same as SHA512_256_DIGEST_SIZE */\n  else\n#elif defined(MHD_SHA256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)))\n    return MHD_SHA256_DIGEST_SIZE;\n  else\n#elif defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256)))\n    return MHD_SHA512_256_DIGEST_SIZE;\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n    (void) 0; /* Unsupported algorithm */\n\n  return 0; /* Wrong input or unsupported algorithm */\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'digest_get_hash_size': {'callees': [], 'callers': ['MHD_digest_get_hash_size', 'MHD_digest_auth_calc_userhash_hex', 'MHD_digest_auth_check_digest3']}, 'MHD_digest_get_hash_size': {'callees': ['digest_get_hash_size'], 'callers': ['find_entry_by_userhash']}, 'MHD_digest_auth_calc_userhash_hex': {'callees': ['digest_get_hash_size', 'MHD_digest_auth_calc_userhash', 'MHD_bin_to_hex_z'], 'callers': []}, 'MHD_digest_auth_check_digest3': {'callees': ['__builtin_unreachable', 'digest_get_hash_size', 'digest_auth_check_all'], 'callers': ['MHD_digest_auth_check_digest2', 'handle_sec_areas_req']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nThe Standard Library function memcmp shall not be used to compare null terminated strings. \nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_MD5_SUPPORT",
    "MHD_SHA256_SUPPORT",
    "MHD_SHA512_256_SUPPORT",
    "MHD_MD5_DIGEST_SIZE",
    "MD5_DIGEST_SIZE",
    "MHD_SHA256_DIGEST_SIZE",
    "SHA256_DIGEST_SIZE",
    "MHD_SHA512_256_DIGEST_SIZE",
    "SHA512_256_DIGEST_SIZE",
    "MHD_DIGEST_BASE_ALGO_MD5",
    "MHD_DIGEST_BASE_ALGO_SHA256",
    "MHD_DIGEST_BASE_ALGO_SHA512_256",
    "enum MHD_DigestAuthAlgo3",
    "mhd_assert",
    "MHD_digest_get_hash_size",
    "MHD_digest_auth_calc_userhash_hex",
    "MHD_digest_auth_calc_userhash",
    "MHD_bin_to_hex_z",
    "MHD_digest_auth_check_digest3",
    "digest_auth_check_all"
  ],
  "explanation": "- MHD_MD5_SUPPORT, MHD_SHA256_SUPPORT, MHD_SHA512_256_SUPPORT: preprocessor feature flags determine which branches of digest_get_hash_size are compiled. You must know which are defined to see the exact compiled code path (and whether any code that could use string functions is present).\n- MHD_MD5_DIGEST_SIZE, MD5_DIGEST_SIZE, MHD_SHA256_DIGEST_SIZE, SHA256_DIGEST_SIZE, MHD_SHA512_256_DIGEST_SIZE, SHA512_256_DIGEST_SIZE: the constants returned/checked by this function. To decide whether returned values represent binary digest lengths or lengths of NUL\u2011terminated text (hex strings), you need these sizes and their semantics.\n- MHD_DIGEST_BASE_ALGO_MD5, MHD_DIGEST_BASE_ALGO_SHA256, MHD_DIGEST_BASE_ALGO_SHA512_256 and enum MHD_DigestAuthAlgo3: the bitmask values and the enum type define how the input argument is interpreted. Knowing them is necessary to be sure the function only works with algorithm flags (not strings) and whether any implicit conversion/usage could lead to string comparisons.\n- mhd_assert: the assert macro/implementation could expand to helper code; include it to ensure it does not internally call string/comparison functions (e.g. memcmp) or otherwise affect MISRA analysis.\n- MHD_digest_get_hash_size, MHD_digest_auth_calc_userhash_hex, MHD_digest_auth_calc_userhash, MHD_bin_to_hex_z, MHD_digest_auth_check_digest3, digest_auth_check_all: these callers/callees from the static call graph must be inspected because even if digest_get_hash_size itself does not call memcmp, its return value (a length) or related data may be passed to code that converts digests to text (MHD_bin_to_hex_z) or compares digests/text using memcmp. To determine whether any memcmp use in the call chain is comparing NUL\u2011terminated strings (which would violate the MISRA rule), the next agent must be able to inspect these related functions and how they combine sizes/strings."
}