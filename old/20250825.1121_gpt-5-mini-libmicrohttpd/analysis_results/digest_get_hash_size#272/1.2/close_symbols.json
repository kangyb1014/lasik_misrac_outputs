{
  "user_message": "Target function code is:\n```c\n_MHD_static_inline size_t\ndigest_get_hash_size (enum MHD_DigestAuthAlgo3 algo3)\n{\n#ifdef MHD_MD5_SUPPORT\n  mhd_assert (MHD_MD5_DIGEST_SIZE == MD5_DIGEST_SIZE);\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (MHD_SHA256_DIGEST_SIZE == SHA256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  mhd_assert (MHD_SHA512_256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (SHA256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#endif /* MHD_SHA512_256_SUPPORT */\n  /* Only one algorithm must be specified */\n  mhd_assert (1 == \\\n              (((0 != (algo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0)));\n#ifdef MHD_MD5_SUPPORT\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_MD5)))\n    return MHD_MD5_DIGEST_SIZE;\n  else\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) && defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ( ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)\n                | ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256))))\n    return MHD_SHA256_DIGEST_SIZE; /* The same as SHA512_256_DIGEST_SIZE */\n  else\n#elif defined(MHD_SHA256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)))\n    return MHD_SHA256_DIGEST_SIZE;\n  else\n#elif defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256)))\n    return MHD_SHA512_256_DIGEST_SIZE;\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n    (void) 0; /* Unsupported algorithm */\n\n  return 0; /* Wrong input or unsupported algorithm */\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'digest_get_hash_size': {'callees': [], 'callers': ['MHD_digest_get_hash_size', 'MHD_digest_auth_calc_userhash_hex', 'MHD_digest_auth_check_digest3']}, 'MHD_digest_get_hash_size': {'callees': ['digest_get_hash_size'], 'callers': ['find_entry_by_userhash']}, 'MHD_digest_auth_calc_userhash_hex': {'callees': ['digest_get_hash_size', 'MHD_digest_auth_calc_userhash', 'MHD_bin_to_hex_z'], 'callers': []}, 'MHD_digest_auth_check_digest3': {'callees': ['__builtin_unreachable', 'digest_get_hash_size', 'digest_auth_check_all'], 'callers': ['MHD_digest_auth_check_digest2', 'handle_sec_areas_req']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_static_inline",
    "mhd_assert",
    "enum MHD_DigestAuthAlgo3",
    "MHD_DIGEST_BASE_ALGO_MD5",
    "MHD_DIGEST_BASE_ALGO_SHA256",
    "MHD_DIGEST_BASE_ALGO_SHA512_256",
    "MHD_MD5_SUPPORT",
    "MHD_SHA256_SUPPORT",
    "MHD_SHA512_256_SUPPORT",
    "MHD_MD5_DIGEST_SIZE",
    "MD5_DIGEST_SIZE",
    "MHD_SHA256_DIGEST_SIZE",
    "SHA256_DIGEST_SIZE",
    "MHD_SHA512_256_DIGEST_SIZE",
    "SHA512_256_DIGEST_SIZE",
    "size_t"
  ],
  "explanation": "For checking whether the function uses any compiler/language extensions you must examine the actual definitions that could hide extensions or compiler-specific constructs:\n\n- _MHD_static_inline: This macro wraps the function storage-class/inline declaration. It may expand to compiler-specific keywords or attributes (e.g. __inline__, __attribute__((always_inline)), __forceinline, __declspec) \u2014 those are explicit language extensions and must be inspected.\n\n- mhd_assert: The assert implementation may use compiler builtins or extensions (e.g. __builtin_unreachable, __assert_fail, statement-expressions ({ ... }), or other compiler intrinsics). Its definition is required to see if an extension is invoked.\n\n- enum MHD_DigestAuthAlgo3: The enum/type definition is needed to ensure no nonstandard enum tricks are used (e.g. compiler-specific sized-enum extensions or unusual attributes) and to confirm the intended bitmask usage is standard C.\n\n- MHD_DIGEST_BASE_ALGO_MD5, MHD_DIGEST_BASE_ALGO_SHA256, MHD_DIGEST_BASE_ALGO_SHA512_256: These bitmask symbols may be macros or enum constants; their definitions are needed to confirm they are plain integer constants and not produced by extension constructs (e.g. use of GCC extension expressions).\n\n- MHD_MD5_SUPPORT, MHD_SHA256_SUPPORT, MHD_SHA512_256_SUPPORT: These preprocessor feature macros determine which code is compiled. To assess the actual compiled code (and whether any extension is present in a compiled branch) you must know which of these are defined.\n\n- MHD_MD5_DIGEST_SIZE, MD5_DIGEST_SIZE, MHD_SHA256_DIGEST_SIZE, SHA256_DIGEST_SIZE, MHD_SHA512_256_DIGEST_SIZE, SHA512_256_DIGEST_SIZE: The size constants/macros might themselves be defined using nonstandard constructs or macros that invoke extensions. Inspecting their definitions ensures no extension is hidden there.\n\n- size_t: Although standard, the typedef origin (stddef.h) is standard C; include/definition visibility ensures no project-specific replacement or compiler-size_t aliasing uses extensions. Checking it is trivial but included for completeness.\n\nProviding these symbols (their macro/enum/type definitions) lets the next analyser see exactly what the preprocessor expands to and whether any compiler-specific or nonstandard language extensions are used in the function or the symbols it relies on."
}