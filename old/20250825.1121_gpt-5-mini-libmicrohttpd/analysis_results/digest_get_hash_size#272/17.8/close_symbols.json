{
  "user_message": "Target function code is:\n```c\n_MHD_static_inline size_t\ndigest_get_hash_size (enum MHD_DigestAuthAlgo3 algo3)\n{\n#ifdef MHD_MD5_SUPPORT\n  mhd_assert (MHD_MD5_DIGEST_SIZE == MD5_DIGEST_SIZE);\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (MHD_SHA256_DIGEST_SIZE == SHA256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  mhd_assert (MHD_SHA512_256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#ifdef MHD_SHA256_SUPPORT\n  mhd_assert (SHA256_DIGEST_SIZE == SHA512_256_DIGEST_SIZE);\n#endif /* MHD_SHA256_SUPPORT */\n#endif /* MHD_SHA512_256_SUPPORT */\n  /* Only one algorithm must be specified */\n  mhd_assert (1 == \\\n              (((0 != (algo3 & MHD_DIGEST_BASE_ALGO_MD5)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA256)) ? 1 : 0)   \\\n               + ((0 != (algo3 & MHD_DIGEST_BASE_ALGO_SHA512_256)) ? 1 : 0)));\n#ifdef MHD_MD5_SUPPORT\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_MD5)))\n    return MHD_MD5_DIGEST_SIZE;\n  else\n#endif /* MHD_MD5_SUPPORT */\n#if defined(MHD_SHA256_SUPPORT) && defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ( ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)\n                | ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256))))\n    return MHD_SHA256_DIGEST_SIZE; /* The same as SHA512_256_DIGEST_SIZE */\n  else\n#elif defined(MHD_SHA256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA256)))\n    return MHD_SHA256_DIGEST_SIZE;\n  else\n#elif defined(MHD_SHA512_256_SUPPORT)\n  if (0 != (((unsigned int) algo3)\n            & ((unsigned int) MHD_DIGEST_BASE_ALGO_SHA512_256)))\n    return MHD_SHA512_256_DIGEST_SIZE;\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n    (void) 0; /* Unsupported algorithm */\n\n  return 0; /* Wrong input or unsupported algorithm */\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'digest_get_hash_size': {'callees': [], 'callers': ['MHD_digest_get_hash_size', 'MHD_digest_auth_calc_userhash_hex', 'MHD_digest_auth_check_digest3']}, 'MHD_digest_get_hash_size': {'callees': ['digest_get_hash_size'], 'callers': ['find_entry_by_userhash']}, 'MHD_digest_auth_calc_userhash_hex': {'callees': ['digest_get_hash_size', 'MHD_digest_auth_calc_userhash', 'MHD_bin_to_hex_z'], 'callers': []}, 'MHD_digest_auth_check_digest3': {'callees': ['__builtin_unreachable', 'digest_get_hash_size', 'digest_auth_check_all'], 'callers': ['MHD_digest_auth_check_digest2', 'handle_sec_areas_req']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_DigestAuthAlgo3",
    "MHD_DIGEST_BASE_ALGO_MD5",
    "MHD_DIGEST_BASE_ALGO_SHA256",
    "MHD_DIGEST_BASE_ALGO_SHA512_256",
    "MHD_MD5_DIGEST_SIZE",
    "MHD_SHA256_DIGEST_SIZE",
    "MHD_SHA512_256_DIGEST_SIZE",
    "MD5_DIGEST_SIZE",
    "SHA256_DIGEST_SIZE",
    "SHA512_256_DIGEST_SIZE",
    "mhd_assert",
    "MHD_MD5_SUPPORT",
    "MHD_SHA256_SUPPORT",
    "MHD_SHA512_256_SUPPORT"
  ],
  "explanation": "For checking MISRA rule \u201cA function parameter should not be modified\u201d we must be sure the parameter 'algo3' is never altered by any expression or macro expanded in the function. The following symbols are required and why:\n\n- MHD_DigestAuthAlgo3: definition of the enum type and its members. Needed to verify that 'algo3' is indeed a plain enum parameter (not e.g. a macro alias) and to inspect any unusual attributes or semantics that could affect modification.\n\n- MHD_DIGEST_BASE_ALGO_MD5, MHD_DIGEST_BASE_ALGO_SHA256, MHD_DIGEST_BASE_ALGO_SHA512_256: macro/constant definitions used in all bitwise tests. We must inspect their definitions to ensure they are simple compile-time constants and do not expand to expressions that could assign to or otherwise modify 'algo3' (e.g. macros with side effects).\n\n- MHD_MD5_DIGEST_SIZE, MHD_SHA256_DIGEST_SIZE, MHD_SHA512_256_DIGEST_SIZE: constants returned by the function. Include to ensure they are simple values and that any macros generating them do not have side effects that could alter 'algo3'.\n\n- MD5_DIGEST_SIZE, SHA256_DIGEST_SIZE, SHA512_256_DIGEST_SIZE: these are referenced inside mhd_assert comparisons. Their definitions must be checked to ensure no side effects when used inside assertions.\n\n- mhd_assert: macro or function used multiple times. We must know its expansion/implementation because assertions can be implemented as macros that evaluate expressions or even call functions; we need to confirm that evaluating the asserted expressions does not modify 'algo3' (for example, by hidden assignments or by taking its address and passing to a function that modifies it).\n\n- MHD_MD5_SUPPORT, MHD_SHA256_SUPPORT, MHD_SHA512_256_SUPPORT: configuration macros that control which code blocks are compiled. The presence/absence of these affects which branches (and which macros/returns) are active; to conclude the parameter is not modified in the actual build we must know which of these are defined.\n\nTogether these symbols let the analyzer expand all macros and conditional compilation in digest_get_hash_size and verify that every use of 'algo3' is purely read-only (casts, bitwise tests, comparisons) and that no macro or assertion hides modifications."
}