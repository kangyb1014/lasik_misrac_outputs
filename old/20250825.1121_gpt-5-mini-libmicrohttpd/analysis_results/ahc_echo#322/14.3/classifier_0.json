{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 14.3 is: Controlling expressions shall not be invariant.\nHere are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of ahc_echo:\n```c\nstatic enum MHD_Result\nahc_echo (void *cls,\n          struct MHD_Connection *connection,\n          const char *url,\n          const char *method,\n          const char *version,\n          const char *upload_data, size_t *upload_data_size, void **req_cls)\n{\n  static int aptr;\n  const char *val;\n  char *me;\n  struct MHD_Response *response;\n  enum MHD_Result ret;\n  int resp_len;\n  size_t buf_size;\n  (void) cls;               /* Unused. Silent compiler warning. */\n  (void) url;               /* Unused. Silent compiler warning. */\n  (void) version;           /* Unused. Silent compiler warning. */\n  (void) upload_data;       /* Unused. Silent compiler warning. */\n  (void) upload_data_size;  /* Unused. Silent compiler warning. */\n\n  if (0 != strcmp (method, \"GET\"))\n    return MHD_NO;              /* unexpected method */\n  if (&aptr != *req_cls)\n  {\n    /* do never respond on first call */\n    *req_cls = &aptr;\n    return MHD_YES;\n  }\n  *req_cls = NULL;  /* reset when done */\n  val = MHD_lookup_connection_value (connection, MHD_GET_ARGUMENT_KIND, \"q\");\n  if (NULL == val)\n    return MHD_NO;  /* No \"q\" argument was found */\n  resp_len = snprintf (NULL, 0, PAGE, \"q\", val);\n  if (0 >= resp_len)\n    return MHD_NO;  /* Error calculating response size */\n  buf_size = (size_t) resp_len + 1; /* Add one byte for zero-termination */\n  me = malloc (buf_size);\n  if (me == NULL)\n    return MHD_NO;  /* Error allocating memory */\n  if (resp_len != snprintf (me, buf_size, PAGE, \"q\", val))\n  {\n    free (me);\n    return MHD_NO;  /* Error forming the response body */\n  }\n  response =\n    MHD_create_response_from_buffer_with_free_callback (buf_size - 1,\n                                                        (void *) me,\n                                                        &free);\n  if (response == NULL)\n  {\n    free (me);\n    return MHD_NO;\n  }\n  ret = MHD_queue_response (connection, MHD_HTTP_OK, response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function ahc_echo:\n_MHD_EXTERN const char *\nMHD_lookup_connection_value (struct MHD_Connection *connection,\n                             enum MHD_ValueKind kind,\n                             const char *key)\n{\n  const char *value;\n\n  value = NULL;\n  (void) MHD_lookup_connection_value_n (connection,\n                                        kind,\n                                        key,\n                                        (NULL == key) ? 0 : strlen (key),\n                                        &value,\n                                        NULL);\n  return value;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (response == NULL)\n```\nFocus on the above code fragment and judge whether it violates the rule 14.3 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation. The controlling expression tests the value of 'response', which was assigned from the function call MHD_create_response_from_buffer_with_free_callback and can vary at runtime (e.g. NULL on allocation failure). The expression is not invariant."
}