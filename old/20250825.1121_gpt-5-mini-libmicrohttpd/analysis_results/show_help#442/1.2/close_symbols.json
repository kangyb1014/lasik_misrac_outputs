{
  "user_message": "Target function code is:\n```c\nstatic void\nshow_help (void)\n{\n  printf (\"Usage: %s [OPTIONS] [PORT_NUMBER]\\n\", self_name);\n  printf (\"Start MHD-based web-server optimised for fast replies.\\n\");\n  printf (\"\\n\");\n  printf (\"Threads options (mutually exclusive):\\n\");\n  printf (\"  -A,     --all-cpus        use all available CPU cores (for \\n\"\n          \"                            testing with remote client)\\n\");\n  printf (\"  -t NUM, --threads=NUM     use NUM threads\\n\");\n  printf (\"  -P,     --thread-per-conn use thread-per-connection mode,\\n\"\n          \"                            the number of threads are limited only\\n\"\n          \"                            by the number of connection\\n\");\n  printf (\"\\n\");\n  printf (\"Force polling function (mutually exclusive):\\n\");\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_EPOLL))\n    printf (\"  -e,     --epoll           use 'epoll' functionality\\n\");\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_POLL))\n    printf (\"  -p,     --poll            use poll() function\\n\");\n  printf (\"  -s,     --select          use select() function\\n\");\n  printf (\"\\n\");\n  printf (\"Response body size options (mutually exclusive):\\n\");\n  printf (\"  -E,     --empty           empty response, 0 bytes\\n\");\n  printf (\"  -T,     --tiny            tiny response, 3 bytes (default)\\n\");\n  printf (\"  -M,     --medium          medium response, 8 KB\\n\");\n  printf (\"  -L,     --large           large response, 1 MB\\n\");\n  printf (\"\\n\");\n  printf (\"Response use options (mutually exclusive):\\n\");\n  printf (\"  -S,     --shared          pool of pre-generated shared response\\n\"\n          \"                            objects (default)\\n\");\n  printf (\"  -I,     --single          single pre-generated response object\\n\"\n          \"                            used for all requests\\n\");\n  printf (\"  -U,     --unique          response object generated for every\\n\"\n          \"                            request and used one time only\\n\");\n  printf (\"\\n\");\n  printf (\"Other options:\\n\");\n  printf (\"  -c NUM, --connections=NUM reject more than NUM client \\n\"\n          \"                            connections\\n\");\n  printf (\"  -O NUM, --timeout=NUM     set connection timeout to NUM seconds,\\n\"\n          \"                            zero means no timeout\\n\");\n  printf (\"          --date-header     use the 'Date:' header in every\\n\"\n          \"                            reply\\n\");\n  printf (\"          --help            display this help and exit\\n\");\n  printf (\"  -V,     --version         output version information and exit\\n\");\n  printf (\"\\n\");\n  printf (\"This tool is part of GNU libmicrohttpd suite.\\n\");\n  printf (\"%s\\n\", tool_copyright);\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'show_help': {'callees': ['MHD_is_feature_supported'], 'callers': ['check_apply_params']}, 'MHD_is_feature_supported': {'callees': [], 'callers': ['show_help', 'check_param_port', 'check_param__epoll', 'check_param__poll', 'print_perf_warnings']}, 'check_apply_params': {'callees': ['show_help', 'print_version', 'check_param_port', 'check_apply_param__all_cpus', 'check_apply_param__threads', 'check_apply_param__thread_per_conn', 'check_param__epoll', 'check_param__poll', 'check_param__empty_tiny_medium_large', 'check_param__shared_single_unique', 'check_param__connections'], 'callers': ['main']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_is_feature_supported",
    "MHD_NO",
    "MHD_FEATURE_EPOLL",
    "MHD_FEATURE_POLL",
    "printf",
    "self_name",
    "tool_copyright"
  ],
  "explanation": "MHD_is_feature_supported \u2014 needed because it may be a macro (or inline/extern function) that itself uses compiler extensions (e.g. statement-expressions, typeof, GCC __extension__ or attributes). You must inspect its definition to decide if the call in show_help relies on any language extension.\nMHD_NO \u2014 needed because this token may be a macro or enum value; its definition could use non-standard constructs or macros that are compiler-specific.\nMHD_FEATURE_EPOLL \u2014 needed because these feature constants may be macros or typedefs that expand to expressions or use extensions; their definitions determine whether the comparisons use only standard C.\nMHD_FEATURE_POLL \u2014 same reason as MHD_FEATURE_EPOLL.\nprintf \u2014 required because printf can be a macro or have a nonstandard declaration (attributes, variadic-macro wrappers, or other extensions). Inspecting its prototype/macros in the translation unit/headers ensures no language extensions are used in the calls.\nself_name \u2014 required because it is an identifier referenced in the function; its definition (type, storage, initializer) could involve extensions (nonstandard string literal attributes, compound literals, GCC attributes, or nonstandard linkage).\ntool_copyright \u2014 required because it is used in a printf; its declaration/definition might use extensions (e.g. const-qualified hacks, macros, or attributes) that would make the use in show_help rely on language extensions.\n\nIn short: to conclude whether show_help violates the MISRA prohibition on language extensions you must inspect the definitions/declarations of all external identifiers and macros used in the function (the list above) to ensure none introduce compiler-specific/extension constructs."
}