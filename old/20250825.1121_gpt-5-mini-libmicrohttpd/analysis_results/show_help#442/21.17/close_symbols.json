{
  "user_message": "Target function code is:\n```c\nstatic void\nshow_help (void)\n{\n  printf (\"Usage: %s [OPTIONS] [PORT_NUMBER]\\n\", self_name);\n  printf (\"Start MHD-based web-server optimised for fast replies.\\n\");\n  printf (\"\\n\");\n  printf (\"Threads options (mutually exclusive):\\n\");\n  printf (\"  -A,     --all-cpus        use all available CPU cores (for \\n\"\n          \"                            testing with remote client)\\n\");\n  printf (\"  -t NUM, --threads=NUM     use NUM threads\\n\");\n  printf (\"  -P,     --thread-per-conn use thread-per-connection mode,\\n\"\n          \"                            the number of threads are limited only\\n\"\n          \"                            by the number of connection\\n\");\n  printf (\"\\n\");\n  printf (\"Force polling function (mutually exclusive):\\n\");\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_EPOLL))\n    printf (\"  -e,     --epoll           use 'epoll' functionality\\n\");\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_POLL))\n    printf (\"  -p,     --poll            use poll() function\\n\");\n  printf (\"  -s,     --select          use select() function\\n\");\n  printf (\"\\n\");\n  printf (\"Response body size options (mutually exclusive):\\n\");\n  printf (\"  -E,     --empty           empty response, 0 bytes\\n\");\n  printf (\"  -T,     --tiny            tiny response, 3 bytes (default)\\n\");\n  printf (\"  -M,     --medium          medium response, 8 KB\\n\");\n  printf (\"  -L,     --large           large response, 1 MB\\n\");\n  printf (\"\\n\");\n  printf (\"Response use options (mutually exclusive):\\n\");\n  printf (\"  -S,     --shared          pool of pre-generated shared response\\n\"\n          \"                            objects (default)\\n\");\n  printf (\"  -I,     --single          single pre-generated response object\\n\"\n          \"                            used for all requests\\n\");\n  printf (\"  -U,     --unique          response object generated for every\\n\"\n          \"                            request and used one time only\\n\");\n  printf (\"\\n\");\n  printf (\"Other options:\\n\");\n  printf (\"  -c NUM, --connections=NUM reject more than NUM client \\n\"\n          \"                            connections\\n\");\n  printf (\"  -O NUM, --timeout=NUM     set connection timeout to NUM seconds,\\n\"\n          \"                            zero means no timeout\\n\");\n  printf (\"          --date-header     use the 'Date:' header in every\\n\"\n          \"                            reply\\n\");\n  printf (\"          --help            display this help and exit\\n\");\n  printf (\"  -V,     --version         output version information and exit\\n\");\n  printf (\"\\n\");\n  printf (\"This tool is part of GNU libmicrohttpd suite.\\n\");\n  printf (\"%s\\n\", tool_copyright);\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'show_help': {'callees': ['MHD_is_feature_supported'], 'callers': ['check_apply_params']}, 'MHD_is_feature_supported': {'callees': [], 'callers': ['show_help', 'check_param_port', 'check_param__epoll', 'check_param__poll', 'print_perf_warnings']}, 'check_apply_params': {'callees': ['show_help', 'print_version', 'check_param_port', 'check_apply_param__all_cpus', 'check_apply_param__threads', 'check_apply_param__thread_per_conn', 'check_param__epoll', 'check_param__poll', 'check_param__empty_tiny_medium_large', 'check_param__shared_single_unique', 'check_param__connections'], 'callers': ['main']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nUse of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters. This rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "printf",
    "self_name",
    "tool_copyright",
    "MHD_is_feature_supported",
    "MHD_NO",
    "MHD_FEATURE_EPOLL",
    "MHD_FEATURE_POLL"
  ],
  "explanation": "Reasoning for each symbol (why the analyzing agent needs it to decide MISRA <string.h> bounds safety for show_help):\n\n- printf\n  - show_help uses printf extensively with %s format specifiers. To determine whether any string access could read beyond object bounds you must inspect printf usage sites and ensure the arguments supplied are valid NUL-terminated objects of appropriate lifetime. Although printf itself is not in <string.h>, it reads strings passed via %s; verifying its prototype and semantics helps reason about how arguments are consumed.\n\n- self_name\n  - This identifier is passed to printf(\"Usage: %s ...\", self_name). You must know its type, storage duration, and guarantee of NUL-termination (and that the pointer does not point past the end of an object). If self_name could be non-terminated or out-of-bounds, a %s read could access beyond object bounds (even if no <string.h> function is directly used in this function).\n\n- tool_copyright\n  - Passed to printf(\"%s\\n\", ...). Same rationale as for self_name: need its definition (type, lifetime, guaranteed termination and bounds) to ensure printf will not read past the referenced object.\n\n- MHD_is_feature_supported\n  - show_help calls this function in conditions that gate printing of additional strings. While MHD_is_feature_supported is a callee (not a <string.h> function), you need its declaration/definition to confirm it does not expand as a macro that could inline or call string.h functions affecting show_help\u2019s observable behavior, and to be sure its return type/semantics cannot cause other code paths in show_help to introduce string-handling/bounds issues.\n\n- MHD_NO\n  - The comparison constant used with MHD_is_feature_supported return value. Knowing its value/type ensures the conditional logic is evaluated as intended (which lines are printed). This matters because different printed strings or code paths could alter which string objects are read; you must examine all enabled print paths.\n\n- MHD_FEATURE_EPOLL and MHD_FEATURE_POLL\n  - These constants are passed into MHD_is_feature_supported. Their definitions may be macros/enums; you need them to fully understand the behavior of MHD_is_feature_supported (i.e., which branches execute) and to confirm they do not themselves expand into expressions that use string.h functions or pointer arithmetic that could affect bounds reasoning.\n\nOverall note: show_help does not call any functions from <string.h> directly. The main concerns for the MISRA <string.h> bounds rule when analyzing show_help are (a) ensuring the strings passed to printf (self_name, tool_copyright, and the format literals) are valid NUL-terminated objects within bounds, and (b) confirming that any macros or callees (notably MHD_is_feature_supported and the feature constants) do not expand into or cause execution of <string.h> functions or pointer operations that would make show_help itself rely on or cause out-of-bounds string accesses. Providing the above symbols (declarations/definitions) lets the next analyzer confirm those points."
}