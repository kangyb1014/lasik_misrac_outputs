{
  "user_message": "Target function code is:\n```c\nstatic void\nshow_help (void)\n{\n  printf (\"Usage: %s [OPTIONS] [PORT_NUMBER]\\n\", self_name);\n  printf (\"Start MHD-based web-server optimised for fast replies.\\n\");\n  printf (\"\\n\");\n  printf (\"Threads options (mutually exclusive):\\n\");\n  printf (\"  -A,     --all-cpus        use all available CPU cores (for \\n\"\n          \"                            testing with remote client)\\n\");\n  printf (\"  -t NUM, --threads=NUM     use NUM threads\\n\");\n  printf (\"  -P,     --thread-per-conn use thread-per-connection mode,\\n\"\n          \"                            the number of threads are limited only\\n\"\n          \"                            by the number of connection\\n\");\n  printf (\"\\n\");\n  printf (\"Force polling function (mutually exclusive):\\n\");\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_EPOLL))\n    printf (\"  -e,     --epoll           use 'epoll' functionality\\n\");\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_POLL))\n    printf (\"  -p,     --poll            use poll() function\\n\");\n  printf (\"  -s,     --select          use select() function\\n\");\n  printf (\"\\n\");\n  printf (\"Response body size options (mutually exclusive):\\n\");\n  printf (\"  -E,     --empty           empty response, 0 bytes\\n\");\n  printf (\"  -T,     --tiny            tiny response, 3 bytes (default)\\n\");\n  printf (\"  -M,     --medium          medium response, 8 KB\\n\");\n  printf (\"  -L,     --large           large response, 1 MB\\n\");\n  printf (\"\\n\");\n  printf (\"Response use options (mutually exclusive):\\n\");\n  printf (\"  -S,     --shared          pool of pre-generated shared response\\n\"\n          \"                            objects (default)\\n\");\n  printf (\"  -I,     --single          single pre-generated response object\\n\"\n          \"                            used for all requests\\n\");\n  printf (\"  -U,     --unique          response object generated for every\\n\"\n          \"                            request and used one time only\\n\");\n  printf (\"\\n\");\n  printf (\"Other options:\\n\");\n  printf (\"  -c NUM, --connections=NUM reject more than NUM client \\n\"\n          \"                            connections\\n\");\n  printf (\"  -O NUM, --timeout=NUM     set connection timeout to NUM seconds,\\n\"\n          \"                            zero means no timeout\\n\");\n  printf (\"          --date-header     use the 'Date:' header in every\\n\"\n          \"                            reply\\n\");\n  printf (\"          --help            display this help and exit\\n\");\n  printf (\"  -V,     --version         output version information and exit\\n\");\n  printf (\"\\n\");\n  printf (\"This tool is part of GNU libmicrohttpd suite.\\n\");\n  printf (\"%s\\n\", tool_copyright);\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'show_help': {'callees': ['MHD_is_feature_supported'], 'callers': ['check_apply_params']}, 'MHD_is_feature_supported': {'callees': [], 'callers': ['show_help', 'check_param_port', 'check_param__epoll', 'check_param__poll', 'print_perf_warnings']}, 'check_apply_params': {'callees': ['show_help', 'print_version', 'check_param_port', 'check_apply_param__all_cpus', 'check_apply_param__threads', 'check_apply_param__thread_per_conn', 'check_param__epoll', 'check_param__poll', 'check_param__empty_tiny_medium_large', 'check_param__shared_single_unique', 'check_param__connections'], 'callers': ['main']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA pointer should point to a const-qualified type whenever possible. \nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "self_name",
    "tool_copyright",
    "printf",
    "MHD_is_feature_supported",
    "MHD_NO",
    "MHD_FEATURE_EPOLL",
    "MHD_FEATURE_POLL",
    "check_apply_params",
    "main"
  ],
  "explanation": "For checking the MISRA rule \"A pointer should point to a const-qualified type whenever possible\" in show_help, we need the following additional symbols and why:\n\n- self_name: Declaration (type and qualifiers) and all definitions/uses. show_help passes this to printf as a \"%s\" argument. To decide if it should be const char * (and thus whether the current declaration violates the rule) we must know its actual type and whether any code modifies it.\n\n- tool_copyright: Same as self_name. It is passed to printf and we must know its declaration/qualifiers and any write sites to determine whether it can/should be const.\n\n- printf: Prototype (from <stdio.h>). The parameter types (format string as const char *) confirm the direction of the argument; this is needed to reason about whether passing a non-const pointer to printf is acceptable and whether the pointer could/should be const-qualified.\n\n- MHD_is_feature_supported: Prototype/return type. Although this API does not appear to involve pointer parameters here, knowing its signature and return type ensures the conditional expressions are not hiding pointer usage that affects const qualification analysis.\n\n- MHD_NO, MHD_FEATURE_EPOLL, MHD_FEATURE_POLL: Definitions/types of these macros/constants to confirm they are non-pointer integer/enum values and do not affect pointer const-qualification. This rules out hidden pointer-related behavior.\n\n- check_apply_params: Definition and uses. This caller may initialize or modify globals such as self_name or tool_copyright prior to show_help being called; we must inspect it to determine if those globals are modified (which would prevent making them const).\n\n- main: Definition. The entry point or other initialisation code may set or modify the globals; include it to locate any assignments or lifetime/ownership patterns that affect whether those globals can be const.\n\nIn short: to determine whether show_help violates the MISRA pointer-const rule we primarily need the declarations and all mutation sites for the string variables passed to printf (self_name and tool_copyright), the printf prototype for parameter constness, and the few MHD API/constants used in conditionals to ensure they introduce no pointer semantics. Including check_apply_params and main lets the analyzer find whether those globals are ever modified (which would justify them being non-const)."
}