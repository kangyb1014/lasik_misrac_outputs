{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of show_help:\n```c\nstatic void\nshow_help (void)\n{\n  printf (\"Usage: %s [OPTIONS] [PORT_NUMBER]\\n\", self_name);\n  printf (\"Start MHD-based web-server optimised for fast replies.\\n\");\n  printf (\"\\n\");\n  printf (\"Threads options (mutually exclusive):\\n\");\n  printf (\"  -A,     --all-cpus        use all available CPU cores (for \\n\"\n          \"                            testing with remote client)\\n\");\n  printf (\"  -t NUM, --threads=NUM     use NUM threads\\n\");\n  printf (\"  -P,     --thread-per-conn use thread-per-connection mode,\\n\"\n          \"                            the number of threads are limited only\\n\"\n          \"                            by the number of connection\\n\");\n  printf (\"\\n\");\n  printf (\"Force polling function (mutually exclusive):\\n\");\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_EPOLL))\n    printf (\"  -e,     --epoll           use 'epoll' functionality\\n\");\n  if (MHD_NO != MHD_is_feature_supported (MHD_FEATURE_POLL))\n    printf (\"  -p,     --poll            use poll() function\\n\");\n  printf (\"  -s,     --select          use select() function\\n\");\n  printf (\"\\n\");\n  printf (\"Response body size options (mutually exclusive):\\n\");\n  printf (\"  -E,     --empty           empty response, 0 bytes\\n\");\n  printf (\"  -T,     --tiny            tiny response, 3 bytes (default)\\n\");\n  printf (\"  -M,     --medium          medium response, 8 KB\\n\");\n  printf (\"  -L,     --large           large response, 1 MB\\n\");\n  printf (\"\\n\");\n  printf (\"Response use options (mutually exclusive):\\n\");\n  printf (\"  -S,     --shared          pool of pre-generated shared response\\n\"\n          \"                            objects (default)\\n\");\n  printf (\"  -I,     --single          single pre-generated response object\\n\"\n          \"                            used for all requests\\n\");\n  printf (\"  -U,     --unique          response object generated for every\\n\"\n          \"                            request and used one time only\\n\");\n  printf (\"\\n\");\n  printf (\"Other options:\\n\");\n  printf (\"  -c NUM, --connections=NUM reject more than NUM client \\n\"\n          \"                            connections\\n\");\n  printf (\"  -O NUM, --timeout=NUM     set connection timeout to NUM seconds,\\n\"\n          \"                            zero means no timeout\\n\");\n  printf (\"          --date-header     use the 'Date:' header in every\\n\"\n          \"                            reply\\n\");\n  printf (\"          --help            display this help and exit\\n\");\n  printf (\"  -V,     --version         output version information and exit\\n\");\n  printf (\"\\n\");\n  printf (\"This tool is part of GNU libmicrohttpd suite.\\n\");\n  printf (\"%s\\n\", tool_copyright);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function show_help:\nstatic char self_name[500] = \"perf_replies\"\n...\nstatic const char *const tool_copyright =\n  \"Copyright (C) 2023 Evgeny Grin (Karlson2k)\"\n...\n_MHD_EXTERN enum MHD_Result\nMHD_is_feature_supported (enum MHD_FEATURE feature)\n{\n  switch (feature)\n  {\n  case MHD_FEATURE_MESSAGES:\n#ifdef HAVE_MESSAGES\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_TLS:\n#ifdef HTTPS_SUPPORT\n    return MHD_YES;\n#else  /* ! HTTPS_SUPPORT */\n    return MHD_NO;\n#endif  /* ! HTTPS_SUPPORT */\n  case MHD_FEATURE_HTTPS_CERT_CALLBACK:\n#if defined(HTTPS_SUPPORT) && GNUTLS_VERSION_MAJOR >= 3\n    return MHD_YES;\n#else  /* !HTTPS_SUPPORT || GNUTLS_VERSION_MAJOR < 3 */\n    return MHD_NO;\n#endif /* !HTTPS_SUPPORT || GNUTLS_VERSION_MAJOR < 3 */\n  case MHD_FEATURE_HTTPS_CERT_CALLBACK2:\n#if defined(HTTPS_SUPPORT) && GNUTLS_VERSION_NUMBER >= 0x030603\n    return MHD_YES;\n#else  /* !HTTPS_SUPPORT || GNUTLS_VERSION_NUMBER < 0x030603 */\n    return MHD_NO;\n#endif /* !HTTPS_SUPPORT || GNUTLS_VERSION_NUMBER < 0x030603 */\n  case MHD_FEATURE_IPv6:\n#ifdef HAVE_INET6\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_IPv6_ONLY:\n#if defined(IPPROTO_IPV6) && defined(IPV6_V6ONLY)\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_POLL:\n#ifdef HAVE_POLL\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_EPOLL:\n#ifdef EPOLL_SUPPORT\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_SHUTDOWN_LISTEN_SOCKET:\n#ifdef HAVE_LISTEN_SHUTDOWN\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_SOCKETPAIR:\n#ifdef _MHD_ITC_SOCKETPAIR\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_TCP_FASTOPEN:\n#ifdef TCP_FASTOPEN\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_BASIC_AUTH:\n#ifdef BAUTH_SUPPORT\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_DIGEST_AUTH:\n#ifdef DAUTH_SUPPORT\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_POSTPROCESSOR:\n#ifdef HAVE_POSTPROCESSOR\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_HTTPS_KEY_PASSWORD:\n#if defined(HTTPS_SUPPORT) && GNUTLS_VERSION_NUMBER >= 0x030111\n    return MHD_YES;\n#else  /* !HTTPS_SUPPORT || GNUTLS_VERSION_NUMBER < 0x030111 */\n    return MHD_NO;\n#endif /* !HTTPS_SUPPORT || GNUTLS_VERSION_NUMBER < 0x030111 */\n  case MHD_FEATURE_LARGE_FILE:\n#if defined(HAVE_PREAD64) || defined(_WIN32)\n    return MHD_YES;\n#elif defined(HAVE_PREAD)\n    return (sizeof(uint64_t) > sizeof(off_t)) ? MHD_NO : MHD_YES;\n#elif defined(HAVE_LSEEK64)\n    return MHD_YES;\n#else\n    return (sizeof(uint64_t) > sizeof(off_t)) ? MHD_NO : MHD_YES;\n#endif\n  case MHD_FEATURE_THREAD_NAMES:\n#if defined(MHD_USE_THREAD_NAME_)\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_UPGRADE:\n#if defined(UPGRADE_SUPPORT)\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_RESPONSES_SHARED_FD:\n#if defined(HAVE_PREAD64) || defined(HAVE_PREAD) || defined(_WIN32)\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_AUTODETECT_BIND_PORT:\n#ifdef MHD_USE_GETSOCKNAME\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_AUTOSUPPRESS_SIGPIPE:\n#if defined(MHD_SEND_SPIPE_SUPPRESS_POSSIBLE) || \\\n    ! defined(MHD_SEND_SPIPE_SUPPRESS_NEEDED)\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_SENDFILE:\n#ifdef _MHD_HAVE_SENDFILE\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_THREADS:\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_HTTPS_COOKIE_PARSING:\n#if defined(COOKIE_SUPPORT)\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_DIGEST_AUTH_RFC2069:\n#ifdef DAUTH_SUPPORT\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_DIGEST_AUTH_MD5:\n#if defined(DAUTH_SUPPORT) && defined(MHD_MD5_SUPPORT)\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_DIGEST_AUTH_SHA256:\n#if defined(DAUTH_SUPPORT) && defined(MHD_SHA256_SUPPORT)\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_DIGEST_AUTH_SHA512_256:\n#if defined(DAUTH_SUPPORT) && defined(MHD_SHA512_256_SUPPORT)\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_DIGEST_AUTH_AUTH_INT:\n#ifdef DAUTH_SUPPORT\n    return MHD_NO;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_DIGEST_AUTH_ALGO_SESSION:\n#ifdef DAUTH_SUPPORT\n    return MHD_NO;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_DIGEST_AUTH_USERHASH:\n#ifdef DAUTH_SUPPORT\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_EXTERN_HASH:\n#if defined(MHD_MD5_TLSLIB) || defined(MHD_SHA256_TLSLIB)\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_DEBUG_BUILD:\n#ifdef _DEBUG\n    return MHD_YES;\n#else\n    return MHD_NO;\n#endif\n  case MHD_FEATURE_FLEXIBLE_FD_SETSIZE:\n#ifdef HAS_FD_SETSIZE_OVERRIDABLE\n    return MHD_YES;\n#else  /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n    return MHD_NO;\n#endif /* ! HAS_FD_SETSIZE_OVERRIDABLE */\n\n  default:\n    break;\n  }\n  return MHD_NO;\n}\n...\nstatic int\ncheck_apply_params (void)\n{\n  if (tool_params.help)\n  {\n    show_help ();\n    return -1;\n  }\n  else if (tool_params.version)\n  {\n    print_version ();\n    return -1;\n  }\n  check_param_port ();\n  check_apply_param__all_cpus ();\n  check_apply_param__threads ();\n  if (! check_apply_param__thread_per_conn ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  if (! check_param__epoll ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  if (! check_param__poll ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  check_param__empty_tiny_medium_large ();\n  check_param__shared_single_unique ();\n  if (! check_param__connections ())\n    return PERF_RPL_ERR_CODE_BAD_PARAM;\n  return 0;\n}\n...\nint\nmain (int argc, char *const *argv)\n{\n  int ret;\n  set_self_name (argc, argv);\n  ret = process_params (argc, argv);\n  if (0 != ret)\n    return ret;\n  ret = check_apply_params ();\n  if (0 > ret)\n    return 0;\n  if (0 != ret)\n    return ret;\n  ret = init_data ();\n  if (0 != ret)\n    return ret;\n  ret = run_mhd ();\n  deinit_data ();\n  return ret;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "printf (\"Usage: %s [OPTIONS] [PORT_NUMBER]\\n\", self_name);",
    "set_self_name (argc, argv);",
    "ret = process_params (argc, argv);",
    "int\nmain (int argc, char *const *argv)",
    "static char self_name[500] = \"perf_replies\""
  ],
  "explanation": "I flagged places where non-const character data or non-const pointer-to-character data is declared or passed: these are potential violations of the guidance that pointers should point to const-qualified types when possible. Other fragments in the provided code do not need investigation for Rule 8.13 because they already use const-qualified string data or do not involve pointer-to-character types: for example, tool_copyright is declared as static const char *const (already const-qualified), all printf format strings and multi-line string literals are string literals (effectively const), calls and tests involving MHD_is_feature_supported use enum return values (not pointers), and other function prototypes/returns shown are not pointer-to-non-const-character uses relevant to Rule 8.13. Therefore those other fragments are not suspicious for this specific rule."
}