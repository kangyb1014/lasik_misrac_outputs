{
  "user_message": "An agent A claimed that the following MHD_get_response_header code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_response_header.\n```c\n_MHD_EXTERN const char *\nMHD_get_response_header (struct MHD_Response *response,\n                         const char *key)\n{\n  struct MHD_HTTP_Res_Header *pos;\n  size_t key_size;\n\n  if (NULL == key)\n    return NULL;\n\n  key_size = strlen (key);\n  for (pos = response->first_header;\n       NULL != pos;\n       pos = pos->next)\n  {\n    if ((pos->header_size == key_size) &&\n        (MHD_str_equal_caseless_bin_n_ (pos->header, key, pos->header_size)))\n      return pos->value;\n  }\n  return NULL;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nCalling MHD_get_response_header with a non-NULL, non\u2013NUL-terminated buffer (or a pointer into the tail of a buffer that has no terminating '\\0') will cause strlen(key) to read past the bounds of the object. Example: char buf[3] = {'a','b','c'}; MHD_get_response_header(resp, buf); strlen will scan beyond buf until a '\\0' is found, potentially accessing out-of-bounds memory.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The call to strlen(key) can read beyond the bounds of the object pointed to by key if the caller supplies a non\u2013NUL-terminated buffer (or a pointer into the tail of a buffer that does not contain a terminating '\\0'). Checking only for NULL does not prevent strlen from scanning out of bounds. MISRA C:2023 Rule 21.17 requires that uses of <string.h> functions must not result in out-of-bounds accesses unless the code can guarantee the pointed-to object is a NUL-terminated string. The function does not validate or otherwise guarantee that precondition, so as written it can violate 21.17. (To comply, the implementation must either ensure/require that key is a valid NUL-terminated string via its API contract documented and enforced, or use a bounded string routine or pass/obtain an explicit length and avoid unbounded strlen.)"
}