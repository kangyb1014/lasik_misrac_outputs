{
  "user_message": "An agent A claimed that the following MHD_create_response_from_buffer_copy code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_create_response_from_buffer_copy.\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_buffer_copy (size_t size,\n                                      const void *buffer)\n{\n  struct MHD_Response *r;\n  void *mhd_copy;\n\n  if (0 == size)\n    return MHD_create_response_from_buffer_with_free_callback_cls (0,\n                                                                   NULL,\n                                                                   NULL,\n                                                                   NULL);\n  if (NULL == buffer)\n    return NULL;\n\n  mhd_copy = malloc (size);\n  if (NULL == mhd_copy)\n    return NULL;\n  memcpy (mhd_copy, buffer, size);\n\n  r = MHD_create_response_from_buffer_with_free_callback_cls (size,\n                                                              mhd_copy,\n                                                              &free,\n                                                              mhd_copy);\n  if (NULL == r)\n    free (mhd_copy);\n  else\n  {\n    /* TODO: remove the next assignment, the buffer should not be modifiable */\n    r->data_buffer_size = size;\n  }\n\n  return r;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local variable mhd_copy is declared as void * and is passed into MHD_create_response_from_buffer_with_free_callback_cls as a modifiable pointer even though the copied buffer is intended to be read-only (see the TODO comment stating the buffer should not be modifiable). Per MISRA C 2023 Rule 8.13, the pointer should point to a const-qualified type whenever possible \u2014 here mhd_copy (and the called function's buffer parameter) could and should be const-qualified (e.g. const void *) to reflect that the buffer is not to be modified. The current fragment therefore violates the rule.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. mhd_copy is used as the destination of memcpy (the code writes into the allocated buffer) and is later passed to the response as an owned, freeable block. Because the pointed-to object is actually modified (memcpy writes into it) and must be freed via an API that expects a non-const pointer, it is not possible to declare mhd_copy as pointing to a const-qualified type without changing the code (and without introducing casts that discard qualifiers). MISRA 8.13 requires const qualification only when possible \u2014 here it is not. The TODO about the buffer being non-modifiable refers to a design change, but as written the code does modify the buffer, so no 8.13 violation exists."
}