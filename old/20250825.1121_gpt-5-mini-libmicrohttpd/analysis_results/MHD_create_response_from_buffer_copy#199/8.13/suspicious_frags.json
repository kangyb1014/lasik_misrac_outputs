{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_create_response_from_buffer_copy:\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_buffer_copy (size_t size,\n                                      const void *buffer)\n{\n  struct MHD_Response *r;\n  void *mhd_copy;\n\n  if (0 == size)\n    return MHD_create_response_from_buffer_with_free_callback_cls (0,\n                                                                   NULL,\n                                                                   NULL,\n                                                                   NULL);\n  if (NULL == buffer)\n    return NULL;\n\n  mhd_copy = malloc (size);\n  if (NULL == mhd_copy)\n    return NULL;\n  memcpy (mhd_copy, buffer, size);\n\n  r = MHD_create_response_from_buffer_with_free_callback_cls (size,\n                                                              mhd_copy,\n                                                              &free,\n                                                              mhd_copy);\n  if (NULL == r)\n    free (mhd_copy);\n  else\n  {\n    /* TODO: remove the next assignment, the buffer should not be modifiable */\n    r->data_buffer_size = size;\n  }\n\n  return r;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "/* TODO: remove the next assignment, the buffer should not be modifiable */\n    r->data_buffer_size = size;",
    "r = MHD_create_response_from_buffer_with_free_callback_cls (size,\n                                                              mhd_copy,\n                                                              &free,\n                                                              mhd_copy);",
    "void *mhd_copy;",
    "mhd_copy = malloc (size);",
    "memcpy (mhd_copy, buffer, size);"
  ],
  "explanation": "Other code fragments do not need investigation for Rule 8.13 because they either already use const where appropriate or do not involve pointer-to-object types that could/should be const-qualified. Specifically:\n- The function parameter is declared as const void *buffer (already const-qualified).\n- NULL and size checks and the early return paths do not involve pointer types whose pointed-to objects could be const-qualified.\n- The initial call for size==0 passes NULL pointers, so there is no pointer-to-object to consider for const qualification there.\n- Use of memcpy to copy from a const source to an allocated destination is expected; only the destination pointer's const qualification is under question and has been included among the suspicious fragments.\n- The free callback usage and allocation/free pairing imply the buffer is intended to be freed, which typically requires a non-const void*; this contextual issue is captured by the reported fragments. Other statements (returns, NULL checks) do not present additional const-qualification concerns under Rule 8.13."
}