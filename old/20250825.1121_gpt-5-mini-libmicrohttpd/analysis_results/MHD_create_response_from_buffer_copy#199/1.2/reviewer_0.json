{
  "user_message": "An agent A claimed that the following MHD_create_response_from_buffer_copy code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_create_response_from_buffer_copy.\n```c\n_MHD_EXTERN struct MHD_Response *\nMHD_create_response_from_buffer_copy (size_t size,\n                                      const void *buffer)\n{\n  struct MHD_Response *r;\n  void *mhd_copy;\n\n  if (0 == size)\n    return MHD_create_response_from_buffer_with_free_callback_cls (0,\n                                                                   NULL,\n                                                                   NULL,\n                                                                   NULL);\n  if (NULL == buffer)\n    return NULL;\n\n  mhd_copy = malloc (size);\n  if (NULL == mhd_copy)\n    return NULL;\n  memcpy (mhd_copy, buffer, size);\n\n  r = MHD_create_response_from_buffer_with_free_callback_cls (size,\n                                                              mhd_copy,\n                                                              &free,\n                                                              mhd_copy);\n  if (NULL == r)\n    free (mhd_copy);\n  else\n  {\n    /* TODO: remove the next assignment, the buffer should not be modifiable */\n    r->data_buffer_size = size;\n  }\n\n  return r;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe identifier _MHD_EXTERN expands to __attribute__((visibility(\"default\")))extern which uses GCC's __attribute__ extension (attribute((visibility))) \u2014 a compiler-specific language extension. This violates MISRA C 2023 Rule 1.2 because a non-standard compiler attribute is used in the declaration of MHD_create_response_from_buffer_copy.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_create_response_from_buffer_copy:\n#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The provided macro definition (#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern) expands to the GCC-specific __attribute__((visibility(\"default\"))) construct, which is a compiler language extension (documented as such in GCC documentation). MISRA C 2023 Rule 1.2 prohibits use of language extensions unless they are not actually used or are guarded/conditioned appropriately. In the shown code the attribute is directly used in the function declaration, so this is a violation of Rule 1.2. (Note: if the macro were conditionally defined to an empty token sequence on non-GCC compilers, or replaced by a standard-conforming alternative, the violation could be avoided.)"
}