{
  "user_message": "Target function code is:\n```c\nstatic void *\nrun_usock (void *cls)\n{\n  struct WsData *ws = cls;\n  struct MHD_UpgradeResponseHandle *urh = ws->urh;\n  unsigned char buf[2048];\n  unsigned char *msg;\n  char *text;\n  ssize_t got;\n  int type;\n  int i;\n\n  make_blocking (ws->sock);\n  while (1)\n  {\n    got = recv (ws->sock, (void *) buf, sizeof (buf), 0);\n    if (0 >= got)\n    {\n      break;\n    }\n    msg = ws_receive_frame (buf, &got, &type);\n    if (NULL == msg)\n    {\n      break;\n    }\n    if (type == WS_OPCODE_TEXT_FRAME)\n    {\n      ssize_t sent;\n      int buf_size;\n      buf_size = snprintf (NULL, 0, \"User#%d: %s\", (int) ws->sock, msg);\n      if (0 < buf_size)\n      {\n        text = malloc ((size_t) buf_size + 1);\n        if (NULL != text)\n        {\n          if (snprintf (text, (size_t) buf_size + 1,\n                        \"User#%d: %s\", (int) ws->sock, msg) == buf_size)\n            sent = ws_send_frame (ws->sock, text, (size_t) buf_size);\n          else\n            sent = -1;\n          free (text);\n        }\n        else\n          sent = -1;\n      }\n      else\n        sent = -1;\n      free (msg);\n      if (-1 == sent)\n      {\n        break;\n      }\n    }\n    else\n    {\n      if (type == WS_OPCODE_CON_CLOSE_FRAME)\n      {\n        free (msg);\n        break;\n      }\n    }\n  }\n  if (0 != pthread_mutex_lock (&MUTEX))\n    abort ();\n  for (i = 0; i < MAX_CLIENTS; i++)\n  {\n    if (CLIENT_SOCKS[i] == ws->sock)\n    {\n      CLIENT_SOCKS[i] = MHD_INVALID_SOCKET;\n      break;\n    }\n  }\n  if (0 != pthread_mutex_unlock (&MUTEX))\n    abort ();\n  free (ws);\n  MHD_upgrade_action (urh, MHD_UPGRADE_ACTION_CLOSE);\n  return NULL;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'run_usock': {'callees': ['make_blocking', 'send_all', 'MHD_upgrade_action', 'ws_receive_frame', 'ws_send_frame'], 'callers': []}, 'make_blocking': {'callees': [], 'callers': ['send_all', 'run_usock']}, 'send_all': {'callees': ['make_blocking'], 'callers': ['run_usock', 'ws_send_frame']}, 'MHD_upgrade_action': {'callees': ['MHD_upgraded_connection_mark_app_closed_'], 'callers': ['run_usock', 'uh_cb']}, 'ws_receive_frame': {'callees': [], 'callers': ['run_usock']}, 'ws_send_frame': {'callees': ['send_all'], 'callers': ['run_usock']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "make_blocking",
    "send_all",
    "ws_receive_frame",
    "ws_send_frame",
    "MHD_upgrade_action",
    "MHD_upgraded_connection_mark_app_closed_",
    "struct WsData",
    "struct MHD_UpgradeResponseHandle",
    "MUTEX",
    "CLIENT_SOCKS",
    "MAX_CLIENTS",
    "MHD_INVALID_SOCKET",
    "WS_OPCODE_TEXT_FRAME",
    "WS_OPCODE_CON_CLOSE_FRAME",
    "recv",
    "snprintf",
    "malloc",
    "free",
    "pthread_mutex_lock",
    "pthread_mutex_unlock",
    "abort",
    "ssize_t"
  ],
  "explanation": "For MISRA C rule checking about language extensions we must inspect any called routines, macros, types or globals used in run_usock that could be implemented as compiler-specific extensions (macros using statement-expressions, typeof, inline asm, GCC attributes, non\u2011standard keywords, etc.) and any types whose definitions might use extensions. Each listed symbol is needed for that reason:\n\n- make_blocking: function or macro implementation could use compiler extensions; check definition.\n- send_all: called by ws_send_frame; could be a macro/inline using extensions \u2014 need definition.\n- ws_receive_frame: returns a pointer and is used as if allocates buffer; its implementation may use extensions (macros, GCC builtins) \u2014 inspect it.\n- ws_send_frame: calls send_all; may be a macro/inline using extensions \u2014 inspect.\n- MHD_upgrade_action: may be a macro wrapper around other functions (call graph shows it calls MHD_upgraded_connection_mark_app_closed_) and could be implemented as a macro using extensions \u2014 inspect.\n- MHD_upgraded_connection_mark_app_closed_: internal symbol called by MHD_upgrade_action; check for extension use in its definition.\n- struct WsData: field types (urh, sock) and any embedded macros/attributes inside the struct definition could use extensions; needed to verify casts and member types.\n- struct MHD_UpgradeResponseHandle: its definition may use compiler extensions or attributes; inspect.\n- MUTEX: the mutex object could be a macro alias or defined with compiler-specific attributes/macros; check its definition.\n- CLIENT_SOCKS: global array \u2014 its declaration/initializer might use nonstandard constructs; needed to verify accesses and comparisons.\n- MAX_CLIENTS: macro/constant \u2014 could be defined via nonstandard constructs; check.\n- MHD_INVALID_SOCKET: macro/constant used in assignment \u2014 may be a macro or enum with extensions; inspect definition.\n- WS_OPCODE_TEXT_FRAME / WS_OPCODE_CON_CLOSE_FRAME: macros/constants used to decide message handling; their definitions might be macros or enums created with extensions \u2014 check.\n- recv: POSIX function prototype/possible macro wrapper \u2014 ensure header usage does not rely on compiler extensions in this translation unit.\n- snprintf: C library function; some implementations provide non\u2011standard overloads or macros \u2014 check declaration used in this build to ensure no extensions are in play.\n- malloc / free: allocator functions; their declarations/macros could use attributes/extension constructs \u2014 inspect headers if necessary.\n- pthread_mutex_lock / pthread_mutex_unlock: POSIX thread functions; their headers or inline wrappers may use GCC/implementation extensions \u2014 include to check for extension use.\n- abort: standard C function; include its declaration to ensure no nonstandard extension is involved.\n- ssize_t: typedef coming from system headers (POSIX); its definition may rely on platform headers \u2014 include to ensure no nonstandard language extensions are required.\n\nThe next analyzer should obtain the source/header definitions or preprocessed forms of these symbols to determine whether any of them (or their macros/inline wrappers) use compiler language extensions; only then can one conclude whether run_usock itself (as written) relies on language extensions."
}