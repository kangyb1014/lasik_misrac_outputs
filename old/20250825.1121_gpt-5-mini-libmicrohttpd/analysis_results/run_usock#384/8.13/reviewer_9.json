{
  "user_message": "An agent A claimed that the following run_usock code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of run_usock.\n```c\nstatic void *\nrun_usock (void *cls)\n{\n  struct WsData *ws = cls;\n  struct MHD_UpgradeResponseHandle *urh = ws->urh;\n  unsigned char buf[2048];\n  unsigned char *msg;\n  char *text;\n  ssize_t got;\n  int type;\n  int i;\n\n  make_blocking (ws->sock);\n  while (1)\n  {\n    got = recv (ws->sock, (void *) buf, sizeof (buf), 0);\n    if (0 >= got)\n    {\n      break;\n    }\n    msg = ws_receive_frame (buf, &got, &type);\n    if (NULL == msg)\n    {\n      break;\n    }\n    if (type == WS_OPCODE_TEXT_FRAME)\n    {\n      ssize_t sent;\n      int buf_size;\n      buf_size = snprintf (NULL, 0, \"User#%d: %s\", (int) ws->sock, msg);\n      if (0 < buf_size)\n      {\n        text = malloc ((size_t) buf_size + 1);\n        if (NULL != text)\n        {\n          if (snprintf (text, (size_t) buf_size + 1,\n                        \"User#%d: %s\", (int) ws->sock, msg) == buf_size)\n            sent = ws_send_frame (ws->sock, text, (size_t) buf_size);\n          else\n            sent = -1;\n          free (text);\n        }\n        else\n          sent = -1;\n      }\n      else\n        sent = -1;\n      free (msg);\n      if (-1 == sent)\n      {\n        break;\n      }\n    }\n    else\n    {\n      if (type == WS_OPCODE_CON_CLOSE_FRAME)\n      {\n        free (msg);\n        break;\n      }\n    }\n  }\n  if (0 != pthread_mutex_lock (&MUTEX))\n    abort ();\n  for (i = 0; i < MAX_CLIENTS; i++)\n  {\n    if (CLIENT_SOCKS[i] == ws->sock)\n    {\n      CLIENT_SOCKS[i] = MHD_INVALID_SOCKET;\n      break;\n    }\n  }\n  if (0 != pthread_mutex_unlock (&MUTEX))\n    abort ();\n  free (ws);\n  MHD_upgrade_action (urh, MHD_UPGRADE_ACTION_CLOSE);\n  return NULL;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call itself cannot be decided without the declaration of ws_receive_frame. If ws_receive_frame is declared to take/return non-const pointers (for example: unsigned char *ws_receive_frame(unsigned char *buf, ssize_t *got, int *type)) but the function does not modify the input buffer and the returned data is not meant to be modified by the caller, then Rule 8.13 is violated \u2014 the parameter should be declared const unsigned char *buf and/or the return type should be const unsigned char *. If, however, ws_receive_frame is already declared with const-qualified pointer types where appropriate, then there is no violation.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function run_usock:\nstruct WsData\n{\n  struct MHD_UpgradeResponseHandle *urh;\n  MHD_socket sock;\n}\n...\nstruct MHD_UpgradeResponseHandle\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A\u2019s claim cannot be decided from run_usock alone and, on the facts shown, is not clearly correct. MISRA C 2023 Rule 8.13 says a pointer should point to a const-qualified type whenever possible, but whether a violation exists depends on the declarations and semantics of ws_receive_frame (and of any other called functions). Specific points:\n\n- The local buffer buf must be non-const because recv writes into it, so keeping it non-const is correct.\n- msg is assigned from ws_receive_frame and is only read thereafter, but the code calls free(msg). If ws_receive_frame returns heap-allocated memory that the caller must free, the return type must be a non-const pointer (or the caller would need to cast away const to free, which is unsafe). Thus the observed usage (free(msg)) suggests a non-const return is intentional and appropriate.\n- If ws_receive_frame does in fact modify the input buffer or returns a pointer into buf, then non-const parameter/return types are necessary and correct.\n- Conversely, if ws_receive_frame neither modifies the input buffer nor returns modifiable memory, then its prototype should use const-qualified pointer types; that would be a violation in ws_receive_frame\u2019s declaration, not provable from run_usock by itself.\n\nBecause the declaration and behavior of ws_receive_frame are not provided, you cannot conclude from run_usock alone that Rule 8.13 is violated. The report as stated is therefore not correct (insufficient evidence)."
}