{
  "user_message": "Target function code is:\n```c\n_MHD_static_inline void\ndigest_calc_hash (struct DigestAlgorithm *da, uint8_t *digest)\n{\n  mhd_assert (! da->uninitialised);\n  mhd_assert (da->algo_selected);\n  mhd_assert (da->ready_for_hashing);\n#ifdef MHD_MD5_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_MD5 == da->algo)\n  {\n#ifdef MHD_MD5_HAS_FINISH\n    MHD_MD5_finish (&da->ctx.md5_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif /* _DEBUG */\n#else  /* ! MHD_MD5_HAS_FINISH */\n    MHD_MD5_finish_reset (&da->ctx.md5_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n#endif /* ! MHD_MD5_HAS_FINISH */\n  }\n  else\n#endif /* MHD_MD5_SUPPORT */\n#ifdef MHD_SHA256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA256 == da->algo)\n  {\n#ifdef MHD_SHA256_HAS_FINISH\n    MHD_SHA256_finish (&da->ctx.sha256_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif /* _DEBUG */\n#else  /* ! MHD_SHA256_HAS_FINISH */\n    MHD_SHA256_finish_reset (&da->ctx.sha256_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = true;\n#endif /* _DEBUG */\n#endif /* ! MHD_SHA256_HAS_FINISH */\n  }\n  else\n#endif /* MHD_SHA256_SUPPORT */\n#ifdef MHD_SHA512_256_SUPPORT\n  if (MHD_DIGEST_BASE_ALGO_SHA512_256 == da->algo)\n  {\n    MHD_SHA512_256_finish (&da->ctx.sha512_256_ctx, digest);\n#ifdef _DEBUG\n    da->ready_for_hashing = false;\n#endif /* _DEBUG */\n  }\n  else\n#endif /* MHD_SHA512_256_SUPPORT */\n  mhd_assert (0);   /* Should not happen */\n#ifdef _DEBUG\n  da->hashing = false;\n#endif /* _DEBUG */\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'digest_calc_hash': {'callees': ['MHD_MD5_finish', 'MHD_SHA256_finish', 'MHD_SHA512_256_finish'], 'callers': ['calculate_nonce', 'calc_userdigest', 'calc_userhash', 'digest_auth_check_all_inner']}, 'MHD_MD5_finish': {'callees': ['md5_transform', '_MHD_PUT_64BIT_LE_SAFE'], 'callers': ['digest_calc_hash']}, 'MHD_SHA256_finish': {'callees': ['sha256_transform', '_MHD_PUT_64BIT_BE_SAFE', '__builtin_bswap32'], 'callers': ['digest_calc_hash']}, 'MHD_SHA512_256_finish': {'callees': ['sha512_256_transform', '__builtin_bswap64'], 'callers': ['digest_calc_hash']}, 'calculate_nonce': {'callees': ['MHD_bin_to_hex', 'digest_get_size', 'digest_update', 'digest_update_with_colon', 'digest_update_str', 'digest_calc_hash'], 'callers': ['calculate_add_nonce', 'digest_auth_check_all_inner']}, 'calc_userdigest': {'callees': ['digest_update', 'digest_update_with_colon', 'digest_update_str', 'digest_calc_hash'], 'callers': ['MHD_digest_auth_calc_userdigest', 'digest_auth_check_all_inner']}, 'calc_userhash': {'callees': ['digest_update', 'digest_update_with_colon', 'digest_calc_hash'], 'callers': ['MHD_digest_auth_calc_userhash', 'digest_auth_check_all_inner']}, 'digest_auth_check_all_inner': {'callees': ['MHD_get_master', 'MHD_get_rq_dauth_params_', 'MHD_DLOG', 'digest_init_one_time', 'get_base_digest_algo', '__builtin_unreachable', 'digest_get_size', 'is_param_equal', 'get_buffer_for_size', 'get_rq_extended_uname_copy_z', 'calc_userhash', 'MHD_bin_to_hex', 'is_param_equal_caseless', 'digest_reset', 'get_unquoted_param', 'MHD_strx_to_uint64_n_', 'get_nonce_timestamp', 'MHD_monotonic_msec_counter', 'check_nonce_nc', 'digest_update_str', 'digest_update_with_colon', 'get_unquoted_param_copy', 'digest_update', 'check_uri_match', 'digest_calc_hash', 'calc_userdigest', 'MHD_hex_to_bin', 'calculate_nonce'], 'callers': ['digest_auth_check_all']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_static_inline",
    "mhd_assert",
    "_DEBUG",
    "struct DigestAlgorithm",
    "MHD_MD5_SUPPORT",
    "MHD_MD5_HAS_FINISH",
    "MHD_SHA256_SUPPORT",
    "MHD_SHA256_HAS_FINISH",
    "MHD_SHA512_256_SUPPORT",
    "MHD_DIGEST_BASE_ALGO_MD5",
    "MHD_DIGEST_BASE_ALGO_SHA256",
    "MHD_DIGEST_BASE_ALGO_SHA512_256",
    "MHD_MD5_finish",
    "MHD_MD5_finish_reset",
    "MHD_SHA256_finish",
    "MHD_SHA256_finish_reset",
    "MHD_SHA512_256_finish",
    "uint8_t / <stdint.h>",
    "bool / true / false (e.g. <stdbool.h>)"
  ],
  "explanation": "To decide whether digest_calc_hash uses compiler language extensions you must see the definitions/macros and types it relies on (macros can hide extensions). _MHD_static_inline: this macro controls the function storage-class/inline spelling and may expand to compiler-specific keywords or attributes (e.g. __inline__, __attribute__, __forceinline) \u2014 inspect to detect extensions. mhd_assert: the assertion macro may expand to compiler built-ins or extension constructs (__builtin_expect, __builtin_trap, __extension__, inline assembly, etc.). _DEBUG: controls code paths that assign false/true and the presence of fields like hashing/ready_for_hashing \u2014 its setting affects whether extension-using code is instantiated. struct DigestAlgorithm: required to check field types and layout (e.g. anonymous structs/unions, bit-fields, nonstandard types) and to see whether da->ctx uses an anonymous union/struct (anonymous members are a compiler extension in some dialects). MHD_*_SUPPORT and MHD_*_HAS_FINISH flags: determine which branches are compiled; macros may also be defined via compiler command-line and their presence changes whether extension-using code is present. MHD_DIGEST_BASE_ALGO_* constants: their definition form (enum vs macro) can involve extensions (e.g. nonstandard enum values) and is needed to see control-flow resolution. MHD_MD5_finish, MHD_MD5_finish_reset, MHD_SHA256_finish, MHD_SHA256_finish_reset, MHD_SHA512_256_finish: these symbols may be functions or macros; if macros they can expand to inline assembly, __builtin_*, attributes or other extensions \u2014 their definitions are required. uint8_t / <stdint.h> and bool / true / false: confirm whether standard fixed-width and boolean types are used or whether project provides nonstandard replacements/typedefs that might be extensions. Providing these symbols (macro definitions and type/structure declarations) allows the next reviewer to detect any non\u2011standard keywords, attributes, builtins, anonymous struct/union usage, inline variants, or other compiler-specific extensions that would violate the MISRA language-extensions rule."
}