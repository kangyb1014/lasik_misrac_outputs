{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of buffer_append:\n```c\nstatic bool\nbuffer_append (char *buf,\n               size_t *ppos,\n               size_t buf_size,\n               const char *append,\n               size_t append_size)\n{\n  mhd_assert (NULL != buf); /* Mute static analyzer */\n  if (buf_size < *ppos + append_size)\n    return false;\n  memcpy (buf + *ppos, append, append_size);\n  *ppos += append_size;\n  return true;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function buffer_append:\n#define mhd_assert(ignore) ((void)0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no uses of compiler-specific language extensions in the provided code. Specifically:\n- No use of obvious compiler extensions such as __attribute__, __asm__, __builtin_*, __typeof__, statement-expressions ({ ... }), nested functions, or other GCC/Clang/MSVC specific keywords/pseudo-types.\n- The code uses standard C identifiers and library features (static function, bool/_Bool via stdbool.h, size_t, memcpy) which are part of standard C (C99 and later) rather than compiler extensions.\n- The mhd_assert macro is a plain macro expansion to ((void)0), not an extension.\n- Parameter and return types, pointer arithmetic and memcpy usage are all standard-conforming constructs.\n\nTherefore no code fragments need to be investigated for MISRA C 2023 Rule 1.2 (use of language extensions). If you want, I can re-check with specific compiler documentation or the complete translation unit (includes) to ensure no hidden extension use elsewhere (for example an occurrence of bool without including stdbool.h in the TU)."
}