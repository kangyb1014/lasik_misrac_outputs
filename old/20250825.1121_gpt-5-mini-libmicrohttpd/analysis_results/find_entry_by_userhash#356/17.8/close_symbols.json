{
  "user_message": "Target function code is:\n```c\nstatic struct UserEntry *\nfind_entry_by_userhash (enum MHD_DigestAuthAlgo3 algo3,\n                        const void *userhash,\n                        size_t userhash_size)\n{\n  size_t i;\n\n  if (MHD_digest_get_hash_size (algo3) != userhash_size)\n    return NULL; /* Wrong length of the userhash */\n\n  switch (algo3)\n  {\n  case MHD_DIGEST_AUTH_ALGO3_MD5:\n  case MHD_DIGEST_AUTH_ALGO3_MD5_SESSION: /* An extra case not used currently */\n    if (sizeof(user_ids[0].userhash_md5) != userhash_size) /* Extra check. The size was checked before */\n      return NULL;\n    for (i = 0; i < (sizeof(user_ids) / sizeof(user_ids[0])); ++i)\n    {\n      struct UserEntry *entry;\n\n      entry = user_ids + i;\n      if (0 == memcmp (userhash, entry->userhash_md5,\n                       sizeof(entry->userhash_md5)))\n        return entry;\n    }\n    break;\n  case MHD_DIGEST_AUTH_ALGO3_SHA256:\n  case MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION: /* An extra case not used currently */\n    if (sizeof(user_ids[0].userhash_sha256) != userhash_size) /* Extra check. The size was checked before */\n      return NULL;\n    for (i = 0; i < (sizeof(user_ids) / sizeof(user_ids[0])); ++i)\n    {\n      struct UserEntry *entry;\n\n      entry = user_ids + i;\n      if (0 == memcmp (userhash, entry->userhash_sha256,\n                       sizeof(entry->userhash_sha256)))\n        return entry;\n    }\n    break;\n  case MHD_DIGEST_AUTH_ALGO3_SHA512_256:\n  case MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION: /* An extra case not used currently */\n    if (sizeof(user_ids[0].userhash_sha512_256) != userhash_size) /* Extra check. The size was checked before */\n      return NULL;\n    for (i = 0; i < (sizeof(user_ids) / sizeof(user_ids[0])); ++i)\n    {\n      struct UserEntry *entry;\n\n      entry = user_ids + i;\n      if (0 == memcmp (userhash, entry->userhash_sha512_256,\n                       sizeof(entry->userhash_sha512_256)))\n        return entry;\n    }\n    break;\n  case MHD_DIGEST_AUTH_ALGO3_INVALID: /* Mute compiler warning. Impossible value in this context. */\n  default:\n    break;\n  }\n  return NULL;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'find_entry_by_userhash': {'callees': ['MHD_digest_get_hash_size'], 'callers': ['find_entry_by_userinfo']}, 'MHD_digest_get_hash_size': {'callees': ['digest_get_hash_size'], 'callers': ['find_entry_by_userhash']}, 'find_entry_by_userinfo': {'callees': ['find_entry_by_username', 'find_entry_by_userhash'], 'callers': ['handle_sec_areas_req']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_digest_get_hash_size",
    "digest_get_hash_size",
    "memcmp",
    "struct UserEntry",
    "user_ids",
    "enum MHD_DigestAuthAlgo3 and MHD_DIGEST_AUTH_ALGO3_* constants"
  ],
  "explanation": "MHD_digest_get_hash_size: Needed to inspect its declaration/definition (or macro expansion). If it is a macro or inlined implementation that evaluates or modifies its argument expression in an unexpected way, that could indirectly modify the caller's parameter (algo3) or produce side effects. Confirming it is an ordinary function taking the enum by value shows it cannot modify the caller's parameter.\n\ndigest_get_hash_size: This is the underlying symbol called by MHD_digest_get_hash_size (per the call graph). Its definition is required for the same reason as above (to check for macros/side effects or unexpected semantics that could affect the parameter).\n\nmemcmp: The comparison routine is called with the pointer parameter userhash. Inspecting memcmp's prototype/definition (or any local macro that replaces it) verifies that it accepts const void * (does not modify the pointee) and does not modify the pointer argument itself.\n\nstruct UserEntry: Required to confirm the types of entry->userhash_md5 / userhash_sha256 / userhash_sha512_256 and to ensure there are no unusual macros or operator overloads that could cause modifications of the userhash parameter or its value via those fields or via sizeof expressions.\n\nuser_ids: The global array is used to compute sizes and to obtain entry pointers (user_ids + i). Its declaration is needed to ensure no macro or unusual operator interferes with pointer arithmetic or name resolution that could change parameter semantics.\n\nenum MHD_DigestAuthAlgo3 and MHD_DIGEST_AUTH_ALGO3_* constants: Needed to verify that the enum and its constants are ordinary enum values (and not macros) so that switching on algo3 and passing it to MHD_digest_get_hash_size cannot result in modifications of the algo3 parameter via macro side-effects.\n\nNote: the focus of the MISRA rule is whether the function modifies its parameter values (the pointer variable or non-pointer parameters). The listed symbols are those that could conceal modifications via macros, inlined implementations, or non-standard definitions; inspecting them will allow a definitive determination."
}