{
  "user_message": "Target function code is:\n```c\nstatic struct UserEntry *\nfind_entry_by_userhash (enum MHD_DigestAuthAlgo3 algo3,\n                        const void *userhash,\n                        size_t userhash_size)\n{\n  size_t i;\n\n  if (MHD_digest_get_hash_size (algo3) != userhash_size)\n    return NULL; /* Wrong length of the userhash */\n\n  switch (algo3)\n  {\n  case MHD_DIGEST_AUTH_ALGO3_MD5:\n  case MHD_DIGEST_AUTH_ALGO3_MD5_SESSION: /* An extra case not used currently */\n    if (sizeof(user_ids[0].userhash_md5) != userhash_size) /* Extra check. The size was checked before */\n      return NULL;\n    for (i = 0; i < (sizeof(user_ids) / sizeof(user_ids[0])); ++i)\n    {\n      struct UserEntry *entry;\n\n      entry = user_ids + i;\n      if (0 == memcmp (userhash, entry->userhash_md5,\n                       sizeof(entry->userhash_md5)))\n        return entry;\n    }\n    break;\n  case MHD_DIGEST_AUTH_ALGO3_SHA256:\n  case MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION: /* An extra case not used currently */\n    if (sizeof(user_ids[0].userhash_sha256) != userhash_size) /* Extra check. The size was checked before */\n      return NULL;\n    for (i = 0; i < (sizeof(user_ids) / sizeof(user_ids[0])); ++i)\n    {\n      struct UserEntry *entry;\n\n      entry = user_ids + i;\n      if (0 == memcmp (userhash, entry->userhash_sha256,\n                       sizeof(entry->userhash_sha256)))\n        return entry;\n    }\n    break;\n  case MHD_DIGEST_AUTH_ALGO3_SHA512_256:\n  case MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION: /* An extra case not used currently */\n    if (sizeof(user_ids[0].userhash_sha512_256) != userhash_size) /* Extra check. The size was checked before */\n      return NULL;\n    for (i = 0; i < (sizeof(user_ids) / sizeof(user_ids[0])); ++i)\n    {\n      struct UserEntry *entry;\n\n      entry = user_ids + i;\n      if (0 == memcmp (userhash, entry->userhash_sha512_256,\n                       sizeof(entry->userhash_sha512_256)))\n        return entry;\n    }\n    break;\n  case MHD_DIGEST_AUTH_ALGO3_INVALID: /* Mute compiler warning. Impossible value in this context. */\n  default:\n    break;\n  }\n  return NULL;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'find_entry_by_userhash': {'callees': ['MHD_digest_get_hash_size'], 'callers': ['find_entry_by_userinfo']}, 'MHD_digest_get_hash_size': {'callees': ['digest_get_hash_size'], 'callers': ['find_entry_by_userhash']}, 'find_entry_by_userinfo': {'callees': ['find_entry_by_username', 'find_entry_by_userhash'], 'callers': ['handle_sec_areas_req']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct UserEntry (full definition)",
    "user_ids (declaration and definition)",
    "enum MHD_DigestAuthAlgo3 (full definition / enumerator values)",
    "MHD_digest_get_hash_size (prototype and definition)",
    "digest_get_hash_size (definition)",
    "memcmp (declaration / linked implementation)",
    "size_t typedef (e.g. <stddef.h> typedef)",
    "Any macros/defines for MHD_DIGEST_AUTH_ALGO3_* (if not part of the enum definition)"
  ],
  "explanation": "To determine whether find_entry_by_userhash uses any compiler/language extensions you must inspect the declarations and definitions referenced by the function that might themselves use extensions or cause extension usage in the function:\n\n- struct UserEntry (full definition): the function accesses members (userhash_md5, userhash_sha256, userhash_sha512_256). The struct definition may contain compiler extensions (e.g. GCC __attribute__, zero-length arrays, anonymous structs/unions, non-standard bit-field declarations) that would constitute language extensions.\n\n- user_ids (declaration and definition): the code indexes and takes sizeof(user_ids). The array declaration could use attributes, section pragmas, nonstandard storage-class specifiers, zero-length/flexible arrays, or other extensions that affect semantics/validity.\n\n- enum MHD_DigestAuthAlgo3 (full definition / enumerator values): the switch uses its enumerators. Enum declarations can use implementation-defined widths or nonstandard extensions; enumerator macros might instead be #defines. You must inspect the enum/defines to ensure no extension (e.g. out-of-range enumerator values, typedefs using attributes).\n\n- MHD_digest_get_hash_size (prototype and definition): called at the top of the function. Its declaration/definition may include compiler-specific attributes or macros (e.g. __attribute__, inline extensions, alternative linkage) which are language extensions and could affect whether the call site or declaration constitutes an extension.\n\n- digest_get_hash_size (definition): MHD_digest_get_hash_size calls this; if either uses macros or attributes, those are relevant to determine extension use in the call chain referenced by the function.\n\n- memcmp (declaration / linked implementation): the function calls memcmp. While memcmp is standard, some projects replace it with macro wrappers or platform-specific optimized implementations that use extensions; check the actual declaration/definition visible to the target function.\n\n- size_t typedef (e.g. <stddef.h> typedef): size_t is used; its typedef location should be checked only if the project redefines it with nonstandard extensions (rare but possible), to be exhaustive.\n\n- Any macros/defines for MHD_DIGEST_AUTH_ALGO3_* (if not part of the enum definition): if the case labels are actually macros (rather than enum constants) they could expand to extension constructs.\n\nProvide these symbol definitions to the next analyzer so it can spot any use of compiler-specific attributes, nonstandard language constructs (zero-length arrays, statement expressions, typeof, asm, attributes, nested functions, etc.) or other explicit compiler-documented extensions in the code that the target function uses or depends on."
}