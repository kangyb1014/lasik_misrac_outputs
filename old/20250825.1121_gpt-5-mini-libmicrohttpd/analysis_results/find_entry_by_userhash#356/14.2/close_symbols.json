{
  "user_message": "Target function code is:\n```c\nstatic struct UserEntry *\nfind_entry_by_userhash (enum MHD_DigestAuthAlgo3 algo3,\n                        const void *userhash,\n                        size_t userhash_size)\n{\n  size_t i;\n\n  if (MHD_digest_get_hash_size (algo3) != userhash_size)\n    return NULL; /* Wrong length of the userhash */\n\n  switch (algo3)\n  {\n  case MHD_DIGEST_AUTH_ALGO3_MD5:\n  case MHD_DIGEST_AUTH_ALGO3_MD5_SESSION: /* An extra case not used currently */\n    if (sizeof(user_ids[0].userhash_md5) != userhash_size) /* Extra check. The size was checked before */\n      return NULL;\n    for (i = 0; i < (sizeof(user_ids) / sizeof(user_ids[0])); ++i)\n    {\n      struct UserEntry *entry;\n\n      entry = user_ids + i;\n      if (0 == memcmp (userhash, entry->userhash_md5,\n                       sizeof(entry->userhash_md5)))\n        return entry;\n    }\n    break;\n  case MHD_DIGEST_AUTH_ALGO3_SHA256:\n  case MHD_DIGEST_AUTH_ALGO3_SHA256_SESSION: /* An extra case not used currently */\n    if (sizeof(user_ids[0].userhash_sha256) != userhash_size) /* Extra check. The size was checked before */\n      return NULL;\n    for (i = 0; i < (sizeof(user_ids) / sizeof(user_ids[0])); ++i)\n    {\n      struct UserEntry *entry;\n\n      entry = user_ids + i;\n      if (0 == memcmp (userhash, entry->userhash_sha256,\n                       sizeof(entry->userhash_sha256)))\n        return entry;\n    }\n    break;\n  case MHD_DIGEST_AUTH_ALGO3_SHA512_256:\n  case MHD_DIGEST_AUTH_ALGO3_SHA512_256_SESSION: /* An extra case not used currently */\n    if (sizeof(user_ids[0].userhash_sha512_256) != userhash_size) /* Extra check. The size was checked before */\n      return NULL;\n    for (i = 0; i < (sizeof(user_ids) / sizeof(user_ids[0])); ++i)\n    {\n      struct UserEntry *entry;\n\n      entry = user_ids + i;\n      if (0 == memcmp (userhash, entry->userhash_sha512_256,\n                       sizeof(entry->userhash_sha512_256)))\n        return entry;\n    }\n    break;\n  case MHD_DIGEST_AUTH_ALGO3_INVALID: /* Mute compiler warning. Impossible value in this context. */\n  default:\n    break;\n  }\n  return NULL;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'find_entry_by_userhash': {'callees': ['MHD_digest_get_hash_size'], 'callers': ['find_entry_by_userinfo']}, 'MHD_digest_get_hash_size': {'callees': ['digest_get_hash_size'], 'callers': ['find_entry_by_userhash']}, 'find_entry_by_userinfo': {'callees': ['find_entry_by_username', 'find_entry_by_userhash'], 'callers': ['handle_sec_areas_req']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA for loop shall be well-formed. The three clauses of a for statement are the:\n1. First clause shall be empty or an expression whose set the value of the loop counter or define and intialize the loop counter.\n2. Second clause shall be an expression that has no persistent side effects, and shall use the loop counter and optionally loop control flags, and shall not use any other object that is modified in the for loop body.\n3.Third clause shall be an expression whose modify only the value of the loop counter, and shall not use objects that are modified in the for loop body.\n4. There shall only be one loop counter in a for loop, which shall not be modified in for loop body. A loop control flag is defined as single identifier denoting an object with Boolean type that is used in the second clause. The behaviour of a for loop body includes the behaviour of any functions called within that statement. \nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "user_ids",
    "struct UserEntry (definition, including members userhash_md5, userhash_sha256, userhash_sha512_256)",
    "memcmp (declaration/definition or macro)"
  ],
  "explanation": "Required symbols and why:\n\n1) user_ids\n- The for-loop condition uses (sizeof(user_ids) / sizeof(user_ids[0])). To assess clause (2) of the MISRA rule we must know whether user_ids is an array or a pointer, its type, and whether it can be modified (e.g. declared volatile or changed by functions). If user_ids is a pointer rather than an array, sizeof(user_ids) yields the pointer size (changing the loop bound semantics). If user_ids or its elements can be modified in the loop body or by functions called from the loop body, that could violate the requirement that the second clause not depend on objects modified by the loop body.\n\n2) struct UserEntry (definition, including members userhash_md5, userhash_sha256, userhash_sha512_256)\n- The loop body computes entry = user_ids + i and reads entry->userhash_*. To ensure the loop has a single loop counter and that no object used in the clauses is modified by the loop body, you must know the exact type and qualifiers of these members (e.g. volatile or accessor macros) and whether reading them could have side effects. Also the sizeof(user_ids[0]) used in the second clause depends on the definition of user_ids[0] (the struct type). If any struct members or the struct itself have unusual definitions (bit-fields, volatile qualifiers, custom overloads via macros, etc.) they could introduce side effects that affect MISRA compliance.\n\n3) memcmp (declaration/definition or macro)\n- The body calls memcmp. MISRA regards the behaviour of a for-loop to include functions called from the loop body; therefore you must confirm memcmp does not modify the loop counter or any object used in the loop clauses (and that it is the standard, side-effect-free comparison function rather than an application macro that may have side effects). If memcmp were replaced by a macro or non\u2011standard function with side effects, that could violate clause (2) or (3) (objects used in the clauses must not be modified by the loop body or functions it calls).\n\n(Other symbols already visible in the function \u2014 the loop counter i, the parameters userhash/userhash_size, and the loop increment ++i \u2014 are present in the target function and do not need separate inclusion unless inspection of their typedefs/qualifiers is required. The callable MHD_digest_get_hash_size is invoked outside the loop and does not affect the inner-loop well-formedness, so it is not required for this specific MISRA for-loop analysis.)"
}