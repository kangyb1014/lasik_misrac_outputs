{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_entry_no_alloc_:\n```c\nbool\nMHD_add_response_entry_no_alloc_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  char *header,\n                                  size_t header_len,\n                                  char *content,\n                                  size_t content_len)\n{\n  struct MHD_HTTP_Res_Header *hdr;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  if (NULL == (hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header))))\n    return false;\n\n  hdr->header = header;\n  hdr->header_size = header_len;\n  hdr->value = content;\n  hdr->value_size = content_len;\n  hdr->kind = kind;\n  _MHD_insert_header_last (response, hdr);\n\n  return true; /* Success exit point */\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_add_response_entry_no_alloc_:\n#define mhd_assert(ignore) ((void)0)\n...\n#define MHD_calloc_(n, s) calloc((n),(s))\n...\n#define _MHD_insert_header_last(presponse, phdr) do{mhd_assert(NULL==phdr->next);mhd_assert(NULL==phdr->prev);if(NULL==presponse->last_header){mhd_assert(NULL==presponse->first_header);presponse->last_header=phdr;presponse->first_header=phdr;}else{mhd_assert(NULL!=presponse->first_header);presponse->last_header->next=phdr;phdr->prev=presponse->last_header;presponse->last_header=phdr;}\\\n}while(0)\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No fragments require investigation for Rule 17.2 (no direct or indirect self-calls):\n- The function MHD_add_response_entry_no_alloc_ does not call itself. Its callees are MHD_calloc_ and the macro _MHD_insert_header_last; there is no reference to MHD_add_response_entry_no_alloc_ in the body.\n- MHD_calloc_ is a macro that expands to the standard calloc function; that does not call back into the module function.\n- _MHD_insert_header_last is a macro that expands to inline pointer manipulations and mhd_assert checks; the provided mhd_assert macro expands to ((void)0) so it introduces no function calls. The macro expansion does not invoke any functions or function pointers that could indirectly call MHD_add_response_entry_no_alloc_.\n- No function pointers or callbacks are invoked in the shown code paths that could produce indirect recursion.\nGiven the provided definitions, there is no direct or indirect invocation chain leading back to MHD_add_response_entry_no_alloc_, so no code fragments are suspicious for Rule 17.2."
}