{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_add_response_entry_no_alloc_:\n```c\nbool\nMHD_add_response_entry_no_alloc_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  char *header,\n                                  size_t header_len,\n                                  char *content,\n                                  size_t content_len)\n{\n  struct MHD_HTTP_Res_Header *hdr;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  if (NULL == (hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header))))\n    return false;\n\n  hdr->header = header;\n  hdr->header_size = header_len;\n  hdr->value = content;\n  hdr->value_size = content_len;\n  hdr->kind = kind;\n  _MHD_insert_header_last (response, hdr);\n\n  return true; /* Success exit point */\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_add_response_entry_no_alloc_:\n#define mhd_assert(ignore) ((void)0)\n...\n#define MHD_calloc_(n, s) calloc((n),(s))\n...\n#define _MHD_insert_header_last(presponse, phdr) do{mhd_assert(NULL==phdr->next);mhd_assert(NULL==phdr->prev);if(NULL==presponse->last_header){mhd_assert(NULL==presponse->first_header);presponse->last_header=phdr;presponse->first_header=phdr;}else{mhd_assert(NULL!=presponse->first_header);presponse->last_header->next=phdr;phdr->prev=presponse->last_header;presponse->last_header=phdr;}\\\n}while(0)\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#define mhd_assert(ignore) ((void)0)\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The macro definition #define mhd_assert(ignore) ((void)0) expands any mhd_assert(x); occurrence to a no-op expression statement ((void)0);. Those statements are reachable at runtime (they execute and do nothing), so they do not constitute unreachable code. In the shown function, the mhd_assert calls become reachable no-ops, and therefore Rule 2.1 (no unreachable code) is not violated."
}