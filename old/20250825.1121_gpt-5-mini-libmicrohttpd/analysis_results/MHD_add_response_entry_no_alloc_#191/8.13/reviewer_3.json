{
  "user_message": "An agent A claimed that the following MHD_add_response_entry_no_alloc_ code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_entry_no_alloc_.\n```c\nbool\nMHD_add_response_entry_no_alloc_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  char *header,\n                                  size_t header_len,\n                                  char *content,\n                                  size_t content_len)\n{\n  struct MHD_HTTP_Res_Header *hdr;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  if (NULL == (hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header))))\n    return false;\n\n  hdr->header = header;\n  hdr->header_size = header_len;\n  hdr->value = content;\n  hdr->value_size = content_len;\n  hdr->kind = kind;\n  _MHD_insert_header_last (response, hdr);\n\n  return true; /* Success exit point */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf struct MHD_HTTP_Res_Header::value is declared as a plain char * and the implementation never modifies the pointed-to data, then assigning the (non-const) content pointer into hdr->value contravenes MISRA C 2023 Rule 8.13. The pointer should instead point to a const-qualified type (e.g. const char *) whenever possible \u2014 e.g. change the struct member to const char *value and the function parameter to const char *content to comply.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The agent\u2019s report is correct in the scenario described. MISRA C:2023 Rule 8.13 requires pointer types to be const-qualified when they are not used to modify the pointed-to object. In the shown function neither header nor content is modified \u2014 the code merely stores the pointers and sizes in the response header structure. If struct MHD_HTTP_Res_Header::value (and hdr->header) are declared as plain char * and the pointed-to data is never modified anywhere, that design violates Rule 8.13. The appropriate fix is to increase constness (e.g. change the struct members to const char *value and const char *header and the function parameters to const char *content and const char *header) unless other code legitimately needs to modify those buffers. If the buffers are mutated elsewhere, then keeping them non-const is justified and there is no violation in that case."
}