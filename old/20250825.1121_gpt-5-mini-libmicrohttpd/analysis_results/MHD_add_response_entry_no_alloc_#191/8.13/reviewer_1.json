{
  "user_message": "An agent A claimed that the following MHD_add_response_entry_no_alloc_ code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of MHD_add_response_entry_no_alloc_.\n```c\nbool\nMHD_add_response_entry_no_alloc_ (struct MHD_Response *response,\n                                  enum MHD_ValueKind kind,\n                                  char *header,\n                                  size_t header_len,\n                                  char *content,\n                                  size_t content_len)\n{\n  struct MHD_HTTP_Res_Header *hdr;\n\n  mhd_assert (0 != header_len);\n  mhd_assert (0 != content_len);\n  if (NULL == (hdr = MHD_calloc_ (1, sizeof (struct MHD_HTTP_Res_Header))))\n    return false;\n\n  hdr->header = header;\n  hdr->header_size = header_len;\n  hdr->value = content;\n  hdr->value_size = content_len;\n  hdr->kind = kind;\n  _MHD_insert_header_last (response, hdr);\n\n  return true; /* Success exit point */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe parameter 'char *content' is only stored (hdr->value = content) and never modified in this function, so it could be declared 'const char *content' (and the struct member hdr->value changed to const char *). Declaring it as a non-const pointer when it can be const violates MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not provably correct given only the shown code. MISRA C 2023 Rule 8.13 recommends that pointers should point to const-qualified types when that is feasible, and within this function the pointers 'header' and 'content' are not modified. However, the function stores those pointers into members of struct MHD_HTTP_Res_Header (hdr->header and hdr->value). Whether the pointers can legitimately be made const depends on the declaration of those struct members and on all other uses of them in the program. If hdr->value/header are intended to be modified later, or if the struct members are non-const and used as non-const elsewhere, then changing the parameter (and struct) types to const would be infeasible and no violation can be established from this function alone. To determine a true MISRA violation you must inspect the struct definition and all uses of those members; if those members and all uses never modify the pointees, then the parameters (and struct members) should be const and the report would be correct. As presented, there is insufficient information, so the claim of a violation is not proven."
}