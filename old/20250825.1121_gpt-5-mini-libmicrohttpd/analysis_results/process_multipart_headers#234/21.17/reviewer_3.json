{
  "user_message": "An agent A claimed that the following process_multipart_headers code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of process_multipart_headers.\n```c\nstatic int\nprocess_multipart_headers (struct MHD_PostProcessor *pp,\n                           size_t *ioffptr,\n                           enum PP_State next_state)\n{\n  char *buf = (char *) &pp[1];\n  size_t newline;\n\n  newline = 0;\n  while ( (newline < pp->buffer_pos) &&\n          (buf[newline] != '\\r') &&\n          (buf[newline] != '\\n') )\n    newline++;\n  if (newline == pp->buffer_size)\n  {\n    pp->state = PP_Error;\n    return MHD_NO;              /* out of memory */\n  }\n  if (newline == pp->buffer_pos)\n    return MHD_NO;              /* will need more data */\n  if (0 == newline)\n  {\n    /* empty line - end of headers */\n    pp->skip_rn = RN_Full;\n    pp->state = next_state;\n    return MHD_YES;\n  }\n  /* got an actual header */\n  if (buf[newline] == '\\r')\n    pp->skip_rn = RN_OptN;\n  buf[newline] = '\\0';\n  if (MHD_str_equal_caseless_n_ (\"Content-disposition: \",\n                                 buf,\n                                 MHD_STATICSTR_LEN_ (\"Content-disposition: \")))\n  {\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"name\",\n                   &pp->content_name);\n    try_get_value (&buf[MHD_STATICSTR_LEN_ (\"Content-disposition: \")],\n                   \"filename\",\n                   &pp->content_filename);\n  }\n  else\n  {\n    try_match_header (\"Content-type: \",\n                      MHD_STATICSTR_LEN_ (\"Content-type: \"),\n                      buf,\n                      &pp->content_type);\n    try_match_header (\"Content-Transfer-Encoding: \",\n                      MHD_STATICSTR_LEN_ (\"Content-Transfer-Encoding: \"),\n                      buf,\n                      &pp->content_transfer_encoding);\n  }\n  (*ioffptr) += newline + 1;\n  return MHD_YES;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation can occur because MHD_str_equal_caseless_n_ is called with a fixed length (MHD_STATICSTR_LEN_(\"Content-disposition: \")) but the code does not ensure that many bytes are available in the object pointed to by buf. Although buf[newline] is set to '\\0' and the loop stops when newline == pp->buffer_pos or newline == pp->buffer_size, there is no check that pp->buffer_size (the allocated size of buf) is >= the constant length passed to MHD_str_equal_caseless_n_. If MHD_str_equal_caseless_n_ internally reads exactly that many bytes from buf (e.g. via memcmp/strncmp-like behaviour), and pp->buffer_size is smaller than MHD_STATICSTR_LEN_(\"Content-disposition: \"), the call will read beyond the bounds of buf and thus violate Rule 21.17 (example: pp->buffer_size == 8, MHD_STATICSTR_LEN_ == 21).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A\u2019s report is correct as a potential MISRA 21.17 violation. The code does not guarantee that the object pointed to by buf contains at least MHD_STATICSTR_LEN_(\"Content-disposition: \") bytes before calling MHD_str_equal_caseless_n_. The loop and subsequent checks only ensure newline < pp->buffer_pos and newline < pp->buffer_size (and set buf[newline] = '\\0'), but they do not ensure pp->buffer_size (the allocation size of buf) is >= the constant length passed to the comparison. If MHD_str_equal_caseless_n_ is implemented using string.h routines (e.g. memcmp/strncmp-style logic) that read the requested number of bytes regardless of the embedded '\\0', that call can read beyond the allocated buffer and thus violate MISRA C 2023 Rule 21.17. \n\nNote: MHD_str_equal_caseless_n_ itself is not a standard <string.h> function, so no definite violation can be declared without inspecting its implementation. However, from the caller\u2019s point of view the code is unsafe unless either (a) MHD_str_equal_caseless_n_ is proven to stop at the embedded '\\0' (or otherwise not read past the allocation), or (b) the caller first ensures pp->buffer_size >= the constant length (or newline >= the constant length) before calling. Absent such a guarantee, the reported violation is valid."
}