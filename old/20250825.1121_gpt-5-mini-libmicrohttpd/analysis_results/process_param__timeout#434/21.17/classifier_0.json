{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 21.17 is: Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of process_param__timeout:\n```c\nstatic enum PerfRepl_param_result\nprocess_param__timeout (const char *param_name, const char *param_tail,\n                        const char *next_param)\n{\n  unsigned int param_value;\n  enum PerfRepl_param_result value_res;\n\n  value_res = get_param_value (param_name, param_tail, next_param,\n                               &param_value);\n  if (PERF_RPL_PARAM_ERROR == value_res)\n    return value_res;\n\n  tool_params.timeout = param_value;\n  return value_res;\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nvalue_res = get_param_value (param_name, param_tail, next_param,\n                               &param_value);\n```\nFocus on the above code fragment and judge whether it violates the rule 21.17 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The fragment itself does not call any <string.h> function, so there is no direct evidence of a Rule 21.17 violation. However, a violation can occur if get_param_value uses string.h functions and the pointers passed are not valid for the operations performed. For example: if param_tail points at or beyond the end of its underlying buffer (e.g. param_tail == buffer + buffer_len) and get_param_value calls strlen(param_tail) or strcpy(local_buf, param_tail), that function will read past the bounds of the object referenced by param_tail (or copy too many bytes), violating MISRA C 2023 Rule 21.17. Determination of an actual violation requires review of get_param_value and the invariants/validity of param_name/param_tail/next_param."
}