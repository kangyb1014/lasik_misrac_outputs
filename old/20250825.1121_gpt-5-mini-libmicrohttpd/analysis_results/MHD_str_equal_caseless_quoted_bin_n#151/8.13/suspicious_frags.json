{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_str_equal_caseless_quoted_bin_n:\n```c\nbool\nMHD_str_equal_caseless_quoted_bin_n (const char *quoted,\n                                     size_t quoted_len,\n                                     const char *unquoted,\n                                     size_t unquoted_len)\n{\n  size_t i;\n  size_t j;\n  if (unquoted_len < quoted_len / 2)\n    return false;\n\n  j = 0;\n  for (i = 0; quoted_len > i && unquoted_len > j; ++i, ++j)\n  {\n    if ('\\\\' == quoted[i])\n    {\n      i++; /* Advance to the next character */\n      if (quoted_len == i)\n        return false; /* No character after escaping backslash */\n    }\n    if (! charsequalcaseless (quoted[i], unquoted[j]))\n      return false; /* Different characters */\n  }\n  if ((quoted_len != i) || (unquoted_len != j))\n    return false; /* The strings have different length */\n\n  return true;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_str_equal_caseless_quoted_bin_n:\n_MHD_static_inline bool\ncharsequalcaseless (const char c1, const char c2)\n{\n  return ( (c1 == c2) ||\n           (isasciiupper (c1) ?\n            ((c1 - 'A' + 'a') == c2) :\n            ((c1 == (c2 - 'A' + 'a')) && isasciiupper (c2))) );\n}\n...\n_MHD_static_inline bool\nisasciiupper (char c)\n{\n  return (c >= 'A') && (c <= 'Z');\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I examined the target function and the related inline helpers for pointer usage relevant to MISRA C 2023 Rule 8.13 (pointers should point to const-qualified types whenever possible). Findings that mean no fragments need investigation for this rule:\n\n- The target function MHD_str_equal_caseless_quoted_bin_n declares both input string pointers as const char * (quoted and unquoted). They are already const-qualified, satisfying the rule.\n- There are no other pointer variables or pointer parameters in the target function that lack const qualification. Indexing (quoted[i], unquoted[j]) reads from const-qualified pointers only.\n- The related helper functions shown (charsequalcaseless and isasciiupper) take characters by value (char), not pointers, so Rule 8.13 does not apply to them.\n- No pointer casts, pointer returns, or non-const pointer API usage appear in the provided code fragments that would suggest a potential violation.\n\nBecause all pointer parameters in the provided code are already const-qualified and there are no other pointer usages lacking const where const could reasonably be applied, there are no suspicious fragments to flag for investigation under Rule 8.13."
}