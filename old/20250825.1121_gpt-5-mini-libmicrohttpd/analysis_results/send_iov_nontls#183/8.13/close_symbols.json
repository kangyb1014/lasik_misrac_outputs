{
  "user_message": "Target function code is:\n```c\nstatic ssize_t\nsend_iov_nontls (struct MHD_Connection *connection,\n                 struct MHD_iovec_track_ *const r_iov,\n                 bool push_data)\n{\n  ssize_t res;\n  size_t items_to_send;\n#ifdef HAVE_SENDMSG\n  struct msghdr msg;\n#elif defined(MHD_WINSOCK_SOCKETS)\n  DWORD bytes_sent;\n  DWORD cnt_w;\n#endif /* MHD_WINSOCK_SOCKETS */\n\n  mhd_assert (0 == (connection->daemon->options & MHD_USE_TLS));\n\n  if ( (MHD_INVALID_SOCKET == connection->socket_fd) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    return MHD_ERR_NOTCONN_;\n  }\n\n  items_to_send = r_iov->cnt - r_iov->sent;\n#ifdef _MHD_IOV_MAX\n  if (_MHD_IOV_MAX < items_to_send)\n  {\n    mhd_assert (0 < _MHD_IOV_MAX);\n    if (0 == _MHD_IOV_MAX)\n      return MHD_ERR_NOTCONN_; /* Should never happen */\n    items_to_send = _MHD_IOV_MAX;\n    push_data = false; /* Incomplete response */\n  }\n#endif /* _MHD_IOV_MAX */\n#ifdef HAVE_SENDMSG\n  memset (&msg, 0, sizeof(struct msghdr));\n  msg.msg_iov = r_iov->iov + r_iov->sent;\n  msg.msg_iovlen = items_to_send;\n\n  pre_send_setopt (connection, true, push_data);\n#ifdef MHD_USE_MSG_MORE\n  res = sendmsg (connection->socket_fd, &msg,\n                 MSG_NOSIGNAL_OR_ZERO | (push_data ? 0 : MSG_MORE));\n#else  /* ! MHD_USE_MSG_MORE */\n  res = sendmsg (connection->socket_fd, &msg, MSG_NOSIGNAL_OR_ZERO);\n#endif /* ! MHD_USE_MSG_MORE */\n#elif defined(HAVE_WRITEV)\n  pre_send_setopt (connection, true, push_data);\n  res = writev (connection->socket_fd, r_iov->iov + r_iov->sent,\n                items_to_send);\n#elif defined(MHD_WINSOCK_SOCKETS)\n#ifdef _WIN64\n  if (items_to_send > UINT32_MAX)\n  {\n    cnt_w = UINT32_MAX;\n    push_data = false; /* Incomplete response */\n  }\n  else\n    cnt_w = (DWORD) items_to_send;\n#else  /* ! _WIN64 */\n  cnt_w = (DWORD) items_to_send;\n#endif /* ! _WIN64 */\n  pre_send_setopt (connection, true, push_data);\n  if (0 == WSASend (connection->socket_fd,\n                    (LPWSABUF) (r_iov->iov + r_iov->sent),\n                    cnt_w,\n                    &bytes_sent, 0, NULL, NULL))\n    res = (ssize_t) bytes_sent;\n  else\n    res = -1;\n#else /* !HAVE_SENDMSG && !HAVE_WRITEV && !MHD_WINSOCK_SOCKETS */\n#error No vector-send function available\n#endif\n\n  if (0 > res)\n  {\n    const int err = MHD_socket_get_error_ ();\n\n    if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n    {\n#ifdef EPOLL_SUPPORT\n      /* EAGAIN --- no longer write-ready */\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n      return MHD_ERR_AGAIN_;\n    }\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return MHD_ERR_AGAIN_;\n    if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n      return MHD_ERR_CONNRESET_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EPIPE_))\n      return MHD_ERR_PIPE_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n      return MHD_ERR_OPNOTSUPP_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n      return MHD_ERR_NOTCONN_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n      return MHD_ERR_INVAL_;\n    if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n      return MHD_ERR_NOMEM_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n      return MHD_ERR_BADF_;\n    /* Treat any other error as a hard error. */\n    return MHD_ERR_NOTCONN_;\n  }\n\n  /* Some data has been sent */\n  if (1)\n  {\n    size_t track_sent = (size_t) res;\n    /* Adjust the internal tracking information for the iovec to\n     * take this last send into account. */\n    while ((0 != track_sent) && (r_iov->iov[r_iov->sent].iov_len <= track_sent))\n    {\n      track_sent -= r_iov->iov[r_iov->sent].iov_len;\n      r_iov->sent++; /* The iov element has been completely sent */\n      mhd_assert ((r_iov->cnt > r_iov->sent) || (0 == track_sent));\n    }\n\n    if (r_iov->cnt == r_iov->sent)\n      post_send_setopt (connection, true, push_data);\n    else\n    {\n#ifdef EPOLL_SUPPORT\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n      if (0 != track_sent)\n      {\n        mhd_assert (r_iov->cnt > r_iov->sent);\n        /* The last iov element has been partially sent */\n        r_iov->iov[r_iov->sent].iov_base =\n          (void *) ((uint8_t *) r_iov->iov[r_iov->sent].iov_base + track_sent);\n        r_iov->iov[r_iov->sent].iov_len -= (MHD_iov_size_) track_sent;\n      }\n    }\n  }\n\n  return res;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'send_iov_nontls': {'callees': ['pre_send_setopt', 'post_send_setopt'], 'callers': ['MHD_send_iovec_']}, 'pre_send_setopt': {'callees': [], 'callers': ['MHD_send_data_', 'MHD_send_hdr_and_body_', 'MHD_send_sendfile_', 'send_iov_nontls']}, 'post_send_setopt': {'callees': ['MHD_DLOG'], 'callers': ['MHD_send_data_', 'MHD_send_hdr_and_body_', 'MHD_send_sendfile_', 'send_iov_nontls']}, 'MHD_send_iovec_': {'callees': ['send_iov_nontls'], 'callers': ['MHD_connection_handle_write']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA pointer should point to a const-qualified type whenever possible. \nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_iovec_track_ (definition)",
    "type of r_iov->iov array element (struct iovec or MHD_iovec) including fields iov_base and iov_len",
    "typedef MHD_iov_size_",
    "struct msghdr (definition: msg_iov and msg_iovlen types)",
    "sendmsg prototype/signature (library/header declaration)",
    "writev prototype/signature (library/header declaration)",
    "WSABUF / LPWSABUF structure definition (Windows) and WSASend prototype",
    "struct MHD_Connection (definition)"
  ],
  "explanation": "To decide whether any pointer in send_iov_nontls should be const-qualified (MISRA: pointers should point to const whenever possible) the analyzer must know the exact declarations and const-qualification requirements of all pointer-bearing types used and the external APIs called: \n\n- struct MHD_iovec_track_ (definition): The function takes r_iov and mutates its fields (sent, possibly iov[] entries). The analyzer must see the full struct to determine which members are modifiable and whether members that are pointers (or point to pointers) could/should be declared to point to const data.\n\n- type of r_iov->iov array element (struct iovec or MHD_iovec) including fields iov_base and iov_len: The crux of const-correctness here is the element type's iov_base declaration (e.g., void * vs const void *). The code reads from the memory pointed to by iov_base (send operations) and also updates the iov_base value (advancing the pointer) and iov_len. Knowing whether iov_base is declared as a pointer-to-const or non-const is required to judge if the current declaration violates the MISRA guidance or if changing it to point-to-const is feasible.\n\n- typedef MHD_iov_size_: iov_len is cast/adjusted using this type. Its exact signedness/typedef affects whether pointer-size arithmetic or modifications would require casts that interact with const qualification checks.\n\n- struct msghdr (definition: msg_iov and msg_iovlen types): sendmsg uses msghdr.msg_iov. The type of msg_iov (struct iovec * vs const struct iovec *) and whether msg_iov's element iov_base is const influence whether the iov structures used here must have non-const pointer members for API compatibility.\n\n- sendmsg prototype/signature: The prototype (and the const qualifiers it uses for its parameters) determines whether the buffers passed to sendmsg must be non-const (precluding changing iov_base to point-to-const) or whether const buffers are accepted. This directly impacts whether iov_base can be const-qualified.\n\n- writev prototype/signature: As with sendmsg, writev's signature and parameter const-qualification determine whether the iovec element types and their iov_base fields may be const-qualified.\n\n- WSABUF / LPWSABUF structure definition (Windows) and WSASend prototype: On Windows the code casts the iov array to LPWSABUF and calls WSASend; knowing the WSABUF.buf type (char * vs const char *) and WSASend signature is necessary to see if the buffer pointer must be non-const on Windows, which would prevent declaring iov_base as pointer-to-const portably.\n\n- struct MHD_Connection (definition): The function takes connection and may pass it to helpers; while not the primary constness concern, the analyzer should confirm whether pre_send_setopt/post_send_setopt (and other callers) require a non-const connection pointer and whether any connection members are pointers that could/should be const-qualified.\n\nCollecting these symbol definitions/prototypes lets the next analyst determine (a) which pointers in the iovec/track structures are only read by this code and thus are candidates for pointing-to-const, and (b) whether API compatibility (sendmsg/writev/WSASend and msghdr/iovec/WSABUF definitions) prevents making those pointers point-to-const. Without those declarations the const-correctness decision cannot be concluded."
}