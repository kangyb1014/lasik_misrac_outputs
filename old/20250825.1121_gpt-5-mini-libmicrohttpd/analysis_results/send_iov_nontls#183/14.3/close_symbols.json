{
  "user_message": "Target function code is:\n```c\nstatic ssize_t\nsend_iov_nontls (struct MHD_Connection *connection,\n                 struct MHD_iovec_track_ *const r_iov,\n                 bool push_data)\n{\n  ssize_t res;\n  size_t items_to_send;\n#ifdef HAVE_SENDMSG\n  struct msghdr msg;\n#elif defined(MHD_WINSOCK_SOCKETS)\n  DWORD bytes_sent;\n  DWORD cnt_w;\n#endif /* MHD_WINSOCK_SOCKETS */\n\n  mhd_assert (0 == (connection->daemon->options & MHD_USE_TLS));\n\n  if ( (MHD_INVALID_SOCKET == connection->socket_fd) ||\n       (MHD_CONNECTION_CLOSED == connection->state) )\n  {\n    return MHD_ERR_NOTCONN_;\n  }\n\n  items_to_send = r_iov->cnt - r_iov->sent;\n#ifdef _MHD_IOV_MAX\n  if (_MHD_IOV_MAX < items_to_send)\n  {\n    mhd_assert (0 < _MHD_IOV_MAX);\n    if (0 == _MHD_IOV_MAX)\n      return MHD_ERR_NOTCONN_; /* Should never happen */\n    items_to_send = _MHD_IOV_MAX;\n    push_data = false; /* Incomplete response */\n  }\n#endif /* _MHD_IOV_MAX */\n#ifdef HAVE_SENDMSG\n  memset (&msg, 0, sizeof(struct msghdr));\n  msg.msg_iov = r_iov->iov + r_iov->sent;\n  msg.msg_iovlen = items_to_send;\n\n  pre_send_setopt (connection, true, push_data);\n#ifdef MHD_USE_MSG_MORE\n  res = sendmsg (connection->socket_fd, &msg,\n                 MSG_NOSIGNAL_OR_ZERO | (push_data ? 0 : MSG_MORE));\n#else  /* ! MHD_USE_MSG_MORE */\n  res = sendmsg (connection->socket_fd, &msg, MSG_NOSIGNAL_OR_ZERO);\n#endif /* ! MHD_USE_MSG_MORE */\n#elif defined(HAVE_WRITEV)\n  pre_send_setopt (connection, true, push_data);\n  res = writev (connection->socket_fd, r_iov->iov + r_iov->sent,\n                items_to_send);\n#elif defined(MHD_WINSOCK_SOCKETS)\n#ifdef _WIN64\n  if (items_to_send > UINT32_MAX)\n  {\n    cnt_w = UINT32_MAX;\n    push_data = false; /* Incomplete response */\n  }\n  else\n    cnt_w = (DWORD) items_to_send;\n#else  /* ! _WIN64 */\n  cnt_w = (DWORD) items_to_send;\n#endif /* ! _WIN64 */\n  pre_send_setopt (connection, true, push_data);\n  if (0 == WSASend (connection->socket_fd,\n                    (LPWSABUF) (r_iov->iov + r_iov->sent),\n                    cnt_w,\n                    &bytes_sent, 0, NULL, NULL))\n    res = (ssize_t) bytes_sent;\n  else\n    res = -1;\n#else /* !HAVE_SENDMSG && !HAVE_WRITEV && !MHD_WINSOCK_SOCKETS */\n#error No vector-send function available\n#endif\n\n  if (0 > res)\n  {\n    const int err = MHD_socket_get_error_ ();\n\n    if (MHD_SCKT_ERR_IS_EAGAIN_ (err))\n    {\n#ifdef EPOLL_SUPPORT\n      /* EAGAIN --- no longer write-ready */\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n      return MHD_ERR_AGAIN_;\n    }\n    if (MHD_SCKT_ERR_IS_EINTR_ (err))\n      return MHD_ERR_AGAIN_;\n    if (MHD_SCKT_ERR_IS_REMOTE_DISCNN_ (err))\n      return MHD_ERR_CONNRESET_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EPIPE_))\n      return MHD_ERR_PIPE_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EOPNOTSUPP_))\n      return MHD_ERR_OPNOTSUPP_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_ENOTCONN_))\n      return MHD_ERR_NOTCONN_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EINVAL_))\n      return MHD_ERR_INVAL_;\n    if (MHD_SCKT_ERR_IS_LOW_RESOURCES_ (err))\n      return MHD_ERR_NOMEM_;\n    if (MHD_SCKT_ERR_IS_ (err, MHD_SCKT_EBADF_))\n      return MHD_ERR_BADF_;\n    /* Treat any other error as a hard error. */\n    return MHD_ERR_NOTCONN_;\n  }\n\n  /* Some data has been sent */\n  if (1)\n  {\n    size_t track_sent = (size_t) res;\n    /* Adjust the internal tracking information for the iovec to\n     * take this last send into account. */\n    while ((0 != track_sent) && (r_iov->iov[r_iov->sent].iov_len <= track_sent))\n    {\n      track_sent -= r_iov->iov[r_iov->sent].iov_len;\n      r_iov->sent++; /* The iov element has been completely sent */\n      mhd_assert ((r_iov->cnt > r_iov->sent) || (0 == track_sent));\n    }\n\n    if (r_iov->cnt == r_iov->sent)\n      post_send_setopt (connection, true, push_data);\n    else\n    {\n#ifdef EPOLL_SUPPORT\n      connection->epoll_state &=\n        ~((enum MHD_EpollState) MHD_EPOLL_STATE_WRITE_READY);\n#endif /* EPOLL_SUPPORT */\n      if (0 != track_sent)\n      {\n        mhd_assert (r_iov->cnt > r_iov->sent);\n        /* The last iov element has been partially sent */\n        r_iov->iov[r_iov->sent].iov_base =\n          (void *) ((uint8_t *) r_iov->iov[r_iov->sent].iov_base + track_sent);\n        r_iov->iov[r_iov->sent].iov_len -= (MHD_iov_size_) track_sent;\n      }\n    }\n  }\n\n  return res;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'send_iov_nontls': {'callees': ['pre_send_setopt', 'post_send_setopt'], 'callers': ['MHD_send_iovec_']}, 'pre_send_setopt': {'callees': [], 'callers': ['MHD_send_data_', 'MHD_send_hdr_and_body_', 'MHD_send_sendfile_', 'send_iov_nontls']}, 'post_send_setopt': {'callees': ['MHD_DLOG'], 'callers': ['MHD_send_data_', 'MHD_send_hdr_and_body_', 'MHD_send_sendfile_', 'send_iov_nontls']}, 'MHD_send_iovec_': {'callees': ['send_iov_nontls'], 'callers': ['MHD_connection_handle_write']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nControlling expressions shall not be invariant. Here are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_Connection (fields: socket_fd, state, daemon, epoll_state)",
    "struct MHD_Daemon (field: options)",
    "MHD_USE_TLS",
    "MHD_INVALID_SOCKET",
    "MHD_CONNECTION_CLOSED",
    "struct MHD_iovec_track_ (fields: cnt, sent, iov)",
    "struct iovec / MHD iov type (fields: iov_len, iov_base)",
    "MHD_iov_size_",
    "_MHD_IOV_MAX",
    "HAVE_SENDMSG",
    "HAVE_WRITEV",
    "MHD_WINSOCK_SOCKETS",
    "_WIN64",
    "MHD_USE_MSG_MORE",
    "EPOLL_SUPPORT",
    "MHD_socket_get_error_",
    "MHD_SCKT_ERR_IS_EAGAIN_",
    "MHD_SCKT_ERR_IS_EINTR_",
    "MHD_SCKT_ERR_IS_REMOTE_DISCNN_",
    "MHD_SCKT_ERR_IS_",
    "MHD_SCKT_EPIPE_",
    "MHD_SCKT_EOPNOTSUPP_",
    "MHD_SCKT_ENOTCONN_",
    "MHD_SCKT_EINVAL_",
    "MHD_SCKT_ERR_IS_LOW_RESOURCES_",
    "MHD_SCKT_EBADF_"
  ],
  "explanation": "To determine whether any of the function's controlling expressions are invariant (and thus whether the code violates MISRA C\u2019s \u201ccontrolling expressions shall not be invariant\u201d rule), the analyzer needs the definitions/types and values of all externally-defined symbols that affect those expressions or which control which code is compiled in. Reasons by group:\n\n- struct MHD_Connection (socket_fd, state, daemon, epoll_state) and struct MHD_Daemon (options) plus MHD_USE_TLS: the top-level if checks connection->socket_fd and connection->state and there is an mhd_assert testing daemon->options & MHD_USE_TLS. Knowing the types and legal ranges/semantics of these fields (and the MHD_USE_TLS macro bit) is necessary to decide whether those if conditions can ever be constant (always true/false) in valid builds.\n\n- MHD_INVALID_SOCKET and MHD_CONNECTION_CLOSED: these macros/constants are used directly in controlling expressions. Their concrete values (and how socket_fd/state are typed) determine whether the initial if is ever invariant.\n\n- struct MHD_iovec_track_ (cnt, sent, iov), struct iovec / MHD iov type (iov_len, iov_base) and MHD_iov_size_: the while-loop and subsequent ifs rely on r_iov->cnt, r_iov->sent, and the iov element lengths. The analyzer must know their types and value ranges to decide whether the while condition or the r_iov->cnt == r_iov->sent test could be invariant or otherwise constant.\n\n- _MHD_IOV_MAX: the guarded if (_MHD_IOV_MAX < items_to_send) is a controlling expression that could be compile-time or run-time invariant depending on how _MHD_IOV_MAX is defined; its definition is required to judge invariance and whether the branch is ever taken.\n\n- HAVE_SENDMSG, HAVE_WRITEV, MHD_WINSOCK_SOCKETS, _WIN64 (preprocessor feature macros): these control which send/IO code is compiled. To enumerate all controlling expressions present in the final build you must know which of these macros are defined; different builds produce different controlling expressions to analyze.\n\n- MHD_USE_MSG_MORE: affects the flags passed to sendmsg in a conditional compilation branch; included because it changes code paths and thus which controlling expressions exist in the compiled unit.\n\n- EPOLL_SUPPORT: gating of epoll_state updates changes whether those statements exist; presence/absence affects which conditional expressions (and their side-effects) the analyzer must consider.\n\n- MHD_socket_get_error_ and the MHD_SCKT_ERR_IS_* macros and MHD_SCKT_* error-code symbols (MHD_SCKT_ERR_IS_EAGAIN_, MHD_SCKT_ERR_IS_EINTR_, MHD_SCKT_ERR_IS_REMOTE_DISCNN_, MHD_SCKT_ERR_IS_, MHD_SCKT_EPIPE_, MHD_SCKT_EOPNOTSUPP_, MHD_SCKT_ENOTCONN_, MHD_SCKT_EINVAL_, MHD_SCKT_ERR_IS_LOW_RESOURCES_, MHD_SCKT_EBADF_): the long error-handling cascade is a sequence of controlling expressions that branch on the socket error. To decide whether any of those are invariant (e.g., macros that expand to constant true/false under some build), the analyzer needs the definitions of the error-query function and the error-test macros/values.\n\nIn short: to correctly classify every conditional in send_iov_nontls as invariant or not you must know the concrete definitions, types and values of the macros, structs and error-test helpers listed above and which preprocessor feature macros are set for the build being analyzed. Without these symbols you cannot reliably determine whether any controlling expression (notably the explicit if (1) in the code) is truly invariant in the target build or is conditional/removed by preprocessing."
}