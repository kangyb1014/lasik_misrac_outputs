{
  "user_message": "An agent A claimed that the following fill_v1_v2_form code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of fill_v1_v2_form.\n```c\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n    return MHD_NO;\n  snprintf (reply,\n            slen + 1,\n            SECOND_PAGE,\n            session->value_1,\n            session->value_2);\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    free (reply);\n    return MHD_NO;\n  }\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function fill_v1_v2_form declares its parameter as struct Session *session but never modifies *session (only reads session->value_1/2 and passes session to add_session_cookie). If add_session_cookie also only reads the session (i.e. does not modify the pointed-to Session), then the session pointer should be const-qualified (either the parameter of fill_v1_v2_form should be declared const struct Session *session, and/or add_session_cookie should accept a const struct Session *). Because the pointer is not const-qualified though it can be, this is a violation of MISRA C 2023 Rule 8.13.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not proven correct from the code shown. fill_v1_v2_form itself does not write through session (it only reads session->value_1/value_2), so in isolation the parameter could be const. However the function passes session to add_session_cookie(session, response). Because the prototype/implementation of add_session_cookie is not shown, we cannot tell whether that function modifies the Session object. If add_session_cookie takes a non-const pointer and/or mutates the Session, then fill_v1_v2_form must accept a non-const pointer and there is no MISRA violation. Only if add_session_cookie (and all other callees) are provably read-only could the parameter be changed to const struct Session * and then a violation would be present. Therefore agent A\u2019s blanket claim is not supported by the provided code \u2014 you must inspect add_session_cookie (and any other uses) before asserting a Rule 8.13 violation. Recommendation: if add_session_cookie is read-only, update its prototype to accept a const struct Session * and change fill_v1_v2_form accordingly; otherwise no change is possible."
}