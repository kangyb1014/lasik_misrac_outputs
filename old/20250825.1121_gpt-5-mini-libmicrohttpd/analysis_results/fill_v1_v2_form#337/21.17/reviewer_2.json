{
  "user_message": "An agent A claimed that the following fill_v1_v2_form code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of fill_v1_v2_form.\n```c\nstatic enum MHD_Result\nfill_v1_v2_form (const void *cls,\n                 const char *mime,\n                 struct Session *session,\n                 struct MHD_Connection *connection)\n{\n  enum MHD_Result ret;\n  char *reply;\n  struct MHD_Response *response;\n  size_t slen;\n  (void) cls; /* Unused. Silent compiler warning. */\n\n  slen = strlen (SECOND_PAGE) + strlen (session->value_1)\n         + strlen (session->value_2);\n  reply = malloc (slen + 1);\n  if (NULL == reply)\n    return MHD_NO;\n  snprintf (reply,\n            slen + 1,\n            SECOND_PAGE,\n            session->value_1,\n            session->value_2);\n  /* return static form */\n  response =\n    MHD_create_response_from_buffer_with_free_callback (slen,\n                                                        (void *) reply,\n                                                        &free);\n  if (NULL == response)\n  {\n    free (reply);\n    return MHD_NO;\n  }\n  add_session_cookie (session, response);\n  if (MHD_YES !=\n      MHD_add_response_header (response,\n                               MHD_HTTP_HEADER_CONTENT_ENCODING,\n                               mime))\n  {\n    fprintf (stderr,\n             \"Failed to set content encoding header!\\n\");\n  }\n  ret = MHD_queue_response (connection,\n                            MHD_HTTP_OK,\n                            response);\n  MHD_destroy_response (response);\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nstrlen is called on session->value_1 and session->value_2 without any guarantee they're valid, non-NULL, null-terminated objects. For example, if session->value_1 == NULL or if value_1 points to a char buffer that is not NUL-terminated, strlen(session->value_1) will read past the object bounds (undefined behaviour) and thus violate MISRA C 2023 Rule 21.17. Note: strlen(SECOND_PAGE) is safe (string literal), and the current slen calculation overestimates the required buffer (so no overflow from that), but the unchecked strlen calls on session fields are the violation.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function fill_v1_v2_form:\n#define SECOND_PAGE \"<html><head><title>Tell me more</title></head><body><a href=\\\"/\\\">previous</a> <form action=\\\"/S\\\" method=\\\"post\\\">%s, what is your job? <input type=\\\"text\\\" name=\\\"v2\\\" value=\\\"%s\\\" /><input type=\\\"submit\\\" value=\\\"Next\\\" /></form></body></html>\"\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's report is correct given the information shown. Rule 21.17 forbids uses of <string.h> functions that may read beyond the bounds of the objects referenced by their pointer parameters. In fill_v1_v2_form the code calls strlen(session->value_1) and strlen(session->value_2) with no check that those pointers are non-NULL and point to NUL-terminated character sequences. If either pointer is NULL or points to a non-terminated buffer, strlen will access memory out of bounds (undefined behaviour) and thus violate MISRA C 2023 Rule 21.17.\n\nOnly if it is guaranteed elsewhere in the program (by the definition and initialization of struct Session and all code that sets value_1/value_2) that these members are always valid, non-NULL, NUL-terminated strings would this specific use be compliant; no such guarantee is shown. Therefore, based on the provided code and context, the reported violation is correct. Suggested remediation: ensure the pointers are validated (non-NULL) and that buffers are NUL-terminated or use bounded/string-safe APIs with explicit maximum lengths and checks before calling strlen."
}