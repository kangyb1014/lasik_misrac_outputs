{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN struct MHD_PostProcessor *\nMHD_create_post_processor (struct MHD_Connection *connection,\n                           size_t buffer_size,\n                           MHD_PostDataIterator iter,\n                           void *iter_cls)\n{\n  struct MHD_PostProcessor *ret;\n  const char *encoding;\n  const char *boundary;\n  size_t blen;\n\n  if ( (buffer_size < 256) ||\n       (NULL == connection) ||\n       (NULL == iter))\n    MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n  encoding = NULL;\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONTENT_TYPE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_CONTENT_TYPE),\n                                     &encoding,\n                                     NULL))\n    return NULL;\n  mhd_assert (NULL != encoding);\n  boundary = NULL;\n  if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                   encoding,\n                                   MHD_STATICSTR_LEN_ (\n                                     MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                     encoding,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n      return NULL;\n    boundary =\n      &encoding[MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)];\n    /* Q: should this be \"strcasestr\"? */\n    boundary = strstr (boundary, \"boundary=\");\n    if (NULL == boundary)\n      return NULL; /* failed to determine boundary */\n    boundary += MHD_STATICSTR_LEN_ (\"boundary=\");\n    blen = strlen (boundary);\n    if ( (blen < 2) ||\n         (blen * 2 + 2 > buffer_size) )\n      return NULL;              /* (will be) out of memory or invalid boundary */\n    if ( (boundary[0] == '\"') &&\n         (boundary[blen - 1] == '\"') )\n    {\n      /* remove enclosing quotes */\n      ++boundary;\n      blen -= 2;\n    }\n  }\n  else\n    blen = 0;\n  buffer_size += 4; /* round up to get nice block sizes despite boundary search */\n\n  /* add +1 to ensure we ALWAYS have a zero-termination at the end */\n  if (NULL == (ret = MHD_calloc_ (1, sizeof (struct MHD_PostProcessor)\n                                  + buffer_size + 1)))\n    return NULL;\n  ret->connection = connection;\n  ret->ikvi = iter;\n  ret->cls = iter_cls;\n  ret->encoding = encoding;\n  ret->buffer_size = buffer_size;\n  ret->state = PP_Init;\n  ret->blen = blen;\n  ret->boundary = boundary;\n  ret->skip_rn = RN_Inactive;\n  return ret;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_create_post_processor': {'callees': ['__builtin_unreachable', 'MHD_lookup_connection_value_n', 'MHD_str_equal_caseless_n_'], 'callers': ['create_response', 'generate_page', 'answer_to_connection']}, '__builtin_unreachable': {'callees': [], 'callers': ['try_ready_normal_body', 'try_ready_chunked_body', 'process_request_body', 'MHD_update_last_activity_', 'MHD_connection_handle_write', 'cleanup_connection', 'MHD_connection_handle_idle', 'MHD_set_connection_option', 'MHD_ip_count_lock', 'MHD_ip_count_unlock', 'MHD_ip_limit_del', 'new_connection_prepare_', 'new_connection_close_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'internal_suspend_connection_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_cleanup_connections', 'MHD_epoll', 'close_connection', 'MHD_quiesce_daemon', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_stop_daemon', 'MHD_create_response_from_iovec', 'MHD_destroy_response', 'MHD_increment_response_rc', 'MHD_create_post_processor', 'post_process_urlencoded', 'post_process_multipart', 'check_nonce_nc', 'calculate_add_nonce', 'digest_auth_check_all_inner', 'MHD_digest_auth_check_digest3', 'MHD_digest_auth_check2', 'MHD_digest_auth_check_digest2', 'queue_auth_required_response3_inner', 'MHD_queue_auth_fail_response2']}, 'MHD_lookup_connection_value_n': {'callees': [], 'callers': ['MHD_lookup_connection_value', 'need_100_continue', 'get_no_space_err_status_code', 'parse_cookie_header', 'parse_connection_headers', 'MHD_create_post_processor', 'ahc_cb']}, 'MHD_str_equal_caseless_n_': {'callees': ['charsequalcaseless'], 'callers': ['MHD_create_post_processor', 'try_match_header', 'process_multipart_headers', 'post_process_multipart', 'MHD_post_process']}, 'create_response': {'callees': ['MHD_create_post_processor', 'get_session', 'MHD_post_process', 'MHD_destroy_post_processor', 'MHD_create_response_from_buffer_static', 'MHD_queue_response', 'MHD_destroy_response'], 'callers': []}, 'generate_page': {'callees': ['MHD_queue_response', 'MHD_create_response_from_fd', 'MHD_add_response_header', 'MHD_destroy_response', 'MHD_create_post_processor', 'MHD_post_process', 'MHD_destroy_post_processor', 'update_directory', 'return_directory_response'], 'callers': []}, 'answer_to_connection': {'callees': ['MHD_create_response_from_buffer_static', 'MHD_add_response_header', 'MHD_queue_response', 'MHD_destroy_response', 'MHD_get_connection_values', 'MHD_create_response_from_fd_at_offset64', 'MHD_basic_auth_get_username_password3', 'MHD_queue_basic_auth_required_response3', 'MHD_free', 'MHD_create_post_processor', 'send_page', 'MHD_post_process'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nControlling expressions shall not be invariant. Here are exceptions to this rule:\n1. Invariants that are used to create infinite loops are permitted.\n2. A do-while loop with an essentially Boolean controlling expression that evaluates to false and satisfies the constraints and semantics for an integer constant expression is permitted.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_lookup_connection_value_n",
    "MHD_NO",
    "MHD_HEADER_KIND",
    "MHD_HTTP_HEADER_CONTENT_TYPE",
    "MHD_STATICSTR_LEN_",
    "MHD_str_equal_caseless_n_",
    "charsequalcaseless",
    "MHD_HTTP_POST_ENCODING_FORM_URLENCODED",
    "MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA",
    "strstr",
    "strlen",
    "MHD_calloc_",
    "MHD_PANIC"
  ],
  "explanation": "For checking the MISRA rule about invariant controlling expressions we must inspect every function/macro/constant that participates in a controlling expression or that can make such an expression constant. Reason for each symbol:\n\n- MHD_lookup_connection_value_n\n  Used directly in the controlling expression 'if (MHD_NO == MHD_lookup_connection_value_n(...))'. You must know whether this function can return a fixed/compile-time constant or whether its return depends on runtime connection state.\n\n- MHD_NO\n  The value compared against the function return. Its definition (macro/enum) is required to understand the comparison semantics and whether it could make the controlling expression invariant.\n\n- MHD_HEADER_KIND and MHD_HTTP_HEADER_CONTENT_TYPE\n  Arguments passed to MHD_lookup_connection_value_n. Their definitions/values are necessary to understand how lookup behaves (and whether the lookup call could be reduced to a constant for the given parameters).\n\n- MHD_STATICSTR_LEN_\n  Macro used to compute literal lengths passed into MHD_lookup_connection_value_n and MHD_str_equal_caseless_n_. It affects the arguments to those calls; knowing whether it expands to a compile-time constant (and how it is used) is needed to judge invariance.\n\n- MHD_str_equal_caseless_n_\n  Appears in controlling expressions 'if (! MHD_str_equal_caseless_n_(...))' and again for the multipart check. Its implementation/semantics determine whether the call can be a compile-time constant or otherwise invariant given the provided arguments.\n\n- charsequalcaseless\n  The call graph shows MHD_str_equal_caseless_n_ calls this helper. To fully reason whether MHD_str_equal_caseless_n_ can always return the same value (making the if controlling expression invariant) the helper's behavior must be inspected.\n\n- MHD_HTTP_POST_ENCODING_FORM_URLENCODED and MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA\n  String constants compared to the runtime 'encoding' value inside MHD_str_equal_caseless_n_. Their definitions (string contents, possible macros) affect the comparison and are needed to decide if the comparison can be invariant.\n\n- strstr\n  Used in 'boundary = strstr(boundary, \"boundary=\")' and then tested in 'if (NULL == boundary)'. strstr's semantics determine whether that controlling expression can be invariant for given input; include it to reason about runtime dependency.\n\n- strlen\n  Used in 'blen = strlen(boundary)' and influences subsequent controlling expressions (blen < 2, blen * 2 + 2 > buffer_size). strlen's semantics are standard but required to trace whether blen (and the dependent comparisons) can be constant.\n\n- MHD_calloc_\n  Used in the allocation check 'if (NULL == (ret = MHD_calloc_(...)))'. Its behavior determines whether the allocation test is a runtime-dependent control or could be treated as invariant in some build/configurations.\n\n- MHD_PANIC\n  Invoked when the first precondition controlling expression is true. Its definition is needed to understand whether that branch is special/can be optimized away or replaced by something that affects invariance analysis.\n\nThese symbols are the minimal set that directly appear in or determine the outcomes of the controlling expressions in MHD_create_post_processor; inspecting their definitions/implementations is necessary to decide whether any of the controlling expressions in the function are invariant (constant) and thus would violate the MISRA rule."
}