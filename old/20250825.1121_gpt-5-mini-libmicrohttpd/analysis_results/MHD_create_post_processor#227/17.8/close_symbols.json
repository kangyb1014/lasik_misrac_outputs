{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN struct MHD_PostProcessor *\nMHD_create_post_processor (struct MHD_Connection *connection,\n                           size_t buffer_size,\n                           MHD_PostDataIterator iter,\n                           void *iter_cls)\n{\n  struct MHD_PostProcessor *ret;\n  const char *encoding;\n  const char *boundary;\n  size_t blen;\n\n  if ( (buffer_size < 256) ||\n       (NULL == connection) ||\n       (NULL == iter))\n    MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n  encoding = NULL;\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONTENT_TYPE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_CONTENT_TYPE),\n                                     &encoding,\n                                     NULL))\n    return NULL;\n  mhd_assert (NULL != encoding);\n  boundary = NULL;\n  if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                   encoding,\n                                   MHD_STATICSTR_LEN_ (\n                                     MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                     encoding,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n      return NULL;\n    boundary =\n      &encoding[MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)];\n    /* Q: should this be \"strcasestr\"? */\n    boundary = strstr (boundary, \"boundary=\");\n    if (NULL == boundary)\n      return NULL; /* failed to determine boundary */\n    boundary += MHD_STATICSTR_LEN_ (\"boundary=\");\n    blen = strlen (boundary);\n    if ( (blen < 2) ||\n         (blen * 2 + 2 > buffer_size) )\n      return NULL;              /* (will be) out of memory or invalid boundary */\n    if ( (boundary[0] == '\"') &&\n         (boundary[blen - 1] == '\"') )\n    {\n      /* remove enclosing quotes */\n      ++boundary;\n      blen -= 2;\n    }\n  }\n  else\n    blen = 0;\n  buffer_size += 4; /* round up to get nice block sizes despite boundary search */\n\n  /* add +1 to ensure we ALWAYS have a zero-termination at the end */\n  if (NULL == (ret = MHD_calloc_ (1, sizeof (struct MHD_PostProcessor)\n                                  + buffer_size + 1)))\n    return NULL;\n  ret->connection = connection;\n  ret->ikvi = iter;\n  ret->cls = iter_cls;\n  ret->encoding = encoding;\n  ret->buffer_size = buffer_size;\n  ret->state = PP_Init;\n  ret->blen = blen;\n  ret->boundary = boundary;\n  ret->skip_rn = RN_Inactive;\n  return ret;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_create_post_processor': {'callees': ['__builtin_unreachable', 'MHD_lookup_connection_value_n', 'MHD_str_equal_caseless_n_'], 'callers': ['create_response', 'generate_page', 'answer_to_connection']}, '__builtin_unreachable': {'callees': [], 'callers': ['try_ready_normal_body', 'try_ready_chunked_body', 'process_request_body', 'MHD_update_last_activity_', 'MHD_connection_handle_write', 'cleanup_connection', 'MHD_connection_handle_idle', 'MHD_set_connection_option', 'MHD_ip_count_lock', 'MHD_ip_count_unlock', 'MHD_ip_limit_del', 'new_connection_prepare_', 'new_connection_close_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'internal_suspend_connection_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_cleanup_connections', 'MHD_epoll', 'close_connection', 'MHD_quiesce_daemon', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_stop_daemon', 'MHD_create_response_from_iovec', 'MHD_destroy_response', 'MHD_increment_response_rc', 'MHD_create_post_processor', 'post_process_urlencoded', 'post_process_multipart', 'check_nonce_nc', 'calculate_add_nonce', 'digest_auth_check_all_inner', 'MHD_digest_auth_check_digest3', 'MHD_digest_auth_check2', 'MHD_digest_auth_check_digest2', 'queue_auth_required_response3_inner', 'MHD_queue_auth_fail_response2']}, 'MHD_lookup_connection_value_n': {'callees': [], 'callers': ['MHD_lookup_connection_value', 'need_100_continue', 'get_no_space_err_status_code', 'parse_cookie_header', 'parse_connection_headers', 'MHD_create_post_processor', 'ahc_cb']}, 'MHD_str_equal_caseless_n_': {'callees': ['charsequalcaseless'], 'callers': ['MHD_create_post_processor', 'try_match_header', 'process_multipart_headers', 'post_process_multipart', 'MHD_post_process']}, 'create_response': {'callees': ['MHD_create_post_processor', 'get_session', 'MHD_post_process', 'MHD_destroy_post_processor', 'MHD_create_response_from_buffer_static', 'MHD_queue_response', 'MHD_destroy_response'], 'callers': []}, 'generate_page': {'callees': ['MHD_queue_response', 'MHD_create_response_from_fd', 'MHD_add_response_header', 'MHD_destroy_response', 'MHD_create_post_processor', 'MHD_post_process', 'MHD_destroy_post_processor', 'update_directory', 'return_directory_response'], 'callers': []}, 'answer_to_connection': {'callees': ['MHD_create_response_from_buffer_static', 'MHD_add_response_header', 'MHD_queue_response', 'MHD_destroy_response', 'MHD_get_connection_values', 'MHD_create_response_from_fd_at_offset64', 'MHD_basic_auth_get_username_password3', 'MHD_queue_basic_auth_required_response3', 'MHD_free', 'MHD_create_post_processor', 'send_page', 'MHD_post_process'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_PostProcessor",
    "MHD_calloc_",
    "MHD_lookup_connection_value_n",
    "MHD_str_equal_caseless_n_",
    "MHD_STATICSTR_LEN_",
    "MHD_HTTP_POST_ENCODING_FORM_URLENCODED",
    "MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA",
    "MHD_PostDataIterator",
    "MHD_PANIC",
    "mhd_assert",
    "strstr",
    "strlen",
    "PP_Init",
    "RN_Inactive"
  ],
  "explanation": "To determine if the function violates the MISRA rule \"A function parameter should not be modified\" we must check both direct assignments to parameter variables and any indirect/hidden modifications caused by called macros/functions or by confusing aliasing. The listed symbols are required for that analysis for these reasons:\n\n- struct MHD_PostProcessor: needed to verify assignments like ret->connection = connection, ret->ikvi = iter, ret->cls = iter_cls write into the newly allocated object fields (allowed) and not into the parameter variables themselves.\n\n- MHD_calloc_: the allocator is passed an expression including buffer_size (after buffer_size += 4). We need its prototype/definition to ensure it has no side effects (e.g., is not a macro that could modify its arguments) and to understand expected allocation semantics.\n\n- MHD_lookup_connection_value_n: this call takes connection and returns an encoding pointer. We must ensure that this function does not itself modify the 'connection' parameter variable (e.g. via a macro or by redefining the symbol) or otherwise cause aliasing that would make subsequent uses appear as parameter modification.\n\n- MHD_str_equal_caseless_n_: used to compare encoding; needed to verify it has no side-effects on the parameter variables (encoding, connection, etc.).\n\n- MHD_STATICSTR_LEN_: macro used repeatedly when computing offsets into encoding; required to ensure it does not expand in a way that modifies function parameters.\n\n- MHD_HTTP_POST_ENCODING_FORM_URLENCODED and MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA: constants/macros used in comparisons and pointer arithmetic; included to check whether they are normal string literals/consts (no side effects) and to understand how 'boundary' is derived (ensures pointer arithmetic does not alias any parameter variable).\n\n- MHD_PostDataIterator: typedef/type of iter; required to confirm iter is a value (function pointer or similar) stored into ret->ikvi and not modified; also to check whether assigning iter to the struct might in any way modify the iter parameter (it does not, but the typedef confirms semantics).\n\n- MHD_PANIC and mhd_assert: error-handling macros/functions used early in the function; need to ensure their expansion or implementation does not reassign any of the function parameters (e.g. unusual macros that mutate arguments).\n\n- strstr and strlen: standard functions used to compute boundary and blen; included to ensure they don't have side-effects on local parameters (they do not), and to verify whether 'boundary' points into an object that could alias a parameter.\n\n- PP_Init and RN_Inactive: enum/constant values assigned into ret->state and ret->skip_rn. Including them lets the analyzer confirm these assignments affect only the allocated object, not any parameter.\n\nNote: The primary apparent MISRA violation in the function is the statement \"buffer_size += 4;\" because buffer_size is a value parameter. The above symbols are the relevant close symbols needed to rule out any hidden/indirect modification of the parameters (for example via macros or called routines) and to confirm that other assignments in the function target fields of the newly allocated object, not the parameters themselves."
}