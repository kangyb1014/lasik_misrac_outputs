{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN struct MHD_PostProcessor *\nMHD_create_post_processor (struct MHD_Connection *connection,\n                           size_t buffer_size,\n                           MHD_PostDataIterator iter,\n                           void *iter_cls)\n{\n  struct MHD_PostProcessor *ret;\n  const char *encoding;\n  const char *boundary;\n  size_t blen;\n\n  if ( (buffer_size < 256) ||\n       (NULL == connection) ||\n       (NULL == iter))\n    MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n  encoding = NULL;\n  if (MHD_NO ==\n      MHD_lookup_connection_value_n (connection,\n                                     MHD_HEADER_KIND,\n                                     MHD_HTTP_HEADER_CONTENT_TYPE,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_HEADER_CONTENT_TYPE),\n                                     &encoding,\n                                     NULL))\n    return NULL;\n  mhd_assert (NULL != encoding);\n  boundary = NULL;\n  if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_FORM_URLENCODED,\n                                   encoding,\n                                   MHD_STATICSTR_LEN_ (\n                                     MHD_HTTP_POST_ENCODING_FORM_URLENCODED)))\n  {\n    if (! MHD_str_equal_caseless_n_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA,\n                                     encoding,\n                                     MHD_STATICSTR_LEN_ (\n                                       MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)))\n      return NULL;\n    boundary =\n      &encoding[MHD_STATICSTR_LEN_ (MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA)];\n    /* Q: should this be \"strcasestr\"? */\n    boundary = strstr (boundary, \"boundary=\");\n    if (NULL == boundary)\n      return NULL; /* failed to determine boundary */\n    boundary += MHD_STATICSTR_LEN_ (\"boundary=\");\n    blen = strlen (boundary);\n    if ( (blen < 2) ||\n         (blen * 2 + 2 > buffer_size) )\n      return NULL;              /* (will be) out of memory or invalid boundary */\n    if ( (boundary[0] == '\"') &&\n         (boundary[blen - 1] == '\"') )\n    {\n      /* remove enclosing quotes */\n      ++boundary;\n      blen -= 2;\n    }\n  }\n  else\n    blen = 0;\n  buffer_size += 4; /* round up to get nice block sizes despite boundary search */\n\n  /* add +1 to ensure we ALWAYS have a zero-termination at the end */\n  if (NULL == (ret = MHD_calloc_ (1, sizeof (struct MHD_PostProcessor)\n                                  + buffer_size + 1)))\n    return NULL;\n  ret->connection = connection;\n  ret->ikvi = iter;\n  ret->cls = iter_cls;\n  ret->encoding = encoding;\n  ret->buffer_size = buffer_size;\n  ret->state = PP_Init;\n  ret->blen = blen;\n  ret->boundary = boundary;\n  ret->skip_rn = RN_Inactive;\n  return ret;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_create_post_processor': {'callees': ['__builtin_unreachable', 'MHD_lookup_connection_value_n', 'MHD_str_equal_caseless_n_'], 'callers': ['create_response', 'generate_page', 'answer_to_connection']}, '__builtin_unreachable': {'callees': [], 'callers': ['try_ready_normal_body', 'try_ready_chunked_body', 'process_request_body', 'MHD_update_last_activity_', 'MHD_connection_handle_write', 'cleanup_connection', 'MHD_connection_handle_idle', 'MHD_set_connection_option', 'MHD_ip_count_lock', 'MHD_ip_count_unlock', 'MHD_ip_limit_del', 'new_connection_prepare_', 'new_connection_close_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'internal_suspend_connection_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_cleanup_connections', 'MHD_epoll', 'close_connection', 'MHD_quiesce_daemon', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_stop_daemon', 'MHD_create_response_from_iovec', 'MHD_destroy_response', 'MHD_increment_response_rc', 'MHD_create_post_processor', 'post_process_urlencoded', 'post_process_multipart', 'check_nonce_nc', 'calculate_add_nonce', 'digest_auth_check_all_inner', 'MHD_digest_auth_check_digest3', 'MHD_digest_auth_check2', 'MHD_digest_auth_check_digest2', 'queue_auth_required_response3_inner', 'MHD_queue_auth_fail_response2']}, 'MHD_lookup_connection_value_n': {'callees': [], 'callers': ['MHD_lookup_connection_value', 'need_100_continue', 'get_no_space_err_status_code', 'parse_cookie_header', 'parse_connection_headers', 'MHD_create_post_processor', 'ahc_cb']}, 'MHD_str_equal_caseless_n_': {'callees': ['charsequalcaseless'], 'callers': ['MHD_create_post_processor', 'try_match_header', 'process_multipart_headers', 'post_process_multipart', 'MHD_post_process']}, 'create_response': {'callees': ['MHD_create_post_processor', 'get_session', 'MHD_post_process', 'MHD_destroy_post_processor', 'MHD_create_response_from_buffer_static', 'MHD_queue_response', 'MHD_destroy_response'], 'callers': []}, 'generate_page': {'callees': ['MHD_queue_response', 'MHD_create_response_from_fd', 'MHD_add_response_header', 'MHD_destroy_response', 'MHD_create_post_processor', 'MHD_post_process', 'MHD_destroy_post_processor', 'update_directory', 'return_directory_response'], 'callers': []}, 'answer_to_connection': {'callees': ['MHD_create_response_from_buffer_static', 'MHD_add_response_header', 'MHD_queue_response', 'MHD_destroy_response', 'MHD_get_connection_values', 'MHD_create_response_from_fd_at_offset64', 'MHD_basic_auth_get_username_password3', 'MHD_queue_basic_auth_required_response3', 'MHD_free', 'MHD_create_post_processor', 'send_page', 'MHD_post_process'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_EXTERN",
    "MHD_PANIC",
    "_",
    "MHD_NO",
    "MHD_lookup_connection_value_n",
    "MHD_HEADER_KIND",
    "MHD_HTTP_HEADER_CONTENT_TYPE",
    "MHD_STATICSTR_LEN_",
    "mhd_assert",
    "MHD_str_equal_caseless_n_",
    "charsequalcaseless",
    "MHD_HTTP_POST_ENCODING_FORM_URLENCODED",
    "MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA",
    "MHD_calloc_",
    "struct MHD_PostProcessor",
    "PP_Init",
    "RN_Inactive",
    "struct MHD_Connection",
    "MHD_PostDataIterator"
  ],
  "explanation": "Each listed symbol can hide or expand to compiler/language extensions or constructs that must be inspected to decide whether the target function uses a language extension (the MISRA rule in question). Brief reasons: \n\n- _MHD_EXTERN: storage-class/visibility macro may expand to compiler-specific declspec/attribute (e.g. __declspec, __attribute__((...))) \u2014 must check for extensions. \n- MHD_PANIC: likely a macro that may use compiler builtins, statement-expressions, or attributes (noreturn) or implementation-specific behaviour \u2014 inspect expansion. \n- _: gettext/localisation macro may be a macro or function that could use extension-style constructs; check definition. \n- MHD_NO: symbolic constant/enum may be defined via non-standard enum/constant constructs; check to ensure no extension usage in its definition. \n- MHD_lookup_connection_value_n: function prototype/definition may include non-standard attributes (__attribute__, __noreturn, format, nonnull), inline assembler, or GCC builtins \u2014 inspect its declaration. \n- MHD_HEADER_KIND / MHD_HTTP_HEADER_CONTENT_TYPE: these macros/constants might be defined using extensiony constructs (e.g. compound literals, statement expressions) \u2014 verify. \n- MHD_STATICSTR_LEN_: macro used heavily; macros sometimes use GNU statement-expression ({ ... }) or typeof, or other extensions to compute lengths \u2014 its definition must be checked. \n- mhd_assert: assertion macro may use compiler builtins, statement-exprs, or other non-standard behavior \u2014 inspect. \n- MHD_str_equal_caseless_n_: could be a macro or inline function built with compiler extensions (statement-expr, GNU typeof, attributes) or call an extension helper \u2014 check its implementation. \n- charsequalcaseless: implementation called by MHD_str_equal_caseless_n_; inspect for extension usage (e.g. asm, builtin intrinsics). \n- MHD_HTTP_POST_ENCODING_FORM_URLENCODED / MHD_HTTP_POST_ENCODING_MULTIPART_FORMDATA: string macros/constants \u2014 ensure they are plain string literals and not produced by extension macros. \n- MHD_calloc_: allocation wrapper macro/function \u2014 may use compiler-specific allocation attributes or builtin functions (e.g. __builtin_malloc) or zero-length array assumptions; inspect. \n- struct MHD_PostProcessor: the struct layout must be checked for language-extension uses such as zero-length arrays (char buf[0]) which are a GNU extension, use of flexible-array members (pre-C99 behavior), anonymous struct/union (C11 feature or compiler extension), or bit-field types using non-standard widths \u2014 these affect whether the code uses extensions. \n- PP_Init: enum/constant used for state; enum definition should be checked for any non-standard extension usage. \n- RN_Inactive: same as PP_Init \u2014 may be enum/macro; inspect. \n- struct MHD_Connection: its definition may include anonymous unions/structs, zero-length arrays, or other extensions \u2014 examine it. \n- MHD_PostDataIterator: typedef for the callback \u2014 must check prototype for use of varargs, GCC attributes, function-type extensions, or non-standard calling conventions.\n\nInspecting the definitions/headers for these symbols will reveal if the target function (via its signature, macros, struct usage, or calls) relies on compiler/language extensions that would violate the MISRA rule."
}