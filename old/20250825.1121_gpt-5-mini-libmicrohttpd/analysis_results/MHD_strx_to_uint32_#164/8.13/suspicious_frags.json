{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_strx_to_uint32_:\n```c\nsize_t\nMHD_strx_to_uint32_ (const char *str,\n                     uint32_t *out_val)\n{\n  const char *const start = str;\n  uint32_t res;\n  int digit;\n\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  digit = toxdigitvalue (*str);\n  while (digit >= 0)\n  {\n    if ( (res < (UINT32_MAX / 16)) ||\n         ((res == (UINT32_MAX / 16)) &&\n          ( (uint32_t) digit <= (UINT32_MAX % 16)) ) )\n    {\n      res *= 16;\n      res += (unsigned int) digit;\n    }\n    else\n      return 0;\n    str++;\n    digit = toxdigitvalue (*str);\n  }\n\n  if (str - start > 0)\n    *out_val = res;\n  return (size_t) (str - start);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_strx_to_uint32_:\n_MHD_static_inline int\ntoxdigitvalue (char c)\n{\n#if ! defined(MHD_FAVOR_SMALL_CODE)\n  switch ((unsigned char) c)\n  {\n#if 0 /* Disabled to give the compiler a hint about low probability */\n  case 0x00U:    /* NUL */\n  case 0x01U:    /* SOH */\n  case 0x02U:    /* STX */\n  case 0x03U:    /* ETX */\n  case 0x04U:    /* EOT */\n  case 0x05U:    /* ENQ */\n  case 0x06U:    /* ACK */\n  case 0x07U:    /* BEL */\n  case 0x08U:    /* BS */\n  case 0x09U:    /* HT */\n  case 0x0AU:    /* LF */\n  case 0x0BU:    /* VT */\n  case 0x0CU:    /* FF */\n  case 0x0DU:    /* CR */\n  case 0x0EU:    /* SO */\n  case 0x0FU:    /* SI */\n  case 0x10U:    /* DLE */\n  case 0x11U:    /* DC1 */\n  case 0x12U:    /* DC2 */\n  case 0x13U:    /* DC3 */\n  case 0x14U:    /* DC4 */\n  case 0x15U:    /* NAK */\n  case 0x16U:    /* SYN */\n  case 0x17U:    /* ETB */\n  case 0x18U:    /* CAN */\n  case 0x19U:    /* EM */\n  case 0x1AU:    /* SUB */\n  case 0x1BU:    /* ESC */\n  case 0x1CU:    /* FS */\n  case 0x1DU:    /* GS */\n  case 0x1EU:    /* RS */\n  case 0x1FU:    /* US */\n  case 0x20U:    /* ' ' */\n  case 0x21U:    /* '!' */\n  case 0x22U:    /* '\"' */\n  case 0x23U:    /* '#' */\n  case 0x24U:    /* '$' */\n  case 0x25U:    /* '%' */\n  case 0x26U:    /* '&' */\n  case 0x27U:    /* '\\'' */\n  case 0x28U:    /* '(' */\n  case 0x29U:    /* ')' */\n  case 0x2AU:    /* '*' */\n  case 0x2BU:    /* '+' */\n  case 0x2CU:    /* ',' */\n  case 0x2DU:    /* '-' */\n  case 0x2EU:    /* '.' */\n  case 0x2FU:    /* '/' */\n    return -1;\n#endif\n  case 0x30U: /* '0' */\n    return 0;\n  case 0x31U: /* '1' */\n    return 1;\n  case 0x32U: /* '2' */\n    return 2;\n  case 0x33U: /* '3' */\n    return 3;\n  case 0x34U: /* '4' */\n    return 4;\n  case 0x35U: /* '5' */\n    return 5;\n  case 0x36U: /* '6' */\n    return 6;\n  case 0x37U: /* '7' */\n    return 7;\n  case 0x38U: /* '8' */\n    return 8;\n  case 0x39U: /* '9' */\n    return 9;\n#if 0         /* Disabled to give the compiler a hint about low probability */\n  case 0x3AU: /* ':' */\n  case 0x3BU: /* ';' */\n  case 0x3CU: /* '<' */\n  case 0x3DU: /* '=' */\n  case 0x3EU: /* '>' */\n  case 0x3FU: /* '?' */\n  case 0x40U: /* '@' */\n    return -1;\n#endif\n  case 0x41U: /* 'A' */\n    return 0xAU;\n  case 0x42U: /* 'B' */\n    return 0xBU;\n  case 0x43U: /* 'C' */\n    return 0xCU;\n  case 0x44U: /* 'D' */\n    return 0xDU;\n  case 0x45U: /* 'E' */\n    return 0xEU;\n  case 0x46U: /* 'F' */\n    return 0xFU;\n#if 0         /* Disabled to give the compiler a hint about low probability */\n  case 0x47U: /* 'G' */\n  case 0x48U: /* 'H' */\n  case 0x49U: /* 'I' */\n  case 0x4AU: /* 'J' */\n  case 0x4BU: /* 'K' */\n  case 0x4CU: /* 'L' */\n  case 0x4DU: /* 'M' */\n  case 0x4EU: /* 'N' */\n  case 0x4FU: /* 'O' */\n  case 0x50U: /* 'P' */\n  case 0x51U: /* 'Q' */\n  case 0x52U: /* 'R' */\n  case 0x53U: /* 'S' */\n  case 0x54U: /* 'T' */\n  case 0x55U: /* 'U' */\n  case 0x56U: /* 'V' */\n  case 0x57U: /* 'W' */\n  case 0x58U: /* 'X' */\n  case 0x59U: /* 'Y' */\n  case 0x5AU: /* 'Z' */\n  case 0x5BU: /* '[' */\n  case 0x5CU: /* '\\' */\n  case 0x5DU: /* ']' */\n  case 0x5EU: /* '^' */\n  case 0x5FU: /* '_' */\n  case 0x60U: /* '`' */\n    return -1;\n#endif\n  case 0x61U: /* 'a' */\n    return 0xAU;\n  case 0x62U: /* 'b' */\n    return 0xBU;\n  case 0x63U: /* 'c' */\n    return 0xCU;\n  case 0x64U: /* 'd' */\n    return 0xDU;\n  case 0x65U: /* 'e' */\n    return 0xEU;\n  case 0x66U: /* 'f' */\n    return 0xFU;\n#if 0         /* Disabled to give the compiler a hint about low probability */\n  case 0x67U: /* 'g' */\n  case 0x68U: /* 'h' */\n  case 0x69U: /* 'i' */\n  case 0x6AU: /* 'j' */\n  case 0x6BU: /* 'k' */\n  case 0x6CU: /* 'l' */\n  case 0x6DU: /* 'm' */\n  case 0x6EU: /* 'n' */\n  case 0x6FU: /* 'o' */\n  case 0x70U: /* 'p' */\n  case 0x71U: /* 'q' */\n  case 0x72U: /* 'r' */\n  case 0x73U: /* 's' */\n  case 0x74U: /* 't' */\n  case 0x75U: /* 'u' */\n  case 0x76U: /* 'v' */\n  case 0x77U: /* 'w' */\n  case 0x78U: /* 'x' */\n  case 0x79U: /* 'y' */\n  case 0x7AU: /* 'z' */\n  case 0x7BU: /* '{' */\n  case 0x7CU: /* '|' */\n  case 0x7DU: /* '}' */\n  case 0x7EU: /* '~' */\n  case 0x7FU: /* DEL */\n  case 0x80U: /* EXT */\n  case 0x81U: /* EXT */\n  case 0x82U: /* EXT */\n  case 0x83U: /* EXT */\n  case 0x84U: /* EXT */\n  case 0x85U: /* EXT */\n  case 0x86U: /* EXT */\n  case 0x87U: /* EXT */\n  case 0x88U: /* EXT */\n  case 0x89U: /* EXT */\n  case 0x8AU: /* EXT */\n  case 0x8BU: /* EXT */\n  case 0x8CU: /* EXT */\n  case 0x8DU: /* EXT */\n  case 0x8EU: /* EXT */\n  case 0x8FU: /* EXT */\n  case 0x90U: /* EXT */\n  case 0x91U: /* EXT */\n  case 0x92U: /* EXT */\n  case 0x93U: /* EXT */\n  case 0x94U: /* EXT */\n  case 0x95U: /* EXT */\n  case 0x96U: /* EXT */\n  case 0x97U: /* EXT */\n  case 0x98U: /* EXT */\n  case 0x99U: /* EXT */\n  case 0x9AU: /* EXT */\n  case 0x9BU: /* EXT */\n  case 0x9CU: /* EXT */\n  case 0x9DU: /* EXT */\n  case 0x9EU: /* EXT */\n  case 0x9FU: /* EXT */\n  case 0xA0U: /* EXT */\n  case 0xA1U: /* EXT */\n  case 0xA2U: /* EXT */\n  case 0xA3U: /* EXT */\n  case 0xA4U: /* EXT */\n  case 0xA5U: /* EXT */\n  case 0xA6U: /* EXT */\n  case 0xA7U: /* EXT */\n  case 0xA8U: /* EXT */\n  case 0xA9U: /* EXT */\n  case 0xAAU: /* EXT */\n  case 0xABU: /* EXT */\n  case 0xACU: /* EXT */\n  case 0xADU: /* EXT */\n  case 0xAEU: /* EXT */\n  case 0xAFU: /* EXT */\n  case 0xB0U: /* EXT */\n  case 0xB1U: /* EXT */\n  case 0xB2U: /* EXT */\n  case 0xB3U: /* EXT */\n  case 0xB4U: /* EXT */\n  case 0xB5U: /* EXT */\n  case 0xB6U: /* EXT */\n  case 0xB7U: /* EXT */\n  case 0xB8U: /* EXT */\n  case 0xB9U: /* EXT */\n  case 0xBAU: /* EXT */\n  case 0xBBU: /* EXT */\n  case 0xBCU: /* EXT */\n  case 0xBDU: /* EXT */\n  case 0xBEU: /* EXT */\n  case 0xBFU: /* EXT */\n  case 0xC0U: /* EXT */\n  case 0xC1U: /* EXT */\n  case 0xC2U: /* EXT */\n  case 0xC3U: /* EXT */\n  case 0xC4U: /* EXT */\n  case 0xC5U: /* EXT */\n  case 0xC6U: /* EXT */\n  case 0xC7U: /* EXT */\n  case 0xC8U: /* EXT */\n  case 0xC9U: /* EXT */\n  case 0xCAU: /* EXT */\n  case 0xCBU: /* EXT */\n  case 0xCCU: /* EXT */\n  case 0xCDU: /* EXT */\n  case 0xCEU: /* EXT */\n  case 0xCFU: /* EXT */\n  case 0xD0U: /* EXT */\n  case 0xD1U: /* EXT */\n  case 0xD2U: /* EXT */\n  case 0xD3U: /* EXT */\n  case 0xD4U: /* EXT */\n  case 0xD5U: /* EXT */\n  case 0xD6U: /* EXT */\n  case 0xD7U: /* EXT */\n  case 0xD8U: /* EXT */\n  case 0xD9U: /* EXT */\n  case 0xDAU: /* EXT */\n  case 0xDBU: /* EXT */\n  case 0xDCU: /* EXT */\n  case 0xDDU: /* EXT */\n  case 0xDEU: /* EXT */\n  case 0xDFU: /* EXT */\n  case 0xE0U: /* EXT */\n  case 0xE1U: /* EXT */\n  case 0xE2U: /* EXT */\n  case 0xE3U: /* EXT */\n  case 0xE4U: /* EXT */\n  case 0xE5U: /* EXT */\n  case 0xE6U: /* EXT */\n  case 0xE7U: /* EXT */\n  case 0xE8U: /* EXT */\n  case 0xE9U: /* EXT */\n  case 0xEAU: /* EXT */\n  case 0xEBU: /* EXT */\n  case 0xECU: /* EXT */\n  case 0xEDU: /* EXT */\n  case 0xEEU: /* EXT */\n  case 0xEFU: /* EXT */\n  case 0xF0U: /* EXT */\n  case 0xF1U: /* EXT */\n  case 0xF2U: /* EXT */\n  case 0xF3U: /* EXT */\n  case 0xF4U: /* EXT */\n  case 0xF5U: /* EXT */\n  case 0xF6U: /* EXT */\n  case 0xF7U: /* EXT */\n  case 0xF8U: /* EXT */\n  case 0xF9U: /* EXT */\n  case 0xFAU: /* EXT */\n  case 0xFBU: /* EXT */\n  case 0xFCU: /* EXT */\n  case 0xFDU: /* EXT */\n  case 0xFEU: /* EXT */\n  case 0xFFU: /* EXT */\n    return -1;\n  default:\n    mhd_assert (0);\n    break;  /* Should be unreachable */\n#else\n  default:\n    break;\n#endif\n  }\n  return -1;\n#else  /* MHD_FAVOR_SMALL_CODE */\n  if (isasciidigit (c))\n    return (unsigned char) (c - '0');\n  if ( (c >= 'A') && (c <= 'F') )\n    return (unsigned char) (c - 'A' + 10);\n  if ( (c >= 'a') && (c <= 'f') )\n    return (unsigned char) (c - 'a' + 10);\n\n  return -1;\n#endif /* MHD_FAVOR_SMALL_CODE */\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "I found no code fragments that need investigation for MISRA C 2023 Rule 8.13. Reasons:\n- MHD_strx_to_uint32_ uses a const char * parameter (str) and creates start as const char *const \u2014 both appropriately const-qualified.\n- The out_val parameter is uint32_t * and is written to (*out_val = res); it therefore must be a non-const pointer and is correctly declared.\n- The helper toxdigitvalue takes its character argument by value (char c), so no pointer is involved.\n- No other pointer parameters or local pointer variables are present that could be const-qualified.\n\nTherefore, there are no pointer declarations in the provided code that could or should be changed to point to const-qualified types."
}