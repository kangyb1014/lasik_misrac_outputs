{
  "user_message": "Target function code is:\n```c\nvoid\nMHD_upgraded_connection_mark_app_closed_ (struct MHD_Connection *connection)\n{\n  /* Cache 'daemon' here to avoid data races */\n  struct MHD_Daemon *const daemon = connection->daemon;\n#if defined(MHD_USE_THREADS)\n  mhd_assert (NULL == daemon->worker_pool);\n#endif /* MHD_USE_THREADS */\n  mhd_assert (NULL != connection->urh);\n  mhd_assert (0 != (daemon->options & MHD_TEST_ALLOW_SUSPEND_RESUME));\n\n  MHD_mutex_lock_chk_ (&daemon->cleanup_connection_mutex);\n  connection->urh->was_closed = true;\n  connection->resuming = true;\n  daemon->resuming = true;\n  MHD_mutex_unlock_chk_ (&daemon->cleanup_connection_mutex);\n  if ( (MHD_ITC_IS_VALID_ (daemon->itc)) &&\n       (! MHD_itc_activate_ (daemon->itc, \"r\")) )\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (daemon,\n              _ (\"Failed to signal resume via \" \\\n                 \"inter-thread communication channel.\\n\"));\n#endif\n  }\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_upgraded_connection_mark_app_closed_': {'callees': ['__builtin_unreachable', 'MHD_DLOG'], 'callers': ['MHD_upgrade_action']}, '__builtin_unreachable': {'callees': [], 'callers': ['try_ready_normal_body', 'try_ready_chunked_body', 'process_request_body', 'MHD_update_last_activity_', 'MHD_connection_handle_write', 'cleanup_connection', 'MHD_connection_handle_idle', 'MHD_set_connection_option', 'MHD_ip_count_lock', 'MHD_ip_count_unlock', 'MHD_ip_limit_del', 'new_connection_prepare_', 'new_connection_close_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'internal_suspend_connection_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_cleanup_connections', 'MHD_epoll', 'close_connection', 'MHD_quiesce_daemon', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_stop_daemon', 'MHD_create_response_from_iovec', 'MHD_destroy_response', 'MHD_increment_response_rc', 'MHD_create_post_processor', 'post_process_urlencoded', 'post_process_multipart', 'check_nonce_nc', 'calculate_add_nonce', 'digest_auth_check_all_inner', 'MHD_digest_auth_check_digest3', 'MHD_digest_auth_check2', 'MHD_digest_auth_check_digest2', 'queue_auth_required_response3_inner', 'MHD_queue_auth_fail_response2']}, 'MHD_DLOG': {'callees': [], 'callers': ['connection_close_error', 'check_connection_reply', 'transmit_error_response_len', 'connection_add_header', 'parse_cookie_header', 'process_request_body', 'parse_connection_headers', 'get_req_header', 'get_req_headers', 'MHD_connection_handle_read', 'MHD_connection_handle_write', 'connection_check_timedout', 'cleanup_connection', 'MHD_connection_epoll_update_', 'MHD_queue_response', 'MHD_ip_limit_add', 'MHD_get_fdset2', 'thread_main_handle_connection', 'new_connection_prepare_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_get_timeout64', 'MHD_run_from_select2', 'MHD_select', 'MHD_poll_all', 'MHD_poll_listen_socket', 'MHD_epoll', 'MHD_polling_thread', 'unescape_wrapper', 'MHD_quiesce_daemon', 'parse_options_va', 'setup_epoll_fd', 'setup_epoll_to_listen', 'process_interim_params', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_connection_set_nodelay_state_', 'MHD_connection_set_cork_state_', 'post_send_setopt', 'MHD_response_execute_upgrade_', 'MHD_get_rq_bauth_params_', 'MHD_get_rq_dauth_params_', 'calculate_add_nonce_with_retry', 'check_uri_match', 'digest_auth_check_all_inner', 'queue_auth_required_response3_inner', 'MHD_basic_auth_get_username_password3', 'MHD_basic_auth_get_username_password', 'MHD_queue_basic_auth_required_response3']}, 'MHD_upgrade_action': {'callees': ['MHD_upgraded_connection_mark_app_closed_'], 'callers': ['run_usock', 'uh_cb']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_Connection (definition)",
    "struct MHD_Daemon (definition)",
    "definition of connection->urh (the URH struct/type)",
    "mhd_assert (macro or function definition)",
    "MHD_USE_THREADS (preprocessor macro)",
    "MHD_mutex_lock_chk_ (function or macro definition)",
    "MHD_mutex_unlock_chk_ (function or macro definition)",
    "MHD_ITC_IS_VALID_ (macro or inline helper definition)",
    "MHD_itc_activate_ (function definition)",
    "MHD_DLOG (macro definition)",
    "MHD_TEST_ALLOW_SUSPEND_RESUME (macro/flag definition)",
    "definition of daemon->itc type (inter-thread channel struct/type)",
    "definition of boolean type/true/false used in project (e.g. stdbool or custom)",
    "__builtin_unreachable (presence/usage in headers or macros)"
  ],
  "explanation": "To determine whether this function uses compiler language extensions (MISRA rule check), the analyzer must inspect the actual definitions and expansions of the types, macros and functions referenced here because language extensions commonly appear in macros, inline helpers, attribute usage or builtin calls. Specifically:\n\n- struct MHD_Connection: needed to verify use of any non-standard language constructs in its declaration (anonymous/unnamed structs/unions, bit-fields with implementation-defined widths, flexible-array uses, attributes, etc.).\n- struct MHD_Daemon: same reason as above for daemon members (e.g. options, itc, mutex fields) that might be declared with compiler-specific extensions.\n- connection->urh type (URH struct): the code directly accesses urh->was_closed; the URH type definition may contain extensions (anonymous unions, attributes) or nonstandard boolean members.\n- mhd_assert: assertions often expand to compiler builtins (e.g. __builtin_unreachable) or to macros using attributes/statement-expressions; need its definition to check for such extensions.\n- MHD_USE_THREADS: conditional compilation may select code paths that use thread primitives implemented with extensions; need to see how it controls expansion.\n- MHD_mutex_lock_chk_ / MHD_mutex_unlock_chk_: these could be macros or inline wrappers that use compiler extensions (inline asm, attributes, statement expressions); inspect definitions.\n- MHD_ITC_IS_VALID_: likely a macro that may use pointer-checking tricks or builtins; must check expansion for extensions.\n- MHD_itc_activate_: function implementation may use nonstandard calling conventions, attributes, or builtins for inter-thread signalling; include it to inspect for extensions.\n- MHD_DLOG: logging macros frequently use variadic macros, format attribute annotations, or GCC extensions; its definition must be checked.\n- MHD_TEST_ALLOW_SUSPEND_RESUME (options flag): its definition might be implemented via bitfield or enum with compiler-specific extensions\u2014verify how the flag is defined and used.\n- daemon->itc type: the inter-thread channel type may itself use extension features in its definition or API macros.\n- boolean type / true/false definition: the function uses true/false; need to confirm whether stdbool.h/_Bool or a custom (possibly extension-based) boolean is used.\n- __builtin_unreachable: present in the static call graph as used by asserts; explicitly check whether any included headers or macros expand to GCC/Clang builtins such as __builtin_unreachable (a language extension).\n\nInspecting these symbols (their headers/definitions) allows a precise determination whether the target function or the macros it uses rely on compiler-specific language extensions prohibited by the MISRA constraint."
}