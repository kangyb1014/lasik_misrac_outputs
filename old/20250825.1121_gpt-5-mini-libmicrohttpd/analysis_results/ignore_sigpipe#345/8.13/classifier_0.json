{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of ignore_sigpipe:\n```c\nstatic void\nignore_sigpipe (void)\n{\n  struct sigaction oldsig;\n  struct sigaction sig;\n\n  sig.sa_handler = &catcher;\n  sigemptyset (&sig.sa_mask);\n#ifdef SA_INTERRUPT\n  sig.sa_flags = SA_INTERRUPT;  /* SunOS */\n#else\n  sig.sa_flags = SA_RESTART;\n#endif\n  if (0 != sigaction (SIGPIPE, &sig, &oldsig))\n    fprintf (stderr,\n             \"Failed to install SIGPIPE handler: %s\\n\", strerror (errno));\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nfprintf (stderr,\n             \"Failed to install SIGPIPE handler: %s\\n\", strerror (errno));\n```\nFocus on the above code fragment and judge whether it violates the rule 8.13 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The call to strerror(errno) returns a pointer to a string describing the error. The returned pointer type is char * (non-const) but it points to internal, immutable/static data and is not modified by the code. According to MISRA C 2023 Rule 8.13, such pointers should be to const-qualified types when possible (e.g. const char *). Using the non-const result of strerror directly in fprintf therefore violates Rule 8.13. Recommended fixes: use a function returning/producing const char * (or assign the result to a const char *), or use a reentrant function that provides a buffer, or cast the return to const char * with justification."
}