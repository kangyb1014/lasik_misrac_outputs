{
  "user_message": "An agent A claimed that the following ignore_sigpipe code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of ignore_sigpipe.\n```c\nstatic void\nignore_sigpipe (void)\n{\n  struct sigaction oldsig;\n  struct sigaction sig;\n\n  sig.sa_handler = &catcher;\n  sigemptyset (&sig.sa_mask);\n#ifdef SA_INTERRUPT\n  sig.sa_flags = SA_INTERRUPT;  /* SunOS */\n#else\n  sig.sa_flags = SA_RESTART;\n#endif\n  if (0 != sigaction (SIGPIPE, &sig, &oldsig))\n    fprintf (stderr,\n             \"Failed to install SIGPIPE handler: %s\\n\", strerror (errno));\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call to strerror(errno) returns a pointer to a string describing the error. The returned pointer type is char * (non-const) but it points to internal, immutable/static data and is not modified by the code. According to MISRA C 2023 Rule 8.13, such pointers should be to const-qualified types when possible (e.g. const char *). Using the non-const result of strerror directly in fprintf therefore violates Rule 8.13. Recommended fixes: use a function returning/producing const char * (or assign the result to a const char *), or use a reentrant function that provides a buffer, or cast the return to const char * with justification.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. MISRA C 2023 R.8.13 requires that pointers should point to const-qualified types when possible. The call to strerror() returns a char * (non-const) that refers to static, immutable storage; the code uses that non-const result directly in fprintf. It is possible to satisfy R.8.13 here (for example: const char *msg = strerror(errno); fprintf(..., msg);), so the direct use of the non-const expression violates the rule. Note: the underlying library prototype is non-const, which explains why strerror() returns char *, but that does not remove the obligation to use a const-qualified pointer in the caller when the pointed-to data is not modified."
}