{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of ignore_sigpipe:\n```c\nstatic void\nignore_sigpipe (void)\n{\n  struct sigaction oldsig;\n  struct sigaction sig;\n\n  sig.sa_handler = &catcher;\n  sigemptyset (&sig.sa_mask);\n#ifdef SA_INTERRUPT\n  sig.sa_flags = SA_INTERRUPT;  /* SunOS */\n#else\n  sig.sa_flags = SA_RESTART;\n#endif\n  if (0 != sigaction (SIGPIPE, &sig, &oldsig))\n    fprintf (stderr,\n             \"Failed to install SIGPIPE handler: %s\\n\", strerror (errno));\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function ignore_sigpipe:\nstatic void\ncatcher (int sig)\n{\n  (void) sig;  /* Unused. Silent compiler warning. */\n  /* do nothing */\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nstatic void\ncatcher (int sig)\n{\n  (void) sig;  /* Unused. Silent compiler warning. */\n  /* do nothing */\n}\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The statement '(void) sig;' (and the empty handler body) are executed operations that have no observable effect; removing them would not change program behaviour. Thus the cast-to-void and the no-op body constitute dead code (a violation of MISRA C 2023 Rule 2.2)."
}