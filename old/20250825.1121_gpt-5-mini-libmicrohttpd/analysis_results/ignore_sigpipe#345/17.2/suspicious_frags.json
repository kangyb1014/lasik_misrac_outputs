{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of ignore_sigpipe:\n```c\nstatic void\nignore_sigpipe (void)\n{\n  struct sigaction oldsig;\n  struct sigaction sig;\n\n  sig.sa_handler = &catcher;\n  sigemptyset (&sig.sa_mask);\n#ifdef SA_INTERRUPT\n  sig.sa_flags = SA_INTERRUPT;  /* SunOS */\n#else\n  sig.sa_flags = SA_RESTART;\n#endif\n  if (0 != sigaction (SIGPIPE, &sig, &oldsig))\n    fprintf (stderr,\n             \"Failed to install SIGPIPE handler: %s\\n\", strerror (errno));\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function ignore_sigpipe:\nstatic void\ncatcher (int sig)\n{\n  (void) sig;  /* Unused. Silent compiler warning. */\n  /* do nothing */\n}\n...\nint\nmain (int argc, char *const *argv)\n{\n  struct MHD_Daemon *d;\n  unsigned int port;\n\n  if ( (argc != 2) ||\n       (1 != sscanf (argv[1], \"%u\", &port)) ||\n       (UINT16_MAX < port) )\n  {\n    fprintf (stderr,\n             \"%s PORT\\n\", argv[0]);\n    return 1;\n  }\n#ifndef MINGW\n  ignore_sigpipe ();\n#endif\n#ifdef MHD_HAVE_LIBMAGIC\n  magic = magic_open (MAGIC_MIME_TYPE);\n  (void) magic_load (magic, NULL);\n#endif /* MHD_HAVE_LIBMAGIC */\n\n  (void) pthread_mutex_init (&mutex, NULL);\n  file_not_found_response =\n    MHD_create_response_from_buffer_static (strlen (FILE_NOT_FOUND_PAGE),\n                                            (const void *) FILE_NOT_FOUND_PAGE);\n  mark_as_html (file_not_found_response);\n  request_refused_response =\n    MHD_create_response_from_buffer_static (strlen (REQUEST_REFUSED_PAGE),\n                                            (const void *)\n                                            REQUEST_REFUSED_PAGE);\n  mark_as_html (request_refused_response);\n  internal_error_response =\n    MHD_create_response_from_buffer_static (strlen (INTERNAL_ERROR_PAGE),\n                                            (const void *) INTERNAL_ERROR_PAGE);\n  mark_as_html (internal_error_response);\n  update_directory ();\n  d = MHD_start_daemon (MHD_USE_AUTO | MHD_USE_INTERNAL_POLLING_THREAD\n                        | MHD_USE_ERROR_LOG,\n                        (uint16_t) port,\n                        NULL, NULL,\n                        &generate_page, NULL,\n                        MHD_OPTION_CONNECTION_MEMORY_LIMIT, (size_t) (256\n                                                                      * 1024),\n#ifdef PRODUCTION\n                        MHD_OPTION_PER_IP_CONNECTION_LIMIT, (unsigned int) (64),\n#endif\n                        MHD_OPTION_CONNECTION_TIMEOUT, (unsigned\n                                                        int) (120 /* seconds */)\n                        ,\n                        MHD_OPTION_THREAD_POOL_SIZE, (unsigned\n                                                      int) NUMBER_OF_THREADS,\n                        MHD_OPTION_NOTIFY_COMPLETED,\n                        &response_completed_callback, NULL,\n                        MHD_OPTION_END);\n  if (NULL == d)\n    return 1;\n  fprintf (stderr, \"HTTP server running. Press ENTER to stop the server.\\n\");\n  (void) getc (stdin);\n  MHD_stop_daemon (d);\n  MHD_destroy_response (file_not_found_response);\n  MHD_destroy_response (request_refused_response);\n  MHD_destroy_response (internal_error_response);\n  update_cached_response (NULL);\n  (void) pthread_mutex_destroy (&mutex);\n#ifdef MHD_HAVE_LIBMAGIC\n  magic_close (magic);\n#endif /* MHD_HAVE_LIBMAGIC */\n  return 0;\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No suspicious fragments found for MISRA C 2023 Rule 17.2 (no direct or indirect recursion). Analysis of the provided code: main calls ignore_sigpipe; ignore_sigpipe calls library functions (sigemptyset, sigaction, fprintf, strerror) and assigns the signal handler to catcher; catcher is a simple handler that does nothing and does not call ignore_sigpipe or any other function in the provided code. There are no direct self-calls (a function calling itself) and no evidence of indirect recursion (mutual calls) among the shown static functions. The other referenced identifiers (MHD_*, generate_page, update_directory, etc.) are either library/API functions or not defined in the provided snippets; nothing in the shown definitions indicates they call back into the provided functions to create recursion. Therefore no code fragment needs further investigation for Rule 17.2 based on the supplied code."
}