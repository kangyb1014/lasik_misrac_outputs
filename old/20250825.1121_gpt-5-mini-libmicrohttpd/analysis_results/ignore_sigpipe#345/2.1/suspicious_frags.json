{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of ignore_sigpipe:\n```c\nstatic void\nignore_sigpipe (void)\n{\n  struct sigaction oldsig;\n  struct sigaction sig;\n\n  sig.sa_handler = &catcher;\n  sigemptyset (&sig.sa_mask);\n#ifdef SA_INTERRUPT\n  sig.sa_flags = SA_INTERRUPT;  /* SunOS */\n#else\n  sig.sa_flags = SA_RESTART;\n#endif\n  if (0 != sigaction (SIGPIPE, &sig, &oldsig))\n    fprintf (stderr,\n             \"Failed to install SIGPIPE handler: %s\\n\", strerror (errno));\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function ignore_sigpipe:\nstatic void\ncatcher (int sig)\n{\n  (void) sig;  /* Unused. Silent compiler warning. */\n  /* do nothing */\n}\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "static void\ncatcher (int sig)\n{\n  (void) sig;  /* Unused. Silent compiler warning. */\n  /* do nothing */\n}",
    "#ifdef SA_INTERRUPT\n  sig.sa_flags = SA_INTERRUPT;  /* SunOS */\n#else\n  sig.sa_flags = SA_RESTART;\n#endif",
    "struct sigaction oldsig;"
  ],
  "explanation": "No other code fragments need investigation for Rule 2.1 (unreachable code). The remaining code consists of straight-line statements and a conditional call to sigaction; there are no returns, unconditional infinite loops, goto jumps, or conditional constructs that are deterministically never true within the translation unit (other than the shown preprocessor conditional). The assignment of sig.sa_handler, the call to sigemptyset, the sigaction call and the error-path fprintf are all potentially reachable at runtime. The only conditional compilation in the function is the SA_INTERRUPT/SA_RESTART branch, which is compile-time selected \u2014 because one of those branches will be absent from the final translation unit, both branches are included above for inspection. The declared fragments above are provided for investigation because they are the only places where code could be absent/unused or dependent on build configuration (preprocessor branch, an unused/never-restored oldsig, and the signal handler routine that may be unused if not installed)."
}