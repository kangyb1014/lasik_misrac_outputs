{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of ignore_sigpipe:\n```c\nstatic void\nignore_sigpipe (void)\n{\n  struct sigaction oldsig;\n  struct sigaction sig;\n\n  sig.sa_handler = &catcher;\n  sigemptyset (&sig.sa_mask);\n#ifdef SA_INTERRUPT\n  sig.sa_flags = SA_INTERRUPT;  /* SunOS */\n#else\n  sig.sa_flags = SA_RESTART;\n#endif\n  if (0 != sigaction (SIGPIPE, &sig, &oldsig))\n    fprintf (stderr,\n             \"Failed to install SIGPIPE handler: %s\\n\", strerror (errno));\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function ignore_sigpipe:\nstatic void\ncatcher (int sig)\n{\n  (void) sig;  /* Unused. Silent compiler warning. */\n  /* do nothing */\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#ifdef SA_INTERRUPT\n  sig.sa_flags = SA_INTERRUPT;  /* SunOS */\n#else\n  sig.sa_flags = SA_RESTART;\n#endif\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The fragment as written does not contain unreachable code because the preprocessor (#ifdef/#else/#endif) selects one alternative at translation time; the unselected alternative is not part of the translation unit and therefore not \"unreachable\" code in the compiled program. A concrete violation of Rule 2.1 in the same area would be using a constant conditional expression that leaves one branch present but never taken, e.g.:\n\nif (0)\n{\n  sig.sa_flags = SA_INTERRUPT;  /* unreachable at runtime */\n}\nelse\n{\n  sig.sa_flags = SA_RESTART;\n}\n\nIn that case the if (0) branch is present in the translation unit but is statically unreachable, which would violate Rule 2.1."
}