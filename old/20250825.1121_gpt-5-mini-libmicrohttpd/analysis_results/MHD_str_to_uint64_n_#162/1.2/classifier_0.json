{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_str_to_uint64_n_:\n```c\nsize_t\nMHD_str_to_uint64_n_ (const char *str,\n                      size_t maxlen,\n                      uint64_t *out_val)\n{\n  uint64_t res;\n  size_t i;\n\n  if (! str || ! maxlen || ! out_val || ! isasciidigit (str[0]))\n    return 0;\n\n  res = 0;\n  i = 0;\n  do\n  {\n    const int digit = (unsigned char) str[i] - '0';\n\n    if ( (res > (UINT64_MAX / 10)) ||\n         ( (res == (UINT64_MAX / 10)) &&\n           ((uint64_t) digit > (UINT64_MAX % 10)) ) )\n      return 0;\n\n    res *= 10;\n    res += (unsigned int) digit;\n    i++;\n  } while ( (i < maxlen) &&\n            isasciidigit (str[i]) );\n\n  *out_val = res;\n  return i;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_str_to_uint64_n_:\n_MHD_static_inline bool\nisasciidigit (char c)\n{\n  return (c >= '0') && (c <= '9');\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n_MHD_static_inline bool\nisasciidigit (char c)\n{\n  return (c >= '0') && (c <= '9');\n}\n```\nFocus on the above code fragment and judge whether it violates the rule 1.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No explicit compiler language extension is used in the shown fragment. The identifier _MHD_static_inline appears to be a macro (its expansion is not shown) and does not by itself prove use of a compiler extension. The use of bool is standard C (_Bool in C99 via <stdbool.h>), and the function body uses only standard operators and types. If _MHD_static_inline expands to a compiler-specific keyword or attribute (for example, __inline__, __attribute__((...)), or other documented compiler extension), that expansion would be a violation; however, based on the provided code fragment alone there is no evidence of such an extension."
}