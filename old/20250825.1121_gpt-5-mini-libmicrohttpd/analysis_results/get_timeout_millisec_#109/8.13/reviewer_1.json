{
  "user_message": "An agent A claimed that the following get_timeout_millisec_ code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of get_timeout_millisec_.\n```c\nstatic int64_t\nget_timeout_millisec_ (struct MHD_Daemon *daemon,\n                       int32_t max_timeout)\n{\n  uint64_t d_timeout;\n  mhd_assert (0 <= max_timeout || -1 == max_timeout);\n  if (0 == max_timeout)\n    return 0;\n\n  if (MHD_NO == MHD_get_timeout64 (daemon, &d_timeout))\n    return max_timeout;\n\n  if ((0 < max_timeout) && ((uint64_t) max_timeout < d_timeout))\n    return max_timeout;\n\n  if (INT64_MAX <= d_timeout)\n    return INT64_MAX;\n\n  return (int64_t) d_timeout;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function parameter 'struct MHD_Daemon *daemon' is not const-qualified despite the function not modifying *daemon. Unless the called API MHD_get_timeout64 requires a non-const pointer, the parameter could be declared 'const struct MHD_Daemon *daemon'. Therefore this is a violation of MISRA C 2023 Rule 8.13 unless there is a forcing reason (e.g. MHD_get_timeout64's prototype requires non-const).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is incomplete rather than definitively correct. Rule 8.13 prefers pointers to be const-qualified when the pointee is not modified. In get_timeout_millisec_ the function itself does not modify *daemon, so declaring the parameter as const struct MHD_Daemon *daemon would be appropriate \u2014 unless there is a forcing reason. The usual forcing reason here is that the called API, MHD_get_timeout64, has a prototype that requires a non-const pointer; if so, the non-const parameter is justified and there is no MISRA violation. Without inspecting MHD_get_timeout64's prototype you cannot conclude a definite violation. So the agent\u2019s claim is only conditionally correct: it is a violation only if MHD_get_timeout64 accepts a non-const pointer unnecessarily; otherwise it is not a violation. Check the declaration of MHD_get_timeout64 to decide conclusively."
}