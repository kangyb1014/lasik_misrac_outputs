{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of do_append:\n```c\nstatic enum MHD_Result\ndo_append (char **ret,\n           const char *data,\n           size_t size)\n{\n  char *buf;\n  size_t old_len;\n\n  if (NULL == *ret)\n    old_len = 0;\n  else\n    old_len = strlen (*ret);\n  if (NULL == (buf = malloc (old_len + size + 1)))\n    return MHD_NO;\n  if (NULL != *ret)\n  {\n    memcpy (buf,\n            *ret,\n            old_len);\n    free (*ret);\n  }\n  memcpy (&buf[old_len],\n          data,\n          size);\n  buf[old_len + size] = '\\0';\n  *ret = buf;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (NULL == *ret)\n    old_len = 0;\n  else\n    old_len = strlen (*ret);",
    "if (NULL != *ret)\n  {\n    memcpy (buf,\n            *ret,\n            old_len);\n    free (*ret);\n  }",
    "static enum MHD_Result\n do_append (char **ret,\n            const char *data,\n            size_t size)",
    "*ret = buf;"
  ],
  "explanation": "Fragments not listed are not suspicious for MISRA C 2023 Rule 8.13 because they either already use const or cannot reasonably be made to point to a const-qualified type: - The parameter 'const char *data' is already const-qualified. - The local 'char *buf' is written into (via memcpy and direct assignment), so it cannot be a pointer to const. - The memcpy that writes into buf (&buf[old_len]) is a destination write, so that pointer must be to non-const. - The malloc call produces mutable storage; the returned pointer must be non-const to permit writing and later assignment. - The explicit use of buf as a writable buffer (memcpy destination and nul-termination) prevents making its type const-qualified. These uses therefore do not indicate further places where pointers could/should be changed to point to const-qualified types under Rule 8.13."
}