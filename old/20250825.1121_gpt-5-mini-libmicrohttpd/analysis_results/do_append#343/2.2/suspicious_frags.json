{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of do_append:\n```c\nstatic enum MHD_Result\ndo_append (char **ret,\n           const char *data,\n           size_t size)\n{\n  char *buf;\n  size_t old_len;\n\n  if (NULL == *ret)\n    old_len = 0;\n  else\n    old_len = strlen (*ret);\n  if (NULL == (buf = malloc (old_len + size + 1)))\n    return MHD_NO;\n  if (NULL != *ret)\n  {\n    memcpy (buf,\n            *ret,\n            old_len);\n    free (*ret);\n  }\n  memcpy (&buf[old_len],\n          data,\n          size);\n  buf[old_len + size] = '\\0';\n  *ret = buf;\n  return MHD_YES;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [],
  "explanation": "No operations in the provided function are evidently dead code under the MISRA C 2023 Rule 2.2 definition (an executed operation whose removal would not affect program behaviour). Each executed statement has an observable effect on program state or on error handling:\n\n- The conditional that computes old_len (using strlen when *ret != NULL, else 0) is required to determine buffer size and copy length.\n- The malloc call and its NULL check (returning MHD_NO on failure) affect control flow and are necessary for correct error handling.\n- The branch that copies the old buffer into buf is necessary when *ret != NULL to preserve previous contents; removing it would change behaviour.\n- The free(*ret) in that branch releases the previous allocation; removing it would change memory usage/behaviour (memory leak), so it is not dead.\n- The memcpy that appends data into buf and the subsequent nul-termination (buf[old_len + size] = '\\0') produce the intended resulting string; removing either would change program behaviour.\n- The final assignment *ret = buf updates the caller-visible pointer; removing it would change behaviour.\n\nPotential borderline: memcpy(..., data, size) is a no-op when size == 0; in that specific runtime case the memcpy call has no effect. However, that does not make it dead code in general, because for size > 0 it is required, and removing the call would change behaviour. Also, calling memcpy with size == 0 while data is NULL is commonly permitted by implementations and the C standard does not require the pointers to be valid when the size is zero, but this is a portability/undefined-behaviour consideration, not proof of dead code.\n\nNo unreachable code is present in the snippet. Therefore there are no code fragments that should be flagged as dead code for investigation under MISRA C 2023 Rule 2.2."
}