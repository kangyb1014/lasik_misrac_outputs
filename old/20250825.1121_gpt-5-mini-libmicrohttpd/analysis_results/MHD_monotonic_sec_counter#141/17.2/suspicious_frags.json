{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_monotonic_sec_counter:\n```c\ntime_t\nMHD_monotonic_sec_counter (void)\n{\n#ifdef HAVE_CLOCK_GETTIME\n  struct timespec ts;\n\n  if ( (_MHD_UNWANTED_CLOCK != mono_clock_id) &&\n       (0 == clock_gettime (mono_clock_id,\n                            &ts)) )\n    return ts.tv_sec - mono_clock_start;\n#endif /* HAVE_CLOCK_GETTIME */\n#ifdef HAVE_CLOCK_GET_TIME\n  if (_MHD_INVALID_CLOCK_SERV != mono_clock_service)\n  {\n    mach_timespec_t cur_time;\n\n    if (KERN_SUCCESS == clock_get_time (mono_clock_service,\n                                        &cur_time))\n      return cur_time.tv_sec - mono_clock_start;\n  }\n#endif /* HAVE_CLOCK_GET_TIME */\n#if defined(_WIN32)\n#if _WIN32_WINNT >= 0x0600\n  if (1)\n    return (time_t) (((uint64_t) (GetTickCount64 () - tick_start)) / 1000);\n#else  /* _WIN32_WINNT < 0x0600 */\n  if (0 != perf_freq)\n  {\n    LARGE_INTEGER perf_counter;\n\n    QueryPerformanceCounter (&perf_counter);   /* never fail on XP and later */\n    return (time_t) (((uint64_t) perf_counter.QuadPart - perf_start)\n                     / perf_freq);\n  }\n#endif /* _WIN32_WINNT < 0x0600 */\n#endif /* _WIN32 */\n#ifdef HAVE_GETHRTIME\n  if (1)\n    return (time_t) (((uint64_t) (gethrtime () - hrtime_start)) / 1000000000);\n#endif /* HAVE_GETHRTIME */\n\n  return time (NULL) - sys_clock_start;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_monotonic_sec_counter:\n#define HAVE_CLOCK_GETTIME 1\n...\n#define _MHD_UNWANTED_CLOCK CLOCK_REALTIME\n...\nstatic clockid_t mono_clock_id = _MHD_UNWANTED_CLOCK\n...\nstatic time_t mono_clock_start\n...\nstatic time_t sys_clock_start\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "clock_get_time (mono_clock_service,\n                                        &cur_time)",
    "clock_gettime (mono_clock_id,\n                            &ts)",
    "gethrtime ()",
    "GetTickCount64 ()",
    "time (NULL)",
    "QueryPerformanceCounter (&perf_counter);"
  ],
  "explanation": "Only code fragments that involve calling other functions can produce direct or indirect recursion relevant to MISRA C 2023 Rule 17.2. The listed fragments are the only function calls present in MHD_monotonic_sec_counter. Other parts of the function are simple arithmetic/returns (e.g. ts.tv_sec - mono_clock_start, cur_time.tv_sec - mono_clock_start), variable declarations (struct timespec ts, mach_timespec_t cur_time, LARGE_INTEGER perf_counter), preprocessor conditionals and constant checks, or macro/constant references (e.g. _MHD_UNWANTED_CLOCK, mono_clock_id, mono_clock_start, sys_clock_start). These do not invoke functions and therefore cannot by themselves cause the function to call itself directly or indirectly, so they do not need investigation for Rule 17.2."
}