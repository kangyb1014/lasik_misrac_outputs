{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_init:\n```c\nvoid\nMHD_init (void)\n{\n#if defined(MHD_WINSOCK_SOCKETS)\n  WSADATA wsd;\n#endif /* MHD_WINSOCK_SOCKETS */\n\n  MHD_set_panic_func (NULL, NULL);\n\n#if defined(MHD_WINSOCK_SOCKETS)\n  if (0 != WSAStartup (MAKEWORD (2, 2), &wsd))\n    MHD_PANIC (_ (\"Failed to initialize winsock.\\n\"));\n  if ((2 != LOBYTE (wsd.wVersion)) && (2 != HIBYTE (wsd.wVersion)))\n    MHD_PANIC (_ (\"Winsock version 2.2 is not available.\\n\"));\n#endif /* MHD_WINSOCK_SOCKETS */\n#ifdef HTTPS_SUPPORT\n#ifdef MHD_HTTPS_REQUIRE_GCRYPT\n#if GCRYPT_VERSION_NUMBER < 0x010600\n#if GNUTLS_VERSION_NUMBER <= 0x020b00\n#if defined(MHD_USE_POSIX_THREADS)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_pthread))\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n#elif defined(MHD_W32_MUTEX_)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_w32))\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n#endif /* defined(MHD_W32_MUTEX_) */\n#endif /* GNUTLS_VERSION_NUMBER <= 0x020b00 */\n  gcry_check_version (NULL);\n#else\n  if (NULL == gcry_check_version (\"1.6.0\"))\n    MHD_PANIC (_ (\"libgcrypt is too old. MHD was compiled for \" \\\n                  \"libgcrypt 1.6.0 or newer.\\n\"));\n#endif\n#endif /* MHD_HTTPS_REQUIRE_GCRYPT */\n  gnutls_global_init ();\n#endif /* HTTPS_SUPPORT */\n  MHD_monotonic_sec_counter_init ();\n  MHD_send_init_static_vars_ ();\n  MHD_init_mem_pools_ ();\n  /* Check whether sizes were correctly detected by configure */\n#ifdef _DEBUG\n  if (1)\n  {\n    struct timeval tv;\n    mhd_assert (sizeof(tv.tv_sec) == SIZEOF_STRUCT_TIMEVAL_TV_SEC);\n  }\n#endif /* _DEBUG */\n  mhd_assert (sizeof(uint64_t) == SIZEOF_UINT64_T);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function MHD_init:\n#define MHD_PANIC(msg) do{mhd_panic(mhd_panic_cls,__FILE__,__LINE__,msg);BUILTIN_NOT_REACHED;}while(0)\n...\n#define _(String) (String)\n...\n#define MHD_USE_POSIX_THREADS 1\n...\n#define mhd_assert(ignore) ((void)0)\n...\n#define SIZEOF_STRUCT_TIMEVAL_TV_SEC 8\n...\n#define SIZEOF_UINT64_T 8\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "MHD_PANIC (_ (\"libgcrypt is too old. MHD was compiled for \" \\\n                  \"libgcrypt 1.6.0 or newer.\\n\"));",
    "MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));",
    "MHD_PANIC (_ (\"Winsock version 2.2 is not available.\\n\"));",
    "MHD_PANIC (_ (\"Failed to initialize winsock.\\n\"));",
    "#define MHD_PANIC(msg) do{mhd_panic(mhd_panic_cls,__FILE__,__LINE__,msg);BUILTIN_NOT_REACHED;}while(0)"
  ],
  "explanation": "I inspected the function and related macros for use of compiler language extensions. The only potential compiler-specific extension usage visible is the symbol BUILTIN_NOT_REACHED embedded in the MHD_PANIC macro definition (listed above). In many codebases that symbol maps to a compiler builtin such as __builtin_unreachable() (a compiler extension), so it should be investigated to confirm its definition and whether it uses a non-standard language extension.\n\nAll other constructs in the provided code are standard C or library/platform-specific identifiers, not language extensions:\n- Conditional compilation (#if/#ifdef), function definitions, do{...}while(0) macro pattern, string literal continuation with a backslash, and use of __FILE__ and __LINE__ are standard C.\n- Calls to platform or library functions (WSAStartup, gcry_control, gnutls_global_init, etc.) and platform macros (MAKEWORD, LOBYTE, HIBYTE) are library/OS-specific, not language extensions.\n- The translation macro #define _(String) (String), the assert macro, and use of fixed-width integer types (uint64_t) are not compiler language extensions.\n\nNo other GCC/Clang/Microsoft specific extensions were found (no __attribute__, __asm, statement expressions ({ ... }), typeof, inline assembly, or explicit __builtin_* usages present in the supplied snippets). Therefore only the BUILTIN_NOT_REACHED usage (via the MHD_PANIC macro) requires further investigation to determine whether it expands to a compiler language extension."
}