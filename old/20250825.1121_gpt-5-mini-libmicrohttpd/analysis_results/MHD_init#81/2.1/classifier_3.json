{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_init:\n```c\nvoid\nMHD_init (void)\n{\n#if defined(MHD_WINSOCK_SOCKETS)\n  WSADATA wsd;\n#endif /* MHD_WINSOCK_SOCKETS */\n\n  MHD_set_panic_func (NULL, NULL);\n\n#if defined(MHD_WINSOCK_SOCKETS)\n  if (0 != WSAStartup (MAKEWORD (2, 2), &wsd))\n    MHD_PANIC (_ (\"Failed to initialize winsock.\\n\"));\n  if ((2 != LOBYTE (wsd.wVersion)) && (2 != HIBYTE (wsd.wVersion)))\n    MHD_PANIC (_ (\"Winsock version 2.2 is not available.\\n\"));\n#endif /* MHD_WINSOCK_SOCKETS */\n#ifdef HTTPS_SUPPORT\n#ifdef MHD_HTTPS_REQUIRE_GCRYPT\n#if GCRYPT_VERSION_NUMBER < 0x010600\n#if GNUTLS_VERSION_NUMBER <= 0x020b00\n#if defined(MHD_USE_POSIX_THREADS)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_pthread))\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n#elif defined(MHD_W32_MUTEX_)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_w32))\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n#endif /* defined(MHD_W32_MUTEX_) */\n#endif /* GNUTLS_VERSION_NUMBER <= 0x020b00 */\n  gcry_check_version (NULL);\n#else\n  if (NULL == gcry_check_version (\"1.6.0\"))\n    MHD_PANIC (_ (\"libgcrypt is too old. MHD was compiled for \" \\\n                  \"libgcrypt 1.6.0 or newer.\\n\"));\n#endif\n#endif /* MHD_HTTPS_REQUIRE_GCRYPT */\n  gnutls_global_init ();\n#endif /* HTTPS_SUPPORT */\n  MHD_monotonic_sec_counter_init ();\n  MHD_send_init_static_vars_ ();\n  MHD_init_mem_pools_ ();\n  /* Check whether sizes were correctly detected by configure */\n#ifdef _DEBUG\n  if (1)\n  {\n    struct timeval tv;\n    mhd_assert (sizeof(tv.tv_sec) == SIZEOF_STRUCT_TIMEVAL_TV_SEC);\n  }\n#endif /* _DEBUG */\n  mhd_assert (sizeof(uint64_t) == SIZEOF_UINT64_T);\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_init:\n#define MHD_USE_POSIX_THREADS 1\n...\n#define SIZEOF_STRUCT_TIMEVAL_TV_SEC 8\n...\n#define SIZEOF_UINT64_T 8\n...\n#define MHD_PANIC(msg) do{mhd_panic(mhd_panic_cls,__FILE__,__LINE__,msg);BUILTIN_NOT_REACHED;}while(0)\n...\n#define mhd_assert(ignore) ((void)0)\n...\nstatic void\niov_max_init_ (void)\n{\n  long res = sysconf (_SC_IOV_MAX);\n  if (res >= 0)\n    mhd_iov_max_ = (unsigned long) res;\n  else\n  {\n#if defined(IOV_MAX)\n    mhd_iov_max_ = IOV_MAX;\n#else  /* ! IOV_MAX */\n    mhd_iov_max_ = 8; /* Should be the safe limit */\n#endif /* ! IOV_MAX */\n  }\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#ifdef _DEBUG\n  if (1)\n  {\n    struct timeval tv;\n    mhd_assert (sizeof(tv.tv_sec) == SIZEOF_STRUCT_TIMEVAL_TV_SEC);\n  }\n#endif /* _DEBUG */\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "The fragment is inside an #ifdef _DEBUG; when _DEBUG is defined the if(1) block is executed (the condition is always true) and when _DEBUG is not defined the whole block is omitted by the preprocessor. The mhd_assert macro expands to ((void)0), so the size-check expression is compiled out in non-debug builds, but that removal is a conditional-compilation effect, not unreachable code in the compiled translation unit. Therefore there is no code that can never be executed in a compiled build (no unreachable code)."
}