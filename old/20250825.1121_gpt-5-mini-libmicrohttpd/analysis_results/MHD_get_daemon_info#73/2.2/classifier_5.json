{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_get_daemon_info:\n```c\n_MHD_EXTERN const union MHD_DaemonInfo *\nMHD_get_daemon_info (struct MHD_Daemon *daemon,\n                     enum MHD_DaemonInfoType info_type,\n                     ...)\n{\n  if (NULL == daemon)\n    return NULL;\n\n  mhd_assert ((0 == (daemon->options & MHD_USE_SELECT_INTERNALLY)) || \\\n              (NULL != daemon->worker_pool) || \\\n              (MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n  mhd_assert (((0 != (daemon->options & MHD_USE_SELECT_INTERNALLY)) &&\n               (NULL == daemon->worker_pool)) || \\\n              (! MHD_thread_handle_ID_is_valid_handle_ (daemon->tid)));\n\n  switch (info_type)\n  {\n  case MHD_DAEMON_INFO_KEY_SIZE:\n    return NULL;   /* no longer supported */\n  case MHD_DAEMON_INFO_MAC_KEY_SIZE:\n    return NULL;   /* no longer supported */\n  case MHD_DAEMON_INFO_LISTEN_FD:\n    daemon->daemon_info_dummy_listen_fd.listen_fd = daemon->listen_fd;\n    return &daemon->daemon_info_dummy_listen_fd;\n  case MHD_DAEMON_INFO_EPOLL_FD:\n#ifdef EPOLL_SUPPORT\n    daemon->daemon_info_dummy_epoll_fd.epoll_fd = daemon->epoll_fd;\n    return &daemon->daemon_info_dummy_epoll_fd;\n#else  /* ! EPOLL_SUPPORT */\n    return NULL;\n#endif /* ! EPOLL_SUPPORT */\n  case MHD_DAEMON_INFO_CURRENT_CONNECTIONS:\n    if (! MHD_D_IS_THREAD_SAFE_ (daemon))\n      MHD_cleanup_connections (daemon);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    else if (daemon->worker_pool)\n    {\n      unsigned int i;\n      /* Collect the connection information stored in the workers. */\n      daemon->connections = 0;\n      for (i = 0; i < daemon->worker_pool_size; i++)\n      {\n        /* FIXME: next line is thread-safe only if read is atomic. */\n        daemon->connections += daemon->worker_pool[i].connections;\n      }\n    }\n#endif\n    daemon->daemon_info_dummy_num_connections.num_connections\n      = daemon->connections;\n    return &daemon->daemon_info_dummy_num_connections;\n  case MHD_DAEMON_INFO_FLAGS:\n    daemon->daemon_info_dummy_flags.flags = daemon->options;\n    return &daemon->daemon_info_dummy_flags;\n  case MHD_DAEMON_INFO_BIND_PORT:\n    daemon->daemon_info_dummy_port.port = daemon->port;\n    return &daemon->daemon_info_dummy_port;\n  default:\n    return NULL;\n  }\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_get_daemon_info:\nstatic int\nrun_mhd (void)\n{\n  MHD_AccessHandlerCallback reply_func;\n  struct MHD_Daemon *d;\n  unsigned int use_num_threads;\n  unsigned int flags = MHD_NO_FLAG;\n  struct MHD_OptionItem opt_arr[16];\n  size_t opt_count = 0;\n  const union MHD_DaemonInfo *d_info;\n  const char *poll_mode;\n  uint16_t port;\n\n  if (tool_params.thread_per_conn)\n    use_num_threads = 0;\n  else\n    use_num_threads = get_num_threads ();\n  printf (\"\\n\");\n\n  print_perf_warnings ();\n\n  printf (\"Responses:\\n\");\n  printf (\"  Sharing:   \");\n  if (tool_params.shared)\n  {\n    reply_func = &answer_shared_response;\n    printf (\"pre-generated shared pool with %u objects\\n\", num_resps);\n  }\n  else if (tool_params.single)\n  {\n    reply_func = &answer_single_response;\n    printf (\"single pre-generated reused response object\\n\");\n  }\n  else\n  {\n    /* Unique responses */\n    if (tool_params.empty)\n      reply_func = &answer_unique_empty_response;\n    else if (tool_params.tiny)\n      reply_func = &answer_unique_tiny_response;\n    else\n      reply_func = &answer_unique_dyn_response;\n    printf (\"one-time response object generated for every request\\n\");\n  }\n  printf (\"  Body size: %s\\n\",\n          get_mhd_response_size ());\n\n  flags |= MHD_USE_ERROR_LOG;\n  flags |= MHD_USE_INTERNAL_POLLING_THREAD;\n  if (tool_params.epoll)\n    flags |= MHD_USE_EPOLL;\n  else if (tool_params.poll)\n    flags |= MHD_USE_POLL;\n  else if (tool_params.select)\n    (void) flags; /* No special additional flag */\n  else\n    flags |= MHD_USE_AUTO;\n\n  if (tool_params.thread_per_conn)\n    flags |= MHD_USE_THREAD_PER_CONNECTION;\n\n  if (! tool_params.date_header)\n    flags |= MHD_USE_SUPPRESS_DATE_NO_CLOCK;\n\n  if (0 != tool_params.connections)\n  {\n    opt_arr[opt_count].option = MHD_OPTION_CONNECTION_LIMIT;\n    opt_arr[opt_count].value = (intptr_t) tool_params.connections;\n    opt_arr[opt_count].ptr_value = NULL;\n    ++opt_count;\n  }\n  if (1 < use_num_threads)\n  {\n    opt_arr[opt_count].option = MHD_OPTION_THREAD_POOL_SIZE;\n    opt_arr[opt_count].value = (intptr_t) use_num_threads;\n    opt_arr[opt_count].ptr_value = NULL;\n    ++opt_count;\n  }\n  if (1)\n  {\n    opt_arr[opt_count].option = MHD_OPTION_CONNECTION_TIMEOUT;\n    opt_arr[opt_count].value = (intptr_t) tool_params.timeout;\n    opt_arr[opt_count].ptr_value = NULL;\n    ++opt_count;\n  }\n  if (1)\n  {\n    struct MHD_OptionItem option =\n    { MHD_OPTION_END, 0, NULL };\n    opt_arr[opt_count] = option;\n    if (opt_count >= (sizeof(opt_arr) / sizeof(opt_arr[0])))\n      abort ();\n  }\n  d = MHD_start_daemon (flags, mhd_port, NULL, NULL, reply_func, NULL,\n                        MHD_OPTION_ARRAY, opt_arr, MHD_OPTION_END);\n  if (NULL == d)\n  {\n    fprintf (stderr, \"Error starting MHD daemon.\\n\");\n    return 15;\n  }\n  d_info = MHD_get_daemon_info (d, MHD_DAEMON_INFO_FLAGS);\n  if (NULL == d_info)\n    abort ();\n  flags = (unsigned int) d_info->flags;\n  if (0 != (flags & MHD_USE_POLL))\n    poll_mode = \"poll()\";\n  else if (0 != (flags & MHD_USE_EPOLL))\n    poll_mode = \"epoll\";\n  else\n    poll_mode = \"select()\";\n  d_info = MHD_get_daemon_info (d, MHD_DAEMON_INFO_BIND_PORT);\n  if (NULL == d_info)\n    abort ();\n  port = d_info->port;\n  if (0 == port)\n    fprintf (stderr, \"Cannot detect port number. Consider specifying \"\n             \"port number explicitly.\\n\");\n\n  printf (\"MHD is running.\\n\");\n  printf (\"  Bind port:          %u\\n\", (unsigned int) port);\n  printf (\"  Polling function:   %s\\n\", poll_mode);\n  printf (\"  Threading:          \");\n  if (MHD_USE_THREAD_PER_CONNECTION == (flags & MHD_USE_THREAD_PER_CONNECTION))\n    printf (\"thread per connection\\n\");\n  else if (1 == get_num_threads ())\n    printf (\"one MHD thread\\n\");\n  else\n    printf (\"%u MHD threads in thread pool\\n\", get_num_threads ());\n  printf (\"  Connections limit:  %u\\n\", get_mhd_conn_limit (d));\n  printf (\"  Connection timeout: %u%s\\n\", tool_params.timeout,\n          0 == tool_params.timeout ? \" (no timeout)\" : \"\");\n  printf (\"  'Date:' header:     %s\\n\",\n          tool_params.date_header ? \"Yes\" : \"No\");\n  printf (\"To test with remote client use            \"\n          \"http://HOST_IP:%u/\\n\", (unsigned int) port);\n  printf (\"To test with client on the same host use  \"\n          \"http://127.0.0.1:%u/\\n\", (unsigned int) port);\n  printf (\"\\nPress ENTER to stop.\\n\");\n  if (1)\n  {\n    char buf[10];\n    (void) fgets (buf, sizeof(buf), stdin);\n  }\n  MHD_stop_daemon (d);\n  return 0;\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\ncase MHD_DAEMON_INFO_CURRENT_CONNECTIONS:\n    if (! MHD_D_IS_THREAD_SAFE_ (daemon))\n      MHD_cleanup_connections (daemon);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n    else if (daemon->worker_pool)\n    {\n      unsigned int i;\n      /* Collect the connection information stored in the workers. */\n      daemon->connections = 0;\n      for (i = 0; i < daemon->worker_pool_size; i++)\n      {\n        /* FIXME: next line is thread-safe only if read is atomic. */\n        daemon->connections += daemon->worker_pool[i].connections;\n      }\n    }\n#endif\n    daemon->daemon_info_dummy_num_connections.num_connections\n      = daemon->connections;\n    return &daemon->daemon_info_dummy_num_connections;\n```\nFocus on the above code fragment and judge whether it violates the rule 2.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No. The fragment updates daemon->connections (either by calling MHD_cleanup_connections or by summing worker_pool connections) and then stores that value into daemon_info_dummy_num_connections before returning it. Each executed assignment or call contributes to the returned info (or updates daemon state) and thus affects program behaviour. The #if/#endif simply excludes the worker_pool path when threading support is not compiled in (preprocessor exclusion, not dead code). Therefore Rule 2.2 is not violated."
}