{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_ip_count_lock:\n```c\nstatic void\nMHD_ip_count_lock (struct MHD_Daemon *daemon)\n{\n  mhd_assert (NULL == daemon->master);\n#if defined(MHD_USE_POSIX_THREADS) || defined(MHD_USE_W32_THREADS)\n  MHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n#else\n  (void) daemon;\n#endif\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_ip_count_lock:\n#define mhd_assert(ignore) ((void)0)\n...\n#define MHD_mutex_lock_chk_(pmutex) do{if(!MHD_mutex_lock_(pmutex))MHD_PANIC(_(\"Failed to lock mutex.\\n\"));\\\n}while(0)\n...\n#define MHD_USE_POSIX_THREADS 1\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nMHD_mutex_lock_chk_ (&daemon->per_ip_connection_mutex);\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated: the fragment calls the macro MHD_mutex_lock_chk_, which expands to do { if (!MHD_mutex_lock_(pmutex)) MHD_PANIC(...); } while (0). That macro invokes MHD_mutex_lock_ and MHD_PANIC, not MHD_ip_count_lock itself. There is no evidence of MHD_mutex_lock_ or MHD_PANIC calling MHD_ip_count_lock, so there is no direct or indirect self-call in the shown code. (It would only violate Rule 17.2 if one of those called back into MHD_ip_count_lock, which is not shown.)"
}