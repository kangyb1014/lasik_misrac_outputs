{
  "user_message": "An agent A claimed that the following add_new_users code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of add_new_users.\n```c\nstatic int\nadd_new_users (void)\n{\n  if (! add_new_user_entry (\"joepublic\",\n                            \"password\",\n                            REALM,\n                            ! 0,\n                            0))\n    return 0;\n\n  if (! add_new_user_entry (\"superadmin\",\n                            \"pA$$w0Rd\",\n                            REALM,\n                            ! 0,\n                            ! 0))\n    return 0;\n\n  return ! 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf add_new_user_entry is declared with non-const pointer parameters (for example: int add_new_user_entry(char *username, char *password, char *realm, int, int); ), then this call passes string literals (\"joepublic\", \"password\", and likely REALM) to non-const char * parameters. That violates MISRA C 2023 Rule 8.13: pointers should point to const-qualified types whenever possible. To fix, declare parameters as const char * (e.g. const char *username, const char *password, const char *realm). If, however, add_new_user_entry already declares those parameters as const char *, there is no violation.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's reasoning is correct: MISRA C:2023 Rule 8.13 recommends that pointer types should be const-qualified when possible. If the prototype of add_new_user_entry uses non-const char * parameters (e.g. int add_new_user_entry(char *username, char *password, char *realm, int, int);), then passing string literals (\"joepublic\", \"password\", and likely REALM if it expands to a literal) to those non-const parameters is contrary to that recommendation and should be considered a violation. The correct remedy is to declare the parameters as const char * (e.g. const char *username, const char *password, const char *realm) unless the function actually needs to modify the pointed-to characters. If the prototype of add_new_user_entry already uses const-qualified pointer types, then there is no violation. In short: the report's diagnosis and recommended fix are correct, but whether a violation actually exists in this project depends on the declaration of add_new_user_entry (which is not shown)."
}