{
  "user_message": "An agent A claimed that the following add_new_users code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of add_new_users.\n```c\nstatic int\nadd_new_users (void)\n{\n  if (! add_new_user_entry (\"joepublic\",\n                            \"password\",\n                            REALM,\n                            ! 0,\n                            0))\n    return 0;\n\n  if (! add_new_user_entry (\"superadmin\",\n                            \"pA$$w0Rd\",\n                            REALM,\n                            ! 0,\n                            ! 0))\n    return 0;\n\n  return ! 0;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe call passes string literals (\"superadmin\", \"pA$$w0Rd\", REALM) to add_new_user_entry. If add_new_user_entry is declared with non-const pointer parameters (e.g. int add_new_user_entry(char *user, char *pass, char *realm, int, int)), this violates MISRA C 2023 Rule 8.13 because pointers that can point to string literals should be to const-qualified types. The fix is to declare the parameters as const char * (e.g. const char *user, const char *pass, const char *realm).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A's reasoning is correct in the stated scenario. MISRA C 2023 Rule 8.13 requires that pointers point to const-qualified types whenever possible. In this code string literals (and likely the REALM macro) are being passed; if add_new_user_entry is declared with non-const pointer parameters (e.g. char *user, char *pass, char *realm) then that declaration is non-conforming because the parameters should be declared as const char * when the function does not modify the pointed-to characters. The snippet alone does not show the prototype, so the violation cannot be proven from the call site by itself, but given the agent's assumed declaration the report is correct. Recommendation: change the function prototype to use const char * for those parameters (and ensure the function does not modify the strings)."
}