{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of process_request_body:\n```c\nstatic void\nprocess_request_body (struct MHD_Connection *connection)\n{\n  struct MHD_Daemon *daemon = connection->daemon;\n  size_t available;\n  bool instant_retry;\n  char *buffer_head;\n  const int discp_lvl = daemon->client_discipline;\n  /* Treat bare LF as the end of the line.\n     RFC 9112, section 2.2-3\n     Note: MHD never replaces bare LF with space (RFC 9110, section 5.5-5).\n     Bare LF is processed as end of the line or rejected as broken request. */\n  const bool bare_lf_as_crlf = MHD_ALLOW_BARE_LF_AS_CRLF_ (discp_lvl);\n  /* Allow \"Bad WhiteSpace\" in chunk extension.\n     RFC 9112, Section 7.1.1, Paragraph 2 */\n  const bool allow_bws = (2 < discp_lvl);\n\n  mhd_assert (NULL == connection->rp.response);\n\n  buffer_head = connection->read_buffer;\n  available = connection->read_buffer_offset;\n  do\n  {\n    size_t to_be_processed;\n    size_t left_unprocessed;\n    size_t processed_size;\n\n    instant_retry = false;\n    if (connection->rq.have_chunked_upload)\n    {\n      mhd_assert (MHD_SIZE_UNKNOWN == connection->rq.remaining_upload_size);\n      if ( (connection->rq.current_chunk_offset ==\n            connection->rq.current_chunk_size) &&\n           (0 != connection->rq.current_chunk_size) )\n      {\n        size_t i;\n        mhd_assert (0 != available);\n        /* skip new line at the *end* of a chunk */\n        i = 0;\n        if ( (2 <= available) &&\n             ('\\r' == buffer_head[0]) &&\n             ('\\n' == buffer_head[1]) )\n          i += 2;                        /* skip CRLF */\n        else if (bare_lf_as_crlf && ('\\n' == buffer_head[0]))\n          i++;                           /* skip bare LF */\n        else if (2 > available)\n          break;                         /* need more upload data */\n        if (0 == i)\n        {\n          /* malformed encoding */\n          transmit_error_response_static (connection,\n                                          MHD_HTTP_BAD_REQUEST,\n                                          REQUEST_CHUNKED_MALFORMED);\n          return;\n        }\n        available -= i;\n        buffer_head += i;\n        connection->rq.current_chunk_offset = 0;\n        connection->rq.current_chunk_size = 0;\n        if (0 == available)\n          break;\n      }\n      if (0 != connection->rq.current_chunk_size)\n      {\n        uint64_t cur_chunk_left;\n        mhd_assert (connection->rq.current_chunk_offset < \\\n                    connection->rq.current_chunk_size);\n        /* we are in the middle of a chunk, give\n           as much as possible to the client (without\n           crossing chunk boundaries) */\n        cur_chunk_left\n          = connection->rq.current_chunk_size\n            - connection->rq.current_chunk_offset;\n        if (cur_chunk_left > available)\n          to_be_processed = available;\n        else\n        {         /* cur_chunk_left <= (size_t)available */\n          to_be_processed = (size_t) cur_chunk_left;\n          if (available > to_be_processed)\n            instant_retry = true;\n        }\n      }\n      else\n      { /* Need the parse the chunk size line */\n        /** The number of found digits in the chunk size number */\n        size_t num_dig;\n        uint64_t chunk_size;\n        bool broken;\n        bool overflow;\n\n        mhd_assert (0 != available);\n\n        overflow = false;\n        chunk_size = 0; /* Mute possible compiler warning.\n                           The real value will be set later. */\n\n        num_dig = MHD_strx_to_uint64_n_ (buffer_head,\n                                         available,\n                                         &chunk_size);\n        mhd_assert (num_dig <= available);\n        if (num_dig == available)\n          continue; /* Need line delimiter */\n\n        broken = (0 == num_dig);\n        if (broken)\n          /* Check whether result is invalid due to uint64_t overflow */\n          overflow = ((('0' <= buffer_head[0]) && ('9' >= buffer_head[0])) ||\n                      (('A' <= buffer_head[0]) && ('F' >= buffer_head[0])) ||\n                      (('a' <= buffer_head[0]) && ('f' >= buffer_head[0])));\n        else\n        {\n          /**\n           * The length of the string with the number of the chunk size,\n           * including chunk extension\n           */\n          size_t chunk_size_line_len;\n\n          chunk_size_line_len = 0;\n          if ((';' == buffer_head[num_dig]) ||\n              (allow_bws &&\n               ((' ' == buffer_head[num_dig]) ||\n                ('\\t' == buffer_head[num_dig]))))\n          { /* Chunk extension */\n            size_t i;\n\n            /* Skip bad whitespaces (if any) */\n            for (i = num_dig; i < available; ++i)\n            {\n              if ((' ' != buffer_head[i]) && ('\\t' != buffer_head[i]))\n                break;\n            }\n            if (i == available)\n              break; /* need more data */\n            if (';' == buffer_head[i])\n            {\n              for (++i; i < available; ++i)\n              {\n                if ('\\n' == buffer_head[i])\n                  break;\n              }\n              if (i == available)\n                break; /* need more data */\n              mhd_assert (i > num_dig);\n              mhd_assert (1 <= i);\n              /* Found LF position */\n              if (bare_lf_as_crlf)\n                chunk_size_line_len = i; /* Don't care about CR before LF */\n              else if ('\\r' == buffer_head[i - 1])\n                chunk_size_line_len = i;\n            }\n            else\n            { /* No ';' after \"bad whitespace\" */\n              mhd_assert (allow_bws);\n              mhd_assert (0 == chunk_size_line_len);\n            }\n          }\n          else\n          {\n            mhd_assert (available >= num_dig);\n            if ((2 <= (available - num_dig)) &&\n                ('\\r' == buffer_head[num_dig]) &&\n                ('\\n' == buffer_head[num_dig + 1]))\n              chunk_size_line_len = num_dig + 2;\n            else if (bare_lf_as_crlf &&\n                     ('\\n' == buffer_head[num_dig]))\n              chunk_size_line_len = num_dig + 1;\n            else if (2 > (available - num_dig))\n              break; /* need more data */\n          }\n\n          if (0 != chunk_size_line_len)\n          { /* Valid termination of the chunk size line */\n            mhd_assert (chunk_size_line_len <= available);\n            /* Start reading payload data of the chunk */\n            connection->rq.current_chunk_offset = 0;\n            connection->rq.current_chunk_size = chunk_size;\n\n            available -= chunk_size_line_len;\n            buffer_head += chunk_size_line_len;\n\n            if (0 == chunk_size)\n            { /* The final (termination) chunk */\n              connection->rq.remaining_upload_size = 0;\n              break;\n            }\n            if (available > 0)\n              instant_retry = true;\n            continue;\n          }\n          /* Invalid chunk size line */\n        }\n\n        if (! overflow)\n          transmit_error_response_static (connection,\n                                          MHD_HTTP_BAD_REQUEST,\n                                          REQUEST_CHUNKED_MALFORMED);\n        else\n          transmit_error_response_static (connection,\n                                          MHD_HTTP_CONTENT_TOO_LARGE,\n                                          REQUEST_CHUNK_TOO_LARGE);\n        return;\n      }\n    }\n    else\n    {\n      /* no chunked encoding, give all to the client */\n      mhd_assert (MHD_SIZE_UNKNOWN != connection->rq.remaining_upload_size);\n      mhd_assert (0 != connection->rq.remaining_upload_size);\n      if (connection->rq.remaining_upload_size < available)\n        to_be_processed = (size_t) connection->rq.remaining_upload_size;\n      else\n        to_be_processed = available;\n    }\n    left_unprocessed = to_be_processed;\n    connection->rq.client_aware = true;\n    connection->in_access_handler = true;\n    if (MHD_NO ==\n        daemon->default_handler (daemon->default_handler_cls,\n                                 connection,\n                                 connection->rq.url,\n                                 connection->rq.method,\n                                 connection->rq.version,\n                                 buffer_head,\n                                 &left_unprocessed,\n                                 &connection->rq.client_context))\n    {\n      connection->in_access_handler = false;\n      /* serious internal error, close connection */\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Application reported internal error, \" \\\n                                 \"closing connection.\"));\n      return;\n    }\n    connection->in_access_handler = false;\n\n    if (left_unprocessed > to_be_processed)\n      MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n\n    connection->rq.some_payload_processed =\n      (left_unprocessed != to_be_processed);\n\n    if (0 != left_unprocessed)\n    {\n      instant_retry = false; /* client did not process everything */\n#ifdef HAVE_MESSAGES\n      if ((! connection->rq.some_payload_processed) &&\n          (! connection->suspended))\n      {\n        /* client did not process any upload data, complain if\n           the setup was incorrect, which may prevent us from\n           handling the rest of the request */\n        if (MHD_D_IS_USING_THREADS_ (daemon))\n          MHD_DLOG (daemon,\n                    _ (\"WARNING: Access Handler Callback has not processed \" \\\n                       \"any upload data and connection is not suspended. \" \\\n                       \"This may result in hung connection.\\n\"));\n      }\n#endif /* HAVE_MESSAGES */\n    }\n    processed_size = to_be_processed - left_unprocessed;\n    /* dh left \"processed\" bytes in buffer for next time... */\n    buffer_head += processed_size;\n    available -= processed_size;\n    if (! connection->rq.have_chunked_upload)\n    {\n      mhd_assert (MHD_SIZE_UNKNOWN != connection->rq.remaining_upload_size);\n      connection->rq.remaining_upload_size -= processed_size;\n    }\n    else\n    {\n      mhd_assert (MHD_SIZE_UNKNOWN == connection->rq.remaining_upload_size);\n      connection->rq.current_chunk_offset += processed_size;\n    }\n  } while (instant_retry);\n  /* TODO: zero out reused memory region */\n  if ( (available > 0) &&\n       (buffer_head != connection->read_buffer) )\n    memmove (connection->read_buffer,\n             buffer_head,\n             available);\n  else\n    mhd_assert ((0 == available) || \\\n                (connection->read_buffer_offset == available));\n  connection->read_buffer_offset = available;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function process_request_body:\n#define mhd_assert(ignore) ((void)0)\n...\n#define MHD_PANIC(msg) do{mhd_panic(mhd_panic_cls,__FILE__,__LINE__,msg);BUILTIN_NOT_REACHED;}while(0)\n...\n#define CONNECTION_CLOSE_ERROR(c, emsg) connection_close_error(c,emsg)\n...\n#define MHD_ALLOW_BARE_LF_AS_CRLF_(discp_lvl) (0>=discp_lvl)\n...\n#define MHD_D_IS_USING_THREADS_(d) (0!=(d->options&(MHD_USE_INTERNAL_POLLING_THREAD)))\n...\n#define transmit_error_response_static(c, code, msg) transmit_error_response_len(c,code,msg,MHD_STATICSTR_LEN_(msg),NULL,0,NULL,0)\n...\nstatic void\ntransmit_error_response_len (struct MHD_Connection *connection,\n                             unsigned int status_code,\n                             const char *message,\n                             size_t message_len,\n                             char *header_name,\n                             size_t header_name_len,\n                             char *header_value,\n                             size_t header_value_len)\n{\n  struct MHD_Response *response;\n  enum MHD_Result iret;\n\n  mhd_assert (! connection->stop_with_error); /* Do not send error twice */\n  if (connection->stop_with_error)\n  { /* Should not happen */\n    if (MHD_CONNECTION_CLOSED > connection->state)\n      connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  connection->stop_with_error = true;\n  connection->discard_request = true;\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Error processing request (HTTP response code is %u ('%s')). \" \\\n               \"Closing connection.\\n\"),\n            status_code,\n            message);\n#endif\n  if (MHD_CONNECTION_START_REPLY < connection->state)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Too late to send an error response, \" \\\n                 \"response is being sent already.\\n\"),\n              status_code,\n              message);\n#endif\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Too late for error response.\"));\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  /* TODO: remove when special error queue function is implemented */\n  connection->state = MHD_CONNECTION_FULL_REQ_RECEIVED;\n  if (0 != connection->read_buffer_size)\n  {\n    /* Read buffer is not needed anymore, discard it\n     * to free some space for error response. */\n    MHD_pool_deallocate (connection->pool,\n                         connection->read_buffer,\n                         connection->read_buffer_size);\n    connection->read_buffer = NULL;\n    connection->read_buffer_size = 0;\n    connection->read_buffer_offset = 0;\n  }\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n  response = MHD_create_response_from_buffer_static (message_len,\n                                                     message);\n  if (NULL == response)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to create error response.\\n\"),\n              status_code,\n              message);\n#endif\n    /* can't even send a reply, at least close the connection */\n    connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  mhd_assert ((0 == header_name_len) || (NULL != header_name));\n  mhd_assert ((NULL == header_name) || (0 != header_name_len));\n  mhd_assert ((0 == header_value_len) || (NULL != header_value));\n  mhd_assert ((NULL == header_value) || (0 != header_value_len));\n  mhd_assert ((NULL == header_name) || (NULL != header_value));\n  mhd_assert ((NULL != header_value) || (NULL == header_name));\n  if (NULL != header_name)\n  {\n    iret = MHD_add_response_entry_no_alloc_ (response,\n                                             MHD_HEADER_KIND,\n                                             header_name, header_name_len,\n                                             header_value, header_value_len);\n    if (MHD_NO == iret)\n    {\n      free (header_name);\n      free (header_value);\n    }\n  }\n  else\n    iret = MHD_YES;\n\n  if (MHD_NO != iret)\n  {\n    bool before = connection->in_access_handler;\n\n    /* Fake the flag for the internal call */\n    connection->in_access_handler = true;\n    iret = MHD_queue_response (connection,\n                               status_code,\n                               response);\n    connection->in_access_handler = before;\n  }\n  MHD_destroy_response (response);\n  if (MHD_NO == iret)\n  {\n    /* can't even send a reply, at least close the connection */\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Closing connection \" \\\n                               \"(failed to queue error response).\"));\n    return;\n  }\n  mhd_assert (NULL != connection->rp.response);\n  /* Do not reuse this connection. */\n  connection->keepalive = MHD_CONN_MUST_CLOSE;\n  if (MHD_NO == build_header_response (connection))\n  {\n    /* No memory. Release everything. */\n    connection->rq.version = NULL;\n    connection->rq.method = NULL;\n    connection->rq.url = NULL;\n    connection->rq.url_len = 0;\n    connection->rq.headers_received = NULL;\n    connection->rq.headers_received_tail = NULL;\n    connection->write_buffer = NULL;\n    connection->write_buffer_size = 0;\n    connection->write_buffer_send_offset = 0;\n    connection->write_buffer_append_offset = 0;\n    connection->read_buffer\n      = MHD_pool_reset (connection->pool,\n                        NULL,\n                        0,\n                        0);\n    connection->read_buffer_size = 0;\n\n    /* Retry with empty buffer */\n    if (MHD_NO == build_header_response (connection))\n    {\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection \" \\\n                                 \"(failed to create error response header).\"));\n      return;\n    }\n  }\n  connection->state = MHD_CONNECTION_HEADERS_SENDING;\n}\n...\n#define MHD_HTTP_BAD_REQUEST 400\n...\n#define REQUEST_CHUNKED_MALFORMED \"<html><head><title>Request malformed</title></head>\"\"<body>HTTP chunked encoding is syntactically incorrect.</body></html>\"\n...\n#define MHD_HTTP_CONTENT_TOO_LARGE 413\n...\nsize_t\nMHD_strx_to_uint64_n_ (const char *str,\n                       size_t maxlen,\n                       uint64_t *out_val)\n{\n  size_t i;\n  uint64_t res;\n  int digit;\n  if (! str || ! out_val)\n    return 0;\n\n  res = 0;\n  i = 0;\n  while (i < maxlen && (digit = toxdigitvalue (str[i])) >= 0)\n  {\n    if ( (res > (UINT64_MAX / 16)) ||\n         ((res == (UINT64_MAX / 16)) &&\n          ( (uint64_t) digit > (UINT64_MAX % 16)) ) )\n      return 0;\n\n    res *= 16;\n    res += (unsigned int) digit;\n    i++;\n  }\n\n  if (i)\n    *out_val = res;\n  return i;\n}\n...\n_MHD_static_inline int\ntoxdigitvalue (char c)\n{\n#if ! defined(MHD_FAVOR_SMALL_CODE)\n  switch ((unsigned char) c)\n  {\n#if 0 /* Disabled to give the compiler a hint about low probability */\n  case 0x00U:    /* NUL */\n  case 0x01U:    /* SOH */\n  case 0x02U:    /* STX */\n  case 0x03U:    /* ETX */\n  case 0x04U:    /* EOT */\n  case 0x05U:    /* ENQ */\n  case 0x06U:    /* ACK */\n  case 0x07U:    /* BEL */\n  case 0x08U:    /* BS */\n  case 0x09U:    /* HT */\n  case 0x0AU:    /* LF */\n  case 0x0BU:    /* VT */\n  case 0x0CU:    /* FF */\n  case 0x0DU:    /* CR */\n  case 0x0EU:    /* SO */\n  case 0x0FU:    /* SI */\n  case 0x10U:    /* DLE */\n  case 0x11U:    /* DC1 */\n  case 0x12U:    /* DC2 */\n  case 0x13U:    /* DC3 */\n  case 0x14U:    /* DC4 */\n  case 0x15U:    /* NAK */\n  case 0x16U:    /* SYN */\n  case 0x17U:    /* ETB */\n  case 0x18U:    /* CAN */\n  case 0x19U:    /* EM */\n  case 0x1AU:    /* SUB */\n  case 0x1BU:    /* ESC */\n  case 0x1CU:    /* FS */\n  case 0x1DU:    /* GS */\n  case 0x1EU:    /* RS */\n  case 0x1FU:    /* US */\n  case 0x20U:    /* ' ' */\n  case 0x21U:    /* '!' */\n  case 0x22U:    /* '\"' */\n  case 0x23U:    /* '#' */\n  case 0x24U:    /* '$' */\n  case 0x25U:    /* '%' */\n  case 0x26U:    /* '&' */\n  case 0x27U:    /* '\\'' */\n  case 0x28U:    /* '(' */\n  case 0x29U:    /* ')' */\n  case 0x2AU:    /* '*' */\n  case 0x2BU:    /* '+' */\n  case 0x2CU:    /* ',' */\n  case 0x2DU:    /* '-' */\n  case 0x2EU:    /* '.' */\n  case 0x2FU:    /* '/' */\n    return -1;\n#endif\n  case 0x30U: /* '0' */\n    return 0;\n  case 0x31U: /* '1' */\n    return 1;\n  case 0x32U: /* '2' */\n    return 2;\n  case 0x33U: /* '3' */\n    return 3;\n  case 0x34U: /* '4' */\n    return 4;\n  case 0x35U: /* '5' */\n    return 5;\n  case 0x36U: /* '6' */\n    return 6;\n  case 0x37U: /* '7' */\n    return 7;\n  case 0x38U: /* '8' */\n    return 8;\n  case 0x39U: /* '9' */\n    return 9;\n#if 0         /* Disabled to give the compiler a hint about low probability */\n  case 0x3AU: /* ':' */\n  case 0x3BU: /* ';' */\n  case 0x3CU: /* '<' */\n  case 0x3DU: /* '=' */\n  case 0x3EU: /* '>' */\n  case 0x3FU: /* '?' */\n  case 0x40U: /* '@' */\n    return -1;\n#endif\n  case 0x41U: /* 'A' */\n    return 0xAU;\n  case 0x42U: /* 'B' */\n    return 0xBU;\n  case 0x43U: /* 'C' */\n    return 0xCU;\n  case 0x44U: /* 'D' */\n    return 0xDU;\n  case 0x45U: /* 'E' */\n    return 0xEU;\n  case 0x46U: /* 'F' */\n    return 0xFU;\n#if 0         /* Disabled to give the compiler a hint about low probability */\n  case 0x47U: /* 'G' */\n  case 0x48U: /* 'H' */\n  case 0x49U: /* 'I' */\n  case 0x4AU: /* 'J' */\n  case 0x4BU: /* 'K' */\n  case 0x4CU: /* 'L' */\n  case 0x4DU: /* 'M' */\n  case 0x4EU: /* 'N' */\n  case 0x4FU: /* 'O' */\n  case 0x50U: /* 'P' */\n  case 0x51U: /* 'Q' */\n  case 0x52U: /* 'R' */\n  case 0x53U: /* 'S' */\n  case 0x54U: /* 'T' */\n  case 0x55U: /* 'U' */\n  case 0x56U: /* 'V' */\n  case 0x57U: /* 'W' */\n  case 0x58U: /* 'X' */\n  case 0x59U: /* 'Y' */\n  case 0x5AU: /* 'Z' */\n  case 0x5BU: /* '[' */\n  case 0x5CU: /* '\\' */\n  case 0x5DU: /* ']' */\n  case 0x5EU: /* '^' */\n  case 0x5FU: /* '_' */\n  case 0x60U: /* '`' */\n    return -1;\n#endif\n  case 0x61U: /* 'a' */\n    return 0xAU;\n  case 0x62U: /* 'b' */\n    return 0xBU;\n  case 0x63U: /* 'c' */\n    return 0xCU;\n  case 0x64U: /* 'd' */\n    return 0xDU;\n  case 0x65U: /* 'e' */\n    return 0xEU;\n  case 0x66U: /* 'f' */\n    return 0xFU;\n#if 0         /* Disabled to give the compiler a hint about low probability */\n  case 0x67U: /* 'g' */\n  case 0x68U: /* 'h' */\n  case 0x69U: /* 'i' */\n  case 0x6AU: /* 'j' */\n  case 0x6BU: /* 'k' */\n  case 0x6CU: /* 'l' */\n  case 0x6DU: /* 'm' */\n  case 0x6EU: /* 'n' */\n  case 0x6FU: /* 'o' */\n  case 0x70U: /* 'p' */\n  case 0x71U: /* 'q' */\n  case 0x72U: /* 'r' */\n  case 0x73U: /* 's' */\n  case 0x74U: /* 't' */\n  case 0x75U: /* 'u' */\n  case 0x76U: /* 'v' */\n  case 0x77U: /* 'w' */\n  case 0x78U: /* 'x' */\n  case 0x79U: /* 'y' */\n  case 0x7AU: /* 'z' */\n  case 0x7BU: /* '{' */\n  case 0x7CU: /* '|' */\n  case 0x7DU: /* '}' */\n  case 0x7EU: /* '~' */\n  case 0x7FU: /* DEL */\n  case 0x80U: /* EXT */\n  case 0x81U: /* EXT */\n  case 0x82U: /* EXT */\n  case 0x83U: /* EXT */\n  case 0x84U: /* EXT */\n  case 0x85U: /* EXT */\n  case 0x86U: /* EXT */\n  case 0x87U: /* EXT */\n  case 0x88U: /* EXT */\n  case 0x89U: /* EXT */\n  case 0x8AU: /* EXT */\n  case 0x8BU: /* EXT */\n  case 0x8CU: /* EXT */\n  case 0x8DU: /* EXT */\n  case 0x8EU: /* EXT */\n  case 0x8FU: /* EXT */\n  case 0x90U: /* EXT */\n  case 0x91U: /* EXT */\n  case 0x92U: /* EXT */\n  case 0x93U: /* EXT */\n  case 0x94U: /* EXT */\n  case 0x95U: /* EXT */\n  case 0x96U: /* EXT */\n  case 0x97U: /* EXT */\n  case 0x98U: /* EXT */\n  case 0x99U: /* EXT */\n  case 0x9AU: /* EXT */\n  case 0x9BU: /* EXT */\n  case 0x9CU: /* EXT */\n  case 0x9DU: /* EXT */\n  case 0x9EU: /* EXT */\n  case 0x9FU: /* EXT */\n  case 0xA0U: /* EXT */\n  case 0xA1U: /* EXT */\n  case 0xA2U: /* EXT */\n  case 0xA3U: /* EXT */\n  case 0xA4U: /* EXT */\n  case 0xA5U: /* EXT */\n  case 0xA6U: /* EXT */\n  case 0xA7U: /* EXT */\n  case 0xA8U: /* EXT */\n  case 0xA9U: /* EXT */\n  case 0xAAU: /* EXT */\n  case 0xABU: /* EXT */\n  case 0xACU: /* EXT */\n  case 0xADU: /* EXT */\n  case 0xAEU: /* EXT */\n  case 0xAFU: /* EXT */\n  case 0xB0U: /* EXT */\n  case 0xB1U: /* EXT */\n  case 0xB2U: /* EXT */\n  case 0xB3U: /* EXT */\n  case 0xB4U: /* EXT */\n  case 0xB5U: /* EXT */\n  case 0xB6U: /* EXT */\n  case 0xB7U: /* EXT */\n  case 0xB8U: /* EXT */\n  case 0xB9U: /* EXT */\n  case 0xBAU: /* EXT */\n  case 0xBBU: /* EXT */\n  case 0xBCU: /* EXT */\n  case 0xBDU: /* EXT */\n  case 0xBEU: /* EXT */\n  case 0xBFU: /* EXT */\n  case 0xC0U: /* EXT */\n  case 0xC1U: /* EXT */\n  case 0xC2U: /* EXT */\n  case 0xC3U: /* EXT */\n  case 0xC4U: /* EXT */\n  case 0xC5U: /* EXT */\n  case 0xC6U: /* EXT */\n  case 0xC7U: /* EXT */\n  case 0xC8U: /* EXT */\n  case 0xC9U: /* EXT */\n  case 0xCAU: /* EXT */\n  case 0xCBU: /* EXT */\n  case 0xCCU: /* EXT */\n  case 0xCDU: /* EXT */\n  case 0xCEU: /* EXT */\n  case 0xCFU: /* EXT */\n  case 0xD0U: /* EXT */\n  case 0xD1U: /* EXT */\n  case 0xD2U: /* EXT */\n  case 0xD3U: /* EXT */\n  case 0xD4U: /* EXT */\n  case 0xD5U: /* EXT */\n  case 0xD6U: /* EXT */\n  case 0xD7U: /* EXT */\n  case 0xD8U: /* EXT */\n  case 0xD9U: /* EXT */\n  case 0xDAU: /* EXT */\n  case 0xDBU: /* EXT */\n  case 0xDCU: /* EXT */\n  case 0xDDU: /* EXT */\n  case 0xDEU: /* EXT */\n  case 0xDFU: /* EXT */\n  case 0xE0U: /* EXT */\n  case 0xE1U: /* EXT */\n  case 0xE2U: /* EXT */\n  case 0xE3U: /* EXT */\n  case 0xE4U: /* EXT */\n  case 0xE5U: /* EXT */\n  case 0xE6U: /* EXT */\n  case 0xE7U: /* EXT */\n  case 0xE8U: /* EXT */\n  case 0xE9U: /* EXT */\n  case 0xEAU: /* EXT */\n  case 0xEBU: /* EXT */\n  case 0xECU: /* EXT */\n  case 0xEDU: /* EXT */\n  case 0xEEU: /* EXT */\n  case 0xEFU: /* EXT */\n  case 0xF0U: /* EXT */\n  case 0xF1U: /* EXT */\n  case 0xF2U: /* EXT */\n  case 0xF3U: /* EXT */\n  case 0xF4U: /* EXT */\n  case 0xF5U: /* EXT */\n  case 0xF6U: /* EXT */\n  case 0xF7U: /* EXT */\n  case 0xF8U: /* EXT */\n  case 0xF9U: /* EXT */\n  case 0xFAU: /* EXT */\n  case 0xFBU: /* EXT */\n  case 0xFCU: /* EXT */\n  case 0xFDU: /* EXT */\n  case 0xFEU: /* EXT */\n  case 0xFFU: /* EXT */\n    return -1;\n  default:\n    mhd_assert (0);\n    break;  /* Should be unreachable */\n#else\n  default:\n    break;\n#endif\n  }\n  return -1;\n#else  /* MHD_FAVOR_SMALL_CODE */\n  if (isasciidigit (c))\n    return (unsigned char) (c - '0');\n  if ( (c >= 'A') && (c <= 'F') )\n    return (unsigned char) (c - 'A' + 10);\n  if ( (c >= 'a') && (c <= 'f') )\n    return (unsigned char) (c - 'a' + 10);\n\n  return -1;\n#endif /* MHD_FAVOR_SMALL_CODE */\n}\n...\nvoid\nMHD_DLOG (const struct MHD_Daemon *daemon,\n          const char *format,\n          ...)\n{\n  va_list va;\n\n  if (0 == (daemon->options & MHD_USE_ERROR_LOG))\n    return;\n  va_start (va, format);\n  daemon->custom_error_log (daemon->custom_error_log_cls,\n                            format,\n                            va);\n  va_end (va);\n}\n...\n#define MHD_SIZE_UNKNOWN UINT64_MAX\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nif (left_unprocessed > to_be_processed)\n      MHD_PANIC (_ (\"libmicrohttpd API violation.\\n\"));\n```\nFocus on the above code fragment and judge whether it violates the rule 1.2 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The fragment calls MHD_PANIC(_(\"libmicrohttpd API violation.\\n\")); MHD_PANIC is defined as do{ mhd_panic(...,msg); BUILTIN_NOT_REACHED; }while(0). The identifier BUILTIN_NOT_REACHED typically expands to a compiler builtin (for example __builtin_unreachable() or similar), which is a compiler-specific language extension. Because the code relies on that compiler builtin macro, it uses a language extension and thus violates MISRA C 2023 Rule 1.2."
}