{
  "user_message": "Target function code is:\n```c\nstatic bool\nparse_http_version (struct MHD_Connection *connection,\n                    const char *http_string,\n                    size_t len)\n{\n  const char *const h = http_string; /**< short alias */\n  mhd_assert (NULL != http_string);\n\n  /* String must start with 'HTTP/d.d', case-sensetive match.\n   * See https://www.rfc-editor.org/rfc/rfc9112#name-http-version */\n  if ((HTTP_VER_LEN != len) ||\n      ('H' != h[0]) || ('T' != h[1]) || ('T' != h[2]) || ('P' != h[3]) ||\n      ('/' != h[4])\n      || ('.' != h[6]) ||\n      (('0' > h[5]) || ('9' < h[5])) ||\n      (('0' > h[7]) || ('9' < h[7])))\n  {\n    connection->rq.http_ver = MHD_HTTP_VER_INVALID;\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_BAD_REQUEST,\n                                    REQUEST_MALFORMED);\n    return false;\n  }\n  if (1 == h[5] - '0')\n  {\n    /* HTTP/1.x */\n    if (1 == h[7] - '0')\n      connection->rq.http_ver = MHD_HTTP_VER_1_1;\n    else if (0 == h[7] - '0')\n      connection->rq.http_ver = MHD_HTTP_VER_1_0;\n    else\n      connection->rq.http_ver = MHD_HTTP_VER_1_2__1_9;\n\n    return true;\n  }\n\n  if (0 == h[5] - '0')\n  {\n    /* Too old major version */\n    connection->rq.http_ver = MHD_HTTP_VER_TOO_OLD;\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_HTTP_VERSION_NOT_SUPPORTED,\n                                    REQ_HTTP_VER_IS_TOO_OLD);\n    return false;\n  }\n\n  connection->rq.http_ver = MHD_HTTP_VER_FUTURE;\n  transmit_error_response_static (connection,\n                                  MHD_HTTP_HTTP_VERSION_NOT_SUPPORTED,\n                                  REQ_HTTP_VER_IS_NOT_SUPPORTED);\n  return false;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'parse_http_version': {'callees': ['transmit_error_response_len'], 'callers': ['get_request_line_inner']}, 'transmit_error_response_len': {'callees': ['MHD_DLOG', 'connection_close_error', 'MHD_pool_deallocate', 'MHD_destroy_response', 'MHD_create_response_from_buffer_static', 'MHD_queue_response', 'build_header_response', 'MHD_pool_reset'], 'callers': ['handle_req_headers_no_space', 'handle_req_cookie_no_space', 'handle_req_chunk_size_line_no_space', 'handle_req_footers_no_space', 'handle_recv_no_space', 'connection_add_header', 'parse_http_version', 'process_request_body', 'parse_connection_headers', 'get_request_line_inner', 'send_redirect_fixed_rq_target', 'get_request_line', 'get_req_header']}, 'get_request_line_inner': {'callees': ['connection_close_error', 'transmit_error_response_len', 'parse_http_version', 'parse_http_std_method'], 'callers': ['get_request_line']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "mhd_assert",
    "struct MHD_Connection",
    "struct MHD_Connection::rq (type/definition of rq member)",
    "type of rq.http_ver (enum/typedef for http_ver)",
    "bool (definition/typedef / inclusion of <stdbool.h> or project typedef)",
    "HTTP_VER_LEN",
    "MHD_HTTP_VER_INVALID",
    "transmit_error_response_static",
    "MHD_HTTP_BAD_REQUEST",
    "REQUEST_MALFORMED",
    "MHD_HTTP_VER_1_1",
    "MHD_HTTP_VER_1_0",
    "MHD_HTTP_VER_1_2__1_9",
    "MHD_HTTP_VER_TOO_OLD",
    "MHD_HTTP_HTTP_VERSION_NOT_SUPPORTED",
    "REQ_HTTP_VER_IS_TOO_OLD",
    "MHD_HTTP_VER_FUTURE",
    "REQ_HTTP_VER_IS_NOT_SUPPORTED"
  ],
  "explanation": "To determine whether parse_http_version uses any compiler language extensions you must inspect any macros, types or called functions it uses because those definitions can contain extensions (GCC/clang attributes, statement expressions, typeof, inline asm, packed/attribute on structs, nonstandard typedefs, etc.). Explaination for each symbol:\n\n- mhd_assert: It is a macro; macros often expand to compiler-specific constructs (e.g. __attribute__, typeof, statement expressions). The exact macro definition is required to check for extensions.\n\n- struct MHD_Connection: The function dereferences connection and assigns connection->rq.http_ver. The struct definition may use nonstandard attributes (packed, aligned, __attribute__((...))), bitfields, anonymous structs/unions or other extensions; inspect its definition.\n\n- struct MHD_Connection::rq (the rq member's type/definition): rq is a nested member; its type definition may use anonymous structs/unions or other extensions that are language extensions. Need its definition to verify compliance.\n\n- type of rq.http_ver (enum/typedef for http_ver): http_ver could be an enum or a typedef that itself may use implementation-defined underlying types or attributes. Its definition is needed to ensure no extensions (like explicitly sized enums via attributes) are used.\n\n- bool (definition/typedef / inclusion of <stdbool.h> or project typedef): The function returns bool and uses true/false. Confirm whether the project uses standard _Bool/stdbool.h or a nonstandard typedef (which could be an extension).\n\n- HTTP_VER_LEN: A macro/constant used in the length check. Its definition could use nonstandard constructs (complex macros, computed using statement expressions) so inspect it.\n\n- MHD_HTTP_VER_INVALID: and the other MHD_HTTP_VER_* symbols (MHD_HTTP_VER_1_1, MHD_HTTP_VER_1_0, MHD_HTTP_VER_1_2__1_9, MHD_HTTP_VER_TOO_OLD, MHD_HTTP_VER_FUTURE): These constants/enum values need their definitions to see if they use nonstandard features (e.g., enum extensions, explicit attributes, unusual underlying types).\n\n- transmit_error_response_static: This called function (the code calls a transmit_error_response_... symbol) must be inspected because its declaration/definition may use extensions (function attributes, nonstandard calling conventions, inline asm) and also the identifier mismatch in the call graph (transmit_error_response_len) suggests you should fetch both names/aliases/implementations to be certain.\n\n- MHD_HTTP_BAD_REQUEST, REQUEST_MALFORMED, MHD_HTTP_HTTP_VERSION_NOT_SUPPORTED, REQ_HTTP_VER_IS_TOO_OLD, REQ_HTTP_VER_IS_NOT_SUPPORTED: These error-code macros/definitions may be macros or enums; their definitions could include extensions or attribute usage (or be function-like macros). They must be checked.\n\nIn short: inspect the macro definitions (mhd_assert, HTTP_VER_LEN, all named constants), the type definitions (struct MHD_Connection, rq, http_ver, bool), and the called function transmit_error_response_static. Those are the only symbols whose definitions can introduce language extensions that would make parse_http_version violate the MISRA rule."
}