{
  "user_message": "An agent A claimed that the following parse_http_version code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of parse_http_version.\n```c\nstatic bool\nparse_http_version (struct MHD_Connection *connection,\n                    const char *http_string,\n                    size_t len)\n{\n  const char *const h = http_string; /**< short alias */\n  mhd_assert (NULL != http_string);\n\n  /* String must start with 'HTTP/d.d', case-sensetive match.\n   * See https://www.rfc-editor.org/rfc/rfc9112#name-http-version */\n  if ((HTTP_VER_LEN != len) ||\n      ('H' != h[0]) || ('T' != h[1]) || ('T' != h[2]) || ('P' != h[3]) ||\n      ('/' != h[4])\n      || ('.' != h[6]) ||\n      (('0' > h[5]) || ('9' < h[5])) ||\n      (('0' > h[7]) || ('9' < h[7])))\n  {\n    connection->rq.http_ver = MHD_HTTP_VER_INVALID;\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_BAD_REQUEST,\n                                    REQUEST_MALFORMED);\n    return false;\n  }\n  if (1 == h[5] - '0')\n  {\n    /* HTTP/1.x */\n    if (1 == h[7] - '0')\n      connection->rq.http_ver = MHD_HTTP_VER_1_1;\n    else if (0 == h[7] - '0')\n      connection->rq.http_ver = MHD_HTTP_VER_1_0;\n    else\n      connection->rq.http_ver = MHD_HTTP_VER_1_2__1_9;\n\n    return true;\n  }\n\n  if (0 == h[5] - '0')\n  {\n    /* Too old major version */\n    connection->rq.http_ver = MHD_HTTP_VER_TOO_OLD;\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_HTTP_VERSION_NOT_SUPPORTED,\n                                    REQ_HTTP_VER_IS_TOO_OLD);\n    return false;\n  }\n\n  connection->rq.http_ver = MHD_HTTP_VER_FUTURE;\n  transmit_error_response_static (connection,\n                                  MHD_HTTP_HTTP_VERSION_NOT_SUPPORTED,\n                                  REQ_HTTP_VER_IS_NOT_SUPPORTED);\n  return false;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nPotential violation if MHD_create_response_from_buffer_static uses string.h routines that assume NUL-terminated strings or an incorrect length. For example, if the function calls strlen(message) while message is a non\u2011NUL\u2011terminated buffer (message_len gives the correct explicit length), strlen will read beyond the buffer bounds. Equally, if message_len does not reflect the actual allocated size of message and the function uses memcpy/memmove with message_len, that will read beyond the object. In these cases the call to MHD_create_response_from_buffer_static(message_len, message) would violate MISRA C 2023 Rule 21.17.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function parse_http_version:\n#define HTTP_VER_LEN (MHD_STATICSTR_LEN_(MHD_HTTP_VERSION_1_1))\n...\n#define mhd_assert(ignore) ((void)0)\n...\nstatic void\ntransmit_error_response_len (struct MHD_Connection *connection,\n                             unsigned int status_code,\n                             const char *message,\n                             size_t message_len,\n                             char *header_name,\n                             size_t header_name_len,\n                             char *header_value,\n                             size_t header_value_len)\n{\n  struct MHD_Response *response;\n  enum MHD_Result iret;\n\n  mhd_assert (! connection->stop_with_error); /* Do not send error twice */\n  if (connection->stop_with_error)\n  { /* Should not happen */\n    if (MHD_CONNECTION_CLOSED > connection->state)\n      connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  connection->stop_with_error = true;\n  connection->discard_request = true;\n#ifdef HAVE_MESSAGES\n  MHD_DLOG (connection->daemon,\n            _ (\"Error processing request (HTTP response code is %u ('%s')). \" \\\n               \"Closing connection.\\n\"),\n            status_code,\n            message);\n#endif\n  if (MHD_CONNECTION_START_REPLY < connection->state)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Too late to send an error response, \" \\\n                 \"response is being sent already.\\n\"),\n              status_code,\n              message);\n#endif\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Too late for error response.\"));\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  /* TODO: remove when special error queue function is implemented */\n  connection->state = MHD_CONNECTION_FULL_REQ_RECEIVED;\n  if (0 != connection->read_buffer_size)\n  {\n    /* Read buffer is not needed anymore, discard it\n     * to free some space for error response. */\n    MHD_pool_deallocate (connection->pool,\n                         connection->read_buffer,\n                         connection->read_buffer_size);\n    connection->read_buffer = NULL;\n    connection->read_buffer_size = 0;\n    connection->read_buffer_offset = 0;\n  }\n  if (NULL != connection->rp.response)\n  {\n    MHD_destroy_response (connection->rp.response);\n    connection->rp.response = NULL;\n  }\n  response = MHD_create_response_from_buffer_static (message_len,\n                                                     message);\n  if (NULL == response)\n  {\n#ifdef HAVE_MESSAGES\n    MHD_DLOG (connection->daemon,\n              _ (\"Failed to create error response.\\n\"),\n              status_code,\n              message);\n#endif\n    /* can't even send a reply, at least close the connection */\n    connection->state = MHD_CONNECTION_CLOSED;\n    free (header_name);\n    free (header_value);\n    return;\n  }\n  mhd_assert ((0 == header_name_len) || (NULL != header_name));\n  mhd_assert ((NULL == header_name) || (0 != header_name_len));\n  mhd_assert ((0 == header_value_len) || (NULL != header_value));\n  mhd_assert ((NULL == header_value) || (0 != header_value_len));\n  mhd_assert ((NULL == header_name) || (NULL != header_value));\n  mhd_assert ((NULL != header_value) || (NULL == header_name));\n  if (NULL != header_name)\n  {\n    iret = MHD_add_response_entry_no_alloc_ (response,\n                                             MHD_HEADER_KIND,\n                                             header_name, header_name_len,\n                                             header_value, header_value_len);\n    if (MHD_NO == iret)\n    {\n      free (header_name);\n      free (header_value);\n    }\n  }\n  else\n    iret = MHD_YES;\n\n  if (MHD_NO != iret)\n  {\n    bool before = connection->in_access_handler;\n\n    /* Fake the flag for the internal call */\n    connection->in_access_handler = true;\n    iret = MHD_queue_response (connection,\n                               status_code,\n                               response);\n    connection->in_access_handler = before;\n  }\n  MHD_destroy_response (response);\n  if (MHD_NO == iret)\n  {\n    /* can't even send a reply, at least close the connection */\n    CONNECTION_CLOSE_ERROR (connection,\n                            _ (\"Closing connection \" \\\n                               \"(failed to queue error response).\"));\n    return;\n  }\n  mhd_assert (NULL != connection->rp.response);\n  /* Do not reuse this connection. */\n  connection->keepalive = MHD_CONN_MUST_CLOSE;\n  if (MHD_NO == build_header_response (connection))\n  {\n    /* No memory. Release everything. */\n    connection->rq.version = NULL;\n    connection->rq.method = NULL;\n    connection->rq.url = NULL;\n    connection->rq.url_len = 0;\n    connection->rq.headers_received = NULL;\n    connection->rq.headers_received_tail = NULL;\n    connection->write_buffer = NULL;\n    connection->write_buffer_size = 0;\n    connection->write_buffer_send_offset = 0;\n    connection->write_buffer_append_offset = 0;\n    connection->read_buffer\n      = MHD_pool_reset (connection->pool,\n                        NULL,\n                        0,\n                        0);\n    connection->read_buffer_size = 0;\n\n    /* Retry with empty buffer */\n    if (MHD_NO == build_header_response (connection))\n    {\n      CONNECTION_CLOSE_ERROR (connection,\n                              _ (\"Closing connection \" \\\n                                 \"(failed to create error response header).\"));\n      return;\n    }\n  }\n  connection->state = MHD_CONNECTION_HEADERS_SENDING;\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Agent A's report is not supported by the code shown. The parse_http_version function itself does not call any <string.h> functions (memcpy, strlen, etc.) and therefore cannot by itself violate MISRA C 2023 Rule 21.17. The error-path code shown passes an explicit message pointer and an explicit message_len to MHD_create_response_from_buffer_static via transmit_error_response_len. That call is safe provided the callee honors the supplied length and does not internally call string.h routines which assume a NUL-terminated C string or otherwise read past the supplied buffer. The alleged violation depends entirely on the implementation of MHD_create_response_from_buffer_static (or any other function it invokes). No such implementation is shown, so the claim is speculative. To establish a true Rule 21.17 violation you would need evidence that MHD_create_response_from_buffer_static (or other downstream code) calls a <string.h> function in a way that accesses beyond the actual object bounds (for example calling strlen() on a non-NUL-terminated buffer or using memcpy with an incorrect length). Absent that evidence, the report is incorrect."
}