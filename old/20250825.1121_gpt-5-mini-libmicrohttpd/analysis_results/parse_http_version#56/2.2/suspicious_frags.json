{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 2.2 is: A project shall not contain dead code.\nAny operation that is executed but whose removal would not affect program behaviour constitutes dead code. Notes:\n1. The behaviour of an embedded sytem is often determined not just by the nature of its actions, but also by the time at which they occur.\n2. unreachable code is not dead code, as it cannot be executed.\n3.Initialization is not the same as an assignment operation and is therfore not a candidate for dead code.\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of parse_http_version:\n```c\nstatic bool\nparse_http_version (struct MHD_Connection *connection,\n                    const char *http_string,\n                    size_t len)\n{\n  const char *const h = http_string; /**< short alias */\n  mhd_assert (NULL != http_string);\n\n  /* String must start with 'HTTP/d.d', case-sensetive match.\n   * See https://www.rfc-editor.org/rfc/rfc9112#name-http-version */\n  if ((HTTP_VER_LEN != len) ||\n      ('H' != h[0]) || ('T' != h[1]) || ('T' != h[2]) || ('P' != h[3]) ||\n      ('/' != h[4])\n      || ('.' != h[6]) ||\n      (('0' > h[5]) || ('9' < h[5])) ||\n      (('0' > h[7]) || ('9' < h[7])))\n  {\n    connection->rq.http_ver = MHD_HTTP_VER_INVALID;\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_BAD_REQUEST,\n                                    REQUEST_MALFORMED);\n    return false;\n  }\n  if (1 == h[5] - '0')\n  {\n    /* HTTP/1.x */\n    if (1 == h[7] - '0')\n      connection->rq.http_ver = MHD_HTTP_VER_1_1;\n    else if (0 == h[7] - '0')\n      connection->rq.http_ver = MHD_HTTP_VER_1_0;\n    else\n      connection->rq.http_ver = MHD_HTTP_VER_1_2__1_9;\n\n    return true;\n  }\n\n  if (0 == h[5] - '0')\n  {\n    /* Too old major version */\n    connection->rq.http_ver = MHD_HTTP_VER_TOO_OLD;\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_HTTP_VERSION_NOT_SUPPORTED,\n                                    REQ_HTTP_VER_IS_TOO_OLD);\n    return false;\n  }\n\n  connection->rq.http_ver = MHD_HTTP_VER_FUTURE;\n  transmit_error_response_static (connection,\n                                  MHD_HTTP_HTTP_VERSION_NOT_SUPPORTED,\n                                  REQ_HTTP_VER_IS_NOT_SUPPORTED);\n  return false;\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are related to the target function parse_http_version:\n#define HTTP_VER_LEN (MHD_STATICSTR_LEN_(MHD_HTTP_VERSION_1_1))\n...\n#define MHD_HTTP_BAD_REQUEST 400\n...\n#define REQUEST_MALFORMED \"<html><head><title>Request malformed</title></head>\"\"<body>HTTP request is syntactically incorrect.</body></html>\"\n...\n#define MHD_HTTP_HTTP_VERSION_NOT_SUPPORTED 505\n...\n#define REQ_HTTP_VER_IS_TOO_OLD \"<html><head><title>Requested HTTP version is not supported</title></head>\"\"<body>Requested HTTP version is too old and not \"\"supported.</body></html>\"\n...\n#define REQ_HTTP_VER_IS_NOT_SUPPORTED \"<html><head><title>Requested HTTP version is not supported</title></head>\"\"<body>Requested HTTP version is not supported.</body></html>\"\n</additional code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "if (1 == h[7] - '0')\n      connection->rq.http_ver = MHD_HTTP_VER_1_1;\n    else if (0 == h[7] - '0')\n      connection->rq.http_ver = MHD_HTTP_VER_1_0;\n    else\n      connection->rq.http_ver = MHD_HTTP_VER_1_2__1_9;\n\n    return true;",
    "mhd_assert (NULL != http_string);",
    "connection->rq.http_ver = MHD_HTTP_VER_INVALID;\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_BAD_REQUEST,\n                                    REQUEST_MALFORMED);\n    return false;",
    "connection->rq.http_ver = MHD_HTTP_VER_FUTURE;\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_HTTP_VERSION_NOT_SUPPORTED,\n                                    REQ_HTTP_VER_IS_NOT_SUPPORTED);\n    return false;",
    "connection->rq.http_ver = MHD_HTTP_VER_TOO_OLD;\n    transmit_error_response_static (connection,\n                                    MHD_HTTP_HTTP_VERSION_NOT_SUPPORTED,\n                                    REQ_HTTP_VER_IS_TOO_OLD);\n    return false;"
  ],
  "explanation": "The remainder of the function consists of explicit syntactic checks (length and character-by-character matches), digit-range checks and control flow that dispatches to the above assignments/calls. Those checks are the core parsing logic and are reachable for different input bytes; they have observable effects (deciding success/failure, selecting branches, calling the transmit function or returning true) and therefore do not appear to be dead. The character comparisons, len check, digit validations and the overall branching that distinguishes major/minor digits are necessary to implement the HTTP version parsing and must be investigated only if the above assignments/calls prove to be irrelevant. The fragments selected above should be investigated because the assignments to connection->rq.http_ver (and the immediately following transmit_error_response_static calls / returns) might be redundant (for example if transmit_error_response_static overwrites rq.http_ver, if callers never read rq.http_ver after certain failures, or if the return value is ignored elsewhere). All other statements implement reachable parsing behavior and are not flagged as potentially dead."
}