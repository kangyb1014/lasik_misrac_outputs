{
  "user_message": "An agent A claimed that the following iov_max_init_ code violates the MISRA C 2023 rule 2.1.\n<misra_rule>\nMISRA C 2023 Rule 2.1 is A project shall not contain unreachable code.\n\n</misra_rule>\n<target_code>\nHere is the original code of iov_max_init_.\n```c\nstatic void\niov_max_init_ (void)\n{\n  long res = sysconf (_SC_IOV_MAX);\n  if (res >= 0)\n    mhd_iov_max_ = (unsigned long) res;\n  else\n  {\n#if defined(IOV_MAX)\n    mhd_iov_max_ = IOV_MAX;\n#else  /* ! IOV_MAX */\n    mhd_iov_max_ = 8; /* Should be the safe limit */\n#endif /* ! IOV_MAX */\n  }\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe static function iov_max_init_ is defined unconditionally but the only call to it is inside a conditional compilation block: #if defined(HAVE_SYSCONF) && defined(_SC_IOV_MAX) iov_max_init_ (); #endif. If the macros HAVE_SYSCONF and/or _SC_IOV_MAX are not defined for the build, the call is not compiled while the static function remains in the translation unit and is never referenced \u2014 i.e. unreachable code.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function iov_max_init_:\nstatic unsigned long mhd_iov_max_ = 0\n...\nvoid\nMHD_send_init_static_vars_ (void)\n{\n#ifdef HAVE_FREEBSD_SENDFILE\n  /* FreeBSD 11 and later allow to specify read-ahead size\n   * and handles SF_NODISKIO differently.\n   * SF_FLAGS defined only on FreeBSD 11 and later. */\n#ifdef SF_FLAGS\n  freebsd_sendfile_init_ ();\n#endif /* SF_FLAGS */\n#endif /* HAVE_FREEBSD_SENDFILE */\n#if defined(HAVE_SYSCONF) && defined(_SC_IOV_MAX)\n  iov_max_init_ ();\n#endif /* HAVE_SYSCONF && _SC_IOV_MAX */\n}\n...\nvoid\nMHD_init (void)\n{\n#if defined(MHD_WINSOCK_SOCKETS)\n  WSADATA wsd;\n#endif /* MHD_WINSOCK_SOCKETS */\n\n  MHD_set_panic_func (NULL, NULL);\n\n#if defined(MHD_WINSOCK_SOCKETS)\n  if (0 != WSAStartup (MAKEWORD (2, 2), &wsd))\n    MHD_PANIC (_ (\"Failed to initialize winsock.\\n\"));\n  if ((2 != LOBYTE (wsd.wVersion)) && (2 != HIBYTE (wsd.wVersion)))\n    MHD_PANIC (_ (\"Winsock version 2.2 is not available.\\n\"));\n#endif /* MHD_WINSOCK_SOCKETS */\n#ifdef HTTPS_SUPPORT\n#ifdef MHD_HTTPS_REQUIRE_GCRYPT\n#if GCRYPT_VERSION_NUMBER < 0x010600\n#if GNUTLS_VERSION_NUMBER <= 0x020b00\n#if defined(MHD_USE_POSIX_THREADS)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_pthread))\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n#elif defined(MHD_W32_MUTEX_)\n  if (0 != gcry_control (GCRYCTL_SET_THREAD_CBS,\n                         &gcry_threads_w32))\n    MHD_PANIC (_ (\"Failed to initialise multithreading in libgcrypt.\\n\"));\n#endif /* defined(MHD_W32_MUTEX_) */\n#endif /* GNUTLS_VERSION_NUMBER <= 0x020b00 */\n  gcry_check_version (NULL);\n#else\n  if (NULL == gcry_check_version (\"1.6.0\"))\n    MHD_PANIC (_ (\"libgcrypt is too old. MHD was compiled for \" \\\n                  \"libgcrypt 1.6.0 or newer.\\n\"));\n#endif\n#endif /* MHD_HTTPS_REQUIRE_GCRYPT */\n  gnutls_global_init ();\n#endif /* HTTPS_SUPPORT */\n  MHD_monotonic_sec_counter_init ();\n  MHD_send_init_static_vars_ ();\n  MHD_init_mem_pools_ ();\n  /* Check whether sizes were correctly detected by configure */\n#ifdef _DEBUG\n  if (1)\n  {\n    struct timeval tv;\n    mhd_assert (sizeof(tv.tv_sec) == SIZEOF_STRUCT_TIMEVAL_TV_SEC);\n  }\n#endif /* _DEBUG */\n  mhd_assert (sizeof(uint64_t) == SIZEOF_UINT64_T);\n}\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct. MISRA 2.1 prohibits code that is unreachable (i.e. code that can never be executed). The static function iov_max_init_ is conditionally invoked in the same translation unit inside #if defined(HAVE_SYSCONF) && defined(_SC_IOV_MAX) iov_max_init_ (); #endif. That means the function is reachable in builds where those macros are defined. The presence of the unconditional definition of the function is appropriate because different build configurations may enable the call; its mere absence of a call in one particular configuration does not make the function intrinsically unreachable in the project as a whole. In short, this is an example of configuration-dependent usage, not of code that is provably never executable under any build/condition, so it does not violate MISRA C 2023 Rule 2.1."
}