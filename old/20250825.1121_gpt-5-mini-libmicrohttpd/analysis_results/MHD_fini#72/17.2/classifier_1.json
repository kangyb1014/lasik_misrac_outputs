{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 17.2 is: Functions shall not call themselves, either directly or indirectly.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_fini:\n```c\nvoid\nMHD_fini (void)\n{\n#ifdef HTTPS_SUPPORT\n  gnutls_global_deinit ();\n#endif /* HTTPS_SUPPORT */\n#if defined(MHD_WINSOCK_SOCKETS)\n  WSACleanup ();\n#endif /* MHD_WINSOCK_SOCKETS */\n  MHD_monotonic_sec_counter_finish ();\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_fini:\nvoid\nMHD_monotonic_sec_counter_finish (void)\n{\n#ifdef HAVE_CLOCK_GET_TIME\n  if (_MHD_INVALID_CLOCK_SERV != mono_clock_service)\n  {\n    mach_port_deallocate (mach_task_self (),\n                          mono_clock_service);\n    mono_clock_service = _MHD_INVALID_CLOCK_SERV;\n  }\n#endif /* HAVE_CLOCK_GET_TIME */\n}\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\nmach_port_deallocate (mach_task_self (),\n                          mono_clock_service);\n```\nFocus on the above code fragment and judge whether it violates the rule 17.2 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "No violation: MHD_fini calls MHD_monotonic_sec_counter_finish, which calls the system functions mach_task_self() and mach_port_deallocate(). There is no evidence of MHD_fini or MHD_monotonic_sec_counter_finish calling themselves either directly or indirectly. Unless the system functions (mach_task_self or mach_port_deallocate) invoke callbacks that re-enter these functions (no such behavior shown), Rule 17.2 is not violated."
}