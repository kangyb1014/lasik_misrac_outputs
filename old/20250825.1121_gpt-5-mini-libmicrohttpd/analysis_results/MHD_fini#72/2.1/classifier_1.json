{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 2.1 is: A project shall not contain unreachable code.\n\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_fini:\n```c\nvoid\nMHD_fini (void)\n{\n#ifdef HTTPS_SUPPORT\n  gnutls_global_deinit ();\n#endif /* HTTPS_SUPPORT */\n#if defined(MHD_WINSOCK_SOCKETS)\n  WSACleanup ();\n#endif /* MHD_WINSOCK_SOCKETS */\n  MHD_monotonic_sec_counter_finish ();\n}\n```\n</target_code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n#if defined(MHD_WINSOCK_SOCKETS)\n  WSACleanup ();\n#endif /* MHD_WINSOCK_SOCKETS */\n```\nFocus on the above code fragment and judge whether it violates the rule 2.1 or not.\n</target_code>\n",
  "is_rule_violated": false,
  "scenario": "Not violated. The fragment is guarded by a preprocessor conditional (#if defined(MHD_WINSOCK_SOCKETS)) so the WSACleanup() call is either compiled into the translation unit (and thus potentially reachable at runtime) or is omitted entirely by the preprocessor. MISRA Rule 2.1 concerns code that is present in the translation unit but can never be executed; conditionally excluded code is not unreachable code in the compiled program. (A violation would only occur if code remaining in the translation unit could never be executed due to program control flow, which is not the case here.)"
}