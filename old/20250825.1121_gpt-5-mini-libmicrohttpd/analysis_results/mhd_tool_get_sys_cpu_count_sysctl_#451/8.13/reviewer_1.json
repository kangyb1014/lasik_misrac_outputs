{
  "user_message": "An agent A claimed that the following mhd_tool_get_sys_cpu_count_sysctl_ code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of mhd_tool_get_sys_cpu_count_sysctl_.\n```c\nstatic int\nmhd_tool_get_sys_cpu_count_sysctl_ (void)\n{\n  int ret = -1;\n  /* Do not use sysctl() function on GNU/Linux even if\n     sysctl() is available */\n#ifndef __linux__\n#ifdef HAVE_SYSCTLBYNAME\n  if (0 >= ret)\n  {\n    size_t value_size = sizeof (ret);\n    /* Darwin: The number of available logical CPUs */\n    if ((0 != sysctlbyname (\"hw.logicalcpu\", &ret, &value_size,\n                            NULL, 0))\n        || (sizeof (ret) != value_size))\n      ret = -1;\n  }\n  if (0 >= ret)\n  {\n    size_t value_size = sizeof (ret);\n    /* FreeBSD: The number of online CPUs */\n    if ((0 != sysctlbyname (\"kern.smp.cpus\", &ret, &value_size,\n                            NULL, 0))\n        || (sizeof (ret) != value_size))\n      ret = -1;\n  }\n  if (0 >= ret)\n  {\n    size_t value_size = sizeof (ret);\n    /* Darwin: The current number of CPUs available to run threads */\n    if ((0 != sysctlbyname (\"hw.activecpu\", &ret, &value_size,\n                            NULL, 0))\n        || (sizeof (ret) != value_size))\n      ret = -1;\n  }\n  if (0 >= ret)\n  {\n    size_t value_size = sizeof (ret);\n    /* OpenBSD, NetBSD: The number of online CPUs */\n    if ((0 != sysctlbyname (\"hw.ncpuonline\", &ret, &value_size,\n                            NULL, 0))\n        || (sizeof (ret) != value_size))\n      ret = -1;\n  }\n  if (0 >= ret)\n  {\n    size_t value_size = sizeof (ret);\n    /* Darwin: The old/alternative name for \"hw.activecpu\" */\n    if ((0 != sysctlbyname (\"hw.availcpu\", &ret, &value_size,\n                            NULL, 0))\n        || (sizeof (ret) != value_size))\n      ret = -1;\n  }\n#endif /* HAVE_SYSCTLBYNAME */\n#if defined(HAVE_SYSCTL) && \\\n  defined(HAS_DECL_CTL_HW) && \\\n  defined(HAS_DECL_HW_NCPUONLINE)\n  if (0 >= ret)\n  {\n    /* OpenBSD, NetBSD: The number of online CPUs */\n    int mib[2] = {CTL_HW, HW_NCPUONLINE};\n    size_t value_size = sizeof (ret);\n    if ((0 != sysctl (mib, 2, &ret, &value_size, NULL, 0))\n        || (sizeof (ret) != value_size))\n      ret = -1;\n  }\n#endif /* HAVE_SYSCTL && HAS_DECL_CTL_HW && HAS_DECL_HW_NCPUONLINE */\n#if defined(HAVE_SYSCTL) && \\\n  defined(HAS_DECL_CTL_HW) && \\\n  defined(HAS_DECL_HW_AVAILCPU)\n  if (0 >= ret)\n  {\n    /* Darwin: The MIB name for \"hw.activecpu\" */\n    int mib[2] = {CTL_HW, HW_AVAILCPU};\n    size_t value_size = sizeof (ret);\n    if ((0 != sysctl (mib, 2, &ret, &value_size, NULL, 0))\n        || (sizeof (ret) != value_size))\n      ret = -1;\n  }\n#endif /* HAVE_SYSCTL && HAS_DECL_CTL_HW && HAS_DECL_HW_AVAILCPU */\n#endif /* ! __linux__ */\n  if (0 >= ret)\n    return -1;\n  return ret;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe local array 'mib' is declared as a non-const int (int mib[2] = {CTL_HW, HW_NCPUONLINE};) even though its contents are not modified and it is only passed to sysctl() for read-only use. According to MISRA C 2023 Rule 8.13, the object pointed-to should be const-qualified whenever possible, so 'mib' should be declared const (e.g. const int mib[2] = { ... };).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "The report is not correct as a general MISRA 8.13 violation. Rule 8.13 asks that pointers point to const-qualified types whenever possible, but that \u201cwhenever possible\u201d is constrained by the called API. The MIB array here is passed to sysctl(), and the parameter type of sysctl differs between platforms/headers: on some systems the prototype expects const int * (so declaring the array const would be possible), but on other platforms the prototype is int * (non-const). Declaring mib as const unconditionally could therefore produce an incompatible pointer conversion (or compilation error) on platforms where sysctl expects a non-const int *. MISRA allows the API interoperability constraint \u2014 you cannot unilaterally const-qualify an object if the called function requires a non-const pointer. Thus the mere presence of a non-const local array that is not modified is not itself a definite MISRA 8.13 violation in portable code that must call sysctl. If the translation unit is known to use a sysctl prototype taking const int *, then making mib const would be fine, but that is a platform-specific possibility rather than a guaranteed violation in the shown code."
}