{
  "user_message": "An agent A claimed that the following completed_callback code violates the MISRA C 2023 rule 8.13.\n<misra_rule>\nMISRA C 2023 Rule 8.13 is A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<target_code>\nHere is the original code of completed_callback.\n```c\nstatic void\ncompleted_callback (void *cls,\n                    struct MHD_Connection *connection,\n                    void **req_cls,\n                    enum MHD_RequestTerminationCode toe)\n{\n  struct timeval *tv = *req_cls;\n  struct timeval tve;\n  uint64_t delta;\n  (void) cls;         /* Unused. Silent compiler warning. */\n  (void) connection;  /* Unused. Silent compiler warning. */\n  (void) toe;         /* Unused. Silent compiler warning. */\n\n  if (NULL == tv)\n    return;\n  gettimeofday (&tve, NULL);\n\n  delta = ((uint64_t) (tve.tv_sec - tv->tv_sec)) * 1000000LL\n          + (uint64_t) tve.tv_usec - (uint64_t) tv->tv_usec;\n  if (delta < SMALL)\n    small_deltas[delta]++;\n  else\n    fprintf (stdout, \"D: %\" PRIu64 \" 1\\n\", delta);\n  free (tv);\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nViolation: the parameter 'cls' is declared as void * but is not used or modified in the function (it is only cast away with (void) cls). Per MISRA C 2023 Rule 8.13 the pointer should be to a const-qualified type (i.e. const void *cls) unless the non-const signature is mandated by an external API (in which case the deviation is unavoidable).\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": false,
  "explanation": "Not correct. Rule 8.13 says pointers should point to const-qualified types where possible, but it explicitly allows that you cannot change the signature when it is mandated by an external API. The completed_callback function is a callback whose prototype is provided by the external MHD API (the cls parameter is the user-supplied context passed through by the library), so its parameter types must match the library's prototype. Converting cls to const void * would break the required callback signature. If this really is the MHD callback, the non-const void * is an unavoidable API-mandated deviation and should be documented/justified per MISRA; if the function were not constrained by an external prototype, then yes, cls should be declared as const void *."
}