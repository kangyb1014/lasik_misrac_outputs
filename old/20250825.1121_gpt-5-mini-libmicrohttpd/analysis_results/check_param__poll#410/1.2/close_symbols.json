{
  "user_message": "Target function code is:\n```c\nstatic int\ncheck_param__poll (void)\n{\n  if (! tool_params.poll)\n    return ! 0;\n  if (MHD_NO == MHD_is_feature_supported (MHD_FEATURE_POLL))\n  {\n    fprintf (stderr, \"poll() was requested, but this MHD build does not \"\n             \"support polling by poll().\\n\");\n    return 0;\n  }\n  return ! 0;\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'check_param__poll': {'callees': ['MHD_is_feature_supported'], 'callers': ['check_apply_params']}, 'MHD_is_feature_supported': {'callees': [], 'callers': ['show_help', 'check_param_port', 'check_param__epoll', 'check_param__poll', 'print_perf_warnings']}, 'check_apply_params': {'callees': ['show_help', 'print_version', 'check_param_port', 'check_apply_param__all_cpus', 'check_apply_param__threads', 'check_apply_param__thread_per_conn', 'check_param__epoll', 'check_param__poll', 'check_param__empty_tiny_medium_large', 'check_param__shared_single_unique', 'check_param__connections'], 'callers': ['main']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_is_feature_supported",
    "MHD_NO",
    "MHD_FEATURE_POLL",
    "tool_params",
    "fprintf",
    "stderr"
  ],
  "explanation": "MHD_is_feature_supported: need its declaration/definition to determine whether it is a plain C function or implemented as a macro/inline/attribute/extension (e.g. GCC statement-expr, __attribute__, builtin, variadic macro or other compiler extension). MHD_NO: need its definition to see whether it is a simple enum/constant or a macro that uses compiler-specific extensions. MHD_FEATURE_POLL: need its definition to check whether it is a plain integer constant/macro or built using compiler extensions. tool_params: need the declaration (type and the poll member) to verify the member type (plain int, _Bool, bit-field, or any non\u2011standard extension) and to ensure no compiler-specific attributes/bit-field names/anonymous structs are used. fprintf: need its declaration/definition (or included header) to confirm it is the standard library function and not redefined as a macro/inline/wrapper that uses compiler extensions. stderr: need its declaration to ensure it is the standard FILE* object and not a macro or extension-provided symbol. These symbols are required because MISRA rule checking for language extensions must inspect the actual definitions (macros, typedefs, attributes, inline/asm, variadic macro usage, statement-expressions, etc.) to decide whether any non\u2011standard compiler extensions are being used by the code paths exercised in the target function."
}