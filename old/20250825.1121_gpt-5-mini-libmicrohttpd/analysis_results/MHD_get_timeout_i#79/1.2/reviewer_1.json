{
  "user_message": "An agent A claimed that the following MHD_get_timeout_i code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_timeout_i.\n```c\n_MHD_EXTERN int\nMHD_get_timeout_i (struct MHD_Daemon *daemon)\n{\n#if SIZEOF_INT >= SIZEOF_INT64_T\n  return MHD_get_timeout64s (daemon);\n#else  /* SIZEOF_INT < SIZEOF_INT64_T */\n  const int64_t to64 = MHD_get_timeout64s (daemon);\n  if (INT_MAX >= to64)\n    return (int) to64;\n  return INT_MAX;\n#endif /* SIZEOF_INT < SIZEOF_INT64_T */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe function declaration uses the macro _MHD_EXTERN which expands to the GCC-specific attribute syntax __attribute__((visibility(\"default\"))) (as defined: #define _MHD_EXTERN __attribute__((visibility(\"default\")))extern). The __attribute__ mechanism is a compiler-specific language extension (documented as such in GCC/Clang), so the code violates MISRA C 2023 Rule 1.2.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_get_timeout_i:\n#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern\n...\n#define SIZEOF_INT 4\n...\n#define SIZEOF_INT64_T 8\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Correct. The identifier _MHD_EXTERN is defined as a macro that expands to __attribute__((visibility(\"default\")))extern. The GNU-style __attribute__ syntax is a compiler-specific language extension (documented as an extension in GCC/Clang). Because the provided code expands to use that extension, it violates MISRA C 2023 Rule 1.2 (language extensions should not be used)."
}