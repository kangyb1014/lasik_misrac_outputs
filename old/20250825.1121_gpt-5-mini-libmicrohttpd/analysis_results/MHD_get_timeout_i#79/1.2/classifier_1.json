{
  "user_message": "<misra_rule>\nMISRA C 2023 Rule 1.2 is: Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<response format>\nProvide your answer with these fields.\n- is_rule_violated: whether the rule is violated or not (true/false),\n- scenario: a specific violation scenario.\n</response format>\n<target_code>\nHere is the code of MHD_get_timeout_i:\n```c\n_MHD_EXTERN int\nMHD_get_timeout_i (struct MHD_Daemon *daemon)\n{\n#if SIZEOF_INT >= SIZEOF_INT64_T\n  return MHD_get_timeout64s (daemon);\n#else  /* SIZEOF_INT < SIZEOF_INT64_T */\n  const int64_t to64 = MHD_get_timeout64s (daemon);\n  if (INT_MAX >= to64)\n    return (int) to64;\n  return INT_MAX;\n#endif /* SIZEOF_INT < SIZEOF_INT64_T */\n}\n```\n</target_code>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_get_timeout_i:\n#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern\n...\n#define SIZEOF_INT 4\n...\n#define SIZEOF_INT64_T 8\n</additional code>\n<target_code>\nHere is the code fragment that you need to analyze:\n```c\n_MHD_EXTERN int\nMHD_get_timeout_i (struct MHD_Daemon *daemon)\n{\n```\nFocus on the above code fragment and judge whether it violates the rule 1.2 or not.\n</target_code>\n",
  "is_rule_violated": true,
  "scenario": "The function declaration uses the macro _MHD_EXTERN which expands to the GCC-specific attribute syntax __attribute__((visibility(\"default\"))) (as defined: #define _MHD_EXTERN __attribute__((visibility(\"default\")))extern). The __attribute__ mechanism is a compiler-specific language extension (documented as such in GCC/Clang), so the code violates MISRA C 2023 Rule 1.2."
}