{
  "user_message": "An agent A claimed that the following MHD_get_timeout_i code violates the MISRA C 2023 rule 1.2.\n<misra_rule>\nMISRA C 2023 Rule 1.2 is Language extensions should not be used.\nYou should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\n</misra_rule>\n<target_code>\nHere is the original code of MHD_get_timeout_i.\n```c\n_MHD_EXTERN int\nMHD_get_timeout_i (struct MHD_Daemon *daemon)\n{\n#if SIZEOF_INT >= SIZEOF_INT64_T\n  return MHD_get_timeout64s (daemon);\n#else  /* SIZEOF_INT < SIZEOF_INT64_T */\n  const int64_t to64 = MHD_get_timeout64s (daemon);\n  if (INT_MAX >= to64)\n    return (int) to64;\n  return INT_MAX;\n#endif /* SIZEOF_INT < SIZEOF_INT64_T */\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nThe macro _MHD_EXTERN expands to __attribute__((visibility(\"default\")))extern. The use of GCC/Clang __attribute__((...)) (the visibility attribute) is a compiler-specific language extension (documented as such) and therefore violates MISRA C 2023 Rule 1.2.\n</scenario>\n<additional code>Here are the definitions of symbols that are close to the target function MHD_get_timeout_i:\n#define _MHD_EXTERN __attribute__((visibility(\"default\")))extern\n...\n#define SIZEOF_INT 4\n...\n#define SIZEOF_INT64_T 8\n</additional code>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "The report is correct. The macro _MHD_EXTERN expands to __attribute__((visibility(\"default\"))) extern, and __attribute__((...)) is a compiler-specific (GCC/Clang) language extension documented as such. MISRA C:2023 Rule 1.2 prohibits the use of language extensions. Therefore the code, as shown, uses a compiler extension and violates Rule 1.2."
}