{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN int\nMHD_digest_auth_check2 (struct MHD_Connection *connection,\n                        const char *realm,\n                        const char *username,\n                        const char *password,\n                        unsigned int nonce_timeout,\n                        enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthResult res;\n  enum MHD_DigestAuthMultiAlgo3 malgo3;\n\n  if (MHD_DIGEST_ALG_AUTO == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n  else if (MHD_DIGEST_ALG_MD5 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else\n    MHD_PANIC (_ (\"Wrong 'algo' value, API violation\"));\n\n  res = MHD_digest_auth_check3 (connection,\n                                realm,\n                                username,\n                                password,\n                                nonce_timeout,\n                                0, MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                malgo3);\n  if (MHD_DAUTH_OK == res)\n    return MHD_YES;\n  else if ((MHD_DAUTH_NONCE_STALE == res) || (MHD_DAUTH_NONCE_WRONG == res) ||\n           (MHD_DAUTH_NONCE_OTHER_COND == res) )\n    return MHD_INVALID_NONCE;\n  return MHD_NO;\n\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_digest_auth_check2': {'callees': ['__builtin_unreachable', 'MHD_digest_auth_check3'], 'callers': ['MHD_digest_auth_check']}, '__builtin_unreachable': {'callees': [], 'callers': ['try_ready_normal_body', 'try_ready_chunked_body', 'process_request_body', 'MHD_update_last_activity_', 'MHD_connection_handle_write', 'cleanup_connection', 'MHD_connection_handle_idle', 'MHD_set_connection_option', 'MHD_ip_count_lock', 'MHD_ip_count_unlock', 'MHD_ip_limit_del', 'new_connection_prepare_', 'new_connection_close_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'internal_suspend_connection_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_cleanup_connections', 'MHD_epoll', 'close_connection', 'MHD_quiesce_daemon', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_stop_daemon', 'MHD_create_response_from_iovec', 'MHD_destroy_response', 'MHD_increment_response_rc', 'MHD_create_post_processor', 'post_process_urlencoded', 'post_process_multipart', 'check_nonce_nc', 'calculate_add_nonce', 'digest_auth_check_all_inner', 'MHD_digest_auth_check_digest3', 'MHD_digest_auth_check2', 'MHD_digest_auth_check_digest2', 'queue_auth_required_response3_inner', 'MHD_queue_auth_fail_response2']}, 'MHD_digest_auth_check3': {'callees': ['digest_auth_check_all'], 'callers': ['MHD_digest_auth_check2', 'ahc_echo']}, 'MHD_digest_auth_check': {'callees': ['MHD_digest_auth_check2'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nA function parameter should not be modified. Note that the object referred to by a pointer parameter may be modified, but the pointer itself shall not be modified.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "MHD_PANIC",
    "_ (gettext macro)",
    "MHD_digest_auth_check3",
    "MHD_DIGEST_ALG_AUTO",
    "MHD_DIGEST_ALG_MD5",
    "MHD_DIGEST_ALG_SHA256",
    "enum MHD_DigestAuthAlgorithm",
    "MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION",
    "MHD_DIGEST_AUTH_MULT_ALGO3_MD5",
    "MHD_DIGEST_AUTH_MULT_ALGO3_SHA256",
    "enum MHD_DigestAuthMultiAlgo3",
    "MHD_DIGEST_AUTH_MULT_QOP_AUTH",
    "enum MHD_DigestAuthResult",
    "MHD_DAUTH_OK",
    "MHD_DAUTH_NONCE_STALE",
    "MHD_DAUTH_NONCE_WRONG",
    "MHD_DAUTH_NONCE_OTHER_COND",
    "MHD_YES",
    "MHD_INVALID_NONCE",
    "MHD_NO",
    "struct MHD_Connection"
  ],
  "explanation": "For checking the MISRA rule \u201ca function parameter should not be modified\u201d we must be able to prove that none of the function parameters (the pointer variables connection, realm, username, password, nonce_timeout, algo) are assigned to or otherwise altered inside MHD_digest_auth_check2. The listed symbols are required because:\n\n- MHD_PANIC: Often a macro. A macro expansion could contain assignments or other statements that reference/modify local parameter names. We need its definition to verify it does not assign to any parameter variable.\n\n- _ (gettext macro): Used as _('...') inside MHD_PANIC. Although typically harmless, it is a macro/function and its expansion could (in unusual codebases) produce side effects or references to identifiers; include to be certain it does not modify parameters.\n\n- MHD_digest_auth_check3: Called from this function. If this identifier is a macro (rather than a plain function) it might expand to code that assigns to the caller's parameter identifiers (or otherwise modifies them). We need its declaration/definition to confirm it is a normal function call (no caller-parameter modification) or to inspect any macro expansion.\n\n- MHD_DIGEST_ALG_AUTO, MHD_DIGEST_ALG_MD5, MHD_DIGEST_ALG_SHA256: Enum/constant values tested against algo. Need their definitions to confirm they are pure constants and that no macros with identical names expand to code that could modify parameters.\n\n- enum MHD_DigestAuthAlgorithm: Type definition for algo. Useful to confirm it is an enum (value semantics) and to ensure no hidden macro redefinitions exist.\n\n- MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION, MHD_DIGEST_AUTH_MULT_ALGO3_MD5, MHD_DIGEST_AUTH_MULT_ALGO3_SHA256: Constants assigned to local malgo3. Verify these are ordinary constants/enumerators (no macro side effects).\n\n- enum MHD_DigestAuthMultiAlgo3: Type definition for malgo3 to confirm ordinary enum behavior.\n\n- MHD_DIGEST_AUTH_MULT_QOP_AUTH: Constant passed to MHD_digest_auth_check3; include to ensure no macro side effects that reference/modify parameter identifiers.\n\n- enum MHD_DigestAuthResult and the values MHD_DAUTH_OK, MHD_DAUTH_NONCE_STALE, MHD_DAUTH_NONCE_WRONG, MHD_DAUTH_NONCE_OTHER_COND: Result type and values used in comparisons. Need to confirm these are pure constants and that no macros expand into code that could modify parameters.\n\n- MHD_YES, MHD_INVALID_NONCE, MHD_NO: Return constants used by this function. Include to verify they are simple constants/macros without side effects.\n\n- struct MHD_Connection: Declaration of the type pointed to by connection. While MISRA rule forbids modifying the parameter variable (the pointer) but allows modifying the object pointed to, we should inspect usages (and called macros/functions) to ensure nothing inlined tries to reassign the parameter variable or uses the literal identifier in macros. Also useful to ensure no odd macro uses the struct tag name to redefine identifiers.\n\nIn short: include definitions/declarations of the macros, called symbol (MHD_digest_auth_check3), enums and constants referenced by name so the next analyzer can confirm none of them expand to code or macros that assign to/modify the function parameters (directly or via name collision)."
}