{
  "user_message": "Target function code is:\n```c\n_MHD_EXTERN int\nMHD_digest_auth_check2 (struct MHD_Connection *connection,\n                        const char *realm,\n                        const char *username,\n                        const char *password,\n                        unsigned int nonce_timeout,\n                        enum MHD_DigestAuthAlgorithm algo)\n{\n  enum MHD_DigestAuthResult res;\n  enum MHD_DigestAuthMultiAlgo3 malgo3;\n\n  if (MHD_DIGEST_ALG_AUTO == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION;\n  else if (MHD_DIGEST_ALG_MD5 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_MD5;\n  else if (MHD_DIGEST_ALG_SHA256 == algo)\n    malgo3 = MHD_DIGEST_AUTH_MULT_ALGO3_SHA256;\n  else\n    MHD_PANIC (_ (\"Wrong 'algo' value, API violation\"));\n\n  res = MHD_digest_auth_check3 (connection,\n                                realm,\n                                username,\n                                password,\n                                nonce_timeout,\n                                0, MHD_DIGEST_AUTH_MULT_QOP_AUTH,\n                                malgo3);\n  if (MHD_DAUTH_OK == res)\n    return MHD_YES;\n  else if ((MHD_DAUTH_NONCE_STALE == res) || (MHD_DAUTH_NONCE_WRONG == res) ||\n           (MHD_DAUTH_NONCE_OTHER_COND == res) )\n    return MHD_INVALID_NONCE;\n  return MHD_NO;\n\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'MHD_digest_auth_check2': {'callees': ['__builtin_unreachable', 'MHD_digest_auth_check3'], 'callers': ['MHD_digest_auth_check']}, '__builtin_unreachable': {'callees': [], 'callers': ['try_ready_normal_body', 'try_ready_chunked_body', 'process_request_body', 'MHD_update_last_activity_', 'MHD_connection_handle_write', 'cleanup_connection', 'MHD_connection_handle_idle', 'MHD_set_connection_option', 'MHD_ip_count_lock', 'MHD_ip_count_unlock', 'MHD_ip_limit_del', 'new_connection_prepare_', 'new_connection_close_', 'new_connection_process_', 'internal_add_connection', 'new_connections_list_process_', 'internal_suspend_connection_', 'MHD_suspend_connection', 'MHD_resume_connection', 'MHD_upgraded_connection_mark_app_closed_', 'resume_suspended_connections', 'MHD_add_connection', 'MHD_accept_connection', 'MHD_cleanup_connections', 'MHD_epoll', 'close_connection', 'MHD_quiesce_daemon', 'MHD_start_daemon_va', 'close_all_connections', 'MHD_stop_daemon', 'MHD_create_response_from_iovec', 'MHD_destroy_response', 'MHD_increment_response_rc', 'MHD_create_post_processor', 'post_process_urlencoded', 'post_process_multipart', 'check_nonce_nc', 'calculate_add_nonce', 'digest_auth_check_all_inner', 'MHD_digest_auth_check_digest3', 'MHD_digest_auth_check2', 'MHD_digest_auth_check_digest2', 'queue_auth_required_response3_inner', 'MHD_queue_auth_fail_response2']}, 'MHD_digest_auth_check3': {'callees': ['digest_auth_check_all'], 'callers': ['MHD_digest_auth_check2', 'ahc_echo']}, 'MHD_digest_auth_check': {'callees': ['MHD_digest_auth_check2'], 'callers': []}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "_MHD_EXTERN",
    "MHD_PANIC",
    "_",
    "MHD_digest_auth_check3",
    "MHD_DIGEST_AUTH_MULT_QOP_AUTH",
    "MHD_DIGEST_ALG_AUTO",
    "MHD_DIGEST_ALG_MD5",
    "MHD_DIGEST_ALG_SHA256",
    "MHD_DigestAuthAlgorithm",
    "MHD_DigestAuthMultiAlgo3",
    "MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION",
    "MHD_DIGEST_AUTH_MULT_ALGO3_MD5",
    "MHD_DIGEST_AUTH_MULT_ALGO3_SHA256",
    "MHD_DigestAuthResult",
    "MHD_DAUTH_OK",
    "MHD_DAUTH_NONCE_STALE",
    "MHD_DAUTH_NONCE_WRONG",
    "MHD_DAUTH_NONCE_OTHER_COND",
    "MHD_YES",
    "MHD_NO",
    "MHD_INVALID_NONCE",
    "__builtin_unreachable"
  ],
  "explanation": "For checking MISRA C rule about language extensions you must inspect any macros, attributes or builtins that the target uses (they are common sources of compiler-specific extensions). Provide the definitions/declarations listed so the analyzer can determine whether the implementation uses compiler extensions:\n\n- _MHD_EXTERN: may expand to compiler-specific linkage/visibility attributes (e.g. __attribute__, __declspec) or other extensions \u2014 needed to detect attribute use.\n- MHD_PANIC: the code calls this macro on the 'else' path; check its expansion for builtins, __attribute__((noreturn)), asm, or other extensions (call graph shows __builtin_unreachable may be related).\n- _: often a gettext macro; its definition could hide language-extension constructs (or be defined as a macro invoking extensions).\n- MHD_digest_auth_check3: declaration/definition may carry attributes (noreturn, visibility, calling convention) or use language extensions in its prototype \u2014 need to inspect.\n- MHD_DIGEST_AUTH_MULT_QOP_AUTH: macro/constant used in the call; macro expansions can include extensions.\n- MHD_DIGEST_ALG_AUTO, MHD_DIGEST_ALG_MD5, MHD_DIGEST_ALG_SHA256: these macros/constants are compared against 'algo'; their definitions (e.g. use of large expression, typeof, or extension) must be checked.\n- MHD_DigestAuthAlgorithm: enum/type of 'algo' \u2014 its underlying definition could use compiler-specific extensions or nonstandard sized types.\n- MHD_DigestAuthMultiAlgo3 and the specific values (MHD_DIGEST_AUTH_MULT_ALGO3_ANY_NON_SESSION, MHD_DIGEST_AUTH_MULT_ALGO3_MD5, MHD_DIGEST_AUTH_MULT_ALGO3_SHA256): need to verify the enum/macro definitions for extensions.\n- MHD_DigestAuthResult and the result constants (MHD_DAUTH_OK, MHD_DAUTH_NONCE_STALE, MHD_DAUTH_NONCE_WRONG, MHD_DAUTH_NONCE_OTHER_COND): inspect for nonstandard enum tricks or extension use.\n- MHD_YES, MHD_NO, MHD_INVALID_NONCE: return values/macros \u2014 their definitions could be macros that expand to extensions or nonstandard constructs.\n- __builtin_unreachable: appears in the static call graph; include it explicitly so the analyzer can confirm whether it (or macros expanding to it) is used. __builtin_unreachable is a compiler builtin/extension and would represent a MISRA violation if used.\n\nYou do not need full unrelated library code; focus on the macro/enum/type/function declarations and macro expansions above to determine whether any language/compiler extensions are present in the target function's implementation."
}