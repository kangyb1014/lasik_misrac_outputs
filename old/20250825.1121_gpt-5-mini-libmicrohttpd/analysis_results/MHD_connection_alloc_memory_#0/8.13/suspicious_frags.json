{
  "user_message": "<misra_rule>\nThe target MISRA C 2023 Rule 8.13 is: A pointer should point to a const-qualified type whenever possible.\n\n</misra_rule>\n<instruction>\nOther agents will judge whether the code follows the MISRA C 2023 guidelines.\nThey will investigate the code fragments you give.\nYour job is to find code fragments in the code that should be investigated to check whether the code follows the MISRA C rule.\n</instruction>\n<response format>\nProvide your answer with these fields.\n- suspicious_frags: The list of suspicious code fragments in the code.\nIt should contain only the code fragments exists in the code. If you do not find any suspicious code fragments, return an empty list for suspicious_frags\n- explanation: The explanation of why other code fragments should NOT be investigated.\nIt is very important to not miss any suspicious code fragments, so please give a sufficient explanation why other code fragments should not be investigated.\nDO NOT give any explanation for the selected suspicious code fragments.\n</response format>\n<target_code>\nHere is the code of MHD_connection_alloc_memory_:\n```c\nvoid *\nMHD_connection_alloc_memory_ (struct MHD_Connection *connection,\n                              size_t size)\n{\n  struct MHD_Connection *const c = connection; /* a short alias */\n  struct MemoryPool *const pool = c->pool;     /* a short alias */\n  size_t need_to_be_freed = 0; /**< The required amount of additional free memory */\n  void *res;\n\n  res = MHD_pool_try_alloc (pool,\n                            size,\n                            &need_to_be_freed);\n  if (NULL != res)\n    return res;\n\n  if (MHD_pool_is_resizable_inplace (pool,\n                                     c->write_buffer,\n                                     c->write_buffer_size))\n  {\n    if (c->write_buffer_size - c->write_buffer_append_offset >=\n        need_to_be_freed)\n    {\n      char *buf;\n      const size_t new_buf_size = c->write_buffer_size - need_to_be_freed;\n      buf = MHD_pool_reallocate (pool,\n                                 c->write_buffer,\n                                 c->write_buffer_size,\n                                 new_buf_size);\n      mhd_assert (c->write_buffer == buf);\n      mhd_assert (c->write_buffer_append_offset <= new_buf_size);\n      mhd_assert (c->write_buffer_send_offset <= new_buf_size);\n      c->write_buffer_size = new_buf_size;\n      c->write_buffer = buf;\n    }\n    else\n      return NULL;\n  }\n  else if (MHD_pool_is_resizable_inplace (pool,\n                                          c->read_buffer,\n                                          c->read_buffer_size))\n  {\n    if (c->read_buffer_size - c->read_buffer_offset >= need_to_be_freed)\n    {\n      char *buf;\n      const size_t new_buf_size = c->read_buffer_size - need_to_be_freed;\n      buf = MHD_pool_reallocate (pool,\n                                 c->read_buffer,\n                                 c->read_buffer_size,\n                                 new_buf_size);\n      mhd_assert (c->read_buffer == buf);\n      mhd_assert (c->read_buffer_offset <= new_buf_size);\n      c->read_buffer_size = new_buf_size;\n      c->read_buffer = buf;\n    }\n    else\n      return NULL;\n  }\n  else\n    return NULL;\n  res = MHD_pool_allocate (pool, size, true);\n  mhd_assert (NULL != res); /* It has been checked that pool has enough space */\n  return res;\n}\n```\n</target_code>\nPlease find suspicious code fragments in the code and report them. Other agents can not investigate other fragments that you do not report, so it is very important to find all suspicious fragments without missing any. Report the suspicious fragments AS MUCH AS POSSIBLE.",
  "suspicious_frags": [
    "buf = MHD_pool_reallocate (pool, c->read_buffer, c->read_buffer_size, new_buf_size);",
    "struct MHD_Connection *connection,",
    "struct MemoryPool *const pool = c->pool;",
    "const size_t new_buf_size = c->write_buffer_size - need_to_be_freed;",
    "c->write_buffer = buf;",
    "buf = MHD_pool_reallocate (pool, c->write_buffer, c->write_buffer_size, new_buf_size);",
    "if (MHD_pool_is_resizable_inplace (pool, c->write_buffer, c->write_buffer_size))",
    "char *buf;",
    "else if (MHD_pool_is_resizable_inplace (pool, c->read_buffer, c->read_buffer_size))",
    "res = MHD_pool_try_alloc (pool, size, &need_to_be_freed);",
    "void *res;",
    "res = MHD_pool_allocate (pool, size, true);",
    "c->read_buffer = buf;",
    "struct MHD_Connection *const c = connection;"
  ],
  "explanation": "I flagged all points where pointers are declared, assigned, passed to pool APIs, or returned from allocation routines because Rule 8.13 requires checking whether the pointed-to types could be const-qualified. Other fragments in the function do not need investigation under Rule 8.13: they are scalar declarations (size_t variables), arithmetic/offset computations, control-flow (if/else/return), or assertion/check statements that neither declare new pointer types nor change pointer target constness. The output parameter (&need_to_be_freed) is intentionally mutable and so is not a candidate for const qualification. Similarly, assertions and comparisons operate on existing pointers but do not affect whether the pointer target should be const-qualified, so they were not included."
}