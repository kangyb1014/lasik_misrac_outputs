{
  "user_message": "An agent A claimed that the following set_self_name code violates the MISRA C 2023 rule 21.17.\n<misra_rule>\nMISRA C 2023 Rule 21.17 is Use of the string handling functions from <string.h> shall not result in accesses beyond the bounds of the objects referenced by their pointer parameters.\nThis rule strictly applies to the Standard Library functions in <string.h> such as memcpy, memmove, memset, memcmp, strcpy, strncpy, strcat, strncat, strlen, and strspn.\n</misra_rule>\n<target_code>\nHere is the original code of set_self_name.\n```c\nstatic void\nset_self_name (int argc, char *const *argv)\n{\n  if ((argc >= 1) && (NULL != argv[0]))\n  {\n    const char *last_dir_sep;\n    last_dir_sep = strrchr (argv[0], '/');\n#ifdef _WIN32\n    if (1)\n    {\n      const char *last_w32_dir_sep;\n      last_w32_dir_sep = strrchr (argv[0], '\\\\');\n      if ((NULL == last_dir_sep) ||\n          ((NULL != last_w32_dir_sep) && (last_w32_dir_sep > last_dir_sep)))\n        last_dir_sep = last_w32_dir_sep;\n    }\n#endif /* _WIN32 */\n    if (NULL != last_dir_sep)\n    {\n      size_t name_len;\n      name_len = strlen (last_dir_sep + 1);\n      if ((0 != name_len) && ((sizeof(self_name) / sizeof(char)) > name_len))\n      {\n        strcpy (self_name, last_dir_sep + 1);\n        return;\n      }\n    }\n  }\n  /* Set default name */\n  strcpy (self_name, \"perf_replies\");\n  return;\n}\n```\n</target_code>\n<response format>\nProvide your answer with these fields.\n- explanation: your evaluation of the scenario provided by the agent A.\n- is_report_correct: whether the report is correct or not (true/false). True means there is a violation.\n</response format>\n<scenario>\nThe agent A provided the following violation scenario:\nIf self_name is not large enough to hold the literal \"perf_replies\" plus the terminating NUL (strlen(\"perf_replies\") == 12, so need at least 13 bytes), the call strcpy(self_name, \"perf_replies\"); will write beyond the bounds. For example, if self_name is declared as char self_name[12] or smaller, or is a pointer to a smaller buffer, this strcpy causes a buffer overflow. No bounds check is performed before this call, so a violation of MISRA C 2023 Rule 21.17 is possible.\n</scenario>\n\n<instruction>\nJudge whether the report is correct or not.\n</instruction>\n",
  "is_report_correct": true,
  "explanation": "Agent A is correct. The call strcpy(self_name, \"perf_replies\"); in the default branch performs an unchecked copy of a 12-character string plus the terminating NUL (13 bytes total) into self_name. The code does not verify the size of self_name before this strcpy, so if self_name is smaller than 13 bytes (for example char self_name[12] or a pointer to a smaller buffer) the call can write beyond the bounds of the object and thus violate MISRA C 2023 Rule 21.17. Note: the other strcpy call (copying last_dir_sep + 1) is guarded by a check ((sizeof(self_name)/sizeof(char)) > name_len) which does ensure room for the terminating NUL, but that safe check is not applied to the literal \"perf_replies\" case, making the report of a Rule 21.17 violation correct unless self_name is otherwise guaranteed (by code not shown) to be large enough."
}