{
  "user_message": "Target function code is:\n```c\nstatic void\ncleanup_upgraded_connection (struct MHD_Connection *connection)\n{\n  struct MHD_UpgradeResponseHandle *urh = connection->urh;\n\n  if (NULL == urh)\n    return;\n#ifdef HTTPS_SUPPORT\n  /* Signal remote client the end of TLS connection by\n   * gracefully closing TLS session. */\n  if (0 != (connection->daemon->options & MHD_USE_TLS))\n    gnutls_bye (connection->tls_session,\n                GNUTLS_SHUT_WR);\n\n  if (MHD_INVALID_SOCKET != urh->mhd.socket)\n    MHD_socket_close_chk_ (urh->mhd.socket);\n\n  if (MHD_INVALID_SOCKET != urh->app.socket)\n    MHD_socket_close_chk_ (urh->app.socket);\n#endif /* HTTPS_SUPPORT */\n  connection->urh = NULL;\n  free (urh);\n}\n```\n\nStatic call graph of the target function is:\n```json\n{'cleanup_upgraded_connection': {'callees': [], 'callers': ['MHD_cleanup_connections']}, 'MHD_cleanup_connections': {'callees': ['__builtin_unreachable', 'cleanup_upgraded_connection', 'MHD_pool_destroy', 'MHD_ip_limit_del', 'MHD_destroy_response'], 'callers': ['MHD_add_connection', 'internal_run_from_select', 'MHD_run_from_select2', 'MHD_run_wait', 'MHD_polling_thread', 'close_all_connections', 'MHD_get_daemon_info']}}\n```\n\n\nList additional symbols that are required to analyze the target function to determine if the target function code violates the following MISRA C rule:\nLanguage extensions should not be used. You should report only when the code uses any language compiler extensions that are explicitly stated as an extension in compiler documentations.\nThe list will be included in the prompt for the next agent, so be concise and clear.\nExplain why each symbol is required in the analysis of the target function for the MISRA C rule.\n",
  "close_symbols": [
    "struct MHD_Connection",
    "struct MHD_UpgradeResponseHandle",
    "type of connection->daemon (struct MHD_Daemon or typedef)",
    "definition of urh->mhd and urh->app structures (their types) and the 'socket' members",
    "MHD_USE_TLS (macro/constant)",
    "HTTPS_SUPPORT (preprocessor macro)",
    "MHD_INVALID_SOCKET (macro/constant)",
    "MHD_socket_close_chk_ (declaration/definition)",
    "connection->tls_session type (e.g. gnutls_session_t) and its typedef/definition",
    "gnutls_bye (declaration/definition)",
    "GNUTLS_SHUT_WR (macro/enum/constant)"
  ],
  "explanation": "To determine whether cleanup_upgraded_connection uses any compiler language extensions, the analyzer must inspect the declarations/definitions of every identifier and macro used in the function, because language extensions (e.g. GCC __attribute__, statement-expressions, typeof, inline asm, __extension__, nested functions, builtins used via macros, etc.) may appear in those definitions rather than in this function body. For each listed symbol:\n\n- struct MHD_Connection: needed to see the exact member types (urh, daemon, tls_session) and check for any extension in the struct declaration (attributes, bit-field extensions, flexible array usage implemented as extension, etc.).\n- struct MHD_UpgradeResponseHandle: needed to examine its layout and member types (mhd, app) and whether its declaration uses any extensions.\n- type of connection->daemon (struct MHD_Daemon or typedef): required to inspect the type of the 'options' field and its declaration for any compiler-specific attributes or extensions.\n- definition of urh->mhd and urh->app structures and their 'socket' members: the code checks and passes these socket members to MHD_socket_close_chk_; the socket types or macros might be defined using extensions (e.g. unusual typedefs, attributes, or macros expanding to GCC builtins).\n- MHD_USE_TLS: macro value/definition must be inspected \u2014 it may expand to complex expressions or use compiler extensions.\n- HTTPS_SUPPORT: preprocessor conditional controlling code inclusion; its definition location may show platform-specific macros or extension uses.\n- MHD_INVALID_SOCKET: constant or macro must be inspected to ensure it is a plain integral constant and not an expression using extensions (casts with GCC-specific extensions, inline functions, etc.).\n- MHD_socket_close_chk_: inspect its declaration/definition to check whether it is a plain function or a macro that expands to code using language extensions (statement-expression ({ ... }), typeof, inline asm, GCC builtins, or attributes).\n- connection->tls_session type: the session type (likely from GnuTLS) must be checked for typedefs or declarations that use compiler extensions.\n- gnutls_bye: declaration/definition (header) must be checked for use of extension attributes or macros wrapping builtins.\n- GNUTLS_SHUT_WR: constant/enum/macro must be inspected to ensure it is not defined via an extension.\n\nIn short, examining these symbols' header/definition files will reveal whether any compiler-specific language extensions are used in the code paths referenced by cleanup_upgraded_connection. The standard C library 'free' and 'NULL' are standard and unlikely to be extension issues, so they are not included above."
}